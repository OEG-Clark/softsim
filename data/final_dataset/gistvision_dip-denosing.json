{"home.repos.pwc.inspect_result.gistvision_dip-denosing.None.tasks.showtable": [[4, 18], ["os.listdir", "sorted", "print", "pandas.read_csv", "pd.read_csv.mean", "print_result", "os.path.join"], "function", ["None"], ["@", "task", "\n", "def", "showtable", "(", "c", ",", "csv_dir", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "import", "os", "\n", "csv_list", "=", "os", ".", "listdir", "(", "csv_dir", ")", "\n", "csv_list", "=", "sorted", "(", "csv_list", ")", "\n", "\n", "print_result", "=", "lambda", "i", ",", "tmp", ":", "print", "(", "i", "[", ":", "-", "4", "]", ",", "\"\\t\\t\\t\"", ",", "(", "\"optimal stopping : %.2f,\\t\"", "+", "\"%.2f/%.2f \\t| ZCSC : %.2f, \\t %.2f/%.2f | STE %.2f/%.2f\"", ")", "%", "\n", "(", "tmp", "[", "\"max_step\"", "]", ",", "tmp", "[", "\"max_psnr\"", "]", ",", "tmp", "[", "\"max_lpips\"", "]", "*", "10", ",", "\n", "tmp", "[", "\"final_ep\"", "]", ",", "tmp", "[", "\"final_psnr\"", "]", ",", "tmp", "[", "\"final_lpips\"", "]", "*", "10", ",", "tmp", "[", "\"final_psnr_avg\"", "]", ",", "tmp", "[", "\"final_lpips_avg\"", "]", "*", "10", ",", ")", ")", "\n", "\n", "for", "i", "in", "csv_list", ":", "\n", "        ", "tmp", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "csv_dir", ",", "i", ")", ")", "\n", "tmp_mean", "=", "tmp", ".", "mean", "(", ")", "\n", "print_result", "(", "i", ",", "tmp_mean", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.main.get_net": [[23, 37], ["models.get_net", "utils.common_utils.cv2_to_torch", "print", "utils.common_utils.get_noise().type().detach", "print", "utils.common_utils.get_noise().type", "utils.common_utils.get_noise"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.get_net", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.cv2_to_torch", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.get_noise"], ["def", "get_net", "(", "img_np", ",", "noise_np", ",", "args", ")", ":", "\n", "    ", "net", "=", "models", ".", "get_net", "(", "args", ")", "\n", "\n", "if", "args", ".", "dip_type", "in", "[", "\"dip_sure\"", ",", "\"eSURE\"", ",", "\"NCV_y\"", ",", "\"eSURE_fixed\"", ",", "'eSURE_new'", ",", "'eSURE_alpha'", ",", "\"eSURE_uniform\"", ",", "\"eSURE_clip\"", ",", "\"eSURE_real\"", ",", "\"no_div\"", ",", "\"PURE\"", ",", "\"PURE_dc\"", ",", "\"dip_sure_new\"", "]", ":", "\n", "        ", "net_input", "=", "cv2_to_torch", "(", "noise_np", ",", "dtype", ")", "\n", "print", "(", "\"[*] input_type : noisy image\"", ")", "\n", "", "else", ":", "\n", "        ", "INPUT", "=", "'noise'", "\n", "input_depth", "=", "1", "if", "args", ".", "gray", "else", "3", "\n", "# For SR, the get_noise should be same as img_np", "\n", "net_input", "=", "get_noise", "(", "input_depth", ",", "INPUT", ",", "(", "img_np", ".", "shape", "[", "1", "]", ",", "img_np", ".", "shape", "[", "2", "]", ")", ")", ".", "type", "(", "dtype", ")", ".", "detach", "(", ")", "\n", "print", "(", "\"[*] input_type : noise\"", ")", "\n", "\n", "", "return", "net", ",", "net_input", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.main.get_optim": [[38, 49], ["print", "torch.optim.Adam", "net.parameters", "print", "torch.optim.AdamW", "net.parameters", "additional_utils.RAdam", "net.parameters"], "function", ["None"], ["", "def", "get_optim", "(", "name", ",", "net", ",", "lr", ",", "beta", ")", ":", "\n", "    ", "if", "name", "==", "\"adam\"", ":", "\n", "        ", "print", "(", "\"[*] optim_type : Adam\"", ")", "\n", "return", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", ",", "beta", ")", "\n", "", "elif", "name", "==", "\"adamw\"", ":", "\n", "        ", "print", "(", "\"[*] optim_type : AdamW (wd : 1e-2)\"", ")", "\n", "return", "torch", ".", "optim", ".", "AdamW", "(", "net", ".", "parameters", "(", ")", ",", "lr", ",", "beta", ")", "# default weight decay is 1e-2.", "\n", "", "elif", "name", "==", "\"RAdam\"", ":", "\n", "        ", "return", "additional_utils", ".", "RAdam", "(", "net", ".", "parameters", "(", ")", ",", "lr", ",", "beta", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.main.image_restorazation": [[50, 203], ["utils.common_utils.load_image_pair", "utils.common_utils.cv2_to_torch", "utils.common_utils.cv2_to_torch", "numpy.clip", "main.get_net", "net.train", "loss.get_loss", "main.get_optim", "os.path.join", "os.makedirs", "torch.utils.tensorboard.SummaryWriter", "range", "print", "print", "args.writer.close", "torch.cuda.empty_cache", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.MultiStepLR", "get_optim.zero_grad", "loss.get_loss.", "utils.common_utils.torch_to_cv2", "utils.denoising_utils.calculate_psnr", "utils.denoising_utils.calculate_psnr", "utils.denoising_utils.calculate_lpips", "utils.denoising_utils.calculate_lpips", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.add_scalar", "total_loss.backward", "get_optim.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.cuda.empty_cache", "utils.common_utils.save_CHW_np", "utils.common_utils.save_CHW_np", "utils.common_utils.save_CHW_np", "utils.common_utils.save_CHW_np", "open", "print", "file.split", "torch.no_grad", "torch.nn.functional.mse_loss().item", "args.writer.add_scalar", "args.writer.add_scalar", "args.writer.add_scalar", "print", "zip", "print", "zip", "print", "utils.denoising_utils.calculate_ssim", "utils.denoising_utils.calculate_ssim", "utils.denoising_utils.calculate_ssim", "utils.denoising_utils.calculate_ssim", "total_loss.item", "total_loss.item", "net.parameters", "net_param.data.copy_", "net.parameters", "net_param.data.copy_", "utils.denoising_utils.calculate_psnr", "utils.denoising_utils.calculate_lpips", "args.writer.add_scalar", "args.writer.add_scalar", "x.detach().cpu", "additional_utils.init_optim", "img_np.astype", "noisy_np.astype", "torch.nn.functional.mse_loss", "new_param.cuda", "new_param.cuda", "net.parameters", "utils.common_utils.torch_to_cv2.copy", "running_avg.copy", "net.state_dict", "torch.save", "total_loss.item", "x.detach", "os.path.join"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.load_image_pair", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.cv2_to_torch", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.cv2_to_torch", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.get_net", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.get_loss", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.main.get_optim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.torch_to_cv2", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_psnr", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_psnr", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_lpips", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_lpips", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.iterative_normalization_py.backward", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.step", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.step", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.save_CHW_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.save_CHW_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.save_CHW_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.save_CHW_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_ssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_ssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_ssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_ssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_psnr", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_lpips", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.init_optim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save"], ["", "", "def", "image_restorazation", "(", "file", ",", "args", ")", ":", "\n", "# MAIN", "\n", "    ", "stat", "=", "{", "}", "\n", "task_type", "=", "args", ".", "task_type", "\n", "\n", "# Step 1. prepare clean & degradation(noisy) pair", "\n", "img_np", ",", "noisy_np", "=", "load_image_pair", "(", "file", ",", "task_type", ",", "args", ")", "\n", "if", "args", ".", "GT_noise", ":", "\n", "        ", "args", ".", "sigma", "=", "(", "img_np", ".", "astype", "(", "np", ".", "float", ")", "-", "noisy_np", ".", "astype", "(", "np", ".", "float", ")", ")", ".", "std", "(", ")", "\n", "# np_to_torch function from utils.common_utils.", "\n", "# _np : C,H,W [0, 255] -> _torch : C,H,W [0,1] scale", "\n", "", "img_torch", "=", "cv2_to_torch", "(", "img_np", ",", "args", ".", "dtype", ")", "\n", "noise_torch", "=", "cv2_to_torch", "(", "noisy_np", ",", "args", ".", "dtype", ")", "\n", "\n", "# For PSNR measure.", "\n", "noisy_clip_np", "=", "np", ".", "clip", "(", "noisy_np", ",", "0", ",", "255", ")", "\n", "# Step 2. make model and model input", "\n", "net", ",", "net_input", "=", "get_net", "(", "img_np", ",", "noisy_np", ",", "args", ")", "\n", "net", ".", "train", "(", ")", "\n", "\n", "# Step 3. set loss function.", "\n", "cal_loss", "=", "loss", ".", "get_loss", "(", "net", ",", "net_input", ",", "args", ")", "\n", "optimizer", "=", "get_optim", "(", "args", ".", "optim", ",", "net", ",", "args", ".", "lr", ",", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ")", "\n", "if", "args", ".", "force_steplr", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "gamma", "=", ".9", ",", "step_size", "=", "300", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "2000", ",", "3000", "]", ",", "gamma", "=", "0.5", ")", "\n", "\n", "# Step 4. optimization and inference.", "\n", "# Hyper_param for Learning", "\n", "", "psnr_noisy_last", "=", "0", "\n", "psnr_gt_running", "=", "0", "\n", "\n", "save_dir", "=", "args", ".", "save_dir", "\n", "\n", "# Ensemble methods.", "\n", "running_avg", "=", "None", "\n", "running_avg_ratio", "=", "args", ".", "running_avg_ratio", "\n", "\n", "image_name", "=", "file", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "np_save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "image_name", ")", "\n", "os", ".", "makedirs", "(", "np_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "stat", "[", "\"max_psnr\"", "]", "=", "0", "\n", "stat", "[", "\"max_ssim\"", "]", "=", "0", "\n", "stat", "[", "\"NUM_Backtracking\"", "]", "=", "0", "\n", "\n", "args", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "\"runs/%s/%s\"", "%", "(", "args", ".", "exp_tag", ",", "args", ".", "desc", "+", "image_name", ")", ")", "\n", "for", "ep", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ",", "out", "=", "cal_loss", "(", "net_input", ",", "noise_torch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mse_loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "out", ",", "img_torch", ")", ".", "item", "(", ")", "\n", "diff_loss", "=", "total_loss", ".", "item", "(", ")", "-", "mse_loss", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"loss/used_loss\"", ",", "total_loss", ".", "item", "(", ")", ",", "global_step", "=", "ep", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"loss/MSE_loss\"", ",", "mse_loss", ",", "global_step", "=", "ep", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"loss/diff\"", ",", "diff_loss", ",", "global_step", "=", "ep", ")", "\n", "\n", "# _torch : C,H,W [0,1] scale => _np : C,H,W [0, 255]", "\n", "#out = torch_to_cv2(net(net_input))", "\n", "", "out", "=", "torch_to_cv2", "(", "out", ")", "\n", "psnr_noisy", "=", "calculate_psnr", "(", "noisy_clip_np", ",", "out", ")", "\n", "psnr_gt", "=", "calculate_psnr", "(", "img_np", ",", "out", ")", "\n", "lpips_noisy", "=", "calculate_lpips", "(", "noisy_clip_np", ",", "out", ",", "args", ".", "lpips", ")", "\n", "lpips_gt", "=", "calculate_lpips", "(", "img_np", ",", "out", ",", "args", ".", "lpips", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"psnr/noisy_to_out\"", ",", "psnr_noisy", ",", "global_step", "=", "ep", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"psnr/clean_to_out\"", ",", "psnr_gt", ",", "global_step", "=", "ep", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"lpips/noisy_to_out\"", ",", "lpips_noisy", ",", "global_step", "=", "ep", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"lpips/clean_to_out\"", ",", "lpips_gt", ",", "global_step", "=", "ep", ")", "\n", "\n", "if", "total_loss", "<", "0", ":", "\n", "            ", "print", "(", "'\\nLoss is less than 0'", ")", "\n", "for", "new_param", ",", "net_param", "in", "zip", "(", "last_net", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "net_param", ".", "data", ".", "copy_", "(", "new_param", ".", "cuda", "(", ")", ")", "\n", "", "break", "\n", "", "if", "(", "psnr_noisy", "-", "psnr_noisy_last", "<", "-", "5", ")", "and", "(", "ep", ">", "5", ")", ":", "\n", "            ", "print", "(", "'\\nFalling back to previous checkpoint.'", ")", "\n", "for", "new_param", ",", "net_param", "in", "zip", "(", "last_net", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "net_param", ".", "data", ".", "copy_", "(", "new_param", ".", "cuda", "(", ")", ")", "\n", "", "stat", "[", "\"NUM_Backtracking\"", "]", "+=", "1", "\n", "if", "stat", "[", "\"NUM_Backtracking\"", "]", ">", "10", ":", "\n", "                ", "break", "\n", "# continue", "\n", "", "", "else", ":", "\n", "# Running ensemble", "\n", "            ", "if", "True", ":", "#(ep % 50 == 0) and", "\n", "                ", "if", "running_avg", "is", "None", ":", "\n", "                    ", "running_avg", "=", "out", "\n", "", "else", ":", "\n", "                    ", "running_avg", "=", "running_avg", "*", "running_avg_ratio", "+", "out", "*", "(", "1", "-", "running_avg_ratio", ")", "\n", "", "psnr_gt_running", "=", "calculate_psnr", "(", "img_np", ",", "running_avg", ")", "\n", "lpips_gt_running", "=", "calculate_lpips", "(", "img_np", ",", "running_avg", ",", "args", ".", "lpips", ",", "color", "=", "\"BGR\"", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"psnr/clean_to_avg\"", ",", "psnr_gt_running", ",", "global_step", "=", "ep", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "\"lpips/clean_to_avg\"", ",", "lpips_gt_running", ",", "global_step", "=", "ep", ")", "\n", "\n", "if", "(", "stat", "[", "\"max_psnr\"", "]", "<=", "psnr_gt", ")", ":", "\n", "                    ", "stat", "[", "\"max_step\"", "]", "=", "ep", "\n", "stat", "[", "\"max_psnr\"", "]", "=", "psnr_gt", "\n", "stat", "[", "\"max_psnr_avg\"", "]", "=", "psnr_gt_running", "\n", "stat", "[", "\"max_lpips_avg\"", "]", "=", "lpips_gt_running", "\n", "stat", "[", "\"max_lpips\"", "]", "=", "lpips_gt", "\n", "max_out", ",", "maxavg_out", "=", "out", ".", "copy", "(", ")", ",", "running_avg", ".", "copy", "(", ")", "\n", "\n", "#save file", "\n", "if", "args", ".", "save_np", ":", "\n", "                        ", "state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "os", ".", "path", ".", "join", "(", "np_save_dir", ",", "\"max_psnr_state_dict.pth\"", ")", ")", "\n", "\n", "", "", "", "if", "(", "ep", "==", "200", "or", "ep", "==", "10", ")", "and", "(", "psnr_gt_running", "<", "psnr_gt", ")", ":", "\n", "                ", "running_avg", "=", "None", "\n", "\n", "# args.writer.add_image(\"result/gt_noise_out_avg\", np.concatenate([img_np, noisy_np, out, running_avg], axis=2), ep)", "\n", "", "print", "(", "'Iteration %05d    total loss / MSE / diff %f / %f / %f   PSNR_noisy: %f   psnr_gt: %f PSNR_gt_sm: %f'", "%", "(", "\n", "ep", ",", "total_loss", ".", "item", "(", ")", ",", "mse_loss", ",", "diff_loss", ",", "psnr_noisy", ",", "psnr_gt", ",", "psnr_gt_running", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "last_net", "=", "[", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "x", "in", "net", ".", "parameters", "(", ")", "]", "\n", "psnr_noisy_last", "=", "psnr_noisy", "\n", "", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "args", ".", "optim_init", ">", "0", ":", "\n", "            ", "if", "ep", "%", "args", ".", "optim_init", "==", "0", ":", "\n", "                ", "additional_utils", ".", "init_optim", "(", "net", ",", "optimizer", ")", "\n", "\n", "", "", "", "stat", "[", "\"final_ep\"", "]", "=", "ep", "\n", "stat", "[", "\"final_psnr\"", "]", "=", "psnr_gt", "\n", "stat", "[", "\"final_psnr_avg\"", "]", "=", "psnr_gt_running", "\n", "stat", "[", "\"final_lpips_avg\"", "]", "=", "lpips_gt_running", "\n", "stat", "[", "\"final_lpips\"", "]", "=", "lpips_gt", "\n", "\n", "\n", "# Make final images", "\n", "if", "True", ":", "\n", "        ", "save_CHW_np", "(", "save_dir", "+", "\"/%s.png\"", "%", "(", "image_name", ")", ",", "out", ")", "\n", "save_CHW_np", "(", "save_dir", "+", "\"/%s_avg.png\"", "%", "(", "image_name", ")", ",", "running_avg", ")", "\n", "save_CHW_np", "(", "save_dir", "+", "\"/%s_max.png\"", "%", "(", "image_name", ")", ",", "max_out", ")", "\n", "save_CHW_np", "(", "save_dir", "+", "\"/%s_max_avg.png\"", "%", "(", "image_name", ")", ",", "maxavg_out", ")", "\n", "\n", "if", "args", ".", "gray", ":", "\n", "            ", "stat", "[", "\"final_ssim\"", "]", "=", "calculate_ssim", "(", "img_np", ",", "out", ")", "\n", "stat", "[", "\"final_ssim_avg\"", "]", "=", "calculate_ssim", "(", "img_np", ",", "running_avg", ")", "\n", "stat", "[", "\"max_ssim\"", "]", "=", "calculate_ssim", "(", "img_np", ",", "max_out", ")", "\n", "stat", "[", "\"max_ssim_avg\"", "]", "=", "calculate_ssim", "(", "img_np", ",", "maxavg_out", ")", "\n", "", "log_file", "=", "open", "(", "save_dir", "+", "\"/%s_log.txt\"", "%", "(", "image_name", ")", ",", "\"w\"", ")", "\n", "print", "(", "stat", ",", "file", "=", "log_file", ")", "\n", "", "print", "(", "\"%s psnr clean_out : %.2f, %.2f noise_out : %.2f, max %.2f, %.2f\"", "%", "(", "\n", "image_name", ",", "psnr_gt_running", ",", "lpips_gt_running", ",", "psnr_noisy", ",", "stat", "[", "\"max_psnr\"", "]", ",", "stat", "[", "\"max_lpips\"", "]", ")", ",", "\" \"", "*", "100", ")", "\n", "print", "(", "stat", ")", "\n", "args", ".", "writer", ".", "close", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "stat", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.main.read_dataset_file_list": [[205, 212], ["glob.glob", "glob.glob", "glob.glob"], "function", ["None"], ["", "def", "read_dataset_file_list", "(", "eval_data", ")", ":", "\n", "    ", "dataset_dir", "=", "\"./testset/%s/\"", "%", "eval_data", "\n", "file_list1", "=", "glob", ".", "glob", "(", "dataset_dir", "+", "\"*.tif\"", ")", "\n", "file_list2", "=", "glob", ".", "glob", "(", "dataset_dir", "+", "\"*.png\"", ")", "\n", "file_list3", "=", "glob", ".", "glob", "(", "dataset_dir", "+", "\"*.JPG\"", ")", "\n", "file_list", "=", "file_list1", "+", "file_list2", "+", "file_list3", "\n", "return", "file_list", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.__init__": [[7, 19], ["torch.Module.__init__", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "net_input.detach().clone", "net_input.detach"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "net_input", ",", "args", ")", ":", "\n", "        ", "super", "(", "DIPloss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "dip_type", "=", "args", ".", "dip_type", "\n", "self", ".", "reg_noise_std", "=", "args", ".", "reg_noise_std", "\n", "self", ".", "task_type", "=", "args", ".", "task_type", "\n", "self", ".", "dtype", "=", "args", ".", "dtype", "\n", "self", ".", "mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "net_input_saved", "=", "net_input", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "self", ".", "cnt", "=", "0", "\n", "self", ".", "epsilon_decay", "=", "False", "\n", "self", ".", "reduction", "=", "\"mean\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.set_sigma": [[20, 28], ["loss.DIPloss.eps_tf.clone", "torch.ones().reshape", "torch.ones().reshape", "torch.ones().reshape", "torch.ones().reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "set_sigma", "(", "self", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "sigma_y", "=", "sigma", "\n", "self", ".", "sigma_z", "=", "sigma", "*", "self", ".", "arg_sigma_z", "\n", "self", ".", "eps_y", "=", "torch", ".", "ones", "(", "[", "1", "]", ",", "device", "=", "\"cuda\"", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "*", "self", ".", "sigma_y", "/", "255.0", "\n", "self", ".", "eps_tf", "=", "self", ".", "eps_y", "*", "self", ".", "arg_epsilon", "\n", "self", ".", "eps_tf_init", "=", "self", ".", "eps_tf", ".", "clone", "(", ")", "\n", "self", ".", "vary", "=", "(", "self", ".", "eps_y", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.DIP": [[29, 35], ["loss.DIPloss.inference", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.rand_like().normal_", "torch.rand_like().normal_", "torch.rand_like().normal_", "torch.rand_like().normal_", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.inference"], ["", "def", "DIP", "(", "self", ",", "net_input", ",", "noisy_torch", ")", ":", "\n", "        ", "if", "self", ".", "reg_noise_std", ">", "0", ":", "\n", "            ", "net_input", "=", "self", ".", "net_input_saved", "+", "(", "torch", ".", "rand_like", "(", "self", ".", "net_input_saved", ")", ".", "normal_", "(", ")", "*", "self", ".", "reg_noise_std", ")", "\n", "", "out", "=", "self", ".", "inference", "(", "net_input", ")", "\n", "total_loss", "=", "torch", ".", "mean", "(", "(", "out", "-", "noisy_torch", ")", "**", "2", ")", "\n", "return", "total_loss", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.SURE": [[36, 44], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "SURE", "(", "self", ",", "output", ",", "target", ",", "divergence", ",", "sigma", ")", ":", "\n", "        ", "batch", ",", "c", ",", "h", ",", "w", "=", "output", ".", "shape", "\n", "divergence", "=", "divergence", "*", "sigma", "\n", "mse", "=", "(", "output", "-", "target", ")", "**", "2", "\n", "esure", "=", "mse", "+", "2", "*", "divergence", "-", "sigma", "\n", "esure", "=", "torch", ".", "sum", "(", "esure", ")", "\n", "esure", "=", "esure", "if", "self", ".", "reduction", "==", "\"sum\"", "else", "esure", "/", "(", "h", "*", "w", "*", "c", ")", "\n", "return", "esure", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.DIP_SURE": [[45, 58], ["net_input.requires_grad_.requires_grad_.requires_grad_", "loss.DIPloss.inference", "loss.DIPloss.divergence", "loss.DIPloss.SURE", "np.random.uniform", "torch.randn_like().type", "torch.randn_like().type", "torch.randn_like().type", "torch.randn_like().type", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.inference", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.SURE"], ["", "def", "DIP_SURE", "(", "self", ",", "net_input", ",", "noisy_torch", ")", ":", "\n", "        ", "if", "self", ".", "sigma_z", ">", "0", "or", "self", ".", "uniform_sigma", ":", "\n", "            ", "if", "self", ".", "uniform_sigma", ":", "\n", "                ", "self", ".", "eSigma", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "self", ".", "sigma_z", ")", "/", "255.0", "\n", "", "else", ":", "\n", "                ", "self", ".", "eSigma", "=", "self", ".", "sigma_z", "/", "255.0", "\n", "", "net_input", "=", "self", ".", "net_input_saved", "+", "torch", ".", "randn_like", "(", "net_input", ")", ".", "type", "(", "self", ".", "dtype", ")", "*", "self", ".", "eSigma", "\n", "", "net_input", "=", "net_input", ".", "requires_grad_", "(", ")", "\n", "\n", "out", "=", "self", ".", "inference", "(", "net_input", ")", "#.contiguous(memory_format=torch.channels_last)", "\n", "divergence", "=", "self", ".", "divergence", "(", "net_input", ",", "out", ")", "\n", "total_loss", "=", "self", ".", "SURE", "(", "out", ",", "noisy_torch", ",", "divergence", ",", "self", ".", "vary", ")", "\n", "return", "total_loss", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.divergence_ty": [[59, 66], ["torch.randn_like().type", "torch.randn_like().type", "torch.randn_like().type", "torch.randn_like().type", "loss.DIPloss.inference", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.inference"], ["", "def", "divergence_ty", "(", "self", ",", "net_input", ",", "out", ")", ":", "\n", "        ", "if", "self", ".", "epsilon_decay", ":", "\n", "            ", "self", ".", "eps_tf", "=", "self", ".", "eps_tf_init", "*", "(", "0.9", "**", "(", "self", ".", "cnt", "//", "200", ")", ")", "\n", "", "b_prime", "=", "torch", ".", "randn_like", "(", "net_input", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "out_ptb", "=", "self", ".", "inference", "(", "net_input", "+", "b_prime", "*", "self", ".", "eps_tf", ")", "\n", "divergence", "=", "(", "b_prime", "*", "(", "out_ptb", "-", "out", ")", ")", "/", "self", ".", "eps_tf", "\n", "return", "divergence", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.divergence_new": [[67, 74], ["torch.randn_like().type", "torch.randn_like().type", "torch.randn_like().type", "torch.randn_like().type", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "def", "divergence_new", "(", "self", ",", "net_input", ",", "out", ")", ":", "\n", "        ", "b_prime", "=", "torch", ".", "randn_like", "(", "net_input", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "nh_y", "=", "torch", ".", "sum", "(", "b_prime", "*", "out", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "vector", "=", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "out", ")", "\n", "divergence", "=", "b_prime", "*", "torch", ".", "autograd", ".", "grad", "(", "nh_y", ",", "net_input", ",", "grad_outputs", "=", "vector", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "return", "divergence", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.inference": [[75, 77], ["loss.DIPloss.net"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.forward": [[78, 81], ["loss.DIPloss.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "self", ".", "cnt", "+=", "1", "\n", "return", "self", ".", "loss", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.Denoising_loss.__init__": [[83, 124], ["loss.DIPloss.__init__", "loss.Denoising_loss.set_sigma", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.set_sigma"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "net_input", ",", "args", ")", ":", "\n", "        ", "super", "(", "Denoising_loss", ",", "self", ")", ".", "__init__", "(", "net", ",", "net_input", ",", "args", ")", "\n", "# parameter related to SURE.", "\n", "self", ".", "arg_sigma_z", "=", "args", ".", "sigma_z", "\n", "self", ".", "arg_epsilon", "=", "args", ".", "epsilon", "\n", "self", ".", "set_sigma", "(", "args", ".", "sigma", ")", "\n", "self", ".", "cnt", "=", "0", "\n", "self", ".", "epsilon_decay", "=", "False", "\n", "self", ".", "reduction", "=", "\"mean\"", "\n", "\n", "print", "(", "\"[*] loss type : %s\"", "%", "args", ".", "dip_type", ")", "\n", "print", "(", "\"[*] sigma : %.2f\"", "%", "self", ".", "sigma", ")", "\n", "print", "(", "\"[*] sigma_z : %.2f\"", "%", "self", ".", "sigma_z", ")", "\n", "\n", "self", ".", "divergence", "=", "self", ".", "divergence_ty", "\n", "self", ".", "uniform_sigma", "=", "False", "\n", "self", ".", "clip_divergence", "=", "False", "\n", "if", "self", ".", "dip_type", "==", "\"dip\"", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "DIP", "\n", "", "elif", "self", ".", "dip_type", "==", "\"dip_sure\"", ":", "\n", "            ", "self", ".", "sigma_z", "=", "0", "\n", "self", ".", "loss", "=", "self", ".", "DIP_SURE", "\n", "", "elif", "self", ".", "dip_type", "==", "\"dip_sure_new\"", ":", "\n", "            ", "self", ".", "sigma_z", "=", "0", "\n", "self", ".", "loss", "=", "self", ".", "DIP_SURE", "\n", "self", ".", "divergence", "=", "self", ".", "divergence_new", "\n", "", "elif", "self", ".", "dip_type", "==", "\"eSURE\"", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "DIP_SURE", "\n", "", "elif", "self", ".", "dip_type", "==", "\"eSURE_alpha\"", ":", "\n", "            ", "self", ".", "epsilon_decay", "=", "True", "\n", "self", ".", "loss", "=", "self", ".", "DIP_SURE", "\n", "", "elif", "self", ".", "dip_type", "==", "\"eSURE_new\"", ":", "\n", "            ", "self", ".", "divergence", "=", "self", ".", "divergence_new", "\n", "self", ".", "loss", "=", "self", ".", "DIP_SURE", "\n", "", "elif", "self", ".", "dip_type", "==", "\"eSURE_uniform\"", ":", "\n", "            ", "self", ".", "uniform_sigma", "=", "True", "\n", "self", ".", "divergence", "=", "self", ".", "divergence_new", "\n", "self", ".", "loss", "=", "self", ".", "DIP_SURE", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[!] Not defined loss function.\"", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.Poisson_loss.__init__": [[126, 161], ["loss.DIPloss.__init__", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "net_input.detach().clone", "print", "print", "net_input.detach"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "net_input", ",", "args", ")", ":", "\n", "        ", "super", "(", "Poisson_loss", ",", "self", ")", ".", "__init__", "(", "net", ",", "net_input", ",", "args", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "dip_type", "=", "args", ".", "dip_type", "\n", "self", ".", "reg_noise_std", "=", "args", ".", "reg_noise_std", "\n", "self", ".", "task_type", "=", "args", ".", "task_type", "\n", "self", ".", "dtype", "=", "args", ".", "dtype", "\n", "self", ".", "mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "net_input_saved", "=", "net_input", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "self", ".", "arg_sigma_z", "=", "args", ".", "sigma_z", "\n", "self", ".", "arg_epsilon", "=", "args", ".", "epsilon", "\n", "self", ".", "divergence", "=", "self", ".", "divergence_ty", "\n", "self", ".", "uniform_sigma", "=", "False", "\n", "self", ".", "clip_divergence", "=", "False", "\n", "\n", "# parameter related to SURE.", "\n", "self", ".", "scale", "=", "args", ".", "scale", "\n", "self", ".", "eps", "=", "0.01", "\n", "self", ".", "epsilon_decay", "=", "False", "\n", "self", ".", "reduction", "=", "\"mean\"", "\n", "\n", "print", "(", "\"[*] loss type : %s\"", "%", "args", ".", "dip_type", ")", "\n", "print", "(", "\"[*] Poisson scale : %.2f\"", "%", "self", ".", "scale", ")", "\n", "# print(\"[*] sigma_z : %.2f\" % self.sigma_z)", "\n", "self", ".", "uniform_sigma", "=", "False", "\n", "self", ".", "eps_decay", "=", "False", "\n", "if", "self", ".", "dip_type", "==", "\"dip\"", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "DIP", "\n", "", "elif", "self", ".", "dip_type", "==", "\"PURE\"", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "DIP_PURE", "\n", "", "elif", "self", ".", "dip_type", "==", "\"PURE_dc\"", ":", "\n", "            ", "self", ".", "eps", "=", "0.1", "\n", "self", ".", "eps_decay", "=", "True", "\n", "self", ".", "loss", "=", "self", ".", "DIP_PURE", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.Poisson_loss.PURE": [[162, 175], ["loss.Poisson_loss.inference", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.inference"], ["", "", "def", "PURE", "(", "self", ",", "output", ",", "target", ",", "scale", ")", ":", "\n", "        ", "Y_", "=", "output", "\n", "Y", "=", "target", "\n", "b_prime", "=", "2", "*", "(", "torch", ".", "randint_like", "(", "target", ",", "0", ",", "2", ")", "-", "0.5", ")", "# [-1, 1] random vector", "\n", "if", "self", ".", "eps_decay", "and", "(", "self", ".", "cnt", "%", "20", "==", "9", ")", ":", "\n", "            ", "self", ".", "eps", "*=", "0.9", "\n", "", "Z", "=", "Y", "+", "self", ".", "eps", "*", "b_prime", "\n", "Z_", "=", "self", ".", "inference", "(", "Z", ")", "\n", "batch", ",", "c", ",", "h", ",", "w", "=", "output", ".", "shape", "\n", "mse", "=", "torch", ".", "mean", "(", "(", "Y", "-", "Y_", ")", "**", "2", ")", "\n", "T1", "=", "-", "scale", "*", "torch", ".", "mean", "(", "target", ")", "# / batch", "\n", "gradient", "=", "2", "*", "(", "scale", "/", "(", "self", ".", "eps", "*", "batch", ")", ")", "*", "torch", ".", "mean", "(", "(", "b_prime", "*", "Y", ")", "*", "(", "Z_", "-", "Y_", ")", ")", "\n", "return", "mse", "+", "T1", "+", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.Poisson_loss.DIP_PURE": [[176, 180], ["loss.Poisson_loss.inference", "loss.Poisson_loss.PURE"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.DIPloss.inference", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.Poisson_loss.PURE"], ["", "def", "DIP_PURE", "(", "self", ",", "net_input", ",", "noisy_torch", ")", ":", "\n", "        ", "out", "=", "self", ".", "inference", "(", "net_input", ")", "# .contiguous(memory_format=torch.channels_last)", "\n", "total_loss", "=", "self", ".", "PURE", "(", "out", ",", "noisy_torch", ",", "self", ".", "scale", ")", "\n", "return", "total_loss", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.loss.get_loss": [[182, 190], ["print", "loss.Denoising_loss", "loss.Poisson_loss"], "function", ["None"], ["", "", "def", "get_loss", "(", "net", ",", "net_input", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "task_type", "==", "\"denoising\"", ":", "\n", "        ", "print", "(", "\"[!] Denoising mode setup.\"", ")", "\n", "return", "Denoising_loss", "(", "net", ",", "net_input", ",", "args", ")", "\n", "", "elif", "args", ".", "task_type", "==", "\"poisson\"", ":", "\n", "        ", "return", "Poisson_loss", "(", "net", ",", "net_input", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.config_parser.main_parser": [[4, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "parser.add_subparsers.add_parser", "task_parsers.add_parser.add_argument", "task_parsers.add_parser.add_argument", "task_parsers.add_parser.add_argument", "task_parsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "task_parsers.add_parser.add_argument", "task_parsers.add_parser.add_argument", "task_parsers.add_parser.add_argument", "task_parsers.add_parser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "main_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# shared param", "\n", "task_parsers", "=", "parser", ".", "add_subparsers", "(", "dest", "=", "'task_type'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dip_type\"", ",", "default", "=", "\"dip\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gray\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# denoising param", "\n", "denoising_parser", "=", "task_parsers", ".", "add_parser", "(", "'denoising'", ")", "\n", "denoising_parser", ".", "add_argument", "(", "\"--eval_data\"", ",", "default", "=", "\"CSet9\"", ")", "\n", "denoising_parser", ".", "add_argument", "(", "\"--sigma\"", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "denoising_parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "denoising_parser", ".", "add_argument", "(", "'--reg_noise_std'", ",", "default", "=", "1.", "/", "20.", ",", "type", "=", "float", ")", "\n", "\n", "# poisson param", "\n", "deblur_parser", "=", "task_parsers", ".", "add_parser", "(", "'poisson'", ")", "\n", "deblur_parser", ".", "add_argument", "(", "\"--eval_data\"", ",", "default", "=", "\"MNIST\"", ")", "\n", "deblur_parser", ".", "add_argument", "(", "\"--scale\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "deblur_parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "deblur_parser", ".", "add_argument", "(", "'--reg_noise_std'", ",", "default", "=", "0.01", ",", "type", "=", "float", ")", "\n", "\n", "# network param", "\n", "parser", ".", "add_argument", "(", "'--input_depth'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_layer'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--act_func'", ",", "default", "=", "\"soft\"", ",", "type", "=", "str", ")", "# temporal experiment", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "default", "=", "\"RAdam\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sigma_z'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--net_type\"", ",", "default", "=", "\"s2s\"", ",", "type", "=", "str", ")", "\n", "\n", "# Additional methods.", "\n", "parser", ".", "add_argument", "(", "\"--force_steplr\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extending\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# BatchNorm methods.", "\n", "parser", ".", "add_argument", "(", "\"--bn_type\"", ",", "default", "=", "\"bn\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn_fix_epoch\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "\n", "# Extra_method related to DIP.", "\n", "parser", ".", "add_argument", "(", "'--running_avg_ratio'", ",", "default", "=", "0.99", ",", "type", "=", "float", ")", "\n", "\n", "# power of perturbation in divergence.", "\n", "parser", ".", "add_argument", "(", "\"--epsilon\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "# 1.6e-4", "\n", "parser", ".", "add_argument", "(", "'--desc'", ",", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_tag\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--show_every'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_init'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_np'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "# Momentum.", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "default", "=", "0.999", ",", "type", "=", "float", ")", "# Adaptive learning rate.", "\n", "parser", ".", "add_argument", "(", "'--noisy_map'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--GT_noise'", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "desc", "=", "\"_\"", "+", "args", ".", "desc", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.__init__": [[49, 67], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "if", "isinstance", "(", "params", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "params", ")", ">", "0", "and", "isinstance", "(", "params", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "for", "param", "in", "params", ":", "\n", "                ", "if", "'betas'", "in", "param", "and", "(", "param", "[", "'betas'", "]", "[", "0", "]", "!=", "betas", "[", "0", "]", "or", "param", "[", "'betas'", "]", "[", "1", "]", "!=", "betas", "[", "1", "]", ")", ":", "\n", "                    ", "param", "[", "'buffer'", "]", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "", "", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", ")", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.__setstate__": [[68, 70], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.step": [[71, 140], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "group", "[", "'buffer'", "]", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "\n", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "-", "1", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "step_size", ">", "0", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.fix_running_statistic": [[9, 20], ["net.modules", "print", "isinstance", "isinstance"], "function", ["None"], ["def", "fix_running_statistic", "(", "net", ")", ":", "\n", "    ", "cnt", "=", "0", "\n", "for", "i", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "i", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "i", ".", "track_running_stats", "=", "False", "\n", "cnt", "+=", "1", "\n", "", "elif", "isinstance", "(", "i", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "            ", "i", ".", "track_running_stats", "=", "False", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "print", "(", "\"[*] %d Batchnorm is changed to fix statistic\"", "%", "cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.data_aug_with_mode": [[22, 36], ["torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["None"], ["", "def", "data_aug_with_mode", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param img: Should be 4-dim tensor[B, C, H, W]\n    :param mode:\n    :return:\n    \"\"\"", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "3", "]", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.init_optim": [[38, 46], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters"], "function", ["None"], ["", "", "def", "init_optim", "(", "model", ",", "optim", ")", ":", "\n", "    ", "group", "=", "optim", ".", "param_groups", "[", "0", "]", "\n", "for", "n", "in", "[", "x", "for", "x", "in", "model", ".", "parameters", "(", ")", "]", ":", "\n", "        ", "state", "=", "optim", ".", "state", "[", "n", "]", "\n", "state", "[", "\"step\"", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "n", ",", "memory_format", "=", "torch", ".", "preserve_format", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "n", ",", "memory_format", "=", "torch", ".", "preserve_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.parse_utils.load_parse": [[4, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.parse_args", "open", "json.load"], "function", ["None"], ["def", "load_parse", "(", "f_name", ")", ":", "\n", "    ", "if", "not", "'.'", "in", "f_name", ":", "\n", "        ", "f_name", "+=", "'.json'", "\n", "", "parser", "=", "ArgumentParser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "f_name", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "args", ".", "__dict__", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.parse_utils.save_parse": [[13, 18], ["open", "json.dump"], "function", ["None"], ["", "def", "save_parse", "(", "f_name", ",", "args", ")", ":", "\n", "    ", "if", "not", "'.'", "in", "f_name", ":", "\n", "        ", "f_name", "+=", "'.json'", "\n", "", "with", "open", "(", "f_name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.fill_noise": [[7, 15], ["x.uniform_", "x.normal_"], "function", ["None"], ["def", "fill_noise", "(", "x", ",", "noise_type", ")", ":", "\n", "    ", "\"\"\"Fills tensor `x` with noise of type `noise_type`.\"\"\"", "\n", "if", "noise_type", "==", "'u'", ":", "\n", "        ", "x", ".", "uniform_", "(", ")", "\n", "", "elif", "noise_type", "==", "'n'", ":", "\n", "        ", "x", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.get_noise": [[16, 43], ["isinstance", "torch.zeros", "common_utils.fill_noise", "numpy.meshgrid", "numpy.concatenate", "common_utils.np_to_torch", "numpy.arange", "float", "numpy.arange", "float"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.fill_noise", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_torch"], ["", "", "def", "get_noise", "(", "input_depth", ",", "method", ",", "spatial_size", ",", "noise_type", "=", "'u'", ",", "var", "=", "1.", "/", "10", ")", ":", "\n", "    ", "\"\"\"Returns a pytorch.Tensor of size (1 x `input_depth` x `spatial_size[0]` x `spatial_size[1]`) \n    initialized in a specific way.\n    Args:\n        input_depth: number of channels in the tensor\n        method: `noise` for fillting tensor with noise; `meshgrid` for np.meshgrid\n        spatial_size: spatial size of the tensor to initialize\n        noise_type: 'u' for uniform; 'n' for normal\n        var: a factor, a noise will be multiplicated by. Basically it is standard deviation scaler. \n    \"\"\"", "\n", "if", "isinstance", "(", "spatial_size", ",", "int", ")", ":", "\n", "        ", "spatial_size", "=", "(", "spatial_size", ",", "spatial_size", ")", "\n", "", "if", "method", "==", "'noise'", ":", "\n", "        ", "shape", "=", "[", "1", ",", "input_depth", ",", "spatial_size", "[", "0", "]", ",", "spatial_size", "[", "1", "]", "]", "\n", "net_input", "=", "torch", ".", "zeros", "(", "shape", ")", "\n", "\n", "fill_noise", "(", "net_input", ",", "noise_type", ")", "\n", "net_input", "*=", "var", "\n", "", "elif", "method", "==", "'meshgrid'", ":", "\n", "        ", "assert", "input_depth", "==", "2", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "0", ",", "spatial_size", "[", "1", "]", ")", "/", "float", "(", "spatial_size", "[", "1", "]", "-", "1", ")", ",", "np", ".", "arange", "(", "0", ",", "spatial_size", "[", "0", "]", ")", "/", "float", "(", "spatial_size", "[", "0", "]", "-", "1", ")", ")", "\n", "meshgrid", "=", "np", ".", "concatenate", "(", "[", "X", "[", "None", ",", ":", "]", ",", "Y", "[", "None", ",", ":", "]", "]", ")", "\n", "net_input", "=", "np_to_torch", "(", "meshgrid", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "return", "net_input", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.np_to_torch": [[44, 50], ["torch.from_numpy"], "function", ["None"], ["", "def", "np_to_torch", "(", "img_np", ")", ":", "\n", "    ", "'''Converts image in numpy.array to torch.Tensor.\n\n    From C x W x H [0..1] to  C x W x H [0..1]\n    '''", "\n", "return", "torch", ".", "from_numpy", "(", "img_np", ")", "[", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.torch_to_np": [[51, 57], ["img_var.detach().cpu().numpy", "img_var.detach().cpu", "img_var.detach"], "function", ["None"], ["", "def", "torch_to_np", "(", "img_var", ")", ":", "\n", "    ", "'''Converts an image in torch.Tensor format to np.array.\n\n    From 1 x C x W x H [0..1] to  C x W x H [0..1]\n    '''", "\n", "return", "img_var", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.cv2_to_torch": [[58, 64], ["np_to_torch().float", "np_to_torch().type", "common_utils.np_to_torch", "common_utils.np_to_torch"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_torch", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_torch"], ["", "def", "cv2_to_torch", "(", "cv2_img", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "if", "dtype", "==", "None", ":", "\n", "        ", "out", "=", "np_to_torch", "(", "cv2_img", ")", ".", "float", "(", ")", "/", "255.0", "\n", "", "else", ":", "\n", "        ", "out", "=", "np_to_torch", "(", "cv2_img", ")", ".", "type", "(", "dtype", ")", "/", "255.0", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.torch_to_cv2": [[65, 70], ["common_utils.torch_to_np", "numpy.squeeze().astype", "numpy.clip", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.torch_to_np"], ["", "def", "torch_to_cv2", "(", "torch_tensor", ",", "clip", "=", "True", ")", ":", "\n", "    ", "out", "=", "torch_to_np", "(", "torch_tensor", ")", "\n", "if", "clip", ":", "\n", "        ", "out", "=", "np", ".", "clip", "(", "out", ",", "0", ",", "1", ")", "\n", "", "return", "np", ".", "squeeze", "(", "out", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.save_CHW_np": [[71, 76], ["len", "cv2.imwrite", "cv2.imwrite", "CHW.transpose"], "function", ["None"], ["", "def", "save_CHW_np", "(", "fname", ",", "CHW", ")", ":", "\n", "    ", "if", "len", "(", "CHW", ".", "shape", ")", "==", "2", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "fname", ",", "CHW", ")", "\n", "", "else", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "fname", ",", "CHW", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.load_image_pair": [[77, 95], ["print", "print", "common_utils.deblur_loader", "common_utils.denoise_loader", "common_utils.poisson_loader", "clean_img.min", "clean_img.max", "degradation_img.min", "degradation_img.max"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.deblur_loader", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.denoise_loader", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.poisson_loader"], ["", "", "def", "load_image_pair", "(", "fname", ",", "task", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    1. select degradation to remove.\n    We follow the notion (Y = H * X + N)\n    :return: X Original image, Y degradation image,\n    \"\"\"", "\n", "if", "task", "==", "\"deblur\"", ":", "\n", "        ", "clean_img", ",", "degradation_img", "=", "deblur_loader", "(", "fname", ",", "args", ".", "blur_type", ",", "args", ".", "sigma", ")", "\n", "", "elif", "task", "==", "\"denoising\"", ":", "\n", "        ", "clean_img", ",", "degradation_img", "=", "denoise_loader", "(", "fname", ",", "args", ".", "sigma", ")", "\n", "", "elif", "task", "==", "\"poisson\"", ":", "\n", "        ", "clean_img", ",", "degradation_img", "=", "poisson_loader", "(", "fname", ",", "args", ".", "scale", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "print", "(", "\"[!] clean image domain : [%.2f, %.2f]\"", "%", "(", "clean_img", ".", "min", "(", ")", ",", "clean_img", ".", "max", "(", ")", ")", ")", "\n", "print", "(", "\"[!] noisy image domain : [%.2f, %.2f]\"", "%", "(", "degradation_img", ".", "min", "(", ")", ",", "degradation_img", ".", "max", "(", ")", ")", ")", "\n", "return", "clean_img", ",", "degradation_img", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.poisson_loader": [[97, 101], ["common_utils.read_image_np", "numpy.random.poisson"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.read_image_np"], ["", "def", "poisson_loader", "(", "fname", ",", "scale", ")", ":", "\n", "    ", "img_np", "=", "read_image_np", "(", "fname", ")", "\n", "img_noisy_np", "=", "scale", "*", "np", ".", "random", ".", "poisson", "(", "img_np", "/", "255.0", "/", "scale", ")", "*", "255.0", "\n", "return", "img_np", ",", "img_noisy_np", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.denoise_loader": [[102, 109], ["common_utils.read_image_np", "common_utils.read_image_np", "fname.replace", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.read_image_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.read_image_np"], ["", "def", "denoise_loader", "(", "fname", ",", "sigma", ")", ":", "\n", "    ", "img_np", "=", "read_image_np", "(", "fname", ")", "\n", "if", "\"mean\"", "in", "fname", ":", "\n", "        ", "img_noisy_np", "=", "read_image_np", "(", "fname", ".", "replace", "(", "\"mean\"", ",", "\"real\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "img_noisy_np", "=", "img_np", "+", "np", ".", "random", ".", "randn", "(", "*", "img_np", ".", "shape", ")", "*", "sigma", "\n", "", "return", "img_np", ",", "img_noisy_np", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.read_image_np": [[110, 124], ["cv2.imread", "img_np.transpose.astype", "len", "print", "print", "img_np.transpose.transpose"], "function", ["None"], ["", "def", "read_image_np", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    :param path: image file name.\n    :param gray: Check whether image is gray or color.\n    :return:\n    \"\"\"", "\n", "img_np", "=", "cv2", ".", "imread", "(", "path", ",", "-", "1", ")", "\n", "if", "len", "(", "img_np", ".", "shape", ")", "==", "2", ":", "\n", "        ", "print", "(", "\"[*] read GRAY image.\"", ")", "\n", "img_np", "=", "img_np", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"[*] read COLOR image.\"", ")", "\n", "img_np", "=", "img_np", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "img_np", ".", "astype", "(", "np", ".", "float", ")", "# to added noise.", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.read_noise_np": [[125, 136], ["os.path.join", "os.path.join", "[].transpose", "os.path.dirname", "path.split", "numpy.load"], "function", ["None"], ["", "def", "read_noise_np", "(", "path", ",", "sigma", ")", ":", "\n", "# read noise instance same as eSURE.", "\n", "    ", "try", ":", "\n", "        ", "dir_name", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "\"sigma%s\"", "%", "sigma", ")", "\n", "file_name", "=", "path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "file_name", "=", "file_name", "+", "\".npy\"", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "dir_name", ",", "file_name", ")", "\n", "noisy_np", "=", "np", ".", "load", "(", "new_path", ")", "[", "0", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "except", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "noisy_np", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.deblur_loader": [[137, 155], ["common_utils.read_image_np", "blur", "numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.common_utils.read_image_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.blur"], ["", "def", "deblur_loader", "(", "fname", ",", "blur_type", ",", "noise_sigma", ",", "GRAY_SCALE", "=", "False", ")", ":", "\n", "    ", "\"\"\"  Loads an image, and add gaussian blur\n    Args:\n         fname: path to the image\n         blur_type: 'uniform' or 'gauss'\n         noise_sigma: noise added after blur\n         covert2gray: should we convert to gray scale image?\n         plot: will plot the images\n    Out:\n         dictionary of images and dictionary of psnrs\n    \"\"\"", "\n", "BLUR_TYPE", "=", "'gauss_blur'", "if", "blur_type", "==", "'g'", "else", "'uniform_blur'", "\n", "img_np", "=", "read_image_np", "(", "fname", ")", "# loadload_and_crop_image    img_pil, ", "\n", "#     if GRAY_SCALE:", "\n", "#         img_np = rgb2gray(img_pil)", "\n", "blurred", "=", "blur", "(", "img_np", ",", "BLUR_TYPE", ")", "# blur, and the line below adds noise", "\n", "blurred", "=", "blurred", "+", "np", ".", "random", ".", "normal", "(", "scale", "=", "noise_sigma", ",", "size", "=", "blurred", ".", "shape", ")", "\n", "return", "img_np", ",", "blurred", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.pil_resize": [[10, 17], ["pil_img.resize", "REDutils.pil_to_np"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.pil_to_np"], ["def", "pil_resize", "(", "pil_img", ",", "factor", ",", "downscale", "=", "True", ")", ":", "\n", "    ", "if", "downscale", ":", "\n", "        ", "new_size", "=", "[", "pil_img", ".", "size", "[", "0", "]", "//", "factor", ",", "pil_img", ".", "size", "[", "1", "]", "//", "factor", "]", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "[", "pil_img", ".", "size", "[", "0", "]", "*", "factor", ",", "pil_img", ".", "size", "[", "1", "]", "*", "factor", "]", "\n", "", "new_pil_img", "=", "pil_img", ".", "resize", "(", "new_size", ",", "Image", ".", "ANTIALIAS", ")", "\n", "return", "new_pil_img", ",", "pil_to_np", "(", "new_pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.fspecial_gauss": [[20, 26], ["numpy.exp", "np.exp.sum"], "function", ["None"], ["", "def", "fspecial_gauss", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "\"\"\"Function to mimic the 'fspecial' gaussian MATLAB function\n    \"\"\"", "\n", "x", ",", "y", "=", "np", ".", "mgrid", "[", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", ",", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", "]", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "**", "2", "+", "y", "**", "2", ")", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", ")", "\n", "return", "g", "/", "g", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.load_and_crop_image": [[29, 45], ["PIL.Image.open", "Image.open.crop", "int", "int", "int", "int", "REDutils.pil_to_np", "REDutils.pil_to_np", "REDutils.pil_to_np"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.pil_to_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.pil_to_np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.pil_to_np"], ["", "def", "load_and_crop_image", "(", "fname", ",", "d", "=", "1", ")", ":", "\n", "    ", "\"\"\"Make dimensions divisible by `d`\"\"\"", "\n", "img", "=", "Image", ".", "open", "(", "fname", ")", "\n", "if", "d", "==", "1", ":", "return", "img", ",", "pil_to_np", "(", "img", ")", "\n", "new_size", "=", "(", "img", ".", "size", "[", "0", "]", "-", "img", ".", "size", "[", "0", "]", "%", "d", ",", "\n", "img", ".", "size", "[", "1", "]", "-", "img", ".", "size", "[", "1", "]", "%", "d", ")", "\n", "if", "new_size", "[", "0", "]", "==", "img", ".", "size", "[", "0", "]", "and", "new_size", "[", "1", "]", "==", "img", ".", "size", "[", "1", "]", ":", "\n", "        ", "return", "img", ",", "pil_to_np", "(", "img", ")", "\n", "", "bbox", "=", "[", "\n", "int", "(", "(", "img", ".", "size", "[", "0", "]", "-", "new_size", "[", "0", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "(", "img", ".", "size", "[", "1", "]", "-", "new_size", "[", "1", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "(", "img", ".", "size", "[", "0", "]", "+", "new_size", "[", "0", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "(", "img", ".", "size", "[", "1", "]", "+", "new_size", "[", "1", "]", ")", "/", "2", ")", ",", "\n", "]", "\n", "img_cropped", "=", "img", ".", "crop", "(", "bbox", ")", "\n", "return", "img_cropped", ",", "pil_to_np", "(", "img_cropped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.save_np": [[48, 52], ["REDutils.np_to_pil", "np_to_pil.save"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_pil", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save"], ["", "def", "save_np", "(", "np_img", ",", "file", ",", "ext", "=", "'.png'", ")", ":", "\n", "    ", "\"\"\" saves a numpy image as png (default) \"\"\"", "\n", "pil_img", "=", "np_to_pil", "(", "np_img", ")", "\n", "pil_img", ".", "save", "(", "file", "+", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.compare_PSNR": [[55, 62], ["skimage.measure.compare_psnr", "REDutils.compare_psnr_y", "skimage.measure.compare_psnr", "REDutils.np_to_pil", "REDutils.np_to_pil", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.compare_psnr_y", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_pil", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_pil"], ["", "def", "compare_PSNR", "(", "org", ",", "est", ",", "on_y", "=", "False", ",", "gray_scale", "=", "False", ")", ":", "\n", "    ", "assert", "(", "on_y", "==", "False", "or", "gray_scale", "==", "False", ")", ",", "\"Is your image RGB or gray? please choose and try again\"", "\n", "if", "on_y", ":", "\n", "        ", "return", "compare_psnr_y", "(", "np_to_pil", "(", "org", ")", ",", "np_to_pil", "(", "est", ")", ")", "\n", "", "if", "gray_scale", ":", "\n", "        ", "return", "compare_psnr", "(", "np", ".", "mean", "(", "org", ",", "axis", "=", "0", ")", ",", "np", ".", "mean", "(", "est", ",", "axis", "=", "0", ")", ")", "\n", "", "return", "compare_psnr", "(", "org", ",", "est", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.load_and_compare_psnr": [[64, 75], ["REDutils.load_and_crop_image", "REDutils.load_and_crop_image", "REDutils.compare_PSNR", "eng.compare_psnr_y"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.load_and_crop_image", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.load_and_crop_image", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.compare_PSNR", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.compare_psnr_y"], ["", "def", "load_and_compare_psnr", "(", "fclean", ",", "fnoisy", ",", "crop_factor", "=", "1", ",", "on_y", "=", "False", ",", "eng", "=", "None", ")", ":", "\n", "# matlab:", "\n", "    ", "if", "eng", "is", "not", "None", ":", "\n", "        ", "return", "eng", ".", "compare_psnr_y", "(", "\"../\"", "+", "fclean", ",", "\"../\"", "+", "fnoisy", ",", "on_y", ",", "nargout", "=", "1", ")", "\n", "# load:", "\n", "", "_", ",", "img_np", "=", "load_and_crop_image", "(", "fclean", ",", "crop_factor", ")", "\n", "_", ",", "img_noisy_np", "=", "load_and_crop_image", "(", "fnoisy", ",", "crop_factor", ")", "\n", "# rgba -> rgb", "\n", "if", "img_np", ".", "shape", "[", "0", "]", "==", "4", ":", "img_np", "=", "img_np", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "if", "img_noisy_np", ".", "shape", "[", "0", "]", "==", "4", ":", "img_noisy_np", "=", "img_noisy_np", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "return", "compare_PSNR", "(", "img_np", ",", "img_noisy_np", ",", "on_y", "=", "on_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.get_p_signal": [[77, 79], ["numpy.log10", "numpy.mean", "numpy.square"], "function", ["None"], ["", "def", "get_p_signal", "(", "im", ")", ":", "\n", "    ", "return", "10", "*", "np", ".", "log10", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "im", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.compare_SNR": [[81, 83], ["skimage.measure.compare_psnr", "REDutils.get_p_signal"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.get_p_signal"], ["", "def", "compare_SNR", "(", "im_true", ",", "im_test", ")", ":", "\n", "    ", "return", "compare_psnr", "(", "im_true", ",", "im_test", ",", "1", ")", "+", "get_p_signal", "(", "im_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.rgb2ycbcr": [[85, 97], ["numpy.array", "np.array.round", "len", "numpy.dot"], "function", ["None"], ["", "def", "rgb2ycbcr", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Image to Y (ycbcr)\n    Input:\n        PIL IMAGE, in range [0, 255]\n    Output:\n        Numpy Y Ch. in range [0, 1]\n    \"\"\"", "\n", "y", "=", "np", ".", "array", "(", "img", ",", "np", ".", "float32", ")", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "3", "and", "y", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "y", "=", "np", ".", "dot", "(", "y", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "return", "y", ".", "round", "(", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.rgb2gray": [[99, 113], ["numpy.array", "numpy.array", "numpy.dot", "len", "np.dot.round"], "function", ["None"], ["", "def", "rgb2gray", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    RGB image to gray scale\n    Input:\n        PIL IMAGE, in range [0, 255]\n    Output:\n        Numpy 3 x Gray Scale in range [0, 1]\n        Following the matlab code at: https://www.mathworks.com/help/matlab/ref/rgb2gray.html\n        The formula: 0.2989 * R + 0.5870 * G + 0.1140 * B\n    \"\"\"", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "np", ".", "float32", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", "and", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "dot", "(", "img", ",", "[", "0.2989", ",", "0.5870", ",", "0.1140", "]", ")", "\n", "", "return", "np", ".", "array", "(", "[", "img", ".", "round", "(", ")", "/", "255.0", "]", "*", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.compare_psnr_y": [[115, 117], ["skimage.measure.compare_psnr", "REDutils.rgb2ycbcr", "REDutils.rgb2ycbcr"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.rgb2ycbcr", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.rgb2ycbcr"], ["", "def", "compare_psnr_y", "(", "org_pil", ",", "est_pil", ")", ":", "\n", "    ", "return", "compare_psnr", "(", "rgb2ycbcr", "(", "org_pil", ")", ",", "rgb2ycbcr", "(", "est_pil", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.pil_to_np": [[120, 133], ["numpy.array", "len", "ar.transpose.transpose"], "function", ["None"], ["", "def", "pil_to_np", "(", "img_PIL", ")", ":", "\n", "    ", "\"\"\"Converts image in PIL format to np.array.\n\n    From W x H x C [0...255] to C x W x H [0..1]\n    \"\"\"", "\n", "ar", "=", "np", ".", "array", "(", "img_PIL", ",", "np", ".", "float32", ")", "\n", "\n", "if", "len", "(", "ar", ".", "shape", ")", "==", "3", ":", "\n", "        ", "ar", "=", "ar", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "ar", "=", "ar", "[", "None", ",", "...", "]", "\n", "\n", "", "return", "ar", "/", "255.", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_pil": [[135, 148], ["numpy.clip().astype", "PIL.Image.fromarray", "ar.transpose.transpose", "numpy.clip", "numpy.rint"], "function", ["None"], ["", "def", "np_to_pil", "(", "img_np", ")", ":", "\n", "    ", "\"\"\"Converts image in np.array format to PIL image.\n\n    From C x W x H [0..1] to  W x H x C [0...255]\n    \"\"\"", "\n", "ar", "=", "np", ".", "clip", "(", "np", ".", "rint", "(", "img_np", "*", "255", ")", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "img_np", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "ar", "=", "ar", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "ar", "=", "ar", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "", "return", "Image", ".", "fromarray", "(", "ar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_torch": [[150, 156], ["torch.from_numpy"], "function", ["None"], ["", "def", "np_to_torch", "(", "img_np", ")", ":", "\n", "    ", "\"\"\"Converts image in numpy.array to torch.Tensor.\n\n    From C x W x H [0..1] to  C x W x H [0..1]\n    \"\"\"", "\n", "return", "torch", ".", "from_numpy", "(", "img_np", ")", "[", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.torch_to_np": [[158, 164], ["img_var.detach().cpu().numpy", "img_var.detach().cpu", "img_var.detach"], "function", ["None"], ["", "def", "torch_to_np", "(", "img_var", ")", ":", "\n", "    ", "\"\"\"Converts an image in torch.Tensor format to np.array.\n\n    From 1 x C x W x H [0..1] to  C x W x H [0..1]\n    \"\"\"", "\n", "return", "img_var", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.put_in_center": [[166, 179], ["numpy.zeros", "int", "int", "int", "int"], "function", ["None"], ["", "def", "put_in_center", "(", "img_np", ",", "target_size", ")", ":", "\n", "    ", "img_out", "=", "np", ".", "zeros", "(", "[", "3", ",", "target_size", "[", "0", "]", ",", "target_size", "[", "1", "]", "]", ")", "\n", "\n", "bbox", "=", "[", "\n", "int", "(", "(", "target_size", "[", "0", "]", "-", "img_np", ".", "shape", "[", "1", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "(", "target_size", "[", "1", "]", "-", "img_np", ".", "shape", "[", "2", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "(", "target_size", "[", "0", "]", "+", "img_np", ".", "shape", "[", "1", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "(", "target_size", "[", "1", "]", "+", "img_np", ".", "shape", "[", "2", "]", ")", "/", "2", ")", ",", "\n", "]", "\n", "\n", "img_out", "[", ":", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", ":", "bbox", "[", "3", "]", "]", "=", "img_np", "\n", "\n", "return", "img_out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.fill_noise": [[182, 190], ["x.uniform_", "x.normal_"], "function", ["None"], ["", "def", "fill_noise", "(", "x", ",", "noise_type", ")", ":", "\n", "    ", "\"\"\"Fills tensor `x` with noise of type `noise_type`.\"\"\"", "\n", "if", "noise_type", "==", "'u'", ":", "\n", "        ", "x", ".", "uniform_", "(", ")", "\n", "", "elif", "noise_type", "==", "'n'", ":", "\n", "        ", "x", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.get_noise": [[192, 219], ["isinstance", "torch.zeros", "REDutils.fill_noise", "numpy.meshgrid", "numpy.concatenate", "REDutils.np_to_torch", "numpy.arange", "float", "numpy.arange", "float"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.fill_noise", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_torch"], ["", "", "def", "get_noise", "(", "input_depth", ",", "method", ",", "spatial_size", ",", "noise_type", "=", "'u'", ",", "var", "=", "1.", "/", "10", ")", ":", "\n", "    ", "\"\"\"Returns a pytorch.Tensor of size (1 x `input_depth` x `spatial_size[0]` x `spatial_size[1]`)\n    initialized in a specific way.\n    Args:\n        input_depth: number of channels in the tensor\n        method: `noise` for filling tensor with noise; `meshgrid` for np.meshgrid\n        spatial_size: spatial size of the tensor to initialize\n        noise_type: 'u' for uniform; 'n' for normal\n        var: a factor, a noise will be multiplied by. Basically it is standard deviation scalar.\n    \"\"\"", "\n", "if", "isinstance", "(", "spatial_size", ",", "int", ")", ":", "\n", "        ", "spatial_size", "=", "(", "spatial_size", ",", "spatial_size", ")", "\n", "", "if", "method", "==", "'noise'", ":", "\n", "        ", "shape", "=", "[", "1", ",", "input_depth", ",", "spatial_size", "[", "0", "]", ",", "spatial_size", "[", "1", "]", "]", "\n", "net_input", "=", "torch", ".", "zeros", "(", "shape", ")", "\n", "\n", "fill_noise", "(", "net_input", ",", "noise_type", ")", "\n", "net_input", "*=", "var", "\n", "", "elif", "method", "==", "'meshgrid'", ":", "\n", "        ", "assert", "input_depth", "==", "2", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "0", ",", "spatial_size", "[", "1", "]", ")", "/", "float", "(", "spatial_size", "[", "1", "]", "-", "1", ")", ",", "\n", "np", ".", "arange", "(", "0", ",", "spatial_size", "[", "0", "]", ")", "/", "float", "(", "spatial_size", "[", "0", "]", "-", "1", ")", ")", "\n", "meshgrid", "=", "np", ".", "concatenate", "(", "[", "X", "[", "None", ",", ":", "]", ",", "Y", "[", "None", ",", ":", "]", "]", ")", "\n", "net_input", "=", "np_to_torch", "(", "meshgrid", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "return", "net_input", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.plot_dict": [[222, 232], ["matplotlib.figure", "data_dict.items", "matplotlib.show", "len", "matplotlib.imshow", "ax.text", "matplotlib.subplot", "REDutils.np_to_pil"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_pil"], ["", "def", "plot_dict", "(", "data_dict", ")", ":", "\n", "    ", "i", ",", "columns", "=", "0", ",", "len", "(", "data_dict", ")", "\n", "scale", "=", "columns", "*", "10", "# you can play with it", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "scale", ",", "scale", ")", ")", "\n", "for", "key", ",", "data", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "i", ",", "ax", "=", "i", "+", "1", ",", "plt", ".", "subplot", "(", "1", ",", "columns", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "np_to_pil", "(", "data", ".", "img", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", ".", "text", "(", "0.5", ",", "-", "0.15", ",", "key", "+", "(", "\" psnr: %.2f\"", "%", "(", "data", ".", "psnr", ")", "if", "data", ".", "psnr", "is", "not", "None", "else", "\"\"", ")", ",", "\n", "size", "=", "36", ",", "ha", "=", "\"center\"", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.matplot_plot_graphs": [[234, 243], ["len", "enumerate", "matplotlib.show", "matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel"], "function", ["None"], ["", "def", "matplot_plot_graphs", "(", "graphs", ",", "x_labels", ",", "y_labels", ")", ":", "\n", "    ", "total", "=", "len", "(", "graphs", ")", "\n", "for", "i", ",", "graph", "in", "enumerate", "(", "graphs", ")", ":", "\n", "        ", "plt", ".", "figure", "(", "figsize", "=", "(", "25", ",", "6", ")", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "total", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "graph", ")", "\n", "plt", ".", "xlabel", "(", "x_labels", "[", "i", "]", ")", "\n", "plt", ".", "ylabel", "(", "y_labels", "[", "i", "]", ",", "multialignment", "=", "'center'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_gray_to_color": [[246, 251], ["numpy.stack"], "function", ["None"], ["", "def", "np_gray_to_color", "(", "img", ")", ":", "\n", "    ", "\"\"\" 1 x w x h => 3 x w x h\n    \"\"\"", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_rgba": [[254, 263], ["np_img.transpose", "np_img.transpose.astype", "numpy.dstack", "numpy.dstack", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "np_to_rgba", "(", "np_img", ")", ":", "\n", "    ", "\"\"\" ch x w x h => W x H x (ch+1), for alpha\n    \"\"\"", "\n", "img", "=", "np_img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "# 3D image (3, w, h)", "\n", "        ", "img", "=", "255", "*", "np", ".", "dstack", "(", "[", "img", ",", "np", ".", "ones", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "]", ")", "\n", "", "else", ":", "# 2D image (1, w, h)", "\n", "        ", "img", "=", "255", "*", "np", ".", "dstack", "(", "[", "img", ",", "img", ",", "img", ",", "np", ".", "ones", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "]", ")", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.get_noisy_image": [[7, 18], ["np.clip().astype", "np_to_pil", "np.clip", "np.random.normal"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.np_to_pil"], ["def", "get_noisy_image", "(", "img_np", ",", "sigma", ")", ":", "\n", "    ", "\"\"\"Adds Gaussian noise to an image.\n    \n    Args: \n        img_np: image, np.array with values from 0 to 1\n        sigma: std of the noise\n    \"\"\"", "\n", "img_noisy_np", "=", "np", ".", "clip", "(", "img_np", "+", "np", ".", "random", ".", "normal", "(", "scale", "=", "sigma", ",", "size", "=", "img_np", ".", "shape", ")", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_noisy_pil", "=", "np_to_pil", "(", "img_noisy_np", ")", "\n", "\n", "return", "img_noisy_pil", ",", "img_noisy_np", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.non_local_means": [[20, 38], ["dict", "range", "np.array", "skimage.restoration.denoise_nl_means"], "function", ["None"], ["", "def", "non_local_means", "(", "noisy_np_img", ",", "sigma", ",", "fast_mode", "=", "True", ")", ":", "\n", "    ", "\"\"\" get a numpy noisy image\n        returns a denoised numpy image using Non-Local-Means\n    \"\"\"", "\n", "sigma", "=", "sigma", "/", "255.", "\n", "h", "=", "0.6", "*", "sigma", "if", "fast_mode", "else", "0.8", "*", "sigma", "\n", "patch_kw", "=", "dict", "(", "h", "=", "h", ",", "# Cut-off distance, a higher h results in a smoother image", "\n", "sigma", "=", "sigma", ",", "# sigma provided", "\n", "fast_mode", "=", "fast_mode", ",", "# If True, a fast version is used. If False, the original version is used.", "\n", "patch_size", "=", "5", ",", "# 5x5 patches (Size of patches used for denoising.)", "\n", "patch_distance", "=", "6", ",", "# 13x13 search area", "\n", "multichannel", "=", "False", ")", "\n", "denoised_img", "=", "[", "]", "\n", "n_channels", "=", "noisy_np_img", ".", "shape", "[", "0", "]", "\n", "for", "c", "in", "range", "(", "n_channels", ")", ":", "\n", "        ", "denoise_fast", "=", "denoise_nl_means", "(", "noisy_np_img", "[", "c", ",", ":", ",", ":", "]", ",", "**", "patch_kw", ")", "\n", "denoised_img", "+=", "[", "denoise_fast", "]", "\n", "", "return", "np", ".", "array", "(", "denoised_img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.compare_ssim": [[39, 49], ["skimage.metrics.structural_similarity", "np.mean", "np.mean", "np.mean", "np.mean"], "function", ["None"], ["", "def", "compare_ssim", "(", "a", ",", "b", ")", ":", "\n", "    ", "if", "a", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "        ", "a", "=", "np", ".", "mean", "(", "a", ",", "axis", "=", "0", ")", "\n", "b", "=", "np", ".", "mean", "(", "b", ",", "axis", "=", "0", ")", "\n", "", "elif", "a", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "a", "=", "np", ".", "mean", "(", "a", ",", "axis", "=", "2", ")", "\n", "b", "=", "np", ".", "mean", "(", "b", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "a", ",", "b", "=", "a", "[", "0", "]", ",", "b", "[", "0", "]", "\n", "", "return", "structural_similarity", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_psnr": [[57, 73], ["np.squeeze", "np.squeeze", "img1.astype.astype", "img2.astype.astype", "np.mean", "ValueError", "float", "math.log10", "math.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "np", ".", "squeeze", "(", "img1", ")", "\n", "img2", "=", "np", ".", "squeeze", "(", "img2", ")", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_ssim": [[78, 103], ["np.squeeze", "np.squeeze", "ValueError", "denoising_utils.ssim", "ValueError", "range", "np.array().mean", "ssims.append", "denoising_utils.ssim", "denoising_utils.ssim", "np.array", "np.squeeze", "np.squeeze"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.ssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.ssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "img1", "=", "np", ".", "squeeze", "(", "img1", ")", "\n", "img2", "=", "np", ".", "squeeze", "(", "img2", ")", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", "[", "i", "]", ",", "img2", "[", "i", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.ssim": [[105, 126], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "np.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.get_lpips": [[130, 132], ["PerceptualSimilarity.PerceptualLoss"], "function", ["None"], ["def", "get_lpips", "(", "device", "=", "\"cuda\"", ")", ":", "\n", "    ", "return", "PerceptualLoss", "(", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "use_gpu", "=", "(", "device", "==", "'cuda'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.calculate_lpips": [[133, 152], ["PerceptualSimilarity.PerceptualLoss.item", "make_color", "make_color", "img1_.transpose().astype", "img2_.transpose().astype", "PerceptualSimilarity.PerceptualLoss", "cv2.cvtColor", "cv2.cvtColor", "torch.tensor", "torch.tensor", "img1.cuda.cuda", "img2.cuda.cuda", "cv2.cvtColor", "img1_[].astype", "img2_.astype", "img1.cuda.transpose", "img2.cuda.transpose", "PerceptualSimilarity.PerceptualLoss.", "img1_.transpose", "img2_.transpose"], "function", ["None"], ["", "def", "calculate_lpips", "(", "img1_", ",", "img2_", ",", "LPIPS", "=", "None", ",", "device", "=", "\"cuda\"", ",", "color", "=", "\"BGR\"", ")", ":", "\n", "    ", "if", "img1_", ".", "shape", "[", "0", "]", "<", "3", ":", "\n", "        ", "make_color", "=", "lambda", "x", ":", "cv2", ".", "cvtColor", "(", "x", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "img1", "=", "make_color", "(", "img1_", "[", "0", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "img2", "=", "make_color", "(", "img2_", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "else", ":", "\n", "        ", "img1", "=", "img1_", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img2", "=", "img2_", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "if", "LPIPS", "is", "None", ":", "\n", "        ", "LPIPS", "=", "PerceptualLoss", "(", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "use_gpu", "=", "(", "device", "==", "'cuda'", ")", ")", "\n", "", "if", "color", "==", "\"BGR\"", ":", "\n", "        ", "img1", "=", "cv2", ".", "cvtColor", "(", "img1", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img2", "=", "cv2", ".", "cvtColor", "(", "img2", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "img1", "=", "torch", ".", "tensor", "(", "img1", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "/", "255.0", "\n", "img2", "=", "torch", ".", "tensor", "(", "img2", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "/", "255.0", "\n", "if", "device", "==", "\"cuda\"", ":", "\n", "        ", "img1", "=", "img1", ".", "cuda", "(", ")", "\n", "img2", "=", "img2", ".", "cuda", "(", ")", "\n", "", "return", "LPIPS", "(", "img1", ",", "img2", ",", "normalize", "=", "True", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.get_fft_h": [[6, 20], ["np.zeros", "np.fft.fft2", "REDutils.fspecial_gauss", "np.fft.fft2", "np.fft.fftshift", "np.fft.fftshift"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.fspecial_gauss"], ["def", "get_fft_h", "(", "im", ",", "blur_type", ")", ":", "\n", "    ", "assert", "blur_type", "in", "[", "'uniform_blur'", ",", "'gauss_blur'", "]", ",", "\"blur_type can be or 'uniform' or 'gauss'\"", "\n", "ch", ",", "h", ",", "w", "=", "im", ".", "shape", "\n", "fft_h", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", ")", "\n", "if", "blur_type", "==", "'uniform_blur'", ":", "\n", "        ", "t", "=", "4", "# 9//2", "\n", "fft_h", "[", "h", "//", "2", "-", "t", ":", "h", "//", "2", "+", "1", "+", "t", ",", "w", "//", "2", "-", "t", ":", "w", "//", "2", "+", "1", "+", "t", "]", "=", "1", "/", "81", "\n", "fft_h", "=", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "fftshift", "(", "fft_h", ")", ")", "\n", "", "else", ":", "# gauss_blur", "\n", "        ", "psf", "=", "fspecial_gauss", "(", "25", ",", "1.6", ")", "\n", "t", "=", "12", "# 25 // 2", "\n", "fft_h", "[", "h", "//", "2", "-", "t", ":", "h", "//", "2", "+", "1", "+", "t", ",", "w", "//", "2", "-", "t", ":", "w", "//", "2", "+", "1", "+", "t", "]", "=", "psf", "\n", "fft_h", "=", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "fftshift", "(", "fft_h", ")", ")", "\n", "", "return", "fft_h", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.blur": [[22, 31], ["blur_utils.get_fft_h", "np.zeros_like", "range", "np.fft.fft2", "np.real", "np.fft.ifft2"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.get_fft_h"], ["", "def", "blur", "(", "im", ",", "blur_type", ")", ":", "\n", "    ", "fft_h", "=", "get_fft_h", "(", "im", ",", "blur_type", ")", "\n", "imout", "=", "np", ".", "zeros_like", "(", "im", ")", "\n", "for", "i", "in", "range", "(", "im", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "im_f", "=", "np", ".", "fft", ".", "fft2", "(", "im", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "z_f", "=", "fft_h", "*", "im_f", "# .* of matlab", "\n", "z", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft2", "(", "z_f", ")", ")", "\n", "imout", "[", "i", ",", ":", ",", ":", "]", "=", "z", "\n", "", "return", "imout", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.get_h": [[34, 39], ["models.downsampler.Downsampler().type", "blur_utils.torch_blur", "models.downsampler.Downsampler"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.torch_blur"], ["", "def", "get_h", "(", "n_ch", ",", "blur_type", ",", "use_fourier", ",", "dtype", ")", ":", "\n", "    ", "assert", "blur_type", "in", "[", "'uniform_blur'", ",", "'gauss_blur'", "]", ",", "\"blur_type can be or 'uniform' or 'gauss'\"", "\n", "if", "not", "use_fourier", ":", "\n", "        ", "return", "Downsampler", "(", "n_ch", ",", "1", ",", "blur_type", ",", "preserve_size", "=", "True", ")", ".", "type", "(", "dtype", ")", "\n", "", "return", "lambda", "im", ":", "torch_blur", "(", "im", ",", "blur_type", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.torch_blur": [[41, 54], ["blur_utils.get_fft_h", "torch.unsqueeze", "torch.cat", "range", "torch.cat", "torch.unsqueeze", "REDutils.torch_to_np", "torch.from_numpy().type", "torch.unsqueeze", "torch.cat", "torch.fft", "torch.mul", "torch.cat.append", "torch.unsqueeze", "torch.unsqueeze", "torch.ifft", "torch.from_numpy", "np.real"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.blur_utils.get_fft_h", "home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.torch_to_np"], ["", "def", "torch_blur", "(", "im", ",", "blur_type", ",", "dtype", ")", ":", "\n", "    ", "fft_h", "=", "get_fft_h", "(", "torch_to_np", "(", "im", ")", ",", "blur_type", ")", "\n", "fft_h_torch", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "fft_h", ")", ")", ".", "type", "(", "dtype", ")", ",", "2", ")", "\n", "fft_h_torch", "=", "torch", ".", "cat", "(", "[", "fft_h_torch", ",", "fft_h_torch", "]", ",", "2", ")", "\n", "z", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "im", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "im_torch", "=", "torch", ".", "unsqueeze", "(", "im", "[", "0", ",", "i", ",", ":", ",", ":", "]", ",", "2", ")", "\n", "im_torch", "=", "torch", ".", "cat", "(", "[", "im_torch", ",", "im_torch", "]", ",", "2", ")", "\n", "im_f", "=", "torch", ".", "fft", "(", "im_torch", ",", "2", ")", "\n", "z_f", "=", "torch", ".", "mul", "(", "torch", ".", "unsqueeze", "(", "fft_h_torch", ",", "0", ")", ",", "torch", ".", "unsqueeze", "(", "im_f", ",", "0", ")", ")", "# .* of matlab", "\n", "z", ".", "append", "(", "torch", ".", "ifft", "(", "z_f", ",", "2", ")", ")", "\n", "", "z", "=", "torch", ".", "cat", "(", "z", ",", "0", ")", "\n", "return", "torch", ".", "unsqueeze", "(", "z", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.PNetLin.__init__": [[22, 58], ["torch.Module.__init__", "networks_basic.ScalingLayer", "len", "net_type", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer", "networks_basic.NetLinLayer"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pnet_type", "=", "'vgg'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "use_dropout", "=", "True", ",", "spatial", "=", "False", ",", "\n", "version", "=", "'0.1'", ",", "lpips", "=", "True", ")", ":", "\n", "        ", "super", "(", "PNetLin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pnet_type", "=", "pnet_type", "\n", "self", ".", "pnet_tune", "=", "pnet_tune", "\n", "self", ".", "pnet_rand", "=", "pnet_rand", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "lpips", "=", "lpips", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "\n", "if", "(", "self", ".", "pnet_type", "in", "[", "'vgg'", ",", "'vgg16'", "]", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "vgg16", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'alex'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "alexnet", "\n", "self", ".", "chns", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "", "elif", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "\n", "            ", "net_type", "=", "pn", ".", "squeezenet", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "", "self", ".", "L", "=", "len", "(", "self", ".", "chns", ")", "\n", "\n", "self", ".", "net", "=", "net_type", "(", "pretrained", "=", "not", "self", ".", "pnet_rand", ",", "requires_grad", "=", "self", ".", "pnet_tune", ")", "\n", "\n", "if", "(", "lpips", ")", ":", "\n", "            ", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "(", "self", ".", "pnet_type", "==", "'squeeze'", ")", ":", "# 7 layers for squeezenet", "\n", "                ", "self", ".", "lin5", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "5", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin6", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "6", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lins", "+=", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.PNetLin.forward": [[59, 89], ["range", "range", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.net.forward", "networks_basic.PNetLin.scaling_layer", "networks_basic.PNetLin.scaling_layer", "util.normalize_tensor", "util.normalize_tensor", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.upsample", "networks_basic.spatial_average", "networks_basic.PNetLin.lins[].model", "range", "networks_basic.PNetLin.lins[].model", "range", "diffs[].sum", "range", "diffs[].sum", "range"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.normalize_tensor", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.normalize_tensor", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.spatial_average", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.spatial_average"], ["", "", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "# v0.0 - original release had a bug, where input was not scaled", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "in0", ")", ",", "self", ".", "scaling_layer", "(", "in1", ")", ")", "if", "self", ".", "version", "==", "'0.1'", "else", "(", "\n", "in0", ",", "in1", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", ".", "forward", "(", "in0_input", ")", ",", "self", ".", "net", ".", "forward", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "kk", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "util", ".", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "util", ".", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "if", "(", "self", ".", "lpips", ")", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "self", ".", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "spatial", ")", ":", "\n", "                ", "res", "=", "[", "upsample", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "out_H", "=", "in0", ".", "shape", "[", "2", "]", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "", "else", ":", "\n", "                ", "res", "=", "[", "spatial_average", "(", "diffs", "[", "kk", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "self", ".", "L", ")", "]", "\n", "\n", "", "", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "L", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "\n", "", "if", "(", "retPerLayer", ")", ":", "\n", "            ", "return", "(", "val", ",", "res", ")", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.ScalingLayer.__init__": [[92, 96], ["torch.Module.__init__", "networks_basic.ScalingLayer.register_buffer", "networks_basic.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.ScalingLayer.forward": [[97, 99], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.NetLinLayer.__init__": [[104, 110], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.Dist2LogitLayer.__init__": [[115, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ",", "use_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "Dist2LogitLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "5", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "chn_mid", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_mid", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "]", "\n", "if", "(", "use_sigmoid", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Sigmoid", "(", ")", ",", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.Dist2LogitLayer.forward": [[127, 129], ["networks_basic.Dist2LogitLayer.model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "torch", ".", "cat", "(", "(", "d0", ",", "d1", ",", "d0", "-", "d1", ",", "d0", "/", "(", "d1", "+", "eps", ")", ",", "d1", "/", "(", "d0", "+", "eps", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.BCERankingLoss.__init__": [[132, 137], ["torch.Module.__init__", "networks_basic.Dist2LogitLayer", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chn_mid", "=", "32", ")", ":", "\n", "        ", "super", "(", "BCERankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "Dist2LogitLayer", "(", "chn_mid", "=", "chn_mid", ")", "\n", "# self.parameters = list(self.net.parameters())", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.BCERankingLoss.forward": [[138, 142], ["networks_basic.BCERankingLoss.net.forward", "networks_basic.BCERankingLoss.loss"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward"], ["", "def", "forward", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "per", "=", "(", "judge", "+", "1.", ")", "/", "2.", "\n", "self", ".", "logit", "=", "self", ".", "net", ".", "forward", "(", "d0", ",", "d1", ")", "\n", "return", "self", ".", "loss", "(", "self", ".", "logit", ",", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.FakeNet.__init__": [[146, 150], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "colorspace", "=", "'Lab'", ")", ":", "\n", "        ", "super", "(", "FakeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "colorspace", "=", "colorspace", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.L2.forward": [[154, 169], ["in0.size", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "in0.size", "util.l2().astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "util.l2", "util.tensor2np", "util.tensor2np", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "util.tensor2tensorlab", "util.tensor2tensorlab", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.l2", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2tensorlab", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "(", "N", ",", "C", ",", "X", ",", "Y", ")", "=", "in0", ".", "size", "(", ")", "\n", "value", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "(", "in0", "-", "in1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "1", ",", "X", ",", "Y", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "Y", ")", ",", "\n", "dim", "=", "3", ")", ".", "view", "(", "N", ")", "\n", "return", "value", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "l2", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "'float'", ")", "\n", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "                ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.DSSIM.forward": [[173, 186], ["torch.autograd.Variable", "torch.autograd.Variable", "util.dssim().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ret_var.cuda.cuda.cuda", "in0.size", "util.dssim().astype", "util.dssim", "util.dssim", "util.tensor2im", "util.tensor2im", "util.tensor2np", "util.tensor2np", "util.tensor2tensorlab", "util.tensor2tensorlab"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.dssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.dssim", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2tensorlab", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2tensorlab"], ["    ", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "None", ")", ":", "\n", "        ", "assert", "(", "in0", ".", "size", "(", ")", "[", "0", "]", "==", "1", ")", "# currently only supports batchSize 1", "\n", "\n", "if", "(", "self", ".", "colorspace", "==", "'RGB'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "1.", "*", "util", ".", "tensor2im", "(", "in0", ".", "data", ")", ",", "1.", "*", "util", ".", "tensor2im", "(", "in1", ".", "data", ")", ",", "range", "=", "255.", ")", ".", "astype", "(", "'float'", ")", "\n", "", "elif", "(", "self", ".", "colorspace", "==", "'Lab'", ")", ":", "\n", "            ", "value", "=", "util", ".", "dssim", "(", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in0", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "\n", "util", ".", "tensor2np", "(", "util", ".", "tensor2tensorlab", "(", "in1", ".", "data", ",", "to_norm", "=", "False", ")", ")", ",", "range", "=", "100.", ")", ".", "astype", "(", "\n", "'float'", ")", "\n", "", "ret_var", "=", "Variable", "(", "torch", ".", "Tensor", "(", "(", "value", ",", ")", ")", ")", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "ret_var", "=", "ret_var", ".", "cuda", "(", ")", "\n", "", "return", "ret_var", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.spatial_average": [[9, 11], ["in_tens.mean"], "function", ["None"], ["def", "spatial_average", "(", "in_tens", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "in_tens", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample": [[13, 18], ["torch.Upsample"], "function", ["None"], ["", "def", "upsample", "(", "in_tens", ",", "out_H", "=", "64", ")", ":", "# assumes scale factor is same for H and W", "\n", "    ", "in_H", "=", "in_tens", ".", "shape", "[", "2", "]", "\n", "scale_factor", "=", "1.", "*", "out_H", "/", "in_H", "\n", "\n", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "(", "in_tens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.print_network": [[188, 194], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network'", ",", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.name": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.initialize": [[18, 99], ["base_model.BaseModel.initialize", "list", "networks_basic.PNetLin", "dist_model.DistModel.net.parameters", "networks_basic.BCERankingLoss", "list", "torch.optim.Adam", "dist_model.DistModel.net.eval", "dist_model.DistModel.net.to", "print", "networks_basic.print_network", "print", "os.path.abspath", "print", "dist_model.DistModel.net.load_state_dict", "networks_basic.PNetLin", "dist_model.DistModel.rankLoss.net.parameters", "dist_model.DistModel.rankLoss.to", "os.path.join", "torch.load", "networks_basic.L2", "inspect.getfile", "networks_basic.DSSIM", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.initialize", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResNet.eval", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.print_network"], ["", "def", "initialize", "(", "self", ",", "model", "=", "'net-lin'", ",", "net", "=", "'alex'", ",", "colorspace", "=", "'Lab'", ",", "pnet_rand", "=", "False", ",", "pnet_tune", "=", "False", ",", "\n", "model_path", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "printNet", "=", "False", ",", "spatial", "=", "False", ",", "\n", "is_train", "=", "False", ",", "lr", "=", ".0001", ",", "beta1", "=", "0.5", ",", "version", "=", "'0.1'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "'''\n        INPUTS\n            model - ['net-lin'] for linearly calibrated network\n                    ['net'] for off-the-shelf network\n                    ['L2'] for L2 distance in Lab colorspace\n                    ['SSIM'] for ssim in RGB colorspace\n            net - ['squeeze','alex','vgg']\n            model_path - if None, will look in weights/[NET_NAME].pth\n            colorspace - ['Lab','RGB'] colorspace to use for L2 and SSIM\n            use_gpu - bool - whether or not to use a GPU\n            printNet - bool - whether or not to print network architecture out\n            spatial - bool - whether to output an array containing varying distances across spatial dimensions\n            spatial_shape - if given, output spatial shape. if None then spatial shape is determined automatically via spatial_factor (see below).\n            spatial_factor - if given, specifies upsampling factor relative to the largest spatial extent of a convolutional layer. if None then resized to size of input images.\n            spatial_order - spline order of filter for upsampling in spatial mode, by default 1 (bilinear).\n            is_train - bool - [True] for training mode\n            lr - float - initial learning rate\n            beta1 - float - initial momentum term for adam\n            version - 0.1 for latest, 0.0 was original (with a bug)\n            gpu_ids - int array - [0] by default, gpus to use\n        '''", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "use_gpu", "=", "use_gpu", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "spatial", "=", "spatial", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model_name", "=", "'%s [%s]'", "%", "(", "model", ",", "net", ")", "\n", "\n", "if", "(", "self", ".", "model", "==", "'net-lin'", ")", ":", "# pretrained net + linear layer", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_tune", "=", "pnet_tune", ",", "pnet_type", "=", "net", ",", "\n", "use_dropout", "=", "True", ",", "spatial", "=", "spatial", ",", "version", "=", "version", ",", "lpips", "=", "True", ")", "\n", "kw", "=", "{", "}", "\n", "if", "not", "use_gpu", ":", "\n", "                ", "kw", "[", "'map_location'", "]", "=", "'cpu'", "\n", "", "if", "(", "model_path", "is", "None", ")", ":", "\n", "                ", "import", "inspect", "\n", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "inspect", ".", "getfile", "(", "self", ".", "initialize", ")", ",", "'..'", ",", "'weights/v%s/%s.pth'", "%", "(", "version", ",", "net", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "is_train", ")", ":", "\n", "                ", "print", "(", "'Loading model from: %s'", "%", "model_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "**", "kw", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "elif", "(", "self", ".", "model", "==", "'net'", ")", ":", "# pretrained network", "\n", "            ", "self", ".", "net", "=", "networks", ".", "PNetLin", "(", "pnet_rand", "=", "pnet_rand", ",", "pnet_type", "=", "net", ",", "lpips", "=", "False", ")", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'L2'", ",", "'l2'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "L2", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "# not really a network, only for testing", "\n", "self", ".", "model_name", "=", "'L2'", "\n", "", "elif", "(", "self", ".", "model", "in", "[", "'DSSIM'", ",", "'dssim'", ",", "'SSIM'", ",", "'ssim'", "]", ")", ":", "\n", "            ", "self", ".", "net", "=", "networks", ".", "DSSIM", "(", "use_gpu", "=", "use_gpu", ",", "colorspace", "=", "colorspace", ")", "\n", "self", ".", "model_name", "=", "'SSIM'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "parameters", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "# training mode", "\n", "# extra network on top to go from distances (d0,d1) => predicted human judgment (h*)", "\n", "            ", "self", ".", "rankLoss", "=", "networks", ".", "BCERankingLoss", "(", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "rankLoss", ".", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "old_lr", "=", "lr", "\n", "self", ".", "optimizer_net", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "# test mode", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "", "if", "(", "use_gpu", ")", ":", "\n", "            ", "self", ".", "net", "=", "self", ".", "net", ".", "to", "(", "'cuda'", ")", "\n", "if", "(", "self", ".", "is_train", ")", ":", "\n", "                ", "self", ".", "rankLoss", "=", "self", ".", "rankLoss", ".", "to", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "# just put this on GPU0", "\n", "\n", "", "", "if", "(", "printNet", ")", ":", "\n", "            ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "net", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.forward": [[100, 109], ["dist_model.DistModel.net.forward"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward"], ["", "", "def", "forward", "(", "self", ",", "in0", ",", "in1", ",", "retPerLayer", "=", "False", ")", ":", "\n", "        ", "''' Function computes the distance between image patches in0 and in1\n        INPUTS\n            in0, in1 - torch.Tensor object of shape Nx3xXxY - image patch scaled to [-1,1]\n        OUTPUT\n            computed distances between in0 and in1\n        '''", "\n", "\n", "return", "self", ".", "net", ".", "forward", "(", "in0", ",", "in1", ",", "retPerLayer", "=", "retPerLayer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.optimize_parameters": [[111, 117], ["dist_model.DistModel.forward_train", "dist_model.DistModel.optimizer_net.zero_grad", "dist_model.DistModel.backward_train", "dist_model.DistModel.optimizer_net.step", "dist_model.DistModel.clamp_weights"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.forward_train", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.backward_train", "home.repos.pwc.inspect_result.gistvision_dip-denosing.None.additional_utils.RAdam.step", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.clamp_weights"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_train", "(", ")", "\n", "self", ".", "optimizer_net", ".", "step", "(", ")", "\n", "self", ".", "clamp_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.clamp_weights": [[118, 122], ["dist_model.DistModel.net.modules", "hasattr", "torch.clamp"], "methods", ["None"], ["", "def", "clamp_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "module", ",", "'weight'", ")", "and", "module", ".", "kernel_size", "==", "(", "1", ",", "1", ")", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "module", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.set_input": [[123, 138], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "dist_model.DistModel.input_ref.to", "dist_model.DistModel.input_p0.to", "dist_model.DistModel.input_p1.to", "dist_model.DistModel.input_judge.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input_ref", "=", "data", "[", "'ref'", "]", "\n", "self", ".", "input_p0", "=", "data", "[", "'p0'", "]", "\n", "self", ".", "input_p1", "=", "data", "[", "'p1'", "]", "\n", "self", ".", "input_judge", "=", "data", "[", "'judge'", "]", "\n", "\n", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "input_ref", "=", "self", ".", "input_ref", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p0", "=", "self", ".", "input_p0", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_p1", "=", "self", ".", "input_p1", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "input_judge", "=", "self", ".", "input_judge", ".", "to", "(", "device", "=", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "var_ref", "=", "Variable", "(", "self", ".", "input_ref", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p0", "=", "Variable", "(", "self", ".", "input_p0", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "var_p1", "=", "Variable", "(", "self", ".", "input_p1", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.forward_train": [[139, 152], ["dist_model.DistModel.forward", "dist_model.DistModel.forward", "dist_model.DistModel.compute_accuracy", "torch.autograd.Variable().view", "dist_model.DistModel.rankLoss.forward", "dist_model.DistModel.d0.size", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.compute_accuracy", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward"], ["", "def", "forward_train", "(", "self", ")", ":", "# run forward pass", "\n", "# print(self.net.module.scaling_layer.shift)", "\n", "# print(torch.norm(self.net.module.net.slice1[0].weight).item(), torch.norm(self.net.module.lin0.model[1].weight).item())", "\n", "\n", "        ", "self", ".", "d0", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p0", ")", "\n", "self", ".", "d1", "=", "self", ".", "forward", "(", "self", ".", "var_ref", ",", "self", ".", "var_p1", ")", "\n", "self", ".", "acc_r", "=", "self", ".", "compute_accuracy", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "input_judge", ")", "\n", "\n", "self", ".", "var_judge", "=", "Variable", "(", "1.", "*", "self", ".", "input_judge", ")", ".", "view", "(", "self", ".", "d0", ".", "size", "(", ")", ")", "\n", "\n", "self", ".", "loss_total", "=", "self", ".", "rankLoss", ".", "forward", "(", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "var_judge", "*", "2.", "-", "1.", ")", "\n", "\n", "return", "self", ".", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.backward_train": [[153, 155], ["torch.mean().backward", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.iterative_normalization_py.backward"], ["", "def", "backward_train", "(", "self", ")", ":", "\n", "        ", "torch", ".", "mean", "(", "self", ".", "loss_total", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.compute_accuracy": [[156, 161], ["judge.cpu().numpy().flatten", "judge.cpu().numpy", "judge.cpu"], "methods", ["None"], ["", "def", "compute_accuracy", "(", "self", ",", "d0", ",", "d1", ",", "judge", ")", ":", "\n", "        ", "''' d0, d1 are Variables, judge is a Tensor '''", "\n", "d1_lt_d0", "=", "(", "d1", "<", "d0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "judge_per", "=", "judge", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "return", "d1_lt_d0", "*", "judge_per", "+", "(", "1", "-", "d1_lt_d0", ")", "*", "(", "1", "-", "judge_per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.get_current_errors": [[162, 170], ["collections.OrderedDict", "collections.OrderedDict.keys", "numpy.mean", "dist_model.DistModel.loss_total.data.cpu().numpy", "dist_model.DistModel.loss_total.data.cpu"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "retDict", "=", "OrderedDict", "(", "[", "(", "'loss_total'", ",", "self", ".", "loss_total", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "(", "'acc_r'", ",", "self", ".", "acc_r", ")", "]", ")", "\n", "\n", "for", "key", "in", "retDict", ".", "keys", "(", ")", ":", "\n", "            ", "retDict", "[", "key", "]", "=", "np", ".", "mean", "(", "retDict", "[", "key", "]", ")", "\n", "\n", "", "return", "retDict", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.get_current_visuals": [[171, 185], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "collections.OrderedDict", "dist_model.DistModel.var_ref.data.size"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "zoom_factor", "=", "256", "/", "self", ".", "var_ref", ".", "data", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "ref_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_ref", ".", "data", ")", "\n", "p0_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p0", ".", "data", ")", "\n", "p1_img", "=", "util", ".", "tensor2im", "(", "self", ".", "var_p1", ".", "data", ")", "\n", "\n", "ref_img_vis", "=", "zoom", "(", "ref_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p0_img_vis", "=", "zoom", "(", "p0_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "p1_img_vis", "=", "zoom", "(", "p1_img", ",", "[", "zoom_factor", ",", "zoom_factor", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "\n", "return", "OrderedDict", "(", "[", "(", "'ref'", ",", "ref_img_vis", ")", ",", "\n", "(", "'p0'", ",", "p0_img_vis", ")", ",", "\n", "(", "'p1'", ",", "p1_img_vis", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.save": [[186, 192], ["dist_model.DistModel.save_network", "dist_model.DistModel.save_network", "dist_model.DistModel.save_network"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "path", ",", "label", ")", ":", "\n", "        ", "if", "(", "self", ".", "use_gpu", ")", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ".", "module", ",", "path", ",", "''", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "net", ",", "path", ",", "''", ",", "label", ")", "\n", "", "self", ".", "save_network", "(", "self", ".", "rankLoss", ".", "net", ",", "path", ",", "'rank'", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.DistModel.update_learning_rate": [[193, 202], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "nepoch_decay", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "lr", "/", "nepoch_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "\n", "for", "param_group", "in", "self", ".", "optimizer_net", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update lr [%s] decay: %f -> %f'", "%", "(", "type", ",", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.score_2afc_dataset": [[204, 238], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "data_loader.load_data", "func().data.cpu().numpy().flatten().tolist", "func().data.cpu().numpy().flatten().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.mean", "dict", "func().data.cpu().numpy().flatten", "func().data.cpu().numpy().flatten", "data[].cpu().numpy().flatten", "func().data.cpu().numpy", "func().data.cpu().numpy", "data[].cpu().numpy", "func().data.cpu", "func().data.cpu", "data[].cpu", "func", "func"], "function", ["None"], ["", "", "def", "score_2afc_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes Two Alternative Forced Choice (2AFC) score using\n        distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a TwoAFCDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return numpy array of length N\n    OUTPUTS\n        [0] - 2AFC score in [0,1], fraction of time func agrees with human evaluators\n        [1] - dictionary with following elements\n            d0s,d1s - N arrays containing distances between reference patch to perturbed patches\n            gts - N array in [0,1], preferred patch selected by human evaluators\n                (closer to \"0\" for left patch p0, \"1\" for right patch p1,\n                \"0.6\" means 60pct people preferred right patch, 40pct preferred left)\n            scores - N array in [0,1], corresponding to what percentage function agreed with humans\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "d0s", "=", "[", "]", "\n", "d1s", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "d0s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p0'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "d1s", "+=", "func", "(", "data", "[", "'ref'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'judge'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "d0s", "=", "np", ".", "array", "(", "d0s", ")", "\n", "d1s", "=", "np", ".", "array", "(", "d1s", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", "\n", "scores", "=", "(", "d0s", "<", "d1s", ")", "*", "(", "1.", "-", "gts", ")", "+", "(", "d1s", "<", "d0s", ")", "*", "gts", "+", "(", "d1s", "==", "d0s", ")", "*", ".5", "\n", "\n", "return", "(", "np", ".", "mean", "(", "scores", ")", ",", "dict", "(", "d0s", "=", "d0s", ",", "d1s", "=", "d1s", ",", "gts", "=", "gts", ",", "scores", "=", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.dist_model.score_jnd_dataset": [[240, 278], ["tqdm.tqdm", "numpy.array", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "util.voc_ap", "data_loader.load_data", "func().data.cpu().numpy().tolist", "data[].cpu().numpy().flatten().tolist", "numpy.sum", "dict", "func().data.cpu().numpy", "data[].cpu().numpy().flatten", "func().data.cpu", "data[].cpu().numpy", "data[].cpu", "func"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.voc_ap"], ["", "def", "score_jnd_dataset", "(", "data_loader", ",", "func", ",", "name", "=", "''", ")", ":", "\n", "    ", "''' Function computes JND score using distance function 'func' in dataset 'data_loader'\n    INPUTS\n        data_loader - CustomDatasetDataLoader object - contains a JNDDataset inside\n        func - callable distance function - calling d=func(in0,in1) should take 2\n            pytorch tensors with shape Nx3xXxY, and return pytorch array of length N\n    OUTPUTS\n        [0] - JND score in [0,1], mAP score (area under precision-recall curve)\n        [1] - dictionary with following elements\n            ds - N array containing distances between two patches shown to human evaluator\n            sames - N array containing fraction of people who thought the two patches were identical\n    CONSTS\n        N - number of test triplets in data_loader\n    '''", "\n", "\n", "ds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "data_loader", ".", "load_data", "(", ")", ",", "desc", "=", "name", ")", ":", "\n", "        ", "ds", "+=", "func", "(", "data", "[", "'p0'", "]", ",", "data", "[", "'p1'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gts", "+=", "data", "[", "'same'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "sames", "=", "np", ".", "array", "(", "gts", ")", "\n", "ds", "=", "np", ".", "array", "(", "ds", ")", "\n", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "ds", ")", "\n", "ds_sorted", "=", "ds", "[", "sorted_inds", "]", "\n", "sames_sorted", "=", "sames", "[", "sorted_inds", "]", "\n", "\n", "TPs", "=", "np", ".", "cumsum", "(", "sames_sorted", ")", "\n", "FPs", "=", "np", ".", "cumsum", "(", "1", "-", "sames_sorted", ")", "\n", "FNs", "=", "np", ".", "sum", "(", "sames_sorted", ")", "-", "TPs", "\n", "\n", "precs", "=", "TPs", "/", "(", "TPs", "+", "FPs", ")", "\n", "recs", "=", "TPs", "/", "(", "TPs", "+", "FNs", ")", "\n", "score", "=", "util", ".", "voc_ap", "(", "recs", ",", "precs", ")", "\n", "\n", "return", "(", "score", ",", "dict", "(", "ds", "=", "ds", ",", "sames", "=", "sames", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.squeezenet.__init__": [[7, 35], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "pretrained_networks.squeezenet.slice1.add_module", "pretrained_networks.squeezenet.slice2.add_module", "pretrained_networks.squeezenet.slice3.add_module", "pretrained_networks.squeezenet.slice4.add_module", "pretrained_networks.squeezenet.slice5.add_module", "pretrained_networks.squeezenet.slice6.add_module", "pretrained_networks.squeezenet.slice7.add_module", "pretrained_networks.squeezenet.parameters", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrained_features", "=", "tv", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.squeezenet.forward": [[36, 55], ["pretrained_networks.squeezenet.slice1", "pretrained_networks.squeezenet.slice2", "pretrained_networks.squeezenet.slice3", "pretrained_networks.squeezenet.slice4", "pretrained_networks.squeezenet.slice5", "pretrained_networks.squeezenet.slice6", "pretrained_networks.squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.alexnet.__init__": [[58, 80], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "pretrained_networks.alexnet.slice1.add_module", "pretrained_networks.alexnet.slice2.add_module", "pretrained_networks.alexnet.slice3.add_module", "pretrained_networks.alexnet.slice4.add_module", "pretrained_networks.alexnet.slice5.add_module", "pretrained_networks.alexnet.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "tv", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.alexnet.forward": [[81, 96], ["pretrained_networks.alexnet.slice1", "pretrained_networks.alexnet.slice2", "pretrained_networks.alexnet.slice3", "pretrained_networks.alexnet.slice4", "pretrained_networks.alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "alexnet_outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "alexnet_outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.vgg16.__init__": [[99, 121], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "pretrained_networks.vgg16.slice1.add_module", "pretrained_networks.vgg16.slice2.add_module", "pretrained_networks.vgg16.slice3.add_module", "pretrained_networks.vgg16.slice4.add_module", "pretrained_networks.vgg16.slice5.add_module", "pretrained_networks.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "tv", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.vgg16.forward": [[122, 137], ["pretrained_networks.vgg16.slice1", "pretrained_networks.vgg16.slice2", "pretrained_networks.vgg16.slice3", "pretrained_networks.vgg16.slice4", "pretrained_networks.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.resnet.__init__": [[140, 162], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet101", "torchvision.models.resnet152"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ",", "num", "=", "18", ")", ":", "\n", "        ", "super", "(", "resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "(", "num", "==", "18", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "34", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet34", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "50", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "101", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "(", "num", "==", "152", ")", ":", "\n", "            ", "self", ".", "net", "=", "tv", ".", "resnet152", "(", "pretrained", "=", "pretrained", ")", "\n", "", "self", ".", "N_slices", "=", "5", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "net", ".", "conv1", "\n", "self", ".", "bn1", "=", "self", ".", "net", ".", "bn1", "\n", "self", ".", "relu", "=", "self", ".", "net", ".", "relu", "\n", "self", ".", "maxpool", "=", "self", ".", "net", ".", "maxpool", "\n", "self", ".", "layer1", "=", "self", ".", "net", ".", "layer1", "\n", "self", ".", "layer2", "=", "self", ".", "net", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "net", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.pretrained_networks.resnet.forward": [[163, 182], ["pretrained_networks.resnet.conv1", "pretrained_networks.resnet.bn1", "pretrained_networks.resnet.relu", "pretrained_networks.resnet.maxpool", "pretrained_networks.resnet.layer1", "pretrained_networks.resnet.layer2", "pretrained_networks.resnet.layer3", "pretrained_networks.resnet.layer4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "X", ")", "\n", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "maxpool", "(", "h", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h_conv2", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_conv3", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_conv4", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_conv5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"Outputs\"", ",", "[", "'relu1'", ",", "'conv2'", ",", "'conv3'", ",", "'conv4'", ",", "'conv5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_conv2", ",", "h_conv3", ",", "h_conv4", ",", "h_conv5", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.__init__.PerceptualLoss.__init__": [[7, 20], ["super().__init__", "print", "dist_model.DistModel", "__init__.PerceptualLoss.model.initialize", "print", "print", "__init__.PerceptualLoss.model.name"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.initialize", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.name"], []], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.__init__.PerceptualLoss.forward": [[21, 36], ["__init__.PerceptualLoss.model.forward"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward"], []], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.normalize_tensor": [[6, 9], ["torch.sqrt", "torch.sum"], "function", ["None"], ["def", "normalize_tensor", "(", "in_feat", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "in_feat", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "in_feat", "/", "(", "norm_factor", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.l2": [[11, 13], ["numpy.mean"], "function", ["None"], ["", "def", "l2", "(", "p0", ",", "p1", ",", "range", "=", "255.", ")", ":", "\n", "    ", "return", ".5", "*", "np", ".", "mean", "(", "(", "p0", "/", "range", "-", "p1", "/", "range", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.psnr": [[15, 17], ["numpy.log10", "numpy.mean"], "function", ["None"], ["", "def", "psnr", "(", "p0", ",", "p1", ",", "peak", "=", "255.", ")", ":", "\n", "    ", "return", "10", "*", "np", ".", "log10", "(", "peak", "**", "2", "/", "np", ".", "mean", "(", "(", "1.", "*", "p0", "-", "1.", "*", "p1", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.dssim": [[19, 21], ["skimage.measure.compare_ssim"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.denoising_utils.compare_ssim"], ["", "def", "dssim", "(", "p0", ",", "p1", ",", "range", "=", "255.", ")", ":", "\n", "    ", "return", "(", "1", "-", "compare_ssim", "(", "p0", ",", "p1", ",", "data_range", "=", "range", ",", "multichannel", "=", "True", ")", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.rgb2lab": [[75, 78], ["color.rgb2lab"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.rgb2lab"], ["", "", "def", "rgb2lab", "(", "input", ")", ":", "\n", "    ", "from", "skimage", "import", "color", "\n", "return", "color", ".", "rgb2lab", "(", "input", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2np": [[31, 34], ["tensor_obj[].cpu().float().numpy().transpose", "tensor_obj[].cpu().float().numpy", "tensor_obj[].cpu().float", "tensor_obj[].cpu"], "function", ["None"], ["", "def", "tensor2np", "(", "tensor_obj", ")", ":", "\n", "# change dimension of a tensor object into a numpy array", "\n", "    ", "return", "tensor_obj", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.np2tensor": [[36, 39], ["torch.Tensor", "np_obj[].transpose"], "function", ["None"], ["", "def", "np2tensor", "(", "np_obj", ")", ":", "\n", "# change dimenion of np array into tensor array", "\n", "    ", "return", "torch", ".", "Tensor", "(", "np_obj", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2tensorlab": [[41, 54], ["util.tensor2im", "color.rgb2lab", "util.np2tensor"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.rgb2lab", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.np2tensor"], ["", "def", "tensor2tensorlab", "(", "image_tensor", ",", "to_norm", "=", "True", ",", "mc_only", "=", "False", ")", ":", "\n", "# image tensor to lab tensor", "\n", "    ", "from", "skimage", "import", "color", "\n", "\n", "img", "=", "tensor2im", "(", "image_tensor", ")", "\n", "img_lab", "=", "color", ".", "rgb2lab", "(", "img", ")", "\n", "if", "(", "mc_only", ")", ":", "\n", "        ", "img_lab", "[", ":", ",", ":", ",", "0", "]", "=", "img_lab", "[", ":", ",", ":", ",", "0", "]", "-", "50", "\n", "", "if", "(", "to_norm", "and", "not", "mc_only", ")", ":", "\n", "        ", "img_lab", "[", ":", ",", ":", ",", "0", "]", "=", "img_lab", "[", ":", ",", ":", ",", "0", "]", "-", "50", "\n", "img_lab", "=", "img_lab", "/", "100.", "\n", "\n", "", "return", "np2tensor", "(", "img_lab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensorlab2tensor": [[56, 73], ["warnings.filterwarnings", "util.tensor2np", "numpy.clip", "color.rgb2lab", "util.np2tensor", "util.im2tensor", "color.lab2rgb", "rgb_back.astype", "numpy.isclose", "util.im2tensor", "lab.astype", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2np", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.rgb2lab", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.np2tensor", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.im2tensor", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.im2tensor"], ["", "def", "tensorlab2tensor", "(", "lab_tensor", ",", "return_inbnd", "=", "False", ")", ":", "\n", "    ", "from", "skimage", "import", "color", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "lab", "=", "tensor2np", "(", "lab_tensor", ")", "*", "100.", "\n", "lab", "[", ":", ",", ":", ",", "0", "]", "=", "lab", "[", ":", ",", ":", ",", "0", "]", "+", "50", "\n", "\n", "rgb_back", "=", "255.", "*", "np", ".", "clip", "(", "color", ".", "lab2rgb", "(", "lab", ".", "astype", "(", "'float'", ")", ")", ",", "0", ",", "1", ")", "\n", "if", "(", "return_inbnd", ")", ":", "\n", "# convert back to lab, see if we match", "\n", "        ", "lab_back", "=", "color", ".", "rgb2lab", "(", "rgb_back", ".", "astype", "(", "'uint8'", ")", ")", "\n", "mask", "=", "1.", "*", "np", ".", "isclose", "(", "lab_back", ",", "lab", ",", "atol", "=", "2.", ")", "\n", "mask", "=", "np2tensor", "(", "np", ".", "prod", "(", "mask", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "return", "(", "im2tensor", "(", "rgb_back", ")", ",", "mask", ")", "\n", "", "else", ":", "\n", "        ", "return", "im2tensor", "(", "rgb_back", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2im": [[129, 134], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def tensor2im(image_tensor, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "cent", ")", "*", "factor", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.im2tensor": [[136, 140], ["torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "imtype", "=", "np", ".", "uint8", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "# def im2tensor(image, imtype=np.uint8, cent=1., factor=1.):", "\n", "    ", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.tensor2vec": [[91, 93], ["vector_tensor.data.cpu().numpy", "vector_tensor.data.cpu"], "function", ["None"], ["", "def", "tensor2vec", "(", "vector_tensor", ")", ":", "\n", "    ", "return", "vector_tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.util.voc_ap": [[95, 127], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.name": [[9, 11], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.initialize": [[12, 15], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "use_gpu", "=", "True", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.forward": [[16, 18], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.get_image_paths": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.optimize_parameters": [[22, 24], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.get_current_visuals": [[25, 27], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.get_current_errors": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save": [[31, 33], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save_network": [[35, 39], ["os.path.join", "torch.save", "network.state_dict"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "path", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.load_network": [[41, 46], ["os.path.join", "print", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'Loading network from %s'", "%", "save_path", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.update_learning_rate": [[47, 49], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save_done": [[53, 56], ["np.save", "np.savetxt", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.base_model.BaseModel.save"], ["", "def", "save_done", "(", "self", ",", "flag", "=", "False", ")", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "flag", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'done_flag'", ")", ",", "[", "flag", ",", "]", ",", "fmt", "=", "'%i'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.ListModule.__init__": [[8, 14], ["torch.Module.__init__", "unet.ListModule.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "ListModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "idx", "=", "0", "\n", "for", "module", "in", "args", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.ListModule.__getitem__": [[15, 25], ["iter", "range", "next", "len", "IndexError", "unet.ListModule._modules.values", "next", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", ">=", "len", "(", "self", ".", "_modules", ")", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "if", "idx", "<", "0", ":", "\n", "            ", "idx", "=", "len", "(", "self", ")", "+", "idx", "\n", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.ListModule.__iter__": [[26, 28], ["iter", "unet.ListModule._modules.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.ListModule.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.UNet.__init__": [[37, 75], ["torch.Module.__init__", "unet.unetConv2", "unet.unetDown", "unet.unetDown", "unet.unetDown", "unet.unetDown", "unet.unetUp", "unet.unetUp", "unet.unetUp", "unet.unetUp", "common.conv", "unet.ListModule", "unet.ListModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet.unetDown", "unet.unetUp", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["def", "__init__", "(", "self", ",", "num_input_channels", "=", "3", ",", "num_output_channels", "=", "3", ",", "\n", "feature_scale", "=", "4", ",", "more_layers", "=", "0", ",", "concat_x", "=", "False", ",", "\n", "upsample_mode", "=", "'deconv'", ",", "pad", "=", "'zero'", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ",", "need_sigmoid", "=", "True", ",", "need_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_scale", "=", "feature_scale", "\n", "self", ".", "more_layers", "=", "more_layers", "\n", "self", ".", "concat_x", "=", "concat_x", "\n", "\n", "\n", "filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "filters", "=", "[", "x", "//", "self", ".", "feature_scale", "for", "x", "in", "filters", "]", "\n", "\n", "self", ".", "start", "=", "unetConv2", "(", "num_input_channels", ",", "filters", "[", "0", "]", "if", "not", "concat_x", "else", "filters", "[", "0", "]", "-", "num_input_channels", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "\n", "\n", "self", ".", "down1", "=", "unetDown", "(", "filters", "[", "0", "]", ",", "filters", "[", "1", "]", "if", "not", "concat_x", "else", "filters", "[", "1", "]", "-", "num_input_channels", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "down2", "=", "unetDown", "(", "filters", "[", "1", "]", ",", "filters", "[", "2", "]", "if", "not", "concat_x", "else", "filters", "[", "2", "]", "-", "num_input_channels", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "down3", "=", "unetDown", "(", "filters", "[", "2", "]", ",", "filters", "[", "3", "]", "if", "not", "concat_x", "else", "filters", "[", "3", "]", "-", "num_input_channels", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "down4", "=", "unetDown", "(", "filters", "[", "3", "]", ",", "filters", "[", "4", "]", "if", "not", "concat_x", "else", "filters", "[", "4", "]", "-", "num_input_channels", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "\n", "\n", "# more downsampling layers", "\n", "if", "self", ".", "more_layers", ">", "0", ":", "\n", "            ", "self", ".", "more_downs", "=", "[", "\n", "unetDown", "(", "filters", "[", "4", "]", ",", "filters", "[", "4", "]", "if", "not", "concat_x", "else", "filters", "[", "4", "]", "-", "num_input_channels", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "for", "i", "in", "range", "(", "self", ".", "more_layers", ")", "]", "\n", "self", ".", "more_ups", "=", "[", "unetUp", "(", "filters", "[", "4", "]", ",", "upsample_mode", ",", "need_bias", ",", "pad", ",", "same_num_filt", "=", "True", ")", "for", "i", "in", "range", "(", "self", ".", "more_layers", ")", "]", "\n", "\n", "self", ".", "more_downs", "=", "ListModule", "(", "*", "self", ".", "more_downs", ")", "\n", "self", ".", "more_ups", "=", "ListModule", "(", "*", "self", ".", "more_ups", ")", "\n", "\n", "", "self", ".", "up4", "=", "unetUp", "(", "filters", "[", "3", "]", ",", "upsample_mode", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "up3", "=", "unetUp", "(", "filters", "[", "2", "]", ",", "upsample_mode", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "up2", "=", "unetUp", "(", "filters", "[", "1", "]", ",", "upsample_mode", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "up1", "=", "unetUp", "(", "filters", "[", "0", "]", ",", "upsample_mode", ",", "need_bias", ",", "pad", ")", "\n", "\n", "self", ".", "final", "=", "conv", "(", "filters", "[", "0", "]", ",", "num_output_channels", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", "\n", "\n", "if", "need_sigmoid", ":", "\n", "            ", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "self", ".", "final", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.UNet.forward": [[76, 127], ["torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "range", "unet.UNet.start", "unet.UNet.down1", "unet.UNet.down2", "unet.UNet.down3", "unet.UNet.down4", "unet.UNet.up4", "unet.UNet.up3", "unet.UNet.up2", "unet.UNet.up1", "unet.UNet.final", "downs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "range", "torch.AvgPool2d.", "d", "prevs.append", "l", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "# Downsample ", "\n", "        ", "downs", "=", "[", "inputs", "]", "\n", "down", "=", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "4", "+", "self", ".", "more_layers", ")", ":", "\n", "            ", "downs", ".", "append", "(", "down", "(", "downs", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "in64", "=", "self", ".", "start", "(", "inputs", ")", "\n", "if", "self", ".", "concat_x", ":", "\n", "            ", "in64", "=", "torch", ".", "cat", "(", "[", "in64", ",", "downs", "[", "0", "]", "]", ",", "1", ")", "\n", "\n", "", "down1", "=", "self", ".", "down1", "(", "in64", ")", "\n", "if", "self", ".", "concat_x", ":", "\n", "            ", "down1", "=", "torch", ".", "cat", "(", "[", "down1", ",", "downs", "[", "1", "]", "]", ",", "1", ")", "\n", "\n", "", "down2", "=", "self", ".", "down2", "(", "down1", ")", "\n", "if", "self", ".", "concat_x", ":", "\n", "            ", "down2", "=", "torch", ".", "cat", "(", "[", "down2", ",", "downs", "[", "2", "]", "]", ",", "1", ")", "\n", "\n", "", "down3", "=", "self", ".", "down3", "(", "down2", ")", "\n", "if", "self", ".", "concat_x", ":", "\n", "            ", "down3", "=", "torch", ".", "cat", "(", "[", "down3", ",", "downs", "[", "3", "]", "]", ",", "1", ")", "\n", "\n", "", "down4", "=", "self", ".", "down4", "(", "down3", ")", "\n", "if", "self", ".", "concat_x", ":", "\n", "            ", "down4", "=", "torch", ".", "cat", "(", "[", "down4", ",", "downs", "[", "4", "]", "]", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "more_layers", ">", "0", ":", "\n", "            ", "prevs", "=", "[", "down4", "]", "\n", "for", "kk", ",", "d", "in", "enumerate", "(", "self", ".", "more_downs", ")", ":", "\n", "# print(prevs[-1].size())", "\n", "                ", "out", "=", "d", "(", "prevs", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "concat_x", ":", "\n", "                    ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "downs", "[", "kk", "+", "5", "]", "]", ",", "1", ")", "\n", "\n", "", "prevs", ".", "append", "(", "out", ")", "\n", "\n", "", "up_", "=", "self", ".", "more_ups", "[", "-", "1", "]", "(", "prevs", "[", "-", "1", "]", ",", "prevs", "[", "-", "2", "]", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "more_layers", "-", "1", ")", ":", "\n", "                ", "l", "=", "self", ".", "more_ups", "[", "self", ".", "more", "-", "idx", "-", "2", "]", "\n", "up_", "=", "l", "(", "up_", ",", "prevs", "[", "self", ".", "more", "-", "idx", "-", "2", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "up_", "=", "down4", "\n", "\n", "", "up4", "=", "self", ".", "up4", "(", "up_", ",", "down3", ")", "\n", "up3", "=", "self", ".", "up3", "(", "up4", ",", "down2", ")", "\n", "up2", "=", "self", ".", "up2", "(", "up3", ",", "down1", ")", "\n", "up1", "=", "self", ".", "up1", "(", "up2", ",", "in64", ")", "\n", "\n", "return", "self", ".", "final", "(", "up1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.unetConv2.__init__": [[131, 147], ["torch.Module.__init__", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "common.conv", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "common.conv", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "common.conv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "common.conv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", ":", "\n", "        ", "super", "(", "unetConv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "pad", ")", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "conv", "(", "in_size", ",", "out_size", ",", "3", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ",", "\n", "norm_layer", "(", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "conv", "(", "out_size", ",", "out_size", ",", "3", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ",", "\n", "norm_layer", "(", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "conv", "(", "in_size", ",", "out_size", ",", "3", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "conv", "(", "out_size", ",", "out_size", ",", "3", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", ")", "\n", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.unetConv2.forward": [[147, 151], ["unet.unetConv2.conv1", "unet.unetConv2.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.unetDown.__init__": [[154, 158], ["torch.Module.__init__", "unet.unetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", ":", "\n", "        ", "super", "(", "unetDown", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "unetConv2", "(", "in_size", ",", "out_size", ",", "norm_layer", ",", "need_bias", ",", "pad", ")", "\n", "self", ".", "down", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.unetDown.forward": [[159, 163], ["unet.unetDown.down", "unet.unetDown.conv"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "down", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "conv", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.unetUp.__init__": [[166, 179], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet.unetConv2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet.unetConv2", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "common.conv"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "upsample_mode", ",", "need_bias", ",", "pad", ",", "same_num_filt", "=", "False", ")", ":", "\n", "        ", "super", "(", "unetUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "num_filt", "=", "out_size", "if", "same_num_filt", "else", "out_size", "*", "2", "\n", "if", "upsample_mode", "==", "'deconv'", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "num_filt", ",", "out_size", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "unetConv2", "(", "out_size", "*", "2", ",", "out_size", ",", "None", ",", "need_bias", ",", "pad", ")", "\n", "", "elif", "upsample_mode", "==", "'bilinear'", "or", "upsample_mode", "==", "'nearest'", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "upsample_mode", ",", "align_corners", "=", "True", ")", ",", "\n", "conv", "(", "num_filt", ",", "out_size", ",", "3", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "self", ".", "conv", "=", "unetConv2", "(", "out_size", "*", "2", ",", "out_size", ",", "None", ",", "need_bias", ",", "pad", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.unet.unetUp.forward": [[180, 193], ["unet.unetUp.up", "unet.unetUp.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs2.size", "unet.unetUp.size", "inputs2.size", "unet.unetUp.size", "inputs2.size", "unet.unetUp.size", "inputs2.size", "unet.unetUp.size", "unet.unetUp.size", "unet.unetUp.size"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "in1_up", "=", "self", ".", "up", "(", "inputs1", ")", "\n", "\n", "if", "(", "inputs2", ".", "size", "(", "2", ")", "!=", "in1_up", ".", "size", "(", "2", ")", ")", "or", "(", "inputs2", ".", "size", "(", "3", ")", "!=", "in1_up", ".", "size", "(", "3", ")", ")", ":", "\n", "            ", "diff2", "=", "(", "inputs2", ".", "size", "(", "2", ")", "-", "in1_up", ".", "size", "(", "2", ")", ")", "//", "2", "\n", "diff3", "=", "(", "inputs2", ".", "size", "(", "3", ")", "-", "in1_up", ".", "size", "(", "3", ")", ")", "//", "2", "\n", "inputs2_", "=", "inputs2", "[", ":", ",", ":", ",", "diff2", ":", "diff2", "+", "in1_up", ".", "size", "(", "2", ")", ",", "diff3", ":", "diff3", "+", "in1_up", ".", "size", "(", "3", ")", "]", "\n", "", "else", ":", "\n", "            ", "inputs2_", "=", "inputs2", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "torch", ".", "cat", "(", "[", "in1_up", ",", "inputs2_", "]", ",", "1", ")", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Concat.__init__": [[13, 19], ["torch.Module.__init__", "enumerate", "common.Concat.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Concat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Concat.forward": [[20, 41], ["common.Concat._modules.values", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.append", "numpy.all", "numpy.all", "min", "min", "module", "inputs_.append", "numpy.array", "min", "numpy.array", "min", "inp.size", "inp.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "inputs", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "inputs", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "\n", "", "inputs_shapes2", "=", "[", "x", ".", "shape", "[", "2", "]", "for", "x", "in", "inputs", "]", "\n", "inputs_shapes3", "=", "[", "x", ".", "shape", "[", "3", "]", "for", "x", "in", "inputs", "]", "\n", "\n", "if", "np", ".", "all", "(", "np", ".", "array", "(", "inputs_shapes2", ")", "==", "min", "(", "inputs_shapes2", ")", ")", "and", "np", ".", "all", "(", "np", ".", "array", "(", "inputs_shapes3", ")", "==", "min", "(", "inputs_shapes3", ")", ")", ":", "\n", "            ", "inputs_", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "target_shape2", "=", "min", "(", "inputs_shapes2", ")", "\n", "target_shape3", "=", "min", "(", "inputs_shapes3", ")", "\n", "\n", "inputs_", "=", "[", "]", "\n", "for", "inp", "in", "inputs", ":", "\n", "                ", "diff2", "=", "(", "inp", ".", "size", "(", "2", ")", "-", "target_shape2", ")", "//", "2", "\n", "diff3", "=", "(", "inp", ".", "size", "(", "3", ")", "-", "target_shape3", ")", "//", "2", "\n", "inputs_", ".", "append", "(", "inp", "[", ":", ",", ":", ",", "diff2", ":", "diff2", "+", "target_shape2", ",", "diff3", ":", "diff3", "+", "target_shape3", "]", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "inputs_", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Concat.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.GenNoise.__init__": [[47, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim2", ")", ":", "\n", "        ", "super", "(", "GenNoise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim2", "=", "dim2", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.GenNoise.forward": [[51, 62], ["list", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as.normal_", "torch.zeros().type_as.normal_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "a", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "a", "[", "1", "]", "=", "self", ".", "dim2", "\n", "# print (input.data.type())", "\n", "\n", "b", "=", "torch", ".", "zeros", "(", "a", ")", ".", "type_as", "(", "input", ".", "data", ")", "\n", "b", ".", "normal_", "(", ")", "\n", "\n", "x", "=", "torch", ".", "autograd", ".", "Variable", "(", "b", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Swish.__init__": [[69, 72], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Swish.forward": [[73, 75], ["common.Swish.s"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "s", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Tanh.__init__": [[81, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Tanh.forward": [[84, 86], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Sin.__init__": [[92, 94], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Sin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.Sin.forward": [[95, 97], ["torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "sin", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module": [[7, 9], ["common..add_module", "str", "len"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.add_module"], ["def", "add_module", "(", "self", ",", "module", ")", ":", "\n", "    ", "self", ".", "add_module", "(", "str", "(", "len", "(", "self", ")", "+", "1", ")", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act": [[98, 126], ["isinstance", "act_fun", "torch.LeakyReLU", "common.Swish", "torch.ELU", "len", "float", "torch.ELU", "torch.ReLU", "common.Tanh", "common.Sin", "torch.Softplus", "torch.Sequential"], "function", ["None"], ["", "", "def", "act", "(", "act_fun", "=", "'LeakyReLU'", ")", ":", "\n", "    ", "'''\n        Either string defining an activation function or module (e.g. nn.ReLU)\n    '''", "\n", "if", "isinstance", "(", "act_fun", ",", "str", ")", ":", "\n", "        ", "if", "act_fun", "==", "'LeakyReLU'", ":", "\n", "            ", "return", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "act_fun", "==", "'Swish'", ":", "\n", "            ", "return", "Swish", "(", ")", "\n", "", "elif", "act_fun", "[", ":", "3", "]", "==", "'ELU'", ":", "\n", "            ", "if", "len", "(", "act_fun", ")", ">", "3", ":", "\n", "                ", "param", "=", "float", "(", "act_fun", "[", "3", ":", "]", ")", "\n", "return", "nn", ".", "ELU", "(", "param", ",", "inplace", "=", "True", ")", "\n", "", "return", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "act_fun", "==", "'ReLU'", ":", "\n", "            ", "return", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "act_fun", "==", "'tanh'", ":", "\n", "            ", "return", "Tanh", "(", ")", "\n", "", "elif", "act_fun", "==", "'sine'", ":", "\n", "            ", "return", "Sin", "(", ")", "\n", "", "elif", "act_fun", "==", "'soft'", ":", "\n", "            ", "return", "nn", ".", "Softplus", "(", ")", "\n", "", "elif", "act_fun", "==", "'none'", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "", "else", ":", "\n", "        ", "return", "act_fun", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn": [[128, 152], ["torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "iterBN.IterNorm", "torch.GroupNorm"], "function", ["None"], ["", "", "def", "bn", "(", "num_features", ",", "mode", "=", "\"bn\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"bn\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "", "elif", "mode", "==", "\"bn_kai\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-4", ")", "\n", "", "elif", "mode", "==", "\"In\"", ":", "\n", "        ", "return", "nn", ".", "InstanceNorm2d", "(", "num_features", ",", "affine", "=", "True", ")", "\n", "", "elif", "mode", "==", "\"None\"", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "elif", "mode", "==", "\"bn_kai7\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "momentum", "=", "0.7", ",", "eps", "=", "1e-4", ")", "\n", "", "elif", "mode", "==", "\"bn_kai5\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "momentum", "=", "0.5", ",", "eps", "=", "1e-4", ")", "\n", "", "elif", "mode", "==", "\"bn_eps\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "eps", "=", "1e-4", ")", "\n", "", "elif", "mode", "==", "\"iterbn\"", ":", "\n", "        ", "return", "IterNorm", "(", "num_features", ")", "\n", "\n", "", "elif", "mode", "==", "\"groupNorm\"", ":", "\n", "        ", "return", "nn", ".", "GroupNorm", "(", "4", ",", "num_features", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.conv": [[154, 180], ["int", "torch.Conv2d", "filter", "torch.Sequential", "torch.ReflectionPad2d", "torch.AvgPool2d", "torch.MaxPool2d", "downsampler.Downsampler"], "function", ["None"], ["", "", "def", "conv", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "'zero'", ",", "group", "=", "1", ",", "downsample_mode", "=", "'stride'", ")", ":", "\n", "    ", "downsampler", "=", "None", "\n", "if", "stride", "!=", "1", "and", "downsample_mode", "!=", "'stride'", ":", "\n", "\n", "        ", "if", "downsample_mode", "==", "'avg'", ":", "\n", "            ", "downsampler", "=", "nn", ".", "AvgPool2d", "(", "stride", ",", "stride", ")", "\n", "", "elif", "downsample_mode", "==", "'max'", ":", "\n", "            ", "downsampler", "=", "nn", ".", "MaxPool2d", "(", "stride", ",", "stride", ")", "\n", "", "elif", "downsample_mode", "in", "[", "'lanczos2'", ",", "'lanczos3'", "]", ":", "\n", "            ", "downsampler", "=", "Downsampler", "(", "n_planes", "=", "out_f", ",", "factor", "=", "stride", ",", "kernel_type", "=", "downsample_mode", ",", "phase", "=", "0.5", ",", "preserve_size", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "stride", "=", "1", "\n", "\n", "", "padder", "=", "None", "\n", "to_pad", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "if", "pad", "==", "'reflection'", ":", "\n", "        ", "padder", "=", "nn", ".", "ReflectionPad2d", "(", "to_pad", ")", "\n", "to_pad", "=", "0", "\n", "\n", "", "convolver", "=", "nn", ".", "Conv2d", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", ",", "padding", "=", "to_pad", ",", "groups", "=", "group", ",", "bias", "=", "bias", ")", "\n", "\n", "\n", "layers", "=", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "[", "padder", ",", "convolver", ",", "downsampler", "]", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.downsampler.Downsampler.__init__": [[12, 87], ["torch.Module.__init__", "downsampler.get_kernel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "int", "int", "downsampler.pad_circular", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "int", "int", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.downsampler.get_kernel", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.downsampler.pad_circular"], ["def", "__init__", "(", "self", ",", "n_planes", ",", "factor", ",", "kernel_type", ",", "phase", "=", "0", ",", "kernel_width", "=", "None", ",", "support", "=", "None", ",", "sigma", "=", "None", ",", "\n", "preserve_size", "=", "False", ",", "pad_type", "=", "'reflection'", ",", "transpose_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", "Downsampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "phase", "in", "[", "0", ",", "0.5", "]", ",", "'phase should be 0 or 0.5'", "\n", "\n", "if", "kernel_type", "==", "'lanczos2'", ":", "\n", "            ", "support", "=", "2", "\n", "kernel_width", "=", "4", "*", "factor", "+", "1", "\n", "kernel_type_", "=", "'lanczos'", "\n", "\n", "", "elif", "kernel_type", "==", "'lanczos3'", ":", "\n", "            ", "support", "=", "3", "\n", "kernel_width", "=", "6", "*", "factor", "+", "1", "\n", "kernel_type_", "=", "'lanczos'", "\n", "\n", "", "elif", "kernel_type", "==", "'gauss12'", ":", "\n", "            ", "kernel_width", "=", "7", "\n", "sigma", "=", "1", "/", "2", "\n", "kernel_type_", "=", "'gauss'", "\n", "\n", "", "elif", "kernel_type", "==", "'gauss1sq2'", ":", "\n", "            ", "kernel_width", "=", "9", "\n", "sigma", "=", "1.", "/", "np", ".", "sqrt", "(", "2", ")", "\n", "kernel_type_", "=", "'gauss'", "\n", "\n", "", "elif", "kernel_type", "==", "'uniform_blur'", ":", "\n", "            ", "kernel_width", "=", "9", "\n", "kernel_type_", "=", "'uniform'", "\n", "pad_type", "=", "'circular'", "\n", "\n", "", "elif", "kernel_type", "==", "'gauss_blur'", ":", "\n", "            ", "kernel_width", "=", "25", "\n", "sigma", "=", "1.6", "\n", "kernel_type_", "=", "'gauss'", "\n", "pad_type", "=", "'circular'", "\n", "\n", "", "elif", "kernel_type", "in", "{", "'lanczos'", ",", "'gauss'", ",", "'box'", "}", ":", "\n", "            ", "kernel_type_", "=", "kernel_type", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'wrong name kernel'", "\n", "\n", "# note that `kernel width` will be different to actual size for phase = 1/2", "\n", "", "self", ".", "kernel", "=", "get_kernel", "(", "factor", ",", "kernel_type_", ",", "phase", ",", "kernel_width", ",", "support", "=", "support", ",", "sigma", "=", "sigma", ")", "\n", "if", "transpose_conv", ":", "\n", "            ", "if", "self", ".", "kernel", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "                ", "pad", "=", "int", "(", "(", "self", ".", "kernel", ".", "shape", "[", "0", "]", "-", "1", ")", "//", "2.", ")", "\n", "", "else", ":", "\n", "                ", "pad", "=", "int", "(", "(", "self", ".", "kernel", ".", "shape", "[", "0", "]", "-", "factor", ")", "//", "2.", ")", "\n", "", "downsampler", "=", "nn", ".", "ConvTranspose2d", "(", "n_planes", ",", "n_planes", ",", "kernel_size", "=", "self", ".", "kernel", ".", "shape", ",", "\n", "stride", "=", "factor", ",", "padding", "=", "pad", ")", "\n", "", "else", ":", "\n", "            ", "downsampler", "=", "nn", ".", "Conv2d", "(", "n_planes", ",", "n_planes", ",", "kernel_size", "=", "self", ".", "kernel", ".", "shape", ",", "stride", "=", "factor", ",", "padding", "=", "0", ")", "\n", "", "downsampler", ".", "weight", ".", "data", "[", ":", "]", "=", "0", "\n", "downsampler", ".", "bias", ".", "data", "[", ":", "]", "=", "0", "\n", "\n", "kernel_torch", "=", "torch", ".", "from_numpy", "(", "self", ".", "kernel", ")", "\n", "for", "i", "in", "range", "(", "n_planes", ")", ":", "\n", "            ", "downsampler", ".", "weight", ".", "data", "[", "i", ",", "i", "]", "=", "kernel_torch", "\n", "\n", "", "self", ".", "downsampler_", "=", "downsampler", "\n", "\n", "if", "preserve_size", ":", "\n", "            ", "if", "pad_type", "==", "'circular'", ":", "\n", "                ", "self", ".", "padding", "=", "lambda", "torch_in", ":", "pad_circular", "(", "torch_in", ",", "kernel_width", "//", "2", ")", "\n", "", "elif", "pad_type", "==", "'reflection'", ":", "\n", "                ", "if", "self", ".", "kernel", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "                    ", "pad", "=", "int", "(", "(", "self", ".", "kernel", ".", "shape", "[", "0", "]", "-", "1", ")", "//", "2.", ")", "\n", "", "else", ":", "\n", "                    ", "pad", "=", "int", "(", "(", "self", ".", "kernel", ".", "shape", "[", "0", "]", "-", "factor", ")", "//", "2.", ")", "\n", "", "self", ".", "padding", "=", "nn", ".", "ReplicationPad2d", "(", "pad", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"pad_type have only circular or reflection options\"", "\n", "", "", "self", ".", "preserve_size", "=", "preserve_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.downsampler.Downsampler.forward": [[88, 95], ["downsampler.Downsampler.downsampler_", "downsampler.Downsampler.padding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "preserve_size", ":", "\n", "            ", "x", "=", "self", ".", "padding", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "input", "\n", "", "self", ".", "x", "=", "x", "\n", "return", "self", ".", "downsampler_", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.downsampler.get_kernel": [[97, 147], ["np.ones.sum", "numpy.zeros", "numpy.zeros", "utils.REDutils.fspecial_gauss", "numpy.ones", "range", "range", "abs", "abs", "abs", "abs", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.utils.REDutils.fspecial_gauss"], ["", "", "def", "get_kernel", "(", "factor", ",", "kernel_type", ",", "phase", ",", "kernel_width", ",", "support", "=", "None", ",", "sigma", "=", "None", ")", ":", "\n", "    ", "assert", "kernel_type", "in", "[", "'lanczos'", ",", "'gauss'", ",", "'box'", ",", "'uniform'", ",", "'blur'", "]", "\n", "\n", "# factor  = float(factor)", "\n", "if", "phase", "==", "0.5", "and", "kernel_type", "!=", "'box'", ":", "\n", "        ", "kernel", "=", "np", ".", "zeros", "(", "[", "kernel_width", "-", "1", ",", "kernel_width", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "kernel", "=", "np", ".", "zeros", "(", "[", "kernel_width", ",", "kernel_width", "]", ")", "\n", "\n", "", "if", "kernel_type", "==", "'box'", ":", "\n", "        ", "assert", "phase", "==", "0.5", ",", "'Box filter is always half-phased'", "\n", "kernel", "[", ":", "]", "=", "1.", "/", "(", "kernel_width", "*", "kernel_width", ")", "\n", "\n", "", "elif", "kernel_type", "==", "'gauss'", ":", "\n", "        ", "assert", "sigma", ",", "'sigma is not specified'", "\n", "assert", "phase", "!=", "0.5", ",", "'phase 1/2 for gauss not implemented'", "\n", "return", "fspecial_gauss", "(", "kernel_width", ",", "sigma", ")", "\n", "\n", "", "elif", "kernel_type", "==", "'uniform'", ":", "\n", "        ", "kernel", "=", "np", ".", "ones", "(", "[", "kernel_width", ",", "kernel_width", "]", ")", "\n", "\n", "", "elif", "kernel_type", "==", "'lanczos'", ":", "\n", "        ", "assert", "support", ",", "'support is not specified'", "\n", "center", "=", "(", "kernel_width", "+", "1", ")", "/", "2.", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "kernel", ".", "shape", "[", "0", "]", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "kernel", ".", "shape", "[", "1", "]", "+", "1", ")", ":", "\n", "\n", "                ", "if", "phase", "==", "0.5", ":", "\n", "                    ", "di", "=", "abs", "(", "i", "+", "0.5", "-", "center", ")", "/", "factor", "\n", "dj", "=", "abs", "(", "j", "+", "0.5", "-", "center", ")", "/", "factor", "\n", "", "else", ":", "\n", "                    ", "di", "=", "abs", "(", "i", "-", "center", ")", "/", "factor", "\n", "dj", "=", "abs", "(", "j", "-", "center", ")", "/", "factor", "\n", "\n", "", "pi_sq", "=", "np", ".", "pi", "*", "np", ".", "pi", "\n", "\n", "val", "=", "1", "\n", "if", "di", "!=", "0", ":", "\n", "                    ", "val", "=", "val", "*", "support", "*", "np", ".", "sin", "(", "np", ".", "pi", "*", "di", ")", "*", "np", ".", "sin", "(", "np", ".", "pi", "*", "di", "/", "support", ")", "\n", "val", "=", "val", "/", "(", "np", ".", "pi", "*", "np", ".", "pi", "*", "di", "*", "di", ")", "\n", "\n", "", "if", "dj", "!=", "0", ":", "\n", "                    ", "val", "=", "val", "*", "support", "*", "np", ".", "sin", "(", "np", ".", "pi", "*", "dj", ")", "*", "np", ".", "sin", "(", "np", ".", "pi", "*", "dj", "/", "support", ")", "\n", "val", "=", "val", "/", "(", "np", ".", "pi", "*", "np", ".", "pi", "*", "dj", "*", "dj", ")", "\n", "", "kernel", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "=", "val", "\n", "", "", "", "else", ":", "\n", "        ", "assert", "False", ",", "'wrong method name'", "\n", "", "kernel", "/=", "kernel", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.downsampler.pad_circular": [[149, 160], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "pad_circular", "(", "x", ",", "pad", ")", ":", "\n", "    ", "\"\"\"\n    :param x: pytorch tensor of shape: [batch, ch, h, w]\n    :param pad: uint\n    :return:\n    \"\"\"", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", "[", ":", ",", ":", ",", "0", ":", "pad", "]", "]", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "pad", "]", "]", ",", "dim", "=", "3", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", "-", "2", "*", "pad", ":", "-", "pad", "]", ",", "x", "]", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", ":", ",", "-", "2", "*", "pad", ":", "-", "pad", "]", ",", "x", "]", ",", "dim", "=", "3", ")", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResidualSequential.__init__": [[10, 12], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "ResidualSequential", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResidualSequential.forward": [[13, 25], ["super().forward", "super().forward.size", "x.size", "super().forward.size", "x.size", "x.size", "super().forward.size", "x.size", "super().forward.size", "super().forward.size", "super().forward.size"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "super", "(", "ResidualSequential", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# print(x.size(), out.size())", "\n", "x_", "=", "None", "\n", "if", "out", ".", "size", "(", "2", ")", "!=", "x", ".", "size", "(", "2", ")", "or", "out", ".", "size", "(", "3", ")", "!=", "x", ".", "size", "(", "3", ")", ":", "\n", "            ", "diff2", "=", "x", ".", "size", "(", "2", ")", "-", "out", ".", "size", "(", "2", ")", "\n", "diff3", "=", "x", ".", "size", "(", "3", ")", "-", "out", ".", "size", "(", "3", ")", "\n", "# print(1)", "\n", "x_", "=", "x", "[", ":", ",", ":", ",", "diff2", "/", "2", ":", "out", ".", "size", "(", "2", ")", "+", "diff2", "/", "2", ",", "diff3", "/", "2", ":", "out", ".", "size", "(", "3", ")", "+", "diff3", "/", "2", "]", "\n", "", "else", ":", "\n", "            ", "x_", "=", "x", "\n", "", "return", "out", "+", "x_", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResidualSequential.eval": [[26, 31], ["print", "resnet.ResidualSequential.modules", "exit", "m.eval"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResNet.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "print", "(", "2", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResNet.__init__": [[45, 91], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "common.conv", "common.act", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "common.conv", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "s", "resnet.get_block"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.get_block"], ["    ", "def", "__init__", "(", "self", ",", "num_input_channels", ",", "num_output_channels", ",", "num_blocks", ",", "num_channels", ",", "need_residual", "=", "True", ",", "act_fun", "=", "'LeakyReLU'", ",", "need_sigmoid", "=", "True", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "'''\n            pad = 'start|zero|replication'\n        '''", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "need_residual", ":", "\n", "            ", "s", "=", "ResidualSequential", "\n", "", "else", ":", "\n", "            ", "s", "=", "nn", ".", "Sequential", "\n", "\n", "", "stride", "=", "1", "\n", "# First layers", "\n", "layers", "=", "[", "\n", "# nn.ReplicationPad2d(num_blocks * 2 * stride + 3),", "\n", "conv", "(", "num_input_channels", ",", "num_channels", ",", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "act", "(", "act_fun", ")", "\n", "]", "\n", "# Residual blocks", "\n", "# layers_residual = []", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", "+=", "[", "s", "(", "*", "get_block", "(", "num_channels", ",", "norm_layer", ",", "act_fun", ")", ")", "]", "\n", "\n", "", "layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "num_channels", ",", "num_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "norm_layer", "(", "num_channels", ",", "affine", "=", "True", ")", "\n", "]", "\n", "\n", "# if need_residual:", "\n", "#     layers += [ResidualSequential(*layers_residual)]", "\n", "# else:", "\n", "#     layers += [Sequential(*layers_residual)]", "\n", "\n", "# if factor >= 2: ", "\n", "#     # Do upsampling if needed", "\n", "#     layers += [", "\n", "#         nn.Conv2d(num_channels, num_channels *", "\n", "#                   factor ** 2, 3, 1),", "\n", "#         nn.PixelShuffle(factor),", "\n", "#         act(act_fun)", "\n", "#     ]", "\n", "layers", "+=", "[", "\n", "conv", "(", "num_channels", ",", "num_output_channels", ",", "3", ",", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResNet.forward": [[92, 94], ["resnet.ResNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResNet.eval": [[95, 97], ["resnet.ResNet.model.eval"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.ResNet.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.resnet.get_block": [[33, 42], ["torch.Conv2d", "norm_layer", "common.act", "torch.Conv2d", "norm_layer"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["", "", "def", "get_block", "(", "num_channels", ",", "norm_layer", ",", "act_fun", ")", ":", "\n", "    ", "layers", "=", "[", "\n", "nn", ".", "Conv2d", "(", "num_channels", ",", "num_channels", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "num_channels", ",", "affine", "=", "True", ")", ",", "\n", "act", "(", "act_fun", ")", ",", "\n", "nn", ".", "Conv2d", "(", "num_channels", ",", "num_channels", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "num_channels", ",", "affine", "=", "True", ")", ",", "\n", "]", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.iterative_normalization_py.forward": [[35, 75], ["X.transpose().contiguous().view", "X.transpose().contiguous().view.size", "P[].mul_.mm", "P[].mul_.mm.view().transpose().contiguous", "ctx.save_for_backward", "X.size", "X.transpose().contiguous().view.mean", "saved.append", "torch.eye().to", "torch.addmm", "saved.append", "saved.append", "range", "saved.extend", "P[].mul_", "running_mean.copy_", "running_wmat.copy_", "X.transpose().contiguous", "xc.transpose", "torch.addmm", "rTr.sqrt", "P[].mul_.mm.view().transpose", "torch.eye", "torch.matrix_power", "X.transpose", "P[].mul_.mm.view", "X.size", "X.size", "X.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "X", ",", "running_mean", ",", "running_wmat", ",", "nc", ",", "ctx", ".", "T", ",", "eps", ",", "momentum", ",", "training", "=", "args", "\n", "# change NxCxHxW to Dx(NxHxW), i.e., d*m", "\n", "ctx", ".", "g", "=", "X", ".", "size", "(", "1", ")", "//", "nc", "\n", "x", "=", "X", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nc", ",", "-", "1", ")", "\n", "d", ",", "m", "=", "x", ".", "size", "(", ")", "\n", "saved", "=", "[", "]", "\n", "if", "training", ":", "\n", "# calculate centered activation by subtracted mini-batch mean", "\n", "            ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "xc", "=", "x", "-", "mean", "\n", "saved", ".", "append", "(", "xc", ")", "\n", "# calculate covariance matrix", "\n", "P", "=", "[", "None", "]", "*", "(", "ctx", ".", "T", "+", "1", ")", "\n", "P", "[", "0", "]", "=", "torch", ".", "eye", "(", "d", ")", ".", "to", "(", "X", ")", "\n", "# Sigma = torch.addmm(eps, P[0], 1. / m, xc, xc.transpose(0, 1))", "\n", "#beta = 1, mat, alpha = 1, mat1, mat2, out = None", "\n", "# input, mat1, mat2, *, beta=1, alpha=1, out=None", "\n", "Sigma", "=", "torch", ".", "addmm", "(", "P", "[", "0", "]", ",", "xc", ",", "xc", ".", "transpose", "(", "0", ",", "1", ")", ",", "beta", "=", "eps", ",", "alpha", "=", "1.", "/", "m", ")", "\n", "\n", "# reciprocal of trace of Sigma: shape [g, 1, 1]", "\n", "rTr", "=", "(", "Sigma", "*", "P", "[", "0", "]", ")", ".", "sum", "(", "(", "0", ",", "1", ")", ",", "keepdim", "=", "True", ")", ".", "reciprocal_", "(", ")", "\n", "saved", ".", "append", "(", "rTr", ")", "\n", "Sigma_N", "=", "Sigma", "*", "rTr", "\n", "saved", ".", "append", "(", "Sigma_N", ")", "\n", "for", "k", "in", "range", "(", "ctx", ".", "T", ")", ":", "\n", "                ", "P", "[", "k", "+", "1", "]", "=", "torch", ".", "addmm", "(", "P", "[", "k", "]", ",", "torch", ".", "matrix_power", "(", "P", "[", "k", "]", ",", "3", ")", ",", "Sigma_N", ",", "beta", "=", "1.5", ",", "alpha", "=", "-", "0.5", ")", "\n", "# P[k + 1] = torch.addmm(1.5, P[k], -0.5, torch.matrix_power(P[k], 3), Sigma_N)", "\n", "", "saved", ".", "extend", "(", "P", ")", "\n", "wm", "=", "P", "[", "ctx", ".", "T", "]", ".", "mul_", "(", "rTr", ".", "sqrt", "(", ")", ")", "# whiten matrix: the matrix inverse of Sigma, i.e., Sigma^{-1/2}", "\n", "running_mean", ".", "copy_", "(", "momentum", "*", "mean", "+", "(", "1.", "-", "momentum", ")", "*", "running_mean", ")", "\n", "running_wmat", ".", "copy_", "(", "momentum", "*", "wm", "+", "(", "1.", "-", "momentum", ")", "*", "running_wmat", ")", "\n", "", "else", ":", "\n", "            ", "xc", "=", "x", "-", "running_mean", "\n", "wm", "=", "running_wmat", "\n", "", "xn", "=", "wm", ".", "mm", "(", "xc", ")", "\n", "Xn", "=", "xn", ".", "view", "(", "X", ".", "size", "(", "1", ")", ",", "X", ".", "size", "(", "0", ")", ",", "*", "X", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "ctx", ".", "save_for_backward", "(", "*", "saved", ")", "\n", "return", "Xn", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.iterative_normalization_py.backward": [[76, 107], ["saved[].transpose", "xc.size", "grad.transpose().contiguous().view_as", "grad.transpose().contiguous().view_as.mm", "range", "torch.addmm", "torch.addmm.view().transpose().contiguous", "xc.transpose", "rTr.sqrt", "P[].transpose_", "P[].mm", "P[].mm.mm().mm", "g_P.mm", "g_P.addmm_", "g_P.addmm_", "g_P.addmm_", "wm.mm", "grad.transpose().contiguous", "P[].mm", "torch.addmm.view().transpose", "P[].mm.mm", "g_sn.transpose", "grad.transpose().contiguous().view_as.mean", "grad.transpose", "torch.addmm.view", "grad.transpose().contiguous().view_as.mm.transpose().mm", "grad.size", "grad.size", "saved[].transpose.mm", "grad.transpose().contiguous().view_as.mm.transpose", "grad.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_outputs", ")", ":", "\n", "        ", "grad", ",", "=", "grad_outputs", "\n", "saved", "=", "ctx", ".", "saved_variables", "\n", "xc", "=", "saved", "[", "0", "]", "# centered input", "\n", "rTr", "=", "saved", "[", "1", "]", "# trace of Sigma", "\n", "sn", "=", "saved", "[", "2", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "# normalized Sigma", "\n", "P", "=", "saved", "[", "3", ":", "]", "# middle result matrix,", "\n", "d", ",", "m", "=", "xc", ".", "size", "(", ")", "\n", "\n", "g_", "=", "grad", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view_as", "(", "xc", ")", "\n", "g_wm", "=", "g_", ".", "mm", "(", "xc", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "g_P", "=", "g_wm", "*", "rTr", ".", "sqrt", "(", ")", "\n", "wm", "=", "P", "[", "ctx", ".", "T", "]", "\n", "g_sn", "=", "0", "\n", "for", "k", "in", "range", "(", "ctx", ".", "T", ",", "1", ",", "-", "1", ")", ":", "\n", "            ", "P", "[", "k", "-", "1", "]", ".", "transpose_", "(", "-", "2", ",", "-", "1", ")", "\n", "P2", "=", "P", "[", "k", "-", "1", "]", ".", "mm", "(", "P", "[", "k", "-", "1", "]", ")", "\n", "g_sn", "+=", "P2", ".", "mm", "(", "P", "[", "k", "-", "1", "]", ")", ".", "mm", "(", "g_P", ")", "\n", "g_tmp", "=", "g_P", ".", "mm", "(", "sn", ")", "\n", "g_P", ".", "addmm_", "(", "g_tmp", ",", "P2", ",", "beta", "=", "1.5", ",", "alpha", "=", "-", "0.5", ")", "\n", "g_P", ".", "addmm_", "(", "P2", ",", "g_tmp", ",", "beta", "=", "1", ",", "alpha", "=", "-", "0.5", ")", "\n", "g_P", ".", "addmm_", "(", "P", "[", "k", "-", "1", "]", ".", "mm", "(", "g_tmp", ")", ",", "P", "[", "k", "-", "1", "]", ",", "beta", "=", "1", ",", "alpha", "=", "-", "0.5", ")", "\n", "", "g_sn", "+=", "g_P", "\n", "# g_sn = g_sn * rTr.sqrt()", "\n", "g_tr", "=", "(", "(", "-", "sn", ".", "mm", "(", "g_sn", ")", "+", "g_wm", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "mm", "(", "wm", ")", ")", "*", "P", "[", "0", "]", ")", ".", "sum", "(", "(", "0", ",", "1", ")", ",", "keepdim", "=", "True", ")", "*", "P", "[", "0", "]", "\n", "g_sigma", "=", "(", "g_sn", "+", "g_sn", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "+", "2.", "*", "g_tr", ")", "*", "(", "-", "0.5", "/", "m", "*", "rTr", ")", "\n", "# g_sigma = g_sigma + g_sigma.transpose(-2, -1)", "\n", "g_x", "=", "torch", ".", "addmm", "(", "wm", ".", "mm", "(", "g_", "-", "g_", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ")", ",", "g_sigma", ",", "xc", ")", "\n", "grad_input", "=", "g_x", ".", "view", "(", "grad", ".", "size", "(", "1", ")", ",", "grad", ".", "size", "(", "0", ")", ",", "*", "grad", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm_Single.__init__": [[110, 126], ["super().__init__", "iterBN.IterNorm_Single.register_buffer", "iterBN.IterNorm_Single.register_buffer", "torch.zeros", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_groups", "=", "1", ",", "num_channels", "=", "None", ",", "T", "=", "5", ",", "dim", "=", "4", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IterNorm_Single", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assert dim == 4, 'IterNorm is not support 2D'", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "dim", "=", "dim", "\n", "shape", "=", "[", "1", "]", "*", "dim", "\n", "shape", "[", "1", "]", "=", "self", ".", "num_features", "\n", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ",", "1", ")", ")", "\n", "# running whiten matrix", "\n", "self", ".", "register_buffer", "(", "'running_wm'", ",", "torch", ".", "eye", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm_Single.forward": [[127, 131], ["iterative_normalization_py.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "X_hat", "=", "iterative_normalization_py", ".", "apply", "(", "X", ",", "self", ".", "running_mean", ",", "self", ".", "running_wm", ",", "self", ".", "num_features", ",", "self", ".", "T", ",", "\n", "self", ".", "eps", ",", "self", ".", "momentum", ",", "self", ".", "training", ")", "\n", "return", "X_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm.__init__": [[134, 163], ["super().__init__", "torch.nn.ModuleList", "iterBN.IterNorm.iterNorm_Groups.append", "iterBN.IterNorm.reset_parameters", "iterBN.IterNorm_Single", "torch.nn.Parameter", "torch.nn.Parameter", "iterBN.IterNorm.register_parameter", "iterBN.IterNorm.register_parameter", "iterBN.IterNorm_Single", "torch.Tensor", "torch.Tensor", "range"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_groups", "=", "1", ",", "num_channels", "=", "None", ",", "T", "=", "5", ",", "dim", "=", "4", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IterNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assert dim == 4, 'IterNorm is not support 2D'", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_channels", "=", "num_features", "\n", "#num_groups = (self.num_features - 1) // self.num_channels + 1", "\n", "self", ".", "num_groups", "=", "num_groups", "\n", "self", ".", "iterNorm_Groups", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "IterNorm_Single", "(", "num_features", "=", "self", ".", "num_channels", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "T", "=", "T", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "num_groups", "-", "1", ")", "]", "\n", ")", "\n", "num_channels_last", "=", "self", ".", "num_features", "-", "self", ".", "num_channels", "*", "(", "self", ".", "num_groups", "-", "1", ")", "\n", "self", ".", "iterNorm_Groups", ".", "append", "(", "IterNorm_Single", "(", "num_features", "=", "num_channels_last", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "T", "=", "T", ")", ")", "\n", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "dim", "=", "dim", "\n", "shape", "=", "[", "1", "]", "*", "dim", "\n", "shape", "[", "1", "]", "=", "self", ".", "num_features", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "shape", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm.reset_parameters": [[164, 169], ["torch.nn.init.ones_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# self.reset_running_stats()", "\n", "        ", "if", "self", ".", "affine", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm.forward": [[170, 182], ["torch.split", "range", "torch.cat", "X_hat_splits.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "X_splits", "=", "torch", ".", "split", "(", "X", ",", "self", ".", "num_channels", ",", "dim", "=", "1", ")", "\n", "X_hat_splits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_groups", ")", ":", "\n", "            ", "X_hat_tmp", "=", "self", ".", "iterNorm_Groups", "[", "i", "]", "(", "X_splits", "[", "i", "]", ")", "\n", "X_hat_splits", ".", "append", "(", "X_hat_tmp", ")", "\n", "", "X_hat", "=", "torch", ".", "cat", "(", "X_hat_splits", ",", "dim", "=", "1", ")", "\n", "# affine", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "return", "X_hat", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "X_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.iterBN.IterNorm.extra_repr": [[183, 186], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'{num_features}, num_channels={num_channels}, T={T}, eps={eps}, '", "'momentum={momentum}, affine={affine}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.snet_test.__init__": [[7, 19], ["torch.Module.__init__", "conv", "conv", "conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sigmoid", "torch.Sigmoid", "bn", "act", "bn", "act", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["   ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "out_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ",", "bn_mode", "=", "\"bn\"", ")", ":", "\n", "        ", "super", "(", "snet_test", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "img_ch", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "32", ",", "out_ch", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", "\n", "self", ".", "conv_", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "bn", "(", "64", ",", "bn_mode", ")", ",", "act", "(", "act_type", ")", ",", "\n", "bn", "(", "64", ",", "bn_mode", ")", ",", "act", "(", "act_type", ")", ",", "self", ".", "conv2", ",", ")", "\n", "\n", "self", ".", "conv__", "=", "nn", ".", "Sequential", "(", "\n", "bn", "(", "32", ",", "bn_mode", ")", ",", "act", "(", "act_type", ")", ",", "self", ".", "conv3", ")", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.snet_test.forward": [[21, 26], ["snet.snet_test.conv_", "snet.snet_test.conv__", "snet.snet_test.Sig", "x.std", "x.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "x", ".", "mean", "(", ")", ")", "/", "(", "x", ".", "std", "(", ")", ")", "\n", "d0", "=", "self", ".", "conv_", "(", "x", ")", "\n", "d0", "=", "self", ".", "conv__", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", "/", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.snet_4x.__init__": [[28, 40], ["torch.Module.__init__", "conv", "conv", "conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sigmoid", "torch.Sigmoid", "bn", "act", "bn", "act", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "out_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ",", "bn_mode", "=", "\"bn\"", ")", ":", "\n", "        ", "super", "(", "snet_4x", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "img_ch", "*", "4", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "32", ",", "out_ch", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", "\n", "self", ".", "conv_", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "bn", "(", "64", ",", "bn_mode", ")", ",", "act", "(", "act_type", ")", ",", "\n", "bn", "(", "64", ",", "bn_mode", ")", ",", "act", "(", "act_type", ")", ",", "self", ".", "conv2", ",", ")", "\n", "\n", "self", ".", "conv__", "=", "nn", ".", "Sequential", "(", "\n", "bn", "(", "32", ",", "bn_mode", ")", ",", "act", "(", "act_type", ")", ",", "self", ".", "conv3", ")", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.snet_4x.forward": [[41, 51], ["torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "snet.snet_4x.conv_", "snet.snet_4x.conv__", "snet.snet_4x.Sig", "torch.cat.std", "torch.cat.std", "torch.cat.mean", "torch.cat.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "x", ".", "mean", "(", ")", ")", "/", "(", "x", ".", "std", "(", ")", ")", "\n", "x_bu", "=", "torch", ".", "flip", "(", "x", ",", "dims", "=", "[", "2", "]", ")", "\n", "x_rl", "=", "torch", ".", "flip", "(", "x", ",", "dims", "=", "[", "3", "]", ")", "\n", "x_all", "=", "torch", ".", "flip", "(", "x", ",", "dims", "=", "[", "2", ",", "3", "]", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_bu", ",", "x_rl", ",", "x_all", "]", ",", "dim", "=", "1", ")", "\n", "\n", "d0", "=", "self", ".", "conv_", "(", "x", ")", "\n", "d0", "=", "self", ".", "conv__", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", "/", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.S2SnetW.__init__": [[55, 59], ["torch.Module.__init__", "snet.snet_test", "snet.snet_test"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "super", "(", "S2SnetW", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net1", "=", "snet_test", "(", "img_ch", ",", "output_ch", ",", "act_type", ",", "pad", ")", "\n", "self", ".", "net2", "=", "snet_test", "(", "img_ch", ",", "output_ch", ",", "act_type", ",", "pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.S2SnetW.forward": [[60, 62], ["snet.S2SnetW.net2", "snet.S2SnetW.net1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net2", "(", "self", ".", "net1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.S2SnetT.__init__": [[65, 68], ["torch.Module.__init__", "snet.snet_test"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "super", "(", "S2SnetT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "snet_test", "(", "img_ch", ",", "output_ch", ",", "act_type", ",", "pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.snet.S2SnetT.forward": [[69, 71], ["snet.S2SnetT.net", "snet.S2SnetT.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "self", ".", "net", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv": [[9, 16], ["torch.Conv2d", "torch.Sequential", "torch.ReflectionPad2d", "torch.Conv2d"], "function", ["None"], ["def", "conv", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "'zero'", ")", ":", "\n", "    ", "if", "pad", "==", "'zero'", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "/", "2", ",", "bias", "=", "bias", ")", "\n", "", "elif", "pad", "==", "'reflection'", ":", "\n", "        ", "layers", "=", "[", "nn", ".", "ReflectionPad2d", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ",", "bias", "=", "bias", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.get_texture_nets": [[17, 80], ["range", "len", "torch.Sequential", "torch.AvgPool2d", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "model.add", "nn.Sequential.add", "common.conv", "normalization", "common.act", "common.conv", "normalization", "common.act", "common.conv", "normalization", "common.act", "nn.Sequential.add", "torch.Sequential", "nn.Sequential.add", "cur_temp.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "torch.Sigmoid", "common.GenNoise", "torch.Upsample", "normalization", "normalization", "common.Concat", "common.conv", "normalization", "common.act", "common.conv", "normalization", "common.act", "common.conv", "normalization", "common.act", "nn.Sequential.add", "nn.Sequential.add", "len", "common.conv", "torch.Upsample"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "", "def", "get_texture_nets", "(", "inp", "=", "3", ",", "ratios", "=", "[", "32", ",", "16", ",", "8", ",", "4", ",", "2", ",", "1", "]", ",", "fill_noise", "=", "False", ",", "pad", "=", "'zero'", ",", "need_sigmoid", "=", "False", ",", "conv_num", "=", "8", ",", "upsample_mode", "=", "'nearest'", ")", ":", "\n", "\n", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", ":", "\n", "        ", "j", "=", "i", "+", "1", "\n", "\n", "seq", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "tmp", "=", "nn", ".", "AvgPool2d", "(", "ratios", "[", "i", "]", ",", "ratios", "[", "i", "]", ")", "\n", "\n", "seq", ".", "add", "(", "tmp", ")", "\n", "if", "fill_noise", ":", "\n", "            ", "seq", ".", "add", "(", "GenNoise", "(", "inp", ")", ")", "\n", "\n", "", "seq", ".", "add", "(", "conv", "(", "inp", ",", "conv_num", ",", "3", ",", "pad", "=", "pad", ")", ")", "\n", "seq", ".", "add", "(", "normalization", "(", "conv_num", ")", ")", "\n", "seq", ".", "add", "(", "act", "(", ")", ")", "\n", "\n", "seq", ".", "add", "(", "conv", "(", "conv_num", ",", "conv_num", ",", "3", ",", "pad", "=", "pad", ")", ")", "\n", "seq", ".", "add", "(", "normalization", "(", "conv_num", ")", ")", "\n", "seq", ".", "add", "(", "act", "(", ")", ")", "\n", "\n", "seq", ".", "add", "(", "conv", "(", "conv_num", ",", "conv_num", ",", "1", ",", "pad", "=", "pad", ")", ")", "\n", "seq", ".", "add", "(", "normalization", "(", "conv_num", ")", ")", "\n", "seq", ".", "add", "(", "act", "(", ")", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "seq", ".", "add", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "upsample_mode", ")", ")", "\n", "cur", "=", "seq", "\n", "", "else", ":", "\n", "\n", "            ", "cur_temp", "=", "cur", "\n", "\n", "cur", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "# Batch norm before merging ", "\n", "seq", ".", "add", "(", "normalization", "(", "conv_num", ")", ")", "\n", "cur_temp", ".", "add", "(", "normalization", "(", "conv_num", "*", "(", "j", "-", "1", ")", ")", ")", "\n", "\n", "cur", ".", "add", "(", "Concat", "(", "1", ",", "cur_temp", ",", "seq", ")", ")", "\n", "\n", "cur", ".", "add", "(", "conv", "(", "conv_num", "*", "j", ",", "conv_num", "*", "j", ",", "3", ",", "pad", "=", "pad", ")", ")", "\n", "cur", ".", "add", "(", "normalization", "(", "conv_num", "*", "j", ")", ")", "\n", "cur", ".", "add", "(", "act", "(", ")", ")", "\n", "\n", "cur", ".", "add", "(", "conv", "(", "conv_num", "*", "j", ",", "conv_num", "*", "j", ",", "3", ",", "pad", "=", "pad", ")", ")", "\n", "cur", ".", "add", "(", "normalization", "(", "conv_num", "*", "j", ")", ")", "\n", "cur", ".", "add", "(", "act", "(", ")", ")", "\n", "\n", "cur", ".", "add", "(", "conv", "(", "conv_num", "*", "j", ",", "conv_num", "*", "j", ",", "1", ",", "pad", "=", "pad", ")", ")", "\n", "cur", ".", "add", "(", "normalization", "(", "conv_num", "*", "j", ")", ")", "\n", "cur", ".", "add", "(", "act", "(", ")", ")", "\n", "\n", "if", "i", "==", "len", "(", "ratios", ")", "-", "1", ":", "\n", "                ", "cur", ".", "add", "(", "conv", "(", "conv_num", "*", "j", ",", "3", ",", "1", ",", "pad", "=", "pad", ")", ")", "\n", "", "else", ":", "\n", "                ", "cur", ".", "add", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "upsample_mode", ")", ")", "\n", "\n", "", "", "", "model", "=", "cur", "\n", "if", "need_sigmoid", ":", "\n", "        ", "model", ".", "add", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.skip.skip": [[5, 102], ["len", "torch.Sequential", "range", "nn.Sequential.add", "len", "len", "len", "len", "torch.Sequential", "torch.Sequential", "model_tmp.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "torch.Sequential", "nn.Sequential.add", "model_tmp.add", "model_tmp.add", "model_tmp.add", "common.conv", "nn.Sequential.add", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "model_tmp.add", "model_tmp.add", "common.bn", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "common.conv", "common.bn", "common.act", "common.conv", "common.bn", "common.act", "nn.Sequential.add", "torch.Upsample", "common.conv", "common.bn", "common.act", "model_tmp.add", "model_tmp.add", "model_tmp.add", "torch.Sigmoid", "common.Concat", "common.conv", "common.bn", "common.act", "len", "common.conv", "common.bn", "common.act"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["def", "skip", "(", "\n", "num_input_channels", "=", "2", ",", "num_output_channels", "=", "3", ",", "\n", "num_channels_down", "=", "[", "16", ",", "32", ",", "64", ",", "128", ",", "128", "]", ",", "num_channels_up", "=", "[", "16", ",", "32", ",", "64", ",", "128", ",", "128", "]", ",", "num_channels_skip", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "filter_size_down", "=", "3", ",", "filter_size_up", "=", "3", ",", "filter_skip_size", "=", "1", ",", "\n", "need_sigmoid", "=", "True", ",", "need_bias", "=", "True", ",", "\n", "pad", "=", "'zero'", ",", "upsample_mode", "=", "'nearest'", ",", "downsample_mode", "=", "'stride'", ",", "act_fun", "=", "'LeakyReLU'", ",", "\n", "need1x1_up", "=", "True", ")", ":", "\n", "    ", "\"\"\"Assembles encoder-decoder with skip connections.\n\n    Arguments:\n        act_fun: Either string 'LeakyReLU|Swish|ELU|none' or module (e.g. nn.ReLU)\n        pad (string): zero|reflection (default: 'zero')\n        upsample_mode (string): 'nearest|bilinear' (default: 'nearest')\n        downsample_mode (string): 'stride|avg|max|lanczos2' (default: 'stride')\n\n    \"\"\"", "\n", "assert", "len", "(", "num_channels_down", ")", "==", "len", "(", "num_channels_up", ")", "==", "len", "(", "num_channels_skip", ")", "\n", "\n", "n_scales", "=", "len", "(", "num_channels_down", ")", "\n", "\n", "if", "not", "(", "isinstance", "(", "upsample_mode", ",", "list", ")", "or", "isinstance", "(", "upsample_mode", ",", "tuple", ")", ")", ":", "\n", "        ", "upsample_mode", "=", "[", "upsample_mode", "]", "*", "n_scales", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "downsample_mode", ",", "list", ")", "or", "isinstance", "(", "downsample_mode", ",", "tuple", ")", ")", ":", "\n", "        ", "downsample_mode", "=", "[", "downsample_mode", "]", "*", "n_scales", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "filter_size_down", ",", "list", ")", "or", "isinstance", "(", "filter_size_down", ",", "tuple", ")", ")", ":", "\n", "        ", "filter_size_down", "=", "[", "filter_size_down", "]", "*", "n_scales", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "filter_size_up", ",", "list", ")", "or", "isinstance", "(", "filter_size_up", ",", "tuple", ")", ")", ":", "\n", "        ", "filter_size_up", "=", "[", "filter_size_up", "]", "*", "n_scales", "\n", "\n", "", "last_scale", "=", "n_scales", "-", "1", "\n", "\n", "cur_depth", "=", "None", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "model_tmp", "=", "model", "\n", "\n", "input_depth", "=", "num_input_channels", "\n", "for", "i", "in", "range", "(", "len", "(", "num_channels_down", ")", ")", ":", "\n", "\n", "        ", "deeper", "=", "nn", ".", "Sequential", "(", ")", "\n", "skip", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "num_channels_skip", "[", "i", "]", "!=", "0", ":", "\n", "            ", "model_tmp", ".", "add", "(", "Concat", "(", "1", ",", "skip", ",", "deeper", ")", ")", "\n", "", "else", ":", "\n", "            ", "model_tmp", ".", "add", "(", "deeper", ")", "\n", "\n", "", "model_tmp", ".", "add", "(", "bn", "(", "num_channels_skip", "[", "i", "]", "+", "(", "num_channels_up", "[", "i", "+", "1", "]", "if", "i", "<", "last_scale", "else", "num_channels_down", "[", "i", "]", ")", ")", ")", "\n", "\n", "if", "num_channels_skip", "[", "i", "]", "!=", "0", ":", "\n", "            ", "skip", ".", "add", "(", "conv", "(", "input_depth", ",", "num_channels_skip", "[", "i", "]", ",", "filter_skip_size", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "skip", ".", "add", "(", "bn", "(", "num_channels_skip", "[", "i", "]", ")", ")", "\n", "skip", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "# skip.add(Concat(2, GenNoise(nums_noise[i]), skip_part))", "\n", "\n", "", "deeper", ".", "add", "(", "conv", "(", "input_depth", ",", "num_channels_down", "[", "i", "]", ",", "filter_size_down", "[", "i", "]", ",", "2", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ",", "downsample_mode", "=", "downsample_mode", "[", "i", "]", ")", ")", "\n", "deeper", ".", "add", "(", "bn", "(", "num_channels_down", "[", "i", "]", ")", ")", "\n", "deeper", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "deeper", ".", "add", "(", "conv", "(", "num_channels_down", "[", "i", "]", ",", "num_channels_down", "[", "i", "]", ",", "filter_size_down", "[", "i", "]", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "deeper", ".", "add", "(", "bn", "(", "num_channels_down", "[", "i", "]", ")", ")", "\n", "deeper", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "deeper_main", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "i", "==", "len", "(", "num_channels_down", ")", "-", "1", ":", "\n", "# The deepest", "\n", "            ", "k", "=", "num_channels_down", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "deeper", ".", "add", "(", "deeper_main", ")", "\n", "k", "=", "num_channels_up", "[", "i", "+", "1", "]", "\n", "\n", "", "deeper", ".", "add", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "upsample_mode", "[", "i", "]", ")", ")", "\n", "\n", "model_tmp", ".", "add", "(", "conv", "(", "num_channels_skip", "[", "i", "]", "+", "k", ",", "num_channels_up", "[", "i", "]", ",", "filter_size_up", "[", "i", "]", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "model_tmp", ".", "add", "(", "bn", "(", "num_channels_up", "[", "i", "]", ")", ")", "\n", "model_tmp", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "\n", "if", "need1x1_up", ":", "\n", "            ", "model_tmp", ".", "add", "(", "conv", "(", "num_channels_up", "[", "i", "]", ",", "num_channels_up", "[", "i", "]", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "model_tmp", ".", "add", "(", "bn", "(", "num_channels_up", "[", "i", "]", ")", ")", "\n", "model_tmp", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "", "input_depth", "=", "num_channels_down", "[", "i", "]", "\n", "model_tmp", "=", "deeper_main", "\n", "\n", "#     model.add(conv(num_channels_up[0], num_output_channels, 1, bias=need_bias, pad=pad))", "\n", "", "model", ".", "add", "(", "conv", "(", "num_channels_up", "[", "0", "]", ",", "num_output_channels", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "if", "need_sigmoid", ":", "\n", "        ", "model", ".", "add", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.skip.skip_with_code": [[104, 200], ["len", "torch.Sequential", "range", "nn.Sequential.add", "len", "len", "len", "len", "torch.Sequential", "torch.Sequential", "model_tmp.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "torch.Sequential", "nn.Sequential.add", "model_tmp.add", "model_tmp.add", "model_tmp.add", "common.conv", "nn.Sequential.add", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "model_tmp.add", "model_tmp.add", "common.bn", "nn.Sequential.add", "nn.Sequential.add", "nn.Sequential.add", "common.conv", "common.bn", "common.act", "common.conv", "common.bn", "common.act", "nn.Sequential.add", "torch.Upsample", "common.conv", "common.bn", "common.act", "model_tmp.add", "model_tmp.add", "model_tmp.add", "torch.Sigmoid", "common.Concat", "common.conv", "common.bn", "common.act", "len", "common.conv", "common.bn", "common.act"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["", "def", "skip_with_code", "(", "\n", "num_input_channels", "=", "2", ",", "num_output_channels", "=", "3", ",", "num_code_channels", "=", "3", ",", "\n", "num_channels_down", "=", "[", "16", ",", "32", ",", "64", ",", "128", ",", "128", "]", ",", "num_channels_up", "=", "[", "16", ",", "32", ",", "64", ",", "128", ",", "128", "]", ",", "num_channels_skip", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "filter_size_down", "=", "3", ",", "filter_size_up", "=", "3", ",", "filter_skip_size", "=", "1", ",", "\n", "need_sigmoid", "=", "True", ",", "need_bias", "=", "True", ",", "\n", "pad", "=", "'zero'", ",", "upsample_mode", "=", "'nearest'", ",", "downsample_mode", "=", "'stride'", ",", "act_fun", "=", "'LeakyReLU'", ",", "\n", "need1x1_up", "=", "True", ")", ":", "\n", "    ", "\"\"\"Assembles encoder-decoder with skip connections.\n\n    Arguments:\n        act_fun: Either string 'LeakyReLU|Swish|ELU|none' or module (e.g. nn.ReLU)\n        pad (string): zero|reflection (default: 'zero')\n        upsample_mode (string): 'nearest|bilinear' (default: 'nearest')\n        downsample_mode (string): 'stride|avg|max|lanczos2' (default: 'stride')\n\n    \"\"\"", "\n", "assert", "len", "(", "num_channels_down", ")", "==", "len", "(", "num_channels_up", ")", "==", "len", "(", "num_channels_skip", ")", "\n", "\n", "n_scales", "=", "len", "(", "num_channels_down", ")", "\n", "\n", "if", "not", "(", "isinstance", "(", "upsample_mode", ",", "list", ")", "or", "isinstance", "(", "upsample_mode", ",", "tuple", ")", ")", ":", "\n", "        ", "upsample_mode", "=", "[", "upsample_mode", "]", "*", "n_scales", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "downsample_mode", ",", "list", ")", "or", "isinstance", "(", "downsample_mode", ",", "tuple", ")", ")", ":", "\n", "        ", "downsample_mode", "=", "[", "downsample_mode", "]", "*", "n_scales", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "filter_size_down", ",", "list", ")", "or", "isinstance", "(", "filter_size_down", ",", "tuple", ")", ")", ":", "\n", "        ", "filter_size_down", "=", "[", "filter_size_down", "]", "*", "n_scales", "\n", "\n", "", "if", "not", "(", "isinstance", "(", "filter_size_up", ",", "list", ")", "or", "isinstance", "(", "filter_size_up", ",", "tuple", ")", ")", ":", "\n", "        ", "filter_size_up", "=", "[", "filter_size_up", "]", "*", "n_scales", "\n", "\n", "", "last_scale", "=", "n_scales", "-", "1", "\n", "\n", "cur_depth", "=", "None", "\n", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "model_tmp", "=", "model", "\n", "\n", "input_depth", "=", "num_input_channels", "\n", "for", "i", "in", "range", "(", "len", "(", "num_channels_down", ")", ")", ":", "\n", "\n", "        ", "deeper", "=", "nn", ".", "Sequential", "(", ")", "\n", "skip", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "num_channels_skip", "[", "i", "]", "!=", "0", ":", "\n", "            ", "model_tmp", ".", "add", "(", "Concat", "(", "1", ",", "skip", ",", "deeper", ")", ")", "\n", "", "else", ":", "\n", "            ", "model_tmp", ".", "add", "(", "deeper", ")", "\n", "\n", "", "model_tmp", ".", "add", "(", "bn", "(", "num_channels_skip", "[", "i", "]", "+", "(", "num_channels_up", "[", "i", "+", "1", "]", "if", "i", "<", "last_scale", "else", "num_channels_down", "[", "i", "]", ")", ")", ")", "\n", "\n", "if", "num_channels_skip", "[", "i", "]", "!=", "0", ":", "\n", "            ", "skip", ".", "add", "(", "conv", "(", "input_depth", ",", "num_channels_skip", "[", "i", "]", ",", "filter_skip_size", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "skip", ".", "add", "(", "bn", "(", "num_channels_skip", "[", "i", "]", ")", ")", "\n", "skip", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "# skip.add(Concat(2, GenNoise(nums_noise[i]), skip_part))", "\n", "\n", "", "deeper", ".", "add", "(", "conv", "(", "input_depth", ",", "num_channels_down", "[", "i", "]", ",", "filter_size_down", "[", "i", "]", ",", "2", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ",", "downsample_mode", "=", "downsample_mode", "[", "i", "]", ")", ")", "\n", "deeper", ".", "add", "(", "bn", "(", "num_channels_down", "[", "i", "]", ")", ")", "\n", "deeper", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "deeper", ".", "add", "(", "conv", "(", "num_channels_down", "[", "i", "]", ",", "num_channels_down", "[", "i", "]", ",", "filter_size_down", "[", "i", "]", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "deeper", ".", "add", "(", "bn", "(", "num_channels_down", "[", "i", "]", ")", ")", "\n", "deeper", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "deeper_main", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "i", "==", "len", "(", "num_channels_down", ")", "-", "1", ":", "\n", "# The deepest", "\n", "            ", "k", "=", "num_channels_down", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "deeper", ".", "add", "(", "deeper_main", ")", "\n", "k", "=", "num_channels_up", "[", "i", "+", "1", "]", "\n", "\n", "", "deeper", ".", "add", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "upsample_mode", "[", "i", "]", ")", ")", "\n", "\n", "model_tmp", ".", "add", "(", "conv", "(", "num_channels_skip", "[", "i", "]", "+", "k", ",", "num_channels_up", "[", "i", "]", ",", "filter_size_up", "[", "i", "]", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "model_tmp", ".", "add", "(", "bn", "(", "num_channels_up", "[", "i", "]", ")", ")", "\n", "model_tmp", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "\n", "if", "need1x1_up", ":", "\n", "            ", "model_tmp", ".", "add", "(", "conv", "(", "num_channels_up", "[", "i", "]", ",", "num_channels_up", "[", "i", "]", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "model_tmp", ".", "add", "(", "bn", "(", "num_channels_up", "[", "i", "]", ")", ")", "\n", "model_tmp", ".", "add", "(", "act", "(", "act_fun", ")", ")", "\n", "\n", "", "input_depth", "=", "num_channels_down", "[", "i", "]", "\n", "model_tmp", "=", "deeper_main", "\n", "\n", "", "model", ".", "add", "(", "conv", "(", "num_channels_up", "[", "0", "]", ",", "num_output_channels", ",", "1", ",", "bias", "=", "need_bias", ",", "pad", "=", "pad", ")", ")", "\n", "if", "need_sigmoid", ":", "\n", "        ", "model", ".", "add", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_sp.__init__": [[7, 15], ["torch.Module.__init__", "conv", "conv", "torch.Sequential", "torch.Sequential", "bn", "act", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "down", "=", "False", ",", "act_fun", "=", "'LeakyReLU'", ",", "pad", "=", "'reflection'", ",", "group", "=", "1", ",", "bn_mode", "=", "\"bn\"", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "conv_block_sp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", "if", "down", "is", "False", "else", "2", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "\n", "group", "=", "group", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "bn", "(", "ch_out", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ",", "\n", "self", ".", "conv2", ",", "bn", "(", "ch_out", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_sp.forward": [[16, 19], ["S2Snet.conv_block_sp.conv"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_last.__init__": [[22, 31], ["torch.Module.__init__", "conv", "conv", "conv", "torch.Sequential", "torch.Sequential", "bn", "act", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "down", "=", "False", ",", "act_fun", "=", "'LeakyReLU'", ",", "pad", "=", "'reflection'", ",", "group", "=", "1", ",", "bn_mode", "=", "\"bn\"", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "conv_block_last", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "ch_in", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", "if", "down", "is", "False", "else", "2", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "32", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "bn", "(", "64", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ",", "\n", "self", ".", "conv2", ",", "bn", "(", "32", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ",", "\n", "self", ".", "conv3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_last.forward": [[32, 35], ["S2Snet.conv_block_last.conv"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.SIREN_layer.__init__": [[38, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "act", "S2Snet.SIREN_layer.init"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.SIREN_layer.init"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "frist", "=", "False", ",", "act_fun", "=", "'sine'", ",", "omega_0", "=", "30", ")", ":", "\n", "        ", "super", "(", "SIREN_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "act_fun", "=", "act", "(", "act_fun", ")", "\n", "self", ".", "omega_0", "=", "omega_0", "\n", "self", ".", "in_features", "=", "ch_in", "\n", "self", ".", "frist", "=", "frist", "\n", "self", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.SIREN_layer.init": [[48, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "S2Snet.SIREN_layer.conv1.weight.uniform_", "S2Snet.SIREN_layer.conv1.weight.uniform_", "np.sqrt", "np.sqrt"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "frist", ":", "\n", "                ", "self", ".", "conv1", ".", "weight", ".", "uniform_", "(", "-", "1", "/", "self", ".", "in_features", ",", "\n", "1", "/", "self", ".", "in_features", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv1", ".", "weight", ".", "uniform_", "(", "-", "np", ".", "sqrt", "(", "6", "/", "self", ".", "in_features", ")", "/", "self", ".", "omega_0", ",", "\n", "np", ".", "sqrt", "(", "6", "/", "self", ".", "in_features", ")", "/", "self", ".", "omega_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.SIREN_layer.forward": [[57, 60], ["S2Snet.SIREN_layer.conv1", "S2Snet.SIREN_layer.act_fun"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "self", ".", "act_fun", "(", "self", ".", "omega_0", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.SIREN_CONV.__init__": [[62, 71], ["torch.Module.__init__", "S2Snet.SIREN_layer", "S2Snet.SIREN_layer", "S2Snet.SIREN_layer", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "SIREN_CONV", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "SIREN_layer", "(", "ch_in", ",", "64", ",", "frist", "=", "True", ")", "\n", "self", ".", "conv2", "=", "SIREN_layer", "(", "64", ",", "32", ")", "\n", "self", ".", "conv3", "=", "SIREN_layer", "(", "32", ",", "ch_out", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "\n", "self", ".", "conv2", ",", "\n", "self", ".", "conv3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.SIREN_CONV.forward": [[72, 75], ["S2Snet.SIREN_CONV.conv"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_skip.__init__": [[79, 84], ["torch.Module.__init__", "conv", "torch.Sequential", "torch.Sequential", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "act_fun", "=", "'LeakyReLU'", ",", "pad", "=", "'reflection'", ",", "group", "=", "1", ",", "bn_mode", "=", "\"bn\"", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "conv_block_skip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "bn", "(", "ch_out", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_skip.forward": [[85, 88], ["S2Snet.conv_block_skip.conv"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_concat.__init__": [[91, 99], ["torch.Module.__init__", "conv", "conv", "torch.Sequential", "torch.Sequential", "bn", "bn", "act", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "act_fun", "=", "'LeakyReLU'", ",", "pad", "=", "'reflection'", ",", "group", "=", "1", ",", "bn_mode", "=", "\"bn\"", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "conv_block_concat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "conv2", "=", "conv", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "bias", ",", "pad", "=", "pad", ",", "group", "=", "group", ")", "\n", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "\n", "bn", "(", "ch_in", ")", ",", "\n", "self", ".", "conv1", ",", "bn", "(", "ch_out", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ",", "\n", "self", ".", "conv2", ",", "bn", "(", "ch_out", ",", "bn_mode", "if", "group", "==", "1", "else", "\"groupNorm\"", ")", ",", "act", "(", "act_fun", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.conv_block_concat.forward": [[100, 103], ["S2Snet.conv_block_concat.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Concat_layer.__init__": [[106, 109], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "Concat_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Concat_layer.forward": [[110, 125], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "np.all", "np.all", "min", "min", "inputs_.append", "np.array", "min", "np.array", "min", "inp.size", "inp.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs_shapes2", "=", "[", "x", ".", "shape", "[", "2", "]", "for", "x", "in", "inputs", "]", "\n", "inputs_shapes3", "=", "[", "x", ".", "shape", "[", "3", "]", "for", "x", "in", "inputs", "]", "\n", "if", "np", ".", "all", "(", "np", ".", "array", "(", "inputs_shapes2", ")", "==", "min", "(", "inputs_shapes2", ")", ")", "and", "np", ".", "all", "(", "\n", "np", ".", "array", "(", "inputs_shapes3", ")", "==", "min", "(", "inputs_shapes3", ")", ")", ":", "\n", "            ", "inputs_", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "target_shape2", "=", "min", "(", "inputs_shapes2", ")", "\n", "target_shape3", "=", "min", "(", "inputs_shapes3", ")", "\n", "inputs_", "=", "[", "]", "\n", "for", "inp", "in", "inputs", ":", "\n", "                ", "diff2", "=", "(", "inp", ".", "size", "(", "2", ")", "-", "target_shape2", ")", "//", "2", "\n", "diff3", "=", "(", "inp", ".", "size", "(", "3", ")", "-", "target_shape3", ")", "//", "2", "\n", "inputs_", ".", "append", "(", "inp", "[", ":", ",", ":", ",", "diff2", ":", "diff2", "+", "target_shape2", ",", "diff3", ":", "diff3", "+", "target_shape3", "]", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "inputs_", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Concat_layer.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.S2Snet.__init__": [[131, 157], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "conv", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "super", "(", "S2Snet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "96", ",", "96", ",", "96", ",", "96", ",", "96", "]", "# fixed", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.S2Snet.forward": [[158, 188], ["S2Snet.S2Snet.Conv1", "S2Snet.S2Snet.Conv2", "S2Snet.S2Snet.Conv3", "S2Snet.S2Snet.Conv4", "S2Snet.S2Snet.Conv5", "S2Snet.S2Snet.conv", "S2Snet.S2Snet.upsample", "S2Snet.S2Snet.concat", "S2Snet.S2Snet.Up_conv4", "S2Snet.S2Snet.upsample", "S2Snet.S2Snet.concat", "S2Snet.S2Snet.Up_conv3", "S2Snet.S2Snet.upsample", "S2Snet.S2Snet.concat", "S2Snet.S2Snet.Up_conv2", "S2Snet.S2Snet.upsample", "S2Snet.S2Snet.concat", "S2Snet.S2Snet.Up_conv1", "S2Snet.S2Snet.upsample", "S2Snet.S2Snet.concat", "S2Snet.S2Snet.Conv_last1", "S2Snet.S2Snet.Sig"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_.__init__": [[191, 228], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_last", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "conv", "bn", "act", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ",", "bn_mode", "=", "\"bn\"", ")", ":", "\n", "        ", "super", "(", "s2s_", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "96", ",", "96", ",", "96", ",", "96", ",", "96", "]", "# fixed", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv_first1", "=", "conv_block_last", "(", "img_ch", ",", "enc_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "# concat", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ",", "bn_mode", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ",", "bias", "=", "False", ")", "# concat", "\n", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "img_ch", "==", "4", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.406", ",", "0.456", ",", "0.485", ",", "0", "]", ")", ".", "view", "(", "1", ",", "4", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.225", ",", "0.224", ",", "0.229", ",", "1", "]", ")", ".", "view", "(", "1", ",", "4", ",", "1", ",", "1", ")", "\n", "", "if", "img_ch", "==", "3", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.406", ",", "0.456", ",", "0.485", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.225", ",", "0.224", ",", "0.229", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.449", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.226", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_.forward": [[229, 262], ["S2Snet.s2s_.Conv_first1", "S2Snet.s2s_.concat", "S2Snet.s2s_.Conv1", "S2Snet.s2s_.Conv2", "S2Snet.s2s_.Conv3", "S2Snet.s2s_.Conv4", "S2Snet.s2s_.Conv5", "S2Snet.s2s_.conv", "S2Snet.s2s_.upsample", "S2Snet.s2s_.concat", "S2Snet.s2s_.Up_conv4", "S2Snet.s2s_.upsample", "S2Snet.s2s_.concat", "S2Snet.s2s_.Up_conv3", "S2Snet.s2s_.upsample", "S2Snet.s2s_.concat", "S2Snet.s2s_.Up_conv2", "S2Snet.s2s_.upsample", "S2Snet.s2s_.concat", "S2Snet.s2s_.Up_conv1", "S2Snet.s2s_.upsample", "S2Snet.s2s_.concat", "S2Snet.s2s_.Conv_last1", "S2Snet.s2s_.Sig", "S2Snet.s2s_.std.to", "S2Snet.s2s_.mean.to"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "mean", ".", "to", "(", "x", ".", "device", ")", ")", "/", "self", ".", "std", ".", "to", "(", "x", ".", "device", ")", "\n", "# encoding path", "\n", "x0", "=", "self", ".", "Conv_first1", "(", "x", ")", "\n", "x0", "=", "self", ".", "concat", "(", "[", "x0", ",", "x", "]", ")", "\n", "x1", "=", "self", ".", "Conv1", "(", "x0", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_fixed.__init__": [[264, 290], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "conv", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ",", "bn_mode", "=", "\"bn\"", ")", ":", "\n", "        ", "super", "(", "s2s_fixed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "96", ",", "96", ",", "96", ",", "96", ",", "96", "]", "# fixed", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ",", "bn_mode", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_fixed.forward": [[291, 321], ["S2Snet.s2s_fixed.Conv1", "S2Snet.s2s_fixed.Conv2", "S2Snet.s2s_fixed.Conv3", "S2Snet.s2s_fixed.Conv4", "S2Snet.s2s_fixed.Conv5", "S2Snet.s2s_fixed.conv", "S2Snet.s2s_fixed.upsample", "S2Snet.s2s_fixed.concat", "S2Snet.s2s_fixed.Up_conv4", "S2Snet.s2s_fixed.upsample", "S2Snet.s2s_fixed.concat", "S2Snet.s2s_fixed.Up_conv3", "S2Snet.s2s_fixed.upsample", "S2Snet.s2s_fixed.concat", "S2Snet.s2s_fixed.Up_conv2", "S2Snet.s2s_fixed.upsample", "S2Snet.s2s_fixed.concat", "S2Snet.s2s_fixed.Up_conv1", "S2Snet.s2s_fixed.upsample", "S2Snet.s2s_fixed.concat", "S2Snet.s2s_fixed.Conv_last1", "S2Snet.s2s_fixed.Sig"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_normal.__init__": [[323, 358], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "conv", "bn", "act", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ",", "bn_mode", "=", "\"bn\"", ")", ":", "\n", "        ", "super", "(", "s2s_normal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "96", ",", "96", ",", "96", ",", "96", ",", "96", "]", "# fixed", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ",", "bn_mode", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "bn_mode", "=", "bn_mode", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "img_ch", "==", "4", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.406", ",", "0.456", ",", "0.485", ",", "0", "]", ")", ".", "view", "(", "1", ",", "4", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.225", ",", "0.224", ",", "0.229", ",", "1", "]", ")", ".", "view", "(", "1", ",", "4", ",", "1", ",", "1", ")", "\n", "", "if", "img_ch", "==", "3", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.406", ",", "0.456", ",", "0.485", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.225", ",", "0.224", ",", "0.229", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.449", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.226", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_normal.forward": [[359, 390], ["S2Snet.s2s_normal.Conv1", "S2Snet.s2s_normal.Conv2", "S2Snet.s2s_normal.Conv3", "S2Snet.s2s_normal.Conv4", "S2Snet.s2s_normal.Conv5", "S2Snet.s2s_normal.conv", "S2Snet.s2s_normal.upsample", "S2Snet.s2s_normal.concat", "S2Snet.s2s_normal.Up_conv4", "S2Snet.s2s_normal.upsample", "S2Snet.s2s_normal.concat", "S2Snet.s2s_normal.Up_conv3", "S2Snet.s2s_normal.upsample", "S2Snet.s2s_normal.concat", "S2Snet.s2s_normal.Up_conv2", "S2Snet.s2s_normal.upsample", "S2Snet.s2s_normal.concat", "S2Snet.s2s_normal.Up_conv1", "S2Snet.s2s_normal.upsample", "S2Snet.s2s_normal.concat", "S2Snet.s2s_normal.Conv_last1", "S2Snet.s2s_normal.Sig", "S2Snet.s2s_normal.std.to", "S2Snet.s2s_normal.mean.to"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "mean", ".", "to", "(", "x", ".", "device", ")", ")", "/", "self", ".", "std", ".", "to", "(", "x", ".", "device", ")", "\n", "# encoding path", "\n", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.__init__": [[392, 426], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "conv", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ",", "bn_mode", "=", "\"groupNorm\"", ")", ":", "\n", "        ", "super", "(", "s2s_g", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "24", ",", "24", ",", "24", ",", "24", ",", "24", "]", "# fixed", "\n", "dec_ch", "=", "[", "24", ",", "24", ",", "24", ",", "24", ",", "24", "]", "# fixed", "\n", "self", ".", "img_ch", "=", "img_ch", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", "*", "4", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "group", "=", "4", ",", "\n", "bn_mode", "=", "bn_mode", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "group", "=", "4", ",", "\n", "bn_mode", "=", "bn_mode", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "group", "=", "4", ",", "\n", "bn_mode", "=", "bn_mode", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "group", "=", "4", ",", "\n", "bn_mode", "=", "bn_mode", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "group", "=", "4", ",", "\n", "bn_mode", "=", "bn_mode", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ",", "bn_mode", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "\n", "group", "=", "4", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "\n", "group", "=", "4", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "\n", "group", "=", "4", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "\n", "group", "=", "4", ",", "bn_mode", "=", "bn_mode", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", "*", "4", ",", "output_ch", "*", "4", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ",", "group", "=", "4", ",", "\n", "bn_mode", "=", "bn_mode", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_concat": [[427, 430], ["S2Snet.s2s_g.concat"], "methods", ["None"], ["", "def", "group_concat", "(", "self", ",", "d", ",", "x", ",", "stride1", "=", "6", ",", "stride2", "=", "6", ")", ":", "\n", "        ", "return", "self", ".", "concat", "(", "[", "d", "[", ":", ",", ":", "stride1", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", ":", "stride2", ",", ":", ",", ":", "]", ",", "d", "[", ":", ",", "stride1", ":", "2", "*", "stride1", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "stride2", ":", "2", "*", "stride2", ",", ":", ",", ":", "]", ",", "\n", "d", "[", ":", ",", "2", "*", "stride1", ":", "3", "*", "stride1", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "2", "*", "stride2", ":", "3", "*", "stride2", ",", ":", ",", ":", "]", ",", "d", "[", ":", ",", "3", "*", "stride1", ":", "4", "*", "stride1", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "3", "*", "stride2", ":", "4", "*", "stride2", ",", ":", ",", ":", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_mean": [[431, 433], ["None"], "methods", ["None"], ["", "def", "group_mean", "(", "self", ",", "out", ",", "stride", "=", "3", ")", ":", "\n", "        ", "return", "(", "out", "[", ":", ",", ":", "stride", "]", "+", "out", "[", ":", ",", "stride", ":", "2", "*", "stride", "]", "+", "out", "[", ":", ",", "2", "*", "stride", ":", "3", "*", "stride", "]", "+", "out", "[", ":", ",", "3", "*", "stride", ":", "4", "*", "stride", "]", ")", "/", "4.", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.forward": [[434, 468], ["S2Snet.s2s_g.concat", "S2Snet.s2s_g.Conv1", "S2Snet.s2s_g.Conv2", "S2Snet.s2s_g.Conv3", "S2Snet.s2s_g.Conv4", "S2Snet.s2s_g.Conv5", "S2Snet.s2s_g.conv", "S2Snet.s2s_g.upsample", "S2Snet.s2s_g.group_concat", "S2Snet.s2s_g.Up_conv4", "S2Snet.s2s_g.upsample", "S2Snet.s2s_g.group_concat", "S2Snet.s2s_g.Up_conv3", "S2Snet.s2s_g.upsample", "S2Snet.s2s_g.group_concat", "S2Snet.s2s_g.Up_conv2", "S2Snet.s2s_g.upsample", "S2Snet.s2s_g.group_concat", "S2Snet.s2s_g.Up_conv1", "S2Snet.s2s_g.upsample", "S2Snet.s2s_g.group_concat", "S2Snet.s2s_g.Conv_last1", "S2Snet.s2s_g.Sig", "S2Snet.s2s_g.group_mean", "x.std", "x.mean"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_concat", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_concat", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_concat", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_concat", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_concat", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.s2s_g.group_mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "x", ".", "mean", "(", ")", ")", "/", "(", "x", ".", "std", "(", ")", ")", "\n", "x_tmp", "=", "self", ".", "concat", "(", "[", "x", ",", "x", ",", "x", ",", "x", "]", ")", "\n", "# encoding path", "\n", "x1", "=", "self", ".", "Conv1", "(", "x_tmp", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "group_concat", "(", "d5", ",", "x4", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "group_concat", "(", "d4", ",", "x3", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "group_concat", "(", "d3", ",", "x2", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "group_concat", "(", "d2", ",", "x1", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "\n", "d0", "=", "self", ".", "group_concat", "(", "d0", ",", "x_tmp", ",", "stride2", "=", "self", ".", "img_ch", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "out", "=", "self", ".", "Sig", "(", "d0", ")", "\n", "return", "self", ".", "group_mean", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Attention_block.__init__": [[472, 491], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "F_g", ",", "F_l", ",", "F_int", ")", ":", "\n", "        ", "super", "(", "Attention_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_g", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "F_int", ")", "\n", ")", "\n", "\n", "self", ".", "W_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_l", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "F_int", ")", "\n", ")", "\n", "\n", "self", ".", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_int", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Attention_block.forward": [[492, 513], ["S2Snet.Attention_block.W_g", "S2Snet.Attention_block.W_x", "S2Snet.Attention_block.relu", "S2Snet.Attention_block.psi", "np.all", "np.all", "min", "min", "np.array", "min", "np.array", "min", "g.size", "g.size", "g.size", "g.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "inputs_shapes2", "=", "[", "x", ".", "shape", "[", "2", "]", "for", "x", "in", "[", "g", ",", "x", "]", "]", "\n", "inputs_shapes3", "=", "[", "x", ".", "shape", "[", "3", "]", "for", "x", "in", "[", "g", ",", "x", "]", "]", "\n", "if", "np", ".", "all", "(", "np", ".", "array", "(", "inputs_shapes2", ")", "==", "min", "(", "inputs_shapes2", ")", ")", "and", "np", ".", "all", "(", "\n", "np", ".", "array", "(", "inputs_shapes3", ")", "==", "min", "(", "inputs_shapes3", ")", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "target_shape2", "=", "min", "(", "inputs_shapes2", ")", "\n", "target_shape3", "=", "min", "(", "inputs_shapes3", ")", "\n", "diff2", "=", "(", "g", ".", "size", "(", "2", ")", "-", "target_shape2", ")", "//", "2", "\n", "diff3", "=", "(", "g", ".", "size", "(", "3", ")", "-", "target_shape3", ")", "//", "2", "\n", "g", "=", "g", "[", ":", ",", ":", ",", "diff2", ":", "diff2", "+", "target_shape2", ",", "diff3", ":", "diff3", "+", "target_shape3", "]", "\n", "diff2", "=", "(", "g", ".", "size", "(", "2", ")", "-", "target_shape2", ")", "//", "2", "\n", "diff3", "=", "(", "g", ".", "size", "(", "3", ")", "-", "target_shape3", ")", "//", "2", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "diff2", ":", "diff2", "+", "target_shape2", ",", "diff3", ":", "diff3", "+", "target_shape3", "]", "\n", "\n", "", "g1", "=", "self", ".", "W_g", "(", "g", ")", "\n", "x1", "=", "self", ".", "W_x", "(", "x", ")", "\n", "psi", "=", "self", ".", "relu", "(", "g1", "+", "x1", ")", "\n", "psi", "=", "self", ".", "psi", "(", "psi", ")", "\n", "return", "x", "*", "psi", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.S2SATnet1.__init__": [[515, 548], ["torch.Module.__init__", "print", "print", "print", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "S2Snet.Attention_block", "S2Snet.Attention_block", "S2Snet.Attention_block", "S2Snet.Attention_block", "S2Snet.Attention_block", "conv", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "bn_mode", "=", "\"bn\"", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "super", "(", "S2SATnet1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "96", ",", "96", ",", "96", ",", "96", ",", "96", "]", "# fixed", "\n", "print", "(", "\"[*] input/output channel : %d / %d\"", "%", "(", "img_ch", ",", "output_ch", ")", ")", "\n", "print", "(", "\"[*] act_type : %s\"", "%", "act_type", ")", "\n", "print", "(", "\"[*] bn_type : %s\"", "%", "bn_mode", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ",", "bn_mode", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "Att1", "=", "Attention_block", "(", "dec_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "48", ")", "\n", "self", ".", "Att2", "=", "Attention_block", "(", "dec_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "48", ")", "\n", "self", ".", "Att3", "=", "Attention_block", "(", "dec_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "48", ")", "\n", "self", ".", "Att4", "=", "Attention_block", "(", "dec_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "48", ")", "\n", "self", ".", "Att5", "=", "Attention_block", "(", "dec_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.S2SATnet1.forward": [[550, 584], ["S2Snet.S2SATnet1.Conv1", "S2Snet.S2SATnet1.Conv2", "S2Snet.S2SATnet1.Conv3", "S2Snet.S2SATnet1.Conv4", "S2Snet.S2SATnet1.Conv5", "S2Snet.S2SATnet1.conv", "S2Snet.S2SATnet1.upsample", "S2Snet.S2SATnet1.Att5", "S2Snet.S2SATnet1.concat", "S2Snet.S2SATnet1.Up_conv4", "S2Snet.S2SATnet1.upsample", "S2Snet.S2SATnet1.Att4", "S2Snet.S2SATnet1.concat", "S2Snet.S2SATnet1.Up_conv3", "S2Snet.S2SATnet1.upsample", "S2Snet.S2SATnet1.Att3", "S2Snet.S2SATnet1.concat", "S2Snet.S2SATnet1.Up_conv2", "S2Snet.S2SATnet1.upsample", "S2Snet.S2SATnet1.Att2", "S2Snet.S2SATnet1.concat", "S2Snet.S2SATnet1.Up_conv1", "S2Snet.S2SATnet1.upsample", "S2Snet.S2SATnet1.concat", "S2Snet.S2SATnet1.Conv_last1", "S2Snet.S2SATnet1.Sig"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "x4", "=", "self", ".", "Att5", "(", "g", "=", "d5", ",", "x", "=", "x4", ")", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "x3", "=", "self", ".", "Att4", "(", "g", "=", "d4", ",", "x", "=", "x3", ")", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "x2", "=", "self", ".", "Att3", "(", "g", "=", "d3", ",", "x", "=", "x2", ")", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "x1", "=", "self", ".", "Att2", "(", "g", "=", "d2", ",", "x", "=", "x1", ")", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.S2SATnet2.__init__": [[586, 619], ["torch.Module.__init__", "print", "print", "print", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "S2Snet.Attention_block", "S2Snet.Attention_block", "S2Snet.Attention_block", "S2Snet.Attention_block", "S2Snet.Attention_block", "conv", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "bn_mode", "=", "\"bn\"", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "super", "(", "S2SATnet2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "96", ",", "96", ",", "96", ",", "96", ",", "96", "]", "# fixed", "\n", "print", "(", "\"[*] input/output channel : %d / %d\"", "%", "(", "img_ch", ",", "output_ch", ")", ")", "\n", "print", "(", "\"[*] act_type : %s\"", "%", "act_type", ")", "\n", "print", "(", "\"[*] bn_type : %s\"", "%", "bn_mode", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ",", "bn_mode", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "bn_mode", "=", "bn_mode", ",", "pad", "=", "pad", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "Att1", "=", "Attention_block", "(", "enc_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "48", ")", "\n", "self", ".", "Att2", "=", "Attention_block", "(", "enc_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "48", ")", "\n", "self", ".", "Att3", "=", "Attention_block", "(", "enc_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "48", ")", "\n", "self", ".", "Att4", "=", "Attention_block", "(", "enc_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "48", ")", "\n", "self", ".", "Att5", "=", "Attention_block", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.S2SATnet2.forward": [[621, 655], ["S2Snet.S2SATnet2.Conv1", "S2Snet.S2SATnet2.Conv2", "S2Snet.S2SATnet2.Conv3", "S2Snet.S2SATnet2.Conv4", "S2Snet.S2SATnet2.Conv5", "S2Snet.S2SATnet2.conv", "S2Snet.S2SATnet2.upsample", "S2Snet.S2SATnet2.Att5", "S2Snet.S2SATnet2.concat", "S2Snet.S2SATnet2.Up_conv4", "S2Snet.S2SATnet2.upsample", "S2Snet.S2SATnet2.Att4", "S2Snet.S2SATnet2.concat", "S2Snet.S2SATnet2.Up_conv3", "S2Snet.S2SATnet2.upsample", "S2Snet.S2SATnet2.Att3", "S2Snet.S2SATnet2.concat", "S2Snet.S2SATnet2.Up_conv2", "S2Snet.S2SATnet2.upsample", "S2Snet.S2SATnet2.Att2", "S2Snet.S2SATnet2.concat", "S2Snet.S2SATnet2.Up_conv1", "S2Snet.S2SATnet2.upsample", "S2Snet.S2SATnet2.concat", "S2Snet.S2SATnet2.Conv_last1", "S2Snet.S2SATnet2.Sig"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "Att5", "(", "g", "=", "x4", ",", "x", "=", "d5", ")", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "Att4", "(", "g", "=", "x3", ",", "x", "=", "d4", ")", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "Att3", "(", "g", "=", "x2", ",", "x", "=", "d3", ")", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "Att2", "(", "g", "=", "x1", ",", "x", "=", "d2", ")", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Testnet.__init__": [[661, 689], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "S2Snet.Concat_layer", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "S2Snet.conv_block_sp", "torch.Sequential", "torch.Sequential", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_concat", "S2Snet.conv_block_last", "torch.Sigmoid", "torch.Sigmoid", "conv", "bn", "act"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.bn", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.common.act"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "3", ",", "act_type", "=", "\"LeakyReLU\"", ",", "pad", "=", "'reflection'", ")", ":", "\n", "        ", "super", "(", "Testnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "dec_ch", "=", "[", "48", ",", "48", ",", "48", ",", "48", ",", "48", "]", "# fixed", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "Avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "concat", "=", "Concat_layer", "(", "1", ")", "\n", "self", ".", "Conv1", "=", "conv_block_sp", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "enc_ch", "[", "0", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# h/2,  w/2", "\n", "self", ".", "Conv2", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "0", "]", ",", "ch_out", "=", "enc_ch", "[", "1", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# h/4,  w/4", "\n", "self", ".", "Conv3", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "1", "]", ",", "ch_out", "=", "enc_ch", "[", "2", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# h/8,  w/8", "\n", "self", ".", "Conv4", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "2", "]", ",", "ch_out", "=", "enc_ch", "[", "3", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ")", "# h/16, w/16", "\n", "self", ".", "Conv5", "=", "conv_block_sp", "(", "ch_in", "=", "enc_ch", "[", "3", "]", ",", "ch_out", "=", "enc_ch", "[", "4", "]", ",", "down", "=", "True", ",", "act_fun", "=", "act_type", ",", "\n", "pad", "=", "pad", ")", "# h/32, w/32", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad", "=", "pad", ")", ",", "\n", "bn", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "act", "(", "act_type", ")", ")", "\n", "\n", "self", ".", "Up_conv4", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "4", "]", "+", "enc_ch", "[", "3", "]", "+", "img_ch", ",", "ch_out", "=", "dec_ch", "[", "3", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "3", "]", "+", "enc_ch", "[", "2", "]", "+", "img_ch", ",", "ch_out", "=", "dec_ch", "[", "2", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "2", "]", "+", "enc_ch", "[", "1", "]", "+", "img_ch", ",", "ch_out", "=", "dec_ch", "[", "1", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Up_conv1", "=", "conv_block_concat", "(", "ch_in", "=", "dec_ch", "[", "1", "]", "+", "enc_ch", "[", "0", "]", "+", "img_ch", ",", "ch_out", "=", "dec_ch", "[", "0", "]", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "\n", "self", ".", "Conv_last1", "=", "conv_block_last", "(", "dec_ch", "[", "0", "]", "+", "img_ch", ",", "output_ch", ",", "act_fun", "=", "act_type", ",", "pad", "=", "pad", ")", "# concat", "\n", "self", ".", "Sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.S2Snet.Testnet.forward": [[690, 725], ["S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Conv1", "S2Snet.Testnet.conv", "S2Snet.Testnet.upsample", "S2Snet.Testnet.concat", "S2Snet.Testnet.Up_conv4", "S2Snet.Testnet.upsample", "S2Snet.Testnet.concat", "S2Snet.Testnet.Up_conv3", "S2Snet.Testnet.upsample", "S2Snet.Testnet.concat", "S2Snet.Testnet.Up_conv2", "S2Snet.Testnet.upsample", "S2Snet.Testnet.concat", "S2Snet.Testnet.Up_conv1", "S2Snet.Testnet.upsample", "S2Snet.Testnet.concat", "S2Snet.Testnet.Conv_last1", "S2Snet.Testnet.Sig", "S2Snet.Testnet.Conv2", "S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Conv3", "S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Conv4", "S2Snet.Testnet.Avgpool", "S2Snet.Testnet.Conv5", "S2Snet.Testnet.Avgpool"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.conv", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample", "home.repos.pwc.inspect_result.gistvision_dip-denosing.PerceptualSimilarity.networks_basic.upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x_1", "=", "self", ".", "Avgpool", "(", "x", ")", "\n", "x_2", "=", "self", ".", "Avgpool", "(", "x_1", ")", "\n", "x_3", "=", "self", ".", "Avgpool", "(", "x_2", ")", "\n", "x_4", "=", "self", ".", "Avgpool", "(", "x_3", ")", "\n", "\n", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "# h/2 w/2", "\n", "x2", "=", "self", ".", "Conv2", "(", "x1", ")", "+", "self", ".", "Avgpool", "(", "x1", ")", "# h/4 w/4", "\n", "x3", "=", "self", ".", "Conv3", "(", "x2", ")", "+", "self", ".", "Avgpool", "(", "x2", ")", "# h/8 w/8", "\n", "x4", "=", "self", ".", "Conv4", "(", "x3", ")", "+", "self", ".", "Avgpool", "(", "x3", ")", "# h/16 w/16", "\n", "x5", "=", "self", ".", "Conv5", "(", "x4", ")", "+", "self", ".", "Avgpool", "(", "x4", ")", "# h/32 w/32", "\n", "\n", "x6", "=", "self", ".", "conv", "(", "x5", ")", "\n", "\n", "d5", "=", "self", ".", "upsample", "(", "x6", ")", "# h/16 w/16", "\n", "d5", "=", "self", ".", "concat", "(", "[", "d5", ",", "x4", ",", "x_4", "]", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "upsample", "(", "d4", ")", "# h/8  w/8", "\n", "d4", "=", "self", ".", "concat", "(", "[", "d4", ",", "x3", ",", "x_3", "]", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "upsample", "(", "d3", ")", "# h/4  w/4", "\n", "d3", "=", "self", ".", "concat", "(", "[", "d3", ",", "x2", ",", "x_2", "]", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "upsample", "(", "d2", ")", "# h/2  w/2", "\n", "d2", "=", "self", ".", "concat", "(", "[", "d2", ",", "x1", ",", "x_1", "]", ")", "\n", "d1", "=", "self", ".", "Up_conv1", "(", "d2", ")", "\n", "\n", "d0", "=", "self", ".", "upsample", "(", "d1", ")", "# h    w", "\n", "d0", "=", "self", ".", "concat", "(", "[", "d0", ",", "x", "]", ")", "\n", "d0", "=", "self", ".", "Conv_last1", "(", "d0", ")", "\n", "return", "self", ".", "Sig", "(", "d0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__": [[12, 16], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.__init__"], []], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.torchmodel.forward": [[17, 22], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "__init__.torchmodel.s", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "__init__.torchmodel.model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.__init__.get_net": [[23, 87], ["MemNet.type", "print", "skip.skip", "print", "S2Snet.S2Snet", "print", "S2Snet.s2s_fixed", "isinstance", "isinstance", "isinstance", "texture_nets.get_texture_nets", "unet.UNet", "dncnn_s", "S2Snet96", "snet.S2SnetW", "snet.S2SnetT", "S2Snet.s2s_", "S2Snet.s2s_g", "snet.snet_4x", "S2Snet.s2s_normal", "S2Snet.S2SATnet1", "S2Snet.S2SATnet2", "S2Snet.Testnet", "MemNet"], "function", ["home.repos.pwc.inspect_result.gistvision_dip-denosing.models.skip.skip", "home.repos.pwc.inspect_result.gistvision_dip-denosing.models.texture_nets.get_texture_nets"], []]}