{"home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.None.setup.read": [[4, 10], ["open", "fh.read", "os.path.join", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.None.setup.read"], ["def", "read", "(", "fname", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "fname", ")", ")", "as", "fh", ":", "\n", "            ", "return", "fh", ".", "read", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "        ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.tests.test_dataloaders.test_dataloader_mels": [[6, 14], ["boundariesdetectioncnn.data.dataloaders.build_dataloader", "len"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.build_dataloader"], ["def", "test_dataloader_mels", "(", ")", ":", "\n", "\n", "    ", "batch_size", "=", "ParamsConfig", ".", "BATCH_SIZE", "\n", "input", "=", "'mel'", "\n", "run", "=", "'train'", "\n", "mels_dataset", ",", "mels_trainloader", "=", "dataloaders", ".", "build_dataloader", "(", "batch_size", ",", "input", ",", "run", ")", "\n", "\n", "assert", "len", "(", "mels_dataset", ")", ">", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.tests.test_training.test_train_model": [[7, 15], ["boundariesdetectioncnn.train.train_model.run_training", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.train.train_model.run_training"], ["def", "test_train_model", "(", ")", ":", "\n", "\n", "    ", "model", "=", "\"mels\"", "\n", "\n", "#Train 1 epoch and save weights", "\n", "train_model", ".", "run_training", "(", "model", "=", "model", ",", "epochs", "=", "2", ",", "save_epoch", "=", "1", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\"../weights/saved_model_1epochs.bin\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.tests.test_loadmodels.test_load_models": [[3, 6], ["boundariesdetectioncnn.configs.load_model"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.boundariesdetectioncnn.configs.load_model"], ["def", "test_load_models", "(", ")", ":", "\n", "    ", "name", "=", "'mel'", "\n", "configs", ".", "load_model", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.boundariesdetectioncnn.configs.load_model": [[121, 142], ["CNN_Fusion", "CNN_Fusion", "CNN_Fusion", "CNN_Fusion", "CNN_Fusion"], "function", ["None"], ["def", "load_model", "(", "name", ",", "output_channels", "=", "ParamsConfig", ".", "OUT_CHANNELS", ")", ":", "\n", "    ", "if", "name", "==", "'mel'", ":", "\n", "        ", "from", "boundariesdetectioncnn", ".", "models", ".", "model_CNN_MLS", "import", "CNN_Fusion", "\n", "model", "=", "CNN_Fusion", "(", "output_channels", ",", "output_channels", ")", "\n", "", "elif", "name", "==", "'sslm'", ":", "\n", "        ", "from", "boundariesdetectioncnn", ".", "models", ".", "model_CNN_SSLM", "import", "CNN_Fusion", "\n", "model", "=", "CNN_Fusion", "(", "output_channels", ",", "output_channels", ")", "\n", "\n", "", "elif", "name", "==", "'mel_sslm_combined'", ":", "\n", "        ", "from", "boundariesdetectioncnn", ".", "models", ".", "model_CNN_MLS_SSLM", "import", "CNN_Fusion", "\n", "model", "=", "CNN_Fusion", "(", "output_channels", ",", "output_channels", ")", "\n", "\n", "", "elif", "name", "==", "'mel_2sslm_combined'", ":", "\n", "        ", "from", "boundariesdetectioncnn", ".", "models", ".", "model_CNN_MLS_SSLM_SSLM", "import", "CNN_Fusion", "\n", "model", "=", "CNN_Fusion", "(", "output_channels", ",", "output_channels", ")", "\n", "\n", "", "elif", "name", "==", "'mel_4sslm_combined'", ":", "\n", "        ", "from", "boundariesdetectioncnn", ".", "models", ".", "model_CNN_MLS_4SSLM", "import", "CNN_Fusion", "\n", "model", "=", "CNN_Fusion", "(", "output_channels", ",", "output_channels", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_SSLM.CNN_1.__init__": [[14, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_SSLM.CNN_1.forward": [[27, 37], ["model_CNN_SSLM.CNN_1.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_SSLM.CNN_1.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_SSLM.CNN_2.__init__": [[41, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 2--------------------------", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "output_channels", ",", "\n", "out_channels", "=", "self", ".", "output_channels", "*", "2", ",", "\n", "kernel_size", "=", "(", "3", ",", "5", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "3", "-", "1", ")", "//", "2", ",", "(", "5", "-", "1", ")", "*", "3", "//", "2", ")", ",", "\n", "dilation", "=", "(", "1", ",", "3", ")", ")", "\n", "\n", "#------------------------------LINEAL 1--------------------------", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal1", "=", "nn", ".", "Conv1d", "(", "self", ".", "output_channels", "*", "120", ",", "128", ",", "1", ")", "#*40 for 6pool, *120 for 2pool3    ", "\n", "\n", "#------------------------------LINEAL 2--------------------------", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal2", "=", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_SSLM.CNN_2.forward": [[61, 83], ["model_CNN_SSLM.CNN_2.conv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_SSLM.CNN_2.reshape", "model_CNN_SSLM.CNN_2.dropout1", "model_CNN_SSLM.CNN_2.lineal1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_SSLM.CNN_2.dropout2", "model_CNN_SSLM.CNN_2.lineal2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"-------CONVOLUTION 2----------\")", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "#print(\"Output Conv 2:\",x.shape)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "#print(\"Se unen los feature maps con la dimensi\u00f3n columnas (frecuencial):\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 1------------\")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#print(\"Output Lineal 1:\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 2------------\")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal2", "(", "x", ")", "\n", "#print(\"Output Lineal 2:\",x.shape)  ", "\n", "\n", "#x = torch.sigmoid(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_SSLM.CNN_Fusion.__init__": [[85, 91], ["torch.Module.__init__", "model_CNN_SSLM.CNN_1", "model_CNN_SSLM.CNN_2"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels1", ",", "output_channels2", ")", ":", "\n", "        ", "super", "(", "CNN_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels1", "=", "output_channels1", "\n", "\n", "self", ".", "cnn1", "=", "CNN_1", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn2", "=", "CNN_2", "(", "self", ".", "output_channels1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_SSLM.CNN_Fusion.forward": [[92, 96], ["model_CNN_SSLM.CNN_Fusion.cnn1", "model_CNN_SSLM.CNN_Fusion.cnn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sslm", ")", ":", "\n", "        ", "cnn1_out", "=", "self", ".", "cnn1", "(", "sslm", ")", "\n", "cnn2_out", "=", "self", ".", "cnn2", "(", "cnn1_out", ")", "\n", "return", "cnn2_out", "", "", "", ""]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_1.__init__": [[14, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_1.forward": [[27, 37], ["model_CNN_MLS_4SSLM.CNN_1.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_4SSLM.CNN_1.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_sslm.__init__": [[39, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_sslm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_sslm.forward": [[52, 62], ["model_CNN_MLS_4SSLM.CNN_sslm.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_4SSLM.CNN_sslm.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_2.__init__": [[64, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 2--------------------------", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "output_channels", ",", "\n", "out_channels", "=", "self", ".", "output_channels", "*", "2", ",", "\n", "kernel_size", "=", "(", "3", ",", "5", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "3", "-", "1", ")", "//", "2", ",", "(", "5", "-", "1", ")", "*", "3", "//", "2", ")", ",", "\n", "dilation", "=", "(", "1", ",", "3", ")", ")", "\n", "\n", "#------------------------------LINEAL 1--------------------------", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channels", "*", "152", ",", "128", ",", "(", "1", ",", "1", ")", ")", "#*72=para 6pool, *152 para 2pool3", "\n", "\n", "#------------------------------LINEAL 2--------------------------", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal2", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_2.forward": [[84, 106], ["model_CNN_MLS_4SSLM.CNN_2.conv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_4SSLM.CNN_2.reshape", "model_CNN_MLS_4SSLM.CNN_2.dropout1", "model_CNN_MLS_4SSLM.CNN_2.lineal1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_4SSLM.CNN_2.dropout2", "model_CNN_MLS_4SSLM.CNN_2.lineal2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"-------CONVOLUTION 2----------\")", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "#print(\"Output Conv 2:\",x.shape)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ",", "1", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "#print(\"Se unen los feature maps con la dimensi\u00f3n columnas (frecuencial):\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 1------------\")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#print(\"Output Lineal 1:\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 2------------\")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal2", "(", "x", ")", "\n", "#print(\"Output Lineal 2:\",x.shape)  ", "\n", "\n", "#x = torch.sigmoid(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_Fusion.__init__": [[108, 115], ["torch.Module.__init__", "model_CNN_MLS_4SSLM.CNN_1", "model_CNN_MLS_4SSLM.CNN_sslm", "model_CNN_MLS_4SSLM.CNN_2"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels1", ",", "output_channels2", ")", ":", "\n", "        ", "super", "(", "CNN_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels1", "=", "output_channels1", "\n", "\n", "self", ".", "cnn1_mel", "=", "CNN_1", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn1_sslm", "=", "CNN_sslm", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn2", "=", "CNN_2", "(", "self", ".", "output_channels1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_4SSLM.CNN_Fusion.forward": [[116, 122], ["model_CNN_MLS_4SSLM.CNN_Fusion.cnn1_mel", "model_CNN_MLS_4SSLM.CNN_Fusion.cnn1_sslm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_CNN_MLS_4SSLM.CNN_Fusion.cnn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mel", ",", "sslm", ")", ":", "\n", "        ", "cnn1_mls_out", "=", "self", ".", "cnn1_mel", "(", "mel", ")", "\n", "cnn1_sslm_out", "=", "self", ".", "cnn1_sslm", "(", "sslm", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "cnn1_mls_out", ",", "cnn1_sslm_out", ")", ",", "2", ")", "\n", "cnn2_out", "=", "self", ".", "cnn2", "(", "concat", ")", "\n", "return", "cnn2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_1.__init__": [[14, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_1.forward": [[27, 37], ["model_CNN_MLS_SSLM_SSLM.CNN_1.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM_SSLM.CNN_1.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_sslm.__init__": [[39, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_sslm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "2", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_sslm.forward": [[52, 62], ["model_CNN_MLS_SSLM_SSLM.CNN_sslm.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM_SSLM.CNN_sslm.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_2.__init__": [[64, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 2--------------------------", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "output_channels", ",", "\n", "out_channels", "=", "self", ".", "output_channels", "*", "2", ",", "\n", "kernel_size", "=", "(", "3", ",", "5", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "3", "-", "1", ")", "//", "2", ",", "(", "5", "-", "1", ")", "*", "3", "//", "2", ")", ",", "\n", "dilation", "=", "(", "1", ",", "3", ")", ")", "\n", "\n", "#------------------------------LINEAL 1--------------------------", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channels", "*", "152", ",", "128", ",", "(", "1", ",", "1", ")", ")", "#*72=para 6pool, *152 para 2pool3", "\n", "\n", "#------------------------------LINEAL 2--------------------------", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal2", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_2.forward": [[84, 106], ["model_CNN_MLS_SSLM_SSLM.CNN_2.conv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM_SSLM.CNN_2.reshape", "model_CNN_MLS_SSLM_SSLM.CNN_2.dropout1", "model_CNN_MLS_SSLM_SSLM.CNN_2.lineal1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM_SSLM.CNN_2.dropout2", "model_CNN_MLS_SSLM_SSLM.CNN_2.lineal2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"-------CONVOLUTION 2----------\")", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "#print(\"Output Conv 2:\",x.shape)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ",", "1", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "#print(\"Se unen los feature maps con la dimensi\u00f3n columnas (frecuencial):\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 1------------\")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#print(\"Output Lineal 1:\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 2------------\")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal2", "(", "x", ")", "\n", "#print(\"Output Lineal 2:\",x.shape)  ", "\n", "\n", "#x = torch.sigmoid(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_Fusion.__init__": [[108, 115], ["torch.Module.__init__", "model_CNN_MLS_SSLM_SSLM.CNN_1", "model_CNN_MLS_SSLM_SSLM.CNN_sslm", "model_CNN_MLS_SSLM_SSLM.CNN_2"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels1", ",", "output_channels2", ")", ":", "\n", "        ", "super", "(", "CNN_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels1", "=", "output_channels1", "\n", "\n", "self", ".", "cnn1_mel", "=", "CNN_1", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn1_sslm", "=", "CNN_sslm", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn2", "=", "CNN_2", "(", "self", ".", "output_channels1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM_SSLM.CNN_Fusion.forward": [[116, 122], ["model_CNN_MLS_SSLM_SSLM.CNN_Fusion.cnn1_mel", "model_CNN_MLS_SSLM_SSLM.CNN_Fusion.cnn1_sslm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_CNN_MLS_SSLM_SSLM.CNN_Fusion.cnn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mel", ",", "sslm", ")", ":", "\n", "        ", "cnn1_mls_out", "=", "self", ".", "cnn1_mel", "(", "mel", ")", "\n", "cnn1_sslm_out", "=", "self", ".", "cnn1_sslm", "(", "sslm", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "cnn1_mls_out", ",", "cnn1_sslm_out", ")", ",", "2", ")", "\n", "cnn2_out", "=", "self", ".", "cnn2", "(", "concat", ")", "\n", "return", "cnn2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS.CNN_1.__init__": [[14, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS.CNN_1.forward": [[27, 37], ["model_CNN_MLS.CNN_1.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS.CNN_1.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS.CNN_2.__init__": [[41, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 2--------------------------", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "output_channels", ",", "\n", "out_channels", "=", "self", ".", "output_channels", "*", "2", ",", "\n", "kernel_size", "=", "(", "3", ",", "5", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "3", "-", "1", ")", "//", "2", ",", "(", "5", "-", "1", ")", "*", "3", "//", "2", ")", ",", "\n", "dilation", "=", "(", "1", ",", "3", ")", ")", "\n", "\n", "#------------------------------LINEAL 1--------------------------", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal1", "=", "nn", ".", "Conv1d", "(", "self", ".", "output_channels", "*", "32", ",", "128", ",", "1", ")", "#2=valor filas vectores 3\u00badim    ", "\n", "\n", "#------------------------------LINEAL 2--------------------------", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal2", "=", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS.CNN_2.forward": [[61, 83], ["model_CNN_MLS.CNN_2.conv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS.CNN_2.reshape", "model_CNN_MLS.CNN_2.dropout1", "model_CNN_MLS.CNN_2.lineal1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS.CNN_2.dropout2", "model_CNN_MLS.CNN_2.lineal2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"-------CONVOLUTION 2----------\")", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "#print(\"Output Conv 2:\",x.shape)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "#print(\"Se unen los feature maps con la dimensi\u00f3n columnas (frecuencial):\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 1------------\")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#print(\"Output Lineal 1:\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 2------------\")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal2", "(", "x", ")", "\n", "#print(\"Output Lineal 2:\",x.shape)  ", "\n", "\n", "#x = torch.sigmoid(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS.CNN_Fusion.__init__": [[85, 91], ["torch.Module.__init__", "model_CNN_MLS.CNN_1", "model_CNN_MLS.CNN_2"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels1", ",", "output_channels2", ")", ":", "\n", "        ", "super", "(", "CNN_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels1", "=", "output_channels1", "\n", "\n", "self", ".", "cnn1", "=", "CNN_1", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn2", "=", "CNN_2", "(", "self", ".", "output_channels1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS.CNN_Fusion.forward": [[92, 96], ["model_CNN_MLS.CNN_Fusion.cnn1", "model_CNN_MLS.CNN_Fusion.cnn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sslm", ")", ":", "\n", "        ", "cnn1_out", "=", "self", ".", "cnn1", "(", "sslm", ")", "\n", "cnn2_out", "=", "self", ".", "cnn2", "(", "cnn1_out", ")", "\n", "return", "cnn2_out", "", "", "", ""]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM.CNN_1.__init__": [[14, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 1--------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "self", ".", "output_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "7", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "5", "-", "1", ")", "//", "2", ",", "(", "7", "-", "1", ")", "//", "2", ")", "\n", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "5", ",", "3", ")", ",", "stride", "=", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM.CNN_1.forward": [[27, 37], ["model_CNN_MLS_SSLM.CNN_1.conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM.CNN_1.pool1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"Input:\",x.shape)", "\n", "#print(\"-------CONVOLUTION 1----------\")", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "#print(\"Output Conv 1:\",x.shape)   ", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "#print(\"Output MaxPooling 1:\", x.shape)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM.CNN_2.__init__": [[41, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ")", ":", "\n", "        ", "super", "(", "CNN_2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "\n", "#------------------------------CONVOLUCION 2--------------------------", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "output_channels", ",", "\n", "out_channels", "=", "self", ".", "output_channels", "*", "2", ",", "\n", "kernel_size", "=", "(", "3", ",", "5", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "3", "-", "1", ")", "//", "2", ",", "(", "5", "-", "1", ")", "*", "3", "//", "2", ")", ",", "\n", "dilation", "=", "(", "1", ",", "3", ")", ")", "\n", "\n", "#------------------------------LINEAL 1--------------------------", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channels", "*", "152", ",", "128", ",", "(", "1", ",", "1", ")", ")", "#*72=para 6pool, *152 para 2pool3", "\n", "\n", "#------------------------------LINEAL 2--------------------------", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "lineal2", "=", "nn", ".", "Conv2d", "(", "128", ",", "1", ",", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM.CNN_2.forward": [[61, 83], ["model_CNN_MLS_SSLM.CNN_2.conv2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM.CNN_2.reshape", "model_CNN_MLS_SSLM.CNN_2.dropout1", "model_CNN_MLS_SSLM.CNN_2.lineal1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "model_CNN_MLS_SSLM.CNN_2.dropout2", "model_CNN_MLS_SSLM.CNN_2.lineal2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(\"-------CONVOLUTION 2----------\")", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "#print(\"Output Conv 2:\",x.shape)", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ",", "1", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "#print(\"Se unen los feature maps con la dimensi\u00f3n columnas (frecuencial):\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 1------------\")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "#print(\"Output Lineal 1:\",x.shape)", "\n", "\n", "#print(\"----------LINEAL 2------------\")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "lineal2", "(", "x", ")", "\n", "#print(\"Output Lineal 2:\",x.shape)  ", "\n", "\n", "#x = torch.sigmoid(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM.CNN_Fusion.__init__": [[85, 92], ["torch.Module.__init__", "model_CNN_MLS_SSLM.CNN_1", "model_CNN_MLS_SSLM.CNN_1", "model_CNN_MLS_SSLM.CNN_2"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels1", ",", "output_channels2", ")", ":", "\n", "        ", "super", "(", "CNN_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channels1", "=", "output_channels1", "\n", "\n", "self", ".", "cnn1_mel", "=", "CNN_1", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn1_sslm", "=", "CNN_1", "(", "self", ".", "output_channels1", ")", "\n", "self", ".", "cnn2", "=", "CNN_2", "(", "self", ".", "output_channels1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.models.model_CNN_MLS_SSLM.CNN_Fusion.forward": [[93, 99], ["model_CNN_MLS_SSLM.CNN_Fusion.cnn1_mel", "model_CNN_MLS_SSLM.CNN_Fusion.cnn1_sslm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_CNN_MLS_SSLM.CNN_Fusion.cnn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mel", ",", "sslm", ")", ":", "\n", "        ", "cnn1_mls_out", "=", "self", ".", "cnn1_mel", "(", "mel", ")", "\n", "cnn1_sslm_out", "=", "self", ".", "cnn1_sslm", "(", "sslm", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "cnn1_mls_out", ",", "cnn1_sslm_out", ")", ",", "2", ")", "\n", "cnn2_out", "=", "self", ".", "cnn2", "(", "concat", ")", "\n", "return", "cnn2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.train.train_MLS.adjust_learning_rate": [[66, 71], ["None"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.85", "**", "(", "epoch", "//", "2", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.train.train_model.run_training": [[19, 66], ["time.time", "torch.device", "torch.device", "print", "print", "print", "print", "print", "train_model.train_loop", "boundariesdetectioncnn.data.dataloaders.build_dataloader", "boundariesdetectioncnn.data.dataloaders.build_dataloader", "boundariesdetectioncnn.models.model_CNN_MLS.CNN_Fusion().to", "torch.cuda.is_available", "torch.cuda.is_available", "len", "len", "len", "len", "boundariesdetectioncnn.models.model_CNN_MLS.CNN_Fusion", "time.time"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.train.train_model.train_loop", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.build_dataloader", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.build_dataloader"], ["def", "run_training", "(", "model", ",", "\n", "batch_size", "=", "configs", ".", "ParamsConfig", ".", "BATCH_SIZE", ",", "\n", "epochs", "=", "configs", ".", "ParamsConfig", ".", "NUM_EPOCHS", ",", "\n", "save_epoch", "=", "5", ",", "\n", "lr", "=", "configs", ".", "ParamsConfig", ".", "LEARNING_RATE", ",", "\n", "iterations", "=", "configs", ".", "ParamsConfig", ".", "ITERATIONS", ",", "\n", "lamda", "=", "configs", ".", "InputsConfig", ".", "LAMBDA", ",", "\n", "output_channels", "=", "configs", ".", "ParamsConfig", ".", "OUT_CHANNELS", ",", "\n", "padding_factor", "=", "configs", ".", "InputsConfig", ".", "PADDING_FACTOR", ",", "\n", "pooling_factor", "=", "configs", ".", "InputsConfig", ".", "POOLING_FACTOR", ",", "\n", "hop_length", "=", "configs", ".", "InputsConfig", ".", "HOP_LENGTH", ",", "\n", "sr", "=", "configs", ".", "InputsConfig", ".", "SAMPLING_RATE", ",", "\n", "window", "=", "configs", ".", "InputsConfig", ".", "WINDOW", ",", "\n", "labels_path", "=", "configs", ".", "PathsConfig", ".", "LABELS_PATH", ")", ":", "\n", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "if", "model", "==", "\"mels\"", ":", "\n", "        ", "input_train_path", "=", "configs", ".", "PathsConfig", ".", "MELS_TRAIN_PATH", "\n", "input_val_path", "=", "configs", ".", "PathsConfig", ".", "MELS_VAL_PATH", "\n", "\n", "mels_train_dataset", ",", "mels_trainloader", "=", "dataloaders", ".", "build_dataloader", "(", "batch_size", ",", "input_train_path", ",", "labels_path", ")", "\n", "mels_val_dataset", ",", "mels_valloader", "=", "dataloaders", ".", "build_dataloader", "(", "batch_size", ",", "input_val_path", ",", "labels_path", ")", "\n", "\n", "assert", "len", "(", "mels_train_dataset", ")", ">", "0", "\n", "assert", "len", "(", "mels_val_dataset", ")", ">", "0", "\n", "\n", "model", "=", "model_CNN_MLS", ".", "CNN_Fusion", "(", "output_channels", ",", "output_channels", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "print", "(", "\"Input data imported in {:.2f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "print", "(", "'============================MODEL====================================='", ")", "\n", "print", "(", "\"Total SSLMs cargadas para entrenamiento:\"", ",", "len", "(", "mels_trainloader", ")", "*", "batch_size", ")", "\n", "print", "(", "\"Total SSLMs cargadas para validacion:\"", ",", "len", "(", "mels_valloader", ")", "*", "batch_size", ")", "\n", "\n", "print", "(", "\"==========================TRAINING====================================\"", ")", "\n", "\n", "train_loop", "(", "model", "=", "model", ",", "\n", "trainloader", "=", "mels_trainloader", ",", "\n", "valloader", "=", "mels_valloader", ",", "\n", "device", "=", "device", ",", "\n", "save_epoch", "=", "save_epoch", ",", "\n", "epochs", "=", "epochs", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.train.train_model.train_loop": [[68, 262], ["torch.BCEWithLogitsLoss", "torch.optim.Adam", "torch.optim.Adam", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "time.time", "range", "tensorboardX.SummaryWriter.close", "tensorboardX.SummaryWriter.close", "print", "torch.save", "torch.save", "model.parameters", "model.train", "tqdm.tqdm", "print", "torch.optim.Adam.zero_grad", "enumerate", "tqdm.tqdm.close", "print", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "model.eval", "model.state_dict", "images_mls.to.to", "model", "model.view", "nn.BCEWithLogitsLoss.", "criterion.backward", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "tensorboardX.SummaryWriter.add_scalar", "range", "numpy.delete", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "range", "range", "numpy.delete", "mir_eval.segment.detection", "torch.no_grad", "torch.no_grad", "enumerate", "print", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "len", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "os.path.exists", "os.mkdir", "torch.save", "torch.save", "len", "images_mls.to.float", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.sigmoid", "torch.sigmoid", "numpy.array", "torch.sigmoid().cpu().detach().numpy.min", "scipy.signal.find_peaks", "len", "numpy.array", "len", "len", "images_mls.to.to", "model", "model.view", "range", "numpy.delete", "torch.sigmoid().cpu().detach().numpy", "torch.sigmoid().cpu().detach().numpy", "range", "numpy.insert", "numpy.append", "range", "numpy.delete", "mir_eval.segment.detection", "nn.BCEWithLogitsLoss.", "model.state_dict", "time.time", "str", "labels_mls.view().float().to", "outputs_combined.view.max", "repeated_list.append", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "repeated_list.append", "len", "len", "images_mls.to.float", "numpy.array", "torch.sigmoid().cpu().detach().numpy.min", "scipy.signal.find_peaks", "len", "len", "numpy.array", "len", "len", "running_loss.item", "running_accuracy.item", "numpy.copy", "numpy.copy", "torch.sigmoid().cpu().detach().numpy.max", "torch.sigmoid().cpu().detach().numpy.min", "numpy.copy", "numpy.copy", "labels_mls.view().float().to", "repeated_list.append", "torch.sigmoid().cpu().detach", "torch.sigmoid().cpu().detach", "repeated_list.append", "len", "len", "str", "labels_mls.view().float", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "numpy.copy", "numpy.copy", "torch.sigmoid().cpu().detach().numpy.max", "torch.sigmoid().cpu().detach().numpy.min", "numpy.copy", "numpy.copy", "labels_mls.view().float", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "labels_mls.view", "torch.sigmoid", "torch.sigmoid", "labels_mls.view", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "train_loop", "(", "model", ",", "\n", "trainloader", ",", "\n", "valloader", ",", "\n", "device", ",", "\n", "save_epoch", "=", "5", ",", "\n", "epochs", "=", "configs", ".", "ParamsConfig", ".", "NUM_EPOCHS", ",", "\n", "lr", "=", "configs", ".", "ParamsConfig", ".", "LEARNING_RATE", ",", "\n", "iterations", "=", "configs", ".", "ParamsConfig", ".", "ITERATIONS", ",", "\n", "lamda", "=", "configs", ".", "InputsConfig", ".", "LAMBDA", ",", "\n", "padding_factor", "=", "configs", ".", "InputsConfig", ".", "PADDING_FACTOR", ",", "\n", "pooling_factor", "=", "configs", ".", "InputsConfig", ".", "POOLING_FACTOR", ",", "\n", "hop_length", "=", "configs", ".", "InputsConfig", ".", "HOP_LENGTH", ",", "\n", "sr", "=", "configs", ".", "InputsConfig", ".", "SAMPLING_RATE", ",", "\n", "window", "=", "configs", ".", "InputsConfig", ".", "WINDOW", ")", ":", "\n", "\n", "\n", "\n", "    ", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "#nn.MSELoss() #BCEWithLogitsLoss()", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "validation_loss", "=", "[", "]", "\n", "train_accuracy", "=", "[", "]", "\n", "validation_accuracy", "=", "[", "]", "\n", "writer_train", "=", "SummaryWriter", "(", "\"../graphs/train\"", ")", "\n", "writer_test", "=", "SummaryWriter", "(", "\"../graphs/validation\"", ")", "\n", "\n", "training_start_time", "=", "time", ".", "time", "(", ")", "\n", "\"==================================MAIN LOOP==================================\"", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "training_loss", "=", "0.0", "\n", "running_loss", "=", "0.0", "\n", "training_accuracy", "=", "0.0", "\n", "running_accuracy", "=", "0.0", "\n", "\n", "F_train", "=", "0.0", "\n", "R_train", "=", "0.0", "\n", "P_train", "=", "0.0", "\n", "\n", "val_loss", "=", "0.0", "\n", "validation_accuracy", "=", "0.0", "\n", "\n", "examples", "=", "0", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "trainloader", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "epoch", ")", "\n", "\"==============================TRAIN LOOP=================================\"", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch_idx", ",", "(", "images_mls", ",", "labels_mls", ",", "labels_sec_mls", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "images_mls", "=", "images_mls", ".", "to", "(", "device", ")", "\n", "\n", "outputs_combined", "=", "model", "(", "images_mls", ".", "float", "(", ")", ")", "\n", "\n", "outputs", "=", "outputs_combined", ".", "view", "(", "-", "1", ")", "#2\u00ba valor son las clases de salida", "\n", "labels", "=", "labels_mls", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "*", "0.98", "+", "0.01", "\n", "\n", "train_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "train_loss", ".", "backward", "(", ")", "\n", "\n", "if", "batch_idx", "%", "iterations", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#Loss", "\n", "", "training_loss", "+=", "train_loss", "\n", "running_loss", "=", "0.99", "*", "running_loss", "+", "(", "1", "-", "0.99", ")", "*", "train_loss", "\n", "\n", "#Accuracy", "\n", "accuracy", "=", "(", "(", "outputs", ">", "0.5", ")", ".", "float", "(", ")", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "training_accuracy", "+=", "accuracy", "\n", "running_accuracy", "=", "0.99", "*", "running_accuracy", "+", "(", "1", "-", "0.99", ")", "*", "accuracy", "\n", "pbar", ".", "set_postfix", "(", "loss", "=", "running_loss", ".", "item", "(", ")", "/", "(", "1", "-", "0.99", "**", "(", "batch_idx", "+", "1", ")", ")", ",", "accuracy", "=", "running_accuracy", ".", "item", "(", ")", "/", "(", "1", "-", "0.99", "**", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "pbar", ".", "update", "(", ")", "\n", "writer_train", ".", "add_scalar", "(", "'Output Max'", ",", "torch", ".", "sigmoid", "(", "outputs", ".", "max", "(", ")", ")", ",", "batch_idx", ")", "\n", "\n", "\"\"\"This is only to graph results in tensorboard\"\"\"", "\n", "labels_sec_mls", "=", "labels_sec_mls", "[", "0", ",", ":", "]", "\n", "labels_sec_mls", "=", "labels_sec_mls", "[", "1", ":", "]", "\n", "reference", "=", "np", ".", "array", "(", "(", "np", ".", "copy", "(", "labels_sec_mls", "[", ":", "-", "1", "]", ")", ",", "np", ".", "copy", "(", "labels_sec_mls", "[", "1", ":", "]", ")", ")", ")", ".", "T", "\n", "repeated_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "reference", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "reference", "[", "j", ",", "0", "]", "==", "reference", "[", "j", ",", "1", "]", ":", "\n", "                    ", "repeated_list", ".", "append", "(", "j", ")", "\n", "", "", "reference", "=", "np", ".", "delete", "(", "reference", ",", "repeated_list", ",", "0", ")", "\n", "\n", "pred_new", "=", "torch", ".", "sigmoid", "(", "outputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "delta", "=", "(", "pred_new", ".", "max", "(", ")", "-", "pred_new", ".", "min", "(", ")", ")", "*", "0.2", "+", "pred_new", ".", "min", "(", ")", "#threshold", "\n", "\n", "peak_position", "=", "signal", ".", "find_peaks", "(", "pred_new", ",", "height", "=", "delta", ",", "distance", "=", "lamda", ")", "[", "0", "]", "#array of peaks", "\n", "peaks_positions", "=", "(", "(", "peak_position", "-", "padding_factor", ")", "*", "pooling_factor", "*", "hop_length", ")", "/", "sr", "\n", "for", "i", "in", "range", "(", "len", "(", "peaks_positions", ")", ")", ":", "\n", "                ", "if", "peaks_positions", "[", "i", "]", "<", "0", ":", "\n", "                    ", "peaks_positions", "[", "i", "]", "=", "0", "\n", "\n", "", "", "pred_positions", "=", "np", ".", "array", "(", "(", "np", ".", "copy", "(", "peaks_positions", "[", ":", "-", "1", "]", ")", ",", "np", ".", "copy", "(", "peaks_positions", "[", "1", ":", "]", ")", ")", ")", ".", "T", "\n", "repeated_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "pred_positions", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "pred_positions", "[", "j", ",", "0", "]", "==", "pred_positions", "[", "j", ",", "1", "]", ":", "\n", "                    ", "repeated_list", ".", "append", "(", "j", ")", "\n", "", "", "pred_positions", "=", "np", ".", "delete", "(", "pred_positions", ",", "repeated_list", ",", "0", ")", "\n", "\n", "P_ant_train", ",", "R_ant_train", ",", "F_ant_train", ",", "*", "_", "=", "mir_eval", ".", "segment", ".", "detection", "(", "reference", ",", "pred_positions", ",", "window", "=", "window", ",", "beta", "=", "1.0", ",", "trim", "=", "False", ")", "\n", "P_train", ",", "R_train", ",", "F_train", "=", "P_train", "+", "P_ant_train", ",", "R_train", "+", "R_ant_train", ",", "F_train", "+", "F_ant_train", "\n", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "print", "(", "\"training_accuracy={:.2f}  training_loss={:.2f}\\n\"", ".", "format", "(", "training_accuracy", "/", "len", "(", "trainloader", ")", ",", "training_loss", "/", "len", "(", "trainloader", ")", ")", ")", "\n", "\n", "writer_train", ".", "add_scalar", "(", "'Loss'", ",", "training_loss", "/", "len", "(", "trainloader", ")", ",", "epoch", ")", "\n", "writer_train", ".", "add_scalar", "(", "'Accuracy'", ",", "training_accuracy", "/", "len", "(", "trainloader", ")", ",", "epoch", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "F", "=", "0.0", "\n", "R", "=", "0.0", "\n", "P", "=", "0.0", "\n", "\n", "\"============================VALIDATION LOOP==============================\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "#para que no calcule gradientes en validaci\u00f3n", "\n", "            ", "for", "batch_idx", ",", "(", "images_mls", ",", "labels_mls", ",", "labels_sec_mls", ")", "in", "enumerate", "(", "valloader", ")", ":", "\n", "#Forward pass", "\n", "                ", "images_mls", "=", "images_mls", ".", "to", "(", "device", ")", "\n", "\n", "val_outputs_combined", "=", "model", "(", "images_mls", ".", "float", "(", ")", ")", "\n", "val_outputs", "=", "val_outputs_combined", ".", "view", "(", "-", "1", ")", "#2\u00ba valor son las clases de salida", "\n", "labels", "=", "labels_mls", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "*", "0.98", "+", "0.01", "\n", "\n", "labels_sec_mls", "=", "labels_sec_mls", "[", "0", ",", ":", "]", "\n", "reference", "=", "np", ".", "array", "(", "(", "np", ".", "copy", "(", "labels_sec_mls", "[", ":", "-", "1", "]", ")", ",", "np", ".", "copy", "(", "labels_sec_mls", "[", "1", ":", "]", ")", ")", ")", ".", "T", "\n", "repeated_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "reference", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "reference", "[", "j", ",", "0", "]", "==", "reference", "[", "j", ",", "1", "]", ":", "\n", "                        ", "repeated_list", ".", "append", "(", "j", ")", "\n", "", "", "reference", "=", "np", ".", "delete", "(", "reference", ",", "repeated_list", ",", "0", ")", "\n", "\n", "pred_new", "=", "torch", ".", "sigmoid", "(", "val_outputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "delta", "=", "(", "pred_new", ".", "max", "(", ")", "-", "pred_new", ".", "min", "(", ")", ")", "*", "0.2", "+", "pred_new", ".", "min", "(", ")", "#threshold", "\n", "\n", "peak_position", "=", "signal", ".", "find_peaks", "(", "pred_new", ",", "height", "=", "delta", ",", "distance", "=", "lamda", ")", "[", "0", "]", "#array of peaks", "\n", "peaks_positions", "=", "(", "(", "peak_position", "-", "padding_factor", ")", "*", "pooling_factor", "*", "hop_length", ")", "/", "sr", "\n", "for", "i", "in", "range", "(", "len", "(", "peaks_positions", ")", ")", ":", "\n", "                    ", "if", "peaks_positions", "[", "i", "]", "<", "0", ":", "\n", "                        ", "peaks_positions", "[", "i", "]", "=", "0", "\n", "\n", "", "", "peaks_position", "=", "np", ".", "insert", "(", "peaks_positions", ",", "0", ",", "0", ")", "\n", "peaks_position", "=", "np", ".", "append", "(", "peaks_position", ",", "len", "(", "pred_new", ")", ")", "\n", "pred_positions", "=", "np", ".", "array", "(", "(", "np", ".", "copy", "(", "peaks_position", "[", ":", "-", "1", "]", ")", ",", "np", ".", "copy", "(", "peaks_position", "[", "1", ":", "]", ")", ")", ")", ".", "T", "\n", "repeated_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "pred_positions", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "pred_positions", "[", "j", ",", "0", "]", "==", "pred_positions", "[", "j", ",", "1", "]", ":", "\n", "                        ", "repeated_list", ".", "append", "(", "j", ")", "\n", "", "", "pred_positions", "=", "np", ".", "delete", "(", "pred_positions", ",", "repeated_list", ",", "0", ")", "\n", "\n", "P_ant", ",", "R_ant", ",", "F_ant", ",", "*", "_", "=", "mir_eval", ".", "segment", ".", "detection", "(", "reference", ",", "pred_positions", ",", "window", "=", "window", ",", "beta", "=", "1.0", ",", "trim", "=", "False", ")", "\n", "P", ",", "R", ",", "F", "=", "P", "+", "P_ant", ",", "R", "+", "R_ant", ",", "F", "+", "F_ant", "\n", "\n", "val_loss_size", "=", "criterion", "(", "val_outputs", ",", "labels", ")", "\n", "\n", "#Loss", "\n", "val_loss", "+=", "val_loss_size", "\n", "\n", "#Accuracy", "\n", "val_accuracy", "=", "(", "(", "val_outputs", ">", "0.5", ")", ".", "float", "(", ")", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "validation_accuracy", "+=", "val_accuracy", "\n", "\n", "", "print", "(", "\"validation_accuracy={:.2f}  validation_loss={:.2f}\\n\"", ".", "format", "(", "validation_accuracy", "/", "len", "(", "valloader", ")", ",", "val_loss", "/", "len", "(", "valloader", ")", ")", ")", "\n", "\n", "writer_test", ".", "add_scalar", "(", "'Loss'", ",", "val_loss", "/", "len", "(", "valloader", ")", ",", "epoch", ")", "#epoch* len(valloader) + batch_idx", "\n", "writer_test", ".", "add_scalar", "(", "'Accuracy'", ",", "validation_accuracy", "/", "len", "(", "valloader", ")", ",", "epoch", ")", "\n", "\n", "n_songs", "=", "len", "(", "valloader", ")", "\n", "P_total", ",", "R_total", ",", "F_total", "=", "P", "/", "n_songs", ",", "R", "/", "n_songs", ",", "F", "/", "n_songs", "\n", "writer_test", ".", "add_scalar", "(", "'R'", ",", "R_total", ",", "epoch", ")", "\n", "writer_test", ".", "add_scalar", "(", "'P'", ",", "P_total", ",", "epoch", ")", "\n", "writer_test", ".", "add_scalar", "(", "'F'", ",", "F_total", ",", "epoch", ")", "\n", "\n", "\n", "#save trained model every 5 epochs", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "configs", ".", "ParamsConfig", ".", "WEIGHTS_PATH", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "configs", ".", "ParamsConfig", ".", "WEIGHTS_PATH", ")", "\n", "\n", "", "if", "epoch", "%", "save_epoch", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "configs", ".", "ParamsConfig", ".", "WEIGHTS_PATH", "+", "\"saved_model_\"", "+", "str", "(", "epoch", ")", "+", "\"epochs.bin\"", ")", "\n", "\n", "", "", "writer_train", ".", "close", "(", ")", "\n", "writer_test", ".", "close", "(", ")", "\n", "\n", "\n", "print", "(", "\"Training finished in {:.2f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "training_start_time", ")", ")", "\n", "#Se guardan los pesos de entrenamiento", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "configs", ".", "ParamsConfig", ".", "WEIGHTS_PATH", "+", "\"saved_model_\"", "+", "str", "(", "epoch", ")", "+", "\"epochs.bin\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.train.train_SSLM.adjust_learning_rate": [[66, 71], ["None"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.85", "**", "(", "epoch", "//", "2", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_mfccs_euclidean.mel_spectrogram": [[23, 33], ["librosa.load", "librosa.load", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "librosa.power_to_db", "librosa.power_to_db", "librosa.core.resample", "librosa.core.resample"], "function", ["None"], ["def", "mel_spectrogram", "(", "sr_desired", ",", "name_song", ",", "window_size", ",", "hop_length", ")", ":", "\n", "    ", "\"This function calculates the mel spectrogram in dB with Librosa library\"", "\n", "y", ",", "sr", "=", "librosa", ".", "load", "(", "name_song", ",", "sr", "=", "None", ")", "\n", "if", "sr", "!=", "sr_desired", ":", "\n", "        ", "y", "=", "librosa", ".", "core", ".", "resample", "(", "y", ",", "sr", ",", "sr_desired", ")", "\n", "sr", "=", "sr_desired", "\n", "\n", "", "S", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "y", ",", "sr", "=", "sr", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ",", "n_mels", "=", "80", ",", "fmin", "=", "80", ",", "fmax", "=", "16000", ")", "\n", "S_to_dB", "=", "librosa", ".", "power_to_db", "(", "S", ",", "ref", "=", "np", ".", "max", ")", "#convert S in dB", "\n", "return", "S_to_dB", "#S_to_dB is the spectrogam in dB ", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_mfccs_euclidean.max_pooling": [[34, 37], ["skimage.measure.block_reduce"], "function", ["None"], ["", "def", "max_pooling", "(", "spectrogram_padded", ",", "pooling_factor", ")", ":", "\n", "    ", "x_prime", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "spectrogram_padded", ",", "(", "1", ",", "pooling_factor", ")", ",", "np", ".", "max", ")", "\n", "return", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_mfccs_euclidean.sslm": [[39, 100], ["numpy.full", "numpy.concatenate", "SSLagM_all_songs_mfccs_euclidean.max_pooling", "scipy.fftpack.dct", "numpy.concatenate", "numpy.zeros", "range", "numpy.zeros", "range", "scipy.special.expit", "numpy.transpose", "skimage.measure.block_reduce", "range", "numpy.roll", "range", "range", "range", "range", "numpy.quantile", "numpy.isnan", "numpy.concatenate", "scipy.spatial.distance.euclidean", "float"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.max_pooling"], ["", "def", "sslm", "(", "spectrogram", ",", "pooling_factor", ",", "lag", ")", ":", "\n", "\n", "    ", "padding_factor", "=", "lag", "\n", "\"\"\"\"This part pads a mel spectrogram gived the spectrogram a lag parameter \n    to compare the first rows with the last ones and make the matrix circular\"\"\"", "\n", "pad", "=", "np", ".", "full", "(", "(", "spectrogram", ".", "shape", "[", "0", "]", ",", "padding_factor", ")", ",", "-", "70", ")", "#matrix of 80x30frames of -70dB corresponding to padding", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "pad", ",", "spectrogram", ")", ",", "axis", "=", "1", ")", "#padding 30 frames with noise at -70dB at the beginning", "\n", "\n", "\"\"\"This part max-poolend the spectrogram in time axis by a factor of p\"\"\"", "\n", "x_prime", "=", "max_pooling", "(", "S_padded", ",", "pooling_factor", ")", "\n", "\n", "\"\"\"\"This part calculates a circular Self Similarity Lag Matrix given\n    the mel spectrogram padded and max-pooled\"\"\"", "\n", "#MFCCs calculation from DCT-Type II", "\n", "MFCCs", "=", "scipy", ".", "fftpack", ".", "dct", "(", "x_prime", ",", "axis", "=", "0", ",", "type", "=", "2", ",", "norm", "=", "'ortho'", ")", "\n", "MFCCs", "=", "MFCCs", "[", "1", ":", ",", ":", "]", "#0 componen ommited", "\n", "\n", "#Bagging frames", "\n", "m", "=", "2", "#baggin parameter in frames", "\n", "x", "=", "[", "np", ".", "roll", "(", "MFCCs", ",", "n", ",", "axis", "=", "1", ")", "for", "n", "in", "range", "(", "m", ")", "]", "\n", "x_hat", "=", "np", ".", "concatenate", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "#Cosine distance calculation: D[N/p,L/p] matrix", "\n", "distances", "=", "np", ".", "zeros", "(", "(", "x_hat", ".", "shape", "[", "1", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "x_hat", ".", "shape", "[", "1", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "if", "i", "-", "(", "l", "+", "1", ")", "<", "0", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "elif", "i", "-", "(", "l", "+", "1", ")", "<", "padding_factor", "//", "p", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "else", ":", "\n", "                ", "cosine_dist", "=", "distance", ".", "euclidean", "(", "x_hat", "[", ":", ",", "i", "]", ",", "x_hat", "[", ":", ",", "i", "-", "(", "l", "+", "1", ")", "]", ")", "#cosine distance between columns i and i-L", "\n", "if", "cosine_dist", "==", "float", "(", "'nan'", ")", ":", "\n", "                    ", "cosine_dist", "=", "0", "\n", "", "", "distances", "[", "i", ",", "l", "]", "=", "cosine_dist", "\n", "\n", "#Threshold epsilon[N/p,L/p] calculation", "\n", "", "", "kappa", "=", "0.1", "\n", "epsilon", "=", "np", ".", "zeros", "(", "(", "distances", ".", "shape", "[", "0", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "padding_factor", "//", "p", ",", "distances", ".", "shape", "[", "0", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "epsilon", "[", "i", ",", "l", "]", "=", "np", ".", "quantile", "(", "np", ".", "concatenate", "(", "(", "distances", "[", "i", "-", "l", ",", ":", "]", ",", "distances", "[", "i", ",", ":", "]", ")", ")", ",", "kappa", ")", "\n", "\n", "#We remove the padding done before ", "\n", "", "", "distances", "=", "distances", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "epsilon", "=", "epsilon", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "x_prime", "=", "x_prime", "[", ":", ",", "padding_factor", "//", "p", ":", "]", "\n", "\n", "#Self Similarity Lag Matrix", "\n", "sslm", "=", "scipy", ".", "special", ".", "expit", "(", "1", "-", "distances", "/", "epsilon", ")", "#aplicaci\u00f3n de la sigmoide", "\n", "sslm", "=", "np", ".", "transpose", "(", "sslm", ")", "\n", "sslm", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "sslm", ",", "(", "1", ",", "3", ")", ",", "np", ".", "max", ")", "\n", "\n", "#Check if SSLM has nans and if it has them, substitute them by 0", "\n", "for", "i", "in", "range", "(", "sslm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sslm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "sslm", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "sslm", "[", "i", ",", "j", "]", "=", "0", "\n", "\n", "\n", "", "", "", "return", "sslm", ",", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.process_noise": [[15, 66], ["signal.make_wave", "signal.make_wave.segment", "wave.segment.plot", "thinkplot.save", "signal.make_wave.make_spectrum", "wave.make_spectrum.plot_power", "thinkplot.save", "wave.make_spectrum.estimate_slope", "print", "wave.make_spectrum.make_integrated_spectrum", "spectrum.make_integrated_spectrum.plot_power", "thinkplot.save", "thinkplot.preplot", "wave.make_spectrum.plot_power", "thinkplot.config", "thinkplot.subplot", "wave.make_spectrum.plot_power", "thinkplot.config", "thinkplot.save"], "function", ["None"], ["def", "process_noise", "(", "signal", ",", "root", "=", "'white'", ")", ":", "\n", "    ", "\"\"\"Plots wave and spectrum for noise signals.\n    signal: Signal\n    root: string used to generate file names\n    \"\"\"", "\n", "framerate", "=", "11025", "\n", "wave", "=", "signal", ".", "make_wave", "(", "duration", "=", "0.5", ",", "framerate", "=", "framerate", ")", "\n", "\n", "# 0: waveform", "\n", "segment", "=", "wave", ".", "segment", "(", "duration", "=", "0.1", ")", "\n", "segment", ".", "plot", "(", "linewidth", "=", "1", ",", "alpha", "=", "0.5", ")", "\n", "thinkplot", ".", "save", "(", "root", "=", "root", "+", "'noise0'", ",", "\n", "xlabel", "=", "'Time (s)'", ",", "\n", "ylim", "=", "[", "-", "1.05", ",", "1.05", "]", ")", "\n", "\n", "spectrum", "=", "wave", ".", "make_spectrum", "(", ")", "\n", "\n", "# 1: spectrum", "\n", "spectrum", ".", "plot_power", "(", "linewidth", "=", "1", ",", "alpha", "=", "0.5", ")", "\n", "thinkplot", ".", "save", "(", "root", "=", "root", "+", "'noise1'", ",", "\n", "xlabel", "=", "'Frequency (Hz)'", ",", "\n", "ylabel", "=", "'Power'", ",", "\n", "xlim", "=", "[", "0", ",", "spectrum", ".", "fs", "[", "-", "1", "]", "]", ")", "\n", "\n", "slope", ",", "_", ",", "_", ",", "_", ",", "_", "=", "spectrum", ".", "estimate_slope", "(", ")", "\n", "print", "(", "'estimated slope'", ",", "slope", ")", "\n", "\n", "# 2: integrated spectrum", "\n", "integ", "=", "spectrum", ".", "make_integrated_spectrum", "(", ")", "\n", "integ", ".", "plot_power", "(", ")", "\n", "thinkplot", ".", "save", "(", "root", "=", "root", "+", "'noise2'", ",", "\n", "xlabel", "=", "'Frequency (Hz)'", ",", "\n", "ylabel", "=", "'Cumulative fraction of total power'", ",", "\n", "xlim", "=", "[", "0", ",", "framerate", "/", "2", "]", ")", "\n", "\n", "# 3: log-log power spectrum", "\n", "spectrum", ".", "hs", "[", "0", "]", "=", "0", "\n", "thinkplot", ".", "preplot", "(", "cols", "=", "2", ")", "\n", "spectrum", ".", "plot_power", "(", "linewidth", "=", "1", ",", "alpha", "=", "0.5", ")", "\n", "thinkplot", ".", "config", "(", "xlabel", "=", "'Frequency (Hz)'", ",", "\n", "ylabel", "=", "'Power'", ",", "\n", "xlim", "=", "[", "0", ",", "framerate", "/", "2", "]", ")", "\n", "\n", "thinkplot", ".", "subplot", "(", "2", ")", "\n", "spectrum", ".", "plot_power", "(", "linewidth", "=", "1", ",", "alpha", "=", "0.5", ")", "\n", "thinkplot", ".", "config", "(", "xlabel", "=", "'Frequency (Hz)'", ",", "\n", "xscale", "=", "'log'", ",", "\n", "yscale", "=", "'log'", ",", "\n", "xlim", "=", "[", "0", ",", "framerate", "/", "2", "]", ")", "\n", "\n", "thinkplot", ".", "save", "(", "root", "=", "root", "+", "'noise3'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.plot_gaussian_noise": [[68, 90], ["thinkdsp.random_seed", "thinkdsp.UncorrelatedGaussianNoise", "thinkdsp.UncorrelatedGaussianNoise.make_wave", "signal.make_wave.make_spectrum", "thinkplot.preplot", "thinkstats2.NormalProbabilityPlot", "thinkplot.config", "thinkplot.subplot", "thinkstats2.NormalProbabilityPlot", "thinkplot.config", "thinkplot.save"], "function", ["None"], ["", "def", "plot_gaussian_noise", "(", ")", ":", "\n", "    ", "\"\"\"Shows the distribution of the spectrum of Gaussian noise.\n    \"\"\"", "\n", "thinkdsp", ".", "random_seed", "(", "18", ")", "\n", "signal", "=", "thinkdsp", ".", "UncorrelatedGaussianNoise", "(", ")", "\n", "wave", "=", "signal", ".", "make_wave", "(", "duration", "=", "0.5", ",", "framerate", "=", "11025", ")", "\n", "spectrum", "=", "wave", ".", "make_spectrum", "(", ")", "\n", "\n", "thinkplot", ".", "preplot", "(", "2", ",", "cols", "=", "2", ")", "\n", "thinkstats2", ".", "NormalProbabilityPlot", "(", "spectrum", ".", "real", ",", "label", "=", "'real'", ")", "\n", "thinkplot", ".", "config", "(", "xlabel", "=", "'Normal sample'", ",", "\n", "ylabel", "=", "'Amplitude'", ",", "\n", "ylim", "=", "[", "-", "250", ",", "250", "]", ",", "\n", "loc", "=", "'lower right'", ")", "\n", "\n", "thinkplot", ".", "subplot", "(", "2", ")", "\n", "thinkstats2", ".", "NormalProbabilityPlot", "(", "spectrum", ".", "imag", ",", "label", "=", "'imag'", ")", "\n", "thinkplot", ".", "config", "(", "xlabel", "=", "'Normal sample'", ",", "\n", "ylim", "=", "[", "-", "250", ",", "250", "]", ",", "\n", "loc", "=", "'lower right'", ")", "\n", "\n", "thinkplot", ".", "save", "(", "root", "=", "'noise1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.plot_pink_noise": [[92, 126], ["thinkdsp.random_seed", "thinkdsp.UncorrelatedUniformNoise", "noise.plot_pink_noise.make_spectrum"], "function", ["None"], ["", "def", "plot_pink_noise", "(", ")", ":", "\n", "    ", "\"\"\"Makes a plot showing power spectrums for pink noise.\n    \"\"\"", "\n", "thinkdsp", ".", "random_seed", "(", "20", ")", "\n", "\n", "duration", "=", "1.0", "\n", "framerate", "=", "512", "\n", "\n", "def", "make_spectrum", "(", "signal", ")", ":", "\n", "        ", "wave", "=", "signal", ".", "make_wave", "(", "duration", "=", "duration", ",", "framerate", "=", "framerate", ")", "\n", "spectrum", "=", "wave", ".", "make_spectrum", "(", ")", "\n", "spectrum", ".", "hs", "[", "0", "]", "=", "0", "\n", "return", "spectrum", "\n", "\n", "", "signal", "=", "thinkdsp", ".", "UncorrelatedUniformNoise", "(", ")", "\n", "white", "=", "make_spectrum", "(", "signal", ")", "\n", "\n", "signal", "=", "thinkdsp", ".", "PinkNoise", "(", ")", "\n", "pink", "=", "make_spectrum", "(", "signal", ")", "\n", "\n", "signal", "=", "thinkdsp", ".", "BrownianNoise", "(", ")", "\n", "red", "=", "make_spectrum", "(", "signal", ")", "\n", "\n", "linewidth", "=", "2", "\n", "# colorbrewer2.org 4-class sequential OrRd", "\n", "white", ".", "plot_power", "(", "label", "=", "'white'", ",", "color", "=", "'#fdcc8a'", ",", "linewidth", "=", "linewidth", ")", "\n", "pink", ".", "plot_power", "(", "label", "=", "'pink'", ",", "color", "=", "'#fc8d59'", ",", "linewidth", "=", "linewidth", ")", "\n", "red", ".", "plot_power", "(", "label", "=", "'red'", ",", "color", "=", "'#d7301f'", ",", "linewidth", "=", "linewidth", ")", "\n", "thinkplot", ".", "save", "(", "root", "=", "'noise-triple'", ",", "\n", "xlabel", "=", "'Frequency (Hz)'", ",", "\n", "ylabel", "=", "'Power'", ",", "\n", "xscale", "=", "'log'", ",", "\n", "yscale", "=", "'log'", ",", "\n", "xlim", "=", "[", "1", ",", "red", ".", "fs", "[", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.main": [[128, 146], ["thinkdsp.random_seed", "noise.plot_pink_noise", "thinkdsp.random_seed", "noise.plot_gaussian_noise", "thinkdsp.random_seed", "thinkdsp.UncorrelatedUniformNoise", "noise.process_noise", "thinkdsp.random_seed", "thinkdsp.PinkNoise", "noise.process_noise", "thinkdsp.random_seed", "thinkdsp.BrownianNoise", "noise.process_noise"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.plot_pink_noise", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.plot_gaussian_noise", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.process_noise", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.process_noise", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.noise.process_noise"], ["", "def", "main", "(", ")", ":", "\n", "    ", "thinkdsp", ".", "random_seed", "(", "17", ")", "\n", "plot_pink_noise", "(", ")", "\n", "\n", "thinkdsp", ".", "random_seed", "(", "17", ")", "\n", "plot_gaussian_noise", "(", ")", "\n", "\n", "thinkdsp", ".", "random_seed", "(", "20", ")", "\n", "signal", "=", "thinkdsp", ".", "UncorrelatedUniformNoise", "(", ")", "\n", "process_noise", "(", "signal", ",", "root", "=", "'white'", ")", "\n", "\n", "thinkdsp", ".", "random_seed", "(", "20", ")", "\n", "signal", "=", "thinkdsp", ".", "PinkNoise", "(", "beta", "=", "1.0", ")", "\n", "process_noise", "(", "signal", ",", "root", "=", "'pink'", ")", "\n", "\n", "thinkdsp", ".", "random_seed", "(", "17", ")", "\n", "signal", "=", "thinkdsp", ".", "BrownianNoise", "(", ")", "\n", "process_noise", "(", "signal", ",", "root", "=", "'red'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__init__": [[94, 126], ["os.walk", "os.walk", "f.endswith", "os.path.join", "os.path.isfile", "numpy.asarray", "numpy.asarray", "dataloaders.SSMDataset.labels_list.append", "dataloaders.SSMDataset.labels_sec_list.append", "numpy.load", "dataloaders.SSMDataset.images_list.append", "os.path.isfile", "boundariesdetectioncnn.data.extract_labels_from_txt.ReadDataFromtxt", "boundariesdetectioncnn.data.extract_labels_from_txt.ReadDataFromtxt"], "methods", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.extract_labels_from_txt.ReadDataFromtxt", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.extract_labels_from_txt.ReadDataFromtxt"], ["def", "__init__", "(", "self", ",", "images_path", ",", "labels_path", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "\"\"\"lista de nombre de canciones\"\"\"", "\n", "self", ".", "images_path", "=", "images_path", "\n", "self", ".", "labels_path", "=", "labels_path", "\n", "self", ".", "images_list", "=", "[", "]", "\n", "self", ".", "labels_list", "=", "[", "]", "\n", "self", ".", "labels_sec_list", "=", "[", "]", "\n", "\n", "for", "(", "im_dirpath", ",", "im_dirnames", ",", "im_filenames", ")", "in", "os", ".", "walk", "(", "self", ".", "images_path", ")", ":", "#images files of images path", "\n", "            ", "for", "(", "lab_dirpath", ",", "lab_dirnames", ",", "lab_filenames", ")", "in", "os", ".", "walk", "(", "self", ".", "labels_path", ")", ":", "#labels files fo labels path", "\n", "                ", "for", "f", "in", "im_filenames", ":", "#loop in each images png name files (songs_IDs)", "\n", "                    ", "if", "f", "[", ":", "-", "4", "]", "in", "lab_dirnames", ":", "#if image name is annotated:", "\n", "#images path ", "\n", "                        ", "if", "f", ".", "endswith", "(", "'.npy'", ")", ":", "\n", "                            ", "img_path", "=", "im_dirpath", "+", "f", "\n", "image", "=", "np", ".", "load", "(", "img_path", ")", "#plt.imread si queremos abrir imagen", "\n", "self", ".", "images_list", ".", "append", "(", "image", ")", "\n", "#labels path", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "lab_dirpath", ",", "f", "[", ":", "-", "4", "]", "+", "\"/parsed/\"", ")", "\n", "txt1", "=", "\"textfile1_functions.txt\"", "\n", "txt2", "=", "\"textfile2_functions.txt\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", "+", "txt1", ")", ":", "\n", "                            ", "txt", "=", "\"textfile1_functions.txt\"", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "path", "+", "txt2", ")", ":", "\n", "                            ", "txt", "=", "\"textfile2_functions.txt\"", "\n", "", "label_path", "=", "path", "+", "txt", "\n", "label", "=", "np", ".", "asarray", "(", "ReadDataFromtxt", "(", "path", ",", "txt", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels_sec", "=", "np", ".", "asarray", "(", "ReadDataFromtxt", "(", "path", ",", "txt", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "labels_list", ".", "append", "(", "label", ")", "\n", "self", ".", "labels_sec_list", ".", "append", "(", "labels_sec", ")", "\n", "", "", "", "", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__len__": [[128, 131], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'contar canciones en lista'", "\n", "return", "len", "(", "self", ".", "images_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.SSMDataset.__getitem__": [[132, 145], ["t"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'coger cancion de lista'", "\n", "image", "=", "self", ".", "images_list", "[", "index", "]", "\n", "image", "=", "image", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "label", "=", "self", ".", "labels_list", "[", "index", "]", "\n", "labels_sec", "=", "self", ".", "labels_sec_list", "[", "index", "]", "\n", "# From numpy to Torch Tensors", "\n", "# image = torch.from_numpy(image)", "\n", "# label = torch.from_numpy(label)", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "label", "=", "t", "(", "image", ",", "label", ")", "\n", "", "", "return", "image", ",", "label", ",", "labels_sec", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.gaussian": [[23, 25], ["numpy.exp", "numpy.power"], "function", ["None"], ["def", "gaussian", "(", "x", ",", "mu", ",", "sig", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "-", "np", ".", "power", "(", "(", "x", "-", "mu", ")", "/", "sig", ",", "2.", ")", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.borders": [[26, 53], ["range", "numpy.delete", "numpy.arange", "range", "dataloaders.gaussian", "len", "len", "repeated_label.append", "range"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.gaussian"], ["", "def", "borders", "(", "image", ",", "label", ")", ":", "\n", "    ", "\"\"\"This function transforms labels in sc to gaussians in frames\"\"\"", "\n", "pooling_factor", "=", "6", "\n", "num_frames", "=", "image", ".", "shape", "[", "2", "]", "\n", "repeated_label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "label", ")", "-", "1", ")", ":", "\n", "        ", "if", "label", "[", "i", "]", "==", "label", "[", "i", "+", "1", "]", ":", "\n", "            ", "repeated_label", ".", "append", "(", "i", ")", "\n", "", "", "label", "=", "np", ".", "delete", "(", "label", ",", "repeated_label", ",", "0", ")", "#labels in seconds", "\n", "label", "=", "label", "/", "pooling_factor", "#labels in frames", "\n", "\n", "#Pad frames we padded in images also in labels but in seconds", "\n", "sr", "=", "44100", "\n", "hop_length", "=", "1024", "\n", "window_size", "=", "2048", "\n", "padding_factor", "=", "50", "\n", "label_padded", "=", "[", "label", "[", "i", "]", "+", "padding_factor", "*", "hop_length", "/", "sr", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", "]", "\n", "vector", "=", "np", ".", "arange", "(", "num_frames", ")", "\n", "new_vector", "=", "(", "vector", "*", "hop_length", "+", "window_size", "/", "2", ")", "/", "sr", "\n", "sigma", "=", "0.1", "\n", "gauss_array", "=", "0", "\n", "for", "mu", "in", "(", "label_padded", "[", "1", ":", "]", ")", ":", "\n", "        ", "gauss_array", "+=", "gaussian", "(", "new_vector", ",", "mu", ",", "sigma", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "gauss_array", ")", ")", ":", "\n", "        ", "if", "gauss_array", "[", "i", "]", ">", "1", ":", "\n", "            ", "gauss_array", "[", "i", "]", "=", "1", "\n", "", "", "return", "image", ",", "gauss_array", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.padding_MLS": [[54, 69], ["boundariesdetectioncnn.data.pink_noise.voss", "librosa.feature.melspectrogram", "librosa.power_to_db", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.pink_noise.voss"], ["", "def", "padding_MLS", "(", "image", ",", "label", ")", ":", "\n", "    ", "\"\"\"This function pads 30frames at the begining and end of an image\"\"\"", "\n", "sr", "=", "44100", "\n", "hop_length", "=", "1024", "\n", "window_size", "=", "2048", "\n", "padding_factor", "=", "50", "\n", "y", "=", "pink_noise", ".", "voss", "(", "padding_factor", "*", "hop_length", "-", "1", ")", "\n", "S", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "y", ",", "sr", "=", "sr", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ",", "n_mels", "=", "80", ",", "fmin", "=", "80", ",", "fmax", "=", "16000", ")", "\n", "S_to_dB", "=", "librosa", ".", "power_to_db", "(", "S", ",", "ref", "=", "np", ".", "max", ")", "\n", "pad_image", "=", "S_to_dB", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "\n", "#Pad MLS", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "pad_image", ",", "image", ")", ",", "axis", "=", "-", "1", ")", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "S_padded", ",", "pad_image", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "S_padded", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.padding_SSLM": [[70, 80], ["numpy.full", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "padding_SSLM", "(", "image", ",", "label", ")", ":", "\n", "    ", "\"\"\"This function pads 30frames at the begining and end of an image\"\"\"", "\n", "padding_factor", "=", "50", "\n", "\n", "#Pad SSLM", "\n", "pad_image", "=", "np", ".", "full", "(", "(", "image", ".", "shape", "[", "1", "]", ",", "padding_factor", ")", ",", "1", ")", "\n", "pad_image", "=", "pad_image", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "pad_image", ",", "image", ")", ",", "axis", "=", "-", "1", ")", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "S_padded", ",", "pad_image", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "S_padded", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.normalize_image": [[82, 89], ["numpy.squeeze", "boundariesdetectioncnn.data.normalize_image.normalize", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.normalize_image.normalize"], ["", "def", "normalize_image", "(", "image", ",", "label", ")", ":", "\n", "    ", "\"\"\"This function normalies an image\"\"\"", "\n", "image", "=", "np", ".", "squeeze", "(", "image", ")", "#remove", "\n", "image", "=", "normalize", "(", "image", ")", "\n", "#image = (image-np.min(image))/(np.max(image)-np.min(image))", "\n", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.select_run": [[147, 158], ["None"], "function", ["None"], ["", "", "def", "select_run", "(", "input", ",", "run", ")", ":", "\n", "    ", "if", "run", "==", "'train'", ":", "\n", "        ", "input_path", "=", "configs", ".", "INPUTS", "[", "input", "]", "[", "0", "]", "\n", "\n", "", "if", "run", "==", "'validation'", ":", "\n", "        ", "input_path", "=", "configs", ".", "INPUTS", "[", "input", "]", "[", "1", "]", "\n", "\n", "", "elif", "run", "==", "'test'", ":", "\n", "        ", "input_path", "=", "configs", ".", "INPUTS", "[", "input", "]", "[", "2", "]", "\n", "\n", "", "return", "input_path", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.build_dataloader": [[160, 169], ["dataloaders.select_run", "dataloaders.SSMDataset", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.select_run"], ["", "def", "build_dataloader", "(", "batch_size", ",", "input", ",", "run", ")", ":", "\n", "\n", "    ", "input_path", "=", "select_run", "(", "input", ",", "run", ")", "\n", "labels_path", "=", "configs", ".", "PathsConfig", ".", "LABELS_PATH", "\n", "\n", "dataset", "=", "SSMDataset", "(", "input_path", ",", "labels_path", ",", "transforms", "=", "[", "normalize_image", ",", "padding_MLS", ",", "borders", "]", ")", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "0", ")", "\n", "\n", "return", "dataset", ",", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_chromas_cosine.fourier_transform": [[23, 31], ["librosa.load", "librosa.load", "numpy.abs", "librosa.core.resample", "librosa.core.resample", "librosa.stft", "librosa.stft"], "function", ["None"], ["def", "fourier_transform", "(", "sr_desired", ",", "name_song", ",", "window_size", ",", "hop_length", ")", ":", "\n", "    ", "\"This function calculates the mel spectrogram in dB with Librosa library\"", "\n", "y", ",", "sr", "=", "librosa", ".", "load", "(", "name_song", ",", "sr", "=", "None", ")", "\n", "if", "sr", "!=", "sr_desired", ":", "\n", "        ", "y", "=", "librosa", ".", "core", ".", "resample", "(", "y", ",", "sr", ",", "sr_desired", ")", "\n", "sr", "=", "sr_desired", "\n", "", "stft", "=", "np", ".", "abs", "(", "librosa", ".", "stft", "(", "y", "=", "y", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ")", ")", "\n", "return", "stft", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_chromas_cosine.max_pooling": [[32, 35], ["skimage.measure.block_reduce"], "function", ["None"], ["", "def", "max_pooling", "(", "stft", ",", "pooling_factor", ")", ":", "\n", "    ", "x_prime", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "stft", ",", "(", "1", ",", "pooling_factor", ")", ",", "np", ".", "max", ")", "\n", "return", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_chromas_cosine.sslm": [[37, 92], ["numpy.full", "numpy.concatenate", "skimage.measure.block_reduce", "librosa.feature.chroma_stft", "librosa.feature.chroma_stft", "numpy.concatenate", "numpy.zeros", "range", "numpy.zeros", "range", "scipy.special.expit", "numpy.transpose", "skimage.measure.block_reduce", "range", "numpy.roll", "range", "range", "range", "range", "numpy.quantile", "numpy.isnan", "numpy.concatenate", "scipy.spatial.distance.cosine"], "function", ["None"], ["", "def", "sslm", "(", "stft", ",", "sr_desired", ",", "pooling_factor", ",", "lag", ")", ":", "\n", "\n", "    ", "padding_factor", "=", "lag", "\n", "\n", "\"\"\"\"This part pads a mel spectrogram gived the spectrogram a lag parameter \n    to compare the first rows with the last ones and make the matrix circular\"\"\"", "\n", "pad", "=", "np", ".", "full", "(", "(", "stft", ".", "shape", "[", "0", "]", ",", "padding_factor", ")", ",", "-", "70", ")", "#matrix of 80x30frames of -70dB corresponding to padding", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "pad", ",", "stft", ")", ",", "axis", "=", "1", ")", "#padding 30 frames with noise at -70dB at the beginning", "\n", "\n", "\"\"\"This part max-poolend the spectrogram in time axis by a factor of p\"\"\"", "\n", "x_prime", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "S_padded", ",", "(", "1", ",", "p", ")", ",", "np", ".", "max", ")", "#Mel Spectrogram downsampled", "\n", "\n", "PCPs", "=", "librosa", ".", "feature", ".", "chroma_stft", "(", "S", "=", "x_prime", ",", "sr", "=", "sr_desired", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ")", "\n", "PCPs", "=", "PCPs", "[", "1", ":", ",", ":", "]", "\n", "\n", "#Bagging frames", "\n", "m", "=", "2", "#baggin parameter in frames", "\n", "x", "=", "[", "np", ".", "roll", "(", "PCPs", ",", "n", ",", "axis", "=", "1", ")", "for", "n", "in", "range", "(", "m", ")", "]", "\n", "x_hat", "=", "np", ".", "concatenate", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "#Cosine distance calculation: D[N/p,L/p] matrix", "\n", "distances", "=", "np", ".", "zeros", "(", "(", "x_hat", ".", "shape", "[", "1", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "x_hat", ".", "shape", "[", "1", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "if", "i", "-", "(", "l", "+", "1", ")", "<", "0", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "elif", "i", "-", "(", "l", "+", "1", ")", "<", "padding_factor", "//", "p", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "else", ":", "\n", "                ", "cosine_dist", "=", "distance", ".", "cosine", "(", "x_hat", "[", ":", ",", "i", "]", ",", "x_hat", "[", ":", ",", "i", "-", "(", "l", "+", "1", ")", "]", ")", "#cosine distance between columns i and i-L", "\n", "", "distances", "[", "i", ",", "l", "]", "=", "cosine_dist", "\n", "\n", "#Threshold epsilon[N/p,L/p] calculation", "\n", "", "", "kappa", "=", "0.1", "\n", "epsilon", "=", "np", ".", "zeros", "(", "(", "distances", ".", "shape", "[", "0", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "padding_factor", "//", "p", ",", "distances", ".", "shape", "[", "0", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "epsilon", "[", "i", ",", "l", "]", "=", "np", ".", "quantile", "(", "np", ".", "concatenate", "(", "(", "distances", "[", "i", "-", "l", ",", ":", "]", ",", "distances", "[", "i", ",", ":", "]", ")", ")", ",", "kappa", ")", "\n", "\n", "", "", "distances", "=", "distances", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "epsilon", "=", "epsilon", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "x_prime", "=", "x_prime", "[", ":", ",", "padding_factor", "//", "p", ":", "]", "\n", "\n", "#Self Similarity Lag Matrix", "\n", "sslm", "=", "scipy", ".", "special", ".", "expit", "(", "1", "-", "distances", "/", "epsilon", ")", "#aplicaci\u00f3n de la sigmoide", "\n", "sslm", "=", "np", ".", "transpose", "(", "sslm", ")", "\n", "sslm", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "sslm", ",", "(", "1", ",", "3", ")", ",", "np", ".", "max", ")", "\n", "\n", "#Check if SSLM has nans and if it has them, substitute them by 0", "\n", "for", "i", "in", "range", "(", "sslm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sslm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "sslm", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "sslm", "[", "i", ",", "j", "]", "=", "0", "\n", "\n", "", "", "", "return", "sslm", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.normalize_image.normalize": [[3, 9], ["numpy.zeros", "range", "numpy.std", "numpy.mean"], "function", ["None"], ["def", "normalize", "(", "array", ")", ":", "\n", "    ", "\"\"\"This function normalizes a matrix along x axis (frequency)\"\"\"", "\n", "normalized", "=", "np", ".", "zeros", "(", "(", "array", ".", "shape", "[", "0", "]", ",", "array", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "array", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "normalized", "[", "i", ",", ":", "]", "=", "(", "array", "[", "i", ",", ":", "]", "-", "np", ".", "mean", "(", "array", "[", "i", ",", ":", "]", ")", ")", "/", "np", ".", "std", "(", "array", "[", "i", ",", ":", "]", ")", "\n", "", "return", "normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_chromas_euclidean.mel_spectrogram": [[23, 33], ["librosa.load", "librosa.load", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "librosa.power_to_db", "librosa.power_to_db", "librosa.core.resample", "librosa.core.resample"], "function", ["None"], ["def", "mel_spectrogram", "(", "sr_desired", ",", "name_song", ",", "window_size", ",", "hop_length", ")", ":", "\n", "    ", "\"This function calculates the mel spectrogram in dB with Librosa library\"", "\n", "y", ",", "sr", "=", "librosa", ".", "load", "(", "name_song", ",", "sr", "=", "None", ")", "\n", "if", "sr", "!=", "sr_desired", ":", "\n", "        ", "y", "=", "librosa", ".", "core", ".", "resample", "(", "y", ",", "sr", ",", "sr_desired", ")", "\n", "sr", "=", "sr_desired", "\n", "\n", "", "S", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "y", ",", "sr", "=", "sr", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ",", "n_mels", "=", "80", ",", "fmin", "=", "80", ",", "fmax", "=", "16000", ")", "\n", "S_to_dB", "=", "librosa", ".", "power_to_db", "(", "S", ",", "ref", "=", "np", ".", "max", ")", "#convert S in dB", "\n", "return", "S_to_dB", "#S_to_dB is the spectrogam in dB ", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_chromas_euclidean.max_pooling": [[34, 37], ["skimage.measure.block_reduce"], "function", ["None"], ["", "def", "max_pooling", "(", "spectrogram_padded", ",", "pooling_factor", ")", ":", "\n", "    ", "x_prime", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "spectrogram_padded", ",", "(", "1", ",", "pooling_factor", ")", ",", "np", ".", "max", ")", "\n", "return", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_chromas_euclidean.sslm": [[39, 98], ["numpy.full", "numpy.concatenate", "SSLagM_all_songs_chromas_euclidean.max_pooling", "librosa.feature.chroma_stft", "librosa.feature.chroma_stft", "numpy.concatenate", "numpy.zeros", "range", "numpy.zeros", "range", "scipy.special.expit", "numpy.transpose", "skimage.measure.block_reduce", "range", "numpy.roll", "range", "range", "range", "range", "numpy.quantile", "numpy.isnan", "numpy.concatenate", "scipy.spatial.distance.euclidean", "float"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.max_pooling"], ["", "def", "sslm", "(", "spectrogram", ",", "pooling_factor", ",", "lag", ")", ":", "\n", "\n", "    ", "padding_factor", "=", "lag", "\n", "\"\"\"\"This part pads a mel spectrogram gived the spectrogram a lag parameter \n    to compare the first rows with the last ones and make the matrix circular\"\"\"", "\n", "pad", "=", "np", ".", "full", "(", "(", "spectrogram", ".", "shape", "[", "0", "]", ",", "padding_factor", ")", ",", "-", "70", ")", "#matrix of 80x30frames of -70dB corresponding to padding", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "pad", ",", "spectrogram", ")", ",", "axis", "=", "1", ")", "#padding 30 frames with noise at -70dB at the beginning", "\n", "\n", "\"\"\"This part max-poolend the spectrogram in time axis by a factor of p\"\"\"", "\n", "x_prime", "=", "max_pooling", "(", "S_padded", ",", "pooling_factor", ")", "\n", "\n", "\"\"\"\"This part calculates a circular Self Similarity Lag Matrix given\n    the mel spectrogram padded and max-pooled\"\"\"", "\n", "PCPs", "=", "librosa", ".", "feature", ".", "chroma_stft", "(", "S", "=", "x_prime", ",", "sr", "=", "sr", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ")", "\n", "PCPs", "=", "PCPs", "[", "1", ":", ",", ":", "]", "\n", "\n", "#Bagging frames", "\n", "m", "=", "2", "#baggin parameter in frames", "\n", "x", "=", "[", "np", ".", "roll", "(", "PCPs", ",", "n", ",", "axis", "=", "1", ")", "for", "n", "in", "range", "(", "m", ")", "]", "\n", "x_hat", "=", "np", ".", "concatenate", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "#Cosine distance calculation: D[N/p,L/p] matrix", "\n", "distances", "=", "np", ".", "zeros", "(", "(", "x_hat", ".", "shape", "[", "1", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "x_hat", ".", "shape", "[", "1", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "if", "i", "-", "(", "l", "+", "1", ")", "<", "0", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "elif", "i", "-", "(", "l", "+", "1", ")", "<", "padding_factor", "//", "p", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "else", ":", "\n", "                ", "cosine_dist", "=", "distance", ".", "euclidean", "(", "x_hat", "[", ":", ",", "i", "]", ",", "x_hat", "[", ":", ",", "i", "-", "(", "l", "+", "1", ")", "]", ")", "#cosine distance between columns i and i-L", "\n", "if", "cosine_dist", "==", "float", "(", "'nan'", ")", ":", "\n", "                    ", "cosine_dist", "=", "0", "\n", "", "", "distances", "[", "i", ",", "l", "]", "=", "cosine_dist", "\n", "\n", "#Threshold epsilon[N/p,L/p] calculation", "\n", "", "", "kappa", "=", "0.1", "\n", "epsilon", "=", "np", ".", "zeros", "(", "(", "distances", ".", "shape", "[", "0", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "padding_factor", "//", "p", ",", "distances", ".", "shape", "[", "0", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "epsilon", "[", "i", ",", "l", "]", "=", "np", ".", "quantile", "(", "np", ".", "concatenate", "(", "(", "distances", "[", "i", "-", "l", ",", ":", "]", ",", "distances", "[", "i", ",", ":", "]", ")", ")", ",", "kappa", ")", "\n", "\n", "#We remove the padding done before ", "\n", "", "", "distances", "=", "distances", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "epsilon", "=", "epsilon", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "x_prime", "=", "x_prime", "[", ":", ",", "padding_factor", "//", "p", ":", "]", "\n", "\n", "#Self Similarity Lag Matrix", "\n", "sslm", "=", "scipy", ".", "special", ".", "expit", "(", "1", "-", "distances", "/", "epsilon", ")", "#aplicaci\u00f3n de la sigmoide", "\n", "sslm", "=", "np", ".", "transpose", "(", "sslm", ")", "\n", "sslm", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "sslm", ",", "(", "1", ",", "3", ")", ",", "np", ".", "max", ")", "\n", "\n", "#Check if SSLM has nans and if it has them, substitute them by 0", "\n", "for", "i", "in", "range", "(", "sslm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sslm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "sslm", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "sslm", "[", "i", ",", "j", "]", "=", "0", "\n", "\n", "", "", "", "return", "sslm", ",", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_1_song_mfccs.median_filter": [[24, 29], ["range", "scipy.ndimage.filters.median_filter"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_1_song_mfccs.median_filter"], ["def", "median_filter", "(", "X", ",", "M", "=", "8", ")", ":", "\n", "    ", "\"\"\"Median filter along the first axis of the feature matrix X.\"\"\"", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "X", "[", ":", ",", "i", "]", "=", "filters", ".", "median_filter", "(", "X", "[", ":", ",", "i", "]", ",", "size", "=", "M", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_1_song_mfccs.compute_gaussian_krnl": [[31, 38], ["scipy.signal.gaussian", "numpy.dot", "signal.gaussian.reshape", "signal.gaussian.reshape"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.dataloaders.gaussian"], ["", "def", "compute_gaussian_krnl", "(", "M", ")", ":", "\n", "    ", "\"\"\"Creates a gaussian kernel following Foote's paper.\"\"\"", "\n", "g", "=", "signal", ".", "gaussian", "(", "M", ",", "M", "//", "3.", ",", "sym", "=", "True", ")", "\n", "G", "=", "np", ".", "dot", "(", "g", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "g", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "G", "[", "M", "//", "2", ":", ",", ":", "M", "//", "2", "]", "=", "-", "G", "[", "M", "//", "2", ":", ",", ":", "M", "//", "2", "]", "\n", "G", "[", ":", "M", "//", "2", ",", "M", "//", "2", ":", "]", "=", "-", "G", "[", ":", "M", "//", "2", ",", "M", "//", "2", ":", "]", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_1_song_mfccs.compute_ssm": [[40, 50], ["scipy.spatial.distance.pdist", "scipy.spatial.distance.squareform", "range", "distance.squareform.max", "range", "numpy.isnan"], "function", ["None"], ["", "def", "compute_ssm", "(", "X", ",", "metric", "=", "\"cosine\"", ")", ":", "\n", "    ", "\"\"\"Computes the self-similarity matrix of X.\"\"\"", "\n", "D", "=", "distance", ".", "pdist", "(", "X", ",", "metric", "=", "metric", ")", "\n", "D", "=", "distance", ".", "squareform", "(", "D", ")", "\n", "for", "i", "in", "range", "(", "D", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "D", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "D", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "D", "[", "i", ",", "j", "]", "=", "0", "\n", "", "", "", "D", "/=", "D", ".", "max", "(", ")", "\n", "return", "1", "-", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.extract_labels_from_txt.ReadNumbersFromLine": [[11, 20], ["i.isalpha", "n.isspace"], "function", ["None"], ["def", "ReadNumbersFromLine", "(", "linea", ")", ":", "\n", "    ", "linea", "=", "''", ".", "join", "(", "i", "for", "i", "in", "linea", "if", "not", "i", ".", "isalpha", "(", ")", ")", "\n", "sinbarras", "=", "''", ".", "join", "(", "j", "for", "j", "in", "linea", "if", "not", "j", "==", "'/'", ")", "\n", "sinespacios", "=", "''", ".", "join", "(", "n", "for", "n", "in", "sinbarras", "if", "not", "n", ".", "isspace", "(", ")", ")", "\n", "sinnombres", "=", "''", ".", "join", "(", "k", "for", "k", "in", "sinespacios", "if", "not", "k", "==", "'_'", ")", "\n", "numeroslinea", "=", "''", ".", "join", "(", "p", "for", "p", "in", "sinnombres", "if", "not", "p", "==", "'-'", ")", "\n", "n", "=", "''", ".", "join", "(", "m", "for", "m", "in", "numeroslinea", "if", "not", "m", "==", "\"'\"", ")", "\n", "numeros", "=", "''", ".", "join", "(", "p", "for", "p", "in", "n", "if", "not", "p", "==", "'&'", ")", "\n", "return", "numeros", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.extract_labels_from_txt.ReadDataFromtxt": [[21, 29], ["os.listdir", "open.close", "open", "numbers.append", "extract_labels_from_txt.ReadNumbersFromLine"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.extract_labels_from_txt.ReadNumbersFromLine"], ["", "def", "ReadDataFromtxt", "(", "directorio", ",", "archivo", ")", ":", "\n", "    ", "numbers", "=", "[", "]", "\n", "for", "path", "in", "listdir", "(", "directorio", ")", ":", "\n", "        ", "file", "=", "open", "(", "directorio", "+", "archivo", ",", "\"r\"", ")", "\n", "", "for", "line", "in", "file", ":", "\n", "        ", "numbers", ".", "append", "(", "ReadNumbersFromLine", "(", "line", ")", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "numbers", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.pink_noise.voss": [[8, 33], ["numpy.empty", "np.empty.fill", "numpy.random.random", "numpy.random.random", "numpy.random.geometric", "numpy.random.randint", "numpy.random.random", "pandas.DataFrame", "pd.DataFrame.fillna", "pd.DataFrame.sum"], "function", ["None"], ["def", "voss", "(", "nrows", ",", "ncols", "=", "16", ")", ":", "\n", "    ", "\"\"\"Generates pink noise using the Voss-McCartney algorithm.\n    \n    nrows: number of values to generate\n    rcols: number of random sources to add\n    \n    returns: NumPy array\n    \"\"\"", "\n", "array", "=", "np", ".", "empty", "(", "(", "nrows", ",", "ncols", ")", ")", "\n", "array", ".", "fill", "(", "np", ".", "nan", ")", "\n", "array", "[", "0", ",", ":", "]", "=", "np", ".", "random", ".", "random", "(", "ncols", ")", "\n", "array", "[", ":", ",", "0", "]", "=", "np", ".", "random", ".", "random", "(", "nrows", ")", "\n", "\n", "# the total number of changes is nrows", "\n", "n", "=", "nrows", "\n", "cols", "=", "np", ".", "random", ".", "geometric", "(", "0.5", ",", "n", ")", "\n", "cols", "[", "cols", ">=", "ncols", "]", "=", "0", "\n", "rows", "=", "np", ".", "random", ".", "randint", "(", "nrows", ",", "size", "=", "n", ")", "\n", "array", "[", "rows", ",", "cols", "]", "=", "np", ".", "random", ".", "random", "(", "n", ")", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "array", ")", "\n", "df", ".", "fillna", "(", "method", "=", "'ffill'", ",", "axis", "=", "0", ",", "inplace", "=", "True", ")", "\n", "total", "=", "df", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "return", "total", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_mfccs_cosine.mel_spectrogram": [[23, 33], ["librosa.load", "librosa.load", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "librosa.power_to_db", "librosa.power_to_db", "librosa.core.resample", "librosa.core.resample"], "function", ["None"], ["def", "mel_spectrogram", "(", "sr_desired", ",", "name_song", ",", "window_size", ",", "hop_length", ")", ":", "\n", "    ", "\"This function calculates the mel spectrogram in dB with Librosa library\"", "\n", "y", ",", "sr", "=", "librosa", ".", "load", "(", "name_song", ",", "sr", "=", "None", ")", "\n", "if", "sr", "!=", "sr_desired", ":", "\n", "        ", "y", "=", "librosa", ".", "core", ".", "resample", "(", "y", ",", "sr", ",", "sr_desired", ")", "\n", "sr", "=", "sr_desired", "\n", "\n", "", "S", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "y", ",", "sr", "=", "sr", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ",", "n_mels", "=", "80", ",", "fmin", "=", "80", ",", "fmax", "=", "16000", ")", "\n", "S_to_dB", "=", "librosa", ".", "power_to_db", "(", "S", ",", "ref", "=", "np", ".", "max", ")", "#convert S in dB", "\n", "return", "S_to_dB", "#S_to_dB is the spectrogam in dB ", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_mfccs_cosine.max_pooling": [[34, 37], ["skimage.measure.block_reduce"], "function", ["None"], ["", "def", "max_pooling", "(", "spectrogram_padded", ",", "pooling_factor", ")", ":", "\n", "    ", "x_prime", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "spectrogram_padded", ",", "(", "1", ",", "pooling_factor", ")", ",", "np", ".", "max", ")", "\n", "return", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSLagM_all_songs_mfccs_cosine.sslm": [[39, 99], ["numpy.full", "numpy.concatenate", "SSLagM_all_songs_mfccs_cosine.max_pooling", "scipy.fftpack.dct", "numpy.concatenate", "numpy.zeros", "range", "numpy.zeros", "range", "scipy.special.expit", "numpy.transpose", "skimage.measure.block_reduce", "range", "numpy.roll", "range", "range", "range", "range", "numpy.quantile", "numpy.isnan", "numpy.concatenate", "scipy.spatial.distance.cosine", "float"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.max_pooling"], ["", "def", "sslm", "(", "spectrogram", ",", "pooling_factor", ",", "lag", ")", ":", "\n", "\n", "    ", "padding_factor", "=", "lag", "\n", "\"\"\"\"This part pads a mel spectrogram gived the spectrogram a lag parameter \n    to compare the first rows with the last ones and make the matrix circular\"\"\"", "\n", "pad", "=", "np", ".", "full", "(", "(", "spectrogram", ".", "shape", "[", "0", "]", ",", "padding_factor", ")", ",", "-", "70", ")", "#matrix of 80x30frames of -70dB corresponding to padding", "\n", "S_padded", "=", "np", ".", "concatenate", "(", "(", "pad", ",", "spectrogram", ")", ",", "axis", "=", "1", ")", "#padding 30 frames with noise at -70dB at the beginning", "\n", "\n", "\"\"\"This part max-poolend the spectrogram in time axis by a factor of p\"\"\"", "\n", "x_prime", "=", "max_pooling", "(", "S_padded", ",", "pooling_factor", ")", "\n", "\n", "\"\"\"\"This part calculates a circular Self Similarity Lag Matrix given\n    the mel spectrogram padded and max-pooled\"\"\"", "\n", "#MFCCs calculation from DCT-Type II", "\n", "MFCCs", "=", "scipy", ".", "fftpack", ".", "dct", "(", "x_prime", ",", "axis", "=", "0", ",", "type", "=", "2", ",", "norm", "=", "'ortho'", ")", "\n", "MFCCs", "=", "MFCCs", "[", "1", ":", ",", ":", "]", "#0 componen ommited", "\n", "\n", "#Bagging frames", "\n", "m", "=", "2", "#baggin parameter in frames", "\n", "x", "=", "[", "np", ".", "roll", "(", "MFCCs", ",", "n", ",", "axis", "=", "1", ")", "for", "n", "in", "range", "(", "m", ")", "]", "\n", "x_hat", "=", "np", ".", "concatenate", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "#Cosine distance calculation: D[N/p,L/p] matrix", "\n", "distances", "=", "np", ".", "zeros", "(", "(", "x_hat", ".", "shape", "[", "1", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "x_hat", ".", "shape", "[", "1", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "if", "i", "-", "(", "l", "+", "1", ")", "<", "0", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "elif", "i", "-", "(", "l", "+", "1", ")", "<", "padding_factor", "//", "p", ":", "\n", "                ", "cosine_dist", "=", "1", "\n", "", "else", ":", "\n", "                ", "cosine_dist", "=", "distance", ".", "cosine", "(", "x_hat", "[", ":", ",", "i", "]", ",", "x_hat", "[", ":", ",", "i", "-", "(", "l", "+", "1", ")", "]", ")", "#cosine distance between columns i and i-L", "\n", "if", "cosine_dist", "==", "float", "(", "'nan'", ")", ":", "\n", "                    ", "cosine_dist", "=", "0", "\n", "", "", "distances", "[", "i", ",", "l", "]", "=", "cosine_dist", "\n", "\n", "#Threshold epsilon[N/p,L/p] calculation", "\n", "", "", "kappa", "=", "0.1", "\n", "epsilon", "=", "np", ".", "zeros", "(", "(", "distances", ".", "shape", "[", "0", "]", ",", "padding_factor", "//", "p", ")", ")", "#D has as dimensions N/p and L/p", "\n", "for", "i", "in", "range", "(", "padding_factor", "//", "p", ",", "distances", ".", "shape", "[", "0", "]", ")", ":", "#iteration in columns of x_hat", "\n", "        ", "for", "l", "in", "range", "(", "padding_factor", "//", "p", ")", ":", "\n", "            ", "epsilon", "[", "i", ",", "l", "]", "=", "np", ".", "quantile", "(", "np", ".", "concatenate", "(", "(", "distances", "[", "i", "-", "l", ",", ":", "]", ",", "distances", "[", "i", ",", ":", "]", ")", ")", ",", "kappa", ")", "\n", "\n", "#We remove the padding done before ", "\n", "", "", "distances", "=", "distances", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "epsilon", "=", "epsilon", "[", "padding_factor", "//", "p", ":", ",", ":", "]", "\n", "x_prime", "=", "x_prime", "[", ":", ",", "padding_factor", "//", "p", ":", "]", "\n", "\n", "#Self Similarity Lag Matrix", "\n", "sslm", "=", "scipy", ".", "special", ".", "expit", "(", "1", "-", "distances", "/", "epsilon", ")", "#aplicaci\u00f3n de la sigmoide", "\n", "sslm", "=", "np", ".", "transpose", "(", "sslm", ")", "\n", "sslm", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "sslm", ",", "(", "1", ",", "3", ")", ",", "np", ".", "max", ")", "\n", "\n", "#Check if SSLM has nans and if it has them, substitute them by 0", "\n", "for", "i", "in", "range", "(", "sslm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sslm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "sslm", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "sslm", "[", "i", ",", "j", "]", "=", "0", "\n", "\n", "", "", "", "return", "sslm", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.compute_ssm": [[21, 31], ["scipy.spatial.distance.pdist", "scipy.spatial.distance.squareform", "range", "distance.squareform.max", "range", "numpy.isnan"], "function", ["None"], ["def", "compute_ssm", "(", "X", ",", "metric", "=", "\"cosine\"", ")", ":", "\n", "    ", "\"\"\"Computes the self-similarity matrix of X.\"\"\"", "\n", "D", "=", "distance", ".", "pdist", "(", "X", ",", "metric", "=", "metric", ")", "\n", "D", "=", "distance", ".", "squareform", "(", "D", ")", "\n", "for", "i", "in", "range", "(", "D", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "D", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "D", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "D", "[", "i", ",", "j", "]", "=", "0", "\n", "", "", "", "D", "/=", "D", ".", "max", "(", ")", "\n", "return", "1", "-", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.mel_spectrogram": [[33, 43], ["librosa.load", "librosa.load", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "librosa.power_to_db", "librosa.power_to_db", "librosa.core.resample", "librosa.core.resample"], "function", ["None"], ["def", "mel_spectrogram", "(", "sr_desired", ",", "name_song", ",", "window_size", ",", "hop_length", ")", ":", "\n", "    ", "\"This function calculates the mel spectrogram in dB with Librosa library\"", "\n", "y", ",", "sr", "=", "librosa", ".", "load", "(", "name_song", ",", "sr", "=", "None", ")", "\n", "if", "sr", "!=", "sr_desired", ":", "\n", "        ", "y", "=", "librosa", ".", "core", ".", "resample", "(", "y", ",", "sr", ",", "sr_desired", ")", "\n", "sr", "=", "sr_desired", "\n", "\n", "", "S", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "y", ",", "sr", "=", "sr", ",", "n_fft", "=", "window_size", ",", "hop_length", "=", "hop_length", ",", "n_mels", "=", "80", ",", "fmin", "=", "80", ",", "fmax", "=", "16000", ")", "\n", "S_to_dB", "=", "librosa", ".", "power_to_db", "(", "S", ",", "ref", "=", "np", ".", "max", ")", "#convert S in dB", "\n", "return", "S_to_dB", "#S_to_dB is the spectrogam in dB ", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.max_pooling": [[44, 47], ["skimage.measure.block_reduce"], "function", ["None"], ["", "def", "max_pooling", "(", "spectrogram_padded", ",", "pooling_factor", ")", ":", "\n", "    ", "x_prime", "=", "skimage", ".", "measure", ".", "block_reduce", "(", "spectrogram_padded", ",", "(", "1", ",", "pooling_factor", ")", ",", "np", ".", "max", ")", "\n", "return", "x_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.ssm": [[49, 75], ["SSM_all_songs_mfccs.max_pooling", "scipy.fftpack.dct", "numpy.concatenate", "numpy.transpose", "SSM_all_songs_mfccs.compute_ssm", "range", "numpy.roll", "range", "range", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.max_pooling", "home.repos.pwc.inspect_result.carlosholivan_music-boundaries-detection-cnn.data.SSM_all_songs_mfccs.compute_ssm"], ["", "def", "ssm", "(", "spectrogram", ",", "pooling_factor", ")", ":", "\n", "\n", "    ", "\"\"\"This part max-poolend the spectrogram in time axis by a factor of p\"\"\"", "\n", "x_prime", "=", "max_pooling", "(", "spectrogram", ",", "pooling_factor", ")", "\n", "\n", "\"\"\"\"This part calculates a circular Self Similarity Matrix given\n    the mel spectrogram padded and max-pooled\"\"\"", "\n", "#MFCCs calculation from DCT-Type II", "\n", "MFCCs", "=", "scipy", ".", "fftpack", ".", "dct", "(", "x_prime", ",", "axis", "=", "0", ",", "type", "=", "2", ",", "norm", "=", "'ortho'", ")", "\n", "MFCCs", "=", "MFCCs", "[", "1", ":", ",", ":", "]", "#0 componen ommited", "\n", "\n", "#Bagging frames", "\n", "m", "=", "2", "#baggin parameter in frames", "\n", "x", "=", "[", "np", ".", "roll", "(", "MFCCs", ",", "n", ",", "axis", "=", "1", ")", "for", "n", "in", "range", "(", "m", ")", "]", "\n", "x_hat", "=", "np", ".", "concatenate", "(", "x", ",", "axis", "=", "0", ")", "\n", "x_hat", "=", "np", ".", "transpose", "(", "x_hat", ")", "\n", "\n", "ssm", "=", "compute_ssm", "(", "x_hat", ")", "\n", "\n", "#Check if SSLM has nans and if it has them, substitute them by 0", "\n", "for", "i", "in", "range", "(", "ssm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "ssm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "ssm", "[", "i", ",", "j", "]", ")", ":", "\n", "                ", "ssm", "[", "i", ",", "j", "]", "=", "0", "\n", "\n", "", "", "", "return", "ssm", "\n", "\n"]]}