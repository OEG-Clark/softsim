{"home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.Flatten.forward": [[12, 14], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.VGG16.__init__": [[16, 25], ["torch.Module.__init__", "torchvision.models.vgg16_bn", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "classify.VGG16.bn.bias.requires_grad_", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "feature", "=", "model", ".", "features", "\n", "self", ".", "feat_dim", "=", "512", "*", "2", "*", "2", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "feat_dim", ")", "\n", "self", ".", "bn", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.VGG16.forward": [[26, 33], ["classify.VGG16.feature", "classify.VGG16.view", "classify.VGG16.bn", "classify.VGG16.fc_layer", "classify.VGG16.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature", "=", "self", ".", "feature", "(", "x", ")", "\n", "feature", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feature", "=", "self", ".", "bn", "(", "feature", ")", "\n", "res", "=", "self", ".", "fc_layer", "(", "feature", ")", "\n", "\n", "return", "[", "feature", ",", "res", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.VGG16.predict": [[34, 42], ["classify.VGG16.feature", "classify.VGG16.view", "classify.VGG16.bn", "classify.VGG16.fc_layer", "torch.softmax", "torch.softmax", "torch.softmax", "classify.VGG16.size"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature", "=", "self", ".", "feature", "(", "x", ")", "\n", "feature", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feature", "=", "self", ".", "bn", "(", "feature", ")", "\n", "res", "=", "self", ".", "fc_layer", "(", "feature", ")", "\n", "out", "=", "F", ".", "softmax", "(", "res", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.CrossEntropyLoss.forward": [[44, 52], ["out.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "gt.float", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "out.float"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "out", ",", "gt", ",", "mode", "=", "\"reg\"", ")", ":", "\n", "        ", "bs", "=", "out", ".", "size", "(", "0", ")", "\n", "loss", "=", "-", "torch", ".", "mul", "(", "gt", ".", "float", "(", ")", ",", "torch", ".", "log", "(", "out", ".", "float", "(", ")", "+", "1e-7", ")", ")", "\n", "if", "mode", "==", "\"dp\"", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "bs", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.BinaryLoss.forward": [[54, 59], ["out.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "out.float", "out.float"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "out", ",", "gt", ")", ":", "\n", "        ", "bs", "=", "out", ".", "size", "(", "0", ")", "\n", "loss", "=", "-", "(", "gt", "*", "torch", ".", "log", "(", "out", ".", "float", "(", ")", "+", "1e-7", ")", "+", "(", "1", "-", "gt", ")", "*", "torch", ".", "log", "(", "1", "-", "out", ".", "float", "(", ")", "+", "1e-7", ")", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.FaceNet.__init__": [[81, 87], ["torch.Module.__init__", "evolve.IR_50_112", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_50_112"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "FaceNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "evolve", ".", "IR_50_112", "(", "(", "112", ",", "112", ")", ")", "\n", "self", ".", "feat_dim", "=", "512", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.FaceNet.predict": [[88, 93], ["classify.FaceNet.feature", "feat.view.view.view", "classify.FaceNet.fc_layer", "feat.view.view.size"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feature", "(", "x", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc_layer", "(", "feat", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.FaceNet.forward": [[94, 99], ["classify.FaceNet.feature", "feat.view.view.view", "classify.FaceNet.fc_layer", "feat.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feature", "(", "x", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc_layer", "(", "feat", ")", "\n", "return", "[", "out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.IR152.__init__": [[101, 113], ["torch.Module.__init__", "evolve.IR_152_64", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "classify.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_152_64"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "IR152", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "evolve", ".", "IR_152_64", "(", "(", "64", ",", "64", ")", ")", "\n", "self", ".", "feat_dim", "=", "512", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.IR152.forward": [[114, 123], ["classify.IR152.feature", "classify.IR152.output_layer", "feat.view.view.view", "classify.IR152.fc_layer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "iden.view.view.view", "feat.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feature", "(", "x", ")", "\n", "feat", "=", "self", ".", "output_layer", "(", "feat", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "res", "=", "self", ".", "fc_layer", "(", "feat", ")", "\n", "out", "=", "F", ".", "softmax", "(", "res", ",", "dim", "=", "1", ")", "\n", "__", ",", "iden", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "1", ")", "\n", "iden", "=", "iden", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "feat", ",", "out", ",", "iden", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.IR50.__init__": [[125, 140], ["torch.Module.__init__", "evolve.IR_50_64", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "classify.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_50_64"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "IR50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "evolve", ".", "IR_50_64", "(", "(", "64", ",", "64", ")", ")", "\n", "self", ".", "feat_dim", "=", "512", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "self", ".", "st_layer", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "k", "*", "2", ")", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "k", ",", "self", ".", "n_classes", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.classify.IR50.forward": [[141, 155], ["classify.IR50.output_layer", "feature.view.view.view", "classify.IR50.st_layer", "torch.softplus", "torch.softplus", "torch.softplus", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "classify.IR50.fc_layer", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "iden.view.view.view", "classify.IR50.feature", "feature.view.view.size", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.softplus.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature", "=", "self", ".", "output_layer", "(", "self", ".", "feature", "(", "x", ")", ")", "\n", "feature", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "statis", "=", "self", ".", "st_layer", "(", "feature", ")", "\n", "mu", ",", "std", "=", "statis", "[", ":", ",", ":", "self", ".", "k", "]", ",", "statis", "[", ":", ",", "self", ".", "k", ":", "]", "\n", "\n", "std", "=", "F", ".", "softplus", "(", "std", "-", "5", ",", "beta", "=", "1", ")", "\n", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ".", "cuda", "(", ")", "\n", "res", "=", "mu", "+", "std", "*", "eps", "\n", "out", "=", "self", ".", "fc_layer", "(", "res", ")", "\n", "__", ",", "iden", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "1", ")", "\n", "iden", "=", "iden", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "feature", ",", "out", ",", "iden", ",", "mu", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Flatten.forward": [[12, 14], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.SEModule.__init__": [[24, 37], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "\n", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "\n", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.SEModule.forward": [[38, 47], ["evolve.SEModule.avg_pool", "evolve.SEModule.fc1", "evolve.SEModule.relu", "evolve.SEModule.fc2", "evolve.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.bottleneck_IR.__init__": [[50, 61], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.bottleneck_IR.forward": [[62, 67], ["evolve.bottleneck_IR.shortcut_layer", "evolve.bottleneck_IR.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.bottleneck_IR_SE.__init__": [[70, 85], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "evolve.SEModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.bottleneck_IR_SE.forward": [[87, 92], ["evolve.bottleneck_IR_SE.shortcut_layer", "evolve.bottleneck_IR_SE.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Backbone64.__init__": [[130, 154], ["torch.nn.Module.__init__", "evolve.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "evolve.Backbone64._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_blocks", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ")", ":", "\n", "        ", "super", "(", "Backbone64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "[", "0", "]", "in", "[", "64", ",", "112", ",", "224", "]", ",", "\"input_size should be [112, 112] or [224, 224]\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Backbone64.forward": [[155, 161], ["evolve.Backbone64.input_layer", "evolve.Backbone64.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "#x = self.output_layer(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Backbone64._initialize_weights": [[162, 178], ["evolve.Backbone64.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Backbone112.__init__": [[180, 217], ["torch.nn.Module.__init__", "evolve.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "evolve.Backbone112._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "evolve.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "evolve.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_blocks", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ")", ":", "\n", "        ", "super", "(", "Backbone112", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "[", "0", "]", "in", "[", "64", ",", "112", ",", "224", "]", ",", "\"input_size should be [112, 112] or [224, 224]\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "\n", "if", "input_size", "[", "0", "]", "==", "112", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "14", "*", "14", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Backbone112.forward": [[218, 224], ["evolve.Backbone112.input_layer", "evolve.Backbone112.body", "evolve.Backbone112.output_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.Backbone112._initialize_weights": [[225, 241], ["evolve.Backbone112.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.l2_norm": [[16, 21], ["torch.norm", "torch.norm", "torch.div", "torch.div"], "function", ["None"], ["", "", "def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.get_block": [[98, 101], ["evolve.Bottleneck", "evolve.Bottleneck", "range"], "function", ["None"], ["", "def", "get_block", "(", "in_channel", ",", "depth", ",", "num_units", ",", "stride", "=", "2", ")", ":", "\n", "\n", "    ", "return", "[", "Bottleneck", "(", "in_channel", ",", "depth", ",", "stride", ")", "]", "+", "[", "Bottleneck", "(", "depth", ",", "depth", ",", "1", ")", "for", "i", "in", "range", "(", "num_units", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.get_blocks": [[103, 127], ["evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block", "evolve.get_block"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block"], ["", "def", "get_blocks", "(", "num_layers", ")", ":", "\n", "    ", "if", "num_layers", "==", "50", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "4", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "14", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "13", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "30", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "8", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "36", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_50_64": [[243, 249], ["evolve.Backbone64"], "function", ["None"], ["", "", "", "", "", "def", "IR_50_64", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone64", "(", "input_size", ",", "50", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_50_112": [[250, 256], ["evolve.Backbone112"], "function", ["None"], ["", "def", "IR_50_112", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone112", "(", "input_size", ",", "50", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_100": [[258, 264], ["Backbone"], "function", ["None"], ["", "def", "IR_100", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-100 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "100", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_152_64": [[265, 271], ["evolve.Backbone64"], "function", ["None"], ["", "def", "IR_152_64", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone64", "(", "input_size", ",", "152", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_152_112": [[273, 279], ["evolve.Backbone112"], "function", ["None"], ["", "def", "IR_152_112", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone112", "(", "input_size", ",", "152", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_SE_50": [[280, 286], ["Backbone"], "function", ["None"], ["", "def", "IR_SE_50", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "50", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_SE_101": [[288, 294], ["Backbone"], "function", ["None"], ["", "def", "IR_SE_101", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-101 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "100", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.evolve.IR_SE_152": [[296, 302], ["Backbone"], "function", ["None"], ["", "def", "IR_SE_152", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "152", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.discri.DGWGAN32.__init__": [[6, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discri.DGWGAN32.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "1", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DGWGAN32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "self", ".", "layer2", "=", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", "\n", "self", ".", "layer3", "=", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Conv2d", "(", "dim", "*", "4", ",", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.discri.DGWGAN32.forward": [[21, 28], ["discri.DGWGAN32.layer1", "discri.DGWGAN32.layer2", "discri.DGWGAN32.layer3", "discri.DGWGAN32.layer4", "y.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "y", "=", "self", ".", "layer4", "(", "feat3", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.discri.DGWGAN.__init__": [[30, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "discri.DGWGAN.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "3", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DGWGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "ls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", ",", "\n", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", ",", "\n", "conv_ln_lrelu", "(", "dim", "*", "4", ",", "dim", "*", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim", "*", "8", ",", "1", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.discri.DGWGAN.forward": [[47, 51], ["discri.DGWGAN.ls", "y.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "ls", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.discri.DLWGAN.__init__": [[53, 68], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discri.DLWGAN.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "3", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DLWGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "self", ".", "layer2", "=", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", "\n", "self", ".", "layer3", "=", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Conv2d", "(", "dim", "*", "4", ",", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.discri.DLWGAN.forward": [[70, 76], ["discri.DLWGAN.layer1", "discri.DLWGAN.layer2", "discri.DLWGAN.layer3", "discri.DLWGAN.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "y", "=", "self", ".", "layer4", "(", "feat3", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.attack.inversion": [[11, 97], ["iden.view().long().cuda.view().long().cuda", "torch.CrossEntropyLoss().cuda", "G.eval", "D.eval", "T.eval", "E.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.sum", "torch.sum", "print", "time.time", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.randn().cuda().float", "torch.randn().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "range", "G", "torch.argmax().view", "torch.argmax().view", "range", "print", "iden[].item", "iden.view().long().cuda.view().long", "torch.CrossEntropyLoss", "G", "D", "nn.CrossEntropyLoss().cuda.", "Total_Loss.backward", "torch.zeros().cuda().float.clone", "torch.clamp().float", "torch.clamp().float", "Prior_Loss.item", "criterion.item", "T", "E", "iden[].item", "time.time", "max_iden[].item", "torch.randn().cuda", "torch.randn().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "T", "torch.clamp().float.grad.data.zero_", "D.mean", "G", "torch.argmax().view", "torch.argmax().view", "print", "utils.low2high", "torch.argmax", "torch.argmax", "score[].item", "max_score[].item", "eval_iden[].item", "iden.view().long().cuda.view", "torch.clamp", "torch.clamp", "torch.clamp().float.detach", "E", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.clamp().float.detach", "utils.low2high", "torch.argmax", "torch.argmax", "iden.view().long().cuda.eq().sum().item", "iden.view().long().cuda.eq().sum", "iden.view().long().cuda.eq", "torch.argmax().view.long"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.low2high", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.low2high"], ["def", "inversion", "(", "G", ",", "D", ",", "T", ",", "E", ",", "iden", ",", "lr", "=", "2e-2", ",", "momentum", "=", "0.9", ",", "lamda", "=", "100", ",", "iter_times", "=", "1500", ",", "clip_range", "=", "1", ")", ":", "\n", "\t", "iden", "=", "iden", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "bs", "=", "iden", ".", "shape", "[", "0", "]", "\n", "\n", "G", ".", "eval", "(", ")", "\n", "D", ".", "eval", "(", ")", "\n", "T", ".", "eval", "(", ")", "\n", "E", ".", "eval", "(", ")", "\n", "\n", "max_score", "=", "torch", ".", "zeros", "(", "bs", ")", "\n", "max_iden", "=", "torch", ".", "zeros", "(", "bs", ")", "\n", "z_hat", "=", "torch", ".", "zeros", "(", "bs", ",", "100", ")", "\n", "flag", "=", "torch", ".", "zeros", "(", "bs", ")", "\n", "\n", "for", "random_seed", "in", "range", "(", "5", ")", ":", "\n", "\t\t", "tf", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "z", "=", "torch", ".", "randn", "(", "bs", ",", "100", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "v", "=", "torch", ".", "zeros", "(", "bs", ",", "100", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "iter_times", ")", ":", "\n", "\t\t\t", "fake", "=", "G", "(", "z", ")", "\n", "label", "=", "D", "(", "fake", ")", "\n", "out", "=", "T", "(", "fake", ")", "[", "-", "1", "]", "\n", "\n", "if", "z", ".", "grad", "is", "not", "None", ":", "\n", "\t\t\t\t", "z", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "Prior_Loss", "=", "-", "label", ".", "mean", "(", ")", "\n", "Iden_Loss", "=", "criterion", "(", "out", ",", "iden", ")", "\n", "Total_Loss", "=", "Prior_Loss", "+", "lamda", "*", "Iden_Loss", "\n", "\n", "Total_Loss", ".", "backward", "(", ")", "\n", "\n", "v_prev", "=", "v", ".", "clone", "(", ")", "\n", "gradient", "=", "z", ".", "grad", ".", "data", "\n", "v", "=", "momentum", "*", "v", "-", "lr", "*", "gradient", "\n", "z", "=", "z", "+", "(", "-", "momentum", "*", "v_prev", "+", "(", "1", "+", "momentum", ")", "*", "v", ")", "\n", "z", "=", "torch", ".", "clamp", "(", "z", ".", "detach", "(", ")", ",", "-", "clip_range", ",", "clip_range", ")", ".", "float", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "Prior_Loss_val", "=", "Prior_Loss", ".", "item", "(", ")", "\n", "Iden_Loss_val", "=", "Iden_Loss", ".", "item", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "300", "==", "0", ":", "\n", "\t\t\t\t", "fake_img", "=", "G", "(", "z", ".", "detach", "(", ")", ")", "\n", "eval_prob", "=", "E", "(", "utils", ".", "low2high", "(", "fake_img", ")", ")", "[", "-", "1", "]", "\n", "eval_iden", "=", "torch", ".", "argmax", "(", "eval_prob", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "acc", "=", "iden", ".", "eq", "(", "eval_iden", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "*", "1.0", "/", "bs", "\n", "print", "(", "\"Iteration:{}\\tPrior Loss:{:.2f}\\tIden Loss:{:.2f}\\tAttack Acc:{:.2f}\"", ".", "format", "(", "i", "+", "1", ",", "Prior_Loss_val", ",", "Iden_Loss_val", ",", "acc", ")", ")", "\n", "\n", "", "", "fake", "=", "G", "(", "z", ")", "\n", "score", "=", "T", "(", "fake", ")", "[", "-", "1", "]", "\n", "eval_prob", "=", "E", "(", "utils", ".", "low2high", "(", "fake", ")", ")", "[", "-", "1", "]", "\n", "eval_iden", "=", "torch", ".", "argmax", "(", "eval_prob", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "\t\t\t", "gt", "=", "iden", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "score", "[", "i", ",", "i", "]", ".", "item", "(", ")", ">", "max_score", "[", "i", "]", ".", "item", "(", ")", ":", "\n", "\t\t\t\t", "max_score", "[", "i", "]", "=", "score", "[", "i", ",", "i", "]", "\n", "max_iden", "[", "i", "]", "=", "eval_iden", "[", "i", "]", "\n", "z_hat", "[", "i", ",", ":", "]", "=", "z", "[", "i", ",", ":", "]", "\n", "", "if", "eval_iden", "[", "i", "]", ".", "item", "(", ")", "==", "gt", ":", "\n", "\t\t\t\t", "cnt", "+=", "1", "\n", "flag", "[", "i", "]", "=", "1", "\n", "\n", "", "", "interval", "=", "time", ".", "time", "(", ")", "-", "tf", "\n", "print", "(", "\"Time:{:.2f}\\tAcc:{:.2f}\\t\"", ".", "format", "(", "interval", ",", "cnt", "*", "1.0", "/", "100", ")", ")", "\n", "\n", "", "correct", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "\t\t", "gt", "=", "iden", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "max_iden", "[", "i", "]", ".", "item", "(", ")", "==", "gt", ":", "\n", "\t\t\t", "correct", "+=", "1", "\n", "\n", "", "", "correct_5", "=", "torch", ".", "sum", "(", "flag", ")", "\n", "acc", ",", "acc_5", "=", "correct", "*", "1.0", "/", "bs", ",", "correct_5", "*", "1.0", "/", "bs", "\n", "print", "(", "\"Acc:{:.2f}\\tAcc5:{:.2f}\"", ".", "format", "(", "acc", ",", "acc_5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.Generator.__init__": [[5, 24], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.Generator.__init__.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "8", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "8", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "8", ",", "dim", "*", "4", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "2", ",", "dim", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "3", ",", "5", ",", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.Generator.forward": [[25, 30], ["generator.Generator.l1", "generator.Generator.view", "generator.Generator.l2_5", "generator.Generator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.GeneratorMNIST.__init__": [[32, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.GeneratorMNIST.__init__.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "GeneratorMNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "4", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "4", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "2", ",", "dim", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "1", ",", "5", ",", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.GeneratorMNIST.forward": [[51, 56], ["generator.GeneratorMNIST.l1", "generator.GeneratorMNIST.view", "generator.GeneratorMNIST.l2_5", "generator.GeneratorMNIST.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.CompletionNetwork.__init__": [[58, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CompletionNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# input_shape: (None, 4, img_h, img_w)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 64, img_h, img_w)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act5", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act6", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act7", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "padding", "=", "4", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act8", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "8", ",", "padding", "=", "8", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act9", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "16", ",", "padding", "=", "16", ")", "\n", "self", ".", "bn10", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act10", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn11", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act11", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn12", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act12", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "deconv13", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn13", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act13", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn14", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act14", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "deconv15", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn15", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act15", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 64, img_h, img_w)", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn16", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act16", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 32, img_h, img_w)", "\n", "self", ".", "conv17", "=", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "act17", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "# output_shape: (None, 3, img_h. img_w)", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.CompletionNetwork.forward": [[129, 148], ["generator.CompletionNetwork.bn1", "generator.CompletionNetwork.bn2", "generator.CompletionNetwork.bn3", "generator.CompletionNetwork.bn4", "generator.CompletionNetwork.bn5", "generator.CompletionNetwork.bn6", "generator.CompletionNetwork.bn7", "generator.CompletionNetwork.bn8", "generator.CompletionNetwork.bn9", "generator.CompletionNetwork.bn10", "generator.CompletionNetwork.bn11", "generator.CompletionNetwork.bn12", "generator.CompletionNetwork.bn13", "generator.CompletionNetwork.bn14", "generator.CompletionNetwork.bn15", "generator.CompletionNetwork.bn16", "generator.CompletionNetwork.act17", "generator.CompletionNetwork.act1", "generator.CompletionNetwork.act2", "generator.CompletionNetwork.act3", "generator.CompletionNetwork.act4", "generator.CompletionNetwork.act5", "generator.CompletionNetwork.act6", "generator.CompletionNetwork.act7", "generator.CompletionNetwork.act8", "generator.CompletionNetwork.act9", "generator.CompletionNetwork.act10", "generator.CompletionNetwork.act11", "generator.CompletionNetwork.act12", "generator.CompletionNetwork.act13", "generator.CompletionNetwork.act14", "generator.CompletionNetwork.act15", "generator.CompletionNetwork.act16", "generator.CompletionNetwork.conv17", "generator.CompletionNetwork.conv1", "generator.CompletionNetwork.conv2", "generator.CompletionNetwork.conv3", "generator.CompletionNetwork.conv4", "generator.CompletionNetwork.conv5", "generator.CompletionNetwork.conv6", "generator.CompletionNetwork.conv7", "generator.CompletionNetwork.conv8", "generator.CompletionNetwork.conv9", "generator.CompletionNetwork.conv10", "generator.CompletionNetwork.conv11", "generator.CompletionNetwork.conv12", "generator.CompletionNetwork.deconv13", "generator.CompletionNetwork.conv14", "generator.CompletionNetwork.deconv15", "generator.CompletionNetwork.conv16"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn1", "(", "self", ".", "act1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "act2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "act3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "self", ".", "act4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "act5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn6", "(", "self", ".", "act6", "(", "self", ".", "conv6", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn7", "(", "self", ".", "act7", "(", "self", ".", "conv7", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn8", "(", "self", ".", "act8", "(", "self", ".", "conv8", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn9", "(", "self", ".", "act9", "(", "self", ".", "conv9", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn10", "(", "self", ".", "act10", "(", "self", ".", "conv10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn11", "(", "self", ".", "act11", "(", "self", ".", "conv11", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn12", "(", "self", ".", "act12", "(", "self", ".", "conv12", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn13", "(", "self", ".", "act13", "(", "self", ".", "deconv13", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn14", "(", "self", ".", "act14", "(", "self", ".", "conv14", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn15", "(", "self", ".", "act15", "(", "self", ".", "deconv15", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn16", "(", "self", ".", "act16", "(", "self", ".", "conv16", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "act17", "(", "self", ".", "conv17", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.ContextNetwork.__init__": [[157, 199], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ContextNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# input_shape: (None, 4, img_h, img_w)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 32, img_h, img_w)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 64, img_h//2, img_w//2)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act5", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act6", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act7", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "padding", "=", "4", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act8", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "8", ",", "padding", "=", "8", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act9", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "16", ",", "padding", "=", "16", ")", "\n", "self", ".", "bn10", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act10", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.ContextNetwork.forward": [[202, 214], ["generator.ContextNetwork.bn1", "generator.ContextNetwork.bn2", "generator.ContextNetwork.bn3", "generator.ContextNetwork.bn4", "generator.ContextNetwork.bn5", "generator.ContextNetwork.bn6", "generator.ContextNetwork.bn7", "generator.ContextNetwork.bn8", "generator.ContextNetwork.bn9", "generator.ContextNetwork.bn10", "generator.ContextNetwork.act1", "generator.ContextNetwork.act2", "generator.ContextNetwork.act3", "generator.ContextNetwork.act4", "generator.ContextNetwork.act5", "generator.ContextNetwork.act6", "generator.ContextNetwork.act7", "generator.ContextNetwork.act8", "generator.ContextNetwork.act9", "generator.ContextNetwork.act10", "generator.ContextNetwork.conv1", "generator.ContextNetwork.conv2", "generator.ContextNetwork.conv3", "generator.ContextNetwork.conv4", "generator.ContextNetwork.conv5", "generator.ContextNetwork.conv6", "generator.ContextNetwork.conv7", "generator.ContextNetwork.conv8", "generator.ContextNetwork.conv9", "generator.ContextNetwork.conv10"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn1", "(", "self", ".", "act1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "act2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "act3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "self", ".", "act4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "act5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn6", "(", "self", ".", "act6", "(", "self", ".", "conv6", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn7", "(", "self", ".", "act7", "(", "self", ".", "conv7", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn8", "(", "self", ".", "act8", "(", "self", ".", "conv8", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn9", "(", "self", ".", "act9", "(", "self", ".", "conv9", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn10", "(", "self", ".", "act10", "(", "self", ".", "conv10", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.IdentityGenerator.__init__": [[217, 227], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.dconv_bn_relu", "generator.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "IdentityGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "8", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "8", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "8", ",", "dim", "*", "4", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.IdentityGenerator.forward": [[228, 233], ["generator.IdentityGenerator.l1", "generator.IdentityGenerator.view", "generator.IdentityGenerator.l2_5", "generator.IdentityGenerator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.InversionNet.__init__": [[235, 256], ["torch.Module.__init__", "generator.ContextNetwork", "generator.IdentityGenerator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "generator.dconv_bn_relu", "generator.dconv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "InversionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# input [4, h, w]  output [256, h // 4, w // 4]", "\n", "self", ".", "ContextNetwork", "=", "ContextNetwork", "(", ")", "\n", "# input [z_dim] output[128, 16, 16]", "\n", "self", ".", "IdentityGenerator", "=", "IdentityGenerator", "(", ")", "\n", "\n", "self", ".", "dim", "=", "128", "+", "128", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "self", ".", "Dconv", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "self", ".", "dim", ",", "self", ".", "out_dim", ")", ",", "\n", "dconv_bn_relu", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", "//", "2", ")", ")", "\n", "\n", "self", ".", "Conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", "//", "2", ",", "self", ".", "out_dim", "//", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", "//", "4", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.InversionNet.forward": [[258, 269], ["generator.InversionNet.ContextNetwork", "generator.InversionNet.IdentityGenerator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.InversionNet.Dconv", "generator.InversionNet.Conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "# x.shape [4, h, w]  z.shape [100]", "\n", "        ", "x", ",", "z", "=", "inp", "\n", "context_info", "=", "self", ".", "ContextNetwork", "(", "x", ")", "\n", "identity_info", "=", "self", ".", "IdentityGenerator", "(", "z", ")", "\n", "# []", "\n", "y", "=", "torch", ".", "cat", "(", "(", "context_info", ",", "identity_info", ")", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "Dconv", "(", "y", ")", "\n", "y", "=", "self", ".", "Conv", "(", "y", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.generator.dconv_bn_relu": [[149, 155], ["torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.ImageFolder.__init__": [[23, 35], ["os.listdir", "dataloader.ImageFolder.get_processor", "dataloader.ImageFolder.get_list", "dataloader.ImageFolder.load_img", "len", "print", "str"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_list", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.load_img"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "file_path", ",", "mode", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "img_path", "=", "args", "[", "\"dataset\"", "]", "[", "\"img_path\"", "]", "\n", "self", ".", "model_name", "=", "args", "[", "\"dataset\"", "]", "[", "\"model_name\"", "]", "\n", "self", ".", "img_list", "=", "os", ".", "listdir", "(", "self", ".", "img_path", ")", "\n", "self", ".", "processor", "=", "self", ".", "get_processor", "(", ")", "\n", "self", ".", "name_list", ",", "self", ".", "label_list", "=", "self", ".", "get_list", "(", "file_path", ")", "\n", "self", ".", "image_list", "=", "self", ".", "load_img", "(", ")", "\n", "self", ".", "num_img", "=", "len", "(", "self", ".", "image_list", ")", "\n", "self", ".", "n_classes", "=", "args", "[", "\"dataset\"", "]", "[", "\"n_classes\"", "]", "\n", "print", "(", "\"Load \"", "+", "str", "(", "self", ".", "num_img", ")", "+", "\" images\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.ImageFolder.get_list": [[36, 45], ["open", "open.readlines", "line.strip().split", "name_list.append", "label_list.append", "int", "line.strip"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "name_list", ",", "label_list", "=", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "file_path", ",", "\"r\"", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "img_name", ",", "iden", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "name_list", ".", "append", "(", "img_name", ")", "\n", "label_list", ".", "append", "(", "int", "(", "iden", ")", ")", "\n", "\n", "", "return", "name_list", ",", "label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.ImageFolder.load_img": [[47, 56], ["enumerate", "img_name.endswith", "PIL.Image.open", "img.convert.convert.convert", "img_list.append"], "methods", ["None"], ["", "def", "load_img", "(", "self", ")", ":", "\n", "        ", "img_list", "=", "[", "]", "\n", "for", "i", ",", "img_name", "in", "enumerate", "(", "self", ".", "name_list", ")", ":", "\n", "            ", "if", "img_name", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "                ", "path", "=", "self", ".", "img_path", "+", "\"/\"", "+", "img_name", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img_list", ".", "append", "(", "img", ")", "\n", "", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.ImageFolder.get_processor": [[57, 77], ["proc.append", "proc.append", "proc.append", "proc.append", "proc.append", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "get_processor", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model_name", "==", "\"FaceNet\"", ":", "\n", "            ", "re_size", "=", "112", "\n", "", "else", ":", "\n", "            ", "re_size", "=", "64", "\n", "\n", "", "crop_size", "=", "108", "\n", "\n", "offset_height", "=", "(", "218", "-", "crop_size", ")", "//", "2", "\n", "offset_width", "=", "(", "178", "-", "crop_size", ")", "//", "2", "\n", "crop", "=", "lambda", "x", ":", "x", "[", ":", ",", "offset_height", ":", "offset_height", "+", "crop_size", ",", "offset_width", ":", "offset_width", "+", "crop_size", "]", "\n", "\n", "proc", "=", "[", "]", "\n", "proc", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "proc", ".", "append", "(", "transforms", ".", "Lambda", "(", "crop", ")", ")", "\n", "proc", ".", "append", "(", "transforms", ".", "ToPILImage", "(", ")", ")", "\n", "proc", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "re_size", ",", "re_size", ")", ")", ")", "\n", "proc", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "return", "transforms", ".", "Compose", "(", "proc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.ImageFolder.__getitem__": [[78, 87], ["dataloader.ImageFolder.get_processor", "dataloader.ImageFolder.", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "processer", "=", "self", ".", "get_processor", "(", ")", "\n", "img", "=", "processer", "(", "self", ".", "image_list", "[", "index", "]", ")", "\n", "if", "self", ".", "mode", "==", "\"gan\"", ":", "\n", "            ", "return", "img", "\n", "", "label", "=", "self", ".", "label_list", "[", "index", "]", "\n", "one_hot", "=", "np", ".", "zeros", "(", "self", ".", "n_classes", ")", "\n", "one_hot", "[", "label", "]", "=", "1", "\n", "return", "img", ",", "one_hot", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.ImageFolder.__len__": [[88, 90], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_img", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.GrayFolder.__init__": [[92, 103], ["os.listdir", "dataloader.GrayFolder.get_processor", "dataloader.GrayFolder.get_list", "dataloader.GrayFolder.load_img", "len", "print", "str"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_list", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.load_img"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "file_path", ",", "mode", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "img_path", "=", "args", "[", "\"dataset\"", "]", "[", "\"img_path\"", "]", "\n", "self", ".", "img_list", "=", "os", ".", "listdir", "(", "self", ".", "img_path", ")", "\n", "self", ".", "processor", "=", "self", ".", "get_processor", "(", ")", "\n", "self", ".", "name_list", ",", "self", ".", "label_list", "=", "self", ".", "get_list", "(", "file_path", ")", "\n", "self", ".", "image_list", "=", "self", ".", "load_img", "(", ")", "\n", "self", ".", "num_img", "=", "len", "(", "self", ".", "image_list", ")", "\n", "self", ".", "n_classes", "=", "args", "[", "\"dataset\"", "]", "[", "\"n_classes\"", "]", "\n", "print", "(", "\"Load \"", "+", "str", "(", "self", ".", "num_img", ")", "+", "\" images\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.GrayFolder.get_list": [[104, 113], ["open", "open.readlines", "line.strip().split", "name_list.append", "label_list.append", "int", "line.strip"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "name_list", ",", "label_list", "=", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "file_path", ",", "\"r\"", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "img_name", ",", "iden", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "name_list", ".", "append", "(", "img_name", ")", "\n", "label_list", ".", "append", "(", "int", "(", "iden", ")", ")", "\n", "\n", "", "return", "name_list", ",", "label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.GrayFolder.load_img": [[115, 124], ["enumerate", "img_name.endswith", "PIL.Image.open", "img.convert.convert.convert", "img_list.append"], "methods", ["None"], ["", "def", "load_img", "(", "self", ")", ":", "\n", "        ", "img_list", "=", "[", "]", "\n", "for", "i", ",", "img_name", "in", "enumerate", "(", "self", ".", "name_list", ")", ":", "\n", "            ", "if", "img_name", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "                ", "path", "=", "self", ".", "img_path", "+", "\"/\"", "+", "img_name", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "img_list", ".", "append", "(", "img", ")", "\n", "", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.GrayFolder.get_processor": [[125, 135], ["proc.append", "proc.append", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "get_processor", "(", "self", ")", ":", "\n", "        ", "proc", "=", "[", "]", "\n", "if", "self", ".", "args", "[", "'dataset'", "]", "[", "'name'", "]", "==", "\"MNIST\"", ":", "\n", "            ", "re_size", "=", "32", "\n", "", "else", ":", "\n", "            ", "re_size", "=", "64", "\n", "", "proc", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "re_size", ",", "re_size", ")", ")", ")", "\n", "proc", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "return", "transforms", ".", "Compose", "(", "proc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.GrayFolder.__getitem__": [[136, 145], ["dataloader.GrayFolder.get_processor", "dataloader.GrayFolder.", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "processer", "=", "self", ".", "get_processor", "(", ")", "\n", "img", "=", "processer", "(", "self", ".", "image_list", "[", "index", "]", ")", "\n", "if", "self", ".", "mode", "==", "\"gan\"", ":", "\n", "            ", "return", "img", "\n", "", "label", "=", "self", ".", "label_list", "[", "index", "]", "\n", "one_hot", "=", "np", ".", "zeros", "(", "self", ".", "n_classes", ")", "\n", "one_hot", "[", "label", "]", "=", "1", "\n", "return", "img", ",", "one_hot", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.GrayFolder.__len__": [[146, 148], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_img", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.dataloader.load_mnist": [[149, 167], ["torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.save_tensor_images", "utils.save_tensor_images", "torchvision.transforms.ToTensor", "os.path.join", "os.path.join", "str", "str", "str", "labels.item", "str", "labels.item"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.save_tensor_images", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.save_tensor_images"], ["", "", "def", "load_mnist", "(", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "mnist_path", ",", "train", "=", "True", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "mnist_path", ",", "train", "=", "False", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "1", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "1", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "imgs", ",", "labels", "in", "train_loader", ":", "\n", "        ", "cnt", "+=", "1", "\n", "img_name", "=", "str", "(", "cnt", ")", "+", "'_'", "+", "str", "(", "labels", ".", "item", "(", ")", ")", "+", "'.png'", "\n", "utils", ".", "save_tensor_images", "(", "imgs", ",", "os", ".", "path", ".", "join", "(", "mnist_img_path", ",", "img_name", ")", ")", "\n", "\n", "", "for", "imgs", ",", "labels", "in", "test_loader", ":", "\n", "        ", "cnt", "+=", "1", "\n", "img_name", "=", "str", "(", "cnt", ")", "+", "'_'", "+", "str", "(", "labels", ".", "item", "(", ")", ")", "+", "'.png'", "\n", "utils", ".", "save_tensor_images", "(", "imgs", ",", "os", ".", "path", ".", "join", "(", "mnist_img_path", ",", "img_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.Tee.__init__": [[18, 22], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "mode", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "name", ",", "mode", ")", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.Tee.__del__": [[22, 25], ["utils.Tee.file.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "self", ".", "file", ".", "close", "(", ")", "\n", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.Tee.write": [[25, 30], ["utils.Tee.stdout.write", "utils.Tee.flush", "utils.Tee.file.write"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.write", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.flush", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.write"], ["", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "'...'", "in", "data", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "data", ")", "\n", "", "self", ".", "stdout", ".", "write", "(", "data", ")", "\n", "self", ".", "flush", "(", ")", "\n", "", "def", "flush", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.Tee.flush": [[30, 32], ["utils.Tee.file.flush"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.weights_init": [[33, 47], ["isinstance", "isinstance", "torch.constant_", "torch.xavier_uniform_", "torch.constant_", "torch.kaiming_uniform_", "torch.xavier_uniform_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "model", ".", "MyConvo2d", ")", ":", "\n", "        ", "if", "m", ".", "conv", ".", "weight", "is", "not", "None", ":", "\n", "            ", "if", "m", ".", "he_init", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "m", ".", "conv", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "m", ".", "conv", ".", "weight", ")", "\n", "", "", "if", "m", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "init", ".", "constant_", "(", "m", ".", "conv", ".", "bias", ",", "0.0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.init_dataloader": [[48, 70], ["time.time", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "dataloader.ImageFolder", "dataloader.GrayFolder", "time.time"], "function", ["None"], ["", "", "", "def", "init_dataloader", "(", "args", ",", "file_path", ",", "batch_size", "=", "64", ",", "mode", "=", "\"gan\"", ")", ":", "\n", "    ", "tf", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "mode", "==", "\"attack\"", ":", "\n", "        ", "shuffle_flag", "=", "False", "\n", "", "else", ":", "\n", "        ", "shuffle_flag", "=", "True", "\n", "\n", "", "if", "args", "[", "'dataset'", "]", "[", "'name'", "]", "==", "\"celeba\"", ":", "\n", "        ", "data_set", "=", "dataloader", ".", "ImageFolder", "(", "args", ",", "file_path", ",", "mode", ")", "\n", "", "else", ":", "\n", "        ", "data_set", "=", "dataloader", ".", "GrayFolder", "(", "args", ",", "file_path", ",", "mode", ")", "\n", "\n", "", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle_flag", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "interval", "=", "time", ".", "time", "(", ")", "-", "tf", "\n", "print", "(", "'Initializing data loader took %ds'", "%", "interval", ")", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.load_params": [[71, 75], ["open", "json.load"], "function", ["None"], ["", "def", "load_params", "(", "json_file", ")", ":", "\n", "    ", "with", "open", "(", "json_file", ")", "as", "data_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "data_file", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.print_params": [[76, 84], ["print", "print", "enumerate", "enumerate", "print", "info.items", "print", "params.items", "print", "datetime.datetime.now().strftime", "datetime.datetime.now", "str", "str"], "function", ["None"], ["", "def", "print_params", "(", "info", ",", "params", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------------------'", ")", "\n", "print", "(", "\"Running time: %s\"", "%", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", ")", "\n", "for", "i", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "info", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"%s: %s\"", "%", "(", "key", ",", "str", "(", "value", ")", ")", ")", "\n", "", "for", "i", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "params", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"%s: %s\"", "%", "(", "key", ",", "str", "(", "value", ")", ")", ")", "\n", "", "print", "(", "'-----------------------------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.save_tensor_images": [[85, 90], ["torchvision.save_image", "torchvision.save_image"], "function", ["None"], ["", "def", "save_tensor_images", "(", "images", ",", "filename", ",", "nrow", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "if", "not", "nrow", ":", "\n", "        ", "tvls", ".", "save_image", "(", "images", ",", "filename", ",", "normalize", "=", "normalize", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "tvls", ".", "save_image", "(", "images", ",", "filename", ",", "normalize", "=", "normalize", ",", "nrow", "=", "nrow", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.load_my_state_dict": [[92, 101], ["utils..state_dict", "state_dict.items", "own_state[].copy_", "print"], "function", ["None"], ["", "", "def", "load_my_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "own_state", "=", "self", ".", "state_dict", "(", ")", "\n", "#print(state_dict)", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "not", "in", "own_state", ":", "\n", "            ", "print", "(", "name", ")", "\n", "continue", "\n", "#print(param.data.shape)", "\n", "", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.gen_hole_area": [[102, 119], ["random.randint", "random.randint"], "function", ["None"], ["", "", "def", "gen_hole_area", "(", "size", ",", "mask_size", ")", ":", "\n", "    ", "\"\"\"\n    * inputs:\n        - size (sequence, required)\n                A sequence of length 2 (W, H) is assumed.\n                (W, H) is the size of hole area.\n        - mask_size (sequence, required)\n                A sequence of length 2 (W, H) is assumed.\n                (W, H) is the size of input mask.\n    * returns:\n            A sequence used for the input argument 'hole_area' for function 'gen_input_mask'.\n    \"\"\"", "\n", "mask_w", ",", "mask_h", "=", "mask_size", "\n", "harea_w", ",", "harea_h", "=", "size", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "mask_w", "-", "harea_w", ")", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "mask_h", "-", "harea_h", ")", "\n", "return", "(", "(", "offset_x", ",", "offset_y", ")", ",", "(", "harea_w", ",", "harea_h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.crop": [[121, 136], ["None"], "function", ["None"], ["", "def", "crop", "(", "x", ",", "area", ")", ":", "\n", "    ", "\"\"\"\n    * inputs:\n        - x (torch.Tensor, required)\n                A torch tensor of shape (N, C, H, W) is assumed.\n        - area (sequence, required)\n                A sequence of length 2 ((X, Y), (W, H)) is assumed.\n                sequence[0] (X, Y) is the left corner of an area to be cropped.\n                sequence[1] (W, H) is its width and height.\n    * returns:\n            A torch tensor of shape (N, C, H, W) cropped in the specified area.\n    \"\"\"", "\n", "xmin", ",", "ymin", "=", "area", "[", "0", "]", "\n", "w", ",", "h", "=", "area", "[", "1", "]", "\n", "return", "x", "[", ":", ",", ":", ",", "ymin", ":", "ymin", "+", "h", ",", "xmin", ":", "xmin", "+", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.get_center_mask": [[137, 145], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "int", "int", "mask.expand.expand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "get_center_mask", "(", "img_size", ",", "bs", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "img_size", ",", "img_size", ")", ".", "cuda", "(", ")", "\n", "scale", "=", "0.15", "\n", "l", "=", "int", "(", "img_size", "*", "scale", ")", "\n", "u", "=", "int", "(", "img_size", "*", "(", "1.0", "-", "scale", ")", ")", "\n", "mask", "[", "l", ":", "u", ",", "l", ":", "u", "]", "=", "1", "\n", "mask", "=", "mask", ".", "expand", "(", "bs", ",", "1", ",", "img_size", ",", "img_size", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.get_train_mask": [[146, 164], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "random.randint", "mask.repeat.repeat", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "get_train_mask", "(", "img_size", ",", "bs", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "img_size", ",", "img_size", ")", ".", "cuda", "(", ")", "\n", "typ", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "typ", "==", "0", ":", "\n", "        ", "scale", "=", "0.25", "\n", "l", "=", "int", "(", "img_size", "*", "scale", ")", "\n", "u", "=", "int", "(", "img_size", "*", "(", "1.0", "-", "scale", ")", ")", "\n", "mask", "[", "l", ":", ",", "l", ":", "u", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "u", ",", "d", "=", "10", ",", "52", "\n", "l", ",", "r", "=", "25", ",", "40", "\n", "mask", "[", "l", ":", "r", ",", "u", ":", "d", "]", "=", "0", "\n", "u", ",", "d", "=", "26", ",", "38", "\n", "l", ",", "r", "=", "40", ",", "63", "\n", "mask", "[", "l", ":", "r", ",", "u", ":", "d", "]", "=", "0", "\n", "\n", "", "mask", "=", "mask", ".", "repeat", "(", "bs", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.sample_random_batch": [[165, 182], ["len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "min", "random.choice", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "batch.append", "range"], "function", ["None"], ["", "def", "sample_random_batch", "(", "dataset", ",", "batch_size", "=", "32", ")", ":", "\n", "    ", "\"\"\"\n    * inputs:\n        - dataset (torch.utils.data.Dataset, required)\n                An instance of torch.utils.data.Dataset.\n        - batch_size (int, optional)\n                Batch size.\n    * returns:\n            A mini-batch randomly sampled from the input dataset.\n    \"\"\"", "\n", "num_samples", "=", "len", "(", "dataset", ")", "\n", "batch", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "min", "(", "batch_size", ",", "num_samples", ")", ")", ":", "\n", "        ", "index", "=", "random", ".", "choice", "(", "range", "(", "0", ",", "num_samples", ")", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "dataset", "[", "index", "]", ",", "dim", "=", "0", ")", "\n", "batch", ".", "append", "(", "x", ")", "\n", "", "return", "torch", ".", "cat", "(", "batch", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.get_deprocessor": [[183, 189], ["proc.append", "proc.append", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_deprocessor", "(", ")", ":", "\n", "# resize 112,112", "\n", "    ", "proc", "=", "[", "]", "\n", "proc", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "112", ",", "112", ")", ")", ")", "\n", "proc", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "return", "transforms", ".", "Compose", "(", "proc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.low2high": [[190, 203], ["img.cuda.size", "utils.get_deprocessor", "img.cuda.detach().cpu().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "img.cuda.cuda", "get_deprocessor.", "img.cuda.detach().cpu", "img.cuda.detach", "torchvision.transforms.ToPILImage"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.get_deprocessor"], ["", "def", "low2high", "(", "img", ")", ":", "\n", "# 0 and 1, 64 to 112", "\n", "    ", "bs", "=", "img", ".", "size", "(", "0", ")", "\n", "proc", "=", "get_deprocessor", "(", ")", "\n", "img_tensor", "=", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "img", "=", "torch", ".", "zeros", "(", "bs", ",", "3", ",", "112", ",", "112", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "img_i", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "img_tensor", "[", "i", ",", ":", ",", ":", ",", ":", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_i", "=", "proc", "(", "img_i", ")", "\n", "img", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "img_i", "[", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "img", "=", "img", ".", "cuda", "(", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.calc_feat": [[204, 213], ["IR_50", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "utils.low2high", "torch.nn.DataParallel().cuda.", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_state_dict", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.low2high"], ["", "def", "calc_feat", "(", "img", ")", ":", "\n", "    ", "I", "=", "IR_50", "(", "(", "112", ",", "112", ")", ")", "\n", "BACKBONE_RESUME_ROOT", "=", "\"./feature/ir50.pth\"", "\n", "print", "(", "\"Loading Backbone Checkpoint \"", ")", "\n", "I", ".", "load_state_dict", "(", "torch", ".", "load", "(", "BACKBONE_RESUME_ROOT", ")", ")", "\n", "I", "=", "torch", ".", "nn", ".", "DataParallel", "(", "I", ")", ".", "cuda", "(", ")", "\n", "img", "=", "low2high", "(", "img", ")", "\n", "feat", "=", "I", "(", "img", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.get_model": [[214, 228], ["attack_name.startswith", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "classify.VGG16", "attack_name.startswith", "classify.IR50", "attack_name.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "classify.IR152", "attack_name.startswith", "facenet.FaceNet64", "print", "exit"], "function", ["None"], ["", "def", "get_model", "(", "attack_name", ",", "classes", ")", ":", "\n", "    ", "if", "attack_name", ".", "startswith", "(", "\"VGG16\"", ")", ":", "\n", "        ", "T", "=", "classify", ".", "VGG16", "(", "n_classes", ")", "\n", "", "elif", "attack_name", ".", "startswith", "(", "\"IR50\"", ")", ":", "\n", "        ", "T", "=", "classify", ".", "IR50", "(", "n_classes", ")", "\n", "", "elif", "attack_name", ".", "startswith", "(", "\"IR152\"", ")", ":", "\n", "        ", "T", "=", "classify", ".", "IR152", "(", "n_classes", ")", "\n", "", "elif", "attack_name", ".", "startswith", "(", "\"FaceNet64\"", ")", ":", "\n", "        ", "T", "=", "facenet", ".", "FaceNet64", "(", "n_classes", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Model doesn't exist\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "T", "=", "torch", ".", "nn", ".", "DataParallel", "(", "T", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.calc_psnr": [[229, 240], ["img1.size", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "calc_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "bs", ",", "c", ",", "h", ",", "w", "=", "img1", ".", "size", "(", ")", "\n", "ten", "=", "torch", ".", "tensor", "(", "10", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "mse", "=", "(", "img1", "-", "img2", ")", "**", "2", "\n", "# [bs, c, h, w]", "\n", "mse", "=", "torch", ".", "sum", "(", "mse", ",", "dim", "=", "1", ")", "\n", "mse", "=", "torch", ".", "sum", "(", "mse", ",", "dim", "=", "1", ")", "\n", "mse", "=", "torch", ".", "sum", "(", "mse", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "/", "(", "c", "*", "h", "*", "w", ")", "\n", "maxI", "=", "torch", ".", "ones", "(", "bs", ",", "1", ")", ".", "cuda", "(", ")", "\n", "psnr", "=", "20", "*", "torch", ".", "log", "(", "maxI", "/", "torch", ".", "sqrt", "(", "mse", ")", ")", "/", "torch", ".", "log", "(", "ten", ")", "\n", "return", "torch", ".", "mean", "(", "psnr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.calc_acc": [[241, 249], ["utils.low2high", "net", "iden.view.view", "iden.view.size", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.low2high"], ["", "def", "calc_acc", "(", "net", ",", "img", ",", "iden", ")", ":", "\n", "#img = (img - 0.5) / 0.5", "\n", "    ", "img", "=", "low2high", "(", "img", ")", "\n", "__", ",", "___", ",", "out_iden", "=", "net", "(", "img", ")", "\n", "iden", "=", "iden", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "bs", "=", "iden", ".", "size", "(", "0", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "iden", "==", "out_iden", ")", ".", "item", "(", ")", "*", "1.0", "/", "bs", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.calc_center": [[250, 261], ["iden.long.long", "feat.cpu.cpu", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "feat.cpu.size", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "range", "dist.item", "iden[].item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.load", "feat.cpu.size", "os.path.join"], "function", ["None"], ["", "def", "calc_center", "(", "feat", ",", "iden", ",", "path", "=", "\"feature\"", ")", ":", "\n", "    ", "iden", "=", "iden", ".", "long", "(", ")", "\n", "feat", "=", "feat", ".", "cpu", "(", ")", "\n", "center", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"center.npy\"", ")", ")", ")", ".", "float", "(", ")", "\n", "bs", "=", "feat", ".", "size", "(", "0", ")", "\n", "true_feat", "=", "torch", ".", "zeros", "(", "feat", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "real_iden", "=", "iden", "[", "i", "]", ".", "item", "(", ")", "\n", "true_feat", "[", "i", ",", ":", "]", "=", "center", "[", "real_iden", ",", ":", "]", "\n", "", "dist", "=", "torch", ".", "sum", "(", "(", "feat", "-", "true_feat", ")", "**", "2", ")", "/", "bs", "\n", "return", "dist", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.calc_knn": [[262, 278], ["iden.cpu().long.cpu().long", "feat.cpu.cpu", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().view().long", "torch.from_numpy().view().long", "torch.from_numpy().view().long", "torch.from_numpy().view().long", "torch.from_numpy().view().long", "feat.cpu.size", "torch.from_numpy().float.size", "range", "range", "iden.cpu().long.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "numpy.load", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "min", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.load", "os.path.join"], "function", ["None"], ["", "def", "calc_knn", "(", "feat", ",", "iden", ",", "path", "=", "\"feature\"", ")", ":", "\n", "    ", "iden", "=", "iden", ".", "cpu", "(", ")", ".", "long", "(", ")", "\n", "feat", "=", "feat", ".", "cpu", "(", ")", "\n", "feats", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"feat.npy\"", ")", ")", ")", ".", "float", "(", ")", "\n", "info", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"info.npy\"", ")", ")", ")", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "bs", "=", "feat", ".", "size", "(", "0", ")", "\n", "tot", "=", "feats", ".", "size", "(", "0", ")", "\n", "knn_dist", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "knn", "=", "1e8", "\n", "for", "j", "in", "range", "(", "tot", ")", ":", "\n", "            ", "if", "info", "[", "j", "]", "==", "iden", "[", "i", "]", ":", "\n", "                ", "dist", "=", "torch", ".", "sum", "(", "(", "feat", "[", "i", ",", ":", "]", "-", "feats", "[", "j", ",", ":", "]", ")", "**", "2", ")", "\n", "knn", "=", "min", "(", "knn", ",", "dist", ")", "\n", "", "", "knn_dist", "+=", "knn", "\n", "", "return", "knn_dist", "/", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.losses.ContextLoss.forward": [[17, 21], ["gen.size", "torch.sum", "torch.abs", "torch.mul", "torch.mul"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mask", ",", "gen", ",", "images", ")", ":", "\n", "        ", "bs", "=", "gen", ".", "size", "(", "0", ")", "\n", "context_loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "mul", "(", "mask", ",", "gen", ")", "-", "torch", ".", "mul", "(", "mask", ",", "images", ")", ")", ")", "/", "bs", "\n", "return", "context_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.losses.CrossEntropyLoss.forward": [[23, 29], ["out.size", "torch.mul", "torch.sum", "gt.float", "torch.log", "out.float"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "out", ",", "gt", ")", ":", "\n", "        ", "bs", "=", "out", ".", "size", "(", "0", ")", "\n", "#print(out.size(), gt.size())", "\n", "loss", "=", "-", "torch", ".", "mul", "(", "gt", ".", "float", "(", ")", ",", "torch", ".", "log", "(", "out", ".", "float", "(", ")", "+", "1e-7", ")", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "bs", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.losses.completion_network_loss": [[4, 9], ["input.size", "torch.sum", "torch.abs"], "function", ["None"], ["def", "completion_network_loss", "(", "input", ",", "output", ",", "mask", ")", ":", "\n", "    ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "output", "*", "mask", "-", "input", "*", "mask", ")", ")", "/", "bs", "\n", "#return mse_loss(output * mask, input * mask)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.losses.noise_loss": [[10, 15], ["torch.mean", "V", "V", "torch.abs"], "function", ["None"], ["", "def", "noise_loss", "(", "V", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "feat1", "=", "V", "(", "img1", ")", "[", "0", "]", "\n", "feat2", "=", "V", "(", "img2", ")", "[", "0", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "feat1", "-", "feat2", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.FaceNet.__init__": [[10, 18], ["torch.Module.__init__", "facenet.IR_50_112", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_50_112"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "FaceNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "IR_50_112", "(", "(", "112", ",", "112", ")", ")", "\n", "self", ".", "feat_dim", "=", "512", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.FaceNet.forward": [[19, 26], ["facenet.FaceNet.feature", "feat.view.view.view", "facenet.FaceNet.fc_layer", "torch.max", "torch.max", "torch.max", "torch.max", "iden.view.view.view", "feat.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feature", "(", "x", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc_layer", "(", "feat", ")", "\n", "__", ",", "iden", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "1", ")", "\n", "iden", "=", "iden", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "feat", ",", "out", ",", "iden", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.FaceNet64.__init__": [[28, 42], ["torch.Module.__init__", "facenet.IR_50_64", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "facenet.Flatten", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_50_64"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "FaceNet64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "IR_50_64", "(", "(", "64", ",", "64", ")", ")", "\n", "self", ".", "feat_dim", "=", "512", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.FaceNet64.forward": [[43, 51], ["facenet.FaceNet64.feature", "facenet.FaceNet64.output_layer", "feat.view.view.view", "facenet.FaceNet64.fc_layer", "torch.max", "torch.max", "torch.max", "torch.max", "iden.view.view.view", "feat.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feature", "(", "x", ")", "\n", "feat", "=", "self", ".", "output_layer", "(", "feat", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc_layer", "(", "feat", ")", "\n", "__", ",", "iden", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "1", ")", "\n", "iden", "=", "iden", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "feat", ",", "out", ",", "iden", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Flatten.forward": [[53, 55], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.SEModule.__init__": [[65, 78], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "\n", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "\n", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.SEModule.forward": [[79, 88], ["facenet.SEModule.avg_pool", "facenet.SEModule.fc1", "facenet.SEModule.relu", "facenet.SEModule.fc2", "facenet.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.bottleneck_IR.__init__": [[91, 102], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.bottleneck_IR.forward": [[103, 108], ["facenet.bottleneck_IR.shortcut_layer", "facenet.bottleneck_IR.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.bottleneck_IR_SE.__init__": [[111, 126], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "facenet.SEModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.bottleneck_IR_SE.forward": [[128, 133], ["facenet.bottleneck_IR_SE.shortcut_layer", "facenet.bottleneck_IR_SE.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone64.__init__": [[171, 201], ["torch.nn.Module.__init__", "facenet.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "facenet.Backbone64._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "facenet.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_blocks", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ")", ":", "\n", "        ", "super", "(", "Backbone64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "[", "0", "]", "in", "[", "64", "]", ",", "\"input_size should be [112, 112] or [224, 224]\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "\n", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "14", "*", "14", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone64.forward": [[202, 207], ["facenet.Backbone64.input_layer", "facenet.Backbone64.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone64._initialize_weights": [[208, 224], ["facenet.Backbone64.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112.__init__": [[226, 257], ["torch.nn.Module.__init__", "facenet.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "facenet.Backbone112._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "facenet.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_blocks", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ")", ":", "\n", "        ", "super", "(", "Backbone112", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "[", "0", "]", "in", "[", "112", "]", ",", "\"input_size should be [112, 112] or [224, 224]\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "\n", "if", "input_size", "[", "0", "]", "==", "112", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112.forward": [[258, 264], ["facenet.Backbone112.input_layer", "facenet.Backbone112.body", "facenet.Backbone112.output_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.Backbone112._initialize_weights": [[265, 281], ["facenet.Backbone112.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.l2_norm": [[57, 62], ["torch.norm", "torch.norm", "torch.div", "torch.div"], "function", ["None"], ["", "", "def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block": [[139, 142], ["facenet.Bottleneck", "facenet.Bottleneck", "range"], "function", ["None"], ["", "def", "get_block", "(", "in_channel", ",", "depth", ",", "num_units", ",", "stride", "=", "2", ")", ":", "\n", "\n", "    ", "return", "[", "Bottleneck", "(", "in_channel", ",", "depth", ",", "stride", ")", "]", "+", "[", "Bottleneck", "(", "depth", ",", "depth", ",", "1", ")", "for", "i", "in", "range", "(", "num_units", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_blocks": [[144, 168], ["facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block", "facenet.get_block"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.get_block"], ["", "def", "get_blocks", "(", "num_layers", ")", ":", "\n", "    ", "if", "num_layers", "==", "50", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "4", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "14", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "13", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "30", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "8", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "36", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_50_64": [[283, 289], ["facenet.Backbone64"], "function", ["None"], ["", "", "", "", "", "def", "IR_50_64", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone64", "(", "input_size", ",", "50", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_50_112": [[290, 296], ["facenet.Backbone112"], "function", ["None"], ["", "def", "IR_50_112", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone112", "(", "input_size", ",", "50", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_101": [[298, 304], ["Backbone"], "function", ["None"], ["", "def", "IR_101", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-101 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "100", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_152_64": [[306, 312], ["facenet.Backbone64"], "function", ["None"], ["", "def", "IR_152_64", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone64", "(", "input_size", ",", "152", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_152_112": [[313, 319], ["facenet.Backbone112"], "function", ["None"], ["", "def", "IR_152_112", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone112", "(", "input_size", ",", "152", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_SE_50": [[321, 327], ["Backbone"], "function", ["None"], ["", "def", "IR_SE_50", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "50", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_SE_101": [[329, 335], ["Backbone"], "function", ["None"], ["", "def", "IR_SE_101", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-101 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "100", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.facenet.IR_SE_152": [[337, 343], ["Backbone"], "function", ["None"], ["", "def", "IR_SE_152", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "152", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.train_gan.freeze": [[16, 19], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["def", "freeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.train_gan.unfreeze": [[20, 23], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["", "", "def", "unfreeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.train_gan.gradient_penalty": [[24, 37], ["torch.rand().cuda", "z.cuda.cuda", "DG", "[].view", "z.cuda.size", "x.size", "torch.rand", "x.dim", "torch.autograd.grad", "[].view.norm", "torch.ones().cuda", "torch.ones", "DG.size"], "function", ["None"], ["", "", "def", "gradient_penalty", "(", "x", ",", "y", ")", ":", "\n", "# interpolation", "\n", "    ", "shape", "=", "[", "x", ".", "size", "(", "0", ")", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "z", "=", "x", "+", "alpha", "*", "(", "y", "-", "x", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "o", "=", "DG", "(", "z", ")", "\n", "g", "=", "grad", "(", "o", ",", "z", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "o", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gp", "=", "(", "(", "g", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_context.freeze": [[22, 25], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["def", "freeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_context.unfreeze": [[26, 29], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["", "", "def", "unfreeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_context.test_model": [[30, 43], ["torch.no_grad", "utils.sample_random_batch().to", "utils.get_center_mask", "torch.cat", "model_cn", "torch.cat", "os.path.join", "utils.save_tensor_images", "sample_random_batch().to.size", "sample_random_batch().to.size", "utils.sample_random_batch", "sample_random_batch().to.cpu", "x_mask.cpu", "model_cn.cpu"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.get_center_mask", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.save_tensor_images", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.sample_random_batch"], ["", "", "def", "test_model", "(", "test_set", ",", "model_cn", ",", "iter_times", ")", ":", "\n", "    ", "global", "mpv", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#print(len(test_set))", "\n", "        ", "x", "=", "sample_random_batch", "(", "test_set", ",", "batch_size", "=", "num_test", ")", ".", "to", "(", "device", ")", "\n", "img_size", ",", "bs", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "0", ")", "\n", "mask", "=", "get_center_mask", "(", "img_size", ",", "bs", ")", "\n", "x_mask", "=", "x", "-", "x", "*", "mask", "+", "mpv", "*", "mask", "\n", "input", "=", "torch", ".", "cat", "(", "(", "x_mask", ",", "mask", ")", ",", "dim", "=", "1", ")", "\n", "output", "=", "model_cn", "(", "input", ")", "\n", "imgs", "=", "torch", ".", "cat", "(", "(", "x", ".", "cpu", "(", ")", ",", "x_mask", ".", "cpu", "(", ")", ",", "output", ".", "cpu", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "result_img_dir", ",", "'step%d.png'", "%", "iter_times", ")", "\n", "save_tensor_images", "(", "imgs", ",", "imgpath", ",", "nrow", "=", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_context.gradient_penalty_dl": [[44, 57], ["torch.rand().cuda", "z.cuda.cuda", "DL", "[].view", "z.cuda.size", "x.size", "torch.rand", "x.dim", "torch.autograd.grad", "[].view.norm", "torch.ones().cuda", "torch.ones", "o.size"], "function", ["None"], ["", "", "def", "gradient_penalty_dl", "(", "x", ",", "y", ")", ":", "\n", "# interpolation", "\n", "    ", "shape", "=", "[", "x", ".", "size", "(", "0", ")", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "z", "=", "x", "+", "alpha", "*", "(", "y", "-", "x", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "__", ",", "o", "=", "DL", "(", "z", ")", "\n", "g", "=", "grad", "(", "o", ",", "z", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "o", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gp", "=", "(", "(", "g", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_context.gradient_penalty_dg": [[58, 71], ["torch.rand().cuda", "z.cuda.cuda", "DG", "[].view", "z.cuda.size", "x.size", "torch.rand", "x.dim", "torch.autograd.grad", "[].view.norm", "torch.ones().cuda", "torch.ones", "o.size"], "function", ["None"], ["", "def", "gradient_penalty_dg", "(", "x", ",", "y", ")", ":", "\n", "# interpolation", "\n", "    ", "shape", "=", "[", "x", ".", "size", "(", "0", ")", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "z", "=", "x", "+", "alpha", "*", "(", "y", "-", "x", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "__", ",", "o", "=", "DG", "(", "z", ")", "\n", "g", "=", "grad", "(", "o", ",", "z", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "o", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gp", "=", "(", "(", "g", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DGWGAN32.__init__": [[6, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discri.DGWGAN32.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "1", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DGWGAN32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "self", ".", "layer2", "=", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", "\n", "self", ".", "layer3", "=", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Conv2d", "(", "dim", "*", "4", ",", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DGWGAN32.forward": [[21, 28], ["discri.DGWGAN32.layer1", "discri.DGWGAN32.layer2", "discri.DGWGAN32.layer3", "discri.DGWGAN32.layer4", "y.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "y", "=", "self", ".", "layer4", "(", "feat3", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DGWGAN.__init__": [[30, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discri.DGWGAN.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "3", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DGWGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "ls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", ",", "\n", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", ",", "\n", "conv_ln_lrelu", "(", "dim", "*", "4", ",", "dim", "*", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim", "*", "8", ",", "1", ",", "4", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DGWGAN.forward": [[46, 54], ["discri.DGWGAN.layer1", "discri.DGWGAN.layer2", "discri.DGWGAN.layer3", "discri.DGWGAN.layer4", "discri.DGWGAN.layer5", "y.view.view.view"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "ls", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", "\n", "return", "y", "\n", "\n", "", "", "class", "DLWGAN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "3", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DLWGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DLWGAN.__init__": [[56, 71], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discri.DLWGAN.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "self", ".", "layer2", "=", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", "\n", "self", ".", "layer3", "=", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Conv2d", "(", "dim", "*", "4", ",", "1", ",", "4", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DLWGAN.forward": [[73, 79], ["discri.DLWGAN.layer1", "discri.DLWGAN.layer2", "discri.DLWGAN.layer3", "discri.DLWGAN.layer4"], "methods", ["None"], ["feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "y", "=", "self", ".", "layer4", "(", "feat3", ")", "\n", "return", "y", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DiscriminatorWGANGP.__init__": [[81, 98], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "discri.DiscriminatorWGANGP.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], []], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.discri.DiscriminatorWGANGP.forward": [[99, 103], ["discri.DiscriminatorWGANGP.ls", "y.view.view.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.Generator.__init__": [[5, 24], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.Generator.__init__.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "8", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "8", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "8", ",", "dim", "*", "4", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "2", ",", "dim", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "3", ",", "5", ",", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.Generator.forward": [[25, 30], ["generator.Generator.l1", "generator.Generator.view", "generator.Generator.l2_5", "generator.Generator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.GeneratorMNIST.__init__": [[32, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.GeneratorMNIST.__init__.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "GeneratorMNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "4", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "4", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "2", ",", "dim", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "1", ",", "5", ",", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.GeneratorMNIST.forward": [[51, 56], ["generator.GeneratorMNIST.l1", "generator.GeneratorMNIST.view", "generator.GeneratorMNIST.l2_5", "generator.GeneratorMNIST.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.GeneratorCXR.__init__": [[58, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.GeneratorCXR.__init__.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CompletionNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# input_shape: (None, 4, img_h, img_w)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 64, img_h, img_w)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.GeneratorCXR.forward": [[78, 83], ["generator.GeneratorCXR.l1", "generator.GeneratorCXR.view", "generator.GeneratorCXR.l2_5", "generator.GeneratorCXR.size"], "methods", ["None"], ["self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act5", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act6", "=", "nn", ".", "ReLU", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.CompletionNetwork.__init__": [[85, 154], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act7", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "padding", "=", "4", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act8", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "8", ",", "padding", "=", "8", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act9", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "16", ",", "padding", "=", "16", ")", "\n", "self", ".", "bn10", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act10", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn11", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act11", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn12", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act12", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 256, img_h//4, img_w//4)", "\n", "self", ".", "deconv13", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn13", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act13", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn14", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act14", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "deconv15", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn15", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act15", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 64, img_h, img_w)", "\n", "self", ".", "conv16", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn16", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act16", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 32, img_h, img_w)", "\n", "self", ".", "conv17", "=", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "act17", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "# output_shape: (None, 3, img_h. img_w)", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn1", "(", "self", ".", "act1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "act2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "act3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "self", ".", "act4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "act5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn6", "(", "self", ".", "act6", "(", "self", ".", "conv6", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn7", "(", "self", ".", "act7", "(", "self", ".", "conv7", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn8", "(", "self", ".", "act8", "(", "self", ".", "conv8", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn9", "(", "self", ".", "act9", "(", "self", ".", "conv9", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn10", "(", "self", ".", "act10", "(", "self", ".", "conv10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn11", "(", "self", ".", "act11", "(", "self", ".", "conv11", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn12", "(", "self", ".", "act12", "(", "self", ".", "conv12", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn13", "(", "self", ".", "act13", "(", "self", ".", "deconv13", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn14", "(", "self", ".", "act14", "(", "self", ".", "conv14", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn15", "(", "self", ".", "act15", "(", "self", ".", "deconv15", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn16", "(", "self", ".", "act16", "(", "self", ".", "conv16", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "act17", "(", "self", ".", "conv17", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n", "", "", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.CompletionNetwork.forward": [[156, 175], ["generator.CompletionNetwork.bn1", "generator.CompletionNetwork.bn2", "generator.CompletionNetwork.bn3", "generator.CompletionNetwork.bn4", "generator.CompletionNetwork.bn5", "generator.CompletionNetwork.bn6", "generator.CompletionNetwork.bn7", "generator.CompletionNetwork.bn8", "generator.CompletionNetwork.bn9", "generator.CompletionNetwork.bn10", "generator.CompletionNetwork.bn11", "generator.CompletionNetwork.bn12", "generator.CompletionNetwork.bn13", "generator.CompletionNetwork.bn14", "generator.CompletionNetwork.bn15", "generator.CompletionNetwork.bn16", "generator.CompletionNetwork.act17", "generator.CompletionNetwork.act1", "generator.CompletionNetwork.act2", "generator.CompletionNetwork.act3", "generator.CompletionNetwork.act4", "generator.CompletionNetwork.act5", "generator.CompletionNetwork.act6", "generator.CompletionNetwork.act7", "generator.CompletionNetwork.act8", "generator.CompletionNetwork.act9", "generator.CompletionNetwork.act10", "generator.CompletionNetwork.act11", "generator.CompletionNetwork.act12", "generator.CompletionNetwork.act13", "generator.CompletionNetwork.act14", "generator.CompletionNetwork.act15", "generator.CompletionNetwork.act16", "generator.CompletionNetwork.conv17", "generator.CompletionNetwork.conv1", "generator.CompletionNetwork.conv2", "generator.CompletionNetwork.conv3", "generator.CompletionNetwork.conv4", "generator.CompletionNetwork.conv5", "generator.CompletionNetwork.conv6", "generator.CompletionNetwork.conv7", "generator.CompletionNetwork.conv8", "generator.CompletionNetwork.conv9", "generator.CompletionNetwork.conv10", "generator.CompletionNetwork.conv11", "generator.CompletionNetwork.conv12", "generator.CompletionNetwork.deconv13", "generator.CompletionNetwork.conv14", "generator.CompletionNetwork.deconv15", "generator.CompletionNetwork.conv16"], "methods", ["None"], ["", "class", "ContextNetwork", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ContextNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# input_shape: (None, 4, img_h, img_w)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 32, img_h, img_w)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 64, img_h//2, img_w//2)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//2, img_w//2)", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.ContextNetwork.__init__": [[184, 226], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act7", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "padding", "=", "4", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act8", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "8", ",", "padding", "=", "8", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act9", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "16", ",", "padding", "=", "16", ")", "\n", "self", ".", "bn10", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act10", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn1", "(", "self", ".", "act1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "act2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "act3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn4", "(", "self", ".", "act4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn5", "(", "self", ".", "act5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn6", "(", "self", ".", "act6", "(", "self", ".", "conv6", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn7", "(", "self", ".", "act7", "(", "self", ".", "conv7", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn8", "(", "self", ".", "act8", "(", "self", ".", "conv8", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn9", "(", "self", ".", "act9", "(", "self", ".", "conv9", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn10", "(", "self", ".", "act10", "(", "self", ".", "conv10", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n", "", "", "class", "IdentityGenerator", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "IdentityGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "8", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "8", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "8", ",", "dim", "*", "4", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.ContextNetwork.forward": [[229, 241], ["generator.ContextNetwork.bn1", "generator.ContextNetwork.bn2", "generator.ContextNetwork.bn3", "generator.ContextNetwork.bn4", "generator.ContextNetwork.bn5", "generator.ContextNetwork.bn6", "generator.ContextNetwork.bn7", "generator.ContextNetwork.bn8", "generator.ContextNetwork.bn9", "generator.ContextNetwork.bn10", "generator.ContextNetwork.act1", "generator.ContextNetwork.act2", "generator.ContextNetwork.act3", "generator.ContextNetwork.act4", "generator.ContextNetwork.act5", "generator.ContextNetwork.act6", "generator.ContextNetwork.act7", "generator.ContextNetwork.act8", "generator.ContextNetwork.act9", "generator.ContextNetwork.act10", "generator.ContextNetwork.conv1", "generator.ContextNetwork.conv2", "generator.ContextNetwork.conv3", "generator.ContextNetwork.conv4", "generator.ContextNetwork.conv5", "generator.ContextNetwork.conv6", "generator.ContextNetwork.conv7", "generator.ContextNetwork.conv8", "generator.ContextNetwork.conv9", "generator.ContextNetwork.conv10"], "methods", ["None"], ["        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n", "\n", "", "", "class", "InversionNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "out_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "InversionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# input [4, h, w]  output [256, h // 4, w // 4]", "\n", "self", ".", "ContextNetwork", "=", "ContextNetwork", "(", ")", "\n", "# input [z_dim] output[128, 16, 16]", "\n", "self", ".", "IdentityGenerator", "=", "IdentityGenerator", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.IdentityGenerator.__init__": [[244, 254], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.dconv_bn_relu", "generator.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["self", ".", "out_dim", "=", "out_dim", "\n", "\n", "self", ".", "Dconv", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "self", ".", "dim", ",", "self", ".", "out_dim", ")", ",", "\n", "dconv_bn_relu", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", "//", "2", ")", ")", "\n", "\n", "self", ".", "Conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", "//", "2", ",", "self", ".", "out_dim", "//", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", "//", "4", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.IdentityGenerator.forward": [[255, 260], ["generator.IdentityGenerator.l1", "generator.IdentityGenerator.view", "generator.IdentityGenerator.l2_5", "generator.IdentityGenerator.size"], "methods", ["None"], ["nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "# x.shape [4, h, w]  z.shape [100]", "\n", "        ", "x", ",", "z", "=", "inp", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.InversionNet.__init__": [[262, 283], ["torch.Module.__init__", "generator.ContextNetwork", "generator.IdentityGenerator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "generator.dconv_bn_relu", "generator.dconv_bn_relu", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["identity_info", "=", "self", ".", "IdentityGenerator", "(", "z", ")", "\n", "# []", "\n", "y", "=", "torch", ".", "cat", "(", "(", "context_info", ",", "identity_info", ")", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "Dconv", "(", "y", ")", "\n", "y", "=", "self", ".", "Conv", "(", "y", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.InversionNet.forward": [[285, 296], ["generator.InversionNet.ContextNetwork", "generator.InversionNet.IdentityGenerator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.InversionNet.Dconv", "generator.InversionNet.Conv"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu": [[176, 182], ["torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act5", "=", "nn", ".", "ReLU", "(", ")", "\n", "# input_shape: (None, 128, img_h//4, img_w//4)", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "act6", "=", "nn", ".", "ReLU", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_inv.freeze": [[21, 24], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["def", "freeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_inv.unfreeze": [[25, 28], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["", "", "def", "unfreeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_inv.loadnet": [[29, 61], ["generator.ContextNetwork().cuda", "generator.IdentityGenerator().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "load_my_state_dict", "load_my_state_dict", "net.state_dict", "torch.nn.DataParallel.named_parameters", "net.named_parameters", "torch.nn.DataParallel.named_parameters", "net.named_parameters", "torch.load", "torch.load", "C_list.append", "I_list.append", "generator.ContextNetwork", "generator.IdentityGenerator", "own_state[].copy_", "own_state[].copy_", "name.split", "name.split"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_my_state_dict", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_my_state_dict"], ["", "", "def", "loadnet", "(", "net", ")", ":", "\n", "    ", "CNet", "=", "ContextNetwork", "(", ")", ".", "cuda", "(", ")", "\n", "IdenG", "=", "IdentityGenerator", "(", ")", ".", "cuda", "(", ")", "\n", "CNet", "=", "torch", ".", "nn", ".", "DataParallel", "(", "CNet", ")", "\n", "IdenG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "IdenG", ")", "\n", "\n", "c_path", "=", "\"./result_model/Context_G.tar\"", "\n", "i_path", "=", "\"./result_model/identity_G.tar\"", "\n", "ckp_c", "=", "torch", ".", "load", "(", "c_path", ")", "[", "'state_dict'", "]", "\n", "ckp_i", "=", "torch", ".", "load", "(", "i_path", ")", "[", "'state_dict'", "]", "\n", "\n", "load_my_state_dict", "(", "CNet", ",", "ckp_c", ")", "\n", "load_my_state_dict", "(", "IdenG", ",", "ckp_i", ")", "\n", "\n", "own_state", "=", "net", ".", "state_dict", "(", ")", "\n", "C_list", ",", "I_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "n", ",", "p", "in", "CNet", ".", "named_parameters", "(", ")", ":", "\n", "        ", "C_list", ".", "append", "(", "[", "n", ",", "p", "]", ")", "\n", "", "pos", "=", "0", "\n", "for", "name", ",", "p", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", ".", "split", "(", "'.'", ")", "[", "1", "]", "==", "\"ContextNetwork\"", ":", "\n", "            ", "own_state", "[", "name", "]", ".", "copy_", "(", "C_list", "[", "pos", "]", "[", "1", "]", ".", "data", ")", "\n", "pos", "+=", "1", "\n", "\n", "", "", "for", "n", ",", "p", "in", "IdenG", ".", "named_parameters", "(", ")", ":", "\n", "        ", "I_list", ".", "append", "(", "[", "n", ",", "p", "]", ")", "\n", "", "pos", "=", "0", "\n", "for", "name", ",", "p", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", ".", "split", "(", "'.'", ")", "[", "1", "]", "==", "\"IdentityGenerator\"", ":", "\n", "            ", "own_state", "[", "name", "]", ".", "copy_", "(", "I_list", "[", "pos", "]", "[", "1", "]", ".", "data", ")", "\n", "pos", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_inv.test_model": [[63, 79], ["torch.no_grad", "sample_random_batch().to", "get_mask", "torch.cat", "torch.randn().cuda", "net", "torch.cat", "os.path.join", "save_tensor_images", "sample_random_batch().to.size", "sample_random_batch().to.size", "sample_random_batch", "torch.randn", "sample_random_batch().to.cpu", "x_mask.cpu", "net.cpu"], "function", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.save_tensor_images", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.Celeba.utils.sample_random_batch"], ["", "", "", "def", "test_model", "(", "test_set", ",", "net", ",", "iter_times", ")", ":", "\n", "    ", "global", "mpv", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#print(len(test_set))", "\n", "        ", "x", "=", "sample_random_batch", "(", "test_set", ",", "batch_size", "=", "32", ")", ".", "to", "(", "device", ")", "\n", "\n", "img_size", ",", "bs", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "0", ")", "\n", "mask", "=", "get_mask", "(", "img_size", ",", "bs", ")", "\n", "x_mask", "=", "x", "-", "x", "*", "mask", "+", "mpv", "*", "mask", "\n", "inp", "=", "torch", ".", "cat", "(", "(", "x_mask", ",", "mask", ")", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "randn", "(", "bs", ",", "z_dim", ")", ".", "cuda", "(", ")", "\n", "output", "=", "net", "(", "(", "inp", ",", "z", ")", ")", "\n", "#completed = poisson_blend(x, output, mask)", "\n", "imgs", "=", "torch", ".", "cat", "(", "(", "x", ".", "cpu", "(", ")", ",", "x_mask", ".", "cpu", "(", ")", ",", "output", ".", "cpu", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "result_img_dir", ",", "'imgs_step%d.png'", "%", "iter_times", ")", "\n", "save_tensor_images", "(", "imgs", ",", "imgpath", ",", "nrow", "=", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_inv.gradient_penalty_dl": [[80, 93], ["torch.rand().cuda", "z.cuda.cuda", "DL", "[].view", "z.cuda.size", "x.size", "torch.rand", "x.dim", "torch.autograd.grad", "[].view.norm", "torch.ones().cuda", "torch.ones", "DL.size"], "function", ["None"], ["", "", "def", "gradient_penalty_dl", "(", "x", ",", "y", ")", ":", "\n", "# interpolation", "\n", "    ", "shape", "=", "[", "x", ".", "size", "(", "0", ")", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "z", "=", "x", "+", "alpha", "*", "(", "y", "-", "x", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "o", "=", "DL", "(", "z", ")", "\n", "g", "=", "grad", "(", "o", ",", "z", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "o", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gp", "=", "(", "(", "g", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.train_inv.gradient_penalty_dg": [[94, 107], ["torch.rand().cuda", "z.cuda.cuda", "DG", "[].view", "z.cuda.size", "x.size", "torch.rand", "x.dim", "torch.autograd.grad", "[].view.norm", "torch.ones().cuda", "torch.ones", "DG.size"], "function", ["None"], ["", "def", "gradient_penalty_dg", "(", "x", ",", "y", ")", ":", "\n", "# interpolation", "\n", "    ", "shape", "=", "[", "x", ".", "size", "(", "0", ")", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "z", "=", "x", "+", "alpha", "*", "(", "y", "-", "x", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "o", "=", "DG", "(", "z", ")", "\n", "g", "=", "grad", "(", "o", ",", "z", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "o", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gp", "=", "(", "(", "g", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gp", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.losses.ContextLoss.forward": [[19, 23], ["gen.size", "torch.sum", "torch.abs", "torch.mul", "torch.mul"], "methods", ["None"], ["context_loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "mul", "(", "mask", ",", "gen", ")", "-", "torch", ".", "mul", "(", "mask", ",", "images", ")", ")", ")", "/", "bs", "\n", "return", "context_loss", "\n", "\n", "", "", "class", "CrossEntropyLoss", "(", "_Loss", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "out", ",", "gt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.losses.CrossEntropyLoss.forward": [[25, 31], ["out.size", "torch.mul", "torch.sum", "gt.float", "torch.log", "out.float"], "methods", ["None"], ["#print(out.size(), gt.size())", "\n", "loss", "=", "-", "torch", ".", "mul", "(", "gt", ".", "float", "(", ")", ",", "torch", ".", "log", "(", "out", ".", "float", "(", ")", "+", "1e-7", ")", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "bs", "\n", "return", "loss", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.losses.FeatLoss.forward": [[33, 40], ["len", "torch.zeros().cuda", "range", "torch.mean", "torch.zeros", "torch.abs"], "methods", ["None"], ["\n", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.losses.completion_network_loss": [[4, 9], ["input.size", "torch.sum", "torch.abs"], "function", ["None"], ["def", "completion_network_loss", "(", "input", ",", "output", ",", "mask", ")", ":", "\n", "    ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "output", "*", "mask", "-", "input", "*", "mask", ")", ")", "/", "bs", "\n", "#return mse_loss(output * mask, input * mask)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.losses.noise_loss": [[10, 17], ["V", "V", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "noise_loss", "(", "V", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "feat1", "=", "V", "(", "img1", ")", "[", "0", "]", "\n", "feat2", "=", "V", "(", "img2", ")", "[", "0", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "feat1", "-", "feat2", ")", ")", "\n", "return", "loss", "\n", "\n", "", "class", "ContextLoss", "(", "_Loss", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "mask", ",", "gen", ",", "images", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.classify.Flatten.forward": [[12, 14], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.classify.MCNN.__init__": [[16, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "feature", "=", "model", ".", "features", "\n", "self", ".", "feat_dim", "=", "512", "*", "2", "*", "2", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "feat_dim", ")", "\n", "self", ".", "bn", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature", "=", "self", ".", "feature", "(", "x", ")", "\n", "feature", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feature", "=", "self", ".", "bn", "(", "feature", ")", "\n", "res", "=", "self", ".", "fc_layer", "(", "feature", ")", "\n", "\n", "return", "[", "feature", ",", "res", "]", "\n", "\n", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.classify.MCNN.forward": [[35, 40], ["classify.MCNN.feature", "feature.view.view.view", "classify.MCNN.fc_layer", "feature.view.view.size"], "methods", ["None"], ["        ", "feature", "=", "self", ".", "feature", "(", "x", ")", "\n", "feature", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feature", "=", "self", ".", "bn", "(", "feature", ")", "\n", "res", "=", "self", ".", "fc_layer", "(", "feature", ")", "\n", "out", "=", "F", ".", "softmax", "(", "res", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.classify.SCNN.__init__": [[42, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["\n", "", "", "class", "CrossEntropyLoss", "(", "_Loss", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "out", ",", "gt", ",", "mode", "=", "\"reg\"", ")", ":", "\n", "        ", "bs", "=", "out", ".", "size", "(", "0", ")", "\n", "loss", "=", "-", "torch", ".", "mul", "(", "gt", ".", "float", "(", ")", ",", "torch", ".", "log", "(", "out", ".", "float", "(", ")", "+", "1e-7", ")", ")", "\n", "if", "mode", "==", "\"dp\"", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "bs", "\n", "", "return", "loss", "\n", "\n", "", "", "class", "BinaryLoss", "(", "_Loss", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "out", ",", "gt", ")", ":", "\n", "        ", "bs", "=", "out", ".", "size", "(", "0", ")", "\n", "loss", "=", "-", "(", "gt", "*", "torch", ".", "log", "(", "out", ".", "float", "(", ")", "+", "1e-7", ")", "+", "(", "1", "-", "gt", ")", "*", "torch", ".", "log", "(", "1", "-", "out", ".", "float", "(", ")", "+", "1e-7", ")", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "loss", "\n", "\n", "", "", "class", "FaceNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "FaceNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature", "=", "evolve", ".", "IR_50_112", "(", "(", "112", ",", "112", ")", ")", "\n", "self", ".", "feat_dim", "=", "512", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.classify.SCNN.forward": [[67, 72], ["classify.SCNN.feature", "feature.view.view.view", "classify.SCNN.fc_layer", "feature.view.view.size"], "methods", ["None"], ["\n", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feature", "(", "x", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc_layer", "(", "feat", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.discri.DGWGAN32.__init__": [[6, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "discri.DGWGAN32.__init__.conv_ln_lrelu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "1", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "DGWGAN32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_ln_lrelu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "# Since there is no effective implementation of LayerNorm,", "\n", "# we use InstanceNorm2d instead of LayerNorm here.", "\n", "nn", ".", "InstanceNorm2d", "(", "out_dim", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "5", ",", "2", ",", "2", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "self", ".", "layer2", "=", "conv_ln_lrelu", "(", "dim", ",", "dim", "*", "2", ")", "\n", "self", ".", "layer3", "=", "conv_ln_lrelu", "(", "dim", "*", "2", ",", "dim", "*", "4", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Conv2d", "(", "dim", "*", "4", ",", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.discri.DGWGAN32.forward": [[21, 28], ["discri.DGWGAN32.layer1", "discri.DGWGAN32.layer2", "discri.DGWGAN32.layer3", "discri.DGWGAN32.layer4", "y.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "layer2", "(", "feat1", ")", "\n", "feat3", "=", "self", ".", "layer3", "(", "feat2", ")", "\n", "y", "=", "self", ".", "layer4", "(", "feat3", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.attack.inversion": [[11, 94], ["iden.view().long().cuda.view().long().cuda", "torch.CrossEntropyLoss().cuda", "G.eval", "D.eval", "T.eval", "E.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "print", "time.time", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "torch.randn().cuda().float", "torch.randn().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "range", "G", "torch.argmax().view", "torch.argmax().view", "range", "print", "iden[].item", "iden.view().long().cuda.view().long", "torch.CrossEntropyLoss", "G", "D", "nn.CrossEntropyLoss().cuda.", "Total_Loss.backward", "torch.zeros().cuda().float.clone", "torch.clamp().float", "torch.clamp().float", "Prior_Loss.item", "criterion.item", "T", "E", "iden[].item", "time.time", "max_iden[].item", "torch.randn().cuda", "torch.randn().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "T", "torch.clamp().float.grad.data.zero_", "D.mean", "G", "torch.argmax().view", "torch.argmax().view", "print", "torch.argmax", "torch.argmax", "score[].item", "max_score[].item", "eval_iden[].item", "iden.view().long().cuda.view", "torch.clamp", "torch.clamp", "torch.clamp().float.detach", "E", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.clamp().float.detach", "torch.argmax", "torch.argmax", "iden.view().long().cuda.eq().sum().item", "iden.view().long().cuda.eq().sum", "iden.view().long().cuda.eq", "torch.argmax().view.long"], "function", ["None"], ["def", "inversion", "(", "G", ",", "D", ",", "T", ",", "E", ",", "iden", ",", "lr", "=", "2e-2", ",", "momentum", "=", "0.9", ",", "lamda", "=", "100", ",", "iter_times", "=", "1500", ",", "clip_range", "=", "1", ")", ":", "\n", "\t", "iden", "=", "iden", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "bs", "=", "iden", ".", "shape", "[", "0", "]", "\n", "\n", "G", ".", "eval", "(", ")", "\n", "D", ".", "eval", "(", ")", "\n", "T", ".", "eval", "(", ")", "\n", "E", ".", "eval", "(", ")", "\n", "\n", "max_score", "=", "torch", ".", "zeros", "(", "bs", ")", "\n", "max_iden", "=", "torch", ".", "zeros", "(", "bs", ")", "\n", "z_hat", "=", "torch", ".", "zeros", "(", "bs", ",", "100", ")", "\n", "flag", "=", "torch", ".", "zeros", "(", "bs", ")", "\n", "\n", "for", "random_seed", "in", "range", "(", "5", ")", ":", "\n", "\t\t", "tf", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "z", "=", "torch", ".", "randn", "(", "bs", ",", "100", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "v", "=", "torch", ".", "zeros", "(", "bs", ",", "100", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "iter_times", ")", ":", "\n", "\t\t\t", "fake", "=", "G", "(", "z", ")", "\n", "label", "=", "D", "(", "fake", ")", "\n", "out", "=", "T", "(", "fake", ")", "[", "-", "1", "]", "\n", "\n", "if", "z", ".", "grad", "is", "not", "None", ":", "\n", "\t\t\t\t", "z", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "Prior_Loss", "=", "-", "label", ".", "mean", "(", ")", "\n", "Iden_Loss", "=", "criterion", "(", "out", ",", "iden", ")", "\n", "Total_Loss", "=", "Prior_Loss", "+", "lamda", "*", "Iden_Loss", "\n", "\n", "Total_Loss", ".", "backward", "(", ")", "\n", "\n", "v_prev", "=", "v", ".", "clone", "(", ")", "\n", "gradient", "=", "z", ".", "grad", ".", "data", "\n", "v", "=", "momentum", "*", "v", "-", "lr", "*", "gradient", "\n", "z", "=", "z", "+", "(", "-", "momentum", "*", "v_prev", "+", "(", "1", "+", "momentum", ")", "*", "v", ")", "\n", "z", "=", "torch", ".", "clamp", "(", "z", ".", "detach", "(", ")", ",", "-", "clip_range", ",", "clip_range", ")", ".", "float", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "Prior_Loss_val", "=", "Prior_Loss", ".", "item", "(", ")", "\n", "Iden_Loss_val", "=", "Iden_Loss", ".", "item", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "300", "==", "0", ":", "\n", "\t\t\t\t", "fake_img", "=", "G", "(", "z", ".", "detach", "(", ")", ")", "\n", "eval_prob", "=", "E", "(", "utils", ".", "low2high", "(", "fake_img", ")", ")", "[", "-", "1", "]", "\n", "eval_iden", "=", "torch", ".", "argmax", "(", "eval_prob", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "acc", "=", "iden", ".", "eq", "(", "eval_iden", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "*", "1.0", "/", "bs", "\n", "print", "(", "\"Iteration:{}\\tPrior Loss:{:.2f}\\tIden Loss:{:.2f}\\tAttack Acc:{:.2f}\"", ".", "format", "(", "i", "+", "1", ",", "Prior_Loss_val", ",", "Iden_Loss_val", ",", "acc", ")", ")", "\n", "\n", "", "", "fake", "=", "G", "(", "z", ")", "\n", "score", "=", "T", "(", "fake", ")", "[", "-", "1", "]", "\n", "eval_prob", "=", "E", "(", "utils", ".", "low2high", "(", "fake", ")", ")", "[", "-", "1", "]", "\n", "eval_iden", "=", "torch", ".", "argmax", "(", "eval_prob", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "\t\t\t", "gt", "=", "iden", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "score", "[", "i", ",", "i", "]", ".", "item", "(", ")", ">", "max_score", "[", "i", "]", ".", "item", "(", ")", ":", "\n", "\t\t\t\t", "max_score", "[", "i", "]", "=", "score", "[", "i", ",", "i", "]", "\n", "max_iden", "[", "i", "]", "=", "eval_iden", "[", "i", "]", "\n", "z_hat", "[", "i", ",", ":", "]", "=", "z", "[", "i", ",", ":", "]", "\n", "", "if", "eval_iden", "[", "i", "]", ".", "item", "(", ")", "==", "gt", ":", "\n", "\t\t\t\t", "cnt", "+=", "1", "\n", "flag", "[", "i", "]", "=", "1", "\n", "\n", "", "", "interval", "=", "time", ".", "time", "(", ")", "-", "tf", "\n", "print", "(", "\"Time:{:.2f}\\tAcc:{:.2f}\\t\"", ".", "format", "(", "interval", ",", "cnt", "*", "1.0", "/", "100", ")", ")", "\n", "\n", "", "correct", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "\t\t", "gt", "=", "iden", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "max_iden", "[", "i", "]", ".", "item", "(", ")", "==", "gt", ":", "\n", "\t\t\t", "correct", "+=", "1", "\n", "\n", "", "", "correct_5", "=", "torch", ".", "sum", "(", "flag", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.generator.GeneratorMNIST.__init__": [[5, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "generator.GeneratorMNIST.__init__.dconv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.mask.generator.dconv_bn_relu"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "100", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "dconv_bn_relu", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "5", ",", "2", ",", "\n", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "dim", "*", "8", "*", "4", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dim", "*", "8", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l2_5", "=", "nn", ".", "Sequential", "(", "\n", "dconv_bn_relu", "(", "dim", "*", "8", ",", "dim", "*", "4", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "4", ",", "dim", "*", "2", ")", ",", "\n", "dconv_bn_relu", "(", "dim", "*", "2", ",", "dim", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "3", ",", "5", ",", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.generator.GeneratorMNIST.forward": [[24, 29], ["generator.GeneratorMNIST.l1", "generator.GeneratorMNIST.view", "generator.GeneratorMNIST.l2_5", "generator.GeneratorMNIST.size"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "l1", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "y", "=", "self", ".", "l2_5", "(", "y", ")", "\n", "return", "y", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.__init__": [[14, 25], ["os.listdir", "dataloader.GrayFolder.get_processor", "dataloader.GrayFolder.get_list", "dataloader.GrayFolder.load_img", "len", "print", "str"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_list", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.load_img"], ["\n", "mnist_path", "=", "\"./data/MNIST\"", "\n", "mnist_img_path", "=", "\"./data/MNIST_imgs\"", "\n", "cifar_path", "=", "\"./data/CIFAR\"", "\n", "cifar_img_path", "=", "\"./data/CIFAR_imgs\"", "\n", "os", ".", "makedirs", "(", "mnist_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "mnist_img_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "class", "ImageFolder", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "file_path", ",", "mode", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mode", "=", "mode", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_list": [[26, 35], ["open", "open.readlines", "line.strip().split", "name_list.append", "label_list.append", "int", "line.strip"], "methods", ["None"], ["self", ".", "img_path", "=", "args", "[", "\"dataset\"", "]", "[", "\"img_path\"", "]", "\n", "self", ".", "model_name", "=", "args", "[", "\"dataset\"", "]", "[", "\"model_name\"", "]", "\n", "self", ".", "img_list", "=", "os", ".", "listdir", "(", "self", ".", "img_path", ")", "\n", "self", ".", "processor", "=", "self", ".", "get_processor", "(", ")", "\n", "self", ".", "name_list", ",", "self", ".", "label_list", "=", "self", ".", "get_list", "(", "file_path", ")", "\n", "self", ".", "image_list", "=", "self", ".", "load_img", "(", ")", "\n", "self", ".", "num_img", "=", "len", "(", "self", ".", "image_list", ")", "\n", "self", ".", "n_classes", "=", "args", "[", "\"dataset\"", "]", "[", "\"n_classes\"", "]", "\n", "print", "(", "\"Load \"", "+", "str", "(", "self", ".", "num_img", ")", "+", "\" images\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.load_img": [[37, 46], ["enumerate", "img_name.endswith", "PIL.Image.open", "img.convert.convert.convert", "img_list.append"], "methods", ["None"], ["        ", "name_list", ",", "label_list", "=", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "file_path", ",", "\"r\"", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "img_name", ",", "iden", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "name_list", ".", "append", "(", "img_name", ")", "\n", "label_list", ".", "append", "(", "int", "(", "iden", ")", ")", "\n", "\n", "", "return", "name_list", ",", "label_list", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor": [[47, 57], ["proc.append", "proc.append", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "load_img", "(", "self", ")", ":", "\n", "        ", "img_list", "=", "[", "]", "\n", "for", "i", ",", "img_name", "in", "enumerate", "(", "self", ".", "name_list", ")", ":", "\n", "            ", "if", "img_name", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "                ", "path", "=", "self", ".", "img_path", "+", "\"/\"", "+", "img_name", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img_list", ".", "append", "(", "img", ")", "\n", "", "", "return", "img_list", "\n", "\n", "", "def", "get_processor", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.__getitem__": [[58, 65], ["dataloader.GrayFolder.get_processor", "dataloader.GrayFolder."], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.get_processor"], ["        ", "if", "self", ".", "model_name", "==", "\"FaceNet\"", ":", "\n", "            ", "re_size", "=", "112", "\n", "", "else", ":", "\n", "            ", "re_size", "=", "64", "\n", "\n", "", "crop_size", "=", "108", "\n", "\n", "offset_height", "=", "(", "218", "-", "crop_size", ")", "//", "2", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.dataloader.GrayFolder.__len__": [[66, 68], ["None"], "methods", ["None"], ["offset_width", "=", "(", "178", "-", "crop_size", ")", "//", "2", "\n", "crop", "=", "lambda", "x", ":", "x", "[", ":", ",", "offset_height", ":", "offset_height", "+", "crop_size", ",", "offset_width", ":", "offset_width", "+", "crop_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__init__": [[9, 13], ["open"], "methods", ["None"], ["import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "import", "torchvision", ".", "utils", "as", "tvls", "\n", "from", "torchvision", "import", "transforms", "\n", "from", "datetime", "import", "datetime", "\n", "from", "scipy", ".", "signal", "import", "convolve2d", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.__del__": [[13, 16], ["utils.Tee.file.close"], "methods", ["None"], ["from", "scipy", ".", "signal", "import", "convolve2d", "\n", "\n", "device", "=", "\"cuda\"", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.write": [[16, 21], ["utils.Tee.stdout.write", "utils.Tee.flush", "utils.Tee.file.write"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.write", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.flush", "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.write"], ["\n", "class", "Tee", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ",", "mode", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "name", ",", "mode", ")", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.flush": [[21, 23], ["utils.Tee.file.flush"], "methods", ["home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.Tee.flush"], ["sys", ".", "stdout", "=", "self", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.get_center_mask": [[24, 32], ["torch.zeros().cuda", "torch.zeros().cuda", "int", "int", "torch.zeros", "torch.zeros"], "function", ["None"], ["self", ".", "file", ".", "close", "(", ")", "\n", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "'...'", "in", "data", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "data", ")", "\n", "", "self", ".", "stdout", ".", "write", "(", "data", ")", "\n", "self", ".", "flush", "(", ")", "\n", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.get_input_mask": [[33, 52], ["random.randint", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "mask.repeat.repeat", "int", "int", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "model", ".", "MyConvo2d", ")", ":", "\n", "        ", "if", "m", ".", "conv", ".", "weight", "is", "not", "None", ":", "\n", "            ", "if", "m", ".", "he_init", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "m", ".", "conv", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "m", ".", "conv", ".", "weight", ")", "\n", "", "", "if", "m", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "init", ".", "constant_", "(", "m", ".", "conv", ".", "bias", ",", "0.0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n", "", "", "", "def", "init_dataloader", "(", "args", ",", "file_path", ",", "batch_size", "=", "64", ",", "mode", "=", "\"gan\"", ")", ":", "\n", "    ", "tf", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "mode", "==", "\"attack\"", ":", "\n", "        ", "shuffle_flag", "=", "False", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_state_dict": [[53, 60], ["utils..state_dict", "state_dict.items", "own_state[].copy_", "print"], "function", ["None"], ["", "else", ":", "\n", "        ", "shuffle_flag", "=", "True", "\n", "\n", "", "if", "args", "[", "'dataset'", "]", "[", "'name'", "]", "==", "\"celeba\"", ":", "\n", "        ", "data_set", "=", "dataloader", ".", "ImageFolder", "(", "args", ",", "file_path", ",", "mode", ")", "\n", "", "else", ":", "\n", "        ", "data_set", "=", "dataloader", ".", "GrayFolder", "(", "args", ",", "file_path", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_pretrain": [[61, 70], ["utils..state_dict", "state_dict.items", "name.startswith", "own_state[].copy_", "print"], "function", ["None"], ["", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle_flag", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "interval", "=", "time", ".", "time", "(", ")", "-", "tf", "\n", "print", "(", "'Initializing data loader took %ds'", "%", "interval", ")", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_params": [[71, 78], ["utils..state_dict", "model.named_parameters", "own_state[].copy_", "print"], "function", ["None"], ["", "def", "load_params", "(", "json_file", ")", ":", "\n", "    ", "with", "open", "(", "json_file", ")", "as", "data_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "data_file", ")", "\n", "", "return", "data", "\n", "\n", "", "def", "print_params", "(", "info", ",", "params", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------------------'", ")", "\n", "print", "(", "\"Running time: %s\"", "%", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_json": [[79, 83], ["open", "json.load"], "function", ["None"], ["for", "i", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "info", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"%s: %s\"", "%", "(", "key", ",", "str", "(", "value", ")", ")", ")", "\n", "", "for", "i", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "params", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"%s: %s\"", "%", "(", "key", ",", "str", "(", "value", ")", ")", ")", "\n", "", "print", "(", "'-----------------------------------------------------------------'", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.print_params": [[84, 95], ["print", "enumerate", "enumerate", "print", "print", "print", "info.items", "params.items", "print", "print", "datetime.datetime.now().strftime", "str", "datetime.datetime.now", "str"], "function", ["None"], ["\n", "", "def", "save_tensor_images", "(", "images", ",", "filename", ",", "nrow", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "if", "not", "nrow", ":", "\n", "        ", "tvls", ".", "save_image", "(", "images", ",", "filename", ",", "normalize", "=", "normalize", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "tvls", ".", "save_image", "(", "images", ",", "filename", ",", "normalize", "=", "normalize", ",", "nrow", "=", "nrow", ",", "padding", "=", "0", ")", "\n", "\n", "\n", "", "", "def", "load_my_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "own_state", "=", "self", ".", "state_dict", "(", ")", "\n", "#print(state_dict)", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.init_dataloader": [[96, 112], ["time.time", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "dataloader.ImageFolder", "time.time", "dataloader.GrayFolder"], "function", ["None"], ["        ", "if", "name", "not", "in", "own_state", ":", "\n", "            ", "print", "(", "name", ")", "\n", "continue", "\n", "#print(param.data.shape)", "\n", "", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n", "", "", "def", "gen_hole_area", "(", "size", ",", "mask_size", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.save_tensor_images": [[113, 118], ["torchvision.save_image", "torchvision.save_image"], "function", ["None"], ["\n", "mask_w", ",", "mask_h", "=", "mask_size", "\n", "harea_w", ",", "harea_h", "=", "size", "\n", "offset_x", "=", "random", ".", "randint", "(", "0", ",", "mask_w", "-", "harea_w", ")", "\n", "offset_y", "=", "random", ".", "randint", "(", "0", ",", "mask_h", "-", "harea_h", ")", "\n", "return", "(", "(", "offset_x", ",", "offset_y", ")", ",", "(", "harea_w", ",", "harea_h", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.utils.load_my_state_dict": [[119, 128], ["utils..state_dict", "state_dict.items", "own_state[].copy_", "print"], "function", ["None"], ["\n", "\n", "", "def", "crop", "(", "x", ",", "area", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.train_gan.freeze": [[16, 19], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["def", "freeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.train_gan.unfreeze": [[20, 23], ["net.parameters", "p.requires_grad_"], "function", ["None"], ["", "", "def", "unfreeze", "(", "net", ")", ":", "\n", "    ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AI-secure_GMI-Attack.MNIST.train_gan.gradient_penalty": [[24, 37], ["torch.rand().cuda", "z.cuda.cuda", "DG", "[].view", "z.cuda.size", "x.size", "torch.rand", "x.dim", "torch.autograd.grad", "[].view.norm", "torch.ones().cuda", "torch.ones", "DG.size"], "function", ["None"], ["", "", "def", "gradient_penalty", "(", "x", ",", "y", ")", ":", "\n", "# interpolation", "\n", "    ", "shape", "=", "[", "x", ".", "size", "(", "0", ")", "]", "+", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "z", "=", "x", "+", "alpha", "*", "(", "y", "-", "x", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "z", ".", "requires_grad", "=", "True", "\n", "\n", "o", "=", "DG", "(", "z", ")", "\n", "g", "=", "grad", "(", "o", ",", "z", ",", "grad_outputs", "=", "torch", ".", "ones", "(", "o", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gp", "=", "(", "(", "g", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "gp", "\n", "\n"]]}