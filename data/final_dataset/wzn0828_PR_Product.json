{"home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLinear.__init__": [[8, 11], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLSTMCell.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "PRLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLinear.forward": [[12, 32], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.matmul().clamp_", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "torch.t().clamp_", "x.pow().sum().clamp_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "x.pow().sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sqrt.detach", "torch.sqrt.detach", "torch.sqrt.detach", "cos_theta.detach", "PR.PRLinear.weight.pow().sum", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "x.pow", "PR.PRLinear.weight.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute the length of w and x. We find this is faster than the norm, although the later is simple.", "\n", "        ", "w_len", "=", "torch", ".", "sqrt", "(", "(", "torch", ".", "t", "(", "self", ".", "weight", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", ".", "clamp_", "(", "min", "=", "self", ".", "eps", ")", ")", "# 1*num_classes", "\n", "x_len", "=", "torch", ".", "sqrt", "(", "(", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ".", "clamp_", "(", "min", "=", "self", ".", "eps", ")", ")", "# batch*1", "\n", "\n", "# compute the cosine of theta and abs(sine) of theta.", "\n", "wx_len", "=", "torch", ".", "matmul", "(", "x_len", ",", "w_len", ")", ".", "clamp_", "(", "min", "=", "self", ".", "eps", ")", "\n", "cos_theta", "=", "(", "torch", ".", "matmul", "(", "x", ",", "torch", ".", "t", "(", "self", ".", "weight", ")", ")", "/", "wx_len", ")", ".", "clamp_", "(", "-", "1.0", ",", "1.0", ")", "# batch*num_classes", "\n", "abs_sin_theta", "=", "torch", ".", "sqrt", "(", "1.0", "-", "cos_theta", "**", "2", ")", "# batch*num_classes", "\n", "\n", "# PR Product", "\n", "out", "=", "wx_len", "*", "(", "abs_sin_theta", ".", "detach", "(", ")", "*", "cos_theta", "+", "cos_theta", ".", "detach", "(", ")", "*", "(", "1.0", "-", "abs_sin_theta", ")", ")", "\n", "\n", "# to save memory", "\n", "del", "w_len", ",", "x_len", ",", "wx_len", ",", "cos_theta", ",", "abs_sin_theta", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRConv2d.__init__": [[36, 45], ["torch.Conv2d.__init__", "PR.PRConv2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "PR.PRConv2d.weight.size", "PR.PRConv2d.weight.size"], "methods", ["home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLSTMCell.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "PRConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "\n", "assert", "groups", "==", "1", ",", "'Currently, we do not realize the PR for group CNN. Maybe you can do it yourself and welcome for pull-request.'", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "register_buffer", "(", "'ones_weight'", ",", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "self", ".", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "weight", ".", "size", "(", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRConv2d.forward": [[46, 75], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "input.pow().sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "PR.PRConv2d.weight.view().pow().sum().t().clamp_", "torch.conv2d().clamp_", "torch.conv2d().clamp_", "torch.conv2d().clamp_", "input.pow", "PR.PRConv2d.bias.unsqueeze().unsqueeze().unsqueeze", "PR.PRConv2d.weight.view().pow().sum().t", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt.unsqueeze().unsqueeze", "torch.sqrt.unsqueeze().unsqueeze", "torch.sqrt.unsqueeze().unsqueeze", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt.detach", "torch.sqrt.detach", "torch.sqrt.detach", "cos_theta.detach", "PR.PRConv2d.bias.unsqueeze().unsqueeze", "PR.PRConv2d.weight.view().pow().sum", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "PR.PRConv2d.bias.unsqueeze", "PR.PRConv2d.weight.view().pow", "PR.PRConv2d.weight.view", "PR.PRConv2d.weight.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# compute the length of w", "\n", "        ", "w_len", "=", "torch", ".", "sqrt", "(", "(", "self", ".", "weight", ".", "view", "(", "self", ".", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "t", "(", ")", ")", ".", "clamp_", "(", "\n", "min", "=", "self", ".", "eps", ")", ")", "# 1*out_channels", "\n", "\n", "# compute the length of x at each position with the help of convolutional operation", "\n", "x_len", "=", "input", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# batch*1*H_in*W_in", "\n", "x_len", "=", "torch", ".", "sqrt", "(", "(", "F", ".", "conv2d", "(", "x_len", ",", "self", ".", "ones_weight", ",", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", ")", ".", "clamp_", "(", "\n", "min", "=", "self", ".", "eps", ")", ")", "# batch*1*H_out*W_out", "\n", "\n", "# compute the cosine of theta and abs(sine) of theta.", "\n", "wx_len", "=", "(", "x_len", "*", "(", "w_len", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", ".", "clamp_", "(", "min", "=", "self", ".", "eps", ")", "# batch*out_channels*H_out*W_out", "\n", "cos_theta", "=", "(", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "None", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "/", "wx_len", ")", ".", "clamp_", "(", "-", "1.0", ",", "\n", "1.0", ")", "# batch*out_channels*H_out*W_out", "\n", "abs_sin_theta", "=", "torch", ".", "sqrt", "(", "1.0", "-", "cos_theta", "**", "2", ")", "\n", "\n", "# PR Product", "\n", "out", "=", "wx_len", "*", "(", "abs_sin_theta", ".", "detach", "(", ")", "*", "cos_theta", "+", "cos_theta", ".", "detach", "(", ")", "*", "(", "1.0", "-", "abs_sin_theta", ")", ")", "\n", "\n", "# to save memory", "\n", "del", "w_len", ",", "x_len", ",", "wx_len", ",", "cos_theta", ",", "abs_sin_theta", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "bias", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLSTMCell.__init__": [[78, 93], ["torch.Module.__init__", "PR.PRLinear", "PR.PRLinear"], "methods", ["home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLSTMCell.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "PRLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "# replace linear with PRLinear", "\n", "self", ".", "ih_linear", "=", "PRLinear", "(", "input_size", ",", "4", "*", "hidden_size", ",", "bias", ")", "\n", "self", ".", "hh_linear", "=", "PRLinear", "(", "hidden_size", ",", "4", "*", "hidden_size", ",", "bias", ")", "\n", "\n", "self", ".", "weight_ih", "=", "self", ".", "ih_linear", ".", "weight", "\n", "self", ".", "bias_ih", "=", "self", ".", "ih_linear", ".", "bias", "\n", "\n", "self", ".", "weight_hh", "=", "self", ".", "hh_linear", ".", "weight", "\n", "self", ".", "bias_hh", "=", "self", ".", "hh_linear", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.wzn0828_PR_Product.None.PR.PRLSTMCell.forward": [[94, 110], ["gates.chunk", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "PR.PRLSTMCell.ih_linear", "PR.PRLSTMCell.hh_linear", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden", ")", ":", "\n", "        ", "hx", ",", "cx", "=", "hidden", "\n", "\n", "gates", "=", "self", ".", "ih_linear", "(", "input", ")", "+", "self", ".", "hh_linear", "(", "hx", ")", "\n", "\n", "ingate", ",", "forgetgate", ",", "cellgate", ",", "outgate", "=", "gates", ".", "chunk", "(", "4", ",", "1", ")", "\n", "\n", "ingate", "=", "F", ".", "sigmoid", "(", "ingate", ")", "\n", "forgetgate", "=", "F", ".", "sigmoid", "(", "forgetgate", ")", "\n", "cellgate", "=", "F", ".", "tanh", "(", "cellgate", ")", "\n", "outgate", "=", "F", ".", "sigmoid", "(", "outgate", ")", "\n", "\n", "cy", "=", "forgetgate", "*", "cx", "+", "ingate", "*", "cellgate", "\n", "hy", "=", "outgate", "*", "F", ".", "tanh", "(", "cy", ")", "\n", "\n", "return", "hy", ",", "cy", "\n", "", "", ""]]}