{"home.repos.pwc.inspect_result.yingchen001_WaveFill.None.metrics.compare_mae": [[29, 33], ["img_true.astype.astype", "img_test.astype.astype", "numpy.sum", "numpy.abs", "numpy.sum"], "function", ["None"], ["def", "compare_mae", "(", "img_true", ",", "img_test", ")", ":", "\n", "    ", "img_true", "=", "img_true", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_test", "=", "img_test", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "np", ".", "sum", "(", "np", ".", "abs", "(", "img_true", "-", "img_test", ")", ")", "/", "(", "np", ".", "sum", "(", "img_true", "+", "img_test", ")", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.None.metrics.ssim": [[34, 39], ["range", "len", "skimage.metrics.structural_similarity", "len"], "function", ["None"], ["", "def", "ssim", "(", "frames1", ",", "frames2", ")", ":", "\n", "    ", "error", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "frames1", ")", ")", ":", "\n", "        ", "error", "+=", "compare_ssim", "(", "frames1", "[", "i", "]", ",", "frames2", "[", "i", "]", ",", "multichannel", "=", "True", ",", "win_size", "=", "51", ")", "\n", "", "return", "error", "/", "len", "(", "frames1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.None.metrics.psnr": [[40, 45], ["range", "len", "skimage.metrics.peak_signal_noise_ratio", "len"], "function", ["None"], ["", "def", "psnr", "(", "frames1", ",", "frames2", ")", ":", "\n", "    ", "error", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "frames1", ")", ")", ":", "\n", "        ", "error", "+=", "compare_psnr", "(", "frames1", "[", "i", "]", ",", "frames2", "[", "i", "]", ")", "\n", "", "return", "error", "/", "len", "(", "frames1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.None.metrics.mae": [[46, 51], ["range", "len", "metrics.compare_mae", "len"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.None.metrics.compare_mae"], ["", "def", "mae", "(", "frames1", ",", "frames2", ")", ":", "\n", "    ", "error", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "frames1", ")", ")", ":", "\n", "        ", "error", "+=", "compare_mae", "(", "frames1", "[", "i", "]", ",", "frames2", "[", "i", "]", ")", "\n", "", "return", "error", "/", "len", "(", "frames1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.None.metrics.main": [[52, 88], ["list", "list", "list.sort", "list.sort", "zip", "metrics.items", "real_images.transpose.transpose", "util.fid_score.calculate_activation_statistics", "fake_images.transpose.transpose", "util.fid_score.calculate_activation_statistics", "util.fid_score.calculate_frechet_distance", "print", "print", "glob.glob", "glob.glob", "PIL.Image.open", "PIL.Image.open", "real_images.transpose.append", "fake_images.transpose.append", "val", "numpy.array().astype", "numpy.array().astype", "round", "metrics.items", "numpy.array", "numpy.array", "torch.cuda.is_available", "torch.cuda.is_available", "evaluation_scores.items", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_activation_statistics", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_activation_statistics", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_frechet_distance"], ["", "def", "main", "(", ")", ":", "\n", "    ", "real_names", "=", "list", "(", "glob", ".", "glob", "(", "'{}/ground_truth/*.png'", ".", "format", "(", "args", ".", "path", ")", ")", ")", "\n", "fake_names", "=", "list", "(", "glob", ".", "glob", "(", "'{}/comp_image/*.png'", ".", "format", "(", "args", ".", "path", ")", ")", ")", "\n", "real_names", ".", "sort", "(", ")", "\n", "fake_names", ".", "sort", "(", ")", "\n", "# metrics prepare for image assesments", "\n", "metrics", "=", "{", "'mae'", ":", "mae", ",", "'psnr'", ":", "psnr", ",", "'ssim'", ":", "ssim", "}", "\n", "# infer through videos", "\n", "real_images", "=", "[", "]", "\n", "fake_images", "=", "[", "]", "\n", "evaluation_scores", "=", "{", "key", ":", "0", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", "}", "\n", "for", "rname", ",", "fname", "in", "zip", "(", "real_names", ",", "fake_names", ")", ":", "\n", "        ", "rimg", "=", "Image", ".", "open", "(", "rname", ")", "\n", "fimg", "=", "Image", ".", "open", "(", "fname", ")", "\n", "real_images", ".", "append", "(", "np", ".", "array", "(", "rimg", ")", ")", "\n", "fake_images", ".", "append", "(", "np", ".", "array", "(", "fimg", ")", ")", "\n", "# calculating image quality assessments", "\n", "", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "evaluation_scores", "[", "key", "]", "=", "val", "(", "real_images", ",", "fake_images", ")", "\n", "", "message_full", "=", "'Whole Image Metrics: '", "\n", "message_full", "+=", "' '", ".", "join", "(", "[", "'{}: {:.4f},'", ".", "format", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "evaluation_scores", ".", "items", "(", ")", "]", ")", "\n", "\n", "# calculate fid statistics for real images ", "\n", "real_images", "=", "np", ".", "array", "(", "real_images", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "real_images", "=", "real_images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "real_m", ",", "real_s", "=", "calculate_activation_statistics", "(", "real_images", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "# calculate fid statistics for fake images", "\n", "fake_images", "=", "np", ".", "array", "(", "fake_images", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "fake_images", "=", "fake_images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "fake_m", ",", "fake_s", "=", "calculate_activation_statistics", "(", "fake_images", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "real_m", ",", "real_s", ",", "fake_m", ",", "fake_s", ")", "\n", "message_full", "+=", "'FID: {}'", ".", "format", "(", "round", "(", "fid_value", ",", "4", ")", ")", "\n", "print", "(", "message_full", ")", "\n", "print", "(", "'Finish evaluation from {}'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.__init__": [[18, 34], ["models.wavelet_model.WaveletModel", "print", "len", "wavelet_trainer.WaveletTrainer.wavelet_model.to", "models.networks.sync_batchnorm.DataParallelWithCallback", "wavelet_trainer.WaveletTrainer.wavelet_model_on_one_gpu.create_optimizers"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.create_optimizers"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "wavelet_model", "=", "WaveletModel", "(", "opt", ")", "\n", "print", "(", "opt", ".", "gpu_ids", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "wavelet_model", ".", "to", "(", "f'cuda:{opt.gpu_ids[0]}'", ")", "\n", "self", ".", "wavelet_model", "=", "DataParallelWithCallback", "(", "self", ".", "wavelet_model", ",", "\n", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "wavelet_model_on_one_gpu", "=", "self", ".", "wavelet_model", ".", "module", "\n", "", "else", ":", "\n", "            ", "self", ".", "wavelet_model_on_one_gpu", "=", "self", ".", "wavelet_model", "\n", "\n", "", "self", ".", "generated", "=", "None", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "optimizer_G", ",", "self", ".", "optimizer_D_h", "=", "self", ".", "wavelet_model_on_one_gpu", ".", "create_optimizers", "(", "opt", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.run_generator_one_step": [[35, 54], ["torch.autograd.detect_anomaly", "wavelet_trainer.WaveletTrainer.set_requires_grad", "range", "wavelet_trainer.WaveletTrainer.optimizer_G.zero_grad", "wavelet_trainer.WaveletTrainer.wavelet_model", "sum().mean", "sum().mean.backward", "wavelet_trainer.WaveletTrainer.optimizer_G.step", "wavelet_trainer.WaveletTrainer.set_requires_grad", "wavelet_trainer.WaveletTrainer.wavelet_model_on_one_gpu.netG.named_parameters", "sum", "g_losses.values", "print", "p.grad.norm"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.set_requires_grad", "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.set_requires_grad"], ["", "", "def", "run_generator_one_step", "(", "self", ",", "data", ",", "print_gradient", "=", "False", ")", ":", "\n", "        ", "with", "autograd", ".", "detect_anomaly", "(", ")", ":", "\n", "\n", "            ", "self", ".", "set_requires_grad", "(", "self", ".", "wavelet_model_on_one_gpu", ".", "netG", ",", "True", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", ":", "\n", "                ", "self", ".", "set_requires_grad", "(", "self", ".", "wavelet_model_on_one_gpu", ".", "netD_h", "[", "i", "]", ",", "False", ")", "\n", "\n", "", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "g_losses", ",", "generated", "=", "self", ".", "wavelet_model", "(", "data", ",", "mode", "=", "'generator'", ")", "\n", "\n", "g_loss", "=", "sum", "(", "g_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "if", "print_gradient", ":", "\n", "                ", "for", "name", ",", "p", "in", "self", ".", "wavelet_model_on_one_gpu", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "'up'", "in", "name", "or", "'conv_b'", "in", "name", ":", "\n", "                        ", "print", "(", "'===========\\ngradient:{}, {}'", ".", "format", "(", "name", ",", "p", ".", "grad", ".", "norm", "(", ")", ")", ")", "\n", "", "", "", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "self", ".", "g_losses", "=", "g_losses", "\n", "self", ".", "generated", "=", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.run_discriminator_one_step": [[55, 69], ["torch.autograd.detect_anomaly", "wavelet_trainer.WaveletTrainer.set_requires_grad", "range", "wavelet_trainer.WaveletTrainer.wavelet_model", "range", "wavelet_trainer.WaveletTrainer.set_requires_grad", "wavelet_trainer.WaveletTrainer.optimizer_D_h[].zero_grad", "d_loss_h.backward", "wavelet_trainer.WaveletTrainer.optimizer_D_h[].step"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.set_requires_grad", "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.set_requires_grad"], ["", "", "def", "run_discriminator_one_step", "(", "self", ",", "data", ",", "print_gradient", "=", "False", ")", ":", "\n", "        ", "with", "autograd", ".", "detect_anomaly", "(", ")", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "self", ".", "wavelet_model_on_one_gpu", ".", "netG", ",", "False", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", ":", "\n", "                ", "self", ".", "set_requires_grad", "(", "self", ".", "wavelet_model_on_one_gpu", ".", "netD_h", "[", "i", "]", ",", "True", ")", "\n", "\n", "", "d_losses", "=", "self", ".", "wavelet_model", "(", "data", ",", "mode", "=", "'discriminator'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", ":", "\n", "                ", "self", ".", "optimizer_D_h", "[", "i", "]", ".", "zero_grad", "(", ")", "\n", "d_loss_h", "=", "(", "(", "d_losses", "[", "'D_fake_h{}'", ".", "format", "(", "i", ")", "]", "+", "d_losses", "[", "'D_real_h{}'", ".", "format", "(", "i", ")", "]", ")", "/", "2", ")", ".", "mean", "(", ")", "\n", "d_loss_h", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D_h", "[", "i", "]", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "d_losses", "=", "d_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.get_latest_losses": [[70, 72], ["None"], "methods", ["None"], ["", "", "def", "get_latest_losses", "(", "self", ")", ":", "\n", "        ", "return", "{", "**", "self", ".", "g_losses", ",", "**", "self", ".", "d_losses", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.get_latest_generated": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_latest_generated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.update_learning_rate": [[86, 107], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "if", "self", ".", "opt", ".", "no_TTUR", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "\n", "new_lr_D", "=", "new_lr", "\n", "", "else", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "/", "2", "\n", "new_lr_D", "=", "new_lr", "*", "2", "\n", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_D", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_G", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.save": [[79, 81], ["wavelet_trainer.WaveletTrainer.wavelet_model_on_one_gpu.save"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "wavelet_model_on_one_gpu", ".", "save", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.trainers.wavelet_trainer.WaveletTrainer.set_requires_grad": [[108, 120], ["isinstance", "net.parameters"], "methods", ["None"], ["", "", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.__init__": [[13, 31], ["os.path.join", "numpy.loadtxt", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset_size", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "dataset_size", "=", "dataset_size", "\n", "\n", "self", ".", "first_epoch", "=", "1", "\n", "self", ".", "total_epochs", "=", "opt", ".", "niter", "+", "opt", ".", "niter_decay", "\n", "self", ".", "epoch_iter", "=", "0", "# iter number within each epoch", "\n", "self", ".", "iter_record_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "'iter.txt'", ")", "\n", "if", "opt", ".", "isTrain", "and", "opt", ".", "continue_train", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "iter_record_path", ",", "delimiter", "=", "','", ",", "dtype", "=", "int", ")", "\n", "print", "(", "'Resuming from epoch %d at iteration %d'", "%", "(", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Could not load iteration record at %s. Starting from beginning.'", "%", "\n", "self", ".", "iter_record_path", ")", "\n", "\n", "", "", "self", ".", "total_steps_so_far", "=", "(", "self", ".", "first_epoch", "-", "1", ")", "*", "dataset_size", "+", "self", ".", "epoch_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.training_epochs": [[33, 35], ["range"], "methods", ["None"], ["", "def", "training_epochs", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "self", ".", "first_epoch", ",", "self", ".", "total_epochs", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.record_epoch_start": [[36, 41], ["time.time", "time.time"], "methods", ["None"], ["", "def", "record_epoch_start", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "epoch_iter", "=", "0", "\n", "self", ".", "last_iter_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "current_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.record_one_iteration": [[42, 51], ["time.time"], "methods", ["None"], ["", "def", "record_one_iteration", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# the last remaining batch is dropped (see data/__init__.py),", "\n", "# so we can assume batch size is always opt.batchSize", "\n", "self", ".", "time_per_iter", "=", "(", "current_time", "-", "self", ".", "last_iter_time", ")", "/", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "last_iter_time", "=", "current_time", "\n", "self", ".", "total_steps_so_far", "+=", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "epoch_iter", "+=", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.record_epoch_end": [[52, 61], ["time.time", "print", "numpy.savetxt", "print"], "methods", ["None"], ["", "def", "record_epoch_end", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_per_epoch", "=", "current_time", "-", "self", ".", "epoch_start_time", "\n", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "self", ".", "current_epoch", ",", "self", ".", "total_epochs", ",", "self", ".", "time_per_epoch", ")", ")", "\n", "if", "self", ".", "current_epoch", "%", "self", ".", "opt", ".", "save_epoch_freq", "==", "0", ":", "\n", "            ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", "+", "1", ",", "0", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.record_current_iter": [[62, 66], ["numpy.savetxt", "print"], "methods", ["None"], ["", "", "def", "record_current_iter", "(", "self", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", ",", "self", ".", "epoch_iter", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.needs_saving": [[67, 69], ["None"], "methods", ["None"], ["", "def", "needs_saving", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "save_latest_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.needs_printing": [[70, 72], ["None"], "methods", ["None"], ["", "def", "needs_printing", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "print_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.iter_counter.IterationCounter.needs_displaying": [[73, 75], ["None"], "methods", ["None"], ["", "def", "needs_displaying", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "display_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.__init__": [[13, 33], ["web_dir.endswith", "os.path.join", "dominate.document", "os.path.split", "os.makedirs", "os.makedirs", "h1", "len", "os.path.exists", "len", "os.path.exists", "datetime.datetime.now().strftime", "meta", "datetime.datetime.now", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "if", "web_dir", ".", "endswith", "(", "'.html'", ")", ":", "\n", "            ", "web_dir", ",", "html_name", "=", "os", ".", "path", ".", "split", "(", "web_dir", ")", "\n", "", "else", ":", "\n", "            ", "web_dir", ",", "html_name", "=", "web_dir", ",", "'index.html'", "\n", "", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "html_name", "=", "html_name", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "len", "(", "self", ".", "web_dir", ")", ">", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "len", "(", "self", ".", "web_dir", ")", ">", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "with", "self", ".", "doc", ":", "\n", "            ", "h1", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%I:%M%p on %B %d, %Y\"", ")", ")", "\n", "", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.get_image_dir": [[34, 36], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_header": [[37, 40], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_table": [[41, 44], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_images": [[45, 56], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "txt.encode", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "512", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.save": [[57, 62], ["os.path.join", "open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "self", ".", "html_name", ")", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.coco.id2label": [[7, 200], ["None"], "function", ["None"], ["def", "id2label", "(", "id", ")", ":", "\n", "    ", "if", "id", "==", "182", ":", "\n", "        ", "id", "=", "0", "\n", "", "else", ":", "\n", "        ", "id", "=", "id", "+", "1", "\n", "", "labelmap", "=", "{", "0", ":", "'unlabeled'", ",", "\n", "1", ":", "'person'", ",", "\n", "2", ":", "'bicycle'", ",", "\n", "3", ":", "'car'", ",", "\n", "4", ":", "'motorcycle'", ",", "\n", "5", ":", "'airplane'", ",", "\n", "6", ":", "'bus'", ",", "\n", "7", ":", "'train'", ",", "\n", "8", ":", "'truck'", ",", "\n", "9", ":", "'boat'", ",", "\n", "10", ":", "'traffic light'", ",", "\n", "11", ":", "'fire hydrant'", ",", "\n", "12", ":", "'street sign'", ",", "\n", "13", ":", "'stop sign'", ",", "\n", "14", ":", "'parking meter'", ",", "\n", "15", ":", "'bench'", ",", "\n", "16", ":", "'bird'", ",", "\n", "17", ":", "'cat'", ",", "\n", "18", ":", "'dog'", ",", "\n", "19", ":", "'horse'", ",", "\n", "20", ":", "'sheep'", ",", "\n", "21", ":", "'cow'", ",", "\n", "22", ":", "'elephant'", ",", "\n", "23", ":", "'bear'", ",", "\n", "24", ":", "'zebra'", ",", "\n", "25", ":", "'giraffe'", ",", "\n", "26", ":", "'hat'", ",", "\n", "27", ":", "'backpack'", ",", "\n", "28", ":", "'umbrella'", ",", "\n", "29", ":", "'shoe'", ",", "\n", "30", ":", "'eye glasses'", ",", "\n", "31", ":", "'handbag'", ",", "\n", "32", ":", "'tie'", ",", "\n", "33", ":", "'suitcase'", ",", "\n", "34", ":", "'frisbee'", ",", "\n", "35", ":", "'skis'", ",", "\n", "36", ":", "'snowboard'", ",", "\n", "37", ":", "'sports ball'", ",", "\n", "38", ":", "'kite'", ",", "\n", "39", ":", "'baseball bat'", ",", "\n", "40", ":", "'baseball glove'", ",", "\n", "41", ":", "'skateboard'", ",", "\n", "42", ":", "'surfboard'", ",", "\n", "43", ":", "'tennis racket'", ",", "\n", "44", ":", "'bottle'", ",", "\n", "45", ":", "'plate'", ",", "\n", "46", ":", "'wine glass'", ",", "\n", "47", ":", "'cup'", ",", "\n", "48", ":", "'fork'", ",", "\n", "49", ":", "'knife'", ",", "\n", "50", ":", "'spoon'", ",", "\n", "51", ":", "'bowl'", ",", "\n", "52", ":", "'banana'", ",", "\n", "53", ":", "'apple'", ",", "\n", "54", ":", "'sandwich'", ",", "\n", "55", ":", "'orange'", ",", "\n", "56", ":", "'broccoli'", ",", "\n", "57", ":", "'carrot'", ",", "\n", "58", ":", "'hot dog'", ",", "\n", "59", ":", "'pizza'", ",", "\n", "60", ":", "'donut'", ",", "\n", "61", ":", "'cake'", ",", "\n", "62", ":", "'chair'", ",", "\n", "63", ":", "'couch'", ",", "\n", "64", ":", "'potted plant'", ",", "\n", "65", ":", "'bed'", ",", "\n", "66", ":", "'mirror'", ",", "\n", "67", ":", "'dining table'", ",", "\n", "68", ":", "'window'", ",", "\n", "69", ":", "'desk'", ",", "\n", "70", ":", "'toilet'", ",", "\n", "71", ":", "'door'", ",", "\n", "72", ":", "'tv'", ",", "\n", "73", ":", "'laptop'", ",", "\n", "74", ":", "'mouse'", ",", "\n", "75", ":", "'remote'", ",", "\n", "76", ":", "'keyboard'", ",", "\n", "77", ":", "'cell phone'", ",", "\n", "78", ":", "'microwave'", ",", "\n", "79", ":", "'oven'", ",", "\n", "80", ":", "'toaster'", ",", "\n", "81", ":", "'sink'", ",", "\n", "82", ":", "'refrigerator'", ",", "\n", "83", ":", "'blender'", ",", "\n", "84", ":", "'book'", ",", "\n", "85", ":", "'clock'", ",", "\n", "86", ":", "'vase'", ",", "\n", "87", ":", "'scissors'", ",", "\n", "88", ":", "'teddy bear'", ",", "\n", "89", ":", "'hair drier'", ",", "\n", "90", ":", "'toothbrush'", ",", "\n", "91", ":", "'hair brush'", ",", "# Last class of Thing", "\n", "92", ":", "'banner'", ",", "# Beginning of Stuff", "\n", "93", ":", "'blanket'", ",", "\n", "94", ":", "'branch'", ",", "\n", "95", ":", "'bridge'", ",", "\n", "96", ":", "'building-other'", ",", "\n", "97", ":", "'bush'", ",", "\n", "98", ":", "'cabinet'", ",", "\n", "99", ":", "'cage'", ",", "\n", "100", ":", "'cardboard'", ",", "\n", "101", ":", "'carpet'", ",", "\n", "102", ":", "'ceiling-other'", ",", "\n", "103", ":", "'ceiling-tile'", ",", "\n", "104", ":", "'cloth'", ",", "\n", "105", ":", "'clothes'", ",", "\n", "106", ":", "'clouds'", ",", "\n", "107", ":", "'counter'", ",", "\n", "108", ":", "'cupboard'", ",", "\n", "109", ":", "'curtain'", ",", "\n", "110", ":", "'desk-stuff'", ",", "\n", "111", ":", "'dirt'", ",", "\n", "112", ":", "'door-stuff'", ",", "\n", "113", ":", "'fence'", ",", "\n", "114", ":", "'floor-marble'", ",", "\n", "115", ":", "'floor-other'", ",", "\n", "116", ":", "'floor-stone'", ",", "\n", "117", ":", "'floor-tile'", ",", "\n", "118", ":", "'floor-wood'", ",", "\n", "119", ":", "'flower'", ",", "\n", "120", ":", "'fog'", ",", "\n", "121", ":", "'food-other'", ",", "\n", "122", ":", "'fruit'", ",", "\n", "123", ":", "'furniture-other'", ",", "\n", "124", ":", "'grass'", ",", "\n", "125", ":", "'gravel'", ",", "\n", "126", ":", "'ground-other'", ",", "\n", "127", ":", "'hill'", ",", "\n", "128", ":", "'house'", ",", "\n", "129", ":", "'leaves'", ",", "\n", "130", ":", "'light'", ",", "\n", "131", ":", "'mat'", ",", "\n", "132", ":", "'metal'", ",", "\n", "133", ":", "'mirror-stuff'", ",", "\n", "134", ":", "'moss'", ",", "\n", "135", ":", "'mountain'", ",", "\n", "136", ":", "'mud'", ",", "\n", "137", ":", "'napkin'", ",", "\n", "138", ":", "'net'", ",", "\n", "139", ":", "'paper'", ",", "\n", "140", ":", "'pavement'", ",", "\n", "141", ":", "'pillow'", ",", "\n", "142", ":", "'plant-other'", ",", "\n", "143", ":", "'plastic'", ",", "\n", "144", ":", "'platform'", ",", "\n", "145", ":", "'playingfield'", ",", "\n", "146", ":", "'railing'", ",", "\n", "147", ":", "'railroad'", ",", "\n", "148", ":", "'river'", ",", "\n", "149", ":", "'road'", ",", "\n", "150", ":", "'rock'", ",", "\n", "151", ":", "'roof'", ",", "\n", "152", ":", "'rug'", ",", "\n", "153", ":", "'salad'", ",", "\n", "154", ":", "'sand'", ",", "\n", "155", ":", "'sea'", ",", "\n", "156", ":", "'shelf'", ",", "\n", "157", ":", "'sky-other'", ",", "\n", "158", ":", "'skyscraper'", ",", "\n", "159", ":", "'snow'", ",", "\n", "160", ":", "'solid-other'", ",", "\n", "161", ":", "'stairs'", ",", "\n", "162", ":", "'stone'", ",", "\n", "163", ":", "'straw'", ",", "\n", "164", ":", "'structural-other'", ",", "\n", "165", ":", "'table'", ",", "\n", "166", ":", "'tent'", ",", "\n", "167", ":", "'textile-other'", ",", "\n", "168", ":", "'towel'", ",", "\n", "169", ":", "'tree'", ",", "\n", "170", ":", "'vegetable'", ",", "\n", "171", ":", "'wall-brick'", ",", "\n", "172", ":", "'wall-concrete'", ",", "\n", "173", ":", "'wall-other'", ",", "\n", "174", ":", "'wall-panel'", ",", "\n", "175", ":", "'wall-stone'", ",", "\n", "176", ":", "'wall-tile'", ",", "\n", "177", ":", "'wall-wood'", ",", "\n", "178", ":", "'water-other'", ",", "\n", "179", ":", "'waterdrops'", ",", "\n", "180", ":", "'window-blind'", ",", "\n", "181", ":", "'window-other'", ",", "\n", "182", ":", "'wood'", "}", "\n", "if", "id", "in", "labelmap", ":", "\n", "        ", "return", "labelmap", "[", "id", "]", "\n", "", "else", ":", "\n", "        ", "return", "'unknown'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.__init__": [[19, 41], ["os.path.join", "tf.summary.FileWriter", "os.path.join", "os.path.join", "print", "util.mkdirs", "os.path.join", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "tf_log", "=", "opt", ".", "isTrain", "and", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'logs'", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "                ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.display_current_results": [[43, 115], ["visualizer.Visualizer.convert_visuals_to_numpy", "visualizer.Visualizer.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visualizer.Visualizer.items", "html.HTML", "range", "html.HTML.save", "scipy.misc.toimage().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "isinstance", "html.HTML.add_header", "visualizer.Visualizer.items", "StringIO", "len", "visualizer.Visualizer.tf.Summary.Value", "range", "os.path.join", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue", "len", "os.path.join", "util.save_image", "len", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.save", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.save", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_header", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_image", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_images", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_images", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_images", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_image"], ["", "", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "\n", "## convert tensors to numpy arrays", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ")", "\n", "\n", "if", "self", ".", "tf_log", ":", "# show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "if", "len", "(", "image_numpy", ".", "shape", ")", ">=", "4", ":", "\n", "                    ", "image_numpy", "=", "image_numpy", "[", "0", "]", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "label", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_iter%.3d_%s_%d.png'", "%", "(", "epoch", ",", "step", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_iter%.3d_%s.png'", "%", "(", "epoch", ",", "step", ",", "label", ")", ")", "\n", "if", "len", "(", "image_numpy", ".", "shape", ")", ">=", "4", ":", "\n", "                        ", "image_numpy", "=", "image_numpy", "[", "0", "]", "\n", "", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "#         print (label)", "\n", "#         print (image_numpy.shape)", "\n", "#         print (image_numpy)", "\n", "#         if label == 'input_label':", "\n", "#             im = Image.fromarray(image_numpy.astype('uint8'))", "\n", "#             im.save('tmp.png')", "\n", "#", "\n", "# print (1 / 0)", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "5", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_iter%.3d_%s_%d.png'", "%", "(", "n", ",", "step", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_iter%.3d_%s.png'", "%", "(", "n", ",", "step", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "10", ":", "\n", "                    ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                    ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.plot_current_errors": [[117, 123], ["errors.items", "value.mean().float.mean().float.mean().float", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "value.mean().float.mean().float.mean", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "value", "=", "value", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.print_current_errors": [[125, 136], ["errors.items", "print", "v.mean().float.mean().float.mean().float", "open", "log_file.write", "v.mean().float.mean().float.mean"], "methods", ["None"], ["", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "#print(v)", "\n", "#if v != 0:", "\n", "            ", "v", "=", "v", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.convert_visuals_to_numpy": [[137, 147], ["visuals.items", "util.tensor2im"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2im"], ["", "", "def", "convert_visuals_to_numpy", "(", "self", ",", "visuals", ")", ":", "\n", "        ", "for", "key", ",", "t", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "tile", "=", "self", ".", "opt", ".", "batchSize", ">", "8", "\n", "# if 'input_label' == key:", "\n", "#     t = util.tensor2label(t, self.opt.input_nc + 2, tile=tile)", "\n", "# else:", "\n", "#     t = util.tensor2im(t, tile=tile)", "\n", "t", "=", "util", ".", "tensor2im", "(", "t", ",", "tile", "=", "tile", ")", "\n", "visuals", "[", "key", "]", "=", "t", "\n", "", "return", "visuals", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.save_images": [[149, 170], ["visualizer.Visualizer.convert_visuals_to_numpy", "webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visualizer.Visualizer.items", "webpage.add_images", "os.path.splitext", "os.path.join", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_header", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.html.HTML.add_images", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_image"], ["", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ")", "\n", "\n", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "join", "(", "label", ",", "'%s.png'", "%", "(", "name", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ",", "create_dir", "=", "True", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.save_images2": [[172, 180], ["visualizer.Visualizer.convert_visuals_to_numpy", "ntpath.basename", "visualizer.Visualizer.items", "os.path.splitext", "os.path.join", "os.path.join", "util.save_image"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_image"], ["", "def", "save_images2", "(", "self", ",", "image_dir", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "join", "(", "label", ",", "'%s.png'", "%", "(", "name", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ",", "create_dir", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.inception.InceptionV3.__init__": [[21, 105], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torchvision.models.inception_v3", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, normalizes the input to the statistics the pretrained\n            Inception network expects\n        requires_grad : bool\n            If true, parameters of the model require gradient. Possibly useful\n            for finetuning the network\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.inception.InceptionV3.forward": [[106, 139], ["enumerate", "torch.upsample", "torch.upsample", "block.clone", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "upsample", "(", "x", ",", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", "0", "]", "=", "x", "[", ":", ",", "0", "]", "*", "(", "0.229", "/", "0.5", ")", "+", "(", "0.485", "-", "0.5", ")", "/", "0.5", "\n", "x", "[", ":", ",", "1", "]", "=", "x", "[", ":", ",", "1", "]", "*", "(", "0.224", "/", "0.5", ")", "+", "(", "0.456", "-", "0.5", ")", "/", "0.5", "\n", "x", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "*", "(", "0.225", "/", "0.5", ")", "+", "(", "0.406", "-", "0.5", ")", "/", "0.5", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.get_activations": [[47, 103], ["model.eval", "numpy.empty", "range", "print", "torch.from_numpy().type", "torch.autograd.Variable", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "print", "print", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["None"], ["def", "get_activations", "(", "images", ",", "model", ",", "batch_size", "=", "64", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- images      : Numpy array of dimension (n_images, 3, hi, wi). The values\n                     must lie between 0 and 1.\n    -- model       : Instance of inception model\n    -- batch_size  : the images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size depends\n                     on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "d0", "=", "images", ".", "shape", "[", "0", "]", "\n", "if", "batch_size", ">", "d0", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "d0", "\n", "\n", "", "n_batches", "=", "d0", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "dims", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d/%d'", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", "[", "start", ":", "end", "]", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "batch", "=", "Variable", "(", "batch", ",", "volatile", "=", "True", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_frechet_distance": [[105, 157], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representive data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representive data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_activation_statistics": [[159, 183], ["fid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.get_activations"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "model", ",", "batch_size", "=", "64", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- images      : Numpy array of dimension (n_images, 3, hi, wi). The values\n                     must lie between 0 and 1.\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "images", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score._compute_statistics_of_path": [[185, 207], ["os.path.join", "os.path.exists", "numpy.load", "np.load.close", "pathlib.Path", "numpy.array", "imgs.transpose.transpose", "fid_score.calculate_activation_statistics", "numpy.savez", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob", "scipy.misc.imread().astype", "scipy.misc.imread", "str"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "npz_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'statistics.npz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "npz_file", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "npz_file", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "\n", "imgs", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "fn", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "for", "fn", "in", "files", "]", ")", "\n", "\n", "# Bring images to shape (B, 3, H, W)", "\n", "imgs", "=", "imgs", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "# Rescale images to be between 0 and 1", "\n", "imgs", "/=", "255", "\n", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "imgs", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "np", ".", "savez", "(", "npz_file", ",", "mu", "=", "m", ",", "sigma", "=", "s", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_fid_given_paths": [[209, 229], ["util.inception.InceptionV3", "print", "fid_score._compute_statistics_of_path", "print", "fid_score._compute_statistics_of_path", "print", "fid_score.calculate_frechet_distance", "util.inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.fid_score.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "print", "(", "'calculate path1 statistics...'", ")", "\n", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "print", "(", "'calculate path2 statistics...'", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "print", "(", "'calculate frechet distance...'", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.Colorize.__init__": [[299, 302], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.Colorize.__call__": [[303, 314], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_obj": [[20, 23], ["open", "dill.dump"], "function", ["None"], ["def", "save_obj", "(", "obj", ",", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.load_obj": [[25, 28], ["open", "dill.load"], "function", ["None"], ["", "", "def", "load_obj", "(", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.copyconf": [[34, 40], ["argparse.Namespace", "print", "setattr", "vars"], "function", ["None"], ["", "", "def", "copyconf", "(", "default_opt", ",", "**", "kwargs", ")", ":", "\n", "    ", "conf", "=", "argparse", ".", "Namespace", "(", "**", "vars", "(", "default_opt", ")", ")", "\n", "for", "key", "in", "kwargs", ":", "\n", "        ", "print", "(", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "setattr", "(", "conf", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tile_images": [[42, 62], ["range", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "numpy.concatenate", "numpy.zeros", "range"], "function", ["None"], ["", "def", "tile_images", "(", "imgs", ",", "picturesPerRow", "=", "4", ")", ":", "\n", "    ", "\"\"\" Code borrowed from\n    https://stackoverflow.com/questions/26521365/cleanly-tile-numpy-array-of-images-stored-in-a-flattened-1d-format/26521997\n    \"\"\"", "\n", "\n", "# Padding", "\n", "if", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "==", "0", ":", "\n", "        ", "rowPadding", "=", "0", "\n", "", "else", ":", "\n", "        ", "rowPadding", "=", "picturesPerRow", "-", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "\n", "", "if", "rowPadding", ">", "0", ":", "\n", "        ", "imgs", "=", "np", ".", "concatenate", "(", "[", "imgs", ",", "np", ".", "zeros", "(", "(", "rowPadding", ",", "*", "imgs", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "imgs", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Tiling Loop (The conditionals are not necessary anymore)", "\n", "", "tiled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "imgs", ".", "shape", "[", "0", "]", ",", "picturesPerRow", ")", ":", "\n", "        ", "tiled", ".", "append", "(", "np", ".", "concatenate", "(", "[", "imgs", "[", "j", "]", "for", "j", "in", "range", "(", "i", ",", "i", "+", "picturesPerRow", ")", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "tiled", "=", "np", ".", "concatenate", "(", "tiled", ",", "axis", "=", "0", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2im": [[66, 98], ["isinstance", "image_tensor.unsqueeze.detach().cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "image_tensor.unsqueeze.dim", "range", "numpy.concatenate", "image_tensor.unsqueeze.dim", "image_tensor.unsqueeze.unsqueeze", "len", "np.clip.append", "image_tensor.unsqueeze.size", "util.tensor2im", "np.concatenate.append", "util.tile_images", "image_tensor.unsqueeze.detach().cpu().float", "numpy.transpose", "util.tensor2im", "tensor2im.reshape", "image_tensor.unsqueeze.detach().cpu", "numpy.transpose", "image_tensor.unsqueeze.detach"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2im", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tile_images", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2im"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "\n", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "image_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "image_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2im", "(", "one_image", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "return", "images_np", "\n", "\n", "", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "image_tensor", "=", "image_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "", "image_numpy", "=", "image_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2label": [[101, 128], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "label_tensor.cpu().float.dim", "range", "numpy.concatenate", "label_tensor.cpu().float.dim", "numpy.zeros", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.size", "util.tensor2label", "np.concatenate.append", "util.tile_images", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max", "tensor2label.reshape"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2im", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tensor2label", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.tile_images"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "label_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "label_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "label_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2label", "(", "one_image", ",", "n_label", ",", "imtype", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "images_np", "=", "images_np", "[", "0", "]", "\n", "return", "images_np", "\n", "\n", "", "", "if", "label_tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "result", "=", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_image": [[130, 141], ["PIL.Image.fromarray", "Image.fromarray.save", "os.makedirs", "len", "numpy.expand_dims", "numpy.repeat", "image_path.replace", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "create_dir", "=", "False", ")", ":", "\n", "    ", "if", "create_dir", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "image_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "len", "(", "image_numpy", ".", "shape", ")", "==", "2", ":", "\n", "        ", "image_numpy", "=", "np", ".", "expand_dims", "(", "image_numpy", ",", "axis", "=", "2", ")", "\n", "", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "repeat", "(", "image_numpy", ",", "3", ",", "2", ")", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "\n", "# save to png", "\n", "image_pil", ".", "save", "(", "image_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.mkdirs": [[143, 149], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.mkdir", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.mkdir": [[151, 154], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.atoi": [[156, 158], ["text.isdigit", "int"], "function", ["None"], ["", "", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.natural_keys": [[160, 167], ["util.atoi", "re.split"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.atoi"], ["", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.natural_sort": [[169, 171], ["items.sort"], "function", ["None"], ["", "def", "natural_sort", "(", "items", ")", ":", "\n", "    ", "items", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.str2bool": [[173, 180], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.find_class_in_module": [[182, 195], ["target_cls_name.replace().lower.replace().lower", "importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit", "target_cls_name.replace().lower.replace", "name.lower"], "function", ["None"], ["", "", "def", "find_class_in_module", "(", "target_cls_name", ",", "module", ")", ":", "\n", "    ", "target_cls_name", "=", "target_cls_name", ".", "replace", "(", "'_'", ",", "''", ")", ".", "lower", "(", ")", "\n", "clslib", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "cls", "=", "None", "\n", "for", "name", ",", "clsobj", "in", "clslib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_cls_name", ":", "\n", "            ", "cls", "=", "clsobj", "\n", "\n", "", "", "if", "cls", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s, there should be a class whose name matches %s in lowercase without underscore(_)\"", "%", "(", "module", ",", "target_cls_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_network": [[197, 203], ["os.path.join", "torch.save", "net.cpu().state_dict", "len", "torch.cuda.is_available", "net.cuda", "net.cpu"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.save"], ["", "def", "save_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.load_network": [[205, 215], ["os.path.join", "os.path.join", "os.path.exists", "torch.load", "net.load_state_dict", "print"], "function", ["None"], ["", "", "def", "load_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "weights", "=", "torch", ".", "load", "(", "save_path", ",", "map_location", "=", "'cpu'", ")", "\n", "net", ".", "load_state_dict", "(", "weights", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Path: {} does not exist'", ".", "format", "(", "save_path", ")", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.generate_stroke_mask": [[216, 224], ["numpy.zeros", "random.randint", "range", "numpy.minimum", "util.np_free_form_mask"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.np_free_form_mask"], ["", "def", "generate_stroke_mask", "(", "im_size", ",", "max_parts", "=", "10", ",", "maxVertex", "=", "20", ",", "maxLength", "=", "100", ",", "maxBrushWidth", "=", "24", ",", "maxAngle", "=", "360", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "parts", "=", "random", ".", "randint", "(", "1", ",", "max_parts", ")", "\n", "for", "i", "in", "range", "(", "parts", ")", ":", "\n", "        ", "mask", "=", "mask", "+", "np_free_form_mask", "(", "maxVertex", ",", "maxLength", ",", "maxBrushWidth", ",", "maxAngle", ",", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ")", "\n", "", "mask", "=", "np", ".", "minimum", "(", "mask", ",", "1.0", ")", "\n", "# mask = np.concatenate([mask, mask, mask], axis = 2)", "\n", "return", "mask", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.np_free_form_mask": [[225, 247], ["numpy.zeros", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "cv2.circle", "numpy.random.randint", "numpy.random.randint", "numpy.maximum().astype", "numpy.maximum().astype", "cv2.line", "cv2.circle", "numpy.random.randint", "numpy.cos", "numpy.sin", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "np_free_form_mask", "(", "maxVertex", ",", "maxLength", ",", "maxBrushWidth", ",", "maxAngle", ",", "h", ",", "w", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "numVertex", "=", "np", ".", "random", ".", "randint", "(", "maxVertex", "+", "1", ")", "\n", "startY", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "startX", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "brushWidth", "=", "0", "\n", "for", "i", "in", "range", "(", "numVertex", ")", ":", "\n", "        ", "angle", "=", "np", ".", "random", ".", "randint", "(", "maxAngle", "+", "1", ")", "\n", "angle", "=", "angle", "/", "360.0", "*", "2", "*", "np", ".", "pi", "\n", "if", "i", "%", "2", "==", "0", ":", "\n", "            ", "angle", "=", "2", "*", "np", ".", "pi", "-", "angle", "\n", "", "length", "=", "np", ".", "random", ".", "randint", "(", "maxLength", "+", "1", ")", "\n", "brushWidth", "=", "np", ".", "random", ".", "randint", "(", "10", ",", "maxBrushWidth", "+", "1", ")", "//", "2", "*", "2", "\n", "nextY", "=", "startY", "+", "length", "*", "np", ".", "cos", "(", "angle", ")", "\n", "nextX", "=", "startX", "+", "length", "*", "np", ".", "sin", "(", "angle", ")", "\n", "nextY", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "nextY", ",", "h", "-", "1", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "nextX", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "nextX", ",", "w", "-", "1", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cv2", ".", "line", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "(", "nextY", ",", "nextX", ")", ",", "1", ",", "brushWidth", ")", "\n", "cv2", ".", "circle", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "brushWidth", "//", "2", ",", "2", ")", "\n", "startY", ",", "startX", "=", "nextY", ",", "nextX", "\n", "", "cv2", ".", "circle", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "brushWidth", "//", "2", ",", "2", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.uint82bin": [[253, 256], ["str", "range"], "function", ["None"], ["", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.labelcolormap": [[258, 296], ["numpy.array", "numpy.zeros", "range", "range", "range", "util.uint82bin", "util.coco.id2label", "numpy.array", "numpy.uint8", "numpy.uint8", "numpy.uint8", "list"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.uint82bin", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.coco.id2label"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "+", "1", "# let's give 0 a color", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "\n", "", "if", "N", "==", "182", ":", "# COCO", "\n", "            ", "important_colors", "=", "{", "\n", "'sea'", ":", "(", "54", ",", "62", ",", "167", ")", ",", "\n", "'sky-other'", ":", "(", "95", ",", "219", ",", "255", ")", ",", "\n", "'tree'", ":", "(", "140", ",", "104", ",", "47", ")", ",", "\n", "'clouds'", ":", "(", "170", ",", "170", ",", "170", ")", ",", "\n", "'grass'", ":", "(", "29", ",", "195", ",", "49", ")", "\n", "}", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "name", "=", "util", ".", "coco", ".", "id2label", "(", "i", ")", "\n", "if", "name", "in", "important_colors", ":", "\n", "                    ", "color", "=", "important_colors", "[", "name", "]", "\n", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "list", "(", "color", ")", ")", "\n", "\n", "", "", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.modify_commandline_options": [[14, 18], ["models.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "networks", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.__init__": [[19, 43], ["super().__init__", "wavelet_model.WaveletModel.initialize_networks", "pytorch_wavelets.DWTForward", "pytorch_wavelets.DWTInverse", "wavelet_model.WaveletModel.use_gpu", "wavelet_model.WaveletModel.use_gpu", "models.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "models.KLDLoss", "models.VGGLosses_fix", "models.VGGLosses"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.initialize_networks", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.use_gpu", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.use_gpu"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "ByteTensor", "\n", "\n", "self", ".", "netG", ",", "self", ".", "netD_h", ",", "self", ".", "netE", "=", "self", ".", "initialize_networks", "(", "opt", ")", "\n", "\n", "self", ".", "xfm", "=", "DWTForward", "(", "J", "=", "self", ".", "opt", ".", "wavelet_decomp_level", ",", "mode", "=", "'zero'", ",", "wave", "=", "'haar'", ")", "\n", "self", ".", "ifm", "=", "DWTInverse", "(", "mode", "=", "'zero'", ",", "wave", "=", "'haar'", ")", "\n", "# set loss functions", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "\n", "opt", ".", "gan_mode", ",", "tensor", "=", "self", ".", "FloatTensor", ",", "opt", "=", "self", ".", "opt", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "if", "not", "opt", ".", "no_perc_loss", ":", "\n", "                ", "if", "opt", ".", "vgg_normal_correct", ":", "\n", "                    ", "self", ".", "criterionVGGs", "=", "networks", ".", "VGGLosses_fix", "(", "opt", ".", "vgg_normal_correct", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "criterionVGGs", "=", "networks", ".", "VGGLosses", "(", "self", ".", "opt", ".", "gpu_ids", ")", "\n", "", "", "if", "opt", ".", "use_vae", ":", "\n", "                ", "self", ".", "KLDLoss", "=", "networks", ".", "KLDLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.forward": [[48, 67], ["wavelet_model.WaveletModel.preprocess_input", "wavelet_model.WaveletModel.compute_generator_loss", "wavelet_model.WaveletModel.compute_discriminator_loss", "wavelet_model.WaveletModel.encode_z", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "wavelet_model.WaveletModel.generate_fake"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.preprocess_input", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.compute_generator_loss", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.compute_discriminator_loss", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.encode_z", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.generate_fake"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "mode", ")", ":", "\n", "        ", "input_semantics", ",", "real_image", "=", "self", ".", "preprocess_input", "(", "data", ")", "\n", "if", "mode", "==", "'generator'", ":", "\n", "            ", "g_loss", ",", "generated", "=", "self", ".", "compute_generator_loss", "(", "\n", "input_semantics", ",", "real_image", ")", "\n", "return", "g_loss", ",", "generated", "\n", "", "elif", "mode", "==", "'discriminator'", ":", "\n", "            ", "d_loss", "=", "self", ".", "compute_discriminator_loss", "(", "\n", "input_semantics", ",", "real_image", ")", "\n", "return", "d_loss", "\n", "", "elif", "mode", "==", "'encode_only'", ":", "\n", "            ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode_z", "(", "real_image", ")", "\n", "return", "mu", ",", "logvar", "\n", "", "elif", "mode", "==", "'inference'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", ",", "_", "=", "self", ".", "generate_fake", "(", "input_semantics", ",", "real_image", ")", "\n", "", "return", "fake_image", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"|mode| is invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.create_optimizers": [[68, 86], ["list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "wavelet_model.WaveletModel.netG.parameters", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "wavelet_model.WaveletModel.netE.parameters", "list", "range", "wavelet_model.WaveletModel.netD_h[].parameters", "range"], "methods", ["None"], ["", "", "def", "create_optimizers", "(", "self", ",", "opt", ")", ":", "\n", "        ", "G_params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "opt", ".", "use_vae", ":", "\n", "            ", "G_params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "D_h_params", "=", "[", "list", "(", "self", ".", "netD_h", "[", "i", "]", ".", "parameters", "(", ")", ")", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", "]", "\n", "\n", "", "beta1", ",", "beta2", "=", "opt", ".", "beta1", ",", "opt", ".", "beta2", "\n", "if", "opt", ".", "no_TTUR", ":", "\n", "            ", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", ",", "opt", ".", "lr", "\n", "", "else", ":", "\n", "            ", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", "/", "2", ",", "opt", ".", "lr", "*", "2", "\n", "\n", "", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "G_params", ",", "lr", "=", "G_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "\n", "optimizer_D_h", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "D_h_params", "[", "i", "]", ",", "lr", "=", "D_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", "]", "\n", "\n", "return", "optimizer_G", ",", "optimizer_D_h", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.save": [[87, 93], ["util.save_network", "range", "util.save_network", "util.save_network"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_network", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_network", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.save_network"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "util", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", ":", "\n", "            ", "util", ".", "save_network", "(", "self", ".", "netD_h", "[", "i", "]", ",", "'D_h_{}'", ".", "format", "(", "i", ")", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "util", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.initialize_networks": [[98, 121], ["models.define_G", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.define_E", "util.load_network", "print", "print", "util.load_network", "print", "models.define_D", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "print", "util.load_network", "range"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.define_G", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.define_E", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.load_network", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.load_network", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.define_D", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.load_network"], ["", "", "def", "initialize_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", "\n", "\n", "# No. Channels = opt.output_nc*3 for high-frequency bands", "\n", "netD_h", "=", "torch", ".", "nn", ".", "ModuleList", "(", "networks", ".", "define_D", "(", "opt", ",", "opt", ".", "output_nc", "*", "3", ")", "if", "opt", ".", "isTrain", "else", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", ")", "\n", "netE", "=", "networks", ".", "define_E", "(", "opt", ")", "if", "opt", ".", "use_vae", "else", "None", "\n", "\n", "if", "not", "opt", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "netG", "=", "util", ".", "load_network", "(", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "print", "(", "'Generator Loaded'", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "                ", "try", ":", "\n", "                    ", "netD_h", "=", "torch", ".", "nn", ".", "ModuleList", "(", "util", ".", "load_network", "(", "netD_h", "[", "i", "]", ",", "'D_h_{}'", ".", "format", "(", "i", ")", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "wavelet_decomp_level", ")", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'unable to load D_h'", ")", "\n", "", "print", "(", "'Discriminator Loaded'", ")", "\n", "", "if", "opt", ".", "use_vae", ":", "\n", "                ", "netE", "=", "util", ".", "load_network", "(", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "print", "(", "'Encoder Loaded'", ")", "\n", "\n", "", "", "return", "netG", ",", "netD_h", ",", "netE", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.preprocess_input": [[126, 132], ["wavelet_model.WaveletModel.use_gpu", "data[].cuda", "data[].cuda"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.use_gpu"], ["", "def", "preprocess_input", "(", "self", ",", "data", ")", ":", "\n", "# move to GPU and change data types", "\n", "        ", "if", "self", ".", "use_gpu", "(", ")", ":", "\n", "            ", "data", "[", "'image'", "]", "=", "data", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "data", "[", "'masked_img'", "]", "=", "data", "[", "'masked_img'", "]", ".", "cuda", "(", ")", "\n", "", "return", "data", "[", "'masked_img'", "]", ",", "data", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.compute_generator_loss": [[133, 182], ["wavelet_model.WaveletModel.generate_fake", "wavelet_model.WaveletModel.xfm", "torch.interpolate", "torch.interpolate", "range", "wavelet_model.WaveletModel.criterionL1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "wavelet_model.WaveletModel.criterionL1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "wavelet_model.WaveletModel.discriminate_highfreq", "wavelet_model.WaveletModel.criterionVGGs", "wavelet_model.WaveletModel.criterionGAN", "len", "wavelet_model.WaveletModel.FloatTensor().fill_", "range", "range", "wavelet_model.WaveletModel.FloatTensor", "len", "wavelet_model.WaveletModel.criterionL1", "[].detach"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.generate_fake", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.discriminate_highfreq"], ["", "def", "compute_generator_loss", "(", "self", ",", "input_semantics", ",", "real_image", ")", ":", "\n", "        ", "G_losses", "=", "{", "}", "\n", "masks", "=", "input_semantics", "[", ":", ",", "3", ":", "4", "]", "\n", "fake_images", ",", "KLD_loss", "=", "self", ".", "generate_fake", "(", "\n", "input_semantics", ",", "real_image", ",", "compute_kld_loss", "=", "self", ".", "opt", ".", "use_vae", ")", "\n", "pred_l", ",", "pred_h", ",", "pred_wavelet", "=", "fake_images", "[", "0", "]", ",", "fake_images", "[", "1", "]", ",", "fake_images", "[", "-", "1", "]", "\n", "\n", "# Low frequency losses", "\n", "gt_l", ",", "gt_h", "=", "self", ".", "xfm", "(", "real_image", ")", "\n", "scale_factor", "=", "1", "/", "(", "2", "**", "self", ".", "opt", ".", "wavelet_decomp_level", ")", "\n", "masks_l", "=", "F", ".", "interpolate", "(", "masks", ",", "scale_factor", "=", "scale_factor", ")", "\n", "\n", "hole_loss_l", "=", "self", ".", "criterionL1", "(", "pred_l", "*", "masks_l", ",", "gt_l", "*", "masks_l", ")", "/", "torch", ".", "mean", "(", "masks_l", ")", "\n", "valid_loss_l", "=", "self", ".", "criterionL1", "(", "pred_l", "*", "(", "1", "-", "masks_l", ")", ",", "gt_l", "*", "(", "1", "-", "masks_l", ")", ")", "/", "torch", ".", "mean", "(", "1", "-", "masks_l", ")", "\n", "l1_loss_l", "=", "scale_factor", "*", "self", ".", "opt", ".", "lambda_dwt_l", "*", "(", "hole_loss_l", "*", "self", ".", "opt", ".", "lambda_hole", "+", "valid_loss_l", ")", "\n", "G_losses", "[", "'L1_L'", "]", "=", "l1_loss_l", "\n", "\n", "# High frequency losses", "\n", "\n", "for", "lv", "in", "range", "(", "len", "(", "gt_h", ")", ")", ":", "\n", "            ", "pred_fake_h", ",", "pred_real_h", "=", "self", ".", "discriminate_highfreq", "(", "input_semantics", ",", "pred_h", "[", "lv", "]", ",", "gt_h", "[", "lv", "]", ",", "self", ".", "opt", ".", "wavelet_decomp_level", "-", "lv", "-", "1", ")", "\n", "gan_h_loss", "=", "self", ".", "opt", ".", "lambda_gan_h", "*", "self", ".", "criterionGAN", "(", "pred_fake_h", ",", "True", ",", "for_discriminator", "=", "False", ")", "\n", "G_losses", "[", "'GAN_H{}'", ".", "format", "(", "self", ".", "opt", ".", "wavelet_decomp_level", "-", "lv", "-", "1", ")", "]", "=", "gan_h_loss", "\n", "\n", "# Feature matching loszs", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "                ", "num_D", "=", "len", "(", "pred_fake_h", ")", "\n", "GAN_Feat_loss", "=", "self", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "# for each discriminator", "\n", "# last output is the final prediction, so we exclude it", "\n", "                    ", "num_intermediate_outputs", "=", "len", "(", "pred_fake_h", "[", "i", "]", ")", "-", "1", "\n", "for", "j", "in", "range", "(", "num_intermediate_outputs", ")", ":", "# for each layer output", "\n", "                        ", "unweighted_loss", "=", "self", ".", "criterionL1", "(", "\n", "pred_fake_h", "[", "i", "]", "[", "j", "]", ",", "pred_real_h", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "\n", "GAN_Feat_loss", "+=", "unweighted_loss", "*", "self", ".", "opt", ".", "lambda_feat_h", "/", "num_D", "\n", "", "", "G_losses", "[", "'GAN_Feat{}'", ".", "format", "(", "self", ".", "opt", ".", "wavelet_decomp_level", "-", "lv", "-", "1", ")", "]", "=", "GAN_Feat_loss", "\n", "\n", "\n", "# Whole image losses", "\n", "", "", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "G_losses", "[", "'KLD'", "]", "=", "KLD_loss", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "no_perc_loss", ":", "\n", "            ", "vgg_loss", ",", "style_loss", ",", "perc_loss", "=", "self", ".", "criterionVGGs", "(", "fake_images", "[", "-", "1", "]", ",", "real_image", ")", "\n", "G_losses", "[", "'perc'", "]", "=", "self", ".", "opt", ".", "lambda_perceptual", "*", "perc_loss", "\n", "G_losses", "[", "'VGG'", "]", "=", "self", ".", "opt", ".", "lambda_vgg", "*", "vgg_loss", "\n", "G_losses", "[", "'Style'", "]", "=", "self", ".", "opt", ".", "lambda_style", "*", "style_loss", "\n", "\n", "", "return", "G_losses", ",", "fake_images", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.compute_discriminator_loss": [[183, 204], ["wavelet_model.WaveletModel.xfm", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "wavelet_model.WaveletModel.generate_fake", "fake_images[].detach", "fake_images[].detach.requires_grad_", "fake_images[].detach", "fake_images[].detach.requires_grad_", "len", "fake_highfreqs[].requires_grad_", "wavelet_model.WaveletModel.discriminate_highfreq", "wavelet_model.WaveletModel.criterionGAN", "wavelet_model.WaveletModel.criterionGAN", "x.detach().requires_grad_", "x.detach", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.generate_fake", "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.discriminate_highfreq"], ["", "def", "compute_discriminator_loss", "(", "self", ",", "input_semantics", ",", "real_image", ")", ":", "\n", "        ", "D_losses", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake_images", ",", "_", "=", "self", ".", "generate_fake", "(", "input_semantics", ",", "real_image", ")", "\n", "fake_image", "=", "fake_images", "[", "-", "1", "]", ".", "detach", "(", ")", "\n", "fake_image", ".", "requires_grad_", "(", ")", "\n", "fake_lowfreq", "=", "fake_images", "[", "0", "]", ".", "detach", "(", ")", "\n", "fake_lowfreq", ".", "requires_grad_", "(", ")", "\n", "fake_highfreqs", "=", "[", "x", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", "for", "x", "in", "fake_images", "[", "1", "]", "]", "\n", "\n", "", "real_lowfreq", ",", "real_highfreqs", "=", "self", ".", "xfm", "(", "real_image", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "real_highfreqs", ")", ")", ":", "\n", "            ", "fake_highfreqs", "[", "i", "]", ".", "requires_grad_", "(", ")", "\n", "pred_fake_h", ",", "pred_real_h", "=", "self", ".", "discriminate_highfreq", "(", "input_semantics", ",", "fake_highfreqs", "[", "i", "]", ",", "real_highfreqs", "[", "i", "]", ",", "len", "(", "real_highfreqs", ")", "-", "i", "-", "1", ")", "\n", "\n", "D_losses", "[", "'D_fake_h{}'", ".", "format", "(", "len", "(", "real_highfreqs", ")", "-", "i", "-", "1", ")", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake_h", ",", "False", ",", "\n", "for_discriminator", "=", "True", ")", "\n", "D_losses", "[", "'D_real_h{}'", ".", "format", "(", "len", "(", "real_highfreqs", ")", "-", "i", "-", "1", ")", "]", "=", "self", ".", "criterionGAN", "(", "pred_real_h", ",", "True", ",", "\n", "for_discriminator", "=", "True", ")", "\n", "\n", "", "return", "D_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.encode_z": [[205, 209], ["wavelet_model.WaveletModel.netE", "wavelet_model.WaveletModel.reparameterize"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.reparameterize"], ["", "def", "encode_z", "(", "self", ",", "real_image", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "netE", "(", "real_image", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.generate_fake": [[210, 224], ["wavelet_model.WaveletModel.netG", "wavelet_model.WaveletModel.encode_z", "wavelet_model.WaveletModel.KLDLoss"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.encode_z"], ["", "def", "generate_fake", "(", "self", ",", "input_semantics", ",", "real_image", ",", "compute_kld_loss", "=", "False", ")", ":", "\n", "        ", "z", "=", "None", "\n", "KLD_loss", "=", "None", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode_z", "(", "real_image", ")", "\n", "if", "compute_kld_loss", ":", "\n", "                ", "KLD_loss", "=", "self", ".", "KLDLoss", "(", "mu", ",", "logvar", ")", "*", "self", ".", "opt", ".", "lambda_kld", "\n", "\n", "", "", "fake_images", "=", "self", ".", "netG", "(", "input_semantics", ",", "z", "=", "z", ")", "\n", "\n", "assert", "(", "not", "compute_kld_loss", ")", "or", "self", ".", "opt", ".", "use_vae", ",", "\"You cannot compute KLD loss if opt.use_vae == False\"", "\n", "\n", "return", "fake_images", ",", "KLD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.discriminate_highfreq": [[228, 241], ["fake_image.contiguous().view.contiguous().view.contiguous().view", "real_image.contiguous().view.contiguous().view.contiguous().view", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "wavelet_model.WaveletModel.divide_pred", "fake_image.contiguous().view.contiguous().view.contiguous", "real_image.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.divide_pred"], ["", "def", "discriminate_highfreq", "(", "self", ",", "input_semantics", ",", "fake_image", ",", "real_image", ",", "level", ")", ":", "\n", "        ", "assert", "fake_image", ".", "shape", "==", "real_image", ".", "shape", "\n", "\n", "b", ",", "c", ",", "j", ",", "h", ",", "w", "=", "fake_image", ".", "shape", "\n", "fake_image", "=", "fake_image", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", "*", "j", ",", "h", ",", "w", ")", "\n", "real_image", "=", "real_image", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", "*", "j", ",", "h", ",", "w", ")", "\n", "mask", "=", "F", ".", "interpolate", "(", "input_semantics", "[", ":", ",", "3", ":", "4", "]", ",", "fake_image", ".", "shape", "[", "2", ":", "]", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "mask", "]", ",", "dim", "=", "0", ")", "\n", "fake_and_real", "=", "torch", ".", "cat", "(", "[", "fake_image", ",", "real_image", "]", ",", "dim", "=", "0", ")", "\n", "discriminator_out", "=", "self", ".", "netD_h", "[", "level", "]", "(", "fake_and_real", ",", "mask", ")", "\n", "pred_fake", ",", "pred_real", "=", "self", ".", "divide_pred", "(", "discriminator_out", ")", "\n", "\n", "return", "pred_fake", ",", "pred_real", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.divide_pred": [[243, 257], ["type", "fake.append", "real.append", "pred.size", "pred.size", "tensor.size", "tensor.size"], "methods", ["None"], ["", "def", "divide_pred", "(", "self", ",", "pred", ")", ":", "\n", "# the prediction contains the intermediate outputs of multiscale GAN,", "\n", "# so it's usually a list", "\n", "        ", "if", "type", "(", "pred", ")", "==", "list", ":", "\n", "            ", "fake", "=", "[", "]", "\n", "real", "=", "[", "]", "\n", "for", "p", "in", "pred", ":", "\n", "                ", "fake", ".", "append", "(", "[", "tensor", "[", ":", "tensor", ".", "size", "(", "0", ")", "//", "2", "]", "for", "tensor", "in", "p", "]", ")", "\n", "real", ".", "append", "(", "[", "tensor", "[", "tensor", ".", "size", "(", "0", ")", "//", "2", ":", "]", "for", "tensor", "in", "p", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "fake", "=", "pred", "[", ":", "pred", ".", "size", "(", "0", ")", "//", "2", "]", "\n", "real", "=", "pred", "[", "pred", ".", "size", "(", "0", ")", "//", "2", ":", "]", "\n", "\n", "", "return", "fake", ",", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.get_edges": [[258, 265], ["wavelet_model.WaveletModel.ByteTensor().zero_", "wavelet_model.WaveletModel.float", "wavelet_model.WaveletModel.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "self", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.reparameterize": [[266, 270], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", "+", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.wavelet_model.WaveletModel.use_gpu": [[271, 273], ["len"], "methods", ["None"], ["", "def", "use_gpu", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.__init__.find_model_using_name": [[10, 32], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.__init__.get_option_setter": [[34, 37], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.models.__init__.create_model": [[39, 45], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.MultiscaleDiscriminator.modify_commandline_options": [[18, 32], ["parser.add_argument", "parser.add_argument", "parser.parse_known_args", "util.find_class_in_module", "util.find_class_in_module.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.find_class_in_module", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--netD_subarch'", ",", "type", "=", "str", ",", "default", "=", "'n_layer'", ",", "\n", "help", "=", "'architecture of each discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of discriminators to be used in multiscale'", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# define properties of each discriminator of the multiscale discriminator", "\n", "subnetD", "=", "util", ".", "find_class_in_module", "(", "opt", ".", "netD_subarch", "+", "'discriminator'", ",", "\n", "'models.networks.discriminator'", ")", "\n", "subnetD", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.MultiscaleDiscriminator.__init__": [[33, 40], ["models.networks.base_network.BaseNetwork.__init__", "range", "discriminator.MultiscaleDiscriminator.create_single_discriminator", "discriminator.MultiscaleDiscriminator.add_module"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "input_nc", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_D", ")", ":", "\n", "            ", "subnetD", "=", "self", ".", "create_single_discriminator", "(", "opt", ",", "input_nc", ")", "\n", "self", ".", "add_module", "(", "'discriminator_%d'", "%", "i", ",", "subnetD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator": [[41, 48], ["discriminator.NLayerDiscriminator", "ValueError"], "methods", ["None"], ["", "", "def", "create_single_discriminator", "(", "self", ",", "opt", ",", "input_nc", ")", ":", "\n", "        ", "subarch", "=", "opt", ".", "netD_subarch", "\n", "if", "subarch", "==", "'n_layer'", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "opt", ",", "input_nc", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unrecognized discriminator subarchitecture %s'", "%", "subarch", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.MultiscaleDiscriminator.downsample": [[49, 53], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "avg_pool2d", "(", "input", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.MultiscaleDiscriminator.forward": [[56, 83], ["discriminator.MultiscaleDiscriminator.named_children", "D", "result.append", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "random.randint", "random.randint", "crops.append", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero().min", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "for", "name", ",", "D", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "out", "=", "D", "(", "input", ")", "\n", "if", "not", "get_intermediate_features", ":", "\n", "                ", "out", "=", "[", "out", "]", "\n", "", "result", ".", "append", "(", "out", ")", "\n", "# input = self.downsample(input)", "\n", "# local discriminator: center crop for regular mask; random crop for irregular mask", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "if", "self", ".", "opt", ".", "mask_type", "==", "1", ":", "\n", "                ", "h_local", "=", "h", "//", "2", "\n", "w_local", "=", "w", "//", "2", "\n", "crops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "                    ", "crop_x", ",", "crop_y", "=", "torch", ".", "nonzero", "(", "mask", "[", "0", ",", "0", "]", ")", ".", "min", "(", "dim", "=", "0", ")", ".", "values", "\n", "crops", ".", "append", "(", "input", "[", "i", ",", ":", ",", "crop_x", ":", "crop_x", "+", "h_local", ",", "crop_y", ":", "crop_y", "+", "w_local", "]", ")", "\n", "", "input", "=", "torch", ".", "stack", "(", "crops", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "h_local", "=", "h", "//", "2", "\n", "w_local", "=", "w", "//", "2", "\n", "crop_x", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "h_local", "-", "1", ")", "\n", "crop_y", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "w_local", "-", "1", ")", "\n", "input", "=", "input", "[", ":", ",", ":", ",", "crop_x", ":", "crop_x", "+", "h_local", ",", "crop_y", ":", "crop_y", "+", "w_local", "]", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.NLayerDiscriminator.modify_commandline_options": [[87, 92], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'# layers in each discriminator'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.NLayerDiscriminator.__init__": [[93, 123], ["models.networks.base_network.BaseNetwork.__init__", "int", "models.networks.normalization.get_nonspade_norm_layer", "range", "range", "min", "len", "discriminator.NLayerDiscriminator.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.architecture.Attention", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "input_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", "\n", "# padw = int(np.ceil((kw - 1.0) / 2))", "\n", "nf", "=", "opt", ".", "ndf", "\n", "# input_nc = self.compute_D_input_nc(opt)", "\n", "# input_nc = opt.output_nc", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_D", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "]", "\n", "\n", "for", "n", "in", "range", "(", "1", ",", "opt", ".", "n_layers_D", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "stride", "=", "1", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", "else", "2", "\n", "if", "opt", ".", "use_attention", "and", "n", "==", "opt", ".", "n_layers_D", "-", "1", ":", "\n", "                ", "self", ".", "attn", "=", "Attention", "(", "nf_prev", ",", "'spectral'", "in", "opt", ".", "norm_D", ")", "\n", "", "sequence", "+=", "[", "[", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padw", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "]", "]", "\n", "\n", "", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "# We divide the layers into groups to extract intermediate layer outputs", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.NLayerDiscriminator.compute_D_input_nc": [[124, 131], ["None"], "methods", ["None"], ["", "", "def", "compute_D_input_nc", "(", "self", ",", "opt", ")", ":", "\n", "        ", "input_nc", "=", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", "\n", "if", "opt", ".", "contain_dontcare_label", ":", "\n", "            ", "input_nc", "+=", "1", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "input_nc", "+=", "1", "\n", "", "return", "input_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.discriminator.NLayerDiscriminator.forward": [[132, 155], ["discriminator.NLayerDiscriminator.named_children", "submodel", "results.append", "discriminator.NLayerDiscriminator.attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "for", "name", ",", "submodel", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "'model'", "not", "in", "name", ":", "\n", "                ", "continue", "\n", "", "if", "name", "==", "'model{}'", ".", "format", "(", "self", ".", "opt", ".", "n_layers_D", "-", "1", ")", ":", "\n", "                ", "if", "self", ".", "opt", ".", "use_attention", ":", "\n", "                    ", "x", "=", "self", ".", "attn", "(", "results", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "results", "[", "-", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "x", "=", "results", "[", "-", "1", "]", "\n", "", "intermediate_output", "=", "submodel", "(", "x", ")", "\n", "results", ".", "append", "(", "intermediate_output", ")", "\n", "# for submodel in self.children():", "\n", "#     intermediate_output = submodel(results[-1])", "\n", "#     results.append(intermediate_output)", "\n", "\n", "", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "if", "get_intermediate_features", ":", "\n", "            ", "return", "results", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "results", "[", "-", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.vgg_fix.VGG19_feature_color_torchversion.__init__": [[23, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "pool", "=", "'max'", ",", "vgg_normal_correct", "=", "False", ",", "ic", "=", "3", ")", ":", "\n", "        ", "super", "(", "VGG19_feature_color_torchversion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_normal_correct", "=", "vgg_normal_correct", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "ic", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "pool", "==", "'max'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "pool", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.vgg_fix.VGG19_feature_color_torchversion.forward": [[56, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg_fix.VGG19_feature_color_torchversion.pool1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg_fix.VGG19_feature_color_torchversion.pool2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg_fix.VGG19_feature_color_torchversion.pool3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg_fix.VGG19_feature_color_torchversion.pool4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vgg_fix.VGG19_feature_color_torchversion.pool5", "vgg_fix.vgg_preprocess", "vgg_fix.VGG19_feature_color_torchversion.conv1_1", "vgg_fix.VGG19_feature_color_torchversion.conv1_2", "vgg_fix.VGG19_feature_color_torchversion.conv2_1", "vgg_fix.VGG19_feature_color_torchversion.conv2_2", "vgg_fix.VGG19_feature_color_torchversion.conv3_1", "vgg_fix.VGG19_feature_color_torchversion.conv3_2", "vgg_fix.VGG19_feature_color_torchversion.conv3_3", "vgg_fix.VGG19_feature_color_torchversion.conv3_4", "vgg_fix.VGG19_feature_color_torchversion.conv4_1", "vgg_fix.VGG19_feature_color_torchversion.conv4_2", "vgg_fix.VGG19_feature_color_torchversion.conv4_3", "vgg_fix.VGG19_feature_color_torchversion.conv4_4", "vgg_fix.VGG19_feature_color_torchversion.conv5_1", "vgg_fix.VGG19_feature_color_torchversion.conv5_2", "vgg_fix.VGG19_feature_color_torchversion.conv5_3", "vgg_fix.VGG19_feature_color_torchversion.conv5_4"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.vgg_fix.vgg_preprocess"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "out_keys", ",", "preprocess", "=", "True", ")", ":", "\n", "        ", "''' \n        NOTE: input tensor should range in [0,1]\n        '''", "\n", "out", "=", "{", "}", "\n", "if", "preprocess", ":", "\n", "            ", "x", "=", "vgg_preprocess", "(", "x", ",", "vgg_normal_correct", "=", "self", ".", "vgg_normal_correct", ")", "\n", "", "out", "[", "'r11'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "out", "[", "'r12'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_2", "(", "out", "[", "'r11'", "]", ")", ")", "\n", "out", "[", "'p1'", "]", "=", "self", ".", "pool1", "(", "out", "[", "'r12'", "]", ")", "\n", "out", "[", "'r21'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "out", "[", "'p1'", "]", ")", ")", "\n", "out", "[", "'r22'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "out", "[", "'r21'", "]", ")", ")", "\n", "out", "[", "'p2'", "]", "=", "self", ".", "pool2", "(", "out", "[", "'r22'", "]", ")", "\n", "out", "[", "'r31'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "out", "[", "'p2'", "]", ")", ")", "\n", "out", "[", "'r32'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "out", "[", "'r31'", "]", ")", ")", "\n", "out", "[", "'r33'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_3", "(", "out", "[", "'r32'", "]", ")", ")", "\n", "out", "[", "'r34'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_4", "(", "out", "[", "'r33'", "]", ")", ")", "\n", "out", "[", "'p3'", "]", "=", "self", ".", "pool3", "(", "out", "[", "'r34'", "]", ")", "\n", "out", "[", "'r41'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "out", "[", "'p3'", "]", ")", ")", "\n", "out", "[", "'r42'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "out", "[", "'r41'", "]", ")", ")", "\n", "out", "[", "'r43'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_3", "(", "out", "[", "'r42'", "]", ")", ")", "\n", "out", "[", "'r44'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_4", "(", "out", "[", "'r43'", "]", ")", ")", "\n", "out", "[", "'p4'", "]", "=", "self", ".", "pool4", "(", "out", "[", "'r44'", "]", ")", "\n", "out", "[", "'r51'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_1", "(", "out", "[", "'p4'", "]", ")", ")", "\n", "out", "[", "'r52'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_2", "(", "out", "[", "'r51'", "]", ")", ")", "\n", "out", "[", "'r53'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_3", "(", "out", "[", "'r52'", "]", ")", ")", "\n", "out", "[", "'r54'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_4", "(", "out", "[", "'r53'", "]", ")", ")", "\n", "out", "[", "'p5'", "]", "=", "self", ".", "pool5", "(", "out", "[", "'r54'", "]", ")", "\n", "return", "[", "out", "[", "key", "]", "for", "key", "in", "out_keys", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.vgg_fix.vgg_preprocess": [[6, 16], ["torch.cat", "torch.cat", "torch.cat", "torch.Tensor().type_as().view", "torch.Tensor().type_as().view", "torch.Tensor().type_as().view", "torch.Tensor().type_as", "torch.Tensor().type_as", "torch.Tensor().type_as", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "vgg_preprocess", "(", "tensor", ",", "vgg_normal_correct", "=", "False", ")", ":", "\n", "    ", "if", "vgg_normal_correct", ":", "\n", "        ", "tensor", "=", "(", "tensor", "+", "1", ")", "/", "2", "\n", "# input is RGB tensor which ranges in [0,1]", "\n", "# output is BGR tensor which ranges in [0,255]", "\n", "", "tensor_bgr", "=", "torch", ".", "cat", "(", "(", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# tensor_bgr = tensor[:, [2, 1, 0], ...]", "\n", "tensor_bgr_ml", "=", "tensor_bgr", "-", "torch", ".", "Tensor", "(", "[", "0.40760392", ",", "0.45795686", ",", "0.48501961", "]", ")", ".", "type_as", "(", "tensor_bgr", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "tensor_rst", "=", "tensor_bgr_ml", "*", "255", "\n", "return", "tensor_rst", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.encoder.ConvEncoder.__init__": [[16, 37], ["models.networks.base_network.BaseNetwork.__init__", "int", "models.networks.normalization.get_nonspade_norm_layer", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.ceil", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.get_nonspade_norm_layer"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "kw", "=", "3", "\n", "pw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "ndf", "=", "opt", ".", "ngf", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_E", ")", "\n", "self", ".", "layer1", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer2", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "1", ",", "ndf", "*", "2", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer3", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer4", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer5", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "if", "opt", ".", "crop_size", ">=", "256", ":", "\n", "            ", "self", ".", "layer6", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "\n", "", "self", ".", "so", "=", "s0", "=", "4", "\n", "self", ".", "fc_mu", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "s0", "*", "s0", ",", "256", ")", "\n", "self", ".", "fc_var", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "s0", "*", "s0", ",", "256", ")", "\n", "\n", "self", ".", "actvn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.encoder.ConvEncoder.forward": [[38, 56], ["encoder.ConvEncoder.layer1", "encoder.ConvEncoder.layer2", "encoder.ConvEncoder.layer3", "encoder.ConvEncoder.layer4", "encoder.ConvEncoder.layer5", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.view", "encoder.ConvEncoder.fc_mu", "encoder.ConvEncoder.fc_var", "torch.interpolate", "torch.interpolate", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.layer6", "encoder.ConvEncoder.size", "encoder.ConvEncoder.size", "encoder.ConvEncoder.size", "encoder.ConvEncoder.actvn"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "2", ")", "!=", "256", "or", "x", ".", "size", "(", "3", ")", "!=", "256", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer3", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer5", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "if", "self", ".", "opt", ".", "crop_size", ">=", "256", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "actvn", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "fc_mu", "(", "x", ")", "\n", "logvar", "=", "self", ".", "fc_var", "(", "x", ")", "\n", "\n", "return", "mu", ",", "logvar", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.SPADE.__init__": [[77, 107], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "re.search.group", "re.search.group", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "input_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "\n", "if", "param_free_norm_type", "==", "'position'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "PositionalNorm2d", "\n", "", "elif", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "\n", "%", "param_free_norm_type", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.SPADE.forward": [[108, 123], ["normalization.SPADE.param_free_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE.mlp_shared", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "segmap", ")", "\n", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.AttentionNorm.__init__": [[126, 149], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "use_sn", ",", "rate", "=", "1", ",", "temp", "=", "5", ",", "with_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", "AttentionNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Channel multiplier", "\n", "self", ".", "with_attn", "=", "with_attn", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "ch", "=", "ch", "\n", "self", ".", "down0", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "kernel_size", "=", "rate", ",", "padding", "=", "rate", "//", "4", ",", "stride", "=", "rate", ")", "\n", "self", ".", "down1", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "kernel_size", "=", "rate", ",", "padding", "=", "rate", "//", "4", ",", "stride", "=", "rate", ")", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "o", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", "//", "2", ",", "self", ".", "ch", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ch", ",", "self", ".", "ch", ",", "kernel_size", "=", "rate", ",", "padding", "=", "0", ",", "stride", "=", "rate", ")", "\n", "if", "use_sn", ":", "\n", "            ", "self", ".", "down0", "=", "spectral_norm", "(", "self", ".", "down0", ")", "\n", "self", ".", "down1", "=", "spectral_norm", "(", "self", ".", "down1", ")", "\n", "self", ".", "theta", "=", "spectral_norm", "(", "self", ".", "theta", ")", "\n", "self", ".", "phi", "=", "spectral_norm", "(", "self", ".", "phi", ")", "\n", "self", ".", "g", "=", "spectral_norm", "(", "self", ".", "g", ")", "\n", "self", ".", "o", "=", "spectral_norm", "(", "self", ".", "o", ")", "\n", "self", ".", "up", "=", "spectral_norm", "(", "self", ".", "up", ")", "\n", "# Learnable gain parameter", "\n", "", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.AttentionNorm.forward": [[150, 170], ["normalization.AttentionNorm.down0", "normalization.AttentionNorm.down1", "normalization.AttentionNorm.theta", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "theta.view.view.view", "phi.view.view.view", "g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "normalization.AttentionNorm.o", "normalization.AttentionNorm.phi", "normalization.AttentionNorm.g", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "normalization.AttentionNorm.up", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "theta.view.view.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_x", ",", "input_y", ")", ":", "\n", "# Apply convs", "\n", "        ", "x", "=", "self", ".", "down0", "(", "input_x", ")", "\n", "y", "=", "self", ".", "down1", "(", "input_y", ")", "\n", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "F", ".", "max_pool2d", "(", "self", ".", "phi", "(", "x", ")", ",", "[", "2", ",", "2", "]", ")", "\n", "g", "=", "F", ".", "max_pool2d", "(", "self", ".", "g", "(", "y", ")", ",", "[", "2", ",", "2", "]", ")", "\n", "# Perform reshapes", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "//", "4", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "//", "4", ")", "\n", "# Matmul and softmax to get attention maps", "\n", "beta", "=", "F", ".", "softmax", "(", "self", ".", "temp", "*", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", ",", "-", "1", ")", "\n", "# Attention map times g path", "\n", "o", "=", "self", ".", "o", "(", "torch", ".", "bmm", "(", "g", ",", "beta", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ")", "\n", "out", "=", "self", ".", "up", "(", "o", ")", "+", "self", ".", "gamma", "*", "input_y", "\n", "if", "self", ".", "with_attn", ":", "\n", "            ", "return", "out", ",", "beta", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.FRAN.__init__": [[172, 206], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization.AttentionNorm", "re.search.group", "re.search.group", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "input_nc", ",", "ch_rate", "=", "4", ",", "size_rate", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'fran'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'fran(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "if", "param_free_norm_type", "==", "'position'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "PositionalNorm2d", "\n", "", "elif", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "\n", "%", "param_free_norm_type", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "", "nhidden", "=", "norm_nc", "//", "ch_rate", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "mlp_shared0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "norm_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_shared1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "an", "=", "AttentionNorm", "(", "nhidden", ",", "True", ",", "size_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.FRAN.forward": [[207, 227], ["normalization.FRAN.param_free_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.FRAN.mlp_shared0", "normalization.FRAN.mlp_shared1", "normalization.FRAN.an", "normalization.FRAN.param_free_norm", "normalization.FRAN.mlp_gamma", "normalization.FRAN.mlp_beta", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "\n", "# gamma and beta", "\n", "actv0", "=", "self", ".", "mlp_shared0", "(", "x", ")", "\n", "actv1", "=", "self", ".", "mlp_shared1", "(", "segmap", ")", "\n", "\n", "actv", "=", "self", ".", "an", "(", "actv0", ",", "actv1", ")", "\n", "actv", "=", "self", ".", "param_free_norm", "(", "actv", ")", "\n", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.get_nonspade_norm_layer": [[16, 55], ["hasattr", "torch.weight.size", "norm_type.startswith", "torch.Sequential", "getattr", "torch", "getattr", "delattr", "torch.register_parameter", "torch.BatchNorm2d", "len", "normalization.get_nonspade_norm_layer.get_out_channel"], "function", ["None"], ["def", "get_nonspade_norm_layer", "(", "opt", ",", "norm_type", "=", "'instance'", ")", ":", "\n", "# helper function to get # output channels of the previous layer", "\n", "    ", "def", "get_out_channel", "(", "layer", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'out_channels'", ")", ":", "\n", "            ", "return", "getattr", "(", "layer", ",", "'out_channels'", ")", "\n", "", "return", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "\n", "# this function will be returned", "\n", "", "def", "add_norm_layer", "(", "layer", ")", ":", "\n", "        ", "nonlocal", "norm_type", "\n", "if", "norm_type", ".", "startswith", "(", "'spectral'", ")", ":", "\n", "            ", "layer", "=", "spectral_norm", "(", "layer", ")", "\n", "subnorm_type", "=", "norm_type", "[", "len", "(", "'spectral'", ")", ":", "]", "\n", "", "else", ":", "\n", "            ", "subnorm_type", "=", "norm_type", "\n", "\n", "", "if", "subnorm_type", "==", "'none'", "or", "len", "(", "subnorm_type", ")", "==", "0", ":", "\n", "            ", "return", "layer", "\n", "\n", "# remove bias in the previous layer, which is meaningless", "\n", "# since it has no effect after normalization", "\n", "", "if", "getattr", "(", "layer", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "delattr", "(", "layer", ",", "'bias'", ")", "\n", "layer", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "subnorm_type", "==", "'batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'sync_batch'", ":", "\n", "            ", "norm_layer", "=", "SynchronizedBatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "False", ")", "\n", "", "elif", "subnorm_type", "==", "'RN_L'", ":", "\n", "            ", "norm_layer", "=", "RN_L", "(", "get_out_channel", "(", "layer", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'normalization layer %s is not recognized'", "%", "subnorm_type", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "layer", ",", "norm_layer", ")", "\n", "\n", "", "return", "add_norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.PositionalNorm2d": [[56, 62], ["x.mean", "x.var().add().sqrt", "x.var().add", "x.var"], "function", ["None"], ["", "def", "PositionalNorm2d", "(", "x", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "# x: B*C*W*H normalize in C dim", "\n", "    ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "add", "(", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.Attention.__init__": [[17, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "use_sn", ",", "with_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Channel multiplier", "\n", "self", ".", "with_attn", "=", "with_attn", "\n", "self", ".", "ch", "=", "ch", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "o", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", "//", "2", ",", "self", ".", "ch", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "if", "use_sn", ":", "\n", "            ", "self", ".", "theta", "=", "spectral_norm", "(", "self", ".", "theta", ")", "\n", "self", ".", "phi", "=", "spectral_norm", "(", "self", ".", "phi", ")", "\n", "self", ".", "g", "=", "spectral_norm", "(", "self", ".", "g", ")", "\n", "self", ".", "o", "=", "spectral_norm", "(", "self", ".", "o", ")", "\n", "# Learnable gain parameter", "\n", "", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.Attention.forward": [[34, 52], ["architecture.Attention.theta", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "theta.view.view.view", "phi.view.view.view", "g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "architecture.Attention.o", "architecture.Attention.phi", "architecture.Attention.g", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "theta.view.view.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# Apply convs", "\n", "        ", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "F", ".", "max_pool2d", "(", "self", ".", "phi", "(", "x", ")", ",", "[", "2", ",", "2", "]", ")", "\n", "g", "=", "F", ".", "max_pool2d", "(", "self", ".", "g", "(", "x", ")", ",", "[", "2", ",", "2", "]", ")", "\n", "# Perform reshapes", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "8", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "8", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "//", "4", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "//", "4", ")", "\n", "# Matmul and softmax to get attention maps", "\n", "beta", "=", "F", ".", "softmax", "(", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", ",", "-", "1", ")", "\n", "# Attention map times g path", "\n", "o", "=", "self", ".", "o", "(", "torch", ".", "bmm", "(", "g", ",", "beta", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ")", "\n", "out", "=", "self", ".", "gamma", "*", "o", "+", "x", "\n", "if", "self", ".", "with_attn", ":", "\n", "            ", "return", "out", ",", "beta", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.__init__": [[55, 83], ["torch.Module.__init__", "min", "architecture.GatedConv2dWithActivation", "architecture.GatedConv2dWithActivation", "opt.norm_G.replace", "models.networks.normalization.FRAN", "models.networks.normalization.FRAN", "architecture.GatedConv2dWithActivation", "architecture.GatedConv2dWithActivation", "architecture.GatedConv2dWithActivation", "models.networks.normalization.FRAN", "architecture.GatedConv2dWithActivation"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ",", "highfreq_nc", "=", "None", ",", "groups", "=", "1", ",", "ch_rate", "=", "4", ",", "size_rate", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "if", "highfreq_nc", "is", "None", ":", "\n", "            ", "highfreq_nc", "=", "opt", ".", "highfreq_nc", "\n", "\n", "# create conv layers", "\n", "", "self", ".", "conv_0", "=", "GatedConv2dWithActivation", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "activation", "=", "None", ")", "\n", "self", ".", "conv_1", "=", "GatedConv2dWithActivation", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "activation", "=", "None", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "GatedConv2dWithActivation", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "activation", "=", "None", ")", "\n", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "opt", ".", "norm_G", ":", "\n", "            ", "self", ".", "conv_0", "=", "GatedConv2dWithActivation", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm_layer", "=", "spectral_norm", ",", "activation", "=", "None", ")", "\n", "self", ".", "conv_1", "=", "GatedConv2dWithActivation", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "norm_layer", "=", "spectral_norm", ",", "activation", "=", "None", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                ", "self", ".", "conv_s", "=", "GatedConv2dWithActivation", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "norm_layer", "=", "spectral_norm", ",", "activation", "=", "None", ")", "\n", "\n", "\n", "# define normalization layers", "\n", "", "", "spade_config_str", "=", "opt", ".", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "self", ".", "norm_0", "=", "FRAN", "(", "spade_config_str", ",", "fin", ",", "highfreq_nc", ",", "ch_rate", ",", "size_rate", ")", "\n", "self", ".", "norm_1", "=", "FRAN", "(", "spade_config_str", ",", "fmiddle", ",", "highfreq_nc", ",", "ch_rate", ",", "size_rate", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "FRAN", "(", "spade_config_str", ",", "fin", ",", "highfreq_nc", ",", "ch_rate", ",", "size_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.forward": [[86, 95], ["architecture.GC_FRANResnetBlock.shortcut", "architecture.GC_FRANResnetBlock.conv_0", "architecture.GC_FRANResnetBlock.conv_1", "architecture.GC_FRANResnetBlock.actvn", "architecture.GC_FRANResnetBlock.actvn", "architecture.GC_FRANResnetBlock.norm_0", "architecture.GC_FRANResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.shortcut", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg", ")", "\n", "\n", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg", ")", ")", ")", "\n", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.shortcut": [[96, 102], ["architecture.GC_FRANResnetBlock.conv_s", "architecture.GC_FRANResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GC_FRANResnetBlock.actvn": [[103, 105], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.ResnetBlock.__init__": [[109, 120], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "False", ")", ",", "dilation", "=", "1", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pw_d", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "pw", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw_d", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "dilation", ")", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "1", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.ResnetBlock.forward": [[122, 126], ["architecture.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.ResnetBlock_GC.__init__": [[129, 141], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "architecture.GatedConv2dWithActivation", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "architecture.GatedConv2dWithActivation"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "False", ")", ",", "dilation", "=", "1", ",", "kernel_size", "=", "3", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pw_d", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "pw", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw_d", ")", ",", "\n", "GatedConv2dWithActivation", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "GatedConv2dWithActivation", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "1", ",", "\n", "groups", "=", "groups", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "None", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.ResnetBlock_GC.forward": [[143, 147], ["architecture.ResnetBlock_GC.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GatedConv2dWithActivation.__init__": [[156, 171], ["torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "super().__init__", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "architecture.GatedConv2dWithActivation.modules", "norm_layer", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "isinstance", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "norm_layer", "=", "None", ",", "activation", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", "GatedConv2dWithActivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv2d", "=", "norm_layer", "(", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", ")", "\n", "self", ".", "mask_conv2d", "=", "norm_layer", "(", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "mask_conv2d", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "# self.batch_norm2d = torch.nn.BatchNorm2d(out_channels)", "\n", "", "self", ".", "sigmoid", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "", "", "def", "gated", "(", "self", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GatedConv2dWithActivation.gated": [[171, 174], ["architecture.GatedConv2dWithActivation.sigmoid"], "methods", ["None"], ["", "", "", "def", "gated", "(", "self", ",", "mask", ")", ":", "\n", "#return torch.clamp(mask, -1, 1)", "\n", "        ", "return", "self", ".", "sigmoid", "(", "mask", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GatedConv2dWithActivation.forward": [[174, 183], ["architecture.GatedConv2dWithActivation.conv2d", "architecture.GatedConv2dWithActivation.mask_conv2d", "architecture.GatedConv2dWithActivation.activation", "architecture.GatedConv2dWithActivation.gated", "architecture.GatedConv2dWithActivation.gated"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GatedConv2dWithActivation.gated", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.GatedConv2dWithActivation.gated"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv2d", "(", "input", ")", "\n", "mask", "=", "self", ".", "mask_conv2d", "(", "input", ")", "\n", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "*", "self", ".", "gated", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "gated", "(", "mask", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.VGG19.__init__": [[186, 207], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "architecture.VGG19.slice1.add_module", "architecture.VGG19.slice2.add_module", "architecture.VGG19.slice3.add_module", "architecture.VGG19.slice4.add_module", "architecture.VGG19.slice5.add_module", "architecture.VGG19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.architecture.VGG19.forward": [[208, 216], ["architecture.VGG19.slice1", "architecture.VGG19.slice2", "architecture.VGG19.slice3", "architecture.VGG19.slice4", "architecture.VGG19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.__init__": [[17, 38], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.get_target_tensor": [[39, 50], ["loss.GANLoss.real_label_tensor.expand_as", "loss.GANLoss.fake_label_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.real_label_tensor.requires_grad_", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.fake_label_tensor.requires_grad_", "loss.GANLoss.Tensor", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.get_zero_tensor": [[51, 56], ["loss.GANLoss.zero_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.zero_tensor.requires_grad_", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.loss": [[57, 83], ["F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.__call__": [[84, 99], ["isinstance", "loss.GANLoss.loss", "isinstance", "loss.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "loss.GANLoss.size", "loss.GANLoss.view", "len", "loss.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.loss", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "# computing loss is a bit complicated because |input| may not be", "\n", "# a tensor, but list of tensors in case of multiscale discriminator", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "pred_i", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLoss.__init__": [[103, 108], ["torch.Module.__init__", "models.networks.architecture.VGG19().cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "models.networks.architecture.VGG19"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLoss.forward": [[109, 115], ["range", "loss.VGGLoss.vgg", "loss.VGGLoss.vgg", "len", "loss.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses.__init__": [[118, 124], ["torch.Module.__init__", "models.networks.architecture.VGG19().cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "models.networks.architecture.VGG19"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLosses", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "l1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "l2", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses.compute_gram": [[125, 132], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["", "def", "compute_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses.forward": [[133, 146], ["range", "range", "loss.VGGLosses.l2", "loss.VGGLosses.vgg", "loss.VGGLosses.vgg", "len", "len", "loss.VGGLosses.l1", "y_vgg[].detach", "loss.VGGLosses.l1", "loss.VGGLosses.compute_gram", "loss.VGGLosses.compute_gram", "y_vgg[].detach", "y_vgg[].detach"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.compute_gram", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.compute_gram"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "vgg_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "vgg_loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "l1", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "style_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "style_loss", "+=", "self", ".", "l1", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "i", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", ")", "\n", "\n", "", "perc_loss", "=", "self", ".", "l2", "(", "x_vgg", "[", "-", "2", "]", ",", "y_vgg", "[", "-", "2", "]", ".", "detach", "(", ")", ")", "\n", "\n", "return", "vgg_loss", ",", "style_loss", ",", "perc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.__init__": [[148, 160], ["torch.Module.__init__", "models.networks.vgg_fix.VGG19_feature_color_torchversion", "loss.VGGLosses_fix.vggnet_fix.load_state_dict", "loss.VGGLosses_fix.vggnet_fix.eval", "loss.VGGLosses_fix.vggnet_fix.parameters", "loss.VGGLosses_fix.vggnet_fix.cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_normal_correct", ")", ":", "\n", "        ", "super", "(", "VGGLosses_fix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vggnet_fix", "=", "VGG19_feature_color_torchversion", "(", "vgg_normal_correct", "=", "vgg_normal_correct", ")", "\n", "self", ".", "vggnet_fix", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'models/vgg19_conv.pth'", ")", ")", "\n", "self", ".", "vggnet_fix", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "vggnet_fix", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "vggnet_fix", "=", "self", ".", "vggnet_fix", ".", "cuda", "(", ")", "\n", "self", ".", "l1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "l2", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.compute_gram": [[161, 168], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["", "def", "compute_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.forward": [[169, 183], ["loss.VGGLosses_fix.vggnet_fix", "loss.VGGLosses_fix.vggnet_fix", "range", "range", "loss.VGGLosses_fix.l2", "len", "len", "loss.VGGLosses_fix.l1", "y_vgg[].detach", "loss.VGGLosses_fix.l1", "loss.VGGLosses_fix.compute_gram", "loss.VGGLosses_fix.compute_gram", "y_vgg[].detach", "y_vgg[].detach"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.compute_gram", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.VGGLosses_fix.compute_gram"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", "=", "self", ".", "vggnet_fix", "(", "x", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "y_vgg", "=", "self", ".", "vggnet_fix", "(", "y", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "vgg_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "vgg_loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "l1", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "style_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "style_loss", "+=", "self", ".", "l1", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "i", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", ")", "\n", "\n", "", "perc_loss", "=", "self", ".", "l2", "(", "x_vgg", "[", "-", "2", "]", ",", "y_vgg", "[", "-", "2", "]", ".", "detach", "(", ")", ")", "\n", "\n", "return", "vgg_loss", ",", "style_loss", ",", "perc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.KLDLoss.forward": [[186, 188], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.loss.TV_Loss.forward": [[190, 205], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Compute total variation loss.\n        Inputs:\n        - img: PyTorch Variable of shape (1, 3, H, W) holding an input image.\n        - tv_weight: Scalar giving the weight w_t to use for the TV loss.\n        Returns:\n        - loss: PyTorch Variable holding a scalar giving the total variation loss\n        for img weighted by tv_weight.\n        \"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "w_variance", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ",", "2", ")", ")", "/", "(", "c", ")", "\n", "h_variance", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ",", "2", ")", ")", "\n", "tv_loss", "=", "h_variance", "+", "w_variance", "\n", "return", "tv_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.generator.WaveletInpaintLv2GCFRANGenerator.modify_commandline_options": [[20, 31], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "norm_G", "=", "'spectralfranposition3x3'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_n_blocks'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_kernel_size'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size of the resnet block'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_upsampling_layers'", ",", "\n", "choices", "=", "(", "'normal'", ",", "'more'", ",", "'most'", ")", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "\"If 'more', adds upsampling layer between the two middle resnet blocks. If 'most', also add one more upsampling + resnet layer at the end of the generator\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.generator.WaveletInpaintLv2GCFRANGenerator.__init__": [[32, 75], ["models.networks.base_network.BaseNetwork.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.networks.normalization.get_nonspade_norm_layer", "models.networks.architecture.GatedConv2dWithActivation", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.networks.architecture.GatedConv2dWithActivation", "pytorch_wavelets.DWTForward", "pytorch_wavelets.DWTInverse", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.networks.architecture.GC_FRANResnetBlock", "models.networks.architecture.GC_FRANResnetBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.networks.architecture.ResnetBlock_GC", "models.networks.architecture.GatedConv2dWithActivation", "models.networks.architecture.ResnetBlock_GC", "models.networks.architecture.GatedConv2dWithActivation", "models.networks.architecture.ResnetBlock_GC", "models.networks.architecture.GatedConv2dWithActivation", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.networks.architecture.GatedConv2dWithActivation", "models.networks.architecture.GatedConv2dWithActivation", "models.networks.architecture.GatedConv2dWithActivation", "models.networks.architecture.Attention", "len", "models.networks.architecture.ResnetBlock_GC"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "use_cuda", "=", "(", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ")", "and", "(", "-", "1", "not", "in", "self", ".", "opt", ".", "gpu_ids", ")", "\n", "nf", "=", "opt", ".", "ngf", "\n", "final_nc", "=", "nf", "\n", "activation", "=", "nn", ".", "ReLU", "(", "False", ")", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "'spectralinstance'", ")", "\n", "self", ".", "fc", "=", "GatedConv2d", "(", "self", ".", "opt", ".", "input_nc", ",", "4", "*", "nf", ",", "3", ",", "padding", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "2", ")", ",", "\n", "GatedConv2d", "(", "self", ".", "opt", ".", "input_nc", ",", "nf", ",", "kernel_size", "=", "5", ",", "padding", "=", "0", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ")", ",", "\n", "GatedConv2d", "(", "nf", ",", "2", "*", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ")", ",", "\n", "GatedConv2d", "(", "2", "*", "nf", ",", "4", "*", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ")", ")", "\n", "self", ".", "fuse_conv", "=", "GatedConv2d", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "3", ",", "padding", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ")", "\n", "self", ".", "xfm", "=", "DWTForward", "(", "J", "=", "opt", ".", "wavelet_decomp_level", ",", "mode", "=", "'zero'", ",", "wave", "=", "'haar'", ")", "\n", "self", ".", "ifm", "=", "DWTInverse", "(", "mode", "=", "'zero'", ",", "wave", "=", "'haar'", ")", "\n", "res_blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "opt", ".", "resnet_n_blocks", ")", ":", "\n", "            ", "dilation", "=", "2", "**", "(", "i", "-", "2", ")", "if", "i", "<=", "6", "and", "i", ">=", "3", "else", "1", "\n", "res_blocks", "+=", "[", "ResnetBlock_GC", "(", "4", "*", "nf", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "activation", "=", "activation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "kernel_size", "=", "opt", ".", "resnet_kernel_size", ")", "]", "\n", "", "self", ".", "res_blocks", "=", "nn", ".", "Sequential", "(", "*", "res_blocks", ")", "\n", "if", "self", ".", "opt", ".", "use_attention", ":", "\n", "            ", "self", ".", "attn", "=", "Attention", "(", "4", "*", "nf", ",", "'spectral'", "in", "opt", ".", "norm_G", ")", "\n", "", "self", ".", "sp0", "=", "GC_FRANResnetBlock", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "opt", ",", "ch_rate", "=", "4", ",", "size_rate", "=", "1", ")", "\n", "self", ".", "sp1", "=", "GC_FRANResnetBlock", "(", "12", "*", "nf", ",", "2", "*", "nf", ",", "opt", ",", "ch_rate", "=", "4", ",", "size_rate", "=", "2", ")", "\n", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "# branch 1:", "\n", "self", ".", "res_b1", "=", "ResnetBlock_GC", "(", "4", "*", "nf", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ",", "kernel_size", "=", "opt", ".", "resnet_kernel_size", ")", "\n", "self", ".", "conv_b1", "=", "GatedConv2d", "(", "4", "*", "nf", ",", "self", ".", "opt", ".", "output_nc", ",", "3", ",", "padding", "=", "1", ",", "activation", "=", "None", ")", "\n", "\n", "# branch 2:", "\n", "self", ".", "res_b2", "=", "ResnetBlock_GC", "(", "4", "*", "nf", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ",", "kernel_size", "=", "opt", ".", "resnet_kernel_size", ")", "\n", "self", ".", "conv_b2", "=", "GatedConv2d", "(", "4", "*", "nf", ",", "self", ".", "opt", ".", "output_nc", "*", "3", ",", "3", ",", "padding", "=", "1", ",", "activation", "=", "None", ")", "\n", "\n", "# branch 3:", "\n", "self", ".", "res_b3", "=", "ResnetBlock_GC", "(", "2", "*", "nf", ",", "norm_layer", "=", "norm_layer", ",", "activation", "=", "activation", ",", "kernel_size", "=", "opt", ".", "resnet_kernel_size", ")", "\n", "self", ".", "conv_b3", "=", "GatedConv2d", "(", "2", "*", "nf", ",", "self", ".", "opt", ".", "output_nc", "*", "3", ",", "3", ",", "padding", "=", "1", ",", "activation", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.generator.WaveletInpaintLv2GCFRANGenerator.forward": [[77, 113], ["generator.WaveletInpaintLv2GCFRANGenerator.xfm", "Yh[].contiguous().view", "Yh[].contiguous().view", "generator.WaveletInpaintLv2GCFRANGenerator.fc", "generator.WaveletInpaintLv2GCFRANGenerator.encoder", "generator.WaveletInpaintLv2GCFRANGenerator.fuse_conv", "generator.WaveletInpaintLv2GCFRANGenerator.res_blocks", "generator.WaveletInpaintLv2GCFRANGenerator.res_b1", "generator.WaveletInpaintLv2GCFRANGenerator.conv_b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.WaveletInpaintLv2GCFRANGenerator.sp0", "generator.WaveletInpaintLv2GCFRANGenerator.res_b2", "generator.WaveletInpaintLv2GCFRANGenerator.conv_b2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.WaveletInpaintLv2GCFRANGenerator.up", "generator.WaveletInpaintLv2GCFRANGenerator.sp1", "generator.WaveletInpaintLv2GCFRANGenerator.res_b3", "generator.WaveletInpaintLv2GCFRANGenerator.conv_b3", "generator.WaveletInpaintLv2GCFRANGenerator.ifm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator.WaveletInpaintLv2GCFRANGenerator.attn", "generator.WaveletInpaintLv2GCFRANGenerator.contiguous().view", "generator.WaveletInpaintLv2GCFRANGenerator.contiguous().view", "generator.WaveletInpaintLv2GCFRANGenerator.ifm", "Yh[].contiguous", "Yh[].contiguous", "generator.WaveletInpaintLv2GCFRANGenerator.contiguous", "generator.WaveletInpaintLv2GCFRANGenerator.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", "=", "None", ")", ":", "\n", "        ", "image", ",", "mask", "=", "input", "[", ":", ",", ":", "3", "]", ",", "input", "[", ":", ",", "3", ":", "4", "]", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "Yl", ",", "Yh", "=", "self", ".", "xfm", "(", "input", ")", "# Yl.shape = [b, c, h//8, w//8]", "\n", "Yh1", "=", "Yh", "[", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", "*", "3", ",", "h", "//", "2", ",", "w", "//", "2", ")", "\n", "Yh0", "=", "Yh", "[", "1", "]", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", "*", "3", ",", "h", "//", "4", ",", "w", "//", "4", ")", "\n", "x", "=", "self", ".", "fc", "(", "Yl", ")", "\n", "x_enc", "=", "self", ".", "encoder", "(", "input", ")", "\n", "x", "=", "self", ".", "fuse_conv", "(", "torch", ".", "cat", "(", "[", "x", ",", "x_enc", "]", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "res_blocks", "(", "x", ")", "\n", "if", "self", ".", "opt", ".", "use_attention", ":", "\n", "            ", "x", "=", "self", ".", "attn", "(", "x", ")", "\n", "# branch 1: recover Yl", "\n", "", "x_l", "=", "self", ".", "res_b1", "(", "x", ")", "\n", "out_l", "=", "self", ".", "conv_b1", "(", "x_l", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_l", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "sp0", "(", "x", ",", "Yh0", ")", "\n", "\n", "# branch 2: recover Yh0", "\n", "x_h0", "=", "self", ".", "res_b2", "(", "x", ")", "\n", "out_h0", "=", "self", ".", "conv_b2", "(", "x_h0", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_l", ",", "x_h0", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "sp1", "(", "x", ",", "Yh1", ")", "\n", "\n", "# branch 3: recover Yh1", "\n", "x_h1", "=", "self", ".", "res_b3", "(", "x", ")", "\n", "out_h1", "=", "self", ".", "conv_b3", "(", "x_h1", ")", "\n", "\n", "# high-frequency outputs", "\n", "out_h", "=", "[", "out_h1", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "opt", ".", "output_nc", ",", "3", ",", "h", "//", "2", ",", "w", "//", "2", ")", ",", "\n", "out_h0", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "self", ".", "opt", ".", "output_nc", ",", "3", ",", "h", "//", "4", ",", "w", "//", "4", ")", "]", "\n", "out_pyramid", "=", "[", "self", ".", "ifm", "(", "(", "out_l", ",", "out_h", "[", "1", ":", "]", ")", ")", "]", "# pyramid outputs (eg. 64x64, 128x128)", "\n", "out_wavelet", "=", "self", ".", "ifm", "(", "(", "out_l", ",", "out_h", ")", ")", "# final output", "\n", "\n", "return", "out_l", ",", "out_h", ",", "out_pyramid", ",", "out_wavelet", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.modify_commandline_options": [[14, 17], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.print_network": [[18, 27], ["isinstance", "base_network.BaseNetwork.parameters", "print", "param.numel", "type"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "list", ")", ":", "\n", "            ", "self", "=", "self", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network [%s] was created. Total number of parameters: %.1f million. '", "\n", "'To see the architecture, do print(network).'", "\n", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "num_params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.init_weights": [[28, 60], ["base_network.BaseNetwork.apply", "base_network.BaseNetwork.children", "hasattr", "classname.find", "m.init_weights", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.init_weights", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier_uniform'", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'none'", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'init_weights'", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "init_type", ",", "gain", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name": [[14, 23], ["util.find_class_in_module", "issubclass"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.find_class_in_module"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.modify_commandline_options": [[25, 37], ["netD_cls.modify_commandline_options.parse_known_args", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.modify_commandline_options", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.modify_commandline_options", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.modify_commandline_options"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.create_network": [[39, 50], ["cls.print_network", "cls.init_weights", "cls", "cls", "len", "torch.cuda.is_available", "cls.cuda"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.print_network", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.base_network.BaseNetwork.init_weights"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.define_G": [[52, 55], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.define_D": [[57, 60], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.define_E": [[61, 65], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 62], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[63, 94], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[95, 104], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[105, 127], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[128, 146], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[204, 209], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[267, 272], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[331, 336], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[338, 351], ["None"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.convert_model": [[353, 395], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.modify_commandline_options": [[21, 32], ["parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "# parser = InpaintDataset.modify_commandline_options(parser, is_train)", "\n", "        ", "parser", ".", "set_defaults", "(", "dataroot", "=", "'./dataset/psv/'", ")", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "input_nc", "=", "3", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "no_instance", "=", "True", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.get_paths": [[33, 47], ["os.path.dirname", "numpy.genfromtxt", "os.path.join", "max", "len", "os.path.join", "range", "os.path.join", "math.ceil", "str().zfill", "range", "str().zfill", "len", "len", "str", "str"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "root_dir", "=", "os", ".", "path", ".", "dirname", "(", "root", ")", "\n", "image_paths", "=", "[", "i", "for", "i", "in", "np", ".", "genfromtxt", "(", "os", ".", "path", ".", "join", "(", "root", ",", "opt", ".", "dataset_name", ",", "opt", ".", "phase", "+", "'.flist'", ")", ",", "dtype", "=", "np", ".", "str", ",", "encoding", "=", "'utf-8'", ")", "]", "\n", "if", "opt", ".", "mask_type", ">=", "3", ":", "\n", "            ", "mask_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'pconv_masks/testing_mask_dataset/{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "5", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "2000", ",", "12000", ")", "]", "\n", "if", "opt", ".", "pconv_level", ">", "0", ":", "\n", "                ", "mask_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'pconv_masks/testing_mask_dataset/{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "5", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "pconv_level", "*", "2000", ",", "(", "opt", ".", "pconv_level", "+", "1", ")", "*", "2000", ")", "]", "\n", "", "mask_paths", "=", "mask_paths", "*", "(", "max", "(", "1", ",", "math", ".", "ceil", "(", "len", "(", "image_paths", ")", "/", "len", "(", "mask_paths", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "mask_paths", "=", "[", "'0'", "]", "*", "len", "(", "image_paths", ")", "\n", "", "return", "image_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.initialize": [[48, 68], ["inpaint_dataset.InpaintDataset.get_paths", "util.natural_sort", "util.natural_sort", "len", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.get_paths", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.natural_sort", "home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.natural_sort"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "image_paths", ",", "mask_paths", "=", "self", ".", "get_paths", "(", "opt", ")", "\n", "\n", "util", ".", "natural_sort", "(", "mask_paths", ")", "\n", "util", ".", "natural_sort", "(", "image_paths", ")", "\n", "\n", "self", ".", "mask_paths", "=", "mask_paths", "\n", "self", ".", "image_paths", "=", "image_paths", "\n", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "image_paths", "=", "self", ".", "image_paths", "\n", "shuffle", "(", "self", ".", "image_paths", ")", "\n", "", "self", ".", "mask_paths", "=", "self", ".", "mask_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "self", ".", "image_paths", "=", "self", ".", "image_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "if", "opt", ".", "debug", ":", "\n", "            ", "self", ".", "image_paths", "=", "self", ".", "image_paths", "[", ":", "100", "]", "\n", "", "size", "=", "len", "(", "self", ".", "image_paths", ")", "\n", "self", ".", "dataset_size", "=", "size", "\n", "self", ".", "h", ",", "self", ".", "w", "=", "opt", ".", "load_size", ",", "opt", ".", "load_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.paths_match": [[69, 73], ["os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "paths_match", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "filename1_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path1", ")", ")", "[", "0", "]", "\n", "filename2_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path2", ")", ")", "[", "0", "]", "\n", "return", "filename1_without_ext", "==", "filename2_without_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.__getitem__": [[74, 81], ["inpaint_dataset.InpaintDataset.load_item", "print", "inpaint_dataset.InpaintDataset.load_item"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.load_item", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.load_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "item", "=", "self", ".", "load_item", "(", "index", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'loading error: '", "+", "self", ".", "image_paths", "[", "index", "]", ")", "\n", "item", "=", "self", ".", "load_item", "(", "0", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.load_item": [[82, 117], ["os.path.basename", "scipy.misc.imread", "inpaint_dataset.InpaintDataset.resize", "PIL.Image.fromarray().convert", "inpaint_dataset.InpaintDataset.load_mask", "PIL.Image.fromarray", "img.resize.resize.resize", "mask.filter.filter.resize", "torchvision.to_tensor", "torchvision.to_tensor", "torch.cat", "inpaint_dataset.InpaintDataset.postprocess", "mask.filter.filter.filter", "PIL.Image.fromarray", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "PIL.ImageFilter.MaxFilter", "torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.load_mask", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.postprocess"], ["", "def", "load_item", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "img_name", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "image_paths", "[", "index", "]", ")", "\n", "img", "=", "imread", "(", "img_path", ")", "\n", "# center crop and resize to target size", "\n", "img", "=", "self", ".", "resize", "(", "img", ",", "self", ".", "h", ",", "self", ".", "h", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "self", ".", "load_mask", "(", "index", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "# augment ", "\n", "if", "self", ".", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "img", "=", "transforms", ".", "RandomHorizontalFlip", "(", ")", "(", "img", ")", "\n", "img", "=", "transforms", ".", "ColorJitter", "(", "0.05", ",", "0.05", ",", "0.05", ",", "0.05", ")", "(", "img", ")", "\n", "mask", "=", "transforms", ".", "RandomHorizontalFlip", "(", ")", "(", "mask", ")", "\n", "# mask = mask.rotate(random.randint(0,45), expand=True)", "\n", "mask", "=", "mask", ".", "filter", "(", "ImageFilter", ".", "MaxFilter", "(", "3", ")", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "w", ",", "self", ".", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "self", ".", "w", ",", "self", ".", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "img_tensor", "=", "F", ".", "to_tensor", "(", "img", ")", "*", "2", "-", "1.", "\n", "mask_tensor", "=", "F", ".", "to_tensor", "(", "mask", ")", "\n", "masked_img", "=", "(", "img_tensor", "*", "(", "1", "-", "mask_tensor", ")", ")", "+", "mask_tensor", "\n", "masked_img", "=", "torch", ".", "cat", "(", "[", "masked_img", ",", "mask_tensor", "]", ",", "0", ")", "\n", "\n", "input_dict", "=", "{", "'image'", ":", "img_tensor", ",", "\n", "'mask'", ":", "mask_tensor", ",", "\n", "'img_name'", ":", "img_name", ",", "\n", "'masked_img'", ":", "masked_img", "\n", "}", "\n", "\n", "# Give subclasses a chance to modify the final output", "\n", "self", ".", "postprocess", "(", "input_dict", ")", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.load_mask": [[118, 153], ["numpy.zeros().astype", "util.generate_stroke_mask", "inpaint_dataset.InpaintDataset.resize", "scipy.misc.imread", "inpaint_dataset.InpaintDataset.resize", "numpy.random.randint", "random.randint", "numpy.random.binomial", "numpy.zeros", "random.randint", "random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.generate_stroke_mask", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize"], ["", "def", "load_mask", "(", "self", ",", "index", ")", ":", "\n", "        ", "mask_type", "=", "self", ".", "opt", ".", "mask_type", "\n", "\n", "# external + random block", "\n", "if", "mask_type", "==", "4", ":", "\n", "            ", "mask_type", "=", "1", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", "==", "1", "else", "3", "\n", "\n", "# external + random block + random stroke", "\n", "", "elif", "mask_type", "==", "5", ":", "\n", "            ", "mask_type", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "\n", "# random block", "\n", "", "if", "mask_type", "==", "1", ":", "\n", "            ", "m", "=", "np", ".", "zeros", "(", "(", "self", ".", "h", ",", "self", ".", "w", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "self", ".", "opt", ".", "phase", "==", "'train'", ":", "\n", "                ", "t", ",", "l", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "h", "//", "2", ")", ",", "random", ".", "randint", "(", "0", ",", "self", ".", "w", "//", "2", ")", "\n", "m", "[", "t", ":", "t", "+", "self", ".", "h", "//", "2", ",", "l", ":", "l", "+", "self", ".", "w", "//", "2", "]", "=", "255", "\n", "", "else", ":", "\n", "                ", "m", "[", "self", ".", "h", "//", "4", ":", "self", ".", "h", "*", "3", "//", "4", ",", "self", ".", "w", "//", "4", ":", "self", ".", "w", "*", "3", "//", "4", "]", "=", "255", "\n", "", "return", "m", "\n", "\n", "# generate random mask", "\n", "", "if", "mask_type", "==", "2", ":", "\n", "            ", "mask", "=", "util", ".", "generate_stroke_mask", "(", "[", "self", ".", "h", ",", "self", ".", "w", "]", ")", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "return", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "# external", "\n", "", "if", "mask_type", "==", "3", ":", "\n", "            ", "m_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "mask_paths", ")", "-", "1", ")", "if", "self", ".", "opt", ".", "phase", "==", "'train'", "else", "index", "\n", "mask_path", "=", "self", ".", "mask_paths", "[", "m_index", "]", "\n", "mask", "=", "imread", "(", "mask_path", ")", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "# threshold due to interpolation", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize": [[154, 166], ["scipy.misc.imresize", "numpy.minimum"], "methods", ["None"], ["", "", "def", "resize", "(", "self", ",", "img", ",", "height", ",", "width", ",", "centerCrop", "=", "True", ")", ":", "\n", "        ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "if", "centerCrop", "and", "imgh", "!=", "imgw", ":", "\n", "# center crop", "\n", "            ", "side", "=", "np", ".", "minimum", "(", "imgh", ",", "imgw", ")", "\n", "j", "=", "(", "imgh", "-", "side", ")", "//", "2", "\n", "i", "=", "(", "imgw", "-", "side", ")", "//", "2", "\n", "img", "=", "img", "[", "j", ":", "j", "+", "side", ",", "i", ":", "i", "+", "side", ",", "...", "]", "\n", "\n", "", "img", "=", "imresize", "(", "img", ",", "[", "height", ",", "width", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.postprocess": [[167, 169], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.__len__": [[170, 172], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.__init__": [[14, 16], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.modify_commandline_options": [[17, 20], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.BaseDataset.initialize": [[21, 23], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.get_transform": [[25, 57], ["torchvision.Compose", "transform_list.append", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "get_transform", "(", "opt", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "'resize'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "interpolation", "=", "method", ")", ")", "\n", "# elif 'scale_width' in opt.preprocess_mode:", "\n", "#     transform_list.append(transforms.Lambda(lambda img: __scale_width(img, opt.load_size, method)))", "\n", "# elif 'scale_shortside' in opt.preprocess_mode:", "\n", "#     transform_list.append(transforms.Lambda(lambda img: __scale_shortside(img, opt.load_size, method)))", "\n", "\n", "# if 'crop' in opt.preprocess_mode:", "\n", "#     transform_list.append(transforms.Lambda(lambda img: __crop(img, params['crop_pos'], opt.crop_size)))", "\n", "\n", "# if opt.preprocess_mode == 'none':", "\n", "#     base = 32", "\n", "#     transform_list.append(transforms.Lambda(lambda img: __make_power_2(img, base, method)))", "\n", "#", "\n", "# if opt.preprocess_mode == 'fixed':", "\n", "#     w = opt.crop_size", "\n", "#     h = round(opt.crop_size / opt.aspect_ratio)", "\n", "#     transform_list.append(transforms.Lambda(lambda img: __resize(img, w, h, method)))", "\n", "\n", "# if opt.isTrain and not opt.no_flip:", "\n", "#     transform_list.append(transforms.Lambda(lambda img: __flip(img, params['flip'])))", "\n", "\n", "", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.normalize": [[59, 61], ["torchvision.Normalize"], "function", ["None"], ["", "def", "normalize", "(", ")", ":", "\n", "    ", "return", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.__resize": [[63, 65], ["img.resize"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize"], ["", "def", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.__make_power_2": [[67, 74], ["int", "int", "img.resize", "round", "round"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.__scale_width": [[76, 83], ["int", "img.resize"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.__scale_shortside": [[85, 94], ["int", "img.resize", "min", "max"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.inpaint_dataset.InpaintDataset.resize"], ["", "def", "__scale_shortside", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "ss", ",", "ls", "=", "min", "(", "ow", ",", "oh", ")", ",", "max", "(", "ow", ",", "oh", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "ow", "==", "ss", "\n", "if", "(", "ss", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "ls", "=", "int", "(", "target_width", "*", "ls", "/", "ss", ")", "\n", "nw", ",", "nh", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "return", "img", ".", "resize", "(", "(", "nw", ",", "nh", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.__crop": [[96, 101], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.base_dataset.__flip": [[103, 107], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.find_dataset_using_name": [[11, 34], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "ValueError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.get_option_setter": [[36, 39], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.create_dataloader": [[41, 56], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "torch.utils.data.DataLoader", "int", "len", "type"], "function", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.test_options.TestOptions.initialize": [[10, 22], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "float"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'how many test images to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ",", "crop_size", "=", "256", ",", "load_size", "=", "256", ",", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "serial_batches", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "no_flip", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "phase", "=", "'test'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.train_options.TrainOptions.initialize": [[10, 58], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_known_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for training", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'# of iter at starting learning rate. This is NOT the total #epochs. Totla #epochs is niter + niter_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_TTUR'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use TTUR training scheme'", ")", "\n", "# parser.add_argument('--eval', action='store_true', help='whether run evaluation')", "\n", "\n", "# the default values for beta1 and beta2 differ by TTUR option", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "opt", ".", "no_TTUR", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "beta1", "=", "0.5", ",", "beta2", "=", "0.999", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--D_steps_per_G'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of discriminator iterations per generator iterations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--G_steps_per_D'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of generator iterations per discriminator iterations.'", ")", "\n", "# for discriminators", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_perc_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG-related losses'", ")", "\n", "parser", ".", "add_argument", "(", "'--vgg_normal_correct'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, correct vgg normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_vgg'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "help", "=", "'weight for vgg loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_perceptual'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'weight for perceptual loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_style'", ",", "type", "=", "float", ",", "default", "=", "200.0", ",", "help", "=", "'weight for style loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_hole'", ",", "type", "=", "float", ",", "default", "=", "6.0", ",", "help", "=", "'weight for l1 loss of hole'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_dwt_l'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for wavelet low freq loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_gan_h'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for wavelet high freq loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_feat_h'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for high freq feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'(ls|original|hinge)'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'multiscale'", ",", "help", "=", "'(n_layers|multiscale|image)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_kld'", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.initialize": [[20, 77], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# experiment specifics", "\n", "        ", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2coco'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'wavelet'", ",", "help", "=", "'which model to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_D'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_E'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_attention'", ",", "action", "=", "'store_true'", ",", "help", "=", "'and nonlocal block in G and D'", ")", "\n", "\n", "# input/output sizes", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess_mode'", ",", "type", "=", "str", ",", "default", "=", "'resize'", ",", "help", "=", "'scaling and cropping of images at load time.'", ",", "choices", "=", "(", "\"resize_and_crop\"", ",", "\"crop\"", ",", "\"scale_width\"", ",", "\"scale_width_and_crop\"", ",", "\"scale_shortside\"", ",", "\"scale_shortside_and_crop\"", ",", "\"fixed\"", ",", "\"none\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Scale images to this size. The final image will be cropped to --crop_size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Crop to the width of crop_size (after initially scaling the images to load_size.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'The ratio width/height. The final height of the load image will be crop_size/aspect_ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of input image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--highfreq_nc'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'# of high frequency bands channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--contain_dontcare_label'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if the label map contains dontcare label (dontcare=255)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--wavelet_decomp_level'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'level of wavelet decomposition'", ")", "\n", "\n", "# for setting inputs", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'./dataset/flist/'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'inpaint'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "'celebahq'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_type'", ",", "type", "=", "int", ",", "default", "=", "'1'", ",", "help", "=", "'1: square, 2: random paint, 3: external, 4: external + square, 5: external + square + random paint'", ")", "\n", "parser", ".", "add_argument", "(", "'--pconv_level'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'level of pconv masks'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "sys", ".", "maxsize", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_from_opt_file'", ",", "action", "=", "'store_true'", ",", "help", "=", "'load the options from checkpoints and use that as default'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_write'", ",", "action", "=", "'store_true'", ",", "help", "=", "'saves the current filelist into a text file, so that it loads faster'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_read'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reads from the file list cache'", ")", "\n", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'display window size'", ")", "\n", "\n", "# for generator", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'spade'", ",", "help", "=", "'selects model to use for netG (pix2pixhd | spade)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_variance'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'variance of the initialization distribution'", ")", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"dimension of the latent z vector\"", ")", "\n", "\n", "# for instance-wise features", "\n", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_vae'", ",", "action", "=", "'store_true'", ",", "help", "=", "'enable training with an image encoder.'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.gather_options": [[78, 109], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_known_args", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize", "base_options.BaseOptions.update_options_from_file"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.yingchen001_WaveFill.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.update_options_from_file"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_mode", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_mode", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# if there is opt_file, load it.", "\n", "# The previous default options will be overwritten", "\n", "if", "opt", ".", "load_from_opt_file", ":", "\n", "            ", "parser", "=", "self", ".", "update_options_from_file", "(", "parser", ",", "opt", ")", "\n", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.print_options": [[110, 121], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "str", "str", "vars", "str"], "methods", ["None"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.option_file_path": [[122, 128], ["os.path.join", "os.path.join", "util.util.util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.util.util.mkdirs"], ["", "def", "option_file_path", "(", "self", ",", "opt", ",", "makedir", "=", "False", ")", ":", "\n", "        ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "makedir", ":", "\n", "            ", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt'", ")", "\n", "return", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.save_options": [[129, 141], ["base_options.BaseOptions.option_file_path", "open", "sorted", "open", "pickle.dump", "vars().items", "base_options.BaseOptions.parser.get_default", "opt_file.write", "vars", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.option_file_path"], ["", "def", "save_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "file_name", "+", "'.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                    ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "opt_file", ".", "write", "(", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", ")", "\n", "\n", "", "", "with", "open", "(", "file_name", "+", "'.pkl'", ",", "'wb'", ")", "as", "opt_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "opt", ",", "opt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.update_options_from_file": [[142, 149], ["base_options.BaseOptions.load_options", "sorted", "vars().items", "hasattr", "getattr", "parser.set_defaults", "vars", "getattr"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.load_options"], ["", "", "def", "update_options_from_file", "(", "self", ",", "parser", ",", "opt", ")", ":", "\n", "        ", "new_opt", "=", "self", ".", "load_options", "(", "opt", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "new_opt", ",", "k", ")", "and", "v", "!=", "getattr", "(", "new_opt", ",", "k", ")", ":", "\n", "                ", "new_val", "=", "getattr", "(", "new_opt", ",", "k", ")", "\n", "parser", ".", "set_defaults", "(", "**", "{", "k", ":", "new_val", "}", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.load_options": [[150, 154], ["base_options.BaseOptions.option_file_path", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.option_file_path"], ["", "def", "load_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "False", ")", "\n", "new_opt", "=", "pickle", ".", "load", "(", "open", "(", "file_name", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "return", "new_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.parse": [[155, 186], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "base_options.BaseOptions.save_options", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.print_options", "home.repos.pwc.inspect_result.yingchen001_WaveFill.options.base_options.BaseOptions.save_options"], ["", "def", "parse", "(", "self", ",", "save", "=", "False", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "save_options", "(", "opt", ")", "\n", "\n", "# Set highfreq_nc based on the option.", "\n", "# This will be convenient in many places", "\n", "# opt.highfreq_nc = opt.input_nc + \\", "\n", "#     (1 if opt.contain_dontcare_label else 0) + \\", "\n", "#     (0 if opt.no_instance else 1)", "\n", "\n", "# set gpu ids", "\n", "", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "assert", "len", "(", "opt", ".", "gpu_ids", ")", "==", "0", "or", "opt", ".", "batchSize", "%", "len", "(", "opt", ".", "gpu_ids", ")", "==", "0", ",", "\"Batch size %d is wrong. It must be a multiple of # GPUs %d.\"", "%", "(", "opt", ".", "batchSize", ",", "len", "(", "opt", ".", "gpu_ids", ")", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}