{"home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.model.initialize_load_r21d.initialize_load_model": [[6, 29], ["r21d.to", "r21d.parameters", "torch.Linear", "initialize_load_r21d.initialize_load_model.r21d"], "function", ["None"], ["def", "initialize_load_model", "(", "mode", ",", "model_path", "=", "'scratch'", ",", "in_channel", "=", "3", ",", "out_channel", "=", "3", ",", "device", "=", "\"cuda\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "r21d", "(", "in_channel", ",", "out_channel", ",", "pretrain", "=", "False", ",", "echo_pretrain", "=", "False", ")", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "video", ".", "__dict__", "[", "\"r2plus1d_18\"", "]", "(", "pretrained", "=", "pretrain", ")", "\n", "if", "in_channel", "==", "1", ":", "model", ".", "stem", "[", "0", "]", "=", "nn", ".", "Conv3d", "(", "1", ",", "45", ",", "kernel_size", "=", "(", "1", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "out_channel", ")", "\n", "return", "model", "\n", "\n", "", "if", "model_path", "==", "'pretrain'", ":", "\n", "        ", "model", "=", "r21d", "(", "in_channel", ",", "out_channel", ",", "pretrain", "=", "True", ")", "\n", "", "elif", "model_path", "==", "'scratch'", ":", "\n", "        ", "model", "=", "r21d", "(", "in_channel", ",", "out_channel", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "r21d", "(", "in_channel", ",", "out_channel", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "param", "=", "model", ".", "parameters", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "", "return", "model", ",", "param", "", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.minLoss.find_epo_test": [[5, 14], ["numpy.genfromtxt", "multi_epo[].astype", "numpy.argmin", "os.makedirs", "numpy.savetxt", "str", "str"], "function", ["None"], ["def", "find_epo_test", "(", "save_folder", ",", "epo_iter", ",", "**", "kwargs", ")", ":", "\n", "    ", "csv_name", "=", "save_folder", "+", "'/train/log_'", "+", "str", "(", "epo_iter", ".", "stop", "-", "1", ")", "+", "'.csv'", "\n", "multi_epo", "=", "np", ".", "genfromtxt", "(", "csv_name", ",", "dtype", "=", "'str'", ",", "delimiter", "=", "','", ")", "\n", "multi_epo", "=", "multi_epo", "[", "1", ":", ",", "2", "]", ".", "astype", "(", "'float'", ")", "\n", "epo_test", "=", "np", ".", "argmin", "(", "multi_epo", ")", "\n", "min_loss", "=", "multi_epo", "[", "epo_test", "]", "\n", "os", ".", "makedirs", "(", "save_folder", "+", "'/test'", ",", "exist_ok", "=", "True", ")", "#TODO this is to be modified to accomodate custom train/test folder", "\n", "np", ".", "savetxt", "(", "save_folder", "+", "'/test/minLoss_'", "+", "str", "(", "min_loss", ")", "+", "'.txt'", ",", "[", "]", ")", "\n", "return", "epo_test", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.minLoss.find_epo_test_from_val_log": [[16, 30], ["numpy.genfromtxt", "multi_epo[].astype", "numpy.argmin", "numpy.savetxt", "str", "str", "os.remove", "str"], "function", ["None"], ["", "def", "find_epo_test_from_val_log", "(", "save_folder", ",", "epo_iter", ",", "val_folder", "=", "'val'", ",", "test_folder", "=", "'test'", ",", "del_after_val", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# Validation log must start with loss", "\n", "# Allows assigning special validation folder with kwargs", "\n", "    ", "csv_name", "=", "save_folder", "+", "val_folder", "+", "'/log_'", "+", "str", "(", "epo_iter", ".", "stop", "-", "1", ")", "+", "'.csv'", "\n", "multi_epo", "=", "np", ".", "genfromtxt", "(", "csv_name", ",", "dtype", "=", "'str'", ",", "delimiter", "=", "','", ")", "\n", "multi_epo", "=", "multi_epo", "[", "1", ":", ",", "0", "]", ".", "astype", "(", "'float'", ")", "\n", "epo_test", "=", "np", ".", "argmin", "(", "multi_epo", ")", "\n", "min_loss", "=", "multi_epo", "[", "epo_test", "]", "\n", "np", ".", "savetxt", "(", "save_folder", "+", "test_folder", "+", "'/minLoss_'", "+", "str", "(", "min_loss", ")", "+", "'.txt'", ",", "[", "]", ")", "\n", "if", "del_after_val", ":", "\n", "        ", "for", "epo", "in", "epo_iter", ":", "\n", "            ", "if", "epo", "!=", "epo_test", ":", "\n", "                ", "os", ".", "remove", "(", "save_folder", "+", "'train/model_'", "+", "str", "(", "epo", ")", "+", "'.pth'", ")", "\n", "", "", "", "return", "epo_test", "", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_test.checkpoint_test": [[8, 27], ["os.makedirs", "checkpoint_test.find_epo_test", "one_epoch_avg.", "create_header", "numpy.concatenate", "numpy.savetxt", "numpy.savetxt", "print", "globals", "numpy.asarray", "numpy.asarray", "globals", "str", "str"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_test.find_epo_test"], ["def", "checkpoint_test", "(", "one_epoch", ",", "model", ",", "save_folder", ",", "subfolder", ",", "task", ",", "\n", "header_train", "=", "None", ",", "header_eval", "=", "None", ",", "one_epoch_avg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "mode", "=", "'test'", "\n", "create_header", "=", "globals", "(", ")", "[", "'create_header_'", "+", "task", "]", "\n", "if", "one_epoch_avg", "is", "None", ":", "\n", "        ", "one_epoch_avg", "=", "globals", "(", ")", "[", "'one_epoch_avg_'", "+", "task", "]", "\n", "", "if", "subfolder", "==", "'default'", ":", "subfolder", "=", "mode", "\n", "save_subfolder", "=", "save_folder", "+", "subfolder", "\n", "os", ".", "makedirs", "(", "save_subfolder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "epo", "=", "find_epo_test", "(", "save_folder", ",", "subfolder", ",", "**", "kwargs", ")", "# Here epo might actually be itr since the log might be per every update", "\n", "one_epoch_avg", "=", "one_epoch_avg", "(", "one_epoch", ")", "\n", "multi_epo", "=", "create_header", "(", "mode", ",", "None", ",", "header_train", ",", "header_eval", ")", "\n", "multi_epo", "=", "np", ".", "concatenate", "(", "[", "multi_epo", ",", "one_epoch_avg", "]", ",", "axis", "=", "0", ")", "\n", "np", ".", "savetxt", "(", "save_subfolder", "+", "'/prediction_'", "+", "str", "(", "epo", ")", "+", "'.csv'", ",", "np", ".", "asarray", "(", "one_epoch", ")", ",", "fmt", "=", "'%s'", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "save_subfolder", "+", "'/performance_'", "+", "str", "(", "epo", ")", "+", "'.csv'", ",", "np", ".", "asarray", "(", "multi_epo", ")", ",", "fmt", "=", "'%s'", ",", "delimiter", "=", "','", ")", "\n", "\n", "print", "(", "'Epoch: '", ",", "epo", ",", "'| '", ",", "mode", ",", "' | performance: '", ",", "one_epoch_avg", ",", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_test.find_epo_test": [[29, 38], ["numpy.genfromtxt", "multi_epo[].astype", "numpy.argmin", "os.makedirs", "numpy.savetxt", "str"], "function", ["None"], ["", "def", "find_epo_test", "(", "save_folder", ",", "subfolder", ",", "**", "kwargs", ")", ":", "\n", "# The columns of multi_epo are [itr, train_loss, val_loss_or_early_stop_metric, other_val_metrics_if_any]", "\n", "    ", "multi_epo", "=", "np", ".", "genfromtxt", "(", "save_folder", "+", "'/train/log.csv'", ",", "dtype", "=", "'str'", ",", "delimiter", "=", "','", ")", "\n", "multi_epo", "=", "multi_epo", "[", "1", ":", ",", "2", "]", ".", "astype", "(", "'float'", ")", "\n", "epo_test", "=", "np", ".", "argmin", "(", "multi_epo", ")", "\n", "min_loss", "=", "multi_epo", "[", "epo_test", "]", "\n", "os", ".", "makedirs", "(", "save_folder", "+", "'/'", "+", "subfolder", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "savetxt", "(", "save_folder", "+", "'/'", "+", "subfolder", "+", "'/minLoss_'", "+", "str", "(", "min_loss", ")", "+", "'.txt'", ",", "[", "]", ")", "# Just to indicate val-loss. Empty file", "\n", "return", "epo_test", "", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_train.checkpoint_train": [[8, 42], ["os.makedirs", "numpy.mean", "create_header", "checkpoint_train.logging", "print", "globals", "len", "one_epoch_avg", "one_epoch_avg", "one_epoch_avg", "globals", "list", "list", "one_epoch_avg.reshape", "list", "one_epoch_avg.reshape", "one_epoch_avg.reshape"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_train.logging"], ["def", "checkpoint_train", "(", "itr", ",", "one_epoch_train", ",", "one_epoch_val", ",", "one_epoch_test", ",", "model", ",", "save_folder", ",", "subfolder", ",", "epo", ",", "is_first_update", ",", "is_last_update", ",", "writer", ",", "log_val_only", ",", "\n", "task", ",", "header_train", "=", "None", ",", "header_eval", "=", "None", ",", "one_epoch_avg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "mode", "=", "'train'", "\n", "create_header", "=", "globals", "(", ")", "[", "'create_header_'", "+", "task", "]", "\n", "if", "one_epoch_avg", "is", "None", ":", "\n", "        ", "one_epoch_avg", "=", "globals", "(", ")", "[", "'one_epoch_avg_'", "+", "task", "]", "\n", "", "save_subfolder", "=", "save_folder", "+", "mode", "# From now on the trainign log is always stored in the folder \"train\"", "\n", "os", ".", "makedirs", "(", "save_subfolder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "train_avg", "=", "np", ".", "mean", "(", "one_epoch_train", ")", "\n", "\n", "header", "=", "create_header", "(", "mode", ",", "log_val_only", ",", "header_train", ",", "header_eval", ")", "\n", "NUM_METRICS_TO_LOG", "=", "len", "(", "header", "[", "0", "]", ")", "-", "2", "\n", "\n", "if", "log_val_only", ":", "\n", "# For clas, one_epoch contains appended [ID[0], loss.item(), y_true, y_pred]", "\n", "# one_epoch_avg returns numpy array of shape (1,-1) containing [loss, acc, prec, rec, f1]", "\n", "# Sor seg, one_epoch contains appended [ID[0], loss, 'dice', 'iou', 'precision', 'recall']", "\n", "# one_epoch_avg returns its average, with shape (1, -1)", "\n", "        ", "val_avg", "=", "one_epoch_avg", "(", "one_epoch_val", ")", "\n", "one_epoch_log", "=", "[", "itr", ",", "train_avg", "]", "+", "list", "(", "val_avg", ".", "reshape", "(", "-", "1", ",", ")", ")", "[", ":", "NUM_METRICS_TO_LOG", "]", "\n", "", "else", ":", "\n", "        ", "val_avg", "=", "one_epoch_avg", "(", "one_epoch_val", ")", "\n", "test_avg", "=", "one_epoch_avg", "(", "one_epoch_test", ")", "\n", "one_epoch_log", "=", "[", "itr", ",", "train_avg", "]", "+", "list", "(", "val_avg", ".", "reshape", "(", "-", "1", ",", ")", ")", "[", ":", "NUM_METRICS_TO_LOG", "/", "2", "]", "+", "list", "(", "test_avg", ".", "reshape", "(", "-", "1", ",", ")", ")", "[", ":", "NUM_METRICS_TO_LOG", "/", "2", "]", "\n", "\n", "", "logging", "(", "one_epoch_log", ",", "header", ",", "writer", ",", "save_subfolder", ",", "is_first_update", ",", "log_val_only", ",", "model", ",", "**", "kwargs", ")", "\n", "\n", "# if is_last_update:", "\n", "#     os.rename(save_subfolder + '/log_tmp.csv', save_subfolder + '/log_' + str(epo) + '.csv')", "\n", "#     # os.rename(save_subfolder + '/individual_pred_tmp.csv', save_subfolder + '/individual_pred_' + str(epo) + '.csv')", "\n", "\n", "print", "(", "'Epoch: '", ",", "epo", ",", "'| training | performance: '", ",", "one_epoch_log", ",", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_train.logging": [[44, 78], ["range", "numpy.asarray().reshape", "numpy.concatenate", "numpy.savetxt", "min", "len", "len", "len", "writer.add_scalar", "numpy.genfromtxt", "checkpoint_train.logging.compare"], "function", ["None"], ["", "def", "logging", "(", "one_epoch_log", ",", "header", ",", "writer", ",", "save_subfolder", ",", "is_first_update", ",", "log_val_only", ",", "model", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    1) Log performance to csv & tensorboard.\n    2) Determine if has validation loss minimum.\n    \"\"\"", "\n", "\n", "def", "compare", "(", "one_epoch_log", ",", "multi_epo", ")", ":", "\n", "        ", "current", "=", "one_epoch_log", "[", "2", "]", "\n", "history_min", "=", "min", "(", "multi_epo", "[", "1", ":", ",", "2", "]", ".", "astype", "(", "'float'", ")", ")", "\n", "if", "current", "<", "history_min", ":", "\n", "            ", "has_min_val", "=", "True", "\n", "", "else", ":", "\n", "            ", "has_min_val", "=", "False", "\n", "", "return", "has_min_val", "\n", "\n", "# Write to tensorboard", "\n", "", "itr", "=", "one_epoch_log", "[", "0", "]", "\n", "assert", "len", "(", "header", "[", "0", "]", ")", "==", "len", "(", "one_epoch_log", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "header", "[", "0", "]", ")", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "header", "[", "0", ",", "i", "]", ",", "one_epoch_log", "[", "i", "]", ",", "itr", ")", "\n", "\n", "# Write to csv file & Save model if has val-loss minimum", "\n", "", "csv_name", "=", "save_subfolder", "+", "'/log.csv'", "\n", "if", "is_first_update", ":", "\n", "        ", "multi_epo", "=", "header", "\n", "has_min_val", "=", "True", "\n", "", "else", ":", "\n", "        ", "multi_epo", "=", "np", ".", "genfromtxt", "(", "csv_name", ",", "dtype", "=", "'str'", ",", "delimiter", "=", "','", ")", "\n", "has_min_val", "=", "compare", "(", "one_epoch_log", ",", "multi_epo", ")", "\n", "", "one_epoch_log", "=", "np", ".", "asarray", "(", "one_epoch_log", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "multi_epo", "=", "np", ".", "concatenate", "(", "[", "multi_epo", ",", "one_epoch_log", "]", ",", "axis", "=", "0", ")", "\n", "np", ".", "savetxt", "(", "csv_name", ",", "np", ".", "asarray", "(", "multi_epo", ")", ",", "fmt", "=", "'%s'", ",", "delimiter", "=", "','", ")", "\n", "if", "has_min_val", ":", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_subfolder", "+", "'/model_val_min.pth'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.create_header.create_header_clas": [[4, 18], ["np.asarray.reshape", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["def", "create_header_clas", "(", "mode", ",", "log_val_only", ",", "header_train", "=", "None", ",", "header_eval", "=", "None", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "header_train", "is", "None", ":", "\n", "            ", "if", "log_val_only", ":", "\n", "                ", "header_train", "=", "[", "'itr'", ",", "'Loss/train'", ",", "'Loss/val'", ",", "'Accuracy/val'", "]", "\n", "", "else", ":", "\n", "                ", "header_train", "=", "[", "'itr'", ",", "'Loss/train'", ",", "'Loss/val'", ",", "'Accuracy/val'", ",", "'Loss/test'", ",", "'Accuracy/test'", "]", "\n", "", "", "multi_epo", "=", "np", ".", "asarray", "(", "header_train", ")", "\n", "", "else", ":", "\n", "        ", "if", "header_eval", "is", "None", ":", "\n", "            ", "header_eval", "=", "[", "'loss'", ",", "'accuracy'", ",", "'precision'", ",", "'recall'", ",", "' F1-score'", "]", "\n", "", "multi_epo", "=", "np", ".", "asarray", "(", "header_eval", ")", "\n", "\n", "", "return", "multi_epo", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.create_header.create_header_seg": [[20, 34], ["np.asarray.reshape", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "create_header_seg", "(", "mode", ",", "log_val_only", ",", "header_train", "=", "None", ",", "header_eval", "=", "None", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "header_train", "is", "None", ":", "\n", "            ", "if", "log_val_only", ":", "\n", "                ", "header_train", "=", "[", "'itr'", ",", "'Loss/train'", ",", "'Loss/val'", ",", "'Dice/val'", "]", "\n", "", "else", ":", "\n", "                ", "header_train", "=", "[", "'itr'", ",", "'Loss/train'", ",", "'Loss/val'", ",", "'Dice/val'", ",", "'Loss/test'", ",", "'Dice/test'", "]", "\n", "", "", "multi_epo", "=", "np", ".", "asarray", "(", "header_train", ")", "\n", "", "else", ":", "\n", "        ", "if", "header_eval", "is", "None", ":", "\n", "            ", "header_eval", "=", "[", "'loss'", ",", "'dice'", ",", "'iou'", ",", "'precision'", ",", "'recall'", "]", "\n", "", "multi_epo", "=", "np", ".", "asarray", "(", "header_eval", ")", "\n", "\n", "", "return", "multi_epo", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.create_header.create_header_regres": [[36, 50], ["np.asarray.reshape", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "create_header_regres", "(", "mode", ",", "log_val_only", ",", "header_train", "=", "None", ",", "header_eval", "=", "None", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "header_train", "is", "None", ":", "\n", "            ", "if", "log_val_only", ":", "\n", "                ", "header_train", "=", "[", "'itr'", ",", "'Loss/train'", ",", "'Loss_MSE/val'", ",", "'l1/val'", "]", "\n", "", "else", ":", "\n", "                ", "header_train", "=", "[", "'itr'", ",", "'Loss/train'", ",", "'Loss_MSE/val'", ",", "'l1/val'", ",", "'Loss_MSE/test'", ",", "'l1/test'", "]", "\n", "", "", "multi_epo", "=", "np", ".", "asarray", "(", "header_train", ")", "\n", "", "else", ":", "\n", "        ", "if", "header_eval", "is", "None", ":", "\n", "            ", "header_eval", "=", "[", "'Loss_MSE'", ",", "'l1'", ",", "'rmse'", ",", "'r2'", "]", "\n", "", "multi_epo", "=", "np", ".", "asarray", "(", "header_eval", ")", "\n", "\n", "", "return", "multi_epo", ".", "reshape", "(", "1", ",", "-", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.performance_seg": [[6, 29], ["overlap.sum", "union.sum"], "function", ["None"], ["def", "performance_seg", "(", "pred", ",", "true", ")", ":", "\n", "    ", "overlap", "=", "pred", "&", "true", "# TP", "\n", "union", "=", "pred", "|", "true", "# TP + FN + FP", "\n", "misclassified", "=", "overlap", "!=", "union", "# FN + FP", "\n", "\n", "FP", "=", "(", "misclassified", "&", "pred", ")", ".", "sum", "(", ")", "\n", "FN", "=", "(", "misclassified", "&", "true", ")", ".", "sum", "(", ")", "\n", "TP", "=", "overlap", ".", "sum", "(", ")", "\n", "TN", "=", "(", "~", "pred", "&", "~", "true", ")", ".", "sum", "(", ")", "\n", "UN", "=", "union", ".", "sum", "(", ")", "\n", "\n", "if", "UN", "==", "0", ":", "\n", "        ", "dice", "=", "iou", "=", "precision", "=", "recall", "=", "accuracy", "=", "1", "\n", "", "elif", "TP", "==", "0", ":", "\n", "        ", "dice", "=", "iou", "=", "precision", "=", "recall", "=", "accuracy", "=", "0", "\n", "", "else", ":", "\n", "        ", "dice", "=", "(", "TP", "*", "2", ")", "/", "(", "UN", "+", "TP", ")", "\n", "iou", "=", "TP", "/", "UN", "\n", "precision", "=", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "accuracy", "=", "(", "TP", "+", "TN", ")", "/", "(", "UN", "+", "TN", ")", "\n", "\n", "", "return", "[", "dice", ",", "iou", ",", "precision", ",", "recall", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.one_epoch_avg_seg": [[31, 35], ["[].astype", "numpy.mean", "numpy.asarray"], "function", ["None"], ["", "def", "one_epoch_avg_seg", "(", "one_epoch", ")", ":", "\n", "    ", "one_epoch", "=", "np", ".", "asarray", "(", "one_epoch", ")", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "avg", "=", "np", ".", "mean", "(", "one_epoch", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "return", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.performance_clas": [[37, 41], ["sklearn.metrics.accuracy_score", "sklearn.metrics.precision_recall_fscore_support"], "function", ["None"], ["", "def", "performance_clas", "(", "Y_true", ",", "Y_pred", ")", ":", "\n", "    ", "acc", "=", "accuracy_score", "(", "Y_true", ",", "Y_pred", ")", "\n", "prec", ",", "rec", ",", "f1", ",", "_", "=", "precision_recall_fscore_support", "(", "Y_true", ",", "Y_pred", ",", "average", "=", "'weighted'", ")", "\n", "return", "[", "acc", ",", "prec", ",", "rec", ",", "f1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.one_epoch_avg_clas": [[43, 51], ["one_epoch[].astype", "one_epoch[].astype", "one_epoch[].astype().mean", "eval.performance_clas", "numpy.asarray().reshape", "numpy.asarray", "one_epoch[].astype", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.performance_clas"], ["", "def", "one_epoch_avg_clas", "(", "one_epoch", ")", ":", "\n", "    ", "one_epoch", "=", "np", ".", "asarray", "(", "one_epoch", ")", "[", ":", ",", ":", "4", "]", "\n", "Y_true", "=", "one_epoch", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "Y_pred", "=", "one_epoch", "[", ":", ",", "3", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "loss", "=", "one_epoch", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ".", "mean", "(", ")", "\n", "\n", "acc", ",", "prec", ",", "rec", ",", "f1", "=", "performance_clas", "(", "Y_true", ",", "Y_pred", ")", "\n", "return", "np", ".", "asarray", "(", "[", "loss", ",", "acc", ",", "prec", ",", "rec", ",", "f1", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.performance_regres": [[53, 58], ["sklearn.metrics.mean_absolute_error", "numpy.sqrt", "sklearn.metrics.r2_score", "sklearn.metrics.mean_squared_error"], "function", ["None"], ["", "def", "performance_regres", "(", "Y_true", ",", "Y_pred", ")", ":", "\n", "    ", "l1", "=", "mean_absolute_error", "(", "Y_true", ",", "Y_pred", ")", "\n", "rmse", "=", "np", ".", "sqrt", "(", "mean_squared_error", "(", "Y_true", ",", "Y_pred", ")", ")", "\n", "r2", "=", "r2_score", "(", "Y_true", ",", "Y_pred", ")", "\n", "return", "[", "l1", ",", "rmse", ",", "r2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.one_epoch_avg_regres": [[60, 68], ["one_epoch[].astype", "one_epoch[].astype", "one_epoch[].astype().mean", "eval.performance_regres", "numpy.asarray().reshape", "numpy.asarray", "one_epoch[].astype", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.eval.eval.performance_regres"], ["", "def", "one_epoch_avg_regres", "(", "one_epoch", ")", ":", "\n", "    ", "one_epoch", "=", "np", ".", "asarray", "(", "one_epoch", ")", "[", ":", ",", ":", "4", "]", "\n", "Y_true", "=", "one_epoch", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "Y_pred", "=", "one_epoch", "[", ":", ",", "3", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "loss", "=", "one_epoch", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ".", "mean", "(", ")", "\n", "\n", "l1", ",", "rmse", ",", "r2", "=", "performance_regres", "(", "Y_true", ",", "Y_pred", ")", "\n", "return", "np", ".", "asarray", "(", "[", "loss", ",", "l1", ",", "rmse", ",", "r2", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.__init__": [[16, 42], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_folder", ",", "epo_iter", ",", "forward", ",", "task", "=", "'clas'", ",", "\n", "create_dataloader", "=", "create_dataloader", ",", "initialize_load_model", "=", "initialize_load_model", ",", "\n", "checkpoint_train", "=", "checkpoint_train", ",", "checkpoint_test", "=", "checkpoint_test", ",", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", ",", "lr", "=", "1e-4", ",", "wd", "=", "1e-8", ",", "loss_accu_period", "=", "1", ",", "\n", "log_val_only", "=", "True", ",", "eval_per_iter", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "task", "in", "[", "'clas'", ",", "'seg'", ",", "'regres'", "]", "\n", "\n", "# Variables", "\n", "self", ".", "save_folder", "=", "save_folder", "\n", "self", ".", "epo_iter", "=", "epo_iter", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "wd", "=", "wd", "\n", "self", ".", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "self", ".", "loss_accu_period", "=", "loss_accu_period", "\n", "self", ".", "log_val_only", "=", "log_val_only", "\n", "self", ".", "eval_per_iter", "=", "eval_per_iter", "\n", "\n", "# Functions", "\n", "self", ".", "forward", "=", "forward", "\n", "self", ".", "create_dataloader", "=", "create_dataloader", "\n", "self", ".", "initialize_load_model", "=", "initialize_load_model", "\n", "self", ".", "checkpoint_train", "=", "checkpoint_train", "\n", "self", ".", "checkpoint_test", "=", "checkpoint_test", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.batch_train": [[44, 58], ["Backbone.Backbone.forward", "loss.backward", "loss.item", "opt.step", "opt.zero_grad"], "methods", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.main.forward"], ["", "def", "batch_train", "(", "self", ",", "model", ",", "batch", ",", "i", ",", "opt", ",", "loss_running_accu", ",", "loss_accu_period", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss", ",", "_", "=", "self", ".", "forward", "(", "batch", ",", "model", ",", "self", ".", "device", ",", "return_one_batch", "=", "False", ",", "**", "kwargs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_running_accu", "+=", "loss", ".", "item", "(", ")", "\n", "one_batch", "=", "0", "\n", "if", "(", "i", "+", "1", ")", "%", "loss_accu_period", "==", "0", ":", "\n", "            ", "loss_running_accu", "=", "loss_running_accu", "/", "loss_accu_period", "\n", "opt", ".", "step", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "one_batch", "=", "loss_running_accu", "\n", "loss_running_accu", "=", "0", "\n", "\n", "", "return", "model", ",", "one_batch", ",", "loss_running_accu", ",", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.whole_eval": [[60, 68], ["model.eval", "enumerate", "Backbone.Backbone.forward", "one_epoch.append"], "methods", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.main.forward"], ["", "def", "whole_eval", "(", "self", ",", "model", ",", "dataloader", ",", "**", "kwargs", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "one_epoch", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "loss", ",", "one_batch", "=", "self", ".", "forward", "(", "batch", ",", "model", ",", "self", ".", "device", ",", "return_one_batch", "=", "True", ",", "**", "kwargs", ")", "\n", "one_epoch", ".", "append", "(", "one_batch", ")", "\n", "\n", "", "return", "one_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.run_val": [[70, 80], ["Backbone.Backbone.whole_eval", "Backbone.Backbone.checkpoint_train", "Backbone.Backbone.whole_eval"], "methods", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.whole_eval", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_train.checkpoint_train", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.whole_eval"], ["", "def", "run_val", "(", "self", ",", "i", ",", "itr", ",", "epo", ",", "num_batch", ",", "num_epo", ",", "subfolder", ",", "one_epoch_train", ",", "\n", "model", ",", "dataloader_val", ",", "dataloader_test", ",", "**", "kwargs", ")", ":", "\n", "        ", "one_epoch_val", "=", "self", ".", "whole_eval", "(", "model", ",", "dataloader_val", ",", "**", "kwargs", ")", "\n", "one_epoch_test", "=", "[", "]", "if", "self", ".", "log_val_only", "else", "self", ".", "whole_eval", "(", "model", ",", "dataloader_test", ",", "**", "kwargs", ")", "\n", "\n", "is_first_update", "=", "(", "self", ".", "eval_per_iter", "&", "(", "itr", "==", "0", ")", ")", "|", "(", "(", "not", "self", ".", "eval_per_iter", ")", "&", "(", "epo", "==", "0", ")", ")", "\n", "is_last_update", "=", "itr", "==", "(", "(", "num_batch", "//", "self", ".", "loss_accu_period", ")", "*", "num_epo", ")", "-", "1", "\n", "self", ".", "checkpoint_train", "(", "itr", ",", "one_epoch_train", ",", "one_epoch_val", ",", "one_epoch_test", ",", "model", ",", "\n", "self", ".", "save_folder", ",", "subfolder", ",", "epo", ",", "is_first_update", ",", "is_last_update", ",", "\n", "self", ".", "writer", ",", "self", ".", "log_val_only", ",", "self", ".", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.run_test": [[82, 86], ["Backbone.Backbone.initialize_load_model", "Backbone.Backbone.whole_eval", "Backbone.Backbone.checkpoint_test"], "methods", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.model.initialize_load_r21d.initialize_load_model", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.whole_eval", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.checkpoint.checkpoint_test.checkpoint_test"], ["", "def", "run_test", "(", "self", ",", "dataloader_test", ",", "subfolder", ",", "**", "kwargs", ")", ":", "\n", "        ", "model", ",", "_", "=", "self", ".", "initialize_load_model", "(", "mode", "=", "'test'", ",", "model_path", "=", "self", ".", "save_folder", "+", "'train/model_val_min.pth'", ",", "device", "=", "self", ".", "device", ",", "**", "kwargs", ")", "\n", "one_epoch", "=", "self", ".", "whole_eval", "(", "model", ",", "dataloader_test", ",", "**", "kwargs", ")", "\n", "self", ".", "checkpoint_test", "(", "one_epoch", ",", "model", ",", "self", ".", "save_folder", ",", "subfolder", ",", "self", ".", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.run": [[88, 145], ["datetime.datetime.datetime.now", "Backbone.Backbone.create_dataloader", "Backbone.Backbone.create_dataloader", "Backbone.Backbone.create_dataloader", "Backbone.Backbone.initialize_load_model", "Backbone.Backbone.optimizer", "Backbone.Backbone.zero_grad", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "datetime.datetime.datetime.now", "tqdm.tqdm.tqdm", "Backbone.Backbone.writer.flush", "Backbone.Backbone.writer.close", "Backbone.Backbone.run_test", "print", "Backbone.Backbone.run_test", "sys.exit", "len", "print", "enumerate", "Backbone.Backbone.batch_train", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "print", "one_epoch_train.append", "Backbone.Backbone.run_val", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.create_dataloader", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.create_dataloader", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.create_dataloader", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.model.initialize_load_r21d.initialize_load_model", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.run_test", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.run_test", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.batch_train", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.backbone.Backbone.Backbone.run_val"], ["", "def", "run", "(", "self", ",", "workflow", "=", "'complete'", ",", "subfolder", "=", "'default'", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "n", "=", "datetime", ".", "now", "(", ")", "\n", "assert", "workflow", "in", "[", "'complete'", ",", "'train'", ",", "'test'", "]", "\n", "dataloader_train", "=", "self", ".", "create_dataloader", "(", "mode", "=", "'train'", ",", "**", "kwargs", ")", "#Have to be initialized here since kwargs are needed", "\n", "dataloader_val", "=", "self", ".", "create_dataloader", "(", "mode", "=", "'val'", ",", "**", "kwargs", ")", "\n", "dataloader_test", "=", "self", ".", "create_dataloader", "(", "mode", "=", "'test'", ",", "**", "kwargs", ")", "\n", "\n", "## [Training]", "\n", "if", "(", "workflow", "==", "'complete'", ")", "|", "(", "workflow", "==", "'train'", ")", ":", "\n", "                ", "num_batch", ",", "num_epo", "=", "len", "(", "dataloader_train", ")", ",", "self", ".", "epo_iter", ".", "stop", "\n", "assert", "num_batch", "%", "self", ".", "loss_accu_period", "==", "0", "\n", "\n", "model", ",", "param", "=", "self", ".", "initialize_load_model", "(", "mode", "=", "'train'", ",", "device", "=", "self", ".", "device", ",", "**", "kwargs", ")", "\n", "opt", "=", "self", ".", "optimizer", "(", "param", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "wd", ")", "\n", "opt", ".", "zero_grad", "(", ")", "# Do zero_grad() here because of the gradient accumulation feature", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "save_folder", ")", "\n", "if", "verbose", ":", "print", "(", "'Training initialization time: '", ",", "datetime", ".", "now", "(", ")", "-", "n", ",", "'='", "*", "100", ")", "\n", "n", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "for", "epo", "in", "tqdm", "(", "self", ".", "epo_iter", ",", "ncols", "=", "0", ")", ":", "\n", "                    ", "one_epoch_train", ",", "loss_running_accu", "=", "[", "]", ",", "0", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader_train", ")", ":", "\n", "                        ", "wt", "=", "(", "datetime", ".", "now", "(", ")", "-", "n", ")", ".", "total_seconds", "(", ")", "\n", "if", "verbose", "&", "(", "wt", ">", "2", ")", ":", "print", "(", "'\\n Batch loading waiting time '", ",", "wt", ")", "\n", "# itr counts the number of updates. When loss accumulation is used, itr would be different to i.", "\n", "itr", "=", "i", "//", "self", ".", "loss_accu_period", "+", "epo", "*", "(", "num_batch", "//", "self", ".", "loss_accu_period", ")", "\n", "model", ",", "one_batch_train", ",", "loss_running_accu", ",", "opt", "=", "self", ".", "batch_train", "(", "model", ",", "batch", ",", "i", ",", "opt", ",", "\n", "loss_running_accu", ",", "self", ".", "loss_accu_period", ",", "**", "kwargs", ")", "\n", "# Log training loss of one (full) batch for calculation of averaged training loss later on.", "\n", "if", "(", "i", "+", "1", ")", "%", "self", ".", "loss_accu_period", "==", "0", ":", "\n", "                            ", "one_epoch_train", ".", "append", "(", "one_batch_train", ")", "\n", "## [Validation]:", "\n", "# Run validation if eval_per_iter & end of a batch; Or NOT eval_per_iter & end of a epoch", "\n", "if", "(", "\n", "(", "self", ".", "eval_per_iter", "&", "(", "(", "i", "+", "1", ")", "%", "self", ".", "loss_accu_period", "==", "0", ")", ")", "or", "\n", "(", "(", "not", "self", ".", "eval_per_iter", ")", "&", "(", "(", "i", "+", "1", ")", "/", "self", ".", "loss_accu_period", "==", "num_batch", "//", "self", ".", "loss_accu_period", ")", ")", "\n", ")", ":", "\n", "                                ", "self", ".", "run_val", "(", "i", ",", "itr", ",", "epo", ",", "num_batch", ",", "num_epo", ",", "subfolder", ",", "one_epoch_train", ",", "\n", "model", ",", "dataloader_val", ",", "dataloader_test", ",", "**", "kwargs", ")", "\n", "one_epoch_train", "=", "[", "]", "\n", "", "", "n", "=", "datetime", ".", "now", "(", ")", "\n", "", "", "self", ".", "writer", ".", "flush", "(", ")", "\n", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n", "## [Testing]", "\n", "", "if", "(", "workflow", "==", "'complete'", ")", "|", "(", "workflow", "==", "'test'", ")", ":", "\n", "                ", "self", ".", "run_test", "(", "dataloader_test", ",", "subfolder", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "## [Test on current best if interrupted]", "\n", "            ", "print", "(", "'Interrupted at epo '", ",", "epo", ",", ")", "\n", "# copyfile(self.save_folder + 'train/log_tmp.csv', self.save_folder + 'train/log_' + str(epo) + '.csv')", "\n", "# epo_iter = range(epo+1)", "\n", "self", ".", "run_test", "(", "dataloader_test", ",", "subfolder", ",", "**", "kwargs", ")", "\n", "sys", ".", "exit", "(", "0", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.loader.__init__": [[9, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X_list", ",", "aug", "=", "False", ",", "rgb_channel", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "X_list", "=", "X_list", "\n", "self", ".", "aug", "=", "aug", "\n", "self", ".", "rgb_channel", "=", "rgb_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.loader.__getitem__": [[14, 22], ["numpy.load", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filepath", "=", "self", ".", "X_list", "[", "index", "]", "\n", "X", "=", "np", ".", "load", "(", "filepath", ")", "\n", "\n", "# Replace with own loader. Output X should have size [channel=3, num_frame=30, x_dimension=112, y_dimension=112]", "\n", "\n", "X", "=", "torch", ".", "from_numpy", "(", "X", ")", ".", "float", "(", ")", "\n", "return", "X", ",", "Y", ",", "ID", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.loader.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.LUMC_A4C.loader_vid.create_dataloader": [[27, 38], ["numpy.load().tolist", "loader_vid.loader", "torch.utils.data.DataLoader", "numpy.load", "loader_vid.loader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "create_dataloader", "(", "mode", ",", "batch_size", "=", "16", ",", "num_workers", "=", "[", "4", ",", "4", "]", ",", "data_folder", "=", "'../data/LUMC_A4C/ver3/'", ",", "\n", "split_folder", "=", "'split_000all_400_401/'", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "X_list", "=", "np", ".", "load", "(", "data_folder", "+", "split_folder", "+", "'/'", "+", "mode", "+", "'_list_RGB.npy'", ")", ".", "tolist", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "data", "=", "loader", "(", "X_list", ",", "aug", "=", "True", ",", "**", "kwargs", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "num_workers", "[", "0", "]", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "(", "mode", "==", "'val'", ")", "|", "(", "mode", "==", "'test'", ")", ":", "\n", "        ", "data", "=", "loader", "(", "X_list", ",", "aug", "=", "False", ",", "**", "kwargs", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "data", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", "[", "1", "]", ",", "pin_memory", "=", "True", ")", "\n", "", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.main.forward": [[11, 31], ["torch.CrossEntropyLoss", "X.to.to", "Y.to().view().long.to().view().long", "model", "criterion", "torch.Softmax", "nn.Softmax.", "sf.argmax().item", "Y.to().view().long.item", "Y.to().view().long.to().view", "criterion.item", "output[].item", "sf.argmax", "Y.to().view().long.to"], "function", ["None"], ["def", "forward", "(", "batch", ",", "model", ",", "device", ",", "return_one_batch", ",", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "X", ",", "Y", ",", "ID", "=", "batch", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "out_logit", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "out_logit", ",", "Y", ")", "\n", "\n", "if", "return_one_batch", ":", "\n", "        ", "sf", "=", "nn", ".", "Softmax", "(", "1", ")", "\n", "output", "=", "sf", "(", "out_logit", ")", "\n", "y_pred", "=", "output", ".", "argmax", "(", "1", ")", ".", "item", "(", ")", "\n", "y_true", "=", "Y", ".", "item", "(", ")", "\n", "one_batch", "=", "[", "ID", "[", "0", "]", ",", "loss", ".", "item", "(", ")", ",", "y_true", ",", "y_pred", ",", "output", "[", ":", ",", "1", "]", ".", "item", "(", ")", "]", "\n", "\n", "# analyze(X, [y_true], model, 1, 'model/DeepLIFT/', ID[0])", "\n", "\n", "return", "loss", ",", "one_batch", "\n", "", "else", ":", "\n", "        ", "return", "loss", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.to_0_255": [[15, 17], ["x.min", "x.max", "x.min"], "function", ["None"], ["def", "to_0_255", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "-", "x", ".", "min", "(", ")", ")", "/", "(", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.write_dcm": [[19, 28], ["analyze.to_0_255", "x.astype.astype", "x.astype.tobytes", "raw.save_as"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.to_0_255"], ["", "def", "write_dcm", "(", "raw", ",", "x", ",", "path", ")", ":", "\n", "# Requires x of shape  (t,row,col,3)", "\n", "    ", "x", "=", "to_0_255", "(", "x", ")", "\n", "x", "=", "x", ".", "astype", "(", "'uint8'", ")", "\n", "raw", ".", "NumberOfFrames", "=", "x", ".", "shape", "[", "0", "]", "\n", "raw", ".", "Rows", "=", "x", ".", "shape", "[", "1", "]", "\n", "raw", ".", "Columns", "=", "x", ".", "shape", "[", "2", "]", "\n", "raw", ".", "PixelData", "=", "x", ".", "tobytes", "(", ")", "\n", "raw", ".", "save_as", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.show_save_mov": [[30, 58], ["numpy.asarray", "int", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.destroyAllWindows", "cv2.VideoWriter_fourcc", "cv2.VideoWriter.write", "cv2.VideoWriter_fourcc", "cv2.applyColorMap", "cv2.putText", "cv2.putText", "cv2.imshow", "cv2.waitKey", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "show_save_mov", "(", "video", ",", "save_path", ",", "file_type", "=", "'mp4'", ",", "norm", "=", "False", ",", "boundary", "=", "None", ",", "gray2color", "=", "None", ",", "fps", "=", "5", ",", "show", "=", "False", ",", "insert_text", "=", "None", ")", ":", "\n", "    ", "if", "norm", ":", "\n", "        ", "if", "boundary", "is", "not", "None", ":", "\n", "            ", "video", "[", "video", ">", "boundary", "[", "0", "]", "]", "=", "boundary", "[", "0", "]", "\n", "video", "[", "video", "<", "boundary", "[", "1", "]", "]", "=", "boundary", "[", "1", "]", "\n", "", "video", "=", "(", "(", "video", "-", "np", ".", "min", "(", "video", ")", ")", "/", "(", "np", ".", "max", "(", "video", ")", "-", "np", ".", "min", "(", "video", ")", ")", ")", "*", "255", "\n", "", "video", "=", "np", ".", "asarray", "(", "video", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "frame_delay", "=", "int", "(", "1000", "/", "fps", ")", "\n", "if", "file_type", "==", "'mp4'", ":", "\n", "        ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "'m'", ",", "'p'", ",", "'4'", ",", "'v'", ")", "\n", "", "elif", "file_type", "==", "'avi'", ":", "\n", "        ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "'X'", ",", "'V'", ",", "'I'", ",", "'D'", ")", "\n", "", "save_path", "=", "save_path", "+", "'.'", "+", "file_type", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "save_path", ",", "fourcc", ",", "fps", ",", "(", "video", ".", "shape", "[", "2", "]", ",", "video", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "frame", "in", "video", ":", "\n", "        ", "if", "gray2color", "is", "not", "None", ":", "\n", "            ", "frame", "=", "cv2", ".", "applyColorMap", "(", "frame", ",", "gray2color", ")", "\n", "", "if", "insert_text", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "frame", ",", "insert_text", ",", "(", "2", ",", "10", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.3", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ")", "\n", "cv2", ".", "putText", "(", "frame", ",", "'ILV'", "+", "' '", "*", "21", "+", "'AVR'", ",", "(", "2", ",", "18", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.3", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ")", "\n", "", "out", ".", "write", "(", "frame", ")", "\n", "if", "show", ":", "\n", "            ", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "frame_delay", ")", "\n", "\n", "", "", "out", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.get_analyzer": [[60, 83], ["range", "captum.attr.Saliency", "captum.attr.DeepLift", "captum.attr.DeepLiftShap", "captum.attr.GuidedBackprop", "captum.attr.GuidedGradCam", "captum.attr.NoiseTunnel"], "function", ["None"], ["", "def", "get_analyzer", "(", "methodID", ",", "model", ",", "if_smoothGrad", ")", ":", "\n", "    ", "assert", "methodID", "in", "range", "(", "5", ")", "\n", "if", "methodID", "==", "0", ":", "\n", "        ", "analyzer", "=", "Saliency", "(", "model", ")", "\n", "methodname", "=", "'_Saliency'", "\n", "", "if", "methodID", "==", "1", ":", "\n", "        ", "analyzer", "=", "DeepLift", "(", "model", ")", "\n", "methodname", "=", "'_DL'", "\n", "", "if", "methodID", "==", "2", ":", "\n", "        ", "analyzer", "=", "DeepLiftShap", "(", "model", ")", "\n", "methodname", "=", "'_DLshap'", "\n", "", "if", "methodID", "==", "3", ":", "\n", "        ", "analyzer", "=", "GuidedBackprop", "(", "model", ")", "\n", "methodname", "=", "'_GB'", "\n", "", "if", "methodID", "==", "4", ":", "\n", "        ", "analyzer", "=", "GuidedGradCam", "(", "model", ",", "model", ".", "layer4", ")", "\n", "methodname", "=", "'_GradCAM'", "\n", "\n", "", "if", "if_smoothGrad", ":", "\n", "        ", "analyzer", "=", "NoiseTunnel", "(", "analyzer", ")", "\n", "methodname", "=", "methodname", "+", "'smo'", "\n", "\n", "", "return", "analyzer", ",", "methodname", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.run_analyze": [[85, 87], ["analyzer.attribute"], "function", ["None"], ["", "def", "run_analyze", "(", "analyzer", ",", "inputs", ",", "target", ")", ":", "\n", "    ", "return", "analyzer", ".", "attribute", "(", "inputs", "=", "inputs", ",", "target", "=", "target", ",", "baselines", "=", "inputs", "*", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.post_process": [[89, 107], ["numpy.uint8", "enumerate", "numpy.stack", "abs", "abs.cpu().detach().numpy", "analyze.to_0_255", "cv2.applyColorMap", "np.stack.append", "abs.cpu().detach", "abs.cpu"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.to_0_255"], ["", "def", "post_process", "(", "attributions", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"Post-process the generated attributions\"\"\"", "\n", "assert", "threshold", "in", "[", "'abs'", ",", "'pos'", "]", "\n", "if", "threshold", "==", "'abs'", ":", "\n", "        ", "attributions", "=", "abs", "(", "attributions", ")", "\n", "", "elif", "threshold", "==", "'pos'", ":", "\n", "        ", "attributions", "[", "attributions", "<", "0", "]", "=", "0", "\n", "\n", "", "attributions", "=", "attributions", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", "...", "]", "# remove batch & channel dimension -> [t,x,y]", "\n", "attributions", "=", "np", ".", "uint8", "(", "to_0_255", "(", "attributions", ")", ")", "\n", "attributions_color", "=", "[", "]", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "attributions", ")", ":", "\n", "# att = cv2.applyColorMap(att, cv2.COLORMAP_JET)      #After this step the shape changes from (112,112) to (112,112,3)", "\n", "        ", "att", "=", "cv2", ".", "applyColorMap", "(", "att", ",", "cv2", ".", "COLORMAP_HOT", ")", "\n", "attributions_color", ".", "append", "(", "att", ")", "\n", "", "attributions_color", "=", "np", ".", "stack", "(", "attributions_color", ",", "axis", "=", "0", ")", "\n", "assert", "attributions_color", ".", "shape", "==", "(", "30", ",", "112", ",", "112", ",", "3", ")", "\n", "return", "attributions_color", "\n", "\n"]], "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.analyze": [[109, 142], ["os.makedirs", "analyze.to_0_255", "numpy.stack", "analyze.show_save_mov", "analyze.get_analyzer", "analyze.run_analyze", "analyze.post_process", "str", "analyze.show_save_mov", "analyze.show_save_mov", "numpy.save", "enumerate", "X.cpu().detach().numpy", "zip", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "X.cpu().detach", "str", "str", "str", "X.cpu"], "function", ["home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.to_0_255", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.show_save_mov", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.get_analyzer", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.run_analyze", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.post_process", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.show_save_mov", "home.repos.pwc.inspect_result.lishinc_disease-detection-and-diagnostic-image-feature.projectDDDIF.analyze.show_save_mov"], ["", "def", "analyze", "(", "X", ",", "target_classes", ",", "model", ",", "methodID", ",", "save_dir", "=", "None", ",", "file_name", "=", "None", ",", "tail", "=", "''", ",", "\n", "save_vid_type", "=", "'mp4'", ",", "save_att_vid", "=", "True", ",", "save_input_vid", "=", "False", ",", "save_render_vid", "=", "False", ",", "save_render_npy", "=", "False", ",", "\n", "save_dcm", "=", "False", ",", "save_figs", "=", "False", ",", "threshold", "=", "'pos'", ",", "if_smoothGrad", "=", "False", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# First, process and save the input X if needed", "\n", "if", "save_input_vid", "|", "save_render_vid", "|", "save_render_npy", "|", "save_figs", ":", "# Then we would need X", "\n", "        ", "Xrgb", "=", "to_0_255", "(", "X", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", "...", "]", ")", "# (b,c,t,x,y) -> (t,x,y)", "\n", "Xrgb", "=", "np", ".", "stack", "(", "[", "Xrgb", "]", "*", "3", ",", "axis", "=", "3", ")", "\n", "", "if", "save_input_vid", ":", "\n", "        ", "show_save_mov", "(", "video", "=", "Xrgb", ",", "save_path", "=", "save_dir", "+", "file_name", ",", "file_type", "=", "save_vid_type", ")", "\n", "\n", "# Second, run analyze and save if needed", "\n", "", "for", "c", "in", "target_classes", ":", "\n", "        ", "classname", "=", "'_class'", "+", "str", "(", "c", ")", "\n", "analyzer", ",", "methodname", "=", "get_analyzer", "(", "methodID", ",", "model", ",", "if_smoothGrad", ")", "\n", "attributions", "=", "run_analyze", "(", "analyzer", ",", "X", ",", "c", ")", "\n", "attributions_color", "=", "post_process", "(", "attributions", ",", "threshold", ")", "\n", "\n", "if", "save_render_vid", "|", "save_render_npy", "|", "save_figs", ":", "# Then we would need \"render\"", "\n", "            ", "render", "=", "attributions_color", "*", "0.7", "+", "Xrgb", "*", "0.3", "\n", "\n", "", "if", "save_att_vid", ":", "\n", "            ", "show_save_mov", "(", "video", "=", "attributions_color", ",", "save_path", "=", "save_dir", "+", "file_name", "+", "tail", "+", "methodname", "+", "classname", ",", "file_type", "=", "save_vid_type", ")", "\n", "", "if", "save_render_vid", ":", "\n", "            ", "show_save_mov", "(", "nvideo", "=", "render", ",", "save_path", "=", "save_dir", "+", "file_name", "+", "tail", "+", "methodname", "+", "classname", "+", "'_overlay'", ",", "file_type", "=", "save_vid_type", ")", "\n", "", "if", "save_render_npy", ":", "\n", "            ", "np", ".", "save", "(", "save_dir", "+", "file_name", "+", "tail", "+", "methodname", "+", "classname", "+", "'_overlay.npy'", ",", "render", ")", "\n", "", "if", "save_figs", ":", "\n", "            ", "for", "i", ",", "(", "img", ",", "att", ",", "rnd", ")", "in", "enumerate", "(", "zip", "(", "Xrgb", ",", "attributions_color", ",", "render", ")", ")", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "save_dir", "+", "file_name", "+", "'_'", "+", "str", "(", "i", ")", "+", "'.png'", ",", "img", ")", "\n", "cv2", ".", "imwrite", "(", "save_dir", "+", "file_name", "+", "tail", "+", "methodname", "+", "classname", "+", "'_heatmap_'", "+", "str", "(", "i", ")", "+", "'.png'", ",", "att", ")", "\n", "cv2", ".", "imwrite", "(", "save_dir", "+", "file_name", "+", "tail", "+", "methodname", "+", "classname", "+", "'_render_'", "+", "str", "(", "i", ")", "+", "'.png'", ",", "rnd", ")", "\n", "", "", "", "", ""]]}