{"home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.read_config": [[19, 66], ["configparser.RawConfigParser", "configparser.RawConfigParser.read", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get().split", "set", "configparser.RawConfigParser.get().split", "set", "configparser.RawConfigParser.get", "list", "configparser.RawConfigParser.get().split", "int", "int", "configparser.RawConfigParser.get", "float", "int", "int", "int", "int", "int", "int", "float", "int", "set.add", "set.add", "list.append", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "constants.VOWELS.add", "configparser.RawConfigParser.get", "dict", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "configparser.RawConfigParser.get", "pattern.split", "vowel.lower", "set", "configparser.RawConfigParser.get().split", "configparser.RawConfigParser.get", "stop_words[].add"], "function", ["None"], ["def", "read_config", "(", ")", ":", "\n", "\n", "    ", "configP", "=", "configparser", ".", "RawConfigParser", "(", ")", "\n", "configP", ".", "read", "(", "ct", ".", "CONFIG_PATH", ")", "\n", "\n", "section", "=", "\"important config\"", "\n", "ct", ".", "DEVICE", "=", "configP", ".", "get", "(", "section", ",", "\"device\"", ")", "\n", "ct", ".", "FONTS", "=", "configP", ".", "get", "(", "section", ",", "\"font_classes\"", ")", ".", "split", "(", "\",\"", ")", "\n", "supported_langs", "=", "set", "(", ")", "\n", "for", "supported_lang", "in", "configP", ".", "get", "(", "section", ",", "\"supported_languages\"", ")", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "supported_langs", ".", "add", "(", "supported_lang", ")", "\n", "", "ct", ".", "SUPPORTED_LANGS", "=", "supported_langs", "\n", "\n", "section", "=", "\"ocr config\"", "\n", "whitelist", "=", "set", "(", ")", "\n", "for", "c", "in", "configP", ".", "get", "(", "section", ",", "\"whitelist\"", ")", ":", "\n", "        ", "whitelist", ".", "add", "(", "c", ")", "\n", "", "ct", ".", "WHITE_LIST", "=", "whitelist", "\n", "final", "=", "list", "(", ")", "\n", "for", "pattern", "in", "configP", ".", "get", "(", "section", ",", "\"target_types\"", ")", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "final", ".", "append", "(", "pattern", ".", "split", "(", "\"->\"", ")", ")", "\n", "", "ct", ".", "BLOCK_TYPES_ALTO", "=", "final", "\n", "ct", ".", "MIN_YEAR", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"min_year\"", ")", ")", "\n", "ct", ".", "MAX_YEAR", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"max_year\"", ")", ")", "\n", "for", "vowel", "in", "configP", ".", "get", "(", "section", ",", "\"vowels\"", ")", ":", "\n", "        ", "ct", ".", "VOWELS", ".", "add", "(", "vowel", ".", "lower", "(", ")", ")", "\n", "\n", "", "section", "=", "\"language recognition config\"", "\n", "ct", ".", "STOP_WORDS_THRESH", "=", "float", "(", "configP", ".", "get", "(", "section", ",", "\"stop_words_thresh\"", ")", ")", "\n", "if", "ct", ".", "STOP_WORDS_THRESH", "!=", "-", "1", ":", "\n", "        ", "stop_words", "=", "dict", "(", ")", "\n", "for", "lang", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "            ", "stop_words", "[", "lang", "]", "=", "set", "(", ")", "\n", "for", "stop_word", "in", "configP", ".", "get", "(", "section", ",", "lang", "+", "\"_stop_words\"", ")", ".", "split", "(", "\",\"", ")", ":", "\n", "                ", "if", "stop_word", "!=", "\"\"", ":", "\n", "                    ", "stop_words", "[", "lang", "]", ".", "add", "(", "stop_word", ")", "\n", "", "", "", "ct", ".", "STOP_WORDS", "=", "stop_words", "\n", "\n", "", "section", "=", "\"segmenter config\"", "\n", "ct", ".", "P1", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p1\"", ")", ")", "\n", "ct", ".", "P2", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p2\"", ")", ")", "\n", "ct", ".", "P3", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p3\"", ")", ")", "\n", "ct", ".", "P4", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p4\"", ")", ")", "\n", "ct", ".", "P5", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p5\"", ")", ")", "\n", "ct", ".", "P6", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p6\"", ")", ")", "\n", "ct", ".", "P7", "=", "float", "(", "configP", ".", "get", "(", "section", ",", "\"p7\"", ")", ")", "\n", "ct", ".", "P8", "=", "int", "(", "configP", ".", "get", "(", "section", ",", "\"p8\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.append_slash": [[69, 75], ["directory.endswith"], "function", ["None"], ["", "def", "append_slash", "(", "directory", ")", ":", "\n", "    ", "if", "directory", "==", "None", ":", "\n", "        ", "return", "\n", "", "if", "not", "directory", ".", "endswith", "(", "'/'", ")", ":", "\n", "        ", "directory", "+=", "'/'", "\n", "", "return", "directory", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.set_ocr": [[77, 87], ["ocr.train.create_pairs.create_train_pairs", "int", "main.append_slash", "int", "int"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.create_train_pairs", "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.append_slash"], ["", "def", "set_ocr", "(", "args", ")", ":", "\n", "    ", "create_train_pairs", "(", "\n", "args", ".", "jsonl", ",", "\n", "int", "(", "args", ".", "confidence", ")", ",", "\n", "args", ".", "set", ",", "\n", "append_slash", "(", "args", ".", "existing", ")", ",", "\n", "int", "(", "args", ".", "nlines", ")", ",", "\n", "int", "(", "args", ".", "generated", ")", ",", "\n", "args", ".", "text", ",", "\n", "args", ".", "model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.train_ocr": [[90, 95], ["ocr.train.train_ocr.train_ocr_model"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.train_ocr.train_ocr_model"], ["", "def", "train_ocr", "(", "args", ")", ":", "\n", "    ", "train_ocr_model", "(", "\n", "args", ".", "set", ",", "\n", "args", ".", "font", ",", "\n", "args", ".", "model", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.test_ocr": [[98, 103], ["ocr.test.test_ocr.test_on_set"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.test_on_set"], ["", "def", "test_ocr", "(", "args", ")", ":", "\n", "    ", "test_on_set", "(", "\n", "args", ".", "jsonl", ",", "\n", "args", ".", "image", ",", "\n", "args", ".", "confidence", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.enhance": [[106, 108], ["enhance.alto_improve.improve_alto"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.improve_alto"], ["", "def", "enhance", "(", "args", ")", ":", "\n", "    ", "improve_alto", "(", "args", ".", "directory", ",", "args", ".", "required", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.ocr": [[110, 116], ["ocr.pipe.apply.apply_on_images", "main.append_slash"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.apply.apply_on_images", "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.append_slash"], ["", "def", "ocr", "(", "args", ")", ":", "\n", "    ", "apply_on_images", "(", "\n", "append_slash", "(", "args", ".", "directory", ")", ",", "\n", "args", ".", "alto", ",", "\n", "args", ".", "image", ",", "\n", "args", ".", "confidence", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.set_fcr": [[119, 124], ["fcr.train_set_fcr.create_train_set_fcr", "int"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_set_fcr.create_train_set_fcr"], ["", "def", "set_fcr", "(", "args", ")", ":", "\n", "    ", "create_train_set_fcr", "(", "\n", "args", ".", "jsonl", ",", "\n", "int", "(", "args", ".", "nchars", ")", ",", "\n", "args", ".", "set", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.train_fcr": [[127, 134], ["fcr.train_fcr.train_model_fcr", "model_name.endswith"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_fcr.train_model_fcr"], ["", "def", "train_fcr", "(", "args", ")", ":", "\n", "    ", "model_name", "=", "args", ".", "model", "\n", "if", "not", "model_name", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "        ", "model_name", "+=", "'.h5'", "\n", "", "train_model_fcr", "(", "\n", "args", ".", "set", ",", "\n", "model_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.test_fcr": [[137, 141], ["fcr.test_fcr.test_model_fcr"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.test_fcr.test_model_fcr"], ["", "def", "test_fcr", "(", "args", ")", ":", "\n", "    ", "test_model_fcr", "(", "\n", "args", ".", "jsonl", ",", "\n", "args", ".", "model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.test_seg": [[144, 147], ["seg.test_seg.test_segmentation"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.test_seg.test_segmentation"], ["", "def", "test_seg", "(", "args", ")", ":", "\n", "    ", "test_segmentation", "(", "\n", "args", ".", "jsonl", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.train_epr": [[150, 154], ["epr.train_epr.train_epr_model"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.train_epr_model"], ["", "def", "train_epr", "(", "args", ")", ":", "\n", "    ", "train_epr_model", "(", "\n", "args", ".", "jsonl", ",", "\n", "args", ".", "model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.src.main.test_epr": [[157, 160], ["epr.test_epr.test_epr_model"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.test_epr.test_epr_model"], ["", "def", "test_epr", "(", "args", ")", ":", "\n", "    ", "test_epr_model", "(", "\n", "args", ".", "model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.constants.subparsers.ParseMode.__str__": [[10, 12], ["None"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.constants.subparsers.readable_file": [[13, 17], ["os.path.isfile", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "def", "readable_file", "(", "x", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "isfile", "(", "x", ")", ":", "\n", "\t\t", "raise", "argparse", ".", "ArgumentTypeError", "(", "'{} does not exist'", ".", "format", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.constants.subparsers.readable_folder": [[18, 22], ["os.path.isdir", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "readable_folder", "(", "x", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "isdir", "(", "x", ")", ":", "\n", "\t\t", "raise", "argparse", ".", "ArgumentTypeError", "(", "'{} does not exist'", ".", "format", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.constants.subparsers.print_kvp": [[23, 27], ["print", "dictionary.items", "print"], "function", ["None"], ["", "def", "print_kvp", "(", "dictionary", ")", ":", "\n", "\t", "print", "(", "'Parameters:'", ")", "\n", "for", "k", ",", "v", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "\t\t", "print", "(", "' > {:15} : {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.apply_epr.predict": [[4, 27], ["tensorflow.negative", "tensorflow.nn.top_k", "indx.numpy", "numpy.delete", "numpy.delete", "numpy.delete", "tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.subtract"], "function", ["None"], ["def", "predict", "(", "model", ",", "x_test", ",", "k", ",", "leave_out_index", "=", "None", ")", ":", "\n", "\n", "\t", "X", "=", "model", "[", "'x'", "]", "\n", "Y", "=", "model", "[", "'y'", "]", "\n", "chars", "=", "model", "[", "'chars'", "]", "\n", "\n", "if", "leave_out_index", "!=", "None", ":", "\n", "\t\t", "X", "=", "np", ".", "delete", "(", "X", ",", "(", "leave_out_index", ")", ",", "axis", "=", "0", ")", "\n", "Y", "=", "np", ".", "delete", "(", "Y", ",", "(", "leave_out_index", ")", ",", "axis", "=", "0", ")", "\n", "chars", "=", "np", ".", "delete", "(", "chars", ",", "(", "leave_out_index", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "total", "=", "0", "\n", "total_weight", "=", "0", "\n", "\n", "distances", "=", "tf", ".", "negative", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "X", ",", "x_test", ")", ")", ",", "1", ")", ")", ")", "\n", "_", ",", "indx", "=", "tf", ".", "nn", ".", "top_k", "(", "distances", ",", "k", ")", "\n", "for", "index", "in", "indx", ".", "numpy", "(", ")", ":", "\n", "\t\t", "flag", "=", "Y", "[", "index", "]", "\n", "weight", "=", "chars", "[", "index", "]", "\n", "total", "+=", "flag", "*", "weight", "\n", "total_weight", "+=", "weight", "\n", "\n", "", "return", "total", "/", "total_weight", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.__init__": [[9, 38], ["langid.langid.LanguageIdentifier.from_modelstring", "dict", "os.walk", "print", "exit", "hunspell.HunSpell", "set", "open", "set.add", "line.lower().strip", "line.lower"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "identifier", "=", "LanguageIdentifier", ".", "from_modelstring", "(", "model", ",", "norm_probs", "=", "True", ")", "\n", "self", ".", "dicts", "=", "dict", "(", ")", "\n", "for", "lang", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "\t\t\t", "aff_path", "=", "None", "\n", "dic_path", "=", "None", "\n", "txt_path", "=", "None", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ct", ".", "DICTS_PATH", ")", ":", "\n", "\t\t\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t\t\t", "if", "f", "==", "lang", "+", "'.txt'", ":", "\n", "\t\t\t\t\t\t", "txt_path", "=", "root", "+", "'/'", "+", "f", "\n", "", "elif", "f", "==", "lang", "+", "'.aff'", ":", "\n", "\t\t\t\t\t\t", "aff_path", "=", "root", "+", "'/'", "+", "f", "\n", "", "elif", "f", "==", "lang", "+", "'.dic'", ":", "\n", "\t\t\t\t\t\t", "dic_path", "=", "root", "+", "'/'", "+", "f", "\n", "\n", "", "", "", "if", "not", "(", "txt_path", "!=", "None", "or", "(", "dic_path", "!=", "None", "and", "aff_path", "!=", "None", ")", ")", ":", "\n", "\t\t\t\t", "print", "(", "\"dictionnary files not found for language \"", "+", "lang", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "aff_path", "!=", "None", "and", "dic_path", "!=", "None", ":", "\n", "\t\t\t\t", "self", ".", "dicts", "[", "lang", "]", "=", "hunspell", ".", "HunSpell", "(", "dic_path", ",", "aff_path", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "words_list", "=", "set", "(", ")", "\n", "with", "open", "(", "txt_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "lines", ":", "\n", "\t\t\t\t\t", "for", "line", "in", "lines", ":", "\n", "\t\t\t\t\t\t", "words_list", ".", "add", "(", "line", ".", "lower", "(", ")", ".", "strip", "(", ")", ")", "\n", "", "", "self", ".", "dicts", "[", "lang", "]", "=", "words_list", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.compute_features_ori": [[39, 45], ["features_epr.Features.get_tokens", "features_epr.Features.get_dict_score", "features_epr.Features.get_garbage_score"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_tokens", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_dict_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_garbage_score"], ["", "", "", "def", "compute_features_ori", "(", "self", ",", "block", ":", "Block", ")", ":", "\n", "\n", "\t\t", "block", ".", "tokens_ori", "=", "self", ".", "get_tokens", "(", "block", ".", "ocr_ori", ")", "\n", "block", ".", "dict_ori", "=", "self", ".", "get_dict_score", "(", "block", ".", "tokens_ori", ",", "block", ".", "lang_ori", ")", "\n", "block", ".", "garbage_ori", "=", "self", ".", "get_garbage_score", "(", "block", ".", "tokens_ori", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.scale_year": [[46, 50], ["max", "min"], "methods", ["None"], ["", "def", "scale_year", "(", "self", ",", "year", ")", ":", "\n", "\t\t", "scaled_year", "=", "(", "year", "-", "ct", ".", "MIN_YEAR", ")", "/", "(", "ct", ".", "MAX_YEAR", "-", "ct", ".", "MIN_YEAR", ")", "\n", "scaled_year", "=", "max", "(", "min", "(", "1.0", ",", "scaled_year", ")", ",", "0.0", ")", "\n", "return", "scaled_year", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngram_score": [[51, 65], ["len", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "get_ngram_score", "(", "self", ",", "ngrams", ",", "lang_ngrams", ")", ":", "\n", "\n", "\t\t", "if", "len", "(", "ngrams", ")", "==", "0", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "score", "=", "0", "\n", "for", "ngram", "in", "ngrams", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lang_ngrams", ")", ")", ":", "\n", "\t\t\t\t", "if", "ngram", "==", "lang_ngrams", "[", "i", "]", ":", "\n", "\t\t\t\t\t", "score", "+=", "1", "-", "(", "1", "/", "len", "(", "lang_ngrams", ")", "*", "i", ")", "\n", "break", "\n", "\n", "", "", "", "score", "=", "score", "/", "len", "(", "ngrams", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngrams": [[67, 83], ["features_epr.Features.get_lang", "list", "list", "range", "modified_token.split", "len", "token[].isalpha", "range", "list.append", "split[].lower", "len"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_lang"], ["", "def", "get_ngrams", "(", "self", ",", "tokens", ",", "text", ")", ":", "\n", "\n", "\t\t", "lang_gt", "=", "self", ".", "get_lang", "(", "tokens", ",", "text", ")", "\n", "n_grams", "=", "list", "(", ")", "\n", "for", "token", "in", "tokens", ":", "\n", "\t\t\t", "token_list", "=", "list", "(", "token", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "token_list", ")", ")", ":", "\n", "\t\t\t\t", "if", "not", "token", "[", "i", "]", ".", "isalpha", "(", ")", ":", "\n", "\t\t\t\t\t", "token_list", "[", "i", "]", "=", "\" \"", "\n", "", "", "modified_token", "=", "\"\"", ".", "join", "(", "token_list", ")", "\n", "splits", "=", "modified_token", ".", "split", "(", "\" \"", ")", "\n", "for", "split", "in", "splits", ":", "\n", "\t\t\t\t", "if", "split", "!=", "\"\"", ":", "\n", "\t\t\t\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "split", ")", "-", "ct", ".", "NGRAM_LENGTH", "+", "1", ")", ":", "\n", "\t\t\t\t\t\t", "n_grams", ".", "append", "(", "split", "[", "i", ":", "i", "+", "ct", ".", "NGRAM_LENGTH", "]", ".", "lower", "(", ")", ")", "\n", "", "", "", "", "return", "(", "lang_gt", ",", "n_grams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_tokens": [[84, 111], ["list", "enumerate", "len", "list.append", "list.append", "token[].isalpha", "token[].isalpha", "len", "len", "list.append"], "methods", ["None"], ["", "def", "get_tokens", "(", "self", ",", "text", ")", ":", "\n", "\n", "\t\t", "tokens", "=", "list", "(", ")", "\n", "\n", "new_token", "=", "''", "\n", "for", "c", "in", "text", ":", "\n", "\t\t\t", "if", "c", "==", "' '", "and", "len", "(", "new_token", ")", ">", "0", ":", "\n", "\t\t\t\t", "tokens", ".", "append", "(", "new_token", ")", "\n", "new_token", "=", "''", "\n", "", "elif", "c", "==", "'\\n'", "and", "len", "(", "new_token", ")", ">", "0", ":", "\n", "\t\t\t\t", "if", "new_token", "[", "-", "1", "]", "in", "ct", ".", "HYPHENS", ":", "\n", "\t\t\t\t\t", "new_token", "=", "new_token", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "tokens", ".", "append", "(", "new_token", ")", "\n", "new_token", "=", "''", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "new_token", "+=", "c", "\n", "", "", "if", "len", "(", "new_token", ")", ">", "0", ":", "\n", "\t\t\t", "tokens", ".", "append", "(", "new_token", ")", "\n", "\n", "", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "\t\t\t", "if", "not", "token", "[", "-", "1", "]", ".", "isalpha", "(", ")", ":", "\n", "\t\t\t\t", "tokens", "[", "i", "]", "=", "token", "[", ":", "-", "1", "]", "\n", "", "if", "not", "token", "[", "0", "]", ".", "isalpha", "(", ")", ":", "\n", "\t\t\t\t", "tokens", "[", "i", "]", "=", "token", "[", "1", ":", "]", "\n", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_lang": [[112, 128], ["len", "features_epr.Features.identifier.classify", "text.strip", "token.lower", "len", "sw.lower"], "methods", ["None"], ["", "def", "get_lang", "(", "self", ",", "tokens", ",", "text", ")", ":", "\n", "\n", "\t\t", "if", "len", "(", "tokens", ")", "==", "0", ":", "\n", "\t\t\t", "return", "'unknown'", "\n", "", "for", "lang", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "\t\t\t", "matched", "=", "0", "\n", "for", "token", "in", "tokens", ":", "\n", "\t\t\t\t", "if", "token", ".", "lower", "(", ")", "in", "[", "sw", ".", "lower", "(", ")", "for", "sw", "in", "ct", ".", "STOP_WORDS", "[", "lang", "]", "]", ":", "\n", "\t\t\t\t\t", "matched", "+=", "1", "\n", "", "", "if", "matched", "/", "len", "(", "tokens", ")", ">=", "ct", ".", "STOP_WORDS_THRESH", ":", "\n", "\t\t\t\t", "return", "lang", "\n", "", "", "try", ":", "\n", "\t\t\t", "lang", ",", "_", "=", "self", ".", "identifier", ".", "classify", "(", "text", ".", "strip", "(", ")", ")", "\n", "return", "lang", "\n", "", "except", ":", "\n", "\t\t\t", "return", "'unknown'", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_dict_score": [[129, 146], ["len", "isinstance", "len", "features_epr.Features.dicts[].spell", "token.lower", "len", "len"], "methods", ["None"], ["", "", "def", "get_dict_score", "(", "self", ",", "tokens", ",", "lang", ")", ":", "\n", "\n", "\t\t", "if", "lang", "not", "in", "ct", ".", "SUPPORTED_LANGS", "or", "len", "(", "tokens", ")", "==", "0", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "matched_count", "=", "0", "\n", "total_count", "=", "0", "\n", "\n", "for", "token", "in", "tokens", ":", "\n", "\t\t\t", "total_count", "+=", "len", "(", "token", ")", "\n", "if", "isinstance", "(", "self", ".", "dicts", "[", "lang", "]", ",", "set", ")", ":", "\n", "\t\t\t\t", "if", "token", ".", "lower", "(", ")", "in", "self", ".", "dicts", "[", "lang", "]", ":", "\n", "\t\t\t\t\t", "matched_count", "+=", "len", "(", "token", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "if", "self", ".", "dicts", "[", "lang", "]", ".", "spell", "(", "token", ")", ":", "\n", "\t\t\t\t\t", "matched_count", "+=", "len", "(", "token", ")", "\n", "", "", "", "return", "matched_count", "/", "total_count", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_garbage_score": [[148, 263], ["len", "set", "range", "len", "len", "len", "char.isalpha", "token[].islower", "token[].islower", "len", "len", "char.isupper", "char.isalnum", "char.lower", "set.add", "len", "len"], "methods", ["None"], ["", "def", "get_garbage_score", "(", "self", ",", "tokens", ")", ":", "\n", "\n", "\t\t", "issues", "=", "0", "\n", "\n", "if", "len", "(", "tokens", ")", "==", "0", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "for", "token", "in", "tokens", ":", "\n", "\n", "# rule1", "\n", "\t\t\t", "if", "len", "(", "token", ")", ">=", "ct", ".", "EPR_RULE1", ":", "\n", "\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "\n", "", "vowel_count", "=", "0", "\n", "consonant_count", "=", "0", "\n", "lower_case_count", "=", "0", "\n", "upper_case_count", "=", "0", "\n", "special_char_count", "=", "0", "\n", "non_outer_special_chars", "=", "set", "(", ")", "\n", "alpha", "=", "True", "\n", "last_char", "=", "None", "\n", "repitition_streak", "=", "0", "\n", "vowel_streak", "=", "0", "\n", "consonant_streak", "=", "0", "\n", "go_to_next_token", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "token", ")", ")", ":", "\n", "\t\t\t\t", "go_to_next_token", "=", "False", "\n", "char", "=", "token", "[", "i", "]", "\n", "\n", "# collect token info", "\n", "if", "char", ".", "isalpha", "(", ")", ":", "\n", "\t\t\t\t\t", "if", "char", ".", "lower", "(", ")", "in", "ct", ".", "VOWELS", ":", "\n", "\t\t\t\t\t\t", "vowel_count", "+=", "1", "\n", "vowel_streak", "+=", "1", "\n", "consonant_streak", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "consonant_count", "+=", "1", "\n", "consonant_streak", "+=", "1", "\n", "vowel_streak", "=", "0", "\n", "", "if", "char", ".", "isupper", "(", ")", ":", "\n", "\t\t\t\t\t\t", "upper_case_count", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "lower_case_count", "+=", "1", "\n", "", "", "elif", "char", ".", "isalnum", "(", ")", ":", "\n", "\t\t\t\t\t", "alpha", "=", "False", "\n", "vowel_streak", "=", "0", "\n", "consonant_streak", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "special_char_count", "+=", "1", "\n", "alpha", "=", "False", "\n", "vowel_streak", "=", "0", "\n", "consonant_streak", "=", "0", "\n", "if", "i", "!=", "0", "and", "i", "!=", "len", "(", "token", ")", "-", "1", ":", "\n", "\t\t\t\t\t\t", "non_outer_special_chars", ".", "add", "(", "char", ")", "\n", "\n", "# rule 3", "\n", "", "", "if", "vowel_streak", ">=", "ct", ".", "EPR_RULE3", ":", "\n", "\t\t\t\t\t", "issues", "+=", "1", "\n", "go_to_next_token", "=", "True", "\n", "break", "\n", "\n", "# rule 4", "\n", "", "if", "consonant_streak", ">=", "ct", ".", "EPR_RULE4", ":", "\n", "\t\t\t\t\t", "issues", "+=", "1", "\n", "go_to_next_token", "=", "True", "\n", "break", "\n", "\n", "", "if", "last_char", "!=", "None", "and", "char", "==", "last_char", ":", "\n", "\t\t\t\t\t", "repitition_streak", "+=", "1", "\n", "\n", "# rule 2", "\n", "if", "repitition_streak", ">=", "ct", ".", "EPR_RULE2", ":", "\n", "\t\t\t\t\t\t", "issues", "+=", "1", "\n", "go_to_next_token", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "repitition_streak", "=", "0", "\n", "", "last_char", "=", "char", "\n", "\n", "", "if", "go_to_next_token", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "if", "alpha", "and", "vowel_count", ">", "0", "and", "consonant_count", ">", "0", ":", "\n", "# rule 5\t\t", "\n", "\t\t\t\t", "if", "vowel_count", "*", "ct", ".", "EPR_RULE5", "<", "consonant_count", ":", "\n", "\t\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "# rule 5", "\n", "", "if", "consonant_count", "*", "ct", ".", "EPR_RULE5", "<", "vowel_count", ":", "\n", "\t\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "\n", "# rule 6", "\n", "", "", "if", "lower_case_count", ">", "0", "and", "upper_case_count", ">", "lower_case_count", ":", "\n", "\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "\n", "# rule 7", "\n", "", "if", "upper_case_count", ">", "0", "and", "token", "[", "0", "]", ".", "islower", "(", ")", "and", "token", "[", "len", "(", "token", ")", "-", "1", "]", ".", "islower", "(", ")", ":", "\n", "\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "\n", "# rule 8", "\n", "", "regular_chars", "=", "len", "(", "token", ")", "-", "special_char_count", "\n", "if", "special_char_count", ">=", "regular_chars", "and", "regular_chars", ">", "0", ":", "\n", "\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "\n", "# rule 9", "\n", "", "if", "len", "(", "non_outer_special_chars", ")", ">=", "ct", ".", "EPR_RULE9", ":", "\n", "\t\t\t\t", "issues", "+=", "1", "\n", "continue", "\n", "\n", "", "", "return", "issues", "/", "len", "(", "tokens", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.test_epr.test_epr_model": [[8, 60], ["ocr.pipe.models.Models", "ocr.pipe.models.Models.load_epr_model", "int", "tqdm.tqdm", "print", "print", "range", "open", "model_file.readlines", "json.loads", "open", "model_file.write", "len", "len", "epr.apply_epr.predict", "abs", "open", "model_file.writelines", "json.dumps", "str", "range", "min", "len"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_epr_model", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.apply_epr.predict"], ["def", "test_epr_model", "(", "model_name", ")", ":", "\n", "\n", "\t", "models", "=", "Models", "(", ")", "\n", "model_path", "=", "models", ".", "load_epr_model", "(", "model_name", ")", "\n", "\n", "X", "=", "models", ".", "epr", "[", "'x'", "]", "\n", "Y", "=", "models", ".", "epr", "[", "'y'", "]", "\n", "chars", "=", "models", ".", "epr", "[", "'chars'", "]", "\n", "\n", "best_loss", "=", "None", "\n", "best_k", "=", "None", "\n", "\n", "n_test_ks", "=", "int", "(", "len", "(", "X", ")", "**", "(", "1", "/", "2", ")", ")", "\n", "\n", "for", "k", "in", "tqdm", "(", "[", "i", "for", "i", "in", "range", "(", "1", ",", "min", "(", "len", "(", "X", ")", ",", "n_test_ks", "*", "2", ")", ",", "2", ")", "]", ")", ":", "\n", "\t\t", "total_loss", "=", "0", "\n", "total_chars", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ")", ":", "\n", "\n", "\t\t\t", "x_test", "=", "X", "[", "i", "]", "\n", "gt", "=", "Y", "[", "i", "]", "\n", "prediction", "=", "predict", "(", "models", ".", "epr", ",", "x_test", ",", "k", ",", "i", ")", "\n", "delta", "=", "prediction", "-", "gt", "\n", "diff", "=", "abs", "(", "delta", ")", "\n", "total_loss", "+=", "diff", "*", "chars", "[", "i", "]", "\n", "total_chars", "+=", "chars", "[", "i", "]", "\n", "\n", "", "loss", "=", "total_loss", "/", "total_chars", "\n", "\n", "if", "best_loss", "==", "None", "or", "loss", "<", "best_loss", ":", "\n", "\t\t\t", "best_loss", "=", "loss", "\n", "best_k", "=", "k", "\n", "\n", "# copy lines of model file", "\n", "", "", "with", "open", "(", "model_path", ",", "'r'", ")", "as", "model_file", ":", "\n", "\t\t", "lines", "=", "model_file", ".", "readlines", "(", ")", "\n", "\n", "# remove last line if necessary", "\n", "", "if", "'k'", "in", "json", ".", "loads", "(", "lines", "[", "-", "1", "]", ")", ":", "\n", "\t\t", "with", "open", "(", "model_path", ",", "'w'", ")", "as", "model_file", ":", "\n", "\t\t\t", "model_file", ".", "writelines", "(", "lines", "[", ":", "-", "1", "]", ")", "\n", "\n", "# add k and mae infos as last line", "\n", "", "", "with", "open", "(", "model_path", ",", "'a'", ")", "as", "model_file", ":", "\n", "\t\t", "info", "=", "{", "\n", "'k'", ":", "best_k", ",", "\n", "'mae'", ":", "best_loss", "\n", "}", "\n", "model_file", ".", "write", "(", "json", ".", "dumps", "(", "info", ")", ")", "\n", "\n", "", "print", "(", "\"enhancement prediction test using \"", "+", "model_name", "+", "\" completed with results:\"", ")", "\n", "print", "(", "\"mean absolute error:\\t\"", "+", "str", "(", "best_loss", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.train_epr_model": [[14, 42], ["epr.features_epr.Features", "ocr.test.scoring.Scoring", "ocr.pipe.models.Models", "ocr.pipe.models.Models.load_final_models", "train_epr.get_data", "dict", "enumerate", "open().close", "train_epr.store_ngrams", "train_epr.store_model", "sorted", "epr.features_epr.Features.get_ngram_score", "os.path.isdir", "os.makedirs", "model_name.endswith", "lang_trigrams[].items", "open"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_final_models", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_fcr.get_data", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.store_ngrams", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.store_model", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngram_score"], ["def", "train_epr_model", "(", "inventory", ",", "model_name", ")", ":", "\n", "\n", "\t", "features", "=", "Features", "(", ")", "\n", "scoring", "=", "Scoring", "(", ")", "\n", "models", "=", "Models", "(", ")", "\n", "models", ".", "load_final_models", "(", "require_enhance", "=", "False", ")", "\n", "\n", "X", ",", "Y", ",", "chars", ",", "trigrams", ",", "lang_trigrams", "=", "get_data", "(", "inventory", ",", "models", ",", "scoring", ",", "features", ")", "\n", "\n", "lang_ngrams", "=", "dict", "(", ")", "\n", "for", "lang", "in", "lang_trigrams", ":", "\n", "\t\t", "lang_ngrams", "[", "lang", "]", "=", "sorted", "(", "lang_trigrams", "[", "lang", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "lang_ngrams", "[", "lang", "]", "=", "lang_ngrams", "[", "lang", "]", "[", ":", "ct", ".", "AMOUNT_NGRAMS", "]", "\n", "lang_ngrams", "[", "lang", "]", "=", "[", "n", "[", "0", "]", "for", "n", "in", "lang_ngrams", "[", "lang", "]", "]", "\n", "\n", "# we replace x[1] from language information to trigram score", "\n", "", "for", "i", ",", "_", "in", "enumerate", "(", "X", ")", ":", "\n", "\t\t", "X", "[", "i", "]", "[", "1", "]", "=", "features", ".", "get_ngram_score", "(", "trigrams", "[", "i", "]", ",", "lang_ngrams", "[", "X", "[", "i", "]", "[", "1", "]", "]", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "ct", ".", "MODELS_PATH", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ct", ".", "MODELS_PATH", ")", "\n", "\n", "", "if", "not", "model_name", ".", "endswith", "(", "'jsonl'", ")", ":", "\n", "\t\t", "model_name", "+=", "'.jsonl'", "\n", "\n", "", "open", "(", "ct", ".", "MODELS_PATH", "+", "model_name", ",", "'w'", ")", ".", "close", "(", ")", "\n", "store_ngrams", "(", "lang_ngrams", ",", "model_name", ")", "\n", "store_model", "(", "X", ",", "Y", ",", "chars", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.store_ngrams": [[44, 50], ["open", "json.dumps().encode", "f.write", "f.write", "json.dumps().encode.decode", "json.dumps"], "function", ["None"], ["", "def", "store_ngrams", "(", "lang_ngrams", ",", "model_name", ")", ":", "\n", "\n", "\t", "with", "open", "(", "ct", ".", "MODELS_PATH", "+", "model_name", ",", "'a'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "\t\t", "json_string", "=", "json", ".", "dumps", "(", "lang_ngrams", ",", "ensure_ascii", "=", "False", ")", ".", "encode", "(", "'utf8'", ")", "\n", "f", ".", "write", "(", "json_string", ".", "decode", "(", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.store_model": [[52, 70], ["print", "open", "range", "f.write", "len", "json.dumps().encode", "f.write", "f.write", "min", "json.dumps", "json.dumps().encode.decode", "len", "json.dumps", "constants.MODELS_PATH.split"], "function", ["None"], ["", "", "def", "store_model", "(", "X", ",", "Y", ",", "chars", ",", "model_name", ")", ":", "\n", "\n", "\t", "with", "open", "(", "ct", ".", "MODELS_PATH", "+", "model_name", ",", "'a'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ")", ":", "\n", "\t\t\t", "entry", "=", "{", "\n", "'y'", ":", "Y", "[", "i", "]", ",", "\n", "'x'", ":", "X", "[", "i", "]", ",", "\n", "'chars'", ":", "chars", "[", "i", "]", "\n", "}", "\n", "json_string", "=", "json", ".", "dumps", "(", "entry", ",", "ensure_ascii", "=", "False", ")", ".", "encode", "(", "'utf8'", ")", "\n", "f", ".", "write", "(", "json_string", ".", "decode", "(", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "k_dict", "=", "{", "\n", "'k'", ":", "min", "(", "ct", ".", "DEFAULT_K", ",", "len", "(", "X", ")", ")", "\n", "}", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "k_dict", ")", ")", "\n", "\n", "", "print", "(", "ct", ".", "MODELS_PATH", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "model_name", "+", "' has been created'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.train_epr.get_data": [[71, 150], ["list", "list", "list", "list", "dict", "dict", "open", "tqdm.tqdm", "json.loads", "cv2.imread", "ocr.pipe.block.Block", "ocr.test.test_ocr.get_alto_text", "ocr.test.test_ocr.get_alto_text", "ocr.pipe.pipe.ocr", "scoring.get_score", "scoring.get_score", "features.get_tokens", "features.get_ngrams", "features.get_tokens", "features.get_ngrams", "features.compute_features_ori", "print", "features.scale_year", "list.append", "list.append", "list.append", "list.append", "int", "print", "exit", "len"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.get_alto_text", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.get_alto_text", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pipe.ocr", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_tokens", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngrams", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_tokens", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngrams", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.compute_features_ori", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.scale_year"], ["", "def", "get_data", "(", "inventory", ",", "models", ",", "scoring", ",", "features", ")", ":", "\n", "\n", "\t", "x_values", "=", "list", "(", ")", "\n", "y_values", "=", "list", "(", ")", "\n", "chars", "=", "list", "(", ")", "\n", "trigrams", "=", "list", "(", ")", "\n", "lang_trigrams", "=", "dict", "(", ")", "\n", "\n", "for", "lang", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "\t\t", "lang_trigrams", "[", "lang", "]", "=", "dict", "(", ")", "\n", "\n", "", "with", "open", "(", "inventory", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "lines", ":", "\n", "\t\t", "lines", "=", "[", "line", "for", "line", "in", "lines", "]", "\n", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\n", "\t\t\t", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "\n", "# create block based on image", "\n", "if", "not", "'image'", "in", "info", "or", "not", "'gt'", "in", "info", "or", "not", "'ori'", "in", "info", "or", "not", "'year'", "in", "info", ":", "\n", "\t\t\t\t", "print", "(", "\"json line does not include required 'image', 'gt', 'ori' and 'year' properties\"", ")", "\n", "", "year", "=", "None", "\n", "try", ":", "\n", "\t\t\t\t", "year", "=", "features", ".", "scale_year", "(", "int", "(", "info", "[", "'year'", "]", ")", ")", "\n", "", "except", ":", "\n", "\t\t\t\t", "print", "(", "\"'year' property is not of type integer\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "image", "=", "cv2", ".", "imread", "(", "info", "[", "'image'", "]", ")", "\n", "block", "=", "Block", "(", "image", ")", "\n", "\n", "# set gt ocr", "\n", "gt_block_id", "=", "None", "\n", "if", "'gt-block-id'", "in", "info", ":", "\n", "\t\t\t\t", "gt_block_id", "=", "info", "[", "'gt-block-id'", "]", "\n", "", "block", ".", "ocr_gt", "=", "get_alto_text", "(", "info", "[", "'gt'", "]", ",", "gt_block_id", ")", "\n", "\n", "# set ori ocr", "\n", "ori_block_id", "=", "None", "\n", "if", "'ori-block-id'", "in", "info", ":", "\n", "\t\t\t\t", "ori_block_id", "=", "info", "[", "'ori-block-id'", "]", "\n", "", "block", ".", "ocr_ori", "=", "get_alto_text", "(", "info", "[", "'ori'", "]", ",", "ori_block_id", ")", "\n", "\n", "# set new ocr", "\n", "block", "=", "ocr", "(", "block", ",", "models", ")", "\n", "\n", "# get enhance score", "\n", "new_score", "=", "scoring", ".", "get_score", "(", "block", ",", "new_ocr", "=", "True", ")", "\n", "old_score", "=", "scoring", ".", "get_score", "(", "block", ",", "new_ocr", "=", "False", ")", "\n", "enhance", "=", "new_score", "-", "old_score", "\n", "\n", "# get gt trigrams", "\n", "block", ".", "tokens_gt", "=", "features", ".", "get_tokens", "(", "block", ".", "ocr_gt", ")", "\n", "lang_gt", ",", "trigrams_gt", "=", "features", ".", "get_ngrams", "(", "block", ".", "tokens_gt", ",", "block", ".", "ocr_gt", ")", "\n", "\n", "# get ori trigrams", "\n", "block", ".", "tokens_ori", "=", "features", ".", "get_tokens", "(", "block", ".", "ocr_ori", ")", "\n", "lang_ori", ",", "trigrams_ori", "=", "features", ".", "get_ngrams", "(", "block", ".", "tokens_ori", ",", "block", ".", "ocr_ori", ")", "\n", "block", ".", "lang_ori", "=", "lang_ori", "\n", "\n", "# get ori features\t", "\n", "block", "=", "features", ".", "compute_features_ori", "(", "block", ")", "\n", "\n", "# collect all trigrams in the gt language", "\n", "if", "lang_gt", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "\t\t\t\t", "for", "tri", "in", "trigrams_gt", ":", "\n", "\t\t\t\t\t", "if", "tri", "not", "in", "lang_trigrams", "[", "lang_gt", "]", ":", "\n", "\t\t\t\t\t\t", "lang_trigrams", "[", "lang_gt", "]", "[", "tri", "]", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "lang_trigrams", "[", "lang_gt", "]", "[", "tri", "]", "+=", "1", "\n", "\n", "# collect model values", "\n", "", "", "", "if", "lang_ori", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "\t\t\t\t", "y_values", ".", "append", "(", "enhance", ")", "\n", "x_values", ".", "append", "(", "[", "block", ".", "dict_ori", ",", "lang_ori", ",", "block", ".", "garbage_ori", ",", "year", "]", ")", "\n", "chars", ".", "append", "(", "len", "(", "block", ".", "ocr_ori", ")", ")", "\n", "trigrams", ".", "append", "(", "trigrams_ori", ")", "\n", "\n", "", "", "", "return", "(", "x_values", ",", "y_values", ",", "chars", ",", "trigrams", ",", "lang_trigrams", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.adjust_boxes": [[22, 32], ["list", "apply_seg.combine_boxes", "max", "max", "min", "min", "list.append", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combine_boxes"], ["def", "adjust_boxes", "(", "boxes", ",", "im_w", ",", "im_h", ")", ":", "\n", "\n", "\t", "new_boxes", "=", "list", "(", ")", "\n", "for", "box", "in", "boxes", ":", "\n", "\t\t", "x1", "=", "max", "(", "0", ",", "int", "(", "box", "[", "0", "]", "-", "ct", ".", "LINE_IMG_PAD", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "int", "(", "box", "[", "1", "]", "-", "ct", ".", "P8", ")", ")", "\n", "x2", "=", "min", "(", "im_w", ",", "int", "(", "box", "[", "2", "]", "+", "ct", ".", "LINE_IMG_PAD", ")", ")", "\n", "y2", "=", "min", "(", "im_h", ",", "int", "(", "box", "[", "3", "]", "+", "ct", ".", "P8", ")", ")", "\n", "new_boxes", ".", "append", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "", "return", "combine_boxes", "(", "new_boxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combine_boxes": [[34, 96], ["boxes.sort", "merged_correct_boxes.append", "correct_boxes[].append", "max", "max", "max", "len", "correct_boxes[].append", "correct_boxes.append", "int", "int", "int", "int"], "function", ["None"], ["", "def", "combine_boxes", "(", "boxes", ")", ":", "\n", "\n", "\t", "'''\n\talgorithm idea:\n\t- combine boxes that have similar vertical coordinates, so that they represent the same text line\n\t- sort list of boxes using increasing y\n\t- iterate over sorted list:\n\t\t- if new box is contained in previous one (new_y1 > prev_y1 and new_y2 < prev_y2), it is the same line\n\t\t- else if OVERLAP_THRESH_SEG and OVERLAP2_THRESH_SEG determine whether they overlap enough to represent the same line\n\t\t- else it is a new line\n\t\t- only in last two cases we update the current/new box to be the previous box in the next iteration  \n\t'''", "\n", "\n", "# sort using y", "\n", "boxes", ".", "sort", "(", "key", "=", "lambda", "pair", ":", "pair", "[", "1", "]", ")", "\n", "\n", "correct_boxes", "=", "[", "]", "\n", "# iterate over all boxes", "\n", "last_y1", "=", "0", "\n", "last_y2", "=", "0", "\n", "for", "box", "in", "boxes", ":", "\n", "\t\t", "y1", "=", "box", "[", "1", "]", "\n", "y2", "=", "box", "[", "3", "]", "\n", "\n", "# current box is contained in last box in terms of height -> same line", "\n", "if", "y2", "<", "last_y2", ":", "\n", "\t\t\t", "correct_boxes", "[", "-", "1", "]", ".", "append", "(", "box", ")", "\n", "", "else", ":", "\n", "\t\t\t", "two_line_height", "=", "max", "(", "1", ",", "y2", "-", "last_y1", ")", "\n", "last_line_height", "=", "max", "(", "1", ",", "last_y2", "-", "last_y1", ")", "\n", "new_line_height", "=", "max", "(", "1", ",", "y2", "-", "y1", ")", "\n", "two_line_overlap", "=", "last_y2", "-", "y1", "\n", "\n", "\n", "# overlap between current box and last box is more than 50% of combined height -> same line", "\n", "if", "two_line_overlap", "/", "two_line_height", ">", "ct", ".", "OVERLAP_THRESH_SEG", "or", "two_line_overlap", "/", "last_line_height", ">", "ct", ".", "OVERLAP2_THRESH_SEG", "or", "two_line_overlap", "/", "new_line_height", ">", "ct", ".", "OVERLAP2_THRESH_SEG", ":", "\n", "\t\t\t\t", "correct_boxes", "[", "-", "1", "]", ".", "append", "(", "box", ")", "\n", "\n", "# current box is a new line", "\n", "", "else", ":", "\n", "\t\t\t\t", "correct_boxes", ".", "append", "(", "[", "box", "]", ")", "\n", "", "last_y1", "=", "y1", "\n", "last_y2", "=", "y2", "\n", "\n", "", "", "merged_correct_boxes", "=", "[", "]", "\n", "for", "correct_box", "in", "correct_boxes", ":", "\n", "\t\t", "new_x1", "=", "correct_box", "[", "0", "]", "[", "0", "]", "\n", "new_y1", "=", "correct_box", "[", "0", "]", "[", "1", "]", "\n", "new_x2", "=", "correct_box", "[", "0", "]", "[", "2", "]", "\n", "new_y2", "=", "correct_box", "[", "0", "]", "[", "3", "]", "\n", "if", "len", "(", "correct_box", ")", ">", "1", ":", "\n", "\t\t\t", "for", "block", "in", "correct_box", ":", "\n", "\t\t\t\t", "if", "block", "[", "0", "]", "<", "new_x1", ":", "\n", "\t\t\t\t\t", "new_x1", "=", "block", "[", "0", "]", "\n", "", "if", "block", "[", "1", "]", "<", "new_y1", ":", "\n", "\t\t\t\t\t", "new_y1", "=", "block", "[", "1", "]", "\n", "", "if", "block", "[", "2", "]", ">", "new_x2", ":", "\n", "\t\t\t\t\t", "new_x2", "=", "block", "[", "2", "]", "\n", "", "if", "block", "[", "3", "]", ">", "new_y2", ":", "\n", "\t\t\t\t\t", "new_y2", "=", "block", "[", "3", "]", "\n", "", "", "", "merged_correct_boxes", ".", "append", "(", "[", "int", "(", "new_x1", ")", ",", "int", "(", "new_y1", ")", ",", "int", "(", "new_x2", ")", ",", "int", "(", "new_y2", ")", "]", ")", "\n", "", "return", "merged_correct_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combiseg": [[98, 110], ["apply_seg.morph", "apply_seg.comp", "apply_seg.hist", "apply_seg.adjust_boxes", "apply_seg.combine_boxes", "apply_seg.adjust_boxes"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.morph", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.comp", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.hist", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.adjust_boxes", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combine_boxes", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.adjust_boxes"], ["", "def", "combiseg", "(", "image_b", ")", ":", "\n", "\n", "\t", "im_width", "=", "image_b", ".", "shape", "[", "1", "]", "\n", "im_height", "=", "image_b", ".", "shape", "[", "0", "]", "\n", "\n", "image_p", "=", "morph", "(", "image_b", ")", "\n", "boxes", "=", "comp", "(", "image_p", ",", "im_width", ",", "im_height", ")", "\n", "boxes_u", "=", "hist", "(", "image_b", ",", "boxes", ")", "\n", "boxes", "=", "adjust_boxes", "(", "boxes", ",", "im_width", ",", "im_height", ")", "\n", "boxes", "=", "combine_boxes", "(", "boxes", ")", "\n", "\n", "return", "adjust_boxes", "(", "boxes_u", ",", "im_width", ",", "im_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.morph": [[113, 144], ["numpy.ones", "cv2.dilate", "cv2.bitwise_not", "numpy.ones", "cv2.morphologyEx", "cv2.subtract", "numpy.ones", "cv2.morphologyEx", "numpy.ones", "cv2.dilate", "cv2.bitwise_or", "cv2.bitwise_not"], "function", ["None"], ["", "def", "morph", "(", "image", ")", ":", "\n", "\n", "# dilation - dilate text areas to be wider", "\n", "\t", "kernel", "=", "np", ".", "ones", "(", "(", "1", ",", "ct", ".", "P2", ")", ",", "np", ".", "uint8", ")", "\n", "dilated_image", "=", "cv2", ".", "dilate", "(", "image", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "# invert - we want a white background", "\n", "inverted_image", "=", "cv2", ".", "bitwise_not", "(", "dilated_image", ")", "\n", "\n", "# open morhp - search for vertical white background bars (to exclude them from nackground dilate)", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "ct", ".", "P3", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "bars", "=", "cv2", ".", "morphologyEx", "(", "inverted_image", ",", "cv2", ".", "MORPH_OPEN", ",", "kernel", ")", "\n", "\n", "# substraction - substract vertical white background bars from background", "\n", "background", "=", "cv2", ".", "subtract", "(", "inverted_image", ",", "bars", ")", "\n", "\n", "# open morph - search for horizontal white background bars which should seperate the text lines", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "1", ",", "ct", ".", "P4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "background_seperators_image", "=", "cv2", ".", "morphologyEx", "(", "background", ",", "cv2", ".", "MORPH_OPEN", ",", "kernel", ")", "\n", "\n", "# dilation - dilate background seperators so they are wider and seperate text lines", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "1", ",", "ct", ".", "P5", ")", ",", "np", ".", "uint8", ")", "\n", "dilated_background_image", "=", "cv2", ".", "dilate", "(", "background_seperators_image", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "# addition - add inverted image with the dilated horizontal background bars", "\n", "added_image", "=", "cv2", ".", "bitwise_or", "(", "inverted_image", ",", "dilated_background_image", ")", "\n", "\n", "# invert - we invert again so that the text is white again", "\n", "final_image", "=", "cv2", ".", "bitwise_not", "(", "added_image", ")", "\n", "\n", "return", "final_image", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.comp": [[146, 158], ["cv2.connectedComponentsWithStats", "list", "enumerate", "len", "list.append"], "function", ["None"], ["", "def", "comp", "(", "image", ",", "image_width", ",", "image_height", ")", ":", "\n", "\t", "_", ",", "_", ",", "stats", ",", "_", "=", "cv2", ".", "connectedComponentsWithStats", "(", "image", ",", "connectivity", "=", "4", ")", "\n", "boxes", "=", "list", "(", ")", "\n", "for", "i", ",", "comp", "in", "enumerate", "(", "stats", ")", ":", "\n", "\t\t", "if", "i", "==", "0", ":", "# this is the background component which we ignore", "\n", "\t\t\t", "continue", "\n", "", "if", "comp", "[", "3", "]", ">", "ct", ".", "P6", ":", "\n", "\t\t\t", "boxes", ".", "append", "(", "(", "comp", "[", "0", "]", ",", "comp", "[", "1", "]", ",", "comp", "[", "0", "]", "+", "comp", "[", "2", "]", ",", "comp", "[", "1", "]", "+", "comp", "[", "3", "]", ")", ")", "\n", "", "", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "\t\t", "boxes", "=", "[", "[", "0", ",", "0", ",", "image_width", ",", "image_height", "]", "]", "\n", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.hist": [[160, 183], ["list", "numpy.sum", "apply_seg.histogram_algo", "len", "histogram_algo.append", "list.append", "list.append"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.histogram_algo"], ["", "def", "hist", "(", "image", ",", "boxes", ")", ":", "\n", "\n", "\t", "new_boxes", "=", "list", "(", ")", "\n", "image", "=", "image", "/", "255", "\n", "projection", "=", "np", ".", "sum", "(", "image", ",", "1", ")", "\n", "\n", "for", "box", "in", "boxes", ":", "\n", "\t\t", "x1", "=", "box", "[", "0", "]", "\n", "y1", "=", "box", "[", "1", "]", "\n", "x2", "=", "box", "[", "2", "]", "\n", "y2", "=", "box", "[", "3", "]", "\n", "subprojection", "=", "projection", "[", "y1", ":", "y2", "+", "1", "]", "\n", "seperators", "=", "histogram_algo", "(", "subprojection", ",", "y1", ",", "y2", ")", "\n", "if", "len", "(", "seperators", ")", ">", "0", ":", "\n", "\t\t\t", "last_seperator", "=", "y1", "\n", "seperators", ".", "append", "(", "y2", ")", "\n", "for", "seperator", "in", "seperators", ":", "\n", "\t\t\t\t", "if", "seperator", "-", "last_seperator", ">", "ct", ".", "P6", ":", "\n", "\t\t\t\t\t", "new_boxes", ".", "append", "(", "[", "x1", ",", "last_seperator", ",", "x2", ",", "seperator", "]", ")", "\n", "", "last_seperator", "=", "seperator", "\n", "", "", "else", ":", "\n", "\t\t\t", "new_boxes", ".", "append", "(", "box", ")", "\n", "", "", "return", "new_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.find_seperator": [[185, 194], ["range", "apply_seg.hist"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.hist"], ["", "def", "find_seperator", "(", "x1", ",", "x2", ",", "hist", ")", ":", "\n", "\n", "\t", "lowest", "=", "sys", ".", "maxsize", "\n", "seperator", "=", "x1", "\n", "for", "x", "in", "range", "(", "x1", ",", "x2", "+", "1", ")", ":", "\n", "\t\t", "if", "hist", "[", "x", "]", "<", "lowest", ":", "\n", "\t\t\t", "lowest", "=", "hist", "[", "x", "]", "\n", "seperator", "=", "x", "\n", "", "", "return", "seperator", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.histogram_algo": [[196, 256], ["dict", "collections.OrderedDict", "len", "set", "list", "list.sort", "list", "enumerate", "enumerate", "reversed", "projection.flatten", "sorted", "set", "list.append", "collections.OrderedDict.items", "range", "set.isdisjoint", "list.append", "list.append", "apply_seg.find_seperator"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.find_seperator"], ["", "def", "histogram_algo", "(", "projection", ",", "y1", ",", "y2", ")", ":", "\n", "\t", "hist", "=", "dict", "(", "enumerate", "(", "projection", ".", "flatten", "(", ")", ",", "y1", ")", ")", "\n", "hist", "=", "collections", ".", "OrderedDict", "(", "reversed", "(", "sorted", "(", "hist", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ")", ")", "\n", "\n", "n", "=", "len", "(", "hist", ")", "\n", "alpha", "=", "0.1", "\n", "t", "=", "ct", ".", "P7", "#\u00a0relativ threshold - this has been tuned based on all gt blocks", "\n", "A", "=", "set", "(", ")", "# checked points", "\n", "B", "=", "list", "(", ")", "# peak widths", "\n", "MAX_HEIGHT", "=", "None", "\n", "\n", "for", "x", "in", "hist", ":", "\n", "\t\t", "height", "=", "hist", "[", "x", "]", "\n", "if", "MAX_HEIGHT", "==", "None", ":", "\n", "\t\t\t", "MAX_HEIGHT", "=", "height", "\n", "", "if", "height", "<=", "alpha", "*", "MAX_HEIGHT", ":", "\n", "\t\t\t", "break", "\n", "", "if", "x", "not", "in", "A", ":", "\n", "\t\t\t", "ta", "=", "t", "*", "height", "\n", "\n", "left_x", "=", "x", "\n", "right_x", "=", "x", "\n", "new_h", "=", "ta", "\n", "\n", "# search to the left", "\n", "while", "True", "and", "left_x", ">", "y1", ":", "\n", "\t\t\t\t", "new_h", "=", "hist", "[", "left_x", "-", "1", "]", "\n", "if", "new_h", ">", "ta", ":", "\n", "\t\t\t\t\t", "left_x", "-=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "break", "\n", "\n", "# search to the right", "\n", "", "", "while", "True", "and", "right_x", "<", "y2", "-", "1", ":", "\n", "\t\t\t\t", "new_h", "=", "hist", "[", "right_x", "+", "1", "]", "\n", "if", "new_h", ">", "ta", ":", "\n", "\t\t\t\t\t", "right_x", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "break", "\n", "\n", "", "", "R", "=", "set", "(", "range", "(", "left_x", ",", "right_x", "+", "1", ")", ")", "\n", "\n", "if", "R", ".", "isdisjoint", "(", "A", ")", "and", "x", "!=", "left_x", "and", "x", "!=", "right_x", ":", "\n", "\t\t\t\t", "B", ".", "append", "(", "left_x", ")", "\n", "B", ".", "append", "(", "right_x", ")", "\n", "\n", "", "A", "=", "A", "|", "R", "\n", "\n", "", "", "B", ".", "sort", "(", ")", "\n", "x1", "=", "None", "\n", "seperators", "=", "list", "(", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "B", ")", ":", "\n", "\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "i", "%", "2", "==", "1", ":", "\n", "\t\t\t", "x1", "=", "x", "\n", "", "else", ":", "\n", "\t\t\t", "x2", "=", "x", "\n", "seperators", ".", "append", "(", "find_seperator", "(", "x1", ",", "x2", ",", "hist", ")", ")", "\n", "", "", "return", "seperators", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.test_seg.get_boxes": [[11, 29], ["lxml.etree.parse", "etree.parse.iter", "print", "e.tag.endswith", "int", "int", "int", "int", "gt_boxes.append", "e.get", "e.get", "e.get", "e.get", "round", "round", "round", "round", "float", "float", "float", "float"], "function", ["None"], ["def", "get_boxes", "(", "file", ")", ":", "\n", "\n", "\t", "gt_boxes", "=", "[", "]", "\n", "try", ":", "\n", "\t\t", "tree", "=", "etree", ".", "parse", "(", "file", ")", "\n", "", "except", ":", "\n", "\t\t", "print", "(", "'problems parsing ALTO file'", ")", "\n", "return", "\n", "", "if", "tree", "!=", "None", ":", "\n", "\t\t", "for", "e", "in", "tree", ".", "iter", "(", ")", ":", "\n", "\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "'TextLine'", ")", ":", "\n", "\t\t\t\t", "coords", "=", "[", "e", ".", "get", "(", "\"HPOS\"", ")", ",", "e", ".", "get", "(", "\"VPOS\"", ")", ",", "e", ".", "get", "(", "\"WIDTH\"", ")", ",", "e", ".", "get", "(", "\"HEIGHT\"", ")", "]", "\n", "x", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "0", "]", ")", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "1", "]", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "2", "]", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "3", "]", ")", ")", ")", "\n", "gt_boxes", ".", "append", "(", "[", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", "]", ")", "\n", "", "", "", "return", "gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.test_seg.evaluate": [[31, 44], ["min", "len", "max", "len", "len", "len", "abs"], "function", ["None"], ["", "def", "evaluate", "(", "algo", ",", "gt", ")", ":", "\n", "\n", "\t", "loss", "=", "len", "(", "gt", ")", "+", "max", "(", "0", ",", "len", "(", "algo", ")", "-", "len", "(", "gt", ")", ")", "\n", "middles", "=", "[", "(", "x", "[", "1", "]", "+", "x", "[", "3", "]", "/", "2.0", ")", "for", "x", "in", "algo", "]", "\n", "gt_middles", "=", "[", "(", "x", "[", "1", "]", "+", "x", "[", "3", "]", "/", "2.0", ")", "for", "x", "in", "gt", "]", "\n", "\n", "for", "gt_mid", "in", "gt_middles", ":", "\n", "\t\t", "for", "mid", "in", "middles", ":", "\n", "\t\t\t", "if", "abs", "(", "gt_mid", "-", "mid", ")", "<=", "ct", ".", "TEST_THRESH_SEG", ":", "\n", "\t\t\t\t", "loss", "-=", "1", "\n", "break", "\n", "\n", "", "", "", "return", "min", "(", "len", "(", "gt", ")", ",", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.test_seg.test_segmentation": [[46, 72], ["print", "print", "print", "open", "tqdm.tqdm", "print", "print", "json.loads", "test_seg.get_boxes", "cv2.imread", "ocr.pipe.bin.bin_otsu", "test_seg.evaluate", "str", "str", "print", "seg.apply_seg.combiseg", "str", "len"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.test_seg.get_boxes", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.test_seg.evaluate", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combiseg"], ["", "def", "test_segmentation", "(", "test_set", ")", ":", "\n", "\n", "\t", "combiseg_loss", "=", "0", "\n", "block_counter", "=", "0", "\n", "\n", "with", "open", "(", "test_set", ",", "\"r\"", ")", "as", "lines", ":", "\n", "\t\t", "lines", "=", "[", "line", "for", "line", "in", "lines", "]", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\t\t\t", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "not", "'gt'", "in", "info", "or", "not", "'image'", "in", "info", ":", "\n", "\t\t\t\t", "print", "(", "\"json line does not include required 'image' and 'gt' properties\"", ")", "\n", "continue", "\n", "", "gt_boxes", "=", "get_boxes", "(", "info", "[", "'gt'", "]", ")", "\n", "if", "gt_boxes", "==", "None", "or", "len", "(", "gt_boxes", ")", "<", "2", ":", "\n", "\t\t\t\t", "continue", "\n", "", "image", "=", "cv2", ".", "imread", "(", "info", "[", "'image'", "]", ")", "\n", "block_counter", "+=", "1", "\n", "_", ",", "inv", "=", "bin_otsu", "(", "image", ")", "\n", "combiseg_loss", "+=", "evaluate", "(", "combiseg", "(", "inv", ")", ",", "gt_boxes", ")", "\n", "\n", "", "", "print", "(", "\"line segmentation test using combiseg algorithm completed with results:\"", ")", "\n", "print", "(", "\"blocks tested:\\t\\t\"", "+", "str", "(", "block_counter", ")", ")", "\n", "print", "(", "\"total loss:\\t\\t\"", "+", "str", "(", "combiseg_loss", ")", ")", "\n", "if", "block_counter", ">", "0", ":", "\n", "\t\t", "print", "(", "\"loss/block:\\t\\t\"", "+", "str", "(", "combiseg_loss", "/", "block_counter", ")", ")", "\n", "print", "(", "\"loss explanation:\\tnumber of text lines that are not correctly matched with a bounding box, plus the number of bounding boxes that do not correctly match any text line\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_utc_now": [[6, 8], ["datetime.datetime.utcnow().strftime", "datetime.datetime.utcnow"], "function", ["None"], ["def", "get_utc_now", "(", ")", ":", "\n", "\t", "return", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ".", "strftime", "(", "'%Y-%m-%dT%H:%M:%SZ'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_size": [[9, 13], ["os.path.getsize"], "function", ["None"], ["", "def", "get_size", "(", "f", ":", "str", ")", "->", "int", ":", "\n", "\t", "''' Compute bytesize of a file\n\t'''", "\n", "return", "os", ".", "path", ".", "getsize", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_checksum": [[14, 30], ["open().read", "open"], "function", ["None"], ["", "def", "get_checksum", "(", "f", ":", "str", ",", "checksum_type", "=", "'MD5'", ")", "->", "str", ":", "\n", "\t", "''' Compute the checksum for the FileSec\n\tNote: Official checksums supported by METS: Adler-32 CRC32 HAVAL MD5 MNP SHA-1 SHA-256 SHA-384 SHA-512 TIGER WHIRLPOOL\n\t'''", "\n", "checksums", "=", "{", "\n", "'MD5'", ":", "hashlib", ".", "md5", ",", "\n", "'SHA-1'", ":", "hashlib", ".", "sha1", ",", "\n", "'SHA-256'", ":", "hashlib", ".", "sha256", ",", "\n", "'SHA-384'", ":", "hashlib", ".", "sha384", ",", "\n", "'SHA-512'", ":", "hashlib", ".", "sha512", ",", "\n", "}", "\n", "\n", "if", "checksum_type", "in", "checksums", ":", "\n", "\t\t", "return", "checksums", "[", "checksum_type", "]", "(", "open", "(", "f", ",", "'rb'", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.adjust_ark_name": [[31, 33], ["ark.replace().replace", "ark.replace"], "function", ["None"], ["", "", "def", "adjust_ark_name", "(", "ark", ")", ":", "\n", "\t", "return", "ark", ".", "replace", "(", "'/'", ",", "'-'", ")", ".", "replace", "(", "'ark:'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.update_mets_file": [[34, 73], ["lxml.etree.parse().getroot", "etree.parse().getroot.find", "etree.parse().getroot.find", "mets_utils.get_utc_now", "lxml.etree.tostring", "mets_tree.find.findall", "open", "f.write", "old_mets_path.split", "lxml.etree.parse", "alto_entry.find", "alto_entry.find.attrib[].replace", "os.path.join", "mets_utils.get_utc_now", "mets_utils.get_size", "mets_utils.get_checksum", "str"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_utc_now", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_utc_now", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_size", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.get_checksum"], ["", "def", "update_mets_file", "(", "new_package_dir", ",", "old_mets_path", ",", "parser", ")", ":", "\n", "\n", "\t", "new_mets_path", "=", "new_package_dir", "+", "'/'", "+", "old_mets_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "mets_tree", "=", "etree", ".", "parse", "(", "new_mets_path", ",", "parser", ")", ".", "getroot", "(", ")", "\n", "alto_filegrp", "=", "mets_tree", ".", "find", "(", "\".//{http://www.loc.gov/METS/}fileGrp[@ID='ALTOGRP']\"", ")", "\n", "if", "alto_filegrp", ":", "\n", "\t\t", "alto_entries", "=", "alto_filegrp", ".", "findall", "(", "'.//{http://www.loc.gov/METS/}file'", ")", "\n", "for", "alto_entry", "in", "alto_entries", ":", "\n", "\t\t\t", "checksum_type", "=", "alto_entry", ".", "attrib", "[", "'CHECKSUMTYPE'", "]", "\n", "\n", "# Get FLocat", "\n", "flocat", "=", "alto_entry", ".", "find", "(", "'.//{http://www.loc.gov/METS/}FLocat'", ")", "\n", "alto_path", "=", "flocat", ".", "attrib", "[", "'{http://www.w3.org/1999/xlink}href'", "]", ".", "replace", "(", "'file://'", ",", "''", ")", "\n", "alto_path", "=", "os", ".", "path", ".", "join", "(", "new_package_dir", ",", "alto_path", ")", "\n", "\n", "# Attribute: Created", "\n", "new_created", "=", "get_utc_now", "(", ")", "\n", "\n", "# Attribute: Size", "\n", "new_size", "=", "get_size", "(", "alto_path", ")", "\n", "\n", "# Attribute: Checksum", "\n", "new_checksum", "=", "get_checksum", "(", "alto_path", ",", "checksum_type", ")", "\n", "if", "not", "new_checksum", ":", "\n", "# problem", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Change all attributes on file element", "\n", "", "alto_entry", ".", "attrib", "[", "'CREATED'", "]", "=", "new_created", "\n", "alto_entry", ".", "attrib", "[", "'SIZE'", "]", "=", "str", "(", "new_size", ")", "\n", "alto_entry", ".", "attrib", "[", "'CHECKSUM'", "]", "=", "new_checksum", "\n", "\n", "", "", "metshdr", "=", "mets_tree", ".", "find", "(", "\".//{http://www.loc.gov/METS/}metsHdr\"", ")", "\n", "metshdr", ".", "attrib", "[", "'LASTMODDATE'", "]", "=", "get_utc_now", "(", ")", "\n", "\n", "# write new mets file", "\n", "mets_tree_str", "=", "etree", ".", "tostring", "(", "mets_tree", ",", "pretty_print", "=", "True", ",", "xml_declaration", "=", "True", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "with", "open", "(", "new_mets_path", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "f", ".", "write", "(", "mets_tree_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.mapping_problem": [[9, 11], ["print"], "function", ["None"], ["def", "mapping_problem", "(", ")", ":", "\n", "\t", "print", "(", "'could not establish mapping between alto and image files'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.get_target_blocks": [[13, 20], ["dict"], "function", ["None"], ["", "def", "get_target_blocks", "(", ")", ":", "\n", "\n", "\t", "blocks", "=", "dict", "(", ")", "\n", "for", "pattern", "in", "ct", ".", "BLOCK_TYPES_ALTO", ":", "\n", "\t\t", "for", "block_type", "in", "pattern", ":", "\n", "\t\t\t", "blocks", "[", "block_type", "]", "=", "END", "\n", "", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.relevant_block_type": [[23, 33], ["None"], "function", ["None"], ["", "def", "relevant_block_type", "(", "events_dict", ")", ":", "\n", "\t", "for", "pattern", "in", "ct", ".", "BLOCK_TYPES_ALTO", ":", "\n", "\t\t", "is_current_state", "=", "True", "\n", "for", "block_type", "in", "pattern", ":", "\n", "\t\t\t", "if", "events_dict", "[", "block_type", "]", "==", "END", ":", "\n", "\t\t\t\t", "is_current_state", "=", "False", "\n", "break", "\n", "", "", "if", "is_current_state", ":", "\n", "\t\t\t", "return", "pattern", "[", "-", "1", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.get_mets_infos": [[35, 164], ["mets_parser.get_target_blocks", "dict", "dict", "dict", "list", "list", "list", "list", "list", "lxml.etree.iterparse", "enumerate", "print", "mets_parser.mapping_problem", "print", "exit", "e.tag.endswith", "len", "len", "len", "len", "len", "len", "list.index", "ocr.pipe.block.Block", "int", "e.get", "e.tag.endswith", "mets_parser.mapping_problem", "dict", "e.get", "e.tag.endswith", "e.get", "e.tag.endswith", "e.get", "e.tag.endswith", "e.get", "e.tag.endswith", "e.tag.endswith", "e.get", "e.get", "e.tag.endswith", "mets_parser.relevant_block_type", "e.tag.endswith", "e.getparent", "e.get", "e.get", "e.get", "e.getparent.tag.endswith", "e.getparent.get", "e.tag.endswith", "e.get", "list.append", "list.append", "list.append", "e.get.split", "list.append", "list.append"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.get_target_blocks", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.mapping_problem", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.mapping_problem", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.relevant_block_type"], ["", "def", "get_mets_infos", "(", "mets_path", ")", ":", "\n", "\n", "\t", "target_blocks_events", "=", "get_target_blocks", "(", ")", "\n", "\n", "# those 4 values are returned", "\n", "block_data", "=", "dict", "(", ")", "\n", "ark", "=", "None", "\n", "issue_date", "=", "None", "\n", "n_blocks", "=", "0", "\n", "\n", "alto_file_paths", "=", "dict", "(", ")", "\n", "image_file_paths", "=", "dict", "(", ")", "\n", "target_altos", "=", "list", "(", ")", "\n", "target_block_ids", "=", "list", "(", ")", "\n", "target_block_types", "=", "list", "(", ")", "\n", "altos_ordered", "=", "list", "(", ")", "\n", "images_ordered", "=", "list", "(", ")", "\n", "\n", "struct_map_event", "=", "END", "\n", "img_grp_event", "=", "END", "\n", "alto_grp_event", "=", "END", "\n", "date_issued_event", "=", "END", "\n", "\n", "tree", "=", "None", "\n", "try", ":", "\n", "\t\t", "tree", "=", "etree", ".", "iterparse", "(", "mets_path", ",", "events", "=", "(", "START", ",", "END", ")", ")", "\n", "", "except", ":", "\n", "\t\t", "print", "(", "'could not parse mets file at '", "+", "mets_path", ")", "\n", "\n", "", "if", "tree", "!=", "None", ":", "\n", "\t\t", "for", "event", ",", "e", "in", "tree", ":", "\n", "\n", "# toggle events", "\n", "\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "'structMap'", ")", "and", "e", ".", "get", "(", "'LABEL'", ")", "==", "'Physical Structure'", ":", "\n", "\t\t\t\t", "struct_map_event", "=", "event", "\n", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'fileGrp'", ")", "and", "e", ".", "get", "(", "'ID'", ")", "==", "'ALTOGRP'", ":", "\n", "\t\t\t\t", "alto_grp_event", "=", "event", "\n", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'fileGrp'", ")", "and", "e", ".", "get", "(", "'ID'", ")", "==", "'IMGGRP'", ":", "\n", "\t\t\t\t", "img_grp_event", "=", "event", "\n", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'dmdSec'", ")", "and", "e", ".", "get", "(", "'ID'", ")", "==", "'MODSMD_PRINT'", ":", "\n", "\t\t\t\t", "date_issued_event", "=", "event", "\n", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'div'", ")", "and", "e", ".", "get", "(", "'TYPE'", ")", "in", "target_blocks_events", ":", "\n", "\t\t\t\t", "target_blocks_events", "[", "e", ".", "get", "(", "'TYPE'", ")", "]", "=", "event", "\n", "\n", "", "elif", "event", "==", "START", ":", "\n", "\n", "# get ark", "\n", "\t\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "'mets'", ")", ":", "\n", "\t\t\t\t\t", "objid", "=", "e", ".", "get", "(", "'OBJID'", ")", "\n", "if", "objid", "!=", "None", ":", "\n", "\t\t\t\t\t\t", "ark", "=", "'ark:'", "+", "objid", ".", "split", "(", "\"ark:\"", ",", "1", ")", "[", "1", "]", "\n", "\n", "# get image and alto file paths", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'FLocat'", ")", ":", "\n", "\t\t\t\t\t", "parent", "=", "e", ".", "getparent", "(", ")", "\n", "file_path", "=", "e", ".", "get", "(", "'{http://www.w3.org/1999/xlink}href'", ")", "\n", "if", "parent", "!=", "None", "and", "parent", ".", "tag", ".", "endswith", "(", "'file'", ")", ":", "\n", "\t\t\t\t\t\t", "file_id", "=", "parent", ".", "get", "(", "\"ID\"", ")", "\n", "if", "alto_grp_event", "==", "START", ":", "\n", "\t\t\t\t\t\t\t", "alto_file_paths", "[", "file_id", "]", "=", "file_path", "\n", "", "elif", "img_grp_event", "==", "START", ":", "\n", "\t\t\t\t\t\t\t", "image_file_paths", "[", "file_id", "]", "=", "file_path", "\n", "\n", "# get alto/image mapping", "\n", "", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'area'", ")", "and", "struct_map_event", "==", "START", ":", "\n", "\t\t\t\t\t", "file_id", "=", "e", ".", "get", "(", "\"FILEID\"", ")", "\n", "if", "file_id", "!=", "None", ":", "\n", "\t\t\t\t\t\t", "if", "file_id", "in", "alto_file_paths", ":", "\n", "\t\t\t\t\t\t\t", "altos_ordered", ".", "append", "(", "file_id", ")", "\n", "", "if", "file_id", "in", "image_file_paths", ":", "\n", "\t\t\t\t\t\t\t", "images_ordered", ".", "append", "(", "file_id", ")", "\n", "\n", "# append a relevant block", "\n", "", "", "", "if", "e", ".", "tag", ".", "endswith", "(", "'area'", ")", ":", "\n", "\t\t\t\t\t", "is_relevant", "=", "relevant_block_type", "(", "target_blocks_events", ")", "\n", "if", "is_relevant", "!=", "None", ":", "\n", "\t\t\t\t\t\t", "file_id", "=", "e", ".", "get", "(", "\"FILEID\"", ")", "\n", "block_id", "=", "e", ".", "get", "(", "\"BEGIN\"", ")", "\n", "if", "file_id", "!=", "None", "and", "block_id", "!=", "None", ":", "\n", "\t\t\t\t\t\t\t", "target_altos", ".", "append", "(", "file_id", ")", "\n", "target_block_ids", ".", "append", "(", "block_id", ")", "\n", "target_block_types", ".", "append", "(", "is_relevant", ")", "\n", "n_blocks", "+=", "1", "\n", "\n", "# date", "\n", "", "", "", "if", "e", ".", "tag", ".", "endswith", "(", "'dateIssued'", ")", "and", "date_issued_event", "==", "START", ":", "\n", "\t\t\t\t\t", "issue_date", "=", "e", ".", "text", "\n", "\n", "# check whether we found the same amount of alto and image files", "\n", "", "", "", "if", "len", "(", "altos_ordered", ")", "!=", "len", "(", "images_ordered", ")", "or", "len", "(", "images_ordered", ")", "!=", "len", "(", "image_file_paths", ")", "or", "len", "(", "image_file_paths", ")", "!=", "len", "(", "alto_file_paths", ")", ":", "\n", "\t\t\t", "mapping_problem", "(", ")", "\n", "return", "(", "None", ",", "None", ",", "0", ")", "\n", "\n", "# check whether year was determined", "\n", "", "if", "issue_date", "==", "None", ":", "\n", "\t\t\t", "print", "(", "\"couldn't extract issue year from mets file\"", ")", "\n", "exit", "(", ")", "\n", "\n", "# fill block_data", "\n", "", "for", "i", ",", "block_id", "in", "enumerate", "(", "target_block_ids", ")", ":", "\n", "\t\t\t", "alto_id", "=", "target_altos", "[", "i", "]", "\n", "try", ":", "\n", "\t\t\t\t", "index_alto", "=", "altos_ordered", ".", "index", "(", "alto_id", ")", "\n", "image_id", "=", "images_ordered", "[", "index_alto", "]", "\n", "alto_file", "=", "alto_file_paths", "[", "alto_id", "]", "\n", "image_file", "=", "image_file_paths", "[", "image_id", "]", "\n", "block_type", "=", "target_block_types", "[", "i", "]", "\n", "", "except", ":", "\n", "\t\t\t\t", "mapping_problem", "(", ")", "\n", "return", "(", "None", ",", "None", ",", "0", ")", "\n", "\n", "", "if", "not", "alto_id", "in", "block_data", ":", "\n", "\t\t\t\t", "block_data", "[", "alto_id", "]", "=", "{", "\n", "'image'", ":", "image_file", ",", "\n", "'alto'", ":", "alto_file", ",", "\n", "'blocks'", ":", "dict", "(", ")", "\n", "}", "\n", "\n", "", "if", "not", "block_id", "in", "block_data", "[", "alto_id", "]", "[", "'blocks'", "]", ":", "\n", "\n", "\t\t\t\t", "b", "=", "Block", "(", "block_id", ")", "\n", "b", ".", "block_type", "=", "block_type", "\n", "b", ".", "alto_id", "=", "alto_id", "\n", "b", ".", "ark", "=", "ark", "\n", "b", ".", "year", "=", "int", "(", "issue_date", "[", ":", "4", "]", ")", "\n", "\n", "block_data", "[", "alto_id", "]", "[", "'blocks'", "]", "[", "block_id", "]", "=", "b", "\n", "\n", "", "", "", "return", "(", "block_data", ",", "ark", ",", "n_blocks", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.incomplete_mets": [[18, 20], ["print"], "function", ["None"], ["def", "incomplete_mets", "(", "mets_path", ")", ":", "\n", "\t", "print", "(", "'mets not processed entirely: '", "+", "mets_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.add_to_json": [[22, 27], ["os.path.exists", "os.makedirs", "open", "output.write", "json.dumps"], "function", ["None"], ["", "def", "add_to_json", "(", "blocks", ",", "path", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "path", ")", "\n", "", "with", "open", "(", "path", "+", "'data.jsonl'", ",", "\"a\"", ")", "as", "output", ":", "\n", "\t\t", "output", ".", "write", "(", "json", ".", "dumps", "(", "blocks", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.process_package": [[29, 184], ["int", "os.path.dirname", "shutil.copytree", "lxml.etree.XMLParser", "enhance.mets_parser.get_mets_infos", "dict", "list", "tqdm.tqdm", "enhance.mets_utils.update_mets_file", "print", "round", "print", "alto_improve.incomplete_mets", "enhance.alto_parser.get_block_data", "enhance.image_cropper.get_images", "alto_tree.iter", "lxml.etree.indent", "lxml.etree.tostring", "int", "os.path.dirname.split", "print", "alto_improve.incomplete_mets", "alto_improve.incomplete_mets", "[].replace", "[].replace", "alto_improve.incomplete_mets", "len", "ocr.pipe.pipe.ocr", "new_blocks_dir.split", "len", "json_dict[].append", "alto_tree.findall", "os.path.dirname.split", "open", "f.write", "round", "time.time", "print", "json_dict[].append", "alto_improve.incomplete_mets", "file_name.replace", "os.path.exists", "os.makedirs", "open", "f.write", "e.tag.endswith", "e.tag.endswith", "alto_path.split", "str", "print", "enhance.mets_utils.adjust_ark_name", "b.getchildren", "lxml.etree.fromstring", "time.time", "enhance.mets_utils.adjust_ark_name", "b.get", "child.getparent().remove", "e.get", "str", "print", "e.append", "print", "enhance.mets_utils.adjust_ark_name", "child.getparent", "str", "b.get", "e.get", "e.get"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_parser.get_mets_infos", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.update_mets_file", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.incomplete_mets", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_parser.get_block_data", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.image_cropper.get_images", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.incomplete_mets", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.incomplete_mets", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.incomplete_mets", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pipe.ocr", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.incomplete_mets", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.adjust_ark_name", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.adjust_ark_name", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.mets_utils.adjust_ark_name"], ["", "", "def", "process_package", "(", "old_mets_path", ",", "models", ",", "output_path", ",", "features", ",", "required_epr", ")", ":", "\n", "\n", "# start clock", "\n", "\t", "before", "=", "int", "(", "round", "(", "time", ".", "time", "(", ")", "*", "1000", ")", ")", "\n", "\n", "# copy package to new destination", "\n", "old_package_dir", "=", "os", ".", "path", ".", "dirname", "(", "old_mets_path", ")", "\n", "new_package_dir", "=", "output_path", "+", "\"/new-packages/\"", "+", "old_package_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "new_blocks_dir", "=", "output_path", "+", "\"/new-blocks/\"", "\n", "copytree", "(", "old_package_dir", ",", "new_package_dir", ")", "\n", "\n", "# xml parser", "\n", "parser", "=", "etree", ".", "XMLParser", "(", "remove_blank_text", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "\n", "\n", "# get blocks", "\n", "blocks_info", ",", "ark", ",", "n_blocks", "=", "get_mets_infos", "(", "old_mets_path", ")", "\n", "processed_blocks", "=", "0", "\n", "if", "ark", "==", "None", ":", "\n", "\t\t", "print", "(", "\"couldn't identify ark in \"", "+", "old_mets_path", ")", "\n", "incomplete_mets", "(", "old_mets_path", ")", "\n", "return", "\n", "", "elif", "n_blocks", "==", "0", ":", "\n", "\t\t", "print", "(", "\"found 0 blocks for requested types in \"", "+", "old_mets_path", ")", "\n", "incomplete_mets", "(", "old_mets_path", ")", "\n", "return", "\n", "\n", "# create json dict for package", "\n", "", "json_dict", "=", "dict", "(", ")", "\n", "json_dict", "[", "ark", "]", "=", "list", "(", ")", "\n", "\n", "# loop over all alto files that contain at least 1 block", "\n", "for", "alto_id", "in", "tqdm", "(", "blocks_info", ")", ":", "\n", "\n", "# working with blocks for this specific alto", "\n", "\t\t", "blocks_stuff", "=", "blocks_info", "[", "alto_id", "]", "[", "'blocks'", "]", "\n", "if", "blocks_stuff", "==", "None", ":", "\n", "\t\t\t", "incomplete_mets", "(", "old_mets_path", ")", "\n", "return", "\n", "\n", "# get coordinates for every blocks and alto xml tree", "\n", "", "alto_path", "=", "old_package_dir", "+", "blocks_info", "[", "alto_id", "]", "[", "'alto'", "]", ".", "replace", "(", "\"file://.\"", ",", "\"\"", ")", "\n", "blocks_stuff", ",", "alto_tree", "=", "get_block_data", "(", "alto_path", ",", "blocks_stuff", ",", "features", ",", "required_epr", ",", "models", ")", "\n", "\n", "# for every alto image: crop the images for every block", "\n", "image_path", "=", "old_package_dir", "+", "blocks_info", "[", "alto_id", "]", "[", "'image'", "]", ".", "replace", "(", "\"file://.\"", ",", "\"\"", ")", "\n", "blocks_stuff", "=", "get_images", "(", "image_path", ",", "blocks_stuff", ")", "\n", "if", "blocks_stuff", "==", "None", ":", "\n", "\t\t\t", "incomplete_mets", "(", "old_mets_path", ")", "\n", "return", "\n", "\n", "# for every block", "\n", "", "for", "block_id", "in", "blocks_stuff", ":", "\n", "\n", "\t\t\t", "ark", "=", "blocks_stuff", "[", "block_id", "]", ".", "ark", "\n", "b_type", "=", "blocks_stuff", "[", "block_id", "]", ".", "block_type", "\n", "composed", "=", "blocks_stuff", "[", "block_id", "]", ".", "composed", "\n", "rotated", "=", "blocks_stuff", "[", "block_id", "]", ".", "rotated", "\n", "text", "=", "blocks_stuff", "[", "block_id", "]", ".", "ocr_ori", "\n", "lang", "=", "blocks_stuff", "[", "block_id", "]", ".", "lang_ori", "\n", "enhance", "=", "blocks_stuff", "[", "block_id", "]", ".", "enhance", "\n", "n_chars_ori", "=", "len", "(", "text", ")", "\n", "\n", "# check conditions for continuing with this block", "\n", "if", "rotated", ":", "\n", "\t\t\t\t", "print", "(", "'ignoring rotated text block: '", "+", "block_id", "+", "' - alto: '", "+", "alto_id", "+", "' - ark: '", "+", "ark", "+", "' - mets: '", "+", "old_mets_path", ")", "\n", "continue", "\n", "", "elif", "text", "==", "\"\"", ":", "\n", "\t\t\t\t", "print", "(", "'ignoring empty text block: '", "+", "block_id", "+", "' - alto: '", "+", "alto_id", "+", "' - ark: '", "+", "ark", "+", "' - mets: '", "+", "old_mets_path", ")", "\n", "continue", "\n", "", "elif", "required_epr", ">", "-", "1", ":", "\n", "\t\t\t\t", "if", "lang", "not", "in", "ct", ".", "SUPPORTED_LANGS", ":", "\n", "\t\t\t\t\t", "print", "(", "'ignoring '", "+", "block_id", "+", "' with unsupported lang ('", "+", "lang", "+", "') belonging to '", "+", "old_mets_path", ")", "\n", "continue", "\n", "", "elif", "lang", "not", "in", "models", ".", "epr", "[", "'trigrams'", "]", ":", "\n", "\t\t\t\t\t", "print", "(", "'ignoring '", "+", "block_id", "+", "' since lang ('", "+", "lang", "+", "') is not supported by epr model'", ")", "\n", "continue", "\n", "\n", "# create block dict for data.jsonl", "\n", "", "", "block_dict", "=", "{", "\n", "'blockId'", ":", "block_id", ",", "\n", "'altoId'", ":", "alto_id", ",", "\n", "'epr'", ":", "enhance", ",", "\n", "'processed'", ":", "False", ",", "\n", "'altoPathOri'", ":", "\"./\"", "+", "alto_path", ",", "\n", "'blockType'", ":", "b_type", ",", "\n", "'composedBlock'", ":", "composed", ",", "\n", "'charsOri'", ":", "n_chars_ori", "\n", "}", "\n", "\n", "# block is not prcessed because there is no epr model or predicted enhancement is too low", "\n", "if", "enhance", "!=", "None", "and", "enhance", "<", "required_epr", ":", "\n", "\t\t\t\t", "json_dict", "[", "ark", "]", ".", "append", "(", "block_dict", ")", "\n", "continue", "\n", "\n", "# predicted enhancement is high enough: run ocr", "\n", "", "block", "=", "ocr", "(", "blocks_stuff", "[", "block_id", "]", ",", "models", ",", "alto", "=", "True", ",", "addOffset", "=", "True", ")", "\n", "if", "block", ".", "ocr_alto", "==", "None", "or", "blocks_stuff", "[", "block_id", "]", ".", "ocr_alto", "==", "None", ":", "\n", "\t\t\t\t", "incomplete_mets", "(", "old_mets_path", ")", "\n", "return", "\n", "\n", "# write new alto file to new blocks folder", "\n", "", "folder_path", "=", "new_blocks_dir", "+", "adjust_ark_name", "(", "ark", ")", "+", "'/'", "\n", "file_name", "=", "adjust_ark_name", "(", "ark", ")", "+", "'-'", "+", "alto_id", "+", "'-'", "+", "block_id", "+", "'.xml'", "\n", "file_path", "=", "folder_path", "+", "file_name", "\n", "if", "composed", ":", "\n", "\t\t\t\t", "file_name", ".", "replace", "(", "'.xml'", ",", "'-CB.xml'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "block", ".", "ocr_alto", ")", "\n", "\n", "# adjust dict for data.jsonl", "\n", "", "block_dict", "[", "'processed'", "]", "=", "True", "\n", "block_dict", "[", "'font'", "]", "=", "block", ".", "font", "\n", "splits", "=", "new_blocks_dir", ".", "split", "(", "'/'", ")", "\n", "alto_path_new", "=", "'./'", "+", "splits", "[", "-", "3", "]", "+", "'/'", "+", "splits", "[", "-", "2", "]", "+", "'/'", "+", "splits", "[", "-", "1", "]", "+", "adjust_ark_name", "(", "ark", ")", "+", "'/'", "+", "file_name", "\n", "block_dict", "[", "'altoPathNew'", "]", "=", "alto_path_new", "\n", "block_dict", "[", "'langOri'", "]", "=", "lang", "\n", "block_dict", "[", "'charsNew'", "]", "=", "len", "(", "block", ".", "ocr", ")", "\n", "json_dict", "[", "ark", "]", ".", "append", "(", "block_dict", ")", "\n", "\n", "# increment counter", "\n", "processed_blocks", "+=", "1", "\n", "\n", "# removing old text lines of alto file", "\n", "", "for", "b_type", "in", "[", "'TextBlock'", ",", "'ComposedBlock'", "]", ":", "\n", "\t\t\t", "for", "b", "in", "alto_tree", ".", "findall", "(", "\".//{http://www.loc.gov/standards/alto/ns-v3#}\"", "+", "b_type", ")", ":", "\n", "\t\t\t\t", "if", "b", ".", "get", "(", "\"ID\"", ")", "in", "blocks_stuff", "and", "blocks_stuff", "[", "b", ".", "get", "(", "\"ID\"", ")", "]", ".", "ocr_alto", "!=", "None", ":", "\n", "\t\t\t\t\t", "for", "child", "in", "b", ".", "getchildren", "(", ")", ":", "\n", "\t\t\t\t\t\t", "child", ".", "getparent", "(", ")", ".", "remove", "(", "child", ")", "\n", "\n", "# adding new text lines to alto file", "\n", "", "", "", "", "for", "e", "in", "alto_tree", ".", "iter", "(", ")", ":", "\n", "\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "'TextBlock'", ")", "or", "e", ".", "tag", ".", "endswith", "(", "'ComposedBlock'", ")", ":", "\n", "\t\t\t\t", "if", "e", ".", "get", "(", "\"ID\"", ")", "in", "blocks_stuff", "and", "blocks_stuff", "[", "e", ".", "get", "(", "\"ID\"", ")", "]", ".", "ocr_alto", "!=", "None", ":", "\n", "\t\t\t\t\t", "for", "e2", "in", "etree", ".", "fromstring", "(", "blocks_stuff", "[", "e", ".", "get", "(", "\"ID\"", ")", "]", ".", "ocr_alto", ")", ":", "\n", "\t\t\t\t\t\t", "e2", ".", "tail", "=", "\"\\n\"", "\n", "if", "e2", ".", "tag", "==", "'TextLine'", ":", "\n", "\t\t\t\t\t\t\t", "e", ".", "append", "(", "e2", ")", "\n", "", "", "", "", "", "etree", ".", "indent", "(", "alto_tree", ",", "space", "=", "\"\t\"", ")", "\n", "\n", "# write new alto file", "\n", "alto_str", "=", "etree", ".", "tostring", "(", "alto_tree", ",", "pretty_print", "=", "True", ",", "xml_declaration", "=", "True", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "mets_dir_small", "=", "old_package_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "p", "=", "new_package_dir", "+", "alto_path", ".", "split", "(", "mets_dir_small", ")", "[", "-", "1", "]", "\n", "with", "open", "(", "p", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t\t", "f", ".", "write", "(", "alto_str", ")", "\n", "\n", "# adjust mets file", "\n", "", "", "update_mets_file", "(", "new_package_dir", ",", "old_mets_path", ",", "parser", ")", "\n", "\n", "time_needed", "=", "int", "(", "round", "(", "time", ".", "time", "(", ")", "*", "1000", ")", ")", "-", "before", "\n", "print", "(", "ark", "+", "' processed successfully in '", "+", "str", "(", "time_needed", ")", "+", "' ms (new ocr for '", "+", "str", "(", "processed_blocks", ")", "+", "'/'", "+", "str", "(", "n_blocks", ")", "+", "' target blocks)'", ")", "\n", "\n", "return", "json_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.improve_alto": [[186, 218], ["datetime.datetime.now().strftime", "list", "os.walk", "print", "ocr.pipe.pipe.Models", "ocr.pipe.pipe.Models.load_final_models", "print", "str", "print", "epr.features_epr.Features", "mets_path.strip.strip", "alto_improve.process_package", "datetime.datetime.now", "f.endswith", "alto_improve.add_to_json", "list.append"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_final_models", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.process_package", "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_improve.add_to_json"], ["", "def", "improve_alto", "(", "mets_directory", ",", "required_epr", ")", ":", "\n", "\n", "# save start date", "\n", "\t", "date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "path", "=", "ct", ".", "OCR_OUTPUT_PATH", "+", "str", "(", "date", ")", "\n", "\n", "# create mets paths list", "\n", "mets_paths", "=", "list", "(", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "mets_directory", ")", ":", "\n", "\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t", "if", "f", ".", "endswith", "(", "'-mets.xml'", ")", ":", "\n", "\t\t\t\t", "mets_paths", ".", "append", "(", "root", "+", "'/'", "+", "f", ")", "\n", "", "", "", "print", "(", "'identified all METS files within directory'", ")", "\n", "\n", "# load models", "\n", "models", "=", "Models", "(", ")", "\n", "models", ".", "load_final_models", "(", "True", ")", "\n", "if", "models", ".", "epr", "==", "None", "and", "required_epr", ">", "-", "1", ":", "\n", "\t\t", "required_epr", "=", "-", "1", "\n", "print", "(", "'no enhancement prediction (epr) model found in models/final/ -> running ocr for all target blocks'", ")", "\n", "\n", "", "features", "=", "None", "\n", "if", "required_epr", ">", "-", "1", ":", "\n", "\t\t", "features", "=", "Features", "(", ")", "\n", "\n", "", "for", "mets_path", "in", "mets_paths", ":", "\n", "\t\t", "mets_path", "=", "mets_path", ".", "strip", "(", ")", "\n", "result", "=", "process_package", "(", "mets_path", ",", "models", ",", "path", ",", "features", ",", "required_epr", ")", "\n", "if", "result", "!=", "None", ":", "\n", "\t\t\t", "add_to_json", "(", "result", ",", "path", "+", "\"/new-blocks/\"", ")", "\n", "\n", "", "", "print", "(", "\"\\nenhance completed - new METS/ALTO packages and blocks are located in \"", "+", "path", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.alto_parser.get_block_data": [[8, 84], ["lxml.etree.XMLParser", "lxml.etree.parse().getroot", "lxml.etree.indent", "etree.parse().getroot.iter", "len", "print", "print", "features.get_tokens", "features.get_ngrams", "lxml.etree.parse", "e.tag.endswith", "e.tag.endswith", "e.get", "e.tag.endswith", "features.compute_features_ori", "features.get_ngram_score", "numpy.array", "epr.apply_epr.predict", "int", "int", "int", "int", "e.get", "e.tag.endswith", "e.get", "e.get", "e.get", "e.get", "round", "round", "round", "round", "int", "int", "e.tag.endswith", "features.scale_year", "int", "print", "print", "float", "float", "float", "float", "e.get", "isinstance", "print"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_tokens", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngrams", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.compute_features_ori", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.get_ngram_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.apply_epr.predict", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.features_epr.Features.scale_year"], ["def", "get_block_data", "(", "alto_path", ",", "blocks_dict", ",", "features", ",", "required_epr", ",", "models", ")", ":", "\n", "\n", "\t", "correct_block", "=", "False", "\n", "counter", "=", "0", "\n", "block_id", "=", "None", "\n", "tree", "=", "None", "\n", "\n", "try", ":", "\n", "\t\t", "parser", "=", "etree", ".", "XMLParser", "(", "remove_blank_text", "=", "True", ",", "encoding", "=", "'utf-8'", ")", "\n", "tree", "=", "etree", ".", "parse", "(", "alto_path", ",", "parser", ")", ".", "getroot", "(", ")", "\n", "", "except", ":", "\n", "\t\t", "print", "(", "'could not parse ALTO file at '", "+", "alto_path", ")", "\n", "", "if", "tree", "!=", "None", ":", "\n", "\t\t", "etree", ".", "indent", "(", "tree", ",", "space", "=", "\"\t\"", ")", "\n", "for", "e", "in", "tree", ".", "iter", "(", ")", ":", "\n", "\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "'TextBlock'", ")", "or", "e", ".", "tag", ".", "endswith", "(", "'ComposedBlock'", ")", ":", "\n", "\t\t\t\t", "block_id", "=", "e", ".", "get", "(", "\"ID\"", ")", "\n", "if", "block_id", "!=", "None", "and", "block_id", "in", "blocks_dict", ":", "\n", "\t\t\t\t\t", "blocks_dict", "[", "block_id", "]", ".", "ocr_ori", "=", "\"\"", "\n", "correct_block", "=", "True", "\n", "coords", "=", "[", "e", ".", "get", "(", "\"HPOS\"", ")", ",", "e", ".", "get", "(", "\"VPOS\"", ")", ",", "e", ".", "get", "(", "\"WIDTH\"", ")", ",", "e", ".", "get", "(", "\"HEIGHT\"", ")", "]", "\n", "for", "c", "in", "coords", ":", "\n", "\t\t\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t\t\t", "val", "=", "int", "(", "c", ")", "\n", "if", "val", "<", "0", ":", "\n", "\t\t\t\t\t\t\t\t", "print", "(", "'negative integer coordinate detected in '", "+", "alto_path", ")", "\n", "return", "None", "\n", "", "", "except", "ValueError", ":", "\n", "\t\t\t\t\t\t\t", "print", "(", "'non integer coordinate detected in '", "+", "alto_path", ")", "\n", "return", "None", "\n", "", "", "x", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "0", "]", ")", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "1", "]", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "2", "]", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "coords", "[", "3", "]", ")", ")", ")", "\n", "coordinates", "=", "(", "x", ",", "y", ",", "w", ",", "h", ")", "\n", "blocks_dict", "[", "block_id", "]", ".", "coordinates", "=", "coordinates", "\n", "blocks_dict", "[", "block_id", "]", ".", "offset_alto", "=", "(", "int", "(", "coords", "[", "0", "]", ")", ",", "int", "(", "coords", "[", "1", "]", ")", ")", "\n", "if", "e", ".", "tag", "==", "'ComposedBlock'", ":", "\n", "\t\t\t\t\t\t", "blocks_dict", "[", "block_id", "]", ".", "composed", "=", "True", "\n", "", "rotated", "=", "e", ".", "get", "(", "'ROTATION'", ")", "\n", "if", "rotated", "!=", "None", ":", "\n", "\t\t\t\t\t\t", "blocks_dict", "[", "block_id", "]", ".", "rotated", "=", "True", "\n", "", "counter", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "correct_block", "=", "False", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'TextLine'", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "if", "blocks_dict", "[", "block_id", "]", ".", "ocr_ori", "!=", "\"\"", ":", "\n", "\t\t\t\t\t\t", "blocks_dict", "[", "block_id", "]", ".", "ocr_ori", "+=", "'\\n'", "\n", "", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'SP'", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t\t", "blocks_dict", "[", "block_id", "]", ".", "ocr_ori", "+=", "' '", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'String'", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "new_text", "=", "e", ".", "get", "(", "'CONTENT'", ")", "\n", "if", "isinstance", "(", "new_text", ",", "str", ")", ":", "\n", "\t\t\t\t\t\t", "blocks_dict", "[", "block_id", "]", ".", "ocr_ori", "+=", "new_text", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'CONTENT missing in '", "+", "alto_path", ")", "\n", "", "", "", "", "", "if", "counter", "!=", "len", "(", "blocks_dict", ")", ":", "\n", "\t\t", "print", "(", "'could not find all blocks in '", "+", "alto_path", ")", "\n", "return", "(", "None", ",", "None", ")", "\n", "\n", "", "if", "required_epr", ">", "-", "1", "and", "features", "!=", "None", ":", "\n", "\t\t", "for", "block_id", "in", "blocks_dict", ":", "\n", "\t\t\t", "block", "=", "blocks_dict", "[", "block_id", "]", "\n", "block", ".", "tokens_ori", "=", "features", ".", "get_tokens", "(", "block", ".", "ocr_ori", ")", "\n", "lang_ori", ",", "trigrams_ori", "=", "features", ".", "get_ngrams", "(", "block", ".", "tokens_ori", ",", "block", ".", "ocr_ori", ")", "\n", "block", ".", "lang_ori", "=", "lang_ori", "\n", "if", "block", ".", "lang_ori", "in", "ct", ".", "SUPPORTED_LANGS", "and", "block", ".", "lang_ori", "in", "models", ".", "epr", "[", "'trigrams'", "]", ":", "\n", "\t\t\t\t", "block", "=", "features", ".", "compute_features_ori", "(", "block", ")", "\n", "n_gram_score", "=", "features", ".", "get_ngram_score", "(", "trigrams_ori", ",", "models", ".", "epr", "[", "'trigrams'", "]", "[", "block", ".", "lang_ori", "]", ")", "\n", "x", "=", "np", ".", "array", "(", "[", "block", ".", "dict_ori", ",", "n_gram_score", ",", "block", ".", "garbage_ori", ",", "features", ".", "scale_year", "(", "block", ".", "year", ")", "]", ")", "\n", "block", ".", "enhance", "=", "predict", "(", "models", ".", "epr", ",", "x", ",", "models", ".", "epr", "[", "'k'", "]", ")", "\n", "\n", "", "", "", "return", "(", "blocks_dict", ",", "tree", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.enhance.image_cropper.get_images": [[5, 24], ["cv2.imread", "print", "print", "len", "len"], "function", ["None"], ["def", "get_images", "(", "image_path", ",", "blocks_stuff", ")", ":", "\n", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "if", "not", "image", "is", "None", ":", "\n", "        ", "for", "block_id", "in", "blocks_stuff", ":", "\n", "            ", "coords", "=", "blocks_stuff", "[", "block_id", "]", ".", "coordinates", "\n", "x", "=", "coords", "[", "0", "]", "\n", "y", "=", "coords", "[", "1", "]", "\n", "w", "=", "coords", "[", "2", "]", "\n", "h", "=", "coords", "[", "3", "]", "\n", "if", "x", "+", "w", ">", "(", "len", "(", "image", "[", "0", "]", ")", "+", "ct", ".", "IMG_CROP_TOLERANCE", ")", "or", "y", "+", "h", ">", "(", "len", "(", "image", ")", "+", "ct", ".", "IMG_CROP_TOLERANCE", ")", ":", "\n", "                ", "print", "(", "'image coordinates for block '", "+", "block_id", "+", "' are out of bounds in image '", "+", "image_path", ")", "\n", "return", "\n", "", "cropped_image", "=", "image", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "blocks_stuff", "[", "block_id", "]", ".", "image", "=", "cropped_image", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"couldn't read image at \"", "+", "image_path", ")", "\n", "return", "\n", "", "return", "blocks_stuff", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.__init__": [[12, 16], ["dict"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "ocr", "=", "dict", "(", ")", "\n", "self", ".", "fcr", "=", "None", "\n", "self", ".", "epr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_final_models": [[18, 38], ["os.walk", "models.Models.missing_final_models", "f.endswith", "models.Models.missing_final_models", "models.Models.load_tensorflow_model", "print", "f.endswith", "models.Models.load_json_model", "print", "f.endswith", "models.Models.load_kraken_model", "print"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.missing_final_models", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.missing_final_models", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_tensorflow_model", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_json_model", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_kraken_model"], ["", "def", "load_final_models", "(", "self", ",", "require_enhance", ")", ":", "\n", "\t\t", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ct", ".", "MODELS_PATH", "+", "'final/'", ")", ":", "\n", "\t\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t\t", "if", "f", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "fcr", "=", "self", ".", "load_tensorflow_model", "(", "root", "+", "'/'", "+", "f", ")", "\n", "print", "(", "\"loaded \"", "+", "f", ")", "\n", "continue", "\n", "", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t\t\t\t", "if", "font", "in", "f", "and", "f", ".", "endswith", "(", "'.mlmodel'", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "ocr", "[", "font", "]", "=", "self", ".", "load_kraken_model", "(", "root", "+", "'/'", "+", "f", ")", "\n", "print", "(", "\"loaded \"", "+", "f", ")", "\n", "break", "\n", "", "", "if", "f", ".", "endswith", "(", "'.jsonl'", ")", "and", "require_enhance", ":", "\n", "\t\t\t\t\t", "self", ".", "epr", "=", "self", ".", "load_json_model", "(", "root", "+", "'/'", "+", "f", ")", "\n", "print", "(", "\"loaded \"", "+", "f", ")", "\n", "", "", "", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t\t", "if", "not", "font", "in", "self", ".", "ocr", ":", "\n", "\t\t\t\t", "self", ".", "missing_final_models", "(", ")", "\n", "", "", "if", "self", ".", "fcr", "==", "None", ":", "\n", "\t\t\t", "self", ".", "missing_final_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.missing_final_models": [[40, 43], ["print", "exit"], "methods", ["None"], ["", "", "def", "missing_final_models", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "\"not all required models found in \"", "+", "ct", ".", "MODELS_PATH", "+", "\"final/, please consult \"", "+", "ct", ".", "MODELS_PATH", "+", "\"final/info.txt\"", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_fcr_model": [[45, 54], ["os.walk", "models.Models.model_not_loaded", "models.Models.load_tensorflow_model"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.model_not_loaded", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_tensorflow_model"], ["", "def", "load_fcr_model", "(", "self", ",", "name", ")", ":", "\n", "\t\t", "loaded", "=", "False", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ct", ".", "MODELS_PATH", ")", ":", "\n", "\t\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t\t", "if", "f", "==", "name", "or", "f", "==", "name", "+", "'.h5'", ":", "\n", "\t\t\t\t\t", "self", ".", "fcr", "=", "self", ".", "load_tensorflow_model", "(", "root", "+", "'/'", "+", "f", ")", "\n", "loaded", "=", "True", "\n", "", "", "", "if", "not", "loaded", ":", "\n", "\t\t\t", "self", ".", "model_not_loaded", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_kraken_model": [[56, 62], ["kraken.lib.models.load_any"], "methods", ["None"], ["", "", "def", "load_kraken_model", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "model", "=", "load_any", "(", "\n", "path", ",", "\n", "train", "=", "False", ",", "\n", "device", "=", "ct", ".", "DEVICE", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_tensorflow_model": [[64, 66], ["tensorflow.keras.models.load_model"], "methods", ["None"], ["", "def", "load_tensorflow_model", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "return", "keras", ".", "models", ".", "load_model", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_epr_model": [[68, 81], ["os.walk", "models.Models.model_not_loaded", "models.Models.load_json_model"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.model_not_loaded", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_json_model"], ["", "def", "load_epr_model", "(", "self", ",", "name", ")", ":", "\n", "\t\t", "path", "=", "None", "\n", "loaded", "=", "False", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ct", ".", "MODELS_PATH", ")", ":", "\n", "\t\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t\t", "if", "f", "==", "name", "or", "f", "==", "name", "+", "'.jsonl'", ":", "\n", "\t\t\t\t\t", "path", "=", "root", "+", "'/'", "+", "f", "\n", "self", ".", "epr", "=", "self", ".", "load_json_model", "(", "path", ")", "\n", "loaded", "=", "True", "\n", "", "", "", "if", "not", "loaded", ":", "\n", "\t\t\t", "self", ".", "model_not_loaded", "(", "name", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_json_model": [[83, 119], ["list", "list", "list", "dict", "open", "numpy.array", "numpy.array", "numpy.array", "json.loads", "set", "set", "print", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "def", "load_json_model", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "x_values", "=", "list", "(", ")", "\n", "y_values", "=", "list", "(", ")", "\n", "chars", "=", "list", "(", ")", "\n", "trigrams", "=", "dict", "(", ")", "\n", "k", "=", "None", "\n", "counter", "=", "0", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "lines", ":", "\n", "\t\t\t", "for", "line", "in", "lines", ":", "\n", "\t\t\t\t", "counter", "+=", "1", "\n", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "\n", "# load language trigrams", "\n", "if", "counter", "==", "1", ":", "\n", "\t\t\t\t\t", "trigrams", "=", "info", "\n", "model_langs", "=", "set", "(", "[", "k", "for", "k", "in", "trigrams", "]", ")", "\n", "target_langs", "=", "set", "(", "ct", ".", "SUPPORTED_LANGS", ")", "\n", "if", "not", "model_langs", "==", "target_langs", ":", "\n", "\t\t\t\t\t\t", "print", "(", "\"warning: epr model languages don't match supported languages in config.ini\"", ")", "\n", "# load models", "\n", "", "", "elif", "'k'", "in", "info", ":", "\n", "\t\t\t\t\t", "k", "=", "info", "[", "'k'", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "x_values", ".", "append", "(", "info", "[", "'x'", "]", ")", "\n", "y_values", ".", "append", "(", "info", "[", "'y'", "]", ")", "\n", "chars", ".", "append", "(", "info", "[", "'chars'", "]", ")", "\n", "\n", "", "", "", "model", "=", "{", "\n", "'x'", ":", "np", ".", "array", "(", "x_values", ")", ",", "\n", "'y'", ":", "np", ".", "array", "(", "y_values", ")", ",", "\n", "'chars'", ":", "np", ".", "array", "(", "chars", ")", ",", "\n", "'trigrams'", ":", "trigrams", ",", "\n", "'k'", ":", "k", "\n", "}", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.model_not_loaded": [[120, 123], ["print", "exit"], "methods", ["None"], ["", "def", "model_not_loaded", "(", "self", ",", "name", ")", ":", "\n", "\t\t", "print", "(", "\"couldn't find and load model named \"", "+", "name", ")", "\n", "exit", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.remap": [[8, 17], ["list", "list.append", "int", "round"], "function", ["None"], ["def", "remap", "(", "confidences", ")", ":", "\n", "\t", "remapped_confidences", "=", "list", "(", ")", "\n", "for", "conf", "in", "confidences", ":", "\n", "\t\t", "kraken_low", "=", "0", "\n", "kraken_high", "=", "1", "\n", "alto_low", "=", "9", "\n", "alto_high", "=", "0", "\n", "remapped_confidences", ".", "append", "(", "int", "(", "round", "(", "alto_low", "-", "(", "(", "conf", "-", "kraken_low", ")", "*", "(", "alto_low", "-", "alto_high", ")", ")", "/", "(", "kraken_high", "-", "kraken_low", ")", "+", "alto_high", ")", ")", ")", "\n", "", "return", "remapped_confidences", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert": [[19, 21], ["int", "round", "float"], "function", ["None"], ["", "def", "convert", "(", "value", ")", ":", "\n", "\t", "return", "int", "(", "round", "(", "254.0", "/", "300.0", "*", "float", "(", "value", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.generate_alto": [[23, 103], ["xml.Element", "enumerate", "xml.dom.minidom.parseString().toprettyxml().strip", "xml.SubElement", "enumerate", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "xml.SubElement", "map", "alto.convert", "min", "alto.convert", "min", "alto.convert", "max", "alto.convert", "max", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "str", "str", "str", "str", "xml.dom.minidom.parseString().toprettyxml", "alto.remap", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "str", "str", "str", "str", "xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "xml.SubElement", "ET.SubElement.set", "ET.SubElement.set", "ET.SubElement.set", "len", "xml.dom.minidom.parseString", "xml.etree.ElementTree.tostring", "len", "len", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.remap"], ["", "def", "generate_alto", "(", "block", ",", "addOffset", ")", ":", "\n", "\n", "\t", "output", "=", "block", ".", "ocr_words", "\n", "\n", "offset_x", "=", "0", "\n", "offset_y", "=", "0", "\n", "if", "addOffset", "and", "block", ".", "offset_alto", "!=", "None", ":", "\n", "\t\t", "offset_x", "=", "block", ".", "offset_alto", "[", "0", "]", "\n", "offset_y", "=", "block", ".", "offset_alto", "[", "1", "]", "\n", "\n", "", "counter", "=", "0", "\n", "string_id", "=", "\"\"", "\n", "if", "block", ".", "block_id", "!=", "None", ":", "\n", "\t\t", "string_id", "+=", "block", ".", "block_id", "+", "'-'", "\n", "\n", "", "hyphen_part_1", "=", "None", "\n", "\n", "block", "=", "ET", ".", "Element", "(", "'TextBlock'", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "output", ")", ":", "\n", "\t\t", "line_element", "=", "ET", ".", "SubElement", "(", "block", ",", "'TextLine'", ")", "\n", "\n", "x1_line", "=", "sys", ".", "maxsize", "\n", "y1_line", "=", "sys", ".", "maxsize", "\n", "x2_line", "=", "0", "\n", "y2_line", "=", "0", "\n", "\n", "for", "j", ",", "word_info", "in", "enumerate", "(", "line", ")", ":", "\n", "\n", "\t\t\t", "counter", "+=", "1", "\n", "word", "=", "ET", ".", "SubElement", "(", "line_element", ",", "'String'", ")", "\n", "\n", "conf_strings", "=", "map", "(", "str", ",", "remap", "(", "word_info", "[", "2", "]", ")", ")", "\n", "\n", "x1_word", "=", "convert", "(", "word_info", "[", "1", "]", "[", "0", "]", ")", "\n", "x1_line", "=", "min", "(", "x1_word", ",", "x1_line", ")", "\n", "y1_word", "=", "convert", "(", "word_info", "[", "1", "]", "[", "1", "]", ")", "\n", "y1_line", "=", "min", "(", "y1_word", ",", "y1_line", ")", "\n", "x2_word", "=", "convert", "(", "word_info", "[", "1", "]", "[", "2", "]", ")", "\n", "x2_line", "=", "max", "(", "x2_word", ",", "x2_line", ")", "\n", "y2_word", "=", "convert", "(", "word_info", "[", "1", "]", "[", "3", "]", ")", "\n", "y2_line", "=", "max", "(", "y2_word", ",", "y2_line", ")", "\n", "\n", "# detected hyphen at end of previous line", "\n", "if", "hyphen_part_1", "!=", "None", ":", "\n", "\t\t\t\t", "word", ".", "set", "(", "'CONTENT'", ",", "word_info", "[", "0", "]", ")", "\n", "word", ".", "set", "(", "'SUBS_TYPE'", ",", "'HypPart2'", ")", "\n", "word", ".", "set", "(", "'SUBS_CONTENT'", ",", "hyphen_part_1", "+", "word_info", "[", "0", "]", ")", "\n", "hyphen_part_1", "=", "None", "\n", "\n", "# if its the last word of the line, contains hyphen at last index and isn't the last text line", "\n", "", "elif", "j", "==", "len", "(", "line", ")", "-", "1", "and", "word_info", "[", "0", "]", "[", "-", "1", "]", "in", "ct", ".", "HYPHENS", "and", "i", "!=", "len", "(", "output", ")", "-", "1", ":", "\n", "\t\t\t\t", "word", ".", "set", "(", "'CONTENT'", ",", "word_info", "[", "0", "]", "[", ":", "-", "1", "]", ")", "\n", "word", ".", "set", "(", "'SUBS_TYPE'", ",", "'HypPart1'", ")", "\n", "word", ".", "set", "(", "'SUBS_CONTENT'", ",", "word_info", "[", "0", "]", "[", ":", "-", "1", "]", "+", "output", "[", "i", "+", "1", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "hyphen", "=", "ET", ".", "SubElement", "(", "line_element", ",", "'HYP'", ")", "\n", "hyphen", ".", "set", "(", "'CONTENT'", ",", "word_info", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "hyphen_part_1", "=", "word_info", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "\n", "# regular case", "\n", "", "else", ":", "\n", "\t\t\t\t", "word", ".", "set", "(", "'CONTENT'", ",", "word_info", "[", "0", "]", ")", "\n", "word", ".", "set", "(", "'ID'", ",", "string_id", "+", "str", "(", "counter", ")", ".", "zfill", "(", "5", ")", ")", "\n", "hyphen_part_1", "=", "None", "\n", "\n", "", "word", ".", "set", "(", "'CC'", ",", "''", ".", "join", "(", "conf_strings", ")", ")", "\n", "word", ".", "set", "(", "'HPOS'", ",", "str", "(", "x1_word", "+", "offset_x", ")", ")", "\n", "word", ".", "set", "(", "'VPOS'", ",", "str", "(", "y1_word", "+", "offset_y", ")", ")", "\n", "word", ".", "set", "(", "'WIDTH'", ",", "str", "(", "x2_word", "-", "x1_word", ")", ")", "\n", "word", ".", "set", "(", "'HEIGHT'", ",", "str", "(", "y2_word", "-", "y1_word", ")", ")", "\n", "\n", "if", "j", "<", "len", "(", "line", ")", "-", "1", ":", "\n", "\t\t\t\t", "space", "=", "ET", ".", "SubElement", "(", "line_element", ",", "'SP'", ")", "\n", "\n", "", "", "line_element", ".", "set", "(", "'HPOS'", ",", "str", "(", "x1_line", "+", "offset_x", ")", ")", "\n", "line_element", ".", "set", "(", "'VPOS'", ",", "str", "(", "y1_line", "+", "offset_y", ")", ")", "\n", "line_element", ".", "set", "(", "'WIDTH'", ",", "str", "(", "x2_line", "-", "x1_line", ")", ")", "\n", "line_element", ".", "set", "(", "'HEIGHT'", ",", "str", "(", "y2_line", "-", "y1_line", ")", ")", "\n", "\n", "", "xmlstr", "=", "minidom", ".", "parseString", "(", "tostring", "(", "block", ",", "encoding", "=", "'utf-8'", ")", ")", ".", "toprettyxml", "(", "indent", "=", "'\t'", ")", ".", "strip", "(", ")", "\n", "return", "xmlstr", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.apply.apply_on_images": [[11, 51], ["ocr.pipe.models.Models", "ocr.pipe.models.Models.load_final_models", "list", "os.walk", "tqdm.tqdm", "print", "os.path.isdir", "print", "exit", "cv2.imread", "ocr.pipe.block.Block", "ocr.pipe.pipe.ocr", "path.split", "ocr.test.visualize_ocr.visualize_test", "print", "path.replace().replace", "os.path.isdir", "os.makedirs", "ocr.pipe.pipe.ocr.name.replace().replace", "output_name.replace.replace", "open", "f.endswith", "f.endswith", "list.append", "out.write", "out.write", "str", "path.replace", "ocr.pipe.pipe.ocr.name.replace", "constants.OCR_OUTPUT_PATH.split"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_final_models", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pipe.ocr", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.visualize_test"], ["def", "apply_on_images", "(", "images_dir", ",", "alto", ",", "visual", ",", "confidence", ")", ":", "\n", "\n", "\t", "if", "not", "os", ".", "path", ".", "isdir", "(", "images_dir", ")", ":", "\n", "\t\t", "print", "(", "\"cannot find directory \"", "+", "images_dir", ")", "\n", "exit", "(", ")", "\n", "\n", "", "models", "=", "Models", "(", ")", "\n", "models", ".", "load_final_models", "(", "False", ")", "\n", "\n", "paths", "=", "list", "(", ")", "\n", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "images_dir", ")", ":", "\n", "\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t", "if", "f", ".", "endswith", "(", "'.png'", ")", "or", "f", ".", "endswith", "(", "'.tif'", ")", ":", "\n", "\t\t\t\t", "paths", ".", "append", "(", "root", "+", "'/'", "+", "f", ")", "\n", "\n", "", "", "", "for", "path", "in", "tqdm", "(", "paths", ")", ":", "\n", "\t\t", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "block", "=", "Block", "(", "img", ")", "\n", "block", ".", "name", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "block", "=", "ocr", "(", "block", ",", "models", ",", "alto", "=", "alto", ")", "\n", "\n", "# print in console and generate image", "\n", "if", "visual", ":", "\n", "\t\t\t", "visualize_test", "(", "block", "=", "block", ",", "confidence", "=", "confidence", ")", "\n", "print", "(", "'\\n\\n'", "+", "str", "(", "block", ")", ")", "\n", "\n", "# write text file", "\n", "", "output_dir", "=", "ct", ".", "OCR_OUTPUT_PATH", "+", "path", ".", "replace", "(", "images_dir", ",", "''", ")", ".", "replace", "(", "block", ".", "name", ",", "''", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "output_name", "=", "block", ".", "name", ".", "replace", "(", "'.png'", ",", "''", ")", ".", "replace", "(", "'.tif'", ",", "''", ")", "+", "'.txt'", "\n", "if", "alto", ":", "\n", "\t\t\t", "output_name", "=", "output_name", ".", "replace", "(", "'.txt'", ",", "'.xml'", ")", "\n", "", "with", "open", "(", "output_dir", "+", "output_name", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "out", ":", "\n", "\t\t\t", "if", "alto", ":", "\n", "\t\t\t\t", "out", ".", "write", "(", "block", ".", "ocr_alto", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "out", ".", "write", "(", "block", ".", "ocr", ")", "\n", "", "", "", "print", "(", "'ocr completed and output can be viewed in '", "+", "ct", ".", "OCR_OUTPUT_PATH", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.block.Block.__init__": [[6, 42], ["isinstance", "isinstance"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "\n", "\t\t", "if", "isinstance", "(", "arg", ",", "np", ".", "ndarray", ")", ":", "\n", "\t\t\t", "self", ".", "image", "=", "arg", "\n", "", "elif", "isinstance", "(", "arg", ",", "str", ")", ":", "\n", "\t\t\t", "self", ".", "block_id", "=", "arg", "\n", "\n", "", "self", ".", "bin_image", "=", "None", "\n", "self", ".", "inv_image", "=", "None", "\n", "self", ".", "font", "=", "None", "\n", "self", ".", "lines", "=", "None", "\n", "self", ".", "ocr", "=", "None", "\n", "self", ".", "ocr_words", "=", "None", "\n", "self", ".", "ocr_alto", "=", "None", "\n", "self", ".", "ocr_ori", "=", "None", "\n", "self", ".", "ocr_gt", "=", "None", "\n", "self", ".", "name", "=", "None", "\n", "self", ".", "score", "=", "None", "\n", "self", ".", "score_ori", "=", "None", "\n", "self", ".", "block_type", "=", "None", "\n", "self", ".", "alto_id", "=", "None", "\n", "self", ".", "ark", "=", "None", "\n", "self", ".", "year", "=", "None", "\n", "self", ".", "lang_ori", "=", "None", "\n", "self", ".", "lang_gt", "=", "None", "\n", "self", ".", "composed", "=", "False", "\n", "self", ".", "rotated", "=", "False", "\n", "self", ".", "coordinates", "=", "None", "\n", "self", ".", "offset_alto", "=", "None", "\n", "self", ".", "tokens_ori", "=", "None", "\n", "self", ".", "tokens_gt", "=", "None", "\n", "self", ".", "dict_ori", "=", "None", "\n", "self", ".", "garbage_ori", "=", "None", "\n", "self", ".", "trigrams_gt", "=", "None", "\n", "self", ".", "trigrams_ori", "=", "None", "\n", "self", ".", "enhance", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.block.Block.__str__": [[44, 52], ["enumerate", "block.Block.ocr.split", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "\t\t", "return_str", "=", "\"\"", "\n", "if", "self", ".", "ocr", "!=", "None", ":", "\n", "\t\t\t", "if", "self", ".", "name", "!=", "None", ":", "\n", "\t\t\t\t", "return_str", "+=", "self", ".", "name", "+", "':\\n'", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "self", ".", "ocr", ".", "split", "(", "'\\n'", ")", ")", ":", "\n", "\t\t\t\t", "return_str", "+=", "str", "(", "i", "+", "1", ")", "+", "':\\t'", "+", "line", "+", "'\\n'", "\n", "", "", "return", "return_str", "", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.__init__": [[13, 17], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "block", ":", "Block", ",", "models", ":", "Models", ")", ":", "\n", "\n", "\t\t", "self", ".", "block", "=", "block", "\n", "self", ".", "models", "=", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.readjust_lines": [[19, 26], ["list", "max", "max", "list.append"], "methods", ["None"], ["", "def", "readjust_lines", "(", "self", ")", ":", "\n", "\t\t", "new_boxes", "=", "list", "(", ")", "\n", "for", "box", "in", "self", ".", "block", ".", "lines", ":", "\n", "\t\t\t", "box", "[", "0", "]", "=", "max", "(", "0", ",", "(", "box", "[", "0", "]", "-", "ct", ".", "LINE_IMG_PAD", ")", ")", "\n", "box", "[", "2", "]", "=", "max", "(", "0", ",", "(", "box", "[", "2", "]", "-", "ct", ".", "LINE_IMG_PAD", ")", ")", "\n", "new_boxes", ".", "append", "(", "box", ")", "\n", "", "block", ".", "lines", "=", "new_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.post_process": [[27, 29], ["m.start", "re.finditer", "m.end"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "line_txt", ")", ":", "\n", "\t\t", "return", "[", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", "-", "1", ")", "for", "m", "in", "re", ".", "finditer", "(", "r'\\S+'", ",", "line_txt", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.format_output": [[38, 82], ["pred.Predictor.readjust_lines", "list", "list", "print", "str", "pred.Predictor.block.ocr_words.append", "pred.Predictor.post_process", "list", "list.append", "len", "len", "str.isspace", "list", "list", "range", "pred.Predictor.block.ocr_words[].append", "list.append", "list.append", "word.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.readjust_lines", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.post_process"], ["", "def", "format_output", "(", "self", ",", "output", ")", ":", "\n", "\n", "\t\t", "if", "self", ".", "block", ".", "ocr_words", "==", "None", ":", "\n", "\t\t\t", "self", ".", "block", ".", "ocr_words", "=", "list", "(", ")", "\n", "\n", "", "if", "not", "len", "(", "self", ".", "block", ".", "lines", ")", "==", "len", "(", "output", ")", ":", "\n", "\t\t\t", "print", "(", "\"number of lines in output doesn't correspond to number of line bounding boxes\"", ")", "\n", "return", "None", "\n", "\n", "", "self", ".", "readjust_lines", "(", ")", "\n", "\n", "line_strings", "=", "list", "(", ")", "\n", "\n", "for", "line", "in", "output", ":", "\n", "\t\t\t", "txt", "=", "str", "(", "line", ")", "\n", "if", "txt", "==", "''", "or", "txt", ".", "isspace", "(", ")", ":", "\n", "\t\t\t\t", "continue", "\n", "", "self", ".", "block", ".", "ocr_words", ".", "append", "(", "list", "(", ")", ")", "\n", "indices", "=", "self", ".", "post_process", "(", "txt", ")", "\n", "line_words", "=", "list", "(", ")", "\n", "for", "pair", "in", "indices", ":", "\n", "\t\t\t\t", "word", "=", "\"\"", "\n", "box", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "confidences", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "+", "1", ")", ":", "\n", "\t\t\t\t\t", "word", "+=", "line", "[", "i", "]", "[", "0", "]", "\n", "x1", "=", "line", "[", "i", "]", "[", "1", "]", "[", "0", "]", "-", "ct", ".", "LINE_IMG_PAD", "\n", "x2", "=", "line", "[", "i", "]", "[", "1", "]", "[", "2", "]", "-", "ct", ".", "LINE_IMG_PAD", "\n", "y1", "=", "line", "[", "i", "]", "[", "1", "]", "[", "1", "]", "\n", "y2", "=", "line", "[", "i", "]", "[", "1", "]", "[", "3", "]", "\n", "if", "box", "[", "0", "]", "==", "None", "or", "x1", "<", "box", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t", "box", "[", "0", "]", "=", "x1", "\n", "", "if", "box", "[", "1", "]", "==", "None", "or", "y1", "<", "box", "[", "1", "]", ":", "\n", "\t\t\t\t\t\t", "box", "[", "1", "]", "=", "y1", "\n", "", "if", "box", "[", "2", "]", "==", "None", "or", "x2", ">", "box", "[", "2", "]", ":", "\n", "\t\t\t\t\t\t", "box", "[", "2", "]", "=", "x2", "\n", "", "if", "box", "[", "3", "]", "==", "None", "or", "y2", ">", "box", "[", "3", "]", ":", "\n", "\t\t\t\t\t\t", "box", "[", "3", "]", "=", "y2", "\n", "", "confidences", ".", "append", "(", "line", "[", "i", "]", "[", "2", "]", ")", "\n", "word", "=", "word", ".", "replace", "(", "\"t;\"", ",", "\"t:\"", ")", "\n", "", "self", ".", "block", ".", "ocr_words", "[", "-", "1", "]", ".", "append", "(", "[", "word", ",", "box", ",", "confidences", "]", ")", "\n", "line_words", ".", "append", "(", "word", ")", "\n", "", "line_strings", ".", "append", "(", "' '", ".", "join", "(", "line_words", ")", ")", "\n", "", "self", ".", "block", ".", "ocr", "=", "'\\n'", ".", "join", "(", "line_strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.improve_boxes": [[84, 104], ["enumerate", "sorted", "list", "enumerate", "enumerate", "list.append", "max", "list.append", "len", "min", "round", "list.append", "list.append", "len"], "methods", ["None"], ["", "def", "improve_boxes", "(", "self", ")", ":", "\n", "\n", "\t\t", "for", "j", ",", "line", "in", "enumerate", "(", "self", ".", "block", ".", "ocr_words", ")", ":", "\n", "\t\t\t", "x1_values", "=", "[", "box", "[", "0", "]", "for", "box", "in", "[", "word_info", "[", "1", "]", "for", "word_info", "in", "line", "]", "]", "\n", "x2_values", "=", "[", "box", "[", "2", "]", "for", "box", "in", "[", "word_info", "[", "1", "]", "for", "word_info", "in", "line", "]", "]", "\n", "x_values", "=", "sorted", "(", "x1_values", "+", "x2_values", ")", "\n", "new_x_values", "=", "list", "(", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "x_values", ")", ":", "\n", "\t\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "new_x_values", ".", "append", "(", "max", "(", "0", ",", "self", ".", "block", ".", "lines", "[", "j", "]", "[", "0", "]", ")", ")", "\n", "", "elif", "i", "==", "(", "len", "(", "x_values", ")", "-", "1", ")", ":", "\n", "\t\t\t\t\t", "new_x_values", ".", "append", "(", "min", "(", "len", "(", "self", ".", "block", ".", "image", "[", "0", "]", ")", ",", "self", ".", "block", ".", "lines", "[", "j", "]", "[", "2", "]", ")", ")", "\n", "", "elif", "i", "%", "2", "==", "1", ":", "\n", "\t\t\t\t\t", "new_x", "=", "(", "round", "(", "(", "x", "+", "x_values", "[", "i", "+", "1", "]", ")", "/", "2.0", "-", "1", ")", ")", "# we shift the point, where two bounding boxes meet, by 1 point to the left", "\n", "new_x_values", ".", "append", "(", "new_x", ")", "\n", "new_x_values", ".", "append", "(", "new_x", ")", "\n", "", "", "new_line", "=", "line", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "new_line", ")", ":", "\n", "\t\t\t\t", "word", "[", "1", "]", "[", "0", "]", "=", "new_x_values", "[", "i", "*", "2", "]", "\n", "word", "[", "1", "]", "[", "2", "]", "=", "new_x_values", "[", "i", "*", "2", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.kraken": [[106, 120], ["kraken.rpred.rpred", "pred.Predictor.format_output", "pred.Predictor.improve_boxes", "PIL.Image.fromarray", "pred.Predictor.lines_to_kraken"], "methods", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.format_output", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.improve_boxes", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.lines_to_kraken"], ["", "", "", "def", "kraken", "(", "self", ")", ":", "\n", "\n", "\t\t", "model", "=", "self", ".", "models", ".", "ocr", "[", "ct", ".", "FONTS", "[", "0", "]", "]", "\n", "if", "self", ".", "block", ".", "font", "!=", "\"unknown\"", ":", "\n", "\t\t\t", "model", "=", "self", ".", "models", ".", "ocr", "[", "self", ".", "block", ".", "font", "]", "\n", "", "result", "=", "rpred", "(", "\n", "model", ",", "\n", "Image", ".", "fromarray", "(", "self", ".", "block", ".", "bin_image", ")", ",", "\n", "self", ".", "lines_to_kraken", "(", ")", ",", "\n", "pad", "=", "0", ",", "\n", "bidi_reordering", "=", "True", ")", "\n", "self", ".", "format_output", "(", "[", "x", "for", "x", "in", "result", "]", ")", "\n", "self", ".", "improve_boxes", "(", ")", "\n", "return", "self", ".", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.lines_to_kraken": [[122, 129], ["None"], "methods", ["None"], ["", "def", "lines_to_kraken", "(", "self", ")", ":", "\n", "\t\t", "kraken_format", "=", "{", "\n", "'text_direction'", ":", "'horizontal-lr'", ",", "\n", "'boxes'", ":", "self", ".", "block", ".", "lines", ",", "\n", "'script_detection'", ":", "False", "\n", "}", "\n", "return", "kraken_format", "\n", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu": [[6, 50], ["cv2.threshold", "cv2.countNonZero", "numpy.ones", "cv2.morphologyEx", "cv2.subtract", "numpy.ones", "cv2.morphologyEx", "cv2.subtract", "numpy.ones", "cv2.dilate", "cv2.copyMakeBorder", "cv2.bitwise_not", "cv2.cvtColor", "len", "len", "cv2.bitwise_not", "len"], "function", ["None"], ["def", "bin_otsu", "(", "original", ")", ":", "\n", "\n", "\t", "image", "=", "None", "\n", "\n", "# image to binary", "\n", "if", "not", "len", "(", "original", ".", "shape", ")", "==", "2", ":", "\n", "\t\t", "image", "=", "cv2", ".", "cvtColor", "(", "original", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "", "else", ":", "\n", "\t\t", "image", "=", "original", "\n", "", "_", ",", "thresh", "=", "cv2", ".", "threshold", "(", "image", ",", "0", ",", "255", ",", "cv2", ".", "THRESH_BINARY_INV", "+", "cv2", ".", "THRESH_OTSU", ")", "\n", "\n", "\n", "# determine black on white or white on black", "\n", "total_pixels", "=", "len", "(", "image", ")", "*", "len", "(", "image", "[", "0", "]", ")", "\n", "white_pixels", "=", "cv2", ".", "countNonZero", "(", "thresh", ")", "\n", "black_pixels", "=", "total_pixels", "-", "white_pixels", "\n", "if", "black_pixels", "<", "white_pixels", ":", "\n", "\t\t", "thresh", "=", "cv2", ".", "bitwise_not", "(", "thresh", ")", "\n", "\n", "# open - search for vertical white bars", "\n", "", "kernel", "=", "np", ".", "ones", "(", "(", "ct", ".", "P1", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ver_bars", "=", "cv2", ".", "morphologyEx", "(", "thresh", ",", "cv2", ".", "MORPH_OPEN", ",", "kernel", ")", "\n", "\n", "# substraction - remove detected vertical bars from binarized image", "\n", "temp_image", "=", "cv2", ".", "subtract", "(", "thresh", ",", "ver_bars", ")", "\n", "\n", "# open - search for horizontal white bars", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "1", ",", "ct", ".", "P1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "hor_bars", "=", "cv2", ".", "morphologyEx", "(", "temp_image", ",", "cv2", ".", "MORPH_OPEN", ",", "kernel", ")", "\n", "\n", "# substraction - remove detected horizontal bars from binarized image", "\n", "temp_image", "=", "cv2", ".", "subtract", "(", "temp_image", ",", "hor_bars", ")", "\n", "\n", "# dilate", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "2", ",", "2", ")", ",", "np", ".", "uint8", ")", "\n", "temp_image", "=", "cv2", ".", "dilate", "(", "temp_image", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "# pad image", "\n", "padded_image", "=", "cv2", ".", "copyMakeBorder", "(", "temp_image", ",", "0", ",", "0", ",", "ct", ".", "LINE_IMG_PAD", ",", "ct", ".", "LINE_IMG_PAD", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "# invert image", "\n", "inv_padded_image", "=", "cv2", ".", "bitwise_not", "(", "padded_image", ")", "\n", "\n", "return", "(", "inv_padded_image", ",", "padded_image", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pipe.ocr": [[10, 32], ["ocr.pipe.bin.bin_otsu", "seg.apply_seg.combiseg", "fcr.apply_fcr.predict_font", "ocr.pipe.pred.Predictor", "ocr.pipe.pred.Predictor.kraken", "ocr.pipe.alto.generate_alto"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combiseg", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.predict_font", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pred.Predictor.kraken", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.generate_alto"], ["def", "ocr", "(", "block", ":", "Block", ",", "models", ":", "Models", ",", "alto", "=", "False", ",", "addOffset", "=", "False", ")", ":", "\n", "\n", "# binarization", "\n", "\t", "bin_image", ",", "inv_image", "=", "bin_otsu", "(", "block", ".", "image", ")", "\n", "block", ".", "bin_image", "=", "bin_image", "\n", "block", ".", "inv_image", "=", "inv_image", "\n", "\n", "# segmentation", "\n", "block", ".", "lines", "=", "combiseg", "(", "block", ".", "inv_image", ")", "\n", "\n", "# font recognition", "\n", "block", ".", "font", "=", "predict_font", "(", "block", ",", "models", ")", "\n", "\n", "# character recognition", "\n", "predictor", "=", "Predictor", "(", "block", ",", "models", ")", "\n", "block", "=", "predictor", ".", "kraken", "(", ")", "\n", "\n", "# alto generation", "\n", "if", "alto", ":", "\n", "\t\t", "block", ".", "ocr_alto", "=", "generate_alto", "(", "block", ",", "addOffset", ")", "\n", "\n", "", "return", "block", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.get_params": [[7, 20], ["int", "PIL.ImageFont.truetype", "PIL.ImageFont.truetype", "int", "len", "int", "float"], "function", ["None"], ["def", "get_params", "(", "new_block", ":", "Block", ")", ":", "\n", "\n", "\t", "total_height", "=", "0", "\n", "for", "line", "in", "new_block", ".", "lines", ":", "\n", "\t\t", "total_height", "+=", "line", "[", "3", "]", "-", "line", "[", "1", "]", "\n", "", "average_height", "=", "total_height", "/", "len", "(", "new_block", ".", "lines", ")", "\n", "\n", "font_size", "=", "int", "(", "average_height", "*", "0.8", ")", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "ct", ".", "VIS_FONT_PATH", ",", "font_size", ")", "\n", "bold_font", "=", "ImageFont", ".", "truetype", "(", "ct", ".", "VIS_FONT_BOLD_PATH", ",", "int", "(", "font_size", "*", "1.15", ")", ")", "\n", "step_size", "=", "int", "(", "float", "(", "font_size", ")", "*", "0.55", ")", "\n", "\n", "return", "font", ",", "bold_font", ",", "step_size", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.draw_ocr_block": [[22, 86], ["draw.text", "isinstance", "data.split", "enumerate", "enumerate", "str", "draw.text", "draw.text", "round", "str", "len", "draw.text", "len", "enumerate", "round", "str", "str", "str", "draw.text", "min", "str", "int"], "function", ["None"], ["", "def", "draw_ocr_block", "(", "block", ":", "Block", ",", "new_ocr", ",", "draw", ",", "x", ",", "step_size", ",", "font", ",", "bold_font", ",", "confidence", ")", ":", "\n", "\n", "\t", "title", "=", "\"new ocr\"", "\n", "if", "block", ".", "score", "!=", "None", ":", "\n", "\t\t", "title", "+=", "\" - \"", "+", "str", "(", "round", "(", "block", ".", "score", ",", "3", ")", ")", "\n", "", "if", "not", "new_ocr", ":", "\n", "\t\t", "title", "=", "\"ori ocr\"", "\n", "if", "block", ".", "score_ori", "!=", "None", ":", "\n", "\t\t\t", "title", "+=", "\" - \"", "+", "str", "(", "round", "(", "block", ".", "score_ori", ",", "3", ")", ")", "\n", "", "", "draw", ".", "text", "(", "(", "x", ",", "ct", ".", "LINE_IMG_PAD", ")", ",", "title", ",", "(", "255", ",", "150", ",", "50", ")", ",", "font", "=", "bold_font", ")", "\n", "\n", "y", "=", "0", "\n", "x_temp", "=", "x", "\n", "max_x", "=", "0", "\n", "\n", "data", "=", "None", "\n", "if", "new_ocr", ":", "\n", "\t\t", "data", "=", "block", ".", "ocr", "\n", "if", "block", ".", "ocr_words", "!=", "None", ":", "\n", "\t\t\t", "data", "=", "block", ".", "ocr_words", "\n", "", "", "else", ":", "\n", "\t\t", "data", "=", "block", ".", "ocr_ori", "\n", "\n", "", "y", "=", "None", "\n", "\n", "# plain text str, used for original ocr", "\n", "if", "isinstance", "(", "data", ",", "str", ")", ":", "\n", "\t\t", "text_lines", "=", "data", ".", "split", "(", "\"\\n\"", ")", "\n", "for", "i", ",", "text_line", "in", "enumerate", "(", "text_lines", ")", ":", "\n", "\t\t\t", "if", "i", "<", "len", "(", "block", ".", "lines", ")", ":", "\n", "\t\t\t\t", "y", "=", "ct", ".", "LINE_IMG_PAD", "*", "3", "+", "block", ".", "lines", "[", "i", "]", "[", "1", "]", "+", "(", "block", ".", "lines", "[", "i", "]", "[", "3", "]", "-", "block", ".", "lines", "[", "i", "]", "[", "1", "]", ")", "/", "4", "*", "3", "\n", "", "else", ":", "\n", "\t\t\t\t", "y", "+=", "block", ".", "lines", "[", "-", "1", "]", "[", "3", "]", "-", "block", ".", "lines", "[", "-", "1", "]", "[", "1", "]", "\n", "", "draw", ".", "text", "(", "(", "x_temp", ",", "y", ")", ",", "str", "(", "i", "+", "1", ")", "+", "\")\"", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font", "=", "font", ")", "\n", "x_temp", "+=", "step_size", "*", "4", "\n", "for", "c", "in", "text_line", ":", "\n", "\t\t\t\t", "draw", ".", "text", "(", "(", "x_temp", ",", "y", ")", ",", "str", "(", "c", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font", "=", "font", ")", "\n", "x_temp", "+=", "step_size", "\n", "", "if", "x_temp", ">", "max_x", ":", "\n", "\t\t\t\t", "max_x", "=", "x_temp", "\n", "", "x_temp", "=", "x", "\n", "\n", "# new ocr ", "\n", "", "", "else", ":", "\n", "\t\t", "for", "i", ",", "text_line", "in", "enumerate", "(", "data", ")", ":", "\n", "\t\t\t", "if", "i", "<", "len", "(", "block", ".", "lines", ")", ":", "\n", "\t\t\t\t", "y", "=", "ct", ".", "LINE_IMG_PAD", "*", "3", "+", "block", ".", "lines", "[", "i", "]", "[", "1", "]", "+", "(", "block", ".", "lines", "[", "i", "]", "[", "3", "]", "-", "block", ".", "lines", "[", "i", "]", "[", "1", "]", ")", "/", "4", "*", "3", "\n", "", "else", ":", "\n", "\t\t\t\t", "y", "+=", "block", ".", "lines", "[", "-", "1", "]", "[", "3", "]", "-", "block", ".", "lines", "[", "-", "1", "]", "[", "1", "]", "\n", "", "draw", ".", "text", "(", "(", "x_temp", ",", "y", ")", ",", "str", "(", "i", "+", "1", ")", "+", "\")\"", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font", "=", "font", ")", "\n", "x_temp", "+=", "step_size", "*", "4", "\n", "for", "word", "in", "text_line", ":", "\n", "\t\t\t\t", "for", "j", ",", "c", "in", "enumerate", "(", "word", "[", "0", "]", "+", "' '", ")", ":", "\n", "\t\t\t\t\t", "color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "if", "confidence", "and", "c", "!=", "' '", ":", "\n", "\t\t\t\t\t\t", "color", "=", "min", "(", "255", ",", "int", "(", "(", "1", "-", "word", "[", "2", "]", "[", "j", "]", ")", "*", "2", "*", "255", ")", ")", "\n", "color", "=", "(", "color", ",", "color", ",", "color", ")", "\n", "", "draw", ".", "text", "(", "(", "x_temp", ",", "y", ")", ",", "str", "(", "c", ")", ",", "color", ",", "font", "=", "font", ")", "\n", "x_temp", "+=", "step_size", "\n", "", "", "if", "x_temp", ">", "max_x", ":", "\n", "\t\t\t\t", "max_x", "=", "x_temp", "\n", "", "x_temp", "=", "x", "\n", "\n", "", "", "return", "max_x", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.visualize_test": [[88, 126], ["PIL.Image.fromarray", "PIL.Image.new", "PIL.ImageDraw.Draw", "visualize_ocr.get_params", "ImageDraw.Draw.text", "draw_word_boxes.paste", "visualize_ocr.draw_ocr_block", "visualize_ocr.draw_word_boxes", "draw_word_boxes.crop", "newImage.crop.save", "visualize_ocr.draw_ocr_block", "os.path.isdir", "os.makedirs", "block.name.replace().replace", "block.name.replace"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.get_params", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.draw_ocr_block", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.draw_word_boxes", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.draw_ocr_block"], ["", "def", "visualize_test", "(", "block", ":", "Block", ",", "confidence", "=", "False", ")", ":", "\n", "\n", "# create new image", "\n", "\t", "image", "=", "Image", ".", "fromarray", "(", "block", ".", "image", ")", "\n", "width", ",", "height", "=", "image", ".", "size", "\n", "new_image_w", "=", "width", "*", "10", "\n", "new_image_h", "=", "height", "+", "5", "*", "ct", ".", "LINE_IMG_PAD", "\n", "newImage", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "new_image_w", ",", "new_image_h", ")", ",", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "newImage", ")", "\n", "\n", "# some params", "\n", "font", ",", "bold_font", ",", "step_size", "=", "get_params", "(", "block", ")", "\n", "x", "=", "ct", ".", "LINE_IMG_PAD", "\n", "\n", "# old ocr (optional)", "\n", "if", "block", ".", "ocr_ori", "!=", "None", ":", "\n", "\t\t", "x", "=", "draw_ocr_block", "(", "block", ",", "False", ",", "draw", ",", "x", ",", "step_size", ",", "font", ",", "bold_font", ",", "confidence", ")", "\n", "\n", "# source image", "\n", "", "x", "+=", "ct", ".", "LINE_IMG_PAD", "\n", "scan_x", "=", "x", "\n", "draw", ".", "text", "(", "(", "x", ",", "ct", ".", "LINE_IMG_PAD", ")", ",", "block", ".", "name", "+", "' - '", "+", "block", ".", "font", ",", "(", "255", ",", "150", ",", "50", ")", ",", "font", "=", "bold_font", ")", "\n", "newImage", ".", "paste", "(", "image", ",", "(", "x", ",", "ct", ".", "LINE_IMG_PAD", "*", "4", ",", "width", "+", "x", ",", "height", "+", "ct", ".", "LINE_IMG_PAD", "*", "4", ")", ")", "\n", "x", "+=", "+", "ct", ".", "LINE_IMG_PAD", "+", "width", "\n", "\n", "# new ocr", "\n", "x", "=", "draw_ocr_block", "(", "block", ",", "True", ",", "draw", ",", "x", ",", "step_size", ",", "font", ",", "bold_font", ",", "confidence", ")", "\n", "\n", "# draw word boxes for new ocr", "\n", "newImage", "=", "draw_word_boxes", "(", "block", ",", "newImage", ",", "scan_x", ")", "\n", "\n", "# crop image to smallest size", "\n", "cropped_image", "=", "newImage", ".", "crop", "(", "(", "0", ",", "0", ",", "x", "+", "ct", ".", "LINE_IMG_PAD", ",", "height", "+", "5", "*", "ct", ".", "LINE_IMG_PAD", ")", ")", "\n", "\n", "# save image", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ct", ".", "OCR_OUTPUT_PATH", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ct", ".", "OCR_OUTPUT_PATH", ")", "\n", "", "cropped_image", ".", "save", "(", "ct", ".", "OCR_OUTPUT_PATH", "+", "block", ".", "name", ".", "replace", "(", "'.png'", ",", "''", ")", ".", "replace", "(", "'.tif'", ",", "''", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.draw_word_boxes": [[128, 150], ["int", "newImage.convert.convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "PIL.Image.alpha_composite", "newImage.convert.convert", "int", "int", "int", "int", "round", "round", "round", "round", "int", "round"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.alto.convert"], ["", "def", "draw_word_boxes", "(", "block", ":", "Block", ",", "newImage", ",", "scan_x", ")", ":", "\n", "\n", "\t", "TRANSPARENCY", "=", ".6", "\n", "OPACITY", "=", "int", "(", "255", "*", "TRANSPARENCY", ")", "\n", "color", "=", "(", "139", ",", "196", ",", "65", ")", "\n", "rect_w", "=", "4", "\n", "\n", "for", "line", "in", "block", ".", "ocr_words", ":", "\n", "\t\t", "for", "word", "in", "line", ":", "\n", "\t\t\t", "left", "=", "word", "[", "1", "]", "[", "0", "]", "+", "scan_x", "\n", "top", "=", "word", "[", "1", "]", "[", "1", "]", "+", "ct", ".", "LINE_IMG_PAD", "*", "4", "\n", "right", "=", "word", "[", "1", "]", "[", "2", "]", "+", "scan_x", "\n", "bottom", "=", "word", "[", "1", "]", "[", "3", "]", "+", "ct", ".", "LINE_IMG_PAD", "*", "4", "\n", "draw_cords", "=", "(", "int", "(", "round", "(", "left", "-", "rect_w", "/", "2.0", ")", ")", ",", "int", "(", "round", "(", "top", "-", "rect_w", "/", "2.0", ")", ")", ",", "int", "(", "round", "(", "right", "+", "rect_w", "/", "2.0", ")", ")", ",", "int", "(", "round", "(", "bottom", "+", "rect_w", "/", "2.0", ")", ")", ")", "\n", "newImage", "=", "newImage", ".", "convert", "(", "\"RGBA\"", ")", "\n", "overlay", "=", "Image", ".", "new", "(", "'RGBA'", ",", "newImage", ".", "size", ",", "color", "+", "(", "0", ",", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "overlay", ")", "# Create a context for drawing things on it.", "\n", "draw", ".", "rectangle", "(", "draw_cords", ",", "outline", "=", "color", "+", "(", "OPACITY", ",", ")", ",", "width", "=", "int", "(", "round", "(", "rect_w", ")", ")", ")", "\n", "newImage", "=", "Image", ".", "alpha_composite", "(", "newImage", ",", "overlay", ")", "\n", "newImage", "=", "newImage", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "", "return", "newImage", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.__init__": [[6, 8], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "block_results", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_score": [[10, 26], ["max", "editdistance.eval", "scoring.Scoring.block_results.append", "max", "len", "max", "len", "len"], "methods", ["None"], ["", "def", "get_score", "(", "self", ",", "block", ",", "new_ocr", "=", "True", ",", "average", "=", "False", ")", ":", "\n", "\n", "        ", "string1", "=", "block", ".", "ocr_gt", "\n", "string2", "=", "block", ".", "ocr", "\n", "\n", "if", "not", "new_ocr", ":", "\n", "            ", "string2", "=", "block", ".", "ocr_ori", "\n", "\n", "", "nchars", "=", "max", "(", "1", ",", "len", "(", "string1", ")", ")", "\n", "if", "average", ":", "\n", "            ", "nchars", "=", "max", "(", "1", ",", "(", "len", "(", "string1", ")", "+", "len", "(", "string2", ")", ")", "/", "2.0", ")", "\n", "", "total_edit", "=", "editdistance", ".", "eval", "(", "string1", ",", "string2", ")", "\n", "final_score", "=", "total_edit", "/", "nchars", "\n", "self", ".", "block_results", ".", "append", "(", "(", "total_edit", ",", "nchars", ")", ")", "\n", "\n", "return", "max", "(", "0", ",", "(", "1.0", "-", "final_score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_set_score": [[28, 38], ["max", "len"], "methods", ["None"], ["", "def", "get_set_score", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "block_results", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "total_edit", "=", "0", "\n", "total_chars", "=", "0", "\n", "for", "result", "in", "self", ".", "block_results", ":", "\n", "            ", "total_edit", "+=", "result", "[", "0", "]", "\n", "total_chars", "+=", "result", "[", "1", "]", "\n", "", "final_score", "=", "total_edit", "/", "total_chars", "\n", "return", "max", "(", "0", ",", "(", "1.0", "-", "final_score", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.test_on_set": [[14, 67], ["ocr.pipe.models.Models", "ocr.pipe.models.Models.load_final_models", "ocr.test.scoring.Scoring", "ocr.test.scoring.Scoring", "print", "print", "os.path.isfile", "print", "exit", "open", "tqdm.tqdm", "ocr.test.scoring.Scoring.get_set_score", "print", "json.loads", "cv2.imread", "ocr.pipe.block.Block", "test_ocr.get_alto_text", "ocr.pipe.pipe.ocr", "ocr.test.scoring.Scoring.get_score", "str", "print", "test_ocr.get_alto_text", "ocr.test.scoring.Scoring.get_score", "ocr.test.visualize_ocr.visualize_test", "round", "str", "ocr.test.scoring.Scoring.get_set_score", "round", "ocr.test.scoring.Scoring.get_set_score"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_final_models", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_set_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.get_alto_text", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.pipe.ocr", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.get_alto_text", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.visualize_ocr.visualize_test", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_set_score", "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.scoring.Scoring.get_set_score"], ["def", "test_on_set", "(", "test_set", ",", "visual", ",", "confidence", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "isfile", "(", "test_set", ")", ":", "\n", "\t\t", "print", "(", "\"cannot find \"", "+", "test_set", ")", "\n", "exit", "(", ")", "\n", "\n", "", "models", "=", "Models", "(", ")", "\n", "models", ".", "load_final_models", "(", "False", ")", "\n", "\n", "# Scoring objects to store results", "\n", "new_ocr_scoring", "=", "Scoring", "(", ")", "\n", "original_ocr_scoring", "=", "Scoring", "(", ")", "\n", "\n", "# open test set json file", "\n", "total", "=", "0", "\n", "with", "open", "(", "test_set", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "lines", ":", "\n", "\t\t", "lines", "=", "[", "line", "for", "line", "in", "lines", "]", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\t\t\t", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "not", "'image'", "in", "info", "or", "not", "'gt'", "in", "info", "or", "not", "'id'", "in", "info", ":", "\n", "\t\t\t\t", "print", "(", "\"json line does not include required 'image', 'gt' and 'id' properties\"", ")", "\n", "continue", "\n", "", "image", "=", "cv2", ".", "imread", "(", "info", "[", "'image'", "]", ")", "\n", "\n", "block", "=", "Block", "(", "image", ")", "\n", "\n", "# get gt text and run ocr", "\n", "gt_block_id", "=", "None", "\n", "if", "'gt-block-id'", "in", "info", ":", "\n", "\t\t\t\t", "gt_block_id", "=", "info", "[", "'gt-block-id'", "]", "\n", "\n", "", "block", ".", "name", "=", "info", "[", "'id'", "]", "\n", "\n", "block", ".", "ocr_gt", "=", "get_alto_text", "(", "info", "[", "'gt'", "]", ",", "gt_block_id", ")", "\n", "block", "=", "ocr", "(", "block", ",", "models", ")", "\n", "block", ".", "score", "=", "new_ocr_scoring", ".", "get_score", "(", "block", ",", "new_ocr", "=", "True", ",", "average", "=", "False", ")", "\n", "\n", "# compare to original ocr output", "\n", "if", "'ori'", "in", "info", ":", "\n", "# ori_block = Block(image)", "\n", "\t\t\t\t", "if", "'ori-block-id'", "in", "info", ":", "\n", "\t\t\t\t\t", "ori_block_id", "=", "info", "[", "'ori-block-id'", "]", "\n", "", "block", ".", "ocr_ori", "=", "get_alto_text", "(", "info", "[", "'ori'", "]", ",", "ori_block_id", ")", "\n", "block", ".", "score_ori", "=", "original_ocr_scoring", ".", "get_score", "(", "block", ",", "new_ocr", "=", "False", ",", "average", "=", "False", ")", "\n", "\n", "# render image", "\n", "", "if", "visual", ":", "\n", "\t\t\t\t", "visualize_test", "(", "block", "=", "block", ",", "confidence", "=", "confidence", ")", "\n", "\n", "# print results", "\n", "", "", "", "print", "(", "\"ocr test completed with average results:\"", ")", "\n", "print", "(", "\"new ocr score:\\t\"", "+", "str", "(", "round", "(", "new_ocr_scoring", ".", "get_set_score", "(", ")", ",", "3", ")", ")", ")", "\n", "if", "original_ocr_scoring", ".", "get_set_score", "(", ")", "!=", "None", ":", "\n", "\t\t", "print", "(", "\"ori ocr score:\\t\"", "+", "str", "(", "round", "(", "original_ocr_scoring", ".", "get_set_score", "(", ")", ",", "3", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.test.test_ocr.get_alto_text": [[70, 103], ["list", "lxml.etree.parse", "etree.parse.iter", "print", "e.tag.endswith", "list.append", "e.tag.endswith", "e.get", "e.get", "e.tag.endswith", "e.tag.endswith", "list.append"], "function", ["None"], ["", "", "def", "get_alto_text", "(", "alto_path", ",", "block_id", "=", "None", ")", ":", "\n", "\t", "tree", "=", "None", "\n", "try", ":", "\n", "\t\t", "tree", "=", "etree", ".", "parse", "(", "alto_path", ")", "\n", "", "except", ":", "\n", "\t\t", "print", "(", "'problem opening alto at path '", "+", "alto_path", ")", "\n", "", "block_text", "=", "list", "(", ")", "\n", "line_text", "=", "\"\"", "\n", "correct_block", "=", "False", "\n", "if", "tree", "!=", "None", ":", "\n", "\t\t", "for", "e", "in", "tree", ".", "iter", "(", ")", ":", "\n", "\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "\"TextBlock\"", ")", ":", "\n", "\t\t\t\t", "if", "e", ".", "get", "(", "'ID'", ")", "==", "block_id", ":", "\n", "\t\t\t\t\t", "correct_block", "=", "True", "\n", "", "elif", "block_id", "==", "None", ":", "\n", "\t\t\t\t\t", "correct_block", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "correct_block", "=", "False", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "\"String\"", ")", ":", "\n", "\t\t\t\t", "word", "=", "e", ".", "get", "(", "\"CONTENT\"", ")", "\n", "if", "word", "!=", "None", "and", "correct_block", ":", "\n", "\t\t\t\t\t", "line_text", "+=", "word", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'SP'", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "line_text", "+=", "\" \"", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "'TextLine'", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "if", "line_text", "!=", "\"\"", ":", "\n", "\t\t\t\t\t\t", "block_text", ".", "append", "(", "line_text", ")", "\n", "line_text", "=", "\"\"", "\n", "", "", "", "", "if", "line_text", "!=", "\"\"", ":", "\n", "\t\t\t", "block_text", ".", "append", "(", "line_text", ")", "\n", "", "", "return", "'\\n'", ".", "join", "(", "block_text", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.train_ocr.train_ocr_model": [[6, 38], ["list", "os.walk", "subprocess.call", "os.walk", "os.remove", "print", "os.path.isdir", "print", "exit", "open", "f.endswith", "paths_file.write", "list.append", "os.rename", "f.startswith", "f.endswith", "os.remove", "constants.MODELS_PATH.split"], "function", ["None"], ["def", "train_ocr_model", "(", "train_set_name", ",", "font", ",", "model_name", ")", ":", "\n", "\n", "# check if images dir exists", "\n", "\t", "images_dir", "=", "ct", ".", "TRAIN_SETS_PATH", "+", "train_set_name", "+", "'/'", "+", "font", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "images_dir", ")", ":", "\n", "\t\t", "print", "(", "train_set_name", "+", "\" in combination with \"", "+", "font", "+", "\" does not exist in \"", "+", "ct", ".", "TRAIN_SETS_PATH", ")", "\n", "exit", "(", ")", "\n", "\n", "# create paths file", "\n", "", "paths", "=", "list", "(", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "images_dir", ")", ":", "\n", "\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t", "if", "f", ".", "endswith", "(", "'.png'", ")", ":", "\n", "\t\t\t\t", "paths", ".", "append", "(", "root", "+", "'/'", "+", "f", ")", "\n", "", "", "", "path_to_paths", "=", "ct", ".", "TRAIN_SETS_PATH", "+", "train_set_name", "+", "'/'", "+", "font", "+", "'-paths.txt'", "\n", "with", "open", "(", "path_to_paths", ",", "'a'", ",", "encoding", "=", "'utf-8'", ")", "as", "paths_file", ":", "\n", "\t\t", "for", "p", "in", "paths", ":", "\n", "\t\t\t", "paths_file", ".", "write", "(", "p", "+", "'\\n'", ")", "\n", "\n", "", "", "model_name", "=", "model_name", "+", "\"-\"", "+", "font", "\n", "\n", "command", "=", "\"ketos train --device \"", "+", "ct", ".", "DEVICE", "+", "\" --training-files \"", "+", "path_to_paths", "+", "\" -o \"", "+", "ct", ".", "MODELS_PATH", "+", "model_name", "+", "\" -N 3\"", "\n", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ct", ".", "MODELS_PATH", ")", ":", "\n", "\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t", "if", "f", "==", "model_name", "+", "'_best.mlmodel'", ":", "\n", "\t\t\t\t", "os", ".", "rename", "(", "ct", ".", "MODELS_PATH", "+", "model_name", "+", "'_best.mlmodel'", ",", "ct", ".", "MODELS_PATH", "+", "model_name", "+", "'.mlmodel'", ")", "\n", "", "elif", "f", ".", "startswith", "(", "model_name", ")", "and", "f", ".", "endswith", "(", "'.mlmodel'", ")", ":", "\n", "\t\t\t\t", "os", ".", "remove", "(", "root", "+", "'/'", "+", "f", ")", "\n", "", "", "", "os", ".", "remove", "(", "path_to_paths", ")", "\n", "\n", "print", "(", "'\\n'", "+", "ct", ".", "MODELS_PATH", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "model_name", "+", "' has been created'", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.analyze_text": [[25, 43], ["dict", "c.isspace", "hex", "ord"], "function", ["None"], ["def", "analyze_text", "(", "text", ",", "font", ")", ":", "\n", "\n", "\t", "global", "char_count", "\n", "global", "char_dict", "\n", "\n", "if", "not", "font", "in", "char_dict", ":", "\n", "\t\t", "char_dict", "[", "font", "]", "=", "dict", "(", ")", "\n", "\n", "", "for", "c", "in", "text", ":", "\n", "\t\t", "if", "c", ".", "isspace", "(", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "char_count", "+=", "1", "\n", "code", "=", "hex", "(", "ord", "(", "c", ")", ")", "\n", "entry", "=", "(", "c", ",", "code", ")", "\n", "if", "entry", "in", "char_dict", "[", "font", "]", ":", "\n", "\t\t\t", "char_dict", "[", "font", "]", "[", "entry", "]", "=", "char_dict", "[", "font", "]", "[", "entry", "]", "+", "1", "\n", "", "else", ":", "\n", "\t\t\t", "char_dict", "[", "font", "]", "[", "entry", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.save_pair": [[45, 61], ["create_pairs.analyze_text", "str().zfill", "cv2.imwrite", "open", "open.write", "open.close", "os.path.exists", "os.makedirs", "text.strip", "str"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.analyze_text"], ["", "", "", "def", "save_pair", "(", "img", ",", "set_name", ",", "font", ",", "text", ",", "line_type", ")", ":", "\n", "\n", "\t", "global", "line_count", "\n", "\n", "line_number", "=", "line_count", "[", "font", "]", "[", "'total'", "]", "\n", "analyze_text", "(", "text", ",", "font", ")", "\n", "name", "=", "str", "(", "line_number", ")", ".", "zfill", "(", "ct", ".", "ZFILL", ")", "\n", "dir_font", "=", "ct", ".", "TRAIN_SETS_PATH", "+", "set_name", "+", "\"/\"", "+", "font", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_font", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "dir_font", ")", "\n", "", "cv2", ".", "imwrite", "(", "dir_font", "+", "name", "+", "\".png\"", ",", "img", ")", "\n", "file2write", "=", "open", "(", "dir_font", "+", "name", "+", "\".gt.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "file2write", ".", "write", "(", "text", ".", "strip", "(", ")", ")", "\n", "file2write", ".", "close", "(", ")", "\n", "line_count", "[", "font", "]", "[", "line_type", "]", "+=", "1", "\n", "line_count", "[", "font", "]", "[", "'total'", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.add_existing_pairs": [[63, 79], ["print", "tqdm.tqdm", "list", "os.walk", "f.endswith", "f.endswith", "open", "open.read().strip", "create_pairs.check_against_whitelist", "path.replace().replace", "open.read", "path.replace", "create_pairs.save_pair", "ocr.pipe.bin.bin_otsu", "cv2.imread"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.check_against_whitelist", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.save_pair", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu"], ["", "def", "add_existing_pairs", "(", "existing_dir", ",", "set_name", ")", ":", "\n", "\n", "\t", "print", "(", "\"integrating existing lines...\"", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "tqdm", "(", "list", "(", "os", ".", "walk", "(", "existing_dir", ")", ")", ")", ":", "\n", "\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t", "path", "=", "root", "+", "'/'", "+", "f", "\n", "if", "f", ".", "endswith", "(", "'.png'", ")", "or", "f", ".", "endswith", "(", "'.tif'", ")", ":", "\n", "\t\t\t\t", "label_file", "=", "open", "(", "path", ".", "replace", "(", "'.png'", ",", "'.gt.txt'", ")", ".", "replace", "(", "'.tif'", ",", "'.gt.txt'", ")", ",", "'r'", ")", "\n", "label", "=", "label_file", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "label", "=", "check_against_whitelist", "(", "label", ")", "\n", "if", "label", "!=", "None", ":", "\n", "\t\t\t\t\t", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t\t\t\t\t", "if", "font", "in", "path", ":", "\n", "\t\t\t\t\t\t\t", "img", "=", "bin_otsu", "(", "cv2", ".", "imread", "(", "path", ")", ")", "[", "0", "]", "\n", "save_pair", "(", "img", ",", "set_name", ",", "font", ",", "label", ",", "'existing'", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.check_against_whitelist": [[81, 92], ["None"], "function", ["None"], ["", "", "", "", "", "", "", "def", "check_against_whitelist", "(", "text", ")", ":", "\n", "\n", "\t", "new_text", "=", "\"\"", "\n", "for", "c", "in", "text", ":", "\n", "\t\t", "if", "c", "in", "ct", ".", "REPLACEMENTS", ":", "\n", "\t\t\t", "new_text", "+=", "ct", ".", "REPLACEMENTS", "[", "c", "]", "\n", "", "elif", "c", "not", "in", "ct", ".", "WHITE_LIST", "and", "c", "!=", "' '", ":", "\n", "\t\t\t", "return", "None", "\n", "", "else", ":", "\n", "\t\t\t", "new_text", "+=", "c", "\n", "", "", "return", "new_text", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.generate_art_lines": [[94, 110], ["list", "range", "re.sub", "create_pairs.check_against_whitelist", "random.randrange", "list.append", "len", "random.randrange", "len"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.check_against_whitelist"], ["", "def", "generate_art_lines", "(", "n", ",", "tokens", ")", ":", "\n", "\n", "\t", "text_lines", "=", "list", "(", ")", "\n", "stop", "=", "False", "\n", "while", "not", "stop", ":", "\n", "\t\t", "length", "=", "randrange", "(", "ct", ".", "ART_LINE_WORDS_MAX", "-", "ct", ".", "ART_LINE_WORDS_MIN", ")", "+", "ct", ".", "ART_LINE_WORDS_MIN", "\n", "text", "=", "\"\"", "\n", "for", "_", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "\t\t\t", "text", "+=", "tokens", "[", "randrange", "(", "len", "(", "tokens", ")", ")", "]", "+", "' '", "\n", "", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "check_against_whitelist", "(", "text", ")", "\n", "if", "text", "!=", "None", ":", "\n", "\t\t\t", "text_lines", ".", "append", "(", "text", ")", "\n", "if", "len", "(", "text_lines", ")", "==", "n", ":", "\n", "\t\t\t\t", "stop", "=", "True", "\n", "", "", "", "return", "text_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.generate_artificial_data": [[112, 161], ["print", "list", "os.walk", "int", "math.ceil", "tqdm.tqdm", "range", "trdg.generators.GeneratorFromStrings", "pbar.update", "f.endswith", "list.append", "len", "len", "ocr.pipe.bin.bin_otsu", "create_pairs.save_pair", "len", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.save_pair"], ["", "def", "generate_artificial_data", "(", "dataset_dir", ",", "text_lines", ",", "font", ")", ":", "\n", "\n", "\t", "print", "(", "font", ")", "\n", "fonts", "=", "list", "(", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ct", ".", "ART_FONTS_PATH", ")", ":", "\n", "\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t", "if", "font", "in", "root", "and", "f", ".", "endswith", "(", "'.ttf'", ")", ":", "\n", "\t\t\t\t", "fonts", ".", "append", "(", "root", "+", "'/'", "+", "f", ")", "\n", "\n", "", "", "", "BATCH_SIZE", "=", "10", "\n", "\n", "iterations", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "text_lines", ")", "/", "BATCH_SIZE", ")", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "text_lines", ")", ")", "as", "pbar", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "iterations", ")", ":", "\n", "\n", "\t\t\t", "sub_lines", "=", "None", "\n", "if", "i", "==", "iterations", "-", "1", ":", "\n", "\t\t\t\t", "sub_lines", "=", "text_lines", "[", "-", "(", "len", "(", "text_lines", ")", "%", "BATCH_SIZE", ")", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "sub_lines", "=", "text_lines", "[", "i", "*", "BATCH_SIZE", ":", "(", "i", "+", "1", ")", "*", "BATCH_SIZE", "]", "\n", "", "skew", "=", "0", "\n", "distortion", "=", "0", "\n", "blur", "=", "0", "\n", "size", "=", "38", "+", "(", "i", "%", "10", ")", "\n", "if", "i", "%", "4", "==", "0", ":", "\n", "\t\t\t\t", "skew", "=", "1", "\n", "", "if", "i", "%", "10", "==", "0", ":", "\n", "\t\t\t\t", "distortion", "=", "3", "\n", "", "if", "i", "%", "8", "==", "0", ":", "\n", "\t\t\t\t", "blur", "=", "1", "\n", "", "generator", "=", "GeneratorFromStrings", "(", "\n", "sub_lines", ",", "\n", "count", "=", "len", "(", "sub_lines", ")", ",", "\n", "blur", "=", "blur", ",", "\n", "size", "=", "size", ",", "\n", "fonts", "=", "fonts", ",", "\n", "skewing_angle", "=", "skew", ",", "\n", "random_skew", "=", "True", ",", "\n", "background_type", "=", "1", ",", "\n", "random_blur", "=", "True", ",", "\n", "distorsion_type", "=", "distortion", ",", "\n", "fit", "=", "False", ",", "\n", "margins", "=", "(", "2", ",", "ct", ".", "LINE_IMG_PAD", ",", "2", ",", "ct", ".", "LINE_IMG_PAD", ")", "\n", ")", "\n", "for", "img", ",", "lbl", "in", "generator", ":", "\n", "\t\t\t\t", "img", ",", "_", "=", "bin_otsu", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "save_pair", "(", "img", ",", "dataset_dir", ",", "font", ",", "lbl", ",", "'artificial'", ")", "\n", "", "pbar", ".", "update", "(", "BATCH_SIZE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.cut_text": [[163, 169], ["create_pairs.check_against_whitelist", "create_pairs.save_pair"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.check_against_whitelist", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.save_pair"], ["", "", "", "def", "cut_text", "(", "x", ",", "y", ",", "width", ",", "height", ",", "image_file", ",", "text", ",", "font", ",", "set_name", ")", ":", "\n", "\n", "\t", "text", "=", "check_against_whitelist", "(", "text", ")", "\n", "if", "text", "!=", "None", ":", "\n", "\t\t", "cut_image", "=", "image_file", "[", "y", ":", "y", "+", "height", ",", "x", ":", "ct", ".", "LINE_IMG_PAD", "*", "2", "+", "x", "+", "width", "]", "\n", "save_pair", "(", "cut_image", ",", "set_name", ",", "font", ",", "text", ",", "'new'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.cut_lines": [[171, 214], ["lxml.etree.parse", "etree.parse.iter", "e.tag.endswith", "e.tag.endswith", "e.get", "e.tag.endswith", "create_pairs.cut_text", "e.tag.endswith", "int", "int", "int", "int", "e.tag.endswith", "round", "round", "round", "round", "e.get", "e.get", "create_pairs.cut_text", "float", "float", "float", "float", "int", "e.get", "e.get", "e.get", "e.get"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.cut_text", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.cut_text"], ["", "", "def", "cut_lines", "(", "alto_path", ",", "block_id", ",", "block", ",", "min_confidence", ",", "set_name", ")", ":", "\n", "\t", "tree", "=", "None", "\n", "try", ":", "\n", "\t\t", "tree", "=", "etree", ".", "parse", "(", "alto_path", ")", "\n", "", "except", ":", "\n", "\t\t", "pass", "\n", "", "if", "tree", "!=", "None", ":", "\n", "\t\t", "x", "=", "None", "\n", "y", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "text", "=", "\"\"", "\n", "correct_block", "=", "False", "\n", "for", "e", "in", "tree", ".", "iter", "(", ")", ":", "\n", "\t\t\t", "if", "e", ".", "tag", ".", "endswith", "(", "'TextBlock'", ")", "or", "e", ".", "tag", ".", "endswith", "(", "'ComposedBlock'", ")", ":", "\n", "\t\t\t\t", "b_id", "=", "e", ".", "get", "(", "\"ID\"", ")", "\n", "if", "block_id", "==", "None", "or", "block_id", "==", "b_id", ":", "\n", "\t\t\t\t\t", "correct_block", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "correct_block", "=", "False", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "\"TextLine\"", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "if", "text", "!=", "\"\"", ":", "\n", "\t\t\t\t\t\t", "if", "max_line_count", "[", "block", ".", "font", "]", "[", "'total'", "]", "==", "-", "1", "or", "max_line_count", "[", "block", ".", "font", "]", "[", "'total'", "]", ">", "line_count", "[", "block", ".", "font", "]", "[", "'total'", "]", ":", "\n", "\t\t\t\t\t\t\t", "cut_text", "(", "x", ",", "y", ",", "width", ",", "height", ",", "block", ".", "bin_image", ",", "text", ",", "block", ".", "font", ",", "set_name", ")", "\n", "", "", "text", "=", "\"\"", "\n", "x", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "e", ".", "get", "(", "\"HPOS\"", ")", ")", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "e", ".", "get", "(", "\"VPOS\"", ")", ")", ")", ")", "\n", "width", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "e", ".", "get", "(", "\"WIDTH\"", ")", ")", ")", ")", "\n", "height", "=", "int", "(", "round", "(", "300.0", "/", "254.0", "*", "float", "(", "e", ".", "get", "(", "\"HEIGHT\"", ")", ")", ")", ")", "\n", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "\"String\"", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "confidences", "=", "e", ".", "get", "(", "\"CC\"", ")", "\n", "text", "+=", "e", ".", "get", "(", "\"CONTENT\"", ")", "\n", "for", "c", "in", "confidences", ":", "\n", "\t\t\t\t\t\t", "if", "int", "(", "c", ")", ">", "min_confidence", ":", "\n", "\t\t\t\t\t\t\t", "text", "=", "\"\"", "\n", "", "", "", "", "elif", "e", ".", "tag", ".", "endswith", "(", "\"SP\"", ")", ":", "\n", "\t\t\t\t", "if", "correct_block", ":", "\n", "\t\t\t\t\t", "text", "+=", "\" \"", "\n", "", "", "", "if", "text", "!=", "\"\"", ":", "\n", "\t\t\t", "if", "max_line_count", "[", "block", ".", "font", "]", "[", "'total'", "]", "==", "-", "1", "or", "max_line_count", "[", "block", ".", "font", "]", "[", "'total'", "]", ">", "line_count", "[", "block", ".", "font", "]", "[", "'total'", "]", ":", "\n", "\t\t\t\t", "cut_text", "(", "x", ",", "y", ",", "width", ",", "height", ",", "block", ".", "bin_image", ",", "text", ",", "block", ".", "font", ",", "set_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.add_fonts_info": [[216, 223], ["sum", "open", "f.write", "f.write", "str", "str", "str", "str"], "function", ["None"], ["", "", "", "", "def", "add_fonts_info", "(", "info", ",", "font", ",", "dataset_dir", ")", ":", "\n", "\n", "\t", "total_sum", "=", "sum", "(", "[", "x", "[", "1", "]", "for", "x", "in", "info", "]", ")", "\n", "with", "open", "(", "dataset_dir", "+", "'/'", "+", "font", "+", "'-chars'", "+", "'.txt'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "\t\t", "for", "i", "in", "info", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "i", "[", "0", "]", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "i", "[", "0", "]", "[", "1", "]", ")", "+", "'\\t'", "+", "str", "(", "i", "[", "1", "]", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'total: '", "+", "str", "(", "total_sum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.create_train_pairs": [[226, 300], ["print", "create_pairs.add_existing_pairs", "print", "print", "open", "tqdm.tqdm", "print", "sorted", "create_pairs.add_fonts_info", "list", "create_pairs.generate_art_lines", "create_pairs.generate_artificial_data", "json.loads", "cv2.imread", "ocr.pipe.bin.bin_otsu", "ocr.pipe.block.Block", "create_pairs.cut_lines", "char_dict[].items", "open", "print", "seg.apply_seg.combiseg", "fcr.apply_fcr.predict_font", "str", "line.strip().split", "ocr.pipe.models.Models", "ocr.pipe.models.Models.load_fcr_model", "print", "constants.TRAIN_SETS_PATH.split", "line.strip"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.add_existing_pairs", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.add_fonts_info", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.generate_art_lines", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.generate_artificial_data", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu", "home.repos.pwc.inspect_result.natliblux_nautilusocr.train.create_pairs.cut_lines", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combiseg", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.predict_font", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_fcr_model"], ["", "", "def", "create_train_pairs", "(", "gt_set", ",", "confidence", ",", "set_name", ",", "existing_dir", ",", "n_lines", ",", "n_art_lines", ",", "art_text_file", ",", "fcr_model_name", ")", ":", "\n", "\n", "\t", "global", "line_count", "\n", "global", "max_line_count", "\n", "\n", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t", "max_line_count", "[", "font", "]", "=", "{", "\n", "'artificial'", ":", "n_art_lines", ",", "\n", "'total'", ":", "n_lines", "\n", "}", "\n", "line_count", "[", "font", "]", "=", "{", "\n", "'existing'", ":", "0", ",", "\n", "'artificial'", ":", "0", ",", "\n", "'new'", ":", "0", ",", "\n", "'total'", ":", "0", "\n", "}", "\n", "\n", "# existing pairs that have been prepared beforehand", "\n", "", "if", "existing_dir", "!=", "None", ":", "\n", "\t\t", "add_existing_pairs", "(", "existing_dir", ",", "set_name", ")", "\n", "\n", "# artificially created pairs", "\n", "", "if", "n_art_lines", ">", "0", ":", "\n", "\t\t", "print", "(", "'generating artificial lines...'", ")", "\n", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t\t", "amount", "=", "max_line_count", "[", "font", "]", "[", "'artificial'", "]", "\n", "if", "amount", ">", "0", ":", "\n", "\t\t\t\t", "art_tokens", "=", "list", "(", ")", "\n", "with", "open", "(", "art_text_file", ",", "'r'", ",", "encoding", "=", "'utf-8\"'", ")", "as", "text_file", ":", "\n", "\t\t\t\t\t", "for", "line", "in", "text_file", ":", "\n", "\t\t\t\t\t\t", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "art_tokens", "=", "art_tokens", "+", "tokens", "\n", "", "", "art_lines", "=", "generate_art_lines", "(", "amount", ",", "art_tokens", ")", "\n", "generate_artificial_data", "(", "set_name", ",", "art_lines", ",", "font", ")", "\n", "\n", "# new pairs", "\n", "", "", "", "if", "gt_set", "!=", "None", ":", "\n", "\t\t", "models", "=", "None", "\n", "print", "(", "'creating new lines...'", ")", "\n", "with", "open", "(", "gt_set", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "lines", ":", "\n", "\t\t\t", "lines", "=", "[", "line", "for", "line", "in", "lines", "]", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\t\t\t\t", "if", "'gt'", "not", "in", "line", "or", "'image'", "not", "in", "line", ":", "\n", "\t\t\t\t\t", "print", "(", "\"json line does not include required 'image' and 'gt' properties\"", ")", "\n", "break", "\n", "", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "info", "[", "'image'", "]", ")", "\n", "bin_img", ",", "inv_img", "=", "bin_otsu", "(", "image", ")", "\n", "block", "=", "Block", "(", "image", ")", "\n", "block", ".", "inv_image", "=", "inv_img", "\n", "block", ".", "bin_image", "=", "bin_img", "\n", "if", "'font'", "in", "info", "and", "info", "[", "'font'", "]", "in", "ct", ".", "FONTS", ":", "\n", "\t\t\t\t\t", "block", ".", "font", "=", "info", "[", "'font'", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "models", "==", "None", ":", "\n", "\t\t\t\t\t\t", "models", "=", "Models", "(", ")", "\n", "models", ".", "load_fcr_model", "(", "fcr_model_name", ")", "\n", "", "block", ".", "lines", "=", "combiseg", "(", "block", ".", "inv_image", ")", "\n", "block", ".", "font", "=", "predict_font", "(", "block", ",", "models", ")", "\n", "if", "block", ".", "font", "==", "'unknown'", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'could not predict font of block, skipping block...'", ")", "\n", "continue", "\n", "", "", "gt_block_id", "=", "None", "\n", "if", "'gt-block-id'", "in", "info", ":", "\n", "\t\t\t\t\t", "gt_block_id", "=", "info", "[", "'gt-block-id'", "]", "\n", "", "cut_lines", "(", "info", "[", "'gt'", "]", ",", "gt_block_id", ",", "block", ",", "confidence", ",", "set_name", ")", "\n", "\n", "# recap", "\n", "", "", "", "print", "(", "ct", ".", "TRAIN_SETS_PATH", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "set_name", "+", "' has been created and contains the following number of lines:'", ")", "\n", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t", "if", "line_count", "[", "font", "]", "[", "'total'", "]", ">", "0", ":", "\n", "\t\t\t", "print", "(", "font", "+", "': '", "+", "str", "(", "line_count", "[", "font", "]", ")", ")", "\n", "sorted_stats", "=", "sorted", "(", "char_dict", "[", "font", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "add_fonts_info", "(", "sorted_stats", ",", "font", ",", "ct", ".", "TRAIN_SETS_PATH", "+", "set_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_fcr.get_data": [[13, 40], ["enumerate", "os.path.isdir", "print", "exit", "os.path.isdir", "cv2.imread", "pix.reshape.reshape", "images.append", "numpy.array", "numpy.array", "os.walk", "f.endswith", "paths.append", "labels.append"], "function", ["None"], ["def", "get_data", "(", "set_name", ")", ":", "\n", "\n", "\t", "full_path", "=", "ct", ".", "TRAIN_SETS_PATH", "+", "set_name", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "full_path", ")", ":", "\n", "\t\t", "print", "(", "\"train set with name \"", "+", "set_name", "+", "\" does not exist in directory \"", "+", "ct", ".", "TRAIN_SETS_PATH", ")", "\n", "exit", "(", ")", "\n", "\n", "", "paths", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "\n", "for", "i", ",", "font", "in", "enumerate", "(", "ct", ".", "FONTS", ")", ":", "\n", "\t\t", "if", "os", ".", "path", ".", "isdir", "(", "full_path", "+", "'/'", "+", "font", ")", ":", "\n", "\t\t\t", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "full_path", "+", "'/'", "+", "font", ")", ":", "\n", "\t\t\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t\t\t", "if", "f", ".", "endswith", "(", "'.png'", ")", ":", "\n", "\t\t\t\t\t\t", "paths", ".", "append", "(", "root", "+", "'/'", "+", "f", ")", "\n", "labels", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "", "", "for", "image", "in", "paths", ":", "\n", "\t\t", "pix", "=", "cv2", ".", "imread", "(", "image", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "pix", "=", "pix", ".", "reshape", "(", "ct", ".", "TARGET_CHAR_SIZE_FCR", ",", "ct", ".", "TARGET_CHAR_SIZE_FCR", ",", "1", ")", "\n", "pix", "=", "pix", "/", "255.0", "\n", "images", ".", "append", "(", "pix", ")", "\n", "\n", "", "return", "(", "np", ".", "array", "(", "images", ")", ",", "np", ".", "array", "(", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_fcr.train_model_fcr": [[42, 65], ["len", "tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.summary", "train_fcr.get_data", "tensorflow.keras.callbacks.EarlyStopping", "tensorflow.keras.models.Sequential.compile", "tensorflow.keras.models.Sequential.fit", "tensorflow.keras.models.Sequential.save", "print", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "os.path.isdir", "os.makedirs", "tensorflow.keras.optimizers.Adam", "constants.MODELS_PATH.split"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_fcr.get_data"], ["", "def", "train_model_fcr", "(", "set_name", ",", "model_name", ")", ":", "\n", "\n", "\t", "N_CLASSES", "=", "len", "(", "ct", ".", "FONTS", ")", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "ct", ".", "N_FILTERS_FCR", ",", "(", "5", ",", "5", ")", ",", "activation", "=", "ct", ".", "ACTIVATION_FCR", ",", "input_shape", "=", "(", "ct", ".", "TARGET_CHAR_SIZE_FCR", ",", "ct", ".", "TARGET_CHAR_SIZE_FCR", ",", "1", ")", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "ct", ".", "MAX_POOL_FCR", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "ct", ".", "N_FILTERS_FCR", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "ct", ".", "ACTIVATION_FCR", ")", ")", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "ct", ".", "MAX_POOL_FCR", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "ct", ".", "N_DENSE_FCR", ",", "activation", "=", "ct", ".", "ACTIVATION_FCR", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "ct", ".", "DROPOUT_FCR", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "N_CLASSES", ",", "activation", "=", "'softmax'", ")", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "X", ",", "Y", "=", "get_data", "(", "set_name", ")", "\n", "callback", "=", "EarlyStopping", "(", "monitor", "=", "\"val_loss\"", ",", "patience", "=", "ct", ".", "PATIENCE_FCR", ",", "restore_best_weights", "=", "True", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "ct", ".", "LEARNING_RATE_FCR", ")", ",", "loss", "=", "'sparse_categorical_crossentropy'", ")", "\n", "model", ".", "fit", "(", "X", ",", "Y", ",", "batch_size", "=", "ct", ".", "BATCH_SIZE_FCR", ",", "epochs", "=", "ct", ".", "MAX_EPOCHS_FCR", ",", "validation_split", "=", "ct", ".", "VALIDATION_PER_FCR", ",", "shuffle", "=", "True", ",", "callbacks", "=", "[", "callback", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ct", ".", "MODELS_PATH", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ct", ".", "MODELS_PATH", ")", "\n", "", "model", ".", "save", "(", "ct", ".", "MODELS_PATH", "+", "model_name", ")", "\n", "print", "(", "ct", ".", "MODELS_PATH", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "model_name", "+", "' has been created'", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.test_fcr.test_model_fcr": [[12, 39], ["ocr.pipe.models.Models", "ocr.pipe.models.Models.load_fcr_model", "print", "print", "open", "tqdm.tqdm", "json.loads", "cv2.imread", "ocr.pipe.block.Block", "ocr.pipe.bin.bin_otsu", "seg.apply_seg.combiseg", "fcr.apply_fcr.predict_font", "str"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.models.Models.load_fcr_model", "home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combiseg", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.predict_font"], ["def", "test_model_fcr", "(", "test_set", ",", "model_name", ")", ":", "\n", "\n", "\t", "models", "=", "Models", "(", ")", "\n", "models", ".", "load_fcr_model", "(", "model_name", ")", "\n", "\n", "correct", "=", "0", "\n", "wrong", "=", "0", "\n", "\n", "with", "open", "(", "test_set", ",", "\"r\"", ")", "as", "lines", ":", "\n", "\t\t", "lines", "=", "[", "line", "for", "line", "in", "lines", "]", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\t\t\t", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "image_path", "=", "info", "[", "\"image\"", "]", "\n", "gt_label", "=", "info", "[", "\"font\"", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "block", "=", "Block", "(", "img", ")", "\n", "_", ",", "inverted_image", "=", "bin_otsu", "(", "img", ")", "\n", "block", ".", "inv_image", "=", "inverted_image", "\n", "block", ".", "lines", "=", "combiseg", "(", "block", ".", "inv_image", ")", "\n", "pred", "=", "predict_font", "(", "block", ",", "models", ")", "\n", "if", "pred", "==", "gt_label", ":", "\n", "\t\t\t\t", "correct", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "wrong", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"font recognition test using \"", "+", "model_name", "+", "\" completed with results:\"", ")", "\n", "print", "(", "\"accuracy:\\t\"", "+", "str", "(", "correct", "/", "(", "correct", "+", "wrong", ")", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.train_set_fcr.create_train_set_fcr": [[11, 39], ["dict", "print", "print", "open", "tqdm.tqdm", "json.loads", "print", "cv2.imread", "ocr.pipe.bin.bin_otsu", "seg.apply_seg.combiseg", "fcr.char_segmenter_fcr.char_seg", "cv2.imwrite", "constants.TRAIN_SETS_PATH.split", "os.path.isdir", "os.makedirs", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.pipe.bin.bin_otsu", "home.repos.pwc.inspect_result.natliblux_nautilusocr.seg.apply_seg.combiseg", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.char_seg"], ["def", "create_train_set_fcr", "(", "json_set", ",", "max_chars", ",", "set_name", ")", ":", "\n", "\n", "\t", "class_counters", "=", "dict", "(", ")", "\n", "for", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t", "class_counters", "[", "font", "]", "=", "0", "\n", "\n", "", "with", "open", "(", "json_set", ",", "\"r\"", ")", "as", "lines", ":", "\n", "\t\t", "lines", "=", "[", "line", "for", "line", "in", "lines", "]", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\t\t\t", "info", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "'font'", "in", "info", "and", "'image'", "in", "info", ":", "\n", "\t\t\t\t", "font", "=", "info", "[", "'font'", "]", "\n", "if", "font", "in", "ct", ".", "FONTS", ":", "\n", "\t\t\t\t\t", "path", "=", "info", "[", "'image'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "_", ",", "inverted_image", "=", "bin_otsu", "(", "img", ")", "\n", "lines", "=", "combiseg", "(", "inverted_image", ")", "\n", "train_chars", "=", "char_seg", "(", "inverted_image", ",", "lines", ",", "max_chars", ")", "\n", "for", "train_char", "in", "train_chars", ":", "\n", "\t\t\t\t\t\t", "folder_name", "=", "ct", ".", "TRAIN_SETS_PATH", "+", "set_name", "+", "'/'", "+", "font", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder_name", ")", ":", "\n", "\t\t\t\t\t\t\t", "os", ".", "makedirs", "(", "folder_name", ")", "\n", "", "cv2", ".", "imwrite", "(", "folder_name", "+", "\"/\"", "+", "str", "(", "class_counters", "[", "font", "]", ")", ".", "zfill", "(", "ct", ".", "ZFILL", ")", "+", "\".png\"", ",", "train_char", ")", "\n", "class_counters", "[", "font", "]", "=", "class_counters", "[", "font", "]", "+", "1", "\n", "", "", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"ignoring text block since 'font' and/or 'image' properties are missing\"", ")", "\n", "", "", "", "print", "(", "ct", ".", "TRAIN_SETS_PATH", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "set_name", "+", "' has been created and contains the following number of chars:'", ")", "\n", "print", "(", "class_counters", ")", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.resize_chars": [[6, 31], ["list", "tuple", "len", "len", "float", "max", "cv2.resize", "cv2.copyMakeBorder", "list.append", "min", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "resize_chars", "(", "char_imgs", ")", ":", "\n", "\n", "\t", "final_imgs", "=", "list", "(", ")", "\n", "for", "char_img", "in", "char_imgs", ":", "\n", "\t\t", "old_size", "=", "(", "len", "(", "char_img", "[", "0", "]", ")", ",", "len", "(", "char_img", ")", ")", "\n", "ratio", "=", "float", "(", "ct", ".", "TARGET_CHAR_SIZE_FCR", ")", "/", "max", "(", "old_size", ")", "\n", "new_size", "=", "tuple", "(", "[", "min", "(", "ct", ".", "TARGET_CHAR_SIZE_FCR", ",", "int", "(", "x", "*", "ratio", ")", ")", "for", "x", "in", "old_size", "]", ")", "\n", "if", "new_size", "[", "0", "]", ">", "0", "and", "new_size", "[", "1", "]", ">", "0", ":", "\n", "\t\t\t", "char_img", "=", "cv2", ".", "resize", "(", "char_img", ",", "new_size", ")", "\n", "hor_pad", "=", "ct", ".", "TARGET_CHAR_SIZE_FCR", "-", "new_size", "[", "0", "]", "\n", "left_pad", "=", "hor_pad", "/", "2", "\n", "right_pad", "=", "hor_pad", "/", "2", "\n", "if", "hor_pad", "%", "2", "==", "1", ":", "\n", "\t\t\t\t", "left_pad", "-=", "0.5", "\n", "right_pad", "+=", "0.5", "\n", "", "ver_pad", "=", "ct", ".", "TARGET_CHAR_SIZE_FCR", "-", "new_size", "[", "1", "]", "\n", "top_pad", "=", "ver_pad", "/", "2", "\n", "bottom_pad", "=", "ver_pad", "/", "2", "\n", "if", "ver_pad", "%", "2", "==", "1", ":", "\n", "\t\t\t\t", "top_pad", "-=", "0.5", "\n", "bottom_pad", "+=", "0.5", "\n", "", "char_img", "=", "cv2", ".", "copyMakeBorder", "(", "char_img", ",", "int", "(", "top_pad", ")", ",", "int", "(", "bottom_pad", ")", ",", "int", "(", "left_pad", ")", ",", "int", "(", "right_pad", ")", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "final_imgs", ".", "append", "(", "char_img", ")", "\n", "\n", "", "", "return", "final_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.crop_chars": [[33, 54], ["list", "range", "list.append", "range"], "function", ["None"], ["", "def", "crop_chars", "(", "chars", ",", "matrix", ",", "img", ")", ":", "\n", "\n", "# crop char image", "\n", "\t", "char_imgs", "=", "list", "(", ")", "\n", "for", "char", "in", "chars", ":", "\n", "\t\t", "label", "=", "char", "[", "0", "]", "\n", "x", "=", "char", "[", "1", "]", "\n", "y", "=", "char", "[", "2", "]", "\n", "w", "=", "char", "[", "3", "]", "\n", "h", "=", "char", "[", "4", "]", "\n", "char_img", "=", "img", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n", "# filter out every other component that might be in the image", "\n", "char_matrix", "=", "matrix", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "h", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "0", ",", "w", ")", ":", "\n", "\t\t\t\t", "if", "char_matrix", "[", "i", "]", "[", "j", "]", "!=", "0", "and", "char_matrix", "[", "i", "]", "[", "j", "]", "!=", "label", ":", "\n", "\t\t\t\t\t", "char_img", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "char_imgs", ".", "append", "(", "char_img", ")", "\n", "\n", "", "return", "char_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.pick_chars": [[56, 79], ["list", "len", "len", "len", "list.append", "len", "len"], "function", ["None"], ["", "def", "pick_chars", "(", "chars_per_lines", ",", "n_chars", ")", ":", "\n", "\n", "\t", "chars_found", "=", "list", "(", ")", "\n", "iteration", "=", "0", "\n", "while", "len", "(", "chars_found", ")", "<", "n_chars", ":", "\n", "\t\t", "found_at_least_one", "=", "False", "\n", "for", "line", "in", "chars_per_lines", ":", "\n", "\t\t\t", "if", "len", "(", "line", ")", ">", "iteration", ":", "\n", "\t\t\t\t", "chars_found", ".", "append", "(", "line", "[", "iteration", "]", ")", "\n", "found_at_least_one", "=", "True", "\n", "if", "len", "(", "chars_found", ")", "==", "n_chars", ":", "\n", "\t\t\t\t\t", "found_at_least_one", "=", "False", "\n", "break", "\n", "", "", "", "if", "not", "found_at_least_one", ":", "\n", "\t\t\t", "break", "\n", "", "iteration", "+=", "1", "\n", "\n", "# n_chars == sys.maxsize in case we want to create train samples", "\n", "# otherwise we want to avoid an even number of chars for the nn to make predictions", "\n", "", "if", "n_chars", "!=", "sys", ".", "maxsize", "and", "len", "(", "chars_found", ")", "%", "2", "==", "0", "and", "len", "(", "chars_found", ")", ">", "0", ":", "\n", "\t\t", "chars_found", "=", "chars_found", "[", ":", "-", "1", "]", "\n", "\n", "", "return", "chars_found", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.isolate_chars": [[81, 146], ["cv2.connectedComponentsWithStats", "dict", "enumerate", "list", "int", "int", "enumerate", "chars_list.sort", "list", "enumerate", "list.sort", "list.reverse", "list.append", "round", "zip", "round", "abs", "chars_per_line[].append", "list.append"], "function", ["None"], ["", "def", "isolate_chars", "(", "img", ",", "lines", ")", ":", "\n", "\n", "# run connectedcomponents and calculate middle of every text line", "\n", "\t", "comp_output", "=", "cv2", ".", "connectedComponentsWithStats", "(", "img", ",", "connectivity", "=", "8", ")", "\n", "matrix", "=", "comp_output", "[", "1", "]", "\n", "stats", "=", "comp_output", "[", "2", "]", "\n", "y1_values", "=", "[", "x", "[", "1", "]", "for", "x", "in", "lines", "]", "\n", "y2_values", "=", "[", "x", "[", "3", "]", "for", "x", "in", "lines", "]", "\n", "mid_lines", "=", "[", "int", "(", "round", "(", "(", "y1", "+", "y2", ")", "/", "2", ")", ")", "for", "y1", ",", "y2", "in", "zip", "(", "y1_values", ",", "y2_values", ")", "]", "\n", "\n", "# assign every component (of bound size) to the closest line", "\n", "chars_per_line", "=", "dict", "(", ")", "\n", "for", "label", ",", "comp", "in", "enumerate", "(", "stats", ")", ":", "\n", "\t\t", "if", "label", "==", "0", ":", "\n", "\t\t\t", "continue", "\n", "", "x", "=", "comp", "[", "0", "]", "\n", "y", "=", "comp", "[", "1", "]", "\n", "w", "=", "comp", "[", "2", "]", "\n", "h", "=", "comp", "[", "3", "]", "\n", "if", "w", "<", "ct", ".", "MIN_CHAR_SIZE_FCR", "or", "w", ">", "ct", ".", "MAX_CHAR_SIZE_FCR", "or", "h", "<", "ct", ".", "MIN_CHAR_SIZE_FCR", "or", "h", ">", "ct", ".", "MAX_CHAR_SIZE_FCR", ":", "\n", "\t\t\t", "continue", "\n", "", "mid", "=", "int", "(", "round", "(", "y", "+", "(", "h", "/", "2", ")", ")", ")", "\n", "line_index", "=", "0", "\n", "min_diff", "=", "sys", ".", "maxsize", "\n", "for", "index", ",", "mid_line", "in", "enumerate", "(", "mid_lines", ")", ":", "\n", "\t\t\t", "diff", "=", "abs", "(", "mid", "-", "mid_line", ")", "\n", "if", "diff", "<", "min_diff", ":", "\n", "\t\t\t\t", "min_diff", "=", "diff", "\n", "line_index", "=", "index", "\n", "", "", "char_coords", "=", "(", "label", ",", "x", ",", "y", ",", "w", ",", "h", ")", "\n", "if", "line_index", "in", "chars_per_line", ":", "\n", "\t\t\t", "chars_per_line", "[", "line_index", "]", ".", "append", "(", "char_coords", ")", "\n", "", "else", ":", "\n", "\t\t\t", "chars_per_line", "[", "line_index", "]", "=", "[", "char_coords", "]", "\n", "\n", "# for every line, for all components, sort them by distance to their left neighbour", "\n", "# component with lowest x value (left most component) is assigned default value sys.maxsize", "\n", "# idea: extract first letters of words since they typically contain more clues for the font class", "\n", "", "", "final_chars", "=", "list", "(", ")", "\n", "for", "line_index", "in", "chars_per_line", ":", "\n", "\t\t", "chars_list", "=", "chars_per_line", "[", "line_index", "]", "\n", "chars_list", ".", "sort", "(", "key", "=", "lambda", "pair", ":", "pair", "[", "1", "]", ")", "\n", "char_distances", "=", "list", "(", ")", "\n", "lastx2", "=", "0", "\n", "for", "i", ",", "char_coord", "in", "enumerate", "(", "chars_list", ")", ":", "\n", "\t\t\t", "label", "=", "char_coord", "[", "0", "]", "\n", "x", "=", "char_coord", "[", "1", "]", "\n", "y", "=", "char_coord", "[", "2", "]", "\n", "w", "=", "char_coord", "[", "3", "]", "\n", "h", "=", "char_coord", "[", "4", "]", "\n", "dist", "=", "None", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "if", "line_index", "==", "0", ":", "\n", "\t\t\t\t\t", "dist", "=", "sys", ".", "maxsize", "# we want to pick the first letter in the first line", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dist", "=", "0", "# we do not want to pick the first letters of the other line (they sometimes represent digits (not meaningful for font class))", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "dist", "=", "x", "-", "lastx2", "\n", "", "char_distances", ".", "append", "(", "[", "label", ",", "x", ",", "y", ",", "w", ",", "h", ",", "dist", "]", ")", "\n", "lastx2", "=", "x", "+", "h", "\n", "", "char_distances", ".", "sort", "(", "key", "=", "lambda", "pair", ":", "pair", "[", "5", "]", ")", "\n", "char_distances", ".", "reverse", "(", ")", "\n", "final_chars", ".", "append", "(", "char_distances", ")", "\n", "\n", "", "return", "final_chars", ",", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.char_seg": [[148, 156], ["char_segmenter_fcr.isolate_chars", "char_segmenter_fcr.pick_chars", "char_segmenter_fcr.crop_chars", "char_segmenter_fcr.resize_chars"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.isolate_chars", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.pick_chars", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.crop_chars", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.resize_chars"], ["", "def", "char_seg", "(", "img", ",", "lines", ",", "n_chars", "=", "sys", ".", "maxsize", ")", ":", "\n", "\n", "# n_chars=sys.maxsize i.e. \"get them all\" is used to generate training samples", "\n", "\t", "chars", ",", "matrix", "=", "isolate_chars", "(", "img", ",", "lines", ")", "\n", "picked_chars", "=", "pick_chars", "(", "chars", ",", "n_chars", ")", "\n", "cropped_chars", "=", "crop_chars", "(", "picked_chars", ",", "matrix", ",", "img", ")", "\n", "resized_chars", "=", "resize_chars", "(", "cropped_chars", ")", "\n", "return", "resized_chars", "", "", ""]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.class_to_label": [[10, 14], ["None"], "function", ["None"], ["def", "class_to_label", "(", "font_class", ")", ":", "\n", "\t", "if", "font_class", "==", "-", "1", ":", "\n", "\t\t", "return", "'unknown'", "\n", "", "return", "ct", ".", "FONTS", "[", "font_class", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.font_recognition": [[16, 45], ["fcr.char_segmenter_fcr.char_seg", "print", "len", "models.fcr.predict", "models.fcr.predict.argmax", "len", "dict", "apply_fcr.class_to_label", "apply_fcr.class_to_label", "img.reshape", "processed_imgs.append", "numpy.array", "max", "dict.items", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.char_segmenter_fcr.char_seg", "home.repos.pwc.inspect_result.natliblux_nautilusocr.epr.apply_epr.predict", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.class_to_label", "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.class_to_label"], ["", "def", "font_recognition", "(", "block", ":", "Block", ",", "models", ":", "Models", ")", ":", "\n", "\n", "\t", "if", "block", ".", "inv_image", "is", "None", "or", "block", ".", "lines", "is", "None", ":", "\n", "\t\t", "print", "(", "\"block properties 'inv_image' and/or 'lines' not defined, cannot make font prediction\"", ")", "\n", "return", "(", "class_to_label", "(", "-", "1", ")", ",", "-", "1", ")", "\n", "\n", "", "images", "=", "char_seg", "(", "block", ".", "inv_image", ",", "block", ".", "lines", ",", "ct", ".", "N_CHARS_FCR", ")", "\n", "processed_imgs", "=", "[", "]", "\n", "if", "len", "(", "images", ")", ">", "0", ":", "\n", "\t\t", "for", "img", "in", "images", ":", "\n", "\t\t\t", "pix", "=", "img", ".", "reshape", "(", "32", ",", "32", ",", "1", ")", "\n", "pix", "=", "pix", "/", "255.0", "\n", "processed_imgs", ".", "append", "(", "pix", ")", "\n", "", "nn_output", "=", "models", ".", "fcr", ".", "predict", "(", "np", ".", "array", "(", "processed_imgs", ")", ")", "\n", "predictions", "=", "nn_output", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "n_predications", "=", "len", "(", "predictions", ")", "\n", "classes_dict", "=", "dict", "(", ")", "\n", "for", "prediction", "in", "predictions", ":", "\n", "\t\t\t", "if", "prediction", "in", "classes_dict", ":", "\n", "\t\t\t\t", "classes_dict", "[", "prediction", "]", "=", "classes_dict", "[", "prediction", "]", "+", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "classes_dict", "[", "prediction", "]", "=", "1", "\n", "", "", "final_class", "=", "max", "(", "classes_dict", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "[", "0", "]", "\n", "confidence", "=", "classes_dict", "[", "final_class", "]", "/", "n_predications", "\n", "", "else", ":", "\n", "\t\t", "final_class", "=", "-", "1", "\n", "confidence", "=", "-", "1", "\n", "\n", "", "return", "(", "class_to_label", "(", "final_class", ")", ",", "confidence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.predict_font": [[47, 50], ["apply_fcr.font_recognition"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.font_recognition"], ["", "def", "predict_font", "(", "block", ":", "Block", ",", "models", ":", "Models", ")", ":", "\n", "\t", "font_class", ",", "_", "=", "font_recognition", "(", "block", ",", "models", ")", "\n", "return", "font_class", "\n", "\n"]], "home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.predict_font_confidence": [[52, 55], ["apply_fcr.font_recognition"], "function", ["home.repos.pwc.inspect_result.natliblux_nautilusocr.fcr.apply_fcr.font_recognition"], ["", "def", "predict_font_confidence", "(", "block", ":", "Block", ",", "models", ":", "Models", ")", ":", "\n", "\t", "font_class", ",", "font_confidence", "=", "font_recognition", "(", "block", ",", "models", ")", "\n", "return", "font_class", ",", "font_confidence", "\n", "\n"]]}