{"home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.__init__": [[81, 125], ["mode.strip", "base.ListDatasetC2AE.make_dataset", "len", "len", "RuntimeError", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "mode", ",", "crop_size", "=", "(", "224", ",", "224", ")", ",", "normalization", "=", "'minmax'", ",", "hidden_classes", "=", "None", ",", "overlap", "=", "False", ",", "use_dsm", "=", "False", ",", "dataset_path", "=", "'../'", ",", "select_non_match", "=", "'none'", ",", "ignore_others_non_match", "=", "False", ",", "verbose", "=", "False", ",", "inmemory", "=", "False", ",", "local_batch_size", "=", "2", ",", "backgroundclasses", "=", "[", "]", ")", ":", "#none or random", "\n", "\n", "# Initializing variables.", "\n", "        ", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "root", "=", "dataset_path", "+", "dataset", "+", "'/'", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "mode", "=", "mode", ".", "strip", "(", "' '", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "hidden_classes", "=", "hidden_classes", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "use_dsm", "=", "use_dsm", "\n", "self", ".", "select_non_match", "=", "select_non_match", "\n", "self", ".", "ignore_others_non_match", "=", "ignore_others_non_match", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "inmemory", "=", "inmemory", "\n", "self", ".", "local_batch_size", "=", "local_batch_size", "\n", "self", ".", "backgroundclasses", "=", "backgroundclasses", "\n", "\n", "if", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "            ", "self", ".", "num_classes", "=", "21", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_classes", "=", "5", "\n", "", "self", ".", "dataset_size_factor", "=", "1", "\n", "\n", "if", "self", ".", "hidden_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_classes", "=", "self", ".", "num_classes", "-", "len", "(", "hidden_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_classes", "=", "self", ".", "num_classes", "\n", "\n", "#print('self.n_classes', self.n_classes)", "\n", "#print('self.hidden_classes', self.hidden_classes)", "\n", "\n", "# Creating list of paths.", "\n", "", "self", ".", "imgs", "=", "self", ".", "make_dataset", "(", ")", "\n", "\n", "# Check for consistency in list.", "\n", "\n", "if", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "            ", "if", "len", "(", "self", ".", "img_single", ")", "==", "0", ":", "\n", "                ", "raise", "(", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "                ", "raise", "(", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.make_dataset": [[126, 282], ["os.path.join", "os.path.join", "os.path.join", "numpy.unique", "base.ListDatasetC2AE.shift_labels", "numpy.unique", "sorted", "skimage.io.imread().astype", "skimage.io.imread().astype", "numpy.zeros", "os.path.join", "os.path.join", "range", "skimage.io.imread", "numpy.clip", "skimage.io.imread().astype", "[].astype", "os.path.join", "items.append", "len", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "base.ListDatasetC2AE.data.append", "skimage.io.imread", "skimage.io.imread", "os.path.join", "skimage.io.imread", "numpy.clip", "valid_counts.max", "os.listdir", "os.path.isfile", "os.path.join", "os.path.join", "os.path.join", "items.append", "os.path.join", "os.path.join", "base.ListDatasetC2AE.dsm_single.min", "base.ListDatasetC2AE.dsm_single.max", "base.ListDatasetC2AE.dsm_single.min", "skimage.io.imread", "os.path.join", "os.path.join", "it.replace().replace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "skimage.io.imread", "base.ListDatasetC2AE.dsm_single.min", "base.ListDatasetC2AE.dsm_single.max", "base.ListDatasetC2AE.dsm_single.min", "it.replace", "it.replace().replace", "os.path.join", "it.replace", "it.replace"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.shift_labels"], ["", "", "", "def", "make_dataset", "(", "self", ")", ":", "\n", "\n", "# Making sure the mode is correct.", "\n", "        ", "assert", "self", ".", "mode", "in", "[", "'Train'", ",", "'Test'", ",", "'Validate'", ",", "'ValidateTrain'", ",", "'Thresholds'", ",", "'Thresholds_Train'", "]", "\n", "\n", "# Setting string for the mode.", "\n", "\n", "img_folder", "=", "self", ".", "mode", "\n", "if", "self", ".", "mode", "==", "'Thresholds'", ":", "\n", "            ", "img_folder", "=", "'ValidateTrain'", "\n", "", "if", "self", ".", "mode", "==", "'Thresholds_Train'", ":", "\n", "            ", "img_folder", "=", "'Train'", "\n", "\n", "", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_folder", ",", "'JPEGImages'", ")", "\n", "msk_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_folder", ",", "'Masks'", ")", "\n", "\n", "if", "self", ".", "use_dsm", ":", "\n", "            ", "dsm_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_folder", ",", "'NDSM'", ")", "\n", "\n", "", "if", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "# Presetting ratios across GRSS channels and labels.", "\n", "            ", "self", ".", "rgb_hsi_ratio", "=", "20", "\n", "self", ".", "dsm_hsi_ratio", "=", "2", "\n", "self", ".", "msk_hsi_ratio", "=", "2", "\n", "\n", "self", ".", "rgb_msk_ratio", "=", "10", "\n", "\n", "self", ".", "hsi_patch_size", "=", "500", "\n", "self", ".", "rgb_patch_size", "=", "self", ".", "rgb_hsi_ratio", "*", "self", ".", "hsi_patch_size", "\n", "self", ".", "dsm_patch_size", "=", "self", ".", "dsm_hsi_ratio", "*", "self", ".", "hsi_patch_size", "\n", "self", ".", "msk_patch_size", "=", "self", ".", "msk_hsi_ratio", "*", "self", ".", "hsi_patch_size", "\n", "\n", "if", "'Thresholds'", "==", "self", ".", "mode", ":", "\n", "                ", "self", ".", "mode", "=", "'Validate'", "\n", "\n", "", "if", "self", ".", "mode", "==", "'Train'", "or", "self", ".", "mode", "==", "'Validate'", ":", "\n", "# Reading images.", "\n", "                ", "self", ".", "img_single", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Train'", ",", "'Images'", ",", "'rgb_clipped.tif'", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "msk_single", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Train'", ",", "'Masks'", ",", "'2018_IEEE_GRSS_DFC_GT_TR.tif'", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "#print('self.msk_single - ',np.unique(self.msk_single, return_counts=True))", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                    ", "self", ".", "dsm_single", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Train'", ",", "'DSM'", ",", "'dsm_clipped.tif'", ")", ")", "\n", "self", ".", "q0001", "=", "-", "21.208378", "# q0001 precomputed from training set.", "\n", "self", ".", "q9999", "=", "41.01488", "# q9999 precomputed from training set.", "\n", "self", ".", "dsm_single", "=", "np", ".", "clip", "(", "self", ".", "dsm_single", ",", "self", ".", "q0001", ",", "self", ".", "q9999", ")", "\n", "self", ".", "dsm_single", "=", "(", "self", ".", "dsm_single", "-", "self", ".", "dsm_single", ".", "min", "(", ")", ")", "/", "(", "self", ".", "dsm_single", ".", "max", "(", ")", "-", "self", ".", "dsm_single", ".", "min", "(", ")", ")", "\n", "self", ".", "dsm_single", "*=", "255.0", "\n", "\n", "# train or validate mask (1 = train, 2 = validate", "\n", "", "train_validate", "=", "np", ".", "zeros", "(", "self", ".", "msk_single", ".", "shape", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "train_validate", "[", "train_validate", "==", "0", "]", "=", "1", "\n", "train_validate", "[", "50", ":", "600", ",", ":", "]", "=", "2", "\n", "train_validate", "[", "50", ":", "600", ",", "2700", ":", "4000", "]", "=", "1", "\n", "train_validate", "[", "50", ":", "600", ",", "1500", ":", "2300", "]", "=", "1", "\n", "train_validate", "[", "50", ":", "600", ",", "0", ":", "500", "]", "=", "1", "\n", "\n", "if", "self", ".", "mode", "==", "'Train'", ":", "\n", "                    ", "train_validate", "[", "train_validate", "==", "2", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "train_validate", "=", "train_validate", "-", "1", "\n", "\n", "#print(np.unique(self.msk_single,return_counts=True))", "\n", "\n", "", "self", ".", "msk_single", "=", "self", ".", "msk_single", "*", "train_validate", "\n", "\n", "#print(np.unique(self.msk_single,return_counts=True))", "\n", "\n", "#if self.mode == 'Validate':", "\n", "#    y0, y1, x0, x1 = trim_coords(train_validate)", "\n", "#    self.img_single = self.img_single[y0:y1, x0:x1]", "\n", "#    self.msk_single = self.msk_single[y0:y1, x0:x1]", "\n", "#    if self.use_dsm:", "\n", "#        self.dsm_single = self.dsm_single[y0:y1, x0:x1]", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'Test'", ":", "\n", "\n", "# Reading images.", "\n", "                ", "self", ".", "img_single", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Test'", ",", "'Images'", ",", "'rgb_merged.tif'", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "msk_single", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Test'", ",", "'Masks'", ",", "'Test_Labels_osr.tif'", ")", ")", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "msk_single", "[", "self", ".", "msk_single", "==", "100", "]", "=", "0", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                    ", "self", ".", "dsm_single", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Test'", ",", "'DSM'", ",", "'UH17c_GEF051.tif'", ")", ")", "\n", "self", ".", "q0001", "=", "-", "21.208378", "# q0001 precomputed from training set.", "\n", "self", ".", "q9999", "=", "41.01488", "# q9999 precomputed from training set.", "\n", "self", ".", "dsm_single", "=", "np", ".", "clip", "(", "self", ".", "dsm_single", ",", "self", ".", "q0001", ",", "self", ".", "q9999", ")", "\n", "self", ".", "dsm_single", "=", "(", "self", ".", "dsm_single", "-", "self", ".", "dsm_single", ".", "min", "(", ")", ")", "/", "(", "self", ".", "dsm_single", ".", "max", "(", ")", "-", "self", ".", "dsm_single", ".", "min", "(", ")", ")", "\n", "self", ".", "dsm_single", "*=", "255.0", "\n", "\n", "", "", "unique", ",", "counts", "=", "np", ".", "unique", "(", "self", ".", "msk_single", ",", "return_counts", "=", "True", ")", "\n", "#print(unique)", "\n", "#print(counts)", "\n", "\n", "self", ".", "msk_single", ",", "self", ".", "msk_true_single", "=", "self", ".", "shift_labels", "(", "self", ".", "msk_single", ")", "\n", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "self", ".", "msk_single", ",", "return_counts", "=", "True", ")", "\n", "#print(unique)", "\n", "#print(counts)", "\n", "valid_counts", "=", "counts", "[", ":", "-", "1", "]", "if", "self", ".", "mode", "==", "'Train'", "else", "counts", "[", ":", "-", "2", "]", "# Removing UUC.", "\n", "self", ".", "weights", "=", "(", "valid_counts", ".", "max", "(", ")", "/", "valid_counts", ")", ".", "tolist", "(", ")", "\n", "#print('weights', self.weights)", "\n", "#print('len weights', len(self.weights))", "\n", "\n", "#print('img_single', self.img_single.shape)", "\n", "#print('dsm_single', self.dsm_single.shape)", "\n", "#print('msk_single', self.msk_single.shape)", "\n", "#print('msk_true_single', self.msk_true_single.shape)            ", "\n", "return", "\n", "\n", "", "else", ":", "\n", "\n", "# Vaihingen and Potsdam.", "\n", "            ", "if", "self", ".", "mode", "==", "'Validate'", ":", "\n", "                ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Train'", ",", "'JPEGImages'", ")", "\n", "msk_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Train'", ",", "'Masks'", ")", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                    ", "dsm_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Train'", ",", "'NDSM'", ")", "\n", "\n", "", "", "data_list", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "img_dir", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "f", ")", ")", "]", ")", "\n", "\n", "# Creating list containing image and ground truth paths.", "\n", "self", ".", "data", "=", "[", "]", "\n", "items", "=", "[", "]", "\n", "if", "self", ".", "dataset", "==", "'Vaihingen'", ":", "\n", "                ", "for", "it", "in", "data_list", ":", "\n", "                    ", "item", "=", "(", "\n", "os", ".", "path", ".", "join", "(", "img_dir", ",", "it", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "msk_dir", ",", "it", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "dsm_dir", ",", "it", ".", "replace", "(", "'top_mosaic_09cm_area'", ",", "'dsm_09cm_matching_area'", ")", ".", "replace", "(", "'.tif'", ",", "'_normalized.jpg'", ")", ")", "\n", ")", "\n", "items", ".", "append", "(", "item", ")", "\n", "", "", "elif", "self", ".", "dataset", "==", "'Potsdam'", ":", "\n", "                ", "for", "it", "in", "data_list", ":", "\n", "                    ", "item", "=", "(", "\n", "os", ".", "path", ".", "join", "(", "img_dir", ",", "it", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "msk_dir", ",", "it", ".", "replace", "(", "'_IRRG.tif'", ",", "'_label_noBoundary.tif'", ")", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "dsm_dir", ",", "it", ".", "replace", "(", "'top_potsdam_'", ",", "'dsm_potsdam_'", ")", ".", "replace", "(", "'_IRRG.tif'", ",", "'_normalized_lastools.jpg'", ")", ")", "\n", ")", "\n", "items", ".", "append", "(", "item", ")", "\n", "#print('loader in memory: ',self.inmemory)", "\n", "", "", "if", "self", ".", "inmemory", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "items", ")", ")", ":", "\n", "                    ", "img_path", ",", "msk_path", ",", "dsm_path", "=", "items", "[", "i", "]", "\n", "\n", "#print(img_path)", "\n", "#print(msk_path)", "\n", "#print(dsm_path)", "\n", "aa", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "bb", "=", "io", ".", "imread", "(", "msk_path", ")", "\n", "#print(np.unique(bb,return_counts=True))", "\n", "cc", "=", "io", ".", "imread", "(", "dsm_path", ")", "\n", "item", "=", "(", "aa", ",", "bb", ",", "cc", ")", "\n", "\n", "self", ".", "data", ".", "append", "(", "item", ")", "\n", "\n", "# Returning list.", "\n", "", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.random_crops": [[283, 349], ["numpy.random.random", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.random.random", "numpy.random.random", "len", "numpy.random.randint", "numpy.random.randint", "skimage.transform.rotate.astype", "skimage.transform.rotate.astype", "skimage.transform.rotate.astype", "img_crop_list.append", "msk_crop_list.append", "msk_true_crop_list.append", "len", "len", "numpy.fliplr", "numpy.fliplr", "numpy.fliplr", "numpy.flipud", "numpy.flipud", "numpy.flipud", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate"], "methods", ["None"], ["", "", "def", "random_crops", "(", "self", ",", "img", ",", "msk", ",", "msk_true", ",", "n_crops", ")", ":", "\n", "\n", "        ", "img_crop_list", "=", "[", "]", "\n", "msk_crop_list", "=", "[", "]", "\n", "msk_true_crop_list", "=", "[", "]", "\n", "\n", "rand_fliplr", "=", "np", ".", "random", ".", "random", "(", ")", ">", "0.50", "\n", "rand_flipud", "=", "np", ".", "random", ".", "random", "(", ")", ">", "0.50", "\n", "rand_rotate", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "#print('r1 - ', datetime.now())", "\n", "i", "=", "0", "\n", "background", "=", "self", ".", "num_classes", "-", "len", "(", "self", ".", "hidden_classes", ")", "-", "len", "(", "self", ".", "backgroundclasses", ")", "\n", "#print('background:',background)", "\n", "while", "i", "<", "n_crops", ":", "\n", "\n", "            ", "rand_y", "=", "np", ".", "random", ".", "randint", "(", "msk", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "rand_x", "=", "np", ".", "random", ".", "randint", "(", "msk", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img_patch", "=", "img", "[", "rand_y", ":", "(", "rand_y", "+", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "rand_x", ":", "(", "rand_x", "+", "self", ".", "crop_size", "[", "1", "]", ")", "]", "\n", "msk_patch", "=", "msk", "[", "rand_y", ":", "(", "rand_y", "+", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "rand_x", ":", "(", "rand_x", "+", "self", ".", "crop_size", "[", "1", "]", ")", "]", "\n", "msk_true_patch", "=", "msk_true", "[", "rand_y", ":", "(", "rand_y", "+", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "rand_x", ":", "(", "rand_x", "+", "self", ".", "crop_size", "[", "1", "]", ")", "]", "\n", "\n", "masked_pixels", "=", "len", "(", "msk_patch", "[", "msk_patch", "!=", "background", "]", ")", "/", "(", "msk_patch", ".", "shape", "[", "0", "]", "*", "msk_patch", ".", "shape", "[", "1", "]", ")", "\n", "if", "masked_pixels", "<", "0.001", ":", "\n", "                ", "continue", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "if", "rand_fliplr", ":", "\n", "                ", "img_patch", "=", "np", ".", "fliplr", "(", "img_patch", ")", "\n", "msk_patch", "=", "np", ".", "fliplr", "(", "msk_patch", ")", "\n", "msk_true_patch", "=", "np", ".", "fliplr", "(", "msk_true_patch", ")", "\n", "", "if", "rand_flipud", ":", "\n", "                ", "img_patch", "=", "np", ".", "flipud", "(", "img_patch", ")", "\n", "msk_patch", "=", "np", ".", "flipud", "(", "msk_patch", ")", "\n", "msk_true_patch", "=", "np", ".", "flipud", "(", "msk_true_patch", ")", "\n", "\n", "", "if", "rand_rotate", "<", "0.25", ":", "\n", "                ", "img_patch", "=", "transform", ".", "rotate", "(", "img_patch", ",", "270", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ")", "\n", "msk_patch", "=", "transform", ".", "rotate", "(", "msk_patch", ",", "270", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ")", "\n", "msk_true_patch", "=", "transform", ".", "rotate", "(", "msk_true_patch", ",", "270", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ")", "\n", "", "elif", "rand_rotate", "<", "0.50", ":", "\n", "                ", "img_patch", "=", "transform", ".", "rotate", "(", "img_patch", ",", "180", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ")", "\n", "msk_patch", "=", "transform", ".", "rotate", "(", "msk_patch", ",", "180", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ")", "\n", "msk_true_patch", "=", "transform", ".", "rotate", "(", "msk_true_patch", ",", "180", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ")", "\n", "", "elif", "rand_rotate", "<", "0.75", ":", "\n", "                ", "img_patch", "=", "transform", ".", "rotate", "(", "img_patch", ",", "90", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ")", "\n", "msk_patch", "=", "transform", ".", "rotate", "(", "msk_patch", ",", "90", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ")", "\n", "msk_true_patch", "=", "transform", ".", "rotate", "(", "msk_true_patch", ",", "90", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ")", "\n", "\n", "", "img_patch", "=", "img_patch", ".", "astype", "(", "np", ".", "float32", ")", "\n", "msk_patch", "=", "msk_patch", ".", "astype", "(", "np", ".", "int64", ")", "\n", "msk_true_patch", "=", "msk_true_patch", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "img_crop_list", ".", "append", "(", "img_patch", ")", "\n", "msk_crop_list", ".", "append", "(", "msk_patch", ")", "\n", "msk_true_crop_list", ".", "append", "(", "msk_true_patch", ")", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "img_crop_list", ")", "\n", "msk", "=", "np", ".", "asarray", "(", "msk_crop_list", ")", "\n", "msk_true", "=", "np", ".", "asarray", "(", "msk_true_crop_list", ")", "\n", "#print('r2 - ', datetime.now())", "\n", "return", "img", ",", "msk", ",", "msk_true", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.test_crops": [[351, 372], ["skimage.util.view_as_windows().squeeze", "skimage.util.view_as_windows", "skimage.util.view_as_windows", "skimage.util.view_as_blocks().squeeze", "skimage.util.view_as_blocks", "skimage.util.view_as_blocks", "skimage.util.view_as_windows", "skimage.util.view_as_blocks"], "methods", ["None"], ["", "def", "test_crops", "(", "self", ",", "img", ",", "msk", ",", "msk_true", ")", ":", "\n", "\n", "        ", "n_channels", "=", "3", "\n", "if", "self", ".", "use_dsm", ":", "\n", "            ", "n_channels", "=", "4", "\n", "", "if", "self", ".", "overlap", ":", "\n", "            ", "w_img", "=", "util", ".", "view_as_windows", "(", "img", ",", "\n", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ",", "n_channels", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "//", "2", ",", "self", ".", "crop_size", "[", "1", "]", "//", "2", ",", "n_channels", ")", ")", ".", "squeeze", "(", ")", "\n", "w_msk", "=", "util", ".", "view_as_windows", "(", "msk", ",", "\n", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "//", "2", ",", "self", ".", "crop_size", "[", "1", "]", "//", "2", ")", ")", "\n", "w_msk_true", "=", "util", ".", "view_as_windows", "(", "msk_true", ",", "\n", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "//", "2", ",", "self", ".", "crop_size", "[", "1", "]", "//", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "w_img", "=", "util", ".", "view_as_blocks", "(", "img", ",", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ",", "n_channels", ")", ")", ".", "squeeze", "(", ")", "\n", "w_msk", "=", "util", ".", "view_as_blocks", "(", "msk", ",", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "w_msk_true", "=", "util", ".", "view_as_blocks", "(", "msk_true", ",", "(", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "w_img", ",", "w_msk", ",", "w_msk_true", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.shift_labels": [[373, 432], ["numpy.copy", "sorted", "range", "numpy.copy", "base.ListDatasetC2AE.backgroundclasses.sort", "sorted", "len", "len", "len", "len", "len", "len", "len", "len", "new_hidden.append", "new_hidden.append"], "methods", ["None"], ["", "def", "shift_labels", "(", "self", ",", "msk", ")", ":", "\n", "\n", "        ", "msk_true", "=", "np", ".", "copy", "(", "msk", ")", "\n", "#print('shift_labels - 1')", "\n", "#print(np.unique(msk_true, return_counts=True))", "\n", "\n", "if", "self", ".", "dataset", "==", "'Vaihingen'", "or", "self", ".", "dataset", "==", "'Potsdam'", ":", "\n", "\n", "# Shifting clutter/background to unknown on labels.", "\n", "            ", "msk", "[", "msk", "==", "5", "]", "=", "2000", "\n", "msk", "[", "msk", "==", "6", "]", "=", "2000", "\n", "", "elif", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "\n", "            ", "self", ".", "backgroundclasses", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "for", "k", "in", "self", ".", "backgroundclasses", ":", "\n", "                ", "msk", "[", "msk", "==", "k", "]", "=", "2000", "\n", "pos", "=", "(", "msk", ">", "k", ")", "&", "(", "msk", "<", "2000", ")", "\n", "msk", "[", "pos", "]", "-=", "1", "\n", "\n", "", "new_hidden", "=", "[", "]", "\n", "for", "h_c", "in", "sorted", "(", "self", ".", "hidden_classes", ")", ":", "\n", "                ", "if", "h_c", ">", "0", "and", "h_c", "<", "7", ":", "\n", "                    ", "new_hidden", ".", "append", "(", "h_c", "-", "1", ")", "\n", "", "elif", "h_c", ">", "7", ":", "\n", "                    ", "new_hidden", ".", "append", "(", "h_c", "-", "2", ")", "\n", "", "", "assert", "len", "(", "self", ".", "hidden_classes", ")", "==", "len", "(", "new_hidden", ")", "\n", "self", ".", "hidden_classes", "=", "new_hidden", "\n", "\n", "#print('shift_labels - 2')", "\n", "#print(np.unique(msk_true, return_counts=True))", "\n", "\n", "", "cont", "=", "0", "\n", "for", "h_c", "in", "sorted", "(", "self", ".", "hidden_classes", ")", ":", "\n", "\n", "#print('Hidden %d' % (h_c))", "\n", "            ", "msk", "[", "msk", "==", "h_c", "-", "cont", "]", "=", "1000", "\n", "for", "c", "in", "range", "(", "h_c", "-", "cont", "+", "1", ",", "self", ".", "num_classes", ")", ":", "\n", "#print('    Class %d -> %d' % (c, c - 1))", "\n", "                ", "msk", "[", "msk", "==", "c", "]", "=", "c", "-", "1", "\n", "msk_true", "[", "msk_true", "==", "c", "]", "=", "c", "-", "1", "\n", "", "cont", "=", "cont", "+", "1", "\n", "\n", "#print('shift_labels - 3')", "\n", "#print(np.unique(msk_true, return_counts=True))", "\n", "\n", "", "if", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "            ", "msk_true", "=", "np", ".", "copy", "(", "msk", ")", "\n", "msk_true", "[", "msk", "==", "1000", "]", "=", "self", ".", "num_classes", "-", "len", "(", "self", ".", "hidden_classes", ")", "-", "len", "(", "self", ".", "backgroundclasses", ")", "\n", "msk_true", "[", "msk", "==", "2000", "]", "=", "self", ".", "num_classes", "-", "1", "\n", "msk", "[", "msk", ">=", "1000", "]", "=", "self", ".", "num_classes", "-", "len", "(", "self", ".", "hidden_classes", ")", "-", "len", "(", "self", ".", "backgroundclasses", ")", "\n", "", "else", ":", "\n", "            ", "msk_true", "[", "msk", "==", "1000", "]", "=", "self", ".", "num_classes", "-", "len", "(", "self", ".", "hidden_classes", ")", "\n", "msk_true", "[", "msk", "==", "2000", "]", "=", "self", ".", "num_classes", "\n", "msk", "[", "msk", ">=", "1000", "]", "=", "self", ".", "num_classes", "-", "len", "(", "self", ".", "hidden_classes", ")", "\n", "\n", "#print('shift_labels - msk after', np.unique(msk, return_counts=True))", "\n", "#print('shift_labels - msk_true after', np.unique(msk_true, return_counts=True))", "\n", "#sys.exit()", "\n", "", "return", "msk", ",", "msk_true", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.mask_to_class": [[433, 451], ["msk.sum.sum.astype", "numpy.zeros", "msk.sum.sum.sum"], "methods", ["None"], ["", "def", "mask_to_class", "(", "self", ",", "msk", ")", ":", "\n", "\n", "        ", "msk", "=", "msk", ".", "astype", "(", "np", ".", "int64", ")", "\n", "new", "=", "np", ".", "zeros", "(", "(", "msk", ".", "shape", "[", "0", "]", ",", "msk", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "msk", "=", "msk", "//", "255", "\n", "msk", "=", "msk", "*", "(", "1", ",", "7", ",", "49", ")", "\n", "msk", "=", "msk", ".", "sum", "(", "axis", "=", "2", ")", "\n", "\n", "new", "[", "msk", "==", "1", "+", "7", "+", "49", "]", "=", "0", "# Street.", "\n", "new", "[", "msk", "==", "49", "]", "=", "1", "# Building.", "\n", "new", "[", "msk", "==", "7", "+", "49", "]", "=", "2", "# Grass.", "\n", "new", "[", "msk", "==", "7", "]", "=", "3", "# Tree.", "\n", "new", "[", "msk", "==", "1", "+", "7", "]", "=", "4", "# Car.", "\n", "new", "[", "msk", "==", "1", "]", "=", "5", "# Surfaces.", "\n", "new", "[", "msk", "==", "0", "]", "=", "6", "# Boundaries.", "\n", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.__getitem__": [[452, 831], ["datetime.datetime.datetime.now", "numpy.random.seed", "datetime.datetime.datetime.now", "int", "numpy.full", "numpy.full", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "numpy.full", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "base.ListDatasetC2AE.mask_to_class", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "base.ListDatasetC2AE.shift_labels", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "img_path.split", "datetime.datetime.now.strftime", "len", "skimage.color.gray2rgb", "numpy.full", "numpy.full", "numpy.transpose", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "sys.stdout.flush", "print", "len", "skimage.color.gray2rgb", "numpy.full", "numpy.full", "print", "print", "print", "numpy.min", "numpy.transpose", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "sys.stdout.flush", "numpy.random.randint", "str", "str", "base.ListDatasetC2AE.random_crops", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "range", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "base.ListDatasetC2AE.random_crops", "numpy.copy", "numpy.copy", "range", "print", "base.ListDatasetC2AE.test_crops", "numpy.transpose", "numpy.transpose", "numpy.transpose", "len", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "numpy.min", "numpy.min", "numpy.max", "base.ListDatasetC2AE.random_crops", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "range", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "base.ListDatasetC2AE.random_crops", "numpy.copy", "numpy.copy", "range", "print", "base.ListDatasetC2AE.test_crops", "numpy.transpose", "numpy.transpose", "numpy.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "print", "numpy.sum", "range", "print", "numpy.random.permutation", "range", "range", "print", "numpy.sum", "range", "print", "numpy.random.permutation", "range", "range", "str", "str", "len", "numpy.sum", "numpy.random.permutation", "range", "numpy.sum", "numpy.random.permutation", "range", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.mask_to_class", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.shift_labels", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.random_crops", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.random_crops", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.test_crops", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.random_crops", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.random_crops", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.test_crops"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "x", "=", "datetime", ".", "now", "(", ")", "\n", "s", "=", "int", "(", "x", ".", "strftime", "(", "'%d%Y%m%w%M%S%f%H'", ")", ")", "%", "(", "2", "**", "31", ")", "\n", "s", "=", "s", "//", "(", "index", "+", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "s", ")", "\n", "\n", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "img_raw", "=", "None", "\n", "msk_raw", "=", "None", "\n", "dsm_raw", "=", "None", "\n", "\n", "if", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'Train'", ":", "\n", "\n", "                ", "offset_rgb", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "rgb_msk_ratio", ",", "size", "=", "2", ")", "if", "self", ".", "mode", "==", "'Train'", "else", "(", "self", ".", "rgb_msk_ratio", "//", "2", ",", "self", ".", "rgb_msk_ratio", "//", "2", ")", "\n", "\n", "img_raw", "=", "self", ".", "img_single", "[", "offset_rgb", "[", "0", "]", ":", ":", "self", ".", "rgb_msk_ratio", ",", "\n", "offset_rgb", "[", "1", "]", ":", ":", "self", ".", "rgb_msk_ratio", "]", "\n", "msk_raw", "=", "self", ".", "msk_single", "\n", "msk_true_raw", "=", "self", ".", "msk_true_single", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                    ", "dsm_raw", "=", "self", ".", "dsm_single", "\n", "\n", "", "assert", "img_raw", ".", "shape", "[", "0", "]", "==", "dsm_raw", ".", "shape", "[", "0", "]", "and", "img_raw", ".", "shape", "[", "0", "]", "==", "msk_raw", ".", "shape", "[", "0", "]", "and", "img_raw", ".", "shape", "[", "0", "]", "==", "msk_true_raw", ".", "shape", "[", "0", "]", "and", "img_raw", ".", "shape", "[", "1", "]", "==", "dsm_raw", ".", "shape", "[", "1", "]", "and", "img_raw", ".", "shape", "[", "1", "]", "==", "msk_raw", ".", "shape", "[", "1", "]", "and", "img_raw", ".", "shape", "[", "1", "]", "==", "msk_true_raw", ".", "shape", "[", "1", "]", ",", "'Shape Inconsistency: rgb = '", "+", "str", "(", "img_raw", ".", "shape", ")", "+", "', dsm = '", "+", "str", "(", "dsm_raw", ".", "shape", ")", "+", "', msk = '", "+", "str", "(", "msk_raw", ".", "shape", ")", "+", "', msk_true = '", "+", "str", "(", "msk_true_raw", ".", "shape", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "img_raw", "=", "self", ".", "img_single", "[", "self", ".", "rgb_msk_ratio", "//", "2", ":", ":", "self", ".", "rgb_msk_ratio", ",", "\n", "self", ".", "rgb_msk_ratio", "//", "2", ":", ":", "self", ".", "rgb_msk_ratio", "]", "\n", "msk_raw", "=", "self", ".", "msk_single", "\n", "msk_true_raw", "=", "self", ".", "msk_true_single", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                    ", "dsm_raw", "=", "self", ".", "dsm_single", "\n", "\n", "", "assert", "img_raw", ".", "shape", "[", "0", "]", "==", "dsm_raw", ".", "shape", "[", "0", "]", "and", "img_raw", ".", "shape", "[", "0", "]", "==", "msk_raw", ".", "shape", "[", "0", "]", "and", "img_raw", ".", "shape", "[", "0", "]", "==", "msk_true_raw", ".", "shape", "[", "0", "]", "and", "img_raw", ".", "shape", "[", "1", "]", "==", "dsm_raw", ".", "shape", "[", "1", "]", "and", "img_raw", ".", "shape", "[", "1", "]", "==", "msk_raw", ".", "shape", "[", "1", "]", "and", "img_raw", ".", "shape", "[", "1", "]", "==", "msk_true_raw", ".", "shape", "[", "1", "]", ",", "'Shape Inconsistency: rgb = '", "+", "str", "(", "img_raw", ".", "shape", ")", "+", "', dsm = '", "+", "str", "(", "dsm_raw", ".", "shape", ")", "+", "', msk = '", "+", "str", "(", "msk_raw", ".", "shape", ")", "+", "', msk_true = '", "+", "str", "(", "msk_true_raw", ".", "shape", ")", "\n", "\n", "\n", "", "if", "len", "(", "img_raw", ".", "shape", ")", "==", "2", ":", "\n", "                ", "img_raw", "=", "color", ".", "gray2rgb", "(", "img_raw", ")", "\n", "\n", "", "if", "self", ".", "use_dsm", ":", "\n", "                ", "img", "=", "np", ".", "full", "(", "(", "img_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "img_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "img_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "2", "]", "+", "1", ")", ",", "\n", "fill_value", "=", "0.0", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "np", ".", "full", "(", "(", "img_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "img_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "img_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "2", "]", ")", ",", "\n", "fill_value", "=", "0.0", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "img", "[", ":", "img_raw", ".", "shape", "[", "0", "]", ",", ":", "img_raw", ".", "shape", "[", "1", "]", ",", ":", "img_raw", ".", "shape", "[", "2", "]", "]", "=", "img_raw", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                ", "img", "[", ":", "dsm_raw", ".", "shape", "[", "0", "]", ",", ":", "dsm_raw", ".", "shape", "[", "1", "]", ",", "-", "1", "]", "=", "dsm_raw", "\n", "\n", "\n", "", "msk", "=", "np", ".", "full", "(", "(", "msk_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "msk_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "msk_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "msk_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ")", ",", "\n", "fill_value", "=", "(", "self", ".", "num_classes", "-", "len", "(", "self", ".", "hidden_classes", ")", "-", "len", "(", "self", ".", "backgroundclasses", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "msk", "[", ":", "msk_raw", ".", "shape", "[", "0", "]", ",", ":", "msk_raw", ".", "shape", "[", "1", "]", "]", "=", "msk_raw", "\n", "\n", "msk_true", "=", "np", ".", "full", "(", "(", "msk_true_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "msk_true_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "msk_true_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "msk_true_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ")", ",", "\n", "fill_value", "=", "(", "self", ".", "num_classes", "-", "1", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "msk_true", "[", ":", "msk_true_raw", ".", "shape", "[", "0", "]", ",", ":", "msk_true_raw", ".", "shape", "[", "1", "]", "]", "=", "msk_true_raw", "\n", "\n", "img", "=", "(", "img", "/", "255", ")", "-", "0.5", "\n", "\n", "if", "self", ".", "mode", "==", "'Train'", ":", "\n", "\n", "#img, msk, msk_true = self.random_crops(img, msk, msk_true, 4)", "\n", "#img = np.transpose(img, (0, 3, 1, 2))               ", "\n", "\n", "                ", "if", "self", ".", "select_non_match", "==", "'random'", ":", "\n", "                    ", "local_random_crops", "=", "50", "\n", "if", "self", ".", "local_batch_size", "*", "40", ">", "50", ":", "\n", "                        ", "local_random_crops", "=", "self", ".", "local_batch_size", "*", "40", "\n", "\n", "", "img", ",", "msk", ",", "msk_true", "=", "self", ".", "random_crops", "(", "img", ",", "msk", ",", "msk_true", ",", "local_random_crops", ")", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "'getitem random1: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "search_imgs", "=", "img", "[", "self", ".", "local_batch_size", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "search_msks", "=", "msk", "[", "self", ".", "local_batch_size", ":", ",", ":", ",", ":", "]", "\n", "search_msks_true", "=", "msk_true", "[", "self", ".", "local_batch_size", ":", ",", ":", ",", ":", "]", "\n", "\n", "img_m", "=", "np", ".", "copy", "(", "img", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "msk_m", "=", "np", ".", "copy", "(", "msk", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "msk_true_m", "=", "np", ".", "copy", "(", "msk_true", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "\n", "img_nm", "=", "np", ".", "copy", "(", "search_imgs", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "msk_nm", "=", "np", ".", "copy", "(", "search_msks", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "msk_true_nm", "=", "np", ".", "copy", "(", "search_msks_true", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "\n", "for", "ii", "in", "range", "(", "0", ",", "self", ".", "local_batch_size", ")", ":", "\n", "                        ", "match", "=", "np", ".", "sum", "(", "msk_m", "[", "ii", "]", "==", "msk_m", "[", "ii", "]", ")", "\n", "for", "jj", "in", "range", "(", "0", ",", "search_imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "match_temp", "=", "np", ".", "sum", "(", "msk_m", "[", "ii", "]", "==", "search_msks", "[", "jj", "]", ")", "\n", "if", "match_temp", "<", "match", ":", "\n", "                                ", "img_nm", "[", "ii", "]", "=", "search_imgs", "[", "jj", "]", "\n", "msk_nm", "[", "ii", "]", "=", "search_msks", "[", "jj", "]", "\n", "msk_true_nm", "[", "ii", "]", "=", "search_msks_true", "[", "jj", "]", "\n", "match", "=", "match_temp", "\n", "", "", "", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "'getitem random2: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "                    ", "img", ",", "msk", ",", "msk_true", "=", "self", ".", "random_crops", "(", "img", ",", "msk", ",", "msk_true", ",", "self", ".", "local_batch_size", ")", "\n", "img_m", "=", "img", "\n", "msk_m", "=", "msk", "\n", "msk_true_m", "=", "msk_true", "\n", "\n", "img_nm", "=", "img", "\n", "msk_nm", "=", "np", ".", "copy", "(", "msk_m", ")", "\n", "msk_true_nm", "=", "np", ".", "copy", "(", "msk_true_m", ")", "\n", "max_class", "=", "self", ".", "num_classes", "-", "1", "\n", "\n", "if", "self", ".", "ignore_others_non_match", ":", "\n", "                        ", "max_class", "=", "self", ".", "num_classes", "-", "2", "\n", "\n", "", "for", "b", "in", "range", "(", "0", ",", "msk_nm", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "new_classes", "=", "np", ".", "random", ".", "permutation", "(", "max_class", "+", "1", ")", "\n", "\n", "next_permutation", "=", "True", "\n", "counter_p", "=", "0", "\n", "while", "next_permutation", ":", "\n", "                            ", "next_permutation", "=", "False", "\n", "counter_p", "+=", "1", "\n", "new_classes", "=", "np", ".", "random", ".", "permutation", "(", "max_class", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "max_class", "+", "1", ")", ":", "\n", "                                ", "if", "i", "==", "new_classes", "[", "i", "]", ":", "\n", "                                    ", "next_permutation", "=", "True", "\n", "break", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "0", ",", "max_class", "+", "1", ")", ":", "\n", "                            ", "msk_nm", "[", "b", "]", "[", "msk_m", "[", "b", "]", "==", "i", "]", "=", "new_classes", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "0", ",", "max_class", "+", "1", ")", ":", "\n", "                            ", "msk_true_nm", "[", "b", "]", "[", "msk_true_m", "[", "b", "]", "==", "i", "]", "=", "new_classes", "[", "i", "]", "\n", "\n", "#print(\"match % - \",str(100*match/(msk_nm.shape[1]*msk_nm.shape[2]*msk_nm.shape[0])))", "\n", "", "", "", "img_m", "=", "np", ".", "transpose", "(", "img_m", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "img_nm", "=", "np", ".", "transpose", "(", "img_nm", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "img_m", "=", "torch", ".", "from_numpy", "(", "img_m", ")", "\n", "msk_m", "=", "torch", ".", "from_numpy", "(", "msk_m", ")", "\n", "msk_true_m", "=", "torch", ".", "from_numpy", "(", "msk_true_m", ")", "\n", "img_nm", "=", "torch", ".", "from_numpy", "(", "img_nm", ")", "\n", "msk_nm", "=", "torch", ".", "from_numpy", "(", "msk_nm", ")", "\n", "msk_true_nm", "=", "torch", ".", "from_numpy", "(", "msk_true_nm", ")", "\n", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'getitem ending: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "return", "img_m", ",", "msk_m", ",", "msk_true_m", ",", "img_nm", ",", "msk_nm", ",", "msk_true_nm", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'Validate'", "or", "self", ".", "mode", "==", "'Test'", ":", "\n", "\n", "#print('msk - ',np.unique(self.msk_single,return_counts=True))", "\n", "#print('gts - ',np.unique(self.msk_true_single,return_counts=True))", "\n", "\n", "                ", "img", ",", "msk", ",", "msk_true", "=", "self", ".", "test_crops", "(", "img", ",", "msk", ",", "msk_true", ")", "\n", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", "\n", "msk", "=", "np", ".", "transpose", "(", "msk", ",", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "msk_true", "=", "np", ".", "transpose", "(", "msk_true", ",", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "#print('msk - ',np.unique(msk,return_counts=True))", "\n", "#print('gts - ',np.unique(msk_true,return_counts=True))", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "msk", "=", "torch", ".", "from_numpy", "(", "msk", ")", "\n", "msk_true", "=", "torch", ".", "from_numpy", "(", "msk_true", ")", "\n", "# Returning to iterator.", "\n", "return", "img", ",", "msk", ",", "msk_true", ",", "'img.tif'", "\n", "\n", "", "else", ":", "\n", "            ", "ii", "=", "index", "\n", "if", "self", ".", "mode", "==", "'Train'", ":", "\n", "                ", "ii", "=", "index", "%", "(", "len", "(", "self", ".", "imgs", ")", ")", "\n", "\n", "# Reading items from list.", "\n", "", "if", "self", ".", "use_dsm", ":", "\n", "                ", "img_path", ",", "msk_path", ",", "dsm_path", "=", "self", ".", "imgs", "[", "ii", "]", "\n", "if", "self", ".", "inmemory", ":", "\n", "                    ", "img_raw", ",", "msk_raw", ",", "dsm_raw", "=", "self", ".", "data", "[", "ii", "]", "\n", "#print(np.unique(msk_raw,return_counts=True))", "\n", "", "else", ":", "\n", "                    ", "img_raw", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "msk_raw", "=", "io", ".", "imread", "(", "msk_path", ")", "\n", "dsm_raw", "=", "io", ".", "imread", "(", "dsm_path", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "inmemory", ":", "\n", "                    ", "img_raw", ",", "msk_raw", "=", "self", ".", "data", "[", "ii", "]", "\n", "", "else", ":", "\n", "                    ", "img_raw", "=", "io", ".", "imread", "(", "img_path", ")", "\n", "msk_raw", "=", "io", ".", "imread", "(", "msk_path", ")", "\n", "\n", "", "", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'getitem select image: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "if", "len", "(", "img_raw", ".", "shape", ")", "==", "2", ":", "\n", "                ", "img_raw", "=", "color", ".", "gray2rgb", "(", "img_raw", ")", "\n", "\n", "", "if", "self", ".", "use_dsm", ":", "\n", "                ", "img", "=", "np", ".", "full", "(", "(", "img_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "img_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "img_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "2", "]", "+", "1", ")", ",", "\n", "fill_value", "=", "0.0", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "np", ".", "full", "(", "(", "img_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "img_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "img_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "img_raw", ".", "shape", "[", "2", "]", ")", ",", "\n", "fill_value", "=", "0.0", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "img", "[", ":", "img_raw", ".", "shape", "[", "0", "]", ",", ":", "img_raw", ".", "shape", "[", "1", "]", ",", ":", "img_raw", ".", "shape", "[", "2", "]", "]", "=", "img_raw", "\n", "if", "self", ".", "use_dsm", ":", "\n", "                ", "img", "[", ":", "dsm_raw", ".", "shape", "[", "0", "]", ",", ":", "dsm_raw", ".", "shape", "[", "1", "]", ",", "-", "1", "]", "=", "dsm_raw", "\n", "\n", "\n", "", "msk", "=", "np", ".", "full", "(", "(", "msk_raw", ".", "shape", "[", "0", "]", "+", "self", ".", "crop_size", "[", "0", "]", "-", "(", "msk_raw", ".", "shape", "[", "0", "]", "%", "self", ".", "crop_size", "[", "0", "]", ")", ",", "\n", "msk_raw", ".", "shape", "[", "1", "]", "+", "self", ".", "crop_size", "[", "1", "]", "-", "(", "msk_raw", ".", "shape", "[", "1", "]", "%", "self", ".", "crop_size", "[", "1", "]", ")", ",", "\n", "msk_raw", ".", "shape", "[", "2", "]", ")", ",", "\n", "fill_value", "=", "0", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "msk", "[", ":", "msk_raw", ".", "shape", "[", "0", "]", ",", ":", "msk_raw", ".", "shape", "[", "1", "]", "]", "=", "msk_raw", "\n", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'getitem copy images: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "msk", "=", "self", ".", "mask_to_class", "(", "msk", ")", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'getitem mask_to_class: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "msk", ",", "msk_true", "=", "self", ".", "shift_labels", "(", "msk", ")", "\n", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'getitem shift: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "# Normalization.", "\n", "if", "np", ".", "min", "(", "img", ")", "<", "0", ":", "\n", "                ", "img", "=", "img", "+", "np", ".", "min", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "img", "-", "np", ".", "min", "(", "img", ")", "\n", "", "img", "=", "(", "img", "/", "np", ".", "max", "(", "img", ")", ")", "-", "0.5", "\n", "\n", "#print('local_batch_size: ',local_batch_size)", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "'float32'", ")", "\n", "msk", "=", "np", ".", "array", "(", "msk", ",", "dtype", "=", "'int16'", ")", "\n", "msk_true", "=", "np", ".", "array", "(", "msk_true", ",", "dtype", "=", "'int16'", ")", "\n", "if", "self", ".", "mode", "in", "[", "'Train'", ",", "'ValidateTrain'", "]", ":", "\n", "                ", "if", "self", ".", "select_non_match", "==", "'random'", ":", "\n", "                    ", "local_random_crops", "=", "50", "\n", "if", "self", ".", "local_batch_size", "*", "40", ">", "50", ":", "\n", "                        ", "local_random_crops", "=", "self", ".", "local_batch_size", "*", "40", "\n", "\n", "", "img", ",", "msk", ",", "msk_true", "=", "self", ".", "random_crops", "(", "img", ",", "msk", ",", "msk_true", ",", "local_random_crops", ")", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "'getitem random1: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "search_imgs", "=", "img", "[", "self", ".", "local_batch_size", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "search_msks", "=", "msk", "[", "self", ".", "local_batch_size", ":", ",", ":", ",", ":", "]", "\n", "search_msks_true", "=", "msk_true", "[", "self", ".", "local_batch_size", ":", ",", ":", ",", ":", "]", "\n", "\n", "img_m", "=", "np", ".", "copy", "(", "img", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "msk_m", "=", "np", ".", "copy", "(", "msk", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "msk_true_m", "=", "np", ".", "copy", "(", "msk_true", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "\n", "img_nm", "=", "np", ".", "copy", "(", "search_imgs", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "msk_nm", "=", "np", ".", "copy", "(", "search_msks", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "msk_true_nm", "=", "np", ".", "copy", "(", "search_msks_true", "[", ":", "self", ".", "local_batch_size", ",", ":", ",", ":", "]", ")", "\n", "\n", "for", "ii", "in", "range", "(", "0", ",", "self", ".", "local_batch_size", ")", ":", "\n", "                        ", "match", "=", "np", ".", "sum", "(", "msk_m", "[", "ii", "]", "==", "msk_m", "[", "ii", "]", ")", "\n", "for", "jj", "in", "range", "(", "0", ",", "search_imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "match_temp", "=", "np", ".", "sum", "(", "msk_m", "[", "ii", "]", "==", "search_msks", "[", "jj", "]", ")", "\n", "if", "match_temp", "<", "match", ":", "\n", "                                ", "img_nm", "[", "ii", "]", "=", "search_imgs", "[", "jj", "]", "\n", "msk_nm", "[", "ii", "]", "=", "search_msks", "[", "jj", "]", "\n", "msk_true_nm", "[", "ii", "]", "=", "search_msks_true", "[", "jj", "]", "\n", "match", "=", "match_temp", "\n", "", "", "", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "'getitem random2: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "                    ", "img", ",", "msk", ",", "msk_true", "=", "self", ".", "random_crops", "(", "img", ",", "msk", ",", "msk_true", ",", "self", ".", "local_batch_size", ")", "\n", "img_m", "=", "img", "\n", "msk_m", "=", "msk", "\n", "msk_true_m", "=", "msk_true", "\n", "\n", "img_nm", "=", "img", "\n", "msk_nm", "=", "np", ".", "copy", "(", "msk_m", ")", "\n", "msk_true_nm", "=", "np", ".", "copy", "(", "msk_true_m", ")", "\n", "max_class", "=", "self", ".", "num_classes", "-", "1", "\n", "\n", "if", "self", ".", "ignore_others_non_match", ":", "\n", "                        ", "max_class", "=", "self", ".", "num_classes", "-", "2", "\n", "\n", "", "for", "b", "in", "range", "(", "0", ",", "msk_nm", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "new_classes", "=", "np", ".", "random", ".", "permutation", "(", "max_class", "+", "1", ")", "\n", "\n", "next_permutation", "=", "True", "\n", "counter_p", "=", "0", "\n", "while", "next_permutation", ":", "\n", "                            ", "next_permutation", "=", "False", "\n", "counter_p", "+=", "1", "\n", "new_classes", "=", "np", ".", "random", ".", "permutation", "(", "max_class", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "max_class", "+", "1", ")", ":", "\n", "                                ", "if", "i", "==", "new_classes", "[", "i", "]", ":", "\n", "                                    ", "next_permutation", "=", "True", "\n", "break", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "0", ",", "max_class", "+", "1", ")", ":", "\n", "                            ", "msk_nm", "[", "b", "]", "[", "msk_m", "[", "b", "]", "==", "i", "]", "=", "new_classes", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "0", ",", "max_class", "+", "1", ")", ":", "\n", "                            ", "msk_true_nm", "[", "b", "]", "[", "msk_true_m", "[", "b", "]", "==", "i", "]", "=", "new_classes", "[", "i", "]", "\n", "\n", "#print(\"match % - \",str(100*match/(msk_nm.shape[1]*msk_nm.shape[2]*msk_nm.shape[0])))", "\n", "", "", "", "img_m", "=", "np", ".", "transpose", "(", "img_m", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "img_nm", "=", "np", ".", "transpose", "(", "img_nm", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "img_m", "=", "torch", ".", "from_numpy", "(", "img_m", ")", "\n", "msk_m", "=", "torch", ".", "from_numpy", "(", "msk_m", ")", "\n", "msk_true_m", "=", "torch", ".", "from_numpy", "(", "msk_true_m", ")", "\n", "img_nm", "=", "torch", ".", "from_numpy", "(", "img_nm", ")", "\n", "msk_nm", "=", "torch", ".", "from_numpy", "(", "msk_nm", ")", "\n", "msk_true_nm", "=", "torch", ".", "from_numpy", "(", "msk_true_nm", ")", "\n", "\n", "toc", "=", "datetime", ".", "now", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'getitem ending: %.2f'", ",", "(", "toc", "-", "tic", ")", ")", "\n", "", "tic", "=", "datetime", ".", "now", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "return", "img_m", ",", "msk_m", ",", "msk_true_m", ",", "img_nm", ",", "msk_nm", ",", "msk_true_nm", "\n", "\n", "", "elif", "self", ".", "mode", "in", "[", "'Validate'", ",", "'Thresholds_Train'", ",", "'Test'", ",", "'Thresholds'", "]", ":", "\n", "                ", "img", ",", "msk", ",", "msk_true", "=", "self", ".", "test_crops", "(", "img", ",", "msk", ",", "msk_true", ")", "\n", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", "\n", "msk", "=", "np", ".", "transpose", "(", "msk", ",", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "msk_true", "=", "np", ".", "transpose", "(", "msk_true", ",", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "# Turning to tensors.", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "msk", "=", "torch", ".", "from_numpy", "(", "msk", ")", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "msk_true", "=", "torch", ".", "from_numpy", "(", "msk_true", ")", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "spl", "=", "img_path", ".", "split", "(", "'/'", ")", "\n", "# Returning to iterator.", "\n", "return", "img", ",", "msk", ",", "msk_true", ",", "spl", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.ListDatasetC2AE.__len__": [[832, 842], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset", "==", "'GRSS'", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'Train'", ":", "\n", "                ", "return", "1", "\n", "", "return", "1", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'Train'", ":", "\n", "                ", "return", "self", ".", "dataset_size_factor", "*", "len", "(", "self", ".", "imgs", ")", "\n", "", "else", ":", "\n", "                ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.logloss.__init__": [[1445, 1466], ["print", "open", "f.readlines", "base.logloss.name.strip().replace().replace().replace", "base.logloss.moving_average", "base.logloss.moving_average", "line.split", "base.logloss.train_loss.append", "base.logloss.validation_loss.append", "base.logloss.epochs.append", "float", "float", "int", "base.logloss.name.strip().replace().replace", "base.logloss.name.strip().replace", "base.logloss.name.strip"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.logloss.moving_average", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.logloss.moving_average"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "savefilepath", "=", "''", ",", "prefix", "=", "''", ",", "savefile", "=", "False", ")", ":", "\n", "        ", "self", ".", "train_loss", "=", "[", "]", "\n", "self", ".", "validation_loss", "=", "[", "]", "\n", "self", ".", "epochs", "=", "[", "]", "\n", "self", ".", "name", "=", "\"\"", "\n", "self", ".", "savefilepath", "=", "savefilepath", "\n", "self", ".", "start_plotting_epoch", "=", "5", "\n", "self", ".", "savefile", "=", "savefile", "\n", "print", "(", "\"log file fath:\"", ",", "filepath", ")", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "splitted_line", "=", "line", ".", "split", "(", "';'", ")", "\n", "self", ".", "train_loss", ".", "append", "(", "float", "(", "splitted_line", "[", "14", "]", ")", ")", "\n", "self", ".", "validation_loss", ".", "append", "(", "float", "(", "splitted_line", "[", "17", "]", ")", ")", "\n", "self", ".", "epochs", ".", "append", "(", "int", "(", "splitted_line", "[", "13", "]", ")", ")", "\n", "", "self", ".", "name", "=", "prefix", "+", "splitted_line", "[", "1", "]", "+", "\"_\"", "+", "splitted_line", "[", "3", "]", "+", "\"_\"", "+", "splitted_line", "[", "13", "]", "+", "\"_\"", "+", "splitted_line", "[", "6", "]", "+", "\"_\"", "+", "splitted_line", "[", "7", "]", "+", "\"_\"", "+", "splitted_line", "[", "8", "]", "+", "\"_\"", "+", "splitted_line", "[", "9", "]", "+", "\"_\"", "+", "splitted_line", "[", "10", "]", "+", "\"_\"", "+", "splitted_line", "[", "11", "]", "+", "\"_\"", "+", "splitted_line", "[", "12", "]", "\n", "#print(splitted_line)", "\n", "self", ".", "savename", "=", "self", ".", "name", ".", "strip", "(", "' '", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'.'", ",", "''", ")", "\n", "self", ".", "train_loss_moving", "=", "self", ".", "moving_average", "(", "self", ".", "train_loss", ")", "\n", "self", ".", "validation_loss_moving", "=", "self", ".", "moving_average", "(", "self", ".", "validation_loss", ")", "\n", "", "", "def", "plot_chart", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.logloss.plot_chart": [[1466, 1489], ["matplotlib.figure", "matplotlib.figure", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.legend", "matplotlib.legend", "len", "numpy.array", "print", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.show", "matplotlib.show", "matplotlib.close", "matplotlib.close"], "methods", ["None"], ["", "", "def", "plot_chart", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "validation_loss", "[", "self", ".", "start_plotting_epoch", ":", "]", ")", "<=", "0", ":", "\n", "            ", "return", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "6", ")", ")", "\n", "plt", ".", "title", "(", "self", ".", "name", ")", "\n", "plt", ".", "plot", "(", "self", ".", "validation_loss", "[", "self", ".", "start_plotting_epoch", ":", "]", ",", "label", "=", "\"validation\"", ")", "\n", "plt", ".", "plot", "(", "self", ".", "train_loss", "[", "self", ".", "start_plotting_epoch", ":", "]", ",", "label", "=", "\"train\"", ")", "\n", "plt", ".", "plot", "(", "self", ".", "validation_loss_moving", "[", "self", ".", "start_plotting_epoch", ":", "]", ",", "label", "=", "\"validation MA\"", ")", "\n", "plt", ".", "plot", "(", "self", ".", "train_loss_moving", "[", "self", ".", "start_plotting_epoch", ":", "]", ",", "label", "=", "\"train MA\"", ")", "\n", "plt", ".", "xlabel", "(", "\"iterations\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Loss\"", ")", "\n", "label_x", "=", "[", "a", "for", "a", "in", "self", ".", "epochs", "[", "self", ".", "start_plotting_epoch", ":", "]", "if", "a", "%", "10", "==", "0", "]", "\n", "label_x_values", "=", "np", ".", "array", "(", "label_x", ")", "-", "self", ".", "start_plotting_epoch", "\n", "plt", ".", "xticks", "(", "label_x_values", ",", "label_x", ")", "#self.epochs[10:],[])", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "if", "self", ".", "savefile", ":", "\n", "            ", "print", "(", "self", ".", "savefilepath", ")", "\n", "plt", ".", "savefig", "(", "self", ".", "savefilepath", ",", "dpi", "=", "80", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "", "def", "moving_average", "(", "self", ",", "values_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.logloss.moving_average": [[1489, 1502], ["len", "moving_averages.append", "moving_averages.append", "sum"], "methods", ["None"], ["", "", "def", "moving_average", "(", "self", ",", "values_list", ")", ":", "\n", "        ", "i", "=", "0", "\n", "moving_averages", "=", "[", "]", "\n", "window_size", "=", "5", "\n", "while", "i", "<", "len", "(", "values_list", ")", ":", "\n", "            ", "if", "i", "-", "window_size", "<", "0", ":", "\n", "                ", "moving_averages", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "this_window", "=", "values_list", "[", "i", "-", "window_size", ":", "i", "]", "\n", "window_average", "=", "sum", "(", "this_window", ")", "/", "window_size", "\n", "moving_averages", ".", "append", "(", "window_average", ")", "\n", "", "i", "+=", "1", "\n", "", "return", "moving_averages", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.load_my_state_dict": [[21, 34], ["model1.state_dict", "model2.items", "print", "isinstance", "own_state[].copy_"], "function", ["None"], ["def", "load_my_state_dict", "(", "model1", ",", "model2", ")", ":", "\n", "    ", "own_state", "=", "model1", ".", "state_dict", "(", ")", "\n", "counter", "=", "0", "\n", "total_counter", "=", "0", "\n", "for", "name", ",", "param", "in", "model2", ".", "items", "(", ")", ":", "\n", "        ", "total_counter", "+=", "1", "\n", "if", "name", "not", "in", "own_state", ":", "\n", "             ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "nn", ".", "Parameter", ")", ":", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "counter", "+=", "1", "\n", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "", "print", "(", "counter", ",", "' of '", ",", "total_counter", ",", "\" - parameters loaded\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.count_parameters": [[35, 37], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.str2bool": [[38, 47], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir": [[48, 51], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "", "def", "check_mkdir", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_loaders": [[52, 78], ["base.ListDatasetC2AE", "torch.utils.data.DataLoader", "base.ListDatasetC2AE", "torch.utils.data.DataLoader", "base.ListDatasetC2AE", "torch.utils.data.DataLoader", "base.ListDatasetC2AE", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "", "def", "get_loaders", "(", "loader_args", ",", "train_overlap", "=", "True", ",", "val_overlap", "=", "True", ",", "valtrain_overlap", "=", "False", ",", "test_overlap", "=", "True", ",", "val_threshold_overlap", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "train_loader", "=", "[", "]", "\n", "valtrain_loader", "=", "[", "]", "\n", "test_loader", "=", "[", "]", "\n", "val_threshold_loader", "=", "[", "]", "\n", "\n", "if", "loader_args", ".", "train_model", ":", "\n", "        ", "train_set", "=", "ListDatasetC2AE", "(", "loader_args", ".", "dataset", ",", "'Train'", ",", "(", "loader_args", ".", "h_size", ",", "loader_args", ".", "w_size", ")", ",", "'statistical'", ",", "loader_args", ".", "hidden", ",", "overlap", "=", "train_overlap", ",", "use_dsm", "=", "True", ",", "dataset_path", "=", "loader_args", ".", "datasets_path", "+", "'/'", ",", "select_non_match", "=", "loader_args", ".", "select_non_match", ",", "ignore_others_non_match", "=", "loader_args", ".", "ignore_others_non_match", ",", "inmemory", "=", "True", ",", "local_batch_size", "=", "loader_args", ".", "local_batch_size", ",", "backgroundclasses", "=", "loader_args", ".", "backgroundclasses", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "loader_args", ".", "workers", ",", "shuffle", "=", "True", ")", "\n", "\n", "#ValidateTrain", "\n", "valtrain_set", "=", "ListDatasetC2AE", "(", "loader_args", ".", "dataset", ",", "'Thresholds'", ",", "(", "loader_args", ".", "h_size", ",", "loader_args", ".", "w_size", ")", ",", "'statistical'", ",", "loader_args", ".", "hidden", ",", "overlap", "=", "valtrain_overlap", ",", "use_dsm", "=", "True", ",", "dataset_path", "=", "loader_args", ".", "datasets_path", "+", "'/'", ",", "select_non_match", "=", "loader_args", ".", "select_non_match", ",", "ignore_others_non_match", "=", "loader_args", ".", "ignore_others_non_match", ",", "inmemory", "=", "True", ",", "local_batch_size", "=", "loader_args", ".", "local_batch_size", ",", "backgroundclasses", "=", "loader_args", ".", "backgroundclasses", ")", "\n", "valtrain_loader", "=", "DataLoader", "(", "valtrain_set", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "loader_args", ".", "workers", ",", "shuffle", "=", "False", ")", "\n", "\n", "", "if", "loader_args", ".", "prep_thresholds", ":", "\n", "        ", "val_threshold_set", "=", "ListDatasetC2AE", "(", "loader_args", ".", "dataset", ",", "'Thresholds'", ",", "(", "loader_args", ".", "h_size", ",", "loader_args", ".", "w_size", ")", ",", "'statistical'", ",", "loader_args", ".", "hidden", ",", "overlap", "=", "val_threshold_overlap", ",", "use_dsm", "=", "True", ",", "dataset_path", "=", "loader_args", ".", "datasets_path", "+", "'/'", ",", "select_non_match", "=", "loader_args", ".", "select_non_match", ",", "ignore_others_non_match", "=", "loader_args", ".", "ignore_others_non_match", ",", "inmemory", "=", "True", ",", "local_batch_size", "=", "loader_args", ".", "local_batch_size", ",", "backgroundclasses", "=", "loader_args", ".", "backgroundclasses", ")", "\n", "val_threshold_loader", "=", "DataLoader", "(", "val_threshold_set", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "loader_args", ".", "workers", ",", "shuffle", "=", "False", ")", "\n", "\n", "", "if", "loader_args", ".", "prep_eval", "or", "loader_args", ".", "eval_model", "==", "True", ":", "\n", "        ", "test_set", "=", "ListDatasetC2AE", "(", "loader_args", ".", "dataset", ",", "'Test'", ",", "(", "loader_args", ".", "h_size", ",", "loader_args", ".", "w_size", ")", ",", "'statistical'", ",", "loader_args", ".", "hidden", ",", "overlap", "=", "test_overlap", ",", "use_dsm", "=", "True", ",", "dataset_path", "=", "loader_args", ".", "datasets_path", "+", "'/'", ",", "select_non_match", "=", "loader_args", ".", "select_non_match", ",", "ignore_others_non_match", "=", "loader_args", ".", "ignore_others_non_match", ",", "inmemory", "=", "True", ",", "local_batch_size", "=", "loader_args", ".", "local_batch_size", ",", "backgroundclasses", "=", "loader_args", ".", "backgroundclasses", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "loader_args", ".", "workers", ",", "shuffle", "=", "False", ")", "\n", "", "if", "loader_args", ".", "prep_eval", "==", "False", "and", "loader_args", ".", "eval_model", "==", "True", ":", "\n", "        ", "test_loader", "=", "len", "(", "test_loader", ")", "\n", "\n", "", "return", "train_loader", ",", "valtrain_loader", ",", "test_loader", ",", "val_threshold_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.parse_arguments": [[843, 897], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print"], "function", ["None"], ["", "", "", "", "def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"-e\"", ",", "\"--epochs\"", ",", "dest", "=", "\"epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"number of epochs\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-lr\"", ",", "\"--lr\"", ",", "dest", "=", "\"lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-wd\"", ",", "\"--weight_decay\"", ",", "dest", "=", "\"weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "\"weight decay\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-momentum\"", ",", "\"--momentum\"", ",", "dest", "=", "\"momentum\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"momentum\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-w\"", ",", "\"--workers\"", ",", "dest", "=", "\"workers\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"data loarder workers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-w_size\"", ",", "\"--w_size\"", ",", "dest", "=", "\"w_size\"", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "\"width for image resizing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-h_size\"", ",", "\"--h_size\"", ",", "dest", "=", "\"h_size\"", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "\"height for image resizing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-n\"", ",", "\"--n_classes\"", ",", "dest", "=", "\"n_classes\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"number of classes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-dataset\"", ",", "\"--dataset\"", ",", "dest", "=", "\"dataset\"", ",", "default", "=", "'Vaihingen'", ",", "help", "=", "\"dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-onehot\"", ",", "\"--onehot\"", ",", "dest", "=", "\"onehot\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"use one hot encoding for condition model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-select_non_match\"", ",", "\"--select_non_match\"", ",", "dest", "=", "\"select_non_match\"", ",", "default", "=", "'random'", ",", "help", "=", "\"method for selecting non match patches (random,none)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-i\"", ",", "\"--ignore_others_non_match\"", ",", "dest", "=", "\"ignore_others_non_match\"", ",", "default", "=", "False", ",", "help", "=", "\"ignore class -others- to generate non match patch\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cs\"", ",", "\"--cs_name\"", ",", "dest", "=", "\"cs_name\"", ",", "default", "=", "'unet'", ",", "help", "=", "\"closed set model name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-save_images\"", ",", "\"--save_images\"", ",", "dest", "=", "\"save_images\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"save_images after generating metrics\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-early_stop\"", ",", "\"--early_stop\"", ",", "dest", "=", "\"early_stop\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"early stop training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-eval_type\"", ",", "\"--eval_type\"", ",", "dest", "=", "\"eval_type\"", ",", "default", "=", "'val_train'", ",", "help", "=", "\"which images use to generate thresholds (val_train,train)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ckpt_path\"", ",", "\"--ckpt_path\"", ",", "dest", "=", "\"ckpt_path\"", ",", "default", "=", "'/mnt/DADOS_GRENOBLE_1/ian/openseg/ckpt'", ",", "help", "=", "\"base path to save trained models\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-outp_path\"", ",", "\"--outp_path\"", ",", "dest", "=", "\"outp_path\"", ",", "default", "=", "'/mnt/DADOS_GRENOBLE_1/ian/openseg/outputs'", ",", "help", "=", "\"base path to save metrics, logs, images and charts\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-datasets_path\"", ",", "\"--datasets_path\"", ",", "dest", "=", "\"datasets_path\"", ",", "default", "=", "'/mnt/DADOS_GRENOBLE_1/ian/datasets'", ",", "help", "=", "\"base path for dataset\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-skip_connections\"", ",", "\"--skip_connections\"", ",", "dest", "=", "\"skip_connections\"", ",", "default", "=", "'csdec_all'", ",", "help", "=", "\"list all skip connections to be used ('osenc,all,csenc,none')\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-norm\"", ",", "\"--normalizations\"", ",", "dest", "=", "\"normalizations\"", ",", "default", "=", "'batch'", ",", "help", "=", "\"list all kinds of normalizations to be used ('none,batch,instance')\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-activations\"", ",", "\"--activations\"", ",", "dest", "=", "\"activations\"", ",", "default", "=", "'relu'", ",", "help", "=", "\"list all skip activation to be used ('relu,leakyrelu')\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-alphas\"", ",", "\"--alphas\"", ",", "dest", "=", "\"alphas\"", ",", "default", "=", "\"0.95\"", ",", "help", "=", "\"alpha parameter to balance match and non match loss\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-train\"", ",", "\"--train\"", ",", "dest", "=", "\"train_model\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"train model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-load\"", ",", "\"--load\"", ",", "dest", "=", "\"load_model\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"load pretreined model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-eval\"", ",", "\"--eval\"", ",", "dest", "=", "\"eval_model\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"generate all evaluation metrics\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-o\"", ",", "\"--onlynew\"", ",", "dest", "=", "\"only_new_model\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"train only if the model do not exists\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-prepeval\"", ",", "\"--prepeval\"", ",", "dest", "=", "\"prep_eval\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"train only if the model do not exists\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-prepthresholds\"", ",", "\"--prepthresholds\"", ",", "dest", "=", "\"prep_thresholds\"", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"train only if the model do not exists\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-metrics\"", ",", "\"--metrics\"", ",", "dest", "=", "\"metrics\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"calculate metrics if eval==true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-final_extra_convs_block\"", ",", "\"--final_extra_convs_block\"", ",", "dest", "=", "\"final_extra_convs_block\"", ",", "default", "=", "\"0\"", ",", "help", "=", "\"how many convs the final extra conv block shoul have, 0 - means no extra block\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-model\"", ",", "\"--model\"", ",", "dest", "=", "\"model\"", ",", "default", "=", "'CoReSeg'", ",", "help", "=", "\"model name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-hidden\"", ",", "\"--hidden\"", ",", "dest", "=", "\"hidden\"", ",", "default", "=", "'0'", ",", "help", "=", "\"hidden classes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-validaterate\"", ",", "\"--validaterate\"", ",", "dest", "=", "\"validaterate\"", ",", "default", "=", "1", ",", "help", "=", "\"hidden classes\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import", "sys", "\n", "IN_COLAB", "=", "'google.colab'", "in", "sys", ".", "modules", "\n", "if", "IN_COLAB", ":", "\n", "        ", "args", ".", "datasets_path", "=", "'.'", "\n", "args", ".", "ckpt_path", "=", "'ckpt'", "\n", "args", ".", "outp_path", "=", "'outputs'", "\n", "print", "(", "\"IN_COLAB\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"NOT_IN_COLAB\"", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.validate_train": [[898, 910], ["base.get_predictions_reconstructions", "base.get_flatten_image", "base.get_flatten_image", "base.get_flatten_image", "base.get_flatten_image", "base.roc_auc_os"], "function", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_predictions_reconstructions", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_flatten_image", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_flatten_image", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_flatten_image", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_flatten_image", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.roc_auc_os"], ["", "def", "validate_train", "(", "loader", ",", "net", ",", "args", ",", "thresholds", ",", "overlap", ")", ":", "\n", "#full_val_patches = get_predictions_reconstructions(loader, net, args)", "\n", "#full_imgs, full_msks, full_trues, full_prds, full_outs, full_minlosses = get_full_images(full_val_patches, overlap=overlap)", "\n", "\n", "    ", "full_imgs", ",", "full_msks", ",", "full_trues", ",", "full_prds", ",", "full_outs", ",", "full_minlosses", "=", "get_predictions_reconstructions", "(", "loader", ",", "net", ",", "args", ")", "\n", "\n", "flatten_full_msks", "=", "get_flatten_image", "(", "full_msks", ")", "\n", "flatten_full_trues", "=", "get_flatten_image", "(", "full_trues", ")", "\n", "flatten_full_prds", "=", "get_flatten_image", "(", "full_prds", ")", "\n", "flatten_full_minlosses", "=", "get_flatten_image", "(", "full_minlosses", ")", "\n", "\n", "return", "roc_auc_os", "(", "flatten_full_minlosses", ",", "flatten_full_trues", ",", "args", ".", "num_known_classes", "-", "1", ",", "thresholds", ")", ",", "flatten_full_msks", ",", "flatten_full_trues", ",", "flatten_full_prds", ",", "flatten_full_minlosses", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.loss_custom": [[911, 927], ["torch.abs", "torch.abs", "torch.zeros", "torch.zeros", "range", "torch.abs", "torch.abs", "torch.abs.mean", "torch.abs.sum"], "function", ["None"], ["", "def", "loss_custom", "(", "input", ",", "target", ",", "mask_m", "=", "None", ",", "mask_nm", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "if", "mask_m", "is", "None", "or", "mask_nm", "is", "None", ":", "\n", "        ", "out", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "", "else", ":", "\n", "        ", "condition", "=", "mask_m", "==", "mask_nm", "\n", "new_condition", "=", "torch", ".", "zeros", "(", "input", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "i", "in", "range", "(", "input", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "new_condition", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "condition", "\n", "\n", "", "out", "=", "torch", ".", "abs", "(", "input", "[", "~", "new_condition", "]", "-", "target", "[", "~", "new_condition", "]", ")", "\n", "\n", "", "if", "reduction", "==", "\"mean\"", ":", "\n", "        ", "return", "out", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "\"None\"", ":", "\n", "        ", "return", "out", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.train_os": [[929, 1010], ["net.train", "net.enc1.parameters", "net.enc2.parameters", "net.enc3.parameters", "net.enc4.parameters", "net.center.parameters", "net.dec4.parameters", "net.dec3.parameters", "net.dec2.parameters", "net.dec1.parameters", "net.final.parameters", "net.enc1.eval", "net.enc2.eval", "net.enc3.eval", "net.enc4.eval", "net.center.eval", "net.dec4.eval", "net.dec3.eval", "net.dec2.eval", "net.dec1.eval", "net.final.eval", "time.time", "time.time", "time.time", "time.time", "enumerate", "time.time", "time.time", "numpy.asarray", "print", "print", "Exception", "time.time", "time.time", "time.time", "time.time", "inps_m.to.to", "inps_nm.to.to", "labs_m.to.to", "labs_nm.to.to", "optimizer.zero_grad", "net", "loss.backward", "optimizer.step", "np.asarray.append", "len", "len", "inps_m.to.squeeze_", "labs_m.to.squeeze_", "inps_nm.to.squeeze_", "labs_nm.to.squeeze_", "inps_m.to.float", "criterion", "criterion", "loss.data.item", "labs_m.to.float", "labs_nm.to.float", "train_loss[].mean", "train_loss[].std"], "function", ["None"], ["", "", "def", "train_os", "(", "train_loader", ",", "net", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_known_classes", ",", "num_unknown_classes", ",", "hidden", ",", "train_args", ",", "train_log_path", ",", "alpha", "=", "0.9", ",", "print_intermediate_images", "=", "False", ",", "intermediate_images_path", "=", "''", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "\n", "for", "p", "in", "net", ".", "enc1", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "enc2", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "enc3", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "enc4", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "center", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "dec4", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "dec3", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "dec2", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "dec1", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net", ".", "final", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "if", "len", "(", "intermediate_images_path", ")", "==", "0", "and", "print_intermediate_images", ":", "\n", "        ", "raise", "Exception", "(", "\"cannot print intermetiate images without a path\"", ")", "\n", "\n", "", "net", ".", "enc1", ".", "eval", "(", ")", "\n", "net", ".", "enc2", ".", "eval", "(", ")", "\n", "net", ".", "enc3", ".", "eval", "(", ")", "\n", "net", ".", "enc4", ".", "eval", "(", ")", "\n", "net", ".", "center", ".", "eval", "(", ")", "\n", "net", ".", "dec4", ".", "eval", "(", ")", "\n", "net", ".", "dec3", ".", "eval", "(", ")", "\n", "net", ".", "dec2", ".", "eval", "(", ")", "\n", "net", ".", "dec1", ".", "eval", "(", ")", "\n", "net", ".", "final", ".", "eval", "(", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "tic0", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "batch_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "toc0", "=", "time", ".", "time", "(", ")", "\n", "tic1", "=", "time", ".", "time", "(", ")", "\n", "\n", "inps_m", ",", "labs_m", ",", "true_m", ",", "inps_nm", ",", "labs_nm", ",", "true_nm", "=", "batch_data", "\n", "inps_m", "=", "inps_m", ".", "to", "(", "train_args", ".", "device", ")", "\n", "inps_nm", "=", "inps_nm", ".", "to", "(", "train_args", ".", "device", ")", "\n", "labs_m", "=", "labs_m", ".", "to", "(", "train_args", ".", "device", ")", "\n", "labs_nm", "=", "labs_nm", ".", "to", "(", "train_args", ".", "device", ")", "\n", "\n", "if", "(", "len", "(", "inps_m", ".", "shape", ")", "==", "5", ")", ":", "\n", "            ", "inps_m", ".", "squeeze_", "(", "0", ")", "\n", "labs_m", ".", "squeeze_", "(", "0", ")", "\n", "inps_nm", ".", "squeeze_", "(", "0", ")", "\n", "labs_nm", ".", "squeeze_", "(", "0", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "outs_m", ",", "outs_nm", "=", "net", "(", "inps_m", ".", "float", "(", ")", ",", "(", "labs_m", ".", "float", "(", ")", ",", "labs_nm", ".", "float", "(", ")", ")", ")", "\n", "\n", "match_loss", "=", "alpha", "*", "criterion", "(", "outs_m", ",", "inps_m", ")", "\n", "nonmatch_loss", "=", "(", "1", "-", "alpha", ")", "*", "criterion", "(", "inps_nm", ",", "outs_nm", ",", "labs_m", ",", "labs_nm", ")", "\n", "\n", "loss", "=", "match_loss", "+", "nonmatch_loss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", ".", "append", "(", "(", "loss", ".", "data", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "toc", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_loss", "=", "np", ".", "asarray", "(", "train_loss", ")", "\n", "\n", "print", "(", "'-------------------------------------------------------------------'", ")", "\n", "print", "(", "'[epoch %d], [train rec loss %.4f +/- %.4f], [training time %.2f]'", "%", "(", "\n", "epoch", ",", "train_loss", "[", ":", "]", ".", "mean", "(", ")", ",", "train_loss", "[", ":", "]", ".", "std", "(", ")", ",", "(", "toc", "-", "tic", ")", ")", ")", "\n", "#print('-------------------------------------------------------------------')", "\n", "return", "train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.config_execution": [[1012, 1126], ["str", "len", "datetime.datetime.now", "str", "print", "os.path.join", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "os.path.join", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "base.check_mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.device", "torch.device", "print", "args.thresholds.append", "args.thresholds.append", "args.thresholds.append", "args.thresholds.append", "args.thresholds.sort", "int", "len", "datetime.now.strftime", "str", "os.path.isfile", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "int", "str", "torch.cuda.is_available", "torch.cuda.is_available", "range", "args.hidden.split", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.check_mkdir"], ["", "def", "config_execution", "(", "args", ",", "dataset", ",", "hidden", ",", "task", ",", "epochs", "=", "None", ")", ":", "\n", "    ", "args", ".", "final_extra_convs_block", "=", "'0'", "\n", "\n", "if", "task", "==", "'train'", "or", "task", "==", "'all'", ":", "\n", "        ", "args", ".", "train_model", "=", "True", "\n", "", "if", "task", "==", "'prepare_evaluation'", "or", "task", "==", "'all'", "or", "task", "==", "'eval_all'", ":", "\n", "        ", "args", ".", "prep_eval", "=", "True", "\n", "", "if", "task", "==", "'define_thresholds'", "or", "task", "==", "'all'", "or", "task", "==", "'eval_all'", ":", "\n", "        ", "args", ".", "prep_thresholds", "=", "True", "\n", "", "if", "task", "==", "'eval'", "or", "task", "==", "'all'", "or", "task", "==", "'eval_all'", ":", "\n", "        ", "args", ".", "eval_model", "=", "True", "\n", "\n", "", "if", "dataset", "==", "'vaihingen'", ":", "\n", "        ", "args", ".", "dataset", "=", "'Vaihingen'", "\n", "if", "hidden", "==", "0", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.92'", "\n", "", "elif", "hidden", "==", "1", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.89'", "\n", "", "elif", "hidden", "==", "2", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.89'", "\n", "", "elif", "hidden", "==", "3", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.93'", "\n", "", "elif", "hidden", "==", "4", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.94'", "\n", "", "", "elif", "dataset", "==", "'potsdam'", ":", "\n", "        ", "args", ".", "dataset", "=", "'Potsdam'", "\n", "if", "hidden", "==", "0", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.95'", "\n", "", "elif", "hidden", "==", "1", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.85'", "\n", "", "elif", "hidden", "==", "2", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.94'", "\n", "", "elif", "hidden", "==", "3", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.92'", "\n", "", "elif", "hidden", "==", "4", ":", "\n", "            ", "args", ".", "alphas", "=", "'0.85'", "\n", "", "", "args", ".", "epochs", "=", "100", "\n", "if", "epochs", "is", "not", "None", ":", "\n", "        ", "args", ".", "epochs", "=", "int", "(", "epochs", ")", "\n", "\n", "\n", "", "args", ".", "hidden", "=", "str", "(", "hidden", ")", "\n", "args", ".", "backgroundclasses", "=", "[", "]", "\n", "hidden", "=", "[", "]", "\n", "if", "'_'", "in", "args", ".", "hidden", ":", "\n", "        ", "hidden", "=", "[", "int", "(", "h", ")", "for", "h", "in", "args", ".", "hidden", ".", "split", "(", "'_'", ")", "]", "\n", "", "else", ":", "\n", "        ", "hidden", "=", "[", "int", "(", "args", ".", "hidden", ")", "]", "\n", "\n", "", "args", ".", "hidden", "=", "hidden", "\n", "args", ".", "hidden_classes", "=", "hidden", "\n", "args", ".", "num_known_classes", "=", "args", ".", "n_classes", "-", "len", "(", "hidden", ")", "\n", "args", ".", "num_unknown_classes", "=", "len", "(", "hidden", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "# current date and time", "\n", "datestr", "=", "str", "(", "now", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "\n", "\n", "# Setting experiment name.", "\n", "exp_name", "=", "args", ".", "model", "+", "'_'", "+", "args", ".", "cs_name", "+", "\"_\"", "+", "args", ".", "dataset", "+", "\"_\"", "+", "str", "(", "args", ".", "hidden_classes", "[", "0", "]", ")", "\n", "\n", "pretreined_path_closedset", "=", "args", ".", "ckpt_path", "+", "'/'", "+", "args", ".", "cs_name", "+", "'_'", "+", "args", ".", "dataset", "+", "'_base_dsm_'", "+", "str", "(", "args", ".", "hidden_classes", "[", "0", "]", ")", "+", "'/model_600.pth'", "\n", "\n", "if", "args", ".", "dataset", "==", "'Vaihingen'", ":", "\n", "        ", "pretreined_path_closedset", "=", "args", ".", "ckpt_path", "+", "'/'", "+", "args", ".", "cs_name", "+", "'_'", "+", "args", ".", "dataset", "+", "'_base_dsm_'", "+", "str", "(", "args", ".", "hidden_classes", "[", "0", "]", ")", "+", "'/model_1200.pth'", "\n", "\n", "", "print", "(", "\"Closed set pretreined model file exists? \"", ",", "os", ".", "path", ".", "isfile", "(", "pretreined_path_closedset", ")", ")", "\n", "\n", "pretrained_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "exp_name", ",", "'model_os_'", "+", "str", "(", "args", ".", "select_non_match", ")", "+", "\"_\"", "+", "str", "(", "args", ".", "ignore_others_non_match", ")", "+", "\"_\"", "+", "str", "(", "args", ".", "epochs", ")", "+", "'.pth'", ")", "\n", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "exp_name", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ")", ")", "\n", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'images'", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'charts'", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'images'", ",", "exp_name", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'charts'", ",", "exp_name", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'charts'", ",", "exp_name", ",", "'roc'", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'charts'", ",", "exp_name", ",", "'trainlog'", ")", ")", "\n", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "exp_name", ")", ")", "\n", "final_outp_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "exp_name", ")", "\n", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "final_outp_path", ",", "'images'", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "final_outp_path", ",", "'charts'", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "final_outp_path", ",", "'charts'", ",", "'roc'", ")", ")", "\n", "check_mkdir", "(", "os", ".", "path", ".", "join", "(", "final_outp_path", ",", "'charts'", ",", "'trainlog'", ")", ")", "\n", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'images'", ",", "exp_name", ")", "\n", "charts_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outp_path", ",", "'charts'", ",", "exp_name", ")", "\n", "\n", "images_path_roc", "=", "os", ".", "path", ".", "join", "(", "charts_path", ",", "'roc'", ")", "\n", "images_path_trainglog", "=", "os", ".", "path", ".", "join", "(", "charts_path", ",", "'trainlog'", ")", "\n", "metrics_path", "=", "os", ".", "path", ".", "join", "(", "final_outp_path", ",", "'metrics_'", "+", "args", ".", "eval_type", "+", "\"_\"", "+", "datestr", "+", "'.csv'", ")", "\n", "\n", "# Setting device [0|1|2].", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "args", ".", "device", "=", "device", "\n", "print", "(", "device", ")", "\n", "\n", "args", ".", "thresholds", "=", "[", "i", "/", "100", "for", "i", "in", "range", "(", "90", ",", "101", ")", "]", "\n", "args", ".", "thresholds", ".", "append", "(", "0.85", ")", "\n", "args", ".", "thresholds", ".", "append", "(", "0.80", ")", "\n", "args", ".", "thresholds", ".", "append", "(", "0.75", ")", "\n", "args", ".", "thresholds", ".", "append", "(", "0.70", ")", "\n", "args", ".", "thresholds", ".", "sort", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'Vaihingen'", ":", "\n", "        ", "args", ".", "local_batch_size", "=", "2", "\n", "", "else", ":", "\n", "        ", "args", ".", "local_batch_size", "=", "1", "\n", "\n", "\n", "", "return", "args", ",", "exp_name", ",", "pretrained_path", ",", "datestr", ",", "final_outp_path", ",", "images_path_roc", ",", "images_path_trainglog", ",", "metrics_path", ",", "pretreined_path_closedset", ",", "images_path", ",", "charts_path", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_predictions_reconstructions": [[1127, 1261], ["net.eval", "sys.stdout.flush", "int", "len", "torch.no_grad", "torch.no_grad", "time.time", "time.time", "enumerate", "time.time", "time.time", "print", "str().split", "print", "sys.stdout.flush", "inps_batch.squeeze.squeeze", "labs_batch.squeeze.squeeze", "true_batch.squeeze.squeeze", "range", "base.get_full_images", "img_list.append", "msk_list.append", "true_list.append", "outs_list.append", "numpy.array", "minlosses_list.append", "prds_list.append", "inps_batch.squeeze.size", "print", "sys.stdout.flush", "range", "img_full.append", "msk_full.append", "true_full.append", "np.array.append", "minlosses_full.append", "str", "inps_batch.squeeze.size", "inps_batch[].unsqueeze", "labs_batch[].unsqueeze().unsqueeze", "true_batch[].unsqueeze", "inps_batch[].unsqueeze.cuda", "labs_batch[].unsqueeze().unsqueeze.cuda", "true.cuda.cuda", "net.segment_forward", "torch.softmax", "prds_full.append", "range", "numpy.array", "numpy.min().squeeze", "skimage.util.img_as_ubyte", "skimage.util.img_as_ubyte", "skimage.util.img_as_ubyte", "skimage.util.img_as_ubyte", "outs.cpu().numpy", "img_row_list.append", "msk_row_list.append", "dsm_row_list.append", "true_row_list.append", "outs_row_list.append", "minlosses_row_list.append", "len", "F.softmax.data.max", "prds.cpu().numpy", "str", "[].numpy", "matplotlib.imsave", "matplotlib.imsave", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "net.condition_forward", "torch.abs().mean", "torch.abs().mean", "np.array.append", "numpy.transpose", "true.cuda.cpu().squeeze().numpy().astype", "labs.cuda.cpu().squeeze().numpy().astype", "inps_batch.squeeze.size", "labs_batch[].unsqueeze", "numpy.min", "numpy.max", "os.path.join", "os.path.join", "prds.detach().cpu().squeeze().numpy", "numpy.ones", "torch.abs().mean.cpu().numpy", "[].numpy", "matplotlib.imsave", "numpy.min", "outs.cpu", "prds.cpu", "str", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.abs", "torch.abs", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "os.path.join", "true.cuda.cpu().squeeze().numpy", "labs.cuda.cpu().squeeze().numpy", "str", "inps.cuda.detach().cpu().squeeze().permute", "prds.detach().cpu().squeeze", "torch.abs().mean.cpu", "torch.from_numpy", "torch.from_numpy", "net.condition_forward.detach().cpu().squeeze().permute", "true.cuda.cpu().squeeze", "labs.cuda.cpu().squeeze", "inps.cuda.detach().cpu().squeeze", "prds.detach().cpu", "str", "inps.cuda.cpu().squeeze().numpy", "net.condition_forward.detach().cpu().squeeze", "inps.cuda.cpu().squeeze().numpy", "true.cuda.cpu", "labs.cuda.cpu", "inps.cuda.detach().cpu", "prds.detach", "inps.cuda.cpu().squeeze", "net.condition_forward.detach().cpu", "inps.cuda.cpu().squeeze", "inps.cuda.detach", "inps.cuda.cpu", "net.condition_forward.detach", "inps.cuda.cpu"], "function", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_full_images", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.segment_forward", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.condition_forward"], ["", "def", "get_predictions_reconstructions", "(", "test_loader", ",", "net", ",", "args", ",", "print_intermediate_images", "=", "False", ",", "intermediate_images_path", "=", "''", ")", ":", "\n", "# Setting network for evaluation mode.", "\n", "    ", "num_known_classes", "=", "int", "(", "args", ".", "n_classes", ")", "-", "len", "(", "str", "(", "args", ".", "hidden_classes", ")", ".", "split", "(", "'_'", ")", ")", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "img_list", "=", "[", "]", "\n", "msk_list", "=", "[", "]", "\n", "dsm_list", "=", "[", "]", "\n", "true_list", "=", "[", "]", "\n", "outs_list", "=", "[", "]", "\n", "minlosses_list", "=", "[", "]", "\n", "prds_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "# Iterating over batches.", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "print", "(", "'get prd Batch %d/%d'", "%", "(", "i", "+", "1", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "# Obtaining images, labels and paths for batch.", "\n", "inps_batch", ",", "labs_batch", ",", "true_batch", ",", "img_name", "=", "data", "\n", "\n", "inps_batch", "=", "inps_batch", ".", "squeeze", "(", ")", "\n", "labs_batch", "=", "labs_batch", ".", "squeeze", "(", ")", "\n", "true_batch", "=", "true_batch", ".", "squeeze", "(", ")", "\n", "\n", "#print(inps_batch.shape)", "\n", "img_full", "=", "[", "]", "\n", "msk_full", "=", "[", "]", "\n", "true_full", "=", "[", "]", "\n", "dsm_full", "=", "[", "]", "\n", "outs_full", "=", "[", "]", "\n", "minlosses_full", "=", "[", "]", "\n", "# Iterating over patches inside batch.", "\n", "#tic = time.time()", "\n", "prds_full", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "inps_batch", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "print", "(", "'    get prd MiniBatch %d/%d'", "%", "(", "j", "+", "1", ",", "inps_batch", ".", "size", "(", "0", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "img_row_list", "=", "[", "]", "\n", "msk_row_list", "=", "[", "]", "\n", "true_row_list", "=", "[", "]", "\n", "dsm_row_list", "=", "[", "]", "\n", "outs_row_list", "=", "[", "]", "\n", "minlosses_row_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "inps_batch", ".", "size", "(", "1", ")", ")", ":", "\n", "                    ", "inps", "=", "inps_batch", "[", "j", ",", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", "labs", "=", "labs_batch", "[", "j", ",", "k", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "true", "=", "true_batch", "[", "j", ",", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", "# Casting to cuda variables.", "\n", "imgs", "=", "inps", ".", "cuda", "(", ")", "#args['device'])", "\n", "msks", "=", "labs", ".", "cuda", "(", ")", "#args['device'])", "\n", "true", "=", "true", ".", "cuda", "(", ")", "#args['device'])", "\n", "\n", "prds", "=", "None", "\n", "rec_losses", "=", "[", "]", "\n", "outs", ",", "enc1", ",", "enc2", ",", "enc3", ",", "enc4", ",", "center", ",", "dec1", ",", "dec2", ",", "dec3", ",", "dec4", "=", "net", ".", "segment_forward", "(", "imgs", ")", "\n", "# semantic segmentation prediction", "\n", "# Computing probabilities.", "\n", "soft_outs", "=", "F", ".", "softmax", "(", "outs", ",", "dim", "=", "1", ")", "\n", "# Obtaining prior predictions.                    ", "\n", "prds", "=", "soft_outs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "#print(outs.shape)", "\n", "prds_full", ".", "append", "(", "prds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "img_unique_seq", "=", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "j", ")", "+", "'_'", "+", "str", "(", "k", ")", "\n", "\n", "if", "print_intermediate_images", ":", "\n", "                        ", "visible", "=", "imgs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "numpy", "(", ")", "\n", "visible", "=", "visible", "-", "np", ".", "min", "(", "visible", ")", "\n", "visible", "=", "visible", "/", "np", ".", "max", "(", "visible", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "intermediate_images_path", ",", "'test_'", "+", "img_unique_seq", "+", "'_img.png'", ")", ",", "visible", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "intermediate_images_path", ",", "'test_'", "+", "img_unique_seq", "+", "'_preds.png'", ")", ",", "prds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "\n", "", "for", "ii", "in", "range", "(", "num_known_classes", ")", ":", "\n", "                        ", "condition", "=", "np", ".", "ones", "(", "msks", ".", "shape", ")", "*", "ii", "\n", "condition", "=", "torch", ".", "from_numpy", "(", "condition", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "# Forward", "\n", "recs", "=", "net", ".", "condition_forward", "(", "condition", ",", "enc1", ",", "enc2", ",", "enc3", ",", "enc4", ",", "center", ",", "dec1", ",", "dec2", ",", "dec3", ",", "dec4", ")", "\n", "# Reconstruction prediction", "\n", "rec_loss", "=", "torch", ".", "abs", "(", "recs", "-", "imgs", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "rec_losses", ".", "append", "(", "rec_loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "print_intermediate_images", ":", "\n", "                            ", "visible", "=", "recs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "numpy", "(", ")", "\n", "visible", "[", ":", ",", ":", ",", "0", "]", "=", "visible", "[", ":", ",", ":", ",", "0", "]", "-", "np", ".", "min", "(", "visible", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "visible", "[", ":", ",", ":", ",", "0", "]", "=", "visible", "[", ":", ",", ":", ",", "0", "]", "/", "np", ".", "max", "(", "visible", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "visible", "[", ":", ",", ":", ",", "1", "]", "=", "visible", "[", ":", ",", ":", ",", "1", "]", "-", "np", ".", "min", "(", "visible", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "visible", "[", ":", ",", ":", ",", "1", "]", "=", "visible", "[", ":", ",", ":", ",", "1", "]", "/", "np", ".", "max", "(", "visible", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "visible", "[", ":", ",", ":", ",", "2", "]", "=", "visible", "[", ":", ",", ":", ",", "2", "]", "-", "np", ".", "min", "(", "visible", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "visible", "[", ":", ",", ":", ",", "2", "]", "=", "visible", "[", ":", ",", ":", ",", "2", "]", "/", "np", ".", "max", "(", "visible", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "intermediate_images_path", ",", "'test_'", "+", "img_unique_seq", "+", "'_cond_'", "+", "str", "(", "ii", ")", "+", "'.png'", ")", ",", "visible", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "\n", "", "", "rec_losses", "=", "np", ".", "array", "(", "rec_losses", ")", "\n", "min_loss", "=", "np", ".", "min", "(", "rec_losses", ",", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "img_np", "=", "util", ".", "img_as_ubyte", "(", "np", ".", "transpose", "(", "(", "(", "imgs", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "[", "0", ":", "3", ",", ":", ",", ":", "]", "+", "0.5", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "dsm_np", "=", "util", ".", "img_as_ubyte", "(", "(", "(", "imgs", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "[", "-", "1", ",", ":", ",", ":", "]", "+", "0.5", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "true_np", "=", "util", ".", "img_as_ubyte", "(", "true", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "msk_np", "=", "util", ".", "img_as_ubyte", "(", "msks", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "outs_np", "=", "outs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "img_row_list", ".", "append", "(", "img_np", ")", "\n", "msk_row_list", ".", "append", "(", "msk_np", ")", "\n", "dsm_row_list", ".", "append", "(", "dsm_np", ")", "\n", "true_row_list", ".", "append", "(", "true_np", ")", "\n", "outs_row_list", ".", "append", "(", "outs_np", ")", "\n", "minlosses_row_list", ".", "append", "(", "min_loss", ")", "\n", "\n", "", "img_full", ".", "append", "(", "img_row_list", ")", "\n", "msk_full", ".", "append", "(", "msk_row_list", ")", "\n", "true_full", ".", "append", "(", "true_row_list", ")", "\n", "outs_full", ".", "append", "(", "outs_row_list", ")", "\n", "minlosses_full", ".", "append", "(", "minlosses_row_list", ")", "\n", "\n", "", "full_imgs", ",", "full_msks", ",", "full_trues", ",", "full_prds", ",", "full_outs", ",", "full_minlosses", "=", "get_full_images", "(", "[", "[", "img_full", "]", ",", "[", "msk_full", "]", ",", "[", "true_full", "]", ",", "[", "outs_full", "]", ",", "[", "minlosses_full", "]", "]", ",", "overlap", "=", "test_loader", ".", "dataset", ".", "overlap", ")", "\n", "\n", "img_list", ".", "append", "(", "full_imgs", "[", "0", "]", ")", "\n", "msk_list", ".", "append", "(", "full_msks", "[", "0", "]", ")", "\n", "true_list", ".", "append", "(", "full_trues", "[", "0", "]", ")", "\n", "outs_list", ".", "append", "(", "full_outs", "[", "0", "]", ")", "\n", "outs_full", "=", "np", ".", "array", "(", "full_outs", "[", "0", "]", ")", "\n", "minlosses_list", ".", "append", "(", "full_minlosses", "[", "0", "]", ")", "\n", "prds_list", ".", "append", "(", "full_prds", "[", "0", "]", ")", "\n", "\n", "", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'        Elapsed Time: %.2f'", "%", "(", "toc", "-", "tic", ")", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "return", "img_list", ",", "msk_list", ",", "true_list", ",", "prds_list", ",", "outs_list", ",", "minlosses_list", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_full_images": [[1262, 1345], ["range", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "torch.from_numpy", "torch.from_numpy", "torch.softmax", "numpy.array", "base.trim_coords", "full_imgs.append", "full_msks.append", "full_prds.append", "full_trues.append", "full_outs.append", "full_minlosses.append", "len", "range", "F.softmax.data.max", "np.array.squeeze().numpy", "numpy.sum", "len", "len", "len", "len", "len", "len", "len", "np.array.squeeze"], "function", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.trim_coords"], ["", "def", "get_full_images", "(", "full_patches", ",", "overlap", "=", "True", ")", ":", "\n", "    ", "imgs", "=", "full_patches", "[", "0", "]", "\n", "msks", "=", "full_patches", "[", "1", "]", "\n", "trues", "=", "full_patches", "[", "2", "]", "\n", "outs", "=", "full_patches", "[", "3", "]", "\n", "minlosses", "=", "full_patches", "[", "4", "]", "\n", "if", "len", "(", "full_patches", ")", "==", "6", ":", "\n", "        ", "dsms", "=", "full_patches", "[", "5", "]", "\n", "\n", "", "stride", "=", "(", "224", "//", "2", ")", "\n", "if", "overlap", "==", "False", ":", "\n", "        ", "stride", "=", "224", "\n", "\n", "", "full_imgs", "=", "[", "]", "\n", "full_msks", "=", "[", "]", "\n", "full_prds", "=", "[", "]", "\n", "full_trues", "=", "[", "]", "\n", "full_outs", "=", "[", "]", "\n", "full_minlosses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "image_shape", "=", "(", "stride", "*", "(", "len", "(", "imgs", "[", "i", "]", ")", "+", "1", ")", ",", "stride", "*", "(", "len", "(", "imgs", "[", "i", "]", "[", "0", "]", ")", "+", "1", ")", ",", "3", ")", "\n", "msk_shape", "=", "(", "stride", "*", "(", "len", "(", "imgs", "[", "i", "]", ")", "+", "1", ")", ",", "stride", "*", "(", "len", "(", "imgs", "[", "i", "]", "[", "0", "]", ")", "+", "1", ")", ")", "\n", "outs_shape", "=", "(", "1", ",", "outs", "[", "i", "]", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "stride", "*", "(", "len", "(", "imgs", "[", "i", "]", ")", "+", "1", ")", ",", "stride", "*", "(", "len", "(", "imgs", "[", "i", "]", "[", "0", "]", ")", "+", "1", ")", ")", "\n", "\n", "full_img", "=", "np", ".", "zeros", "(", "image_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "full_msk", "=", "np", ".", "zeros", "(", "msk_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "#full_prd  = np.zeros(msk_shape, dtype=np.uint8)", "\n", "full_true", "=", "np", ".", "zeros", "(", "msk_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "full_out", "=", "np", ".", "zeros", "(", "outs_shape", ")", "\n", "full_minloss", "=", "np", ".", "zeros", "(", "msk_shape", ")", "\n", "how_many_added_pixels", "=", "np", ".", "zeros", "(", "msk_shape", ")", "\n", "\n", "for", "y", "in", "range", "(", "len", "(", "imgs", "[", "i", "]", ")", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "len", "(", "imgs", "[", "i", "]", "[", "y", "]", ")", ")", ":", "\n", "#print(i,y,x)", "\n", "                ", "img", "=", "imgs", "[", "i", "]", "[", "y", "]", "[", "x", "]", "\n", "msk", "=", "msks", "[", "i", "]", "[", "y", "]", "[", "x", "]", "\n", "prd", "=", "msks", "[", "i", "]", "[", "y", "]", "[", "x", "]", "\n", "true", "=", "trues", "[", "i", "]", "[", "y", "]", "[", "x", "]", "\n", "out", "=", "outs", "[", "i", "]", "[", "y", "]", "[", "x", "]", "\n", "minloss", "=", "minlosses", "[", "i", "]", "[", "y", "]", "[", "x", "]", "\n", "\n", "# Computing Priors.", "\n", "offset_y", "=", "y", "*", "stride", "\n", "offset_x", "=", "x", "*", "stride", "\n", "full_img", "[", "offset_y", ":", "offset_y", "+", "224", ",", "offset_x", ":", "offset_x", "+", "224", ",", ":", "]", "=", "img", "[", ":", ",", ":", ",", "0", ":", "4", "]", "\n", "full_msk", "[", "offset_y", ":", "offset_y", "+", "224", ",", "offset_x", ":", "offset_x", "+", "224", "]", "=", "msk", "\n", "full_true", "[", "offset_y", ":", "offset_y", "+", "224", ",", "offset_x", ":", "offset_x", "+", "224", "]", "=", "true", "\n", "\n", "how_many_added_pixels", "[", "offset_y", ":", "offset_y", "+", "224", ",", "offset_x", ":", "offset_x", "+", "224", "]", "+=", "1", "\n", "\n", "full_out", "[", ":", ",", ":", ",", "offset_y", ":", "offset_y", "+", "224", ",", "offset_x", ":", "offset_x", "+", "224", "]", "+=", "out", "\n", "full_minloss", "[", "offset_y", ":", "offset_y", "+", "224", ",", "offset_x", ":", "offset_x", "+", "224", "]", "+=", "minloss", "\n", "\n", "", "", "full_out", "=", "full_out", "/", "how_many_added_pixels", "\n", "full_out", "=", "torch", ".", "from_numpy", "(", "full_out", ")", "\n", "soft_outs", "=", "F", ".", "softmax", "(", "full_out", ",", "dim", "=", "1", ")", "\n", "# Obtaining prior predictions.                    ", "\n", "prds", "=", "soft_outs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "del", "soft_outs", "\n", "prds", "=", "np", ".", "array", "(", "prds", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "#print('2', np.unique(prds,return_counts=True))", "\n", "\n", "y0", ",", "y1", ",", "x0", ",", "x1", "=", "trim_coords", "(", "np", ".", "sum", "(", "full_img", ",", "axis", "=", "2", ")", ")", "\n", "full_img", "=", "full_img", "[", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "\n", "full_msk", "=", "full_msk", "[", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "\n", "full_out", "=", "full_out", "[", ":", ",", ":", ",", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "\n", "full_true", "=", "full_true", "[", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "\n", "full_minloss", "=", "full_minloss", "/", "how_many_added_pixels", "\n", "\n", "full_minloss", "=", "full_minloss", "[", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "\n", "prds", "=", "prds", "[", "y0", ":", "y1", ",", "x0", ":", "x1", "]", "\n", "\n", "full_imgs", ".", "append", "(", "full_img", ")", "\n", "full_msks", ".", "append", "(", "full_msk", ")", "\n", "full_prds", ".", "append", "(", "prds", ")", "\n", "full_trues", ".", "append", "(", "full_true", ")", "\n", "full_outs", ".", "append", "(", "full_out", ")", "\n", "full_minlosses", ".", "append", "(", "full_minloss", ")", "\n", "#show_minloss = full_minloss - np.min(full_minloss)", "\n", "#show_minloss = show_minloss/np.max(show_minloss)", "\n", "#show_images([[full_img,full_msk,full_true,prds,show_minloss]])", "\n", "", "return", "full_imgs", ",", "full_msks", ",", "full_trues", ",", "full_prds", ",", "full_outs", ",", "full_minlosses", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.trim_coords": [[1346, 1359], ["numpy.argwhere", "np.argwhere.min", "np.argwhere.max"], "function", ["None"], ["", "def", "trim_coords", "(", "img", ")", ":", "\n", "\n", "# Mask of non-black pixels (assuming image has a single channel).", "\n", "    ", "bin", "=", "img", "!=", "0", "\n", "\n", "# Coordinates of non-black pixels.", "\n", "coords", "=", "np", ".", "argwhere", "(", "bin", ")", "\n", "\n", "# Bounding box of non-black pixels.", "\n", "y0", ",", "x0", "=", "coords", ".", "min", "(", "axis", "=", "0", ")", "\n", "y1", ",", "x1", "=", "coords", ".", "max", "(", "axis", "=", "0", ")", "+", "1", "# slices are exclusive at the top", "\n", "\n", "return", "y0", ",", "y1", ",", "x0", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_flatten_image": [[1360, 1382], ["range", "numpy.zeros", "range", "len", "len", "len", "img[].flatten"], "function", ["None"], ["", "def", "get_flatten_image", "(", "img", ")", ":", "\n", "    ", "assert", "len", "(", "img", ")", ">", "0", "\n", "\n", "\n", "totalpixels", "=", "0", "\n", "#obj_type = None", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "img", ")", ")", ":", "\n", "#    obj_type = img[i].dtype", "\n", "        ", "totalpixels", "+=", "img", "[", "i", "]", ".", "shape", "[", "0", "]", "*", "img", "[", "i", "]", ".", "shape", "[", "1", "]", "\n", "\n", "#assert obj_type is not None", "\n", "#print(obj_type)", "\n", "\n", "", "flatten_img", "=", "np", ".", "zeros", "(", "totalpixels", ")", "#, dtype = obj_type)", "\n", "\n", "totalpixels", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "img", ")", ")", ":", "\n", "        ", "f", "=", "img", "[", "i", "]", ".", "flatten", "(", ")", "\n", "flatten_img", "[", "totalpixels", ":", "totalpixels", "+", "f", ".", "shape", "[", "0", "]", "]", "=", "f", "\n", "\n", "totalpixels", "+=", "img", "[", "i", "]", ".", "shape", "[", "0", "]", "*", "img", "[", "i", "]", ".", "shape", "[", "1", "]", "\n", "", "return", "flatten_img", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_quantiles": [[1384, 1402], ["print", "print", "range", "numpy.asarray", "numpy.concatenate", "numpy.quantile().tolist", "numpy.unique", "numpy.unique", "print", "sys.stdout.flush", "print", "np.concatenate.append", "int", "str", "numpy.sum", "losses_list_by_class.flatten", "numpy.quantile", "numpy.max"], "function", ["None"], ["", "def", "get_quantiles", "(", "flatten_full_minlosses", ",", "flatten_full_msks", ",", "flatten_full_prds", ",", "thresholds", ")", ":", "\n", "    ", "losses_by_class", "=", "[", "]", "\n", "print", "(", "np", ".", "unique", "(", "flatten_full_msks", ",", "return_counts", "=", "True", ")", ")", "\n", "print", "(", "np", ".", "unique", "(", "flatten_full_prds", ",", "return_counts", "=", "True", ")", ")", "\n", "for", "c", "in", "range", "(", "0", ",", "int", "(", "np", ".", "max", "(", "flatten_full_msks", ")", ")", "+", "1", ")", ":", "\n", "        ", "print", "(", "'Pixels by class %d...'", "%", "(", "c", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "losses_list_by_class", "=", "flatten_full_minlosses", "[", "(", "flatten_full_msks", "==", "c", ")", "&", "(", "flatten_full_prds", "==", "c", ")", "]", "\n", "\n", "print", "(", "'Pixels by class:'", ",", "str", "(", "losses_list_by_class", ".", "shape", ")", ",", "' - '", ",", "np", ".", "sum", "(", "flatten_full_msks", "==", "c", ")", ")", "\n", "losses_by_class", ".", "append", "(", "losses_list_by_class", ".", "flatten", "(", ")", ")", "\n", "\n", "", "losses_by_class", "=", "np", ".", "asarray", "(", "losses_by_class", ")", "\n", "losses_by_class", "=", "np", ".", "concatenate", "(", "losses_by_class", ")", "\n", "\n", "thresholds_values", "=", "np", ".", "quantile", "(", "losses_by_class", ",", "thresholds", ")", ".", "tolist", "(", ")", "\n", "return", "thresholds_values", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_os_metrics2": [[1403, 1415], ["time.time", "time.time", "base.roc_auc_os", "base.save_roc_fig", "print", "print", "print", "joblib.Parallel", "time.time", "time.time", "joblib.delayed", "range", "len"], "function", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.roc_auc_os", "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.save_roc_fig"], ["", "def", "get_os_metrics2", "(", "net_unique_name", ",", "args", ",", "flatten_full_minlosses", ",", "flatten_full_msks", ",", "flatten_full_prds", ",", "flatten_superpixels", ",", "num_known_classes", ",", "thresholds", ",", "thresholds_values", ",", "metrics_path", ",", "image_path", ")", ":", "\n", "\n", "    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "roc_auc_metrics", "=", "roc_auc_os", "(", "flatten_full_minlosses", ",", "flatten_full_msks", ",", "num_known_classes", ",", "thresholds", ")", "\n", "save_roc_fig", "(", "roc_auc_metrics", ",", "image_path", ")", "\n", "print", "(", "'        ROC AUC Elapsed Time: %.2f'", "%", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "if", "args", ".", "metrics", ":", "\n", "        ", "print", "(", "'generating metrics'", ")", "\n", "restuls", "=", "Parallel", "(", "n_jobs", "=", "10", ")", "(", "delayed", "(", "parallel_metrics", ")", "(", "t", ",", "net_unique_name", ",", "args", ",", "flatten_full_minlosses", ",", "flatten_full_msks", ",", "flatten_full_prds", ",", "flatten_superpixels", ",", "num_known_classes", ",", "thresholds", ",", "thresholds_values", ",", "metrics_path", ",", "image_path", ",", "roc_auc_metrics", ")", "for", "t", "in", "range", "(", "0", ",", "len", "(", "thresholds", ")", ")", ")", "\n", "print", "(", "restuls", ")", "\n", "", "return", "roc_auc_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.roc_auc_os": [[1416, 1443], ["minloss.ravel", "msk.ravel", "print", "sklearn.metrics.roc_curve", "sklearn.metrics.roc_auc_score", "print", "ind_c2ae.append", "range", "len", "ind_c2ae.append"], "function", ["None"], ["", "def", "roc_auc_os", "(", "minloss", ",", "msk", ",", "num_known_classes", "=", "4", ",", "thresholds", "=", "[", "0.7", ",", "0.99", ",", "1.0", "]", ")", ":", "\n", "\n", "    ", "minloss_temp", "=", "minloss", ".", "ravel", "(", ")", "\n", "msk_temp", "=", "msk", ".", "ravel", "(", ")", "\n", "minloss_temp", "=", "minloss_temp", "[", "msk_temp", "<=", "num_known_classes", "]", "\n", "msk_temp", "=", "msk_temp", "[", "msk_temp", "<=", "num_known_classes", "]", "\n", "\n", "bin_msk_temp", "=", "(", "msk_temp", "==", "num_known_classes", ")", "\n", "\n", "# Computing ROC and AUC.", "\n", "print", "(", "'    Computing AUC ROC...'", ")", "\n", "fpr_c2ae", ",", "tpr_c2ae", ",", "t_c2ae", "=", "metrics", ".", "roc_curve", "(", "bin_msk_temp", ",", "minloss_temp", ")", "\n", "\n", "ind_c2ae", "=", "[", "]", "\n", "for", "t", "in", "thresholds", ":", "\n", "        ", "if", "t", "==", "1.00", ":", "\n", "            ", "ind_c2ae", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "t_c2ae", ")", ")", ":", "\n", "                ", "if", "tpr_c2ae", "[", "i", "]", ">=", "t", ":", "\n", "                    ", "ind_c2ae", ".", "append", "(", "i", ")", "\n", "break", "\n", "\n", "#print('    Computing c2ae AUC...')", "\n", "", "", "", "", "auc_c2ae", "=", "metrics", ".", "roc_auc_score", "(", "bin_msk_temp", ",", "minloss_temp", ")", "\n", "print", "(", "'    AUC: '", ",", "auc_c2ae", ")", "\n", "return", "t_c2ae", ",", "tpr_c2ae", ",", "fpr_c2ae", ",", "ind_c2ae", ",", "auc_c2ae", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.save_images": [[1505, 1515], ["range", "len", "numpy.copy", "print", "numpy.savez", "matplotlib.image.imsave", "matplotlib.image.imsave", "os.path.join", "os.path.join", "os.path.join", "numpy.min", "numpy.max", "str", "str", "str"], "function", ["None"], ["def", "save_images", "(", "imgs", ",", "images_path", ",", "name", ",", "norm", "=", "False", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "img", "=", "np", ".", "copy", "(", "imgs", "[", "i", "]", ")", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "name", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "name", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ",", "img", "=", "img", ")", "\n", "if", "norm", ":", "\n", "            ", "img", "=", "img", "-", "np", ".", "min", "(", "img", ")", "\n", "img", "=", "img", "/", "np", ".", "max", "(", "img", ")", "\n", "", "matplotlib", ".", "image", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "name", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".jpg\"", ")", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.load_images_array": [[1517, 1539], ["range", "str", "len", "msks.append", "trues.append", "prds.append", "minlosses.append", "type", "os.path.isfile", "time.sleep", "time.sleep", "print", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "load_images_array", "(", "images_path", ",", "save_name", ",", "suffix", ",", "qtd_imgs", ")", ":", "\n", "\n", "    ", "msks", "=", "[", "]", "\n", "trues", "=", "[", "]", "\n", "prds", "=", "[", "]", "\n", "minlosses", "=", "[", "]", "\n", "#print(type(qtd_imgs))", "\n", "if", "str", "(", "type", "(", "qtd_imgs", ")", ")", "in", "[", "\"<class 'list'>\"", ",", "\"<class 'torch.utils.data.dataloader.DataLoader'>\"", ",", "\"torch.utils.data.dataloader.DataLoader\"", ",", "\"list\"", "]", ":", "\n", "        ", "qtd_imgs", "=", "len", "(", "qtd_imgs", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "qtd_imgs", ")", ":", "\n", "\n", "        ", "while", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "save_name", "+", "\"_full_minloss\"", "+", "suffix", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "==", "False", ":", "\n", "            ", "time", ".", "sleep", "(", "120", ")", "\n", "print", "(", "\"waiting: \"", ",", "os", ".", "path", ".", "join", "(", "images_path", ",", "save_name", "+", "\"_full_minloss\"", "+", "suffix", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "\n", "\n", "", "msks", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "save_name", "+", "\"_full_msk\"", "+", "suffix", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "[", "'img'", "]", ")", "\n", "trues", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "save_name", "+", "\"_full_true\"", "+", "suffix", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "[", "'img'", "]", ")", "\n", "prds", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "save_name", "+", "\"_full_prd\"", "+", "suffix", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "[", "'img'", "]", ")", "\n", "minlosses", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "save_name", "+", "\"_full_minloss\"", "+", "suffix", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".npz\"", ")", ")", "[", "'img'", "]", ")", "\n", "\n", "", "return", "msks", ",", "trues", ",", "prds", ",", "minlosses", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.save_roc_fig": [[1540, 1565], ["print", "print", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.set_xlim", "ax.set_ylim", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["", "def", "save_roc_fig", "(", "roc_auc_metrics", ",", "image_path", ")", ":", "\n", "\n", "    ", "print", "(", "image_path", ")", "\n", "print", "(", "roc_auc_metrics", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "8", ")", ",", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "\n", "lw", "=", "2", "\n", "\n", "ax", ".", "plot", "(", "roc_auc_metrics", "[", "2", "]", ",", "roc_auc_metrics", "[", "1", "]", ",", "color", "=", "'crimson'", ",", "lw", "=", "lw", ",", "label", "=", "'AUC C2AE: %0.3f'", "%", "roc_auc_metrics", "[", "-", "1", "]", ")", "\n", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "'black'", ",", "lw", "=", "lw", ",", "linestyle", "=", "'--'", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "-", "0.01", ",", "1.01", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "0.01", ",", "1.01", "]", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'FPR'", ",", "size", "=", "25", ")", "\n", "ax", ".", "set_ylabel", "(", "'TPR'", ",", "size", "=", "25", ")", "\n", "\n", "ax", ".", "legend", "(", "loc", "=", "'lower right'", ",", "prop", "=", "{", "'size'", ":", "25", "}", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "image_path", ",", "dpi", "=", "80", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.parallel_metrics": [[1568, 1594], ["print", "numpy.copy", "base.get_curr_metric", "open", "open.write", "open.close", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_curr_metric"], ["def", "parallel_metrics", "(", "t", ",", "net_unique_name", ",", "args", ",", "flatten_full_minlosses", ",", "flatten_full_msks", ",", "flatten_full_prds", ",", "flatten_superpixels", ",", "num_known_classes", ",", "thresholds", ",", "thresholds_values", ",", "metrics_path", ",", "image_path", ",", "roc_auc_metrics", ")", ":", "\n", "    ", "print", "(", "t", ")", "\n", "os_prds", "=", "None", "\n", "os_prds", "=", "np", ".", "copy", "(", "flatten_full_prds", ")", "\n", "unknown_pixels", "=", "flatten_full_minlosses", ">=", "thresholds_values", "[", "t", "]", "\n", "os_prds", "[", "unknown_pixels", "]", "=", "num_known_classes", "\n", "\n", "total_metrics", "=", "get_curr_metric", "(", "flatten_full_msks", ",", "os_prds", ",", "num_known_classes", ")", "\n", "\n", "str_log", "=", "'full_image;'", "+", "net_unique_name", "+", "';'", "\n", "str_log", "+=", "str", "(", "thresholds", "[", "t", "]", ")", "+", "';'", "+", "str", "(", "thresholds_values", "[", "t", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "args", ".", "epochs", ")", "+", "';'", "+", "str", "(", "args", ".", "lr", ")", "+", "';'", "+", "str", "(", "args", ".", "weight_decay", ")", "+", "';'", "+", "str", "(", "args", ".", "momentum", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "args", ".", "n_classes", ")", "+", "';'", "+", "str", "(", "args", ".", "select_non_match", ")", "+", "';'", "+", "str", "(", "args", ".", "ignore_others_non_match", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "args", ".", "hidden_classes", ")", "+", "';'", "+", "str", "(", "args", ".", "dataset", ")", "+", "';'", "+", "str", "(", "num_known_classes", ")", "+", "';'", "+", "str", "(", "args", ".", "num_unknown_classes", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "total_metrics", "[", "0", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "total_metrics", "[", "1", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "total_metrics", "[", "2", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "total_metrics", "[", "3", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "total_metrics", "[", "4", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "total_metrics", "[", "5", "]", ")", "+", "';'", "\n", "str_log", "+=", "str", "(", "roc_auc_metrics", "[", "4", "]", ")", "+", "';\\n'", "\n", "\n", "f", "=", "open", "(", "metrics_path", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "str_log", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.base.get_curr_metric": [[1595, 1649], ["msk.ravel", "prd.ravel", "sklearn.metrics.confusion_matrix", "range", "float", "float", "float", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.cohen_kappa_score", "float", "float", "float", "float", "cm[].sum", "cm[].sum", "cm[].sum", "float", "float", "float", "float"], "function", ["None"], ["", "def", "get_curr_metric", "(", "msk", ",", "prd", ",", "n_known", ")", ":", "\n", "\n", "    ", "tru_np", "=", "msk", ".", "ravel", "(", ")", "\n", "prd_np", "=", "prd", ".", "ravel", "(", ")", "\n", "\n", "#print(np.unique(tru_np,return_counts=True))", "\n", "#print(np.unique(prd_np,return_counts=True))", "\n", "\n", "tru_valid", "=", "tru_np", "[", "tru_np", "<=", "n_known", "]", "\n", "prd_valid", "=", "prd_np", "[", "tru_np", "<=", "n_known", "]", "\n", "\n", "#print('        Computing CM...')", "\n", "cm", "=", "metrics", ".", "confusion_matrix", "(", "tru_valid", ",", "prd_valid", ")", "\n", "\n", "#print(cm)", "\n", "\n", "#print('        Computing Accs...')", "\n", "tru_known", "=", "0.0", "\n", "sum_known", "=", "0.0", "\n", "\n", "for", "c", "in", "range", "(", "n_known", ")", ":", "\n", "        ", "tru_known", "+=", "float", "(", "cm", "[", "c", ",", "c", "]", ")", "\n", "sum_known", "+=", "float", "(", "cm", "[", "c", ",", ":", "]", ".", "sum", "(", ")", ")", "\n", "\n", "", "acc_known", "=", "float", "(", "tru_known", ")", "/", "float", "(", "sum_known", ")", "\n", "\n", "tru_unknown", "=", "float", "(", "cm", "[", "n_known", ",", "n_known", "]", ")", "\n", "sum_unknown_real", "=", "float", "(", "cm", "[", "n_known", ",", ":", "]", ".", "sum", "(", ")", ")", "\n", "sum_unknown_pred", "=", "float", "(", "cm", "[", ":", ",", "n_known", "]", ".", "sum", "(", ")", ")", "\n", "\n", "pre_unknown", "=", "0.0", "\n", "rec_unknown", "=", "0.0", "\n", "\n", "if", "sum_unknown_pred", "!=", "0.0", ":", "\n", "        ", "pre_unknown", "=", "float", "(", "tru_unknown", ")", "/", "float", "(", "sum_unknown_pred", ")", "\n", "", "if", "sum_unknown_real", "!=", "0.0", ":", "\n", "        ", "rec_unknown", "=", "float", "(", "tru_unknown", ")", "/", "float", "(", "sum_unknown_real", ")", "\n", "\n", "", "acc_unknown", "=", "(", "tru_known", "+", "tru_unknown", ")", "/", "(", "sum_known", "+", "sum_unknown_real", ")", "\n", "\n", "acc_mean", "=", "(", "acc_known", "+", "acc_unknown", ")", "/", "2.0", "\n", "\n", "#print('        Computing Balanced Acc...')", "\n", "bal", "=", "metrics", ".", "balanced_accuracy_score", "(", "tru_valid", ",", "prd_valid", ")", "\n", "\n", "#print('        Computing Kappa...')", "\n", "kap", "=", "metrics", ".", "cohen_kappa_score", "(", "tru_valid", ",", "prd_valid", ")", "\n", "\n", "#print('        Computing AUC...')", "\n", "#auc = metrics.auc(prd_valid, tru_valid)", "\n", "\n", "curr_metrics", "=", "[", "acc_known", ",", "acc_unknown", ",", "pre_unknown", ",", "rec_unknown", ",", "bal", ",", "kap", "]", "\n", "\n", "return", "curr_metrics", "", "", ""]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.EncoderBlock.__init__": [[30, 60], ["torch.nn.Module.__init__", "layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "CoReSeg.Activation", "layers.append", "layers.append", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "CoReSeg.NormType", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.Activation", "layers.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "layers.append", "CoReSeg.NormType", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout", "=", "False", ",", "norm", "=", "'batch'", ",", "activation", "=", "'relu'", ",", "convs", "=", "1", ",", "maxpool", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "maxpool", "==", "3", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "\n", "", "if", "norm", "!=", "'none'", ":", "\n", "            ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "convs", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "                ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "", "if", "dropout", ":", "\n", "            ", "if", "norm", "!=", "'none'", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "", "", "if", "maxpool", "==", "1", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "", "elif", "maxpool", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n", "", "self", ".", "encode", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.EncoderBlock.forward": [[61, 63], ["CoReSeg.EncoderBlock.encode"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.DecoderBlock.__init__": [[68, 95], ["torch.nn.Module.__init__", "layers.append", "layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.Activation", "layers.append", "layers.append", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "CoReSeg.NormType", "layers.append", "layers.append", "CoReSeg.Activation", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.NormType", "CoReSeg.NormType"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "middle_channels", ",", "out_channels", ",", "norm", "=", "'batch'", ",", "activation", "=", "'relu'", ",", "convs", "=", "1", ",", "convtranspose", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "DecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "norm", "!=", "'none'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "0.5", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "middle_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "            ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "middle_channels", ")", ")", "\n", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "convs", ")", ":", "\n", "            ", "if", "i", "==", "(", "convs", "-", "1", ")", "and", "convtranspose", "==", "False", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "middle_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "                    ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "middle_channels", ",", "middle_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "                    ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "middle_channels", ")", ")", "\n", "", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "", "if", "convtranspose", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "middle_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ")", ")", "\n", "\n", "", "self", ".", "decode", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.DecoderBlock.forward": [[96, 99], ["CoReSeg.DecoderBlock.decode"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.unique_name": [[103, 105], ["CoReSeg.model_unique_name"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.model_unique_name"], ["    ", "def", "unique_name", "(", "self", ",", "separator", "=", "';'", ")", ":", "\n", "        ", "return", "model_unique_name", "(", "self", ",", "separator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.__init__": [[106, 133], ["torch.nn.Module.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__"], ["", "def", "__init__", "(", "self", ",", "input_channels", ",", "num_classes", ",", "hidden_classes", "=", "None", ",", "conv_channels", "=", "64", ",", "conditioned_one_hot_encoding", "=", "True", ",", "norm", "=", "'batch'", ",", "activation", "=", "'relu'", ",", "skipConnections", "=", "'all'", ",", "finalextraconvsblock", "=", "2", ",", "alpha", "=", "0.95", ",", "args", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "CoReSeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "name", "=", "'CoReSeg'", "\n", "self", ".", "conv_channels", "=", "conv_channels", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "hidden_classes", "=", "hidden_classes", "\n", "self", ".", "conditioned_one_hot_encoding", "=", "conditioned_one_hot_encoding", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "skipConnections", "=", "skipConnections", "\n", "self", ".", "finalextraconvsblock", "=", "finalextraconvsblock", "\n", "\n", "self", ".", "channels_multiplier", "=", "2", "\n", "if", "self", ".", "skipConnections", "==", "'none'", ":", "\n", "            ", "self", ".", "channels_multiplier", "=", "1", "\n", "", "elif", "self", ".", "skipConnections", "==", "'all'", ":", "\n", "            ", "self", ".", "channels_multiplier", "=", "3", "\n", "\n", "\n", "", "self", ".", "conditioned_input_layer", "=", "1", "\n", "if", "self", ".", "conditioned_one_hot_encoding", ":", "\n", "            ", "self", ".", "conditioned_input_layer", "=", "self", ".", "num_classes", "-", "len", "(", "hidden_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.initialize": [[134, 151], ["CoReSeg.UNet", "CoReSeg.CoReSeg.encoder", "CoReSeg.CoReSeg.encoder", "CoReSeg.CoReSeg.decoder", "CoReSeg.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.encoder", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.encoder", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.decoder", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.initialize_weights"], ["", "", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "unet", "=", "UNet", "(", "self", ".", "input_channels", ",", "self", ".", "num_classes", ",", "self", ".", "hidden_classes", ")", "\n", "\n", "#closed_set", "\n", "self", ".", "enc1", ",", "self", ".", "enc2", ",", "self", ".", "enc3", ",", "self", ".", "enc4", "=", "unet", ".", "enc1", ",", "unet", ".", "enc2", ",", "unet", ".", "enc3", ",", "unet", ".", "enc4", "\n", "self", ".", "center", ",", "self", ".", "dec4", ",", "self", ".", "dec3", ",", "self", ".", "dec2", ",", "self", ".", "dec1", ",", "self", ".", "final", "=", "unet", ".", "center", ",", "unet", ".", "dec4", ",", "unet", ".", "dec3", ",", "unet", ".", "dec2", ",", "unet", ".", "dec1", ",", "unet", ".", "final", "\n", "\n", "self", ".", "gamma_enc0", ",", "self", ".", "gamma_enc1", ",", "self", ".", "gamma_enc2", ",", "self", ".", "gamma_enc3", ",", "self", ".", "gamma_enc4", "=", "self", ".", "encoder", "(", "self", ".", "conditioned_input_layer", ",", "self", ".", "conv_channels", ")", "\n", "self", ".", "beta_enc0", ",", "self", ".", "beta_enc1", ",", "self", ".", "beta_enc2", ",", "self", ".", "beta_enc3", ",", "self", ".", "beta_enc4", "=", "self", ".", "encoder", "(", "self", ".", "conditioned_input_layer", ",", "self", ".", "conv_channels", ")", "\n", "\n", "decoder_input_channels", "=", "self", ".", "conv_channels", "*", "16", "\n", "if", "self", ".", "skipConnections", "==", "'none'", ":", "\n", "            ", "decoder_input_channels", "=", "self", ".", "conv_channels", "*", "8", "\n", "\n", "", "self", ".", "os_center", ",", "self", ".", "os_dec4", ",", "self", ".", "os_dec3", ",", "self", ".", "os_dec2", ",", "self", ".", "os_dec1", ",", "self", ".", "os_final", "=", "self", ".", "decoder", "(", "decoder_input_channels", ",", "self", ".", "input_channels", ",", "self", ".", "conv_channels", ")", "\n", "\n", "initialize_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.encoder": [[152, 161], ["CoReSeg.EncoderBlock", "CoReSeg.EncoderBlock", "CoReSeg.EncoderBlock", "CoReSeg.EncoderBlock", "CoReSeg.EncoderBlock"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "input_channels", ",", "channels", "=", "4", ")", ":", "#64", "\n", "        ", "norm", "=", "self", ".", "norm", "\n", "activation", "=", "self", ".", "activation", "\n", "l0", "=", "EncoderBlock", "(", "input_channels", ",", "channels", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "convs", "=", "3", ",", "maxpool", "=", "0", ")", "\n", "l1", "=", "EncoderBlock", "(", "channels", ",", "channels", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "l2", "=", "EncoderBlock", "(", "channels", ",", "channels", "*", "2", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "l3", "=", "EncoderBlock", "(", "channels", "*", "2", ",", "channels", "*", "4", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "l4", "=", "EncoderBlock", "(", "channels", "*", "4", ",", "channels", "*", "8", ",", "dropout", "=", "True", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "return", "l0", ",", "l1", ",", "l2", ",", "l3", ",", "l4", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.decoder": [[162, 185], ["CoReSeg.DecoderBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "CoReSeg.DecoderBlock", "CoReSeg.DecoderBlock", "CoReSeg.DecoderBlock", "CoReSeg.DecoderBlock", "CoReSeg.DecoderBlock", "torch.nn.Sequential", "torch.nn.Sequential"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "input_channels", ",", "output_channels", ",", "channels", "=", "4", ",", ")", ":", "#64", "\n", "        ", "norm", "=", "self", ".", "norm", "\n", "activation", "=", "self", ".", "activation", "\n", "skipConnections", "=", "self", ".", "skipConnections", "\n", "\n", "endlayerconditioningsize", "=", "self", ".", "conditioned_input_layer", "\n", "\n", "ch_mult", "=", "channels", "*", "self", ".", "channels_multiplier", "\n", "\n", "dec1", "=", "DecoderBlock", "(", "ch_mult", "+", "endlayerconditioningsize", ",", "channels", ",", "channels", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "convs", "=", "1", ",", "convtranspose", "=", "False", ")", "\n", "\n", "final", "=", "nn", ".", "Conv2d", "(", "channels", ",", "output_channels", ",", "kernel_size", "=", "1", ")", "\n", "if", "self", ".", "finalextraconvsblock", ">", "0", ":", "\n", "            ", "dec0", "=", "DecoderBlock", "(", "channels", ",", "channels", ",", "channels", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "convtranspose", "=", "False", ",", "convs", "=", "self", ".", "finalextraconvsblock", "-", "1", ")", "\n", "blocks", "=", "[", "dec0", ",", "final", "]", "\n", "final", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "center", "=", "DecoderBlock", "(", "input_channels", ",", "ch_mult", "*", "8", ",", "channels", "*", "8", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "dec4", "=", "DecoderBlock", "(", "ch_mult", "*", "8", ",", "ch_mult", "*", "4", ",", "channels", "*", "4", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "dec3", "=", "DecoderBlock", "(", "ch_mult", "*", "4", ",", "ch_mult", "*", "2", ",", "channels", "*", "2", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "dec2", "=", "DecoderBlock", "(", "ch_mult", "*", "2", ",", "ch_mult", ",", "channels", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ")", "\n", "\n", "return", "center", ",", "dec4", ",", "dec3", ",", "dec2", ",", "dec1", ",", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction": [[186, 203], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.upsample", "torch.upsample", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.upsample", "torch.upsample", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "concat_decoder_layers_reconstruction", "(", "self", ",", "dec", ",", "cs", ",", "cond", ",", "one_hot", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "skipConnections", "in", "[", "'all'", ",", "'none'", ",", "'csenc'", ",", "'osenc'", "]", "\n", "\n", "if", "(", "one_hot", "is", "not", "None", ")", ":", "\n", "            ", "dec", "=", "torch", ".", "cat", "(", "[", "dec", ",", "F", ".", "upsample", "(", "one_hot", ",", "dec", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "skipConnections", "==", "'all'", ":", "\n", "            ", "dec", "=", "torch", ".", "cat", "(", "[", "dec", ",", "F", ".", "upsample", "(", "cs", ",", "dec", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "F", ".", "upsample", "(", "cond", ",", "dec", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "skipConnections", "==", "'csenc'", ":", "\n", "            ", "dec", "=", "torch", ".", "cat", "(", "[", "dec", ",", "F", ".", "upsample", "(", "cs", ",", "dec", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "skipConnections", "==", "'osenc'", ":", "\n", "            ", "dec", "=", "torch", ".", "cat", "(", "[", "dec", ",", "F", ".", "upsample", "(", "cond", ",", "dec", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#if self.skipConnections=='none':", "\n", "", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.forward": [[204, 292], ["CoReSeg.CoReSeg.enc1", "CoReSeg.CoReSeg.enc2", "CoReSeg.CoReSeg.enc3", "CoReSeg.CoReSeg.enc4", "labs[].cuda", "labs[].cuda", "CoReSeg.CoReSeg.gamma_enc0", "CoReSeg.CoReSeg.gamma_enc1", "CoReSeg.CoReSeg.gamma_enc2", "CoReSeg.CoReSeg.gamma_enc3", "CoReSeg.CoReSeg.gamma_enc4", "CoReSeg.CoReSeg.beta_enc0", "CoReSeg.CoReSeg.beta_enc1", "CoReSeg.CoReSeg.beta_enc2", "CoReSeg.CoReSeg.beta_enc3", "CoReSeg.CoReSeg.beta_enc4", "CoReSeg.CoReSeg.os_dec4", "CoReSeg.CoReSeg.os_dec3", "CoReSeg.CoReSeg.os_dec2", "CoReSeg.CoReSeg.os_dec1", "CoReSeg.CoReSeg.os_final", "CoReSeg.CoReSeg.gamma_enc0", "CoReSeg.CoReSeg.gamma_enc1", "CoReSeg.CoReSeg.gamma_enc2", "CoReSeg.CoReSeg.gamma_enc3", "CoReSeg.CoReSeg.gamma_enc4", "CoReSeg.CoReSeg.beta_enc0", "CoReSeg.CoReSeg.beta_enc1", "CoReSeg.CoReSeg.beta_enc2", "CoReSeg.CoReSeg.beta_enc3", "CoReSeg.CoReSeg.beta_enc4", "CoReSeg.CoReSeg.os_dec4", "CoReSeg.CoReSeg.os_dec3", "CoReSeg.CoReSeg.os_dec2", "CoReSeg.CoReSeg.os_dec1", "CoReSeg.CoReSeg.os_final", "CoReSeg.CoReSeg.center", "CoReSeg.CoReSeg.dec4", "CoReSeg.CoReSeg.dec3", "CoReSeg.CoReSeg.dec2", "CoReSeg.CoReSeg.dec1", "CoReSeg.CoReSeg.final", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "labs[].cuda", "labs[].cuda", "CoReSeg.CoReSeg.os_center", "CoReSeg.CoReSeg.os_center", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "labs[].cuda", "labs[].cuda", "CoReSeg.CoReSeg.os_center", "CoReSeg.CoReSeg.os_center", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros.float().cuda", "torch.zeros.float().cuda", "torch.zeros.float().cuda", "torch.zeros.float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "x.size", "x.size", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float", "x.size", "x.size", "x.size", "x.size", "x.size", "CoReSeg.CoReSeg.size", "CoReSeg.CoReSeg.size", "CoReSeg.CoReSeg.size", "CoReSeg.CoReSeg.size"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction"], ["", "def", "forward", "(", "self", ",", "x", ",", "labs", "=", "None", ",", "feat", "=", "False", ")", ":", "\n", "# segmentation encoder", "\n", "        ", "cs_enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "cs_enc2", "=", "self", ".", "enc2", "(", "cs_enc1", ")", "\n", "cs_enc3", "=", "self", ".", "enc3", "(", "cs_enc2", ")", "\n", "cs_enc4", "=", "self", ".", "enc4", "(", "cs_enc3", ")", "\n", "\n", "if", "labs", "is", "None", ":", "\n", "#segmentation decoder", "\n", "            ", "cs_center", "=", "self", ".", "center", "(", "cs_enc4", ")", "\n", "cs_dec4", "=", "self", ".", "dec4", "(", "torch", ".", "cat", "(", "[", "cs_center", ",", "F", ".", "upsample", "(", "cs_enc4", ",", "cs_center", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_dec3", "=", "self", ".", "dec3", "(", "torch", ".", "cat", "(", "[", "cs_dec4", ",", "F", ".", "upsample", "(", "cs_enc3", ",", "cs_dec4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_dec2", "=", "self", ".", "dec2", "(", "torch", ".", "cat", "(", "[", "cs_dec3", ",", "F", ".", "upsample", "(", "cs_enc2", ",", "cs_dec3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_dec1", "=", "self", ".", "dec1", "(", "torch", ".", "cat", "(", "[", "cs_dec2", ",", "F", ".", "upsample", "(", "cs_enc1", ",", "cs_dec2", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_final", "=", "self", ".", "final", "(", "cs_dec1", ")", "\n", "\n", "if", "feat", ":", "\n", "                ", "return", "(", "F", ".", "upsample", "(", "cs_final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "cs_dec1", ",", "\n", "F", ".", "upsample", "(", "cs_dec2", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "F", ".", "upsample", "(", "cs_dec3", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "F", ".", "upsample", "(", "cs_dec4", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "upsample", "(", "cs_final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "cs_enc4", ",", "cs_enc3", ",", "cs_enc2", ",", "cs_enc1", "\n", "\n", "", "", "if", "self", ".", "conditioned_one_hot_encoding", ":", "\n", "            ", "labs_m_onehot", "=", "torch", ".", "zeros", "(", "(", "labs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "conditioned_input_layer", ",", "labs", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "labs", "[", "0", "]", ".", "shape", "[", "2", "]", ")", ")", "\n", "labs_nm_onehot", "=", "torch", ".", "zeros", "(", "(", "labs", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "conditioned_input_layer", ",", "labs", "[", "1", "]", ".", "shape", "[", "1", "]", ",", "labs", "[", "1", "]", ".", "shape", "[", "2", "]", ")", ")", "\n", "#print(self.conditioned_input_layer)", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "conditioned_input_layer", ")", ":", "\n", "                ", "labs_m_onehot", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "labs", "[", "0", "]", "==", "i", "\n", "labs_nm_onehot", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "labs", "[", "1", "]", "==", "i", "\n", "\n", "", "labs", "=", "[", "labs_m_onehot", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "labs_nm_onehot", ".", "float", "(", ")", ".", "cuda", "(", ")", "]", "\n", "\n", "", "labs", "[", "0", "]", "=", "labs", "[", "0", "]", ".", "cuda", "(", ")", "\n", "labs", "[", "1", "]", "=", "labs", "[", "1", "]", ".", "cuda", "(", ")", "\n", "\n", "m_gamma_enc0", "=", "self", ".", "gamma_enc0", "(", "labs", "[", "0", "]", ".", "cuda", "(", ")", ")", "\n", "m_gamma_enc1", "=", "self", ".", "gamma_enc1", "(", "m_gamma_enc0", ")", "\n", "m_gamma_enc2", "=", "self", ".", "gamma_enc2", "(", "m_gamma_enc1", ")", "\n", "m_gamma_enc3", "=", "self", ".", "gamma_enc3", "(", "m_gamma_enc2", ")", "\n", "m_gamma_enc4", "=", "self", ".", "gamma_enc4", "(", "m_gamma_enc3", ")", "\n", "\n", "m_beta_enc0", "=", "self", ".", "beta_enc0", "(", "labs", "[", "0", "]", ".", "cuda", "(", ")", ")", "\n", "m_beta_enc1", "=", "self", ".", "beta_enc1", "(", "m_beta_enc0", ")", "\n", "m_beta_enc2", "=", "self", ".", "beta_enc2", "(", "m_beta_enc1", ")", "\n", "m_beta_enc3", "=", "self", ".", "beta_enc3", "(", "m_beta_enc2", ")", "\n", "m_beta_enc4", "=", "self", ".", "beta_enc4", "(", "m_beta_enc3", ")", "\n", "\n", "if", "self", ".", "skipConnections", "==", "'none'", ":", "\n", "            ", "m_center", "=", "self", ".", "os_center", "(", "cs_enc4", "*", "m_gamma_enc4", "+", "m_beta_enc4", ")", "\n", "", "else", ":", "\n", "            ", "m_center", "=", "self", ".", "os_center", "(", "torch", ".", "cat", "(", "[", "cs_enc4", ",", "cs_enc4", "*", "m_gamma_enc4", "+", "m_beta_enc4", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "m_dec4", "=", "self", ".", "os_dec4", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "m_center", ",", "cs_enc4", ",", "cs_enc4", "*", "m_gamma_enc4", "+", "m_beta_enc4", ")", ")", "\n", "m_dec3", "=", "self", ".", "os_dec3", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "m_dec4", ",", "cs_enc3", ",", "cs_enc3", "*", "m_gamma_enc3", "+", "m_beta_enc3", ")", ")", "\n", "m_dec2", "=", "self", ".", "os_dec2", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "m_dec3", ",", "cs_enc2", ",", "cs_enc2", "*", "m_gamma_enc2", "+", "m_beta_enc2", ")", ")", "\n", "m_dec1", "=", "self", ".", "os_dec1", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "m_dec2", ",", "cs_enc1", ",", "cs_enc1", "*", "m_gamma_enc1", "+", "m_beta_enc1", ",", "labs", "[", "0", "]", ")", ")", "\n", "\n", "m_final", "=", "self", ".", "os_final", "(", "m_dec1", "*", "m_gamma_enc0", "+", "m_beta_enc0", ")", "\n", "\n", "#conditioned non-match", "\n", "# segmentation encoder", "\n", "nm_gamma_enc0", "=", "self", ".", "gamma_enc0", "(", "labs", "[", "1", "]", ".", "cuda", "(", ")", ")", "\n", "nm_gamma_enc1", "=", "self", ".", "gamma_enc1", "(", "nm_gamma_enc0", ")", "\n", "nm_gamma_enc2", "=", "self", ".", "gamma_enc2", "(", "nm_gamma_enc1", ")", "\n", "nm_gamma_enc3", "=", "self", ".", "gamma_enc3", "(", "nm_gamma_enc2", ")", "\n", "nm_gamma_enc4", "=", "self", ".", "gamma_enc4", "(", "nm_gamma_enc3", ")", "\n", "\n", "nm_beta_enc0", "=", "self", ".", "beta_enc0", "(", "labs", "[", "1", "]", ".", "cuda", "(", ")", ")", "\n", "nm_beta_enc1", "=", "self", ".", "beta_enc1", "(", "nm_beta_enc0", ")", "\n", "nm_beta_enc2", "=", "self", ".", "beta_enc2", "(", "nm_beta_enc1", ")", "\n", "nm_beta_enc3", "=", "self", ".", "beta_enc3", "(", "nm_beta_enc2", ")", "\n", "nm_beta_enc4", "=", "self", ".", "beta_enc4", "(", "nm_beta_enc3", ")", "\n", "\n", "if", "self", ".", "skipConnections", "==", "'none'", ":", "\n", "            ", "nm_center", "=", "self", ".", "os_center", "(", "cs_enc4", "*", "nm_gamma_enc4", "+", "nm_beta_enc4", ")", "\n", "", "else", ":", "\n", "            ", "nm_center", "=", "self", ".", "os_center", "(", "torch", ".", "cat", "(", "[", "cs_enc4", "*", "nm_gamma_enc4", "+", "nm_beta_enc4", ",", "cs_enc4", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "nm_dec4", "=", "self", ".", "os_dec4", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "nm_center", ",", "cs_enc4", ",", "cs_enc4", "*", "nm_gamma_enc4", "+", "nm_beta_enc4", ")", ")", "\n", "nm_dec3", "=", "self", ".", "os_dec3", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "nm_dec4", ",", "cs_enc3", ",", "cs_enc3", "*", "nm_gamma_enc3", "+", "nm_beta_enc3", ")", ")", "\n", "nm_dec2", "=", "self", ".", "os_dec2", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "nm_dec3", ",", "cs_enc2", ",", "cs_enc2", "*", "nm_gamma_enc2", "+", "nm_beta_enc2", ")", ")", "\n", "nm_dec1", "=", "self", ".", "os_dec1", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "nm_dec2", ",", "cs_enc1", ",", "cs_enc1", "*", "nm_gamma_enc1", "+", "nm_beta_enc1", ",", "labs", "[", "1", "]", ")", ")", "\n", "\n", "nm_final", "=", "self", ".", "os_final", "(", "nm_dec1", "*", "nm_gamma_enc0", "+", "nm_beta_enc0", ")", "\n", "\n", "return", "F", ".", "upsample", "(", "m_final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "F", ".", "upsample", "(", "nm_final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.segment_forward": [[293, 308], ["CoReSeg.CoReSeg.enc1", "CoReSeg.CoReSeg.enc2", "CoReSeg.CoReSeg.enc3", "CoReSeg.CoReSeg.enc4", "CoReSeg.CoReSeg.center", "CoReSeg.CoReSeg.dec4", "CoReSeg.CoReSeg.dec3", "CoReSeg.CoReSeg.dec2", "CoReSeg.CoReSeg.dec1", "CoReSeg.CoReSeg.final", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "x.size", "CoReSeg.CoReSeg.size", "CoReSeg.CoReSeg.size", "CoReSeg.CoReSeg.size", "CoReSeg.CoReSeg.size"], "methods", ["None"], ["", "def", "segment_forward", "(", "self", ",", "x", ")", ":", "\n", "# encoder", "\n", "        ", "cs_enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "cs_enc2", "=", "self", ".", "enc2", "(", "cs_enc1", ")", "\n", "cs_enc3", "=", "self", ".", "enc3", "(", "cs_enc2", ")", "\n", "cs_enc4", "=", "self", ".", "enc4", "(", "cs_enc3", ")", "\n", "\n", "#segmentation decoder", "\n", "cs_center", "=", "self", ".", "center", "(", "cs_enc4", ")", "\n", "cs_dec4", "=", "self", ".", "dec4", "(", "torch", ".", "cat", "(", "[", "cs_center", ",", "F", ".", "upsample", "(", "cs_enc4", ",", "cs_center", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_dec3", "=", "self", ".", "dec3", "(", "torch", ".", "cat", "(", "[", "cs_dec4", ",", "F", ".", "upsample", "(", "cs_enc3", ",", "cs_dec4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_dec2", "=", "self", ".", "dec2", "(", "torch", ".", "cat", "(", "[", "cs_dec3", ",", "F", ".", "upsample", "(", "cs_enc2", ",", "cs_dec3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_dec1", "=", "self", ".", "dec1", "(", "torch", ".", "cat", "(", "[", "cs_dec2", ",", "F", ".", "upsample", "(", "cs_enc1", ",", "cs_dec2", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "cs_final", "=", "self", ".", "final", "(", "cs_dec1", ")", "\n", "return", "F", ".", "upsample", "(", "cs_final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "cs_enc1", ",", "cs_enc2", ",", "cs_enc3", ",", "cs_enc4", ",", "cs_center", ",", "cs_dec1", ",", "cs_dec2", ",", "cs_dec3", ",", "cs_dec4", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.condition_forward": [[309, 350], ["CoReSeg.CoReSeg.gamma_enc0", "CoReSeg.CoReSeg.gamma_enc1", "CoReSeg.CoReSeg.gamma_enc2", "CoReSeg.CoReSeg.gamma_enc3", "CoReSeg.CoReSeg.gamma_enc4", "CoReSeg.CoReSeg.beta_enc0", "CoReSeg.CoReSeg.beta_enc1", "CoReSeg.CoReSeg.beta_enc2", "CoReSeg.CoReSeg.beta_enc3", "CoReSeg.CoReSeg.beta_enc4", "CoReSeg.CoReSeg.os_dec4", "CoReSeg.CoReSeg.os_dec3", "CoReSeg.CoReSeg.os_dec2", "CoReSeg.CoReSeg.os_dec1", "CoReSeg.CoReSeg.os_final", "torch.upsample", "torch.upsample", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.float().cuda", "torch.zeros.float().cuda", "CoReSeg.CoReSeg.os_center", "CoReSeg.CoReSeg.os_center", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros.float().cuda.size", "torch.zeros.float().cuda.squeeze", "torch.zeros.float", "torch.zeros.float"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.CoReSeg.concat_decoder_layers_reconstruction"], ["", "def", "condition_forward", "(", "self", ",", "condition", ",", "enc1", ",", "enc2", ",", "enc3", ",", "enc4", ",", "center", ",", "dec1", ",", "dec2", ",", "dec3", ",", "dec4", ")", ":", "\n", "        ", "if", "self", ".", "conditioned_one_hot_encoding", ":", "\n", "#print(condition.shape, self.conditioned_input_layer)", "\n", "\n", "            ", "new_condition", "=", "torch", ".", "zeros", "(", "(", "condition", ".", "shape", "[", "0", "]", ",", "self", ".", "conditioned_input_layer", ",", "condition", ".", "shape", "[", "2", "]", ",", "condition", ".", "shape", "[", "3", "]", ")", ")", "\n", "#print(new_condition.shape)", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "conditioned_input_layer", ")", ":", "\n", "#print(condition.squeeze().shape,new_condition[:,i,:,:].shape)", "\n", "                ", "new_condition", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "condition", ".", "squeeze", "(", ")", "==", "i", "\n", "\n", "", "condition", "=", "new_condition", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "#conditioned encoder", "\n", "\n", "", "rec_gamma_enc0", "=", "self", ".", "gamma_enc0", "(", "condition", ")", "\n", "rec_gamma_enc1", "=", "self", ".", "gamma_enc1", "(", "rec_gamma_enc0", ")", "\n", "rec_gamma_enc2", "=", "self", ".", "gamma_enc2", "(", "rec_gamma_enc1", ")", "\n", "rec_gamma_enc3", "=", "self", ".", "gamma_enc3", "(", "rec_gamma_enc2", ")", "\n", "rec_gamma_enc4", "=", "self", ".", "gamma_enc4", "(", "rec_gamma_enc3", ")", "\n", "\n", "rec_beta_enc0", "=", "self", ".", "beta_enc0", "(", "condition", ")", "\n", "rec_beta_enc1", "=", "self", ".", "beta_enc1", "(", "rec_beta_enc0", ")", "\n", "rec_beta_enc2", "=", "self", ".", "beta_enc2", "(", "rec_beta_enc1", ")", "\n", "rec_beta_enc3", "=", "self", ".", "beta_enc3", "(", "rec_beta_enc2", ")", "\n", "rec_beta_enc4", "=", "self", ".", "beta_enc4", "(", "rec_beta_enc3", ")", "\n", "\n", "if", "self", ".", "skipConnections", "==", "'none'", ":", "\n", "            ", "rec_center", "=", "self", ".", "os_center", "(", "enc4", "*", "rec_gamma_enc4", "+", "rec_beta_enc4", ")", "\n", "", "else", ":", "\n", "            ", "rec_center", "=", "self", ".", "os_center", "(", "torch", ".", "cat", "(", "[", "enc4", "*", "rec_gamma_enc4", "+", "rec_beta_enc4", ",", "enc4", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "#conditioned decoder", "\n", "", "rec_dec4", "=", "self", ".", "os_dec4", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "rec_center", ",", "enc4", ",", "enc4", "*", "rec_gamma_enc4", "+", "rec_beta_enc4", ")", ")", "\n", "rec_dec3", "=", "self", ".", "os_dec3", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "rec_dec4", ",", "enc3", ",", "enc3", "*", "rec_gamma_enc3", "+", "rec_beta_enc3", ")", ")", "\n", "rec_dec2", "=", "self", ".", "os_dec2", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "rec_dec3", ",", "enc2", ",", "enc2", "*", "rec_gamma_enc2", "+", "rec_beta_enc2", ")", ")", "\n", "rec_dec1", "=", "self", ".", "os_dec1", "(", "self", ".", "concat_decoder_layers_reconstruction", "(", "rec_dec2", ",", "enc1", ",", "enc1", "*", "rec_gamma_enc1", "+", "rec_beta_enc1", ",", "condition", ")", ")", "\n", "rec_final", "=", "self", ".", "os_final", "(", "rec_dec1", "*", "rec_gamma_enc0", "+", "rec_beta_enc0", ")", "\n", "rec_output", "=", "F", ".", "upsample", "(", "rec_final", ",", "condition", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "rec_output", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UnetEncoderBlock.__init__": [[353, 379], ["torch.nn.Module.__init__", "layers.append", "layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.Activation", "layers.append", "layers.append", "layers.append", "CoReSeg.NormType", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.Activation", "layers.append", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "layers.append", "CoReSeg.NormType", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout", "=", "False", ",", "norm", "=", "'batch'", ",", "activation", "=", "'relu'", ",", "convs", "=", "1", ",", "maxpool", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "UnetEncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "            ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "convs", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "                ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "", "if", "dropout", ":", "\n", "            ", "if", "norm", "!=", "'none'", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "", "", "if", "maxpool", "==", "1", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "", "elif", "maxpool", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n", "", "self", ".", "encode", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UnetEncoderBlock.forward": [[380, 382], ["CoReSeg.UnetEncoderBlock.encode"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UnetDecoderBlock.__init__": [[385, 412], ["torch.nn.Module.__init__", "layers.append", "layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.Activation", "layers.append", "layers.append", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "CoReSeg.NormType", "layers.append", "layers.append", "CoReSeg.Activation", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.append", "CoReSeg.NormType", "CoReSeg.NormType"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "middle_channels", ",", "out_channels", ",", "norm", "=", "'batch'", ",", "activation", "=", "'relu'", ",", "convs", "=", "1", ",", "convtranspose", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "UnetDecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "norm", "!=", "'none'", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout2d", "(", "0.5", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "middle_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "            ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "middle_channels", ")", ")", "\n", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "convs", ")", ":", "\n", "            ", "if", "i", "==", "(", "convs", "-", "1", ")", "and", "convtranspose", "==", "False", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "middle_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "                    ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "out_channels", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "middle_channels", ",", "middle_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "if", "norm", "!=", "'none'", ":", "\n", "                    ", "layers", ".", "append", "(", "NormType", "(", "norm", ",", "middle_channels", ")", ")", "\n", "", "", "layers", ".", "append", "(", "Activation", "(", "activation", ")", ")", "\n", "\n", "", "if", "convtranspose", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "middle_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ")", ")", "\n", "\n", "", "self", ".", "decode", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UnetDecoderBlock.forward": [[413, 416], ["CoReSeg.UnetDecoderBlock.decode"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__": [[419, 450], ["torch.nn.Module.__init__", "CoReSeg.UnetEncoderBlock", "CoReSeg.UnetEncoderBlock", "CoReSeg.UnetEncoderBlock", "CoReSeg.UnetEncoderBlock", "CoReSeg.UnetDecoderBlock", "CoReSeg.UnetDecoderBlock", "CoReSeg.UnetDecoderBlock", "CoReSeg.UnetDecoderBlock", "torch.nn.Sequential", "torch.nn.Sequential", "CoReSeg.initialize_weights", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.__init__", "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "num_classes", ",", "hidden_classes", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc1", "=", "UnetEncoderBlock", "(", "input_channels", ",", "64", ")", "\n", "self", ".", "enc2", "=", "UnetEncoderBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "enc3", "=", "UnetEncoderBlock", "(", "128", ",", "256", ")", "\n", "self", ".", "enc4", "=", "UnetEncoderBlock", "(", "256", ",", "512", ",", "dropout", "=", "True", ")", "\n", "\n", "self", ".", "center", "=", "UnetDecoderBlock", "(", "512", ",", "1024", ",", "512", ")", "\n", "\n", "self", ".", "dec4", "=", "UnetDecoderBlock", "(", "1024", ",", "512", ",", "256", ")", "\n", "self", ".", "dec3", "=", "UnetDecoderBlock", "(", "512", ",", "256", ",", "128", ")", "\n", "self", ".", "dec2", "=", "UnetDecoderBlock", "(", "256", ",", "128", ",", "64", ")", "\n", "\n", "self", ".", "dec1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "if", "hidden_classes", "is", "None", ":", "\n", "            ", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_classes", "-", "len", "(", "hidden_classes", ")", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "initialize_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.UNet.forward": [[451, 485], ["CoReSeg.UNet.enc1", "CoReSeg.UNet.enc2", "CoReSeg.UNet.enc3", "CoReSeg.UNet.enc4", "CoReSeg.UNet.center", "CoReSeg.UNet.dec4", "CoReSeg.UNet.dec3", "CoReSeg.UNet.dec2", "CoReSeg.UNet.dec1", "CoReSeg.UNet.final", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "x.size", "x.size", "x.size", "x.size", "x.size", "CoReSeg.UNet.size", "CoReSeg.UNet.size", "CoReSeg.UNet.size", "CoReSeg.UNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "feat", "=", "False", ")", ":", "\n", "\n", "        ", "enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "#         print('enc1', enc1.size())", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "#         print('enc2', enc2.size())", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "#         print('enc3', enc3.size())", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "#         print('enc4', enc4.size())", "\n", "\n", "center", "=", "self", ".", "center", "(", "enc4", ")", "\n", "#         print('center', center.size())", "\n", "\n", "dec4", "=", "self", ".", "dec4", "(", "torch", ".", "cat", "(", "[", "center", ",", "F", ".", "upsample", "(", "enc4", ",", "center", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "#         print('dec4', dec4.size())", "\n", "dec3", "=", "self", ".", "dec3", "(", "torch", ".", "cat", "(", "[", "dec4", ",", "F", ".", "upsample", "(", "enc3", ",", "dec4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "#         print('dec3', dec3.size())", "\n", "dec2", "=", "self", ".", "dec2", "(", "torch", ".", "cat", "(", "[", "dec3", ",", "F", ".", "upsample", "(", "enc2", ",", "dec3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "#         print('dec2', dec2.size())", "\n", "dec1", "=", "self", ".", "dec1", "(", "torch", ".", "cat", "(", "[", "dec2", ",", "F", ".", "upsample", "(", "enc1", ",", "dec2", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "]", ",", "1", ")", ")", "\n", "#         print('dec1', dec1.size())", "\n", "\n", "final", "=", "self", ".", "final", "(", "dec1", ")", "\n", "#         print('final', final.size())", "\n", "\n", "if", "feat", ":", "\n", "            ", "return", "(", "F", ".", "upsample", "(", "final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "dec1", ",", "\n", "F", ".", "upsample", "(", "dec2", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "F", ".", "upsample", "(", "dec3", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "F", ".", "upsample", "(", "dec4", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "upsample", "(", "final", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.model_unique_name": [[5, 14], ["separator.join().replace().replace().replace", "type", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "separator.join().replace().replace", "str", "separator.join().replace", "separator.join"], "function", ["None"], ["def", "model_unique_name", "(", "net", ",", "separator", "=", "';'", ")", ":", "\n", "\n", "    ", "if", "type", "(", "net", ".", "hidden_classes", ")", "==", "str", ":", "\n", "        ", "hidden_name", "=", "net", ".", "hidden_classes", "\n", "", "else", ":", "\n", "        ", "hidden_name", "=", "'_'", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "net", ".", "hidden_classes", "]", ")", "\n", "\n", "", "parts_list", "=", "[", "net", ".", "name", ",", "str", "(", "net", ".", "input_channels", ")", ",", "str", "(", "net", ".", "num_classes", ")", ",", "hidden_name", ",", "str", "(", "net", ".", "conv_channels", ")", ",", "str", "(", "net", ".", "conditioned_one_hot_encoding", ")", ",", "str", "(", "net", ".", "norm", ")", ",", "str", "(", "net", ".", "activation", ")", ",", "str", "(", "net", ".", "skipConnections", ")", ",", "str", "(", "net", ".", "finalextraconvsblock", ")", ",", "str", "(", "net", ".", "alpha", ")", ",", "str", "(", "net", ".", "args", ".", "lr", ")", "]", "\n", "return", "(", "separator", ".", "join", "(", "parts_list", ")", ")", ".", "replace", "(", "'.'", ",", "'_'", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.initialize_weights": [[15, 26], ["model.modules", "isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "#             if isinstance(module, nn.Conv2d) or isinstance(module, nn.Linear):", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.NormType": [[486, 490], ["torch.nn.InstanceNorm2d", "torch.nn.BatchNorm2d"], "function", ["None"], ["", "", "", "def", "NormType", "(", "normtype", ",", "channels", ")", ":", "\n", "    ", "if", "normtype", "==", "'batch'", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "", "return", "nn", ".", "InstanceNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iannunes_coreseg.None.CoReSeg.Activation": [[491, 497], ["torch.nn.ReLU", "torch.nn.PReLU", "torch.nn.LeakyReLU"], "function", ["None"], ["", "def", "Activation", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "'prerelu'", ":", "\n", "        ", "return", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'leakyrelu'", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", ")", "\n", "", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "", "", ""]]}