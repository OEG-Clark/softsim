{"home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.create_position_index": [[8, 15], ["numpy.rollaxis().transpose", "numpy.rollaxis", "numpy.indices"], "function", ["None"], ["def", "create_position_index", "(", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    create 512x640x2 pixel position indexes\n    each position represents (x,y)\n    \"\"\"", "\n", "position_indexes", "=", "np", ".", "rollaxis", "(", "np", ".", "indices", "(", "dimensions", "=", "(", "width", ",", "height", ")", ")", ",", "0", ",", "3", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "position_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.accumulate_votes": [[16, 38], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.logical_and", "numpy.logical_and", "numpy.asarray", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.floor().astype", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.logical_and", "scipy.sparse.coo_matrix().todense", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "numpy.floor", "numpy.ceil", "numpy.ceil", "scipy.sparse.coo_matrix"], "function", ["None"], ["", "def", "accumulate_votes", "(", "votes", ",", "shape", ")", ":", "\n", "# Hough Voting", "\n", "    ", "xs", "=", "votes", "[", ":", ",", "0", "]", "\n", "ys", "=", "votes", "[", ":", ",", "1", "]", "\n", "ps", "=", "votes", "[", ":", ",", "2", "]", "\n", "tl", "=", "[", "np", ".", "floor", "(", "ys", ")", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "floor", "(", "xs", ")", ".", "astype", "(", "'int32'", ")", "]", "\n", "tr", "=", "[", "np", ".", "floor", "(", "ys", ")", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "ceil", "(", "xs", ")", ".", "astype", "(", "'int32'", ")", "]", "\n", "bl", "=", "[", "np", ".", "ceil", "(", "ys", ")", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "floor", "(", "xs", ")", ".", "astype", "(", "'int32'", ")", "]", "\n", "br", "=", "[", "np", ".", "ceil", "(", "ys", ")", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "ceil", "(", "xs", ")", ".", "astype", "(", "'int32'", ")", "]", "\n", "dx", "=", "xs", "-", "tl", "[", "1", "]", "\n", "dy", "=", "ys", "-", "tl", "[", "0", "]", "\n", "tl_vals", "=", "ps", "*", "(", "1.", "-", "dx", ")", "*", "(", "1.", "-", "dy", ")", "\n", "tr_vals", "=", "ps", "*", "dx", "*", "(", "1.", "-", "dy", ")", "\n", "bl_vals", "=", "ps", "*", "dy", "*", "(", "1.", "-", "dx", ")", "\n", "br_vals", "=", "ps", "*", "dy", "*", "dx", "\n", "data", "=", "np", ".", "concatenate", "(", "[", "tl_vals", ",", "tr_vals", ",", "bl_vals", ",", "br_vals", "]", ")", "\n", "I", "=", "np", ".", "concatenate", "(", "[", "tl", "[", "0", "]", ",", "tr", "[", "0", "]", ",", "bl", "[", "0", "]", ",", "br", "[", "0", "]", "]", ")", "\n", "J", "=", "np", ".", "concatenate", "(", "[", "tl", "[", "1", "]", ",", "tr", "[", "1", "]", ",", "bl", "[", "1", "]", ",", "br", "[", "1", "]", "]", ")", "\n", "good_inds", "=", "np", ".", "logical_and", "(", "I", ">=", "0", ",", "I", "<", "shape", "[", "0", "]", ")", "\n", "good_inds", "=", "np", ".", "logical_and", "(", "good_inds", ",", "np", ".", "logical_and", "(", "J", ">=", "0", ",", "J", "<", "shape", "[", "1", "]", ")", ")", "\n", "heatmap", "=", "np", ".", "asarray", "(", "coo_matrix", "(", "(", "data", "[", "good_inds", "]", ",", "(", "I", "[", "good_inds", "]", ",", "J", "[", "good_inds", "]", ")", ")", ",", "shape", "=", "shape", ")", ".", "todense", "(", ")", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.compute_heatmaps": [[39, 54], ["postprocessing.create_position_index", "range", "numpy.stack", "numpy.reshape", "heatmaps.append", "numpy.concatenate", "postprocessing.accumulate_votes"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.create_position_index", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.accumulate_votes"], ["", "def", "compute_heatmaps", "(", "kp_maps", ",", "short_offsets", ")", ":", "\n", "    ", "\"\"\"\n    kp_maps:  height x width x 5\n    short_offset: 10 x height x width x 10\n    \"\"\"", "\n", "heatmaps", "=", "[", "]", "\n", "height", ",", "width", ",", "num_kps", "=", "kp_maps", ".", "shape", "\n", "idx", "=", "create_position_index", "(", "height", ",", "width", ")", "\n", "for", "i", "in", "range", "(", "num_kps", ")", ":", "\n", "        ", "this_kp_map", "=", "kp_maps", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "votes", "=", "idx", "+", "short_offsets", "[", ":", ",", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "\n", "votes", "=", "np", ".", "reshape", "(", "np", ".", "concatenate", "(", "[", "votes", ",", "this_kp_map", "]", ",", "axis", "=", "-", "1", ")", ",", "(", "-", "1", ",", "3", ")", ")", "# (327680, 3)", "\n", "heatmaps", ".", "append", "(", "accumulate_votes", "(", "votes", ",", "shape", "=", "(", "height", ",", "width", ")", ")", "/", "(", "np", ".", "pi", "*", "cfg", ".", "KP_RADIUS", "**", "2", ")", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "heatmaps", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_keypoints": [[56, 65], ["range", "zip", "keypoints.extend", "scipy.ndimage.filters.maximum_filter", "numpy.nonzero", "numpy.array"], "function", ["None"], ["", "def", "get_keypoints", "(", "heatmaps", ",", "peak_thresh", ")", ":", "\n", "    ", "height", ",", "width", ",", "num_kps", "=", "heatmaps", ".", "shape", "\n", "keypoints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_kps", ")", ":", "\n", "        ", "peaks", "=", "maximum_filter", "(", "heatmaps", "[", ":", ",", ":", ",", "i", "]", ",", "footprint", "=", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", "==", "heatmaps", "[", ":", ",", ":", ",", "i", "]", "\n", "peaks", "=", "zip", "(", "*", "np", ".", "nonzero", "(", "peaks", ")", ")", "\n", "keypoints", ".", "extend", "(", "[", "{", "'id'", ":", "i", ",", "'xy'", ":", "np", ".", "array", "(", "peak", "[", ":", ":", "-", "1", "]", ")", ",", "'conf'", ":", "heatmaps", "[", "peak", "[", "0", "]", ",", "peak", "[", "1", "]", ",", "i", "]", "}", "for", "peak", "in", "peaks", "]", ")", "\n", "keypoints", "=", "[", "kp", "for", "kp", "in", "keypoints", "if", "kp", "[", "'conf'", "]", ">", "peak_thresh", "]", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.iterative_bfs": [[68, 79], ["q.pop", "visited.append"], "function", ["None"], ["", "def", "iterative_bfs", "(", "graph", ",", "start", ",", "path", "=", "[", "]", ")", ":", "\n", "    ", "'''iterative breadth first search from start'''", "\n", "q", "=", "[", "(", "None", ",", "start", ")", "]", "\n", "visited", "=", "[", "]", "\n", "while", "q", ":", "\n", "        ", "v", "=", "q", ".", "pop", "(", "0", ")", "\n", "if", "not", "v", "[", "1", "]", "in", "visited", ":", "\n", "            ", "visited", ".", "append", "(", "v", "[", "1", "]", ")", "\n", "path", "=", "path", "+", "[", "v", "]", "\n", "q", "=", "q", "+", "[", "(", "v", "[", "1", "]", ",", "w", ")", "for", "w", "in", "graph", "[", "v", "[", "1", "]", "]", "]", "\n", "", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.group_skeletons": [[80, 127], ["keypoints.sort", "range", "range", "len", "keypoints.pop", "any", "numpy.zeros", "skeletons.append", "range", "postprocessing.iterative_bfs", "dir_edges.index", "tuple", "matches.sort", "numpy.round().astype", "keypoints.pop", "skeleton_graph[].append", "skeleton_graph[].append", "numpy.round().astype", "len", "numpy.linalg.norm", "range", "numpy.round", "numpy.round", "len", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.iterative_bfs"], ["", "def", "group_skeletons", "(", "keypoints", ",", "mid_offsets", ",", "heatmaps", ")", ":", "\n", "    ", "\"\"\"\n    keypoints: list of dict:  {'id': 0, 'xy': array([212,  82]), 'conf': 0.018296129713976542}\n    midoffsets: (512, 640, 40)   height x with x num_edges\n    heatmaps: height x width x num_kps\n    \"\"\"", "\n", "height", ",", "width", ",", "num_kps", "=", "heatmaps", ".", "shape", "\n", "keypoints", ".", "sort", "(", "key", "=", "(", "lambda", "kp", ":", "kp", "[", "'conf'", "]", ")", ",", "reverse", "=", "True", ")", "\n", "skeletons", "=", "[", "]", "\n", "dir_edges", "=", "cfg", ".", "EDGES", "+", "[", "edge", "[", ":", ":", "-", "1", "]", "for", "edge", "in", "cfg", ".", "EDGES", "]", "\n", "\n", "skeleton_graph", "=", "{", "i", ":", "[", "]", "for", "i", "in", "range", "(", "num_kps", ")", "}", "\n", "for", "i", "in", "range", "(", "num_kps", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_kps", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "in", "cfg", ".", "EDGES", "or", "(", "j", ",", "i", ")", "in", "cfg", ".", "EDGES", ":", "\n", "                ", "skeleton_graph", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "skeleton_graph", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "while", "len", "(", "keypoints", ")", ">", "0", ":", "\n", "        ", "kp", "=", "keypoints", ".", "pop", "(", "0", ")", "\n", "if", "any", "(", "[", "np", ".", "linalg", ".", "norm", "(", "kp", "[", "'xy'", "]", "-", "s", "[", "kp", "[", "'id'", "]", ",", ":", "2", "]", ")", "<=", "10", "for", "s", "in", "skeletons", "]", ")", ":", "\n", "            ", "continue", "\n", "", "this_skel", "=", "np", ".", "zeros", "(", "(", "num_kps", ",", "3", ")", ")", "\n", "this_skel", "[", "kp", "[", "'id'", "]", ",", ":", "2", "]", "=", "kp", "[", "'xy'", "]", "\n", "this_skel", "[", "kp", "[", "'id'", "]", ",", "2", "]", "=", "kp", "[", "'conf'", "]", "\n", "path", "=", "iterative_bfs", "(", "skeleton_graph", ",", "kp", "[", "'id'", "]", ")", "[", "1", ":", "]", "\n", "for", "edge", "in", "path", ":", "\n", "            ", "if", "this_skel", "[", "edge", "[", "0", "]", ",", "2", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "mid_idx", "=", "dir_edges", ".", "index", "(", "edge", ")", "\n", "offsets", "=", "mid_offsets", "[", ":", ",", ":", ",", "2", "*", "mid_idx", ":", "2", "*", "mid_idx", "+", "2", "]", "\n", "from_kp", "=", "tuple", "(", "np", ".", "round", "(", "this_skel", "[", "edge", "[", "0", "]", ",", ":", "2", "]", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "proposal", "=", "this_skel", "[", "edge", "[", "0", "]", ",", ":", "2", "]", "+", "offsets", "[", "from_kp", "[", "1", "]", ",", "from_kp", "[", "0", "]", ",", ":", "]", "\n", "matches", "=", "[", "(", "i", ",", "keypoints", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "keypoints", ")", ")", "if", "keypoints", "[", "i", "]", "[", "'id'", "]", "==", "edge", "[", "1", "]", "]", "\n", "matches", "=", "[", "match", "for", "match", "in", "matches", "if", "np", ".", "linalg", ".", "norm", "(", "proposal", "-", "match", "[", "1", "]", "[", "'xy'", "]", ")", "<=", "cfg", ".", "KP_RADIUS", "+", "1", "]", "\n", "if", "len", "(", "matches", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "matches", ".", "sort", "(", "key", "=", "lambda", "m", ":", "np", ".", "linalg", ".", "norm", "(", "m", "[", "1", "]", "[", "'xy'", "]", "-", "proposal", ")", ")", "\n", "to_kp", "=", "np", ".", "round", "(", "matches", "[", "0", "]", "[", "1", "]", "[", "'xy'", "]", ")", ".", "astype", "(", "'int32'", ")", "\n", "to_kp_conf", "=", "matches", "[", "0", "]", "[", "1", "]", "[", "'conf'", "]", "\n", "keypoints", ".", "pop", "(", "matches", "[", "0", "]", "[", "0", "]", ")", "\n", "this_skel", "[", "edge", "[", "1", "]", ",", ":", "2", "]", "=", "to_kp", "\n", "this_skel", "[", "edge", "[", "1", "]", ",", "2", "]", "=", "to_kp_conf", "\n", "\n", "", "skeletons", ".", "append", "(", "this_skel", ")", "\n", "\n", "", "return", "skeletons", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks": [[129, 148], ["np.transpose.data.cpu().numpy", "np.transpose.data.cpu().numpy", "np.transpose.data.cpu().numpy", "numpy.transpose", "numpy.transpose", "numpy.transpose", "postprocessing.compute_heatmaps", "range", "postprocessing.get_keypoints", "postprocessing.group_skeletons", "scipy.ndimage.filters.gaussian_filter", "np.transpose.data.cpu", "np.transpose.data.cpu", "np.transpose.data.cpu"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.compute_heatmaps", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_keypoints", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.group_skeletons"], ["", "def", "get_skeletons_and_masks", "(", "kp_maps", ",", "short_offsets", ",", "mid_offsets", ")", ":", "\n", "    ", "\"\"\"\n    kp_maps: batch x 5 x height x width\n    short_offset: batch x 10 x height x width\n    \"\"\"", "\n", "kp_maps", "=", "kp_maps", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "short_offsets", "=", "short_offsets", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mid_offsets", "=", "mid_offsets", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "kp_maps", "=", "np", ".", "transpose", "(", "kp_maps", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "short_offsets", "=", "np", ".", "transpose", "(", "short_offsets", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "mid_offsets", "=", "np", ".", "transpose", "(", "mid_offsets", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "heatmaps", "=", "compute_heatmaps", "(", "kp_maps", ",", "short_offsets", ")", "\n", "for", "i", "in", "range", "(", "heatmaps", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "heatmaps", "[", ":", ",", ":", ",", "i", "]", "=", "gaussian_filter", "(", "heatmaps", "[", ":", ",", ":", ",", "i", "]", ",", "sigma", "=", "2", ")", "\n", "", "pred_kp", "=", "get_keypoints", "(", "heatmaps", ",", "peak_thresh", "=", "0.004", ")", "\n", "skeletons", "=", "group_skeletons", "(", "pred_kp", ",", "mid_offsets", ",", "heatmaps", ")", "\n", "return", "skeletons", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton": [[150, 160], ["mask.sum", "out_skeleton.append", "out_skeleton.append", "mask[].sum", "mask[].sum"], "function", ["None"], ["", "def", "refine_skeleton", "(", "skeletons", ")", ":", "\n", "    ", "out_skeleton", "=", "[", "]", "\n", "for", "skeleton", "in", "skeletons", ":", "\n", "        ", "mask", "=", "skeleton", "[", ":", ",", "0", "]", ">", "0.", "\n", "if", "mask", ".", "sum", "(", ")", ">=", "3", ":", "\n", "            ", "out_skeleton", ".", "append", "(", "skeleton", ")", "\n", "", "elif", "mask", "[", "[", "0", ",", "3", "]", "]", ".", "sum", "(", ")", "==", "2", "or", "mask", "[", "[", "1", ",", "2", "]", "]", ".", "sum", "(", ")", "==", "2", ":", "\n", "            ", "out_skeleton", ".", "append", "(", "skeleton", ")", "\n", "\n", "", "", "return", "out_skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box": [[164, 243], ["mask[].sum", "min", "max", "min", "max", "skeleton[].mean", "bboxes.append", "mask[].sum", "numpy.where", "max", "numpy.where", "max", "skeleton[].mean", "bboxes.append", "min", "max", "min", "max", "mask[].sum", "mask[].sum", "mask[].sum", "mask[].sum", "skeleton[].mean", "bboxes.append", "mask[].sum", "skeleton[].mean", "bboxes.append", "mask[].sum", "min", "skeleton[].mean", "bboxes.append", "mask[].sum", "min", "skeleton[].mean", "bboxes.append", "mask[].sum", "max", "skeleton[].mean", "bboxes.append", "mask[].sum", "max", "skeleton[].mean", "bboxes.append"], "function", ["None"], ["", "def", "skeleton_to_box", "(", "skeletons", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    skeletons: list of num_kp x 3 (x,y,conf)\n    \"\"\"", "\n", "bboxes", "=", "[", "]", "\n", "for", "skeleton", "in", "skeletons", ":", "\n", "        ", "skeleton", "[", ":", ",", ":", "2", "]", "*=", "scale", "\n", "tl", "=", "skeleton", "[", "0", ",", ":", "]", "\n", "tr", "=", "skeleton", "[", "1", ",", ":", "]", "\n", "bl", "=", "skeleton", "[", "2", ",", ":", "]", "\n", "br", "=", "skeleton", "[", "3", ",", ":", "]", "\n", "cc", "=", "skeleton", "[", "4", ",", ":", "]", "\n", "mask", "=", "skeleton", "[", ":", ",", "0", "]", ">", "0.", "\n", "\n", "if", "mask", "[", "[", "0", ",", "1", ",", "2", ",", "3", "]", "]", ".", "sum", "(", ")", "==", "4", ":", "# condition1: 4 corners exist", "\n", "            ", "y1", "=", "min", "(", "tl", "[", "1", "]", ",", "tr", "[", "1", "]", ")", "\n", "y2", "=", "max", "(", "bl", "[", "1", "]", ",", "br", "[", "1", "]", ")", "\n", "x1", "=", "min", "(", "tl", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "x2", "=", "max", "(", "tr", "[", "0", "]", ",", "br", "[", "0", "]", ")", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "\n", "", "elif", "mask", "[", "[", "0", ",", "1", ",", "2", ",", "3", "]", "]", ".", "sum", "(", ")", "==", "3", ":", "# condition2: 3 corners exist", "\n", "            ", "y1", "=", "np", ".", "where", "(", "mask", "[", "[", "0", ",", "1", "]", "]", ".", "sum", "(", ")", "==", "2", ",", "min", "(", "tl", "[", "1", "]", ",", "tr", "[", "1", "]", ")", ",", "max", "(", "tl", "[", "1", "]", ",", "tr", "[", "1", "]", ")", ")", "\n", "y2", "=", "max", "(", "bl", "[", "1", "]", ",", "br", "[", "1", "]", ")", "\n", "x1", "=", "np", ".", "where", "(", "mask", "[", "[", "0", ",", "2", "]", "]", ".", "sum", "(", ")", "==", "2", ",", "min", "(", "tl", "[", "0", "]", ",", "bl", "[", "0", "]", ")", ",", "max", "(", "tl", "[", "0", "]", ",", "bl", "[", "0", "]", ")", ")", "\n", "x2", "=", "max", "(", "tr", "[", "0", "]", ",", "br", "[", "0", "]", ")", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "\n", "", "elif", "mask", "[", "[", "0", ",", "1", ",", "2", ",", "3", "]", "]", ".", "sum", "(", ")", "==", "2", ":", "\n", "            ", "if", "mask", "[", "[", "0", ",", "3", "]", "]", ".", "sum", "(", ")", "==", "2", ":", "\n", "                ", "y1", "=", "tl", "[", "1", "]", "\n", "y2", "=", "br", "[", "1", "]", "\n", "x1", "=", "tl", "[", "0", "]", "\n", "x2", "=", "br", "[", "0", "]", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "", "elif", "mask", "[", "[", "1", ",", "2", "]", "]", ".", "sum", "(", ")", "==", "2", ":", "\n", "                ", "y1", "=", "tr", "[", "1", "]", "\n", "y2", "=", "bl", "[", "1", "]", "\n", "x1", "=", "bl", "[", "0", "]", "\n", "x2", "=", "tr", "[", "0", "]", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "\n", "\n", "", "elif", "mask", "[", "[", "0", ",", "1", ",", "4", "]", "]", ".", "sum", "(", ")", "==", "3", ":", "\n", "                ", "y1", "=", "min", "(", "tl", "[", "1", "]", ",", "tr", "[", "1", "]", ")", "\n", "y2", "=", "y1", "+", "(", "cc", "[", "1", "]", "-", "y1", ")", "*", "2", "\n", "x1", "=", "tl", "[", "0", "]", "\n", "x2", "=", "tr", "[", "0", "]", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "\n", "", "elif", "mask", "[", "[", "0", ",", "2", ",", "4", "]", "]", ".", "sum", "(", ")", "==", "3", ":", "\n", "                ", "y1", "=", "tl", "[", "1", "]", "\n", "y2", "=", "bl", "[", "1", "]", "\n", "x1", "=", "min", "(", "tl", "[", "0", "]", ",", "bl", "[", "0", "]", ")", "\n", "x2", "=", "x1", "+", "(", "cc", "[", "0", "]", "-", "x1", ")", "*", "2", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "\n", "", "elif", "mask", "[", "[", "1", ",", "3", ",", "4", "]", "]", ".", "sum", "(", ")", "==", "3", ":", "\n", "                ", "y1", "=", "tr", "[", "1", "]", "\n", "y2", "=", "br", "[", "1", "]", "\n", "x2", "=", "max", "(", "tr", "[", "0", "]", ",", "br", "[", "0", "]", ")", "\n", "x1", "=", "x2", "-", "(", "x2", "-", "cc", "[", "0", "]", ")", "*", "2", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "\n", "", "elif", "mask", "[", "[", "2", ",", "3", ",", "4", "]", "]", ".", "sum", "(", ")", "==", "3", ":", "\n", "                ", "y2", "=", "max", "(", "bl", "[", "1", "]", ",", "br", "[", "1", "]", ")", "\n", "y1", "=", "y2", "-", "(", "y2", "-", "cc", "[", "1", "]", ")", "*", "2", "\n", "x1", "=", "bl", "[", "0", "]", "\n", "x2", "=", "br", "[", "0", "]", "\n", "conf", "=", "skeleton", "[", "mask", ",", "2", "]", ".", "mean", "(", ")", "\n", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "", "", "", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.gather_skeleton_single": [[245, 253], ["postprocessing.skeleton_to_box", "postprocessing.skeleton_to_box", "postprocessing.skeleton_to_box", "postprocessing.skeleton_to_box", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box"], ["", "def", "gather_skeleton_single", "(", "skeleton0", ",", "skeleton1", ",", "skeleton2", ",", "skeleton3", ")", ":", "\n", "    ", "bboxes0", "=", "skeleton_to_box", "(", "skeleton0", ",", "scale", "=", "1", ")", "\n", "bboxes1", "=", "skeleton_to_box", "(", "skeleton1", ",", "scale", "=", "2", ")", "\n", "bboxes2", "=", "skeleton_to_box", "(", "skeleton2", ",", "scale", "=", "4", ")", "\n", "bboxes3", "=", "skeleton_to_box", "(", "skeleton3", ",", "scale", "=", "8", ")", "\n", "# bboxes = np.asarray(bboxes0+bboxes1+bboxes2+bboxes3)", "\n", "# return bboxes", "\n", "return", "np", ".", "asarray", "(", "bboxes0", ")", ",", "np", ".", "asarray", "(", "bboxes1", ")", ",", "np", ".", "asarray", "(", "bboxes2", ")", ",", "np", ".", "asarray", "(", "bboxes3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.gather_skeleton": [[255, 262], ["postprocessing.skeleton_to_box", "postprocessing.skeleton_to_box", "postprocessing.skeleton_to_box", "postprocessing.skeleton_to_box", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.skeleton_to_box"], ["", "def", "gather_skeleton", "(", "skeleton0", ",", "skeleton1", ",", "skeleton2", ",", "skeleton3", ")", ":", "\n", "    ", "bboxes0", "=", "skeleton_to_box", "(", "skeleton0", ",", "scale", "=", "1", ")", "\n", "bboxes1", "=", "skeleton_to_box", "(", "skeleton1", ",", "scale", "=", "2", ")", "\n", "bboxes2", "=", "skeleton_to_box", "(", "skeleton2", ",", "scale", "=", "4", ")", "\n", "bboxes3", "=", "skeleton_to_box", "(", "skeleton3", ",", "scale", "=", "8", ")", "\n", "bboxes", "=", "np", ".", "asarray", "(", "bboxes0", "+", "bboxes1", "+", "bboxes2", "+", "bboxes3", ")", "\n", "return", "bboxes", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.Compose.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.Compose.__call__": [[12, 16], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.ConvertImgFloat.__call__": [[19, 21], ["img.astype", "mask.astype"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "img", ".", "astype", "(", "np", ".", "float32", ")", ",", "mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomContrast.__init__": [[23, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", ":", "\n", "        ", "self", ".", "lower", "=", "lower", "\n", "self", ".", "upper", "=", "upper", "\n", "assert", "self", ".", "upper", ">=", "self", ".", "lower", ",", "\"contrast upper must be >= lower.\"", "\n", "assert", "self", ".", "lower", ">=", "0", ",", "\"contrast lower must be non-negative.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomContrast.__call__": [[29, 34], ["numpy.random.randint", "numpy.random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "lower", ",", "self", ".", "upper", ")", "\n", "img", "*=", "alpha", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomBrightness.__init__": [[37, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delta", "=", "32", ")", ":", "\n", "        ", "assert", "delta", ">=", "0.0", "\n", "assert", "delta", "<=", "255.0", "\n", "self", ".", "delta", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomBrightness.__call__": [[42, 47], ["numpy.random.randint", "numpy.random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "delta", "=", "random", ".", "uniform", "(", "-", "self", ".", "delta", ",", "self", ".", "delta", ")", "\n", "img", "+=", "delta", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.SwapChannels.__init__": [[49, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "swaps", ")", ":", "\n", "        ", "self", ".", "swaps", "=", "swaps", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.SwapChannels.__call__": [[51, 54], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "self", ".", "swaps", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomLightingNoise.__init__": [[57, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "perms", "=", "(", "(", "0", ",", "1", ",", "2", ")", ",", "(", "0", ",", "2", ",", "1", ")", ",", "\n", "(", "1", ",", "0", ",", "2", ")", ",", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "(", "2", ",", "0", ",", "1", ")", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomLightingNoise.__call__": [[61, 67], ["numpy.random.randint", "transforms.SwapChannels", "SwapChannels.", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "swap", "=", "self", ".", "perms", "[", "random", ".", "randint", "(", "len", "(", "self", ".", "perms", ")", ")", "]", "\n", "shuffle", "=", "SwapChannels", "(", "swap", ")", "\n", "img", "=", "shuffle", "(", "img", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.PhotometricDistort.__init__": [[70, 74], ["transforms.RandomContrast", "transforms.RandomBrightness", "transforms.RandomLightingNoise"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "pd", "=", "RandomContrast", "(", ")", "\n", "self", ".", "rb", "=", "RandomBrightness", "(", ")", "\n", "self", ".", "rln", "=", "RandomLightingNoise", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.PhotometricDistort.__call__": [[75, 84], ["transforms.PhotometricDistort.rb", "numpy.random.randint", "distort", "transforms.PhotometricDistort.rln"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", ",", "mask", "=", "self", ".", "rb", "(", "img", ",", "mask", ")", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "distort", "=", "self", ".", "pd", "\n", "", "else", ":", "\n", "            ", "distort", "=", "self", ".", "pd", "\n", "", "img", ",", "mask", "=", "distort", "(", "img", ",", "mask", ")", "\n", "img", ",", "mask", "=", "self", ".", "rln", "(", "img", ",", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.Expand.__init__": [[87, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_scale", "=", "2", ",", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.Expand.__call__": [[91, 107], ["numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.zeros", "numpy.zeros", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "ratio", "=", "random", ".", "uniform", "(", "1", ",", "self", ".", "max_scale", ")", "\n", "y1", "=", "random", ".", "uniform", "(", "0", ",", "h", "*", "ratio", "-", "h", ")", "\n", "x1", "=", "random", ".", "uniform", "(", "0", ",", "w", "*", "ratio", "-", "w", ")", "\n", "\n", "expand_img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ",", "c", ")", ",", "dtype", "=", "img", ".", "dtype", ")", "\n", "expand_img", "[", ":", ",", ":", ",", ":", "]", "=", "self", ".", "mean", "\n", "expand_img", "[", "int", "(", "y1", ")", ":", "int", "(", "y1", "+", "h", ")", ",", "int", "(", "x1", ")", ":", "int", "(", "x1", "+", "w", ")", "]", "=", "img", "\n", "\n", "expand_mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "mask", ".", "shape", "[", "0", "]", ",", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ")", ",", "dtype", "=", "mask", ".", "dtype", ")", "\n", "expand_mask", "[", ":", ",", "int", "(", "y1", ")", ":", "int", "(", "y1", "+", "h", ")", ",", "int", "(", "x1", ")", ":", "int", "(", "x1", "+", "w", ")", "]", "=", "mask", "\n", "\n", "return", "expand_img", ",", "expand_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomSampleCrop.__init__": [[110, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "(", "0.5", ",", "1.5", ")", ",", "min_win", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "sample_options", "=", "(", "\n", "# using entire original input image", "\n", "None", ",", "\n", "# sample a patch s.t. MIN jaccard w/ obj in .1,.3,.4,.7,.9", "\n", "# (0.1, None),", "\n", "# (0.3, None),", "\n", "(", "0.7", ",", "None", ")", ",", "\n", "(", "0.9", ",", "None", ")", ",", "\n", "# randomly sample a patch", "\n", "(", "None", ",", "None", ")", ",", "\n", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "min_win", "=", "min_win", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomSampleCrop.__call__": [[125, 147], ["numpy.random.choice", "range", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "height", ",", "width", ",", "_", "=", "img", ".", "shape", "\n", "while", "True", ":", "\n", "            ", "mode", "=", "random", ".", "choice", "(", "self", ".", "sample_options", ")", "\n", "if", "mode", "is", "None", ":", "\n", "                ", "return", "img", ",", "mask", "\n", "\n", "", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "                ", "current_img", "=", "img", "\n", "current_mask", "=", "mask", "\n", "\n", "w", "=", "random", ".", "uniform", "(", "self", ".", "min_win", "*", "width", ",", "width", ")", "\n", "h", "=", "random", ".", "uniform", "(", "self", ".", "min_win", "*", "height", ",", "height", ")", "\n", "if", "h", "/", "w", "<", "self", ".", "ratio", "[", "0", "]", "or", "h", "/", "w", ">", "self", ".", "ratio", "[", "1", "]", ":", "\n", "                    ", "continue", "\n", "", "y1", "=", "random", ".", "uniform", "(", "height", "-", "h", ")", "\n", "x1", "=", "random", ".", "uniform", "(", "width", "-", "w", ")", "\n", "rect", "=", "np", ".", "array", "(", "[", "int", "(", "y1", ")", ",", "int", "(", "x1", ")", ",", "int", "(", "y1", "+", "h", ")", ",", "int", "(", "x1", "+", "w", ")", "]", ")", "\n", "current_img", "=", "current_img", "[", "rect", "[", "0", "]", ":", "rect", "[", "2", "]", ",", "rect", "[", "1", "]", ":", "rect", "[", "3", "]", ",", ":", "]", "\n", "current_mask", "=", "current_mask", "[", ":", ",", "rect", "[", "0", "]", ":", "rect", "[", "2", "]", ",", "rect", "[", "1", "]", ":", "rect", "[", "3", "]", "]", "\n", "\n", "return", "current_img", ",", "current_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomMirror_w.__call__": [[149, 155], ["numpy.random.randint"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "_", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.RandomMirror_h.__call__": [[157, 163], ["numpy.random.randint"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "_", ",", "_", "=", "img", ".", "shape", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.Resize.__init__": [[166, 168], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "w", ")", ":", "\n", "        ", "self", ".", "dsize", "=", "(", "w", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.transforms.Resize.__call__": [[169, 177], ["cv2.resize", "range", "cv2.resize", "mask_new.append", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", "=", "self", ".", "dsize", ")", "\n", "mask_new", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cur_mask", "=", "mask", "[", "i", ",", ":", ",", ":", "]", "\n", "cur_mask", "=", "cv2", ".", "resize", "(", "cur_mask", ",", "dsize", "=", "self", ".", "dsize", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "mask_new", ".", "append", "(", "cur_mask", ")", "\n", "", "return", "img", ",", "np", ".", "asarray", "(", "mask_new", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.nms.non_maximum_suppression_numpy": [[4, 54], ["numpy.argsort", "numpy.take", "len", "len", "keep_index.append", "numpy.take", "numpy.take", "numpy.take", "numpy.take", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.take", "len"], "function", ["None"], ["def", "non_maximum_suppression_numpy", "(", "bboxes", ",", "nms_thresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    bboxes: num_insts x 5 [y1,y2,x1,x2,conf]\n    \"\"\"", "\n", "if", "len", "(", "bboxes", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "y1", "=", "bboxes", "[", ":", ",", "0", "]", "\n", "x1", "=", "bboxes", "[", ":", ",", "1", "]", "\n", "y2", "=", "bboxes", "[", ":", ",", "2", "]", "\n", "x2", "=", "bboxes", "[", ":", ",", "3", "]", "\n", "conf", "=", "bboxes", "[", ":", ",", "4", "]", "\n", "area_all", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "conf", ")", "# Ascending order", "\n", "keep_index", "=", "[", "]", "\n", "\n", "while", "len", "(", "sorted_index", ")", ">", "0", ":", "\n", "# get the last biggest values", "\n", "        ", "curr_index", "=", "sorted_index", "[", "-", "1", "]", "\n", "keep_index", ".", "append", "(", "curr_index", ")", "\n", "if", "len", "(", "sorted_index", ")", "==", "1", ":", "\n", "            ", "break", "\n", "# pop the value", "\n", "", "sorted_index", "=", "sorted_index", "[", ":", "-", "1", "]", "\n", "# get the remaining boxes", "\n", "yy1", "=", "np", ".", "take", "(", "y1", ",", "indices", "=", "sorted_index", ")", "\n", "xx1", "=", "np", ".", "take", "(", "x1", ",", "indices", "=", "sorted_index", ")", "\n", "yy2", "=", "np", ".", "take", "(", "y2", ",", "indices", "=", "sorted_index", ")", "\n", "xx2", "=", "np", ".", "take", "(", "x2", ",", "indices", "=", "sorted_index", ")", "\n", "# get the intersection box", "\n", "yy1", "=", "np", ".", "maximum", "(", "yy1", ",", "y1", "[", "curr_index", "]", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "xx1", ",", "x1", "[", "curr_index", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "yy2", ",", "y2", "[", "curr_index", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "xx2", ",", "x2", "[", "curr_index", "]", ")", "\n", "# calculate IoU", "\n", "w", "=", "xx2", "-", "xx1", "\n", "h", "=", "yy2", "-", "yy1", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.", ",", "w", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.", ",", "h", ")", "\n", "\n", "inter", "=", "w", "*", "h", "\n", "\n", "rem_areas", "=", "np", ".", "take", "(", "area_all", ",", "indices", "=", "sorted_index", ")", "\n", "union", "=", "(", "rem_areas", "-", "inter", ")", "+", "area_all", "[", "curr_index", "]", "\n", "IoU", "=", "inter", "/", "union", "\n", "sorted_index", "=", "sorted_index", "[", "IoU", "<=", "nms_thresh", "]", "\n", "\n", "", "out_bboxes", "=", "np", ".", "take", "(", "bboxes", ",", "keep_index", ",", "axis", "=", "0", ")", "\n", "\n", "return", "out_bboxes", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_neural.Neural.__init__": [[7, 11], ["dataset_base.BaseDataset.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "phase", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Neural", ",", "self", ")", ".", "__init__", "(", "data_dir", ",", "phase", ",", "transform", ")", "\n", "self", ".", "class_name", "=", "[", "'__background__'", ",", "'neural'", "]", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "class_name", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_neural.Neural.load_image": [[12, 17], ["os.path.join", "cv2.imread"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "imgFile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_id", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "imgFile", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_neural.Neural.load_gt_masks": [[18, 42], ["cv2.imread", "numpy.where", "numpy.unique", "numpy.asarray", "numpy.where", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "masks.append", "numpy.where", "abs", "abs"], "methods", ["None"], ["", "def", "load_gt_masks", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "mask_gt", "=", "cv2", ".", "imread", "(", "annopath", ")", "\n", "h", ",", "w", ",", "_", "=", "mask_gt", ".", "shape", "\n", "cond1", "=", "mask_gt", "[", ":", ",", ":", ",", "0", "]", "!=", "mask_gt", "[", ":", ",", ":", ",", "1", "]", "\n", "cond2", "=", "mask_gt", "[", ":", ",", ":", ",", "1", "]", "!=", "mask_gt", "[", ":", ",", ":", ",", "2", "]", "\n", "cond3", "=", "mask_gt", "[", ":", ",", ":", ",", "2", "]", "!=", "mask_gt", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "cond1", "+", "cond2", "+", "cond3", ")", "\n", "unique_colors", "=", "np", ".", "unique", "(", "mask_gt", "[", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "for", "color", "in", "unique_colors", ":", "\n", "            ", "cond1", "=", "mask_gt", "[", ":", ",", ":", ",", "0", "]", "==", "color", "[", "0", "]", "\n", "cond2", "=", "mask_gt", "[", ":", ",", ":", ",", "1", "]", "==", "color", "[", "1", "]", "\n", "cond3", "=", "mask_gt", "[", ":", ",", ":", ",", "2", "]", "==", "color", "[", "2", "]", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "cond1", "*", "cond2", "*", "cond3", ")", "\n", "y1", "=", "np", ".", "min", "(", "r", ")", "\n", "x1", "=", "np", ".", "min", "(", "c", ")", "\n", "y2", "=", "np", ".", "max", "(", "r", ")", "\n", "x2", "=", "np", ".", "max", "(", "c", ")", "\n", "if", "(", "abs", "(", "y2", "-", "y1", ")", "<=", "1", "or", "abs", "(", "x2", "-", "x1", ")", "<=", "1", ")", ":", "\n", "                ", "continue", "\n", "", "masks", ".", "append", "(", "np", ".", "where", "(", "cond1", "*", "cond2", "*", "cond3", ",", "1.", ",", "0.", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "masks", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_neural.Neural.load_gt_bboxes": [[44, 58], ["dataset_neural.Neural.load_gt_masks", "numpy.asarray", "numpy.where", "len", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "bboxes.append", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks"], ["", "def", "load_gt_bboxes", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "bboxes", "=", "[", "]", "\n", "masks", "=", "self", ".", "load_gt_masks", "(", "annopath", ")", "\n", "for", "mask", "in", "masks", ":", "\n", "            ", "r", ",", "c", "=", "np", ".", "where", "(", "mask", ">", "0", ")", "\n", "if", "len", "(", "r", ")", ":", "\n", "                ", "y1", "=", "np", ".", "min", "(", "r", ")", "\n", "x1", "=", "np", ".", "min", "(", "c", ")", "\n", "y2", "=", "np", ".", "max", "(", "r", ")", "\n", "x2", "=", "np", ".", "max", "(", "c", ")", "\n", "if", "(", "abs", "(", "y2", "-", "y1", ")", "<=", "1", "or", "abs", "(", "x2", "-", "x1", ")", "<=", "1", ")", ":", "\n", "                    ", "continue", "\n", "", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_neural.Neural.load_annoFolder": [[59, 61], ["os.path.join"], "methods", ["None"], ["", "def", "load_annoFolder", "(", "self", ",", "img_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'mask'", ",", "img_id", "[", ":", "-", "4", "]", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_neural.Neural.load_annotation": [[63, 70], ["dataset_neural.Neural.load_annoFolder", "dataset_neural.Neural.load_gt_masks", "dataset_neural.Neural.load_gt_bboxes"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annoFolder", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_bboxes"], ["", "def", "load_annotation", "(", "self", ",", "index", ",", "type", "=", "'mask'", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "annoFolder", "=", "self", ".", "load_annoFolder", "(", "img_id", ")", "\n", "if", "type", "==", "'mask'", ":", "\n", "            ", "return", "self", ".", "load_gt_masks", "(", "annoFolder", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_gt_bboxes", "(", "annoFolder", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.__init__": [[29, 33], ["KGnet.resnet50", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "KGnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "dataset", "=", "{", "'kaggle'", ":", "Kaggle", ",", "'plant'", ":", "Plant", ",", "'neural'", ":", "Neural", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.data_parallel": [[34, 36], ["torch.nn.DataParallel"], "methods", ["None"], ["", "def", "data_parallel", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.load_weights": [[37, 39], ["eval.InstanceHeat.model.load_state_dict", "torch.load", "os.path.join"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "resume", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "'weights_'", "+", "dataset", ",", "resume", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.map_mask_to_image": [[40, 50], ["numpy.repeat", "numpy.uint8", "numpy.ones"], "methods", ["None"], ["", "def", "map_mask_to_image", "(", "self", ",", "mask", ",", "img", ",", "color", ")", ":", "\n", "# color = np.random.rand(3)", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "mskd", "=", "img", "*", "mask", "\n", "clmsk", "=", "np", ".", "ones", "(", "mask", ".", "shape", ")", "*", "mask", "\n", "clmsk", "[", ":", ",", ":", ",", "0", "]", "=", "clmsk", "[", ":", ",", ":", ",", "0", "]", "*", "color", "[", "0", "]", "*", "256", "\n", "clmsk", "[", ":", ",", ":", ",", "1", "]", "=", "clmsk", "[", ":", ",", ":", ",", "1", "]", "*", "color", "[", "1", "]", "*", "256", "\n", "clmsk", "[", ":", ",", ":", ",", "2", "]", "=", "clmsk", "[", ":", ",", ":", ",", "2", "]", "*", "color", "[", "2", "]", "*", "256", "\n", "img", "=", "img", "+", "1.", "*", "clmsk", "-", "1.", "*", "mskd", "\n", "return", "np", ".", "uint8", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.show_heat_mask": [[51, 56], ["cv2.applyColorMap", "numpy.min", "numpy.max", "numpy.uint8"], "methods", ["None"], ["", "def", "show_heat_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "mask", "-", "np", ".", "min", "(", "mask", ")", "\n", "mask", "=", "mask", "/", "np", ".", "max", "(", "mask", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.test_inference": [[57, 96], ["cv2.resize", "img_input.to.to.to", "torch.cuda.synchronize", "postprocessing.get_skeletons_and_masks", "postprocessing.get_skeletons_and_masks", "postprocessing.get_skeletons_and_masks", "postprocessing.get_skeletons_and_masks", "postprocessing.refine_skeleton", "postprocessing.refine_skeleton", "postprocessing.refine_skeleton", "postprocessing.refine_skeleton", "postprocessing.gather_skeleton", "nms.non_maximum_suppression_numpy", "torch.cuda.synchronize", "eval.InstanceHeat.post_processing", "torch.no_grad", "time.time", "eval.InstanceHeat.model.forward_dec", "print", "torch.no_grad", "eval.InstanceHeat.model.forward_seg", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "time.time", "numpy.transpose", "img_input.to.to.copy"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.gather_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.nms.non_maximum_suppression_numpy", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.post_processing", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_dec", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_seg"], ["", "def", "test_inference", "(", "self", ",", "args", ",", "image", ",", "bbox_flag", "=", "False", ")", ":", "\n", "        ", "height", ",", "width", ",", "c", "=", "image", ".", "shape", "\n", "\n", "img_input", "=", "cv2", ".", "resize", "(", "image", ",", "(", "args", ".", "input_w", ",", "args", ".", "input_h", ")", ")", "\n", "img_input", "=", "torch", ".", "FloatTensor", "(", "np", ".", "transpose", "(", "img_input", ".", "copy", "(", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "-", "0.5", "\n", "img_input", "=", "img_input", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "begin", "=", "time", ".", "time", "(", ")", "\n", "pr_c0", ",", "pr_c1", ",", "pr_c2", ",", "pr_c3", ",", "feat_seg", "=", "self", ".", "model", ".", "forward_dec", "(", "img_input", ")", "\n", "print", "(", "\"forward time is {:.4f}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "begin", ")", ")", "\n", "pr_kp0", ",", "pr_short0", ",", "pr_mid0", "=", "pr_c0", "\n", "pr_kp1", ",", "pr_short1", ",", "pr_mid1", "=", "pr_c1", "\n", "pr_kp2", ",", "pr_short2", ",", "pr_mid2", "=", "pr_c2", "\n", "pr_kp3", ",", "pr_short3", ",", "pr_mid3", "=", "pr_c3", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "skeletons0", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp0", ",", "pr_short0", ",", "pr_mid0", ")", "\n", "skeletons1", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp1", ",", "pr_short1", ",", "pr_mid1", ")", "\n", "skeletons2", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp2", ",", "pr_short2", ",", "pr_mid2", ")", "\n", "skeletons3", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp3", ",", "pr_short3", ",", "pr_mid3", ")", "\n", "\n", "skeletons0", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons0", ")", "\n", "skeletons1", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons1", ")", "\n", "skeletons2", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons2", ")", "\n", "skeletons3", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons3", ")", "\n", "\n", "bboxes", "=", "postprocessing", ".", "gather_skeleton", "(", "skeletons0", ",", "skeletons1", ",", "skeletons2", ",", "skeletons3", ")", "\n", "bboxes", "=", "nms", ".", "non_maximum_suppression_numpy", "(", "bboxes", ",", "nms_thresh", "=", "args", ".", "nms_thresh", ")", "\n", "if", "bbox_flag", ":", "\n", "            ", "return", "bboxes", "\n", "", "if", "bboxes", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "model", ".", "forward_seg", "(", "feat_seg", ",", "[", "bboxes", "]", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "predictions", "=", "self", ".", "post_processing", "(", "args", ",", "predictions", ",", "width", ",", "height", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.post_processing": [[97, 128], ["zip", "zip", "numpy.asarray", "numpy.asarray", "mask_n_patch.data.cpu().numpy", "mask_n_det.data.cpu().numpy", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.zeros", "cv2.resize", "cv2.resize", "numpy.where", "out_masks.append", "out_dets.append", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "mask_n_patch.data.cpu", "mask_n_det.data.cpu", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "post_processing", "(", "self", ",", "args", ",", "predictions", ",", "image_w", ",", "image_h", ")", ":", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "return", "predictions", "\n", "", "out_masks", "=", "[", "]", "\n", "out_dets", "=", "[", "]", "\n", "mask_patches", ",", "mask_dets", "=", "predictions", "\n", "for", "mask_b_patches", ",", "mask_b_dets", "in", "zip", "(", "mask_patches", ",", "mask_dets", ")", ":", "\n", "            ", "for", "mask_n_patch", ",", "mask_n_det", "in", "zip", "(", "mask_b_patches", ",", "mask_b_dets", ")", ":", "\n", "                ", "mask_patch", "=", "mask_n_patch", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask_det", "=", "mask_n_det", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "=", "mask_det", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "y1", ")", ")", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "x1", ")", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "y2", ")", ")", ",", "args", ".", "input_h", "-", "1", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "x2", ")", ")", ",", "args", ".", "input_w", "-", "1", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "args", ".", "input_h", ",", "args", ".", "input_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask_patch", "=", "cv2", ".", "resize", "(", "mask_patch", ",", "(", "x2", "-", "x1", ",", "y2", "-", "y1", ")", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "mask_patch", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "image_w", ",", "image_h", ")", ")", "\n", "mask", "=", "np", ".", "where", "(", "mask", ">=", "args", ".", "seg_thresh", ",", "1", ",", "0", ")", "\n", "\n", "y1", "=", "float", "(", "y1", ")", "/", "args", ".", "input_h", "*", "image_h", "\n", "x1", "=", "float", "(", "x1", ")", "/", "args", ".", "input_w", "*", "image_w", "\n", "y2", "=", "float", "(", "y2", ")", "/", "args", ".", "input_h", "*", "image_h", "\n", "x2", "=", "float", "(", "x2", ")", "/", "args", ".", "input_w", "*", "image_w", "\n", "\n", "out_masks", ".", "append", "(", "mask", ")", "\n", "out_dets", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "", "", "return", "[", "np", ".", "asarray", "(", "out_masks", ",", "np", ".", "float32", ")", ",", "np", ".", "asarray", "(", "out_dets", ",", "np", ".", "float32", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.instance_segmentation_evaluation": [[130, 180], ["eval.InstanceHeat.load_weights", "eval.InstanceHeat.model.eval", "eval.InstanceHeat.model.to", "dataset_module", "range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "eval_parts.voc_ap", "print", "print", "len", "print", "dataset_module.load_image", "eval.InstanceHeat.test_inference", "eval_parts.seg_evaluation", "numpy.cumsum.extend", "numpy.cumsum.extend", "float", "numpy.maximum", "numpy.mean", "len", "numpy.mean", "len", "dataset_module.load_annotation", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.load_weights", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.voc_ap", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_image", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.test_inference", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.seg_evaluation", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation"], ["", "def", "instance_segmentation_evaluation", "(", "self", ",", "args", ",", "ov_thresh", "=", "0.5", ",", "use_07_metric", "=", "False", ")", ":", "\n", "        ", "self", ".", "load_weights", "(", "resume", "=", "args", ".", "resume", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dataset_module", "=", "self", ".", "dataset", "[", "args", ".", "dataset", "]", "\n", "dsets", "=", "dataset_module", "(", "data_dir", "=", "args", ".", "data_dir", ",", "phase", "=", "'test'", ")", "\n", "\n", "all_tp", "=", "[", "]", "\n", "all_fp", "=", "[", "]", "\n", "all_scores", "=", "[", "]", "\n", "temp_overlaps", "=", "[", "]", "\n", "npos", "=", "0", "\n", "for", "index", "in", "range", "(", "len", "(", "dsets", ")", ")", ":", "\n", "            ", "print", "(", "'processing {}/{} images'", ".", "format", "(", "index", ",", "len", "(", "dsets", ")", ")", ")", "\n", "img", "=", "dsets", ".", "load_image", "(", "index", ")", "\n", "predictions", "=", "self", ".", "test_inference", "(", "args", ",", "img", ")", "\n", "if", "predictions", "is", "None", ":", "\n", "                ", "npos", "+=", "len", "(", "dsets", ".", "load_annotation", "(", "index", ",", "type", "=", "'bbox'", ")", ")", "\n", "continue", "\n", "", "pr_masks", ",", "pr_dets", "=", "predictions", "\n", "\n", "fp", ",", "tp", ",", "all_scores", ",", "npos", ",", "temp_overlaps", "=", "eval_parts", ".", "seg_evaluation", "(", "index", "=", "index", ",", "\n", "dsets", "=", "dsets", ",", "\n", "BB_masks", "=", "pr_masks", ",", "\n", "BB_dets", "=", "pr_dets", ",", "\n", "all_scores", "=", "all_scores", ",", "\n", "npos", "=", "npos", ",", "\n", "temp_overlaps", "=", "temp_overlaps", ",", "\n", "ov_thresh", "=", "ov_thresh", ")", "\n", "\n", "all_fp", ".", "extend", "(", "fp", ")", "\n", "all_tp", ".", "extend", "(", "tp", ")", "\n", "# step5: compute precision recall", "\n", "", "all_fp", "=", "np", ".", "asarray", "(", "all_fp", ")", "\n", "all_tp", "=", "np", ".", "asarray", "(", "all_tp", ")", "\n", "all_scores", "=", "np", ".", "asarray", "(", "all_scores", ")", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "all_scores", ")", "\n", "all_fp", "=", "all_fp", "[", "sorted_ind", "]", "\n", "all_tp", "=", "all_tp", "[", "sorted_ind", "]", "\n", "all_fp", "=", "np", ".", "cumsum", "(", "all_fp", ")", "\n", "all_tp", "=", "np", ".", "cumsum", "(", "all_tp", ")", "\n", "rec", "=", "all_tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "all_tp", "/", "np", ".", "maximum", "(", "all_tp", "+", "all_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "eval_parts", ".", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "use_07_metric", ")", "\n", "print", "(", "\"ap@{} is {}\"", ".", "format", "(", "ov_thresh", ",", "ap", ")", ")", "\n", "print", "(", "\"temp overlaps = {}\"", ".", "format", "(", "np", ".", "mean", "(", "temp_overlaps", ")", ")", ")", "\n", "return", "ap", ",", "np", ".", "mean", "(", "temp_overlaps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.detection_evaluation": [[181, 235], ["eval.InstanceHeat.load_weights", "eval.InstanceHeat.model.eval", "eval.InstanceHeat.model.to", "dataset_module", "range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "eval_parts.voc_ap", "print", "len", "print", "dataset_module.load_image", "eval.InstanceHeat.test_inference", "numpy.asarray", "eval_parts.bbox_evaluation", "numpy.cumsum.extend", "numpy.cumsum.extend", "float", "numpy.maximum", "len", "len", "dataset_module.load_annotation", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.load_weights", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.voc_ap", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_image", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.test_inference", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.bbox_evaluation", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation"], ["", "def", "detection_evaluation", "(", "self", ",", "args", ",", "ov_thresh", "=", "0.5", ",", "use_07_metric", "=", "False", ")", ":", "\n", "        ", "self", ".", "load_weights", "(", "resume", "=", "args", ".", "resume", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "dataset_module", "=", "self", ".", "dataset", "[", "args", ".", "dataset", "]", "\n", "dsets", "=", "dataset_module", "(", "data_dir", "=", "args", ".", "data_dir", ",", "phase", "=", "'test'", ")", "\n", "\n", "all_tp", "=", "[", "]", "\n", "all_fp", "=", "[", "]", "\n", "all_scores", "=", "[", "]", "\n", "npos", "=", "0", "\n", "for", "index", "in", "range", "(", "len", "(", "dsets", ")", ")", ":", "\n", "            ", "print", "(", "'processing {}/{} images'", ".", "format", "(", "index", ",", "len", "(", "dsets", ")", ")", ")", "\n", "img", "=", "dsets", ".", "load_image", "(", "index", ")", "\n", "height", ",", "width", ",", "c", "=", "img", ".", "shape", "\n", "\n", "bboxes", "=", "self", ".", "test_inference", "(", "args", ",", "img", ",", "bbox_flag", "=", "True", ")", "\n", "\n", "if", "bboxes", "is", "None", ":", "\n", "                ", "npos", "+=", "len", "(", "dsets", ".", "load_annotation", "(", "index", ",", "type", "=", "'bbox'", ")", ")", "\n", "continue", "\n", "\n", "", "bboxes", "=", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "\n", "bboxes", "[", ":", ",", "0", "]", "=", "bboxes", "[", ":", ",", "0", "]", "/", "args", ".", "input_h", "*", "height", "\n", "bboxes", "[", ":", ",", "1", "]", "=", "bboxes", "[", ":", ",", "1", "]", "/", "args", ".", "input_w", "*", "width", "\n", "bboxes", "[", ":", ",", "2", "]", "=", "bboxes", "[", ":", ",", "2", "]", "/", "args", ".", "input_h", "*", "height", "\n", "bboxes", "[", ":", ",", "3", "]", "=", "bboxes", "[", ":", ",", "3", "]", "/", "args", ".", "input_w", "*", "width", "\n", "\n", "fp", ",", "tp", ",", "all_scores", ",", "npos", "=", "eval_parts", ".", "bbox_evaluation", "(", "index", "=", "index", ",", "\n", "dsets", "=", "dsets", ",", "\n", "BB_bboxes", "=", "bboxes", ",", "\n", "all_scores", "=", "all_scores", ",", "\n", "npos", "=", "npos", ",", "\n", "ov_thresh", "=", "ov_thresh", ")", "\n", "all_fp", ".", "extend", "(", "fp", ")", "\n", "all_tp", ".", "extend", "(", "tp", ")", "\n", "# step5: compute precision recall", "\n", "", "all_fp", "=", "np", ".", "asarray", "(", "all_fp", ")", "\n", "all_tp", "=", "np", ".", "asarray", "(", "all_tp", ")", "\n", "all_scores", "=", "np", ".", "asarray", "(", "all_scores", ")", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "all_scores", ")", "\n", "all_fp", "=", "all_fp", "[", "sorted_ind", "]", "\n", "all_tp", "=", "all_tp", "[", "sorted_ind", "]", "\n", "all_fp", "=", "np", ".", "cumsum", "(", "all_fp", ")", "\n", "all_tp", "=", "np", ".", "cumsum", "(", "all_tp", ")", "\n", "rec", "=", "all_tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "all_tp", "/", "np", ".", "maximum", "(", "all_tp", "+", "all_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "eval_parts", ".", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "use_07_metric", ")", "\n", "print", "(", "\"ap@{} is {}\"", ".", "format", "(", "ov_thresh", ",", "ap", ")", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.parse_args": [[15, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"InstanceHeat\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "help", "=", "\"data directory\"", ",", "default", "=", "\"../../../../Datasets/root/\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "help", "=", "\"resume file\"", ",", "default", "=", "\"end_model.pth\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--input_h'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'input height'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_w'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'input width'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'nms_thresh'", ")", "\n", "parser", ".", "add_argument", "(", "'--seg_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'seg_thresh'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'dec'", ",", "help", "=", "'seg or dec'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"training dataset\"", ",", "default", "=", "'neural'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.run_seg_ap": [[238, 249], ["print", "numpy.linspace", "numpy.savetxt", "numpy.savetxt", "object_is.instance_segmentation_evaluation", "ap_list.append", "iou_list.append", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.instance_segmentation_evaluation"], ["", "", "def", "run_seg_ap", "(", "object_is", ",", "args", ")", ":", "\n", "    ", "print", "(", "'evaluating segmentation using PASCAL2010 metric'", ")", "\n", "thresh", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", "\n", "ap_list", "=", "[", "]", "\n", "iou_list", "=", "[", "]", "\n", "for", "v", "in", "thresh", ":", "\n", "        ", "ap", ",", "iou", "=", "object_is", ".", "instance_segmentation_evaluation", "(", "args", ",", "ov_thresh", "=", "v", ",", "use_07_metric", "=", "False", ")", "\n", "ap_list", ".", "append", "(", "ap", "*", "100", ")", "\n", "iou_list", ".", "append", "(", "iou", "*", "100", ")", "\n", "", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "'weights_'", "+", "args", ".", "dataset", ",", "'seg_ap_list.txt'", ")", ",", "ap_list", ",", "fmt", "=", "'%.4f'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "'weights_'", "+", "args", ".", "dataset", ",", "'seg_iou_list.txt'", ")", ",", "iou_list", ",", "fmt", "=", "'%.4f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.run_dec_ap": [[252, 260], ["print", "numpy.linspace", "numpy.savetxt", "object_is.detection_evaluation", "ap_list.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval.InstanceHeat.detection_evaluation"], ["", "def", "run_dec_ap", "(", "object_is", ",", "args", ")", ":", "\n", "    ", "print", "(", "'evaluating detection using PASCAL2010 metric'", ")", "\n", "thresh", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", "\n", "ap_list", "=", "[", "]", "\n", "for", "v", "in", "thresh", ":", "\n", "        ", "ap", "=", "object_is", ".", "detection_evaluation", "(", "args", ",", "ov_thresh", "=", "v", ",", "use_07_metric", "=", "False", ")", "\n", "ap_list", ".", "append", "(", "ap", "*", "100", ")", "\n", "", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "'weights_'", "+", "args", ".", "dataset", ",", "'dec_ap_list.txt'", ")", ",", "ap_list", ",", "fmt", "=", "'%.4f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.__init__": [[34, 38], ["KGnet.resnet50", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "KGnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "dataset", "=", "{", "'kaggle'", ":", "Kaggle", ",", "'plant'", ":", "Plant", ",", "'neural'", ":", "Neural", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.data_parallel": [[39, 41], ["torch.nn.DataParallel"], "methods", ["None"], ["", "def", "data_parallel", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.load_weights": [[42, 44], ["train.InstanceHeat.model.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "resume", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "resume", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.map_mask_to_image": [[45, 55], ["numpy.repeat", "numpy.uint8", "numpy.ones"], "methods", ["None"], ["", "def", "map_mask_to_image", "(", "self", ",", "mask", ",", "img", ",", "color", ")", ":", "\n", "# color = np.random.rand(3)", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "mskd", "=", "img", "*", "mask", "\n", "clmsk", "=", "np", ".", "ones", "(", "mask", ".", "shape", ")", "*", "mask", "\n", "clmsk", "[", ":", ",", ":", ",", "0", "]", "=", "clmsk", "[", ":", ",", ":", ",", "0", "]", "*", "color", "[", "0", "]", "*", "256", "\n", "clmsk", "[", ":", ",", ":", ",", "1", "]", "=", "clmsk", "[", ":", ",", ":", ",", "1", "]", "*", "color", "[", "1", "]", "*", "256", "\n", "clmsk", "[", ":", ",", ":", ",", "2", "]", "=", "clmsk", "[", ":", ",", ":", ",", "2", "]", "*", "color", "[", "2", "]", "*", "256", "\n", "img", "=", "img", "+", "1.", "*", "clmsk", "-", "1.", "*", "mskd", "\n", "return", "np", ".", "uint8", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.show_heat_mask": [[56, 61], ["cv2.applyColorMap", "numpy.min", "numpy.max", "numpy.uint8"], "methods", ["None"], ["", "def", "show_heat_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "mask", "-", "np", ".", "min", "(", "mask", ")", "\n", "mask", "=", "mask", "/", "np", ".", "max", "(", "mask", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.train": [[62, 132], ["os.path.join", "train.InstanceHeat.model.to", "train.InstanceHeat.model.train", "torch.optim.Adam", "torch.optim.lr_scheduler.ExponentialLR", "loss.DetectionLossAll", "seg_loss.SEG_loss", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "os.path.exists", "os.mkdir", "filter", "transforms.Compose", "transforms.Compose", "dataset_module", "print", "print", "train.InstanceHeat.training", "train_loss_dict.append", "torch.optim.lr_scheduler.ExponentialLR.step", "train.InstanceHeat.validating", "val_loss_dict.append", "numpy.savetxt", "numpy.savetxt", "torch.save", "train.InstanceHeat.model.parameters", "torch.save", "train.InstanceHeat.model.state_dict", "os.path.join", "transforms.ConvertImgFloat", "transforms.PhotometricDistort", "transforms.Expand", "transforms.RandomMirror_w", "transforms.RandomMirror_h", "transforms.Resize", "transforms.ConvertImgFloat", "transforms.Resize", "train.InstanceHeat.model.state_dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.train", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.training", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.validating"], ["", "def", "train", "(", "self", ",", "args", ")", ":", "\n", "        ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "\"weights_\"", "+", "args", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "weights_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "weights_path", ")", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "0.96", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "loss_dec", "=", "DetectionLossAll", "(", "kp_radius", "=", "cfg", ".", "KP_RADIUS", ")", "\n", "loss_seg", "=", "seg_loss", ".", "SEG_loss", "(", "height", "=", "args", ".", "input_h", ",", "width", "=", "args", ".", "input_w", ")", "\n", "\n", "data_trans", "=", "{", "'train'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ConvertImgFloat", "(", ")", ",", "\n", "transforms", ".", "PhotometricDistort", "(", ")", ",", "\n", "transforms", ".", "Expand", "(", "max_scale", "=", "2", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ")", ",", "\n", "transforms", ".", "RandomMirror_w", "(", ")", ",", "\n", "transforms", ".", "RandomMirror_h", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "h", "=", "args", ".", "input_h", ",", "w", "=", "args", ".", "input_w", ")", "]", ")", ",", "\n", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ConvertImgFloat", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "h", "=", "args", ".", "input_h", ",", "w", "=", "args", ".", "input_w", ")", "]", ")", "}", "\n", "\n", "dataset_module", "=", "self", ".", "dataset", "[", "args", ".", "dataset", "]", "\n", "dsets", "=", "{", "x", ":", "dataset_module", "(", "data_dir", "=", "args", ".", "data_dir", ",", "\n", "phase", "=", "x", ",", "\n", "transform", "=", "data_trans", "[", "x", "]", ")", "\n", "for", "x", "in", "[", "'train'", ",", "'val'", "]", "}", "\n", "\n", "# for i in range(100):", "\n", "#     show_ground_truth.show_input(dsets.__getitem__(i))", "\n", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dsets", "[", "'train'", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "collater", ")", "\n", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dsets", "[", "'val'", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "collater", ")", "\n", "\n", "\n", "train_loss_dict", "=", "[", "]", "\n", "val_loss_dict", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "            ", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "epochs", "-", "1", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "train_epoch_loss", "=", "self", ".", "training", "(", "train_loader", ",", "loss_dec", ",", "loss_seg", ",", "optimizer", ",", "epoch", ",", "dsets", "[", "'train'", "]", ")", "\n", "train_loss_dict", ".", "append", "(", "train_epoch_loss", ")", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "val_epoch_loss", "=", "self", ".", "validating", "(", "val_loader", ",", "loss_dec", ",", "loss_seg", ",", "epoch", ",", "dsets", "[", "'val'", "]", ")", "\n", "val_loss_dict", ".", "append", "(", "val_epoch_loss", ")", "\n", "\n", "np", ".", "savetxt", "(", "'train_loss_{}.txt'", ".", "format", "(", "args", ".", "dataset", ")", ",", "train_loss_dict", ",", "fmt", "=", "'%.6f'", ")", "\n", "np", ".", "savetxt", "(", "'val_loss_{}.txt'", ".", "format", "(", "args", ".", "dataset", ")", ",", "val_loss_dict", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n", "if", "epoch", "%", "5", "==", "0", "and", "epoch", ">", "0", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "weights_path", ",", "'{:d}_{:.4f}_model.pth'", ".", "format", "(", "epoch", ",", "train_epoch_loss", ")", ")", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "weights_path", ",", "'end_model.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.training": [[133, 160], ["train.InstanceHeat.model.train", "print", "img.to.to.to", "gt_c0.to.to.to", "gt_c1.to.to.to", "gt_c2.to.to.to", "gt_c3.to.to.to", "optimizer.zero_grad", "loss.item", "len", "torch.enable_grad", "train.InstanceHeat.model", "loss_seg", "loss.backward", "optimizer.step", "loss_dec", "loss_dec", "loss_dec", "loss_dec"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.train"], ["", "", "def", "training", "(", "self", ",", "train_loader", ",", "loss_dec", ",", "loss_seg", ",", "optimizer", ",", "epoch", ",", "dsets", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "running_loss", "=", "0.0", "\n", "\n", "for", "data", "in", "train_loader", ":", "\n", "            ", "img", ",", "gt_c0", ",", "gt_c1", ",", "gt_c2", ",", "gt_c3", ",", "instance_masks", ",", "bboxes_c0", "=", "data", "\n", "img", "=", "img", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c0", "=", "gt_c0", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c1", "=", "gt_c1", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c2", "=", "gt_c2", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c3", "=", "gt_c3", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "pr_c0", ",", "pr_c1", ",", "pr_c2", ",", "pr_c3", ",", "predictions", "=", "self", ".", "model", "(", "img", ",", "bboxes_c0", ")", "\n", "loss1", "=", "loss_dec", "(", "pr_c0", ",", "gt_c0", ")", "+", "loss_dec", "(", "pr_c1", ",", "gt_c1", ")", "+", "loss_dec", "(", "pr_c2", ",", "gt_c2", ")", "+", "loss_dec", "(", "pr_c3", ",", "gt_c3", ")", "\n", "loss2", "=", "loss_seg", "(", "predictions", ",", "instance_masks", ",", "bboxes_c0", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dsets", ")", "\n", "print", "(", "'{} Loss: {:.6}'", ".", "format", "(", "epoch", ",", "epoch_loss", ")", ")", "\n", "return", "epoch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.InstanceHeat.validating": [[161, 180], ["train.InstanceHeat.model.eval", "print", "torch.no_grad", "len", "img.to.to.to", "gt_c0.to.to.to", "gt_c1.to.to.to", "gt_c2.to.to.to", "gt_c3.to.to.to", "train.InstanceHeat.model", "loss_seg", "loss.item", "loss_dec", "loss_dec", "loss_dec", "loss_dec"], "methods", ["None"], ["", "def", "validating", "(", "self", ",", "val_loader", ",", "loss_dec", ",", "loss_seg", ",", "epoch", ",", "dsets", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "running_loss", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", "in", "val_loader", ":", "\n", "                ", "img", ",", "gt_c0", ",", "gt_c1", ",", "gt_c2", ",", "gt_c3", ",", "instance_masks", ",", "bboxes_c0", "=", "data", "\n", "img", "=", "img", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c0", "=", "gt_c0", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c1", "=", "gt_c1", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c2", "=", "gt_c2", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_c3", "=", "gt_c3", ".", "to", "(", "self", ".", "device", ")", "\n", "pr_c0", ",", "pr_c1", ",", "pr_c2", ",", "pr_c3", ",", "predictions", "=", "self", ".", "model", "(", "img", ",", "bboxes_c0", ")", "\n", "loss1", "=", "loss_dec", "(", "pr_c0", ",", "gt_c0", ")", "+", "loss_dec", "(", "pr_c1", ",", "gt_c1", ")", "+", "loss_dec", "(", "pr_c2", ",", "gt_c2", ")", "+", "loss_dec", "(", "pr_c3", ",", "gt_c3", ")", "\n", "loss2", "=", "loss_seg", "(", "predictions", ",", "instance_masks", ",", "bboxes_c0", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dsets", ")", "\n", "print", "(", "'Valid {} Loss: {:.6}'", ".", "format", "(", "epoch", ",", "epoch_loss", ")", ")", "\n", "return", "epoch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.train.parse_args": [[16, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"InstanceHeat\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "help", "=", "\"data directory\"", ",", "default", "=", "\"../../../Datasets/kaggle/\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--input_h'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'input height'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_w'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'input width'", ")", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "help", "=", "\"workers number\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "help", "=", "\"batch size\"", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "help", "=", "\"epochs\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--start_epoch\"", ",", "help", "=", "\"start_epoch\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "help", "=", "\"learning_rate\"", ",", "default", "=", "0.0001", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_parallel\"", ",", "help", "=", "\"data parallel\"", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"training dataset\"", ",", "default", "=", "'kaggle'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.__init__": [[7, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kp_radius", ")", ":", "\n", "        ", "super", "(", "DetectionLossAll", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kp_radius", "=", "kp_radius", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.kp_map_loss": [[12, 15], ["torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy"], "methods", ["None"], ["", "def", "kp_map_loss", "(", "self", ",", "pr_kp", ",", "gt_kp", ")", ":", "\n", "        ", "loss", "=", "F", ".", "binary_cross_entropy", "(", "pr_kp", ",", "gt_kp", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.short_offset_loss": [[16, 27], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "short_offset_loss", "(", "self", ",", "pr_short", ",", "gt_short", ",", "gt_kp", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "abs", "(", "pr_short", "-", "gt_short", ")", "/", "self", ".", "kp_radius", "\n", "gt_2kps_map", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gt_kp", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "gt_2kps_map", ".", "append", "(", "gt_kp", "[", ":", ",", "i", ",", ":", ",", ":", "]", ")", "\n", "gt_2kps_map", ".", "append", "(", "gt_kp", "[", ":", ",", "i", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "gt_2kps_map", "=", "torch", ".", "stack", "(", "gt_2kps_map", ",", "dim", "=", "1", ")", "\n", "loss", "=", "loss", "*", "gt_2kps_map", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "(", "torch", ".", "sum", "(", "gt_2kps_map", ")", "+", "1e-10", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.mid_offset_loss": [[28, 39], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack.extend", "torch.stack.extend", "torch.stack.extend", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "mid_offset_loss", "(", "self", ",", "pr_mid", ",", "gt_mid", ",", "gt_kp", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "abs", "(", "pr_mid", "-", "gt_mid", ")", "/", "self", ".", "kp_radius", "\n", "gt_4edge_map", "=", "[", "]", "\n", "# bi-direction", "\n", "for", "i", ",", "edge", "in", "enumerate", "(", "(", "EDGES", "+", "[", "edge", "[", ":", ":", "-", "1", "]", "for", "edge", "in", "EDGES", "]", ")", ")", ":", "\n", "            ", "from_kp", "=", "edge", "[", "0", "]", "\n", "gt_4edge_map", ".", "extend", "(", "[", "gt_kp", "[", ":", ",", "from_kp", ",", ":", ",", ":", "]", ",", "gt_kp", "[", ":", ",", "from_kp", ",", ":", ",", ":", "]", "]", ")", "\n", "", "gt_4edge_map", "=", "torch", ".", "stack", "(", "gt_4edge_map", ",", "dim", "=", "1", ")", "\n", "loss", "=", "loss", "*", "gt_4edge_map", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "(", "torch", ".", "sum", "(", "gt_4edge_map", ")", "+", "1e-10", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.forward": [[40, 50], ["loss.DetectionLossAll.kp_map_loss", "loss.DetectionLossAll.short_offset_loss", "loss.DetectionLossAll.mid_offset_loss"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.kp_map_loss", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.short_offset_loss", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.loss.DetectionLossAll.mid_offset_loss"], ["", "def", "forward", "(", "self", ",", "prediction", ",", "groundtruth", ")", ":", "\n", "        ", "pr_kp", ",", "pr_short", ",", "pr_mid", "=", "prediction", "\n", "gt_kp", "=", "groundtruth", "[", ":", ",", ":", "5", ",", ":", ",", ":", "]", "\n", "gt_short", "=", "groundtruth", "[", ":", ",", "5", ":", "5", "+", "10", ",", ":", ",", ":", "]", "\n", "gt_mid", "=", "groundtruth", "[", ":", ",", "5", "+", "10", ":", ",", ":", ",", ":", "]", "\n", "loss_kp", "=", "self", ".", "kp_map_loss", "(", "pr_kp", ",", "gt_kp", ")", "\n", "loss_short", "=", "self", ".", "short_offset_loss", "(", "pr_short", ",", "gt_short", ",", "gt_kp", ")", "\n", "loss_mid", "=", "self", ".", "mid_offset_loss", "(", "pr_mid", ",", "gt_mid", ",", "gt_kp", ")", "\n", "loss", "=", "loss_kp", "+", "loss_short", "+", "0.25", "*", "loss_mid", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.collater.collater": [[4, 26], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "instance_masks.append", "bboxes_c0.append"], "function", ["None"], ["def", "collater", "(", "data", ")", ":", "\n", "    ", "img", "=", "[", "]", "\n", "gt_c0", "=", "[", "]", "\n", "gt_c1", "=", "[", "]", "\n", "gt_c2", "=", "[", "]", "\n", "gt_c3", "=", "[", "]", "\n", "instance_masks", "=", "[", "]", "\n", "bboxes_c0", "=", "[", "]", "\n", "for", "sample", "in", "data", ":", "\n", "        ", "img", ".", "append", "(", "sample", "[", "0", "]", ")", "\n", "gt_c0", ".", "append", "(", "sample", "[", "1", "]", ")", "\n", "gt_c1", ".", "append", "(", "sample", "[", "2", "]", ")", "\n", "gt_c2", ".", "append", "(", "sample", "[", "3", "]", ")", "\n", "gt_c3", ".", "append", "(", "sample", "[", "4", "]", ")", "\n", "instance_masks", ".", "append", "(", "sample", "[", "5", "]", ")", "\n", "bboxes_c0", ".", "append", "(", "sample", "[", "6", "]", ")", "\n", "", "img", "=", "torch", ".", "stack", "(", "img", ",", "0", ")", "\n", "gt_c0", "=", "torch", ".", "stack", "(", "gt_c0", ",", "0", ")", "\n", "gt_c1", "=", "torch", ".", "stack", "(", "gt_c1", ",", "0", ")", "\n", "gt_c2", "=", "torch", ".", "stack", "(", "gt_c2", ",", "0", ")", "\n", "gt_c3", "=", "torch", ".", "stack", "(", "gt_c3", ",", "0", ")", "\n", "return", "img", ",", "gt_c0", ",", "gt_c1", ",", "gt_c2", ",", "gt_c3", ",", "instance_masks", ",", "bboxes_c0", "\n", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.create_position_index": [[4, 11], ["numpy.rollaxis().transpose", "numpy.rollaxis", "numpy.indices"], "function", ["None"], ["def", "create_position_index", "(", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    create 512x640x2 pixel position indexes\n    each position represents (x,y)\n    \"\"\"", "\n", "position_indexes", "=", "np", ".", "rollaxis", "(", "np", ".", "indices", "(", "dimensions", "=", "(", "width", ",", "height", ")", ")", ",", "0", ",", "3", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "position_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.copy_with_border_check": [[13, 44], ["max", "max", "max", "max", "numpy.zeros_like", "int", "int", "numpy.where"], "function", ["None"], ["", "def", "copy_with_border_check", "(", "map", ",", "center", ",", "disc", ",", "kp_circle", ")", ":", "\n", "    ", "\"\"\"\n    kp_circle: 2*KP_RADIUS x 2*KP_RADIUS\n    cropped_disc:  2*KP_RADIUS x 2*KP_RADIUS\n    map: height x width x 2\n    disc: height x width\n    \"\"\"", "\n", "h", ",", "w", "=", "disc", ".", "shape", "\n", "\n", "center", "=", "(", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", ")", "# (x,y) for each y_{j,k}", "\n", "\n", "pad_t", "=", "max", "(", "cfg", ".", "KP_RADIUS", "-", "center", "[", "1", "]", ",", "0", ")", "\n", "pad_l", "=", "max", "(", "cfg", ".", "KP_RADIUS", "-", "center", "[", "0", "]", ",", "0", ")", "\n", "pad_b", "=", "max", "(", "cfg", ".", "KP_RADIUS", "-", "(", "h", "-", "1", "-", "center", "[", "1", "]", ")", ",", "0", ")", "\n", "pad_r", "=", "max", "(", "cfg", ".", "KP_RADIUS", "-", "(", "w", "-", "1", "-", "center", "[", "0", "]", ")", ",", "0", ")", "\n", "\n", "y1", "=", "center", "[", "1", "]", "-", "cfg", ".", "KP_RADIUS", "+", "pad_t", "\n", "y2", "=", "center", "[", "1", "]", "+", "cfg", ".", "KP_RADIUS", "-", "pad_b", "+", "1", "\n", "x1", "=", "center", "[", "0", "]", "-", "cfg", ".", "KP_RADIUS", "+", "pad_l", "\n", "x2", "=", "center", "[", "0", "]", "+", "cfg", ".", "KP_RADIUS", "-", "pad_r", "+", "1", "\n", "\n", "mask", "=", "disc", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "cropped_kp_circle", "=", "kp_circle", "[", "pad_t", ":", "2", "*", "cfg", ".", "KP_RADIUS", "-", "pad_b", "+", "1", ",", "pad_l", ":", "2", "*", "cfg", ".", "KP_RADIUS", "-", "pad_r", "+", "1", ",", ":", "]", "\n", "temp_map", "=", "np", ".", "zeros_like", "(", "map", ")", "\n", "temp_map", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ":", "]", "=", "cropped_kp_circle", "\n", "temp_map", "[", "np", ".", "where", "(", "mask", ")", "==", "0", ",", ":", "]", "=", "0.", "\n", "\n", "# map[y1:y2, x1:x2 :][cropped_disc, :] = cropped_kp_circle[cropped_disc, :]", "\n", "map", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ":", "]", "=", "temp_map", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ":", "]", "\n", "\n", "return", "map", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.compute_short_offsets": [[45, 64], ["numpy.tile", "np.tile.transpose", "numpy.expand_dims", "numpy.zeros", "range", "numpy.arange", "numpy.stack", "range", "numpy.sqrt", "preprocessing.copy_with_border_check", "discs[].astype"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.copy_with_border_check"], ["", "def", "compute_short_offsets", "(", "bboxes", ",", "discs", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    bboxes: num_insts x num_kps x 2\n    discs:  num_insts x num_kps x height x width\n    \"\"\"", "\n", "num_insts", ",", "num_kps", ",", "_", "=", "bboxes", ".", "shape", "\n", "x", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "cfg", ".", "KP_RADIUS", ",", "-", "cfg", ".", "KP_RADIUS", "-", "1", ",", "-", "1", ")", ",", "[", "2", "*", "cfg", ".", "KP_RADIUS", "+", "1", ",", "1", "]", ")", "# [7,6,...,0,1,...,6,7]", "\n", "y", "=", "x", ".", "transpose", "(", ")", "\n", "mask", "=", "np", ".", "expand_dims", "(", "np", ".", "sqrt", "(", "x", "*", "x", "+", "y", "*", "y", ")", "<=", "cfg", ".", "KP_RADIUS", ",", "axis", "=", "-", "1", ")", "\n", "kp_circle", "=", "np", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "-", "1", ")", "*", "mask", "# 15 x 15 x 2", "\n", "\n", "offsets", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "2", "*", "num_kps", ")", ")", "\n", "for", "i", "in", "range", "(", "num_kps", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_insts", ")", ":", "\n", "            ", "offsets", "[", ":", ",", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "=", "copy_with_border_check", "(", "offsets", "[", ":", ",", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", ",", "\n", "(", "bboxes", "[", "j", ",", "i", ",", "0", "]", ",", "bboxes", "[", "j", ",", "i", ",", "1", "]", ")", ",", "\n", "discs", "[", "j", ",", "i", ",", ":", ",", ":", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "kp_circle", ")", "\n", "", "", "return", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.load_disc_masks": [[66, 81], ["numpy.zeros", "preprocessing.create_position_index", "range", "numpy.zeros", "range", "range", "numpy.sqrt", "np.zeros.argmin", "numpy.logical_and", "numpy.square().sum", "numpy.square"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.create_position_index"], ["", "def", "load_disc_masks", "(", "bboxes", ",", "height", ",", "width", ")", ":", "\n", "    ", "num_insts", ",", "num_kps", ",", "_", "=", "bboxes", ".", "shape", "\n", "disc_masks", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_insts", ",", "num_kps", ",", "height", ",", "width", ")", ")", "\n", "position_idxs", "=", "create_position_index", "(", "height", ",", "width", ")", "\n", "for", "i", "in", "range", "(", "num_kps", ")", ":", "\n", "        ", "insts_pt", "=", "bboxes", "[", ":", ",", "i", ",", ":", "]", "\n", "dists_pt", "=", "np", ".", "zeros", "(", "shape", "=", "(", "height", ",", "width", ",", "num_insts", ")", ")", "\n", "for", "j", "in", "range", "(", "num_insts", ")", ":", "\n", "            ", "dists_pt", "[", ":", ",", ":", ",", "j", "]", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "insts_pt", "[", "j", ",", ":", "]", "-", "position_idxs", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "\n", "", "if", "num_insts", ">", "0", ":", "\n", "            ", "insts_id", "=", "dists_pt", ".", "argmin", "(", "axis", "=", "-", "1", ")", "# [0,num_insts]", "\n", "", "for", "j", "in", "range", "(", "num_insts", ")", ":", "\n", "            ", "mask", "=", "np", ".", "logical_and", "(", "insts_id", "==", "j", ",", "dists_pt", "[", ":", ",", ":", ",", "j", "]", "<=", "cfg", ".", "KP_RADIUS", ")", "\n", "disc_masks", "[", "j", ",", "i", ",", ":", ",", ":", "]", "=", "mask", "\n", "", "", "return", "disc_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.load_kp_heats": [[82, 89], ["numpy.zeros", "range", "range", "numpy.where"], "function", ["None"], ["", "def", "load_kp_heats", "(", "disc_masks", ")", ":", "\n", "    ", "num_insts", ",", "num_kps", ",", "height", ",", "width", "=", "disc_masks", ".", "shape", "\n", "kp_heats", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_kps", ",", "height", ",", "width", ")", ")", "\n", "for", "i", "in", "range", "(", "num_kps", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_insts", ")", ":", "\n", "            ", "kp_heats", "[", "i", ",", ":", ",", ":", "]", "[", "np", ".", "where", "(", "disc_masks", "[", "j", ",", "i", ",", ":", ",", ":", "]", "==", "1.", ")", "]", "=", "1.", "\n", "", "", "return", "kp_heats", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.compute_mid_offsets": [[91, 106], ["numpy.zeros", "preprocessing.create_position_index", "enumerate", "range", "numpy.where"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.create_position_index"], ["", "def", "compute_mid_offsets", "(", "bboxes", ",", "discs", ")", ":", "\n", "    ", "\"\"\"\n    bboxes: num_insts x num_kps x 2\n    discs:  num_insts x num_kps x height x width\n    edge value represents the number in num_kps.\n    \"\"\"", "\n", "num_insts", ",", "num_kps", ",", "height", ",", "width", "=", "discs", ".", "shape", "\n", "offsets", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "4", "*", "cfg", ".", "NUM_EDGES", ")", ")", "# 4: bi-direction+(x,y) 2+2", "\n", "position_idxs", "=", "create_position_index", "(", "height", ",", "width", ")", "# position_idxs: (512, 640, 2)", "\n", "for", "i", ",", "edge", "in", "enumerate", "(", "(", "cfg", ".", "EDGES", "+", "[", "edge", "[", ":", ":", "-", "1", "]", "for", "edge", "in", "cfg", ".", "EDGES", "]", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_insts", ")", ":", "\n", "            ", "rr", ",", "cc", "=", "np", ".", "where", "(", "discs", "[", "j", ",", "edge", "[", "0", "]", ",", ":", ",", ":", "]", "==", "1", ")", "\n", "distance", "=", "[", "[", "bboxes", "[", "j", ",", "edge", "[", "1", "]", ",", "0", "]", ",", "bboxes", "[", "j", ",", "edge", "[", "1", "]", ",", "1", "]", "]", "]", "-", "position_idxs", "[", "rr", ",", "cc", ",", ":", "]", "\n", "offsets", "[", "rr", ",", "cc", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "=", "distance", "\n", "", "", "return", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.get_ground_truth": [[107, 119], ["preprocessing.load_disc_masks", "preprocessing.load_kp_heats", "preprocessing.compute_short_offsets", "preprocessing.compute_mid_offsets", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.load_disc_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.load_kp_heats", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.compute_short_offsets", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.compute_mid_offsets"], ["", "def", "get_ground_truth", "(", "bboxes", ",", "height", ",", "width", ",", "num_kps", ")", ":", "\n", "    ", "if", "len", "(", "bboxes", ")", "==", "0", ":", "\n", "        ", "kp_heats", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_kps", ",", "height", ",", "width", ")", ")", "\n", "short_offsets", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "2", "*", "num_kps", ")", ")", "\n", "mid_offsets", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "4", "*", "cfg", ".", "NUM_EDGES", ")", ")", "\n", "return", "kp_heats", ",", "short_offsets", ",", "mid_offsets", "\n", "\n", "", "disc_masks", "=", "load_disc_masks", "(", "bboxes", ",", "height", ",", "width", ")", "\n", "kp_heats", "=", "load_kp_heats", "(", "disc_masks", ")", "\n", "short_offsets", "=", "compute_short_offsets", "(", "bboxes", ",", "disc_masks", ",", "height", ",", "width", ")", "\n", "mid_offsets", "=", "compute_mid_offsets", "(", "bboxes", ",", "disc_masks", ")", "\n", "return", "kp_heats", ",", "short_offsets", ",", "mid_offsets", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.__init__": [[52, 56], ["KGnet.resnet50", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "KGnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "dataset", "=", "{", "'kaggle'", ":", "Kaggle", ",", "'plant'", ":", "Plant", ",", "'neural'", ":", "Neural", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.data_parallel": [[57, 59], ["torch.nn.DataParallel"], "methods", ["None"], ["", "def", "data_parallel", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.load_weights": [[60, 62], ["test.InstanceHeat.model.load_state_dict", "torch.load", "os.path.join"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "resume", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "'weights_'", "+", "dataset", ",", "resume", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.map_mask_to_image": [[63, 73], ["numpy.repeat", "numpy.uint8", "numpy.ones"], "methods", ["None"], ["", "def", "map_mask_to_image", "(", "self", ",", "mask", ",", "img", ",", "color", ")", ":", "\n", "# color = np.random.rand(3)", "\n", "        ", "mask", "=", "np", ".", "repeat", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "mskd", "=", "img", "*", "mask", "\n", "clmsk", "=", "np", ".", "ones", "(", "mask", ".", "shape", ")", "*", "mask", "\n", "clmsk", "[", ":", ",", ":", ",", "0", "]", "=", "clmsk", "[", ":", ",", ":", ",", "0", "]", "*", "color", "[", "0", "]", "*", "256", "\n", "clmsk", "[", ":", ",", ":", ",", "1", "]", "=", "clmsk", "[", ":", ",", ":", ",", "1", "]", "*", "color", "[", "1", "]", "*", "256", "\n", "clmsk", "[", ":", ",", ":", ",", "2", "]", "=", "clmsk", "[", ":", ",", ":", ",", "2", "]", "*", "color", "[", "2", "]", "*", "256", "\n", "img", "=", "img", "+", "1.", "*", "clmsk", "-", "1.", "*", "mskd", "\n", "return", "np", ".", "uint8", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.show_heat_mask": [[74, 79], ["cv2.applyColorMap", "numpy.min", "numpy.max", "numpy.uint8"], "methods", ["None"], ["", "def", "show_heat_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "mask", "-", "np", ".", "min", "(", "mask", ")", "\n", "mask", "=", "mask", "/", "np", ".", "max", "(", "mask", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.imshow_kp": [[80, 87], ["cv2.resize", "range", "test.InstanceHeat.map_mask_to_image"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.map_mask_to_image"], ["", "def", "imshow_kp", "(", "self", ",", "kp", ",", "img_in", ")", ":", "\n", "        ", "h", ",", "w", "=", "kp", ".", "shape", "[", "2", ":", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img_in", ",", "(", "w", ",", "h", ")", ")", "\n", "colors", "=", "[", "(", "0", ",", "0", ",", "0.9", ")", ",", "(", "0.9", ",", "0", ",", "0", ")", ",", "(", "0.9", ",", "0", ",", "0.9", ")", ",", "(", "0.9", ",", "0.9", ",", "0", ")", ",", "(", "0.2", ",", "0.9", ",", "0.9", ")", "]", "\n", "for", "i", "in", "range", "(", "kp", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "img", "=", "self", ".", "map_mask_to_image", "(", "kp", "[", "0", ",", "i", ",", ":", ",", ":", "]", ",", "img", ",", "color", "=", "colors", "[", "i", "]", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.test_inference": [[88, 126], ["cv2.resize", "img_input.to.to.to", "torch.cuda.synchronize", "postprocessing.get_skeletons_and_masks", "postprocessing.get_skeletons_and_masks", "postprocessing.get_skeletons_and_masks", "postprocessing.get_skeletons_and_masks", "postprocessing.refine_skeleton", "postprocessing.refine_skeleton", "postprocessing.refine_skeleton", "postprocessing.refine_skeleton", "postprocessing.gather_skeleton", "nms.non_maximum_suppression_numpy", "test.InstanceHeat.post_processing", "torch.no_grad", "time.time", "test.InstanceHeat.model.forward_dec", "print", "torch.no_grad", "test.InstanceHeat.model.forward_seg", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "time.time", "numpy.transpose", "img_input.to.to.copy"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.get_skeletons_and_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.refine_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.postprocessing.gather_skeleton", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.nms.non_maximum_suppression_numpy", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.post_processing", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_dec", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_seg"], ["", "def", "test_inference", "(", "self", ",", "args", ",", "image", ",", "bbox_flag", "=", "False", ")", ":", "\n", "        ", "height", ",", "width", ",", "c", "=", "image", ".", "shape", "\n", "\n", "img_input", "=", "cv2", ".", "resize", "(", "image", ",", "(", "args", ".", "input_w", ",", "args", ".", "input_h", ")", ")", "\n", "img_input", "=", "torch", ".", "FloatTensor", "(", "np", ".", "transpose", "(", "img_input", ".", "copy", "(", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", "/", "255", "-", "0.5", "\n", "img_input", "=", "img_input", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "begin", "=", "time", ".", "time", "(", ")", "\n", "pr_c0", ",", "pr_c1", ",", "pr_c2", ",", "pr_c3", ",", "feat_seg", "=", "self", ".", "model", ".", "forward_dec", "(", "img_input", ")", "\n", "print", "(", "\"forward time is {:.4f}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "begin", ")", ")", "\n", "pr_kp0", ",", "pr_short0", ",", "pr_mid0", "=", "pr_c0", "\n", "pr_kp1", ",", "pr_short1", ",", "pr_mid1", "=", "pr_c1", "\n", "pr_kp2", ",", "pr_short2", ",", "pr_mid2", "=", "pr_c2", "\n", "pr_kp3", ",", "pr_short3", ",", "pr_mid3", "=", "pr_c3", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "skeletons0", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp0", ",", "pr_short0", ",", "pr_mid0", ")", "\n", "skeletons1", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp1", ",", "pr_short1", ",", "pr_mid1", ")", "\n", "skeletons2", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp2", ",", "pr_short2", ",", "pr_mid2", ")", "\n", "skeletons3", "=", "postprocessing", ".", "get_skeletons_and_masks", "(", "pr_kp3", ",", "pr_short3", ",", "pr_mid3", ")", "\n", "\n", "skeletons0", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons0", ")", "\n", "skeletons1", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons1", ")", "\n", "skeletons2", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons2", ")", "\n", "skeletons3", "=", "postprocessing", ".", "refine_skeleton", "(", "skeletons3", ")", "\n", "\n", "bboxes", "=", "postprocessing", ".", "gather_skeleton", "(", "skeletons0", ",", "skeletons1", ",", "skeletons2", ",", "skeletons3", ")", "\n", "bboxes", "=", "nms", ".", "non_maximum_suppression_numpy", "(", "bboxes", ",", "nms_thresh", "=", "args", ".", "nms_thresh", ")", "\n", "if", "bbox_flag", ":", "\n", "            ", "return", "bboxes", "\n", "", "if", "bboxes", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "model", ".", "forward_seg", "(", "feat_seg", ",", "[", "bboxes", "]", ")", "\n", "", "predictions", "=", "self", ".", "post_processing", "(", "args", ",", "predictions", ",", "width", ",", "height", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.post_processing": [[127, 158], ["zip", "zip", "numpy.asarray", "numpy.asarray", "mask_n_patch.data.cpu().numpy", "mask_n_det.data.cpu().numpy", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.zeros", "cv2.resize", "cv2.resize", "numpy.where", "out_masks.append", "out_dets.append", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "mask_n_patch.data.cpu", "mask_n_det.data.cpu", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "post_processing", "(", "self", ",", "args", ",", "predictions", ",", "image_w", ",", "image_h", ")", ":", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "return", "predictions", "\n", "", "out_masks", "=", "[", "]", "\n", "out_dets", "=", "[", "]", "\n", "mask_patches", ",", "mask_dets", "=", "predictions", "\n", "for", "mask_b_patches", ",", "mask_b_dets", "in", "zip", "(", "mask_patches", ",", "mask_dets", ")", ":", "\n", "            ", "for", "mask_n_patch", ",", "mask_n_det", "in", "zip", "(", "mask_b_patches", ",", "mask_b_dets", ")", ":", "\n", "                ", "mask_patch", "=", "mask_n_patch", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask_det", "=", "mask_n_det", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "=", "mask_det", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "y1", ")", ")", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "x1", ")", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "y2", ")", ")", ",", "args", ".", "input_h", "-", "1", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "x2", ")", ")", ",", "args", ".", "input_w", "-", "1", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "args", ".", "input_h", ",", "args", ".", "input_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask_patch", "=", "cv2", ".", "resize", "(", "mask_patch", ",", "(", "x2", "-", "x1", ",", "y2", "-", "y1", ")", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "mask_patch", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "image_w", ",", "image_h", ")", ")", "\n", "mask", "=", "np", ".", "where", "(", "mask", ">=", "args", ".", "seg_thresh", ",", "1", ",", "0", ")", "\n", "\n", "y1", "=", "float", "(", "y1", ")", "/", "args", ".", "input_h", "*", "image_h", "\n", "x1", "=", "float", "(", "x1", ")", "/", "args", ".", "input_w", "*", "image_w", "\n", "y2", "=", "float", "(", "y2", ")", "/", "args", ".", "input_h", "*", "image_h", "\n", "x2", "=", "float", "(", "x2", ")", "/", "args", ".", "input_w", "*", "image_w", "\n", "\n", "out_masks", ".", "append", "(", "mask", ")", "\n", "out_dets", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "]", ")", "\n", "", "", "return", "[", "np", ".", "asarray", "(", "out_masks", ",", "np", ".", "float32", ")", ",", "np", ".", "asarray", "(", "out_dets", ",", "np", ".", "float32", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.imshow_instance_segmentation": [[161, 193], ["test.random_colors", "zip", "cv2.imshow", "cv2.waitKey", "numpy.random.rand", "test.apply_mask", "cv2.imwrite", "numpy.uint8", "ord", "cv2.destroyAllWindows", "exit", "cv2.rectangle", "cv2.putText", "os.path.join", "numpy.uint8", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.random_colors", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.apply_mask"], ["", "def", "imshow_instance_segmentation", "(", "self", ",", "\n", "masks", ",", "\n", "dets", ",", "\n", "out_img", ",", "\n", "img_id", "=", "None", ",", "\n", "save_flag", "=", "False", ",", "\n", "show_box", "=", "False", ",", "\n", "save_path", "=", "None", ")", ":", "\n", "\n", "        ", "colors", "=", "random_colors", "(", "masks", ".", "shape", "[", "0", "]", ")", "\n", "for", "mask", ",", "det", ",", "color", "in", "zip", "(", "masks", ",", "dets", ",", "colors", ")", ":", "\n", "            ", "color", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "if", "show_box", ":", "\n", "                ", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "conf", "=", "det", "\n", "cv2", ".", "rectangle", "(", "out_img", ",", "(", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", ")", ",", "(", "int", "(", "x2", ")", ",", "int", "(", "y2", ")", ")", ",", "[", "0", ",", "255", ",", "0", "]", ",", "1", ",", "1", ")", "\n", "cv2", ".", "putText", "(", "out_img", ",", "\"{:.4f}\"", ".", "format", "(", "conf", ")", ",", "(", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.3", ",", "(", "0", ",", "0", ",", "255", ")", ",", "1", ",", "1", ")", "\n", "# mask = np.repeat(mask[:, :, np.newaxis], 3, axis=2)", "\n", "# mskd = out_img * mask", "\n", "# clmsk = np.ones(mask.shape) * mask", "\n", "# clmsk[:, :, 0] = clmsk[:, :, 0] * color[0] * 256", "\n", "# clmsk[:, :, 1] = clmsk[:, :, 1] * color[1] * 256", "\n", "# clmsk[:, :, 2] = clmsk[:, :, 2] * color[2] * 256", "\n", "# out_img = out_img + 1 * clmsk - 1 * mskd", "\n", "", "apply_mask", "(", "image", "=", "out_img", ",", "mask", "=", "mask", ",", "color", "=", "color", ",", "alpha", "=", "0.8", ")", "\n", "", "if", "save_flag", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_id", "+", "\".png\"", ")", ",", "np", ".", "uint8", "(", "out_img", ")", ")", "\n", "", "cv2", ".", "imshow", "(", "'out_img'", ",", "np", ".", "uint8", "(", "out_img", ")", ")", "\n", "k", "=", "cv2", ".", "waitKey", "(", "0", ")", "\n", "if", "k", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "            ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.test": [[194, 224], ["test.InstanceHeat.load_weights", "test.InstanceHeat.model.to", "test.InstanceHeat.model.eval", "dataset_module", "range", "print", "print", "len", "time.time", "dataset_module.load_image", "test.InstanceHeat.test_inference", "all_time.append", "test.InstanceHeat.imshow_instance_segmentation", "os.path.exists", "os.mkdir", "numpy.mean", "time.time", "dataset_module.load_image.copy", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.load_weights", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_image", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.test_inference", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.InstanceHeat.imshow_instance_segmentation"], ["", "", "def", "test", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "load_weights", "(", "resume", "=", "args", ".", "resume", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "args", ".", "save_img", ":", "\n", "            ", "save_path", "=", "'save_result_'", "+", "args", ".", "dataset", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "", "else", ":", "\n", "            ", "save_path", "=", "None", "\n", "", "dataset_module", "=", "self", ".", "dataset", "[", "args", ".", "dataset", "]", "\n", "dsets", "=", "dataset_module", "(", "data_dir", "=", "args", ".", "data_dir", ",", "phase", "=", "'test'", ")", "\n", "all_time", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "dsets", ")", ")", ":", "\n", "            ", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "img", "=", "dsets", ".", "load_image", "(", "index", ")", "\n", "predictions", "=", "self", ".", "test_inference", "(", "args", ",", "img", ")", "\n", "if", "predictions", "is", "None", ":", "\n", "                ", "continue", "\n", "", "mask_patches", ",", "mask_dets", "=", "predictions", "\n", "all_time", ".", "append", "(", "time", ".", "time", "(", ")", "-", "time_begin", ")", "\n", "self", ".", "imshow_instance_segmentation", "(", "mask_patches", ",", "mask_dets", ",", "\n", "out_img", "=", "img", ".", "copy", "(", ")", ",", "\n", "img_id", "=", "dsets", ".", "img_ids", "[", "index", "]", ",", "\n", "save_flag", "=", "args", ".", "save_img", ",", "\n", "save_path", "=", "save_path", ")", "\n", "", "all_time", "=", "all_time", "[", "1", ":", "]", "\n", "print", "(", "'avg time is {}'", ".", "format", "(", "np", ".", "mean", "(", "all_time", ")", ")", ")", "\n", "print", "(", "'FPS is {}'", ".", "format", "(", "1.", "/", "np", ".", "mean", "(", "all_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.parse_args": [[16, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"InstanceHeat\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "help", "=", "\"data directory\"", ",", "default", "=", "\"../../../../Datasets/kaggle/\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "help", "=", "\"resume file\"", ",", "default", "=", "\"end_model.pth\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--input_h'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'input height'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_w'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'input width'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_img'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'save img or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'nms_thresh'", ")", "\n", "parser", ".", "add_argument", "(", "'--seg_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'seg_thresh'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"training dataset\"", ",", "default", "=", "'kaggle'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.apply_mask": [[29, 38], ["range", "numpy.where"], "function", ["None"], ["", "def", "apply_mask", "(", "image", ",", "mask", ",", "color", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Apply the given mask to the image.\n    \"\"\"", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "        ", "image", "[", ":", ",", ":", ",", "c", "]", "=", "np", ".", "where", "(", "mask", "==", "1", ",", "\n", "image", "[", ":", ",", ":", ",", "c", "]", "*", "\n", "(", "1", "-", "alpha", ")", "+", "alpha", "*", "color", "[", "c", "]", "*", "255", ",", "\n", "image", "[", ":", ",", ":", ",", "c", "]", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.test.random_colors": [[39, 50], ["list", "random.shuffle", "map", "range", "colorsys.hsv_to_rgb"], "function", ["None"], ["", "def", "random_colors", "(", "N", ",", "bright", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Generate random colors.\n    To get visually distinct colors, generate them in HSV space then\n    convert to RGB.\n    \"\"\"", "\n", "brightness", "=", "1.0", "if", "bright", "else", "0.7", "\n", "hsv", "=", "[", "(", "i", "/", "N", ",", "1", ",", "brightness", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "colors", "=", "list", "(", "map", "(", "lambda", "c", ":", "colorsys", ".", "hsv_to_rgb", "(", "*", "c", ")", ",", "hsv", ")", ")", "\n", "random", ".", "shuffle", "(", "colors", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_plant.Plant.__init__": [[7, 11], ["dataset_base.BaseDataset.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "phase", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Plant", ",", "self", ")", ".", "__init__", "(", "data_dir", ",", "phase", ",", "transform", ")", "\n", "self", ".", "class_name", "=", "[", "'__background__'", ",", "'plant'", "]", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "class_name", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_plant.Plant.load_image": [[12, 17], ["os.path.join", "cv2.imread"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "imgFile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_id", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "imgFile", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_plant.Plant.load_gt_masks": [[18, 42], ["cv2.imread", "numpy.where", "numpy.unique", "numpy.asarray", "numpy.where", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "masks.append", "numpy.where", "abs", "abs"], "methods", ["None"], ["", "def", "load_gt_masks", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "mask_gt", "=", "cv2", ".", "imread", "(", "annopath", ")", "\n", "h", ",", "w", ",", "_", "=", "mask_gt", ".", "shape", "\n", "cond1", "=", "mask_gt", "[", ":", ",", ":", ",", "0", "]", "!=", "mask_gt", "[", ":", ",", ":", ",", "1", "]", "\n", "cond2", "=", "mask_gt", "[", ":", ",", ":", ",", "1", "]", "!=", "mask_gt", "[", ":", ",", ":", ",", "2", "]", "\n", "cond3", "=", "mask_gt", "[", ":", ",", ":", ",", "2", "]", "!=", "mask_gt", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "cond1", "+", "cond2", "+", "cond3", ")", "\n", "unique_colors", "=", "np", ".", "unique", "(", "mask_gt", "[", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "for", "color", "in", "unique_colors", ":", "\n", "            ", "cond1", "=", "mask_gt", "[", ":", ",", ":", ",", "0", "]", "==", "color", "[", "0", "]", "\n", "cond2", "=", "mask_gt", "[", ":", ",", ":", ",", "1", "]", "==", "color", "[", "1", "]", "\n", "cond3", "=", "mask_gt", "[", ":", ",", ":", ",", "2", "]", "==", "color", "[", "2", "]", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "cond1", "*", "cond2", "*", "cond3", ")", "\n", "y1", "=", "np", ".", "min", "(", "r", ")", "\n", "x1", "=", "np", ".", "min", "(", "c", ")", "\n", "y2", "=", "np", ".", "max", "(", "r", ")", "\n", "x2", "=", "np", ".", "max", "(", "c", ")", "\n", "if", "(", "abs", "(", "y2", "-", "y1", ")", "<=", "1", "or", "abs", "(", "x2", "-", "x1", ")", "<=", "1", ")", ":", "\n", "                ", "continue", "\n", "", "masks", ".", "append", "(", "np", ".", "where", "(", "cond1", "*", "cond2", "*", "cond3", ",", "1.", ",", "0.", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "masks", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_plant.Plant.load_gt_bboxes": [[44, 58], ["dataset_plant.Plant.load_gt_masks", "numpy.asarray", "numpy.where", "len", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "bboxes.append", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks"], ["", "def", "load_gt_bboxes", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "bboxes", "=", "[", "]", "\n", "masks", "=", "self", ".", "load_gt_masks", "(", "annopath", ")", "\n", "for", "mask", "in", "masks", ":", "\n", "            ", "r", ",", "c", "=", "np", ".", "where", "(", "mask", ">", "0", ")", "\n", "if", "len", "(", "r", ")", ":", "\n", "                ", "y1", "=", "np", ".", "min", "(", "r", ")", "\n", "x1", "=", "np", ".", "min", "(", "c", ")", "\n", "y2", "=", "np", ".", "max", "(", "r", ")", "\n", "x2", "=", "np", ".", "max", "(", "c", ")", "\n", "if", "(", "abs", "(", "y2", "-", "y1", ")", "<=", "1", "or", "abs", "(", "x2", "-", "x1", ")", "<=", "1", ")", ":", "\n", "                    ", "continue", "\n", "", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_plant.Plant.load_annoFolder": [[59, 61], ["os.path.join"], "methods", ["None"], ["", "def", "load_annoFolder", "(", "self", ",", "img_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'masks'", ",", "img_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_plant.Plant.load_annotation": [[62, 69], ["dataset_plant.Plant.load_annoFolder", "dataset_plant.Plant.load_gt_masks", "dataset_plant.Plant.load_gt_bboxes"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annoFolder", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_bboxes"], ["", "def", "load_annotation", "(", "self", ",", "index", ",", "type", "=", "'mask'", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "annoFolder", "=", "self", ".", "load_annoFolder", "(", "img_id", ")", "\n", "if", "type", "==", "'mask'", ":", "\n", "            ", "return", "self", ".", "load_gt_masks", "(", "annoFolder", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_gt_bboxes", "(", "annoFolder", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_kaggle.Kaggle.__init__": [[10, 14], ["dataset_base.BaseDataset.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "phase", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Kaggle", ",", "self", ")", ".", "__init__", "(", "data_dir", ",", "phase", ",", "transform", ")", "\n", "self", ".", "class_name", "=", "[", "'__background__'", ",", "'kaggle'", "]", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "class_name", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_kaggle.Kaggle.load_image": [[15, 20], ["os.path.join", "cv2.imread"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "imgFile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_id", ",", "\"images\"", ",", "img_id", "+", "'.png'", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "imgFile", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_kaggle.Kaggle.load_gt_masks": [[21, 35], ["sorted", "numpy.asarray", "glob.glob", "cv2.imread", "numpy.where", "len", "os.path.join", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "masks.append", "numpy.where", "abs", "abs"], "methods", ["None"], ["", "def", "load_gt_masks", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "for", "annoImg", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "annopath", ",", "\"*\"", "+", "'.png'", ")", ")", ")", ":", "\n", "            ", "mask", "=", "cv2", ".", "imread", "(", "annoImg", ",", "-", "1", ")", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "mask", ">", "0", ")", "\n", "if", "len", "(", "r", ")", ":", "\n", "                ", "y1", "=", "np", ".", "min", "(", "r", ")", "\n", "x1", "=", "np", ".", "min", "(", "c", ")", "\n", "y2", "=", "np", ".", "max", "(", "r", ")", "\n", "x2", "=", "np", ".", "max", "(", "c", ")", "\n", "if", "(", "abs", "(", "y2", "-", "y1", ")", "<=", "1", "or", "abs", "(", "x2", "-", "x1", ")", "<=", "1", ")", ":", "\n", "                    ", "continue", "\n", "", "masks", ".", "append", "(", "np", ".", "where", "(", "mask", ">", "0", ",", "1.", ",", "0.", ")", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "masks", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_kaggle.Kaggle.load_gt_bboxes": [[37, 51], ["sorted", "numpy.asarray", "glob.glob", "cv2.imread", "numpy.where", "len", "os.path.join", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "bboxes.append", "abs", "abs"], "methods", ["None"], ["", "def", "load_gt_bboxes", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "bboxes", "=", "[", "]", "\n", "for", "annoImg", "in", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "annopath", ",", "\"*\"", "+", "'.png'", ")", ")", ")", ":", "\n", "            ", "mask", "=", "cv2", ".", "imread", "(", "annoImg", ",", "-", "1", ")", "\n", "r", ",", "c", "=", "np", ".", "where", "(", "mask", ">", "0", ")", "\n", "if", "len", "(", "r", ")", ":", "\n", "                ", "y1", "=", "np", ".", "min", "(", "r", ")", "\n", "x1", "=", "np", ".", "min", "(", "c", ")", "\n", "y2", "=", "np", ".", "max", "(", "r", ")", "\n", "x2", "=", "np", ".", "max", "(", "c", ")", "\n", "if", "(", "abs", "(", "y2", "-", "y1", ")", "<=", "1", "or", "abs", "(", "x2", "-", "x1", ")", "<=", "1", ")", ":", "\n", "                    ", "continue", "\n", "", "bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_kaggle.Kaggle.load_annoFolder": [[52, 55], ["os.path.join"], "methods", ["None"], ["", "def", "load_annoFolder", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_id", ",", "\"masks\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_kaggle.Kaggle.load_annotation": [[56, 62], ["dataset_kaggle.Kaggle.load_annoFolder", "dataset_kaggle.Kaggle.load_gt_masks", "dataset_kaggle.Kaggle.load_gt_bboxes"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annoFolder", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_bboxes"], ["", "def", "load_annotation", "(", "self", ",", "index", ",", "type", "=", "'mask'", ")", ":", "\n", "        ", "annoFolder", "=", "self", ".", "load_annoFolder", "(", "index", ")", "\n", "if", "type", "==", "'mask'", ":", "\n", "            ", "return", "self", ".", "load_gt_masks", "(", "annoFolder", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_gt_bboxes", "(", "annoFolder", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.calc.read_files": [[5, 12], ["open", "open.close", "output.append", "float", "line.strip"], "function", ["None"], ["def", "read_files", "(", "folder", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "f", "=", "open", "(", "folder", ",", "\"rb\"", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "output", ".", "append", "(", "float", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.seg_loss.SEG_loss.__init__": [[9, 13], ["torch.nn.modules.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ")", ":", "\n", "        ", "super", "(", "SEG_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.seg_loss.SEG_loss.jaccard_numpy": [[14, 30], ["max", "max", "min", "min", "max", "max", "numpy.divide"], "methods", ["None"], ["", "def", "jaccard_numpy", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "area_a", "=", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", ")", "*", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", ")", "\n", "area_b", "=", "(", "b", "[", "2", "]", "-", "b", "[", "0", "]", ")", "*", "(", "b", "[", "3", "]", "-", "b", "[", "1", "]", ")", "\n", "int_ymin", "=", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "\n", "int_xmin", "=", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "\n", "int_ymax", "=", "min", "(", "a", "[", "2", "]", ",", "b", "[", "2", "]", ")", "\n", "int_xmax", "=", "min", "(", "a", "[", "3", "]", ",", "b", "[", "3", "]", ")", "\n", "int_h", "=", "max", "(", "int_ymax", "-", "int_ymin", ",", "0.", ")", "\n", "int_w", "=", "max", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "area_inter", "=", "int_h", "*", "int_w", "\n", "union", "=", "area_a", "+", "area_b", "-", "area_inter", "\n", "if", "union", "<=", "2", ":", "\n", "            ", "jaccard", "=", "0.", "\n", "", "else", ":", "\n", "            ", "jaccard", "=", "np", ".", "divide", "(", "area_inter", ",", "union", ")", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.seg_loss.SEG_loss.forward": [[31, 98], ["range", "len", "range", "len", "range", "len", "seg_loss.SEG_loss.jaccard_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "cv2.resize", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "obj_gt_mask.to.to.to", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.round", "numpy.round", "numpy.round", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.seg_loss.SEG_loss.jaccard_numpy"], ["", "def", "forward", "(", "self", ",", "predictions", ",", "gt_masks", ",", "gt_boxes", ")", ":", "\n", "# Groundtruth:", "\n", "#            boxes:       [batch][obj_boxes]         device(type='cpu')", "\n", "#            gt_classes:  [batch][obj_gt_classes]    device(type='cpu')", "\n", "#            gt_masks:    [batch][obj_gt_masks]      device(type='cpu')", "\n", "# Predictions:", "\n", "#            mask_patches: [batch list][List...]    device(type='cuda', index=0)", "\n", "#            mask_dets: [batch list][list....]      device(type='cpu')", "\n", "\n", "        ", "mask_patches", ",", "mask_dets", "=", "predictions", "\n", "loss_mask", "=", "0", "\n", "run_label", "=", "False", "\n", "# [~~~~~~~~~~ iterate batch~~~~~~~~~~~~~~~~~~~~~~~]", "\n", "for", "i", "in", "range", "(", "len", "(", "mask_patches", ")", ")", ":", "\n", "            ", "loss_batch", "=", "0", "\n", "num_obj", "=", "0", "\n", "\n", "# [Predict] ~~~~~~~iterate obj~~~~~~~~~~~~~~~~~~~~~", "\n", "for", "j", "in", "range", "(", "len", "(", "mask_patches", "[", "i", "]", ")", ")", ":", "\n", "                ", "obj_pr_mask", "=", "mask_patches", "[", "i", "]", "[", "j", "]", "\n", "obj_p_box", "=", "mask_dets", "[", "i", "]", "[", "j", "]", "[", ":", "4", "]", "\n", "\n", "# [GT] ~~~~~~~~~~~~~~ iterate obj ~~~~~~~~~~~~~~~~~~~", "\n", "for", "i_gt", "in", "range", "(", "gt_boxes", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "jaccard", "=", "self", ".", "jaccard_numpy", "(", "obj_p_box", ",", "torch", ".", "Tensor", "(", "gt_boxes", "[", "i", "]", "[", "i_gt", "]", ")", ")", "\n", "if", "jaccard", ">=", "0.5", ":", "\n", "                        ", "y1", ",", "x1", ",", "y2", ",", "x2", "=", "obj_p_box", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "y1", ")", ")", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "x1", ")", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "y2", ")", ")", ",", "self", ".", "height", "-", "1", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "x2", ")", ")", ",", "self", ".", "width", "-", "1", ")", "\n", "## Crop the obj_gt_mask from gt_mask", "\n", "obj_gt_mask", "=", "gt_masks", "[", "i", "]", "[", "i_gt", "]", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "\n", "# import cv2", "\n", "#", "\n", "# cv2.imshow('gt', np.uint8(obj_gt_mask * 100))", "\n", "# cv2.imshow('pr', np.uint8(obj_pr_mask.data.cpu().numpy() * 100))", "\n", "# k = cv2.waitKey(0)", "\n", "# if k & 0xFF == ord('q'):", "\n", "#     cv2.destroyAllWindows()", "\n", "#     exit()", "\n", "\n", "# h0,w0 = obj_gt_mask.shape", "\n", "h1", ",", "w1", "=", "obj_pr_mask", ".", "shape", "\n", "\n", "obj_gt_mask", "=", "cv2", ".", "resize", "(", "obj_gt_mask", ",", "(", "w1", ",", "h1", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "obj_gt_mask", "=", "torch", ".", "Tensor", "(", "obj_gt_mask", ")", "\n", "obj_gt_mask", "=", "obj_gt_mask", ".", "to", "(", "obj_pr_mask", ".", "device", ")", "\n", "\n", "\n", "h2", ",", "w2", "=", "obj_gt_mask", ".", "shape", "\n", "assert", "(", "h1", "==", "h2", ")", "and", "(", "w1", "==", "w2", ")", ",", "\"[loss.py] mask size does not match!\"", "\n", "\n", "loss_obj", "=", "F", ".", "binary_cross_entropy", "(", "obj_pr_mask", ",", "obj_gt_mask", ",", "size_average", "=", "True", ")", "\n", "loss_batch", "+=", "loss_obj", "\n", "num_obj", "+=", "1", "\n", "run_label", "=", "True", "\n", "", "", "", "if", "num_obj", ":", "\n", "                ", "loss_mask", "+=", "loss_batch", "/", "num_obj", "\n", "\n", "", "", "if", "run_label", ":", "\n", "            ", "loss_mask", "=", "loss_mask", "/", "len", "(", "mask_patches", ")", "\n", "", "else", ":", "\n", "            ", "loss_mask", "=", "None", "\n", "", "return", "loss_mask", "", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "KGnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "KGnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv3x3", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.BasicBlock.forward": [[45, 62], ["KGnet.BasicBlock.conv1", "KGnet.BasicBlock.bn1", "KGnet.BasicBlock.relu", "KGnet.BasicBlock.conv2", "KGnet.BasicBlock.bn2", "KGnet.BasicBlock.relu", "KGnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.Bottleneck.__init__": [[67, 78], ["torch.Module.__init__", "KGnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "KGnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "KGnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv1x1", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv3x3", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.Bottleneck.forward": [[79, 100], ["KGnet.Bottleneck.conv1", "KGnet.Bottleneck.bn1", "KGnet.Bottleneck.relu", "KGnet.Bottleneck.conv2", "KGnet.Bottleneck.bn2", "KGnet.Bottleneck.relu", "KGnet.Bottleneck.conv3", "KGnet.Bottleneck.bn3", "KGnet.Bottleneck.relu", "KGnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.CombinationModule.__init__": [[102, 108], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "cat_size", ")", ":", "\n", "        ", "super", "(", "CombinationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "cat_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "cat_size", ",", "out_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.CombinationModule.forward": [[109, 112], ["KGnet.CombinationModule.up", "KGnet.CombinationModule.cat_conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "outputs2", "=", "self", ".", "up", "(", "F", ".", "interpolate", "(", "inputs2", ",", "inputs1", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "return", "self", ".", "cat_conv", "(", "torch", ".", "cat", "(", "(", "inputs1", ",", "outputs2", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.__init__": [[125, 228], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "KGnet.ResNet._make_layer", "KGnet.ResNet._make_layer", "KGnet.ResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "KGnet.ResNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "KGnet.make_skip_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "KGnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.make_skip_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_kps", "=", "5", "\n", "num_edges", "=", "10", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "c0_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "# segmentation modules============================================", "\n", "self", ".", "skip_combine", "=", "nn", ".", "ModuleList", "(", "make_skip_layers", "(", ")", ")", "\n", "self", ".", "seg_head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "# ================================================================", "\n", "# keypoint modules", "\n", "self", ".", "c4_up_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "c3_up_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "c2_up_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "c1_up_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "c3_cat_refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "c2_cat_refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "c1_cat_refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "c0_cat_refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "\n", "self", ".", "kp_head_c3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "short_offset_head_c3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "2", "*", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "mid_offset_head_c3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "4", "*", "num_edges", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "\n", "self", ".", "kp_head_c2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "short_offset_head_c2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "2", "*", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "mid_offset_head_c2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "4", "*", "num_edges", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "kp_head_c1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "short_offset_head_c1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "2", "*", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "mid_offset_head_c1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "4", "*", "num_edges", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "\n", "self", ".", "kp_head_c0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "short_offset_head_c0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "2", "*", "num_kps", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "self", ".", "mid_offset_head_c0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "4", "*", "num_edges", ",", "7", ",", "1", ",", "3", ")", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet._make_layer": [[229, 244], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "KGnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.get_patches": [[246, 257], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "feat[].unsqueeze", "numpy.round", "numpy.round", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "get_patches", "(", "self", ",", "box", ",", "feat", ")", ":", "\n", "        ", "y1", ",", "x1", ",", "y2", ",", "x2", "=", "box", "\n", "_", ",", "h", ",", "w", "=", "feat", ".", "shape", "\n", "y1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "y1", "*", "h", ")", ")", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "int32", "(", "np", ".", "round", "(", "x1", "*", "w", ")", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "y2", "*", "h", ")", ")", ",", "h", "-", "1", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "np", ".", "int32", "(", "np", ".", "round", "(", "x2", "*", "w", ")", ")", ",", "w", "-", "1", ")", "\n", "if", "y2", "<", "y1", "or", "x2", "<", "x1", "or", "y2", "-", "y1", "<", "2", "or", "x2", "-", "x1", "<", "2", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "(", "feat", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.mask_forward": [[258, 268], ["range", "len"], "methods", ["None"], ["", "", "def", "mask_forward", "(", "self", ",", "i_x", ")", ":", "\n", "        ", "pre", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "i_x", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "pre", "is", "None", ":", "\n", "                ", "pre", "=", "i_x", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "pre", "=", "self", ".", "skip_combine", "[", "i", "]", "(", "i_x", "[", "i", "]", ",", "pre", ")", "\n", "# if pre.shape[1] == 512:", "\n", "#     pre = self.crm(pre)", "\n", "", "", "return", "pre", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward": [[269, 273], ["KGnet.ResNet.forward_dec", "KGnet.ResNet.forward_seg"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_dec", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_seg"], ["", "def", "forward", "(", "self", ",", "x", ",", "bboxes", ")", ":", "\n", "        ", "dec0", ",", "dec1", ",", "dec2", ",", "dec3", ",", "feat_seg", "=", "self", ".", "forward_dec", "(", "x", ")", "\n", "seg", "=", "self", ".", "forward_seg", "(", "feat_seg", ",", "bboxes", ")", "\n", "return", "dec0", ",", "dec1", ",", "dec2", ",", "dec3", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_dec": [[275, 319], ["KGnet.ResNet.c0_conv", "KGnet.ResNet.conv1", "KGnet.ResNet.bn1", "KGnet.ResNet.relu", "KGnet.ResNet.maxpool", "KGnet.ResNet.layer1", "KGnet.ResNet.layer2", "KGnet.ResNet.layer3", "KGnet.ResNet.c4_up_conv", "KGnet.ResNet.c3_cat_refine", "KGnet.ResNet.c3_up_conv", "KGnet.ResNet.c2_cat_refine", "KGnet.ResNet.c2_up_conv", "KGnet.ResNet.c1_cat_refine", "KGnet.ResNet.c1_up_conv", "KGnet.ResNet.c0_cat_refine", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "KGnet.ResNet.short_offset_head_c0", "KGnet.ResNet.mid_offset_head_c0", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "KGnet.ResNet.short_offset_head_c1", "KGnet.ResNet.mid_offset_head_c1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "KGnet.ResNet.short_offset_head_c2", "KGnet.ResNet.mid_offset_head_c2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "KGnet.ResNet.short_offset_head_c3", "KGnet.ResNet.mid_offset_head_c3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "KGnet.ResNet.kp_head_c0", "KGnet.ResNet.kp_head_c1", "KGnet.ResNet.kp_head_c2", "KGnet.ResNet.kp_head_c3", "KGnet.ResNet.size", "KGnet.ResNet.size", "KGnet.ResNet.size", "KGnet.ResNet.size"], "methods", ["None"], ["", "def", "forward_dec", "(", "self", ",", "x", ")", ":", "\n", "        ", "c0", "=", "self", ".", "c0_conv", "(", "x", ")", "# c0: [2, 64, 512, 640]  [0, 257]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "c1", "=", "self", ".", "relu", "(", "x", ")", "# c1: [2, 64, 256, 320]  [0, 9.6]", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "c1", ")", "\n", "\n", "c2", "=", "self", ".", "layer1", "(", "x", ")", "# c2: [2, 256, 128, 160]   [0, 6]", "\n", "c3", "=", "self", ".", "layer2", "(", "c2", ")", "# c3: [2, 512, 64, 80]     [0, 8]", "\n", "c4", "=", "self", ".", "layer3", "(", "c3", ")", "# c4: [2, 1024, 32, 40]    [0, 3.4]", "\n", "\n", "c4_upsample", "=", "self", ".", "c4_up_conv", "(", "F", ".", "interpolate", "(", "c4", ",", "c3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "# c4_upsample: [2, 512, 64, 80]  [0, 1,8]", "\n", "c3_cat", "=", "self", ".", "c3_cat_refine", "(", "torch", ".", "cat", "(", "(", "c4_upsample", ",", "c3", ")", ",", "1", ")", ")", "\n", "\n", "c3_upsample", "=", "self", ".", "c3_up_conv", "(", "F", ".", "interpolate", "(", "c3_cat", ",", "c2", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "# c3_upsample: [2, 256, 128, 160]  [0, 4.92]", "\n", "c2_cat", "=", "self", ".", "c2_cat_refine", "(", "torch", ".", "cat", "(", "(", "c3_upsample", ",", "c2", ")", ",", "1", ")", ")", "\n", "\n", "c2_upsample", "=", "self", ".", "c2_up_conv", "(", "F", ".", "interpolate", "(", "c2_cat", ",", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "# c2_upsample: [2, 64, 256, 320] [0, 13.4]", "\n", "c1_cat", "=", "self", ".", "c1_cat_refine", "(", "torch", ".", "cat", "(", "(", "c2_upsample", ",", "c1", ")", ",", "1", ")", ")", "\n", "\n", "c1_upsample", "=", "self", ".", "c1_up_conv", "(", "F", ".", "interpolate", "(", "c1_cat", ",", "c0", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "# c1_upsample: [2, 64, 512, 640] [0, 13,3]", "\n", "c0_cat", "=", "self", ".", "c0_cat_refine", "(", "torch", ".", "cat", "(", "(", "c1_upsample", ",", "c0", ")", ",", "1", ")", ")", "\n", "\n", "kp0", "=", "torch", ".", "sigmoid", "(", "self", ".", "kp_head_c0", "(", "c0_cat", ")", ")", "# kp1: [2, 5, 512, 640]", "\n", "short0", "=", "self", ".", "short_offset_head_c0", "(", "c0_cat", ")", "# short1: [2, 10, 512, 640])", "\n", "mid0", "=", "self", ".", "mid_offset_head_c0", "(", "c0_cat", ")", "# mid1: [2, 40, 512, 640]", "\n", "\n", "\n", "kp1", "=", "torch", ".", "sigmoid", "(", "self", ".", "kp_head_c1", "(", "c1_cat", ")", ")", "# kp1: [2, 5, 256, 320]", "\n", "short1", "=", "self", ".", "short_offset_head_c1", "(", "c1_cat", ")", "# short1: [2, 10, 256, 320])", "\n", "mid1", "=", "self", ".", "mid_offset_head_c1", "(", "c1_cat", ")", "# mid1: [2, 40, 256, 320]", "\n", "\n", "kp2", "=", "torch", ".", "sigmoid", "(", "self", ".", "kp_head_c2", "(", "c2_cat", ")", ")", "# kp2: [2, 5, 128, 160]", "\n", "short2", "=", "self", ".", "short_offset_head_c2", "(", "c2_cat", ")", "\n", "mid2", "=", "self", ".", "mid_offset_head_c2", "(", "c2_cat", ")", "\n", "\n", "\n", "kp3", "=", "torch", ".", "sigmoid", "(", "self", ".", "kp_head_c3", "(", "c3_cat", ")", ")", "# kp3: [2, 5, 64, 80]", "\n", "short3", "=", "self", ".", "short_offset_head_c3", "(", "c3_cat", ")", "\n", "mid3", "=", "self", ".", "mid_offset_head_c3", "(", "c3_cat", ")", "\n", "\n", "return", "[", "kp0", ",", "short0", ",", "mid0", "]", ",", "[", "kp1", ",", "short1", ",", "mid1", "]", ",", "[", "kp2", ",", "short2", ",", "mid2", "]", ",", "[", "kp3", ",", "short3", ",", "mid3", "]", ",", "[", "c0", ",", "c1", ",", "c2", ",", "c3", ",", "c4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.forward_seg": [[321, 351], ["range", "len", "zip", "range", "range", "len", "numpy.asarray", "KGnet.ResNet.mask_forward", "KGnet.ResNet.seg_head", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "mask_patches[].append", "mask_dets[].append", "len", "len", "KGnet.ResNet.get_patches", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "i_x.append", "numpy.append", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.mask_forward", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.ResNet.get_patches"], ["", "def", "forward_seg", "(", "self", ",", "feat_seg", ",", "bboxes", ")", ":", "\n", "        ", "mask_patches", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "mask_dets", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", "]", "\n", "\n", "# iterate batch", "\n", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "if", "len", "(", "bboxes", "[", "i", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "box", ",", "score", "in", "zip", "(", "bboxes", "[", "i", "]", "[", ":", ",", ":", "4", "]", ",", "bboxes", "[", "i", "]", "[", ":", ",", "4", "]", ")", ":", "\n", "                ", "i_x", "=", "[", "]", "\n", "y1", ",", "x1", ",", "y2", ",", "x2", "=", "np", ".", "asarray", "(", "box", ",", "np", ".", "float32", ")", "\n", "h", ",", "w", "=", "feat_seg", "[", "0", "]", ".", "shape", "[", "2", ":", "]", "\n", "for", "i_feat", "in", "feat_seg", ":", "\n", "                    ", "x", "=", "self", ".", "get_patches", "(", "box", "=", "[", "y1", "/", "float", "(", "h", ")", ",", "x1", "/", "float", "(", "w", ")", ",", "\n", "y2", "/", "float", "(", "h", ")", ",", "x2", "/", "float", "(", "w", ")", "]", ",", "\n", "feat", "=", "i_feat", "[", "i", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "if", "x", "is", "not", "None", ":", "\n", "                        ", "i_x", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "if", "len", "(", "i_x", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "x", "=", "self", ".", "mask_forward", "(", "i_x", ")", "\n", "x", "=", "self", ".", "seg_head", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "# ranges from 0.5-1", "\n", "x", "=", "torch", ".", "squeeze", "(", "x", ",", "dim", "=", "0", ")", "\n", "x", "=", "torch", ".", "squeeze", "(", "x", ",", "dim", "=", "0", ")", "\n", "mask_patches", "[", "i", "]", ".", "append", "(", "x", ")", "\n", "mask_dets", "[", "i", "]", ".", "append", "(", "torch", ".", "Tensor", "(", "np", ".", "append", "(", "box", ",", "score", ")", ")", ")", "\n", "", "", "return", "[", "mask_patches", ",", "mask_dets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.conv1x1": [[27, 30], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.make_skip_layers": [[114, 121], ["KGnet.CombinationModule", "KGnet.CombinationModule", "KGnet.CombinationModule", "KGnet.CombinationModule"], "function", ["None"], ["", "", "def", "make_skip_layers", "(", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "CombinationModule", "(", "64", ",", "64", ",", "128", ")", "]", "\n", "layers", "+=", "[", "CombinationModule", "(", "256", ",", "64", ",", "128", ")", "]", "\n", "layers", "+=", "[", "CombinationModule", "(", "512", ",", "256", ",", "512", ")", "]", "\n", "layers", "+=", "[", "CombinationModule", "(", "1024", ",", "512", ",", "1024", ")", "]", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet18": [[353, 363], ["KGnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet34": [[365, 375], ["KGnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet50": [[377, 387], ["KGnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet101": [[389, 399], ["KGnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.KGnet.resnet152": [[401, 411], ["KGnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__": [[10, 16], ["torch.utils.data.dataset.Dataset.__init__", "os.path.join", "sorted", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "phase", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "phase", ")", "\n", "self", ".", "img_ids", "=", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "img_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_image": [[17, 19], ["None"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks": [[20, 22], ["None"], "methods", ["None"], ["", "def", "load_gt_masks", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_bboxes": [[23, 25], ["None"], "methods", ["None"], ["", "def", "load_gt_bboxes", "(", "self", ",", "annopath", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annoFolder": [[26, 28], ["None"], "methods", ["None"], ["", "def", "load_annoFolder", "(", "self", ",", "img_id", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation": [[29, 31], ["None"], "methods", ["None"], ["", "def", "load_annotation", "(", "self", ",", "index", ",", "type", "=", "'mask'", ")", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.transfer_bboxes": [[32, 42], ["range", "numpy.asarray", "out_box.append"], "methods", ["None"], ["", "def", "transfer_bboxes", "(", "self", ",", "bboxes_c0", ")", ":", "\n", "        ", "out_box", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bboxes_c0", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tl", ",", "tr", ",", "bl", ",", "br", ",", "cc", "=", "bboxes_c0", "[", "i", ",", ":", ",", ":", "]", "\n", "y1", "=", "tl", "[", "1", "]", "\n", "x1", "=", "tl", "[", "0", "]", "\n", "y2", "=", "br", "[", "1", "]", "\n", "x2", "=", "br", "[", "0", "]", "\n", "out_box", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "1", "]", ")", "\n", "", "return", "np", ".", "asarray", "(", "out_box", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks_bboxes": [[43, 57], ["numpy.where", "len", "numpy.asarray", "numpy.asarray", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "gt_masks.append", "gt_bboxes.append", "abs", "abs"], "methods", ["None"], ["", "def", "load_gt_masks_bboxes", "(", "self", ",", "instance_masks", ")", ":", "\n", "        ", "gt_masks", "=", "[", "]", "\n", "gt_bboxes", "=", "[", "]", "\n", "for", "mask", "in", "instance_masks", ":", "\n", "            ", "rr", ",", "cc", "=", "np", ".", "where", "(", "mask", "==", "1.", ")", "\n", "if", "len", "(", "rr", ">", "1", ")", ":", "\n", "                ", "y1", "=", "np", ".", "min", "(", "rr", ")", "\n", "x1", "=", "np", ".", "min", "(", "cc", ")", "\n", "y2", "=", "np", ".", "max", "(", "rr", ")", "\n", "x2", "=", "np", ".", "max", "(", "cc", ")", "\n", "if", "abs", "(", "y2", "-", "y1", ")", ">", "2", "and", "abs", "(", "x2", "-", "x1", ")", ">", "2", ":", "\n", "                    ", "gt_masks", ".", "append", "(", "mask", ")", "\n", "gt_bboxes", ".", "append", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "1", "]", ")", "\n", "", "", "", "return", "np", ".", "asarray", "(", "gt_masks", ",", "np", ".", "float32", ")", ",", "np", ".", "asarray", "(", "gt_bboxes", ",", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.masks_to_bboxes": [[58, 80], ["int", "int", "cv2.resize", "numpy.where", "len", "numpy.asarray", "float", "float", "float", "float", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "bboxes.append", "float", "float"], "methods", ["None"], ["", "def", "masks_to_bboxes", "(", "self", ",", "masks", ",", "divide_scale", "=", "1.", ")", ":", "\n", "        ", "bboxes", "=", "[", "]", "\n", "height", ",", "width", "=", "masks", "[", "0", "]", ".", "shape", "\n", "height_scale", "=", "int", "(", "float", "(", "height", ")", "/", "float", "(", "divide_scale", ")", ")", "\n", "width_scale", "=", "int", "(", "float", "(", "width", ")", "/", "float", "(", "divide_scale", ")", ")", "\n", "\n", "for", "mask", "in", "masks", ":", "\n", "            ", "mask_scale", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "width_scale", ",", "height_scale", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "rr", ",", "cc", "=", "np", ".", "where", "(", "mask_scale", "==", "1.", ")", "\n", "if", "len", "(", "rr", ">", "1", ")", ":", "\n", "                ", "y1", "=", "np", ".", "min", "(", "rr", ")", "\n", "x1", "=", "np", ".", "min", "(", "cc", ")", "\n", "y2", "=", "np", ".", "max", "(", "rr", ")", "\n", "x2", "=", "np", ".", "max", "(", "cc", ")", "\n", "if", "(", "(", "y2", "-", "y1", ")", ">", "cfg", ".", "KP_RADIUS", "*", "2", "+", "1", "and", "(", "x2", "-", "x1", ")", ">", "cfg", ".", "KP_RADIUS", "*", "2", "+", "1", ")", ":", "\n", "                    ", "tl", "=", "(", "x1", ",", "y1", ")", "\n", "tr", "=", "(", "x2", ",", "y1", ")", "\n", "bl", "=", "(", "x1", ",", "y2", ")", "\n", "br", "=", "(", "x2", ",", "y2", ")", "\n", "cc", "=", "(", "float", "(", "x1", "+", "x2", ")", "/", "2", ",", "float", "(", "y1", "+", "y2", ")", "/", "2", ")", "\n", "bboxes", ".", "append", "(", "[", "tl", ",", "tr", ",", "bl", ",", "br", ",", "cc", "]", ")", "\n", "", "", "", "return", "np", ".", "asarray", "(", "bboxes", ",", "np", ".", "float32", ")", ",", "height_scale", ",", "width_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__getitem__": [[81, 117], ["dataset_base.BaseDataset.load_image", "dataset_base.BaseDataset.load_annotation", "dataset_base.BaseDataset.masks_to_bboxes", "dataset_base.BaseDataset.masks_to_bboxes", "dataset_base.BaseDataset.masks_to_bboxes", "dataset_base.BaseDataset.masks_to_bboxes", "preprocessing.get_ground_truth", "preprocessing.get_ground_truth", "preprocessing.get_ground_truth", "preprocessing.get_ground_truth", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.clip", "numpy.transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "dataset_base.BaseDataset.load_gt_masks_bboxes", "dataset_base.BaseDataset.transform", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_image", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.masks_to_bboxes", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.masks_to_bboxes", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.masks_to_bboxes", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.masks_to_bboxes", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.get_ground_truth", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.get_ground_truth", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.get_ground_truth", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.preprocessing.get_ground_truth", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_gt_masks_bboxes"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "self", ".", "load_image", "(", "item", ")", "\n", "height", ",", "width", ",", "_", "=", "img", ".", "shape", "\n", "instance_masks", "=", "self", ".", "load_annotation", "(", "item", ",", "type", "=", "'mask'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "instance_masks", "=", "self", ".", "transform", "(", "img", ",", "instance_masks", ")", "\n", "\n", "", "bboxes_c0", ",", "h_c0", ",", "w_c0", "=", "self", ".", "masks_to_bboxes", "(", "instance_masks", ",", "divide_scale", "=", "1.", ")", "\n", "bboxes_c1", ",", "h_c1", ",", "w_c1", "=", "self", ".", "masks_to_bboxes", "(", "instance_masks", ",", "divide_scale", "=", "2.", ")", "\n", "bboxes_c2", ",", "h_c2", ",", "w_c2", "=", "self", ".", "masks_to_bboxes", "(", "instance_masks", ",", "divide_scale", "=", "4.", ")", "\n", "bboxes_c3", ",", "h_c3", ",", "w_c3", "=", "self", ".", "masks_to_bboxes", "(", "instance_masks", ",", "divide_scale", "=", "8.", ")", "\n", "\n", "kp0", ",", "short0", ",", "mid0", "=", "preprocessing", ".", "get_ground_truth", "(", "bboxes_c0", ",", "h_c0", ",", "w_c0", ",", "num_kps", "=", "cfg", ".", "NUM_KPS", ")", "\n", "kp1", ",", "short1", ",", "mid1", "=", "preprocessing", ".", "get_ground_truth", "(", "bboxes_c1", ",", "h_c1", ",", "w_c1", ",", "num_kps", "=", "cfg", ".", "NUM_KPS", ")", "\n", "kp2", ",", "short2", ",", "mid2", "=", "preprocessing", ".", "get_ground_truth", "(", "bboxes_c2", ",", "h_c2", ",", "w_c2", ",", "num_kps", "=", "cfg", ".", "NUM_KPS", ")", "\n", "kp3", ",", "short3", ",", "mid3", "=", "preprocessing", ".", "get_ground_truth", "(", "bboxes_c3", ",", "h_c3", ",", "w_c3", ",", "num_kps", "=", "cfg", ".", "NUM_KPS", ")", "\n", "\n", "gt_c0", "=", "np", ".", "concatenate", "(", "(", "kp0", ",", "np", ".", "transpose", "(", "short0", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "np", ".", "transpose", "(", "mid0", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ",", "0", ")", "\n", "gt_c1", "=", "np", ".", "concatenate", "(", "(", "kp1", ",", "np", ".", "transpose", "(", "short1", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "np", ".", "transpose", "(", "mid1", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ",", "0", ")", "\n", "gt_c2", "=", "np", ".", "concatenate", "(", "(", "kp2", ",", "np", ".", "transpose", "(", "short2", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "np", ".", "transpose", "(", "mid2", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ",", "0", ")", "\n", "gt_c3", "=", "np", ".", "concatenate", "(", "(", "kp3", ",", "np", ".", "transpose", "(", "short3", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "np", ".", "transpose", "(", "mid3", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ",", "0", ")", "\n", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "a_min", "=", "0.", ",", "a_max", "=", "255.", ")", "\n", "img", "=", "np", ".", "float32", "(", "img", ")", "/", "255", "-", "0.5", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "img", "=", "torch", ".", "FloatTensor", "(", "img", ")", "\n", "gt_c0", "=", "torch", ".", "FloatTensor", "(", "gt_c0", ")", "\n", "gt_c1", "=", "torch", ".", "FloatTensor", "(", "gt_c1", ")", "\n", "gt_c2", "=", "torch", ".", "FloatTensor", "(", "gt_c2", ")", "\n", "gt_c3", "=", "torch", ".", "FloatTensor", "(", "gt_c3", ")", "\n", "\n", "gt_masks", ",", "gt_bboxes", "=", "self", ".", "load_gt_masks_bboxes", "(", "instance_masks", ")", "\n", "\n", "return", "img", ",", "gt_c0", ",", "gt_c1", ",", "gt_c2", ",", "gt_c3", ",", "gt_masks", ",", "gt_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.__len__": [[118, 120], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.mask_iou": [[4, 10], ["numpy.logical_and().sum", "float", "float", "numpy.logical_and", "mask1.sum", "mask2.sum"], "function", ["None"], ["def", "mask_iou", "(", "mask1", ",", "mask2", ")", ":", "\n", "    ", "inter", "=", "np", ".", "logical_and", "(", "mask1", ",", "mask2", ")", ".", "sum", "(", ")", "\n", "union", "=", "mask1", ".", "sum", "(", ")", "+", "mask2", ".", "sum", "(", ")", "-", "inter", "\n", "if", "union", "<", "1.0", ":", "\n", "        ", "return", "0", "\n", "", "return", "float", "(", "inter", ")", "/", "float", "(", "union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.voc_ap": [[12, 44], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "True", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.bbox_evaluation": [[45, 92], ["numpy.argsort", "all_scores.extend", "numpy.zeros", "numpy.zeros", "dsets.load_annotation", "range", "pr_bboxes[].astype", "dsets.load_annotation.astype", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation"], ["", "def", "bbox_evaluation", "(", "index", ",", "dsets", ",", "BB_bboxes", ",", "all_scores", ",", "npos", ",", "ov_thresh", ")", ":", "\n", "    ", "pr_conf", "=", "BB_bboxes", "[", ":", ",", "4", "]", "\n", "pr_bboxes", "=", "BB_bboxes", "[", ":", ",", ":", "4", "]", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "pr_conf", ")", "\n", "pr_bboxes", "=", "pr_bboxes", "[", "sorted_ind", ",", ":", "]", "\n", "pr_conf", "=", "pr_conf", "[", "sorted_ind", "]", "\n", "all_scores", ".", "extend", "(", "pr_conf", ")", "\n", "\n", "# Step2: initialization of evaluations", "\n", "nd", "=", "pr_bboxes", ".", "shape", "[", "0", "]", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "BBGT_box", "=", "dsets", ".", "load_annotation", "(", "index", "=", "index", ",", "type", "=", "'bbox'", ")", "\n", "nd_gt", "=", "BBGT_box", ".", "shape", "[", "0", "]", "\n", "det_flag", "=", "[", "False", "]", "*", "nd_gt", "\n", "npos", "=", "npos", "+", "nd_gt", "\n", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "bb", "=", "pr_bboxes", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "BBGT_box", ".", "astype", "(", "float", ")", "\n", "jmax", "=", "-", "1", "\n", "if", "BBGT", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "union", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", ")", "+", "\n", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", ")", "*", "\n", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", ")", "-", "inters", ")", "\n", "overlaps", "=", "inters", "/", "union", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">=", "ov_thresh", ":", "\n", "            ", "if", "not", "det_flag", "[", "jmax", "]", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.", "\n", "det_flag", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "return", "fp", ",", "tp", ",", "all_scores", ",", "npos", "\n", "\n"]], "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.seg_evaluation": [[96, 151], ["numpy.argsort", "all_scores.extend", "numpy.zeros", "numpy.zeros", "dsets.load_annotation", "dsets.load_annotation", "range", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "range", "len", "eval_parts.mask_iou", "temp_overlaps.append"], "function", ["home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.dataset_base.BaseDataset.load_annotation", "home.repos.pwc.inspect_result.yijingru_KG_Instance_Segmentation.None.eval_parts.mask_iou"], ["", "def", "seg_evaluation", "(", "index", ",", "dsets", ",", "BB_masks", ",", "BB_dets", ",", "all_scores", ",", "npos", ",", "temp_overlaps", ",", "ov_thresh", ")", ":", "\n", "    ", "BB_bboxes", "=", "BB_dets", "[", ":", ",", ":", "4", "]", "\n", "BB_conf", "=", "BB_dets", "[", ":", ",", "4", "]", "\n", "BB_mask", "=", "BB_masks", "\n", "# Step2: sort detections according to the confidences", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "BB_conf", ")", "\n", "BB_mask", "=", "BB_mask", "[", "sorted_ind", ",", ":", ",", ":", "]", "\n", "BB_bboxes", "=", "BB_bboxes", "[", "sorted_ind", ",", ":", "]", "\n", "BB_conf", "=", "BB_conf", "[", "sorted_ind", "]", "\n", "all_scores", ".", "extend", "(", "BB_conf", ")", "\n", "\n", "# Step2: intialzation of evaluations", "\n", "nd", "=", "BB_mask", ".", "shape", "[", "0", "]", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "BBGT_masks", "=", "dsets", ".", "load_annotation", "(", "index", ",", "type", "=", "'mask'", ")", "\n", "BBGT_bboxes", "=", "dsets", ".", "load_annotation", "(", "index", ",", "type", "=", "'bbox'", ")", "\n", "nd_gt", "=", "BBGT_masks", ".", "shape", "[", "0", "]", "\n", "det_flag", "=", "[", "False", "]", "*", "nd_gt", "\n", "npos", "=", "npos", "+", "nd_gt", "\n", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "d_BB_mask", "=", "BB_mask", "[", "d", ",", ":", ",", ":", "]", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "jmax", "=", "-", "1", "\n", "y1", ",", "x1", ",", "y2", ",", "x2", "=", "BB_bboxes", "[", "d", ",", ":", "]", "\n", "# keep index: filter out non-overlap instances", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT_bboxes", "[", ":", ",", "0", "]", ",", "y1", ")", "\n", "ixmin", "=", "np", ".", "maximum", "(", "BBGT_bboxes", "[", ":", ",", "1", "]", ",", "x1", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT_bboxes", "[", ":", ",", "2", "]", ",", "y2", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT_bboxes", "[", ":", ",", "3", "]", ",", "x2", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "keep_index", "=", "inters", ">", "0.", "\n", "# --- ---", "\n", "for", "ind2", "in", "range", "(", "len", "(", "BBGT_masks", ")", ")", ":", "\n", "            ", "if", "keep_index", "[", "ind2", "]", ":", "\n", "                ", "gt_mask", "=", "BBGT_masks", "[", "ind2", "]", "\n", "overlaps", "=", "mask_iou", "(", "d_BB_mask", ",", "gt_mask", ")", "\n", "if", "overlaps", ">", "ovmax", ":", "\n", "                    ", "ovmax", "=", "overlaps", "\n", "jmax", "=", "ind2", "\n", "\n", "", "", "", "if", "ovmax", ">=", "ov_thresh", ":", "\n", "            ", "if", "not", "det_flag", "[", "jmax", "]", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.", "\n", "det_flag", "[", "jmax", "]", "=", "1", "\n", "temp_overlaps", ".", "append", "(", "ovmax", ")", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "return", "fp", ",", "tp", ",", "all_scores", ",", "npos", ",", "temp_overlaps", "", "", ""]]}