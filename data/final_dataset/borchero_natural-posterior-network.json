{"home.repos.pwc.inspect_result.borchero_natural-posterior-network.natpn.sweep.schedule_slurm": [[10, 52], ["itertools.product", "uuid.uuid4", "path.parent.mkdir", "print", "os.system", "print", "configs.append", "pathlib.Path.home", "path.open", "f.write", "str", "len", "path.absolute", "len", "isinstance", "choices.items", "config.items", "pathlib.Path"], "function", ["None"], ["def", "schedule_slurm", "(", "\n", "choices", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "use_gpu", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Runs the training script for the provided choices.\n\n    Args:\n        choices: The choices to run the hyperparameter search for.\n        use_gpu: Whether to use a GPU for training.\n    \"\"\"", "\n", "# Get all combinations from the provided choices", "\n", "combinations", "=", "product", "(", "\n", "*", "[", "\n", "[", "(", "key", ",", "o", ")", "for", "o", "in", "options", "]", "if", "isinstance", "(", "options", ",", "list", ")", "else", "[", "(", "key", ",", "options", ")", "]", "\n", "for", "key", ",", "options", "in", "choices", ".", "items", "(", ")", "\n", "]", "\n", ")", "\n", "configs", "=", "[", "]", "\n", "for", "combination", "in", "combinations", ":", "\n", "        ", "config", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "combination", ":", "\n", "            ", "config", "[", "key", "]", "=", "value", "\n", "", "configs", ".", "append", "(", "config", ")", "\n", "\n", "# Generate CLI flags from the combinations", "\n", "", "flags", "=", "[", "\" \"", ".", "join", "(", "[", "f\"--{key} {value}\"", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", "]", ")", "for", "config", "in", "configs", "]", "\n", "\n", "# Store CLI flags in cache file", "\n", "unique_id", "=", "uuid", ".", "uuid4", "(", ")", "\n", "path", "=", "Path", ".", "home", "(", ")", "/", "f\".cache/slurm/{unique_id}.options\"", "\n", "path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "with", "path", ".", "open", "(", "\"w+\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "flags", ")", ")", "\n", "", "print", "(", "f\"Saved options to {str(path)}.\"", ")", "\n", "\n", "# Schedule array job", "\n", "script", "=", "f\"{Path(__file__).parent.parent}/sweeps/slurm/{'gpu' if use_gpu else 'cpu'}.sh\"", "\n", "os", ".", "system", "(", "f\"sbatch --array=1-{len(configs)} {script} {path.absolute()}\"", ")", "\n", "\n", "# Print success", "\n", "print", "(", "f\"Successfully scheduled {len(configs)} jobs.\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.natpn.train.main": [[21, 250], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "logging.getLogger().setLevel", "natpn.suppress_pytorch_lightning_logs", "pytorch_lightning.seed_everything", "logger.info", "natpn.NaturalPosteriorNetwork", "natpn.NaturalPosteriorNetwork.fit", "natpn.NaturalPosteriorNetwork.score", "natpn.NaturalPosteriorNetwork.score_ood_detection", "logger.info", "estimator.score.items", "logger.info", "estimator.score_ood_detection.items", "logger.info", "os.getenv", "pytorch_lightning.loggers.WandbLogger", "typing.cast().config.update", "logger.info", "logger.info", "metrics.items", "natpn.NaturalPosteriorNetwork.save", "click.Choice", "click.Path", "click.Path", "click.Choice", "click.Choice", "logging.getLogger", "int", "dict", "logger.info", "tempfile.TemporaryDirectory", "natpn.NaturalPosteriorNetwork.save", "typing.cast().log_artifact", "list", "os.getenv", "datasets.DATASET_REGISTRY.keys", "typing.cast", "os.getenv", "int", "typing.cast", "pathlib.Path.home", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.natpn.__init__.suppress_pytorch_lightning_logs", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.score", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.score_ood_detection", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update"], ["@", "click", ".", "command", "(", ")", "\n", "# -------------------------------------------------------------------------------------------------", "\n", "# REQUIRED", "\n", "@", "click", ".", "option", "(", "\n", "\"--dataset\"", ",", "\n", "type", "=", "click", ".", "Choice", "(", "list", "(", "DATASET_REGISTRY", ".", "keys", "(", ")", ")", ")", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"The dataset to train and evaluate on.\"", ",", "\n", ")", "\n", "# -------------------------------------------------------------------------------------------------", "\n", "# GLOBAL CONFIGURATION", "\n", "@", "click", ".", "option", "(", "\n", "\"--seed\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"A fixed seed to reproduced experiments.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--data_path\"", ",", "\n", "type", "=", "click", ".", "Path", "(", ")", ",", "\n", "default", "=", "Path", ".", "home", "(", ")", "/", "\"opt\"", "/", "\"data\"", "/", "\"natpn\"", ",", "\n", "help", "=", "\"The directory where input data is stored.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--output_path\"", ",", "\n", "type", "=", "click", ".", "Path", "(", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The local directory where the final model should be stored. Only uploaded \"", "\n", "\"or discarded if not provided.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--experiment\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"If provided, tracks the run using Weights & Biases and uploads the trained model.\"", ",", "\n", ")", "\n", "# -------------------------------------------------------------------------------------------------", "\n", "# MODEL ARCHITECTURE", "\n", "@", "click", ".", "option", "(", "\n", "\"--latent_dim\"", ",", "\n", "default", "=", "16", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The dimension of the model's latent space.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--flow_type\"", ",", "\n", "type", "=", "click", ".", "Choice", "(", "[", "\"radial\"", ",", "\"maf\"", "]", ")", ",", "\n", "default", "=", "\"radial\"", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The type of normalizing flow to use.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--flow_layers\"", ",", "\n", "default", "=", "8", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The number of sequential normalizing flow transforms to use.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--certainty_budget\"", ",", "\n", "type", "=", "click", ".", "Choice", "(", "[", "\"constant\"", ",", "\"exp-half\"", ",", "\"exp\"", ",", "\"normal\"", "]", ")", ",", "\n", "default", "=", "\"normal\"", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The certainty budget to allocate in the latent space.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--ensemble_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The number of NatPN models to ensemble for NatPE. Disabled if set to None (default).\"", ",", "\n", ")", "\n", "# -------------------------------------------------------------------------------------------------", "\n", "# TRAINING", "\n", "@", "click", ".", "option", "(", "\n", "\"--learning_rate\"", ",", "\n", "default", "=", "1e-3", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The learning rate for the Adam optimizer for both training and fine-tuning.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--use_learning_rate_decay\"", ",", "\n", "default", "=", "False", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"Whether to decay the learning rate if the validation loss plateaus for some time.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--max_epochs\"", ",", "\n", "default", "=", "100", ",", "\n", "show_default", "=", "100", ",", "\n", "help", "=", "\"The maximum number of epochs to run both training and fine-tuning for.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--entropy_weight\"", ",", "\n", "default", "=", "1e-5", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The weight for the entropy regularizer.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--warmup_epochs\"", ",", "\n", "default", "=", "3", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"The number of warm-up epochs to run prior to training.\"", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--run_finetuning\"", ",", "\n", "default", "=", "True", ",", "\n", "show_default", "=", "True", ",", "\n", "help", "=", "\"Whether to run fine-tuning after training.\"", ",", "\n", ")", "\n", "def", "main", "(", "\n", "dataset", ":", "str", ",", "\n", "seed", ":", "Optional", "[", "int", "]", ",", "\n", "data_path", ":", "PathType", ",", "\n", "output_path", ":", "Optional", "[", "PathType", "]", ",", "\n", "experiment", ":", "Optional", "[", "str", "]", ",", "\n", "latent_dim", ":", "int", ",", "\n", "flow_type", ":", "FlowType", ",", "\n", "flow_layers", ":", "int", ",", "\n", "certainty_budget", ":", "CertaintyBudget", ",", "\n", "ensemble_size", ":", "Optional", "[", "int", "]", ",", "\n", "learning_rate", ":", "float", ",", "\n", "use_learning_rate_decay", ":", "bool", ",", "\n", "max_epochs", ":", "int", ",", "\n", "entropy_weight", ":", "float", ",", "\n", "warmup_epochs", ":", "int", ",", "\n", "run_finetuning", ":", "bool", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Trains the Natural Posterior Network or an ensemble thereof on a single dataset and evaluates\n    its performance.\n    \"\"\"", "\n", "logging", ".", "getLogger", "(", "\"natpn\"", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "suppress_pytorch_lightning_logs", "(", ")", "\n", "\n", "# Fix randomness", "\n", "pl", ".", "seed_everything", "(", "seed", ")", "\n", "logger", ".", "info", "(", "\"Using seed %s.\"", ",", "os", ".", "getenv", "(", "\"PL_GLOBAL_SEED\"", ")", ")", "\n", "\n", "# Initialize logger if needed", "\n", "if", "experiment", "is", "not", "None", ":", "\n", "        ", "remote_logger", "=", "WandbLogger", "(", ")", "\n", "cast", "(", "Run", ",", "remote_logger", ".", "experiment", ")", ".", "config", ".", "update", "(", "\n", "{", "\n", "\"seed\"", ":", "os", ".", "getenv", "(", "\"PL_GLOBAL_SEED\"", ")", ",", "\n", "\"dataset\"", ":", "dataset", ",", "\n", "\"latent_dim\"", ":", "latent_dim", ",", "\n", "\"flow_type\"", ":", "flow_type", ",", "\n", "\"flow_layers\"", ":", "flow_layers", ",", "\n", "\"certainty_budget\"", ":", "certainty_budget", ",", "\n", "\"ensemble_size\"", ":", "ensemble_size", ",", "\n", "\"learning_rate\"", ":", "learning_rate", ",", "\n", "\"use_learning_rate_decay\"", ":", "use_learning_rate_decay", ",", "\n", "\"max_epochs\"", ":", "max_epochs", ",", "\n", "\"entropy_weight\"", ":", "entropy_weight", ",", "\n", "\"warmup_epochs\"", ":", "warmup_epochs", ",", "\n", "\"run_finetuning\"", ":", "run_finetuning", ",", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "remote_logger", "=", "None", "\n", "\n", "# Initialize data", "\n", "", "dm", "=", "DATASET_REGISTRY", "[", "dataset", "]", "(", "data_path", ",", "seed", "=", "int", "(", "os", ".", "getenv", "(", "\"PL_GLOBAL_SEED\"", ")", "or", "0", ")", ")", "\n", "\n", "# Initialize estimator", "\n", "encoder_map", ":", "Dict", "[", "str", ",", "EncoderType", "]", "=", "{", "\n", "\"concrete\"", ":", "\"tabular\"", ",", "\n", "\"sensorless-drive\"", ":", "\"tabular\"", ",", "\n", "\"bike-sharing-normal\"", ":", "\"tabular\"", ",", "\n", "\"bike-sharing-poisson\"", ":", "\"tabular\"", ",", "\n", "\"mnist\"", ":", "\"image-shallow\"", ",", "\n", "\"fashion-mnist\"", ":", "\"image-shallow\"", ",", "\n", "\"cifar10\"", ":", "\"image-deep\"", ",", "\n", "\"cifar100\"", ":", "\"resnet\"", ",", "\n", "\"nyu-depth-v2\"", ":", "\"dense-depth\"", ",", "\n", "}", "\n", "cpu_datasets", "=", "{", "\n", "\"concrete\"", ",", "\n", "\"sensorless-drive\"", ",", "\n", "\"bike-sharing-normal\"", ",", "\n", "\"bike-sharing-poisson\"", ",", "\n", "}", "\n", "\n", "estimator", "=", "NaturalPosteriorNetwork", "(", "\n", "latent_dim", "=", "latent_dim", ",", "\n", "encoder", "=", "encoder_map", "[", "dataset", "]", ",", "\n", "flow", "=", "flow_type", ",", "\n", "flow_num_layers", "=", "flow_layers", ",", "\n", "certainty_budget", "=", "certainty_budget", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "learning_rate_decay", "=", "use_learning_rate_decay", ",", "\n", "entropy_weight", "=", "entropy_weight", ",", "\n", "warmup_epochs", "=", "warmup_epochs", ",", "\n", "finetune", "=", "run_finetuning", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "trainer_params", "=", "dict", "(", "\n", "max_epochs", "=", "max_epochs", ",", "\n", "logger", "=", "remote_logger", ",", "\n", "gpus", "=", "int", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "dataset", "not", "in", "cpu_datasets", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Run training", "\n", "estimator", ".", "fit", "(", "dm", ")", "\n", "\n", "# Evaluate model", "\n", "scores", "=", "estimator", ".", "score", "(", "dm", ")", "\n", "ood_scores", "=", "estimator", ".", "score_ood_detection", "(", "dm", ")", "\n", "\n", "# Print scores", "\n", "logger", ".", "info", "(", "\"Test scores:\"", ")", "\n", "for", "key", ",", "value", "in", "scores", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"  %s: %.2f\"", ",", "key", ",", "value", "*", "100", "if", "key", "!=", "\"rmse\"", "else", "value", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"OOD detection scores:\"", ")", "\n", "for", "ood_dataset", ",", "metrics", "in", "ood_scores", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"in-distribution vs. '%s'...\"", ",", "ood_dataset", ")", "\n", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"  %s: %.2f\"", ",", "key", ",", "value", "*", "100", ")", "\n", "\n", "# Save model if required", "\n", "", "", "if", "output_path", "is", "not", "None", ":", "\n", "        ", "estimator", ".", "save", "(", "output_path", ")", "\n", "", "if", "remote_logger", "is", "not", "None", ":", "\n", "        ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "            ", "estimator", ".", "save", "(", "tmpdir", ")", "\n", "cast", "(", "Run", ",", "remote_logger", ".", "experiment", ")", ".", "log_artifact", "(", "tmpdir", ",", "name", "=", "dataset", ",", "type", "=", "\"model\"", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Done \ud83c\udf89\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.natpn.__init__.suppress_pytorch_lightning_logs": [[13, 23], ["warnings.filterwarnings", "warnings.filterwarnings", "warnings.filterwarnings", "warnings.filterwarnings", "warnings.filterwarnings", "logging.getLogger().setLevel", "logging.getLogger"], "function", ["None"], ["", "def", "suppress_pytorch_lightning_logs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Suppresses annoying PyTorch Lightning logs.\n    \"\"\"", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "\".*Consider increasing the value of the `num_workers`.*\"", ")", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "\".*this may lead to large memory footprint.*\"", ")", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "\".*DataModule.setup has already been called.*\"", ")", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "\".*DataModule.teardown has already been called.*\"", ")", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "\".*Set the gpus flag in your trainer.*\"", ")", "\n", "logging", ".", "getLogger", "(", "\"pytorch_lightning\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.utils.clamp.clamp_preserve_gradients": [[4, 17], ["x.clamp"], "function", ["None"], ["def", "clamp_preserve_gradients", "(", "x", ":", "torch", ".", "Tensor", ",", "lower", ":", "float", ",", "upper", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Clamps the values of the tensor into ``[lower, upper]`` but keeps the gradients.\n\n    Args:\n        x: The tensor whose values to constrain.\n        lower: The lower limit for the values.\n        upper: The upper limit for the values.\n\n    Returns:\n        The clamped tensor.\n    \"\"\"", "\n", "return", "x", "+", "(", "x", ".", "clamp", "(", "min", "=", "lower", ",", "max", "=", "upper", ")", "-", "x", ")", ".", "detach", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.utils.chunk.chunk_squeeze_last": [[5, 18], ["x.chunk", "x.size", "c.squeeze"], "function", ["None"], ["def", "chunk_squeeze_last", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Splits the provided tensor into individual elements along the last dimension and returns the\n    items with the last dimension squeezed.\n\n    Args:\n        x: The tensor to chunk.\n\n    Returns:\n        The squeezed chunks.\n    \"\"\"", "\n", "chunks", "=", "x", ".", "chunk", "(", "x", ".", "size", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "[", "c", ".", "squeeze", "(", "-", "1", ")", "for", "c", "in", "chunks", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.loss.BayesianLoss.__init__": [[15, 24], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "entropy_weight", ":", "float", "=", "0.0", ",", "reduction", ":", "Reduction", "=", "\"mean\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            entropy_weight: The weight for the entropy regualarizer.\n            reduction: The reduction to apply to the loss. Must be one of \"mean\", \"sum\", \"none\".\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entropy_weight", "=", "entropy_weight", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.loss.BayesianLoss.forward": [[25, 45], ["y_pred.expected_log_likelihood", "loss.mean", "loss.sum", "y_pred.entropy"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.expected_log_likelihood", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.entropy"], ["", "def", "forward", "(", "self", ",", "y_pred", ":", "Posterior", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Computes the loss of the prediction with respect to the target.\n\n        Args:\n            y_pred: The posterior distribution predicted by the Natural Posterior Network.\n            y_true: The true targets. Either indices for classes of a classification problem or\n                the real target values. Must have the same batch shape as ``y_pred``.\n\n        Returns:\n            The loss, processed according to ``self.reduction``.\n        \"\"\"", "\n", "nll", "=", "-", "y_pred", ".", "expected_log_likelihood", "(", "y_true", ")", "\n", "loss", "=", "nll", "-", "self", ".", "entropy_weight", "*", "y_pred", ".", "entropy", "(", ")", "\n", "\n", "if", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "if", "self", ".", "reduction", "==", "\"sum\"", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.__init__": [[16, 41], ["torch.nn.Module.__init__", "scaler.EvidenceScaler"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "latent_dim", ":", "int", ",", "\n", "encoder", ":", "nn", ".", "Module", ",", "\n", "flow", ":", "NormalizingFlow", ",", "\n", "output", ":", "Output", ",", "\n", "certainty_budget", ":", "CertaintyBudget", "=", "\"normal\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            latent_dim: The dimension of the latent space to which the model's encoder maps.\n            config: The model's intrinsic configuration.\n            encoder: The model's (deep) encoder which maps input to a latent space.\n            flow: The model's normalizing flow which yields the evidence of inputs based on their\n                latent representations.\n            output: The model's output head which maps each input's latent representation linearly\n                to the parameters of the target distribution.\n            certainty_budget: The scaling factor for the certainty budget that the normalizing\n                flow can draw from.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "flow", "=", "flow", "\n", "self", ".", "output", "=", "output", "\n", "self", ".", "scaler", "=", "EvidenceScaler", "(", "latent_dim", ",", "certainty_budget", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.forward": [[42, 56], ["model.NaturalPosteriorNetworkModel.posterior_update", "model.NaturalPosteriorNetworkModel.output.prior.update"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.posterior_update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "D", ".", "Posterior", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Performs a Bayesian update over the target distribution for each input independently. The\n        returned posterior distribution carries all information about the prediction.\n\n        Args:\n            x: The inputs that are first passed to the encoder.\n\n        Returns:\n            The posterior distribution for every input along with their log-probabilities. The\n            same probabilities are returned from :meth:`log_prob`.\n        \"\"\"", "\n", "update", ",", "log_prob", "=", "self", ".", "posterior_update", "(", "x", ")", "\n", "return", "self", ".", "output", ".", "prior", ".", "update", "(", "update", ")", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.posterior_update": [[57, 77], ["model.NaturalPosteriorNetworkModel.encoder.forward", "model.NaturalPosteriorNetworkModel.output.forward", "model.NaturalPosteriorNetworkModel.expected_sufficient_statistics", "model.NaturalPosteriorNetworkModel.flow.forward", "model.NaturalPosteriorNetworkModel.scaler.forward", "z.permute.permute.dim", "z.permute.permute.permute", "natpn.PosteriorUpdate"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.expected_sufficient_statistics", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward"], ["", "def", "posterior_update", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "D", ".", "PosteriorUpdate", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Computes the posterior update over the target distribution for each input independently.\n\n        Args:\n            x: The inputs that are first passed to the encoder.\n\n        Returns:\n            The posterior update for every input and the true log-probabilities.\n        \"\"\"", "\n", "z", "=", "self", ".", "encoder", ".", "forward", "(", "x", ")", "\n", "if", "z", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "z", "=", "z", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "prediction", "=", "self", ".", "output", ".", "forward", "(", "z", ")", "\n", "sufficient_statistics", "=", "prediction", ".", "expected_sufficient_statistics", "(", ")", "\n", "\n", "log_prob", "=", "self", ".", "flow", ".", "forward", "(", "z", ")", "\n", "log_evidence", "=", "self", ".", "scaler", ".", "forward", "(", "log_prob", ")", "\n", "\n", "return", "D", ".", "PosteriorUpdate", "(", "sufficient_statistics", ",", "log_evidence", ")", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.log_prob": [[78, 94], ["model.NaturalPosteriorNetworkModel.flow.forward", "torch.set_grad_enabled", "model.NaturalPosteriorNetworkModel.encoder.forward", "z.permute.permute.dim", "z.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward"], ["", "def", "log_prob", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "track_encoder_gradients", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Computes the (scaled) log-probability of observing the given inputs.\n\n        Args:\n            x: The inputs that are first passed to the encoder.\n            track_encoder_gradients: Whether to track the gradients of the encoder.\n\n        Returns:\n            The per-input log-probability.\n        \"\"\"", "\n", "with", "torch", ".", "set_grad_enabled", "(", "self", ".", "training", "and", "track_encoder_gradients", ")", ":", "\n", "            ", "z", "=", "self", ".", "encoder", ".", "forward", "(", "x", ")", "\n", "if", "z", ".", "dim", "(", ")", ">", "2", ":", "\n", "                ", "z", "=", "z", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "", "return", "self", ".", "flow", ".", "forward", "(", "z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.scaler.EvidenceScaler.__init__": [[24, 39], ["torch.nn.Module.__init__", "math.log"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ",", "budget", ":", "CertaintyBudget", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n            budget: The budget to use.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "budget", "==", "\"exp-half\"", ":", "\n", "            ", "self", ".", "log_scale", "=", "0.5", "*", "dim", "\n", "", "elif", "budget", "==", "\"exp\"", ":", "\n", "            ", "self", ".", "log_scale", "=", "dim", "\n", "", "elif", "budget", "==", "\"normal\"", ":", "\n", "            ", "self", ".", "log_scale", "=", "0.5", "*", "math", ".", "log", "(", "4", "*", "math", ".", "pi", ")", "*", "dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "log_scale", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.scaler.EvidenceScaler.forward": [[40, 51], ["natpn.utils.clamp_preserve_gradients"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.utils.clamp.clamp_preserve_gradients"], ["", "", "def", "forward", "(", "self", ",", "log_evidence", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Scales the evidence in the log space according to the certainty budget.\n\n        Args:\n            log_evidence: The log-evidence to scale.\n\n        Returns:\n            The scaled and clamped evidence in the log-space.\n        \"\"\"", "\n", "return", "clamp_preserve_gradients", "(", "log_evidence", "+", "self", ".", "log_scale", ",", "lower", "=", "-", "30.0", ",", "upper", "=", "30.0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.ensemble.NaturalPosteriorEnsembleModel.__init__": [[15, 23], ["torch.nn.Module.__init__", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "networks", ":", "List", "[", "NaturalPosteriorNetworkModel", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            networks: The NatPN networks whose outputs are combined by the ensemble. They or may\n                not have equal configuration.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "networks", "=", "nn", ".", "ModuleList", "(", "networks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.ensemble.NaturalPosteriorEnsembleModel.output": [[24, 30], ["typing.cast"], "methods", ["None"], ["", "@", "property", "\n", "def", "output", "(", "self", ")", "->", "Output", ":", "\n", "        ", "\"\"\"\n        Returns the output module of the ensemble.\n        \"\"\"", "\n", "return", "cast", "(", "NaturalPosteriorNetworkModel", ",", "self", ".", "networks", "[", "0", "]", ")", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.ensemble.NaturalPosteriorEnsembleModel.forward": [[31, 56], ["natpn.mixture_posterior_update", "typing.cast().output.prior.update", "typing.cast().posterior_update", "torch.stack().logsumexp", "math.log", "len", "typing.cast", "torch.stack", "typing.cast"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._utils.mixture_posterior_update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.posterior_update"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "D", ".", "Posterior", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Performs a Bayesian update over the target distribution for each input independently via\n        Bayesian combination of the underlying networks' predictions. The returned posterior\n        distribution carries all information about the prediction.\n\n        Args:\n            x: The inputs that are first passed to the encoder.\n\n        Returns:\n            The posterior distribution for every input.\n        \"\"\"", "\n", "outputs", "=", "[", "\n", "cast", "(", "NaturalPosteriorNetworkModel", ",", "network", ")", ".", "posterior_update", "(", "x", ")", "\n", "for", "network", "in", "self", ".", "networks", "\n", "]", "\n", "updates", "=", "[", "output", "[", "0", "]", "for", "output", "in", "outputs", "]", "\n", "log_probs", "=", "[", "output", "[", "1", "]", "for", "output", "in", "outputs", "]", "\n", "\n", "update", "=", "D", ".", "mixture_posterior_update", "(", "updates", ")", "\n", "posterior", "=", "cast", "(", "NaturalPosteriorNetworkModel", ",", "self", ".", "networks", "[", "0", "]", ")", ".", "output", ".", "prior", ".", "update", "(", "\n", "update", "\n", ")", "\n", "log_prob", "=", "torch", ".", "stack", "(", "log_probs", ")", ".", "logsumexp", "(", "0", ")", "-", "math", ".", "log", "(", "len", "(", "self", ".", "networks", ")", ")", "\n", "return", "posterior", ",", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.densedepth.DenseDepthEncoder.__init__": [[16, 30], ["torch.nn.Module.__init__", "densedepth.FeatureExtractor", "torch.nn.Sequential", "torch.nn.Sequential", "densedepth.Upsample", "densedepth.Upsample", "densedepth.Upsample", "densedepth.Upsample", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "out_dim", ":", "int", ",", "*", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "FeatureExtractor", "(", ")", "\n", "\n", "in_features", "=", "2208", "\n", "out_features", "=", "in_features", "//", "2", "\n", "self", ".", "conv_in", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", ",", "\n", ")", "\n", "self", ".", "up1", "=", "Upsample", "(", "out_features", "+", "384", ",", "out_features", "//", "2", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "up2", "=", "Upsample", "(", "out_features", "//", "2", "+", "192", ",", "out_features", "//", "4", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "up3", "=", "Upsample", "(", "out_features", "//", "4", "+", "96", ",", "out_features", "//", "8", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "up4", "=", "Upsample", "(", "out_features", "//", "8", "+", "96", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.densedepth.DenseDepthEncoder.forward": [[31, 38], ["densedepth.DenseDepthEncoder.feature_extractor", "densedepth.DenseDepthEncoder.conv_in", "densedepth.DenseDepthEncoder.up1", "densedepth.DenseDepthEncoder.up2", "densedepth.DenseDepthEncoder.up3", "densedepth.DenseDepthEncoder.up4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "block0", ",", "block1", ",", "block2", ",", "block3", ",", "block4", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "x0", "=", "self", ".", "conv_in", "(", "block4", ")", "\n", "x1", "=", "self", ".", "up1", "(", "x0", ",", "block3", ")", "\n", "x2", "=", "self", ".", "up2", "(", "x1", ",", "block2", ")", "\n", "x3", "=", "self", ".", "up3", "(", "x2", ",", "block1", ")", "\n", "return", "self", ".", "up4", "(", "x3", ",", "block0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.densedepth.FeatureExtractor.__init__": [[45, 57], ["torch.nn.Module.__init__", "torchvision.densenet161", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "densenet", "=", "M", ".", "densenet161", "(", "pretrained", "=", "True", ")", "\n", "features", "=", "densenet", ".", "features", "\n", "self", ".", "encoder0", "=", "nn", ".", "Sequential", "(", "\n", "features", ".", "conv0", ",", "features", ".", "norm0", ",", "features", ".", "relu0", "# type: ignore", "\n", ")", "\n", "self", ".", "encoder1", "=", "nn", ".", "Sequential", "(", "features", ".", "pool0", ")", "# type: ignore", "\n", "self", ".", "encoder2", "=", "nn", ".", "Sequential", "(", "features", ".", "denseblock1", ",", "features", ".", "transition1", ")", "# type: ignore", "\n", "self", ".", "encoder3", "=", "nn", ".", "Sequential", "(", "features", ".", "denseblock2", ",", "features", ".", "transition2", ")", "# type: ignore", "\n", "self", ".", "encoder4", "=", "nn", ".", "Sequential", "(", "\n", "features", ".", "denseblock3", ",", "features", ".", "transition3", ",", "features", ".", "denseblock4", "# type: ignore", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.densedepth.FeatureExtractor.forward": [[59, 68], ["densedepth.FeatureExtractor.encoder0", "densedepth.FeatureExtractor.encoder1", "densedepth.FeatureExtractor.encoder2", "densedepth.FeatureExtractor.encoder3", "densedepth.FeatureExtractor.encoder4"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "block0", "=", "self", ".", "encoder0", "(", "x", ")", "\n", "block1", "=", "self", ".", "encoder1", "(", "block0", ")", "\n", "block2", "=", "self", ".", "encoder2", "(", "block1", ")", "\n", "block3", "=", "self", ".", "encoder3", "(", "block2", ")", "\n", "block4", "=", "self", ".", "encoder4", "(", "block3", ")", "\n", "return", "block0", ",", "block1", ",", "block2", ",", "block3", ",", "block4", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.densedepth.Upsample.__init__": [[75, 84], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout2d", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.densedepth.Upsample.forward": [[86, 92], ["torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "densedepth.Upsample.conv", "concat.size", "concat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "concat", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "z", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "size", "=", "[", "concat", ".", "size", "(", "2", ")", ",", "concat", ".", "size", "(", "3", ")", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", ",", "concat", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.image_shallow.ShallowImageEncoder.__init__": [[12, 32], ["torch.nn.Sequential.__init__", "image_shallow.SimpleConvSequence", "image_shallow.SimpleConvSequence", "image_shallow.SimpleConvSequence", "image_shallow.SimpleConvSequence", "image_shallow.SimpleConvSequence", "image_shallow.SimpleConvSequence", "torch.nn.Flatten", "torch.no_grad", "image_shallow.SimpleLinearSequence", "image_shallow.SimpleLinearSequence", "torch.nn.Linear", "torch.nn.Sequential", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "torch", ".", "Size", ",", "out_dim", ":", "int", ",", "*", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "conv_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "\n", "SimpleConvSequence", "(", "input_size", "[", "0", "]", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "SimpleConvSequence", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "SimpleConvSequence", "(", "32", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "dropout", "=", "dropout", ")", ",", "\n", "SimpleConvSequence", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "SimpleConvSequence", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "SimpleConvSequence", "(", "64", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "dropout", "=", "dropout", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "linear_dim", "=", "nn", ".", "Sequential", "(", "*", "conv_layers", ")", "(", "torch", ".", "randn", "(", "1", ",", "*", "input_size", ")", ")", ".", "size", "(", "-", "1", ")", "\n", "\n", "", "linear_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "\n", "SimpleLinearSequence", "(", "linear_dim", ",", "128", ",", "dropout", "=", "dropout", ")", ",", "\n", "SimpleLinearSequence", "(", "128", ",", "64", ",", "dropout", "=", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "out_dim", ")", ",", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "*", "(", "conv_layers", "+", "linear_layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.image_shallow.SimpleConvSequence.__init__": [[39, 54], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.image_shallow.SimpleLinearSequence.__init__": [[62, 67], ["torch.nn.Sequential.__init__", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.tabular.TabularEncoder.__init__": [[10, 35], ["enumerate", "torch.nn.Sequential.__init__", "zip", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ":", "int", ",", "\n", "hidden_dims", ":", "List", "[", "int", "]", ",", "\n", "output_dim", ":", "int", ",", "\n", "*", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_dim: The dimension of the inputs.\n            hidden_dims: The dimensions of the hidden layers.\n            output_dim: The dimension of the output, i.e. the latent space.\n            dropout: The dropout probability. Dropout layers are added after every activation.\n        \"\"\"", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "\n", "zip", "(", "[", "input_dim", "]", "+", "hidden_dims", ",", "hidden_dims", "+", "[", "output_dim", "]", ")", "\n", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.image_deep.DeepImageEncoder.__init__": [[13, 35], ["torch.nn.Sequential.__init__", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "image_deep.NormedConvSequence", "torch.nn.Flatten", "torch.no_grad", "image_deep.NormedLinearSequence", "image_deep.NormedLinearSequence", "torch.nn.Linear", "torch.nn.Sequential", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "torch", ".", "Size", ",", "out_dim", ":", "int", ",", "*", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "conv_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "\n", "NormedConvSequence", "(", "input_size", "[", "0", "]", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "32", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "64", ",", "128", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedConvSequence", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dropout", "=", "dropout", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "linear_dim", "=", "nn", ".", "Sequential", "(", "*", "conv_layers", ")", "(", "torch", ".", "randn", "(", "1", ",", "*", "input_size", ")", ")", ".", "size", "(", "-", "1", ")", "\n", "\n", "", "linear_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "\n", "NormedLinearSequence", "(", "linear_dim", ",", "128", ",", "dropout", "=", "dropout", ")", ",", "\n", "NormedLinearSequence", "(", "128", ",", "64", ",", "dropout", "=", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "out_dim", ")", ",", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "*", "(", "conv_layers", "+", "linear_layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.image_deep.NormedConvSequence.__init__": [[42, 58], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.BatchNorm2d", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.image_deep.NormedLinearSequence.__init__": [[66, 72], ["torch.nn.Sequential.__init__", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.BatchNorm1d", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.resnet.ResnetEncoder.__init__": [[13, 23], ["torch.nn.Module.__init__", "torchvision.resnet18", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "out_dim", ":", "int", ",", "*", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "M", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "model", ".", "layer1", "=", "nn", ".", "Sequential", "(", "self", ".", "model", ".", "layer1", ",", "nn", ".", "Dropout2d", "(", "dropout", ")", ")", "\n", "self", ".", "model", ".", "layer2", "=", "nn", ".", "Sequential", "(", "self", ".", "model", ".", "layer2", ",", "nn", ".", "Dropout2d", "(", "dropout", ")", ")", "\n", "self", ".", "model", ".", "layer3", "=", "nn", ".", "Sequential", "(", "self", ".", "model", ".", "layer3", ",", "nn", ".", "Dropout2d", "(", "dropout", ")", ")", "\n", "self", ".", "model", ".", "layer4", "=", "nn", ".", "Sequential", "(", "self", ".", "model", ".", "layer4", ",", "nn", ".", "Dropout2d", "(", "dropout", ")", ")", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "model", ".", "fc", ".", "in_features", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.encoder.resnet.ResnetEncoder.forward": [[24, 26], ["resnet.ResnetEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output.categorical.CategoricalOutput.__init__": [[12, 21], ["_base.Output.__init__", "torch.nn.Linear", "natpn.DirichletPrior"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ",", "num_classes", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n            num_classes: The number of categories for the output distribution.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim", ",", "num_classes", ")", "\n", "self", ".", "prior", "=", "D", ".", "DirichletPrior", "(", "num_categories", "=", "num_classes", ",", "evidence", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output.categorical.CategoricalOutput.forward": [[22, 25], ["categorical.CategoricalOutput.linear.forward", "natpn.Categorical", "categorical.CategoricalOutput.log_softmax"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "z", "=", "self", ".", "linear", ".", "forward", "(", "x", ")", "\n", "return", "D", ".", "Categorical", "(", "z", ".", "log_softmax", "(", "-", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output._base.Output.forward": [[14, 26], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "\"\"\"\n        Derives the likelihood distribution from the latent representation via a linear mapping\n        to the distribution parameters.\n\n        Args:\n            x: The inputs' latent representations.\n\n        Returns:\n            The distribution.\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output.poisson.PoissonOutput.__init__": [[12, 20], ["_base.Output.__init__", "torch.nn.Linear", "natpn.GammaPrior"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim", ",", "1", ")", "\n", "self", ".", "prior", "=", "D", ".", "GammaPrior", "(", "rate", "=", "1", ",", "evidence", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output.poisson.PoissonOutput.forward": [[21, 24], ["poisson.PoissonOutput.linear.forward", "natpn.Poisson", "poisson.PoissonOutput.squeeze().exp", "poisson.PoissonOutput.squeeze"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "z", "=", "self", ".", "linear", ".", "forward", "(", "x", ")", "\n", "return", "D", ".", "Poisson", "(", "z", ".", "squeeze", "(", "-", "1", ")", ".", "exp", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output.normal.NormalOutput.__init__": [[13, 21], ["_base.Output.__init__", "torch.nn.Linear", "natpn.NormalGammaPrior"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim", ",", "2", ")", "\n", "self", ".", "prior", "=", "D", ".", "NormalGammaPrior", "(", "mean", "=", "0", ",", "scale", "=", "10", ",", "evidence", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.output.normal.NormalOutput.forward": [[22, 26], ["normal.NormalOutput.linear.forward", "natpn.utils.chunk_squeeze_last", "natpn.Normal", "log_precision.exp"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.utils.chunk.chunk_squeeze_last"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "z", "=", "self", ".", "linear", ".", "forward", "(", "x", ")", "\n", "loc", ",", "log_precision", "=", "chunk_squeeze_last", "(", "z", ")", "\n", "return", "D", ".", "Normal", "(", "loc", ",", "log_precision", ".", "exp", "(", ")", "+", "1e-10", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.flow.maf.MaskedAutoregressiveFlow.__init__": [[12, 39], ["range", "_base.NormalizingFlow.__init__", "transforms.MaskedAutoregressiveTransform", "transforms.append", "transforms.append", "transforms.BatchNormTransform"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dim", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "4", ",", "\n", "num_hidden_layers", ":", "int", "=", "1", ",", "\n", "hidden_layer_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "use_batch_norm", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The input dimension of the normalizing flow.\n            num_layers: The number of sequential masked autoregressive transforms.\n            num_hidden_layers: The number of hidden layers for each autoregressive transform.\n            hidden_layer_size_multiplier: The dimension of each hidden layer. Defaults to\n                ``3 * dim + 1``.\n            use_batch_norm: Whether to insert batch normalizing transforms between transforms.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "i", ">", "0", "and", "use_batch_norm", ":", "\n", "                ", "transforms", ".", "append", "(", "BatchNormTransform", "(", "dim", ")", ")", "\n", "", "transform", "=", "MaskedAutoregressiveTransform", "(", "\n", "dim", ",", "\n", "[", "hidden_layer_size", "or", "(", "dim", "*", "3", "+", "1", ")", "]", "*", "num_hidden_layers", ",", "\n", ")", "\n", "transforms", ".", "append", "(", "transform", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "transforms", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.flow._base.NormalizingFlow.__init__": [[15, 22], ["torch.nn.Module.__init__", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        "]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.flow._base.NormalizingFlow.forward": [[23, 47], ["z.size", "z.new_zeros", "torch.einsum", "z.size", "transform.forward", "math.log"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.flow.radial.RadialFlow.__init__": [[10, 18], ["_base.NormalizingFlow.__init__", "transforms.RadialTransform", "range"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ",", "num_layers", ":", "int", "=", "8", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The input dimension of the normalizing flow.\n            num_layers: The number of sequential radial transforms.\n        \"\"\"", "\n", "transforms", "=", "[", "RadialTransform", "(", "dim", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "transforms", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms._base.Transform.forward": [[12, 24], ["None"], "methods", ["None"], ["prior", ":", "D", ".", "ConjugatePrior", "\n", "\n", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        "]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked.MaskedAutoregressiveTransform.__init__": [[14, 26], ["_base.Transform.__init__", "masked.MADE"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dim", ":", "int", ",", "\n", "hidden_dims", ":", "List", "[", "int", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the inputs.\n            hidden_dims: The hidden dimensions of the MADE model.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "MADE", "(", "dim", ",", "hidden_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked.MaskedAutoregressiveTransform.forward": [[27, 33], ["masked.MaskedAutoregressiveTransform.net().chunk", "logscale.tanh.tanh.tanh", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "logscale.tanh.tanh.sum", "masked.MaskedAutoregressiveTransform.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "mean", ",", "logscale", "=", "self", ".", "net", "(", "z", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "logscale", "=", "logscale", ".", "tanh", "(", ")", "\n", "out", "=", "(", "z", "-", "mean", ")", "*", "torch", ".", "exp", "(", "-", "logscale", ")", "\n", "log_det", "=", "-", "logscale", ".", "sum", "(", "-", "1", ")", "\n", "return", "out", ",", "log_det", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked.MADE.__init__": [[43, 62], ["masked._create_masks", "enumerate", "torch.nn.Sequential.__init__", "len", "zip", "layers.append", "layers.append", "masked._MaskedLinear", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._create_masks", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "hidden_dims", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a new MADE model as a sequence of masked linear layers.\n\n        Args:\n            input_dim: The number of input dimensions.\n            hidden_dims: The dimensions of the hidden layers.\n        \"\"\"", "\n", "assert", "len", "(", "hidden_dims", ")", ">", "0", ",", "\"MADE model must have at least one hidden layer.\"", "\n", "\n", "dims", "=", "[", "input_dim", "]", "+", "hidden_dims", "+", "[", "input_dim", "*", "2", "]", "\n", "hidden_masks", "=", "_create_masks", "(", "input_dim", ",", "hidden_dims", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "(", "in_dim", ",", "out_dim", ")", "in", "enumerate", "(", "zip", "(", "dims", ",", "dims", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "_MaskedLinear", "(", "in_dim", ",", "out_dim", ",", "mask", "=", "hidden_masks", "[", "i", "]", ")", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._MaskedLinear.__init__": [[67, 70], ["torch.nn.Linear.__init__", "masked._MaskedLinear.register_buffer"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ":", "int", ",", "out_features", ":", "int", ",", "mask", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "register_buffer", "(", "\"mask\"", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._MaskedLinear.forward": [[71, 73], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "# pylint: disable=arguments-renamed", "\n", "        ", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "mask", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._MaskedLinear.__repr__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"MaskedLinear(in_features={self.in_features}, out_features={self.out_features})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._create_masks": [[78, 92], ["torch.randperm", "torch.randperm", "torch.randperm.repeat", "masked._sample_degrees", "masked._create_single_mask", "zip"], "function", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._sample_degrees", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._create_single_mask"], ["", "", "def", "_create_masks", "(", "input_dim", ":", "int", ",", "hidden_dims", ":", "List", "[", "int", "]", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "    ", "permutation", "=", "torch", ".", "randperm", "(", "input_dim", ")", "\n", "\n", "input_degrees", "=", "permutation", "+", "1", "\n", "hidden_degrees", "=", "[", "_sample_degrees", "(", "1", ",", "input_dim", "-", "1", ",", "d", ")", "for", "d", "in", "hidden_dims", "]", "\n", "output_degrees", "=", "permutation", ".", "repeat", "(", "2", ")", "\n", "\n", "all_degrees", "=", "[", "input_degrees", "]", "+", "hidden_degrees", "+", "[", "output_degrees", "]", "\n", "hidden_masks", "=", "[", "\n", "_create_single_mask", "(", "in_deg", ",", "out_deg", ")", "\n", "for", "in_deg", ",", "out_deg", "in", "zip", "(", "all_degrees", ",", "all_degrees", "[", "1", ":", "]", ")", "\n", "]", "\n", "\n", "return", "hidden_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._create_single_mask": [[94, 96], ["out_degrees.unsqueeze"], "function", ["None"], ["", "def", "_create_single_mask", "(", "in_degrees", ":", "torch", ".", "Tensor", ",", "out_degrees", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "(", "out_degrees", ".", "unsqueeze", "(", "-", "1", ")", ">=", "in_degrees", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.masked._sample_degrees": [[98, 100], ["torch.linspace().round", "torch.linspace().round", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "def", "_sample_degrees", "(", "minimum", ":", "int", ",", "maximum", ":", "int", ",", "num", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "torch", ".", "linspace", "(", "minimum", ",", "maximum", ",", "steps", "=", "num", ")", ".", "round", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.batch_norm.BatchNormTransform.__init__": [[17, 35], ["_base.Transform.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "batch_norm.BatchNormTransform.register_buffer", "batch_norm.BatchNormTransform.register_buffer", "batch_norm.BatchNormTransform.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.reset_parameters"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ",", "momentum", ":", "float", "=", "0.5", ",", "eps", ":", "float", "=", "1e-5", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the inputs.\n            momentum: Value used for calculating running average statistics.\n            eps: A small value added in the denominator for numerical stability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "log_gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "dim", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "dim", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "empty", "(", "dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "empty", "(", "dim", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.batch_norm.BatchNormTransform.reset_parameters": [[36, 44], ["torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.ones_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resets this module's parameters.\n        \"\"\"", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "log_gamma", ")", "# equal to `init.ones_(self.gamma)`", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "beta", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "running_mean", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.batch_norm.BatchNormTransform.forward": [[45, 77], ["log_det.sum().repeat.sum().repeat.sum().repeat", "list", "z.detach().mean", "z.detach().var", "float", "range", "torch.no_grad", "batch_norm.BatchNormTransform.running_mean.mul_().add_", "batch_norm.BatchNormTransform.running_var.mul_().add_", "batch_norm.BatchNormTransform.log_gamma.exp", "log_det.sum().repeat.sum().repeat.sum", "z.size", "z.detach", "z.detach", "z.dim", "batch_norm.BatchNormTransform.running_mean.mul_", "batch_norm.BatchNormTransform.running_var.mul_", "torch.isfinite"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean"], ["", "def", "forward", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "reduce", "=", "list", "(", "range", "(", "z", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "mean", "=", "z", ".", "detach", "(", ")", ".", "mean", "(", "reduce", ")", "\n", "var", "=", "z", ".", "detach", "(", ")", ".", "var", "(", "reduce", ",", "unbiased", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "mean", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "var", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "# Normalize input", "\n", "", "x", "=", "(", "z", "-", "mean", ")", "/", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "out", "=", "x", "*", "self", ".", "log_gamma", ".", "exp", "(", ")", "+", "self", ".", "beta", "\n", "\n", "# Compute log-determinant", "\n", "log_det", "=", "self", ".", "log_gamma", "-", "0.5", "*", "(", "var", "+", "self", ".", "eps", ")", ".", "log", "(", ")", "\n", "# Do repeat instead of expand to allow fixing the log_det below", "\n", "log_det", "=", "log_det", ".", "sum", "(", "-", "1", ")", ".", "repeat", "(", "z", ".", "size", "(", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "# Fix numerical issues during evaluation", "\n", "if", "not", "self", ".", "training", ":", "\n", "# Find all output rows where at least one value is not finite", "\n", "            ", "rows", "=", "(", "~", "torch", ".", "isfinite", "(", "out", ")", ")", ".", "sum", "(", "-", "1", ")", ">", "0", "\n", "# Fill these rows with 0 and set the log-determinant to -inf to indicate that they have", "\n", "# a density of exactly 0", "\n", "out", "[", "rows", "]", "=", "0", "\n", "log_det", "[", "rows", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "", "return", "out", ",", "log_det", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.__init__": [[16, 28], ["_base.Transform.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "radial.RadialTransform.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.reset_parameters"], ["transforms", "=", "[", "RadialTransform", "(", "dim", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "transforms", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.reset_parameters": [[29, 38], ["torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "radial.RadialTransform.reference.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward": [[39, 58], ["radial.RadialTransform.reference.size", "torch.softplus", "torch.softplus", "diff.norm", "torch.softplus", "torch.softplus", "beta_h.log1p"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.__init__": [[20, 29], ["_base.DataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n            seed: An optional seed which governs how train/test splits are created.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "seed", ")", "\n", "self", ".", "did_setup", "=", "False", "\n", "self", ".", "did_setup_ood", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.output_type": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"categorical\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.input_size": [[34, 37], ["torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "[", "3", ",", "32", ",", "32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule._input_normalizer": [[38, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "_input_normalizer", "(", "self", ")", "->", "T", ".", "Normalize", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.prepare_data": [[43, 57], ["logger.info", "torchvision.SVHN", "torchvision.SVHN", "str", "logger.info", "torchvision.CelebA", "torchvision.CelebA", "str", "logger.error", "sys.exit"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'SVHN'...\"", ")", "\n", "tvd", ".", "SVHN", "(", "str", "(", "self", ".", "root", "/", "\"svhn\"", ")", ",", "split", "=", "\"test\"", ",", "download", "=", "True", ")", "\n", "try", ":", "\n", "            ", "logger", ".", "info", "(", "\"Preparing 'CelebA'...\"", ")", "\n", "tvd", ".", "CelebA", "(", "str", "(", "self", ".", "root", "/", "\"celeba\"", ")", ",", "split", "=", "\"test\"", ",", "download", "=", "True", ")", "\n", "", "except", "zipfile", ".", "BadZipFile", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Downloading 'CelebA' failed due to download restrictions on Google Drive. \"", "\n", "\"Please download manually from https://drive.google.com/drive/folders/\"", "\n", "\"0B7EVK8r0v71pWEZsZE9oNnFzTm8 and put the files into '%s'.\"", ",", "\n", "self", ".", "root", "/", "\"celeba\"", ",", "\n", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.setup": [[58, 93], ["_utils.OodDataset", "_utils.OodDataset", "_utils.OodDataset", "torchvision.SVHN", "torchvision.SVHN", "torchvision.CelebA", "torchvision.CelebA", "torchvision.SVHN", "torchvision.SVHN", "str", "str", "str", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda"], "methods", ["None"], ["", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "ood_datasets", "=", "{", "\n", "\"svhn\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "SVHN", "(", "\n", "str", "(", "self", ".", "root", "/", "\"svhn\"", ")", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "\"celeba\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "CelebA", "(", "\n", "str", "(", "self", ".", "root", "/", "\"celeba\"", ")", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "T", ".", "Resize", "(", "[", "32", ",", "32", "]", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", "\n", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "\"svhn_oodom\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "SVHN", "(", "\n", "str", "(", "self", ".", "root", "/", "\"svhn\"", ")", ",", "\n", "split", "=", "\"test\"", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "T", ".", "ToTensor", "(", ")", ",", "T", ".", "Lambda", "(", "scale_oodom", ")", ",", "self", ".", "_input_normalizer", "]", "\n", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "# Mark done", "\n", "self", ".", "did_setup_ood", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.train_dataloader": [[94, 102], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "TRAIN_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "1024", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n", "persistent_workers", "=", "True", ",", "\n", "prefetch_factor", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.val_dataloader": [[104, 111], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "4096", ",", "\n", "num_workers", "=", "4", ",", "\n", "persistent_workers", "=", "True", ",", "\n", "prefetch_factor", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.test_dataloader": [[113, 120], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "4096", ",", "\n", "num_workers", "=", "4", ",", "\n", "persistent_workers", "=", "True", ",", "\n", "prefetch_factor", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar._CifarDataModule.ood_dataloaders": [[122, 126], ["lightkit.data.DataLoader", "cifar._CifarDataModule.ood_datasets.items"], "methods", ["None"], ["", "def", "ood_dataloaders", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataLoader", "[", "Any", "]", "]", ":", "\n", "        ", "return", "{", "\n", "name", ":", "DataLoader", "(", "dataset", ",", "batch_size", "=", "4096", ",", "num_workers", "=", "2", ",", "persistent_workers", "=", "True", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "ood_datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar10DataModule.num_classes": [[135, 138], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar10DataModule._input_normalizer": [[139, 142], ["torchvision.Normalize", "torchvision.Normalize"], "methods", ["None"], ["", "@", "property", "\n", "def", "_input_normalizer", "(", "self", ")", "->", "T", ".", "Normalize", ":", "\n", "        ", "return", "T", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar10DataModule.prepare_data": [[143, 149], ["logger.info", "torchvision.CIFAR10", "torchvision.CIFAR10", "logger.info", "torchvision.CIFAR10", "torchvision.CIFAR10", "cifar._CifarDataModule.prepare_data", "str", "str"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.prepare_data"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'CIFAR-10 Train'...\"", ")", "\n", "tvd", ".", "CIFAR10", "(", "str", "(", "self", ".", "root", "/", "\"cifar10\"", ")", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'CIFAR-10 Test'...\"", ")", "\n", "tvd", ".", "CIFAR10", "(", "str", "(", "self", ".", "root", "/", "\"cifar10\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "super", "(", ")", ".", "prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar10DataModule.setup": [[150, 182], ["cifar._CifarDataModule.setup", "torchvision.CIFAR10", "torchvision.CIFAR10", "_utils.dataset_train_test_split", "_utils.TransformedDataset", "torchvision.CIFAR10", "torchvision.CIFAR10", "str", "str", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomAffine", "torchvision.RandomAffine", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.setup", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.dataset_train_test_split"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "not", "self", ".", "did_setup", ":", "\n", "            ", "train_data", "=", "tvd", ".", "CIFAR10", "(", "\n", "str", "(", "self", ".", "root", "/", "\"cifar10\"", ")", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", "\n", "train_dataset", ",", "val_dataset", "=", "dataset_train_test_split", "(", "\n", "train_data", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "\n", "self", ".", "train_dataset", "=", "TransformedDataset", "(", "\n", "train_dataset", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "RandomAffine", "(", "15", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n", "", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "test_dataset", "=", "tvd", ".", "CIFAR10", "(", "\n", "str", "(", "self", ".", "root", "/", "\"cifar10\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setup", "(", "stage", "=", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar100DataModule.num_classes": [[190, 193], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar100DataModule._input_normalizer": [[194, 197], ["torchvision.Normalize", "torchvision.Normalize"], "methods", ["None"], ["", "@", "property", "\n", "def", "_input_normalizer", "(", "self", ")", "->", "T", ".", "Normalize", ":", "\n", "        ", "return", "T", ".", "Normalize", "(", "mean", "=", "[", "0.5071", ",", "0.4866", ",", "0.4409", "]", ",", "std", "=", "[", "0.2673", ",", "0.2564", ",", "0.2762", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar100DataModule.prepare_data": [[198, 204], ["logger.info", "torchvision.CIFAR100", "torchvision.CIFAR100", "logger.info", "torchvision.CIFAR100", "torchvision.CIFAR100", "cifar._CifarDataModule.prepare_data", "str", "str"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.prepare_data"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'CIFAR-100 Train'...\"", ")", "\n", "tvd", ".", "CIFAR100", "(", "str", "(", "self", ".", "root", "/", "\"cifar100\"", ")", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'CIFAR-100 Test'...\"", ")", "\n", "tvd", ".", "CIFAR100", "(", "str", "(", "self", ".", "root", "/", "\"cifar100\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "super", "(", ")", ".", "prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.cifar.Cifar100DataModule.setup": [[205, 238], ["cifar._CifarDataModule.setup", "torchvision.CIFAR100", "torchvision.CIFAR100", "_utils.dataset_train_test_split", "_utils.TransformedDataset", "torchvision.CIFAR100", "torchvision.CIFAR100", "str", "str", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.RandomRotation", "torchvision.RandomAffine", "torchvision.RandomAffine", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.setup", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.dataset_train_test_split"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "not", "self", ".", "did_setup", ":", "\n", "            ", "train_data", "=", "tvd", ".", "CIFAR100", "(", "\n", "str", "(", "self", ".", "root", "/", "\"cifar100\"", ")", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", "\n", "train_dataset", ",", "val_dataset", "=", "dataset_train_test_split", "(", "\n", "train_data", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "\n", "self", ".", "train_dataset", "=", "TransformedDataset", "(", "\n", "train_dataset", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "RandomRotation", "(", "20", ")", ",", "\n", "T", ".", "RandomAffine", "(", "15", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n", "", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "test_dataset", "=", "tvd", ".", "CIFAR100", "(", "\n", "str", "(", "self", ".", "root", "/", "\"cifar100\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setup", "(", "stage", "=", "stage", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.__init__": [[18, 30], ["_base.DataModule.__init__", "_utils.StandardScaler", "_utils.StandardScaler"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n            seed: An optional seed which governs how train/test splits are created.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "seed", ")", "\n", "self", ".", "did_setup", "=", "False", "\n", "self", ".", "did_setup_test", "=", "False", "\n", "\n", "self", ".", "input_scaler", "=", "StandardScaler", "(", ")", "\n", "self", ".", "output_scaler", "=", "StandardScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.output_type": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"normal\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.input_size": [[35, 38], ["torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "[", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.prepare_data": [[39, 49], ["logger.info", "target.exists", "logger.info", "torchvision.datasets.utils.download_url", "str"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "# Download energy dataset", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'Energy'...\"", ")", "\n", "target", "=", "self", ".", "root", "/", "\"energy\"", "\n", "if", "not", "target", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"'Energy' could not be found locally. Downloading to '%s'...\"", ",", "target", ")", "\n", "url", "=", "(", "\n", "\"https://archive.ics.uci.edu/ml/machine-learning-databases/00242/ENB2012_data.xlsx\"", "\n", ")", "\n", "download_url", "(", "url", ",", "str", "(", "target", ")", ",", "\"data.xlsx\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.setup": [[50, 65], ["pandas.read_excel", "torch.from_numpy().float", "str", "_utils.tabular_ood_dataset", "_utils.tabular_ood_dataset", "torch.from_numpy", "uci._UciDataModule.input_scaler.transform", "uci._UciDataModule.input_scaler.transform", "_utils.scale_oodom", "pandas.read_excel.to_numpy"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.scale_oodom"], ["", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_test", ":", "\n", "            ", "data", "=", "pd", ".", "read_excel", "(", "str", "(", "self", ".", "root", "/", "\"energy\"", "/", "\"data.xlsx\"", ")", ")", "\n", "X", "=", "torch", ".", "from_numpy", "(", "data", ".", "to_numpy", "(", ")", "[", ":", ",", ":", "8", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "ood_datasets", "=", "{", "\n", "\"energy\"", ":", "tabular_ood_dataset", "(", "\n", "self", ".", "test_dataset", ".", "tensors", "[", "0", "]", ",", "self", ".", "input_scaler", ".", "transform", "(", "X", ")", "\n", ")", ",", "\n", "\"energy_oodom\"", ":", "tabular_ood_dataset", "(", "\n", "self", ".", "test_dataset", ".", "tensors", "[", "0", "]", ",", "self", ".", "input_scaler", ".", "transform", "(", "scale_oodom", "(", "X", ")", ")", "\n", ")", ",", "\n", "}", "\n", "\n", "# Mark done", "\n", "self", ".", "did_setup_test", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.train_dataloader": [[66, 68], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "TRAIN_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "512", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.val_dataloader": [[69, 71], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.test_dataloader": [[72, 74], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci._UciDataModule.ood_dataloaders": [[75, 79], ["lightkit.data.DataLoader", "uci._UciDataModule.ood_datasets.items"], "methods", ["None"], ["", "def", "ood_dataloaders", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataLoader", "[", "Any", "]", "]", ":", "\n", "        ", "return", "{", "\n", "name", ":", "DataLoader", "(", "dataset", ",", "batch_size", "=", "4096", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "ood_datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci.ConcreteDataModule.prepare_data": [[88, 101], ["logger.info", "uci._UciDataModule.prepare_data", "target.exists", "logger.info", "torchvision.datasets.utils.download_url", "str"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.prepare_data"], ["def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "# Download concrete dataset", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'Concrete'...\"", ")", "\n", "target", "=", "self", ".", "root", "/", "\"concrete\"", "\n", "if", "not", "target", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"'Concrete' could not be found locally. Downloading to '%s'...\"", ",", "target", ")", "\n", "url", "=", "(", "\n", "\"https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/\"", "\n", "\"Concrete_Data.xls\"", "\n", ")", "\n", "download_url", "(", "url", ",", "str", "(", "target", ")", ",", "\"data.xls\"", ")", "\n", "\n", "", "super", "(", ")", ".", "prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.uci.ConcreteDataModule.setup": [[102, 135], ["uci._UciDataModule.setup", "pandas.read_excel", "torch.from_numpy().float", "torch.from_numpy().float", "_utils.tabular_train_test_split", "_utils.tabular_train_test_split", "uci.ConcreteDataModule.input_scaler.fit", "uci.ConcreteDataModule.output_scaler.fit", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "str", "uci.ConcreteDataModule.input_scaler.transform", "uci.ConcreteDataModule.output_scaler.transform", "uci.ConcreteDataModule.input_scaler.transform", "uci.ConcreteDataModule.output_scaler.transform", "uci.ConcreteDataModule.input_scaler.transform", "uci.ConcreteDataModule.output_scaler.transform", "torch.from_numpy", "torch.from_numpy", "pandas.read_excel.to_numpy", "pandas.read_excel.to_numpy"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.setup", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "not", "self", ".", "did_setup", ":", "\n", "            ", "df", "=", "pd", ".", "read_excel", "(", "str", "(", "self", ".", "root", "/", "\"concrete\"", "/", "\"data.xls\"", ")", ")", "\n", "X", "=", "torch", ".", "from_numpy", "(", "df", ".", "to_numpy", "(", ")", "[", ":", ",", ":", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "from_numpy", "(", "df", ".", "to_numpy", "(", ")", "[", ":", ",", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "# Split data", "\n", "(", "X_train", ",", "X_test", ")", ",", "(", "y_train", ",", "y_test", ")", "=", "tabular_train_test_split", "(", "\n", "X", ",", "y", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "(", "X_train", ",", "X_val", ")", ",", "(", "y_train", ",", "y_val", ")", "=", "tabular_train_test_split", "(", "\n", "X_train", ",", "y_train", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "\n", "# Fit transforms", "\n", "self", ".", "input_scaler", ".", "fit", "(", "X_train", ")", "\n", "self", ".", "output_scaler", ".", "fit", "(", "y_train", ")", "\n", "\n", "# Create datasets", "\n", "self", ".", "train_dataset", "=", "TensorDataset", "(", "\n", "self", ".", "input_scaler", ".", "transform", "(", "X_train", ")", ",", "self", ".", "output_scaler", ".", "transform", "(", "y_train", ")", "\n", ")", "\n", "self", ".", "val_dataset", "=", "TensorDataset", "(", "\n", "self", ".", "input_scaler", ".", "transform", "(", "X_val", ")", ",", "self", ".", "output_scaler", ".", "transform", "(", "y_val", ")", "\n", ")", "\n", "self", ".", "test_dataset", "=", "TensorDataset", "(", "\n", "self", ".", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "self", ".", "output_scaler", ".", "transform", "(", "y_test", ")", "\n", ")", "\n", "\n", "# Mark done", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n", "", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.__init__": [[25, 33], ["_base.DataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n            seed: An optional seed which governs how train/test splits are created.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "seed", ")", "\n", "self", ".", "did_setup", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.input_size": [[34, 37], ["torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "[", "11", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.prepare_data": [[38, 53], ["logger.info", "target.exists", "logger.info", "tempfile.TemporaryDirectory", "torchvision.datasets.utils.download_url", "zipfile.ZipFile", "zipfile.extractall", "pathlib.Path"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'Bike Sharing'...\"", ")", "\n", "target", "=", "self", ".", "root", "/", "\"bike-sharing\"", "\n", "if", "not", "target", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"'Bike Sharing' could not be found locally. Downloading to '%s'...\"", ",", "target", "\n", ")", "\n", "url", "=", "(", "\n", "\"https://archive.ics.uci.edu/ml/machine-learning-databases/00275/\"", "\n", "\"Bike-Sharing-Dataset.zip\"", "\n", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp", ":", "\n", "                ", "download_url", "(", "url", ",", "tmp", ",", "\"data.zip\"", ")", "\n", "with", "ZipFile", "(", "Path", "(", "tmp", ")", "/", "\"data.zip\"", ")", "as", "zipfile", ":", "\n", "                    ", "zipfile", ".", "extractall", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.setup": [[54, 105], ["pandas.read_csv", "pandas.read_csv.groupby", "_utils.tabular_train_test_split", "_utils.tabular_train_test_split", "_utils.StandardScaler().fit", "bike_sharing._BikeSharingDataModule.output_scaler.fit", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "_utils.tabular_ood_dataset", "_utils.StandardScaler().fit.transform", "bike_sharing._BikeSharingDataModule.output_scaler.transform", "_utils.StandardScaler().fit.transform", "bike_sharing._BikeSharingDataModule.output_scaler.transform", "_utils.StandardScaler().fit.transform", "bike_sharing._BikeSharingDataModule.output_scaler.transform", "_utils.tabular_ood_dataset", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "torch.from_numpy().float", "torch.from_numpy().float", "_utils.StandardScaler", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "_utils.scale_oodom", "torch.from_numpy", "torch.from_numpy", "int", "df_season.iloc[].to_numpy", "df_season[].to_numpy"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.scale_oodom"], ["", "", "", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "not", "self", ".", "did_setup", ":", "\n", "# Read the hourly data from file", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "\"bike-sharing\"", "/", "\"hour.csv\"", ")", "\n", "\n", "# Read input and outputs and split by season", "\n", "season_map", "=", "{", "1", ":", "\"spring\"", ",", "2", ":", "\"summer\"", ",", "3", ":", "\"fall\"", ",", "4", ":", "\"winter\"", "}", "\n", "data", ":", "Dict", "[", "str", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", "=", "{", "}", "\n", "for", "season_idx", ",", "df_season", "in", "df", ".", "groupby", "(", "\"season\"", ")", ":", "\n", "                ", "data", "[", "season_map", "[", "int", "(", "season_idx", ")", "]", "]", "=", "(", "\n", "torch", ".", "from_numpy", "(", "df_season", ".", "iloc", "[", ":", ",", "3", ":", "-", "3", "]", ".", "to_numpy", "(", ")", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "df_season", "[", "\"cnt\"", "]", ".", "to_numpy", "(", ")", ")", ".", "float", "(", ")", ",", "\n", ")", "\n", "\n", "# Split training data", "\n", "", "(", "X_train", ",", "X_test", ")", ",", "(", "y_train", ",", "y_test", ")", "=", "tabular_train_test_split", "(", "\n", "*", "data", "[", "\"summer\"", "]", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "(", "X_train", ",", "X_val", ")", ",", "(", "y_train", ",", "y_val", ")", "=", "tabular_train_test_split", "(", "\n", "X_train", ",", "y_train", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "\n", "# Normalize data", "\n", "input_scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "self", ".", "output_scaler", ".", "fit", "(", "y_train", ")", "\n", "\n", "# Initialize datasets", "\n", "self", ".", "train_dataset", "=", "TensorDataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_train", ")", ",", "self", ".", "output_scaler", ".", "transform", "(", "y_train", ")", "\n", ")", "\n", "self", ".", "val_dataset", "=", "TensorDataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_val", ")", ",", "self", ".", "output_scaler", ".", "transform", "(", "y_val", ")", "\n", ")", "\n", "self", ".", "test_dataset", "=", "TensorDataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "self", ".", "output_scaler", ".", "transform", "(", "y_test", ")", "\n", ")", "\n", "\n", "# And initialize OOD datasets", "\n", "self", ".", "ood_datasets", "=", "{", "\n", "season", ":", "tabular_ood_dataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "input_scaler", ".", "transform", "(", "data", "[", "season", "]", "[", "0", "]", ")", "\n", ")", "\n", "for", "season", "in", "(", "\"spring\"", ",", "\"fall\"", ",", "\"winter\"", ")", "\n", "}", "\n", "self", ".", "ood_datasets", "[", "\"winter_oodom\"", "]", "=", "tabular_ood_dataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "\n", "input_scaler", ".", "transform", "(", "scale_oodom", "(", "data", "[", "\"winter\"", "]", "[", "0", "]", ")", ")", ",", "\n", ")", "\n", "\n", "# Mark done", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.train_dataloader": [[106, 108], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "TRAIN_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "512", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.val_dataloader": [[109, 111], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.test_dataloader": [[112, 114], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing._BikeSharingDataModule.ood_dataloaders": [[115, 119], ["lightkit.data.DataLoader", "bike_sharing._BikeSharingDataModule.ood_datasets.items"], "methods", ["None"], ["", "def", "ood_dataloaders", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataLoader", "[", "Any", "]", "]", ":", "\n", "        ", "return", "{", "\n", "name", ":", "DataLoader", "(", "dataset", ",", "batch_size", "=", "4096", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "ood_datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing.BikeSharingPoissonDataModule.output_type": [[128, 131], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"poisson\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing.BikeSharingNormalDataModule.__init__": [[139, 146], ["bike_sharing._BikeSharingDataModule.__init__", "_utils.StandardScaler"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ")", "\n", "self", ".", "output_scaler", "=", "StandardScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.bike_sharing.BikeSharingNormalDataModule.output_type": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"normal\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.__init__": [[24, 33], ["_base.DataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n            seed: An optional seed which governs how train/test splits are created.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "seed", ")", "\n", "self", ".", "did_setup", "=", "False", "\n", "self", ".", "did_setup_ood", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.output_type": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"categorical\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.input_size": [[38, 41], ["torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "[", "1", ",", "28", ",", "28", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.num_classes": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule._input_normalizer": [[46, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "_input_normalizer", "(", "self", ")", "->", "T", ".", "Normalize", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.prepare_data": [[51, 56], ["logger.info", "torchvision.KMNIST", "torchvision.KMNIST", "logger.info", "torchvision.CIFAR10", "torchvision.CIFAR10", "str", "str"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'KMNIST'...\"", ")", "\n", "tvd", ".", "KMNIST", "(", "str", "(", "self", ".", "root", "/", "\"kmnist\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'CIFAR-10'...\"", ")", "\n", "tvd", ".", "CIFAR10", "(", "str", "(", "self", ".", "root", "/", "\"cifar10\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.setup": [[57, 90], ["natpn.datasets._utils.ood.OodDataset", "natpn.datasets._utils.ood.OodDataset", "natpn.datasets._utils.ood.OodDataset", "torchvision.KMNIST", "torchvision.KMNIST", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.KMNIST", "torchvision.KMNIST", "str", "str", "str", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Grayscale", "torchvision.Grayscale", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "ood_datasets", "[", "\"kmnist\"", "]", "=", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "KMNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"kmnist\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "ood_datasets", "[", "\"cifar10_grayscale\"", "]", "=", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "CIFAR10", "(", "\n", "str", "(", "self", ".", "root", "/", "\"cifar10\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "T", ".", "Grayscale", "(", ")", ",", "T", ".", "Resize", "(", "[", "28", ",", "28", "]", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", "\n", ")", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "ood_datasets", "[", "\"kmnist_oodom\"", "]", "=", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "KMNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"kmnist\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", ",", "T", ".", "Lambda", "(", "scale_oodom", ")", "]", "\n", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Mark done", "\n", "self", ".", "did_setup_ood", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.train_dataloader": [[91, 98], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "TRAIN_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "1024", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "persistent_workers", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.val_dataloader": [[100, 103], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "val_dataset", ",", "batch_size", "=", "4096", ",", "num_workers", "=", "2", ",", "persistent_workers", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.test_dataloader": [[105, 108], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "batch_size", "=", "4096", ",", "num_workers", "=", "2", ",", "persistent_workers", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist._MnistDataModule.ood_dataloaders": [[110, 114], ["lightkit.data.DataLoader", "mnist._MnistDataModule.ood_datasets.items"], "methods", ["None"], ["", "def", "ood_dataloaders", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataLoader", "[", "Any", "]", "]", ":", "\n", "        ", "return", "{", "\n", "name", ":", "DataLoader", "(", "dataset", ",", "batch_size", "=", "4096", ",", "num_workers", "=", "2", ",", "persistent_workers", "=", "True", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "ood_datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist.MnistDataModule._input_normalizer": [[123, 126], ["torchvision.Normalize", "torchvision.Normalize"], "methods", ["None"], ["@", "property", "\n", "def", "_input_normalizer", "(", "self", ")", "->", "T", ".", "Normalize", ":", "\n", "        ", "return", "T", ".", "Normalize", "(", "mean", "=", "[", "0.1307", "]", ",", "std", "=", "[", "0.3081", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist.MnistDataModule.prepare_data": [[127, 135], ["logger.info", "torchvision.MNIST", "torchvision.MNIST", "logger.info", "torchvision.MNIST", "torchvision.MNIST", "logger.info", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "mnist._MnistDataModule.prepare_data", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.prepare_data"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'MNIST Train'...\"", ")", "\n", "tvd", ".", "MNIST", "(", "str", "(", "self", ".", "root", "/", "\"mnist\"", ")", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'MNIST Test'...\"", ")", "\n", "tvd", ".", "MNIST", "(", "str", "(", "self", ".", "root", "/", "\"mnist\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'Fashion-MNIST'...\"", ")", "\n", "tvd", ".", "FashionMNIST", "(", "str", "(", "self", ".", "root", "/", "\"fashion-mnist\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "super", "(", ")", ".", "prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist.MnistDataModule.setup": [[136, 161], ["torchvision.Compose", "torchvision.Compose", "mnist._MnistDataModule.setup", "torchvision.MNIST", "torchvision.MNIST", "_utils.dataset_train_test_split", "torchvision.MNIST", "torchvision.MNIST", "natpn.datasets._utils.ood.OodDataset", "torchvision.ToTensor", "torchvision.ToTensor", "str", "str", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "str", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.setup", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.dataset_train_test_split"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", "\n", "if", "not", "self", ".", "did_setup", ":", "\n", "            ", "train_data", "=", "tvd", ".", "MNIST", "(", "str", "(", "self", ".", "root", "/", "\"mnist\"", ")", ",", "train", "=", "True", ",", "transform", "=", "transform", ")", "\n", "self", ".", "train_dataset", ",", "self", ".", "val_dataset", "=", "dataset_train_test_split", "(", "\n", "train_data", ",", "\n", "train_size", "=", "0.8", ",", "\n", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n", "", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "test_dataset", "=", "tvd", ".", "MNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"mnist\"", ")", ",", "train", "=", "False", ",", "transform", "=", "transform", "\n", ")", "\n", "self", ".", "ood_datasets", "[", "\"fashion_mnist\"", "]", "=", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "FashionMNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"fashion-mnist\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist.FashionMnistDataModule._input_normalizer": [[169, 172], ["torchvision.Normalize", "torchvision.Normalize"], "methods", ["None"], ["@", "property", "\n", "def", "_input_normalizer", "(", "self", ")", "->", "T", ".", "Normalize", ":", "\n", "        ", "return", "T", ".", "Normalize", "(", "mean", "=", "[", "0.2860", "]", ",", "std", "=", "[", "0.3530", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist.FashionMnistDataModule.prepare_data": [[173, 181], ["logger.info", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "logger.info", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "logger.info", "torchvision.MNIST", "torchvision.MNIST", "mnist._MnistDataModule.prepare_data", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.prepare_data"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'Fashion-MNIST Train'...\"", ")", "\n", "tvd", ".", "FashionMNIST", "(", "str", "(", "self", ".", "root", "/", "\"fashion-mnist\"", ")", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'Fashion-MNIST Test'...\"", ")", "\n", "tvd", ".", "FashionMNIST", "(", "str", "(", "self", ".", "root", "/", "\"fashion-mnist\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Preparing 'MNIST'...\"", ")", "\n", "tvd", ".", "MNIST", "(", "str", "(", "self", ".", "root", "/", "\"mnist\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "super", "(", ")", ".", "prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.mnist.FashionMnistDataModule.setup": [[182, 209], ["torchvision.Compose", "torchvision.Compose", "mnist._MnistDataModule.setup", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "_utils.dataset_train_test_split", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "natpn.datasets._utils.ood.OodDataset", "torchvision.ToTensor", "torchvision.ToTensor", "str", "str", "torchvision.MNIST", "torchvision.MNIST", "str", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.setup", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.dataset_train_test_split"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", "\n", "if", "not", "self", ".", "did_setup", ":", "\n", "            ", "train_data", "=", "tvd", ".", "FashionMNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"fashion-mnist\"", ")", ",", "train", "=", "True", ",", "transform", "=", "transform", "\n", ")", "\n", "self", ".", "train_dataset", ",", "self", ".", "val_dataset", "=", "dataset_train_test_split", "(", "\n", "train_data", ",", "\n", "train_size", "=", "0.8", ",", "\n", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n", "", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "test_dataset", "=", "tvd", ".", "FashionMNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"fashion-mnist\"", ")", ",", "train", "=", "False", ",", "transform", "=", "transform", "\n", ")", "\n", "self", ".", "ood_datasets", "[", "\"mnist\"", "]", "=", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "MNIST", "(", "\n", "str", "(", "self", ".", "root", "/", "\"mnist\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "self", ".", "_input_normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.__init__": [[26, 34], ["super().__init__", "pathlib.Path", "_utils.IdentityScaler", "torch.Generator", "_base.DataModule.generator.manual_seed"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.output_type": [[35, 41], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.input_size": [[42, 48], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.num_classes": [[49, 56], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.gradient_accumulation_steps": [[57, 63], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.transform_output": [[64, 76], ["_base.DataModule.output_scaler.inverse_transform"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.inverse_transform"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._base.DataModule.ood_dataloaders": [[77, 86], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets._registry.register": [[8, 18], ["None"], "function", ["None"], ["def", "register", "(", "name", ":", "str", ")", "->", "Callable", "[", "[", "T", "]", ",", "T", "]", ":", "\n", "    ", "\"\"\"\n    Registers the provided module in the global registry under the specified name.\n    \"\"\"", "\n", "\n", "def", "register_module", "(", "module", ":", "T", ")", "->", "T", ":", "\n", "        ", "DATASET_REGISTRY", "[", "name", "]", "=", "module", "\n", "return", "module", "\n", "\n", "", "return", "register_module", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.__init__": [[35, 44], ["_base.DataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n            seed: An optional seed which governs how train/test splits are created.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "seed", ")", "\n", "self", ".", "did_setup", "=", "False", "\n", "self", ".", "did_setup_ood", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.output_type": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"normal\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.input_size": [[49, 52], ["torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "[", "3", ",", "640", ",", "480", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.gradient_accumulation_steps": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gradient_accumulation_steps", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.prepare_data": [[57, 87], ["logger.info", "logger.info", "logger.info", "torchvision.Kitti", "torchvision.Kitti", "torchvision.Kitti", "target.exists", "logger.info", "target.exists", "logger.info", "str", "tempfile.TemporaryDirectory", "torchvision.datasets.utils.download_file_from_google_drive", "torchvision.datasets.utils.download_file_from_google_drive", "torchvision.datasets.utils.download_file_from_google_drive", "tempfile.TemporaryDirectory", "zipfile.ZipFile", "f.extractall", "torchvision.datasets.utils.download_url", "torchvision.datasets.utils.download_url", "torchvision.datasets.utils.download_url", "zipfile.ZipFile", "f.extractall", "pathlib.Path", "pathlib.Path"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "# Download NYU Depth v2", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'NYU Depth v2'...\"", ")", "\n", "target", "=", "self", ".", "root", "/", "\"nyu-depth-v2\"", "\n", "if", "not", "target", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"'NYU Depth v2' could not be found locally. Downloading to '%s'...\"", ",", "target", "\n", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp", ":", "\n", "                ", "download_file_from_google_drive", "(", "\n", "\"1fdFu5NGXe4rTLYKD5wOqk9dl-eJOefXo\"", ",", "tmp", ",", "\"nyu_data.zip\"", "\n", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "Path", "(", "tmp", ")", "/", "\"nyu_data.zip\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "extractall", "(", "target", ")", "\n", "\n", "# Download LSUN for OOD", "\n", "", "", "", "logger", ".", "info", "(", "\"Preparing 'LSUN'...\"", ")", "\n", "target", "=", "self", ".", "root", "/", "\"lsun\"", "\n", "if", "not", "target", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"'LSUN' could not be found locally. Downloading to '%s'...\"", ",", "target", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp", ":", "\n", "                ", "for", "category", "in", "[", "\"classroom\"", ",", "\"church_outdoor\"", "]", ":", "\n", "                    ", "url", "=", "f\"http://dl.yf.io/lsun/scenes/{category}_train_lmdb.zip\"", "\n", "download_url", "(", "url", ",", "tmp", ",", "f\"{category}.zip\"", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "Path", "(", "tmp", ")", "/", "f\"{category}.zip\"", ")", "as", "f", ":", "\n", "                        ", "f", ".", "extractall", "(", "target", ")", "\n", "\n", "# Download Kitti for OOD", "\n", "", "", "", "", "logger", ".", "info", "(", "\"Preparing 'Kitti'...\"", ")", "\n", "tvd", ".", "Kitti", "(", "str", "(", "self", ".", "root", "/", "\"kitti\"", ")", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.setup": [[88, 168], ["torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "nyu_depth_v2._NyuDepthV2", "_utils.dataset_train_test_split", "_utils.TransformedDataset", "nyu_depth_v2._NyuDepthV2", "_utils.OodDataset", "_utils.OodDataset", "_utils.OodDataset", "_utils.OodDataset", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "nyu_depth_v2._RandomColorChannelPermutation", "nyu_depth_v2._JointRandomHorizontalFlip", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.LSUN", "torchvision.LSUN", "torchvision.LSUN", "torchvision.LSUN", "torchvision.LSUN", "torchvision.LSUN", "torchvision.Kitti", "torchvision.Kitti", "torchvision.Kitti", "torchvision.Kitti", "torchvision.Kitti", "torchvision.Kitti", "str", "str", "str", "str", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.dataset_train_test_split"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.4874", ",", "0.4176", ",", "0.4007", "]", ",", "std", "=", "[", "0.2833", ",", "0.2909", ",", "0.3031", "]", ")", "\n", "\n", "if", "not", "self", ".", "did_setup", ":", "\n", "            ", "train_data", "=", "_NyuDepthV2", "(", "\n", "self", ".", "root", "/", "\"nyu-depth-v2\"", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ",", "\n", "target_transform", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "Resize", "(", "[", "240", ",", "320", "]", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Lambda", "(", "_train_depth_transform", ")", ",", "\n", "T", ".", "Lambda", "(", "_reciprocal_depth_transform", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "train", ",", "val", "=", "dataset_train_test_split", "(", "\n", "train_data", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "self", ".", "train_dataset", "=", "TransformedDataset", "(", "\n", "train", ",", "\n", "transform", "=", "_RandomColorChannelPermutation", "(", "p", "=", "0.25", ")", ",", "\n", "joint_transform", "=", "_JointRandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", ")", "\n", "self", ".", "val_dataset", "=", "val", "\n", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n", "", "if", "stage", "==", "\"test\"", "and", "not", "self", ".", "did_setup_ood", ":", "\n", "            ", "self", ".", "test_dataset", "=", "_NyuDepthV2", "(", "\n", "self", ".", "root", "/", "\"nyu-depth-v2\"", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ",", "\n", "target_transform", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "Resize", "(", "[", "240", ",", "320", "]", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Lambda", "(", "_test_depth_transform", ")", ",", "\n", "T", ".", "Lambda", "(", "_reciprocal_depth_transform", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "ood_datasets", "=", "{", "\n", "\"lsun_classroom\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "LSUN", "(", "\n", "str", "(", "self", ".", "root", "/", "\"lsun\"", ")", ",", "\n", "classes", "=", "[", "\"classroom_train\"", "]", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "Resize", "(", "[", "480", ",", "640", "]", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "\"lsun_church\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "LSUN", "(", "\n", "str", "(", "self", ".", "root", "/", "\"lsun\"", ")", ",", "\n", "classes", "=", "[", "\"church_outdoor_train\"", "]", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "Resize", "(", "[", "480", ",", "640", "]", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "\"kitti\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "Kitti", "(", "\n", "str", "(", "self", ".", "root", "/", "\"kitti\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "Resize", "(", "[", "480", ",", "640", "]", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "normalizer", "]", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "\"kitti_oodom\"", ":", "OodDataset", "(", "\n", "self", ".", "test_dataset", ",", "\n", "tvd", ".", "Kitti", "(", "\n", "str", "(", "self", ".", "root", "/", "\"kitti\"", ")", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "T", ".", "Resize", "(", "[", "480", ",", "640", "]", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "normalizer", ",", "T", ".", "Lambda", "(", "scale_oodom", ")", "]", "\n", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "}", "\n", "self", ".", "did_setup_ood", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.train_dataloader": [[169, 172], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "TRAIN_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "persistent_workers", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.val_dataloader": [[174, 176], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "16", ",", "num_workers", "=", "8", ",", "persistent_workers", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.test_dataloader": [[177, 179], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "16", ",", "num_workers", "=", "8", ",", "persistent_workers", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.ood_dataloaders": [[180, 184], ["lightkit.data.DataLoader", "nyu_depth_v2.NyuDepthV2DataModule.ood_datasets.items"], "methods", ["None"], ["", "def", "ood_dataloaders", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataLoader", "[", "Any", "]", "]", ":", "\n", "        ", "return", "{", "\n", "name", ":", "DataLoader", "(", "dataset", ",", "batch_size", "=", "16", ",", "num_workers", "=", "8", ",", "persistent_workers", "=", "True", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "ood_datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.transform_output": [[186, 188], ["None"], "methods", ["None"], ["", "def", "transform_output", "(", "self", ",", "output", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "_NyuDepthV2", ".", "DEPTH_MAX", "/", "(", "output", "*", "_NyuDepthV2", ".", "DEPTH_STD", "+", "_NyuDepthV2", ".", "DEPTH_MEAN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._NyuDepthV2.__init__": [[196, 219], ["super().__init__", "typing.cast", "typing.cast.iloc[].tolist", "typing.cast.iloc[].tolist", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "Path", ",", "\n", "train", ":", "bool", "=", "True", ",", "\n", "transform", ":", "Optional", "[", "Callable", "[", "[", "ImageType", "]", ",", "Any", "]", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "[", "[", "ImageType", "]", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "or", "_noop", "\n", "self", ".", "target_transform", "=", "target_transform", "or", "_noop", "\n", "\n", "files", "=", "cast", "(", "\n", "pd", ".", "DataFrame", ",", "\n", "pd", ".", "read_csv", "(", "\n", "root", "/", "\"data\"", "/", "f\"nyu2_{'train' if train else 'test'}.csv\"", ",", "\n", "header", "=", "None", ",", "# type: ignore", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "image_files", "=", "files", ".", "iloc", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "\n", "self", ".", "depth_files", "=", "files", ".", "iloc", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._NyuDepthV2.__len__": [[220, 222], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._NyuDepthV2.__getitem__": [[223, 228], ["PIL.Image.open", "PIL.Image.open", "nyu_depth_v2._NyuDepthV2.transform", "nyu_depth_v2._NyuDepthV2.target_transform"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "self", ".", "root", "/", "self", ".", "image_files", "[", "index", "]", ")", "\n", "depth", "=", "Image", ".", "open", "(", "self", ".", "root", "/", "self", ".", "depth_files", "[", "index", "]", ")", "\n", "\n", "return", "self", ".", "transform", "(", "image", ")", ",", "self", ".", "target_transform", "(", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._RandomColorChannelPermutation.__init__": [[231, 233], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._RandomColorChannelPermutation.__call__": [[234, 238], ["random.random", "torch.randperm", "item.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "item", "[", "torch", ".", "randperm", "(", "item", ".", "size", "(", "0", ")", ")", "]", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._JointRandomHorizontalFlip.__init__": [[241, 243], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._JointRandomHorizontalFlip.__call__": [[244, 250], ["random.random", "torchvision.hflip", "torchvision.hflip", "torchvision.hflip", "torchvision.hflip", "torchvision.hflip", "torchvision.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "item", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "F", ".", "hflip", "(", "item", ")", ",", "F", ".", "hflip", "(", "target", ")", "\n", "", "return", "item", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._train_depth_transform": [[252, 254], ["None"], "function", ["None"], ["", "", "def", "_train_depth_transform", "(", "depth", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "(", "depth", "*", "_NyuDepthV2", ".", "DEPTH_MAX", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "_NyuDepthV2", ".", "DEPTH_MAX", ")", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._test_depth_transform": [[256, 258], ["None"], "function", ["None"], ["", "def", "_test_depth_transform", "(", "depth", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "(", "depth", "/", "10", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "_NyuDepthV2", ".", "DEPTH_MAX", ")", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._reciprocal_depth_transform": [[260, 262], ["None"], "function", ["None"], ["", "def", "_reciprocal_depth_transform", "(", "depth", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "(", "(", "_NyuDepthV2", ".", "DEPTH_MAX", "/", "depth", ")", "-", "_NyuDepthV2", ".", "DEPTH_MEAN", ")", "/", "_NyuDepthV2", ".", "DEPTH_STD", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2._noop": [[264, 266], ["None"], "function", ["None"], ["", "def", "_noop", "(", "x", ":", "Any", ")", "->", "Any", ":", "\n", "    ", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.__init__": [[24, 32], ["_base.DataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "root", ":", "Optional", "[", "PathType", "]", "=", "None", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: The directory where the dataset can be found or where it should be downloaded to.\n            seed: An optional seed which governs how train/test splits are created.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "seed", ")", "\n", "self", ".", "did_setup", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.output_type": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_type", "(", "self", ")", "->", "OutputType", ":", "\n", "        ", "return", "\"categorical\"", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.input_size": [[37, 40], ["torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "[", "48", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.num_classes": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.prepare_data": [[45, 58], ["logger.info", "data_file.exists", "logger.info", "data_file.parent.mkdir", "torchvision.datasets.utils.download_url", "str"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing 'Sensorless Drive'...\"", ")", "\n", "data_file", "=", "self", ".", "root", "/", "\"sensorless-drive\"", "/", "\"data.tsv\"", "\n", "if", "not", "data_file", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"'Sensorless Drive' could not be found locally. Downloading to '%s'...\"", ",", "data_file", "\n", ")", "\n", "data_file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "url", "=", "(", "\n", "\"https://archive.ics.uci.edu/ml/machine-learning-databases/00325/\"", "\n", "\"Sensorless_drive_diagnosis.txt\"", "\n", ")", "\n", "download_url", "(", "url", ",", "str", "(", "data_file", ".", "parent", ")", ",", "data_file", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.setup": [[59, 99], ["typing.cast", "torch.from_numpy().float", "_utils.tabular_train_test_split", "_utils.tabular_train_test_split", "_utils.StandardScaler().fit", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "pandas.read_csv", "torch.from_numpy().long", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "_utils.tabular_ood_dataset", "_utils.tabular_ood_dataset", "torch.from_numpy", "_utils.StandardScaler", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "_utils.StandardScaler().fit.transform", "torch.from_numpy", "_utils.scale_oodom", "typing.cast.to_numpy", "typing.cast.to_numpy"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform", "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.scale_oodom"], ["", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "not", "self", ".", "did_setup", ":", "\n", "# Read sensorless drive data. This can be done for any stage but only needs to be done", "\n", "# once.", "\n", "            ", "file", "=", "self", ".", "root", "/", "\"sensorless-drive\"", "/", "\"data.tsv\"", "\n", "data", "=", "cast", "(", "pd", ".", "DataFrame", ",", "pd", ".", "read_csv", "(", "file", ",", "sep", "=", "\" \"", ",", "header", "=", "None", ")", ")", "# type: ignore", "\n", "X_base", "=", "torch", ".", "from_numpy", "(", "data", ".", "to_numpy", "(", ")", "[", ":", ",", ":", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "y_base", "=", "torch", ".", "from_numpy", "(", "data", ".", "to_numpy", "(", ")", "[", ":", ",", "-", "1", "]", ")", ".", "long", "(", ")", "-", "1", "\n", "\n", "# Split by classes", "\n", "ood_mask", "=", "(", "y_base", "==", "9", ")", "+", "(", "y_base", "==", "10", ")", "\n", "X", ",", "X_ood", "=", "X_base", "[", "~", "ood_mask", "]", ",", "X_base", "[", "ood_mask", "]", "\n", "y", ",", "_", "=", "y_base", "[", "~", "ood_mask", "]", ",", "y_base", "[", "ood_mask", "]", "\n", "\n", "# Split training data", "\n", "(", "X_train", ",", "X_test", ")", ",", "(", "y_train", ",", "y_test", ")", "=", "tabular_train_test_split", "(", "\n", "X", ",", "y", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "(", "X_train", ",", "X_val", ")", ",", "(", "y_train", ",", "y_val", ")", "=", "tabular_train_test_split", "(", "\n", "X_train", ",", "y_train", ",", "train_size", "=", "0.8", ",", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "\n", "# Normalize inputs", "\n", "input_scaler", "=", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "# Initialize datasets", "\n", "self", ".", "train_dataset", "=", "TensorDataset", "(", "input_scaler", ".", "transform", "(", "X_train", ")", ",", "y_train", ")", "\n", "self", ".", "val_dataset", "=", "TensorDataset", "(", "input_scaler", ".", "transform", "(", "X_val", ")", ",", "y_val", ")", "\n", "self", ".", "test_dataset", "=", "TensorDataset", "(", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "y_test", ")", "\n", "self", ".", "ood_datasets", "=", "{", "\n", "\"sensorless_drive_left_out\"", ":", "tabular_ood_dataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "input_scaler", ".", "transform", "(", "X_ood", ")", "\n", ")", ",", "\n", "\"sensorless_drive_oodom\"", ":", "tabular_ood_dataset", "(", "\n", "input_scaler", ".", "transform", "(", "X_test", ")", ",", "input_scaler", ".", "transform", "(", "scale_oodom", "(", "X_ood", ")", ")", "\n", ")", ",", "\n", "}", "\n", "\n", "# Mark done", "\n", "self", ".", "did_setup", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.train_dataloader": [[100, 102], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "TRAIN_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.val_dataloader": [[103, 105], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.test_dataloader": [[106, 108], ["lightkit.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", "->", "EVAL_DATALOADERS", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "4096", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.ood_dataloaders": [[109, 113], ["lightkit.data.DataLoader", "sensorless_drive.SensorlessDriveDataModule.ood_datasets.items"], "methods", ["None"], ["", "def", "ood_dataloaders", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataLoader", "[", "Any", "]", "]", ":", "\n", "        ", "return", "{", "\n", "name", ":", "DataLoader", "(", "dataset", ",", "batch_size", "=", "4096", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "ood_datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.StandardScaler.fit": [[13, 20], ["X.mean", "X.std"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean"], ["def", "fit", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "StandardScaler", ":", "\n", "        ", "\"\"\"\n        Fits the mean and std of this scaler via the provided tabular data.\n        \"\"\"", "\n", "self", ".", "mean_", "=", "X", ".", "mean", "(", "0", ")", "\n", "self", ".", "std_", "=", "X", ".", "std", "(", "0", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.StandardScaler.transform": [[21, 26], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Transforms the provided tabular data with the mean and std that was fitted previously.\n        \"\"\"", "\n", "return", "(", "X", "-", "self", ".", "mean_", ")", "/", "self", ".", "std_", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.StandardScaler.inverse_transform": [[27, 32], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Inverse transform of tabular data.\n        \"\"\"", "\n", "return", "X", "*", "self", ".", "std_", "+", "self", ".", "mean_", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.fit": [[39, 44], ["None"], "methods", ["None"], ["def", "fit", "(", "self", ",", "_X", ":", "torch", ".", "Tensor", ")", "->", "IdentityScaler", ":", "\n", "        ", "\"\"\"\n        Noop.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform": [[45, 50], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Identity.\n        \"\"\"", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.inverse_transform": [[51, 56], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Identity.\n        \"\"\"", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.OodDataset.__init__": [[11, 16], ["len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id_data", ":", "Dataset", "[", "Any", "]", ",", "ood_data", ":", "Dataset", "[", "Any", "]", ")", ":", "\n", "        ", "self", ".", "id_data", "=", "id_data", "\n", "self", ".", "ood_data", "=", "ood_data", "\n", "self", ".", "id_len", "=", "len", "(", "id_data", ")", "# type: ignore", "\n", "self", ".", "ood_len", "=", "len", "(", "ood_data", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.OodDataset.__len__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "id_len", "+", "self", ".", "ood_len", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.OodDataset.__getitem__": [[20, 24], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "int", "]", ":", "\n", "        ", "if", "index", "<", "self", ".", "id_len", ":", "\n", "            ", "return", "self", ".", "id_data", "[", "index", "]", "[", "0", "]", ",", "1", "\n", "", "return", "self", ".", "ood_data", "[", "index", "-", "self", ".", "id_len", "]", "[", "0", "]", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.tabular_ood_dataset": [[26, 38], ["torch.cat", "torch.cat", "torch.utils.data.TensorDataset", "torch.ones", "torch.zeros", "data_id.size", "data_ood.size"], "function", ["None"], ["", "", "def", "tabular_ood_dataset", "(", "data_id", ":", "torch", ".", "Tensor", ",", "data_ood", ":", "torch", ".", "Tensor", ")", "->", "TensorDataset", ":", "\n", "    ", "\"\"\"\n    Constructs a tensor dataset from the in-distribution and out-of-distribution tabular data.\n    \"\"\"", "\n", "X", "=", "torch", ".", "cat", "(", "[", "data_id", ",", "data_ood", "]", ")", "\n", "y", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "ones", "(", "data_id", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "zeros", "(", "data_ood", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "]", "\n", ")", "\n", "return", "TensorDataset", "(", "X", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.ood.scale_oodom": [[40, 45], ["None"], "function", ["None"], ["", "def", "scale_oodom", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Scales the given input with a constant of 255 such that it can be considered out-of-domain.\n    \"\"\"", "\n", "return", "x", "*", "255", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.tabular_train_test_split": [[8, 30], ["tensors[].size", "round", "torch.randperm"], "function", ["None"], ["def", "tabular_train_test_split", "(", "\n", "*", "tensors", ":", "torch", ".", "Tensor", ",", "\n", "train_size", ":", "float", ",", "\n", "generator", ":", "torch", ".", "Generator", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "\"\"\"\n    Splits the given tensors randomly into training and test tensors. Each tensor is split with\n    the same indices.\n\n    Args:\n        tensors: The tensors to split. Must all have the same number of elements in the first\n            dimension.\n        train_size: The fraction in ``(0, 1)`` to use for the training data.\n        generator: The generator to use for generating train/test splits.\n\n    Returns:\n        The tensors split into training and test tensors.\n    \"\"\"", "\n", "num_items", "=", "tensors", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "num_train", "=", "round", "(", "num_items", "*", "train_size", ")", "\n", "permutation", "=", "torch", ".", "randperm", "(", "num_items", ",", "generator", "=", "generator", ")", "\n", "return", "[", "(", "t", "[", "permutation", "[", ":", "num_train", "]", "]", ",", "t", "[", "permutation", "[", "num_train", ":", "]", "]", ")", "for", "t", "in", "tensors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.split.dataset_train_test_split": [[32, 52], ["len", "round", "torch.randperm", "torch.utils.data.Subset", "torch.utils.data.Subset", "permutation[].tolist", "permutation[].tolist"], "function", ["None"], ["", "def", "dataset_train_test_split", "(", "\n", "dataset", ":", "Dataset", "[", "T", "]", ",", "train_size", ":", "float", ",", "generator", ":", "torch", ".", "Generator", ",", "\n", ")", "->", "Tuple", "[", "Dataset", "[", "T", "]", ",", "Dataset", "[", "T", "]", "]", ":", "\n", "    ", "\"\"\"\n    Splits the given dataset randomly into training and test items.\n\n    Args:\n        dataset: The dataset to split.\n        train_size: The fraction in ``(0, 1)`` to use for the training data.\n        generator: The generator to use for generating train/test splits.\n\n    Returns:\n        The train and test dataset.\n    \"\"\"", "\n", "num_items", "=", "len", "(", "dataset", ")", "# type: ignore", "\n", "num_train", "=", "round", "(", "num_items", "*", "train_size", ")", "\n", "permutation", "=", "torch", ".", "randperm", "(", "num_items", ",", "generator", "=", "generator", ")", "\n", "return", "(", "\n", "Subset", "(", "dataset", ",", "permutation", "[", ":", "num_train", "]", ".", "tolist", "(", ")", ")", ",", "\n", "Subset", "(", "dataset", ",", "permutation", "[", "num_train", ":", "]", ".", "tolist", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.dataset.TransformedDataset.__init__": [[10, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "Dataset", "[", "Any", "]", ",", "\n", "transform", ":", "Optional", "[", "Callable", "[", "[", "Any", "]", ",", "Any", "]", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "[", "[", "Any", "]", ",", "Any", "]", "]", "=", "None", ",", "\n", "joint_transform", ":", "Optional", "[", "Callable", "[", "[", "Any", ",", "Any", "]", ",", "Tuple", "[", "Any", ",", "Any", "]", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "or", "_noop", "\n", "self", ".", "target_transform", "=", "target_transform", "or", "_noop", "\n", "self", ".", "joint_transform", "=", "joint_transform", "or", "_joint_noop", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.dataset.TransformedDataset.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.dataset.TransformedDataset.__getitem__": [[25, 29], ["dataset.TransformedDataset.joint_transform", "dataset.TransformedDataset.transform", "dataset.TransformedDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.transforms.IdentityScaler.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Any", ":", "\n", "        ", "X", ",", "y", "=", "self", ".", "dataset", "[", "index", "]", "\n", "X_out", ",", "y_out", "=", "self", ".", "transform", "(", "X", ")", ",", "self", ".", "target_transform", "(", "y", ")", "\n", "return", "self", ".", "joint_transform", "(", "X_out", ",", "y_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.dataset._noop": [[31, 33], ["None"], "function", ["None"], ["", "", "def", "_noop", "(", "x", ":", "Any", ")", "->", "Any", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network._utils.dataset._joint_noop": [[35, 37], ["None"], "function", ["None"], ["", "def", "_joint_noop", "(", "x", ":", "Any", ",", "y", ":", "Any", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "    ", "return", "x", ",", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule.__init__": [[22, 59], ["pytorch_lightning.LightningModule.__init__", "lightning_module.NaturalPosteriorNetworkLightningModule.save_hyperparameters", "natpn.nn.BayesianLoss", "isinstance", "torchmetrics.Accuracy", "natpn.metrics.BrierScore", "torchmetrics.MeanSquaredError", "natpn.metrics.QuantileCalibrationScore"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ":", "Union", "[", "NaturalPosteriorNetworkModel", ",", "NaturalPosteriorEnsembleModel", "]", ",", "\n", "learning_rate", ":", "float", "=", "1e-3", ",", "\n", "learning_rate_decay", ":", "bool", "=", "False", ",", "\n", "entropy_weight", ":", "float", "=", "1e-5", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            model: The model to train or evaluate. If training, this *must* be a\n                :class:`NaturalPosteriorNetworkModel`.\n            learning_rate: The learning rate to use for the Adam optimizer.\n            learning_rate_decay: Whether to use learning rate decay. If set to ``True``, the\n                learning rate schedule is implemented using\n                :class:`~torch.optim.lr_scheduler.ReduceLROnPlateau`.\n            entropy_weight: The weight of the entropy regularizer in the Bayesian loss.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "learning_rate_decay", "=", "learning_rate_decay", "\n", "self", ".", "loss", "=", "BayesianLoss", "(", "entropy_weight", ")", "\n", "\n", "if", "isinstance", "(", "model", ".", "output", ",", "CategoricalOutput", ")", ":", "\n", "# We have discrete output", "\n", "            ", "self", ".", "output", "=", "\"discrete\"", "\n", "self", ".", "accuracy", "=", "Accuracy", "(", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", ")", "\n", "self", ".", "brier_score", "=", "BrierScore", "(", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", ")", "\n", "", "else", ":", "\n", "# We have continuous output", "\n", "            ", "self", ".", "output", "=", "\"continuous\"", "\n", "self", ".", "rmse", "=", "MeanSquaredError", "(", "\n", "squared", "=", "False", ",", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", "\n", ")", "\n", "self", ".", "calibration", "=", "QuantileCalibrationScore", "(", "\n", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule.configure_optimizers": [[61, 76], ["torch.optim.Adam", "lightning_module.NaturalPosteriorNetworkLightningModule.model.parameters", "torch.optim.lr_scheduler.ReduceLROnPlateau"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "learning_rate", ")", "\n", "config", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "\"optimizer\"", ":", "optimizer", "}", "\n", "if", "self", ".", "learning_rate_decay", ":", "\n", "            ", "config", "[", "\"lr_scheduler\"", "]", "=", "{", "\n", "\"scheduler\"", ":", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "self", ".", "trainer", ".", "max_epochs", "//", "20", ",", "\n", "threshold", "=", "1e-3", ",", "\n", "min_lr", "=", "1e-7", ",", "\n", ")", ",", "\n", "\"monitor\"", ":", "\"val/loss\"", ",", "\n", "}", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule.configure_callbacks": [[77, 80], ["pytorch_lightning.callbacks.EarlyStopping"], "methods", ["None"], ["", "def", "configure_callbacks", "(", "self", ")", "->", "List", "[", "pl", ".", "Callback", "]", ":", "\n", "        ", "return", "[", "\n", "EarlyStopping", "(", "\"val/loss\"", ",", "min_delta", "=", "1e-3", ",", "patience", "=", "self", ".", "trainer", ".", "max_epochs", "//", "10", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule.training_step": [[82, 89], ["lightning_module.NaturalPosteriorNetworkLightningModule.model.forward", "lightning_module.NaturalPosteriorNetworkLightningModule.loss.forward", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "log_prob.mean"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean"], ["", "def", "training_step", "(", "self", ",", "batch", ":", "Batch", ",", "_batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "X", ",", "y_true", "=", "batch", "\n", "y_pred", ",", "log_prob", "=", "self", ".", "model", ".", "forward", "(", "X", ")", "\n", "loss", "=", "self", ".", "loss", ".", "forward", "(", "y_pred", ",", "y_true", ")", "\n", "self", ".", "log", "(", "\"train/loss\"", ",", "loss", ")", "\n", "self", ".", "log", "(", "\"train/log_prob\"", ",", "log_prob", ".", "mean", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule.validation_step": [[90, 98], ["lightning_module.NaturalPosteriorNetworkLightningModule.model.forward", "lightning_module.NaturalPosteriorNetworkLightningModule.loss.forward", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "lightning_module.NaturalPosteriorNetworkLightningModule._compute_metrics", "log_prob.mean"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule._compute_metrics", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean"], ["", "def", "validation_step", "(", "self", ",", "batch", ":", "Batch", ",", "_batch_idx", ":", "int", ")", "->", "None", ":", "\n", "        ", "X", ",", "y_true", "=", "batch", "\n", "y_pred", ",", "log_prob", "=", "self", ".", "model", ".", "forward", "(", "X", ")", "\n", "loss", "=", "self", ".", "loss", ".", "forward", "(", "y_pred", ",", "y_true", ")", "\n", "\n", "self", ".", "log", "(", "\"val/loss\"", ",", "loss", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "log", "(", "\"val/log_prob\"", ",", "log_prob", ".", "mean", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "_compute_metrics", "(", "\"val\"", ",", "y_pred", ",", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule.test_step": [[99, 103], ["lightning_module.NaturalPosteriorNetworkLightningModule.model.forward", "lightning_module.NaturalPosteriorNetworkLightningModule._compute_metrics"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule._compute_metrics"], ["", "def", "test_step", "(", "self", ",", "batch", ":", "Batch", ",", "_batch_idx", ":", "int", ")", "->", "None", ":", "\n", "        ", "X", ",", "y_true", "=", "batch", "\n", "y_pred", ",", "_", "=", "self", ".", "model", ".", "forward", "(", "X", ")", "\n", "self", ".", "_compute_metrics", "(", "\"test\"", ",", "y_pred", ",", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module.NaturalPosteriorNetworkLightningModule._compute_metrics": [[104, 121], ["lightning_module.NaturalPosteriorNetworkLightningModule.accuracy.update", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "y_pred.maximum_a_posteriori().expected_sufficient_statistics", "lightning_module.NaturalPosteriorNetworkLightningModule.brier_score.update", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "typing.cast", "y_pred.maximum_a_posteriori().mean", "lightning_module.NaturalPosteriorNetworkLightningModule.rmse.update", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "y_pred.posterior_predictive().symmetric_confidence_level", "lightning_module.NaturalPosteriorNetworkLightningModule.calibration.update", "lightning_module.NaturalPosteriorNetworkLightningModule.log", "y_pred.maximum_a_posteriori().mean", "typing.cast.transform_output", "typing.cast.transform_output", "y_pred.maximum_a_posteriori", "y_pred.maximum_a_posteriori", "y_pred.posterior_predictive", "y_pred.maximum_a_posteriori"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.expected_sufficient_statistics", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.StudentT.symmetric_confidence_level", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.transform_output", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.nyu_depth_v2.NyuDepthV2DataModule.transform_output", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.maximum_a_posteriori", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.maximum_a_posteriori", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.posterior_predictive", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.maximum_a_posteriori"], ["", "def", "_compute_metrics", "(", "self", ",", "prefix", ":", "str", ",", "y_pred", ":", "D", ".", "Posterior", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "output", "==", "\"discrete\"", ":", "\n", "            ", "self", ".", "accuracy", ".", "update", "(", "y_pred", ".", "maximum_a_posteriori", "(", ")", ".", "mean", "(", ")", ",", "y_true", ")", "\n", "self", ".", "log", "(", "f\"{prefix}/accuracy\"", ",", "self", ".", "accuracy", ",", "prog_bar", "=", "True", ")", "\n", "\n", "probs", "=", "y_pred", ".", "maximum_a_posteriori", "(", ")", ".", "expected_sufficient_statistics", "(", ")", "\n", "self", ".", "brier_score", ".", "update", "(", "probs", ",", "y_true", ")", "\n", "self", ".", "log", "(", "f\"{prefix}/brier_score\"", ",", "self", ".", "brier_score", ",", "prog_bar", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "dm", "=", "cast", "(", "DataModule", ",", "self", ".", "trainer", ".", "datamodule", ")", "\n", "predicted", "=", "y_pred", ".", "maximum_a_posteriori", "(", ")", ".", "mean", "(", ")", "\n", "self", ".", "rmse", ".", "update", "(", "dm", ".", "transform_output", "(", "predicted", ")", ",", "dm", ".", "transform_output", "(", "y_true", ")", ")", "\n", "self", ".", "log", "(", "f\"{prefix}/rmse\"", ",", "self", ".", "rmse", ",", "prog_bar", "=", "True", ")", "\n", "\n", "confidence_levels", "=", "y_pred", ".", "posterior_predictive", "(", ")", ".", "symmetric_confidence_level", "(", "y_true", ")", "\n", "self", ".", "calibration", ".", "update", "(", "confidence_levels", ")", "\n", "self", ".", "log", "(", "f\"{prefix}/calibration\"", ",", "self", ".", "calibration", ",", "prog_bar", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.__init__": [[15, 29], ["pytorch_lightning.LightningModule.__init__", "natpn.metrics.AUCPR", "torchmetrics.AUROC", "natpn.metrics.AUCPR", "torchmetrics.AUROC"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ":", "Union", "[", "NaturalPosteriorNetworkModel", ",", "NaturalPosteriorEnsembleModel", "]", ",", "\n", "logging_key", ":", "str", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "logging_key", "=", "logging_key", "\n", "\n", "self", ".", "alea_conf_pr", "=", "AUCPR", "(", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", ")", "\n", "self", ".", "alea_conf_roc", "=", "AUROC", "(", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", ")", "\n", "\n", "self", ".", "epist_conf_pr", "=", "AUCPR", "(", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", ")", "\n", "self", ".", "epist_conf_roc", "=", "AUROC", "(", "compute_on_step", "=", "False", ",", "dist_sync_fn", "=", "self", ".", "all_gather", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.test_step": [[30, 55], ["lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.model.forward", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.alea_conf_pr.update", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.log", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.alea_conf_roc.update", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.log", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.epist_conf_pr.update", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.log", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.epist_conf_roc.update", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule.log", "posterior.maximum_a_posteriori().uncertainty", "aleatoric_conf.mean.mean.dim", "aleatoric_conf.mean.mean.mean", "epistemic_conf.mean.mean.dim", "epistemic_conf.mean.mean.mean", "tuple", "tuple", "posterior.maximum_a_posteriori", "range", "range", "aleatoric_conf.mean.mean.dim", "epistemic_conf.mean.mean.dim"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.transforms.radial.RadialTransform.forward", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.uncertainty", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.maximum_a_posteriori"], ["", "def", "test_step", "(", "self", ",", "batch", ":", "Batch", ",", "_batch_idx", ":", "int", ")", "->", "None", ":", "\n", "        ", "X", ",", "y", "=", "batch", "\n", "posterior", ",", "log_prob", "=", "self", ".", "model", ".", "forward", "(", "X", ")", "\n", "\n", "# Aleatoric confidence (from negative uncertainty)", "\n", "aleatoric_conf", "=", "-", "posterior", ".", "maximum_a_posteriori", "(", ")", ".", "uncertainty", "(", ")", "\n", "if", "aleatoric_conf", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "aleatoric_conf", "=", "aleatoric_conf", ".", "mean", "(", "tuple", "(", "range", "(", "1", ",", "aleatoric_conf", ".", "dim", "(", ")", ")", ")", ")", "\n", "\n", "", "self", ".", "alea_conf_pr", ".", "update", "(", "aleatoric_conf", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"{self.logging_key}/aleatoric_confidence_auc_pr\"", ",", "self", ".", "alea_conf_pr", ")", "\n", "\n", "self", ".", "alea_conf_roc", ".", "update", "(", "aleatoric_conf", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"{self.logging_key}/aleatoric_confidence_auc_roc\"", ",", "self", ".", "alea_conf_roc", ")", "\n", "\n", "# Epistemic confidence", "\n", "epistemic_conf", "=", "log_prob", "\n", "if", "epistemic_conf", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "epistemic_conf", "=", "epistemic_conf", ".", "mean", "(", "tuple", "(", "range", "(", "1", ",", "epistemic_conf", ".", "dim", "(", ")", ")", ")", ")", "\n", "\n", "", "self", ".", "epist_conf_pr", ".", "update", "(", "epistemic_conf", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"{self.logging_key}/epistemic_confidence_auc_pr\"", ",", "self", ".", "epist_conf_pr", ")", "\n", "\n", "self", ".", "epist_conf_roc", ".", "update", "(", "epistemic_conf", ",", "y", ")", "\n", "self", ".", "log", "(", "f\"{self.logging_key}/epistemic_confidence_auc_roc\"", ",", "self", ".", "epist_conf_roc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.__init__": [[16, 38], ["pytorch_lightning.LightningModule.__init__", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ":", "NaturalPosteriorNetworkModel", ",", "\n", "learning_rate", ":", "float", "=", "1e-3", ",", "\n", "learning_rate_decay", ":", "bool", "=", "False", ",", "\n", "early_stopping", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            model: The model whose flow to optimize.\n            learning_rate: The learning rate to use for the Adam optimizer.\n            learning_rate_decay: Whether to use a learning rate decay. If set to ``True``, the\n                learning rate schedule is implemented using\n                :class:`~torch.optim.lr_scheduler.ReduceLROnPlateau`.\n            early_stopping: Whether to use early stopping for training.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "learning_rate_decay", "=", "learning_rate_decay", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.configure_optimizers": [[39, 55], ["torch.optim.Adam", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.model.flow.parameters", "torch.optim.lr_scheduler.ReduceLROnPlateau"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "flow", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "learning_rate", ")", "\n", "config", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "\"optimizer\"", ":", "optimizer", "}", "\n", "if", "self", ".", "learning_rate_decay", ":", "\n", "            ", "config", "[", "\"lr_scheduler\"", "]", "=", "{", "\n", "\"scheduler\"", ":", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\n", "mode", "=", "\"max\"", ",", "\n", "factor", "=", "0.25", ",", "\n", "patience", "=", "self", ".", "trainer", ".", "max_epochs", "//", "20", ",", "\n", "threshold", "=", "1e-3", ",", "\n", "min_lr", "=", "1e-7", ",", "\n", ")", ",", "\n", "\"monitor\"", ":", "\"val/log_prob\"", ",", "\n", "}", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.configure_callbacks": [[56, 65], ["pytorch_lightning.callbacks.EarlyStopping"], "methods", ["None"], ["", "def", "configure_callbacks", "(", "self", ")", "->", "List", "[", "pl", ".", "Callback", "]", ":", "\n", "        ", "if", "not", "self", ".", "early_stopping", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "[", "\n", "EarlyStopping", "(", "\n", "\"val/log_prob\"", ",", "\n", "min_delta", "=", "1e-2", ",", "\n", "mode", "=", "\"max\"", ",", "\n", "patience", "=", "self", ".", "trainer", ".", "max_epochs", "//", "10", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.training_step": [[68, 73], ["lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.model.log_prob().mean", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.log", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.model.log_prob"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.log_prob"], ["", "def", "training_step", "(", "self", ",", "batch", ":", "Batch", ",", "_batch_idx", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "X", ",", "_", "=", "batch", "\n", "log_prob", "=", "self", ".", "model", ".", "log_prob", "(", "X", ",", "track_encoder_gradients", "=", "False", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "\"train/log_prob\"", ",", "log_prob", ",", "prog_bar", "=", "True", ")", "\n", "return", "-", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.validation_step": [[74, 78], ["lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.model.log_prob().mean", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.log", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.model.log_prob"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.nn.model.NaturalPosteriorNetworkModel.log_prob"], ["", "def", "validation_step", "(", "self", ",", "batch", ":", "Batch", ",", "_batch_idx", ":", "int", ")", "->", "None", ":", "\n", "        ", "X", ",", "_", "=", "batch", "\n", "log_prob", "=", "self", ".", "model", ".", "log_prob", "(", "X", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "\"val/log_prob\"", ",", "log_prob", ",", "prog_bar", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.__init__": [[61, 130], ["lightkit.BaseEstimator.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "latent_dim", ":", "int", "=", "16", ",", "\n", "encoder", ":", "EncoderType", "=", "\"tabular\"", ",", "\n", "flow", ":", "FlowType", "=", "\"radial\"", ",", "\n", "flow_num_layers", ":", "int", "=", "8", ",", "\n", "certainty_budget", ":", "CertaintyBudget", "=", "\"normal\"", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "learning_rate", ":", "float", "=", "1e-3", ",", "\n", "learning_rate_decay", ":", "bool", "=", "False", ",", "\n", "entropy_weight", ":", "float", "=", "1e-5", ",", "\n", "warmup_epochs", ":", "int", "=", "3", ",", "\n", "finetune", ":", "bool", "=", "True", ",", "\n", "ensemble_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "trainer_params", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            latent_dim: The dimension of the latent space that the encoder should map to.\n            encoder: The type of encoder to use which maps the input to the latent space.\n            flow: The type of flow which produces log-probabilities from the latent\n                representations.\n            flow_num_layers: The number of layers to use for the flow. If ``flow`` is set to\n                ``\"maf\"``, this sets the number of masked autoregressive layers. In between each\n                of these layers, another batch normalization layer is added.\n            certainty_budget: The certainty budget to use to scale the log-probabilities produced\n                by the normalizing flow.\n            dropout: The dropout probability to use for dropout layers in the encoder.\n            learning_rate: The learning rate to use for training encoder, flow, and linear output\n                layer. Applies to warm-up, actual training, and fine-tuning.\n            learning_rate_decay: Whether to use a learning rate decay by reducing the learning rate\n                when the validation loss plateaus.\n            entropy_weight: The strength of the entropy regularizer for the Bayesian loss used for\n                the main training procedure.\n            warmup_epochs: The number of epochs to run warm-up for. Should be used if the latent\n                space is high-dimensional and/or the normalizing flow is complex, i.e. consists of\n                many layers.\n            finetune: Whether to run fine-tuning after the main training loop. May be set to\n                ``False`` to speed up the overall training time if the data is simple. Otherwise,\n                it should be kept as ``True`` to improve out-of-distribution detection.\n            ensemble_size: The number of NatPN models to ensemble for the final predictions. This\n                constructs a Natural Posterior Ensemble which trains multiple NatPN models\n                independently and combines their predictions via Bayesian combination. By default,\n                this is set to ``None`` which does not create a NatPE.\n            trainer_params: Additional parameters which are passed to the PyTorch Ligthning\n                trainer. These parameters apply to all fitting runs as well as testing.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "user_params", "=", "trainer_params", ",", "\n", "overwrite_params", "=", "dict", "(", "\n", "log_every_n_steps", "=", "1", ",", "\n", "enable_checkpointing", "=", "True", ",", "\n", "enable_progress_bar", "=", "True", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "flow", "=", "flow", "\n", "self", ".", "flow_num_layers", "=", "flow_num_layers", "\n", "self", ".", "certainty_budget", ":", "CertaintyBudget", "=", "certainty_budget", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "learning_rate_decay", "=", "learning_rate_decay", "\n", "self", ".", "entropy_weight", "=", "entropy_weight", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "finetune", "=", "finetune", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit": [[134, 176], ["tempfile.TemporaryDirectory", "estimator.NaturalPosteriorNetwork._init_model", "estimator.NaturalPosteriorNetwork._fit_model", "range", "natpn.nn.NaturalPosteriorEnsembleModel", "pathlib.Path", "logger.info", "estimator.NaturalPosteriorNetwork._init_model", "models.append", "estimator.NaturalPosteriorNetwork._fit_model", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._init_model", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._fit_model", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._init_model", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._fit_model"], ["", "def", "fit", "(", "self", ",", "data", ":", "DataModule", ")", "->", "NaturalPosteriorNetwork", ":", "\n", "        ", "\"\"\"\n        Fits the Natural Posterior Network with the provided data. Fitting sequentially runs\n        warm-up (if ``self.warmup_epochs > 0``), the main training loop, and fine-tuning (if\n        ``self.finetune == True``).\n\n        Args:\n            data: The data to fit the model with.\n\n        Returns:\n            The estimator whose ``model_`` property is set.\n        \"\"\"", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "            ", "if", "self", ".", "ensemble_size", "is", "None", ":", "\n", "                ", "model", "=", "self", ".", "_init_model", "(", "\n", "data", ".", "output_type", ",", "\n", "data", ".", "input_size", ",", "\n", "data", ".", "num_classes", "if", "data", ".", "output_type", "==", "\"categorical\"", "else", "0", ",", "\n", ")", "\n", "self", ".", "model_", "=", "self", ".", "_fit_model", "(", "model", ",", "data", ",", "Path", "(", "tmp_dir", ")", ")", "\n", "", "else", ":", "\n", "                ", "models", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "ensemble_size", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Fitting model %d/%d...\"", ",", "i", "+", "1", ",", "self", ".", "ensemble_size", ")", "\n", "model", "=", "self", ".", "_init_model", "(", "\n", "data", ".", "output_type", ",", "\n", "data", ".", "input_size", ",", "\n", "data", ".", "num_classes", "if", "data", ".", "output_type", "==", "\"categorical\"", "else", "0", ",", "\n", ")", "\n", "models", ".", "append", "(", "self", ".", "_fit_model", "(", "model", ",", "data", ",", "Path", "(", "tmp_dir", ")", ")", ")", "\n", "", "self", ".", "model_", "=", "NaturalPosteriorEnsembleModel", "(", "models", ")", "\n", "\n", "# Assign additional fitted attributes", "\n", "", "", "self", ".", "input_size_", "=", "data", ".", "input_size", "\n", "self", ".", "output_type_", "=", "data", ".", "output_type", "\n", "try", ":", "\n", "            ", "self", ".", "num_classes_", "=", "data", ".", "num_classes", "\n", "", "except", "NotImplementedError", ":", "\n", "            ", "self", ".", "num_classes_", "=", "None", "\n", "\n", "# Return self", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.score": [[177, 194], ["logger.info", "lightning_module.NaturalPosteriorNetworkLightningModule", "estimator.NaturalPosteriorNetwork.trainer().test", "estimator.NaturalPosteriorNetwork.trainer", "k.split", "out[].items"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "data", ":", "DataModule", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        Measures the model performance on the given data.\n\n        Args:\n            data: The data for which to measure the model performance.\n\n        Returns:\n            A dictionary mapping metrics to their values. This dictionary includes a measure of\n            accuracy (`\"accuracy\"` for classification and `\"rmse\"` for regression) and a\n            calibration measure (`\"brier_score\"` for classification and `\"calibration\"` for\n            regression).\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Evaluating on test set...\"", ")", "\n", "module", "=", "NaturalPosteriorNetworkLightningModule", "(", "self", ".", "model_", ")", "\n", "out", "=", "self", ".", "trainer", "(", ")", ".", "test", "(", "module", ",", "data", ",", "verbose", "=", "False", ")", "\n", "return", "{", "k", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ":", "v", "for", "k", ",", "v", "in", "out", "[", "0", "]", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.score_ood_detection": [[195, 217], ["data.ood_dataloaders().items", "logger.info", "lightning_module_ood.NaturalPosteriorNetworkOodTestingLightningModule", "estimator.NaturalPosteriorNetwork.trainer().test", "data.ood_dataloaders", "estimator.NaturalPosteriorNetwork.trainer", "k.split", "result[].items"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.datasets.sensorless_drive.SensorlessDriveDataModule.ood_dataloaders"], ["", "def", "score_ood_detection", "(", "self", ",", "data", ":", "DataModule", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "float", "]", "]", ":", "\n", "        ", "\"\"\"\n        Measures the model's ability to detect out-of-distribution data.\n\n        Args:\n            data: The data module which provides one or more datasets that contain test data along\n                with out-of-distribution data.\n\n        Returns:\n            A nested dictionary which provides for multiple out-of-distribution datasets (first\n            key) multiple metrics for measuring epistemic and aleatoric uncertainty.\n        \"\"\"", "\n", "results", "=", "{", "}", "\n", "for", "dataset", ",", "loader", "in", "data", ".", "ood_dataloaders", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Evaluating in-distribution vs. %s...\"", ",", "dataset", ")", "\n", "module", "=", "NaturalPosteriorNetworkOodTestingLightningModule", "(", "\n", "self", ".", "model_", ",", "logging_key", "=", "f\"ood/{dataset}\"", "\n", ")", "\n", "result", "=", "self", ".", "trainer", "(", ")", ".", "test", "(", "module", ",", "loader", ",", "verbose", "=", "False", ")", "\n", "results", "[", "dataset", "]", "=", "{", "k", ".", "split", "(", "\"/\"", ")", "[", "2", "]", ":", "v", "for", "k", ",", "v", "in", "result", "[", "0", "]", ".", "items", "(", ")", "}", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.persistent_attributes": [[221, 224], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "persistent_attributes", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "k", "for", "k", "in", "self", ".", "__annotations__", "if", "k", "!=", "\"model_\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.save_parameters": [[225, 237], ["json.dumps", "f.write", "estimator.NaturalPosteriorNetwork.get_params().items", "typing.cast().items", "estimator.NaturalPosteriorNetwork.get_params", "typing.cast"], "methods", ["None"], ["", "def", "save_parameters", "(", "self", ",", "path", ":", "Path", ")", "->", "None", ":", "\n", "        ", "params", "=", "{", "\n", "k", ":", "(", "\n", "v", "\n", "if", "k", "!=", "\"trainer_params\"", "\n", "else", "{", "kk", ":", "vv", "for", "kk", ",", "vv", "in", "cast", "(", "Dict", "[", "str", ",", "Any", "]", ",", "v", ")", ".", "items", "(", ")", "if", "kk", "!=", "\"logger\"", "}", "\n", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "get_params", "(", ")", ".", "items", "(", ")", "\n", "}", "\n", "data", "=", "json", ".", "dumps", "(", "params", ",", "indent", "=", "4", ")", "\n", "with", "(", "path", "/", "\"params.json\"", ")", ".", "open", "(", "\"w+\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.save_attributes": [[238, 241], ["super().save_attributes", "torch.save", "estimator.NaturalPosteriorNetwork.model_.state_dict"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.save_attributes"], ["", "", "def", "save_attributes", "(", "self", ",", "path", ":", "Path", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "save_attributes", "(", "path", ")", "\n", "torch", ".", "save", "(", "self", ".", "model_", ".", "state_dict", "(", ")", ",", "path", "/", "\"parameters.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.load_attributes": [[242, 258], ["super().load_attributes", "torch.load", "estimator.NaturalPosteriorNetwork._init_model", "natpn.nn.NaturalPosteriorEnsembleModel.load_state_dict", "natpn.nn.NaturalPosteriorEnsembleModel", "natpn.nn.NaturalPosteriorEnsembleModel.load_state_dict", "estimator.NaturalPosteriorNetwork._init_model", "range"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.load_attributes", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._init_model", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._init_model"], ["", "def", "load_attributes", "(", "self", ",", "path", ":", "Path", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "load_attributes", "(", "path", ")", "\n", "parameters", "=", "torch", ".", "load", "(", "path", "/", "\"parameters.pt\"", ")", "\n", "if", "self", ".", "ensemble_size", "is", "None", ":", "\n", "            ", "model", "=", "self", ".", "_init_model", "(", "self", ".", "output_type_", ",", "self", ".", "input_size_", ",", "self", ".", "num_classes_", "or", "0", ")", "\n", "model", ".", "load_state_dict", "(", "parameters", ")", "\n", "self", ".", "model_", "=", "model", "\n", "", "else", ":", "\n", "            ", "model", "=", "NaturalPosteriorEnsembleModel", "(", "\n", "[", "\n", "self", ".", "_init_model", "(", "self", ".", "output_type_", ",", "self", ".", "input_size_", ",", "self", ".", "num_classes_", "or", "0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "ensemble_size", ")", "\n", "]", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "parameters", ")", "\n", "self", ".", "model_", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._fit_model": [[262, 333], ["logging.getLogger().getEffectiveLevel", "pytorch_lightning.callbacks.ModelCheckpoint", "logging.getLogger().setLevel", "estimator.NaturalPosteriorNetwork.trainer", "logging.getLogger().setLevel", "logger.info", "lightning_module.NaturalPosteriorNetworkLightningModule", "estimator.NaturalPosteriorNetwork.fit", "lightning_module.NaturalPosteriorNetworkLightningModule.load_from_checkpoint", "typing.cast", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule", "logging.getLogger().setLevel", "estimator.NaturalPosteriorNetwork.trainer", "logging.getLogger().setLevel", "logger.info", "estimator.NaturalPosteriorNetwork.fit", "pytorch_lightning.callbacks.ModelCheckpoint", "estimator.NaturalPosteriorNetwork.trainer", "logger.info", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule", "estimator.NaturalPosteriorNetwork.fit", "logging.getLogger", "logging.getLogger", "logging.getLogger", "typing.cast", "lightning_module_flow.NaturalPosteriorNetworkFlowLightningModule.load_from_checkpoint", "logging.getLogger", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork.fit"], ["", "", "def", "_fit_model", "(", "\n", "self", ",", "model", ":", "NaturalPosteriorNetworkModel", ",", "data", ":", "DataModule", ",", "tmp_dir", ":", "Path", "\n", ")", "->", "NaturalPosteriorNetworkModel", ":", "\n", "        ", "level", "=", "logging", ".", "getLogger", "(", "\"pytorch_lightning\"", ")", ".", "getEffectiveLevel", "(", ")", "\n", "\n", "# Run warmup", "\n", "if", "self", ".", "warmup_epochs", ">", "0", ":", "\n", "            ", "warmup_module", "=", "NaturalPosteriorNetworkFlowLightningModule", "(", "\n", "model", ",", "learning_rate", "=", "self", ".", "learning_rate", ",", "early_stopping", "=", "False", "\n", ")", "\n", "\n", "# Get trainer and print information", "\n", "logging", ".", "getLogger", "(", "\"pytorch_lightning\"", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "trainer", "=", "self", ".", "trainer", "(", "\n", "accumulate_grad_batches", "=", "data", ".", "gradient_accumulation_steps", ",", "\n", "enable_checkpointing", "=", "False", ",", "\n", "enable_model_summary", "=", "True", ",", "\n", "max_epochs", "=", "self", ".", "warmup_epochs", ",", "\n", ")", "\n", "logging", ".", "getLogger", "(", "\"pytorch_lightning\"", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "logger", ".", "info", "(", "\"Running warmup...\"", ")", "\n", "trainer", ".", "fit", "(", "warmup_module", ",", "data", ")", "\n", "\n", "# Run training", "\n", "", "trainer_checkpoint", "=", "ModelCheckpoint", "(", "tmp_dir", "/", "\"training\"", ",", "monitor", "=", "\"val/loss\"", ",", "mode", "=", "'min'", ")", "\n", "\n", "logging", ".", "getLogger", "(", "\"pytorch_lightning\"", ")", ".", "setLevel", "(", "\n", "logging", ".", "INFO", "if", "self", ".", "warmup_epochs", "==", "0", "else", "level", "\n", ")", "\n", "trainer", "=", "self", ".", "trainer", "(", "\n", "accumulate_grad_batches", "=", "data", ".", "gradient_accumulation_steps", ",", "\n", "callbacks", "=", "[", "trainer_checkpoint", "]", ",", "\n", "enable_model_summary", "=", "self", ".", "warmup_epochs", "==", "0", ",", "\n", ")", "\n", "logging", ".", "getLogger", "(", "\"pytorch_lightning\"", ")", ".", "setLevel", "(", "level", ")", "\n", "\n", "logger", ".", "info", "(", "\"Running training...\"", ")", "\n", "train_module", "=", "NaturalPosteriorNetworkLightningModule", "(", "\n", "model", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "learning_rate_decay", "=", "self", ".", "learning_rate_decay", ",", "\n", "entropy_weight", "=", "self", ".", "entropy_weight", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "train_module", ",", "data", ")", "\n", "\n", "best_module", "=", "NaturalPosteriorNetworkLightningModule", ".", "load_from_checkpoint", "(", "\n", "trainer_checkpoint", ".", "best_model_path", "\n", ")", "\n", "\n", "# Run fine-tuning", "\n", "if", "self", ".", "finetune", ":", "\n", "            ", "finetune_checkpoint", "=", "ModelCheckpoint", "(", "tmp_dir", "/", "\"finetuning\"", ",", "monitor", "=", "\"val/log_prob\"", ",", "mode", "=", "'max'", ")", "\n", "trainer", "=", "self", ".", "trainer", "(", "\n", "accumulate_grad_batches", "=", "data", ".", "gradient_accumulation_steps", ",", "\n", "callbacks", "=", "[", "finetune_checkpoint", "]", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Running fine-tuning...\"", ")", "\n", "finetune_module", "=", "NaturalPosteriorNetworkFlowLightningModule", "(", "\n", "cast", "(", "NaturalPosteriorNetworkModel", ",", "best_module", ".", "model", ")", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "learning_rate_decay", "=", "self", ".", "learning_rate_decay", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "finetune_module", ",", "data", ")", "\n", "\n", "# Return model", "\n", "return", "NaturalPosteriorNetworkFlowLightningModule", ".", "load_from_checkpoint", "(", "\n", "finetune_checkpoint", ".", "best_model_path", "\n", ")", ".", "model", "\n", "", "return", "cast", "(", "NaturalPosteriorNetworkModel", ",", "best_module", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.model.estimator.NaturalPosteriorNetwork._init_model": [[334, 382], ["natpn.nn.NaturalPosteriorNetworkModel", "natpn.nn.encoder.TabularEncoder", "natpn.nn.flow.RadialFlow", "natpn.nn.output.CategoricalOutput", "len", "natpn.nn.encoder.ShallowImageEncoder", "natpn.nn.flow.MaskedAutoregressiveFlow", "natpn.nn.output.NormalOutput", "natpn.nn.encoder.DeepImageEncoder", "natpn.nn.output.PoissonOutput", "natpn.nn.encoder.ResnetEncoder", "len", "natpn.nn.encoder.DenseDepthEncoder", "torch.Size"], "methods", ["None"], ["", "def", "_init_model", "(", "\n", "self", ",", "output_type", ":", "OutputType", ",", "input_size", ":", "torch", ".", "Size", ",", "num_classes", ":", "int", "\n", ")", "->", "NaturalPosteriorNetworkModel", ":", "\n", "# Initialize encoder", "\n", "        ", "if", "self", ".", "encoder", "==", "\"tabular\"", ":", "\n", "            ", "assert", "len", "(", "input_size", ")", "==", "1", ",", "\"Tabular encoder only allows for one-dimensional inputs.\"", "\n", "encoder", "=", "TabularEncoder", "(", "\n", "input_size", "[", "0", "]", ",", "[", "64", "]", "*", "3", ",", "self", ".", "latent_dim", ",", "dropout", "=", "self", ".", "dropout", "\n", ")", "\n", "", "elif", "self", ".", "encoder", "==", "\"image-shallow\"", ":", "\n", "            ", "encoder", "=", "ShallowImageEncoder", "(", "input_size", ",", "self", ".", "latent_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "encoder", "==", "\"image-deep\"", ":", "\n", "            ", "encoder", "=", "DeepImageEncoder", "(", "input_size", ",", "self", ".", "latent_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "assert", "len", "(", "input_size", ")", "==", "3", ",", "\"Resnet encoder requires three-dimensional inputs.\"", "\n", "encoder", "=", "ResnetEncoder", "(", "self", ".", "latent_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "self", ".", "encoder", "==", "\"dense-depth\"", ":", "\n", "            ", "assert", "input_size", "==", "torch", ".", "Size", "(", "\n", "[", "3", ",", "640", ",", "480", "]", "\n", ")", ",", "\"DenseDepth encoder requires input of shape [3, 640, 480].\"", "\n", "encoder", "=", "DenseDepthEncoder", "(", "self", ".", "latent_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Initialize flow", "\n", "", "if", "self", ".", "flow", "==", "\"radial\"", ":", "\n", "            ", "flow", "=", "RadialFlow", "(", "self", ".", "latent_dim", ",", "num_layers", "=", "self", ".", "flow_num_layers", ")", "\n", "", "elif", "self", ".", "flow", "==", "\"maf\"", ":", "\n", "            ", "flow", "=", "MaskedAutoregressiveFlow", "(", "self", ".", "latent_dim", ",", "num_layers", "=", "self", ".", "flow_num_layers", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Initialize output", "\n", "", "if", "output_type", "==", "\"categorical\"", ":", "\n", "            ", "output", "=", "CategoricalOutput", "(", "self", ".", "latent_dim", ",", "num_classes", ")", "\n", "", "elif", "output_type", "==", "\"normal\"", ":", "\n", "            ", "output", "=", "NormalOutput", "(", "self", ".", "latent_dim", ")", "\n", "", "elif", "output_type", "==", "\"poisson\"", ":", "\n", "            ", "output", "=", "PoissonOutput", "(", "self", ".", "latent_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "NaturalPosteriorNetworkModel", "(", "\n", "self", ".", "latent_dim", ",", "\n", "encoder", "=", "encoder", ",", "\n", "flow", "=", "flow", ",", "\n", "output", "=", "output", ",", "\n", "certainty_budget", "=", "self", ".", "certainty_budget", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.DirichletPrior.__init__": [[12, 19], ["_base.ConjugatePrior.__init__", "torch.as_tensor", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ",", "num_classes", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n            num_classes: The number of categories for the output distribution.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim", ",", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.DirichletPrior.update": [[20, 23], ["categorical.Dirichlet", "update.log_evidence.exp().unsqueeze", "update.log_evidence.exp"], "methods", ["None"], ["self", ".", "prior", "=", "D", ".", "DirichletPrior", "(", "num_categories", "=", "num_classes", ",", "evidence", "=", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "z", "=", "self", ".", "linear", ".", "forward", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet.__init__": [[30, 32], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet.expected_log_likelihood": [[33, 37], ["categorical.Dirichlet.alpha.sum", "categorical.Dirichlet.alpha.gather().squeeze", "categorical.Dirichlet.digamma", "categorical.Dirichlet.digamma", "categorical.Dirichlet.alpha.gather", "data.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet.entropy": [[38, 54], ["categorical.Dirichlet.alpha.size", "categorical.Dirichlet.alpha.sum", "torch.where", "categorical.Dirichlet.alpha.log().sum", "categorical.Dirichlet.log", "math.log", "categorical.Dirichlet.alpha.lgamma().sum", "categorical.Dirichlet.lgamma", "categorical.Dirichlet.digamma", "categorical.Dirichlet.alpha.log", "categorical.Dirichlet.alpha.digamma", "categorical.Dirichlet.alpha.lgamma"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet.maximum_a_posteriori": [[55, 57], ["categorical.Dirichlet._map"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet._map"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet.posterior_predictive": [[58, 60], ["categorical.Dirichlet._map"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet._map"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Dirichlet._map": [[61, 63], ["categorical.Categorical", "categorical.Dirichlet.alpha.log", "categorical.Dirichlet.alpha.sum().log", "categorical.Dirichlet.alpha.sum"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Categorical.__init__": [[70, 72], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Categorical.mean": [[73, 75], ["categorical.Categorical.logits.argmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Categorical.uncertainty": [[76, 78], ["categorical.Categorical.logits.exp"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Categorical.expected_sufficient_statistics": [[79, 81], ["categorical.Categorical.logits.exp"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.categorical.Categorical.symmetric_confidence_level": [[82, 84], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base._Distribution.mean": [[20, 28], ["None"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base._Distribution.uncertainty": [[29, 38], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.Likelihood.expected_sufficient_statistics": [[46, 54], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.ConjugatePrior.__init__": [[66, 70], ["super().__init__", "_base.ConjugatePrior.register_buffer", "_base.ConjugatePrior.register_buffer"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.ConjugatePrior.update": [[71, 82], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.Posterior.expected_log_likelihood": [[89, 104], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.Posterior.entropy": [[105, 113], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.Posterior.maximum_a_posteriori": [[114, 123], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.Posterior.posterior_predictive": [[124, 133], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._base.PosteriorPredictive.symmetric_confidence_level": [[140, 156], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions._utils.mixture_posterior_update": [[7, 32], ["torch.stack", "torch.stack", "torch.stack.softmax", "weights.view.view", "torch.stack.size", "_base.PosteriorUpdate", "torch.stack.dim", "torch.stack.dim", "torch.stack.logsumexp", "math.log", "weights.view.size"], "function", ["None"], ["def", "mixture_posterior_update", "(", "updates", ":", "List", "[", "PosteriorUpdate", "]", ")", "->", "PosteriorUpdate", ":", "\n", "    ", "\"\"\"\n    Computes the posterior update from a mixture of updates.\n\n    Args:\n        updates: The posterior updates to join into a mixture.\n\n    Returns:\n        The joint posterior update.\n    \"\"\"", "\n", "stacked_sufficient_statistics", "=", "torch", ".", "stack", "(", "[", "u", ".", "sufficient_statistics", "for", "u", "in", "updates", "]", ")", "\n", "stacked_log_evidences", "=", "torch", ".", "stack", "(", "[", "u", ".", "log_evidence", "for", "u", "in", "updates", "]", ")", "\n", "\n", "# Compute the weighted sufficient statistics", "\n", "sufficient_statistics_dims", "=", "stacked_sufficient_statistics", ".", "dim", "(", ")", "-", "stacked_log_evidences", ".", "dim", "(", ")", "\n", "weights", "=", "stacked_log_evidences", ".", "softmax", "(", "0", ")", "\n", "weights", "=", "weights", ".", "view", "(", "weights", ".", "size", "(", ")", "+", "(", "1", ",", ")", "*", "sufficient_statistics_dims", ")", "\n", "\n", "sufficient_statistics", "=", "(", "stacked_sufficient_statistics", "*", "weights", ")", ".", "sum", "(", "0", ")", "\n", "\n", "# Compute the average log evidence", "\n", "num_mixtures", "=", "stacked_log_evidences", ".", "size", "(", "0", ")", "\n", "log_evidence", "=", "stacked_log_evidences", ".", "logsumexp", "(", "0", ")", "-", "math", ".", "log", "(", "num_mixtures", ")", "\n", "\n", "return", "PosteriorUpdate", "(", "sufficient_statistics", ",", "log_evidence", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.NegativeBinomial.__init__": [[13, 16], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.NegativeBinomial.mean": [[17, 19], ["None"], "methods", ["None"], ["super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim", ",", "1", ")", "\n", "self", ".", "prior", "=", "D", ".", "GammaPrior", "(", "rate", "=", "1", ",", "evidence", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.NegativeBinomial.uncertainty": [[20, 22], ["None"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "z", "=", "self", ".", "linear", ".", "forward", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.NegativeBinomial.symmetric_confidence_level": [[23, 36], ["scipy.nbinom.cdf", "torch.from_numpy().to", "torch.is_grad_enabled", "data.cpu().double().numpy", "poisson.NegativeBinomial.num_failures.cpu().double().numpy", "poisson.NegativeBinomial.success_probability.cpu().double().numpy", "torch.from_numpy", "data.cpu().double", "poisson.NegativeBinomial.num_failures.cpu().double", "poisson.NegativeBinomial.success_probability.cpu().double", "data.cpu", "poisson.NegativeBinomial.num_failures.cpu", "poisson.NegativeBinomial.success_probability.cpu"], "methods", ["None"], ["return", "D", ".", "Poisson", "(", "z", ".", "squeeze", "(", "-", "1", ")", ".", "exp", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.GammaPrior.__init__": [[46, 48], ["_base.ConjugatePrior.__init__", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.GammaPrior.update": [[49, 56], ["update.log_evidence.exp", "poisson.Gamma"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Gamma.__init__": [[63, 67], ["_base.Posterior.__init__"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Gamma.expected_log_likelihood": [[68, 72], ["poisson.Gamma.shape.digamma", "poisson.Gamma.rate.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Gamma.entropy": [[73, 85], ["torch.where", "poisson.Gamma.rate.log", "poisson.Gamma.shape.lgamma", "poisson.Gamma.shape.digamma", "math.log", "poisson.Gamma.shape.log", "poisson.Gamma.rate.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Gamma.maximum_a_posteriori": [[86, 88], ["poisson.Poisson"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Gamma.posterior_predictive": [[89, 91], ["poisson.NegativeBinomial"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Poisson.__init__": [[98, 100], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Poisson.mean": [[101, 103], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Poisson.uncertainty": [[104, 106], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.poisson.Poisson.expected_sufficient_statistics": [[107, 109], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.StudentT.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dim", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dim: The dimension of the latent space.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.StudentT.mean": [[18, 20], ["None"], "methods", ["None"], ["super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim", ",", "2", ")", "\n", "self", ".", "prior", "=", "D", ".", "NormalGammaPrior", "(", "mean", "=", "0", ",", "scale", "=", "10", ",", "evidence", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.StudentT.uncertainty": [[21, 28], ["torch.lgamma", "torch.lgamma", "math.lgamma", "normal.StudentT.precision.log", "torch.digamma", "torch.digamma", "normal.StudentT.df.log"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "D", ".", "Likelihood", ":", "\n", "        ", "z", "=", "self", ".", "linear", ".", "forward", "(", "x", ")", "\n", "loc", ",", "log_precision", "=", "chunk_squeeze_last", "(", "z", ")", "\n", "return", "D", ".", "Normal", "(", "loc", ",", "log_precision", ".", "exp", "(", ")", "+", "1e-10", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.StudentT.symmetric_confidence_level": [[29, 42], ["scipy.t.cdf", "torch.from_numpy().to", "torch.is_grad_enabled", "data.cpu().numpy", "normal.StudentT.df.cpu().numpy", "normal.StudentT.loc.cpu().numpy", "normal.StudentT.precision.reciprocal().sqrt().cpu().numpy", "torch.from_numpy", "data.cpu", "normal.StudentT.df.cpu", "normal.StudentT.loc.cpu", "normal.StudentT.precision.reciprocal().sqrt().cpu", "normal.StudentT.precision.reciprocal().sqrt", "normal.StudentT.precision.reciprocal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGammaPrior.__init__": [[49, 58], ["_base.ConjugatePrior.__init__", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGammaPrior.update": [[60, 78], ["natpn.utils.chunk_squeeze_last", "update.log_evidence.exp", "normal.NormalGamma"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.utils.chunk.chunk_squeeze_last"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.__init__": [[85, 92], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.expected_log_likelihood": [[93, 98], ["math.log", "normal.NormalGamma.lambd.reciprocal", "normal.NormalGamma.alpha.digamma", "normal.NormalGamma.beta.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.entropy": [[99, 106], ["torch.where", "math.log", "normal.NormalGamma.alpha.lgamma", "normal.NormalGamma.alpha.digamma", "normal.NormalGamma.alpha.log", "normal.NormalGamma.beta.log", "normal.NormalGamma.lambd.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.maximum_a_posteriori": [[107, 109], ["normal.Normal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.NormalGamma.posterior_predictive": [[110, 115], ["normal.StudentT"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.__init__": [[122, 125], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.mean": [[126, 128], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.uncertainty": [[129, 131], ["normal.Normal.precision.log", "math.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.distributions.normal.Normal.expected_sufficient_statistics": [[132, 134], ["torch.stack", "normal.Normal.precision.reciprocal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.brier.BrierScore.__init__": [[14, 19], ["torchmetrics.Metric.__init__", "brier.BrierScore.add_state", "brier.BrierScore.add_state", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "compute_on_step", ":", "bool", "=", "True", ",", "dist_sync_fn", ":", "Any", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "compute_on_step", "=", "compute_on_step", ",", "dist_sync_fn", "=", "dist_sync_fn", ")", "\n", "\n", "self", ".", "add_state", "(", "\"norm_sum\"", ",", "torch", ".", "zeros", "(", "1", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "self", ".", "add_state", "(", "\"norm_count\"", ",", "torch", ".", "zeros", "(", "1", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.brier.BrierScore.update": [[20, 30], ["y_pred.size", "y_pred.clone", "torch.arange", "y_pred.clone.norm", "brier.BrierScore.norm_sum.add_", "brier.BrierScore.norm_count.add_", "y_pred.clone.norm.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "num_items", "=", "y_pred", ".", "size", "(", "0", ")", "\n", "\n", "prob", "=", "y_pred", ".", "clone", "(", ")", "\n", "indices", "=", "torch", ".", "arange", "(", "num_items", ")", "\n", "prob", "[", "indices", ",", "y_true", "]", "-=", "1", "\n", "norm", "=", "prob", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "norm_sum", ".", "add_", "(", "norm", ".", "sum", "(", ")", ")", "\n", "self", ".", "norm_count", ".", "add_", "(", "num_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.brier.BrierScore.compute": [[31, 33], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "norm_sum", "/", "self", ".", "norm_count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.calibration.QuantileCalibrationScore.__init__": [[11, 17], ["torchmetrics.Metric.__init__", "range", "calibration.QuantileCalibrationScore.add_state", "calibration.QuantileCalibrationScore.add_state", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "compute_on_step", ":", "bool", "=", "True", ",", "dist_sync_fn", ":", "Any", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "compute_on_step", "=", "compute_on_step", ",", "dist_sync_fn", "=", "dist_sync_fn", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ",", "100", ",", "10", ")", ":", "\n", "            ", "self", ".", "add_state", "(", "f\"level_{i}_sum\"", ",", "torch", ".", "zeros", "(", "1", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "self", ".", "add_state", "(", "f\"level_{i}_count\"", ",", "torch", ".", "zeros", "(", "1", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.calibration.QuantileCalibrationScore.update": [[18, 23], ["range", "typing.cast().add_", "typing.cast().add_", "contained.sum", "contained.numel", "typing.cast", "typing.cast", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "confidence_levels", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ",", "100", ",", "10", ")", ":", "\n", "            ", "contained", "=", "(", "(", "1", "-", "confidence_levels", ")", "<=", "(", "i", "/", "100", ")", ")", ".", "float", "(", ")", "\n", "cast", "(", "torch", ".", "Tensor", ",", "getattr", "(", "self", ",", "f\"level_{i}_sum\"", ")", ")", ".", "add_", "(", "contained", ".", "sum", "(", ")", ")", "\n", "cast", "(", "torch", ".", "Tensor", ",", "getattr", "(", "self", ",", "f\"level_{i}_count\"", ")", ")", ".", "add_", "(", "contained", ".", "numel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.calibration.QuantileCalibrationScore.compute": [[24, 35], ["typing.cast", "typing.cast", "range", "getattr", "getattr", "typing.cast", "typing.cast", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "compute", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "q_sum", "=", "cast", "(", "torch", ".", "Tensor", ",", "getattr", "(", "self", ",", "\"level_10_sum\"", ")", ")", "\n", "q_count", "=", "cast", "(", "torch", ".", "Tensor", ",", "getattr", "(", "self", ",", "\"level_10_count\"", ")", ")", "\n", "squared_sum", "=", "(", "q_sum", "/", "q_count", "-", "0.1", ")", "**", "2", "\n", "\n", "for", "i", "in", "range", "(", "20", ",", "100", ",", "10", ")", ":", "\n", "            ", "q_sum", "=", "cast", "(", "torch", ".", "Tensor", ",", "getattr", "(", "self", ",", "f\"level_{i}_sum\"", ")", ")", "\n", "q_count", "=", "cast", "(", "torch", ".", "Tensor", ",", "getattr", "(", "self", ",", "f\"level_{i}_count\"", ")", ")", "\n", "squared_sum", "+=", "(", "q_sum", "/", "q_count", "-", "i", "/", "100", ")", "**", "2", "\n", "\n", "", "return", "(", "squared_sum", "/", "9", ")", ".", "sqrt", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__": [[15, 20], ["torchmetrics.Metric.__init__", "torchmetrics.Metric.__init__", "aucpr.AUCPR.add_state", "aucpr.AUCPR.add_state"], "methods", ["home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__", "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.__init__"], ["def", "__init__", "(", "self", ",", "compute_on_step", ":", "bool", "=", "True", ",", "dist_sync_fn", ":", "Any", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "compute_on_step", "=", "compute_on_step", ",", "dist_sync_fn", "=", "dist_sync_fn", ")", "\n", "\n", "self", ".", "add_state", "(", "\"values\"", ",", "[", "]", ",", "dist_reduce_fx", "=", "\"cat\"", ")", "\n", "self", ".", "add_state", "(", "\"targets\"", ",", "[", "]", ",", "dist_reduce_fx", "=", "\"cat\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.update": [[21, 24], ["aucpr.AUCPR.values.append", "aucpr.AUCPR.targets.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "values", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "self", ".", "values", ".", "append", "(", "values", ")", "\n", "self", ".", "targets", ".", "append", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borchero_natural-posterior-network.metrics.aucpr.AUCPR.compute": [[25, 30], ["torchmetrics.precision_recall_curve", "torchmetrics.precision_recall_curve", "torchmetrics.auc", "torchmetrics.auc", "torch.cat", "torch.cat", "typing.cast", "typing.cast"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "precision", ",", "recall", ",", "_", "=", "M", ".", "precision_recall_curve", "(", "\n", "torch", ".", "cat", "(", "self", ".", "values", ")", ",", "torch", ".", "cat", "(", "self", ".", "targets", ")", ",", "pos_label", "=", "1", "\n", ")", "\n", "return", "M", ".", "auc", "(", "cast", "(", "torch", ".", "Tensor", ",", "recall", ")", ",", "cast", "(", "torch", ".", "Tensor", ",", "precision", ")", ",", "reorder", "=", "True", ")", "\n", "", "", ""]]}