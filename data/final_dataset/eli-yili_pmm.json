{"home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.Normalize.__init__": [[9, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.Normalize.__call__": [[14, 23], ["numpy.asarray", "numpy.empty_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgarr", "=", "np", ".", "asarray", "(", "img", ")", "\n", "proc_img", "=", "np", ".", "empty_like", "(", "imgarr", ",", "np", ".", "float32", ")", "\n", "\n", "proc_img", "[", "...", ",", "0", "]", "=", "(", "imgarr", "[", "...", ",", "0", "]", "/", "255.", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "proc_img", "[", "...", ",", "1", "]", "=", "(", "imgarr", "[", "...", ",", "1", "]", "/", "255.", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "proc_img", "[", "...", ",", "2", "]", "=", "(", "imgarr", "[", "...", ",", "2", "]", "/", "255.", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "\n", "return", "proc_img", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.SABlock.__init__": [[29, 53], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "downsample", "=", "False", ",", "structure", "=", "[", "]", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "SABlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "channels", "=", "structure", "[", "SABlock", ".", "layer_idx", "]", "[", ":", "-", "1", "]", "\n", "side", "=", "structure", "[", "SABlock", ".", "layer_idx", "]", "[", "-", "1", "]", "\n", "SABlock", ".", "layer_idx", "+=", "1", "\n", "self", ".", "scales", "=", "[", "None", ",", "2", ",", "4", ",", "7", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "downsample", "=", "None", "if", "downsample", "==", "False", "else", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "SABlock", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "SABlock", ".", "expansion", ")", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "# kernel size == 1 if featuremap size == 1", "\n", "self", ".", "conv2", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "planes", ",", "channels", "[", "i", "]", ",", "kernel_size", "=", "3", "if", "side", "/", "2", "**", "i", ">", "1", "else", "1", ",", "stride", "=", "1", ",", "padding", "=", "dilation", "if", "side", "/", "2", "**", "i", ">", "1", "else", "0", ",", "bias", "=", "bias", ",", "dilation", "=", "dilation", "if", "side", "/", "2", "**", "i", ">", "1", "else", "1", ")", "if", "channels", "[", "i", "]", ">", "0", "else", "None", "for", "i", "in", "range", "(", "len", "(", "self", ".", "scales", ")", ")", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm2d", "(", "channels", "[", "i", "]", ")", "if", "channels", "[", "i", "]", ">", "0", "else", "None", "for", "i", "in", "range", "(", "len", "(", "self", ".", "scales", ")", ")", "]", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "sum", "(", "channels", ")", ",", "planes", "*", "SABlock", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "SABlock", ".", "expansion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.SABlock.forward": [[55, 90], ["scalenet.SABlock.conv1", "torch.relu", "torch.relu", "torch.relu", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "scalenet.SABlock.conv3", "scalenet.SABlock.bn3", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "scalenet.SABlock.downsample", "scalenet.SABlock.bn1", "torch.relu.size", "torch.relu.size", "len", "torch.upsample", "torch.upsample", "torch.upsample", "out2_list.append", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "self", ".", "stride", ",", "self", ".", "stride", ")", "if", "self", ".", "stride", ">", "1", "else", "x", "\n", "\n", "residual", "=", "self", ".", "downsample", "(", "x", ")", "if", "self", ".", "downsample", "!=", "None", "else", "x", "\n", "\n", "out1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out1", ")", ")", "\n", "\n", "out2_list", "=", "[", "]", "\n", "size", "=", "[", "out1", ".", "size", "(", "2", ")", ",", "out1", ".", "size", "(", "3", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "            ", "out2_i", "=", "out1", "# copy", "\n", "if", "self", ".", "scales", "[", "i", "]", "!=", "None", ":", "\n", "                ", "if", "out2_i", ".", "shape", "[", "3", "]", "<", "self", ".", "scales", "[", "i", "]", "or", "out2_i", ".", "shape", "[", "2", "]", "<", "self", ".", "scales", "[", "i", "]", ":", "\n", "                    ", "out2_i", "=", "F", ".", "max_pool2d", "(", "out2_i", ",", "out2_i", ".", "shape", "[", "2", "]", ",", "out2_i", ".", "shape", "[", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out2_i", "=", "F", ".", "max_pool2d", "(", "out2_i", ",", "self", ".", "scales", "[", "i", "]", ",", "self", ".", "scales", "[", "i", "]", ")", "\n", "", "", "if", "self", ".", "conv2", "[", "i", "]", "!=", "None", ":", "\n", "                ", "out2_i", "=", "self", ".", "conv2", "[", "i", "]", "(", "out2_i", ")", "\n", "", "if", "self", ".", "scales", "[", "i", "]", "!=", "None", ":", "\n", "# nearest mode is not suitable for upsampling on non-integer multiples ", "\n", "                ", "mode", "=", "'nearest'", "if", "size", "[", "0", "]", "%", "out2_i", ".", "shape", "[", "2", "]", "==", "0", "and", "size", "[", "1", "]", "%", "out2_i", ".", "shape", "[", "3", "]", "==", "0", "else", "'bilinear'", "\n", "out2_i", "=", "F", ".", "upsample", "(", "out2_i", ",", "size", "=", "size", ",", "mode", "=", "mode", ")", "\n", "", "if", "self", ".", "bn2", "[", "i", "]", "!=", "None", ":", "\n", "                ", "out2_i", "=", "self", ".", "bn2", "[", "i", "]", "(", "out2_i", ")", "\n", "out2_list", ".", "append", "(", "out2_i", ")", "\n", "", "", "out2", "=", "torch", ".", "cat", "(", "out2_list", ",", "1", ")", "\n", "out2", "=", "F", ".", "relu", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "conv3", "(", "out2", ")", "\n", "out3", "=", "self", ".", "bn3", "(", "out3", ")", "\n", "out3", "+=", "residual", "\n", "out3", "=", "F", ".", "relu", "(", "out3", ")", "\n", "\n", "return", "out3", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.ScaleNet.__init__": [[94, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "scalenet.ScaleNet._make_layer", "scalenet.ScaleNet._make_layer", "scalenet.ScaleNet._make_layer", "scalenet.ScaleNet._make_layer", "scalenet.ScaleNet.modules", "scalenet.Normalize", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "structure", ",", "dilations", "=", "(", "1", ",", "1", ",", "2", ",", "4", ")", ")", ":", "\n", "        ", "super", "(", "ScaleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "structure", "=", "structure", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "dilation", "=", "dilations", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "dilation", "=", "dilations", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "dilations", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "dilations", "[", "3", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "self", ".", "normalize", "=", "Normalize", "(", ")", "\n", "self", ".", "not_training", "=", "[", "]", "\n", "block", ".", "layer_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.ScaleNet._make_layer": [[120, 129], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "True", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "else", "False", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "structure", "=", "self", ".", "structure", ",", "dilation", "=", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "downsample", "=", "False", ",", "structure", "=", "self", ".", "structure", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.ScaleNet.forward": [[131, 143], ["scalenet.ScaleNet.conv1", "scalenet.ScaleNet.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "scalenet.ScaleNet.layer1", "scalenet.ScaleNet.layer2", "scalenet.ScaleNet.layer3", "scalenet.ScaleNet.layer4", "dict"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "3", ",", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "return", "dict", "(", "{", "'x2'", ":", "x2", ",", "'x3'", ":", "x3", ",", "'x4'", ":", "x4", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.ScaleNet.train": [[144, 165], ["super().train", "scalenet.ScaleNet.modules", "isinstance", "isinstance", "isinstance", "layer.eval", "layer.parameters"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n", "for", "layer", "in", "self", ".", "not_training", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "for", "p", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.scalenet50": [[167, 178], ["json.loads", "scalenet.ScaleNet", "open().read", "torch.load", "torch.load", "torch.load", "ScaleNet.load_state_dict", "open"], "function", ["None"], ["", "", "def", "scalenet50", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "ScaleNet", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.scalenet101": [[180, 191], ["json.loads", "scalenet.ScaleNet", "open().read", "torch.load", "torch.load", "torch.load", "ScaleNet.load_state_dict", "open"], "function", ["None"], ["", "def", "scalenet101", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "ScaleNet", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet.scalenet152": [[193, 204], ["json.loads", "scalenet.ScaleNet", "open().read", "torch.load", "torch.load", "torch.load", "ScaleNet.load_state_dict", "open"], "function", ["None"], ["", "def", "scalenet152", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "ScaleNet", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_SEAM.Net.__init__": [[12, 27], ["network.resnets.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "print", "sum", "p.numel", "resnets_SEAM.Net.parameters"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Conv2d", "(", "2048", ",", "21", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f9", "=", "torch", ".", "nn", ".", "Conv2d", "(", "192", "+", "3", ",", "192", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc8", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_3", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_4", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "f9", ".", "weight", ",", "gain", "=", "4", ")", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "f8_3", ",", "self", ".", "f8_4", ",", "self", ".", "f9", ",", "self", ".", "fc8", "]", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "layer1", "]", "\n", "\n", "print", "(", "'Total params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_SEAM.Net.forward": [[28, 50], ["x.size", "super().forward", "resnets_SEAM.Net.fc8", "torch.interpolate.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnets_SEAM.Net.f8_3", "resnets_SEAM.Net.f8_4", "resnets_SEAM.Net.PCM", "torch.interpolate.detach", "[].view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "d[].detach", "d[].detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.PCM"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "d", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "cam", "=", "self", ".", "fc8", "(", "d", "[", "'x4'", "]", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "cam", ".", "size", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cam_d", "=", "F", ".", "relu", "(", "cam", ".", "detach", "(", ")", ")", "\n", "cam_d_max", "=", "torch", ".", "max", "(", "cam_d", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "cam_d_norm", "=", "F", ".", "relu", "(", "cam_d", "-", "1e-5", ")", "/", "cam_d_max", "\n", "cam_d_norm", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "1", "-", "torch", ".", "max", "(", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "cam_max", "=", "torch", ".", "max", "(", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "[", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "<", "cam_max", "]", "=", "0", "\n", "\n", "", "f8_3", "=", "F", ".", "relu", "(", "self", ".", "f8_3", "(", "d", "[", "'x2'", "]", ".", "detach", "(", ")", ")", ",", "inplace", "=", "True", ")", "\n", "f8_4", "=", "F", ".", "relu", "(", "self", ".", "f8_4", "(", "d", "[", "'x3'", "]", ".", "detach", "(", ")", ")", ",", "inplace", "=", "True", ")", "\n", "x_s", "=", "F", ".", "interpolate", "(", "x", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "f", "=", "torch", ".", "cat", "(", "[", "x_s", ",", "f8_3", ",", "f8_4", "]", ",", "dim", "=", "1", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "\n", "cam_rv", "=", "F", ".", "interpolate", "(", "self", ".", "PCM", "(", "cam_d_norm", ",", "f", ")", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "cam", ",", "cam_rv", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_SEAM.Net.PCM": [[51, 62], ["f.view.view.size", "torch.interpolate().view", "torch.interpolate().view", "torch.interpolate().view", "torch.interpolate().view", "resnets_SEAM.Net.f9", "f.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "f.view.view.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "PCM", "(", "self", ",", "cam", ",", "f", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "view", "(", "n", ",", "-", "1", ",", "h", "*", "w", ")", "\n", "f", "=", "self", ".", "f9", "(", "f", ")", "\n", "f", "=", "f", ".", "view", "(", "n", ",", "-", "1", ",", "h", "*", "w", ")", "\n", "f", "=", "f", "/", "(", "torch", ".", "norm", "(", "f", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "\n", "aff", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "f", ".", "transpose", "(", "1", ",", "2", ")", ",", "f", ")", ",", "inplace", "=", "True", ")", "\n", "aff", "=", "aff", "/", "(", "torch", ".", "sum", "(", "aff", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "cam_rv", "=", "torch", ".", "matmul", "(", "cam", ",", "aff", ")", ".", "view", "(", "n", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "return", "cam_rv", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_SEAM.Net.get_parameter_groups": [[63, 83], ["print", "resnets_SEAM.Net.modules", "isinstance", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "        ", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "print", "(", "'======================================================'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "normalization", ".", "GroupNorm", ")", ")", ":", "\n", "\n", "                ", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "", "return", "groups", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_SEAM.Net.__init__": [[13, 30], ["super().__init__", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "print", "sum", "p.numel", "resnet38_SEAM.Net.parameters"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_cls", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout7", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "\n", "self", ".", "fc8", "=", "nn", ".", "Conv2d", "(", "4096", ",", "num_cls", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f9", "=", "torch", ".", "nn", ".", "Conv2d", "(", "192", "+", "3", ",", "192", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "#torch.nn.init.xavier_uniform_(self.fc8.weight)", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_3", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_4", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "f9", ".", "weight", ",", "gain", "=", "4", ")", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "f8_3", ",", "self", ".", "f8_4", ",", "self", ".", "f9", ",", "self", ".", "fc8", "]", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1a", ",", "self", ".", "b2", ",", "self", ".", "b2_1", ",", "self", ".", "b2_2", "]", "\n", "\n", "print", "(", "'Total params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_SEAM.Net.forward": [[31, 56], ["x.size", "super().forward_as_dict", "resnet38_SEAM.Net.fc8", "torch.interpolate.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "resnet38_SEAM.Net.dropout7", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet38_SEAM.Net.f8_3", "resnet38_SEAM.Net.f8_4", "resnet38_SEAM.Net.PCM", "torch.interpolate.detach", "[].view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "d[].detach", "d[].detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.forward_as_dict", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.PCM"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "d", "=", "super", "(", ")", ".", "forward_as_dict", "(", "x", ")", "\n", "cam", "=", "self", ".", "fc8", "(", "self", ".", "dropout7", "(", "d", "[", "'conv6'", "]", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "cam", ".", "size", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cam_d", "=", "F", ".", "relu", "(", "cam", ".", "detach", "(", ")", ")", "\n", "cam_d_max", "=", "torch", ".", "max", "(", "cam_d", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "cam_d_norm", "=", "F", ".", "relu", "(", "cam_d", "-", "1e-5", ")", "/", "cam_d_max", "\n", "cam_d_norm", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "1", "-", "torch", ".", "max", "(", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "cam_max", "=", "torch", ".", "max", "(", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "try", ":", "\n", "                ", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "[", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "<", "cam_max", "]", "=", "0", "\n", "", "except", ":", "\n", "                ", "return", "None", ",", "None", "\n", "\n", "", "", "f8_3", "=", "F", ".", "relu", "(", "self", ".", "f8_3", "(", "d", "[", "'conv4'", "]", ".", "detach", "(", ")", ")", ",", "inplace", "=", "True", ")", "\n", "f8_4", "=", "F", ".", "relu", "(", "self", ".", "f8_4", "(", "d", "[", "'conv5'", "]", ".", "detach", "(", ")", ")", ",", "inplace", "=", "True", ")", "\n", "x_s", "=", "F", ".", "interpolate", "(", "x", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "f", "=", "torch", ".", "cat", "(", "[", "x_s", ",", "f8_3", ",", "f8_4", "]", ",", "dim", "=", "1", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "\n", "cam_rv", "=", "F", ".", "interpolate", "(", "self", ".", "PCM", "(", "cam_d_norm", ",", "f", ")", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "cam", ",", "cam_rv", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_SEAM.Net.PCM": [[57, 68], ["f.view.view.size", "torch.interpolate().view", "torch.interpolate().view", "torch.interpolate().view", "torch.interpolate().view", "resnet38_SEAM.Net.f9", "f.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "f.view.view.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "PCM", "(", "self", ",", "cam", ",", "f", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "view", "(", "n", ",", "-", "1", ",", "h", "*", "w", ")", "\n", "f", "=", "self", ".", "f9", "(", "f", ")", "\n", "f", "=", "f", ".", "view", "(", "n", ",", "-", "1", ",", "h", "*", "w", ")", "\n", "f", "=", "f", "/", "(", "torch", ".", "norm", "(", "f", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "\n", "aff", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "f", ".", "transpose", "(", "1", ",", "2", ")", ",", "f", ")", ",", "inplace", "=", "True", ")", "\n", "aff", "=", "aff", "/", "(", "torch", ".", "sum", "(", "aff", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "cam_rv", "=", "torch", ".", "matmul", "(", "cam", ",", "aff", ")", ".", "view", "(", "n", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "return", "cam_rv", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_SEAM.Net.get_parameter_groups": [[69, 89], ["print", "resnet38_SEAM.Net.modules", "isinstance", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "        ", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "print", "(", "'======================================================'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "normalization", ".", "GroupNorm", ")", ")", ":", "\n", "\n", "                ", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_aff.Net.__init__": [[10, 32], ["network.resnets.ResNet.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "int", "tool.pyutils.get_indices_of_pairs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "f8_3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "2048", ",", "256", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "f9", "=", "torch", ".", "nn", ".", "Conv2d", "(", "448", ",", "448", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_3", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_4", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_5", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "f9", ".", "weight", ",", "gain", "=", "4", ")", "\n", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "layer1", "]", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "f8_3", ",", "self", ".", "f8_4", ",", "self", ".", "f8_5", ",", "self", ".", "f9", "]", "\n", "\n", "self", ".", "predefined_featuresize", "=", "int", "(", "448", "//", "8", ")", "\n", "self", ".", "radius", "=", "5", "\n", "self", ".", "ind_from", ",", "self", ".", "ind_to", "=", "pyutils", ".", "get_indices_of_pairs", "(", "radius", "=", "self", ".", "radius", ",", "size", "=", "(", "self", ".", "predefined_featuresize", ",", "self", ".", "predefined_featuresize", ")", ")", "\n", "self", ".", "ind_from", "=", "torch", ".", "from_numpy", "(", "self", ".", "ind_from", ")", ";", "self", ".", "ind_to", "=", "torch", ".", "from_numpy", "(", "self", ".", "ind_to", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_aff.Net.forward": [[33, 80], ["super().forward", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "x.view().contiguous.view().contiguous.view().contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "ft.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "resnets_aff.Net.f8_3", "resnets_aff.Net.f8_4", "resnets_aff.Net.f8_5", "resnets_aff.Net.f9", "min", "tool.pyutils.get_indices_of_pairs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ft.view.view.size", "ft.view.view.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "aff.view().cpu.view().cpu.view().cpu", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.view().contiguous.view().contiguous.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.view", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "aff.view().cpu.view().cpu.view", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ft.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs"], ["", "def", "forward", "(", "self", ",", "x", ",", "to_dense", "=", "False", ")", ":", "\n", "\n", "        ", "d", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "\n", "f8_3", "=", "F", ".", "elu", "(", "self", ".", "f8_3", "(", "d", "[", "'x2'", "]", ")", ")", "\n", "f8_4", "=", "F", ".", "elu", "(", "self", ".", "f8_4", "(", "d", "[", "'x3'", "]", ")", ")", "\n", "f8_5", "=", "F", ".", "elu", "(", "self", ".", "f8_5", "(", "d", "[", "'x4'", "]", ")", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "f9", "(", "torch", ".", "cat", "(", "[", "f8_3", ",", "f8_4", ",", "f8_5", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "if", "x", ".", "size", "(", "2", ")", "==", "self", ".", "predefined_featuresize", "and", "x", ".", "size", "(", "3", ")", "==", "self", ".", "predefined_featuresize", ":", "\n", "            ", "ind_from", "=", "self", ".", "ind_from", "\n", "ind_to", "=", "self", ".", "ind_to", "\n", "", "else", ":", "\n", "            ", "min_edge", "=", "min", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "radius", "=", "(", "min_edge", "-", "1", ")", "//", "2", "if", "min_edge", "<", "self", ".", "radius", "*", "2", "+", "1", "else", "self", ".", "radius", "\n", "ind_from", ",", "ind_to", "=", "pyutils", ".", "get_indices_of_pairs", "(", "radius", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "ind_from", "=", "torch", ".", "from_numpy", "(", "ind_from", ")", ";", "ind_to", "=", "torch", ".", "from_numpy", "(", "ind_to", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "ind_from", "=", "ind_from", ".", "contiguous", "(", ")", "\n", "ind_to", "=", "ind_to", ".", "contiguous", "(", ")", "\n", "\n", "ff", "=", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "2", ",", "index", "=", "ind_from", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "ft", "=", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "2", ",", "index", "=", "ind_to", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "ff", "=", "torch", ".", "unsqueeze", "(", "ff", ",", "dim", "=", "2", ")", "\n", "ft", "=", "ft", ".", "view", "(", "ft", ".", "size", "(", "0", ")", ",", "ft", ".", "size", "(", "1", ")", ",", "-", "1", ",", "ff", ".", "size", "(", "3", ")", ")", "\n", "\n", "aff", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "ft", "-", "ff", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "to_dense", ":", "\n", "            ", "aff", "=", "aff", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "ind_from_exp", "=", "torch", ".", "unsqueeze", "(", "ind_from", ",", "dim", "=", "0", ")", ".", "expand", "(", "ft", ".", "size", "(", "2", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "indices", "=", "torch", ".", "stack", "(", "[", "ind_from_exp", ",", "ind_to", "]", ")", "\n", "indices_tp", "=", "torch", ".", "stack", "(", "[", "ind_to", ",", "ind_from_exp", "]", ")", "\n", "\n", "area", "=", "x", ".", "size", "(", "2", ")", "\n", "indices_id", "=", "torch", ".", "stack", "(", "[", "torch", ".", "arange", "(", "0", ",", "area", ")", ".", "long", "(", ")", ",", "torch", ".", "arange", "(", "0", ",", "area", ")", ".", "long", "(", ")", "]", ")", "\n", "\n", "aff_mat", "=", "sparse", ".", "FloatTensor", "(", "torch", ".", "cat", "(", "[", "indices", ",", "indices_id", ",", "indices_tp", "]", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "aff", ",", "torch", ".", "ones", "(", "[", "area", "]", ")", ",", "aff", "]", ")", ")", ".", "to_dense", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "aff_mat", "\n", "\n", "", "else", ":", "\n", "            ", "return", "aff", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets_aff.Net.get_parameter_groups": [[82, 103], ["resnets_aff.Net.modules", "isinstance", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "        ", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "normalization", ".", "GroupNorm", ")", ")", ":", "\n", "\n", "                ", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "", "return", "groups", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.__init__": [[12, 27], ["network.scalenet.ScaleNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "print", "sum", "p.numel", "scalenet_SEAM.Net.parameters"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "structure", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "num_cls", "=", "21", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "structure", ",", "dilations", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Conv2d", "(", "2048", ",", "num_cls", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f9", "=", "torch", ".", "nn", ".", "Conv2d", "(", "192", "+", "3", ",", "192", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc8", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_3", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_4", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "f9", ".", "weight", ",", "gain", "=", "4", ")", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "f8_3", ",", "self", ".", "f8_4", ",", "self", ".", "f9", ",", "self", ".", "fc8", "]", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "layer1", "]", "\n", "\n", "print", "(", "'Total params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.forward": [[28, 50], ["x.size", "super().forward", "scalenet_SEAM.Net.fc8", "torch.interpolate.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scalenet_SEAM.Net.f8_3", "scalenet_SEAM.Net.f8_4", "scalenet_SEAM.Net.PCM", "torch.interpolate.detach", "[].view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "d[].detach", "d[].detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.PCM"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "d", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "cam", "=", "self", ".", "fc8", "(", "d", "[", "'x4'", "]", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "cam", ".", "size", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cam_d", "=", "F", ".", "relu", "(", "cam", ".", "detach", "(", ")", ")", "\n", "cam_d_max", "=", "torch", ".", "max", "(", "cam_d", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "cam_d_norm", "=", "F", ".", "relu", "(", "cam_d", "-", "1e-5", ")", "/", "cam_d_max", "\n", "cam_d_norm", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "1", "-", "torch", ".", "max", "(", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "cam_max", "=", "torch", ".", "max", "(", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "[", "cam_d_norm", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "<", "cam_max", "]", "=", "0", "\n", "\n", "", "f8_3", "=", "F", ".", "relu", "(", "self", ".", "f8_3", "(", "d", "[", "'x2'", "]", ".", "detach", "(", ")", ")", ",", "inplace", "=", "True", ")", "\n", "f8_4", "=", "F", ".", "relu", "(", "self", ".", "f8_4", "(", "d", "[", "'x3'", "]", ".", "detach", "(", ")", ")", ",", "inplace", "=", "True", ")", "\n", "x_s", "=", "F", ".", "interpolate", "(", "x", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "f", "=", "torch", ".", "cat", "(", "[", "x_s", ",", "f8_3", ",", "f8_4", "]", ",", "dim", "=", "1", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "\n", "cam_rv", "=", "F", ".", "interpolate", "(", "self", ".", "PCM", "(", "cam_d_norm", ",", "f", ")", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "cam", ",", "cam_rv", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.PCM": [[51, 62], ["f.view.view.size", "torch.interpolate().view", "torch.interpolate().view", "torch.interpolate().view", "torch.interpolate().view", "scalenet_SEAM.Net.f9", "f.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "f.view.view.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "PCM", "(", "self", ",", "cam", ",", "f", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "view", "(", "n", ",", "-", "1", ",", "h", "*", "w", ")", "\n", "f", "=", "self", ".", "f9", "(", "f", ")", "\n", "f", "=", "f", ".", "view", "(", "n", ",", "-", "1", ",", "h", "*", "w", ")", "\n", "f", "=", "f", "/", "(", "torch", ".", "norm", "(", "f", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "\n", "aff", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "f", ".", "transpose", "(", "1", ",", "2", ")", ",", "f", ")", ",", "inplace", "=", "True", ")", "\n", "aff", "=", "aff", "/", "(", "torch", ".", "sum", "(", "aff", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "cam_rv", "=", "torch", ".", "matmul", "(", "cam", ",", "aff", ")", ".", "view", "(", "n", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "return", "cam_rv", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.Net.get_parameter_groups": [[63, 83], ["print", "scalenet_SEAM.Net.modules", "isinstance", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "        ", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "print", "(", "'======================================================'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "normalization", ".", "GroupNorm", ")", ")", ":", "\n", "\n", "                ", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet50_SEAM": [[85, 96], ["json.loads", "scalenet_SEAM.Net", "open().read", "torch.load", "torch.load", "torch.load", "torch.load", "Net.load_state_dict", "open"], "function", ["None"], ["", "", "def", "ScaleNet50_SEAM", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "num_cls", "=", "21", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "Net", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "num_cls", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet101_SEAM": [[98, 109], ["json.loads", "scalenet_SEAM.Net", "open().read", "torch.load", "torch.load", "torch.load", "torch.load", "Net.load_state_dict", "open"], "function", ["None"], ["", "def", "ScaleNet101_SEAM", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "num_cls", "=", "21", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "Net", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "num_cls", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_aff.Net.__init__": [[10, 32], ["network.scalenet.ScaleNet.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "int", "tool.pyutils.get_indices_of_pairs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "structure", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "structure", ",", "dilations", ")", "\n", "\n", "self", ".", "f8_3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "2048", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "f9", "=", "torch", ".", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_3", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_4", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_5", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "f9", ".", "weight", ",", "gain", "=", "4", ")", "\n", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "layer1", "]", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "f8_3", ",", "self", ".", "f8_4", ",", "self", ".", "f8_5", ",", "self", ".", "f9", "]", "\n", "\n", "self", ".", "predefined_featuresize", "=", "int", "(", "448", "//", "8", ")", "\n", "self", ".", "radius", "=", "5", "\n", "self", ".", "ind_from", ",", "self", ".", "ind_to", "=", "pyutils", ".", "get_indices_of_pairs", "(", "radius", "=", "self", ".", "radius", ",", "size", "=", "(", "self", ".", "predefined_featuresize", ",", "self", ".", "predefined_featuresize", ")", ")", "\n", "self", ".", "ind_from", "=", "torch", ".", "from_numpy", "(", "self", ".", "ind_from", ")", ";", "self", ".", "ind_to", "=", "torch", ".", "from_numpy", "(", "self", ".", "ind_to", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_aff.Net.forward": [[33, 80], ["super().forward", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "x.view().contiguous.view().contiguous.view().contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "ft.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "scalenet_aff.Net.f8_3", "scalenet_aff.Net.f8_4", "scalenet_aff.Net.f8_5", "scalenet_aff.Net.f9", "min", "tool.pyutils.get_indices_of_pairs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ft.view.view.size", "ft.view.view.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "aff.view().cpu.view().cpu.view().cpu", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.view().contiguous.view().contiguous.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.view", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "aff.view().cpu.view().cpu.view", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ft.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs"], ["", "def", "forward", "(", "self", ",", "x", ",", "to_dense", "=", "False", ")", ":", "\n", "\n", "        ", "d", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "\n", "f8_3", "=", "F", ".", "elu", "(", "self", ".", "f8_3", "(", "d", "[", "'x2'", "]", ")", ")", "\n", "f8_4", "=", "F", ".", "elu", "(", "self", ".", "f8_4", "(", "d", "[", "'x3'", "]", ")", ")", "\n", "f8_5", "=", "F", ".", "elu", "(", "self", ".", "f8_5", "(", "d", "[", "'x4'", "]", ")", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "f9", "(", "torch", ".", "cat", "(", "[", "f8_3", ",", "f8_4", ",", "f8_5", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "if", "x", ".", "size", "(", "2", ")", "==", "self", ".", "predefined_featuresize", "and", "x", ".", "size", "(", "3", ")", "==", "self", ".", "predefined_featuresize", ":", "\n", "            ", "ind_from", "=", "self", ".", "ind_from", "\n", "ind_to", "=", "self", ".", "ind_to", "\n", "", "else", ":", "\n", "            ", "min_edge", "=", "min", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "radius", "=", "(", "min_edge", "-", "1", ")", "//", "2", "if", "min_edge", "<", "self", ".", "radius", "*", "2", "+", "1", "else", "self", ".", "radius", "\n", "ind_from", ",", "ind_to", "=", "pyutils", ".", "get_indices_of_pairs", "(", "radius", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "ind_from", "=", "torch", ".", "from_numpy", "(", "ind_from", ")", ";", "ind_to", "=", "torch", ".", "from_numpy", "(", "ind_to", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "ind_from", "=", "ind_from", ".", "contiguous", "(", ")", "\n", "ind_to", "=", "ind_to", ".", "contiguous", "(", ")", "\n", "\n", "ff", "=", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "2", ",", "index", "=", "ind_from", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "ft", "=", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "2", ",", "index", "=", "ind_to", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "ff", "=", "torch", ".", "unsqueeze", "(", "ff", ",", "dim", "=", "2", ")", "\n", "ft", "=", "ft", ".", "view", "(", "ft", ".", "size", "(", "0", ")", ",", "ft", ".", "size", "(", "1", ")", ",", "-", "1", ",", "ff", ".", "size", "(", "3", ")", ")", "\n", "\n", "aff", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "ft", "-", "ff", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "to_dense", ":", "\n", "            ", "aff", "=", "aff", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "ind_from_exp", "=", "torch", ".", "unsqueeze", "(", "ind_from", ",", "dim", "=", "0", ")", ".", "expand", "(", "ft", ".", "size", "(", "2", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "indices", "=", "torch", ".", "stack", "(", "[", "ind_from_exp", ",", "ind_to", "]", ")", "\n", "indices_tp", "=", "torch", ".", "stack", "(", "[", "ind_to", ",", "ind_from_exp", "]", ")", "\n", "\n", "area", "=", "x", ".", "size", "(", "2", ")", "\n", "indices_id", "=", "torch", ".", "stack", "(", "[", "torch", ".", "arange", "(", "0", ",", "area", ")", ".", "long", "(", ")", ",", "torch", ".", "arange", "(", "0", ",", "area", ")", ".", "long", "(", ")", "]", ")", "\n", "\n", "aff_mat", "=", "sparse", ".", "FloatTensor", "(", "torch", ".", "cat", "(", "[", "indices", ",", "indices_id", ",", "indices_tp", "]", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "aff", ",", "torch", ".", "ones", "(", "[", "area", "]", ")", ",", "aff", "]", ")", ")", ".", "to_dense", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "aff_mat", "\n", "\n", "", "else", ":", "\n", "            ", "return", "aff", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_aff.Net.get_parameter_groups": [[82, 103], ["scalenet_aff.Net.modules", "isinstance", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "        ", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "normalization", ".", "GroupNorm", ")", ")", ":", "\n", "\n", "                ", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_aff.ScaleNet50_Aff": [[105, 116], ["json.loads", "scalenet_aff.Net", "open().read", "torch.load", "torch.load", "torch.load", "torch.load", "Net.load_state_dict", "open"], "function", ["None"], ["", "", "def", "ScaleNet50_Aff", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "Net", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_aff.ScaleNet101_Aff": [[118, 129], ["json.loads", "scalenet_aff.Net", "open().read", "torch.load", "torch.load", "torch.load", "torch.load", "Net.load_state_dict", "open"], "function", ["None"], ["", "def", "ScaleNet101_Aff", "(", "structure_path", ",", "ckpt", "=", "None", ",", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "layer", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "structure", "=", "json", ".", "loads", "(", "open", "(", "structure_path", ")", ".", "read", "(", ")", ")", "\n", "model", "=", "Net", "(", "SABlock", ",", "layer", ",", "structure", ",", "dilations", ",", "**", "kwargs", ")", "\n", "\n", "# pretrained", "\n", "if", "ckpt", "!=", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_aff.Net.__init__": [[10, 33], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "int", "tool.pyutils.get_indices_of_pairs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "f8_3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f8_5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "4096", ",", "256", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "f9", "=", "torch", ".", "nn", ".", "Conv2d", "(", "448", ",", "448", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_3", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_4", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "f8_5", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "f9", ".", "weight", ",", "gain", "=", "4", ")", "\n", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1a", ",", "self", ".", "b2", ",", "self", ".", "b2_1", ",", "self", ".", "b2_2", "]", "\n", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "f8_3", ",", "self", ".", "f8_4", ",", "self", ".", "f8_5", ",", "self", ".", "f9", "]", "\n", "\n", "self", ".", "predefined_featuresize", "=", "int", "(", "448", "//", "8", ")", "\n", "self", ".", "radius", "=", "5", "\n", "self", ".", "ind_from", ",", "self", ".", "ind_to", "=", "pyutils", ".", "get_indices_of_pairs", "(", "radius", "=", "self", ".", "radius", ",", "size", "=", "(", "self", ".", "predefined_featuresize", ",", "self", ".", "predefined_featuresize", ")", ")", "\n", "self", ".", "ind_from", "=", "torch", ".", "from_numpy", "(", "self", ".", "ind_from", ")", ";", "self", ".", "ind_to", "=", "torch", ".", "from_numpy", "(", "self", ".", "ind_to", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_aff.Net.forward": [[34, 81], ["super().forward_as_dict", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "x.view().contiguous.view().contiguous.view().contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.from_numpy.contiguous", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "ft.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "resnet38_aff.Net.f8_3", "resnet38_aff.Net.f8_4", "resnet38_aff.Net.f8_5", "resnet38_aff.Net.f9", "min", "tool.pyutils.get_indices_of_pairs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ft.view.view.size", "ft.view.view.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "aff.view().cpu.view().cpu.view().cpu", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.unsqueeze().expand().contiguous().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.view().contiguous.view().contiguous.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.FloatTensor().to_dense().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.view", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.from_numpy.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "x.view().contiguous.view().contiguous.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "aff.view().cpu.view().cpu.view", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.unsqueeze().expand().contiguous", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.FloatTensor().to_dense", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ft.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.forward_as_dict", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs"], ["", "def", "forward", "(", "self", ",", "x", ",", "to_dense", "=", "False", ")", ":", "\n", "\n", "        ", "d", "=", "super", "(", ")", ".", "forward_as_dict", "(", "x", ")", "\n", "\n", "f8_3", "=", "F", ".", "elu", "(", "self", ".", "f8_3", "(", "d", "[", "'conv4'", "]", ")", ")", "\n", "f8_4", "=", "F", ".", "elu", "(", "self", ".", "f8_4", "(", "d", "[", "'conv5'", "]", ")", ")", "\n", "f8_5", "=", "F", ".", "elu", "(", "self", ".", "f8_5", "(", "d", "[", "'conv6'", "]", ")", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "f9", "(", "torch", ".", "cat", "(", "[", "f8_3", ",", "f8_4", ",", "f8_5", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "if", "x", ".", "size", "(", "2", ")", "==", "self", ".", "predefined_featuresize", "and", "x", ".", "size", "(", "3", ")", "==", "self", ".", "predefined_featuresize", ":", "\n", "            ", "ind_from", "=", "self", ".", "ind_from", "\n", "ind_to", "=", "self", ".", "ind_to", "\n", "", "else", ":", "\n", "            ", "min_edge", "=", "min", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "radius", "=", "(", "min_edge", "-", "1", ")", "//", "2", "if", "min_edge", "<", "self", ".", "radius", "*", "2", "+", "1", "else", "self", ".", "radius", "\n", "ind_from", ",", "ind_to", "=", "pyutils", ".", "get_indices_of_pairs", "(", "radius", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "ind_from", "=", "torch", ".", "from_numpy", "(", "ind_from", ")", ";", "ind_to", "=", "torch", ".", "from_numpy", "(", "ind_to", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "ind_from", "=", "ind_from", ".", "contiguous", "(", ")", "\n", "ind_to", "=", "ind_to", ".", "contiguous", "(", ")", "\n", "\n", "ff", "=", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "2", ",", "index", "=", "ind_from", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "ft", "=", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "2", ",", "index", "=", "ind_to", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "ff", "=", "torch", ".", "unsqueeze", "(", "ff", ",", "dim", "=", "2", ")", "\n", "ft", "=", "ft", ".", "view", "(", "ft", ".", "size", "(", "0", ")", ",", "ft", ".", "size", "(", "1", ")", ",", "-", "1", ",", "ff", ".", "size", "(", "3", ")", ")", "\n", "\n", "aff", "=", "torch", ".", "exp", "(", "-", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "ft", "-", "ff", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "to_dense", ":", "\n", "            ", "aff", "=", "aff", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "ind_from_exp", "=", "torch", ".", "unsqueeze", "(", "ind_from", ",", "dim", "=", "0", ")", ".", "expand", "(", "ft", ".", "size", "(", "2", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "indices", "=", "torch", ".", "stack", "(", "[", "ind_from_exp", ",", "ind_to", "]", ")", "\n", "indices_tp", "=", "torch", ".", "stack", "(", "[", "ind_to", ",", "ind_from_exp", "]", ")", "\n", "\n", "area", "=", "x", ".", "size", "(", "2", ")", "\n", "indices_id", "=", "torch", ".", "stack", "(", "[", "torch", ".", "arange", "(", "0", ",", "area", ")", ".", "long", "(", ")", ",", "torch", ".", "arange", "(", "0", ",", "area", ")", ".", "long", "(", ")", "]", ")", "\n", "\n", "aff_mat", "=", "sparse", ".", "FloatTensor", "(", "torch", ".", "cat", "(", "[", "indices", ",", "indices_id", ",", "indices_tp", "]", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "aff", ",", "torch", ".", "ones", "(", "[", "area", "]", ")", ",", "aff", "]", ")", ")", ".", "to_dense", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "aff_mat", "\n", "\n", "", "else", ":", "\n", "            ", "return", "aff", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_aff.Net.get_parameter_groups": [[83, 104], ["resnet38_aff.Net.modules", "isinstance", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "        ", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "normalization", ".", "GroupNorm", ")", ")", ":", "\n", "\n", "                ", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "\n", "                    ", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "                        ", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.ResBlock.__init__": [[7, 25], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "mid_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "first_dilation", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "same_shape", "=", "(", "in_channels", "==", "out_channels", "and", "stride", "==", "1", ")", "\n", "\n", "if", "first_dilation", "==", "None", ":", "first_dilation", "=", "dilation", "\n", "\n", "self", ".", "bn_branch2a", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "\n", "self", ".", "conv_branch2a", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "3", ",", "stride", ",", "\n", "padding", "=", "first_dilation", ",", "dilation", "=", "first_dilation", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_branch2b1", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "conv_branch2b1", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "same_shape", ":", "\n", "            ", "self", ".", "conv_branch1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.ResBlock.forward": [[26, 49], ["resnet38d.ResBlock.bn_branch2a", "torch.relu", "torch.relu", "resnet38d.ResBlock.conv_branch2a", "resnet38d.ResBlock.bn_branch2b1", "torch.relu", "torch.relu", "resnet38d.ResBlock.conv_branch2b1", "resnet38d.ResBlock.conv_branch1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "\n", "        ", "branch2", "=", "self", ".", "bn_branch2a", "(", "x", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "\n", "x_bn_relu", "=", "branch2", "\n", "\n", "if", "not", "self", ".", "same_shape", ":", "\n", "            ", "branch1", "=", "self", ".", "conv_branch1", "(", "branch2", ")", "\n", "", "else", ":", "\n", "            ", "branch1", "=", "x", "\n", "\n", "", "branch2", "=", "self", ".", "conv_branch2a", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "bn_branch2b1", "(", "branch2", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "conv_branch2b1", "(", "branch2", ")", "\n", "\n", "x", "=", "branch1", "+", "branch2", "\n", "\n", "if", "get_x_bn_relu", ":", "\n", "            ", "return", "x", ",", "x_bn_relu", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.ResBlock.__call__": [[50, 52], ["resnet38d.ResBlock.forward"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward"], ["", "def", "__call__", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ",", "get_x_bn_relu", "=", "get_x_bn_relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.ResBlock_bot.__init__": [[54, 72], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "ResBlock_bot", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "same_shape", "=", "(", "in_channels", "==", "out_channels", "and", "stride", "==", "1", ")", "\n", "\n", "self", ".", "bn_branch2a", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv_branch2a", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "//", "4", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_branch2b1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "4", ")", "\n", "self", ".", "dropout_2b1", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "self", ".", "conv_branch2b1", "=", "nn", ".", "Conv2d", "(", "out_channels", "//", "4", ",", "out_channels", "//", "2", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_branch2b2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "2", ")", "\n", "self", ".", "dropout_2b2", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "self", ".", "conv_branch2b2", "=", "nn", ".", "Conv2d", "(", "out_channels", "//", "2", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "same_shape", ":", "\n", "            ", "self", ".", "conv_branch1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.ResBlock_bot.forward": [[73, 99], ["resnet38d.ResBlock_bot.bn_branch2a", "torch.relu", "torch.relu", "resnet38d.ResBlock_bot.conv_branch1", "resnet38d.ResBlock_bot.conv_branch2a", "resnet38d.ResBlock_bot.bn_branch2b1", "torch.relu", "torch.relu", "resnet38d.ResBlock_bot.dropout_2b1", "resnet38d.ResBlock_bot.conv_branch2b1", "resnet38d.ResBlock_bot.bn_branch2b2", "torch.relu", "torch.relu", "resnet38d.ResBlock_bot.dropout_2b2", "resnet38d.ResBlock_bot.conv_branch2b2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "\n", "        ", "branch2", "=", "self", ".", "bn_branch2a", "(", "x", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "x_bn_relu", "=", "branch2", "\n", "\n", "branch1", "=", "self", ".", "conv_branch1", "(", "branch2", ")", "\n", "\n", "branch2", "=", "self", ".", "conv_branch2a", "(", "branch2", ")", "\n", "\n", "branch2", "=", "self", ".", "bn_branch2b1", "(", "branch2", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "dropout_2b1", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "conv_branch2b1", "(", "branch2", ")", "\n", "\n", "branch2", "=", "self", ".", "bn_branch2b2", "(", "branch2", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "dropout_2b2", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "conv_branch2b2", "(", "branch2", ")", "\n", "\n", "x", "=", "branch1", "+", "branch2", "\n", "\n", "if", "get_x_bn_relu", ":", "\n", "            ", "return", "x", ",", "x_bn_relu", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.ResBlock_bot.__call__": [[100, 102], ["resnet38d.ResBlock_bot.forward"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward"], ["", "def", "__call__", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ",", "get_x_bn_relu", "=", "get_x_bn_relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Normalize.__init__": [[104, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Normalize.__call__": [[109, 118], ["numpy.asarray", "numpy.empty_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgarr", "=", "np", ".", "asarray", "(", "img", ")", "\n", "proc_img", "=", "np", ".", "empty_like", "(", "imgarr", ",", "np", ".", "float32", ")", "\n", "\n", "proc_img", "[", "...", ",", "0", "]", "=", "(", "imgarr", "[", "...", ",", "0", "]", "/", "255.", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "proc_img", "[", "...", ",", "1", "]", "=", "(", "imgarr", "[", "...", ",", "1", "]", "/", "255.", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "proc_img", "[", "...", ",", "2", "]", "=", "(", "imgarr", "[", "...", ",", "2", "]", "/", "255.", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "\n", "return", "proc_img", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.__init__": [[120, 155], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock_bot", "resnet38d.ResBlock_bot", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet38d.Normalize"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1a", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "b2", "=", "ResBlock", "(", "64", ",", "128", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "b2_1", "=", "ResBlock", "(", "128", ",", "128", ",", "128", ")", "\n", "self", ".", "b2_2", "=", "ResBlock", "(", "128", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "b3", "=", "ResBlock", "(", "128", ",", "256", ",", "256", ",", "stride", "=", "2", ")", "\n", "self", ".", "b3_1", "=", "ResBlock", "(", "256", ",", "256", ",", "256", ")", "\n", "self", ".", "b3_2", "=", "ResBlock", "(", "256", ",", "256", ",", "256", ")", "\n", "\n", "self", ".", "b4", "=", "ResBlock", "(", "256", ",", "512", ",", "512", ",", "stride", "=", "2", ")", "\n", "self", ".", "b4_1", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ")", "\n", "self", ".", "b4_2", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ")", "\n", "self", ".", "b4_3", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ")", "\n", "self", ".", "b4_4", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ")", "\n", "self", ".", "b4_5", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ")", "\n", "\n", "self", ".", "b5", "=", "ResBlock", "(", "512", ",", "512", ",", "1024", ",", "stride", "=", "1", ",", "first_dilation", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "b5_1", "=", "ResBlock", "(", "1024", ",", "512", ",", "1024", ",", "dilation", "=", "2", ")", "\n", "self", ".", "b5_2", "=", "ResBlock", "(", "1024", ",", "512", ",", "1024", ",", "dilation", "=", "2", ")", "\n", "\n", "self", ".", "b6", "=", "ResBlock_bot", "(", "1024", ",", "2048", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "dropout", "=", "0.3", ")", "\n", "\n", "self", ".", "b7", "=", "ResBlock_bot", "(", "2048", ",", "4096", ",", "dilation", "=", "2", ",", "dropout", "=", "0.5", ")", "\n", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "4096", ")", "\n", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1a", "]", "\n", "\n", "self", ".", "normalize", "=", "Normalize", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.forward": [[156, 158], ["resnet38d.Net.forward_as_dict"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.forward_as_dict"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "forward_as_dict", "(", "x", ")", "[", "'conv6'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.forward_as_dict": [[159, 189], ["resnet38d.Net.conv1a", "resnet38d.Net.b2", "resnet38d.Net.b2_1", "resnet38d.Net.b2_2", "resnet38d.Net.b3", "resnet38d.Net.b3_1", "resnet38d.Net.b3_2", "resnet38d.Net.b4", "resnet38d.Net.b4_1", "resnet38d.Net.b4_2", "resnet38d.Net.b4_3", "resnet38d.Net.b4_4", "resnet38d.Net.b4_5", "resnet38d.Net.b5", "resnet38d.Net.b5_1", "resnet38d.Net.b5_2", "resnet38d.Net.b6", "resnet38d.Net.b7", "torch.relu", "torch.relu", "dict", "resnet38d.Net.bn7"], "methods", ["None"], ["", "def", "forward_as_dict", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1a", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "b2", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "b3", "(", "x", ")", "\n", "x", "=", "self", ".", "b3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b3_2", "(", "x", ")", "\n", "\n", "#x = self.b4(x)", "\n", "x", ",", "conv3", "=", "self", ".", "b4", "(", "x", ",", "get_x_bn_relu", "=", "True", ")", "\n", "x", "=", "self", ".", "b4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_3", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_4", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_5", "(", "x", ")", "\n", "\n", "x", ",", "conv4", "=", "self", ".", "b5", "(", "x", ",", "get_x_bn_relu", "=", "True", ")", "\n", "x", "=", "self", ".", "b5_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b5_2", "(", "x", ")", "\n", "\n", "x", ",", "conv5", "=", "self", ".", "b6", "(", "x", ",", "get_x_bn_relu", "=", "True", ")", "\n", "\n", "x", "=", "self", ".", "b7", "(", "x", ")", "\n", "conv6", "=", "F", ".", "relu", "(", "self", ".", "bn7", "(", "x", ")", ")", "\n", "\n", "return", "dict", "(", "{", "'conv3'", ":", "conv3", ",", "'conv4'", ":", "conv4", ",", "'conv5'", ":", "conv5", ",", "'conv6'", ":", "conv6", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38d.Net.train": [[191, 214], ["super().train", "resnet38d.Net.modules", "isinstance", "isinstance", "isinstance", "layer.eval", "layer.children"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n", "for", "layer", "in", "self", ".", "not_training", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "for", "c", "in", "layer", ".", "children", "(", ")", ":", "\n", "                    ", "c", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "c", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "c", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.Normalize.__init__": [[7, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.Normalize.__call__": [[12, 21], ["numpy.asarray", "numpy.empty_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgarr", "=", "np", ".", "asarray", "(", "img", ")", "\n", "proc_img", "=", "np", ".", "empty_like", "(", "imgarr", ",", "np", ".", "float32", ")", "\n", "\n", "proc_img", "[", "...", ",", "0", "]", "=", "(", "imgarr", "[", "...", ",", "0", "]", "/", "255.", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "proc_img", "[", "...", ",", "1", "]", "=", "(", "imgarr", "[", "...", ",", "1", "]", "/", "255.", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "proc_img", "[", "...", ",", "2", "]", "=", "(", "imgarr", "[", "...", ",", "2", "]", "/", "255.", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "\n", "return", "proc_img", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.BasicBlock.__init__": [[25, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "if", "downsample", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.BasicBlock.forward": [[40, 54], ["resnets.BasicBlock.downsample", "resnets.BasicBlock.conv1", "resnets.BasicBlock.bn1", "resnets.BasicBlock.relu", "resnets.BasicBlock.conv2", "resnets.BasicBlock.bn2", "resnets.BasicBlock.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.Bottleneck.__init__": [[59, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "downsample", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.Bottleneck.forward": [[76, 94], ["resnets.Bottleneck.downsample", "resnets.Bottleneck.conv1", "resnets.Bottleneck.bn1", "resnets.Bottleneck.relu", "resnets.Bottleneck.conv2", "resnets.Bottleneck.bn2", "resnets.Bottleneck.relu", "resnets.Bottleneck.conv3", "resnets.Bottleneck.bn3", "resnets.Bottleneck.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet.__init__": [[102, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnets.ResNet._make_layer", "resnets.ResNet._make_layer", "resnets.ResNet._make_layer", "resnets.ResNet._make_layer", "resnets.ResNet.modules", "resnets.Normalize", "isinstance", "resnets.init_weight", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer", "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "base_channels", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "base_channels", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "base_channels", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "#self.conv1 = nn.Conv2d(3, base_channels, 3, 2, 1, bias=False) ", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "base_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "base_channels", "*", "1", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "base_channels", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "base_channels", "*", "4", ",", "layers", "[", "2", "]", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "base_channels", "*", "8", ",", "layers", "[", "3", "]", ",", "dilation", "=", "4", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init_weight", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "self", ".", "normalize", "=", "Normalize", "(", ")", "\n", "self", ".", "not_training", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet._make_layer": [[126, 135], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "downsample", "=", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet.forward": [[136, 148], ["resnets.ResNet.conv1", "resnets.ResNet.bn1", "resnets.ResNet.relu", "resnets.ResNet.maxpool", "resnets.ResNet.layer1", "resnets.ResNet.layer2", "resnets.ResNet.layer3", "resnets.ResNet.layer4", "dict"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "return", "dict", "(", "{", "'x2'", ":", "x2", ",", "'x3'", ":", "x3", ",", "'x4'", ":", "x4", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.ResNet.train": [[149, 170], ["super().train", "resnets.ResNet.modules", "isinstance", "isinstance", "isinstance", "layer.eval", "layer.parameters"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n", "for", "layer", "in", "self", ".", "not_training", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "for", "p", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.network.resnets.init_weight": [[96, 98], ["torch.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "init_weight", "(", "module", ")", ":", "\n", "    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.PolyOptimizer.__init__": [[12, 20], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "weight_decay", ",", "max_step", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "params", ",", "lr", ",", "weight_decay", ")", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "max_step", "=", "max_step", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "__initial_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.PolyOptimizer.step": [[22, 33], ["super().step", "range", "len"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.PolyOptimizer.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "global_step", "<", "self", ".", "max_step", ":", "\n", "            ", "lr_mult", "=", "(", "1", "-", "self", ".", "global_step", "/", "self", ".", "max_step", ")", "**", "self", ".", "momentum", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "param_groups", ")", ")", ":", "\n", "                ", "self", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "self", ".", "__initial_lr", "[", "i", "]", "*", "lr_mult", "\n", "\n", "", "", "super", "(", ")", ".", "step", "(", "closure", ")", "\n", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.__init__": [[37, 45], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torchutils.BatchNorm2dFixed.register_buffer", "torchutils.BatchNorm2dFixed.register_buffer", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "BatchNorm2dFixed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward": [[47, 52], ["F.batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "False", ",", "eps", "=", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.__call__": [[53, 55], ["torchutils.BatchNorm2dFixed.forward"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.BatchNorm2dFixed.forward"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.SegmentationDataset.__init__": [[58, 72], ["open().read().splitlines", "open().read", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "img_dir", ",", "label_dir", ",", "rescale", "=", "None", ",", "flip", "=", "False", ",", "cropsize", "=", "None", ",", "\n", "img_transform", "=", "None", ",", "mask_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_name_list_path", "=", "img_name_list_path", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "mask_transform", "=", "mask_transform", "\n", "\n", "self", ".", "img_name_list", "=", "open", "(", "self", ".", "img_name_list_path", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "cropsize", "=", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.SegmentationDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.SegmentationDataset.__getitem__": [[76, 106], ["PIL.Image.open().convert", "PIL.Image.open", "numpy.transpose", "os.path.join", "numpy.flip().copy.resize", "numpy.flip().copy.resize", "torchutils.SegmentationDataset.img_transform", "torchutils.SegmentationDataset.mask_transform", "tool.imutils.random_crop", "tool.imutils.RescaleNearest", "bool", "numpy.flip().copy", "numpy.flip().copy", "PIL.Image.open", "random.getrandbits", "os.path.join", "random.random", "round", "round", "numpy.flip", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.random_crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "name", "+", "'.jpg'", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "mask", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "name", "+", "'.png'", ")", ")", "\n", "\n", "if", "self", ".", "rescale", "is", "not", "None", ":", "\n", "            ", "s", "=", "self", ".", "rescale", "[", "0", "]", "+", "random", ".", "random", "(", ")", "*", "(", "self", ".", "rescale", "[", "1", "]", "-", "self", ".", "rescale", "[", "0", "]", ")", "\n", "adj_size", "=", "(", "round", "(", "img", ".", "size", "[", "0", "]", "*", "s", "/", "8", ")", "*", "8", ",", "round", "(", "img", ".", "size", "[", "1", "]", "*", "s", "/", "8", ")", "*", "8", ")", "\n", "img", "=", "img", ".", "resize", "(", "adj_size", ",", "resample", "=", "Image", ".", "CUBIC", ")", "\n", "mask", "=", "img", ".", "resize", "(", "adj_size", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "img_transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "", "if", "self", ".", "mask_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "mask_transform", "(", "mask", ")", "\n", "\n", "", "if", "self", ".", "cropsize", "is", "not", "None", ":", "\n", "            ", "img", ",", "mask", "=", "imutils", ".", "random_crop", "(", "[", "img", ",", "mask", "]", ",", "self", ".", "cropsize", ",", "(", "0", ",", "255", ")", ")", "\n", "\n", "", "mask", "=", "imutils", ".", "RescaleNearest", "(", "0.125", ")", "(", "mask", ")", "\n", "\n", "if", "self", ".", "flip", "is", "True", "and", "bool", "(", "random", ".", "getrandbits", "(", "1", ")", ")", ":", "\n", "            ", "img", "=", "np", ".", "flip", "(", "img", ",", "1", ")", ".", "copy", "(", ")", "\n", "mask", "=", "np", ".", "flip", "(", "mask", ",", "1", ")", ".", "copy", "(", ")", "\n", "\n", "", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "name", ",", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.ExtractAffinityLabelInRadius.__init__": [[110, 128], ["range", "range", "torchutils.ExtractAffinityLabelInRadius.search_dist.append", "range", "torchutils.ExtractAffinityLabelInRadius.search_dist.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cropsize", ",", "radius", "=", "5", ")", ":", "\n", "        ", "self", ".", "radius", "=", "radius", "\n", "\n", "self", ".", "search_dist", "=", "[", "]", "\n", "\n", "for", "x", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "            ", "self", ".", "search_dist", ".", "append", "(", "(", "0", ",", "x", ")", ")", "\n", "\n", "", "for", "y", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "-", "radius", "+", "1", ",", "radius", ")", ":", "\n", "                ", "if", "x", "*", "x", "+", "y", "*", "y", "<", "radius", "*", "radius", ":", "\n", "                    ", "self", ".", "search_dist", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "\n", "", "", "", "self", ".", "radius_floor", "=", "radius", "-", "1", "\n", "\n", "self", ".", "crop_height", "=", "cropsize", "-", "self", ".", "radius_floor", "\n", "self", ".", "crop_width", "=", "cropsize", "-", "2", "*", "self", ".", "radius_floor", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.ExtractAffinityLabelInRadius.__call__": [[129, 159], ["numpy.reshape", "numpy.expand_dims", "numpy.stack", "numpy.stack", "numpy.equal", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.reshape", "numpy.logical_and", "labels_to_list.append", "valid_pair_list.append", "numpy.less", "numpy.less", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.equal", "numpy.logical_and", "numpy.logical_not", "numpy.not_equal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "label", ")", ":", "\n", "\n", "        ", "labels_from", "=", "label", "[", ":", "-", "self", ".", "radius_floor", ",", "self", ".", "radius_floor", ":", "-", "self", ".", "radius_floor", "]", "\n", "labels_from", "=", "np", ".", "reshape", "(", "labels_from", ",", "[", "-", "1", "]", ")", "\n", "\n", "labels_to_list", "=", "[", "]", "\n", "valid_pair_list", "=", "[", "]", "\n", "\n", "for", "dy", ",", "dx", "in", "self", ".", "search_dist", ":", "\n", "            ", "labels_to", "=", "label", "[", "dy", ":", "dy", "+", "self", ".", "crop_height", ",", "self", ".", "radius_floor", "+", "dx", ":", "self", ".", "radius_floor", "+", "dx", "+", "self", ".", "crop_width", "]", "\n", "labels_to", "=", "np", ".", "reshape", "(", "labels_to", ",", "[", "-", "1", "]", ")", "\n", "\n", "valid_pair", "=", "np", ".", "logical_and", "(", "np", ".", "less", "(", "labels_to", ",", "255", ")", ",", "np", ".", "less", "(", "labels_from", ",", "255", ")", ")", "\n", "\n", "labels_to_list", ".", "append", "(", "labels_to", ")", "\n", "valid_pair_list", ".", "append", "(", "valid_pair", ")", "\n", "\n", "", "bc_labels_from", "=", "np", ".", "expand_dims", "(", "labels_from", ",", "0", ")", "\n", "concat_labels_to", "=", "np", ".", "stack", "(", "labels_to_list", ")", "\n", "concat_valid_pair", "=", "np", ".", "stack", "(", "valid_pair_list", ")", "\n", "\n", "pos_affinity_label", "=", "np", ".", "equal", "(", "bc_labels_from", ",", "concat_labels_to", ")", "\n", "\n", "bg_pos_affinity_label", "=", "np", ".", "logical_and", "(", "pos_affinity_label", ",", "np", ".", "equal", "(", "bc_labels_from", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "fg_pos_affinity_label", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "pos_affinity_label", ",", "np", ".", "not_equal", "(", "bc_labels_from", ",", "0", ")", ")", ",", "concat_valid_pair", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "neg_affinity_label", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "pos_affinity_label", ")", ",", "concat_valid_pair", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "bg_pos_affinity_label", ",", "fg_pos_affinity_label", ",", "neg_affinity_label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.AffinityFromMaskDataset.__init__": [[161, 168], ["torchutils.SegmentationDataset.__init__", "torchutils.ExtractAffinityLabelInRadius"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "img_dir", ",", "label_dir", ",", "rescale", "=", "None", ",", "flip", "=", "False", ",", "cropsize", "=", "None", ",", "\n", "img_transform", "=", "None", ",", "mask_transform", "=", "None", ",", "radius", "=", "5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "img_dir", ",", "label_dir", ",", "rescale", ",", "flip", ",", "cropsize", ",", "img_transform", ",", "mask_transform", ")", "\n", "\n", "self", ".", "radius", "=", "radius", "\n", "\n", "self", ".", "extract_aff_lab_func", "=", "ExtractAffinityLabelInRadius", "(", "cropsize", "=", "cropsize", "//", "8", ",", "radius", "=", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.AffinityFromMaskDataset.__getitem__": [[169, 175], ["torchutils.SegmentationDataset.__getitem__", "torchutils.AffinityFromMaskDataset.extract_aff_lab_func"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", ",", "mask", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "aff_label", "=", "self", ".", "extract_aff_lab_func", "(", "mask", ")", "\n", "\n", "return", "name", ",", "img", ",", "aff_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.color_pro": [[8, 28], ["numpy.expand_dims", "cv2.applyColorMap", "cv2.cvtColor", "cv2.addWeighted", "numpy.transpose", "numpy.transpose", "cv2.addWeighted", "numpy.transpose"], "function", ["None"], ["def", "color_pro", "(", "pro", ",", "img", "=", "None", ",", "mode", "=", "'hwc'", ")", ":", "\n", "\t", "H", ",", "W", "=", "pro", ".", "shape", "\n", "pro_255", "=", "(", "pro", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pro_255", "=", "np", ".", "expand_dims", "(", "pro_255", ",", "axis", "=", "2", ")", "\n", "color", "=", "cv2", ".", "applyColorMap", "(", "pro_255", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "color", "=", "cv2", ".", "cvtColor", "(", "color", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "\t\t", "rate", "=", "0.5", "\n", "if", "mode", "==", "'hwc'", ":", "\n", "\t\t\t", "assert", "img", ".", "shape", "[", "0", "]", "==", "H", "and", "img", ".", "shape", "[", "1", "]", "==", "W", "\n", "color", "=", "cv2", ".", "addWeighted", "(", "img", ",", "rate", ",", "color", ",", "1", "-", "rate", ",", "0", ")", "\n", "", "elif", "mode", "==", "'chw'", ":", "\n", "\t\t\t", "assert", "img", ".", "shape", "[", "1", "]", "==", "H", "and", "img", ".", "shape", "[", "2", "]", "==", "W", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "color", "=", "cv2", ".", "addWeighted", "(", "img", ",", "rate", ",", "color", ",", "1", "-", "rate", ",", "0", ")", "\n", "color", "=", "np", ".", "transpose", "(", "color", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t", "if", "mode", "==", "'chw'", ":", "\n", "\t\t\t", "color", "=", "np", ".", "transpose", "(", "color", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.generate_vis": [[29, 53], ["visualization.ColorCLS", "visualization.ColorCAM", "visualization.dense_crf", "visualization.ColorCLS", "visualization.ColorCAM", "visualization.max_norm", "numpy.power", "numpy.max"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.ColorCLS", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.ColorCAM", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.dense_crf", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.ColorCLS", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.ColorCAM", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.max_norm"], ["", "def", "generate_vis", "(", "p", ",", "gt", ",", "img", ",", "func_label2color", ",", "threshold", "=", "0.1", ",", "norm", "=", "True", ")", ":", "\n", "# All the input should be numpy.array ", "\n", "# img should be 0-255 uint8", "\n", "\t", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "\n", "if", "norm", ":", "\n", "\t\t", "prob", "=", "max_norm", "(", "p", ",", "'numpy'", ")", "\n", "", "else", ":", "\n", "\t\t", "prob", "=", "p", "\n", "", "if", "gt", "is", "not", "None", ":", "\n", "\t\t", "prob", "=", "prob", "*", "gt", "\n", "", "prob", "[", "prob", "<=", "0", "]", "=", "1e-7", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "\t\t", "prob", "[", "0", ",", ":", ",", ":", "]", "=", "np", ".", "power", "(", "1", "-", "np", ".", "max", "(", "prob", "[", "1", ":", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "4", ")", "\n", "\n", "", "CLS", "=", "ColorCLS", "(", "prob", ",", "func_label2color", ")", "\n", "CAM", "=", "ColorCAM", "(", "prob", ",", "img", ")", "\n", "\n", "prob_crf", "=", "dense_crf", "(", "prob", ",", "img", ",", "n_classes", "=", "C", ",", "n_iters", "=", "1", ")", "\n", "\n", "CLS_crf", "=", "ColorCLS", "(", "prob_crf", ",", "func_label2color", ")", "\n", "CAM_crf", "=", "ColorCAM", "(", "prob_crf", ",", "img", ")", "\n", "\n", "return", "CLS", ",", "CAM", ",", "CLS_crf", ",", "CAM_crf", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.max_norm": [[54, 84], ["F.relu.dim", "F.relu.size", "torch.relu", "[].view", "[].view", "torch.relu", "F.relu.dim", "F.relu.size", "torch.relu", "[].view", "[].view", "numpy.max", "numpy.min", "torch.relu", "numpy.max", "numpy.min", "torch.max", "torch.max", "torch.min", "torch.min", "F.relu.view", "F.relu.view", "torch.max", "torch.max", "torch.min", "torch.min", "F.relu.view", "F.relu.view"], "function", ["None"], ["", "def", "max_norm", "(", "p", ",", "version", "=", "'torch'", ",", "e", "=", "1e-5", ")", ":", "\n", "\t", "if", "version", "is", "'torch'", ":", "\n", "\t\t", "if", "p", ".", "dim", "(", ")", "==", "3", ":", "\n", "\t\t\t", "C", ",", "H", ",", "W", "=", "p", ".", "size", "(", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", ")", "\n", "max_v", "=", "torch", ".", "max", "(", "p", ".", "view", "(", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "min_v", "=", "torch", ".", "min", "(", "p", ".", "view", "(", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", "-", "min_v", "-", "e", ")", "/", "(", "max_v", "-", "min_v", "+", "e", ")", "\n", "", "elif", "p", ".", "dim", "(", ")", "==", "4", ":", "\n", "\t\t\t", "N", ",", "C", ",", "H", ",", "W", "=", "p", ".", "size", "(", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", ")", "\n", "max_v", "=", "torch", ".", "max", "(", "p", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "min_v", "=", "torch", ".", "min", "(", "p", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", "-", "min_v", "-", "e", ")", "/", "(", "max_v", "-", "min_v", "+", "e", ")", "\n", "", "", "elif", "version", "is", "'numpy'", "or", "version", "is", "'np'", ":", "\n", "\t\t", "if", "p", ".", "ndim", "==", "3", ":", "\n", "\t\t\t", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "p", "[", "p", "<", "0", "]", "=", "0", "\n", "max_v", "=", "np", ".", "max", "(", "p", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "min_v", "=", "np", ".", "min", "(", "p", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "p", "[", "p", "<", "min_v", "+", "e", "]", "=", "0", "\n", "p", "=", "(", "p", "-", "min_v", "-", "e", ")", "/", "(", "max_v", "+", "e", ")", "\n", "", "elif", "p", ".", "ndim", "==", "4", ":", "\n", "\t\t\t", "N", ",", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "p", "[", "p", "<", "0", "]", "=", "0", "\n", "max_v", "=", "np", ".", "max", "(", "p", ",", "(", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "min_v", "=", "np", ".", "min", "(", "p", ",", "(", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "p", "[", "p", "<", "min_v", "+", "e", "]", "=", "0", "\n", "p", "=", "(", "p", "-", "min_v", "-", "e", ")", "/", "(", "max_v", "+", "e", ")", "\n", "", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.ColorCAM": [[85, 93], ["range", "colorlist.append", "numpy.array", "visualization.color_pro"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.color_pro"], ["", "def", "ColorCAM", "(", "prob", ",", "img", ")", ":", "\n", "\t", "assert", "prob", ".", "ndim", "==", "3", "\n", "C", ",", "H", ",", "W", "=", "prob", ".", "shape", "\n", "colorlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "\t\t", "colorlist", ".", "append", "(", "color_pro", "(", "prob", "[", "i", ",", ":", ",", ":", "]", ",", "img", "=", "img", ",", "mode", "=", "'chw'", ")", ")", "\n", "", "CAM", "=", "np", ".", "array", "(", "colorlist", ")", "/", "255.0", "\n", "return", "CAM", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.ColorCLS": [[94, 99], ["numpy.argmax", "func_label2color().transpose", "func_label2color"], "function", ["None"], ["", "def", "ColorCLS", "(", "prob", ",", "func_label2color", ")", ":", "\n", "\t", "assert", "prob", ".", "ndim", "==", "3", "\n", "prob_idx", "=", "np", ".", "argmax", "(", "prob", ",", "axis", "=", "0", ")", "\n", "CLS", "=", "func_label2color", "(", "prob_idx", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.VOClabel2colormap": [[100, 109], ["label.astype", "numpy.zeros"], "function", ["None"], ["", "def", "VOClabel2colormap", "(", "label", ")", ":", "\n", "\t", "m", "=", "label", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "r", ",", "c", "=", "m", ".", "shape", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cmap", "[", ":", ",", ":", ",", "0", "]", "=", "(", "m", "&", "1", ")", "<<", "7", "|", "(", "m", "&", "8", ")", "<<", "3", "\n", "cmap", "[", ":", ",", ":", ",", "1", "]", "=", "(", "m", "&", "2", ")", "<<", "6", "|", "(", "m", "&", "16", ")", "<<", "2", "\n", "cmap", "[", ":", ",", ":", ",", "2", "]", "=", "(", "m", "&", "4", ")", "<<", "5", "\n", "cmap", "[", "m", "==", "255", "]", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.dense_crf": [[110, 127], ["pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_softmax", "numpy.ascontiguousarray", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.array().reshape", "numpy.transpose().copy", "numpy.copy", "numpy.array", "numpy.transpose"], "function", ["None"], ["", "def", "dense_crf", "(", "probs", ",", "img", "=", "None", ",", "n_classes", "=", "21", ",", "n_iters", "=", "1", ",", "scale_factor", "=", "1", ")", ":", "\n", "\t", "c", ",", "h", ",", "w", "=", "probs", ".", "shape", "\n", "if", "img", "is", "not", "None", ":", "\n", "\t\t", "assert", "(", "img", ".", "shape", "[", "1", ":", "3", "]", "==", "(", "h", ",", "w", ")", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", "order", "=", "'C'", ")", "\n", "\n", "", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "n_classes", ")", "# Define DenseCRF model.", "\n", "\n", "unary", "=", "unary_from_softmax", "(", "probs", ")", "\n", "unary", "=", "np", ".", "ascontiguousarray", "(", "unary", ")", "\n", "d", ".", "setUnaryEnergy", "(", "unary", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "3", "/", "scale_factor", ",", "compat", "=", "3", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "80", "/", "scale_factor", ",", "srgb", "=", "13", ",", "rgbim", "=", "np", ".", "copy", "(", "img", ")", ",", "compat", "=", "10", ")", "\n", "Q", "=", "d", ".", "inference", "(", "n_iters", ")", "\n", "\n", "preds", "=", "np", ".", "array", "(", "Q", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_classes", ",", "h", ",", "w", ")", ")", "\n", "return", "preds", "\n", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ImageDataset.__init__": [[65, 71], ["data.load_img_name_list"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_img_name_list"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_name_list", "=", "[", "]", "\n", "if", "img_name_list_path", "!=", "''", ":", "\n", "            ", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "", "self", ".", "voc12_root", "=", "voc12_root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ImageDataset.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ImageDataset.__getitem__": [[75, 87], ["PIL.Image.open().convert", "PIL.Image.open().convert", "data.VOC12ImageDataset.transform", "PIL.Image.open", "PIL.Image.open", "data.get_img_path"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.get_img_path"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "\n", "if", "'yfcc100m'", "in", "name", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "name", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "get_img_path", "(", "name", ",", "self", ".", "voc12_root", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "name", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDataset.__init__": [[91, 106], ["data.VOC12ImageDataset.__init__", "data.load_image_label_list_from_npy", "open().readlines", "l.strip().split", "numpy.zeros().astype", "data.VOC12ClsDataset.label_list.append", "data.VOC12ClsDataset.img_name_list.append", "open", "l.strip", "numpy.zeros", "int", "int"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ",", "pseudo_gt", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "transform", ")", "\n", "if", "self", ".", "img_name_list", "!=", "''", ":", "\n", "            ", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ")", "\n", "", "if", "pseudo_gt", "!=", "\"\"", ":", "\n", "            ", "lines", "=", "open", "(", "pseudo_gt", ")", ".", "readlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "tokens", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "#labels = np.zeros_like(self.label_list[0])", "\n", "labels", "=", "np", ".", "zeros", "(", "500", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "t", "in", "tokens", "[", "1", ":", "]", ":", "\n", "                    ", "if", "int", "(", "t", ")", "<", "labels", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "labels", "[", "int", "(", "t", ")", "-", "1", "]", "=", "1", "\n", "", "", "self", ".", "label_list", ".", "append", "(", "labels", ")", "\n", "self", ".", "img_name_list", ".", "append", "(", "tokens", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDataset.__getitem__": [[107, 113], ["data.VOC12ImageDataset.__getitem__", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "\n", "return", "name", ",", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMSF.__init__": [[116, 121], ["data.VOC12ClsDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "scales", ",", "inter_transform", "=", "None", ",", "unit", "=", "1", ",", "pseudo_gt", "=", "''", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ",", "pseudo_gt", "=", "pseudo_gt", ")", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "unit", "=", "unit", "\n", "self", ".", "inter_transform", "=", "inter_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMSF.__getitem__": [[122, 144], ["data.VOC12ClsDataset.__getitem__", "range", "int", "int", "img.resize", "ms_img_list.append", "range", "len", "msf_img_list.append", "msf_img_list.append", "round", "round", "len", "data.VOC12ClsDatasetMSF.inter_transform", "numpy.flip().copy", "round", "round", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "rounded_size", "=", "(", "int", "(", "round", "(", "img", ".", "size", "[", "0", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ",", "int", "(", "round", "(", "img", ".", "size", "[", "1", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ")", "\n", "\n", "ms_img_list", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "target_size", "=", "(", "round", "(", "rounded_size", "[", "0", "]", "*", "s", ")", ",", "\n", "round", "(", "rounded_size", "[", "1", "]", "*", "s", ")", ")", "\n", "s_img", "=", "img", ".", "resize", "(", "target_size", ",", "resample", "=", "PIL", ".", "Image", ".", "CUBIC", ")", "\n", "ms_img_list", ".", "append", "(", "s_img", ")", "\n", "\n", "", "if", "self", ".", "inter_transform", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "                ", "ms_img_list", "[", "i", "]", "=", "self", ".", "inter_transform", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "", "", "msf_img_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "            ", "msf_img_list", ".", "append", "(", "ms_img_list", "[", "i", "]", ")", "\n", "msf_img_list", ".", "append", "(", "np", ".", "flip", "(", "ms_img_list", "[", "i", "]", ",", "-", "1", ")", ".", "copy", "(", ")", ")", "\n", "\n", "", "return", "name", ",", "msf_img_list", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMS.__init__": [[147, 152], ["data.VOC12ClsDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "scales", ",", "inter_transform", "=", "None", ",", "unit", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ")", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "unit", "=", "unit", "\n", "self", ".", "inter_transform", "=", "inter_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMS.__getitem__": [[153, 170], ["data.VOC12ClsDataset.__getitem__", "int", "int", "img.resize", "ms_img_list.append", "range", "round", "round", "len", "data.VOC12ClsDatasetMS.inter_transform", "round", "round"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "rounded_size", "=", "(", "int", "(", "round", "(", "img", ".", "size", "[", "0", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ",", "int", "(", "round", "(", "img", ".", "size", "[", "1", "]", "/", "self", ".", "unit", ")", "*", "self", ".", "unit", ")", ")", "\n", "\n", "ms_img_list", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "target_size", "=", "(", "round", "(", "rounded_size", "[", "0", "]", "*", "s", ")", ",", "\n", "round", "(", "rounded_size", "[", "1", "]", "*", "s", ")", ")", "\n", "s_img", "=", "img", ".", "resize", "(", "target_size", ",", "resample", "=", "PIL", ".", "Image", ".", "CUBIC", ")", "\n", "ms_img_list", ".", "append", "(", "s_img", ")", "\n", "\n", "", "if", "self", ".", "inter_transform", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "                ", "ms_img_list", "[", "i", "]", "=", "self", ".", "inter_transform", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "", "", "return", "name", ",", "ms_img_list", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.ExtractAffinityLabelInRadius.__init__": [[173, 191], ["range", "range", "data.ExtractAffinityLabelInRadius.search_dist.append", "range", "data.ExtractAffinityLabelInRadius.search_dist.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cropsize", ",", "radius", "=", "5", ")", ":", "\n", "        ", "self", ".", "radius", "=", "radius", "\n", "\n", "self", ".", "search_dist", "=", "[", "]", "\n", "\n", "for", "x", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "            ", "self", ".", "search_dist", ".", "append", "(", "(", "0", ",", "x", ")", ")", "\n", "\n", "", "for", "y", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "-", "radius", "+", "1", ",", "radius", ")", ":", "\n", "                ", "if", "x", "*", "x", "+", "y", "*", "y", "<", "radius", "*", "radius", ":", "\n", "                    ", "self", ".", "search_dist", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "\n", "", "", "", "self", ".", "radius_floor", "=", "radius", "-", "1", "\n", "\n", "self", ".", "crop_height", "=", "cropsize", "-", "self", ".", "radius_floor", "\n", "self", ".", "crop_width", "=", "cropsize", "-", "2", "*", "self", ".", "radius_floor", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.ExtractAffinityLabelInRadius.__call__": [[192, 222], ["numpy.reshape", "numpy.expand_dims", "numpy.stack", "numpy.stack", "numpy.equal", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.logical_and().astype", "numpy.reshape", "numpy.logical_and", "labels_to_list.append", "valid_pair_list.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.less", "numpy.less", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.equal", "numpy.logical_and", "numpy.logical_not", "numpy.not_equal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "label", ")", ":", "\n", "\n", "        ", "labels_from", "=", "label", "[", ":", "-", "self", ".", "radius_floor", ",", "self", ".", "radius_floor", ":", "-", "self", ".", "radius_floor", "]", "\n", "labels_from", "=", "np", ".", "reshape", "(", "labels_from", ",", "[", "-", "1", "]", ")", "\n", "\n", "labels_to_list", "=", "[", "]", "\n", "valid_pair_list", "=", "[", "]", "\n", "\n", "for", "dy", ",", "dx", "in", "self", ".", "search_dist", ":", "\n", "            ", "labels_to", "=", "label", "[", "dy", ":", "dy", "+", "self", ".", "crop_height", ",", "self", ".", "radius_floor", "+", "dx", ":", "self", ".", "radius_floor", "+", "dx", "+", "self", ".", "crop_width", "]", "\n", "labels_to", "=", "np", ".", "reshape", "(", "labels_to", ",", "[", "-", "1", "]", ")", "\n", "\n", "valid_pair", "=", "np", ".", "logical_and", "(", "np", ".", "less", "(", "labels_to", ",", "255", ")", ",", "np", ".", "less", "(", "labels_from", ",", "255", ")", ")", "\n", "\n", "labels_to_list", ".", "append", "(", "labels_to", ")", "\n", "valid_pair_list", ".", "append", "(", "valid_pair", ")", "\n", "\n", "", "bc_labels_from", "=", "np", ".", "expand_dims", "(", "labels_from", ",", "0", ")", "\n", "concat_labels_to", "=", "np", ".", "stack", "(", "labels_to_list", ")", "\n", "concat_valid_pair", "=", "np", ".", "stack", "(", "valid_pair_list", ")", "\n", "\n", "pos_affinity_label", "=", "np", ".", "equal", "(", "bc_labels_from", ",", "concat_labels_to", ")", "\n", "\n", "bg_pos_affinity_label", "=", "np", ".", "logical_and", "(", "pos_affinity_label", ",", "np", ".", "equal", "(", "bc_labels_from", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "fg_pos_affinity_label", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "pos_affinity_label", ",", "np", ".", "not_equal", "(", "bc_labels_from", ",", "0", ")", ")", ",", "concat_valid_pair", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "neg_affinity_label", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "pos_affinity_label", ")", ",", "concat_valid_pair", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "bg_pos_affinity_label", ")", ",", "torch", ".", "from_numpy", "(", "fg_pos_affinity_label", ")", ",", "torch", ".", "from_numpy", "(", "neg_affinity_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12AffDataset.__init__": [[225, 238], ["data.VOC12ImageDataset.__init__", "data.ExtractAffinityLabelInRadius"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "label_la_dir", ",", "label_ha_dir", ",", "cropsize", ",", "voc12_root", ",", "radius", "=", "5", ",", "\n", "joint_transform_list", "=", "None", ",", "img_transform_list", "=", "None", ",", "label_transform_list", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ")", "\n", "\n", "self", ".", "label_la_dir", "=", "label_la_dir", "\n", "self", ".", "label_ha_dir", "=", "label_ha_dir", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "img_transform_list", "=", "img_transform_list", "\n", "self", ".", "label_transform_list", "=", "label_transform_list", "\n", "\n", "self", ".", "extract_aff_lab_func", "=", "ExtractAffinityLabelInRadius", "(", "cropsize", "=", "cropsize", "//", "8", ",", "radius", "=", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12AffDataset.__len__": [[239, 241], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12AffDataset.__getitem__": [[242, 280], ["data.VOC12ImageDataset.__getitem__", "os.path.join", "os.path.join", "numpy.load().item", "numpy.load().item", "numpy.array", "numpy.transpose", "zip", "numpy.array_split", "numpy.argmax().astype", "numpy.argmax().astype", "numpy.argmax().astype.copy", "data.VOC12AffDataset.extract_aff_lab_func", "numpy.max", "numpy.load", "numpy.load", "list", "list", "numpy.concatenate", "joint_transform", "img_transform", "label_transform", "numpy.argmax", "numpy.argmax", "numpy.argmax().astype.values", "numpy.argmax().astype.values"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "label_la_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_la_dir", ",", "name", "+", "'.npy'", ")", "\n", "\n", "label_ha_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_ha_dir", ",", "name", "+", "'.npy'", ")", "\n", "\n", "label_la", "=", "np", ".", "load", "(", "label_la_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "label_ha", "=", "np", ".", "load", "(", "label_ha_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "list", "(", "label_la", ".", "values", "(", ")", ")", "+", "list", "(", "label_ha", ".", "values", "(", ")", ")", ")", "\n", "label", "=", "np", ".", "transpose", "(", "label", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "for", "joint_transform", ",", "img_transform", ",", "label_transform", "in", "zip", "(", "self", ".", "joint_transform_list", ",", "self", ".", "img_transform_list", ",", "self", ".", "label_transform_list", ")", ":", "\n", "\n", "            ", "if", "joint_transform", ":", "\n", "                ", "img_label", "=", "np", ".", "concatenate", "(", "(", "img", ",", "label", ")", ",", "axis", "=", "-", "1", ")", "\n", "img_label", "=", "joint_transform", "(", "img_label", ")", "\n", "img", "=", "img_label", "[", "...", ",", ":", "3", "]", "\n", "label", "=", "img_label", "[", "...", ",", "3", ":", "]", "\n", "\n", "", "if", "img_transform", ":", "\n", "                ", "img", "=", "img_transform", "(", "img", ")", "\n", "", "if", "label_transform", ":", "\n", "                ", "label", "=", "label_transform", "(", "label", ")", "\n", "\n", "", "", "no_score_region", "=", "np", ".", "max", "(", "label", ",", "-", "1", ")", "<", "1e-5", "\n", "label_la", ",", "label_ha", "=", "np", ".", "array_split", "(", "label", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "label_la", "=", "np", ".", "argmax", "(", "label_la", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label_ha", "=", "np", ".", "argmax", "(", "label_ha", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label", "=", "label_la", ".", "copy", "(", ")", "\n", "label", "[", "label_la", "==", "0", "]", "=", "255", "\n", "label", "[", "label_ha", "==", "0", "]", "=", "0", "\n", "label", "[", "no_score_region", "]", "=", "255", "# mostly outer of cropped region", "\n", "label", "=", "self", ".", "extract_aff_lab_func", "(", "label", ")", "\n", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12AffGtDataset.__init__": [[283, 295], ["data.VOC12ImageDataset.__init__", "data.ExtractAffinityLabelInRadius"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "label_dir", ",", "cropsize", ",", "voc12_root", ",", "radius", "=", "5", ",", "\n", "joint_transform_list", "=", "None", ",", "img_transform_list", "=", "None", ",", "label_transform_list", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ")", "\n", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "img_transform_list", "=", "img_transform_list", "\n", "self", ".", "label_transform_list", "=", "label_transform_list", "\n", "\n", "self", ".", "extract_aff_lab_func", "=", "ExtractAffinityLabelInRadius", "(", "cropsize", "=", "cropsize", "//", "8", ",", "radius", "=", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12AffGtDataset.__len__": [[296, 298], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12AffGtDataset.__getitem__": [[299, 323], ["data.VOC12ImageDataset.__getitem__", "os.path.join", "scipy.misc.imread", "zip", "data.VOC12AffGtDataset.extract_aff_lab_func", "numpy.concatenate", "joint_transform", "img_transform", "label_transform"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "name", "+", "'.png'", ")", "\n", "\n", "label", "=", "scipy", ".", "misc", ".", "imread", "(", "label_path", ")", "\n", "\n", "for", "joint_transform", ",", "img_transform", ",", "label_transform", "in", "zip", "(", "self", ".", "joint_transform_list", ",", "self", ".", "img_transform_list", ",", "self", ".", "label_transform_list", ")", ":", "\n", "\n", "            ", "if", "joint_transform", ":", "\n", "                ", "img_label", "=", "np", ".", "concatenate", "(", "(", "img", ",", "label", ")", ",", "axis", "=", "-", "1", ")", "\n", "img_label", "=", "joint_transform", "(", "img_label", ")", "\n", "img", "=", "img_label", "[", "...", ",", ":", "3", "]", "\n", "label", "=", "img_label", "[", "...", ",", "3", ":", "]", "\n", "\n", "", "if", "img_transform", ":", "\n", "                ", "img", "=", "img_transform", "(", "img", ")", "\n", "", "if", "label_transform", ":", "\n", "                ", "label", "=", "label_transform", "(", "label", ")", "\n", "\n", "", "", "label", "=", "self", ".", "extract_aff_lab_func", "(", "label", ")", "\n", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.__init__": [[326, 345], ["data.load_img_name_list", "data.load_image_label_list_from_npy"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_img_name_list", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_image_label_list_from_npy"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "heatmap_root", ",", "heat_type", ",", "voc12_root", ",", "transform", "=", "None", ",", "scale", "=", "(", "0.04", ",", "1", ")", ",", "ratio", "=", "(", "3.", "/", "5.", ",", "5.", "/", "3.", ")", ",", "label_match_thresh", "=", "0.1", ",", "cut_scale", "=", "(", "0.02", ",", "0.25", ")", ",", "cut_p", "=", "0.5", ",", "\n", "crop_scales", "=", "[", "]", ",", "crop_size", "=", "448", ",", "stride", "=", "300", ")", ":", "\n", "        ", "self", ".", "img_name_list", "=", "load_img_name_list", "(", "img_name_list_path", ")", "\n", "self", ".", "label_list", "=", "load_image_label_list_from_npy", "(", "self", ".", "img_name_list", ")", "\n", "\n", "self", ".", "voc12_root", "=", "voc12_root", "\n", "self", ".", "heatmap_root", "=", "heatmap_root", "\n", "self", ".", "heat_type", "=", "heat_type", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "label_match_thresh", "=", "label_match_thresh", "\n", "self", ".", "cut_scale", "=", "cut_scale", "\n", "self", ".", "cut_p", "=", "cut_p", "\n", "self", ".", "crop_scales", "=", "crop_scales", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.get_params": [[346, 380], ["range", "torch.log", "torch.exp().item", "int", "int", "float", "float", "min", "int", "int", "int", "int", "int", "torch.empty().uniform_().item", "torch.tensor", "round", "round", "torch.randint().item", "torch.randint().item", "round", "max", "int", "torch.exp", "math.sqrt", "math.sqrt", "int", "int", "int", "int", "round", "torch.empty().uniform_", "torch.empty().uniform_", "torch.randint", "torch.randint", "min", "max", "torch.empty", "torch.empty"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "img", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "width", ",", "height", "=", "img", ".", "size", "\n", "area", "=", "height", "*", "width", "\n", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "target_area", "=", "area", "*", "torch", ".", "empty", "(", "1", ")", ".", "uniform_", "(", "scale", "[", "0", "]", ",", "scale", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "log_ratio", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "ratio", ")", ")", "\n", "aspect_ratio", "=", "torch", ".", "exp", "(", "torch", ".", "empty", "(", "1", ")", ".", "uniform_", "(", "log_ratio", "[", "0", "]", ",", "log_ratio", "[", "1", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "0", "<", "w", "<=", "width", "and", "0", "<", "h", "<=", "height", ":", "\n", "                ", "i", "=", "torch", ".", "randint", "(", "0", ",", "height", "-", "h", "+", "1", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "j", "=", "torch", ".", "randint", "(", "0", ",", "width", "-", "w", "+", "1", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "param", "=", "[", "int", "(", "j", ")", ",", "int", "(", "i", ")", ",", "int", "(", "j", "+", "w", ")", ",", "int", "(", "i", "+", "h", ")", "]", "\n", "return", "param", "\n", "\n", "# Fallback to central crop", "\n", "", "", "in_ratio", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "if", "in_ratio", "<", "min", "(", "ratio", ")", ":", "\n", "            ", "w", "=", "width", "\n", "h", "=", "int", "(", "round", "(", "w", "/", "min", "(", "ratio", ")", ")", ")", "\n", "", "elif", "in_ratio", ">", "max", "(", "ratio", ")", ":", "\n", "            ", "h", "=", "height", "\n", "w", "=", "int", "(", "round", "(", "h", "*", "max", "(", "ratio", ")", ")", ")", "\n", "", "else", ":", "# whole image", "\n", "            ", "w", "=", "width", "\n", "h", "=", "height", "\n", "", "i", "=", "(", "height", "-", "h", ")", "//", "2", "\n", "j", "=", "(", "width", "-", "w", ")", "//", "2", "\n", "\n", "param", "=", "[", "int", "(", "j", ")", ",", "int", "(", "i", ")", ",", "int", "(", "j", "+", "w", ")", ",", "int", "(", "i", "+", "h", ")", "]", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.get_multi_crop_params": [[381, 415], ["range", "params_list.append", "int", "int", "int", "int", "range", "math.ceil", "math.ceil", "int", "int", "int", "int", "s_list.append", "max", "min", "max", "min", "max", "max", "float", "float", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "get_multi_crop_params", "(", "self", ",", "img", ",", "crop_scales", ",", "crop_size", ",", "stride", ")", ":", "\n", "        ", "params_list", "=", "[", "]", "\n", "\n", "# multi crop proposals", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "for", "s", "in", "crop_scales", ":", "\n", "            ", "s_list", "=", "[", "]", "\n", "w", ",", "h", "=", "int", "(", "width", "*", "s", ")", ",", "int", "(", "height", "*", "s", ")", "\n", "w_num", "=", "1", "+", "int", "(", "math", ".", "ceil", "(", "max", "(", "0.0", ",", "float", "(", "w", "-", "crop_size", ")", ")", "/", "stride", ")", ")", "\n", "h_num", "=", "1", "+", "int", "(", "math", ".", "ceil", "(", "max", "(", "0.0", ",", "float", "(", "h", "-", "crop_size", ")", ")", "/", "stride", ")", ")", "\n", "for", "w_idx", "in", "range", "(", "w_num", ")", ":", "\n", "                ", "for", "h_idx", "in", "range", "(", "h_num", ")", ":", "\n", "                    ", "if", "w_idx", "==", "(", "w_num", "-", "1", ")", ":", "\n", "                        ", "x2", "=", "w", "\n", "x1", "=", "max", "(", "0", ",", "x2", "-", "crop_size", ")", "\n", "", "else", ":", "\n", "                        ", "x2", "=", "min", "(", "w", ",", "(", "w_idx", "+", "1", ")", "*", "stride", ")", "\n", "x1", "=", "w_idx", "*", "stride", "\n", "\n", "", "if", "h_idx", "==", "(", "h_num", "-", "1", ")", ":", "\n", "                        ", "y2", "=", "h", "\n", "y1", "=", "max", "(", "0", ",", "y2", "-", "crop_size", ")", "\n", "", "else", ":", "\n", "                        ", "y2", "=", "min", "(", "h", ",", "(", "h_idx", "+", "1", ")", "*", "stride", ")", "\n", "y1", "=", "h_idx", "*", "stride", "\n", "\n", "", "x1", "=", "int", "(", "float", "(", "x1", ")", "/", "s", ")", "\n", "x2", "=", "int", "(", "float", "(", "x2", ")", "/", "s", ")", "\n", "y1", "=", "int", "(", "float", "(", "y1", ")", "/", "s", ")", "\n", "y2", "=", "int", "(", "float", "(", "y2", ")", "/", "s", ")", "\n", "s_list", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "", "", "params_list", ".", "append", "(", "s_list", ")", "\n", "\n", "", "return", "params_list", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.update_label": [[417, 435], ["numpy.zeros_like", "heat.items", "numpy.zeros_like", "range", "float", "int", "int", "int", "int", "int", "int", "numpy.zeros_like.sum"], "methods", ["None"], ["", "def", "update_label", "(", "self", ",", "label", ",", "heat", ",", "param", ",", "label_thresh", "=", "0.1", ")", ":", "\n", "        ", "new_label", "=", "np", ".", "zeros_like", "(", "label", ")", "\n", "for", "k", ",", "v", "in", "heat", ".", "items", "(", ")", ":", "\n", "            ", "k_first", "=", "k", "\n", "break", "\n", "", "selected", "=", "np", ".", "zeros_like", "(", "heat", "[", "k_first", "]", ")", "\n", "selected", "[", "int", "(", "param", "[", "1", "]", ")", ":", "int", "(", "param", "[", "3", "]", ")", ",", "int", "(", "param", "[", "0", "]", ")", ":", "int", "(", "param", "[", "2", "]", ")", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "int", "(", "i", "+", "1", ")", "not", "in", "heat", ":", "\n", "                ", "continue", "\n", "", "mask", "=", "heat", "[", "int", "(", "i", ")", "+", "1", "]", "\n", "if", "(", "mask", ">", "0.9", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "intersection", "=", "float", "(", "(", "(", "mask", ">", "0.9", ")", "*", "selected", ")", ".", "sum", "(", ")", ")", "\n", "# box inside mask, or mask inside box", "\n", "if", "(", "intersection", "/", "(", "mask", ">", "0.9", ")", ".", "sum", "(", ")", ")", ">", "label_thresh", "or", "(", "intersection", "/", "selected", ".", "sum", "(", ")", ")", ">", "label_thresh", ":", "\n", "               ", "new_label", "[", "i", "]", "=", "1", "\n", "", "", "return", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.check_cut_label": [[436, 463], ["numpy.zeros_like", "heat.items", "numpy.zeros_like", "range", "float", "int", "int", "int", "int", "int", "int", "int", "int", "int", "float", "float", "float", "float", "int", "int", "int", "int", "int", "numpy.zeros_like.sum"], "methods", ["None"], ["", "def", "check_cut_label", "(", "self", ",", "label", ",", "heat", ",", "param", ",", "cut_param", ",", "label_thresh", "=", "0.1", ")", ":", "\n", "        ", "new_label", "=", "np", ".", "zeros_like", "(", "label", ")", "\n", "for", "k", ",", "v", "in", "heat", ".", "items", "(", ")", ":", "\n", "            ", "k_first", "=", "k", "\n", "break", "\n", "", "selected", "=", "np", ".", "zeros_like", "(", "heat", "[", "k_first", "]", ")", "\n", "selected", "[", "int", "(", "param", "[", "1", "]", ")", ":", "int", "(", "param", "[", "3", "]", ")", ",", "int", "(", "param", "[", "0", "]", ")", ":", "int", "(", "param", "[", "2", "]", ")", "]", "=", "1", "\n", "\n", "# cut part in selected", "\n", "w", ",", "h", "=", "param", "[", "2", "]", "-", "param", "[", "0", "]", ",", "param", "[", "3", "]", "-", "param", "[", "1", "]", "\n", "x1", "=", "param", "[", "0", "]", "+", "float", "(", "w", ")", "/", "selected", ".", "shape", "[", "1", "]", "*", "cut_param", "[", "0", "]", "\n", "y1", "=", "param", "[", "1", "]", "+", "float", "(", "h", ")", "/", "selected", ".", "shape", "[", "0", "]", "*", "cut_param", "[", "1", "]", "\n", "x2", "=", "param", "[", "0", "]", "+", "float", "(", "w", ")", "/", "selected", ".", "shape", "[", "1", "]", "*", "cut_param", "[", "2", "]", "\n", "y2", "=", "param", "[", "1", "]", "+", "float", "(", "h", ")", "/", "selected", ".", "shape", "[", "0", "]", "*", "cut_param", "[", "3", "]", "\n", "selected", "[", "int", "(", "y1", ")", ":", "int", "(", "y2", ")", ",", "int", "(", "x1", ")", ":", "int", "(", "x2", ")", "]", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "int", "(", "i", "+", "1", ")", "not", "in", "heat", ":", "\n", "                ", "continue", "\n", "", "mask", "=", "heat", "[", "int", "(", "i", ")", "+", "1", "]", "\n", "if", "(", "mask", ">", "0.9", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "intersection", "=", "float", "(", "(", "(", "mask", ">", "0.9", ")", "*", "selected", ")", ".", "sum", "(", ")", ")", "\n", "# box inside mask, or mask inside box", "\n", "if", "(", "intersection", "/", "(", "mask", ">", "0.9", ")", ".", "sum", "(", ")", ")", ">", "label_thresh", "or", "(", "intersection", "/", "selected", ".", "sum", "(", ")", ")", ">", "label_thresh", ":", "\n", "               ", "new_label", "[", "i", "]", "=", "1", "\n", "", "", "return", "new_label", ",", "[", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", ",", "int", "(", "x2", ")", ",", "int", "(", "y2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.__len__": [[464, 466], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.__getitem__": [[467, 519], ["PIL.Image.open().convert", "torch.from_numpy", "data.VOC12ClsHeatCropDataset.crop", "set", "data.VOC12ClsHeatCropDataset.get_multi_crop_params", "int", "len", "range", "torch.rand", "data.VOC12ClsHeatCropDataset.get_params", "data.VOC12ClsHeatCropDataset.check_cut_label", "PIL.Image.new", "data.VOC12ClsHeatCropDataset.paste", "data.VOC12ClsHeatCropDataset.transform", "torch.from_numpy", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array.reshape().tolist", "numpy.zeros_like", "numpy.load().item", "print", "data.VOC12ClsHeatCropDataset.get_params", "data.VOC12ClsHeatCropDataset.update_label", "int", "data.VOC12ClsHeatCropDataset.update_label", "data.get_img_path", "os.path.join", "data.VOC12ClsHeatCropDataset.__getitem__", "torch.rand", "len", "data.VOC12ClsHeatCropDataset.sum", "numpy.array.reshape", "int", "numpy.load", "data.VOC12ClsHeatCropDataset.sum", "torch.rand", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.get_multi_crop_params", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.get_params", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.check_cut_label", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.get_params", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.update_label", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsHeatCropDataset.update_label", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.get_img_path", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_name_list", "[", "idx", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "get_img_path", "(", "name", ",", "self", ".", "voc12_root", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label_list", "[", "idx", "]", ")", "\n", "\n", "if", "self", ".", "heat_type", "==", "'png'", ":", "\n", "            ", "try", ":", "\n", "                ", "png", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "heatmap_root", ",", "name", "+", "'.png'", ")", ")", "\n", "png_np", "=", "np", ".", "array", "(", "png", ")", "\n", "", "except", ":", "\n", "                ", "return", "self", ".", "__getitem__", "(", "idx", "+", "1", ")", "\n", "", "uniq", "=", "set", "(", "png_np", ".", "reshape", "(", "png_np", ".", "shape", "[", "0", "]", "*", "png_np", ".", "shape", "[", "1", "]", ")", ".", "tolist", "(", ")", ")", "\n", "heat", "=", "{", "}", "\n", "for", "l", "in", "uniq", ":", "\n", "                ", "m", "=", "np", ".", "zeros_like", "(", "png_np", ")", "\n", "m", "[", "png_np", "==", "l", "]", "=", "1", "\n", "heat", "[", "int", "(", "l", ")", "]", "=", "m", "\n", "", "", "elif", "self", ".", "heat_type", "==", "'npy'", ":", "\n", "            ", "heat", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "heatmap_root", ",", "name", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'error heatmap type!'", ")", "\n", "\n", "", "if", "self", ".", "crop_scales", "==", "[", "]", ":", "\n", "            ", "counter", "=", "0", "\n", "while", "True", ":", "\n", "                ", "counter", "+=", "1", "\n", "param", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "new_label", "=", "self", ".", "update_label", "(", "label", ",", "heat", ",", "param", ",", "self", ".", "label_match_thresh", ")", "\n", "if", "new_label", ".", "sum", "(", ")", ">", "0", "or", "counter", ">=", "100", ":", "\n", "                    ", "break", "\n", "", "", "", "else", ":", "\n", "            ", "params", "=", "self", ".", "get_multi_crop_params", "(", "img", ",", "self", ".", "crop_scales", ",", "self", ".", "crop_size", ",", "self", ".", "stride", ")", "\n", "scale_idx", "=", "int", "(", "torch", ".", "rand", "(", "1", ")", "*", "len", "(", "self", ".", "crop_scales", ")", ")", "\n", "ins_len", "=", "len", "(", "params", "[", "scale_idx", "]", ")", "\n", "for", "_", "in", "range", "(", "ins_len", ")", ":", "\n", "                ", "ins_idx", "=", "int", "(", "torch", ".", "rand", "(", "1", ")", "*", "ins_len", ")", "\n", "param", "=", "params", "[", "scale_idx", "]", "[", "ins_idx", "]", "\n", "new_label", "=", "self", ".", "update_label", "(", "label", ",", "heat", ",", "param", ",", "self", ".", "label_match_thresh", ")", "\n", "if", "new_label", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "cut_p", ":", "\n", "            ", "cut_param", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "new_label", ",", "fill_param", "=", "self", ".", "check_cut_label", "(", "label", ",", "heat", ",", "param", ",", "cut_param", ",", "self", ".", "label_match_thresh", ")", "\n", "fill_img", "=", "Image", ".", "new", "(", "'RGB'", ",", "[", "fill_param", "[", "2", "]", "-", "fill_param", "[", "0", "]", ",", "fill_param", "[", "3", "]", "-", "fill_param", "[", "1", "]", "]", ",", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "img", ".", "paste", "(", "fill_img", ",", "fill_param", ")", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "param", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "name", ",", "img", ",", "torch", ".", "from_numpy", "(", "new_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__init__": [[523, 530], ["data.VOC12ClsDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_name_list_path", ",", "voc12_root", ",", "scales", "=", "[", "0.75", ",", "1", ",", "1.25", ",", "1.5", ",", "2", "]", ",", "crop_size", "=", "448", ",", "stride", "=", "300", ",", "inter_transform", "=", "None", ",", "unit", "=", "1", ",", "pseudo_gt", "=", "''", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_name_list_path", ",", "voc12_root", ",", "transform", "=", "None", ",", "pseudo_gt", "=", "pseudo_gt", ")", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "unit", "=", "unit", "\n", "self", ".", "inter_transform", "=", "inter_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__": [[531, 580], ["data.VOC12ClsDataset.__getitem__", "range", "range", "range", "len", "msf_img_list.append", "msf_img_list.append", "location_list_f.append", "location_list_f.append", "int", "int", "int", "int", "range", "len", "data.VOC12ClsDatasetMultiCrop.inter_transform", "numpy.flip().copy", "math.ceil", "math.ceil", "int", "int", "int", "int", "img.crop", "s_img.resize.resize.resize", "ms_img_list.append", "location_list.append", "max", "min", "max", "min", "numpy.flip", "max", "max", "float", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.VOC12ClsDatasetMultiCrop.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", ",", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "\n", "ms_img_list", "=", "[", "]", "\n", "location_list", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "w", ",", "h", "=", "int", "(", "width", "*", "s", ")", ",", "int", "(", "height", "*", "s", ")", "\n", "w_num", "=", "1", "+", "int", "(", "math", ".", "ceil", "(", "max", "(", "0.0", ",", "float", "(", "w", "-", "self", ".", "crop_size", ")", ")", "/", "self", ".", "stride", ")", ")", "\n", "h_num", "=", "1", "+", "int", "(", "math", ".", "ceil", "(", "max", "(", "0.0", ",", "float", "(", "h", "-", "self", ".", "crop_size", ")", ")", "/", "self", ".", "stride", ")", ")", "\n", "for", "w_idx", "in", "range", "(", "w_num", ")", ":", "\n", "                ", "for", "h_idx", "in", "range", "(", "h_num", ")", ":", "\n", "                    ", "if", "w_idx", "==", "(", "w_num", "-", "1", ")", ":", "\n", "                        ", "x2", "=", "w", "\n", "x1", "=", "max", "(", "0", ",", "x2", "-", "self", ".", "crop_size", ")", "\n", "", "else", ":", "\n", "                        ", "x2", "=", "min", "(", "w", ",", "(", "w_idx", "+", "1", ")", "*", "self", ".", "stride", ")", "\n", "x1", "=", "w_idx", "*", "self", ".", "stride", "\n", "\n", "", "if", "h_idx", "==", "(", "h_num", "-", "1", ")", ":", "\n", "                        ", "y2", "=", "h", "\n", "y1", "=", "max", "(", "0", ",", "y2", "-", "self", ".", "crop_size", ")", "\n", "", "else", ":", "\n", "                        ", "y2", "=", "min", "(", "h", ",", "(", "h_idx", "+", "1", ")", "*", "self", ".", "stride", ")", "\n", "y1", "=", "h_idx", "*", "self", ".", "stride", "\n", "\n", "", "x1", "=", "int", "(", "float", "(", "x1", ")", "/", "s", ")", "\n", "x2", "=", "int", "(", "float", "(", "x2", ")", "/", "s", ")", "\n", "y1", "=", "int", "(", "float", "(", "y1", ")", "/", "s", ")", "\n", "y2", "=", "int", "(", "float", "(", "y2", ")", "/", "s", ")", "\n", "\n", "s_img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "s_img", "=", "s_img", ".", "resize", "(", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "ms_img_list", ".", "append", "(", "s_img", ")", "\n", "location_list", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "inter_transform", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "                ", "ms_img_list", "[", "i", "]", "=", "self", ".", "inter_transform", "(", "ms_img_list", "[", "i", "]", ")", "\n", "\n", "", "", "msf_img_list", "=", "[", "]", "\n", "location_list_f", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ms_img_list", ")", ")", ":", "\n", "            ", "msf_img_list", ".", "append", "(", "ms_img_list", "[", "i", "]", ")", "\n", "msf_img_list", ".", "append", "(", "np", ".", "flip", "(", "ms_img_list", "[", "i", "]", ",", "-", "1", ")", ".", "copy", "(", ")", ")", "\n", "location_list_f", ".", "append", "(", "location_list", "[", "i", "]", ")", "\n", "location_list_f", ".", "append", "(", "location_list", "[", "i", "]", ")", "\n", "\n", "", "return", "name", ",", "msf_img_list", ",", "label", ",", "location_list_f", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_image_label_from_xml": [[27, 41], ["minidom.parse().getElementsByTagName", "numpy.zeros", "minidom.parse", "os.path.join"], "function", ["None"], ["def", "load_image_label_from_xml", "(", "img_name", ",", "voc12_root", ")", ":", "\n", "    ", "from", "xml", ".", "dom", "import", "minidom", "\n", "\n", "el_list", "=", "minidom", ".", "parse", "(", "os", ".", "path", ".", "join", "(", "voc12_root", ",", "ANNOT_FOLDER_NAME", ",", "img_name", "+", "'.xml'", ")", ")", ".", "getElementsByTagName", "(", "'name'", ")", "\n", "\n", "multi_cls_lab", "=", "np", ".", "zeros", "(", "(", "20", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "el", "in", "el_list", ":", "\n", "        ", "cat_name", "=", "el", ".", "firstChild", ".", "data", "\n", "if", "cat_name", "in", "CAT_LIST", ":", "\n", "            ", "cat_num", "=", "CAT_NAME_TO_NUM", "[", "cat_name", "]", "\n", "multi_cls_lab", "[", "cat_num", "]", "=", "1.0", "\n", "\n", "", "", "return", "multi_cls_lab", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_image_label_list_from_xml": [[42, 45], ["data.load_image_label_from_xml"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_image_label_from_xml"], ["", "def", "load_image_label_list_from_xml", "(", "img_name_list", ",", "voc12_root", ")", ":", "\n", "\n", "    ", "return", "[", "load_image_label_from_xml", "(", "img_name", ",", "voc12_root", ")", "for", "img_name", "in", "img_name_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_image_label_list_from_npy": [[46, 51], ["numpy.load().item", "cls_labels_dict[].astype", "numpy.load"], "function", ["None"], ["", "def", "load_image_label_list_from_npy", "(", "img_name_list", ")", ":", "\n", "\n", "    ", "cls_labels_dict", "=", "np", ".", "load", "(", "CLS_LABEL", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "return", "[", "cls_labels_dict", "[", "img_name", "]", ".", "astype", "(", "np", ".", "float32", ")", "for", "img_name", "in", "img_name_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.get_img_path": [[52, 54], ["os.path.join"], "function", ["None"], ["", "def", "get_img_path", "(", "img_name", ",", "voc12_root", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "voc12_root", ",", "IMG_FOLDER_NAME", ",", "img_name", "+", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.load_img_name_list": [[55, 62], ["open().read().splitlines", "open().read", "img_gt_name.strip", "open", "img_gt_name.split"], "function", ["None"], ["", "def", "load_img_name_list", "(", "dataset_path", ")", ":", "\n", "\n", "    ", "img_gt_name_list", "=", "open", "(", "dataset_path", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "img_name_list", "=", "[", "img_gt_name", ".", "split", "(", "' '", ")", "[", "0", "]", "[", "-", "15", ":", "-", "4", "]", "if", "'jpg'", "in", "img_gt_name", "else", "img_gt_name", ".", "strip", "(", ")", "for", "img_gt_name", "in", "img_gt_name_list", "]", "\n", "\n", "#img_name_list = img_gt_name_list", "\n", "return", "img_name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.__init__": [[7, 11], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outfile", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "outfile", ",", "\"w\"", ")", "\n", "sys", ".", "stdout", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write": [[12, 15], ["pyutils.Logger.terminal.write", "pyutils.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.flush": [[16, 18], ["pyutils.Logger.terminal.flush"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.__init__": [[21, 25], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ")", ":", "\n", "        ", "self", ".", "__data", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "self", ".", "__data", "[", "k", "]", "=", "[", "0.0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.add": [[26, 30], ["dict.items"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__data", "[", "k", "]", "[", "0", "]", "+=", "v", "\n", "self", ".", "__data", "[", "k", "]", "[", "1", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.get": [[31, 37], ["len", "tuple"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "*", "keys", ")", ":", "\n", "        ", "if", "len", "(", "keys", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "__data", "[", "keys", "[", "0", "]", "]", "[", "0", "]", "/", "self", ".", "__data", "[", "keys", "[", "0", "]", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "v_list", "=", "[", "self", ".", "__data", "[", "k", "]", "[", "0", "]", "/", "self", ".", "__data", "[", "k", "]", "[", "1", "]", "for", "k", "in", "keys", "]", "\n", "return", "tuple", "(", "v_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.pop": [[38, 46], ["pyutils.AverageMeter.__data.keys", "pyutils.AverageMeter.get"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.get"], ["", "", "def", "pop", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "if", "key", "is", "None", ":", "\n", "            ", "for", "k", "in", "self", ".", "__data", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "__data", "[", "k", "]", "=", "[", "0.0", ",", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "v", "=", "self", ".", "get", "(", "key", ")", "\n", "self", ".", "__data", "[", "key", "]", "=", "[", "0.0", ",", "0", "]", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.__init__": [[49, 55], ["time.time", "print", "time.ctime", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "starting_msg", "=", "None", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "stage_start", "=", "self", ".", "start", "\n", "\n", "if", "starting_msg", "is", "not", "None", ":", "\n", "            ", "print", "(", "starting_msg", ",", "time", ".", "ctime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.update_progress": [[57, 62], ["int", "time.time"], "methods", ["None"], ["", "", "def", "update_progress", "(", "self", ",", "progress", ")", ":", "\n", "        ", "self", ".", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start", "\n", "self", ".", "est_total", "=", "self", ".", "elapsed", "/", "progress", "\n", "self", ".", "est_remaining", "=", "self", ".", "est_total", "-", "self", ".", "elapsed", "\n", "self", ".", "est_finish", "=", "int", "(", "self", ".", "start", "+", "self", ".", "est_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.str_est_finish": [[64, 66], ["str", "time.ctime"], "methods", ["None"], ["", "def", "str_est_finish", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "time", ".", "ctime", "(", "self", ".", "est_finish", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.get_stage_elapsed": [[67, 69], ["time.time"], "methods", ["None"], ["", "def", "get_stage_elapsed", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "stage_start", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.reset_stage": [[70, 72], ["time.time"], "methods", ["None"], ["", "def", "reset_stage", "(", "self", ")", ":", "\n", "        ", "self", ".", "stage_start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__init__": [[78, 91], ["multiprocessing.pool.ThreadPool", "len", "pyutils.BatchThreader.__start_works", "pyutils.BatchThreader.__get_n_pending_works"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__start_works", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__get_n_pending_works"], ["    ", "def", "__init__", "(", "self", ",", "func", ",", "args_list", ",", "batch_size", ",", "prefetch_size", "=", "4", ",", "processes", "=", "12", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "prefetch_size", "=", "prefetch_size", "\n", "\n", "self", ".", "pool", "=", "ThreadPool", "(", "processes", "=", "processes", ")", "\n", "self", ".", "async_result", "=", "[", "]", "\n", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "left_args_list", "=", "args_list", "\n", "self", ".", "n_tasks", "=", "len", "(", "args_list", ")", "\n", "\n", "# initial work", "\n", "self", ".", "__start_works", "(", "self", ".", "__get_n_pending_works", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__start_works": [[93, 98], ["range", "pyutils.BatchThreader.left_args_list.pop", "pyutils.BatchThreader.async_result.append", "pyutils.BatchThreader.pool.apply_async"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.pop"], ["", "def", "__start_works", "(", "self", ",", "times", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "times", ")", ":", "\n", "            ", "args", "=", "self", ".", "left_args_list", ".", "pop", "(", "0", ")", "\n", "self", ".", "async_result", ".", "append", "(", "\n", "self", ".", "pool", ".", "apply_async", "(", "self", ".", "func", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__get_n_pending_works": [[100, 103], ["min", "len", "len"], "methods", ["None"], ["", "", "def", "__get_n_pending_works", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "(", "self", ".", "prefetch_size", "+", "1", ")", "*", "self", ".", "batch_size", "-", "len", "(", "self", ".", "async_result", ")", "\n", ",", "len", "(", "self", ".", "left_args_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.pop_results": [[106, 121], ["len", "min", "pyutils.BatchThreader.__get_n_pending_works", "pyutils.BatchThreader.async_result.pop().get", "pyutils.BatchThreader.pool.close", "pyutils.BatchThreader.__start_works", "range", "pyutils.BatchThreader.async_result.pop"], "methods", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__get_n_pending_works", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.get", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.__start_works", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.pop"], ["", "def", "pop_results", "(", "self", ")", ":", "\n", "\n", "        ", "n_inwork", "=", "len", "(", "self", ".", "async_result", ")", "\n", "\n", "n_fetch", "=", "min", "(", "n_inwork", ",", "self", ".", "batch_size", ")", "\n", "rtn", "=", "[", "self", ".", "async_result", ".", "pop", "(", "0", ")", ".", "get", "(", ")", "\n", "for", "_", "in", "range", "(", "n_fetch", ")", "]", "\n", "\n", "to_fill", "=", "self", ".", "__get_n_pending_works", "(", ")", "\n", "if", "to_fill", "==", "0", ":", "\n", "            ", "self", ".", "pool", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__start_works", "(", "to_fill", ")", "\n", "\n", "", "return", "rtn", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs": [[125, 160], ["range", "range", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "search_dist.append", "range", "numpy.arange", "numpy.reshape", "indices_to_list.append", "search_dist.append"], "function", ["None"], ["", "", "def", "get_indices_of_pairs", "(", "radius", ",", "size", ")", ":", "\n", "\n", "    ", "search_dist", "=", "[", "]", "\n", "\n", "for", "x", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "        ", "search_dist", ".", "append", "(", "(", "0", ",", "x", ")", ")", "\n", "\n", "", "for", "y", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "-", "radius", "+", "1", ",", "radius", ")", ":", "\n", "            ", "if", "x", "*", "x", "+", "y", "*", "y", "<", "radius", "*", "radius", ":", "\n", "                ", "search_dist", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "\n", "", "", "", "radius_floor", "=", "radius", "-", "1", "\n", "\n", "full_indices", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "0", ",", "size", "[", "0", "]", "*", "size", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ")", "\n", "\n", "cropped_height", "=", "size", "[", "0", "]", "-", "radius_floor", "\n", "cropped_width", "=", "size", "[", "1", "]", "-", "2", "*", "radius_floor", "\n", "\n", "indices_from", "=", "np", ".", "reshape", "(", "full_indices", "[", ":", "-", "radius_floor", ",", "radius_floor", ":", "-", "radius_floor", "]", ",", "\n", "[", "-", "1", "]", ")", "\n", "\n", "indices_to_list", "=", "[", "]", "\n", "\n", "for", "dy", ",", "dx", "in", "search_dist", ":", "\n", "        ", "indices_to", "=", "full_indices", "[", "dy", ":", "dy", "+", "cropped_height", ",", "\n", "radius_floor", "+", "dx", ":", "radius_floor", "+", "dx", "+", "cropped_width", "]", "\n", "indices_to", "=", "np", ".", "reshape", "(", "indices_to", ",", "[", "-", "1", "]", ")", "\n", "\n", "indices_to_list", ".", "append", "(", "indices_to", ")", "\n", "\n", "", "concat_indices_to", "=", "np", ".", "concatenate", "(", "indices_to_list", ",", "axis", "=", "0", ")", "\n", "\n", "return", "indices_from", ",", "concat_indices_to", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.get_indices_of_pairs_circle": [[161, 193], ["range", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "range", "numpy.arange", "numpy.reshape", "indices_to_list.append", "search_dist.append"], "function", ["None"], ["", "def", "get_indices_of_pairs_circle", "(", "radius", ",", "size", ")", ":", "\n", "\n", "    ", "search_dist", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "-", "radius", "+", "1", ",", "radius", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "-", "radius", "+", "1", ",", "radius", ")", ":", "\n", "            ", "if", "x", "*", "x", "+", "y", "*", "y", "<", "radius", "*", "radius", "and", "x", "*", "x", "+", "y", "*", "y", "!=", "0", ":", "\n", "                ", "search_dist", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "\n", "", "", "", "radius_floor", "=", "radius", "-", "1", "\n", "\n", "full_indices", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "0", ",", "size", "[", "0", "]", "*", "size", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ")", "\n", "\n", "cropped_height", "=", "size", "[", "0", "]", "-", "2", "*", "radius_floor", "\n", "cropped_width", "=", "size", "[", "1", "]", "-", "2", "*", "radius_floor", "\n", "\n", "indices_from", "=", "np", ".", "reshape", "(", "full_indices", "[", "radius_floor", ":", "-", "radius_floor", ",", "radius_floor", ":", "-", "radius_floor", "]", ",", "\n", "[", "-", "1", "]", ")", "\n", "\n", "indices_to_list", "=", "[", "]", "\n", "\n", "for", "dy", ",", "dx", "in", "search_dist", ":", "\n", "        ", "indices_to", "=", "full_indices", "[", "radius_floor", "+", "dy", ":", "radius_floor", "+", "dy", "+", "cropped_height", ",", "\n", "radius_floor", "+", "dx", ":", "radius_floor", "+", "dx", "+", "cropped_width", "]", "\n", "indices_to", "=", "np", ".", "reshape", "(", "indices_to", ",", "[", "-", "1", "]", ")", "\n", "\n", "indices_to_list", ".", "append", "(", "indices_to", ")", "\n", "\n", "", "concat_indices_to", "=", "np", ".", "concatenate", "(", "indices_to_list", ",", "axis", "=", "0", ")", "\n", "\n", "return", "indices_from", ",", "concat_indices_to", "\n", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RandomResizeLong.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_long", ",", "max_long", ")", ":", "\n", "        ", "self", ".", "min_long", "=", "min_long", "\n", "self", ".", "max_long", "=", "max_long", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RandomResizeLong.__call__": [[12, 27], ["random.randint", "img.resize.resize.resize", "sal.resize.resize.resize", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "sal", "=", "None", ")", ":", "\n", "\n", "        ", "target_long", "=", "random", ".", "randint", "(", "self", ".", "min_long", ",", "self", ".", "max_long", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "w", "<", "h", ":", "\n", "            ", "target_shape", "=", "(", "int", "(", "round", "(", "w", "*", "target_long", "/", "h", ")", ")", ",", "target_long", ")", "\n", "", "else", ":", "\n", "            ", "target_shape", "=", "(", "target_long", ",", "int", "(", "round", "(", "h", "*", "target_long", "/", "w", ")", ")", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "target_shape", ",", "resample", "=", "PIL", ".", "Image", ".", "CUBIC", ")", "\n", "if", "sal", ":", "\n", "           ", "sal", "=", "sal", ".", "resize", "(", "target_shape", ",", "resample", "=", "PIL", ".", "Image", ".", "CUBIC", ")", "\n", "return", "img", ",", "sal", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RandomCrop.__init__": [[31, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cropsize", ")", ":", "\n", "        ", "self", ".", "cropsize", "=", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RandomCrop.__call__": [[34, 68], ["min", "min", "numpy.zeros", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "numpy.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgarr", ",", "sal", "=", "None", ")", ":", "\n", "\n", "        ", "h", ",", "w", ",", "c", "=", "imgarr", ".", "shape", "\n", "\n", "ch", "=", "min", "(", "self", ".", "cropsize", ",", "h", ")", "\n", "cw", "=", "min", "(", "self", ".", "cropsize", ",", "w", ")", "\n", "\n", "w_space", "=", "w", "-", "self", ".", "cropsize", "\n", "h_space", "=", "h", "-", "self", ".", "cropsize", "\n", "\n", "if", "w_space", ">", "0", ":", "\n", "            ", "cont_left", "=", "0", "\n", "img_left", "=", "random", ".", "randrange", "(", "w_space", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cont_left", "=", "random", ".", "randrange", "(", "-", "w_space", "+", "1", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "            ", "cont_top", "=", "0", "\n", "img_top", "=", "random", ".", "randrange", "(", "h_space", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cont_top", "=", "random", ".", "randrange", "(", "-", "h_space", "+", "1", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "container", "=", "np", ".", "zeros", "(", "(", "self", ".", "cropsize", ",", "self", ".", "cropsize", ",", "imgarr", ".", "shape", "[", "-", "1", "]", ")", ",", "np", ".", "float32", ")", "\n", "container", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "imgarr", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "if", "sal", "is", "not", "None", ":", "\n", "            ", "container_sal", "=", "np", ".", "zeros", "(", "(", "self", ".", "cropsize", ",", "self", ".", "cropsize", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "container_sal", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", ",", "0", "]", "=", "sal", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "return", "container", ",", "container_sal", "\n", "\n", "", "return", "container", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.AvgPool2d.__init__": [[132, 134], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ksize", ")", ":", "\n", "        ", "self", ".", "ksize", "=", "ksize", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.AvgPool2d.__call__": [[135, 139], ["skimage.measure.block_reduce"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "import", "skimage", ".", "measure", "\n", "\n", "return", "skimage", ".", "measure", ".", "block_reduce", "(", "img", ",", "(", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "1", ")", ",", "np", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RandomHorizontalFlip.__init__": [[142, 144], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RandomHorizontalFlip.__call__": [[145, 158], ["bool", "random.getrandbits", "numpy.fliplr().copy", "numpy.fliplr().copy", "numpy.fliplr", "numpy.fliplr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "sal", "=", "None", ")", ":", "\n", "        ", "if", "bool", "(", "random", ".", "getrandbits", "(", "1", ")", ")", ":", "\n", "#img = img.transpose(PIL.Image.FLIP_LEFT_RIGHT)", "\n", "            ", "img", "=", "np", ".", "fliplr", "(", "img", ")", ".", "copy", "(", ")", "\n", "if", "sal", ":", "\n", "#sal = sal.transpose(PIL.Image.FLIP_LEFT_RIGHT)", "\n", "                ", "sal", "=", "np", ".", "fliplr", "(", "sal", ")", ".", "copy", "(", ")", "\n", "return", "img", ",", "sal", "\n", "", "return", "img", "\n", "", "else", ":", "\n", "            ", "if", "sal", ":", "\n", "                ", "return", "img", ",", "sal", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.CenterCrop.__init__": [[162, 165], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cropsize", ",", "default_value", "=", "0", ")", ":", "\n", "        ", "self", ".", "cropsize", "=", "cropsize", "\n", "self", ".", "default_value", "=", "default_value", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.CenterCrop.__call__": [[166, 199], ["min", "min", "int", "int", "int", "int", "len", "round", "round", "round", "round", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "npimg", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "npimg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ch", "=", "min", "(", "self", ".", "cropsize", ",", "h", ")", "\n", "cw", "=", "min", "(", "self", ".", "cropsize", ",", "w", ")", "\n", "\n", "sh", "=", "h", "-", "self", ".", "cropsize", "\n", "sw", "=", "w", "-", "self", ".", "cropsize", "\n", "\n", "if", "sw", ">", "0", ":", "\n", "            ", "cont_left", "=", "0", "\n", "img_left", "=", "int", "(", "round", "(", "sw", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "cont_left", "=", "int", "(", "round", "(", "-", "sw", "/", "2", ")", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "sh", ">", "0", ":", "\n", "            ", "cont_top", "=", "0", "\n", "img_top", "=", "int", "(", "round", "(", "sh", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "cont_top", "=", "int", "(", "round", "(", "-", "sh", "/", "2", ")", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "if", "len", "(", "npimg", ".", "shape", ")", "==", "2", ":", "\n", "            ", "container", "=", "np", ".", "ones", "(", "(", "self", ".", "cropsize", ",", "self", ".", "cropsize", ")", ",", "npimg", ".", "dtype", ")", "*", "self", ".", "default_value", "\n", "", "else", ":", "\n", "            ", "container", "=", "np", ".", "ones", "(", "(", "self", ".", "cropsize", ",", "self", ".", "cropsize", ",", "npimg", ".", "shape", "[", "2", "]", ")", ",", "npimg", ".", "dtype", ")", "*", "self", ".", "default_value", "\n", "\n", "", "container", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "npimg", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "\n", "return", "container", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__init__": [[210, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.RescaleNearest.__call__": [[213, 216], ["cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "npimg", ")", ":", "\n", "        ", "import", "cv2", "\n", "return", "cv2", ".", "resize", "(", "npimg", ",", "None", ",", "fx", "=", "self", ".", "scale", ",", "fy", "=", "self", ".", "scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.get_random_crop_box": [[69, 93], ["min", "min", "random.randrange", "random.randrange", "random.randrange", "random.randrange"], "function", ["None"], ["", "", "def", "get_random_crop_box", "(", "imgsize", ",", "cropsize", ")", ":", "\n", "    ", "h", ",", "w", "=", "imgsize", "\n", "\n", "ch", "=", "min", "(", "cropsize", ",", "h", ")", "\n", "cw", "=", "min", "(", "cropsize", ",", "w", ")", "\n", "\n", "w_space", "=", "w", "-", "cropsize", "\n", "h_space", "=", "h", "-", "cropsize", "\n", "\n", "if", "w_space", ">", "0", ":", "\n", "        ", "cont_left", "=", "0", "\n", "img_left", "=", "random", ".", "randrange", "(", "w_space", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "cont_left", "=", "random", ".", "randrange", "(", "-", "w_space", "+", "1", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "        ", "cont_top", "=", "0", "\n", "img_top", "=", "random", ".", "randrange", "(", "h_space", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "cont_top", "=", "random", ".", "randrange", "(", "-", "h_space", "+", "1", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "return", "cont_top", ",", "cont_top", "+", "ch", ",", "cont_left", ",", "cont_left", "+", "cw", ",", "img_top", ",", "img_top", "+", "ch", ",", "img_left", ",", "img_left", "+", "cw", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.crop_with_box": [[94, 101], ["len", "numpy.zeros", "numpy.zeros", "max", "max", "max", "max"], "function", ["None"], ["", "def", "crop_with_box", "(", "img", ",", "box", ")", ":", "\n", "    ", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "        ", "img_cont", "=", "np", ".", "zeros", "(", "(", "max", "(", "box", "[", "1", "]", "-", "box", "[", "0", "]", ",", "box", "[", "4", "]", "-", "box", "[", "5", "]", ")", ",", "max", "(", "box", "[", "3", "]", "-", "box", "[", "2", "]", ",", "box", "[", "7", "]", "-", "box", "[", "6", "]", ")", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "img", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "img_cont", "=", "np", ".", "zeros", "(", "(", "max", "(", "box", "[", "1", "]", "-", "box", "[", "0", "]", ",", "box", "[", "4", "]", "-", "box", "[", "5", "]", ")", ",", "max", "(", "box", "[", "3", "]", "-", "box", "[", "2", "]", ",", "box", "[", "7", "]", "-", "box", "[", "6", "]", ")", ")", ",", "dtype", "=", "img", ".", "dtype", ")", "\n", "", "img_cont", "[", "box", "[", "0", "]", ":", "box", "[", "1", "]", ",", "box", "[", "2", "]", ":", "box", "[", "3", "]", "]", "=", "img", "[", "box", "[", "4", "]", ":", "box", "[", "5", "]", ",", "box", "[", "6", "]", ":", "box", "[", "7", "]", "]", "\n", "return", "img_cont", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.random_crop": [[103, 128], ["isinstance", "imutils.get_random_crop_box", "zip", "isinstance", "img.crop.crop", "PIL.Image.new", "PIL.Image.new.paste", "new_images.append", "new_images.append", "len", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.get_random_crop_box"], ["", "def", "random_crop", "(", "images", ",", "cropsize", ",", "fills", ")", ":", "\n", "    ", "if", "isinstance", "(", "images", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "        ", "imgsize", "=", "images", "[", "0", "]", ".", "size", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "imgsize", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "", "box", "=", "get_random_crop_box", "(", "imgsize", ",", "cropsize", ")", "\n", "\n", "new_images", "=", "[", "]", "\n", "for", "img", ",", "f", "in", "zip", "(", "images", ",", "fills", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "img", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "img", "=", "img", ".", "crop", "(", "(", "box", "[", "6", "]", ",", "box", "[", "4", "]", ",", "box", "[", "7", "]", ",", "box", "[", "5", "]", ")", ")", "\n", "cont", "=", "PIL", ".", "Image", ".", "new", "(", "img", ".", "mode", ",", "(", "cropsize", ",", "cropsize", ")", ")", "\n", "cont", ".", "paste", "(", "img", ",", "(", "box", "[", "2", "]", ",", "box", "[", "0", "]", ")", ")", "\n", "new_images", ".", "append", "(", "cont", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "                ", "cont", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "img", ".", "dtype", ")", "*", "f", "\n", "", "else", ":", "\n", "                ", "cont", "=", "np", ".", "ones", "(", "(", "cropsize", ",", "cropsize", ")", ",", "img", ".", "dtype", ")", "*", "f", "\n", "", "cont", "[", "box", "[", "0", "]", ":", "box", "[", "1", "]", ",", "box", "[", "2", "]", ":", "box", "[", "3", "]", "]", "=", "img", "[", "box", "[", "4", "]", ":", "box", "[", "5", "]", ",", "box", "[", "6", "]", ":", "box", "[", "7", "]", "]", "\n", "new_images", ".", "append", "(", "cont", ")", "\n", "\n", "", "", "return", "new_images", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.HWC_to_CHW": [[201, 207], ["numpy.expand_dims", "numpy.transpose"], "function", ["None"], ["", "", "def", "HWC_to_CHW", "(", "tensor", ",", "sal", "=", "False", ")", ":", "\n", "    ", "if", "sal", ":", "\n", "        ", "tensor", "=", "np", ".", "expand_dims", "(", "tensor", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "np", ".", "transpose", "(", "tensor", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.tool.imutils.crf_inference": [[220, 238], ["dcrf.DenseCRF2D", "unary_from_softmax", "numpy.ascontiguousarray", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.array().reshape", "numpy.copy", "numpy.array"], "function", ["None"], ["", "", "def", "crf_inference", "(", "img", ",", "probs", ",", "t", "=", "10", ",", "scale_factor", "=", "1", ",", "labels", "=", "21", ")", ":", "\n", "    ", "import", "pydensecrf", ".", "densecrf", "as", "dcrf", "\n", "from", "pydensecrf", ".", "utils", "import", "unary_from_softmax", "\n", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "n_labels", "=", "labels", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "n_labels", ")", "\n", "\n", "unary", "=", "unary_from_softmax", "(", "probs", ")", "\n", "unary", "=", "np", ".", "ascontiguousarray", "(", "unary", ")", "\n", "\n", "d", ".", "setUnaryEnergy", "(", "unary", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "3", "/", "scale_factor", ",", "compat", "=", "3", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "80", "/", "scale_factor", ",", "srgb", "=", "13", ",", "rgbim", "=", "np", ".", "copy", "(", "img", ")", ",", "compat", "=", "10", ")", "\n", "Q", "=", "d", ".", "inference", "(", "t", ")", "\n", "\n", "return", "np", ".", "array", "(", "Q", ")", ".", "reshape", "(", "(", "n_labels", ",", "h", ",", "w", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.adaptive_min_pooling_loss": [[12, 21], ["x.size", "torch.relu", "torch.max", "torch.max", "torch.topk", "torch.topk", "torch.sum", "torch.sum", "x.view"], "function", ["None"], ["def", "adaptive_min_pooling_loss", "(", "x", ")", ":", "\n", "# This loss does not affect the highest performance, but change the optimial background score (alpha)", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "k", "=", "h", "*", "w", "//", "4", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "y", "=", "torch", ".", "topk", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ",", "k", "=", "k", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ")", "[", "0", "]", "\n", "y", "=", "F", ".", "relu", "(", "y", ",", "inplace", "=", "False", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "y", ")", "/", "(", "k", "*", "n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.max_onehot": [[22, 27], ["x.size", "torch.max", "torch.max"], "function", ["None"], ["", "def", "max_onehot", "(", "x", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x_max", "=", "torch", ".", "max", "(", "x", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "[", "x", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "!=", "x_max", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.train": [[28, 186], ["tool.pyutils.Logger", "print", "tensorboardX.SummaryWriter", "torch.utils.data.DataLoader", "ScaleNet101_SEAM.get_parameter_groups", "tool.torchutils.PolyOptimizer", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "ScaleNet101_SEAM.train", "tool.pyutils.AverageMeter", "tool.pyutils.Timer", "range", "torch.save", "torch.save", "ScaleNet50_SEAM", "tool.data.VOC12ClsDataset", "tool.data.VOC12ClsHeatCropDataset", "numpy.random.seed", "torch.load", "torch.load", "ScaleNet101_SEAM.load_state_dict", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "ScaleNet101_SEAM.module.state_dict", "os.path.join", "os.path.join", "ScaleNet101_SEAM", "len", "ScaleNet101_SEAM.load_state_dict", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.interpolate", "img1.size", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "label.cuda().unsqueeze().unsqueeze.cuda().unsqueeze().unsqueeze", "ScaleNet101_SEAM.", "torch.adaptive_avg_pool2d", "train_cam.adaptive_min_pooling_loss", "ScaleNet101_SEAM.", "torch.adaptive_avg_pool2d", "train_cam.adaptive_min_pooling_loss", "torch.multilabel_soft_margin_loss", "torch.multilabel_soft_margin_loss", "cam2.size", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.clamp", "torch.clamp", "torchutils.PolyOptimizer.zero_grad", "torch.isnan", "torch.isnan", "loss.backward", "torchutils.PolyOptimizer.step", "pyutils.AverageMeter.add", "int", "getattr", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.device", "torch.device", "torch.interpolate", "torch.interpolate", "tool.visualization.max_norm", "tool.visualization.max_norm", "torch.abs", "torch.abs", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pyutils.Timer.update_progress", "print", "pyutils.AverageMeter.pop", "tensorboardX.SummaryWriter.add_scalars", "tensorboardX.SummaryWriter.add_scalar", "pyutils.Timer.reset_stage", "args.dilations.split", "int", "importlib.import_module", "label.cuda().unsqueeze().unsqueeze.cuda().unsqueeze", "tool.visualization.max_norm", "tool.visualization.max_norm", "torch.max", "torch.max", "torch.max", "torch.max", "train_cam.max_onehot", "train_cam.max_onehot", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "loss.item", "loss_cls.item", "torch.mean.item", "loss_ecr.item", "loss.item", "loss_cls.item", "torch.mean.item", "loss_ecr.item", "args.dilations.split", "tool.imutils.RandomResizeLong", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "tool.imutils.RandomCrop", "float", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.Resize", "cam2.detach", "cam1.detach", "torch.abs.view", "torch.abs.view", "pyutils.AverageMeter.get", "pyutils.Timer.str_est_finish", "args.scales.split", "label.cuda().unsqueeze().unsqueeze.cuda", "int", "int", "pyutils.Timer.get_stage_elapsed"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.network.resnet38_aff.Net.get_parameter_groups", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.train", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet50_SEAM", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet101_SEAM", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.adaptive_min_pooling_loss", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.adaptive_min_pooling_loss", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.torchutils.PolyOptimizer.step", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.add", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.max_norm", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.max_norm", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.update_progress", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.pop", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.reset_stage", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.max_norm", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.visualization.max_norm", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.max_onehot", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.train_cam.max_onehot", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.AverageMeter.get", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.str_est_finish", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Timer.get_stage_elapsed"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "pyutils", ".", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "session_name", ")", "+", "'.log'", ")", "\n", "\n", "if", "args", ".", "network", "==", "\"ScaleNet50_SEAM\"", ":", "\n", "        ", "from", "network", ".", "scalenet_SEAM", "import", "ScaleNet50_SEAM", "\n", "model", "=", "ScaleNet50_SEAM", "(", "args", ".", "structure", ",", "args", ".", "weights", ",", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "dilations", ".", "split", "(", "'_'", ")", "]", ",", "args", ".", "num_cls", ")", "\n", "", "elif", "args", ".", "network", "==", "\"ScaleNet101_SEAM\"", ":", "\n", "        ", "from", "network", ".", "scalenet_SEAM", "import", "ScaleNet101_SEAM", "\n", "model", "=", "ScaleNet101_SEAM", "(", "args", ".", "structure", ",", "args", ".", "weights", ",", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "dilations", ".", "split", "(", "'_'", ")", "]", ",", "args", ".", "num_cls", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "network", ")", ",", "'Net'", ")", "(", "args", ".", "num_cls", ")", "\n", "\n", "", "print", "(", "model", ")", "\n", "\n", "tblogger", "=", "SummaryWriter", "(", "args", ".", "log_dir", ")", "\n", "\n", "tool", ".", "data", ".", "NUM_CLS", "=", "args", ".", "num_cls", "\n", "tool", ".", "data", ".", "IMG_FOLDER_NAME", "=", "args", ".", "img_dir", "\n", "tool", ".", "data", ".", "ANNOT_FOLDER_NAME", "=", "args", ".", "gt_dir", "\n", "tool", ".", "data", ".", "CLS_LABEL", "=", "args", ".", "cls_label", "\n", "if", "args", ".", "heatmap_root", "==", "''", ":", "\n", "        ", "train_dataset", "=", "tool", ".", "data", ".", "VOC12ClsDataset", "(", "args", ".", "train_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "pseudo_gt", "=", "args", ".", "pseudo_list", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "imutils", ".", "RandomResizeLong", "(", "448", ",", "768", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "saturation", "=", "0.3", ",", "hue", "=", "0.1", ")", ",", "\n", "np", ".", "asarray", ",", "\n", "model", ".", "normalize", ",", "\n", "imutils", ".", "RandomCrop", "(", "args", ".", "crop_size", ")", ",", "\n", "imutils", ".", "HWC_to_CHW", ",", "\n", "torch", ".", "from_numpy", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "tool", ".", "data", ".", "VOC12ClsHeatCropDataset", "(", "args", ".", "train_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "\n", "heatmap_root", "=", "args", ".", "heatmap_root", ",", "heat_type", "=", "'npy'", ",", "scale", "=", "(", "0.04", ",", "1", ")", ",", "ratio", "=", "(", "3.", "/", "5.", ",", "5.", "/", "3.", ")", ",", "\n", "label_match_thresh", "=", "0.1", ",", "cut_scale", "=", "(", "0.04", ",", "args", ".", "cut_s", ")", ",", "cut_p", "=", "args", ".", "cut_p", ",", "\n", "crop_scales", "=", "[", "float", "(", "i", ")", "for", "i", "in", "args", ".", "scales", ".", "split", "(", "','", ")", "]", "if", "args", ".", "scales", "!=", "\"\"", "else", "[", "]", ",", "\n", "crop_size", "=", "448", ",", "stride", "=", "args", ".", "stride", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "saturation", "=", "0.3", ",", "hue", "=", "0.1", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "crop_size", ",", "args", ".", "crop_size", ")", ")", ",", "\n", "np", ".", "asarray", ",", "\n", "model", ".", "normalize", ",", "\n", "imutils", ".", "HWC_to_CHW", ",", "\n", "torch", ".", "from_numpy", "\n", "]", ")", ")", "\n", "\n", "", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "1", "+", "worker_id", ")", "\n", "", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "max_step", "=", "len", "(", "train_dataset", ")", "//", "args", ".", "batch_size", "*", "args", ".", "max_epoches", "\n", "\n", "param_groups", "=", "model", ".", "get_parameter_groups", "(", ")", "\n", "optimizer", "=", "torchutils", ".", "PolyOptimizer", "(", "[", "\n", "{", "'params'", ":", "param_groups", "[", "0", "]", ",", "'lr'", ":", "args", ".", "lr", ",", "'weight_decay'", ":", "args", ".", "wt_dec", "}", ",", "\n", "{", "'params'", ":", "param_groups", "[", "1", "]", ",", "'lr'", ":", "2", "*", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "param_groups", "[", "2", "]", ",", "'lr'", ":", "10", "*", "args", ".", "lr", ",", "'weight_decay'", ":", "args", ".", "wt_dec", "}", ",", "\n", "{", "'params'", ":", "param_groups", "[", "3", "]", ",", "'lr'", ":", "20", "*", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", "\n", "]", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wt_dec", ",", "max_step", "=", "max_step", ")", "\n", "\n", "if", "args", ".", "weights", "!=", "\"\"", ":", "\n", "        ", "weights_dict", "=", "torch", ".", "load", "(", "args", ".", "weights", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "if", "'ScaleNet'", "not", "in", "args", ".", "network", ":", "\n", "        ", "if", "'model'", "in", "weights_dict", ":", "\n", "            ", "weights_dict", "=", "weights_dict", "[", "'model'", "]", "[", "'main'", "]", "\n", "", "model", ".", "load_state_dict", "(", "weights_dict", ",", "strict", "=", "False", ")", "\n", "del", "weights_dict", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "weights", "!=", "\"\"", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "weights_dict", ",", "strict", "=", "False", ")", "\n", "del", "weights_dict", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "avg_meter", "=", "pyutils", ".", "AverageMeter", "(", "'loss'", ",", "'loss_cls'", ",", "'loss_er'", ",", "'loss_ecr'", ")", "\n", "\n", "timer", "=", "pyutils", ".", "Timer", "(", "\"Session started: \"", ")", "\n", "for", "ep", "in", "range", "(", "args", ".", "max_epoches", ")", ":", "\n", "\n", "        ", "for", "iter", ",", "pack", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "            ", "scale_factor", "=", "0.3", "\n", "img1", "=", "pack", "[", "1", "]", "\n", "img2", "=", "F", ".", "interpolate", "(", "img1", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img1", ".", "size", "(", ")", "\n", "label", "=", "pack", "[", "2", "]", "\n", "bg_score", "=", "torch", ".", "ones", "(", "(", "N", ",", "1", ")", ")", "\n", "label", "=", "torch", ".", "cat", "(", "(", "bg_score", ",", "label", ")", ",", "dim", "=", "1", ")", "\n", "label", "=", "label", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "cam1", ",", "cam_rv1", "=", "model", "(", "img1", ")", "\n", "label1", "=", "F", ".", "adaptive_avg_pool2d", "(", "cam1", ",", "(", "1", ",", "1", ")", ")", "\n", "loss_rvmin1", "=", "adaptive_min_pooling_loss", "(", "(", "cam_rv1", "*", "label", ")", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ")", "\n", "cam1", "=", "F", ".", "interpolate", "(", "visualization", ".", "max_norm", "(", "cam1", ")", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "*", "label", "\n", "cam_rv1", "=", "F", ".", "interpolate", "(", "visualization", ".", "max_norm", "(", "cam_rv1", ")", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "*", "label", "\n", "\n", "cam2", ",", "cam_rv2", "=", "model", "(", "img2", ")", "\n", "label2", "=", "F", ".", "adaptive_avg_pool2d", "(", "cam2", ",", "(", "1", ",", "1", ")", ")", "\n", "loss_rvmin2", "=", "adaptive_min_pooling_loss", "(", "(", "cam_rv2", "*", "label", ")", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ")", "\n", "cam2", "=", "visualization", ".", "max_norm", "(", "cam2", ")", "*", "label", "\n", "cam_rv2", "=", "visualization", ".", "max_norm", "(", "cam_rv2", ")", "*", "label", "\n", "\n", "loss_cls1", "=", "F", ".", "multilabel_soft_margin_loss", "(", "label1", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "label", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ")", "\n", "loss_cls2", "=", "F", ".", "multilabel_soft_margin_loss", "(", "label2", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "label", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "ns", ",", "cs", ",", "hs", ",", "ws", "=", "cam2", ".", "size", "(", ")", "\n", "loss_er", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "cam1", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "cam2", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ")", ")", "\n", "cam1", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "1", "-", "torch", ".", "max", "(", "cam1", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "cam2", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "1", "-", "torch", ".", "max", "(", "cam2", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "tensor_ecr1", "=", "torch", ".", "abs", "(", "max_onehot", "(", "cam2", ".", "detach", "(", ")", ")", "-", "cam_rv1", ")", "#*eq_mask", "\n", "tensor_ecr2", "=", "torch", ".", "abs", "(", "max_onehot", "(", "cam1", ".", "detach", "(", ")", ")", "-", "cam_rv2", ")", "#*eq_mask", "\n", "loss_ecr1", "=", "torch", ".", "mean", "(", "torch", ".", "topk", "(", "tensor_ecr1", ".", "view", "(", "ns", ",", "-", "1", ")", ",", "k", "=", "(", "int", ")", "(", "args", ".", "num_cls", "*", "hs", "*", "ws", "*", "0.2", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "loss_ecr2", "=", "torch", ".", "mean", "(", "torch", ".", "topk", "(", "tensor_ecr2", ".", "view", "(", "ns", ",", "-", "1", ")", ",", "k", "=", "(", "int", ")", "(", "args", ".", "num_cls", "*", "hs", "*", "ws", "*", "0.2", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "loss_ecr", "=", "loss_ecr1", "+", "loss_ecr2", "\n", "\n", "loss_cls", "=", "(", "loss_cls1", "+", "loss_cls2", ")", "/", "2", "+", "(", "loss_rvmin1", "+", "loss_rvmin2", ")", "/", "2", "\n", "loss", "=", "loss_cls", "+", "loss_er", "+", "loss_ecr", "\n", "torch", ".", "clamp", "(", "loss", ",", "0", ",", "2", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "torch", ".", "isnan", "(", "loss", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "continue", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_meter", ".", "add", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'loss_cls'", ":", "loss_cls", ".", "item", "(", ")", ",", "'loss_er'", ":", "loss_er", ".", "item", "(", ")", ",", "'loss_ecr'", ":", "loss_ecr", ".", "item", "(", ")", "}", ")", "\n", "\n", "if", "(", "optimizer", ".", "global_step", "-", "1", ")", "%", "50", "==", "0", ":", "\n", "\n", "                ", "timer", ".", "update_progress", "(", "optimizer", ".", "global_step", "/", "max_step", ")", "\n", "\n", "print", "(", "'Iter:%5d/%5d'", "%", "(", "optimizer", ".", "global_step", "-", "1", ",", "max_step", ")", ",", "\n", "'loss:%.4f %.4f %.4f %.4f'", "%", "avg_meter", ".", "get", "(", "'loss'", ",", "'loss_cls'", ",", "'loss_er'", ",", "'loss_ecr'", ")", ",", "\n", "'imps:%.1f'", "%", "(", "(", "iter", "+", "1", ")", "*", "args", ".", "batch_size", "/", "timer", ".", "get_stage_elapsed", "(", ")", ")", ",", "\n", "'Fin:%s'", "%", "(", "timer", ".", "str_est_finish", "(", ")", ")", ",", "\n", "'lr: %.4f'", "%", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ",", "flush", "=", "True", ")", "\n", "\n", "avg_meter", ".", "pop", "(", ")", "\n", "\n", "loss_dict", "=", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "\n", "'loss_cls'", ":", "loss_cls", ".", "item", "(", ")", ",", "\n", "'loss_er'", ":", "loss_er", ".", "item", "(", ")", ",", "\n", "'loss_ecr'", ":", "loss_ecr", ".", "item", "(", ")", "}", "\n", "itr", "=", "optimizer", ".", "global_step", "-", "1", "\n", "tblogger", ".", "add_scalars", "(", "'loss'", ",", "loss_dict", ",", "itr", ")", "\n", "tblogger", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "itr", ")", "\n", "\n", "", "else", ":", "\n", "                ", "timer", ".", "reset_stage", "(", ")", "\n", "\n", "", "", "", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "train_res_dir", ",", "args", ".", "session_name", "+", "'.pth'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.infer_aff.get_indices_in_radius": [[17, 50], ["range", "range", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "search_dist.append", "range", "numpy.arange", "numpy.reshape", "numpy.stack", "indices_from_to_list.append", "search_dist.append"], "function", ["None"], ["def", "get_indices_in_radius", "(", "height", ",", "width", ",", "radius", ")", ":", "\n", "\n", "    ", "search_dist", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "        ", "search_dist", ".", "append", "(", "(", "0", ",", "x", ")", ")", "\n", "\n", "", "for", "y", "in", "range", "(", "1", ",", "radius", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "-", "radius", "+", "1", ",", "radius", ")", ":", "\n", "            ", "if", "x", "*", "x", "+", "y", "*", "y", "<", "radius", "*", "radius", ":", "\n", "                ", "search_dist", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "\n", "", "", "", "full_indices", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "0", ",", "height", "*", "width", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "(", "height", ",", "width", ")", ")", "\n", "radius_floor", "=", "radius", "-", "1", "\n", "cropped_height", "=", "height", "-", "radius_floor", "\n", "cropped_width", "=", "width", "-", "2", "*", "radius_floor", "\n", "\n", "indices_from", "=", "np", ".", "reshape", "(", "full_indices", "[", ":", "-", "radius_floor", ",", "radius_floor", ":", "-", "radius_floor", "]", ",", "[", "-", "1", "]", ")", "\n", "\n", "indices_from_to_list", "=", "[", "]", "\n", "\n", "for", "dy", ",", "dx", "in", "search_dist", ":", "\n", "\n", "        ", "indices_to", "=", "full_indices", "[", "dy", ":", "dy", "+", "cropped_height", ",", "radius_floor", "+", "dx", ":", "radius_floor", "+", "dx", "+", "cropped_width", "]", "\n", "indices_to", "=", "np", ".", "reshape", "(", "indices_to", ",", "[", "-", "1", "]", ")", "\n", "\n", "indices_from_to", "=", "np", ".", "stack", "(", "(", "indices_from", ",", "indices_to", ")", ",", "axis", "=", "1", ")", "\n", "\n", "indices_from_to_list", ".", "append", "(", "indices_from_to", ")", "\n", "\n", "", "concat_indices_from_to", "=", "np", ".", "concatenate", "(", "indices_from_to_list", ",", "axis", "=", "0", ")", "\n", "\n", "return", "concat_indices_from_to", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.crf_inference": [[8, 23], ["pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_softmax", "numpy.ascontiguousarray", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.array().reshape", "numpy.copy", "numpy.array"], "function", ["None"], ["def", "crf_inference", "(", "img", ",", "probs", ",", "t", "=", "10", ",", "scale_factor", "=", "1", ",", "labels", "=", "21", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "n_labels", "=", "labels", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "n_labels", ")", "\n", "\n", "unary", "=", "unary_from_softmax", "(", "probs", ")", "\n", "unary", "=", "np", ".", "ascontiguousarray", "(", "unary", ")", "\n", "\n", "d", ".", "setUnaryEnergy", "(", "unary", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "3", "/", "scale_factor", ",", "compat", "=", "10", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "80", "/", "scale_factor", ",", "srgb", "=", "13", ",", "rgbim", "=", "np", ".", "copy", "(", "img", ")", ",", "compat", "=", "10", ")", "\n", "Q", "=", "d", ".", "inference", "(", "t", ")", "\n", "\n", "return", "np", ".", "array", "(", "Q", ")", ".", "reshape", "(", "(", "n_labels", ",", "h", ",", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.crf_with_alpha": [[24, 36], ["numpy.array", "numpy.power", "numpy.concatenate", "refine_cam.crf_inference", "dict", "enumerate", "list", "cam_dict.keys", "cam_dict.values", "numpy.max"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.crf_inference"], ["", "def", "crf_with_alpha", "(", "img", ",", "cam_dict", ",", "alpha", ")", ":", "\n", "    ", "v", "=", "np", ".", "array", "(", "list", "(", "cam_dict", ".", "values", "(", ")", ")", ")", "\n", "bg_score", "=", "np", ".", "power", "(", "1", "-", "np", ".", "max", "(", "v", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "alpha", ")", "\n", "bgcam_score", "=", "np", ".", "concatenate", "(", "(", "bg_score", ",", "v", ")", ",", "axis", "=", "0", ")", "\n", "crf_score", "=", "crf_inference", "(", "img", ",", "bgcam_score", ",", "labels", "=", "bgcam_score", ".", "shape", "[", "0", "]", ")", "\n", "n_crf_al", "=", "dict", "(", ")", "\n", "n_crf_al", "[", "0", "]", "=", "crf_score", "[", "0", "]", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "cam_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "n_crf_al", "[", "key", "+", "1", "]", "=", "crf_score", "[", "i", "+", "1", "]", "\n", "\n", "# return npy", "\n", "", "return", "n_crf_al", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.ppmg": [[37, 74], ["cam_dict.items", "numpy.argmax", "enumerate", "numpy.ones().astype", "numpy.array", "numpy.copy", "numpy.power", "numpy.concatenate", "numpy.zeros_like", "foreground.append", "importance.append", "keys.append", "refine_cam.crf_inference", "numpy.stack", "numpy.stack", "numpy.ones", "numpy.max"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.crf_inference"], ["", "def", "ppmg", "(", "img", ",", "cam_dict", ",", "alpha", ",", "cam_thresh", "=", "0", ",", "k_add", "=", "True", ",", "cv", "=", "{", "}", ")", ":", "\n", "\n", "# init bg", "\n", "    ", "foreground", "=", "[", "np", ".", "ones", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", "\n", "importance", "=", "[", "foreground", "[", "0", "]", "]", "\n", "keys", "=", "[", "0", "]", "\n", "\n", "for", "k", ",", "v", "in", "cam_dict", ".", "items", "(", ")", ":", "\n", "# cvs", "\n", "        ", "v", "=", "np", ".", "array", "(", "[", "v", "]", ")", "\n", "cvs", "=", "np", ".", "copy", "(", "v", ")", "\n", "cvs", "[", "cvs", "<", "cam_thresh", "]", "=", "0", "\n", "cvs", "=", "cvs", "**", "(", "1", "-", "cv", "[", "k", "]", ")", "\n", "bg_score", "=", "np", ".", "power", "(", "1", "-", "np", ".", "max", "(", "cvs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "alpha", ")", "\n", "\n", "# crf", "\n", "bgcam_score", "=", "np", ".", "concatenate", "(", "(", "bg_score", ",", "cvs", ")", ",", "axis", "=", "0", ")", "\n", "crf_k", "=", "crf_inference", "(", "img", ",", "bgcam_score", ",", "labels", "=", "bgcam_score", ".", "shape", "[", "0", "]", ")", "[", "1", "]", "\n", "\n", "fg_k", "=", "np", ".", "zeros_like", "(", "crf_k", ")", "\n", "fg_k", "[", "crf_k", ">", "0.5", "]", "=", "1", "\n", "fg_k", "[", "crf_k", "<=", "0.5", "]", "=", "0", "\n", "foreground", ".", "append", "(", "fg_k", ")", "\n", "importance", ".", "append", "(", "v", "[", "0", "]", "/", "(", "1", "+", "(", "v", "[", "0", "]", "*", "fg_k", ")", ".", "sum", "(", ")", ")", ")", "# +1 aviod 0", "\n", "keys", ".", "append", "(", "k", "+", "1", "if", "k_add", "else", "k", ")", "\n", "\n", "# update bg", "\n", "foreground", "[", "0", "]", "=", "foreground", "[", "0", "]", "*", "(", "fg_k", "==", "0", ")", "\n", "importance", "[", "0", "]", "=", "foreground", "[", "0", "]", "\n", "\n", "# mask to numpy", "\n", "", "out", "=", "{", "}", "\n", "mask", "=", "np", ".", "argmax", "(", "np", ".", "stack", "(", "foreground", ",", "0", ")", "*", "np", ".", "stack", "(", "importance", ",", "0", ")", ",", "0", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "out", "[", "k", "]", "=", "(", "mask", "==", "i", ")", ".", "astype", "(", "'bool'", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.get_CoV": [[75, 83], ["heat.items", "v[].std"], "function", ["None"], ["", "def", "get_CoV", "(", "heat", ",", "scale", "=", "0.3", ",", "t", "=", "0.05", ")", ":", "\n", "    ", "CoV", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "heat", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "v", ">", "t", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "CoV", "[", "k", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "CoV", "[", "k", "]", "=", "v", "[", "v", ">", "t", "]", ".", "std", "(", ")", "/", "(", "v", "[", "v", ">", "t", "]", "+", "0.00000001", ")", ".", "mean", "(", ")", "*", "scale", "\n", "", "", "return", "CoV", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.work": [[84, 104], ["enumerate", "cv2.imread", "numpy.load", "refine_cam.get_CoV", "refine_cam.ppmg", "os.path.exists", "os.path.join", "os.path.join", "ppmg.item", "ppmg.item", "numpy.zeros().astype", "ppmg.items", "cv2.imwrite", "os.path.join", "os.path.join", "open", "numpy.save", "numpy.zeros", "i.replace", "os.path.join", "i.split", "i.replace", "i.split"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.get_CoV", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.ppmg"], ["", "def", "work", "(", "pid", ",", "ps", ",", "imgs", ",", "imgd", ",", "maskd", ",", "outd", ",", "crf_thresh", ",", "cam_thresh", ",", "cv_scale", ",", "png", "=", "False", ")", ":", "\n", "    ", "for", "idx", ",", "i", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "if", "idx", "%", "ps", "!=", "pid", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "maskd", ",", "i", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "imgd", ",", "i", ")", ")", "\n", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "maskd", ",", "i", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "cv", "=", "get_CoV", "(", "mask", ".", "item", "(", ")", ",", "cv_scale", ",", "cam_thresh", ")", "\n", "mask", "=", "ppmg", "(", "img", ",", "mask", ".", "item", "(", ")", ",", "crf_thresh", ",", "cam_thresh", ",", "True", ",", "cv", ")", "\n", "\n", "if", "png", ":", "\n", "            ", "out", "=", "np", ".", "zeros", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "k", ",", "v", "in", "mask", ".", "items", "(", ")", ":", "\n", "                ", "out", "[", "v", "!=", "0", "]", "=", "k", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "outd", ",", "i", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outd", ",", "i", ".", "replace", "(", "'.jpg'", ",", "'.npy'", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "np", ".", "save", "(", "f", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.throw_error": [[105, 107], ["None"], "function", ["None"], ["", "", "", "", "def", "throw_error", "(", "e", ")", ":", "\n", "    ", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.refine_cam": [[108, 123], ["print", "os.listdir", "multiprocessing.Pool", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "multiprocessing.Pool.apply_async", "os.path.join", "int"], "function", ["None"], ["", "def", "refine_cam", "(", "args", ")", ":", "\n", "    ", "print", "(", "os", ".", "path", ".", "join", "(", "args", ".", "voc12_root", ",", "args", ".", "img_dir", ")", ",", "args", ".", "out_cam", ",", "args", ".", "out_crf", ")", "\n", "imgs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "voc12_root", ",", "args", ".", "img_dir", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_crf", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_crf", ")", "\n", "\n", "", "pnum", "=", "args", ".", "num_workers", "\n", "pool", "=", "Pool", "(", "pnum", ")", "\n", "for", "i", "in", "range", "(", "pnum", ")", ":", "\n", "        ", "pool", ".", "apply_async", "(", "work", ",", "(", "i", ",", "pnum", ",", "imgs", ",", "os", ".", "path", ".", "join", "(", "args", ".", "voc12_root", ",", "args", ".", "img_dir", ")", ",", "args", ".", "out_cam", ",", "args", ".", "out_crf", ",", "int", "(", "args", ".", "crf_threshs", ")", ",", "args", ".", "cam_thresh", ",", "args", ".", "cv_scale", ",", "args", ".", "type", "==", "'png'", ",", ")", ",", "error_callback", "=", "throw_error", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.infer_multi_crop.infer_multi_crop": [[12, 91], ["ScaleNet101_SEAM.load_state_dict", "ScaleNet101_SEAM.eval", "ScaleNet101_SEAM.cuda", "tool.data.VOC12ClsDatasetMultiCrop", "torch.utils.data.DataLoader", "torch.cuda.device_count", "torch.cuda.device_count", "torch.nn.parallel.replicate", "torch.nn.parallel.replicate", "print", "enumerate", "ScaleNet50_SEAM", "torch.load", "torch.load", "list", "tool.data.get_img_path", "numpy.asarray", "tool.pyutils.BatchThreader", "pyutils.BatchThreader.pop_results", "numpy.zeros", "numpy.zeros_like", "range", "numpy.max", "numpy.min", "range", "ScaleNet101_SEAM", "torchvision.transforms.Compose", "range", "PIL.Image.open().convert", "len", "numpy.save", "print", "getattr", "float", "torch.no_grad", "torch.no_grad", "len", "norm_cam[].astype", "os.path.exists", "os.makedirs", "os.path.join", "int", "importlib.import_module", "args.scales.split", "PIL.Image.open", "torch.cuda.device", "torch.cuda.device", "range", "args.dilations.split", "int", "img.cuda", "torch.interpolate", "np.flip.cpu().numpy", "label.clone().view().numpy", "numpy.flip", "len", "args.dilations.split", "np.flip.cpu", "label.clone().view", "label.clone"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet50_SEAM", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.get_img_path", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.pop_results", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet101_SEAM"], ["def", "infer_multi_crop", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "network", "==", "\"ScaleNet50_SEAM\"", ":", "\n", "        ", "from", "network", ".", "scalenet_SEAM", "import", "ScaleNet50_SEAM", "\n", "model", "=", "ScaleNet50_SEAM", "(", "args", ".", "structure", ",", "ckpt", "=", "None", ",", "dilations", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "dilations", ".", "split", "(", "'_'", ")", "]", ",", "num_cls", "=", "args", ".", "num_cls", ")", "\n", "", "elif", "args", ".", "network", "==", "\"ScaleNet101_SEAM\"", ":", "\n", "        ", "from", "network", ".", "scalenet_SEAM", "import", "ScaleNet101_SEAM", "\n", "model", "=", "ScaleNet101_SEAM", "(", "args", ".", "structure", ",", "ckpt", "=", "None", ",", "dilations", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "dilations", ".", "split", "(", "'_'", ")", "]", ",", "num_cls", "=", "args", ".", "num_cls", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "network", ")", ",", "'Net'", ")", "(", "args", ".", "num_cls", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "weights", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "tool", ".", "data", ".", "NUM_CLS", "=", "args", ".", "num_cls", "\n", "tool", ".", "data", ".", "IMG_FOLDER_NAME", "=", "args", ".", "img_dir", "\n", "tool", ".", "data", ".", "ANNOT_FOLDER_NAME", "=", "args", ".", "gt_dir", "\n", "tool", ".", "data", ".", "CLS_LABEL", "=", "args", ".", "cls_label", "\n", "infer_dataset", "=", "tool", ".", "data", ".", "VOC12ClsDatasetMultiCrop", "(", "args", ".", "infer_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "pseudo_gt", "=", "args", ".", "pseudo_list", ",", "\n", "scales", "=", "[", "float", "(", "s", ")", "for", "s", "in", "args", ".", "scales", ".", "split", "(", "','", ")", "]", ",", "crop_size", "=", "448", ",", "stride", "=", "args", ".", "stride", ",", "\n", "inter_transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "np", ".", "asarray", ",", "\n", "model", ".", "normalize", ",", "\n", "imutils", ".", "HWC_to_CHW", "]", ")", ")", "\n", "\n", "infer_data_loader", "=", "DataLoader", "(", "infer_dataset", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "model_replicas", "=", "torch", ".", "nn", ".", "parallel", ".", "replicate", "(", "model", ",", "list", "(", "range", "(", "n_gpus", ")", ")", ")", "\n", "print", "(", "n_gpus", ",", "flush", "=", "True", ")", "\n", "for", "iter", ",", "(", "img_name", ",", "img_list", ",", "label", ",", "location", ")", "in", "enumerate", "(", "infer_data_loader", ")", ":", "\n", "        ", "img_name", "=", "img_name", "[", "0", "]", ";", "label", "=", "label", "[", "0", "]", "\n", "\n", "img_path", "=", "tool", ".", "data", ".", "get_img_path", "(", "img_name", ",", "args", ".", "voc12_root", ")", "\n", "orig_img", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "def", "_work", "(", "i", ",", "img", ",", "loc", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "i", "%", "n_gpus", ")", ":", "\n", "                    ", "_", ",", "cam", "=", "model_replicas", "[", "i", "%", "n_gpus", "]", "(", "img", ".", "cuda", "(", ")", ")", "\n", "cam", "=", "F", ".", "interpolate", "(", "cam", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "(", "loc", "[", "3", "]", ",", "loc", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "cam", "=", "cam", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "label", ".", "clone", "(", ")", ".", "view", "(", "args", ".", "num_cls", "-", "1", ",", "1", ",", "1", ")", ".", "numpy", "(", ")", "\n", "if", "i", "%", "2", "==", "1", ":", "\n", "                        ", "cam", "=", "np", ".", "flip", "(", "cam", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "[", "cam", ",", "loc", "]", "\n", "\n", "", "", "", "thread_pool", "=", "pyutils", ".", "BatchThreader", "(", "_work", ",", "[", "[", "i", ",", "img_list", "[", "i", "]", ",", "location", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "img_list", ")", ")", "]", ",", "\n", "batch_size", "=", "len", "(", "img_list", ")", ",", "prefetch_size", "=", "0", ",", "processes", "=", "args", ".", "num_workers", ")", "\n", "\n", "cam_list", "=", "thread_pool", ".", "pop_results", "(", ")", "\n", "\n", "# merge crops", "\n", "sum_cam", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_cls", "-", "1", ",", "orig_img", ".", "shape", "[", "0", "]", ",", "orig_img", ".", "shape", "[", "1", "]", ")", ")", "\n", "sum_counter", "=", "np", ".", "zeros_like", "(", "sum_cam", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "cam_list", ")", ")", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "cam_list", "[", "i", "]", "[", "1", "]", "\n", "crop", "=", "cam_list", "[", "i", "]", "[", "0", "]", "\n", "sum_cam", "[", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "+=", "crop", "\n", "sum_counter", "[", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "+=", "1", "\n", "", "sum_counter", "[", "sum_counter", "<", "1", "]", "=", "1", "\n", "\n", "sum_cam", "=", "sum_cam", "/", "sum_counter", "\n", "cam_max", "=", "np", ".", "max", "(", "sum_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "cam_min", "=", "np", ".", "min", "(", "sum_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "sum_cam", "[", "sum_cam", "<", "cam_min", "+", "1e-5", "]", "=", "0", "\n", "norm_cam", "=", "(", "sum_cam", "-", "cam_min", ")", "/", "(", "cam_max", "-", "cam_min", "+", "1e-5", ")", "\n", "\n", "cam_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "args", ".", "num_cls", "-", "1", ")", ":", "\n", "            ", "if", "label", "[", "i", "]", ">", "1e-5", ":", "\n", "                ", "cam_dict", "[", "i", "]", "=", "norm_cam", "[", "i", "]", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "", "", "if", "args", ".", "out_cam", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_cam", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "out_cam", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_cam", ",", "img_name", "+", "'.npy'", ")", ",", "cam_dict", ")", "\n", "\n", "", "if", "iter", "%", "500", "==", "0", ":", "\n", "            ", "print", "(", "iter", ",", "flush", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.do_python_eval": [[8, 80], ["range", "range", "range", "range", "numpy.array", "ious[].mean", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "range", "print", "print", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "numpy.array", "range", "IoU.append", "IoU.append", "os.path.join", "numpy.array", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "str", "print", "PIL.Image.open", "os.path.join", "numpy.load().item", "numpy.zeros", "np.load().item.keys", "numpy.argmax().astype", "numpy.load", "list", "numpy.argmax", "str", "np.load().item.values"], "function", ["None"], ["def", "do_python_eval", "(", "predict_folder", ",", "gt_folder", ",", "name_list", ",", "num_cls", "=", "21", ",", "input_type", "=", "'png'", ",", "threshold", "=", "1.0", ",", "printlog", "=", "False", ")", ":", "\n", "    ", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'L'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'L'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'L'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ",", "input_type", ",", "threshold", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "name_list", ")", ",", "step", ")", ":", "\n", "            ", "name", "=", "name_list", "[", "idx", "]", "\n", "if", "input_type", "==", "'png'", ":", "\n", "                ", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "#cv2.imread(predict_file)", "\n", "predict", "=", "predict", "[", ":", ",", ":", "]", "\n", "", "elif", "'npy'", "in", "input_type", ":", "\n", "                ", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.npy'", "%", "name", ")", "\n", "predict_dict", "=", "np", ".", "load", "(", "predict_file", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "h", ",", "w", "=", "list", "(", "predict_dict", ".", "values", "(", ")", ")", "[", "0", "]", ".", "shape", "\n", "tensor", "=", "np", ".", "zeros", "(", "(", "num_cls", ",", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "for", "key", "in", "predict_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "v", "=", "predict_dict", "[", "key", "]", "\n", "tensor", "[", "key", "+", "1", "]", "=", "predict_dict", "[", "key", "]", "\n", "", "tensor", "[", "0", ",", ":", ",", ":", "]", "=", "threshold", "\n", "predict", "=", "np", ".", "argmax", "(", "tensor", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "                ", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ",", "input_type", ",", "threshold", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "if", "T", "[", "i", "]", ".", "value", "==", "0", ":", "\n", "            ", "IoU", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", ")", ")", "\n", "", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "loglist", "[", "str", "(", "i", ")", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "#miou = np.mean(np.array(IoU))", "\n", "", "ious", "=", "np", ".", "array", "(", "IoU", ")", "\n", "miou", "=", "ious", "[", "ious", ">=", "0", "]", ".", "mean", "(", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "if", "printlog", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "            ", "if", "IoU", "[", "i", "]", "<", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'%11s:%7.3f%%'", "%", "(", "str", "(", "i", ")", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.writedict": [[81, 88], ["dictionary.keys", "file.write"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write"], ["", "def", "writedict", "(", "file", ",", "dictionary", ")", ":", "\n", "    ", "s", "=", "''", "\n", "for", "key", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "        ", "sub", "=", "'%s:%s  '", "%", "(", "key", ",", "dictionary", "[", "key", "]", ")", "\n", "s", "+=", "sub", "\n", "", "s", "+=", "'\\n'", "\n", "file", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.writelog": [[89, 98], ["open", "open.write", "open.write", "evaluation.writedict", "open.write", "open.close", "time.strftime", "time.localtime"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.writedict", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.Logger.write"], ["", "def", "writelog", "(", "filepath", ",", "metric", ",", "comment", ")", ":", "\n", "    ", "filepath", "=", "filepath", "\n", "logfile", "=", "open", "(", "filepath", ",", "'a'", ")", "\n", "import", "time", "\n", "logfile", ".", "write", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logfile", ".", "write", "(", "'\\t%s\\n'", "%", "comment", ")", "\n", "writedict", "(", "logfile", ",", "metric", ")", "\n", "logfile", ".", "write", "(", "'=====================================\\n'", ")", "\n", "logfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.evaluation": [[100, 116], ["open().readlines", "evaluation.do_python_eval", "evaluation.writelog", "range", "evaluation.writelog", "open", "[].split", "evaluation.do_python_eval", "l.append", "print", "[].split", "n.strip().split", "n.strip"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.do_python_eval", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.writelog", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.writelog", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.evaluation.do_python_eval"], ["", "def", "evaluation", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "type", "==", "'npy'", ":", "\n", "        ", "assert", "args", ".", "eval_thresh", "is", "not", "None", "or", "args", ".", "curve", "\n", "", "name_list", "=", "open", "(", "args", ".", "val_list", ")", ".", "readlines", "(", ")", "\n", "name_list", "=", "[", "n", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "n", "in", "name_list", "]", "\n", "if", "not", "args", ".", "curve", ":", "\n", "        ", "loglist", "=", "do_python_eval", "(", "args", ".", "predict_dir", ",", "args", ".", "gt_dir", ",", "name_list", ",", "args", ".", "num_cls", ",", "args", ".", "type", ",", "args", ".", "eval_thresh", ",", "printlog", "=", "True", ")", "\n", "writelog", "(", "args", ".", "eval_log_name", ",", "loglist", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "        ", "l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ",", "20", ")", ":", "\n", "            ", "t", "=", "i", "/", "100.0", "\n", "loglist", "=", "do_python_eval", "(", "args", ".", "predict_dir", ",", "args", ".", "gt_dir", ",", "name_list", ",", "args", ".", "num_cls", ",", "args", ".", "type", ",", "t", ")", "\n", "l", ".", "append", "(", "loglist", "[", "'mIoU'", "]", ")", "\n", "print", "(", "'%d/20 background score: %.3f\\tmIoU: %.3f%%'", "%", "(", "i", ",", "t", ",", "loglist", "[", "'mIoU'", "]", ")", ")", "\n", "", "writelog", "(", "args", ".", "eval_log_name", ",", "{", "'mIoU'", ":", "l", "}", ",", "\"\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.infer_multi_scale.infer_multi_scale": [[13, 107], ["ScaleNet101_SEAM.load_state_dict", "ScaleNet101_SEAM.eval", "ScaleNet101_SEAM.cuda", "tool.data.VOC12ClsDatasetMSF", "torch.utils.data.DataLoader", "torch.cuda.device_count", "torch.cuda.device_count", "torch.nn.parallel.replicate", "torch.nn.parallel.replicate", "print", "enumerate", "ScaleNet50_SEAM", "torch.load", "torch.load", "int", "list", "tool.data.get_img_path", "numpy.asarray", "tool.pyutils.BatchThreader", "pyutils.BatchThreader.pop_results", "numpy.sum", "numpy.max", "numpy.min", "range", "ScaleNet101_SEAM", "torchvision.transforms.Compose", "args.crf_threshs.split", "range", "str", "PIL.Image.open().convert", "list", "numpy.save", "numpy.array", "numpy.power", "numpy.concatenate", "tool.imutils.crf_inference", "dict", "enumerate", "print", "getattr", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.exists", "os.makedirs", "os.path.join", "list", "cam_dict.keys", "infer_multi_scale.infer_multi_scale._crf_with_alpha"], "function", ["home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet50_SEAM", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.data.get_img_path", "home.repos.pwc.inspect_result.eli-yili_pmm.tool.pyutils.BatchThreader.pop_results", "home.repos.pwc.inspect_result.eli-yili_pmm.network.scalenet_SEAM.ScaleNet101_SEAM", "home.repos.pwc.inspect_result.eli-yili_pmm.pipeline.refine_cam.crf_inference"], ["def", "infer_multi_scale", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "network", "==", "\"ScaleNet50_SEAM\"", ":", "\n", "        ", "from", "network", ".", "scalenet_SEAM", "import", "ScaleNet50_SEAM", "\n", "model", "=", "ScaleNet50_SEAM", "(", "args", ".", "structure", ",", "ckpt", "=", "None", ",", "dilations", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "dilations", ".", "split", "(", "'_'", ")", "]", ",", "num_cls", "=", "args", ".", "num_cls", ")", "\n", "", "elif", "args", ".", "network", "==", "\"ScaleNet101_SEAM\"", ":", "\n", "        ", "from", "network", ".", "scalenet_SEAM", "import", "ScaleNet101_SEAM", "\n", "model", "=", "ScaleNet101_SEAM", "(", "args", ".", "structure", ",", "ckpt", "=", "None", ",", "dilations", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "dilations", ".", "split", "(", "'_'", ")", "]", ",", "num_cls", "=", "args", ".", "num_cls", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "args", ".", "network", ")", ",", "'Net'", ")", "(", "args", ".", "num_cls", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "weights", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "tool", ".", "data", ".", "NUM_CLS", "=", "args", ".", "num_cls", "\n", "tool", ".", "data", ".", "IMG_FOLDER_NAME", "=", "args", ".", "img_dir", "\n", "tool", ".", "data", ".", "ANNOT_FOLDER_NAME", "=", "args", ".", "gt_dir", "\n", "tool", ".", "data", ".", "CLS_LABEL", "=", "args", ".", "cls_label", "\n", "infer_dataset", "=", "tool", ".", "data", ".", "VOC12ClsDatasetMSF", "(", "args", ".", "infer_list", ",", "voc12_root", "=", "args", ".", "voc12_root", ",", "pseudo_gt", "=", "args", ".", "pseudo_list", ",", "\n", "scales", "=", "[", "0.5", ",", "1.0", ",", "1.5", ",", "2.0", "]", ",", "\n", "inter_transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "\n", "[", "np", ".", "asarray", ",", "\n", "model", ".", "normalize", ",", "\n", "imutils", ".", "HWC_to_CHW", "]", ")", ")", "\n", "\n", "infer_data_loader", "=", "DataLoader", "(", "infer_dataset", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "crf_alpha", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "crf_threshs", ".", "split", "(", "'_'", ")", "]", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "model_replicas", "=", "torch", ".", "nn", ".", "parallel", ".", "replicate", "(", "model", ",", "list", "(", "range", "(", "n_gpus", ")", ")", ")", "\n", "print", "(", "\"gpu num: \"", "+", "str", "(", "n_gpus", ")", ",", "flush", "=", "True", ")", "\n", "\n", "for", "iter", ",", "(", "img_name", ",", "img_list", ",", "label", ")", "in", "enumerate", "(", "infer_data_loader", ")", ":", "\n", "        ", "img_name", "=", "img_name", "[", "0", "]", ";", "label", "=", "label", "[", "0", "]", "\n", "\n", "img_path", "=", "tool", ".", "data", ".", "get_img_path", "(", "img_name", ",", "args", ".", "voc12_root", ")", "\n", "orig_img", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "orig_img_size", "=", "orig_img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "def", "_work", "(", "i", ",", "img", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "device", "(", "i", "%", "n_gpus", ")", ":", "\n", "                    ", "_", ",", "cam", "=", "model_replicas", "[", "i", "%", "n_gpus", "]", "(", "img", ".", "cuda", "(", ")", ")", "\n", "cam", "=", "F", ".", "upsample", "(", "cam", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "orig_img_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "cam", "=", "cam", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "label", ".", "clone", "(", ")", ".", "view", "(", "args", ".", "num_cls", "-", "1", ",", "1", ",", "1", ")", ".", "numpy", "(", ")", "\n", "if", "i", "%", "2", "==", "1", ":", "\n", "                        ", "cam", "=", "np", ".", "flip", "(", "cam", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "cam", "\n", "\n", "", "", "", "thread_pool", "=", "pyutils", ".", "BatchThreader", "(", "_work", ",", "list", "(", "enumerate", "(", "img_list", ")", ")", ",", "\n", "batch_size", "=", "12", ",", "prefetch_size", "=", "0", ",", "processes", "=", "args", ".", "num_workers", ")", "\n", "\n", "cam_list", "=", "thread_pool", ".", "pop_results", "(", ")", "\n", "\n", "sum_cam", "=", "np", ".", "sum", "(", "cam_list", ",", "axis", "=", "0", ")", "\n", "sum_cam", "[", "sum_cam", "<", "0", "]", "=", "0", "\n", "cam_max", "=", "np", ".", "max", "(", "sum_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "cam_min", "=", "np", ".", "min", "(", "sum_cam", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "sum_cam", "[", "sum_cam", "<", "cam_min", "+", "1e-5", "]", "=", "0", "\n", "norm_cam", "=", "(", "sum_cam", "-", "cam_min", "-", "1e-5", ")", "/", "(", "cam_max", "-", "cam_min", "+", "1e-5", ")", "\n", "\n", "cam_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "args", ".", "num_cls", "-", "1", ")", ":", "\n", "            ", "if", "label", "[", "i", "]", ">", "1e-5", ":", "\n", "                ", "cam_dict", "[", "i", "]", "=", "norm_cam", "[", "i", "]", "\n", "\n", "", "", "if", "args", ".", "out_cam", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_cam", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "out_cam", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_cam", ",", "img_name", "+", "'.npy'", ")", ",", "cam_dict", ")", "\n", "\n", "", "def", "_crf_with_alpha", "(", "cam_dict", ",", "alpha", ",", "num_cls", ")", ":", "\n", "            ", "v", "=", "np", ".", "array", "(", "list", "(", "cam_dict", ".", "values", "(", ")", ")", ")", "\n", "bg_score", "=", "np", ".", "power", "(", "1", "-", "np", ".", "max", "(", "v", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "alpha", ")", "\n", "bgcam_score", "=", "np", ".", "concatenate", "(", "(", "bg_score", ",", "v", ")", ",", "axis", "=", "0", ")", "\n", "crf_score", "=", "imutils", ".", "crf_inference", "(", "orig_img", ",", "bgcam_score", ",", "labels", "=", "bgcam_score", ".", "shape", "[", "0", "]", ")", "\n", "\n", "n_crf_al", "=", "dict", "(", ")", "\n", "n_crf_al", "[", "0", "]", "=", "crf_score", "[", "0", "]", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "cam_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "n_crf_al", "[", "key", "+", "1", "]", "=", "crf_score", "[", "i", "+", "1", "]", "\n", "\n", "", "return", "n_crf_al", "\n", "\n", "", "if", "args", ".", "out_crf", "is", "not", "None", ":", "\n", "            ", "for", "t", "in", "crf_alpha", ":", "\n", "                ", "crf", "=", "_crf_with_alpha", "(", "cam_dict", ",", "t", ",", "args", ".", "num_cls", ")", "\n", "folder", "=", "args", ".", "out_crf", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "img_name", "+", "'.npy'", ")", ",", "crf", ")", "\n", "\n", "", "", "if", "iter", "%", "500", "==", "0", ":", "\n", "            ", "print", "(", "'iter: '", "+", "str", "(", "iter", ")", ",", "flush", "=", "True", ")", "\n", "", "", "", ""]]}