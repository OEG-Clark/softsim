{"home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.int64_feature": [[14, 16], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["def", "int64_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.int64_list_feature": [[17, 19], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "int64_list_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.bytes_feature": [[20, 22], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "bytes_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.bytes_list_feature": [[23, 25], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "bytes_list_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.float_list_feature": [[26, 28], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "float_list_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.create_tf_example": [[29, 45], ["line.split", "os.path.join", "scipy.misc.imread", "enumerate", "tensorflow.train.Example", "create_tfrecords.bytes_feature", "create_tfrecords.int64_feature", "create_tfrecords.int64_feature", "create_tfrecords.bytes_feature", "create_tfrecords.int64_feature", "tensorflow.compat.as_bytes", "int", "tensorflow.train.Features", "misc.imread.tostring"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.bytes_feature", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.int64_feature", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.int64_feature", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.bytes_feature", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.int64_feature"], ["", "def", "create_tf_example", "(", "line", ",", "attribute_name", ",", "img_dir", ")", ":", "\n", "    ", "info", "=", "line", ".", "split", "(", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "info", "[", "0", "]", ")", "\n", "img", "=", "misc", ".", "imread", "(", "img_name", ")", "\n", "# from IPython import embed; embed();exit()", "\n", "feature", "=", "{", "\n", "'image/id_name'", ":", "bytes_feature", "(", "info", "[", "0", "]", ")", ",", "\n", "'image/height'", ":", "int64_feature", "(", "img", ".", "shape", "[", "0", "]", ")", ",", "\n", "'image/width'", ":", "int64_feature", "(", "img", ".", "shape", "[", "1", "]", ")", ",", "\n", "'image/encoded'", ":", "bytes_feature", "(", "tf", ".", "compat", ".", "as_bytes", "(", "img", ".", "tostring", "(", ")", ")", ")", ",", "\n", "}", "\n", "for", "j", ",", "val", "in", "enumerate", "(", "info", "[", "1", ":", "]", ")", ":", "\n", "        ", "feature", "[", "attribute_name", "[", "j", "]", "]", "=", "int64_feature", "(", "int", "(", "val", ")", ")", "\n", "\n", "", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "feature", ")", ")", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.work": [[46, 67], ["os.path.join", "os.path.join", "os.path.join", "open", "f.read().strip().split", "lines[].split", "tensorflow.python_io.TFRecordWriter", "tf.python_io.TFRecordWriter.close", "os.path.join", "len", "range", "range", "create_tfrecords.create_tf_example", "tf.python_io.TFRecordWriter.write", "f.read().strip", "len", "create_tf_example.SerializeToString", "f.read"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.create_tf_example"], ["", "def", "work", "(", "list_id", ")", ":", "\n", "    ", "data_dir", "=", "'./datasets/celebA/'", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'align_5p'", ")", "\n", "attri_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'list_attr_celeba.txt'", ")", "\n", "tfrecords_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'align_5p_tfrecords'", ")", "\n", "\n", "with", "open", "(", "attri_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "attribute_name", "=", "lines", "[", "1", "]", ".", "split", "(", ")", "\n", "lines", "=", "lines", "[", "2", ":", "]", "\n", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "os", ".", "path", ".", "join", "(", "tfrecords_dir", ",", "'{:02d}.tfrecords'", ".", "format", "(", "list_id", ")", ")", ")", "\n", "if", "(", "list_id", "+", "1", ")", "*", "20000", "<=", "len", "(", "lines", ")", ":", "\n", "            ", "id_list", "=", "range", "(", "list_id", "*", "20000", ",", "(", "list_id", "+", "1", ")", "*", "20000", ")", "\n", "", "else", ":", "\n", "            ", "id_list", "=", "range", "(", "list_id", "*", "20000", ",", "len", "(", "lines", ")", ")", "\n", "\n", "", "for", "i", "in", "id_list", ":", "\n", "            ", "example", "=", "create_tf_example", "(", "lines", "[", "i", "]", ",", "attribute_name", ",", "img_dir", ")", "\n", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.create_tfrecords.main": [[69, 88], ["os.path.join", "os.path.join", "os.path.join", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.exists", "os.makedirs", "open", "f.read().strip().split", "lines[].split", "print", "list", "len", "range", "f.read().strip", "int", "math.ceil", "f.read", "len"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "data_dir", "=", "'./datasets/celebA/'", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'align_5p'", ")", "\n", "attri_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'list_attr_celeba.txt'", ")", "\n", "tfrecords_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'align_5p_tfrecords'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tfrecords_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tfrecords_dir", ")", "\n", "\n", "", "with", "open", "(", "attri_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "attribute_name", "=", "lines", "[", "1", "]", ".", "split", "(", ")", "\n", "print", "(", "len", "(", "lines", ")", ")", "\n", "# from IPython import embed; embed(); exit()", "\n", "\n", "", "pool", "=", "Pool", "(", "11", ")", "\n", "# partial_work = partial(work, lines)", "\n", "pool", ".", "map", "(", "work", ",", "list", "(", "range", "(", "int", "(", "math", ".", "ceil", "(", "(", "len", "(", "lines", ")", "-", "2", ")", "/", "20000.", ")", ")", ")", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run": [[14, 110], ["dataset.input", "tensorflow.train.Saver", "model.G_loss.keys", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "model.D_loss.keys", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.Session", "tf.Session.run", "tensorflow.train.get_checkpoint_state", "tensorflow.summary.FileWriter", "tf.summary.FileWriter.add_graph", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "range", "tf.summary.FileWriter.close", "tf.train.Saver.save", "tf.train.Coordinator.request_stop", "tf.train.Coordinator.join", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "tf.Session.run", "range", "range", "tf.Session.run", "print", "os.path.join", "range", "range", "range", "range", "range", "range", "dataset.config.g_lr", "dataset.config.d_lr", "tf.Session.run", "tf.Session.run", "tf.summary.FileWriter.add_summary", "tf.train.Saver.save", "tf.Session.run", "range", "os.path.join", "range", "numpy.concatenate", "scipy.misc.imsave", "os.path.join", "dataset.config"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.input", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.g_lr", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.d_lr", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["def", "run", "(", "config", ",", "dataset", ",", "model", ",", "gpu", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "\n", "batchs", ",", "labels", "=", "dataset", ".", "input", "(", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# image summary", "\n", "image_summry_op", "=", "[", "]", "\n", "image_summry_op", "+=", "[", "tf", ".", "summary", ".", "image", "(", "'Ax_{}'", ".", "format", "(", "i", ")", ",", "model", ".", "Axs", "[", "i", "]", ",", "max_outputs", "=", "30", ")", "for", "i", "in", "range", "(", "model", ".", "n_feat", ")", "]", "\n", "image_summry_op", "+=", "[", "tf", ".", "summary", ".", "image", "(", "'Be_{}'", ".", "format", "(", "i", ")", ",", "model", ".", "Bes", "[", "i", "]", ",", "max_outputs", "=", "30", ")", "for", "i", "in", "range", "(", "model", ".", "n_feat", ")", "]", "\n", "image_summry_op", "+=", "[", "tf", ".", "summary", ".", "image", "(", "'Ax2_{}'", ".", "format", "(", "i", ")", ",", "model", ".", "Axs2", "[", "i", "]", ",", "max_outputs", "=", "30", ")", "for", "i", "in", "range", "(", "model", ".", "n_feat", ")", "]", "\n", "image_summry_op", "+=", "[", "tf", ".", "summary", ".", "image", "(", "'Be2_{}'", ".", "format", "(", "i", ")", ",", "model", ".", "Bes2", "[", "i", "]", ",", "max_outputs", "=", "30", ")", "for", "i", "in", "range", "(", "model", ".", "n_feat", ")", "]", "\n", "image_summry_op", "+=", "[", "tf", ".", "summary", ".", "image", "(", "'Ae_{}'", ".", "format", "(", "i", ")", ",", "model", ".", "Aes", "[", "i", "]", ",", "max_outputs", "=", "30", ")", "for", "i", "in", "range", "(", "model", ".", "n_feat", ")", "]", "\n", "image_summry_op", "+=", "[", "tf", ".", "summary", ".", "image", "(", "'Bx_{}'", ".", "format", "(", "i", ")", ",", "model", ".", "Bxs", "[", "i", "]", ",", "max_outputs", "=", "30", ")", "for", "i", "in", "range", "(", "model", ".", "n_feat", ")", "]", "\n", "\n", "# G loss summary", "\n", "for", "key", "in", "model", ".", "G_loss", ".", "keys", "(", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "model", ".", "G_loss", "[", "key", "]", ")", "\n", "\n", "", "loss_G_nodecay_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'loss_G_nodecay'", ",", "model", ".", "loss_G_nodecay", ")", "\n", "loss_G_decay_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'loss_G_decay'", ",", "model", ".", "loss_G_decay", ")", "\n", "loss_G_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'loss_G'", ",", "model", ".", "loss_G", ")", "\n", "\n", "# D loss summary", "\n", "for", "key", "in", "model", ".", "D_loss", ".", "keys", "(", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "model", ".", "D_loss", "[", "key", "]", ")", "\n", "\n", "", "loss_D_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'loss_D'", ",", "model", ".", "loss_D", ")", "\n", "\n", "# learning rate summary", "\n", "g_lr_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_learning_rate'", ",", "model", ".", "g_lr", ")", "\n", "d_lr_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'d_learning_rate'", ",", "model", ".", "d_lr", ")", "\n", "\n", "# merged_op = tf.contrib.deprecated.merge_all_summaries()", "\n", "merged_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "# start training", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "config", ".", "model_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "        ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "\n", "", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "config", ".", "log_dir", ",", "sess", ".", "graph", ")", "\n", "writer", ".", "add_graph", "(", "sess", ".", "graph", ")", "\n", "\n", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "\n", "for", "i", "in", "range", "(", "config", ".", "max_iter", ")", ":", "\n", "        ", "d_num", "=", "100", "if", "i", "%", "500", "==", "0", "else", "1", "\n", "\n", "batch_images", ",", "batch_labels", "=", "sess", ".", "run", "(", "[", "batchs", ",", "labels", "]", ")", "\n", "feed_dict", "=", "{", "model", ".", "g_lr", ":", "config", ".", "g_lr", "(", "epoch", "=", "i", ")", ",", "\n", "model", ".", "d_lr", ":", "config", ".", "d_lr", "(", "epoch", "=", "i", ")", ",", "\n", "}", "\n", "for", "j", "in", "range", "(", "model", ".", "n_feat", ")", ":", "\n", "            ", "feed_dict", "[", "model", ".", "Axs", "[", "j", "]", "]", "=", "batch_images", "[", "2", "*", "j", "]", "\n", "feed_dict", "[", "model", ".", "Bes", "[", "j", "]", "]", "=", "batch_images", "[", "2", "*", "j", "+", "1", "]", "\n", "feed_dict", "[", "model", ".", "label_Axs", "[", "j", "]", "]", "=", "batch_labels", "[", "2", "*", "j", "]", "\n", "feed_dict", "[", "model", ".", "label_Bes", "[", "j", "]", "]", "=", "batch_labels", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "# from IPython import embed; embed();exit()", "\n", "# update D with clipping", "\n", "", "for", "j", "in", "range", "(", "d_num", ")", ":", "\n", "            ", "_", ",", "loss_D_sum", ",", "_", "=", "sess", ".", "run", "(", "[", "model", ".", "d_opt", ",", "model", ".", "loss_D", ",", "model", ".", "clip_d", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "# update G", "\n", "", "_", ",", "loss_G_sum", "=", "sess", ".", "run", "(", "[", "model", ".", "g_opt", ",", "model", ".", "loss_G", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "print", "(", "'iter: {:06d},   g_loss: {}    d_loss: {}'", ".", "format", "(", "i", ",", "loss_D_sum", ",", "loss_G_sum", ")", ")", "\n", "\n", "if", "i", "%", "20", "==", "0", ":", "\n", "            ", "merged_summary", "=", "sess", ".", "run", "(", "merged_op", ",", "feed_dict", "=", "feed_dict", ")", "\n", "writer", ".", "add_summary", "(", "merged_summary", ",", "i", ")", "\n", "\n", "", "if", "i", "%", "500", "==", "0", ":", "\n", "            ", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'model_{:06d}.ckpt'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "img_Axs", ",", "img_Bes", ",", "img_Aes", ",", "img_Bxs", ",", "img_Axs2", ",", "img_Bes2", "=", "sess", ".", "run", "(", "[", "model", ".", "Axs", ",", "model", ".", "Bes", ",", "model", ".", "Aes", ",", "model", ".", "Bxs", ",", "model", ".", "Axs2", ",", "model", ".", "Bes2", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "for", "k", "in", "range", "(", "model", ".", "n_feat", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "                    ", "img", "=", "np", ".", "concatenate", "(", "(", "img_Axs", "[", "k", "]", "[", "j", "]", ",", "img_Bes", "[", "k", "]", "[", "j", "]", ",", "img_Aes", "[", "k", "]", "[", "j", "]", ",", "img_Bxs", "[", "k", "]", "[", "j", "]", ",", "img_Axs2", "[", "k", "]", "[", "j", "]", ",", "img_Bes2", "[", "k", "]", "[", "j", "]", ")", ",", "axis", "=", "1", ")", "\n", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "config", ".", "sample_img_dir", ",", "'iter_{:06d}_{}_{}.jpg'", ".", "format", "(", "i", ",", "j", ",", "model", ".", "feature_list", "[", "k", "]", ")", ")", ",", "img", ")", "\n", "\n", "", "", "", "", "writer", ".", "close", "(", ")", "\n", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'model.ckpt'", ")", ")", "\n", "\n", "coord", ".", "request_stop", "(", ")", "\n", "coord", ".", "join", "(", "threads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.main": [[111, 130], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "dataset.Dataset", "model.Model", "train.run"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'test'", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-a'", ",", "'--attributes'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify attribute name for training. \\nAll attributes can be found in list_attr_celeba.txt'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-g'", ",", "'--gpu'", ",", "\n", "default", "=", "'0'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify GPU id. \\ndefault: %(default)s. \\nUse comma to seperate several ids, for example: 0,1'", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "celebA", "=", "Dataset", "(", "args", ".", "attributes", ")", "\n", "DNA_GAN", "=", "Model", "(", "args", ".", "attributes", ",", "is_train", "=", "True", ")", "\n", "run", "(", "config", ",", "celebA", ",", "DNA_GAN", ",", "gpu", "=", "args", ".", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.base_dir": [[13, 16], ["os.path.abspath"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "base_dir", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "curdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.data_dir": [[17, 23], ["os.path.join", "os.path.exists", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_dir", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "'./datasets/celebA/'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Please specify a data dir.'", ")", "\n", "", "return", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.exp_dir": [[24, 30], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "exp_dir", "(", "self", ")", ":", "\n", "        ", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "'train_log'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "exp_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "exp_dir", ")", "\n", "", "return", "exp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.model_dir": [[31, 37], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_dir", "(", "self", ")", ":", "\n", "        ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'model'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "return", "model_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.log_dir": [[38, 44], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'logs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.sample_img_dir": [[45, 51], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "sample_img_dir", "(", "self", ")", ":", "\n", "        ", "sample_img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'sample_img'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sample_img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "sample_img_dir", ")", "\n", "", "return", "sample_img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.g_lr": [[52, 54], ["numpy.float"], "methods", ["None"], ["", "def", "g_lr", "(", "self", ",", "init_lr", "=", "0.00005", ",", "decay_rate", "=", "1", ",", "decay_step", "=", "10000", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "init_lr", "*", "decay_rate", "**", "(", "epoch", "/", "np", ".", "float", "(", "decay_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Config.d_lr": [[55, 57], ["numpy.float"], "methods", ["None"], ["", "def", "d_lr", "(", "self", ",", "init_lr", "=", "0.00005", ",", "decay_rate", "=", "1", ",", "decay_step", "=", "10000", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "init_lr", "*", "decay_rate", "**", "(", "epoch", "/", "np", ".", "float", "(", "decay_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.__init__": [[78, 94], ["object.__init__", "len", "os.path.join", "os.path.join", "open", "f.read().strip().split", "lines[].split", "sorted", "name.endswith", "os.path.join", "os.listdir", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_list", ",", "data_dir", "=", "config", ".", "data_dir", ",", "nhwc", "=", "config", ".", "nhwc", ",", "num_threads", "=", "config", ".", "num_threads", ",", "shuffle", "=", "config", ".", "shuffle", ",", "buffer_size", "=", "config", ".", "buffer_size", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "feature_list", "=", "feature_list", "\n", "self", ".", "n_feat", "=", "len", "(", "self", ".", "feature_list", ")", "\n", "\n", "self", ".", "batch_size", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "channel", "=", "nhwc", "\n", "self", ".", "num_threads", "=", "num_threads", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "tfrecords_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'align_5p_tfrecords'", ")", "\n", "self", ".", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "tfrecords_dir", ",", "name", ")", "for", "name", "in", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "tfrecords_dir", ")", ")", "if", "name", ".", "endswith", "(", "'.tfrecords'", ")", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'list_attr_celeba.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "self", ".", "attribute_names", "=", "lines", "[", "1", "]", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.parse_fn": [[95, 115], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.image.resize_images", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.cast"], "methods", ["None"], ["", "", "def", "parse_fn", "(", "self", ",", "serialized_example", ")", ":", "\n", "        ", "features", "=", "{", "\n", "'image/id_name'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image/height'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'image/width'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'image/encoded'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "}", "\n", "for", "name", "in", "self", ".", "feature_list", ":", "\n", "            ", "features", "[", "name", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "\n", "", "example", "=", "tf", ".", "parse_single_example", "(", "serialized_example", ",", "features", "=", "features", ")", "\n", "image", "=", "tf", ".", "decode_raw", "(", "example", "[", "'image/encoded'", "]", ",", "tf", ".", "uint8", ")", "\n", "raw_height", "=", "tf", ".", "cast", "(", "example", "[", "'image/height'", "]", ",", "tf", ".", "int32", ")", "\n", "raw_width", "=", "tf", ".", "cast", "(", "example", "[", "'image/width'", "]", ",", "tf", ".", "int32", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "raw_height", ",", "raw_width", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "image", ".", "resize_images", "(", "image", ",", "size", "=", "[", "self", ".", "height", ",", "self", ".", "width", "]", ")", "\n", "# from IPython import embed; embed(); exit()", "\n", "\n", "feature_val_list", "=", "[", "tf", ".", "cast", "(", "example", "[", "name", "]", ",", "tf", ".", "float32", ")", "for", "name", "in", "self", ".", "feature_list", "]", "\n", "return", "image", ",", "feature_val_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.filter_fn": [[116, 121], ["tensorflow.equal", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.ones_like"], "methods", ["None"], ["", "def", "filter_fn", "(", "self", ",", "feat_id", ",", "pos", ",", "image", ",", "feature_val", ")", ":", "\n", "        ", "if", "pos", ":", "\n", "            ", "return", "tf", ".", "equal", "(", "feature_val", "[", "feat_id", "]", ",", "tf", ".", "ones_like", "(", "feature_val", "[", "feat_id", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "equal", "(", "feature_val", "[", "feat_id", "]", ",", "-", "tf", ".", "ones_like", "(", "feature_val", "[", "feat_id", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.get_filter_fn": [[122, 124], ["functools.partial"], "methods", ["None"], ["", "", "def", "get_filter_fn", "(", "self", ",", "feat_id", ",", "pos", ")", ":", "\n", "        ", "return", "partial", "(", "self", ".", "filter_fn", ",", "feat_id", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.input": [[125, 137], ["tensorflow.contrib.data.TFRecordDataset", "dataset.map", "datasets[].filter().repeat().batch", "dataset.make_one_shot_iterator", "range", "dataset.shuffle", "range", "enumerate", "iterator.get_next", "iterator.get_next", "datasets[].filter().repeat", "datasets[].filter", "dataset.Dataset.get_filter_fn"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.dataset.Dataset.get_filter_fn"], ["", "def", "input", "(", "self", ")", ":", "\n", "        ", "datasets", "=", "[", "tf", ".", "contrib", ".", "data", ".", "TFRecordDataset", "(", "self", ".", "filenames", ")", "for", "i", "in", "range", "(", "2", "*", "self", ".", "n_feat", ")", "]", "\n", "datasets", "=", "[", "dataset", ".", "map", "(", "self", ".", "parse_fn", ",", "num_threads", "=", "self", ".", "num_threads", ")", "for", "dataset", "in", "datasets", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "datasets", "=", "[", "dataset", ".", "shuffle", "(", "self", ".", "buffer_size", ")", "for", "dataset", "in", "datasets", "]", "\n", "\n", "", "datasets", "=", "[", "datasets", "[", "2", "*", "i", "+", "j", "]", ".", "filter", "(", "self", ".", "get_filter_fn", "(", "i", ",", "pos", ")", ")", ".", "repeat", "(", ")", ".", "batch", "(", "self", ".", "batch_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "for", "j", ",", "pos", "in", "enumerate", "(", "[", "True", ",", "False", "]", ")", "]", "\n", "\n", "iterators", "=", "[", "dataset", ".", "make_one_shot_iterator", "(", ")", "for", "dataset", "in", "datasets", "]", "\n", "batchs", "=", "[", "iterator", ".", "get_next", "(", ")", "[", "0", "]", "for", "iterator", "in", "iterators", "]", "\n", "labels", "=", "[", "iterator", ".", "get_next", "(", ")", "[", "1", "]", "for", "iterator", "in", "iterators", "]", "\n", "return", "batchs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.swap_attribute": [[16, 52], ["tensorflow.train.Saver", "tensorflow.Session", "sess.run", "tensorflow.train.get_checkpoint_state", "tensorflow.placeholder", "tensorflow.placeholder", "model.splitter", "model.splitter", "model.swap_attribute", "model.joiner", "model.joiner", "sess.run", "numpy.concatenate", "scipy.misc.imsave", "tensorflow.global_variables_initializer", "tf.train.Saver.restore"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.swap_attribute", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["def", "swap_attribute", "(", "src_img", ",", "att_img", ",", "swap_list", ",", "model_dir", ",", "model", ",", "gpu", ")", ":", "\n", "    ", "'''\n    Input\n        src_img: the source image that you want to change its attribute\n        att_img: the attribute image that has certain attribute\n        swap_list: the swap id list\n        model_dir: the directory that contains the checkpoint, ckpt.* files\n        model: the DNA_GAN network that defined in train.py\n        gpu: for example, '0,1'. Use '' for cpu mode\n    Output\n        out1: src_img with attributes\n        out2: att_img without attributes\n    '''", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "# print(ckpt)", "\n", "# print(ckpt.model_checkpoint_path)", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "", "Ax", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Ax'", ")", "\n", "Be", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Be'", ")", "\n", "\n", "enc_Ax", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Ax", ")", "\n", "enc_Be", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Be", ")", "\n", "enc_Ae", ",", "enc_Bx", "=", "model", ".", "swap_attribute", "(", "enc_Ax", ",", "enc_Be", ",", "swap_list", ")", "\n", "Ae", "=", "model", ".", "joiner", "(", "'decoder'", ",", "enc_Ae", ")", "\n", "Bx", "=", "model", ".", "joiner", "(", "'decoder'", ",", "enc_Bx", ")", "\n", "out2", ",", "out1", "=", "sess", ".", "run", "(", "[", "Ae", ",", "Bx", "]", ",", "feed_dict", "=", "{", "Ax", ":", "att_img", ",", "Be", ":", "src_img", "}", ")", "\n", "swap", "=", "np", ".", "concatenate", "(", "(", "src_img", "[", "0", "]", ",", "att_img", "[", "0", "]", ",", "out1", "[", "0", "]", ",", "out2", "[", "0", "]", ")", ",", "1", ")", "\n", "misc", ".", "imsave", "(", "'swap.jpg'", ",", "swap", ")", "\n", "# misc.imsave('out1.jpg', out1[0])", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation": [[56, 95], ["tensorflow.train.Saver", "tensorflow.Session", "sess.run", "tensorflow.train.get_checkpoint_state", "tensorflow.placeholder", "tensorflow.placeholder", "model.splitter", "model.splitter", "range", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "model.joiner", "sess.run", "numpy.concatenate", "float", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["", "", "def", "interpolation", "(", "src_img", ",", "att_img", ",", "swap_id", ",", "inter_num", ",", "model_dir", ",", "model", ",", "gpu", ")", ":", "\n", "    ", "'''\n    Input\n        src_img: the source image that you want to change its attribute\n        att_img: the attribute image that has certain attribute\n        swap_id: the attribute id\n        inter_num: number of interpolation points\n        model_dir: the directory that contains the checkpoint, ckpt.* files\n        model: the DNA_GAN network that defined in train.py\n        gpu: for example, '0,1'. Use '' for cpu mode\n    Output\n        out: [src_img, inter1, inter2, ..., inter_{inter_num}]\n    '''", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "# print(ckpt)", "\n", "# print(ckpt.model_checkpoint_path)", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "", "Ax", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Ax'", ")", "\n", "Be", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Be'", ")", "\n", "\n", "enc_Ax", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Ax", ")", "\n", "enc_Be", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Be", ")", "\n", "out", "=", "src_img", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "inter_num", "+", "1", ")", ":", "\n", "            ", "lambda_i", "=", "i", "/", "float", "(", "inter_num", ")", "\n", "enc_Bx_i", "=", "[", "tf", ".", "identity", "(", "enc", ")", "for", "enc", "in", "enc_Be", "]", "\n", "enc_Bx_i", "[", "swap_id", "]", "=", "enc_Ax", "[", "swap_id", "]", "*", "lambda_i", "\n", "Bx_i", "=", "model", ".", "joiner", "(", "'decoder'", ",", "enc_Bx_i", ")", "\n", "out_i", "=", "sess", ".", "run", "(", "Bx_i", ",", "feed_dict", "=", "{", "Ax", ":", "att_img", ",", "Be", ":", "src_img", "}", ")", "\n", "out", "=", "np", ".", "concatenate", "(", "(", "out", ",", "out_i", "[", "0", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation2": [[96, 150], ["tensorflow.train.Saver", "tensorflow.Session", "sess.run", "tensorflow.train.get_checkpoint_state", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.splitter", "model.splitter", "model.splitter", "numpy.zeros", "range", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "numpy.ones", "range", "model.joiner", "sess.run", "float", "float", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["", "", "def", "interpolation2", "(", "src_img", ",", "att_imgs", ",", "swap_list", ",", "size", ",", "model_dir", ",", "model", ",", "gpu", ")", ":", "\n", "    ", "'''\n    Input\n        src_img: the source image that you want to change its attribute\n        att_imgs: the attribute images that has certain attribute\n        swap_list: the attributes list\n        size: size of output matrix\n        model_dir: the directory that contains the checkpoint, ckpt.* files\n        model: the DNA_GAN network that defined in train.py\n        gpu: for example, '0,1'. Use '' for cpu mode\n    Output\n        out: [src_img, inter1, inter2, ..., inter_{inter_num}]\n    '''", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "# print(ckpt)", "\n", "# print(ckpt.model_checkpoint_path)", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "", "m", ",", "n", "=", "size", "\n", "h", ",", "w", "=", "model", ".", "height", ",", "model", ".", "width", "\n", "\n", "Ax1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Ax1'", ")", "\n", "Ax2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Ax2'", ")", "\n", "Be", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Be'", ")", "\n", "\n", "enc_Ax1", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Ax1", ")", "\n", "enc_Ax2", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Ax2", ")", "\n", "enc_Be", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Be", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "h", "*", "m", ",", "w", "*", "n", ",", "model", ".", "channel", ")", ")", "\n", "canvas", "=", "np", ".", "ones", "(", "(", "h", "*", "m", ",", "w", "*", "(", "n", "+", "2", ")", ",", "model", ".", "channel", ")", ")", "*", "255", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "lambda_i", "=", "i", "/", "float", "(", "m", "-", "1", ")", "\n", "lambda_j", "=", "j", "/", "float", "(", "n", "-", "1", ")", "\n", "enc_Bx_i", "=", "[", "tf", ".", "identity", "(", "enc", ")", "for", "enc", "in", "enc_Be", "]", "\n", "enc_Bx_i", "[", "0", "]", "=", "enc_Ax1", "[", "0", "]", "*", "lambda_i", "+", "enc_Be", "[", "0", "]", "*", "(", "1", "-", "lambda_i", ")", "\n", "enc_Bx_i", "[", "1", "]", "=", "enc_Ax2", "[", "1", "]", "*", "lambda_j", "+", "enc_Be", "[", "1", "]", "*", "(", "1", "-", "lambda_j", ")", "\n", "\n", "Bx_i_j", "=", "model", ".", "joiner", "(", "'decoder'", ",", "enc_Bx_i", ")", "\n", "out_i_j", "=", "sess", ".", "run", "(", "Bx_i_j", ",", "feed_dict", "=", "{", "Ax1", ":", "att_imgs", "[", ":", "1", "]", ",", "Ax2", ":", "att_imgs", "[", "1", ":", "]", ",", "Be", ":", "src_img", "}", ")", "\n", "out", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "out_i_j", "[", "0", "]", "\n", "", "", "canvas", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "src_img", "\n", "canvas", "[", ":", "h", "*", "m", ",", "w", ":", "w", "*", "(", "n", "+", "1", ")", ",", ":", "]", "=", "out", "\n", "canvas", "[", ":", "h", ",", "w", "*", "(", "n", "+", "1", ")", ":", "w", "*", "(", "n", "+", "2", ")", ",", ":", "]", "=", "att_imgs", "[", "1", "]", "\n", "canvas", "[", "-", "h", ":", ",", ":", "w", ",", ":", "]", "=", "att_imgs", "[", "0", "]", "\n", "return", "out", ",", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation1_": [[151, 185], ["tensorflow.train.Saver", "tensorflow.Session", "sess.run", "tensorflow.train.get_checkpoint_state", "sess.run", "sess.run", "range", "scipy.misc.imsave", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "sess.run", "numpy.concatenate", "float", "model.joiner"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner"], ["", "", "def", "interpolation1_", "(", "src_img", ",", "att_img", ",", "inter_num", ",", "model_dir", ",", "model", ",", "gpu", ")", ":", "\n", "    ", "'''\n    Input\n        src_img: the source image that you want to change its attribute\n        att_img: the attribute image that has certain attribute\n        inter_num: number of interpolation points\n        model_dir: the directory that contains the checkpoint, ckpt.* files\n        model: the DNA_GAN network that defined in train.py\n        gpu: for example, '0,1'. Use '' for cpu mode\n    Output\n        out: [src_img, inter1, inter2, ..., inter_{inter_num}]\n    '''", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "# print(ckpt)", "\n", "# print(ckpt.model_checkpoint_path)", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "", "B", ",", "src_feat", "=", "sess", ".", "run", "(", "[", "model", ".", "B", ",", "model", ".", "e", "]", ",", "feed_dict", "=", "{", "model", ".", "Be", ":", "src_img", "}", ")", "\n", "att_feat", "=", "sess", ".", "run", "(", "model", ".", "x", ",", "feed_dict", "=", "{", "model", ".", "Ax", ":", "att_img", "}", ")", "\n", "\n", "out", "=", "src_img", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "inter_num", "+", "1", ")", ":", "\n", "            ", "lambda_i", "=", "i", "/", "float", "(", "inter_num", ")", "\n", "out_i", "=", "sess", ".", "run", "(", "model", ".", "joiner", "(", "'G_joiner'", ",", "B", ",", "src_feat", "+", "(", "att_feat", "-", "src_feat", ")", "*", "lambda_i", ")", ")", "\n", "out", "=", "np", ".", "concatenate", "(", "(", "out", ",", "out_i", "[", "0", "]", ")", ",", "axis", "=", "1", ")", "\n", "# print(out.shape)", "\n", "", "misc", ".", "imsave", "(", "'interpolation2.jpg'", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation_matrix": [[186, 252], ["tensorflow.train.Saver", "tensorflow.Session", "sess.run", "tensorflow.train.get_checkpoint_state", "tensorflow.placeholder", "range", "model.splitter", "numpy.zeros", "range", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "tensorflow.placeholder", "model.splitter", "numpy.ones", "range", "range", "range", "four_tuple.append", "range", "sum", "model.joiner", "sess.run", "float", "float", "tensorflow.identity", "float", "float", "range"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["", "", "def", "interpolation_matrix", "(", "src_img", ",", "att_imgs", ",", "swap_id", ",", "size", ",", "model_dir", ",", "model", ",", "gpu", ")", ":", "\n", "    ", "'''\n    Input\n        src_img: the source image that you want to change its attribute [1, h, w, c]\n        att_imgs: four attribute images that has certain attribute [4, h, w, c]\n        swap_id: the attribute id\n        size: the size of output matrix\n        model_dir: the directory that contains the checkpoint, ckpt.* files\n        model: the DNA_GAN network that defined in train.py\n        gpu: for example, '0,1'. Use '' for cpu mode\n    Output\n        out: image matrix\n    '''", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "# print(ckpt)", "\n", "# print(ckpt.model_checkpoint_path)", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "", "m", ",", "n", "=", "size", "\n", "h", ",", "w", "=", "model", ".", "height", ",", "model", ".", "width", "\n", "\n", "rows", "=", "[", "[", "1", "-", "i", "/", "float", "(", "m", "-", "1", ")", ",", "i", "/", "float", "(", "m", "-", "1", ")", "]", "for", "i", "in", "range", "(", "m", ")", "]", "\n", "cols", "=", "[", "[", "1", "-", "i", "/", "float", "(", "n", "-", "1", ")", ",", "i", "/", "float", "(", "n", "-", "1", ")", "]", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "four_tuple", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "for", "col", "in", "cols", ":", "\n", "                ", "four_tuple", ".", "append", "(", "[", "row", "[", "0", "]", "*", "col", "[", "0", "]", ",", "row", "[", "0", "]", "*", "col", "[", "1", "]", ",", "row", "[", "1", "]", "*", "col", "[", "0", "]", ",", "row", "[", "1", "]", "*", "col", "[", "1", "]", "]", ")", "\n", "\n", "", "", "Axs", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "Be", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Be'", ")", "\n", "feed_dict", "=", "{", "Be", ":", "src_img", "}", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "feed_dict", "[", "Axs", "[", "i", "]", "]", "=", "att_imgs", "[", "i", ":", "i", "+", "1", "]", "\n", "\n", "", "enc_Axs", "=", "[", "model", ".", "splitter", "(", "'encoder'", ",", "Ax", ")", "for", "Ax", "in", "Axs", "]", "\n", "enc_Be", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Be", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "h", "*", "m", ",", "w", "*", "n", ",", "model", ".", "channel", ")", ")", "\n", "canvas", "=", "np", ".", "ones", "(", "(", "h", "*", "m", ",", "w", "*", "(", "n", "+", "2", ")", ",", "model", ".", "channel", ")", ")", "*", "255", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "four", "=", "four_tuple", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "\n", "enc_Bx_i_j", "=", "[", "tf", ".", "identity", "(", "enc", ")", "for", "enc", "in", "enc_Be", "]", "\n", "enc_Bx_i_j", "[", "swap_id", "]", "=", "sum", "(", "[", "four", "[", "k", "]", "*", "enc_Axs", "[", "k", "]", "[", "swap_id", "]", "for", "k", "in", "range", "(", "4", ")", "]", ")", "\n", "\n", "Bx_i_j", "=", "model", ".", "joiner", "(", "'decoder'", ",", "enc_Bx_i_j", ")", "\n", "out_i_j", "=", "sess", ".", "run", "(", "Bx_i_j", ",", "feed_dict", "=", "feed_dict", ")", "\n", "out", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "out_i_j", "[", "0", "]", "\n", "# misc.imsave('out_{:02d}.jpg'.format(cnt), out_i_j[0])", "\n", "\n", "", "", "canvas", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "att_imgs", "[", "0", "]", "\n", "canvas", "[", ":", "h", ",", "-", "w", ":", ",", ":", "]", "=", "att_imgs", "[", "1", "]", "\n", "canvas", "[", "-", "h", ":", ",", ":", "w", ",", ":", "]", "=", "att_imgs", "[", "2", "]", "\n", "canvas", "[", "-", "h", ":", ",", "-", "w", ":", ",", ":", "]", "=", "att_imgs", "[", "3", "]", "\n", "canvas", "[", ":", ",", "w", ":", "-", "w", ",", ":", "]", "=", "out", "\n", "return", "out", ",", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.main": [[253, 344], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "model.Model", "numpy.expand_dims", "numpy.expand_dims", "test.swap_attribute", "scipy.misc.imresize", "scipy.misc.imresize", "numpy.expand_dims", "numpy.expand_dims", "test.interpolation", "scipy.misc.imsave", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imresize", "scipy.misc.imresize", "numpy.expand_dims", "numpy.array", "test.interpolation2", "scipy.misc.imsave", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imresize", "numpy.expand_dims", "numpy.array", "test.interpolation_matrix", "scipy.misc.imsave", "NotImplementationError", "scipy.misc.imread", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imresize", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.swap_attribute", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation2", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.test.interpolation_matrix"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'test'", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-m'", ",", "'--mode'", ",", "\n", "default", "=", "'swap'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'swap'", ",", "'interpolation'", ",", "'interpolation2'", ",", "'matrix'", "]", ",", "\n", "help", "=", "'Specify mode.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-a'", ",", "'--attributes'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'attributes list'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--swap_list'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'0/1 list'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-i'", ",", "'--input'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify source image name.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-t'", ",", "'--target'", ",", "\n", "metavar", "=", "'target image with attributes'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify target image name.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify target image name.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model_dir'", ",", "\n", "default", "=", "'train_log/model/'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify model_dir. \\ndefault: %(default)s.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-n'", ",", "'--num'", ",", "\n", "default", "=", "'2'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Specify number of interpolations.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-s'", ",", "'--size'", ",", "\n", "nargs", "=", "2", ",", "\n", "default", "=", "[", "3", ",", "3", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Specify number of interpolations.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-g'", ",", "'--gpu'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Specify GPU id. \\ndefault: %(default)s. \\nUse comma to seperate several ids, for example: 0,1'", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "DNA_GAN", "=", "Model", "(", "feature_list", "=", "args", ".", "attributes", ",", "is_train", "=", "False", ",", "nhwc", "=", "[", "1", ",", "64", ",", "64", ",", "3", "]", ")", "\n", "if", "args", ".", "mode", "==", "'swap'", ":", "\n", "        ", "src_img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "input", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "att_img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "target", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "swap_attribute", "(", "src_img", ",", "att_img", ",", "args", ".", "swap_list", ",", "args", ".", "model_dir", ",", "DNA_GAN", ",", "args", ".", "gpu", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'interpolation'", ":", "\n", "        ", "src_img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "input", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "att_img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "target", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "out", "=", "interpolation", "(", "src_img", ",", "att_img", ",", "args", ".", "swap_list", "[", "0", "]", ",", "args", ".", "num", ",", "args", ".", "model_dir", ",", "DNA_GAN", ",", "args", ".", "gpu", ")", "\n", "misc", ".", "imsave", "(", "'interpolation.jpg'", ",", "out", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'interpolation2'", ":", "\n", "        ", "src_img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "input", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "att_imgs", "=", "np", ".", "array", "(", "[", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "img", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", "for", "img", "in", "args", ".", "targets", "]", ")", "\n", "out", ",", "canvas", "=", "interpolation2", "(", "src_img", ",", "att_imgs", ",", "args", ".", "swap_list", ",", "args", ".", "size", ",", "args", ".", "model_dir", ",", "DNA_GAN", ",", "args", ".", "gpu", ")", "\n", "misc", ".", "imsave", "(", "'interpolation2.jpg'", ",", "canvas", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'matrix'", ":", "\n", "        ", "src_img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "input", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "att_imgs", "=", "np", ".", "array", "(", "[", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "img", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", "for", "img", "in", "args", ".", "targets", "]", ")", "\n", "out", ",", "canvas", "=", "interpolation_matrix", "(", "src_img", ",", "att_imgs", ",", "args", ".", "swap_list", "[", "0", "]", ",", "args", ".", "size", ",", "args", ".", "model_dir", ",", "DNA_GAN", ",", "args", ".", "gpu", ")", "\n", "misc", ".", "imsave", "(", "'four_matrix.jpg'", ",", "canvas", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementationError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_2p": [[10, 43], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.linalg.inv", "cv2.warpAffine", "numpy.sqrt", "numpy.arctan2", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "align_2p", "(", "img", ",", "left_eye", ",", "right_eye", ")", ":", "\n", "    ", "width", "=", "256", "\n", "eye_width", "=", "70", "\n", "\n", "transform", "=", "np", ".", "matrix", "(", "[", "\n", "[", "1", ",", "0", ",", "left_eye", "[", "0", "]", "]", ",", "\n", "[", "0", ",", "1", ",", "left_eye", "[", "1", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "th", "=", "np", ".", "pi", "+", "-", "np", ".", "arctan2", "(", "left_eye", "[", "1", "]", "-", "right_eye", "[", "1", "]", ",", "left_eye", "[", "0", "]", "-", "right_eye", "[", "0", "]", ")", "\n", "transform", "*=", "np", ".", "matrix", "(", "[", "\n", "[", "np", ".", "cos", "(", "th", ")", ",", "np", ".", "sin", "(", "th", ")", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "th", ")", ",", "np", ".", "cos", "(", "th", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "scale", "=", "np", ".", "sqrt", "(", "(", "left_eye", "[", "1", "]", "-", "right_eye", "[", "1", "]", ")", "**", "2", "+", "(", "left_eye", "[", "0", "]", "-", "right_eye", "[", "0", "]", ")", "**", "2", ")", "/", "eye_width", "\n", "transform", "*=", "np", ".", "matrix", "(", "[", "\n", "[", "scale", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "scale", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "transform", "*=", "np", ".", "matrix", "(", "[", "\n", "[", "1", ",", "0", ",", "-", "(", "width", "-", "eye_width", ")", "/", "2", "]", ",", "\n", "[", "0", ",", "1", ",", "-", "width", "/", "2.42", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "transform", "=", "np", ".", "linalg", ".", "inv", "(", "transform", ")", "\n", "jmg", "=", "cv2", ".", "warpAffine", "(", "img", ",", "transform", "[", ":", "2", "]", ",", "(", "width", ",", "width", ")", ")", "\n", "return", "jmg", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_face_2p": [[44, 49], ["preprocess.align_2p"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_2p"], ["", "def", "align_face_2p", "(", "img", ",", "landmarks", ")", ":", "\n", "    ", "left_eye", "=", "(", "landmarks", "[", "0", "]", ",", "landmarks", "[", "1", "]", ")", "\n", "right_eye", "=", "(", "landmarks", "[", "2", "]", ",", "landmarks", "[", "3", "]", ")", "\n", "aligned_img", "=", "align_2p", "(", "img", ",", "left_eye", ",", "right_eye", ")", "\n", "return", "aligned_img", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess._get_align_5p_mat23_size_256": [[59, 106], ["mean_face_lm5p.copy", "mf[].mean", "mf[].mean", "lm[].mean", "lm[].mean", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["def", "_get_align_5p_mat23_size_256", "(", "lm", ")", ":", "\n", "# legacy code", "\n", "    ", "width", "=", "256", "\n", "mf", "=", "mean_face_lm5p", ".", "copy", "(", ")", "\n", "\n", "# Assumptions:", "\n", "# 1. The output image size is 256x256 pixels", "\n", "# 2. The distance between two eye pupils is 70 pixels", "\n", "ratio", "=", "70.0", "/", "(", "\n", "256.0", "*", "0.34967", "\n", ")", "# magic number 0.34967 to compensate scaling from average landmarks", "\n", "\n", "left_eye_pupil_y", "=", "mf", "[", "0", "]", "[", "1", "]", "\n", "# In an aligned face image, the ratio between the vertical distances from eye to the top and bottom is 1:1.42", "\n", "ratioy", "=", "(", "left_eye_pupil_y", "*", "ratio", "+", "0.5", ")", "*", "(", "1", "+", "1.42", ")", "\n", "mf", "[", ":", ",", "0", "]", "=", "(", "mf", "[", ":", ",", "0", "]", "*", "ratio", "+", "0.5", ")", "*", "width", "\n", "mf", "[", ":", ",", "1", "]", "=", "(", "mf", "[", ":", ",", "1", "]", "*", "ratio", "+", "0.5", ")", "*", "width", "/", "ratioy", "\n", "mx", "=", "mf", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "my", "=", "mf", "[", ":", ",", "1", "]", ".", "mean", "(", ")", "\n", "dmx", "=", "lm", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "dmy", "=", "lm", "[", ":", ",", "1", "]", ".", "mean", "(", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "float", ")", "\n", "ux", "=", "mf", "[", ":", ",", "0", "]", "-", "mx", "\n", "uy", "=", "mf", "[", ":", ",", "1", "]", "-", "my", "\n", "dux", "=", "lm", "[", ":", ",", "0", "]", "-", "dmx", "\n", "duy", "=", "lm", "[", ":", ",", "1", "]", "-", "dmy", "\n", "c1", "=", "(", "ux", "*", "dux", "+", "uy", "*", "duy", ")", ".", "sum", "(", ")", "\n", "c2", "=", "(", "ux", "*", "duy", "-", "uy", "*", "dux", ")", ".", "sum", "(", ")", "\n", "c3", "=", "(", "dux", "**", "2", "+", "duy", "**", "2", ")", ".", "sum", "(", ")", "\n", "a", "=", "c1", "/", "c3", "\n", "b", "=", "c2", "/", "c3", "\n", "\n", "kx", "=", "1", "\n", "ky", "=", "1", "\n", "\n", "s", "=", "c3", "/", "(", "c1", "**", "2", "+", "c2", "**", "2", ")", "\n", "ka", "=", "c1", "*", "s", "\n", "kb", "=", "c2", "*", "s", "\n", "\n", "transform", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "\n", "transform", "[", "0", "]", "[", "0", "]", "=", "kx", "*", "a", "\n", "transform", "[", "0", "]", "[", "1", "]", "=", "kx", "*", "b", "\n", "transform", "[", "0", "]", "[", "2", "]", "=", "mx", "-", "kx", "*", "a", "*", "dmx", "-", "kx", "*", "b", "*", "dmy", "\n", "transform", "[", "1", "]", "[", "0", "]", "=", "-", "ky", "*", "b", "\n", "transform", "[", "1", "]", "[", "1", "]", "=", "ky", "*", "a", "\n", "transform", "[", "1", "]", "[", "2", "]", "=", "my", "-", "ky", "*", "a", "*", "dmy", "+", "ky", "*", "b", "*", "dmx", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.get_align_5p_mat23": [[107, 120], ["preprocess._get_align_5p_mat23_size_256", "lm5p.copy"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess._get_align_5p_mat23_size_256"], ["", "def", "get_align_5p_mat23", "(", "lm5p", ",", "size", ")", ":", "\n", "    ", "\"\"\"Align a face given 5 facial landmarks of\n    left_eye_pupil, right_eye_pupil, nose_tip, left_mouth_corner, right_mouth_corner\n\n    :param lm5p: nparray of (5, 2), 5 facial landmarks,\n\n    :param size: an integer, the output image size. The face is aligned to the mean face\n\n    :return: a affine transformation matrix of shape (2, 3)\n    \"\"\"", "\n", "mat23", "=", "_get_align_5p_mat23_size_256", "(", "lm5p", ".", "copy", "(", ")", ")", "\n", "mat23", "*=", "size", "/", "256", "\n", "return", "mat23", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_given_lm5p": [[122, 125], ["preprocess.get_align_5p_mat23", "cv2.warpAffine"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.get_align_5p_mat23"], ["", "def", "align_given_lm5p", "(", "img", ",", "lm5p", ",", "size", ")", ":", "\n", "    ", "mat23", "=", "get_align_5p_mat23", "(", "lm5p", ",", "size", ")", "\n", "return", "cv2", ".", "warpAffine", "(", "img", ",", "mat23", ",", "(", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_face_5p": [[127, 130], ["preprocess.align_given_lm5p", "numpy.array().reshape", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_given_lm5p"], ["", "def", "align_face_5p", "(", "img", ",", "landmarks", ")", ":", "\n", "    ", "aligned_img", "=", "align_given_lm5p", "(", "img", ",", "np", ".", "array", "(", "landmarks", ")", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", ",", "256", ")", "\n", "return", "aligned_img", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.work": [[131, 138], ["os.path.join", "os.path.join", "cv2.imread", "preprocess.align_face_5p", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.align_face_5p"], ["", "def", "work", "(", "data_dir", ",", "out_dir", ",", "landmarks", ",", "i", ")", ":", "\n", "    ", "src_imname", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'data'", ",", "'{:06d}.jpg'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "des_imname", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'{:06d}.jpg'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "src_imname", ")", "\n", "aligned_img", "=", "align_face_5p", "(", "img", ",", "landmarks", "[", "i", "]", ")", "\n", "cv2", ".", "imwrite", "(", "des_imname", ",", "aligned_img", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.preprocess.main": [[139, 154], ["glob.glob", "multiprocessing.Pool", "functools.partial", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.exists", "os.makedirs", "open", "os.path.join", "range", "os.path.join", "list", "len", "map", "f.read().strip().split", "x.split", "f.read().strip", "f.read"], "function", ["None"], ["", "def", "main", "(", "data_dir", ",", "out_dir", ",", "thread_num", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'list_landmarks_celeba.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "landmarks", "=", "[", "list", "(", "map", "(", "int", ",", "x", ".", "split", "(", ")", "[", "1", ":", "11", "]", ")", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "2", ":", "]", "]", "\n", "\n", "", "im_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'data/*.jpg'", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "thread_num", ")", "\n", "# pool.starmap(work, zip(range(len(im_list)), repeat(data_dir), repeat(out_dir), repeat(landmarks)))", "\n", "partial_work", "=", "partial", "(", "work", ",", "data_dir", ",", "out_dir", ",", "landmarks", ")", "\n", "pool", ".", "map", "(", "partial_work", ",", "range", "(", "len", "(", "im_list", ")", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.__init__": [[14, 27], ["object.__init__", "len", "tensorflow.placeholder", "tensorflow.placeholder", "model.Model.build_model"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.__init__", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.build_model"], ["    ", "def", "__init__", "(", "self", ",", "feature_list", ",", "is_train", "=", "True", ",", "nhwc", "=", "config", ".", "nhwc", ",", "max_iter", "=", "config", ".", "max_iter", ",", "weight_decay", "=", "config", ".", "weight_decay", ",", "second_ratio", "=", "config", ".", "second_ratio", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_list", "=", "feature_list", "\n", "self", ".", "n_feat", "=", "len", "(", "self", ".", "feature_list", ")", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "batch_size", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "channel", "=", "nhwc", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "g_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "d_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "second_ratio", "=", "second_ratio", "\n", "self", ".", "reuse", "=", "{", "}", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu": [[28, 30], ["tensorflow.maximum"], "methods", ["None"], ["", "def", "leakyRelu", "(", "self", ",", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "        ", "return", "tf", ".", "maximum", "(", "alpha", "*", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv": [[31, 38], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.random_normal_initializer"], "methods", ["None"], ["", "def", "make_conv", "(", "self", ",", "name", ",", "X", ",", "shape", ",", "strides", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "X", ",", "W", ",", "strides", "=", "strides", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv_bn": [[40, 49], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.layers.batch_normalization", "tensorflow.nn.conv2d", "tensorflow.random_normal_initializer"], "methods", ["None"], ["", "", "def", "make_conv_bn", "(", "self", ",", "name", ",", "X", ",", "shape", ",", "strides", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", ")", "\n", "return", "tf", ".", "layers", ".", "batch_normalization", "(", "\n", "tf", ".", "nn", ".", "conv2d", "(", "X", ",", "W", ",", "strides", "=", "strides", ",", "padding", "=", "'SAME'", ")", ",", "\n", "training", "=", "self", ".", "is_train", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_fc": [[51, 63], ["X.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.add", "tensorflow.matmul", "X.get_shape", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer"], "methods", ["None"], ["", "", "def", "make_fc", "(", "self", ",", "name", ",", "X", ",", "out_dim", ")", ":", "\n", "        ", "in_dim", "=", "X", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "[", "in_dim", ",", "out_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "\n", "shape", "=", "[", "out_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", ")", "\n", "return", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "X", ",", "W", ")", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_fc_bn": [[64, 77], ["tensorflow.add.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.add", "tensorflow.layers.batch_normalization", "tensorflow.matmul", "tensorflow.add.get_shape", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer"], "methods", ["None"], ["", "", "def", "make_fc_bn", "(", "self", ",", "name", ",", "X", ",", "out_dim", ")", ":", "\n", "        ", "in_dim", "=", "X", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "[", "in_dim", ",", "out_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "\n", "shape", "=", "[", "out_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", ")", "\n", "X", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "X", ",", "W", ")", ",", "b", ")", "\n", "return", "tf", ".", "layers", ".", "batch_normalization", "(", "X", ",", "training", "=", "self", ".", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_deconv": [[78, 85], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d_transpose", "tensorflow.random_normal_initializer"], "methods", ["None"], ["", "", "def", "make_deconv", "(", "self", ",", "name", ",", "X", ",", "filter_shape", ",", "out_shape", ",", "strides", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "filter_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d_transpose", "(", "X", ",", "W", ",", "output_shape", "=", "out_shape", ",", "strides", "=", "strides", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_deconv_bn": [[86, 96], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.layers.batch_normalization", "tensorflow.nn.conv2d_transpose", "tensorflow.random_normal_initializer"], "methods", ["None"], ["", "", "def", "make_deconv_bn", "(", "self", ",", "name", ",", "X", ",", "filter_shape", ",", "out_shape", ",", "strides", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "\n", "shape", "=", "filter_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", ",", "\n", ")", "\n", "return", "tf", ".", "layers", ".", "batch_normalization", "(", "\n", "tf", ".", "nn", ".", "conv2d_transpose", "(", "X", ",", "W", ",", "\n", "output_shape", "=", "out_shape", ",", "strides", "=", "strides", ",", "padding", "=", "'SAME'", "\n", ")", ",", "training", "=", "self", ".", "is_train", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.discriminator": [[98, 132], ["tensorflow.concat", "tensorflow.concat", "model.Model.reuse.keys", "tensorflow.tile", "tensorflow.variable_scope", "model.Model.make_conv", "model.Model.leakyRelu", "model.Model.make_conv_bn", "model.Model.leakyRelu", "model.Model.make_conv_bn", "model.Model.leakyRelu", "model.Model.make_conv_bn", "model.Model.leakyRelu", "six.moves.reduce", "tensorflow.reshape", "model.Model.make_fc", "tensorflow.expand_dims", "range", "tensorflow.expand_dims", "model.Model.get_shape().as_list", "tensorflow.expand_dims", "model.Model.get_shape"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_fc"], ["", "", "def", "discriminator", "(", "self", ",", "name", ",", "image", ",", "label", ",", "feat_id", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "reuse", ".", "keys", "(", ")", ":", "\n", "            ", "reuse", "=", "self", ".", "reuse", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "reuse", "[", "name", "]", "=", "True", "\n", "reuse", "=", "False", "\n", "\n", "", "X1", "=", "image", "/", "127.5", "-", "1", "\n", "label_concat_list", "=", "[", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "label", "[", ":", ",", "j", "]", ",", "-", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", ",", "[", "1", ",", "self", ".", "height", ",", "self", ".", "width", ",", "1", "]", ")", "for", "j", "in", "range", "(", "self", ".", "n_feat", ")", "]", "\n", "X2", "=", "tf", ".", "concat", "(", "label_concat_list", ",", "-", "1", ")", "\n", "X", "=", "tf", ".", "concat", "(", "[", "X1", ",", "X2", "]", ",", "-", "1", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "            ", "X", "=", "self", ".", "make_conv", "(", "'conv1'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "3", "+", "self", ".", "n_feat", ",", "128", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "# print(name, X.get_shape())", "\n", "\n", "X", "=", "self", ".", "make_conv_bn", "(", "'conv2'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "128", ",", "256", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "# print(name, X.get_shape())", "\n", "\n", "X", "=", "self", ".", "make_conv_bn", "(", "'conv3'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "256", ",", "512", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "# print(name, X.get_shape())", "\n", "\n", "X", "=", "self", ".", "make_conv_bn", "(", "'conv4'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "512", ",", "512", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "# print(name, X.get_shape())", "\n", "\n", "flat_dim", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "X", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "X", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", ",", "flat_dim", "]", ")", "\n", "X", "=", "self", ".", "make_fc", "(", "'fct'", ",", "X", ",", "self", ".", "n_feat", ")", "\n", "# X = tf.nn.sigmoid(X)", "\n", "return", "X", "[", ":", ",", "feat_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter": [[133, 156], ["model.Model.reuse.keys", "tensorflow.variable_scope", "model.Model.make_conv", "model.Model.leakyRelu", "model.Model.make_conv_bn", "model.Model.leakyRelu", "model.Model.make_conv_bn", "model.Model.leakyRelu", "int", "model.Model.get_shape().as_list", "range", "model.Model.get_shape"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_conv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.leakyRelu"], ["", "", "def", "splitter", "(", "self", ",", "name", ",", "image", ")", ":", "\n", "        ", "X", "=", "image", "/", "127.5", "-", "1", "\n", "if", "name", "in", "self", ".", "reuse", ".", "keys", "(", ")", ":", "\n", "            ", "reuse", "=", "self", ".", "reuse", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "reuse", "[", "name", "]", "=", "True", "\n", "reuse", "=", "False", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "            ", "X", "=", "self", ".", "make_conv", "(", "'conv1'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "3", ",", "128", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "\n", "X", "=", "self", ".", "make_conv_bn", "(", "'conv2'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "128", ",", "256", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "\n", "X", "=", "self", ".", "make_conv_bn", "(", "'conv3'", ",", "X", ",", "shape", "=", "[", "4", ",", "4", ",", "256", ",", "512", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "self", ".", "leakyRelu", "(", "X", ",", "0.2", ")", "\n", "\n", "num_ch", "=", "int", "(", "X", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "*", "self", ".", "second_ratio", ")", "\n", "self", ".", "num_ch", "=", "num_ch", "\n", "# encode = [X[:,:,:,:-self.n_feat*num_ch]] + [X[:,:,:,-i*num_ch:(-i-1)*num_ch] for i in range(self.n_feat,0,-1)]", "\n", "encode", "=", "[", "X", "[", ":", ",", ":", ",", ":", ",", "i", "*", "num_ch", ":", "(", "i", "+", "1", ")", "*", "num_ch", "]", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", "+", "[", "X", "[", ":", ",", ":", ",", ":", ",", "self", ".", "n_feat", "*", "num_ch", ":", "]", "]", "\n", "return", "encode", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner": [[157, 185], ["tensorflow.concat", "model.Model.reuse.keys", "tensorflow.variable_scope", "model.Model.make_deconv_bn", "tensorflow.nn.relu", "model.Model.make_deconv_bn", "tensorflow.nn.relu", "model.Model.make_deconv", "tensorflow.get_variable", "tensorflow.zeros_initializer", "tensorflow.tanh", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_deconv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_deconv_bn", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.make_deconv"], ["", "", "def", "joiner", "(", "self", ",", "name", ",", "encode", ")", ":", "\n", "        ", "X", "=", "tf", ".", "concat", "(", "encode", ",", "axis", "=", "-", "1", ")", "\n", "# X0 = X", "\n", "if", "name", "in", "self", ".", "reuse", ".", "keys", "(", ")", ":", "\n", "            ", "reuse", "=", "self", ".", "reuse", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "reuse", "[", "name", "]", "=", "True", "\n", "reuse", "=", "False", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "            ", "X", "=", "self", ".", "make_deconv_bn", "(", "'deconv1'", ",", "X", ",", "filter_shape", "=", "[", "4", ",", "4", ",", "512", ",", "512", "]", ",", "\n", "out_shape", "=", "[", "self", ".", "batch_size", ",", "int", "(", "self", ".", "height", "/", "4", ")", ",", "int", "(", "self", ".", "width", "/", "4", ")", ",", "512", "]", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "tf", ".", "nn", ".", "relu", "(", "X", ")", "\n", "\n", "X", "=", "self", ".", "make_deconv_bn", "(", "'deconv2'", ",", "X", ",", "filter_shape", "=", "[", "4", ",", "4", ",", "256", ",", "512", "]", ",", "\n", "out_shape", "=", "[", "self", ".", "batch_size", ",", "int", "(", "self", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "width", "/", "2", ")", ",", "256", "]", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "X", "=", "tf", ".", "nn", ".", "relu", "(", "X", ")", "\n", "\n", "X", "=", "self", ".", "make_deconv", "(", "'deconv3'", ",", "X", ",", "filter_shape", "=", "[", "4", ",", "4", ",", "self", ".", "channel", ",", "256", "]", ",", "\n", "out_shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "channel", "]", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "shape", "=", "[", "1", ",", "1", ",", "1", ",", "self", ".", "channel", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "X", "=", "X", "+", "b", "\n", "\n", "X", "=", "(", "tf", ".", "tanh", "(", "X", ")", "+", "1", ")", "*", "127.5", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.zeros_encode": [[186, 194], ["tensorflow.zeros_like", "tensorflow.identity"], "methods", ["None"], ["", "", "def", "zeros_encode", "(", "self", ",", "enc", ",", "enc_id", ")", ":", "\n", "        ", "'''\n        enc: a list of latent encoding, [enc_1, ..., enc_n, z]\n        enc_id: the id of the latent to be null\n        '''", "\n", "enc_nil", "=", "[", "tf", ".", "identity", "(", "x", ")", "for", "x", "in", "enc", "]", "\n", "enc_nil", "[", "enc_id", "]", "=", "tf", ".", "zeros_like", "(", "enc_nil", "[", "enc_id", "]", ",", "tf", ".", "float32", ")", "\n", "return", "enc_nil", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.swap_attribute": [[195, 207], ["tensorflow.identity", "tensorflow.identity", "tensorflow.zeros_like"], "methods", ["None"], ["", "def", "swap_attribute", "(", "self", ",", "enc_Ax", ",", "enc_Be", ",", "enc_ids", ")", ":", "\n", "        ", "'''\n        enc_Ax: a list of latent encoding of A, [enc_A1, ..., enc_An, z_A]\n        enc_Be: a list of latent encoding of B, [enc_B1, ..., enc_Bn, z_B]\n        enc_ids: a list of id indicating the swapping id numbers\n        '''", "\n", "enc_Ae", "=", "[", "tf", ".", "identity", "(", "enc", ")", "for", "enc", "in", "enc_Ax", "]", "\n", "enc_Bx", "=", "[", "tf", ".", "identity", "(", "enc", ")", "for", "enc", "in", "enc_Be", "]", "\n", "for", "enc_id", "in", "enc_ids", ":", "\n", "            ", "enc_Ae", "[", "enc_id", "]", "=", "tf", ".", "zeros_like", "(", "enc_Be", "[", "enc_id", "]", ")", "\n", "enc_Bx", "[", "enc_id", "]", "=", "enc_Ax", "[", "enc_id", "]", "\n", "", "return", "enc_Ae", ",", "enc_Bx", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.build_model": [[208, 271], ["zip", "sum", "sum", "sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "sum", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.Model.splitter", "model.Model.splitter", "model.Model.joiner", "model.Model.joiner", "model.Model.joiner", "model.Model.joiner", "model.Model.discriminator", "model.Model.discriminator", "model.Model.discriminator", "model.Model.discriminator", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "model.Model.G_loss.values", "model.Model.D_loss.values", "tensorflow.control_dependencies", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.name_scope", "range", "range", "range", "range", "model.Model.zeros_encode", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "sum", "sum", "w.name.startswith", "w.name.endswith", "sum", "sum", "sum", "sum", "tensorflow.get_collection", "p.assign", "model.Model.swap_attribute", "tensorflow.reduce_mean", "range", "tensorflow.reduce_mean", "range", "tensorflow.reduce_mean", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.clip_by_value", "range", "tensorflow.abs", "tensorflow.abs", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.joiner", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.discriminator", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.discriminator", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.discriminator", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.discriminator", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.zeros_encode", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.swap_attribute"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "Axs", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "channel", "]", ",", "name", "=", "'data_Ax{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", "\n", "self", ".", "Bes", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "height", ",", "self", ".", "width", ",", "self", ".", "channel", "]", ",", "name", "=", "'data_Be{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", "\n", "self", ".", "label_Axs", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "n_feat", "]", ",", "name", "=", "'label_A{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", "\n", "self", ".", "label_Bes", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "n_feat", "]", ",", "name", "=", "'label_B{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", "\n", "\n", "self", ".", "enc_Axs", "=", "[", "self", ".", "splitter", "(", "'encoder'", ",", "A", ")", "for", "A", "in", "self", ".", "Axs", "]", "\n", "self", ".", "enc_Bes", "=", "[", "self", ".", "splitter", "(", "'encoder'", ",", "B", ")", "for", "B", "in", "self", ".", "Bes", "]", "\n", "\n", "self", ".", "Axs2", "=", "[", "self", ".", "joiner", "(", "'decoder'", ",", "enc_Ax", ")", "for", "enc_Ax", "in", "self", ".", "enc_Axs", "]", "\n", "self", ".", "Bes2", "=", "[", "self", ".", "joiner", "(", "'decoder'", ",", "self", ".", "zeros_encode", "(", "enc_Be", ",", "i", ")", ")", "for", "i", ",", "enc_Be", "in", "enumerate", "(", "self", ".", "enc_Bes", ")", "]", "\n", "\n", "# crossover", "\n", "self", ".", "enc_Aes", ",", "self", ".", "enc_Bxs", "=", "zip", "(", "*", "[", "self", ".", "swap_attribute", "(", "self", ".", "enc_Axs", "[", "enc_id", "]", ",", "self", ".", "enc_Bes", "[", "enc_id", "]", ",", "[", "enc_id", "]", ")", "for", "enc_id", "in", "range", "(", "self", ".", "n_feat", ")", "]", ")", "\n", "\n", "self", ".", "Aes", "=", "[", "self", ".", "joiner", "(", "'decoder'", ",", "enc_A", ")", "for", "enc_A", "in", "self", ".", "enc_Aes", "]", "\n", "self", ".", "Bxs", "=", "[", "self", ".", "joiner", "(", "'decoder'", ",", "enc_B", ")", "for", "enc_B", "in", "self", ".", "enc_Bxs", "]", "\n", "\n", "# discriminate", "\n", "self", ".", "real_Axs", "=", "[", "self", ".", "discriminator", "(", "'D'", ",", "Ax", ",", "self", ".", "label_Axs", "[", "i", "]", ",", "i", ")", "for", "i", ",", "Ax", "in", "enumerate", "(", "self", ".", "Axs", ")", "]", "\n", "self", ".", "fake_Bxs", "=", "[", "self", ".", "discriminator", "(", "'D'", ",", "Bx", ",", "self", ".", "label_Axs", "[", "i", "]", ",", "i", ")", "for", "i", ",", "Bx", "in", "enumerate", "(", "self", ".", "Bxs", ")", "]", "\n", "\n", "self", ".", "real_Bes", "=", "[", "self", ".", "discriminator", "(", "'D'", ",", "Be", ",", "self", ".", "label_Bes", "[", "i", "]", ",", "i", ")", "for", "i", ",", "Be", "in", "enumerate", "(", "self", ".", "Bes", ")", "]", "\n", "self", ".", "fake_Aes", "=", "[", "self", ".", "discriminator", "(", "'D'", ",", "Ae", ",", "self", ".", "label_Bes", "[", "i", "]", ",", "i", ")", "for", "i", ",", "Ae", "in", "enumerate", "(", "self", ".", "Aes", ")", "]", "\n", "\n", "# variable list", "\n", "self", ".", "g_var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'encoder'", ")", "+", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'decoder'", ")", "\n", "\n", "self", ".", "d_var_list", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", "+", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'D'", ")", "\n", "\n", "# G loss", "\n", "self", ".", "G_loss", "=", "{", "}", "\n", "self", ".", "G_loss", "[", "'loss_G/cycle_A'", "]", "=", "sum", "(", "[", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "Axs", "[", "i", "]", "-", "self", ".", "Axs2", "[", "i", "]", ")", ")", "/", "255.0", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", ")", "\n", "self", ".", "G_loss", "[", "'loss_G/cycle_B'", "]", "=", "sum", "(", "[", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "Bes", "[", "i", "]", "-", "self", ".", "Bes2", "[", "i", "]", ")", ")", "/", "255.0", "for", "i", "in", "range", "(", "self", ".", "n_feat", ")", "]", ")", "\n", "\n", "self", ".", "G_loss", "[", "'loss_G/Bx'", "]", "=", "-", "tf", ".", "reduce_mean", "(", "sum", "(", "self", ".", "fake_Bxs", ")", ")", "\n", "self", ".", "G_loss", "[", "'loss_G/Ae'", "]", "=", "-", "tf", ".", "reduce_mean", "(", "sum", "(", "self", ".", "fake_Aes", ")", ")", "\n", "self", ".", "loss_G_nodecay", "=", "sum", "(", "self", ".", "G_loss", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "loss_G_decay", "=", "0.0", "\n", "for", "w", "in", "self", ".", "g_var_list", ":", "\n", "            ", "if", "w", ".", "name", ".", "startswith", "(", "'G'", ")", "and", "w", ".", "name", ".", "endswith", "(", "'W:0'", ")", ":", "\n", "                ", "self", ".", "loss_G_decay", "+=", "0.5", "*", "self", ".", "weight_decay", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "w", ")", ")", "\n", "\n", "", "", "self", ".", "loss_G", "=", "self", ".", "loss_G_decay", "+", "self", ".", "loss_G_nodecay", "\n", "\n", "# D loss", "\n", "self", ".", "D_loss", "=", "{", "}", "\n", "self", ".", "D_loss", "[", "'loss_D/x'", "]", "=", "tf", ".", "reduce_mean", "(", "sum", "(", "self", ".", "fake_Bxs", ")", "-", "sum", "(", "self", ".", "real_Axs", ")", ")", "\n", "self", ".", "D_loss", "[", "'loss_D/e'", "]", "=", "tf", ".", "reduce_mean", "(", "sum", "(", "self", ".", "fake_Aes", ")", "-", "sum", "(", "self", ".", "real_Bes", ")", ")", "\n", "self", ".", "loss_D", "=", "sum", "(", "self", ".", "D_loss", ".", "values", "(", ")", ")", "\n", "\n", "\n", "# G, D optimizer", "\n", "with", "tf", ".", "control_dependencies", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", ")", ":", "\n", "            ", "self", ".", "g_opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "g_lr", ",", "decay", "=", "0.8", ")", ".", "minimize", "(", "self", ".", "loss_G", ",", "var_list", "=", "self", ".", "g_var_list", ")", "\n", "self", ".", "d_opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "self", ".", "d_lr", ",", "decay", "=", "0.8", ")", ".", "minimize", "(", "self", ".", "loss_D", ",", "var_list", "=", "self", ".", "d_var_list", ")", "\n", "\n", "# clip weights in D", "\n", "", "with", "tf", ".", "name_scope", "(", "'clip_d'", ")", ":", "\n", "            ", "self", ".", "clip_d", "=", "[", "p", ".", "assign", "(", "tf", ".", "clip_by_value", "(", "p", ",", "-", "0.01", ",", "0.01", ")", ")", "for", "p", "in", "self", ".", "d_var_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.vis.get_representation": [[14, 44], ["tensorflow.train.Saver", "tensorflow.Session", "sess.run", "tensorflow.train.get_checkpoint_state", "tensorflow.placeholder", "model.splitter", "sess.run", "sess.run", "sess.run", "range", "range", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "scipy.misc.imsave", "scipy.misc.imsave", "numpy.save", "numpy.save", "scipy.misc.imsave", "numpy.save", "tensorflow.gradients", "range", "tensorflow.gradients", "range", "tensorflow.gradients", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.model.Model.splitter", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run", "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.train.run"], ["def", "get_representation", "(", "img", ",", "model", ",", "model_dir", ",", "out_path", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "# print(ckpt)", "\n", "# print(ckpt.model_checkpoint_path)", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "\n", "", "Ax", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "model", ".", "batch_size", ",", "model", ".", "height", ",", "model", ".", "width", ",", "model", ".", "channel", "]", ",", "name", "=", "'Ax'", ")", "\n", "enc_Ax", "=", "model", ".", "splitter", "(", "'encoder'", ",", "Ax", ")", "\n", "grad_att_1", "=", "[", "tf", ".", "gradients", "(", "enc_Ax", "[", "0", "]", "[", ":", ",", ":", ",", ":", ",", "i", "]", ",", "Ax", ")", "[", "0", "]", "for", "i", "in", "range", "(", "128", ")", "]", "\n", "grad_att_2", "=", "[", "tf", ".", "gradients", "(", "enc_Ax", "[", "1", "]", "[", ":", ",", ":", ",", ":", ",", "i", "]", ",", "Ax", ")", "[", "0", "]", "for", "i", "in", "range", "(", "128", ")", "]", "\n", "grad_att_3", "=", "[", "tf", ".", "gradients", "(", "enc_Ax", "[", "2", "]", "[", ":", ",", ":", ",", ":", ",", "i", "]", ",", "Ax", ")", "[", "0", "]", "for", "i", "in", "range", "(", "256", ")", "]", "\n", "# from IPython import embed;embed();exit()", "\n", "grad_1", "=", "sess", ".", "run", "(", "grad_att_1", ",", "feed_dict", "=", "{", "Ax", ":", "img", "}", ")", "\n", "grad_2", "=", "sess", ".", "run", "(", "grad_att_2", ",", "feed_dict", "=", "{", "Ax", ":", "img", "}", ")", "\n", "grad_3", "=", "sess", ".", "run", "(", "grad_att_3", ",", "feed_dict", "=", "{", "Ax", ":", "img", "}", ")", "\n", "for", "i", "in", "range", "(", "128", ")", ":", "\n", "            ", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'0_{:03d}.jpg'", ".", "format", "(", "i", ")", ")", ",", "grad_1", "[", "i", "]", "[", "0", "]", ")", "\n", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'1_{:03d}.jpg'", ".", "format", "(", "i", ")", ")", ",", "grad_2", "[", "i", "]", "[", "0", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'0_{:03d}.npy'", ".", "format", "(", "i", ")", ")", ",", "grad_2", "[", "i", "]", "[", "0", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'1_{:03d}.npy'", ".", "format", "(", "i", ")", ")", ",", "grad_2", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "            ", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'2_{:03d}.jpg'", ".", "format", "(", "i", ")", ")", ",", "grad_3", "[", "i", "]", "[", "0", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'2_{:03d}.npy'", ".", "format", "(", "i", ")", ")", ",", "grad_3", "[", "i", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.vis.main": [[45, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "model.Model", "numpy.expand_dims", "vis.get_representation", "os.path.exists", "os.makedirs", "scipy.misc.imresize", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.Prinsphield_DNA-GAN.None.vis.get_representation"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'test'", ",", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "type", "=", "str", ",", "help", "=", "'image path'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--attributes'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "help", "=", "'attribute list'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "type", "=", "str", ",", "default", "=", "'train_log/model/'", ",", "help", "=", "'path to the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--latent_path'", ",", "type", "=", "str", ",", "default", "=", "'latent'", ",", "help", "=", "'path to the model'", ")", "\n", "parser", ".", "add_argument", "(", "'-g'", ",", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'gpu ids'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "latent_path", ")", ":", "os", ".", "makedirs", "(", "args", ".", "latent_path", ")", "\n", "\n", "DNA_GAN", "=", "Model", "(", "feature_list", "=", "args", ".", "attributes", ",", "is_train", "=", "False", ",", "nhwc", "=", "[", "1", ",", "64", ",", "64", ",", "3", "]", ")", "\n", "img", "=", "np", ".", "expand_dims", "(", "misc", ".", "imresize", "(", "misc", ".", "imread", "(", "args", ".", "input", ")", ",", "(", "DNA_GAN", ".", "height", ",", "DNA_GAN", ".", "width", ")", ")", ",", "axis", "=", "0", ")", "\n", "get_representation", "(", "img", ",", "DNA_GAN", ",", "args", ".", "model_dir", ",", "args", ".", "latent_path", ")", "\n", "\n"]]}