{"home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.Partition.__init__": [[72, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "index", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "index", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.Partition.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.Partition.__getitem__": [[79, 82], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_idx", "=", "self", ".", "index", "[", "index", "]", "\n", "return", "self", ".", "data", "[", "data_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.DataPartitioner.__init__": [[103, 133], ["len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "numpy.argsort", "numpy.argsort.tolist", "trainer_choco.skew_sort", "numpy.array", "targets.tolist", "int", "trainer_choco.DataPartitioner.partitions.append", "int", "trainer_choco.DataPartitioner.partitions.append", "int", "int", "trainer_choco.DataPartitioner.partitions.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.skew_sort"], ["def", "__init__", "(", "self", ",", "data", ",", "sizes", ",", "skew", ",", "classes", ",", "class_size", ",", "seed", ",", "device", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "partitions", "=", "[", "]", "\n", "data_len", "=", "len", "(", "data", ")", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "data", ",", "batch_size", "=", "512", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "labels", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "              ", "labels", "=", "labels", "+", "targets", ".", "tolist", "(", ")", "\n", "#labels  = [data[i][1] for i in range(0, data_len)]", "\n", "", "sort_index", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "labels", ")", ")", "\n", "indices", "=", "sort_index", ".", "tolist", "(", ")", "\n", "indices_rand", ",", "indices", "=", "skew_sort", "(", "indices", ",", "skew", "=", "skew", ",", "classes", "=", "classes", ",", "class_size", "=", "class_size", ",", "seed", "=", "seed", ")", "\n", "\n", "for", "frac", "in", "sizes", ":", "\n", "            ", "if", "skew", "==", "1", ":", "\n", "                ", "part_len", "=", "int", "(", "frac", "*", "data_len", ")", "\n", "self", ".", "partitions", ".", "append", "(", "indices", "[", "0", ":", "part_len", "]", ")", "\n", "indices", "=", "indices", "[", "part_len", ":", "]", "\n", "", "elif", "skew", "==", "0", ":", "\n", "                ", "part_len", "=", "int", "(", "frac", "*", "data_len", ")", "\n", "self", ".", "partitions", ".", "append", "(", "indices_rand", "[", "0", ":", "part_len", "]", ")", "\n", "indices_rand", "=", "indices_rand", "[", "part_len", ":", "]", "\n", "", "else", ":", "\n", "                ", "part_len", "=", "int", "(", "frac", "*", "data_len", "*", "skew", ")", ";", "\n", "part_len_rand", "=", "int", "(", "frac", "*", "data_len", "*", "(", "1", "-", "skew", ")", ")", "\n", "part_ind", "=", "indices", "[", "0", ":", "part_len", "]", "+", "indices_rand", "[", "0", ":", "part_len_rand", "]", "\n", "self", ".", "partitions", ".", "append", "(", "part_ind", ")", "\n", "indices", "=", "indices", "[", "part_len", ":", "]", "\n", "indices_rand", "=", "indices_rand", "[", "part_len_rand", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.DataPartitioner.use": [[134, 136], ["trainer_choco.Partition"], "methods", ["None"], ["", "", "", "def", "use", "(", "self", ",", "partition", ")", ":", "\n", "        ", "return", "Partition", "(", "self", ".", "data", ",", "self", ".", "partitions", "[", "partition", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.AverageMeter.__init__": [[464, 466], ["trainer_choco.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.AverageMeter.reset": [[467, 472], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.AverageMeter.update": [[473, 478], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.skew_sort": [[83, 99], ["random.Random", "random.Random.seed", "range", "range", "random.Random.shuffle", "int"], "function", ["None"], ["", "", "def", "skew_sort", "(", "indices", ",", "skew", ",", "classes", ",", "class_size", ",", "seed", ")", ":", "\n", "# skew belongs to [0,1]", "\n", "    ", "rng", "=", "Random", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "class_indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "classes", ")", ":", "\n", "        ", "class_indices", "[", "i", "]", "=", "indices", "[", "0", ":", "class_size", "[", "i", "]", "]", "\n", "indices", "=", "indices", "[", "class_size", "[", "i", "]", ":", "]", "\n", "", "random_indices", "=", "[", "]", "\n", "sorted_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "classes", ")", ":", "\n", "        ", "sorted_size", "=", "int", "(", "skew", "*", "class_size", "[", "i", "]", ")", "\n", "sorted_indices", "=", "sorted_indices", "+", "class_indices", "[", "i", "]", "[", "0", ":", "sorted_size", "]", "\n", "random_indices", "=", "random_indices", "+", "class_indices", "[", "i", "]", "[", "sorted_size", ":", "]", "\n", "", "rng", ".", "shuffle", "(", "random_indices", ")", "\n", "return", "random_indices", ",", "sorted_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.partition_trainDataset": [[138, 190], ["torch.get_world_size", "int", "trainer_choco.DataPartitioner", "partition.use.use", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Normalize", "torchvision.CIFAR10", "torch.get_rank", "torchvision.Normalize", "torchvision.CIFAR100", "float", "range", "range", "torchvision.Compose", "torchvision.Normalize", "torchvision.Compose", "torchvision.ImageFolder", "range", "torchvision.Compose", "os.path.join", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.DataPartitioner.use"], ["", "", "def", "partition_trainDataset", "(", "device", ")", ":", "\n", "    ", "\"\"\"Partitioning dataset\"\"\"", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "classes", "=", "10", "\n", "class_size", "=", "{", "x", ":", "5000", "for", "x", "in", "range", "(", "10", ")", "}", "\n", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", ",", "\n", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", ")", "\n", "classes", "=", "100", "\n", "class_size", "=", "{", "x", ":", "500", "for", "x", "in", "range", "(", "10", ")", "}", "\n", "\n", "dataset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenette'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "classes", "=", "10", "\n", "class_size", "=", "{", "0", ":", "963", ",", "1", ":", "955", ",", "2", ":", "993", ",", "3", ":", "858", ",", "4", ":", "941", ",", "5", ":", "956", ",", "6", ":", "961", ",", "7", ":", "931", ",", "8", ":", "951", ",", "9", ":", "960", "}", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", ",", "]", ")", "\n", "\n", "data_dir", "=", "'./data/imagenette'", "\n", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", ",", "data_transforms", ")", "\n", "\n", "\n", "", "size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "#print(size)", "\n", "bsz", "=", "int", "(", "(", "args", ".", "batch_size", ")", "/", "float", "(", "size", ")", ")", "\n", "\n", "partition_sizes", "=", "[", "1.0", "/", "size", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "partition", "=", "DataPartitioner", "(", "dataset", ",", "partition_sizes", ",", "skew", "=", "args", ".", "skew", ",", "classes", "=", "classes", ",", "class_size", "=", "class_size", ",", "seed", "=", "args", ".", "seed", ",", "device", "=", "device", ")", "\n", "\n", "partition", "=", "partition", ".", "use", "(", "dist", ".", "get_rank", "(", ")", ")", "\n", "train_set", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "partition", ",", "batch_size", "=", "bsz", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "train_set", ",", "bsz", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.test_Dataset": [[192, 223], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Normalize", "torchvision.CIFAR10", "torchvision.Normalize", "torchvision.CIFAR100", "torchvision.Compose", "torchvision.Normalize", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.Compose", "os.path.join", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["None"], ["", "def", "test_Dataset", "(", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", ",", "\n", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenette'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", ",", "]", ")", "\n", "\n", "data_dir", "=", "'./data/imagenette'", "\n", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'val'", ")", ",", "data_transforms", ")", "\n", "\n", "", "val_bsz", "=", "64", "\n", "val_set", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "val_bsz", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "val_set", ",", "val_bsz", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.run": [[225, 337], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "gossip_choco.RingGraph", "gossip_choco.UniformMixing", "gossip_choco.GossipDataParallel", "MobileNetV2.to", "trainer_choco.partition_trainDataset", "trainer_choco.test_Dataset", "torch.CrossEntropyLoss().to", "range", "trainer_choco.gossip_avg", "print", "trainer_choco.validate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.exists", "os.makedirs", "print", "print", "torch.SGD", "torch.SGD", "print", "torch.lr_scheduler.MultiStepLR", "print", "MobileNetV2.block", "trainer_choco.train", "optim.lr_scheduler.MultiStepLR.step", "trainer_choco.validate", "max", "trainer_choco.save_checkpoint", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "resnet_quantized", "resnet", "print", "print", "torch.CrossEntropyLoss", "MobileNetV2.parameters", "MobileNetV2.parameters", "torch.lr_scheduler.MultiStepLR", "vgg11_quantized", "vgg11", "torchsummary.summary", "torchsummary.summary", "MobileNetV2.state_dict", "os.path.join", "mobilenetv2_quantized", "MobileNetV2", "int", "int"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.partition_trainDataset", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.test_Dataset", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.gossip_avg", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.validate", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.step", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.validate", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.save_checkpoint", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.resnet_quantized", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.resnet", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.vgg11_quantized", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.vgg11", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict"], ["", "def", "run", "(", "rank", ",", "size", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "rank", "%", "4", ")", ")", "\n", "\n", "best_prec1", "=", "0", "\n", "##############", "\n", "data_transferred", "=", "0", "\n", "# Check the save_dir exists or not", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ")", ")", "\n", "\n", "", "if", "args", ".", "quantized_train", "==", "1", ":", "\n", "        ", "if", "args", ".", "arch", "==", "'resnet'", ":", "\n", "            ", "model", "=", "resnet_quantized", "(", "num_classes", "=", "args", ".", "classes", ",", "depth", "=", "args", ".", "depth", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "arch", "==", "'vgg11'", ":", "\n", "            ", "model", "=", "vgg11_quantized", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "arch", "==", "'mobilenet'", ":", "\n", "            ", "model", "=", "mobilenetv2_quantized", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "arch", "==", "'resnet'", ":", "\n", "            ", "model", "=", "resnet", "(", "num_classes", "=", "args", ".", "classes", ",", "depth", "=", "args", ".", "depth", ",", "dataset", "=", "args", ".", "dataset", ",", "norm_type", "=", "args", ".", "normtype", ",", "groups", "=", "2", ")", "\n", "", "elif", "args", ".", "arch", "==", "'vgg11'", ":", "\n", "            ", "model", "=", "vgg11", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ",", "norm_type", "=", "args", ".", "normtype", ",", "groups", "=", "2", ")", "\n", "", "elif", "args", ".", "arch", "==", "'mobilenet'", ":", "\n", "            ", "model", "=", "MobileNetV2", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ",", "norm_type", "=", "args", ".", "normtype", ",", "groups", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "args", ")", "\n", "print", "(", "'Printing model summary...'", ")", "\n", "if", "'cifar'", "in", "args", ".", "dataset", ":", "print", "(", "summary", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "size", ")", ",", "device", "=", "'cpu'", ")", ")", "\n", "else", ":", "print", "(", "summary", "(", "model", ",", "(", "3", ",", "224", ",", "224", ")", ",", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "size", ")", ",", "device", "=", "'cpu'", ")", ")", "\n", "\n", "\n", "", "graph", "=", "RingGraph", "(", "rank", ",", "size", ")", "#undirected/directed ring structure", "\n", "#graph = GridGraph(rank, size) # torus graph structure", "\n", "\n", "mixing", "=", "UniformMixing", "(", "graph", ",", "device", ")", "\n", "model", "=", "GossipDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "rank", "%", "4", "]", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "size", ",", "\n", "graph", "=", "graph", ",", "\n", "mixing", "=", "mixing", ",", "\n", "comm_device", "=", "device", ",", "\n", "level", "=", "args", ".", "level", ",", "\n", "biased", "=", "args", ".", "biased", ",", "\n", "eta", "=", "args", ".", "eta", ",", "\n", "compress_ratio", "=", "args", ".", "k", ",", "\n", "compress_fn", "=", "args", ".", "fn", ",", "\n", "compress_op", "=", "'top_k'", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "qgm", "=", "args", ".", "qgm", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "train_loader", ",", "bsz_train", "=", "partition_trainDataset", "(", "device", "=", "device", ")", "\n", "val_loader", ",", "bsz_val", "=", "test_Dataset", "(", ")", "\n", "\n", "# define loss function (criterion) and nvidia-smioptimizer", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "#cuda()", "\n", "if", "args", ".", "qgm", "==", "1", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "print", "(", "optimizer", ")", "\n", "if", "'res'", "in", "args", ".", "arch", "or", "'mobile'", "in", "args", ".", "arch", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "gamma", "=", "0.1", ",", "milestones", "=", "[", "100", ",", "150", "]", ")", "\n", "", "elif", "'vgg'", "in", "args", ".", "arch", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "gamma", "=", "0.5", ",", "milestones", "=", "[", "30", ",", "60", ",", "90", ",", "120", ",", "150", ",", "180", "]", ")", "\n", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "epoch", "==", "1", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "\n", "", "", "print", "(", "'current lr {:.5e}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "model", ".", "block", "(", ")", "\n", "dt", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "bsz_train", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "device", ",", "rank", ")", "\n", "data_transferred", "+=", "dt", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "bsz_val", ",", "device", ",", "epoch", ")", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'model_{}_{}.th'", ".", "format", "(", "rank", ",", "args", ".", "run_no", ")", ")", ")", "\n", "\n", "#############################", "\n", "", "dt", "=", "gossip_avg", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "bsz_train", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "device", ",", "rank", ")", "\n", "print", "(", "'Final test accuracy'", ")", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "bsz_val", ",", "device", ",", "epoch", ")", "\n", "print", "(", "\"Rank : \"", ",", "rank", ",", "\"Data transferred(in GB) during training: \"", ",", "data_transferred", "/", "1.0e9", ",", "\"Data transferred(in GB) in final gossip averaging rounds: \"", ",", "dt", "/", "1.0e9", ",", "\"\\n\"", ")", "\n", "#Store processed data", "\n", "torch", ".", "save", "(", "(", "prec1", ",", "(", "data_transferred", "+", "dt", ")", "/", "1.0e9", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ",", "\"rank_{}.sp\"", ".", "format", "(", "rank", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.train": [[339, 385], ["trainer_choco.AverageMeter", "trainer_choco.AverageMeter", "trainer_choco.AverageMeter", "trainer_choco.AverageMeter", "model.train", "time.time", "enumerate", "trainer_choco.AverageMeter.update", "model", "criterion", "loss.float.backward", "optimizer.step", "optimizer.zero_grad", "model.transfer_params", "output.float.float", "loss.float.float", "trainer_choco.AverageMeter.update", "trainer_choco.AverageMeter.update", "trainer_choco.AverageMeter.update", "time.time", "len", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "trainer_choco.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "time.time", "torch.autograd.Variable", "torch.autograd.Variable", "torch.get_rank", "len"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.step", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.zero_grad", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.accuracy"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "batch_size", ",", "lr", ",", "device", ",", "rank", ")", ":", "\n", "    ", "\"\"\"\n        Run one train epoch\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "data_transferred", "=", "0", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "step", "=", "len", "(", "train_loader", ")", "*", "batch_size", "*", "epoch", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "input_var", ",", "target_var", "=", "Variable", "(", "input", ")", ".", "to", "(", "device", ")", ",", "Variable", "(", "target", ")", ".", "to", "(", "device", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "amt_data_transfer", "=", "model", ".", "transfer_params", "(", "epoch", "=", "epoch", "+", "(", "1e-3", "*", "i", ")", ",", "lr", "=", "lr", ")", "\n", "data_transferred", "+=", "amt_data_transfer", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target_var", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Rank: {0}\\t'", "\n", "'Epoch: [{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "dist", ".", "get_rank", "(", ")", ",", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "", "step", "+=", "batch_size", "\n", "", "return", "data_transferred", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.gossip_avg": [[386, 405], ["model.train", "enumerate", "model", "criterion", "criterion.backward", "optimizer.zero_grad", "model.transfer_params", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.zero_grad", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params"], ["", "def", "gossip_avg", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "batch_size", ",", "lr", ",", "device", ",", "rank", ")", ":", "\n", "    ", "\"\"\"\n       This function runs only gossip averaging for 50 iterations without local sgd updates - used to obtain the average model\n    \"\"\"", "\n", "data_transferred", "=", "0", "\n", "n", "=", "50", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "input_var", ",", "target_var", "=", "Variable", "(", "input", ")", ".", "to", "(", "device", ")", ",", "Variable", "(", "target", ")", ".", "to", "(", "device", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "amt_data_transfer", "=", "model", ".", "transfer_params", "(", "epoch", "=", "epoch", "+", "(", "1e-3", "*", "i", ")", ",", "lr", "=", "lr", ")", "\n", "data_transferred", "+=", "amt_data_transfer", "\n", "if", "i", "==", "n", ":", "break", "\n", "", "return", "data_transferred", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.validate": [[406, 455], ["trainer_choco.AverageMeter", "trainer_choco.AverageMeter", "trainer_choco.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "model", "criterion", "output.float.float", "loss.float.float", "trainer_choco.AverageMeter.update", "trainer_choco.AverageMeter.update", "trainer_choco.AverageMeter.update", "time.time", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "trainer_choco.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "torch.autograd.Variable", "torch.autograd.Variable", "torch.get_rank", "len"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "batch_size", ",", "device", ",", "epoch", "=", "0", ")", ":", "\n", "#def validate(val_loader, model, criterion, batch_size, writer, device, epoch=0):", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "step", "=", "len", "(", "val_loader", ")", "*", "batch_size", "*", "epoch", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "input_var", ",", "target_var", "=", "Variable", "(", "input", ")", ".", "to", "(", "device", ")", ",", "Variable", "(", "target", ")", ".", "to", "(", "device", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target_var", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Rank: {0}\\t'", "\n", "'Test: [{1}/{2}]\\t'", "\n", "#'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "dist", ".", "get_rank", "(", ")", ",", "i", ",", "len", "(", "val_loader", ")", ",", "\n", "#batch_time=batch_time, ", "\n", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ")", ")", "\n", "", "step", "+=", "batch_size", "\n", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.save_checkpoint": [[456, 461], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "\"\"\"\n    Save the training model\n    \"\"\"", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.accuracy": [[480, 494], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_choco.init_process": [[495, 501], ["torch.init_process_group", "fn"], "function", ["None"], ["", "def", "init_process", "(", "rank", ",", "size", ",", "fn", ",", "backend", "=", "'nccl'", ")", ":", "\n", "    ", "\"\"\"Initialize distributed enviornment\"\"\"", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "args", ".", "port", "\n", "dist", ".", "init_process_group", "(", "backend", ",", "rank", "=", "rank", ",", "world_size", "=", "size", ")", "\n", "fn", "(", "rank", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.dict_to_csv.average": [[13, 15], ["sum", "len"], "function", ["None"], ["def", "average", "(", "input", ")", ":", "\n", "    ", "return", "sum", "(", "input", ")", "/", "len", "(", "input", ")", "\n", "", "dict_data", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ",", "\"dict\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.Partition.__init__": [[72, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "index", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "index", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.Partition.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.Partition.__getitem__": [[79, 82], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_idx", "=", "self", ".", "index", "[", "index", "]", "\n", "return", "self", ".", "data", "[", "data_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.DataPartitioner.__init__": [[103, 133], ["len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "numpy.argsort", "numpy.argsort.tolist", "trainer_ds.skew_sort", "numpy.array", "targets.tolist", "int", "trainer_ds.DataPartitioner.partitions.append", "int", "trainer_ds.DataPartitioner.partitions.append", "int", "int", "trainer_ds.DataPartitioner.partitions.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.skew_sort"], ["def", "__init__", "(", "self", ",", "data", ",", "sizes", ",", "skew", ",", "classes", ",", "class_size", ",", "seed", ",", "device", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "partitions", "=", "[", "]", "\n", "data_len", "=", "len", "(", "data", ")", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "data", ",", "batch_size", "=", "512", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "labels", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "              ", "labels", "=", "labels", "+", "targets", ".", "tolist", "(", ")", "\n", "#labels  = [data[i][1] for i in range(0, data_len)]", "\n", "", "sort_index", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "labels", ")", ")", "\n", "indices", "=", "sort_index", ".", "tolist", "(", ")", "\n", "indices_rand", ",", "indices", "=", "skew_sort", "(", "indices", ",", "skew", "=", "skew", ",", "classes", "=", "classes", ",", "class_size", "=", "class_size", ",", "seed", "=", "seed", ")", "\n", "\n", "for", "frac", "in", "sizes", ":", "\n", "            ", "if", "skew", "==", "1", ":", "\n", "                ", "part_len", "=", "int", "(", "frac", "*", "data_len", ")", "\n", "self", ".", "partitions", ".", "append", "(", "indices", "[", "0", ":", "part_len", "]", ")", "\n", "indices", "=", "indices", "[", "part_len", ":", "]", "\n", "", "elif", "skew", "==", "0", ":", "\n", "                ", "part_len", "=", "int", "(", "frac", "*", "data_len", ")", "\n", "self", ".", "partitions", ".", "append", "(", "indices_rand", "[", "0", ":", "part_len", "]", ")", "\n", "indices_rand", "=", "indices_rand", "[", "part_len", ":", "]", "\n", "", "else", ":", "\n", "                ", "part_len", "=", "int", "(", "frac", "*", "data_len", "*", "skew", ")", ";", "\n", "part_len_rand", "=", "int", "(", "frac", "*", "data_len", "*", "(", "1", "-", "skew", ")", ")", "\n", "part_ind", "=", "indices", "[", "0", ":", "part_len", "]", "+", "indices_rand", "[", "0", ":", "part_len_rand", "]", "\n", "self", ".", "partitions", ".", "append", "(", "part_ind", ")", "\n", "indices", "=", "indices", "[", "part_len", ":", "]", "\n", "indices_rand", "=", "indices_rand", "[", "part_len_rand", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.DataPartitioner.use": [[134, 136], ["trainer_ds.Partition"], "methods", ["None"], ["", "", "", "def", "use", "(", "self", ",", "partition", ")", ":", "\n", "        ", "return", "Partition", "(", "self", ".", "data", ",", "self", ".", "partitions", "[", "partition", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.AverageMeter.__init__": [[464, 466], ["trainer_ds.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.AverageMeter.reset": [[467, 472], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.AverageMeter.update": [[473, 478], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.skew_sort": [[83, 99], ["random.Random", "random.Random.seed", "range", "range", "random.Random.shuffle", "int"], "function", ["None"], ["", "", "def", "skew_sort", "(", "indices", ",", "skew", ",", "classes", ",", "class_size", ",", "seed", ")", ":", "\n", "# skew belongs to [0,1]", "\n", "    ", "rng", "=", "Random", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "class_indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "classes", ")", ":", "\n", "        ", "class_indices", "[", "i", "]", "=", "indices", "[", "0", ":", "class_size", "[", "i", "]", "]", "\n", "indices", "=", "indices", "[", "class_size", "[", "i", "]", ":", "]", "\n", "", "random_indices", "=", "[", "]", "\n", "sorted_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "classes", ")", ":", "\n", "        ", "sorted_size", "=", "int", "(", "skew", "*", "class_size", "[", "i", "]", ")", "\n", "sorted_indices", "=", "sorted_indices", "+", "class_indices", "[", "i", "]", "[", "0", ":", "sorted_size", "]", "\n", "random_indices", "=", "random_indices", "+", "class_indices", "[", "i", "]", "[", "sorted_size", ":", "]", "\n", "", "rng", ".", "shuffle", "(", "random_indices", ")", "\n", "return", "random_indices", ",", "sorted_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.partition_trainDataset": [[138, 190], ["torch.get_world_size", "int", "trainer_ds.DataPartitioner", "partition.use.use", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Normalize", "torchvision.CIFAR10", "torch.get_rank", "torchvision.Normalize", "torchvision.CIFAR100", "float", "range", "range", "torchvision.Compose", "torchvision.Normalize", "torchvision.Compose", "torchvision.ImageFolder", "range", "torchvision.Compose", "os.path.join", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.DataPartitioner.use"], ["", "", "def", "partition_trainDataset", "(", "device", ")", ":", "\n", "    ", "\"\"\"Partitioning dataset\"\"\"", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "classes", "=", "10", "\n", "class_size", "=", "{", "x", ":", "5000", "for", "x", "in", "range", "(", "10", ")", "}", "\n", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", ",", "\n", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", ")", "\n", "classes", "=", "100", "\n", "class_size", "=", "{", "x", ":", "500", "for", "x", "in", "range", "(", "10", ")", "}", "\n", "\n", "dataset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenette'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "classes", "=", "10", "\n", "class_size", "=", "{", "0", ":", "963", ",", "1", ":", "955", ",", "2", ":", "993", ",", "3", ":", "858", ",", "4", ":", "941", ",", "5", ":", "956", ",", "6", ":", "961", ",", "7", ":", "931", ",", "8", ":", "951", ",", "9", ":", "960", "}", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", ",", "]", ")", "\n", "\n", "data_dir", "=", "'./data/imagenette'", "\n", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", ",", "data_transforms", ")", "\n", "\n", "\n", "", "size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "#print(size)", "\n", "bsz", "=", "int", "(", "(", "args", ".", "batch_size", ")", "/", "float", "(", "size", ")", ")", "\n", "\n", "partition_sizes", "=", "[", "1.0", "/", "size", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "partition", "=", "DataPartitioner", "(", "dataset", ",", "partition_sizes", ",", "skew", "=", "args", ".", "skew", ",", "classes", "=", "classes", ",", "class_size", "=", "class_size", ",", "seed", "=", "args", ".", "seed", ",", "device", "=", "device", ")", "\n", "\n", "partition", "=", "partition", ".", "use", "(", "dist", ".", "get_rank", "(", ")", ")", "\n", "train_set", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "partition", ",", "batch_size", "=", "bsz", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "train_set", ",", "bsz", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.test_Dataset": [[192, 223], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Normalize", "torchvision.CIFAR10", "torchvision.Normalize", "torchvision.CIFAR100", "torchvision.Compose", "torchvision.Normalize", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.Compose", "os.path.join", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["None"], ["", "def", "test_Dataset", "(", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", ",", "\n", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenette'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", ",", "]", ")", "\n", "\n", "data_dir", "=", "'./data/imagenette'", "\n", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'val'", ")", ",", "data_transforms", ")", "\n", "\n", "", "val_bsz", "=", "64", "\n", "val_set", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "val_bsz", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "val_set", ",", "val_bsz", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.run": [[225, 337], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "gossip_ds.RingGraph", "gossip_ds.UniformMixing", "gossip_ds.GossipDataParallel", "MobileNetV2.to", "trainer_ds.partition_trainDataset", "trainer_ds.test_Dataset", "torch.CrossEntropyLoss().to", "range", "trainer_ds.gossip_avg", "print", "trainer_ds.validate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.exists", "os.makedirs", "print", "print", "torch.SGD", "torch.SGD", "print", "torch.lr_scheduler.MultiStepLR", "print", "MobileNetV2.block", "trainer_ds.train", "optim.lr_scheduler.MultiStepLR.step", "trainer_ds.validate", "max", "trainer_ds.save_checkpoint", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "resnet_quantized", "resnet", "print", "print", "torch.CrossEntropyLoss", "MobileNetV2.parameters", "MobileNetV2.parameters", "torch.lr_scheduler.MultiStepLR", "vgg11_quantized", "vgg11", "torchsummary.summary", "torchsummary.summary", "MobileNetV2.state_dict", "os.path.join", "mobilenetv2_quantized", "MobileNetV2", "int", "int"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.partition_trainDataset", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.test_Dataset", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.gossip_avg", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.validate", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.step", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.validate", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.save_checkpoint", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.resnet_quantized", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.resnet", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.vgg11_quantized", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.vgg11", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict"], ["", "def", "run", "(", "rank", ",", "size", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "rank", "%", "4", ")", ")", "\n", "\n", "best_prec1", "=", "0", "\n", "##############", "\n", "data_transferred", "=", "0", "\n", "# Check the save_dir exists or not", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ")", ")", "\n", "\n", "", "if", "args", ".", "quantized_train", "==", "1", ":", "\n", "        ", "if", "args", ".", "arch", "==", "'resnet'", ":", "\n", "            ", "model", "=", "resnet_quantized", "(", "num_classes", "=", "args", ".", "classes", ",", "depth", "=", "args", ".", "depth", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "arch", "==", "'vgg11'", ":", "\n", "            ", "model", "=", "vgg11_quantized", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "arch", "==", "'mobilenet'", ":", "\n", "            ", "model", "=", "mobilenetv2_quantized", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "arch", "==", "'resnet'", ":", "\n", "            ", "model", "=", "resnet", "(", "num_classes", "=", "args", ".", "classes", ",", "depth", "=", "args", ".", "depth", ",", "dataset", "=", "args", ".", "dataset", ",", "norm_type", "=", "args", ".", "normtype", ",", "groups", "=", "2", ")", "\n", "", "elif", "args", ".", "arch", "==", "'vgg11'", ":", "\n", "            ", "model", "=", "vgg11", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ",", "norm_type", "=", "args", ".", "normtype", ",", "groups", "=", "2", ")", "\n", "", "elif", "args", ".", "arch", "==", "'mobilenet'", ":", "\n", "            ", "model", "=", "MobileNetV2", "(", "num_classes", "=", "args", ".", "classes", ",", "dataset", "=", "args", ".", "dataset", ",", "norm_type", "=", "args", ".", "normtype", ",", "groups", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "args", ")", "\n", "print", "(", "'Printing model summary...'", ")", "\n", "if", "'cifar'", "in", "args", ".", "dataset", ":", "print", "(", "summary", "(", "model", ",", "(", "3", ",", "32", ",", "32", ")", ",", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "size", ")", ",", "device", "=", "'cpu'", ")", ")", "\n", "else", ":", "print", "(", "summary", "(", "model", ",", "(", "3", ",", "224", ",", "224", ")", ",", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "size", ")", ",", "device", "=", "'cpu'", ")", ")", "\n", "\n", "\n", "", "graph", "=", "RingGraph", "(", "rank", ",", "size", ")", "#undirected/directed ring structure", "\n", "#graph = GridGraph(rank, size) # torus graph structure", "\n", "\n", "mixing", "=", "UniformMixing", "(", "graph", ",", "device", ")", "\n", "model", "=", "GossipDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "rank", "%", "4", "]", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "size", ",", "\n", "graph", "=", "graph", ",", "\n", "mixing", "=", "mixing", ",", "\n", "comm_device", "=", "device", ",", "\n", "level", "=", "args", ".", "level", ",", "\n", "biased", "=", "args", ".", "biased", ",", "\n", "eta", "=", "args", ".", "eta", ",", "\n", "compress_ratio", "=", "args", ".", "k", ",", "\n", "compress_fn", "=", "args", ".", "fn", ",", "\n", "compress_op", "=", "'top_k'", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "qgm", "=", "args", ".", "qgm", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "train_loader", ",", "bsz_train", "=", "partition_trainDataset", "(", "device", "=", "device", ")", "\n", "val_loader", ",", "bsz_val", "=", "test_Dataset", "(", ")", "\n", "\n", "# define loss function (criterion) and nvidia-smioptimizer", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "#cuda()", "\n", "if", "args", ".", "qgm", "==", "1", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "print", "(", "optimizer", ")", "\n", "if", "'res'", "in", "args", ".", "arch", "or", "'mobile'", "in", "args", ".", "arch", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "gamma", "=", "0.1", ",", "milestones", "=", "[", "100", ",", "150", "]", ")", "\n", "", "elif", "'vgg'", "in", "args", ".", "arch", ":", "\n", "        ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "gamma", "=", "0.5", ",", "milestones", "=", "[", "30", ",", "60", ",", "90", ",", "120", ",", "150", ",", "180", "]", ")", "\n", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "epoch", "==", "1", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "\n", "\n", "", "", "print", "(", "'current lr {:.5e}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "model", ".", "block", "(", ")", "\n", "dt", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "bsz_train", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "device", ",", "rank", ")", "\n", "data_transferred", "+=", "dt", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "bsz_val", ",", "device", ",", "epoch", ")", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'model_{}_{}.th'", ".", "format", "(", "rank", ",", "args", ".", "run_no", ")", ")", ")", "\n", "\n", "#############################", "\n", "", "dt", "=", "gossip_avg", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "bsz_train", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "device", ",", "rank", ")", "\n", "print", "(", "'Final test accuracy'", ")", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "bsz_val", ",", "device", ",", "epoch", ")", "\n", "print", "(", "\"Rank : \"", ",", "rank", ",", "\"Data transferred(in GB) during training: \"", ",", "data_transferred", "/", "1.0e9", ",", "\"Data transferred(in GB) in final gossip averaging rounds: \"", ",", "dt", "/", "1.0e9", ",", "\"\\n\"", ")", "\n", "#Store processed data", "\n", "torch", ".", "save", "(", "(", "prec1", ",", "(", "data_transferred", "+", "dt", ")", "/", "1.0e9", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"excel_data\"", ",", "\"rank_{}.sp\"", ".", "format", "(", "rank", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.train": [[339, 385], ["trainer_ds.AverageMeter", "trainer_ds.AverageMeter", "trainer_ds.AverageMeter", "trainer_ds.AverageMeter", "model.train", "time.time", "enumerate", "trainer_ds.AverageMeter.update", "model", "criterion", "loss.float.backward", "optimizer.step", "optimizer.zero_grad", "model.transfer_params", "output.float.float", "loss.float.float", "trainer_ds.AverageMeter.update", "trainer_ds.AverageMeter.update", "trainer_ds.AverageMeter.update", "time.time", "len", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "trainer_ds.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "time.time", "torch.autograd.Variable", "torch.autograd.Variable", "torch.get_rank", "len"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.step", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.zero_grad", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.accuracy"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "batch_size", ",", "lr", ",", "device", ",", "rank", ")", ":", "\n", "    ", "\"\"\"\n        Run one train epoch\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "data_transferred", "=", "0", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "step", "=", "len", "(", "train_loader", ")", "*", "batch_size", "*", "epoch", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "input_var", ",", "target_var", "=", "Variable", "(", "input", ")", ".", "to", "(", "device", ")", ",", "Variable", "(", "target", ")", ".", "to", "(", "device", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "amt_data_transfer", "=", "model", ".", "transfer_params", "(", "epoch", "=", "epoch", "+", "(", "1e-3", "*", "i", ")", ",", "lr", "=", "lr", ")", "\n", "data_transferred", "+=", "amt_data_transfer", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target_var", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Rank: {0}\\t'", "\n", "'Epoch: [{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "dist", ".", "get_rank", "(", ")", ",", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "", "step", "+=", "batch_size", "\n", "", "return", "data_transferred", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.gossip_avg": [[386, 405], ["model.train", "enumerate", "model", "criterion", "criterion.backward", "optimizer.zero_grad", "model.transfer_params", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.zero_grad", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params"], ["", "def", "gossip_avg", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "batch_size", ",", "lr", ",", "device", ",", "rank", ")", ":", "\n", "    ", "\"\"\"\n       This function runs only gossip averaging for 50 iterations without local sgd updates - used to obtain the average model\n    \"\"\"", "\n", "data_transferred", "=", "0", "\n", "n", "=", "50", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "input_var", ",", "target_var", "=", "Variable", "(", "input", ")", ".", "to", "(", "device", ")", ",", "Variable", "(", "target", ")", ".", "to", "(", "device", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "amt_data_transfer", "=", "model", ".", "transfer_params", "(", "epoch", "=", "epoch", "+", "(", "1e-3", "*", "i", ")", ",", "lr", "=", "lr", ")", "\n", "data_transferred", "+=", "amt_data_transfer", "\n", "if", "i", "==", "n", ":", "break", "\n", "", "return", "data_transferred", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.validate": [[406, 455], ["trainer_ds.AverageMeter", "trainer_ds.AverageMeter", "trainer_ds.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "model", "criterion", "output.float.float", "loss.float.float", "trainer_ds.AverageMeter.update", "trainer_ds.AverageMeter.update", "trainer_ds.AverageMeter.update", "time.time", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "trainer_ds.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "torch.autograd.Variable", "torch.autograd.Variable", "torch.get_rank", "len"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "batch_size", ",", "device", ",", "epoch", "=", "0", ")", ":", "\n", "#def validate(val_loader, model, criterion, batch_size, writer, device, epoch=0):", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "step", "=", "len", "(", "val_loader", ")", "*", "batch_size", "*", "epoch", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "input_var", ",", "target_var", "=", "Variable", "(", "input", ")", ".", "to", "(", "device", ")", ",", "Variable", "(", "target", ")", ".", "to", "(", "device", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target_var", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Rank: {0}\\t'", "\n", "'Test: [{1}/{2}]\\t'", "\n", "#'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "dist", ".", "get_rank", "(", ")", ",", "i", ",", "len", "(", "val_loader", ")", ",", "\n", "#batch_time=batch_time, ", "\n", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ")", ")", "\n", "", "step", "+=", "batch_size", "\n", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.save_checkpoint": [[456, 461], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "\"\"\"\n    Save the training model\n    \"\"\"", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.accuracy": [[480, 494], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.None.trainer_ds.init_process": [[495, 501], ["torch.init_process_group", "fn"], "function", ["None"], ["", "def", "init_process", "(", "rank", ",", "size", ",", "fn", ",", "backend", "=", "'nccl'", ")", ":", "\n", "    ", "\"\"\"Initialize distributed enviornment\"\"\"", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "args", ".", "port", "\n", "dist", ".", "init_process_group", "(", "backend", ",", "rank", "=", "rank", ",", "world_size", "=", "size", ")", "\n", "fn", "(", "rank", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.SparsificationCompressor.get_top_k": [[19, 34], ["x.view", "x.view.nelement", "max", "int", "torch.max", "torch.topk", "x.view.abs", "x.view.abs"], "methods", ["None"], ["    ", "def", "get_top_k", "(", "self", ",", "x", ",", "ratio", ")", ":", "\n", "        ", "\"\"\"it will sample the top 1-ratio of the samples.\"\"\"", "\n", "x_data", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "x_len", "=", "x_data", ".", "nelement", "(", ")", "\n", "top_k", "=", "max", "(", "1", ",", "int", "(", "x_len", "*", "(", "1", "-", "ratio", ")", ")", ")", "\n", "\n", "# get indices and the corresponding values", "\n", "if", "top_k", "==", "1", ":", "\n", "            ", "_", ",", "selected_indices", "=", "torch", ".", "max", "(", "x_data", ".", "abs", "(", ")", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "selected_indices", "=", "torch", ".", "topk", "(", "\n", "x_data", ".", "abs", "(", ")", ",", "top_k", ",", "largest", "=", "True", ",", "sorted", "=", "False", "\n", ")", "\n", "#print(x.size(), top_k)", "\n", "", "return", "x_data", "[", "selected_indices", "]", ",", "selected_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.SparsificationCompressor.get_mask": [[35, 41], ["torch.zeros_like", "mask.byte.byte.byte", "mask.byte.byte.float"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "flatten_arr", ",", "indices", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "zeros_like", "(", "flatten_arr", ")", "\n", "mask", "[", "indices", "]", "=", "1", "\n", "\n", "mask", "=", "mask", ".", "byte", "(", ")", "\n", "return", "mask", ".", "float", "(", ")", ",", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.SparsificationCompressor.get_random_k": [[42, 57], ["x.view", "x.view.nelement", "max", "numpy.random.choice", "torch.LongTensor().to", "int", "torch.LongTensor"], "methods", ["None"], ["", "def", "get_random_k", "(", "self", ",", "x", ",", "ratio", ",", "is_biased", "=", "True", ")", ":", "\n", "        ", "\"\"\"it will randomly sample the 1-ratio of the samples.\"\"\"", "\n", "# get tensor size.", "\n", "x_data", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "x_len", "=", "x_data", ".", "nelement", "(", ")", "\n", "top_k", "=", "max", "(", "1", ",", "int", "(", "x_len", "*", "(", "1", "-", "ratio", ")", ")", ")", "\n", "\n", "# random sample the k indices.", "\n", "selected_indices", "=", "np", ".", "random", ".", "choice", "(", "x_len", ",", "top_k", ",", "replace", "=", "False", ")", "\n", "selected_indices", "=", "torch", ".", "LongTensor", "(", "selected_indices", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "is_biased", ":", "\n", "            ", "return", "x_data", "[", "selected_indices", "]", ",", "selected_indices", "\n", "", "else", ":", "\n", "            ", "return", "x_len", "/", "top_k", "*", "x_data", "[", "selected_indices", "]", ",", "selected_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.SparsificationCompressor.compress": [[58, 68], ["compressor.SparsificationCompressor.get_top_k", "compressor.SparsificationCompressor.get_random_k"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_top_k", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_random_k"], ["", "", "def", "compress", "(", "self", ",", "arr", ",", "op", ",", "compress_ratio", ",", "is_biased", ")", ":", "\n", "        ", "if", "\"top_k\"", "in", "op", ":", "\n", "            ", "values", ",", "indices", "=", "self", ".", "get_top_k", "(", "arr", ",", "compress_ratio", ")", "\n", "", "elif", "\"random_k\"", "in", "op", ":", "\n", "            ", "values", ",", "indices", "=", "self", ".", "get_random_k", "(", "arr", ",", "compress_ratio", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# n_bits = get_n_bits(values) + get_n_bits(indices)", "\n", "", "return", "values", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.QuantizationCompressor.get_qsgd": [[71, 88], ["x.norm", "torch.floor", "x.nelement", "x.abs", "torch.rand_like", "min", "torch.sign", "math.sqrt"], "methods", ["None"], ["    ", "def", "get_qsgd", "(", "self", ",", "x", ",", "s", ",", "is_biased", "=", "False", ")", ":", "\n", "# s=255 for level=8", "\n", "        ", "norm", "=", "x", ".", "norm", "(", "p", "=", "2", ")", "\n", "level_float", "=", "s", "*", "x", ".", "abs", "(", ")", "/", "norm", "\n", "previous_level", "=", "torch", ".", "floor", "(", "level_float", ")", "\n", "is_next_level", "=", "(", "torch", ".", "rand_like", "(", "x", ")", "<", "(", "level_float", "-", "previous_level", ")", ")", ".", "float", "(", ")", "\n", "new_level", "=", "previous_level", "+", "is_next_level", "\n", "# assert not torch.isnan(is_next_level).any()", "\n", "#print('\\n',x, new_level/s)", "\n", "\n", "scale", "=", "1", "\n", "if", "is_biased", ":", "\n", "            ", "d", "=", "x", ".", "nelement", "(", ")", "\n", "scale", "=", "1.0", "/", "(", "min", "(", "d", "/", "(", "s", "**", "2", ")", ",", "math", ".", "sqrt", "(", "d", ")", "/", "s", ")", "+", "1.0", ")", "\n", "#print(scale)", "\n", "\n", "", "return", "scale", "*", "torch", ".", "sign", "(", "x", ")", "*", "norm", "*", "(", "new_level", "/", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.QuantizationCompressor.compress": [[90, 97], ["compressor.QuantizationCompressor.get_qsgd"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.get_qsgd"], ["", "def", "compress", "(", "self", ",", "arr", ",", "op", ",", "quantize_level", ",", "is_biased", ")", ":", "\n", "        ", "if", "quantize_level", "!=", "32", ":", "\n", "            ", "s", "=", "2", "**", "quantize_level", "-", "1", "\n", "values", "=", "self", ".", "get_qsgd", "(", "arr", ",", "s", ",", "is_biased", ")", "\n", "", "else", ":", "\n", "            ", "values", "=", "arr", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.QuantizationCompressor.uncompress": [[98, 100], ["None"], "methods", ["None"], ["", "def", "uncompress", "(", "self", ",", "arr", ")", ":", "\n", "        ", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.compressor.get_n_bits": [[11, 13], ["tensor.element_size", "tensor.nelement"], "function", ["None"], ["def", "get_n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.mixing_manager.MixingManager.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "graph", ",", "device", ")", ":", "\n", "        ", "self", ".", "graph_manager", "=", "graph", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.mixing_manager.MixingManager.is_regular": [[20, 26], ["mixing_manager.MixingManager.graph_manager.is_regular_graph", "mixing_manager.MixingManager.is_uniform"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_regular_graph", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.is_uniform"], ["", "def", "is_regular", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Whether there is bias accumulated in local entry of stationary\n        distribution of mixing matrix\n        \"\"\"", "\n", "return", "self", ".", "graph_manager", ".", "is_regular_graph", "(", ")", "and", "self", ".", "is_uniform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.mixing_manager.MixingManager.is_uniform": [[27, 30], ["None"], "methods", ["None"], ["", "def", "is_uniform", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether mixing weights are distributed uniformly over peers \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.mixing_manager.MixingManager.get_mixing_weights": [[31, 34], ["None"], "methods", ["None"], ["", "def", "get_mixing_weights", "(", "self", ",", "residual_adjusted", "=", "True", ")", ":", "\n", "        ", "\"\"\" Create mixing weight dictionary using uniform allocation \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.mixing_manager.UniformMixing.get_mixing_weights": [[38, 45], ["mixing_manager.UniformMixing.graph_manager.get_peers", "torch.tensor", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.get_peers"], ["    ", "def", "get_mixing_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Create mixing weight dictionary using uniform allocation \"\"\"", "\n", "mixing_weights", "=", "{", "}", "\n", "out_peers", ",", "_", "=", "self", ".", "graph_manager", ".", "get_peers", "(", ")", "\n", "mixing_weights", "[", "'uniform'", "]", "=", "torch", ".", "tensor", "(", "[", "1.", "/", "(", "len", "(", "out_peers", ")", "+", "1", ")", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "#mixing_weights['try'] = torch.tensor([1. / (len(out_peers)+2)], device=self.device)", "\n", "return", "mixing_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.mixing_manager.UniformMixing.is_uniform": [[46, 47], ["None"], "methods", ["None"], ["", "def", "is_uniform", "(", "self", ")", ":", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.__init__": [[40, 171], ["torch.nn.modules.Module.__init__", "utils.make_logger", "int", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "module.parameters", "threading.Lock", "threading.Event", "threading.Event", "threading.Thread", "distributed.GossipDataParallel.gossip_thread.start", "distributed.GossipDataParallel.gossip_flag.wait", "distributed.GossipDataParallel.gossip_flag.clear", "distributed.GossipDataParallel.__register_hooks", "list", "torch.is_initialized", "torch.is_initialized", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "next", "mixing_manager.UniformMixing", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "p.clone().detach_", "distributed.GossipDataParallel.gossip_params.append", "distributed.GossipDataParallel.gossip_device_buffer.append", "distributed.GossipDataParallel.gossip_error.append", "distributed.GossipDataParallel.momentum_buff.append", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "range", "distributed.GossipDataParallel.module.parameters", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "p.clone().detach_.cpu().pin_memory", "p.clone().detach_.to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.get_backend", "torch.get_backend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "p.clone", "p.clone().detach_.cpu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.make_logger", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__register_hooks"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "rank", "=", "None", ",", "world_size", "=", "None", ",", "\n", "graph", "=", "None", ",", "mixing", "=", "None", ",", "comm_device", "=", "None", ",", "push_sum", "=", "True", ",", "\n", "overlap", "=", "False", ",", "synch_freq", "=", "0", ",", "verbose", "=", "False", ",", "use_streams", "=", "False", ",", "\n", "level", "=", "32", ",", "biased", "=", "False", ",", "eta", "=", "0.5", ",", "momentum", "=", "0.9", ",", "lr", "=", "0.1", ",", "weight_decay", "=", "1e-4", ",", "qgm", "=", "0", ",", "\n", "compress_ratio", "=", "0.5", ",", "compress_fn", "=", "'sparsify'", ",", "compress_op", "=", "'top_k'", ")", ":", "\n", "        ", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# devices available locally", "\n", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "self", ".", "output_device", "=", "device_ids", "[", "0", "]", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "quasi_global_momentum", "=", "qgm", "\n", "self", ".", "epoch", "=", "0", "\n", "#self.iteration   = 0", "\n", "\n", "if", "world_size", "is", "None", "or", "rank", "is", "None", ":", "\n", "            ", "assert", "dist", ".", "is_initialized", "(", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "self", ".", "process_rank", "=", "rank", "\n", "\n", "\n", "# put model on output device", "\n", "self", ".", "module", "=", "module", "\n", "first_param_dtype", "=", "next", "(", "self", ".", "module", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "\n", "# prepare local intra-node all-reduce objects", "\n", "self", ".", "_module_copies", "=", "[", "self", ".", "module", "]", "\n", "\n", "# choose communication device based on backend", "\n", "if", "comm_device", "is", "None", ":", "\n", "            ", "cpu_comm", "=", "True", "if", "dist", ".", "get_backend", "(", ")", "==", "'gloo'", "else", "False", "\n", "comm_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "cpu_comm", "else", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "self", ".", "__cpu_comm", "=", "comm_device", ".", "type", "==", "'cpu'", "\n", "\n", "\n", "if", "mixing", "is", "None", ":", "\n", "            ", "mixing", "=", "UniformMixing", "(", "graph", ",", "comm_device", ")", "\n", "\n", "# distributed backend config", "\n", "", "self", ".", "dist_config", "=", "{", "\n", "'verbose'", ":", "verbose", ",", "\n", "'comm_device'", ":", "comm_device", ",", "\n", "'graph'", ":", "graph", ",", "\n", "'mixing'", ":", "mixing", ",", "\n", "'push_sum'", ":", "push_sum", ",", "\n", "'rank'", ":", "rank", ",", "\n", "'process_rank'", ":", "self", ".", "process_rank", ",", "\n", "'world_size'", ":", "world_size", ",", "\n", "'cpu_comm'", ":", "self", ".", "__cpu_comm", ",", "\n", "'level'", ":", "level", ",", "\n", "'biased'", ":", "biased", ",", "\n", "'compressor'", ":", "compress_fn", ",", "\n", "'ratio'", ":", "compress_ratio", ",", "\n", "'op'", ":", "compress_op", ",", "\n", "'data_transferred'", ":", "0", ",", "\n", "'epoch'", ":", "0.0", ",", "\n", "'iterations'", ":", "0", "}", "\n", "#print('quatization bit precision:', level)", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "synch_freq", "=", "synch_freq", "\n", "self", ".", "num_updates", "=", "0", "\n", "self", ".", "asynch", "=", "synch_freq", ">", "0", "\n", "\n", "# logger used to print to stdout", "\n", "self", ".", "logger", "=", "make_logger", "(", "rank", ",", "verbose", ")", "\n", "\n", "\n", "# prepare parameters for gossip", "\n", "self", ".", "gossip_enable", "=", "True", "\n", "self", ".", "gossiping", "=", "False", "\n", "self", ".", "params_mixed", "=", "True", "\n", "self", ".", "is_ps_numerator", "=", "False", "\n", "\n", "self", ".", "averaging_rate", "=", "torch", ".", "ones", "(", "1", ",", "device", "=", "comm_device", ")", ".", "type", "(", "first_param_dtype", ")", "*", "eta", "\n", "self", ".", "average_iters", "=", "int", "(", "1.0", "/", "eta", ")", "\n", "#print(self.average_iters)", "\n", "self", ".", "gossip_ps_weight", "=", "torch", ".", "ones", "(", "1", ",", "device", "=", "comm_device", ")", ".", "type", "(", "first_param_dtype", ")", "\n", "self", ".", "ps_weight", "=", "torch", ".", "ones", "(", "1", ",", "device", "=", "comm_device", ")", ".", "type", "(", "first_param_dtype", ")", "\n", "self", ".", "gossip_params", "=", "[", "]", "\n", "self", ".", "gossip_device_buffer", "=", "[", "]", "\n", "self", ".", "momentum_buff", "=", "[", "]", "\n", "#self.running_gossip = []", "\n", "self", ".", "gossip_error", "=", "[", "]", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "cp", "=", "p", ".", "clone", "(", ")", ".", "detach_", "(", ")", "\n", "#pp = cp.clone().detach_()", "\n", "cp", "=", "cp", ".", "cpu", "(", ")", ".", "pin_memory", "(", ")", "if", "self", ".", "__cpu_comm", "else", "cp", ".", "to", "(", "comm_device", ")", "#cp.cuda()", "\n", "self", ".", "gossip_params", ".", "append", "(", "cp", ")", "\n", "self", ".", "gossip_device_buffer", ".", "append", "(", "cp", ")", "\n", "self", ".", "gossip_error", ".", "append", "(", "torch", ".", "zeros_like", "(", "cp", ")", ".", "to", "(", "comm_device", ")", ")", "\n", "self", ".", "momentum_buff", ".", "append", "(", "torch", ".", "zeros_like", "(", "cp", ")", ".", "to", "(", "comm_device", ")", ")", "\n", "\n", "# prepare gossip process control objects", "\n", "", "self", ".", "gossip_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "gossip_flag", "=", "threading", ".", "Event", "(", ")", "\n", "self", ".", "train_flag", "=", "threading", ".", "Event", "(", ")", "\n", "\n", "if", "self", ".", "dist_config", "[", "'comm_device'", "]", ".", "type", "!=", "'cpu'", "and", "use_streams", ":", "\n", "            ", "self", ".", "gossip_stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gossip_stream", "=", "torch", ".", "cuda", ".", "current_stream", "(", "device", "=", "comm_device", ")", "\n", "\n", "\n", "", "self", ".", "gossip_thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "GossipDataParallel", ".", "_gossip_target", ",", "\n", "args", "=", "(", "self", ".", "dist_config", ",", "\n", "self", ".", "gossip_flag", ",", "\n", "self", ".", "train_flag", ",", "\n", "self", ".", "gossip_lock", ",", "\n", "self", ".", "gossip_params", ",", "\n", "self", ".", "gossip_device_buffer", ",", "\n", "self", ".", "gossip_error", ",", "\n", "self", ".", "gossip_stream", ",", "\n", "self", ".", "gossip_ps_weight", ")", ")", "\n", "self", ".", "gossip_thread", ".", "daemon", "=", "True", "\n", "self", ".", "gossip_thread", ".", "name", "=", "'Gossip-Thread'", "\n", "self", ".", "gossip_thread", ".", "start", "(", ")", "\n", "\n", "# wait for thread to complete initialization", "\n", "self", ".", "gossip_flag", ".", "wait", "(", ")", "\n", "self", ".", "gossip_flag", ".", "clear", "(", ")", "\n", "\n", "##############################################################", "\n", "\n", "# register ps/grad-reduction hooks", "\n", "self", ".", "__register_hooks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.update_gossiper": [[172, 183], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.dist_config[].values", "distributed.GossipDataParallel.logger.debug", "setattr", "getattr", "distributed.GossipDataParallel.logger.debug"], "methods", ["None"], ["", "def", "update_gossiper", "(", "self", ",", "attr", ",", "val", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "'waiting for gossip lock'", ")", "\n", "with", "self", ".", "gossip_lock", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'gossip lock received'", ")", "\n", "for", "gossiper", "in", "self", ".", "dist_config", "[", "'gossipers'", "]", ".", "values", "(", ")", ":", "\n", "                ", "if", "val", "==", "getattr", "(", "gossiper", ",", "attr", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "debug", "(", "'nothing to update'", ")", "\n", "return", "\n", "# update attr", "\n", "", "self", ".", "logger", ".", "debug", "(", "'setting gossiper {} to {}'", ".", "format", "(", "attr", ",", "val", ")", ")", "\n", "setattr", "(", "gossiper", ",", "attr", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.state_dict": [[184, 191], ["super().state_dict", "distributed.GossipDataParallel._query_gossip_queue"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue"], ["", "", "", "def", "state_dict", "(", "self", ",", "finish_gossip", "=", "True", ")", ":", "\n", "        ", "if", "finish_gossip", ":", "\n", "            ", "self", ".", "_query_gossip_queue", "(", ")", "\n", "\n", "", "super_dict", "=", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "state_dict", "(", ")", "\n", "supplanted_dict", "=", "{", "'state_dict'", ":", "super_dict", ",", "}", "\n", "return", "supplanted_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.load_state_dict": [[192, 195], ["super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "load_dict", ")", ":", "\n", "        ", "state_dict", "=", "load_dict", "[", "'state_dict'", "]", "\n", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.forward": [[197, 202], ["distributed.GossipDataParallel.scatter", "distributed.GossipDataParallel.module"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.scatter"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Forward pass performed in parallel across all devices on node \"\"\"", "\n", "# scatter inputs onto devices", "\n", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.ps_numerator": [[203, 221], ["distributed.GossipDataParallel.module.parameters", "p.data.mul_", "zip", "ps_weight.type", "distributed.GossipDataParallel.module.parameters", "copy.deepcopy", "p.grad.data.add_", "copy.deepcopy.data.mul_().add_", "p.grad.data.add_", "m.data.mul_().add_", "copy.deepcopy.data.mul_", "m.data.mul_"], "methods", ["None"], ["", "def", "ps_numerator", "(", "self", ")", ":", "\n", "        ", "\"\"\" Convert model params to ps-numerator \"\"\"", "\n", "if", "not", "self", ".", "is_ps_numerator", ":", "\n", "            ", "ps_weight", "=", "self", ".", "ps_weight", "\n", "#print(ps_weight)", "\n", "for", "p", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "mul_", "(", "ps_weight", ".", "type", "(", "p", ".", "data", ".", "dtype", ")", ")", "\n", "\n", "", "if", "self", ".", "quasi_global_momentum", "==", "1", ":", "\n", "                ", "for", "p", ",", "m", "in", "zip", "(", "self", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "momentum_buff", ")", ":", "\n", "                    ", "if", "p", ".", "requires_grad", ":", "\n", "                      ", "buff", "=", "copy", ".", "deepcopy", "(", "m", ".", "data", ")", "\n", "p", ".", "grad", ".", "data", ".", "add_", "(", "self", ".", "weight_decay", ",", "p", ".", "data", ")", "\n", "buff", ".", "data", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "p", ".", "grad", ".", "data", ")", "\n", "p", ".", "grad", ".", "data", ".", "add_", "(", "self", ".", "momentum", ",", "buff", ".", "data", ")", "\n", "m", ".", "data", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "p", ".", "grad", ".", "data", ",", "alpha", "=", "1", "-", "self", ".", "momentum", ")", "\n", "\n", "", "", "", "self", ".", "is_ps_numerator", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.unbias": [[222, 232], ["distributed.GossipDataParallel.module.parameters", "p.data.div_", "ps_weight.type"], "methods", ["None"], ["", "", "def", "unbias", "(", "self", ")", ":", "\n", "        ", "\"\"\" Convert model params to de-biased estimate \"\"\"", "\n", "if", "self", ".", "is_ps_numerator", ":", "\n", "            ", "ps_weight", "=", "self", ".", "ps_weight", "\n", "#print(ps_weight)", "\n", "for", "p", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "div_", "(", "ps_weight", ".", "type", "(", "p", ".", "data", ".", "dtype", ")", ")", "\n", "\n", "", "self", ".", "dist_config", "[", "'iterations'", "]", "+=", "1", "\n", "self", ".", "is_ps_numerator", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.scatter": [[235, 237], ["torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.scatter_gather.scatter_kwargs"], "methods", ["None"], ["", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.parallel_apply": [[238, 241], ["torch.nn.parallel.parallel_apply.parallel_apply", "torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.parallel_apply", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "\n", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.gather": [[242, 244], ["torch.nn.parallel.scatter_gather.gather", "torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.gather", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.train": [[246, 251], ["super().train", "module.train"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "gossip_enable", "=", "True", "\n", "for", "module", "in", "self", ".", "_module_copies", "[", "1", ":", "]", ":", "\n", "            ", "module", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.eval": [[252, 258], ["super().eval", "distributed.GossipDataParallel._query_gossip_queue", "module.eval"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "eval", "(", ")", "\n", "self", ".", "gossip_enable", "=", "False", "\n", "for", "module", "in", "self", ".", "_module_copies", "[", "1", ":", "]", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "", "self", ".", "_query_gossip_queue", "(", "non_blocking", "=", "self", ".", "asynch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.block": [[259, 262], ["distributed.GossipDataParallel.logger.info", "torch.barrier", "torch.barrier"], "methods", ["None"], ["", "def", "block", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'blocking'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel._query_gossip_queue": [[264, 303], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.gossip_flag.is_set", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.gossip_ps_weight.data.mul_", "distributed.GossipDataParallel.ps_weight.data.add_", "distributed.GossipDataParallel.ps_weight.clone", "zip", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.gossip_ps_weight.copy_", "distributed.GossipDataParallel.gossip_flag.clear", "distributed.GossipDataParallel.gossip_flag.wait", "NameError", "sys.exit", "distributed.GossipDataParallel.averaging_rate.type", "distributed.GossipDataParallel.module.parameters", "r.data.mul_", "p.data.add_", "distributed.GossipDataParallel.averaging_rate.type", "m.data.add_", "float"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear"], ["", "def", "_query_gossip_queue", "(", "self", ",", "non_blocking", "=", "False", ")", ":", "\n", "        ", "\"\"\" Check gossip-queue for push-sum residuals and update model \"\"\"", "\n", "if", "not", "self", ".", "gossip_enable", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "'querying gossip queue'", ")", "\n", "\n", "# no gossip happening right now so just return", "\n", "if", "not", "self", ".", "gossiping", ":", "\n", "#self.logger.warning('not gossiping right now')", "\n", "            ", "return", "False", "\n", "\n", "", "if", "not", "non_blocking", ":", "\n", "            ", "if", "not", "self", ".", "gossip_flag", ".", "wait", "(", "timeout", "=", "HEARTBEAT_TIMEOUT", ")", ":", "\n", "                ", "raise", "NameError", "(", "'Gossip flag timeout'", ")", "\n", "sys", ".", "exit", "(", ")", "# HEARTBEAT monitor", "\n", "\n", "# query gossip thread", "\n", "", "", "if", "self", ".", "gossip_flag", ".", "is_set", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'received gossip flag'", ")", "\n", "self", ".", "gossip_ps_weight", ".", "data", ".", "mul_", "(", "self", ".", "averaging_rate", ".", "type", "(", "self", ".", "ps_weight", ".", "data", ".", "dtype", ")", ")", "\n", "self", ".", "ps_weight", ".", "data", ".", "add_", "(", "self", ".", "gossip_ps_weight", ")", "\n", "#print(self.gossip_ps_weight, self.ps_weight)", "\n", "ps_weight", "=", "self", ".", "ps_weight", ".", "clone", "(", ")", "\n", "\n", "for", "p", ",", "r", ",", "m", "in", "zip", "(", "self", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "gossip_device_buffer", ",", "self", ".", "momentum_buff", ")", ":", "\n", "                ", "r", ".", "data", ".", "mul_", "(", "self", ".", "averaging_rate", ".", "type", "(", "r", ".", "data", ".", "dtype", ")", ")", "\n", "p", ".", "data", ".", "add_", "(", "r", ")", "\n", "if", "self", ".", "quasi_global_momentum", "==", "1", ":", "\n", "                    ", "m", ".", "data", ".", "add_", "(", "r", ".", "data", ",", "alpha", "=", "(", "(", "self", ".", "momentum", "-", "1.0", ")", "/", "(", "self", ".", "lr", "*", "float", "(", "ps_weight", ".", "data", ")", ")", ")", ")", "\n", "\n", "# update flags", "\n", "#self.logger.debug('updated ps-weight {}'.format(self.ps_weight))", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "'updated model params'", ")", "\n", "self", ".", "gossip_ps_weight", ".", "copy_", "(", "self", ".", "ps_weight", ")", "\n", "self", ".", "gossip_flag", ".", "clear", "(", ")", "\n", "self", ".", "params_mixed", "=", "True", "\n", "self", ".", "gossiping", "=", "False", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.transfer_params": [[304, 343], ["distributed.GossipDataParallel.logger.debug", "zip", "distributed.GossipDataParallel.gossip_stream.wait_stream", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.train_flag.set", "distributed.GossipDataParallel.logger.warning", "distributed.GossipDataParallel.module.parameters", "gossip_device_buffer_elem.data.copy_", "gossip_device_buffer_elem.data.add_", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "zip", "gp.copy_"], "methods", ["None"], ["", "", "def", "transfer_params", "(", "self", ",", "mix", "=", "True", ",", "epoch", "=", "0", ",", "lr", "=", "0.1", ")", ":", "\n", "        ", "\"\"\" Transfers COPY of model parameters to gossip queue \"\"\"", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "(", "not", "self", ".", "gossip_enable", ")", ":", "\n", "            ", "return", "False", ",", "0", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "'transfering model params'", ")", "\n", "\n", "# don't transfer new params if old params haven't been mixed yet", "\n", "if", "not", "self", ".", "params_mixed", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "'params not mixed'", ")", "\n", "return", "False", ",", "0", "\n", "\n", "\n", "# params gpu-gpu copy (fast)", "\n", "# --", "\n", "#if self.dist_config['iterations']%2==0:", "\n", "", "for", "p", ",", "gossip_device_buffer_elem", ",", "error", "in", "zip", "(", "self", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "gossip_device_buffer", ",", "self", ".", "gossip_error", ")", ":", "\n", "            ", "gossip_device_buffer_elem", ".", "data", ".", "copy_", "(", "p", ")", "\n", "gossip_device_buffer_elem", ".", "data", ".", "add_", "(", "error", ")", "\n", "\n", "# --", "\n", "# buffer to gossip-thread copy (potentially slow, but asynchronous)", "\n", "# --", "\n", "", "self", ".", "gossip_stream", ".", "wait_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", "device", "=", "self", ".", "dist_config", "[", "'comm_device'", "]", ")", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "gossip_stream", ")", ":", "\n", "            ", "for", "b", ",", "gp", "in", "zip", "(", "self", ".", "gossip_device_buffer", ",", "self", ".", "gossip_params", ")", ":", "\n", "# assert not torch.isnan(gp).any()", "\n", "                ", "gp", ".", "copy_", "(", "b", ",", "non_blocking", "=", "True", ")", "\n", "# update flags", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "'transfered model params'", ")", "\n", "self", ".", "dist_config", "[", "'epoch'", "]", "=", "epoch", "\n", "self", ".", "params_mixed", "=", "False", "\n", "self", ".", "gossiping", "=", "True", "\n", "self", ".", "train_flag", ".", "set", "(", ")", "\n", "return", "True", ",", "self", ".", "dist_config", "[", "'data_transferred'", "]", "\n", "#return True", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel._gossip_into_receive_buffer": [[345, 388], ["zip", "zip", "copy.deepcopy", "utils.quantize_layerwise", "utils.flatten_tensors", "p.data.add_", "q.data.copy_", "gossiper.mix", "utils.unflatten_tensors", "compressor.QuantizationCompressor", "copy.deepcopy", "utils.sparsify_layerwise", "utils.unsparsify_layerwise", "g.copy_", "g.data.copy_", "compressor.SparsificationCompressor"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.quantize_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.SGD_DS.mix", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unflatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.sparsify_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unsparsify_layerwise"], ["", "@", "staticmethod", "\n", "def", "_gossip_into_receive_buffer", "(", "send_buffer", ",", "gossiper", ",", "receive_buffer", ",", "\n", "error_buffer", ",", "\n", "gossip_lock", ",", "\n", "dist_config", ",", "\n", "ps_weight", ")", ":", "\n", "\n", "        ", "if", "dist_config", "[", "'compressor'", "]", "==", "'quantize'", ":", "\n", "            ", "updated_error", "=", "copy", ".", "deepcopy", "(", "send_buffer", ")", "\n", "comp_unflat", "=", "quantize_layerwise", "(", "send_buffer", ",", "QuantizationCompressor", "(", ")", ",", "quantization_level", "=", "dist_config", "[", "'level'", "]", ",", "is_biased", "=", "dist_config", "[", "'biased'", "]", ")", "# C(Vt)", "\n", "comp_msg", "=", "flatten_tensors", "(", "comp_unflat", ")", "\n", "shapes", "=", "None", "\n", "uncompress", "=", "False", "\n", "\n", "", "elif", "dist_config", "[", "'compressor'", "]", "==", "'sparsify'", ":", "\n", "            ", "updated_error", "=", "copy", ".", "deepcopy", "(", "send_buffer", ")", "\n", "#assert not torch.isnan(flatten_tensors(send_buffer)).any()", "\n", "comp_msg", ",", "shapes", "=", "sparsify_layerwise", "(", "send_buffer", ",", "SparsificationCompressor", "(", ")", ",", "dist_config", "[", "'op'", "]", ",", "dist_config", "[", "'ratio'", "]", ",", "dist_config", "[", "'biased'", "]", ")", "\n", "comp_unflat", "=", "unsparsify_layerwise", "(", "comp_msg", ",", "shapes", ",", "send_buffer", ")", "\n", "uncompress", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "#        if dist_config['iterations']%1==0:", "\n", "", "for", "r", ",", "p", ",", "q", "in", "zip", "(", "comp_unflat", ",", "updated_error", ",", "error_buffer", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "-", "r", ")", "\n", "q", ".", "data", ".", "copy_", "(", "p", ")", "\n", "\n", "# send and receive parameters", "\n", "", "with", "gossip_lock", ":", "\n", "            ", "data_amt", "=", "0", "\n", "#if dist_config['rank']==0 :print(dist_config['iterations'], comp_msg[0])", "\n", "in_msg", ",", "updated_ps_weight", ",", "data_amt", "=", "gossiper", ".", "mix", "(", "comp_msg", ",", "send_buffer", ",", "ps_weight", ",", "residual", "=", "True", ",", "\n", "uncompress", "=", "uncompress", ",", "shapes", "=", "shapes", ",", "epoch", "=", "dist_config", "[", "'epoch'", "]", ",", "iteration", "=", "dist_config", "[", "'iterations'", "]", ")", "\n", "dist_config", "[", "'data_transferred'", "]", "=", "data_amt", "\n", "\n", "", "for", "r", ",", "g", "in", "zip", "(", "unflatten_tensors", "(", "in_msg", ",", "send_buffer", ")", ",", "receive_buffer", ")", ":", "\n", "            ", "if", "dist_config", "[", "'cpu_comm'", "]", ":", "\n", "                ", "g", ".", "copy_", "(", "r", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "g", ".", "data", ".", "copy_", "(", "r", ")", "\n", "\n", "", "", "return", "updated_ps_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel._gossip_target": [[389, 447], ["utils.make_logger", "utils.group_by_dtype", "utils.group_by_dtype", "utils.group_by_dtype", "gossip_flag.set", "gossiper_class", "train_flag.wait", "utils.make_logger.debug", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossip_stream.synchronize", "train_flag.clear", "gossip_flag.set", "gossip_ps_weight.copy_", "utils.make_logger.warning", "gossipers.values", "utils.flatten_tensors", "distributed.GossipDataParallel._gossip_into_receive_buffer", "gossiper.clean_msg_buffers_"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.make_logger", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._gossip_into_receive_buffer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.clean_msg_buffers_"], ["", "@", "staticmethod", "\n", "def", "_gossip_target", "(", "dist_config", ",", "gossip_flag", ",", "train_flag", ",", "gossip_lock", ",", "\n", "gossip_params", ",", "gossip_device_buffer", ",", "\n", "gossip_error", ",", "\n", "gossip_stream", ",", "\n", "gossip_ps_weight", ")", ":", "\n", "        ", "\"\"\" Gossip thread, which performs push-sum on model params \"\"\"", "\n", "logger", "=", "make_logger", "(", "dist_config", "[", "'rank'", "]", ",", "dist_config", "[", "'verbose'", "]", ")", "\n", "\n", "gossip_params_by_dtype", "=", "group_by_dtype", "(", "gossip_params", ")", "#send", "\n", "gossip_device_buffer_by_dtype", "=", "group_by_dtype", "(", "gossip_device_buffer", ")", "#receive", "\n", "gossip_error_by_dtype", "=", "group_by_dtype", "(", "gossip_error", ")", "\n", "\n", "gossipers", "=", "{", "}", "\n", "# init gossip instance", "\n", "gossiper_class", "=", "SGD_DS", "\n", "for", "dtype", "in", "gossip_params_by_dtype", ":", "\n", "            ", "gossipers", "[", "dtype", "]", "=", "gossiper_class", "(", "\n", "torch", ".", "cat", "(", "[", "flatten_tensors", "(", "gossip_params_by_dtype", "[", "dtype", "]", ")", ",", "gossip_ps_weight", "]", ")", ",", "\n", "device", "=", "dist_config", "[", "'comm_device'", "]", ",", "\n", "graph", "=", "dist_config", "[", "'graph'", "]", ",", "\n", "mixing", "=", "dist_config", "[", "'mixing'", "]", ",", "\n", "rank", "=", "dist_config", "[", "'process_rank'", "]", ",", "\n", "world_size", "=", "dist_config", "[", "'world_size'", "]", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "", "dist_config", "[", "'gossipers'", "]", "=", "gossipers", "\n", "\n", "gossip_flag", ".", "set", "(", ")", "\n", "\n", "# gossip loop", "\n", "while", "True", ":", "\n", "            ", "train_flag", ".", "wait", "(", ")", "\n", "logger", ".", "debug", "(", "'received train-flag'", ")", "\n", "try", ":", "\n", "                ", "if", "True", ":", "\n", "#with torch.cuda.stream(gossip_stream):", "\n", "                    ", "for", "dtype", "in", "gossip_params_by_dtype", ":", "\n", "#assert not torch.isnan(flatten_tensors(gossip_params_by_dtype[dtype])).any()", "\n", "                        ", "ps_weight", "=", "GossipDataParallel", ".", "_gossip_into_receive_buffer", "(", "\n", "gossip_params_by_dtype", "[", "dtype", "]", ",", "gossipers", "[", "dtype", "]", ",", "\n", "gossip_device_buffer_by_dtype", "[", "dtype", "]", ",", "\n", "gossip_error_by_dtype", "[", "dtype", "]", ",", "\n", "gossip_lock", ",", "dist_config", ",", "\n", "gossip_ps_weight", ")", "\n", "", "gossip_ps_weight", ".", "copy_", "(", "ps_weight", ")", "\n", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "logger", ".", "warning", "(", "'received runtime error {}'", ".", "format", "(", "e", ")", ")", "\n", "for", "gossiper", "in", "gossipers", ".", "values", "(", ")", ":", "\n", "                    ", "gossiper", ".", "clean_msg_buffers_", "(", ")", "\n", "\n", "", "", "finally", ":", "\n", "# Make sure all queued operations are complete", "\n", "                ", "gossip_stream", ".", "synchronize", "(", ")", "\n", "# give main thread go-ahead to read our gossip buffer", "\n", "train_flag", ".", "clear", "(", ")", "\n", "gossip_flag", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.__register_hooks": [[448, 455], ["distributed.GossipDataParallel.register_forward_pre_hook", "distributed.GossipDataParallel.register_backward_hook", "distributed.GossipDataParallel.__make_forward_pre_hook", "distributed.GossipDataParallel.__make_backward_hook"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__make_forward_pre_hook", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__make_backward_hook"], ["", "", "", "def", "__register_hooks", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Registers push-sum de-bias/bias hooks in pre-forward/post-backward\n        passes in all leaf modules\n        \"\"\"", "\n", "self", ".", "register_forward_pre_hook", "(", "self", ".", "__make_forward_pre_hook", "(", ")", ")", "\n", "self", ".", "register_backward_hook", "(", "self", ".", "__make_backward_hook", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.__make_backward_hook": [[456, 497], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.ps_numerator", "torch.autograd.Variable._execution_engine.queue_callback", "torch.autograd.Variable._execution_engine.queue_callback", "len", "enumerate", "torch.cuda.comm.reduce_add_coalesced", "torch.cuda.comm.reduce_add_coalesced", "zip", "module.parameters", "grad.copy_", "module.parameters", "range", "all_grads[].append", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "param.set_"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.ps_numerator"], ["", "def", "__make_backward_hook", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "'making backward hook'", ")", "\n", "\n", "def", "hook", "(", "*", "unused", ")", ":", "\n", "# reduce gradients across devices on a single machine", "\n", "            ", "if", "len", "(", "self", ".", "device_ids", ")", ">", "1", ":", "\n", "\n", "# collect gradients from all copies", "\n", "                ", "all_grads", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "_module_copies", ")", ")", "]", "\n", "for", "dev_idx", ",", "module", "in", "enumerate", "(", "self", ".", "_module_copies", ")", ":", "\n", "                    ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "not", "p", ".", "requires_grad", "or", "p", ".", "grad", "is", "None", ":", "\n", "                            ", "continue", "\n", "", "all_grads", "[", "dev_idx", "]", ".", "append", "(", "p", ".", "grad", ".", "data", ")", "\n", "\n", "# reduce grads", "\n", "", "", "reduced_grads", "=", "reduce_add_coalesced", "(", "\n", "all_grads", ",", "self", ".", "output_device", ",", "\n", "self", ".", "nccl_reduce_bucket_size", ")", "\n", "\n", "# update grads with reduced grads", "\n", "for", "grad", ",", "reduced", "in", "zip", "(", "all_grads", "[", "0", "]", ",", "reduced_grads", ")", ":", "\n", "                    ", "grad", ".", "copy_", "(", "reduced", ")", "\n", "\n", "# clear the gradients and parameters across all replicas", "\n", "", "for", "module", "in", "self", ".", "_module_copies", "[", "1", ":", "]", ":", "\n", "                    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "param", ".", "requires_grad", ":", "\n", "                            ", "param", ".", "grad", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                                ", "param", ".", "set_", "(", ")", "\n", "\n", "\n", "# convert model back to ps-numerator", "\n", "", "", "", "", "", "self", ".", "ps_numerator", "(", ")", "\n", "\n", "\n", "\n", "", "def", "queue_hook", "(", "*", "unused", ")", ":", "\n", "            ", "Variable", ".", "_execution_engine", ".", "queue_callback", "(", "hook", ")", "\n", "", "return", "queue_hook", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.distributed.GossipDataParallel.__make_forward_pre_hook": [[498, 519], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.unbias", "distributed.GossipDataParallel._query_gossip_queue", "distributed.GossipDataParallel.transfer_params"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.unbias", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params"], ["", "def", "__make_forward_pre_hook", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "'making forward pre-hook'", ")", "\n", "\n", "def", "hook", "(", "*", "unused", ")", ":", "\n", "            ", "\"\"\" Query gossip queue and de-bias during forward pass \"\"\"", "\n", "# gossip during training (not inference)", "\n", "if", "self", ".", "gossip_enable", ":", "\n", "                ", "non_blocking", "=", "self", ".", "num_updates", "<", "self", ".", "synch_freq", "\n", "if", "self", ".", "_query_gossip_queue", "(", "non_blocking", ")", ":", "\n", "                    ", "self", ".", "num_updates", "=", "0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "num_updates", "+=", "1", "\n", "", "if", "self", ".", "overlap", ":", "\n", "                    ", "self", ".", "transfer_params", "(", ")", "\n", "\n", "#convert model to de-biased estimate", "\n", "", "", "self", ".", "unbias", "(", ")", "\n", "\n", "\n", "\n", "", "return", "hook", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.Edge.__init__": [[18, 27], ["torch.new_group", "torch.new_group", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.all_reduce", "torch.all_reduce", "torch.Tensor().to().half", "torch.Tensor().to().half", "torch.Tensor().to().half", "torch.Tensor().to().half", "torch.all_reduce", "torch.all_reduce", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "local_master_rank", ",", "dest", ",", "src", ",", "local_rank", ")", ":", "\n", "        ", "self", ".", "dest", "=", "dest", "\n", "self", ".", "src", "=", "src", "\n", "self", ".", "process_group", "=", "dist", ".", "new_group", "(", "[", "src", ",", "dest", "]", ")", "\n", "if", "local_master_rank", "in", "[", "self", ".", "src", ",", "self", ".", "dest", "]", "and", "local_rank", "==", "0", ":", "\n", "            ", "initializer_tensor", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "local_master_rank", "%", "4", ")", ")", ")", "\n", "dist", ".", "all_reduce", "(", "initializer_tensor", ",", "group", "=", "self", ".", "process_group", ")", "\n", "initializer_tensor", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "local_master_rank", "%", "4", ")", ")", ")", ".", "half", "(", ")", "\n", "dist", ".", "all_reduce", "(", "initializer_tensor", ",", "group", "=", "self", ".", "process_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.__init__": [[31, 41], ["graph_manager.GraphManager._make_graph", "int", "range", "range"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph._make_graph"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "world_size", ",", "nprocs_per_node", "=", "1", ",", "local_rank", "=", "0", ",", "peers_per_itr", "=", "1", ")", ":", "\n", "        ", "assert", "int", "(", "peers_per_itr", ")", ">=", "1", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "self", ".", "_peers_per_itr", "=", "peers_per_itr", "\n", "self", ".", "_group_indices", "=", "[", "i", "for", "i", "in", "range", "(", "peers_per_itr", ")", "]", "\n", "self", ".", "nprocs_per_node", "=", "nprocs_per_node", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "_make_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.peers_per_itr": [[46, 51], ["range"], "methods", ["None"], ["", "@", "peers_per_itr", ".", "setter", "\n", "def", "peers_per_itr", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "_peers_per_itr", "=", "v", "\n", "# set group-indices attr. --- point to out-peers in phone-book", "\n", "self", ".", "_group_indices", "=", "[", "i", "for", "i", "in", "range", "(", "v", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager._make_graph": [[52, 59], ["None"], "methods", ["None"], ["", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a nested list of peers; the outer-list is indexed by rank,\n        the inner list denotes the set of peers that 'rank' can send\n        messages to at any point in time\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager._add_peers": [[60, 68], ["graph_manager.GraphManager.phone_book[].append", "graph_manager.Edge"], "methods", ["None"], ["", "def", "_add_peers", "(", "self", ",", "rank", ",", "peers", ")", ":", "\n", "        ", "for", "peer", "in", "peers", ":", "\n", "            ", "if", "peer", "not", "in", "self", ".", "phone_book", "[", "rank", "]", ":", "\n", "                ", "self", ".", "phone_book", "[", "rank", "]", ".", "append", "(", "Edge", "(", "\n", "local_master_rank", "=", "(", "self", ".", "rank", "*", "self", ".", "nprocs_per_node", ")", ",", "\n", "dest", "=", "(", "peer", "*", "self", ".", "nprocs_per_node", ")", ",", "\n", "src", "=", "(", "rank", "*", "self", ".", "nprocs_per_node", ")", ",", "\n", "local_rank", "=", "self", ".", "local_rank", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.is_regular_graph": [[69, 72], ["None"], "methods", ["None"], ["", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether each node has the same number of in-peers as out-peers \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.is_bipartite_graph": [[73, 76], ["None"], "methods", ["None"], ["", "def", "is_bipartite_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether graph is bipartite or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.is_passive": [[77, 80], ["None"], "methods", ["None"], ["", "def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "\"\"\" Whether 'rank' is a passive node or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.is_dynamic_graph": [[81, 84], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "\n", "        ", "\"\"\" Whether the graph-type is dynamic (as opposed to static) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.get_peers": [[85, 101], ["graph_manager.GraphManager._rotate_group_indices", "out_peers.append", "enumerate", "in_peers.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_group_indices"], ["", "def", "get_peers", "(", "self", ",", "rotate", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the out and in-peers corresponding to 'self.rank' \"\"\"", "\n", "# cycle through in- and out-peers by updating group-index", "\n", "if", "rotate", ":", "\n", "            ", "self", ".", "_rotate_group_indices", "(", ")", "\n", "\n", "# get out- and in-peers using new group-indices", "\n", "", "out_peers", ",", "in_peers", "=", "[", "]", ",", "[", "]", "\n", "for", "group_index", "in", "self", ".", "_group_indices", ":", "\n", "            ", "out_peers", ".", "append", "(", "self", ".", "phone_book", "[", "self", ".", "rank", "]", "[", "group_index", "]", ".", "dest", ")", "\n", "for", "rank", ",", "peers", "in", "enumerate", "(", "self", ".", "phone_book", ")", ":", "\n", "                ", "if", "rank", "==", "self", ".", "rank", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "rank", "*", "self", ".", "nprocs_per_node", "==", "peers", "[", "group_index", "]", ".", "dest", ":", "\n", "                    ", "in_peers", ".", "append", "(", "rank", ")", "\n", "", "", "", "return", "out_peers", ",", "in_peers", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager.get_edges": [[102, 121], ["graph_manager.GraphManager._rotate_group_indices", "out_edges.append", "enumerate", "in_edges.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_group_indices"], ["", "def", "get_edges", "(", "self", ",", "rotate", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the pairwise process groups between rank and the out and\n        in-peers corresponding to 'self.rank' \"\"\"", "\n", "# cycle through in- and out-peers by updating group-index", "\n", "if", "rotate", ":", "\n", "            ", "self", ".", "_rotate_group_indices", "(", ")", "\n", "\n", "# get out- and in-peers using new group-indices", "\n", "", "out_edges", ",", "in_edges", "=", "[", "]", ",", "[", "]", "\n", "for", "group_index", "in", "self", ".", "_group_indices", ":", "\n", "            ", "out_edges", ".", "append", "(", "\n", "self", ".", "phone_book", "[", "self", ".", "rank", "]", "[", "group_index", "]", ")", "\n", "for", "rank", ",", "edges", "in", "enumerate", "(", "self", ".", "phone_book", ")", ":", "\n", "                ", "if", "rank", "==", "self", ".", "rank", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "rank", "*", "self", ".", "nprocs_per_node", "==", "edges", "[", "group_index", "]", ".", "dest", ":", "\n", "                    ", "in_edges", ".", "append", "(", "\n", "self", ".", "phone_book", "[", "rank", "]", "[", "group_index", "]", ")", "\n", "", "", "", "return", "out_edges", ",", "in_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager._rotate_group_indices": [[122, 128], ["enumerate", "int", "len"], "methods", ["None"], ["", "def", "_rotate_group_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\" Incerement group indices to point to the next out-peer \"\"\"", "\n", "increment", "=", "self", ".", "peers_per_itr", "\n", "for", "i", ",", "group_index", "in", "enumerate", "(", "self", ".", "_group_indices", ")", ":", "\n", "            ", "self", ".", "_group_indices", "[", "i", "]", "=", "int", "(", "(", "group_index", "+", "increment", ")", "\n", "%", "len", "(", "self", ".", "phone_book", "[", "self", ".", "rank", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager._rotate_forward": [[129, 132], ["None"], "methods", ["None"], ["", "", "def", "_rotate_forward", "(", "self", ",", "r", ",", "p", ")", ":", "\n", "        ", "\"\"\" Helper function returns peer that is p hops ahead of r \"\"\"", "\n", "return", "(", "r", "+", "p", ")", "%", "self", ".", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GraphManager._rotate_backward": [[133, 141], ["range"], "methods", ["None"], ["", "def", "_rotate_backward", "(", "self", ",", "r", ",", "p", ")", ":", "\n", "        ", "\"\"\" Helper function returns peer that is p hops behind r \"\"\"", "\n", "temp", "=", "r", "\n", "for", "_", "in", "range", "(", "p", ")", ":", "\n", "            ", "temp", "-=", "1", "\n", "if", "temp", "<", "0", ":", "\n", "                ", "temp", "=", "self", ".", "world_size", "-", "1", "\n", "", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedExponentialGraph._make_graph": [[145, 151], ["range", "range", "graph_manager.DynamicDirectedExponentialGraph._rotate_forward", "graph_manager.DynamicDirectedExponentialGraph._rotate_backward", "graph_manager.DynamicDirectedExponentialGraph._add_peers", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "2", ")", ")", "+", "1", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "2", "**", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "2", "**", "i", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedExponentialGraph.is_regular_graph": [[152, 153], ["None"], "methods", ["None"], ["", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedExponentialGraph.is_bipartite_graph": [[154, 155], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedExponentialGraph.is_passive": [[156, 157], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedExponentialGraph.is_dynamic_graph": [[158, 159], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.NPeerDynamicDirectedExponentialGraph._make_graph": [[163, 171], ["range", "range", "range", "int", "graph_manager.NPeerDynamicDirectedExponentialGraph._rotate_forward", "graph_manager.NPeerDynamicDirectedExponentialGraph._add_peers", "math.log"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "\n", "self", ".", "_peers_per_itr", "+", "1", ")", ")", "+", "1", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "1", ",", "self", ".", "_peers_per_itr", "+", "1", ")", ":", "\n", "                    ", "distance_to_neighbor", "=", "j", "*", "(", "(", "self", ".", "_peers_per_itr", "+", "1", ")", "**", "i", ")", "\n", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "distance_to_neighbor", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.NPeerDynamicDirectedExponentialGraph.is_regular_graph": [[172, 173], ["None"], "methods", ["None"], ["", "", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.NPeerDynamicDirectedExponentialGraph.is_bipartite_graph": [[174, 175], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.NPeerDynamicDirectedExponentialGraph.is_passive": [[176, 177], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.NPeerDynamicDirectedExponentialGraph.is_dynamic_graph": [[178, 179], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteExponentialGraph._make_graph": [[183, 200], ["range", "range", "int", "graph_manager.DynamicBipartiteExponentialGraph._rotate_forward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_backward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_forward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_backward", "graph_manager.DynamicBipartiteExponentialGraph._add_peers", "math.log", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph._add_peers", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "2", ")", ")", "+", "1", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", "+", "2", "**", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", "+", "2", "**", "i", ")", "\n", "# create directory for non-passive peers", "\n", "", "if", "not", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "self", ".", "is_passive", "(", "f_peer", ")", "and", "self", ".", "is_passive", "(", "b_peer", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "# create directory for passive peers", "\n", "", "elif", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "not", "(", "self", ".", "is_passive", "(", "f_peer", ")", "or", "self", ".", "is_passive", "(", "b_peer", ")", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteExponentialGraph.is_regular_graph": [[201, 202], ["None"], "methods", ["None"], ["", "", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteExponentialGraph.is_bipartite_graph": [[203, 204], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteExponentialGraph.is_passive": [[205, 208], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "if", "rank", "is", "None", "else", "rank", "\n", "return", "(", "rank", "%", "2", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteExponentialGraph.is_dynamic_graph": [[209, 210], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedLinearGraph._make_graph": [[214, 222], ["range", "range", "graph_manager.DynamicDirectedLinearGraph._rotate_forward", "graph_manager.DynamicDirectedLinearGraph._rotate_backward", "graph_manager.DynamicDirectedLinearGraph._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "if", "i", "%", "2", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "i", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedLinearGraph.is_regular_graph": [[223, 224], ["None"], "methods", ["None"], ["", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedLinearGraph.is_bipartite_graph": [[225, 226], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedLinearGraph.is_passive": [[227, 228], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicDirectedLinearGraph.is_dynamic_graph": [[229, 230], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteLinearGraph._make_graph": [[234, 247], ["range", "range", "graph_manager.DynamicBipartiteLinearGraph._rotate_forward", "graph_manager.DynamicBipartiteLinearGraph._rotate_backward", "graph_manager.DynamicBipartiteLinearGraph._add_peers", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph._add_peers", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "i", ")", "\n", "# create directory for non-passive peers", "\n", "if", "not", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "self", ".", "is_passive", "(", "f_peer", ")", "and", "self", ".", "is_passive", "(", "b_peer", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "# create directory for passive peers", "\n", "", "elif", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "not", "(", "self", ".", "is_passive", "(", "f_peer", ")", "or", "self", ".", "is_passive", "(", "b_peer", ")", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteLinearGraph.is_regular_graph": [[248, 249], ["None"], "methods", ["None"], ["", "", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteLinearGraph.is_bipartite_graph": [[250, 251], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteLinearGraph.is_passive": [[252, 255], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "if", "rank", "is", "None", "else", "rank", "\n", "return", "(", "rank", "%", "2", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.DynamicBipartiteLinearGraph.is_dynamic_graph": [[256, 257], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.RingGraph._make_graph": [[261, 266], ["range", "graph_manager.RingGraph._rotate_forward", "graph_manager.RingGraph._rotate_backward", "graph_manager.RingGraph._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.RingGraph.is_regular_graph": [[267, 268], ["None"], "methods", ["None"], ["", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.RingGraph.is_bipartite_graph": [[269, 270], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.RingGraph.is_passive": [[271, 272], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.RingGraph.is_dynamic_graph": [[273, 274], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GridGraph._make_graph": [[279, 287], ["range", "graph_manager.GridGraph._rotate_forward", "graph_manager.GridGraph._rotate_backward", "graph_manager.GridGraph._rotate_forward", "graph_manager.GridGraph._rotate_backward", "graph_manager.GridGraph._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "a", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "c", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "4", ")", "\n", "d", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "4", ")", "\n", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "a", ",", "b", ",", "c", ",", "d", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GridGraph.is_regular_graph": [[288, 289], ["None"], "methods", ["None"], ["", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GridGraph.is_bipartite_graph": [[290, 291], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GridGraph.is_passive": [[292, 293], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.graph_manager.GridGraph.is_dynamic_graph": [[294, 295], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "False", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.__init__": [[31, 86], ["isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gossiper.Gossiper._graph_manager.is_passive", "gossiper.Gossiper.refresh_peers_", "isinstance", "gossiper.Gossiper.refresh_mixing_weights_", "msg.clone().detach_().to", "gossiper.Gossiper.in_msg_buffer.clone", "torch.is_initialized", "torch.is_initialized", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "mixing_manager.UniformMixing", "msg.clone().detach_", "gossiper.Gossiper.in_msg_buffer.pin_memory", "msg.clone", "gossiper.Gossiper.logger.error"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_peers_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_mixing_weights_"], ["def", "__init__", "(", "self", ",", "msg", ",", "graph", ",", "device", "=", "None", ",", "mixing", "=", "None", ",", "logger", "=", "None", ",", "\n", "rank", "=", "None", ",", "world_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize generic averaging class designed for multi-peer comms\n\n        :param msg: (tensor) message used to initialize recv buffer\n        :param device: (device) device on which to initialize recv buffer\n        :param graph: (GraphManager) Subclass of GraphManager\n        :param mixing: (MixingManager) Subclass of MixingManager\n        :param logger: (python logger) module used to log results\n        \"\"\"", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "if", "rank", "is", "None", "or", "world_size", "is", "None", ":", "\n", "            ", "assert", "dist", ".", "is_initialized", "(", ")", "\n", "# for now p2p communication only supported withed tcp and mpi", "\n", "assert", "dist", ".", "_backend", "!=", "dist_backend", ".", "GLOO", "\n", "assert", "dist", ".", "_backend", "!=", "dist_backend", ".", "NCCL", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "# graph topology properties", "\n", "", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "assert", "isinstance", "(", "graph", ",", "GraphManager", ")", "\n", "self", ".", "_graph_manager", "=", "graph", "\n", "self", ".", "peers_per_itr_device", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "_graph_manager", ".", "peers_per_itr", "]", ",", "device", "=", "device", ",", "\n", "dtype", "=", "msg", ".", "dtype", ")", "\n", "self", ".", "passive", "=", "self", ".", "_graph_manager", ".", "is_passive", "(", ")", "\n", "self", ".", "refresh_peers_", "(", "iteration", "=", "0", ",", "epoch", "=", "0", ",", "rotate", "=", "False", ")", "# sets in- and out-peers attributes", "\n", "\n", "# mixing matrix", "\n", "if", "mixing", "is", "None", ":", "\n", "            ", "mixing", "=", "UniformMixing", "(", "self", ".", "_graph_manager", ",", "device", ")", "\n", "", "assert", "isinstance", "(", "mixing", ",", "MixingManager", ")", "\n", "self", ".", "_mixing_manager", "=", "mixing", "\n", "self", ".", "refresh_mixing_weights_", "(", ")", "# sets mixing-weights attribute", "\n", "\n", "\n", "# msg buffers used during send/recv", "\n", "self", ".", "device", "=", "device", "if", "device", "is", "not", "None", "else", "msg", ".", "device", "\n", "self", ".", "out_msg_buffer", "=", "[", "]", "\n", "self", ".", "in_msg_buffer", "=", "msg", ".", "clone", "(", ")", ".", "detach_", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "device", ".", "type", "==", "'cpu'", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "in_msg_buffer", "=", "self", ".", "in_msg_buffer", ".", "pin_memory", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "logger", ".", "error", "(", "e", ")", "\n", "", "", "", "self", ".", "placeholder", "=", "self", ".", "in_msg_buffer", ".", "clone", "(", ")", "\n", "#print(self.placeholder.size())", "\n", "\n", "self", ".", "_pending_req", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.peers_per_itr": [[91, 94], ["None"], "methods", ["None"], ["", "@", "peers_per_itr", ".", "setter", "\n", "def", "peers_per_itr", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "_graph_manager", ".", "peers_per_itr", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.refresh_peers_": [[95, 105], ["gossiper.Gossiper._graph_manager.is_dynamic_graph", "gossiper.Gossiper._graph_manager.get_edges"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_dynamic_graph", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.get_edges"], ["", "def", "refresh_peers_", "(", "self", ",", "iteration", ",", "epoch", ",", "rotate", "=", "None", ")", ":", "\n", "        ", "\"\"\" Update in- and out-peers \"\"\"", "\n", "# if rotate is None:", "\n", "#     rotate = True if self._graph_manager.is_dynamic_graph() else False", "\n", "# cannot cycle peers in a static graph", "\n", "#assert not (rotate and not self._graph_manager.is_dynamic_graph())", "\n", "if", "self", ".", "_graph_manager", ".", "is_dynamic_graph", "(", ")", ":", "\n", "            ", "if", "iteration", "%", "1", "==", "0", ":", "\n", "                ", "rotate", "=", "True", "\n", "", "", "self", ".", "out_edges", ",", "self", ".", "in_edges", "=", "self", ".", "_graph_manager", ".", "get_edges", "(", "rotate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.refresh_mixing_weights_": [[107, 110], ["gossiper.Gossiper._mixing_manager.get_mixing_weights"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.get_mixing_weights"], ["", "def", "refresh_mixing_weights_", "(", "self", ")", ":", "\n", "        ", "\"\"\" Update mixing-matrix weights \"\"\"", "\n", "self", ".", "mixing_weights", "=", "self", ".", "_mixing_manager", ".", "get_mixing_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.mix_out_msg_": [[112, 138], ["gossiper.Gossiper.refresh_mixing_weights_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.Gossiper._mixing_manager.is_uniform", "weight.type", "gossiper.Gossiper.ps_weight.type", "torch.cat.mul", "torch.cat.mul", "gossiper.Gossiper.mixing_weights[].type", "torch.cat.mul", "torch.cat.mul", "weight.type"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_mixing_weights_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.is_uniform"], ["", "def", "mix_out_msg_", "(", "self", ",", "out_msg", ",", "ps_weight", ",", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns a generator mixing messages on the fly \"\"\"", "\n", "self", ".", "refresh_mixing_weights_", "(", ")", "\n", "self", ".", "ps_weight", "=", "ps_weight", "\n", "\n", "# check whether or not we need to communicate ps_weight", "\n", "# if not self.regular:", "\n", "out_msg", "=", "torch", ".", "cat", "(", "[", "out_msg", ",", "self", ".", "ps_weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "]", ")", "\n", "\n", "# first return 'loopback msg to self'", "\n", "if", "not", "residual", ":", "\n", "            ", "yield", "out_msg", ".", "mul", "(", "self", ".", "mixing_weights", "[", "'uniform'", "]", ".", "type", "(", "out_msg", ".", "dtype", ")", ")", "\n", "\n", "# check whether or not we need to create a buffer for each out-msg", "\n", "", "if", "self", ".", "_mixing_manager", ".", "is_uniform", "(", ")", ":", "\n", "            ", "weight", "=", "self", ".", "mixing_weights", "[", "'uniform'", "]", "\n", "\n", "#print(weight)", "\n", "#weight = self.mixing_weights['try']", "\n", "out_msg", "*=", "weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "\n", "for", "_", "in", "self", ".", "out_edges", ":", "\n", "                ", "yield", "out_msg", "\n", "", "", "else", ":", "\n", "            ", "for", "out_edge", "in", "self", ".", "out_edges", ":", "\n", "                ", "weight", "=", "self", ".", "mixing_weights", "[", "out_edge", ".", "dest", "]", "\n", "yield", "out_msg", ".", "mul", "(", "weight", ".", "type", "(", "out_msg", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.mix_self_msg_": [[139, 148], ["gossiper.Gossiper.refresh_mixing_weights_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.Gossiper._mixing_manager.is_uniform", "weight.type", "gossiper.Gossiper.ps_weight.type"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_mixing_weights_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.is_uniform"], ["", "", "", "def", "mix_self_msg_", "(", "self", ",", "out_msg", ",", "ps_weight", ",", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns a generator mixing messages on the fly \"\"\"", "\n", "self", ".", "refresh_mixing_weights_", "(", ")", "\n", "self", ".", "ps_weight", "=", "ps_weight", "\n", "out_msg", "=", "torch", ".", "cat", "(", "[", "out_msg", ",", "self", ".", "ps_weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "]", ")", "\n", "if", "self", ".", "_mixing_manager", ".", "is_uniform", "(", ")", ":", "\n", "            ", "weight", "=", "self", ".", "mixing_weights", "[", "'uniform'", "]", "-", "1.0", "\n", "out_msg", "*=", "weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "\n", "yield", "out_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.clean_msg_buffers_": [[149, 160], ["len", "gossiper.Gossiper.out_msg_buffer.pop", "req.wait", "msgs.append", "len", "msgs.pop", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "msgs.pop.set_"], "methods", ["None"], ["", "", "def", "clean_msg_buffers_", "(", "self", ")", ":", "\n", "        ", "\"\"\" Clean outgoing message buffer \"\"\"", "\n", "msgs", "=", "[", "]", "\n", "while", "len", "(", "self", ".", "out_msg_buffer", ")", ">", "0", ":", "\n", "            ", "req", ",", "msg", "=", "self", ".", "out_msg_buffer", ".", "pop", "(", ")", "\n", "req", ".", "wait", "(", ")", "\n", "msgs", ".", "append", "(", "msg", ")", "\n", "", "while", "len", "(", "msgs", ")", ">", "0", ":", "\n", "            ", "msg", "=", "msgs", ".", "pop", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "msg", ".", "set_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.parse_in_msg_buffer": [[161, 171], ["msg.narrow", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "", "def", "parse_in_msg_buffer", "(", "self", ",", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\" Parse in-msg buffer and return msg and ps-weight separately \"\"\"", "\n", "msg", "=", "self", ".", "in_msg_buffer", "\n", "if", "not", "self", ".", "regular", ":", "\n", "            ", "return", "msg", ".", "narrow", "(", "0", ",", "0", ",", "len", "(", "msg", ")", "-", "1", ")", ",", "msg", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "if", "residual", ":", "\n", "                ", "return", "msg", ",", "self", ".", "ps_weight", "*", "self", ".", "peers_per_itr_device", "\n", "", "else", ":", "\n", "                ", "return", "msg", ",", "torch", ".", "ones", "(", "1", ",", "device", "=", "self", ".", "device", ")", ".", "type", "(", "msg", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.mix": [[172, 175], ["None"], "methods", ["None"], ["", "", "", "def", "mix", "(", "self", ")", ":", "\n", "        ", "\"\"\" Single gossip step \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.SGD_DS.mix": [[181, 243], ["copy.deepcopy", "copy.deepcopy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gossiper.SGD_DS.in_msg_buffer.zero_", "next", "gossiper.SGD_DS.in_msg_buffer.copy_", "gossiper.SGD_DS.refresh_peers_", "gossiper.SGD_DS.clean_msg_buffers_", "gossiper.SGD_DS.in_msg_buffer.narrow", "gossiper.SGD_DS.logger.debug", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.SGD_DS.mix_out_msg_", "gossiper.SGD_DS.mix_out_msg_", "next", "torch.broadcast", "torch.broadcast", "gossiper.SGD_DS.out_msg_buffer.append", "utils.unsparsify_layerwise", "utils.flatten_tensors", "gossiper.SGD_DS.mix_self_msg_", "gossiper.SGD_DS.mix_self_msg_", "torch.broadcast", "torch.broadcast", "gossiper.SGD_DS.in_msg_buffer.add_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.unsparsify_layerwise", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.SGD_DS.placeholder.copy_", "gossiper.SGD_DS.placeholder.copy_", "len", "int", "int", "torch.cat.nelement", "torch.cat.nelement", "torch.cat.element_size", "torch.cat.element_size", "torch.cat.nelement", "torch.cat.nelement", "torch.zeros_like.narrow", "torch.zeros_like.narrow", "msg[].view", "torch.cat.element_size", "torch.cat.element_size", "utils.flatten_tensors", "in_weight.view", "len", "len", "torch.cat.nelement", "torch.cat.nelement", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_peers_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.clean_msg_buffers_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.mix_out_msg_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.mix_out_msg_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unsparsify_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.mix_self_msg_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_ds.gossiper.Gossiper.mix_self_msg_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unsparsify_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors"], ["def", "mix", "(", "self", ",", "out_msg", ",", "ref_msg", ",", "ps_weight", ",", "epoch", ",", "iteration", ",", "residual", "=", "False", ",", "uncompress", "=", "False", ",", "shapes", "=", "None", ")", ":", "\n", "        ", "\"\"\" Consensus averaging step \"\"\"", "\n", "# out_msg must be on the correct device", "\n", "assert", "out_msg", ".", "device", ".", "type", "==", "self", ".", "device", ".", "type", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'in/out -peers {}/{}'", "\n", ".", "format", "(", "self", ".", "in_edges", ",", "self", ".", "out_edges", ")", ")", "\n", "\n", "# prepare messages for gossip", "\n", "", "out_copy", "=", "copy", ".", "deepcopy", "(", "out_msg", ")", "\n", "ps_copy", "=", "copy", ".", "deepcopy", "(", "ps_weight", ")", "\n", "placeholder", "=", "torch", ".", "zeros_like", "(", "torch", ".", "cat", "(", "[", "out_msg", ",", "ps_weight", "]", ")", ")", "\n", "if", "uncompress", ":", "\n", "            ", "values", "=", "out_msg", "[", ":", "int", "(", "len", "(", "out_msg", ")", "/", "2", ")", "]", "\n", "indices", "=", "out_msg", "[", "int", "(", "len", "(", "out_msg", ")", "/", "2", ")", ":", "]", "\n", "mixed_out_msgs", "=", "self", ".", "mix_out_msg_", "(", "values", ",", "ps_weight", ",", "residual", ")", "\n", "", "else", ":", "\n", "            ", "mixed_out_msgs", "=", "self", ".", "mix_out_msg_", "(", "out_msg", ",", "ps_weight", ",", "residual", ")", "\n", "\n", "# non-blocking send", "\n", "# print(len(self.out_edges), len(self.in_edges))", "\n", "", "data_amt", "=", "0", "\n", "for", "out_edge", "in", "self", ".", "out_edges", ":", "\n", "            ", "msg", "=", "next", "(", "mixed_out_msgs", ")", "\n", "if", "uncompress", ":", "\n", "                ", "msg", "=", "torch", ".", "cat", "(", "[", "msg", "[", "0", ":", "(", "len", "(", "msg", ")", "-", "1", ")", "]", ",", "indices", ",", "msg", "[", "-", "1", "]", ".", "view", "(", "1", ")", "]", ")", "\n", "", "assert", "self", ".", "rank", "==", "out_edge", ".", "src", "\n", "req", "=", "dist", ".", "broadcast", "(", "tensor", "=", "msg", ",", "src", "=", "out_edge", ".", "src", ",", "group", "=", "out_edge", ".", "process_group", ",", "async_op", "=", "True", ")", "\n", "self", ".", "out_msg_buffer", ".", "append", "(", "(", "req", ",", "msg", ")", ")", "\n", "if", "uncompress", ":", "\n", "                ", "data_amt", "+=", "(", "(", "msg", ".", "element_size", "(", ")", "*", "(", "msg", ".", "nelement", "(", ")", "/", "2", ")", ")", "+", "msg", ".", "nelement", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "data_amt", "+=", "msg", ".", "element_size", "(", ")", "*", "msg", ".", "nelement", "(", ")", "\n", "# blocking recv w/ some code optimization to avoid buffer prep overhead", "\n", "\n", "", "", "self", ".", "in_msg_buffer", ".", "zero_", "(", ")", "\n", "if", "uncompress", ":", "\n", "           ", "msg_temp", "=", "unsparsify_layerwise", "(", "out_copy", ",", "shapes", ",", "ref_msg", ")", "\n", "msg_in", "=", "flatten_tensors", "(", "msg_temp", ")", "\n", "mixed_self_msg", "=", "self", ".", "mix_self_msg_", "(", "msg_in", ",", "ps_copy", ",", "residual", ")", "\n", "", "else", ":", "\n", "            ", "mixed_self_msg", "=", "self", ".", "mix_self_msg_", "(", "out_copy", ",", "ps_copy", ",", "residual", ")", "\n", "\n", "\n", "", "msg_mix", "=", "next", "(", "mixed_self_msg", ")", "\n", "self", ".", "in_msg_buffer", ".", "copy_", "(", "msg_mix", ")", "\n", "for", "in_edge", "in", "self", ".", "in_edges", ":", "\n", "            ", "dist", ".", "broadcast", "(", "tensor", "=", "placeholder", ",", "src", "=", "in_edge", ".", "src", ",", "group", "=", "in_edge", ".", "process_group", ")", "\n", "if", "uncompress", ":", "\n", "                ", "in_weight", "=", "placeholder", "[", "-", "1", "]", "\n", "received_temp", "=", "unsparsify_layerwise", "(", "placeholder", ".", "narrow", "(", "0", ",", "0", ",", "len", "(", "placeholder", ")", "-", "1", ")", ",", "shapes", ",", "ref_msg", ")", "\n", "received_msg", "=", "torch", ".", "cat", "(", "[", "flatten_tensors", "(", "received_temp", ")", ",", "in_weight", ".", "view", "(", "1", ")", "]", ")", "\n", "self", ".", "placeholder", ".", "copy_", "(", "received_msg", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "placeholder", ".", "copy_", "(", "placeholder", ")", "\n", "", "self", ".", "in_msg_buffer", ".", "add_", "(", "self", ".", "placeholder", ")", "\n", "\n", "", "self", ".", "refresh_peers_", "(", "epoch", "=", "epoch", ",", "iteration", "=", "iteration", ")", "\n", "self", ".", "clean_msg_buffers_", "(", ")", "\n", "in_msg", "=", "self", ".", "in_msg_buffer", ".", "narrow", "(", "0", ",", "0", ",", "len", "(", "self", ".", "in_msg_buffer", ")", "-", "1", ")", "\n", "updated_ps_weight", "=", "self", ".", "in_msg_buffer", "[", "-", "1", "]", "\n", "return", "in_msg", ",", "updated_ps_weight", ",", "data_amt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.metering.Meter.__init__": [[10, 31], ["metering.Meter.reset", "print"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "ptag", "=", "ptag", "\n", "self", ".", "value_history", "=", "None", "\n", "self", ".", "stateful", "=", "stateful", "\n", "if", "self", ".", "stateful", ":", "\n", "            ", "self", ".", "value_history", "=", "[", "]", "\n", "", "self", ".", "csv_format", "=", "csv_format", "\n", "if", "init_dict", "is", "not", "None", ":", "\n", "            ", "for", "key", "in", "init_dict", ":", "\n", "                ", "try", ":", "\n", "# TODO: add type checking to init_dict values", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "init_dict", "[", "key", "]", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "'(Warning) Invalid key {} in init_dict'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.metering.Meter.reset": [[32, 40], ["None"], "methods", ["None"], ["self", ".", "std", "=", "0", "\n", "self", ".", "sqsum", "=", "0", "\n", "self", ".", "mad", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.metering.Meter.update": [[41, 57], ["metering.Meter.value_history.append", "abs", "len"], "methods", ["None"], ["self", ".", "sqsum", "+=", "(", "val", "**", "2", ")", "*", "n", "\n", "if", "self", ".", "count", ">", "1", ":", "\n", "            ", "self", ".", "std", "=", "(", "(", "self", ".", "sqsum", "-", "(", "self", ".", "sum", "**", "2", ")", "/", "self", ".", "count", ")", "\n", "/", "(", "self", ".", "count", "-", "1", ")", "\n", ")", "**", "0.5", "\n", "", "if", "self", ".", "stateful", ":", "\n", "            ", "self", ".", "value_history", ".", "append", "(", "val", ")", "\n", "mad", "=", "0", "\n", "for", "v", "in", "self", ".", "value_history", ":", "\n", "                ", "mad", "+=", "abs", "(", "v", "-", "self", ".", "avg", ")", "\n", "", "self", ".", "mad", "=", "mad", "/", "len", "(", "self", ".", "value_history", ")", "\n", "\n", "", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "csv_format", ":", "\n", "            ", "if", "self", ".", "stateful", ":", "\n", "                ", "return", "str", "(", "'{dm.val:.3f},{dm.avg:.3f},{dm.mad:.3f}'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.metering.Meter.__str__": [[58, 75], ["str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "else", ":", "\n", "                ", "return", "str", "(", "'{dm.val:.3f},{dm.avg:.3f},{dm.std:.3f}'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "stateful", ":", "\n", "                ", "return", "str", "(", "self", ".", "ptag", ")", "+", "str", "(", "': {dm.val:.3f} ({dm.avg:.3f} +- {dm.mad:.3f})'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "str", "(", "self", ".", "ptag", ")", "+", "str", "(", "': {dm.val:.3f} ({dm.avg:.3f} +- {dm.std:.3f})'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors": [[16, 32], ["torch.cat", "torch.cat", "len", "tensors[].view().clone", "t.view", "tensors[].view"], "function", ["None"], ["def", "flatten_tensors", "(", "tensors", ")", ":", "\n", "    ", "\"\"\"\n    Flatten dense tensors into a contiguous 1D buffer. Assume tensors are of\n    same dense type.\n    Since inputs are dense, the resulting tensor will be a concatenated 1D\n    buffer. Element-wise operation on this buffer will be equivalent to\n    operating individually.\n    Arguments:\n        tensors (Iterable[Tensor]): dense tensors to flatten.\n    Returns:\n        A 1D buffer containing input tensors.\n    \"\"\"", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "", "flat", "=", "torch", ".", "cat", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "tensors", "]", ",", "dim", "=", "0", ")", "\n", "return", "flat", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unflatten_tensors": [[34, 53], ["tuple", "tensor.numel", "outputs.append", "flat.narrow().view_as", "flat.narrow"], "function", ["None"], ["", "def", "unflatten_tensors", "(", "flat", ",", "tensors", ")", ":", "\n", "    ", "\"\"\"\n    View a flat buffer using the sizes of tensors. Assume that tensors are of\n    same dense type, and that flat is given by flatten_dense_tensors.\n    Arguments:\n        flat (Tensor): flattened dense tensors to unflatten.\n        tensors (Iterable[Tensor]): dense tensors whose sizes will be used to\n            unflatten flat.\n    Returns:\n        Unflattened dense tensors with sizes same as tensors and values from\n        flat.\n    \"\"\"", "\n", "outputs", "=", "[", "]", "\n", "offset", "=", "0", "\n", "for", "tensor", "in", "tensors", ":", "\n", "        ", "numel", "=", "tensor", ".", "numel", "(", ")", "\n", "outputs", ".", "append", "(", "flat", ".", "narrow", "(", "0", ",", "offset", ",", "numel", ")", ".", "view_as", "(", "tensor", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unflatten": [[54, 60], ["tensor.numel", "flat.narrow().view_as", "flat.narrow"], "function", ["None"], ["", "def", "unflatten", "(", "flat", ",", "tensor", ")", ":", "\n", "\n", "   ", "offset", "=", "0", "\n", "numel", "=", "tensor", ".", "numel", "(", ")", "\n", "output", "=", "(", "flat", ".", "narrow", "(", "0", ",", "offset", ",", "numel", ")", ".", "view_as", "(", "tensor", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype": [[62, 73], ["collections.defaultdict", "tensors_by_dtype[].append"], "function", ["None"], ["", "def", "group_by_dtype", "(", "tensors", ")", ":", "\n", "    ", "\"\"\"\n    Returns a dict mapping from the tensor dtype to a list containing all\n    tensors of that dtype.\n    Arguments:\n        tensors (Iterable[Tensor]): list of tensors.\n    \"\"\"", "\n", "tensors_by_dtype", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "        ", "tensors_by_dtype", "[", "tensor", ".", "dtype", "]", ".", "append", "(", "tensor", ")", "\n", "", "return", "tensors_by_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.communicate": [[75, 91], ["helpers.group_by_dtype", "helpers.flatten_tensors", "communication_op", "zip", "helpers.unflatten_tensors", "t.set_"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unflatten_tensors"], ["", "def", "communicate", "(", "tensors", ",", "communication_op", ")", ":", "\n", "    ", "\"\"\"\n    Communicate a list of tensors.\n    Arguments:\n        tensors (Iterable[Tensor]): list of tensors.\n        communication_op: a method or partial object which takes a tensor as\n            input and communicates it. It can be a partial object around\n            something like torch.distributed.all_reduce.\n    \"\"\"", "\n", "tensors_by_dtype", "=", "group_by_dtype", "(", "tensors", ")", "\n", "for", "dtype", "in", "tensors_by_dtype", ":", "\n", "        ", "flat_tensor", "=", "flatten_tensors", "(", "tensors_by_dtype", "[", "dtype", "]", ")", "\n", "communication_op", "(", "tensor", "=", "flat_tensor", ")", "\n", "for", "f", ",", "t", "in", "zip", "(", "unflatten_tensors", "(", "flat_tensor", ",", "tensors_by_dtype", "[", "dtype", "]", ")", ",", "\n", "tensors_by_dtype", "[", "dtype", "]", ")", ":", "\n", "            ", "t", ".", "set_", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.make_logger": [[93, 117], ["logging.getLogger", "getattr", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "getattr", "logging.Formatter", "logging.getLogger.setLevel", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "", "def", "make_logger", "(", "rank", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Return a logger for writing to stdout;\n    Arguments:\n        rank (int): rank of node making logger\n        verbose (bool): whether to set log-level to INFO; o.w. WARNING\n    Returns:\n        Python logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "if", "not", "getattr", "(", "logger", ",", "'handler_set'", ",", "None", ")", ":", "\n", "        ", "console", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "format_str", "=", "'{}'", ".", "format", "(", "rank", ")", "\n", "format_str", "+=", "': %(levelname)s -- %(threadName)s -- %(message)s'", "\n", "console", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "format_str", ")", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "# prints to console", "\n", "logger", ".", "handler_set", "=", "True", "\n", "", "if", "not", "getattr", "(", "logger", ",", "'level_set'", ",", "None", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "logger", ".", "level_set", "=", "True", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.is_power_of": [[119, 131], ["isinstance", "isinstance", "int", "round", "math.log"], "function", ["None"], ["", "def", "is_power_of", "(", "N", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Returns True if N is a power of k\n    \"\"\"", "\n", "assert", "isinstance", "(", "N", ",", "int", ")", "and", "isinstance", "(", "k", ",", "int", ")", "\n", "assert", "k", ">=", "0", "and", "N", ">", "0", "\n", "if", "k", "==", "0", "and", "N", "==", "1", ":", "\n", "        ", "return", "True", "\n", "", "if", "k", "in", "(", "0", ",", "1", ")", "and", "N", "!=", "1", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "k", "**", "int", "(", "round", "(", "math", ".", "log", "(", "N", ",", "k", ")", ")", ")", "==", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.create_process_group": [[133, 149], ["torch.Tensor", "torch.Tensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.new_group", "torch.all_reduce", "initializer_tensor.cuda.cuda"], "function", ["None"], ["", "def", "create_process_group", "(", "ranks", ")", ":", "\n", "    ", "\"\"\"\n    Creates and lazy intializes a new process group. Assumes init_process_group\n    has already been called.\n    Arguments:\n        ranks (list<int>): ranks corresponding to the processes which should\n            belong the created process group\n    Returns:\n        new process group\n    \"\"\"", "\n", "initializer_tensor", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "initializer_tensor", "=", "initializer_tensor", ".", "cuda", "(", ")", "\n", "", "new_group", "=", "dist", ".", "new_group", "(", "ranks", ")", "\n", "dist", ".", "all_reduce", "(", "initializer_tensor", ",", "group", "=", "new_group", ")", "\n", "return", "new_group", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.quantize_tensor": [[150, 157], ["copy.deepcopy", "comp_fn.compress"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.compress"], ["", "def", "quantize_tensor", "(", "out_msg", ",", "comp_fn", ",", "quantization_level", ",", "is_biased", "=", "True", ")", ":", "\n", "#print(quantization_level)", "\n", "    ", "out_msg_comp", "=", "copy", ".", "deepcopy", "(", "out_msg", ")", "\n", "quantized_values", "=", "comp_fn", ".", "compress", "(", "out_msg_comp", ",", "None", ",", "quantization_level", ",", "is_biased", ")", "\n", "#print(out_msg-quantized_values)", "\n", "\n", "return", "quantized_values", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.quantize_layerwise": [[158, 169], ["comp_fn.compress", "quantized_values.append"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.compress"], ["", "def", "quantize_layerwise", "(", "out_msg", ",", "comp_fn", ",", "quantization_level", ",", "is_biased", "=", "True", ")", ":", "\n", "#print(quantization_level)", "\n", "    ", "quantized_values", "=", "[", "]", "\n", "\n", "for", "param", "in", "out_msg", ":", "\n", "# quantize.", "\n", "#print(param.size())", "\n", "        ", "_quantized_values", "=", "comp_fn", ".", "compress", "(", "param", ",", "None", ",", "quantization_level", ",", "is_biased", ")", "\n", "quantized_values", ".", "append", "(", "_quantized_values", ")", "\n", "\n", "", "return", "quantized_values", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.sparsify_layerwise": [[170, 186], ["helpers.flatten_tensors", "helpers.flatten_tensors", "torch.cat", "torch.cat", "helpers.flatten_tensors", "comp_fn.compress", "selected_values.append", "selected_indices.append", "selected_shapes.append", "len", "flatten_tensors.type"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.compress"], ["", "def", "sparsify_layerwise", "(", "out_msg", ",", "comp_fn", ",", "comp_op", ",", "compression_ratio", ",", "is_biased", "=", "True", ")", ":", "\n", "    ", "selected_values", "=", "[", "]", "\n", "selected_indices", "=", "[", "]", "\n", "selected_shapes", "=", "[", "]", "\n", "\n", "for", "param", "in", "out_msg", ":", "\n", "#print(param.shape, param.size(0))", "\n", "#        if param.size(0)==1:", "\n", "#            ratio = 0", "\n", "#        else:", "\n", "#            ratio=compression_ratio", "\n", "#print(ratio)", "\n", "\n", "        ", "p", "=", "flatten_tensors", "(", "param", ")", "\n", "values", ",", "indices", "=", "comp_fn", ".", "compress", "(", "p", ",", "comp_op", ",", "compression_ratio", ",", "is_biased", ")", "\n", "selected_values", ".", "append", "(", "values", ")", "\n", "selected_indices", ".", "append", "(", "indices", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unsparsify_layerwise": [[187, 211], ["int", "indices.type.type", "torch.zeros_like", "torch.zeros_like", "helpers.flatten_tensors", "layer_values.type", "helpers.unflatten", "out_msg.append", "len"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unflatten"], ["selected_shapes", ".", "append", "(", "len", "(", "values", ")", ")", "# should be same for all nodes, length of compressed tensor at each layer", "\n", "\n", "", "flat_values", "=", "flatten_tensors", "(", "selected_values", ")", "\n", "flat_indices", "=", "flatten_tensors", "(", "selected_indices", ")", "\n", "comp_msg", "=", "torch", ".", "cat", "(", "[", "flat_values", ",", "flat_indices", ".", "type", "(", "flat_values", ".", "dtype", ")", "]", ")", "\n", "return", "comp_msg", ",", "selected_shapes", "\n", "\n", "", "def", "unsparsify_layerwise", "(", "msg", ",", "shapes", ",", "ref_param", ")", ":", "\n", "# ref_msg is the out_msg from sparsify_layerwise.....need it just for the shape", "\n", "#sparse_msg = torch.zeros_like(ref_param)", "\n", "    ", "out_msg", "=", "[", "]", "\n", "val_size", "=", "int", "(", "len", "(", "msg", ")", "/", "2", ")", "\n", "values", "=", "msg", "[", ":", "val_size", "]", "\n", "indices", "=", "msg", "[", "val_size", ":", "]", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "pointer", "=", "0", "\n", "i", "=", "0", "\n", "for", "ref", "in", "ref_param", ":", "\n", "        ", "param", "=", "torch", ".", "zeros_like", "(", "ref", ")", "\n", "p", "=", "flatten_tensors", "(", "param", ")", "\n", "layer_values", "=", "values", "[", "pointer", ":", "(", "pointer", "+", "shapes", "[", "i", "]", ")", "]", "\n", "layer_indices", "=", "indices", "[", "pointer", ":", "(", "pointer", "+", "shapes", "[", "i", "]", ")", "]", "\n", "p", "[", "layer_indices", "]", "=", "layer_values", ".", "type", "(", "ref", ".", "data", ".", "dtype", ")", "\n", "layer_msg", "=", "unflatten", "(", "p", ",", "ref", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy.CrossEntropyLoss.__init__": [[73, 79], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ",", "\n", "smooth_eps", "=", "None", ",", "smooth_dist", "=", "None", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", "\n", "weight", ",", "size_average", ",", "ignore_index", ",", "reduce", ")", "\n", "self", ".", "smooth_eps", "=", "smooth_eps", "\n", "self", ".", "smooth_dist", "=", "smooth_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy.CrossEntropyLoss.forward": [[80, 83], ["cross_entropy.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy.cross_entropy"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "cross_entropy", "(", "input", ",", "target", ",", "self", ".", "weight", ",", "self", ".", "size_average", ",", "\n", "self", ".", "ignore_index", ",", "self", ".", "reduce", ",", "self", ".", "smooth_eps", ",", "self", ".", "smooth_dist", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy._is_long": [[8, 12], ["hasattr", "isinstance", "isinstance"], "function", ["None"], ["def", "_is_long", "(", "x", ")", ":", "\n", "    ", "if", "hasattr", "(", "x", ",", "'data'", ")", ":", "\n", "        ", "x", "=", "x", ".", "data", "\n", "", "return", "isinstance", "(", "x", ",", "torch", ".", "LongTensor", ")", "or", "isinstance", "(", "x", ",", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy.cross_entropy": [[14, 68], ["cross_entropy._is_long", "torch.log_softmax", "logits.size", "cross_entropy._is_long", "torch.cross_entropy", "torch.kl_div", "torch.kl_div", "logits.size", "misc.onehot().type_as", "torch.lerp", "torch.lerp", "torch.lerp", "weight.unsqueeze", "F.kl_div.masked_fill_", "torch.lerp.eq", "smooth_dist.unsqueeze", "target.eq.unsqueeze", "weight.unsqueeze", "F.kl_div.mean", "F.kl_div.sum", "math.log", "misc.onehot", "math.log", "torch.lerp.log"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy._is_long", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy._is_long", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.cross_entropy.cross_entropy", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.misc.onehot"], ["", "def", "cross_entropy", "(", "logits", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ",", "smooth_eps", "=", "None", ",", "smooth_dist", "=", "None", ")", ":", "\n", "    ", "\"\"\"cross entropy loss, with support for target distributions and label smoothing https://arxiv.org/abs/1512.00567\"\"\"", "\n", "smooth_eps", "=", "smooth_eps", "or", "0", "\n", "onehot_smoothing", "=", "False", "\n", "if", "smooth_eps", ">", "0", ":", "\n", "        ", "num_classes", "=", "logits", ".", "size", "(", "-", "1", ")", "\n", "mask_idx", "=", "None", "\n", "if", "_is_long", "(", "target", ")", ":", "\n", "            ", "if", "ignore_index", ">=", "0", ":", "\n", "                ", "mask_idx", "=", "target", ".", "eq", "(", "ignore_index", ")", "\n", "", "target", "=", "onehot", "(", "target", ",", "num_classes", ")", ".", "type_as", "(", "logits", ")", "\n", "", "if", "smooth_dist", "is", "None", ":", "\n", "            ", "target", "=", "(", "1", "-", "smooth_eps", ")", "*", "target", "+", "smooth_eps", "/", "num_classes", "\n", "onehot_smoothing", "=", "True", "\n", "", "else", ":", "\n", "            ", "target", "=", "torch", ".", "lerp", "(", "\n", "target", ",", "smooth_dist", ".", "unsqueeze", "(", "0", ")", ",", "smooth_eps", ")", "\n", "\n", "# ordinary log-liklihood - use cross_entropy from nn", "\n", "", "", "if", "_is_long", "(", "target", ")", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "logits", ",", "target", ",", "weight", ",", "size_average", ",", "\n", "ignore_index", ",", "reduce", ")", "\n", "\n", "# cross entropy with real target distribution", "\n", "", "lsm", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "target", "=", "target", "*", "weight", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "mask_idx", "is", "None", "and", "weight", "is", "None", ":", "\n", "        ", "kl", "=", "F", ".", "kl_div", "(", "lsm", ",", "target", ",", "size_average", "=", "size_average", ",", "reduce", "=", "reduce", ")", "\n", "", "else", ":", "\n", "        ", "kl", "=", "F", ".", "kl_div", "(", "lsm", ",", "target", ",", "size_average", "=", "size_average", ",", "reduce", "=", "False", ")", "\n", "if", "mask_idx", "is", "not", "None", ":", "\n", "            ", "kl", ".", "masked_fill_", "(", "mask_idx", ".", "unsqueeze", "(", "1", ")", ",", "0", ")", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "kl", "=", "kl", "*", "weight", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "reduce", ":", "\n", "            ", "kl", "=", "kl", ".", "mean", "(", ")", "if", "size_average", "else", "kl", ".", "sum", "(", ")", "\n", "\n", "# for label smoothing with parameter eps:", "\n", "", "", "if", "onehot_smoothing", ":", "\n", "        ", "entropy", "=", "-", "(", "math", ".", "log", "(", "1", "-", "smooth_eps", ")", "+", "smooth_eps", "*", "\n", "math", ".", "log", "(", "smooth_eps", "/", "(", "(", "num_classes", "-", "1", ")", "*", "(", "1", "-", "smooth_eps", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "entropy", "=", "-", "(", "target", "*", "target", ".", "log", "(", ")", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "size_average", ":", "\n", "        ", "kl", "*=", "num_classes", "\n", "entropy", "/=", "logits", ".", "size", "(", "0", ")", "\n", "", "ce", "=", "kl", "+", "entropy", "\n", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.RandomSamplerReplacment.__init__": [[11, 13], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.RandomSamplerReplacment.__iter__": [[14, 16], ["iter", "torch.from_numpy", "numpy.random.choice"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "torch", ".", "from_numpy", "(", "choice", "(", "self", ".", "num_samples", ",", "self", ".", "num_samples", ",", "replace", "=", "True", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.RandomSamplerReplacment.__len__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.LimitDataset.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dset", ",", "max_len", ")", ":", "\n", "        ", "self", ".", "dset", "=", "dset", "\n", "self", ".", "max_len", "=", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.LimitDataset.__len__": [[27, 29], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "dset", ")", ",", "self", ".", "max_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.LimitDataset.__getitem__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.ByClassDataset.__init__": [[35, 41], ["enumerate", "dataset.ByClassDataset.idx_by_class.setdefault", "dataset.ByClassDataset.idx_by_class[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ds", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "ds", "\n", "self", ".", "idx_by_class", "=", "{", "}", "\n", "for", "idx", ",", "(", "_", ",", "c", ")", "in", "enumerate", "(", "ds", ")", ":", "\n", "            ", "self", ".", "idx_by_class", ".", "setdefault", "(", "c", ",", "[", "]", ")", "\n", "self", ".", "idx_by_class", "[", "c", "]", ".", "append", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.ByClassDataset.__len__": [[42, 44], ["min", "len", "dataset.ByClassDataset.idx_by_class.values"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "[", "len", "(", "d", ")", "for", "d", "in", "self", ".", "idx_by_class", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.ByClassDataset.__getitem__": [[45, 55], ["torch.LongTensor", "torch.is_tensor", "torch.stack", "range", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx_per_class", "=", "[", "self", ".", "idx_by_class", "[", "c", "]", "[", "idx", "]", "\n", "for", "c", "in", "range", "(", "len", "(", "self", ".", "idx_by_class", ")", ")", "]", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "dataset", "[", "i", "]", "[", "1", "]", "\n", "for", "i", "in", "idx_per_class", "]", ")", "\n", "items", "=", "[", "self", ".", "dataset", "[", "i", "]", "[", "0", "]", "for", "i", "in", "idx_per_class", "]", "\n", "if", "torch", ".", "is_tensor", "(", "items", "[", "0", "]", ")", ":", "\n", "            ", "items", "=", "torch", ".", "stack", "(", "items", ")", "\n", "\n", "", "return", "(", "items", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.IdxDataset.__init__": [[60, 64], ["torch.utils.data.Dataset.__init__", "range", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "dset", ")", ":", "\n", "        ", "super", "(", "IdxDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dset", "=", "dset", "\n", "self", ".", "idxs", "=", "range", "(", "len", "(", "self", ".", "dset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.IdxDataset.__getitem__": [[65, 68], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", ",", "labels", "=", "self", ".", "dset", "[", "self", ".", "idxs", "[", "idx", "]", "]", "\n", "return", "(", "idx", ",", "data", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.dataset.IdxDataset.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AverageMeter.__init__": [[7, 9], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AverageMeter.reset": [[10, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AverageMeter.update": [[16, 21], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.__init__": [[26, 31], ["torch.FloatTensor().fill_", "torch.FloatTensor().zero_", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "-", "1", ")", "\n", "self", ".", "M2", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "zero_", "(", ")", "\n", "self", ".", "count", "=", "0.", "\n", "self", ".", "needs_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.reset": [[32, 37], ["x.new().zero_", "x.new().zero_", "x.new", "x.new", "x.size", "x.size"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "mean", "=", "x", ".", "new", "(", "x", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "M2", "=", "x", ".", "new", "(", "x", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "count", "=", "0.", "\n", "self", ".", "needs_init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.update": [[38, 47], ["meters.OnlineMeter.mean.add_", "meters.OnlineMeter.M2.add_", "meters.OnlineMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "val", "=", "x", "\n", "if", "self", ".", "needs_init", ":", "\n", "            ", "self", ".", "reset", "(", "x", ")", "\n", "", "self", ".", "count", "+=", "1", "\n", "delta", "=", "x", "-", "self", ".", "mean", "\n", "self", ".", "mean", ".", "add_", "(", "delta", "/", "self", ".", "count", ")", "\n", "delta2", "=", "x", "-", "self", ".", "mean", "\n", "self", ".", "M2", ".", "add_", "(", "delta", "*", "delta2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.var": [[48, 53], ["meters.OnlineMeter.M2.clone().zero_", "meters.OnlineMeter.M2.clone"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", "<", "2", ":", "\n", "            ", "return", "self", ".", "M2", ".", "clone", "(", ")", ".", "zero_", "(", ")", "\n", "", "return", "self", ".", "M2", "/", "(", "self", ".", "count", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.std": [[54, 57], ["meters.OnlineMeter.var().sqrt", "meters.OnlineMeter.var"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.var"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "var", "(", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AccuracyMeter.__init__": [[78, 81], ["meters.AccuracyMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "self", ".", "topk", "=", "topk", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AccuracyMeter.reset": [[82, 86], ["meters.AverageMeter"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_meters", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "topk", ":", "\n", "            ", "self", ".", "_meters", "[", "k", "]", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AccuracyMeter.update": [[87, 92], ["target.nelement", "meters.accuracy", "enumerate", "meters.AccuracyMeter._meters[].update"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.accuracy", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update"], ["", "", "def", "update", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "n", "=", "target", ".", "nelement", "(", ")", "\n", "acc_vals", "=", "accuracy", "(", "output", ",", "target", ",", "self", ".", "topk", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "topk", ")", ":", "\n", "            ", "self", ".", "_meters", "[", "k", "]", ".", "update", "(", "acc_vals", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AccuracyMeter.val": [[93, 96], ["meters.AccuracyMeter._meters.items"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "{", "n", ":", "meter", ".", "val", "for", "(", "n", ",", "meter", ")", "in", "self", ".", "_meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AccuracyMeter.avg": [[97, 100], ["meters.AccuracyMeter._meters.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "{", "n", ":", "meter", ".", "avg", "for", "(", "n", ",", "meter", ")", "in", "self", ".", "_meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.AccuracyMeter.avg_error": [[101, 104], ["meters.AccuracyMeter._meters.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg_error", "(", "self", ")", ":", "\n", "        ", "return", "{", "n", ":", "100.", "-", "meter", ".", "avg", "for", "(", "n", ",", "meter", ")", "in", "self", ".", "_meters", ".", "items", "(", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.accuracy": [[59, 73], ["max", "target.size", "output.topk", "pred.t().type_as.t().type_as", "pred.t().type_as.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "pred.t().type_as.t", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", ".", "type_as", "(", "target", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.misc.onehot": [[23, 38], ["list", "indexes.new().byte().resize_().zero_", "indexes.new().byte().resize_().zero_.scatter_", "indexes.size", "indexes.unsqueeze", "indexes.new().byte().resize_().zero_.masked_fill_", "indexes.max", "indexes.new().byte().resize_", "indexes.eq().unsqueeze", "indexes.new().byte", "indexes.eq", "indexes.new"], "function", ["None"], ["def", "onehot", "(", "indexes", ",", "N", "=", "None", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Creates a one-representation of indexes with N possible entries\n    if N is not specified, it will suit the maximum index appearing.\n    indexes is a long-tensor of indexes\n    ignore_index will be zero in onehot representation\n    \"\"\"", "\n", "if", "N", "is", "None", ":", "\n", "        ", "N", "=", "indexes", ".", "max", "(", ")", "+", "1", "\n", "", "sz", "=", "list", "(", "indexes", ".", "size", "(", ")", ")", "\n", "output", "=", "indexes", ".", "new", "(", ")", ".", "byte", "(", ")", ".", "resize_", "(", "*", "sz", ",", "N", ")", ".", "zero_", "(", ")", "\n", "output", ".", "scatter_", "(", "-", "1", ",", "indexes", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "\n", "if", "ignore_index", "is", "not", "None", "and", "ignore_index", ">=", "0", ":", "\n", "        ", "output", ".", "masked_fill_", "(", "indexes", ".", "eq", "(", "ignore_index", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.misc.set_global_seeds": [[40, 51], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_global_seeds", "(", "i", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "torch", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "i", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "i", ")", "\n", "", "", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "random", ".", "seed", "(", "i", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.__init__": [[61, 111], ["log.ResultsLog.clear", "os.path.isfile", "ValueError", "log.export_args_namespace", "pandas.DataFrame", "hyperdash.Experiment", "log.ResultsLog.load", "os.remove", "pandas.DataFrame", "params._get_kwargs", "log.ResultsLog.hd_experiment.param"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.export_args_namespace", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.load", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.remove"], ["def", "__init__", "(", "self", ",", "path", "=", "''", ",", "title", "=", "''", ",", "params", "=", "None", ",", "resume", "=", "False", ",", "data_format", "=", "'csv'", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        path: string\n            path to directory to save data files\n        plot_path: string\n            path to directory to save plot files\n        title: string\n            title of HTML file\n        params: Namespace\n            optionally save parameters for results\n        resume: bool\n            resume previous logging\n        data_format: str('csv'|'json')\n            which file format to use to save the data\n        \"\"\"", "\n", "if", "data_format", "not", "in", "ResultsLog", ".", "supported_data_formats", ":", "\n", "            ", "raise", "ValueError", "(", "'data_format must of the following: '", "+", "\n", "'|'", ".", "join", "(", "[", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "ResultsLog", ".", "supported_data_formats", "]", ")", ")", "\n", "\n", "", "if", "data_format", "==", "'json'", ":", "\n", "            ", "self", ".", "data_path", "=", "'{}.json'", ".", "format", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_path", "=", "'{}.csv'", ".", "format", "(", "path", ")", "\n", "", "if", "params", "is", "not", "None", ":", "\n", "            ", "export_args_namespace", "(", "params", ",", "'{}.json'", ".", "format", "(", "path", ")", ")", "\n", "", "self", ".", "plot_path", "=", "'{}.html'", ".", "format", "(", "path", ")", "\n", "self", ".", "results", "=", "None", "\n", "self", ".", "clear", "(", ")", "\n", "self", ".", "first_save", "=", "True", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "data_path", ")", ":", "\n", "            ", "if", "resume", ":", "\n", "                ", "self", ".", "load", "(", "self", ".", "data_path", ")", "\n", "self", ".", "first_save", "=", "False", "\n", "", "else", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "data_path", ")", "\n", "self", ".", "results", "=", "pd", ".", "DataFrame", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "results", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "", "self", ".", "title", "=", "title", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n", "if", "HYPERDASH_AVAILABLE", ":", "\n", "            ", "name", "=", "self", ".", "title", "if", "title", "!=", "''", "else", "path", "\n", "self", ".", "hd_experiment", "=", "hyperdash", ".", "Experiment", "(", "name", ")", "\n", "if", "params", "is", "not", "None", ":", "\n", "                ", "for", "k", ",", "v", "in", "params", ".", "_get_kwargs", "(", ")", ":", "\n", "                    ", "self", ".", "hd_experiment", ".", "param", "(", "k", ",", "v", ",", "log", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear": [[112, 114], ["None"], "methods", ["None"], ["", "", "", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "figures", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.add": [[115, 126], ["pandas.DataFrame", "log.ResultsLog.results.append", "hasattr", "kwargs.items", "kwargs.values", "kwargs.keys", "log.ResultsLog.hd_experiment.metric"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Add a new row to the dataframe\n        example:\n            resultsLog.add(epoch=epoch_num, train_loss=loss,\n                           test_loss=test_loss)\n        \"\"\"", "\n", "df", "=", "pd", ".", "DataFrame", "(", "[", "kwargs", ".", "values", "(", ")", "]", ",", "columns", "=", "kwargs", ".", "keys", "(", ")", ")", "\n", "self", ".", "results", "=", "self", ".", "results", ".", "append", "(", "df", ",", "ignore_index", "=", "True", ")", "\n", "if", "hasattr", "(", "self", ",", "'hd_experiment'", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "hd_experiment", ".", "metric", "(", "k", ",", "v", ",", "log", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.smooth": [[127, 133], ["log.ResultsLog.results[].rolling().mean", "log.ResultsLog.results[].rolling"], "methods", ["None"], ["", "", "", "def", "smooth", "(", "self", ",", "column_name", ",", "window", ")", ":", "\n", "        ", "\"\"\"Select an entry to smooth over time\"\"\"", "\n", "# TODO: smooth only new data", "\n", "smoothed_column", "=", "self", ".", "results", "[", "column_name", "]", ".", "rolling", "(", "\n", "window", "=", "window", ",", "center", "=", "False", ")", ".", "mean", "(", ")", "\n", "self", ".", "results", "[", "column_name", "+", "'_smoothed'", "]", "=", "smoothed_column", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save": [[134, 160], ["len", "os.path.isfile", "bokeh.io.output_file", "bokeh.layouts.column", "bokeh.io.save", "log.ResultsLog.clear", "log.ResultsLog.results.to_json", "log.ResultsLog.results.to_csv", "os.remove", "logging.info", "bokeh.models.Div", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.remove"], ["", "def", "save", "(", "self", ",", "title", "=", "None", ")", ":", "\n", "        ", "\"\"\"save the json file.\n        Parameters\n        ----------\n        title: string\n            title of the HTML file\n        \"\"\"", "\n", "title", "=", "title", "or", "self", ".", "title", "\n", "if", "len", "(", "self", ".", "figures", ")", ">", "0", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "plot_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "plot_path", ")", "\n", "", "if", "self", ".", "first_save", ":", "\n", "                ", "self", ".", "first_save", "=", "False", "\n", "logging", ".", "info", "(", "'Plot file saved at: {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "abspath", "(", "self", ".", "plot_path", ")", ")", ")", "\n", "\n", "", "output_file", "(", "self", ".", "plot_path", ",", "title", "=", "title", ")", "\n", "plot", "=", "column", "(", "\n", "Div", "(", "text", "=", "'<h1 align=\"center\">{}</h1>'", ".", "format", "(", "title", ")", ")", ",", "*", "self", ".", "figures", ")", "\n", "save", "(", "plot", ")", "\n", "self", ".", "clear", "(", ")", "\n", "\n", "", "if", "self", ".", "data_format", "==", "'json'", ":", "\n", "            ", "self", ".", "results", ".", "to_json", "(", "self", ".", "data_path", ",", "orient", "=", "'records'", ",", "lines", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results", ".", "to_csv", "(", "self", ".", "data_path", ",", "index", "=", "False", ",", "index_label", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.load": [[161, 176], ["os.path.isfile", "ValueError", "log.ResultsLog.results.read_json", "log.ResultsLog.results.read_csv"], "methods", ["None"], ["", "", "def", "load", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "\"\"\"load the data file\n        Parameters\n        ----------\n        path:\n            path to load the json|csv file from\n        \"\"\"", "\n", "path", "=", "path", "or", "self", ".", "data_path", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'json'", ":", "\n", "                ", "self", ".", "results", ".", "read_json", "(", "path", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "results", ".", "read_csv", "(", "path", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'{} isn'", "'t a file'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.show": [[177, 183], ["len", "bokeh.layouts.column", "bokeh.io.show", "bokeh.models.Div"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.show"], ["", "", "def", "show", "(", "self", ",", "title", "=", "None", ")", ":", "\n", "        ", "title", "=", "title", "or", "self", ".", "title", "\n", "if", "len", "(", "self", ".", "figures", ")", ">", "0", ":", "\n", "            ", "plot", "=", "column", "(", "\n", "Div", "(", "text", "=", "'<h1 align=\"center\">{}</h1>'", ".", "format", "(", "title", ")", ")", ",", "*", "self", ".", "figures", ")", "\n", "show", "(", "plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.plot": [[184, 211], ["bokeh.plotting.figure", "itertools.cycle", "enumerate", "log.ResultsLog.figures.append", "isinstance", "len", "len", "bokeh.plotting.figure.line", "next"], "methods", ["None"], ["", "", "def", "plot", "(", "self", ",", "x", ",", "y", ",", "title", "=", "None", ",", "xlabel", "=", "None", ",", "ylabel", "=", "None", ",", "legend", "=", "None", ",", "\n", "width", "=", "800", ",", "height", "=", "400", ",", "line_width", "=", "2", ",", "\n", "colors", "=", "[", "'red'", ",", "'green'", ",", "'blue'", ",", "'orange'", ",", "\n", "'black'", ",", "'purple'", ",", "'brown'", "]", ",", "\n", "tools", "=", "'pan,box_zoom,wheel_zoom,box_select,hover,reset,save'", ")", ":", "\n", "        ", "\"\"\"\n        add a new plot to the HTML file\n        example:\n            results.plot(x='epoch', y=['train_loss', 'val_loss'],\n                         'title='Loss', 'ylabel'='loss')\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "y", ",", "list", ")", ":", "\n", "            ", "y", "=", "[", "y", "]", "\n", "", "xlabel", "=", "xlabel", "or", "x", "\n", "legend", "=", "legend", "or", "y", "\n", "assert", "len", "(", "legend", ")", "==", "len", "(", "y", ")", "\n", "f", "=", "figure", "(", "title", "=", "title", ",", "tools", "=", "tools", ",", "\n", "width", "=", "width", ",", "height", "=", "height", ",", "\n", "x_axis_label", "=", "xlabel", "or", "x", ",", "\n", "y_axis_label", "=", "ylabel", "or", "''", ")", "\n", "colors", "=", "cycle", "(", "colors", ")", "\n", "for", "i", ",", "yi", "in", "enumerate", "(", "y", ")", ":", "\n", "            ", "f", ".", "line", "(", "self", ".", "results", "[", "x", "]", ",", "self", ".", "results", "[", "yi", "]", ",", "\n", "line_width", "=", "line_width", ",", "\n", "line_color", "=", "next", "(", "colors", ")", ",", "legend", "=", "legend", "[", "i", "]", ")", "\n", "", "f", ".", "legend", ".", "click_policy", "=", "\"hide\"", "\n", "self", ".", "figures", ".", "append", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.image": [[212, 216], ["bokeh.plotting.figure", "bokeh.plotting.figure.image", "log.ResultsLog.figures.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.image"], ["", "def", "image", "(", "self", ",", "*", "kargs", ",", "**", "kwargs", ")", ":", "\n", "        ", "fig", "=", "figure", "(", ")", "\n", "fig", ".", "image", "(", "*", "kargs", ",", "**", "kwargs", ")", "\n", "self", ".", "figures", ".", "append", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.end": [[217, 220], ["hasattr", "log.ResultsLog.hd_experiment.end"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.end"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'hd_experiment'", ")", ":", "\n", "            ", "self", ".", "hd_experiment", ".", "end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.export_args_namespace": [[22, 31], ["open", "json.dump", "dict", "args._get_kwargs"], "function", ["None"], ["", "def", "export_args_namespace", "(", "args", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    args: argparse.Namespace\n        arguments to save\n    filename: string\n        filename to save at\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "dict", "(", "args", ".", "_get_kwargs", "(", ")", ")", ",", "fp", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.setup_logging": [[33, 55], ["logging.getLogger", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "os.path.isfile", "logging.getLogger.removeHandler", "logging.getLogger"], "function", ["None"], ["", "", "def", "setup_logging", "(", "log_file", "=", "'log.txt'", ",", "resume", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "log_file", ")", "and", "resume", ":", "\n", "        ", "file_mode", "=", "'a'", "\n", "", "else", ":", "\n", "        ", "file_mode", "=", "'w'", "\n", "\n", "", "root_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "root_logger", ".", "handlers", ":", "\n", "        ", "root_logger", ".", "removeHandler", "(", "root_logger", ".", "handlers", "[", "0", "]", ")", "\n", "", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "\n", "format", "=", "\"%(asctime)s - %(levelname)s - %(message)s\"", ",", "\n", "datefmt", "=", "\"%Y-%m-%d %H:%M:%S\"", ",", "\n", "filename", "=", "log_file", ",", "\n", "filemode", "=", "file_mode", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.save_checkpoint": [[222, 230], ["os.path.join", "torch.save", "shutil.copyfile", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "path", "=", "'.'", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "save_all", "=", "False", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "if", "save_all", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'checkpoint_epoch_%s.pth.tar'", "%", "state", "[", "'epoch'", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.absorb_bn": [[5, 24], ["bn_module.running_var.clone().add_().pow_", "w.mul_", "b.add_().mul_", "bn_module.register_buffer", "bn_module.register_buffer", "bn_module.register_parameter", "bn_module.register_parameter", "torch.Tensor().zero_().type", "torch.Tensor().zero_().type", "torch.Parameter", "bn_module.running_var.clone().add_().pow_.view().expand_as", "w.mul_", "b.mul_().add_", "w.type", "bn_module.running_var.clone().add_", "b.add_", "bn_module.weight.data.view().expand_as", "torch.Tensor().zero_", "torch.Tensor().zero_", "bn_module.running_var.clone().add_().pow_.view", "b.mul_", "bn_module.running_var.clone", "w.size", "bn_module.weight.data.view", "torch.Tensor", "torch.Tensor", "w.size"], "function", ["None"], ["def", "absorb_bn", "(", "module", ",", "bn_module", ")", ":", "\n", "    ", "w", "=", "module", ".", "weight", ".", "data", "\n", "if", "module", ".", "bias", "is", "None", ":", "\n", "        ", "zeros", "=", "torch", ".", "Tensor", "(", "module", ".", "out_channels", ")", ".", "zero_", "(", ")", ".", "type", "(", "w", ".", "type", "(", ")", ")", "\n", "module", ".", "bias", "=", "nn", ".", "Parameter", "(", "zeros", ")", "\n", "", "b", "=", "module", ".", "bias", ".", "data", "\n", "invstd", "=", "bn_module", ".", "running_var", ".", "clone", "(", ")", ".", "add_", "(", "bn_module", ".", "eps", ")", ".", "pow_", "(", "-", "0.5", ")", "\n", "w", ".", "mul_", "(", "invstd", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "b", ".", "add_", "(", "-", "bn_module", ".", "running_mean", ")", ".", "mul_", "(", "invstd", ")", "\n", "\n", "if", "bn_module", ".", "affine", ":", "\n", "        ", "w", ".", "mul_", "(", "bn_module", ".", "weight", ".", "data", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "b", ".", "mul_", "(", "bn_module", ".", "weight", ".", "data", ")", ".", "add_", "(", "bn_module", ".", "bias", ".", "data", ")", "\n", "\n", "", "bn_module", ".", "register_buffer", "(", "'running_mean'", ",", "None", ")", "\n", "bn_module", ".", "register_buffer", "(", "'running_var'", ",", "None", ")", "\n", "bn_module", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "bn_module", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "bn_module", ".", "affine", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.is_bn": [[26, 28], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "is_bn", "(", "m", ")", ":", "\n", "    ", "return", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.is_absorbing": [[30, 32], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "is_absorbing", "(", "m", ")", ":", "\n", "    ", "return", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.search_absorbe_bn": [[34, 41], ["model.children", "absorb_bn.search_absorbe_bn", "absorb_bn.is_bn", "absorb_bn.is_absorbing", "absorb_bn.absorb_bn"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.search_absorbe_bn", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.is_bn", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.is_absorbing", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.absorb_bn.absorb_bn"], ["", "def", "search_absorbe_bn", "(", "model", ")", ":", "\n", "    ", "prev", "=", "None", "\n", "for", "m", "in", "model", ".", "children", "(", ")", ":", "\n", "        ", "if", "is_bn", "(", "m", ")", "and", "is_absorbing", "(", "prev", ")", ":", "\n", "            ", "absorb_bn", "(", "prev", ",", "m", ")", "\n", "", "search_absorbe_bn", "(", "m", ")", "\n", "prev", "=", "m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.__init__": [[34, 39], ["torch.optim.SGD"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ",", "regime", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "0", ")", "\n", "self", ".", "regime", "=", "regime", "\n", "self", ".", "current_regime_phase", "=", "None", "\n", "self", ".", "setting", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.update": [[40, 82], ["copy.deepcopy", "enumerate", "len", "optim.OptimRegime.regime[].get", "optim.OptimRegime.regime[].get", "copy.deepcopy.get", "optim.OptimRegime.adjust", "regime_setting.get", "regime_setting.get", "float", "float", "copy.deepcopy.update", "optim.eval_func", "copy.deepcopy.update", "optim.eval_func"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.adjust", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.eval_func", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.eval_func"], ["", "def", "update", "(", "self", ",", "epoch", ",", "train_steps", ")", ":", "\n", "        ", "\"\"\"adjusts optimizer according to current epoch or steps and training regime.\n        \"\"\"", "\n", "if", "self", ".", "regime", "is", "None", ":", "\n", "            ", "return", "\n", "", "update_optimizer", "=", "False", "\n", "if", "self", ".", "current_regime_phase", "is", "None", ":", "\n", "            ", "update_optimizer", "=", "True", "\n", "setting", "=", "{", "}", "\n", "# Find the first entry where the epoch is smallest than current", "\n", "for", "regime_phase", ",", "regime_setting", "in", "enumerate", "(", "self", ".", "regime", ")", ":", "\n", "                ", "start_epoch", "=", "regime_setting", ".", "get", "(", "'epoch'", ",", "0", ")", "\n", "start_step", "=", "regime_setting", ".", "get", "(", "'step'", ",", "0", ")", "\n", "if", "epoch", ">=", "start_epoch", "or", "train_steps", ">=", "start_step", ":", "\n", "                    ", "self", ".", "current_regime_phase", "=", "regime_phase", "\n", "break", "\n", "", "", "", "if", "len", "(", "self", ".", "regime", ")", ">", "self", ".", "current_regime_phase", "+", "1", ":", "\n", "            ", "next_phase", "=", "self", ".", "current_regime_phase", "+", "1", "\n", "# Any more regime steps?", "\n", "start_epoch", "=", "self", ".", "regime", "[", "next_phase", "]", ".", "get", "(", "'epoch'", ",", "float", "(", "'inf'", ")", ")", "\n", "start_step", "=", "self", ".", "regime", "[", "next_phase", "]", ".", "get", "(", "'step'", ",", "float", "(", "'inf'", ")", ")", "\n", "if", "epoch", ">=", "start_epoch", "or", "train_steps", ">=", "start_step", ":", "\n", "                ", "self", ".", "current_regime_phase", "=", "next_phase", "\n", "update_optimizer", "=", "True", "\n", "\n", "", "", "setting", "=", "deepcopy", "(", "self", ".", "regime", "[", "self", ".", "current_regime_phase", "]", ")", "\n", "\n", "if", "'lr_decay_rate'", "in", "setting", "and", "'lr'", "in", "setting", ":", "\n", "            ", "decay_steps", "=", "setting", ".", "get", "(", "'lr_decay_steps'", ",", "100", ")", "\n", "if", "train_steps", "%", "decay_steps", "==", "0", ":", "\n", "                ", "decay_rate", "=", "setting", "[", "'lr_decay_rate'", "]", "\n", "setting", "[", "'lr'", "]", "*=", "decay_rate", "**", "(", "train_steps", "/", "decay_steps", ")", "\n", "update_optimizer", "=", "True", "\n", "", "", "elif", "'step_lambda'", "in", "setting", ":", "\n", "            ", "setting", ".", "update", "(", "eval_func", "(", "setting", "[", "'step_lambda'", "]", ",", "train_steps", ")", ")", "\n", "update_optimizer", "=", "True", "\n", "", "elif", "'epoch_lambda'", "in", "setting", ":", "\n", "            ", "setting", ".", "update", "(", "eval_func", "(", "setting", "[", "'epoch_lambda'", "]", ",", "epoch", ")", ")", "\n", "update_optimizer", "=", "True", "\n", "\n", "", "if", "update_optimizer", ":", "\n", "            ", "self", ".", "adjust", "(", "setting", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.adjust": [[83, 102], ["copy.deepcopy", "param_group.keys", "isinstance", "optim_method", "logging.debug", "logging.debug"], "methods", ["None"], ["", "", "def", "adjust", "(", "self", ",", "setting", ")", ":", "\n", "        ", "\"\"\"adjusts optimizer according to a setting dict.\n        e.g: setting={optimizer': 'Adam', 'lr': 5e-4}\n        \"\"\"", "\n", "if", "'optimizer'", "in", "setting", ":", "\n", "            ", "optim_method", "=", "torch", ".", "optim", ".", "__dict__", "[", "setting", "[", "'optimizer'", "]", "]", "\n", "if", "not", "isinstance", "(", "self", ".", "optimizer", ",", "optim_method", ")", ":", "\n", "                ", "self", ".", "optimizer", "=", "optim_method", "(", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "logging", ".", "debug", "(", "'OPTIMIZER - setting method = %s'", "%", "\n", "setting", "[", "'optimizer'", "]", ")", "\n", "", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "for", "key", "in", "param_group", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "in", "setting", ":", "\n", "                    ", "new_val", "=", "setting", "[", "key", "]", "\n", "if", "new_val", "!=", "param_group", "[", "key", "]", ":", "\n", "                        ", "logging", ".", "debug", "(", "'OPTIMIZER - setting %s = %s'", "%", "\n", "(", "key", ",", "setting", "[", "key", "]", ")", ")", "\n", "param_group", "[", "key", "]", "=", "setting", "[", "key", "]", "\n", "", "", "", "", "self", ".", "setting", "=", "deepcopy", "(", "setting", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.__getstate__": [[103, 107], ["optim.OptimRegime.optimizer.__getstate__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'optimizer_state'", ":", "self", ".", "optimizer", ".", "__getstate__", "(", ")", ",", "\n", "'regime'", ":", "self", ".", "regime", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.__setstate__": [[109, 112], ["state.get", "optim.OptimRegime.optimizer.__setstate__", "state.get"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "regime", "=", "state", ".", "get", "(", "'regime'", ")", "\n", "self", ".", "optimizer", ".", "__setstate__", "(", "state", ".", "get", "(", "'optimizer_state'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.state_dict": [[113, 119], ["optim.OptimRegime.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the optimizer as a :class:`dict`.\n        \"\"\"", "\n", "return", "{", "\n", "'optimizer_state'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'regime'", ":", "self", ".", "regime", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.load_state_dict": [[121, 133], ["optim.OptimRegime.__setstate__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.__setstate__"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the optimizer state.\n\n        Arguments:\n            state_dict (dict): optimizer state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "# deepcopy, to be consistent with module API", "\n", "optimizer_state_dict", "=", "state_dict", "[", "'optimizer_state'", "]", "\n", "\n", "self", ".", "__setstate__", "(", "{", "'optimizer_state'", ":", "optimizer_state_dict", ",", "\n", "'regime'", ":", "state_dict", "[", "'regime'", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.zero_grad": [[134, 137], ["optim.OptimRegime.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized :class:`Variable` s.\"\"\"", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.step": [[138, 146], ["optim.OptimRegime.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step (parameter update).\n\n        Arguments:\n            closure (callable): A closure that reevaluates the model and\n                returns the loss. Optional for most optimizers.\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.add_param_group": [[147, 158], ["optim.OptimRegime.optimizer.add_param_group"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.OptimRegime.add_param_group"], ["", "def", "add_param_group", "(", "self", ",", "param_group", ")", ":", "\n", "        ", "\"\"\"Add a param group to the :class:`Optimizer` s `param_groups`.\n\n        This can be useful when fine tuning a pre-trained network as frozen layers can be made\n        trainable and added to the :class:`Optimizer` as training progresses.\n\n        Arguments:\n            param_group (dict): Specifies what Variables should be optimized along with group\n            specific optimization options.\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "add_param_group", "(", "param_group", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.optim.eval_func": [[7, 11], ["isinstance", "eval.", "eval"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval"], ["def", "eval_func", "(", "f", ",", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "f", ",", "string_types", ")", ":", "\n", "        ", "f", "=", "eval", "(", "f", ")", "\n", "", "return", "f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.quantize.quantize_tensor": [[8, 30], ["int", "q_x.round().byte.clamp_().round_", "q_x.round().byte.round().byte", "QTensor", "x.min", "x.max", "q_x.round().byte.clamp_", "q_x.round().byte.round"], "function", ["None"], ["\n", "def", "_mean", "(", "p", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Computes the mean over all dimensions except dim\"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "return", "p", ".", "mean", "(", ")", "\n", "", "elif", "dim", "==", "0", ":", "\n", "        ", "output_size", "=", "(", "p", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "p", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "elif", "dim", "==", "p", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "output_size", "=", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "p", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "p", ".", "size", "(", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mean", "(", "p", ".", "transpose", "(", "0", ",", "dim", ")", ",", "0", ")", ".", "transpose", "(", "0", ",", "dim", ")", "\n", "\n", "", "", "def", "tile", "(", "a", ",", "dim", ",", "n_tile", ")", ":", "\n", "    ", "init_dim", "=", "a", ".", "size", "(", "dim", ")", "\n", "repeat_idx", "=", "[", "1", "]", "*", "a", ".", "dim", "(", ")", "\n", "repeat_idx", "[", "dim", "]", "=", "n_tile", "\n", "a", "=", "a", ".", "repeat", "(", "*", "(", "repeat_idx", ")", ")", "\n", "order_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "concatenate", "(", "[", "init_dim", "*", "np", ".", "arange", "(", "n_tile", ")", "+", "i", "for", "i", "in", "range", "(", "init_dim", ")", "]", ")", ")", "\n", "return", "torch", ".", "index_select", "(", "a", ",", "dim", ",", "order_index", ")", "\n", "\n", "", "class", "UniformQuantize", "(", "InplaceFunction", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.quantize.dequantize_tensor": [[32, 34], ["q_x.tensor.float"], "function", ["None"], ["def", "forward", "(", "cls", ",", "ctx", ",", "input", ",", "num_bits", "=", "8", ",", "min_value", "=", "None", ",", "max_value", "=", "None", ",", "\n", "stochastic", "=", "False", ",", "inplace", "=", "False", ",", "enforce_true_zero", "=", "False", ",", "num_chunks", "=", "None", ",", "out_half", "=", "False", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.quantize.quantize_model": [[36, 49], ["model.state_dict().items", "model.type", "qparams.items", "quantize.quantize_tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ByteTensor", "torch.ByteTensor", "p.copy_", "model.register_buffer", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.quantize.quantize_tensor", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict"], ["if", "min_value", "is", "None", "or", "max_value", "is", "None", ":", "\n", "            ", "B", "=", "input", ".", "shape", "[", "0", "]", "\n", "y", "=", "input", ".", "view", "(", "B", "//", "num_chunks", ",", "-", "1", ")", "\n", "", "if", "min_value", "is", "None", ":", "\n", "            ", "min_value", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "", "if", "max_value", "is", "None", ":", "\n", "            ", "max_value", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "", "ctx", ".", "inplace", "=", "inplace", "\n", "ctx", ".", "num_bits", "=", "num_bits", "\n", "ctx", ".", "min_value", "=", "min_value", "\n", "ctx", ".", "max_value", "=", "max_value", "\n", "ctx", ".", "stochastic", "=", "stochastic", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.quantize.dequantize_model": [[51, 63], ["model.float", "model.state_dict", "model.state_dict.items", "QTensor", "p.copy_", "model.register_buffer", "model.register_buffer", "quantize.dequantize_tensor"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.quantize.dequantize_tensor"], ["", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "", "qmin", "=", "0.", "\n", "qmax", "=", "2.", "**", "num_bits", "-", "1.", "\n", "scale", "=", "(", "max_value", "-", "min_value", ")", "/", "(", "qmax", "-", "qmin", ")", "\n", "scale", "=", "max", "(", "scale", ",", "1e-8", ")", "\n", "if", "enforce_true_zero", ":", "\n", "            ", "initial_zero_point", "=", "qmin", "-", "min_value", "/", "scale", "\n", "zero_point", "=", "0.", "\n", "# make zero exactly represented", "\n", "if", "initial_zero_point", "<", "qmin", ":", "\n", "                ", "zero_point", "=", "qmin", "\n", "", "elif", "initial_zero_point", ">", "qmax", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.VGG.__init__": [[28, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.VGG.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "False", "\n", "self", ".", "features", "=", "features", "\n", "if", "'imagenet'", "in", "dataset", ":", "\n", "            ", "self", ".", "pool", "=", "True", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.VGG.forward": [[49, 56], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.avgpool", "vgg.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "if", "self", ".", "pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.normalization": [[14, 23], ["torch.BatchNorm2d", "torch.GroupNorm", "evonorm.EvoNormSample2d"], "function", ["None"], ["def", "normalization", "(", "planes", ",", "groups", "=", "2", ",", "norm_type", "=", "'evonorm'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batchnorm'", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "elif", "norm_type", "==", "'groupnorm'", ":", "\n", "        ", "return", "nn", ".", "GroupNorm", "(", "groups", ",", "planes", ")", "\n", "", "elif", "norm_type", "==", "'evonorm'", ":", "\n", "        ", "return", "evonorm_s0", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.make_layers": [[58, 73], ["torch.Sequential", "torch.Conv2d", "vgg.normalization", "torch.MaxPool2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization"], ["", "", "def", "make_layers", "(", "cfg", ",", "norm_type", ",", "groups", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "norm", "=", "normalization", "(", "planes", "=", "v", ",", "groups", "=", "groups", ",", "norm_type", "=", "norm_type", ")", "\n", "if", "norm_type", "==", "'evonorm'", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "norm", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "norm", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg.vgg11": [[84, 87], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.make_layers"], ["def", "vgg11", "(", "num_classes", ",", "dataset", ",", "norm_type", ",", "groups", "=", "2", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "norm_type", ",", "groups", ")", ",", "num_classes", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormBatch2d.__init__": [[7, 19], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "evonorm.EvoNormBatch2d.register_buffer", "evonorm.EvoNormBatch2d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormSample2d.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "apply_act", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-5", ",", "drop_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "EvoNormBatch2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_act", "=", "apply_act", "# apply activation (non-linearity)", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "param_shape", "=", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "apply_act", ":", "\n", "            ", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormBatch2d.reset_parameters": [[20, 25], ["torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormBatch2d.forward": [[26, 43], ["x.dim", "x.var", "evonorm.EvoNormBatch2d.running_var.copy_", "evonorm.EvoNormBatch2d.v.to", "d.max.max.max", "x.numel", "x.var.detach", "x.var"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.var", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.var"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "'expected 4D input'", "\n", "x_type", "=", "x", ".", "dtype", "\n", "if", "self", ".", "training", ":", "\n", "            ", "var", "=", "x", ".", "var", "(", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "\n", "n", "=", "x", ".", "numel", "(", ")", "/", "x", ".", "shape", "[", "1", "]", "\n", "self", ".", "running_var", ".", "copy_", "(", "\n", "var", ".", "detach", "(", ")", "*", "self", ".", "momentum", "*", "(", "n", "/", "(", "n", "-", "1", ")", ")", "+", "self", ".", "running_var", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "else", ":", "\n", "            ", "var", "=", "self", ".", "running_var", "\n", "\n", "", "if", "self", ".", "apply_act", ":", "\n", "            ", "v", "=", "self", ".", "v", ".", "to", "(", "dtype", "=", "x_type", ")", "\n", "d", "=", "x", "*", "v", "+", "(", "x", ".", "var", "(", "dim", "=", "(", "2", ",", "3", ")", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", ".", "to", "(", "dtype", "=", "x_type", ")", "\n", "d", "=", "d", ".", "max", "(", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", ".", "to", "(", "dtype", "=", "x_type", ")", ")", "\n", "x", "=", "x", "/", "d", "\n", "", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormSample2d.__init__": [[46, 57], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "evonorm.EvoNormSample2d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormSample2d.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "apply_act", "=", "True", ",", "groups", "=", "8", ",", "eps", "=", "1e-5", ",", "drop_block", "=", "None", ",", "num_bits", "=", "None", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "        ", "super", "(", "EvoNormSample2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_act", "=", "apply_act", "# apply activation (non-linearity)", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "eps", "=", "eps", "\n", "param_shape", "=", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "apply_act", ":", "\n", "            ", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormSample2d.reset_parameters": [[58, 63], ["torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.EvoNormSample2d.forward": [[64, 74], ["x.reshape.reshape.dim", "x.reshape.reshape.reshape", "x.reshape.reshape.reshape", "n.reshape", "x.reshape.reshape.var"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.meters.OnlineMeter.var"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "'expected 4D input'", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "C", "%", "self", ".", "groups", "==", "0", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "n", "=", "x", "*", "(", "x", "*", "self", ".", "v", ")", ".", "sigmoid", "(", ")", "# n = x*sigmoid(x*v)", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "-", "1", ")", "\n", "x", "=", "n", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "-", "1", ")", "/", "(", "x", ".", "var", "(", "dim", "=", "-", "1", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "# x = n/var(x) groupwise instance variance", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "# gamma*x+beta", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.RangeEN_full.__init__": [[78, 90], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "evonorm.RangeEN_full.reset_params", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeEN.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "chunks", "=", "16", ",", "groups", "=", "8", ",", "apply_act", "=", "True", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "RangeEN_full", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chunks", "=", "chunks", "\n", "self", ".", "apply_act", "=", "apply_act", "# apply activation (non-linearity)", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "eps", "=", "eps", "\n", "param_shape", "=", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "apply_act", ":", "\n", "            ", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.RangeEN_full.reset_params": [[91, 96], ["evonorm.RangeEN_full.weight.data.uniform_", "evonorm.RangeEN_full.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.evonorm.RangeEN_full.forward": [[97, 115], ["x.reshape.reshape.dim", "x.reshape.reshape.reshape", "[].mean", "[].mean", "x.reshape.reshape.reshape", "n.reshape", "scale.view", "scale.size", "scale.size", "x.reshape.reshape.max", "x.reshape.reshape.min", "math.log", "x.reshape.reshape.size", "math.log"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "'expected 4D input'", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "C", "%", "self", ".", "groups", "==", "0", "\n", "\n", "#scale.view(1, scale.size(0), 1, 1)", "\n", "if", "self", ".", "apply_act", ":", "\n", "#hs = torch.clamp(((x * self.v)/6) + 0.5, min=0, max=1)", "\n", "#n = x * hs # n = x*sigmoid(x*v)", "\n", "            ", "n", "=", "x", "*", "(", "x", "*", "self", ".", "v", ")", ".", "sigmoid", "(", ")", "\n", "y", "=", "x", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "self", ".", "num_chunks", ",", "-", "1", ")", "\n", "mean_max", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean_min", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "scale_fix", "=", "(", "0.5", "*", "0.35", ")", "*", "(", "1", "+", "(", "math", ".", "pi", "*", "math", ".", "log", "(", "4", ")", ")", "**", "0.5", ")", "/", "(", "(", "2", "*", "math", ".", "log", "(", "y", ".", "size", "(", "-", "1", ")", ")", ")", "**", "0.5", ")", "\n", "scale", "=", "1", "/", "(", "(", "mean_max", "-", "mean_min", ")", "*", "scale_fix", "+", "self", ".", "eps", ")", "\n", "x", "=", "n", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "-", "1", ")", "*", "scale", ".", "view", "(", "scale", ".", "size", "(", "0", ")", ",", "scale", ".", "size", "(", "1", ")", ",", "1", ")", "# x = n/var(x) groupwise instance variance", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "# gamma*x+beta", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2.Block_m.__init__": [[18, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mobilenetv2.normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mobilenetv2.normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mobilenetv2.normalization", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mobilenetv2.normalization"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ",", "groups", ",", "norm_type", ")", ":", "\n", "        ", "super", "(", "Block_m", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "out_planes", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "normalization", "(", "out_planes", ",", "groups", ",", "norm_type", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2.Block_m.forward": [[40, 50], ["mobilenetv2.Block_m.bn1", "mobilenetv2.Block_m.bn2", "mobilenetv2.Block_m.bn3", "mobilenetv2.Block_m.conv1", "mobilenetv2.Block_m.relu", "mobilenetv2.Block_m.conv2", "mobilenetv2.Block_m.relu", "mobilenetv2.Block_m.conv3", "mobilenetv2.Block_m.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "if", "self", ".", "norm_type", "!=", "'evonorm'", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "if", "self", ".", "norm_type", "!=", "'evonorm'", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2.MobileNetV2.__init__": [[56, 86], ["torch.Module.__init__", "mobilenetv2.normalization", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mobilenetv2.normalization", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.mobilenetv2_quantized._make_layers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "groups", "=", "2", ",", "norm_type", "=", "'evonorm'", ",", "dataset", "=", "'imagenette'", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "dataset", "=", "dataset", "\n", "if", "'cifar'", "in", "dataset", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "(", "6", ",", "24", ",", "2", ",", "1", ")", ",", "# NOTE: change stride 2 -> 1 for CIFAR10", "\n", "(", "6", ",", "32", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "64", ",", "4", ",", "2", ")", ",", "\n", "(", "6", ",", "96", ",", "3", ",", "1", ")", ",", "\n", "(", "6", ",", "160", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "320", ",", "1", ",", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "(", "6", ",", "24", ",", "2", ",", "2", ")", ",", "\n", "(", "6", ",", "32", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "64", ",", "4", ",", "2", ")", ",", "\n", "(", "6", ",", "96", ",", "3", ",", "1", ")", ",", "\n", "(", "6", ",", "160", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "320", ",", "1", ",", "1", ")", "]", "\n", "", "self", ".", "bn1", "=", "normalization", "(", "32", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ",", "groups", "=", "groups", ",", "norm_type", "=", "norm_type", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "1280", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2.MobileNetV2._make_layers": [[87, 95], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block_m"], "methods", ["None"], ["", "", "def", "_make_layers", "(", "self", ",", "in_planes", ",", "groups", ",", "norm_type", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block_m", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ",", "groups", ",", "norm_type", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2.MobileNetV2.forward": [[96, 112], ["mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.layers", "mobilenetv2.MobileNetV2.bn2", "torch.avg_pool2d.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.relu", "mobilenetv2.MobileNetV2.conv2", "mobilenetv2.MobileNetV2.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "if", "self", ".", "norm_type", "!=", "'evonorm'", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "if", "self", ".", "norm_type", "!=", "'evonorm'", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "", "if", "'cifar'", "in", "self", ".", "dataset", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "7", ")", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2.normalization": [[6, 15], ["torch.BatchNorm2d", "torch.GroupNorm", "evonorm.EvoNormSample2d"], "function", ["None"], ["def", "normalization", "(", "planes", ",", "groups", "=", "2", ",", "norm_type", "=", "'evonorm'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batchnorm'", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "elif", "norm_type", "==", "'groupnorm'", ":", "\n", "        ", "return", "nn", ".", "GroupNorm", "(", "groups", ",", "planes", ")", "\n", "", "elif", "norm_type", "==", "'evonorm'", ":", "\n", "        ", "return", "evonorm_s0", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.VGG.__init__": [[22, 42], ["torch.Module.__init__", "torch.Sequential", "vgg_quantized.VGG.modules", "torch.AvgPool2d", "torch.Dropout", "quantize.quantize.QLinear", "torch.ReLU", "quantize.quantize.QLinear", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "pool", "=", "False", "\n", "if", "'imagenet'", "in", "dataset", ":", "\n", "            ", "self", ".", "pool", "=", "True", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "QLinear", "(", "512", ",", "512", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "QLinear", "(", "512", ",", "num_classes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "#m.bias.data.zero_()", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.VGG.forward": [[45, 52], ["vgg_quantized.VGG.features", "vgg_quantized.VGG.view", "vgg_quantized.VGG.classifier", "vgg_quantized.VGG.avgpool", "vgg_quantized.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "if", "self", ".", "pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.qconv3x3": [[13, 17], ["quantize.QConv2d"], "function", ["None"], ["def", "qconv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "QConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.make_layers": [[54, 65], ["torch.Sequential", "vgg_quantized.qconv3x3", "torch.MaxPool2d", "quantize.RangeEN"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.qconv3x3"], ["", "", "def", "make_layers", "(", "cfg", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "qconv3x3", "(", "in_channels", ",", "v", ")", "\n", "layers", "+=", "[", "conv2d", ",", "RangeN", "(", "v", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "]", "\n", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.vgg11_quantized": [[76, 79], ["vgg_quantized.VGG", "vgg_quantized.make_layers"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.vgg_quantized.make_layers"], ["def", "vgg11_quantized", "(", "num_classes", "=", "10", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "num_classes", ",", "dataset", ")", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.Block_mq.__init__": [[33, 51], ["torch.Module.__init__", "quantize.quantize.QConv2d", "mobilenetv2_quantized.normalization_q", "quantize.quantize.QConv2d", "mobilenetv2_quantized.normalization_q", "quantize.quantize.QConv2d", "mobilenetv2_quantized.normalization_q", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "quantize.quantize.QConv2d", "mobilenetv2_quantized.normalization_q"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ",", "chunks", "=", "16", ")", ":", "\n", "        ", "super", "(", "Block_mq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "QConv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn1", "=", "normalization_q", "(", "planes", ",", "chunks", ")", "\n", "self", ".", "conv2", "=", "QConv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn2", "=", "normalization_q", "(", "planes", ",", "chunks", ")", "\n", "self", ".", "conv3", "=", "QConv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn3", "=", "normalization_q", "(", "out_planes", ",", "chunks", ")", "\n", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "QConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "normalization_q", "(", "out_planes", ",", "chunks", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.Block_mq.forward": [[52, 58], ["mobilenetv2_quantized.Block_mq.bn1", "mobilenetv2_quantized.Block_mq.bn2", "mobilenetv2_quantized.Block_mq.bn3", "mobilenetv2_quantized.Block_mq.conv1", "mobilenetv2_quantized.Block_mq.conv2", "mobilenetv2_quantized.Block_mq.conv3", "mobilenetv2_quantized.Block_mq.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.mobilenetv2_quantized.__init__": [[63, 93], ["torch.Module.__init__", "mobilenetv2_quantized.normalization_q", "mobilenetv2_quantized.mobilenetv2_quantized._make_layers", "quantize.quantize.QConv2d", "mobilenetv2_quantized.normalization_q", "quantize.quantize.QLinear", "quantize.quantize.QConv2d", "quantize.quantize.QConv2d"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.mobilenetv2_quantized._make_layers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "dataset", "=", "'imagenette'", ")", ":", "\n", "        ", "super", "(", "mobilenetv2_quantized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "dataset", "=", "dataset", "\n", "if", "'cifar'", "in", "dataset", ":", "\n", "            ", "self", ".", "chunks", "=", "16", "\n", "self", ".", "conv1", "=", "QConv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "(", "6", ",", "24", ",", "2", ",", "1", ")", ",", "# NOTE: change stride 2 -> 1 for CIFAR10", "\n", "(", "6", ",", "32", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "64", ",", "4", ",", "2", ")", ",", "\n", "(", "6", ",", "96", ",", "3", ",", "1", ")", ",", "\n", "(", "6", ",", "160", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "320", ",", "1", ",", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "chunks", "=", "14", "\n", "self", ".", "conv1", "=", "QConv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "(", "6", ",", "24", ",", "2", ",", "2", ")", ",", "\n", "(", "6", ",", "32", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "64", ",", "4", ",", "2", ")", ",", "\n", "(", "6", ",", "96", ",", "3", ",", "1", ")", ",", "\n", "(", "6", ",", "160", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "320", ",", "1", ",", "1", ")", "]", "\n", "", "self", ".", "bn1", "=", "normalization_q", "(", "32", ",", "self", ".", "chunks", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "32", ",", "self", ".", "chunks", ")", "\n", "self", ".", "conv2", "=", "QConv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn2", "=", "normalization_q", "(", "1280", ",", "self", ".", "chunks", ")", "\n", "self", ".", "linear", "=", "QLinear", "(", "1280", ",", "num_classes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.mobilenetv2_quantized._make_layers": [[96, 104], ["torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2_quantized.Block_mq"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ",", "chunks", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block_mq", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ",", "chunks", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.mobilenetv2_quantized.forward": [[105, 117], ["mobilenetv2_quantized.mobilenetv2_quantized.bn1", "mobilenetv2_quantized.mobilenetv2_quantized.layers", "mobilenetv2_quantized.mobilenetv2_quantized.bn2", "torch.avg_pool2d.view", "mobilenetv2_quantized.mobilenetv2_quantized.linear", "mobilenetv2_quantized.mobilenetv2_quantized.conv1", "mobilenetv2_quantized.mobilenetv2_quantized.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "if", "'cifar'", "in", "self", ".", "dataset", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "7", ")", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.normalization_q": [[14, 18], ["quantize.RangeEN"], "function", ["None"], ["def", "normalization_q", "(", "planes", ",", "chunks", ")", ":", "\n", "    ", "if", "planes", "%", "(", "16", "*", "8", ")", "==", "0", ":", "num_chunks", "=", "16", "\n", "else", ":", "num_chunks", "=", "chunks", "\n", "return", "RangeN", "(", "planes", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "chunks", "=", "num_chunks", ")", "\n", "#return RangeEN_full(planes)", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.mobilenetv2_quantized.init_modelq": [[19, 30], ["model.modules", "model.linear.weight.data.normal_", "model.linear.bias.data.zero_", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "init_modelq", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "QConv2d", ")", ":", "\n", "            ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "RangeN", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "model", ".", "linear", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "model", ".", "linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.BasicBlock.__init__": [[42, 53], ["torch.Module.__init__", "resnet.conv3x3", "resnet.normalization", "resnet.conv3x3", "resnet.normalization", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.conv3x3", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.conv3x3", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "norm_type", ",", "groups", "=", "2", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "groups", ",", "norm_type", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.BasicBlock.forward": [[55, 74], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample", "resnet.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.Bottleneck.__init__": [[79, 91], ["torch.Module.__init__", "torch.Conv2d", "resnet.normalization", "torch.Conv2d", "resnet.normalization", "torch.Conv2d", "resnet.normalization", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "norm_type", ",", "groups", "=", "2", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", "*", "4", ",", "groups", ",", "norm_type", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.Bottleneck.forward": [[92, 116], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample", "resnet.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.ResNet.__init__": [[120, 122], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.ResNet._make_layer": [[123, 141], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "resnet.normalization", "block"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "norm_type", "=", "'evonorm'", ",", "groups", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "normalization", "(", "planes", "*", "block", ".", "expansion", ",", "groups", ",", "norm_type", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "norm_type", ",", "groups", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "norm_type", ",", "groups", ",", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.ResNet.forward": [[142, 159], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.relu", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.ResNet_imagenet.__init__": [[163, 182], ["resnet.ResNet.__init__", "torch.Conv2d", "resnet.normalization", "torch.MaxPool2d", "resnet.ResNet_imagenet._make_layer", "resnet.ResNet_imagenet._make_layer", "resnet.ResNet_imagenet._make_layer", "resnet.ResNet_imagenet._make_layer", "torch.AvgPool2d", "torch.Linear", "resnet.init_model", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.init_model"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "\n", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "groups", "=", "None", ",", "norm_type", "=", "'evonorm'", ")", ":", "\n", "        ", "super", "(", "ResNet_imagenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "64", ",", "groups", ",", "norm_type", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "init_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.ResNet_cifar10.__init__": [[186, 206], ["resnet.ResNet.__init__", "int", "torch.Conv2d", "resnet.normalization", "resnet.ResNet_cifar10._make_layer", "resnet.ResNet_cifar10._make_layer", "resnet.ResNet_cifar10._make_layer", "torch.AvgPool2d", "torch.Linear", "resnet.init_model", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.init_model"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "block", "=", "BasicBlock", ",", "depth", "=", "18", ",", "groups", "=", "None", ",", "norm_type", "=", "'evonorm'", ")", ":", "\n", "        ", "super", "(", "ResNet_cifar10", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "normalization", "(", "16", ",", "groups", ",", "norm_type", ")", "\n", "if", "'evo'", "not", "in", "self", ".", "norm_type", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "maxpool", "=", "lambda", "x", ":", "x", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ",", "norm_type", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "norm_type", ",", "groups", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "norm_type", ",", "groups", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "lambda", "x", ":", "x", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "init_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.normalization": [[15, 24], ["torch.BatchNorm2d", "torch.GroupNorm", "evonorm.EvoNormSample2d"], "function", ["None"], ["", "def", "normalization", "(", "planes", ",", "groups", "=", "2", ",", "norm_type", "=", "'evonorm'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batchnorm'", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "elif", "norm_type", "==", "'groupnorm'", ":", "\n", "        ", "return", "nn", ".", "GroupNorm", "(", "groups", ",", "planes", ")", "\n", "", "elif", "norm_type", "==", "'evonorm'", ":", "\n", "        ", "return", "evonorm_s0", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.init_model": [[26, 37], ["model.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "", "def", "init_model", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet.resnet": [[208, 238], ["map", "resnet.ResNet_imagenet", "resnet.ResNet_imagenet", "resnet.ResNet_imagenet", "resnet.ResNet_imagenet", "resnet.ResNet_imagenet", "resnet.ResNet_cifar10", "resnet.ResNet_imagenet"], "function", ["None"], ["", "", "def", "resnet", "(", "**", "kwargs", ")", ":", "\n", "    ", "num_classes", ",", "depth", ",", "dataset", ",", "norm_type", ",", "groups", "=", "map", "(", "\n", "kwargs", ".", "get", ",", "[", "'num_classes'", ",", "'depth'", ",", "'dataset'", ",", "'norm_type'", ",", "'groups'", "]", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "        ", "num_classes", "=", "num_classes", "or", "1000", "\n", "depth", "=", "depth", "or", "50", "\n", "if", "depth", "==", "18", ":", "\n", "            ", "return", "ResNet_imagenet", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "BasicBlock", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "", "if", "depth", "==", "34", ":", "\n", "            ", "return", "ResNet_imagenet", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "BasicBlock", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "", "if", "depth", "==", "50", ":", "\n", "            ", "return", "ResNet_imagenet", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "", "if", "depth", "==", "101", ":", "\n", "            ", "return", "ResNet_imagenet", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "", "if", "depth", "==", "152", ":", "\n", "            ", "return", "ResNet_imagenet", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "\n", "", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "        ", "num_classes", "=", "num_classes", "or", "10", "\n", "depth", "=", "depth", "or", "56", "\n", "return", "ResNet_cifar10", "(", "num_classes", "=", "num_classes", ",", "block", "=", "BasicBlock", ",", "depth", "=", "depth", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "\n", "", "elif", "dataset", "==", "'imagenette'", ":", "\n", "        ", "num_classes", "=", "num_classes", "or", "10", "\n", "return", "ResNet_imagenet", "(", "num_classes", "=", "num_classes", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "norm_type", "=", "norm_type", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.__init__": [[61, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim", ",", "p", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.compute_weight": [[66, 70], ["getattr", "getattr", "bwn._norm"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn._norm"], ["", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n", "        ", "v", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_v'", ")", "\n", "pre_norm", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_prenorm'", ")", "\n", "return", "v", "*", "(", "pre_norm", "/", "_norm", "(", "v", ",", "self", ".", "dim", ",", "p", "=", "self", ".", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.apply": [[71, 94], ["bwn.BoundedWeighNorm", "getattr", "_norm().mean", "module.register_buffer", "getattr", "print", "module.register_parameter", "setattr", "module.register_forward_pre_hook", "_norm().mean.detach", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "bwn.BoundedWeighNorm.compute_weight", "bwn.gather_params", "bwn._norm", "bwn.BoundedWeighNorm.compute_weight"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.compute_weight", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.gather_params", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn._norm", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.compute_weight"], ["", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "name", ",", "dim", ",", "p", ")", ":", "\n", "        ", "fn", "=", "BoundedWeighNorm", "(", "name", ",", "dim", ",", "p", ")", "\n", "\n", "weight", "=", "getattr", "(", "module", ",", "name", ")", "\n", "\n", "# remove w from parameter list", "\n", "del", "module", ".", "_parameters", "[", "name", "]", "\n", "\n", "prenorm", "=", "_norm", "(", "weight", ",", "dim", ",", "p", "=", "p", ")", ".", "mean", "(", ")", "\n", "module", ".", "register_buffer", "(", "name", "+", "'_prenorm'", ",", "prenorm", ".", "detach", "(", ")", ")", "\n", "pre_norm", "=", "getattr", "(", "module", ",", "name", "+", "'_prenorm'", ")", "\n", "print", "(", "pre_norm", ")", "\n", "module", ".", "register_parameter", "(", "name", "+", "'_v'", ",", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "setattr", "(", "module", ",", "name", ",", "fn", ".", "compute_weight", "(", "module", ")", ")", "\n", "\n", "# recompute weight before every forward()", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "\n", "def", "gather_normed_params", "(", "self", ",", "memo", "=", "None", ",", "param_func", "=", "lambda", "s", ":", "fn", ".", "compute_weight", "(", "s", ")", ")", ":", "\n", "            ", "return", "gather_params", "(", "self", ",", "memo", ",", "param_func", ")", "\n", "", "module", ".", "gather_params", "=", "gather_normed_params", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.remove": [[95, 101], ["bwn.BoundedWeighNorm.compute_weight", "delattr", "module.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.compute_weight"], ["", "def", "remove", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "self", ".", "name", "+", "'_prenorm'", "]", "\n", "del", "module", ".", "_parameters", "[", "self", ".", "name", "+", "'_v'", "]", "\n", "module", ".", "register_parameter", "(", "self", ".", "name", ",", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.__call__": [[102, 104], ["setattr", "bwn.BoundedWeighNorm.compute_weight"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "inputs", ")", ":", "\n", "        ", "setattr", "(", "module", ",", "self", ".", "name", ",", "self", ".", "compute_weight", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.gather_params": [[13, 23], ["param_func", "bwn..children", "s._parameters.values", "set", "bwn.gather_params", "set.add"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.gather_params", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.add"], ["def", "gather_params", "(", "self", ",", "memo", "=", "None", ",", "param_func", "=", "lambda", "s", ":", "s", ".", "_parameters", ".", "values", "(", ")", ")", ":", "\n", "    ", "if", "memo", "is", "None", ":", "\n", "        ", "memo", "=", "set", "(", ")", "\n", "", "for", "p", "in", "param_func", "(", "self", ")", ":", "\n", "        ", "if", "p", "is", "not", "None", "and", "p", "not", "in", "memo", ":", "\n", "            ", "memo", ".", "add", "(", "p", ")", "\n", "yield", "p", "\n", "", "", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "        ", "for", "p", "in", "gather_params", "(", "m", ",", "memo", ",", "param_func", ")", ":", "\n", "            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn._norm": [[27, 43], ["float", "x.norm", "torch.norm", "torch.norm", "func().view", "x.abs().max", "func().view", "_norm().transpose", "x.size", "func", "x.dim", "x.abs", "x.dim", "x.contiguous().view", "x.size", "func", "bwn._norm", "x.size", "x.dim", "x.contiguous().view", "x.transpose", "x.contiguous", "x.size", "x.contiguous"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn._norm"], ["def", "_norm", "(", "x", ",", "dim", ",", "p", "=", "2", ")", ":", "\n", "    ", "\"\"\"Computes the norm over all dimensions except dim\"\"\"", "\n", "if", "p", "==", "float", "(", "'inf'", ")", ":", "# infinity norm", "\n", "        ", "func", "=", "lambda", "x", ",", "dim", ":", "x", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "dim", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "func", "=", "lambda", "x", ",", "dim", ":", "torch", ".", "norm", "(", "x", ",", "dim", "=", "dim", ",", "p", "=", "p", ")", "\n", "", "if", "dim", "is", "None", ":", "\n", "        ", "return", "x", ".", "norm", "(", "p", "=", "p", ")", "\n", "", "elif", "dim", "==", "0", ":", "\n", "        ", "output_size", "=", "(", "x", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "\n", "return", "func", "(", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "1", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "elif", "dim", "==", "x", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "output_size", "=", "(", "1", ",", ")", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "func", "(", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "0", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "return", "_norm", "(", "x", ".", "transpose", "(", "0", ",", "dim", ")", ",", "0", ")", ".", "transpose", "(", "0", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn._mean": [[45, 57], ["p.mean", "p.contiguous().view().mean().view", "p.contiguous().view().mean().view", "_mean().transpose", "p.size", "p.contiguous().view().mean", "p.dim", "p.dim", "p.size", "p.contiguous().view().mean", "bwn._mean", "p.contiguous().view", "p.dim", "p.transpose", "p.size", "p.contiguous().view", "p.contiguous", "p.size", "p.contiguous"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize._mean"], ["", "", "def", "_mean", "(", "p", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Computes the mean over all dimensions except dim\"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "return", "p", ".", "mean", "(", ")", "\n", "", "elif", "dim", "==", "0", ":", "\n", "        ", "output_size", "=", "(", "p", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "p", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "elif", "dim", "==", "p", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "output_size", "=", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "p", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "p", ".", "size", "(", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mean", "(", "p", ".", "transpose", "(", "0", ",", "dim", ")", ",", "0", ")", ".", "transpose", "(", "0", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.weight_norm": [[106, 137], ["bwn.BoundedWeighNorm.apply"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.apply"], ["", "", "def", "weight_norm", "(", "module", ",", "name", "=", "'weight'", ",", "dim", "=", "0", ",", "p", "=", "2", ")", ":", "\n", "    ", "r\"\"\"Applies weight normalization to a parameter in the given module.\n    .. math::\n         \\mathbf{w} = g \\dfrac{\\mathbf{v}}{\\|\\mathbf{v}\\|}\n    Weight normalization is a reparameterization that decouples the magnitude\n    of a weight tensor from its direction. This replaces the parameter specified\n    by `name` (e.g. \"weight\") with two parameters: one specifying the magnitude\n    (e.g. \"weight_g\") and one specifying the direction (e.g. \"weight_v\").\n    Weight normalization is implemented via a hook that recomputes the weight\n    tensor from the magnitude and direction before every :meth:`~Module.forward`\n    call.\n    By default, with `dim=0`, the norm is computed independently per output\n    channel/plane. To compute a norm over the entire weight tensor, use\n    `dim=None`.\n    See https://arxiv.org/abs/1602.07868\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n        dim (int, optional): dimension over which to compute the norm\n    Returns:\n        The original module with the weight norm hook\n    Example::\n        >>> m = weight_norm(nn.Linear(20, 40), name='weight')\n        Linear (20 -> 40)\n        >>> m.weight_g.size()\n        torch.Size([40, 1])\n        >>> m.weight_v.size()\n        torch.Size([40, 20])\n    \"\"\"", "\n", "BoundedWeighNorm", ".", "apply", "(", "module", ",", "name", ",", "dim", ",", "p", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.remove_weight_norm": [[139, 156], ["module._forward_pre_hooks.items", "ValueError", "isinstance", "hook.remove"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.remove"], ["", "def", "remove_weight_norm", "(", "module", ",", "name", "=", "'weight'", ")", ":", "\n", "    ", "r\"\"\"Removes the weight normalization reparameterization from a module.\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n    Example:\n        >>> m = weight_norm(nn.Linear(20, 40))\n        >>> remove_weight_norm(m)\n    \"\"\"", "\n", "for", "k", ",", "hook", "in", "module", ".", "_forward_pre_hooks", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "hook", ",", "BoundedWeighNorm", ")", "and", "hook", ".", "name", "==", "name", ":", "\n", "            ", "hook", ".", "remove", "(", "module", ")", "\n", "del", "module", ".", "_forward_pre_hooks", "[", "k", "]", "\n", "return", "module", "\n", "\n", "", "", "raise", "ValueError", "(", "\"weight_norm of '{}' not found in {}\"", "\n", ".", "format", "(", "name", ",", "module", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.BasicBlockq.__init__": [[40, 51], ["torch.Module.__init__", "resnet_quantized.qconv3x3", "quantize.quantize.RangeEN", "resnet_quantized.qconv3x3", "quantize.quantize.RangeEN", "quantize.quantize.Qsum"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.qconv3x3", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.qconv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlockq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "RangeN", "(", "planes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "RangeN", "(", "planes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "acc", "=", "Qsum", "(", "num_bits", "=", "NUM_BITS", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.BasicBlockq.forward": [[52, 63], ["resnet_quantized.BasicBlockq.conv1", "resnet_quantized.BasicBlockq.bn1", "resnet_quantized.BasicBlockq.conv2", "resnet_quantized.BasicBlockq.bn2", "resnet_quantized.BasicBlockq.acc", "resnet_quantized.BasicBlockq.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "#out += residual", "\n", "", "out", "=", "self", ".", "acc", "(", "residual", ",", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.Bottleneckq.__init__": [[68, 86], ["torch.Module.__init__", "quantize.quantize.QConv2d", "quantize.quantize.RangeEN", "quantize.quantize.QConv2d", "quantize.quantize.RangeEN", "quantize.quantize.QConv2d", "quantize.quantize.RangeEN", "quantize.quantize.Qsum"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneckq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "QConv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn1", "=", "RangeN", "(", "planes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "conv2", "=", "QConv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn2", "=", "RangeN", "(", "planes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "conv3", "=", "QConv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn3", "=", "RangeN", "(", "planes", "*", "4", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "acc", "=", "Qsum", "(", "num_bits", "=", "NUM_BITS", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.Bottleneckq.forward": [[87, 99], ["resnet_quantized.Bottleneckq.conv1", "resnet_quantized.Bottleneckq.bn1", "resnet_quantized.Bottleneckq.conv2", "resnet_quantized.Bottleneckq.bn2", "resnet_quantized.Bottleneckq.conv3", "resnet_quantized.Bottleneckq.bn3", "resnet_quantized.Bottleneckq.acc", "resnet_quantized.Bottleneckq.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "=", "self", ".", "acc", "(", "residual", ",", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq.__init__": [[103, 105], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNetq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer": [[106, 124], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "quantize.quantize.QConv2d", "quantize.quantize.RangeEN", "block"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "QConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", ",", "\n", "RangeN", "(", "planes", "*", "block", ".", "expansion", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq.forward": [[125, 137], ["resnet_quantized.ResNetq.conv1", "resnet_quantized.ResNetq.bn1", "resnet_quantized.ResNetq.maxpool", "resnet_quantized.ResNetq.layer1", "resnet_quantized.ResNetq.layer2", "resnet_quantized.ResNetq.layer3", "resnet_quantized.ResNetq.layer4", "resnet_quantized.ResNetq.avgpool", "resnet_quantized.ResNetq.view", "resnet_quantized.ResNetq.fc", "resnet_quantized.ResNetq.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNet_imagenetq.__init__": [[142, 159], ["resnet_quantized.ResNetq.__init__", "quantize.quantize.QConv2d", "quantize.quantize.RangeEN", "torch.MaxPool2d", "resnet_quantized.ResNet_imagenetq._make_layer", "resnet_quantized.ResNet_imagenetq._make_layer", "resnet_quantized.ResNet_imagenetq._make_layer", "resnet_quantized.ResNet_imagenetq._make_layer", "torch.AvgPool2d", "quantize.quantize.QLinear", "resnet_quantized.init_modelq"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.init_modelq"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "\n", "block", "=", "Bottleneckq", ",", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", ":", "\n", "        ", "super", "(", "ResNet_imagenetq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "QConv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn1", "=", "RangeN", "(", "64", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "QLinear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "\n", "init_modelq", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNet_cifar10q.__init__": [[164, 182], ["resnet_quantized.ResNetq.__init__", "int", "quantize.quantize.QConv2d", "quantize.quantize.RangeEN", "resnet_quantized.ResNet_cifar10q._make_layer", "resnet_quantized.ResNet_cifar10q._make_layer", "resnet_quantized.ResNet_cifar10q._make_layer", "torch.AvgPool2d", "quantize.quantize.QLinear", "print", "resnet_quantized.init_modelq"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.ResNetq._make_layer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.init_modelq"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "\n", "block", "=", "BasicBlockq", ",", "depth", "=", "18", ")", ":", "\n", "        ", "super", "(", "ResNet_cifar10q", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "self", ".", "conv1", "=", "QConv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "self", ".", "bn1", "=", "RangeN", "(", "16", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ")", "\n", "self", ".", "maxpool", "=", "lambda", "x", ":", "x", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "lambda", "x", ":", "x", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "QLinear", "(", "64", ",", "num_classes", ",", "num_bits", "=", "NUM_BITS", ",", "\n", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "print", "(", "'bit precisions:'", ",", "NUM_BITS", ",", "NUM_BITS_WEIGHT", ",", "NUM_BITS_GRAD", ")", "\n", "init_modelq", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.qconv3x3": [[14, 18], ["quantize.QConv2d"], "function", ["None"], ["def", "qconv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "QConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "num_bits", "=", "NUM_BITS", ",", "num_bits_weight", "=", "NUM_BITS_WEIGHT", ",", "num_bits_grad", "=", "NUM_BITS_GRAD", ",", "biprecision", "=", "BIPRECISION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.init_modelq": [[19, 35], ["model.modules", "model.modules", "model.fc.weight.data.normal_", "model.fc.bias.data.zero_", "isinstance", "isinstance", "m.weight.data.normal_", "isinstance", "torch.init.constant_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "torch.init.constant_"], "function", ["None"], ["", "def", "init_modelq", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "QConv2d", ")", ":", "\n", "            ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "RangeN", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "Bottleneckq", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlockq", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "model", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "model", ".", "fc", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.resnet_quantized.resnet_quantized": [[185, 209], ["resnet_quantized.ResNet_imagenetq", "resnet_quantized.ResNet_imagenetq", "resnet_quantized.ResNet_imagenetq", "resnet_quantized.ResNet_imagenetq", "resnet_quantized.ResNet_imagenetq", "resnet_quantized.ResNet_cifar10q", "resnet_quantized.ResNet_imagenetq"], "function", ["None"], ["", "", "def", "resnet_quantized", "(", "num_classes", "=", "10", ",", "depth", "=", "20", ",", "dataset", "=", "'cifar10'", ")", ":", "\n", "    ", "if", "dataset", "==", "'imagenet'", ":", "\n", "        ", "if", "depth", "==", "18", ":", "\n", "            ", "return", "ResNet_imagenetq", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "BasicBlockq", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "if", "depth", "==", "34", ":", "\n", "            ", "return", "ResNet_imagenetq", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "BasicBlockq", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "", "if", "depth", "==", "50", ":", "\n", "            ", "return", "ResNet_imagenetq", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "Bottleneckq", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "", "if", "depth", "==", "101", ":", "\n", "            ", "return", "ResNet_imagenetq", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "Bottleneckq", ",", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "", "if", "depth", "==", "152", ":", "\n", "            ", "return", "ResNet_imagenetq", "(", "num_classes", "=", "num_classes", ",", "\n", "block", "=", "Bottleneckq", ",", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n", "", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "#print('imported quantized model')", "\n", "        ", "return", "ResNet_cifar10q", "(", "num_classes", "=", "num_classes", ",", "block", "=", "BasicBlockq", ",", "depth", "=", "depth", ")", "\n", "", "elif", "dataset", "==", "'imagenette'", ":", "\n", "        ", "num_classes", "=", "num_classes", "or", "10", "\n", "return", "ResNet_imagenetq", "(", "num_classes", "=", "num_classes", ",", "block", "=", "BasicBlockq", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.BiReLUFunction.forward": [[10, 30], ["input.clone.chunk", "pos.clamp_", "neg.clamp_", "ctx.save_for_backward", "RuntimeError", "ctx.mark_dirty", "input.clone", "input.size", "input.size"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "input", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "if", "input", ".", "size", "(", "1", ")", "%", "2", "!=", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"dimension 1 of input must be multiple of 2, \"", "\n", "\"but got {}\"", ".", "format", "(", "input", ".", "size", "(", "1", ")", ")", ")", "\n", "", "ctx", ".", "inplace", "=", "inplace", "\n", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "pos", ",", "neg", "=", "output", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "pos", ".", "clamp_", "(", "min", "=", "0", ")", "\n", "neg", ".", "clamp_", "(", "max", "=", "0", ")", "\n", "# scale = (pos - neg).view(pos.size(0), -1).mean(1).div_(2)", "\n", "# output.", "\n", "ctx", ".", "save_for_backward", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.BiReLUFunction.backward": [[31, 36], ["grad_output.masked_fill", "output.eq"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "output", ",", "=", "ctx", ".", "saved_variables", "\n", "grad_input", "=", "grad_output", ".", "masked_fill", "(", "output", ".", "eq", "(", "0", ")", ",", "0", ")", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.BiReLU.__init__": [[45, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "BiReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.BiReLU.forward": [[49, 51], ["rnlu.birelu"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.birelu"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "birelu", "(", "inputs", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.RnLU.__init__": [[84, 87], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "RnLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.RnLU.forward": [[88, 90], ["rnlu.rnlu"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.rnlu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "rnlu", "(", "x", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.birelu": [[38, 40], ["BiReLUFunction().apply", "rnlu.BiReLUFunction"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.apply"], ["", "", "def", "birelu", "(", "x", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "BiReLUFunction", "(", ")", ".", "apply", "(", "x", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.binorm": [[53, 57], ["pos.size"], "function", ["None"], ["", "", "def", "binorm", "(", "x", ",", "shift", "=", "0", ",", "scale_fix", "=", "(", "2", "/", "math", ".", "pi", ")", "**", "0.5", ")", ":", "\n", "    ", "pos", ",", "neg", "=", "(", "x", "+", "shift", ")", ".", "split", "(", "2", ",", "dim", "=", "1", ")", "\n", "scale", "=", "(", "pos", "-", "neg", ")", ".", "view", "(", "pos", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", ".", "div_", "(", "2", ")", "*", "scale_fix", "\n", "return", "x", "/", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu._mean": [[59, 71], ["p.mean", "p.contiguous().view().mean().view", "p.contiguous().view().mean().view", "_mean().transpose", "p.size", "p.contiguous().view().mean", "p.dim", "p.dim", "p.size", "p.contiguous().view().mean", "rnlu._mean", "p.contiguous().view", "p.dim", "p.transpose", "p.size", "p.contiguous().view", "p.contiguous", "p.size", "p.contiguous"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize._mean"], ["", "def", "_mean", "(", "p", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Computes the mean over all dimensions except dim\"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "return", "p", ".", "mean", "(", ")", "\n", "", "elif", "dim", "==", "0", ":", "\n", "        ", "output_size", "=", "(", "p", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "p", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "elif", "dim", "==", "p", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "output_size", "=", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "p", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "p", ".", "size", "(", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mean", "(", "p", ".", "transpose", "(", "0", ",", "dim", ")", ",", "0", ")", ".", "transpose", "(", "0", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.rnlu": [[73, 79], ["rnlu.birelu", "scale.view", "scale.size", "pos.size", "birelu.dim"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.rnlu.birelu"], ["", "", "def", "rnlu", "(", "x", ",", "inplace", "=", "False", ",", "shift", "=", "0", ",", "scale_fix", "=", "(", "math", ".", "pi", "/", "2", ")", "**", "0.5", ")", ":", "\n", "    ", "x", "=", "birelu", "(", "x", ",", "inplace", "=", "inplace", ")", "\n", "pos", ",", "neg", "=", "(", "x", "+", "shift", ")", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "# scale = torch.cat((_mean(pos, 1), -_mean(neg, 1)), 1) * scale_fix + 1e-5", "\n", "scale", "=", "(", "pos", "-", "neg", ")", ".", "view", "(", "pos", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "*", "scale_fix", "+", "1e-8", "\n", "return", "x", "/", "scale", ".", "view", "(", "scale", ".", "size", "(", "0", ")", ",", "*", "(", "[", "1", "]", "*", "(", "x", ".", "dim", "(", ")", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantize.forward": [[31, 84], ["max", "output.half.half.clamp_().round_", "input.view", "[].mean", "[].mean", "ctx.mark_dirty", "input.clone", "int", "output.half.half.div_().add_", "output.half.half.add_().div_().add_", "output.half.half.new().uniform_", "output.half.half.add_", "output.half.half.add_().mul_", "output.half.half.add_().mul_().add_", "output.half.half.half", "output.half.half.clamp_", "output.half.half.div_", "output.half.half.add_().div_", "output.half.half.new", "output.half.half.add_", "output.half.half.add_().mul_", "input.view.min", "input.view.max", "output.half.half.add_", "output.half.half.add_"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "input", ",", "num_bits", "=", "8", ",", "min_value", "=", "None", ",", "max_value", "=", "None", ",", "\n", "stochastic", "=", "False", ",", "inplace", "=", "False", ",", "enforce_true_zero", "=", "False", ",", "num_chunks", "=", "None", ",", "out_half", "=", "False", ")", ":", "\n", "\n", "        ", "num_chunks", "=", "input", ".", "shape", "[", "0", "]", "if", "num_chunks", "is", "None", "else", "num_chunks", "\n", "if", "min_value", "is", "None", "or", "max_value", "is", "None", ":", "\n", "            ", "B", "=", "input", ".", "shape", "[", "0", "]", "\n", "y", "=", "input", ".", "view", "(", "B", "//", "num_chunks", ",", "-", "1", ")", "\n", "", "if", "min_value", "is", "None", ":", "\n", "            ", "min_value", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "", "if", "max_value", "is", "None", ":", "\n", "            ", "max_value", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "", "ctx", ".", "inplace", "=", "inplace", "\n", "ctx", ".", "num_bits", "=", "num_bits", "\n", "ctx", ".", "min_value", "=", "min_value", "\n", "ctx", ".", "max_value", "=", "max_value", "\n", "ctx", ".", "stochastic", "=", "stochastic", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "", "qmin", "=", "0.", "\n", "qmax", "=", "2.", "**", "num_bits", "-", "1.", "\n", "scale", "=", "(", "max_value", "-", "min_value", ")", "/", "(", "qmax", "-", "qmin", ")", "\n", "scale", "=", "max", "(", "scale", ",", "1e-8", ")", "\n", "if", "enforce_true_zero", ":", "\n", "            ", "initial_zero_point", "=", "qmin", "-", "min_value", "/", "scale", "\n", "zero_point", "=", "0.", "\n", "# make zero exactly represented", "\n", "if", "initial_zero_point", "<", "qmin", ":", "\n", "                ", "zero_point", "=", "qmin", "\n", "", "elif", "initial_zero_point", ">", "qmax", ":", "\n", "                ", "zero_point", "=", "qmax", "\n", "", "else", ":", "\n", "                ", "zero_point", "=", "initial_zero_point", "\n", "", "zero_point", "=", "int", "(", "zero_point", ")", "\n", "output", ".", "div_", "(", "scale", ")", ".", "add_", "(", "zero_point", ")", "\n", "", "else", ":", "\n", "            ", "output", ".", "add_", "(", "-", "min_value", ")", ".", "div_", "(", "scale", ")", ".", "add_", "(", "qmin", ")", "\n", "\n", "", "if", "ctx", ".", "stochastic", ":", "\n", "            ", "noise", "=", "output", ".", "new", "(", "output", ".", "shape", ")", ".", "uniform_", "(", "-", "0.5", ",", "0.5", ")", "\n", "output", ".", "add_", "(", "noise", ")", "\n", "", "output", ".", "clamp_", "(", "qmin", ",", "qmax", ")", ".", "round_", "(", ")", "# quantize", "\n", "\n", "if", "enforce_true_zero", ":", "\n", "            ", "output", ".", "add_", "(", "-", "zero_point", ")", ".", "mul_", "(", "scale", ")", "# dequantize", "\n", "", "else", ":", "\n", "            ", "output", ".", "add_", "(", "-", "qmin", ")", ".", "mul_", "(", "scale", ")", ".", "add_", "(", "min_value", ")", "# dequantize", "\n", "", "if", "out_half", "and", "num_bits", "<=", "16", ":", "\n", "            ", "output", "=", "output", ".", "half", "(", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantize.backward": [[85, 90], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# straight-through estimator", "\n", "        ", "grad_input", "=", "grad_output", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantizeGrad.forward": [[94, 102], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "input", ",", "num_bits", "=", "8", ",", "min_value", "=", "None", ",", "max_value", "=", "None", ",", "stochastic", "=", "True", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "ctx", ".", "inplace", "=", "inplace", "\n", "ctx", ".", "num_bits", "=", "num_bits", "\n", "ctx", ".", "min_value", "=", "min_value", "\n", "ctx", ".", "max_value", "=", "max_value", "\n", "ctx", ".", "stochastic", "=", "stochastic", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.UniformQuantizeGrad.backward": [[103, 120], ["UniformQuantize().apply", "float", "float", "grad_output.min", "grad_output.max", "quantize.UniformQuantize"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.apply"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "ctx", ".", "min_value", "is", "None", ":", "\n", "            ", "min_value", "=", "float", "(", "grad_output", ".", "min", "(", ")", ")", "\n", "# min_value = float(grad_output.view(", "\n", "# grad_output.size(0), -1).min(-1)[0].mean())", "\n", "", "else", ":", "\n", "            ", "min_value", "=", "ctx", ".", "min_value", "\n", "", "if", "ctx", ".", "max_value", "is", "None", ":", "\n", "            ", "max_value", "=", "float", "(", "grad_output", ".", "max", "(", ")", ")", "\n", "# max_value = float(grad_output.view(", "\n", "# grad_output.size(0), -1).max(-1)[0].mean())", "\n", "", "else", ":", "\n", "            ", "max_value", "=", "ctx", ".", "max_value", "\n", "", "grad_input", "=", "UniformQuantize", "(", ")", ".", "apply", "(", "grad_output", ",", "ctx", ".", "num_bits", ",", "\n", "min_value", ",", "max_value", ",", "ctx", ".", "stochastic", ",", "ctx", ".", "inplace", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.QuantMeasure.__init__": [[151, 159], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "num_bits", "=", "8", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "QuantMeasure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#        self.register_buffer('running_min', torch.zeros(1))", "\n", "#        self.register_buffer('running_max', torch.zeros(1))", "\n", "self", ".", "running_min", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "running_max", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.QuantMeasure.forward": [[160, 174], ["quantize.quantize", "[].mean", "[].mean", "quantize.QuantMeasure.running_min.mul_().add_", "quantize.QuantMeasure.running_max.mul_().add_", "float", "float", "quantize.QuantMeasure.running_min.mul_", "quantize.QuantMeasure.running_max.mul_", "input.detach().view().min", "input.detach().view().max", "input.detach().view", "input.detach().view", "input.size", "input.size", "input.detach", "input.detach"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "min_value", "=", "input", ".", "detach", "(", ")", ".", "view", "(", "\n", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "max_value", "=", "input", ".", "detach", "(", ")", ".", "view", "(", "\n", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "self", ".", "running_min", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "min_value", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "self", ".", "running_max", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "max_value", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "else", ":", "\n", "            ", "min_value", "=", "self", ".", "running_min", "\n", "max_value", "=", "self", ".", "running_max", "\n", "", "return", "quantize", "(", "input", ",", "self", ".", "num_bits", ",", "min_value", "=", "float", "(", "min_value", ")", ",", "max_value", "=", "float", "(", "max_value", ")", ",", "num_chunks", "=", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.QConv2d.__init__": [[179, 188], ["torch.Conv2d.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "None", ",", "num_bits_grad", "=", "None", ",", "biprecision", "=", "False", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "self", ".", "biprecision", "=", "biprecision", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.QConv2d.forward": [[189, 211], ["quantize.QConv2d.quantize_input", "quantize.quantize", "quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "quantize.conv2d_biprec", "float", "float", "quantize.quantize_grad", "quantize.QConv2d.weight.min", "quantize.QConv2d.weight.max"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.conv2d_biprec", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "\n", "min_value", "=", "float", "(", "self", ".", "weight", ".", "min", "(", ")", ")", ",", "\n", "max_value", "=", "float", "(", "self", ".", "weight", ".", "max", "(", ")", ")", ")", "\n", "\n", "#self.weight.data = qweight.data", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", ")", "\n", "#self.bias.data = qbias.data", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "", "if", "not", "self", ".", "biprecision", "or", "self", ".", "num_bits_grad", "is", "None", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "                ", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "num_bits_grad", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "conv2d_biprec", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "num_bits_grad", "=", "self", ".", "num_bits_grad", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.QLinear.__init__": [[216, 223], ["torch.Linear.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "None", ",", "num_bits_grad", "=", "None", ",", "biprecision", "=", "False", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "biprecision", "=", "biprecision", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.QLinear.forward": [[224, 243], ["quantize.QLinear.quantize_input", "quantize.quantize", "quantize.quantize", "torch.linear", "torch.linear", "torch.linear", "quantize.linear_biprec", "float", "float", "quantize.quantize_grad", "quantize.QLinear.weight.min", "quantize.QLinear.weight.max"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.linear_biprec", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "\n", "min_value", "=", "float", "(", "self", ".", "weight", ".", "min", "(", ")", ")", ",", "\n", "max_value", "=", "float", "(", "self", ".", "weight", ".", "max", "(", ")", ")", ")", "\n", "#self.weight.data = qweight.data", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", ")", "\n", "#self.bias.data = qbias.data", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "biprecision", "or", "self", ".", "num_bits_grad", "is", "None", ":", "\n", "            ", "output", "=", "F", ".", "linear", "(", "qinput", ",", "qweight", ",", "qbias", ")", "\n", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "                ", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "num_bits_grad", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "linear_biprec", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "num_bits_grad", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.Qsum.__init__": [[247, 253], ["torch.Module.__init__", "quantize.QuantMeasure", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "Qsum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input1", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "self", ".", "quantize_input2", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.Qsum.forward": [[254, 260], ["quantize.Qsum.quantize_input1", "quantize.Qsum.quantize_input2", "quantize.quantize_grad"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "qinput1", "=", "self", ".", "quantize_input1", "(", "input1", ")", "\n", "qinput2", "=", "self", ".", "quantize_input2", "(", "input2", ")", "\n", "out", "=", "qinput1", "+", "qinput2", "\n", "out", "=", "quantize_grad", "(", "out", ",", "num_bits", "=", "self", ".", "num_bits_grad", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeBN.__init__": [[265, 281], ["torch.Module.__init__", "quantize.RangeBN.register_buffer", "quantize.RangeBN.register_buffer", "quantize.QuantMeasure", "quantize.RangeBN.reset_params", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeEN.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "affine", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num_chunks", "=", "num_chunks", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeBN.reset_params": [[282, 287], ["quantize.RangeBN.weight.data.uniform_", "quantize.RangeBN.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeBN.forward": [[288, 333], ["quantize.RangeBN.quantize_input", "quantize.quantize", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose().contiguous", "y.view.view.view", "[].mean", "[].mean", "y.view.view.view().mean", "quantize.RangeBN.running_mean.detach().mul_().add_", "quantize.RangeBN.running_var.detach().mul_().add_", "quantize.view", "quantize.quantize", "quantize.quantize", "quantize.quantize_grad", "out.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "float", "float", "y.view.view().mean.view", "quantize.size", "quantize.view", "quantize.view", "out.squeeze().squeeze.squeeze().squeeze.size", "out.squeeze().squeeze.squeeze().squeeze.size", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose", "y.view.view.view", "quantize.RangeBN.running_mean.detach().mul_", "quantize.RangeBN.running_var.detach().mul_", "quantize.min", "quantize.max", "y.view.view().mean.size", "float", "float", "quantize.size", "quantize.size", "out.squeeze().squeeze.squeeze().squeeze.squeeze", "y.view.view.max", "y.view.view.min", "math.log", "quantize.RangeBN.weight.min", "quantize.RangeBN.weight.max", "y.view.view.size", "quantize.RangeBN.running_mean.detach", "quantize.RangeBN.running_var.detach", "math.log"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "quantize_input", "(", "x", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "# 1d", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ",", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "y", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# C x B x H x W", "\n", "y", "=", "y", ".", "view", "(", "C", ",", "self", ".", "num_chunks", ",", "B", "*", "H", "*", "W", "//", "self", ".", "num_chunks", ")", "\n", "mean_max", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean_min", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean", "=", "y", ".", "view", "(", "C", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# C", "\n", "scale_fix", "=", "(", "0.5", "*", "0.35", ")", "*", "(", "1", "+", "(", "math", ".", "pi", "*", "math", ".", "log", "(", "4", ")", ")", "**", "\n", "0.5", ")", "/", "(", "(", "2", "*", "math", ".", "log", "(", "y", ".", "size", "(", "-", "1", ")", ")", ")", "**", "0.5", ")", "\n", "\n", "scale", "=", "1", "/", "(", "(", "mean_max", "-", "mean_min", ")", "*", "scale_fix", "+", "self", ".", "eps", ")", "\n", "\n", "self", ".", "running_mean", ".", "detach", "(", ")", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "mean", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "self", ".", "running_var", ".", "detach", "(", ")", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "scale", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "scale", "=", "self", ".", "running_var", "\n", "", "scale", "=", "quantize", "(", "scale", ",", "num_bits", "=", "self", ".", "num_bits", ",", "min_value", "=", "float", "(", "\n", "scale", ".", "min", "(", ")", ")", ",", "max_value", "=", "float", "(", "scale", ".", "max", "(", ")", ")", ")", "\n", "out", "=", "(", "x", "-", "mean", ".", "view", "(", "1", ",", "mean", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ")", "*", "scale", ".", "view", "(", "1", ",", "scale", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits", ",", "\n", "min_value", "=", "float", "(", "self", ".", "weight", ".", "min", "(", ")", ")", ",", "\n", "max_value", "=", "float", "(", "self", ".", "weight", ".", "max", "(", ")", ")", ")", "\n", "out", "=", "out", "*", "qweight", ".", "view", "(", "1", ",", "qweight", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits", ")", "\n", "out", "=", "out", "+", "qbias", ".", "view", "(", "1", ",", "qbias", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "            ", "out", "=", "quantize_grad", "(", "out", ",", "num_bits", "=", "self", ".", "num_bits_grad", ")", "\n", "\n", "", "if", "out", ".", "size", "(", "3", ")", "==", "1", "and", "out", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "            ", "out", "=", "out", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeEN.__init__": [[336, 352], ["torch.Module.__init__", "quantize.QuantMeasure", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "quantize.RangeEN.reset_params", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeEN.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "chunks", "=", "16", ",", "groups", "=", "8", ",", "apply_act", "=", "True", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeEN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chunks", "=", "chunks", "\n", "self", ".", "apply_act", "=", "apply_act", "# apply activation (non-linearity)", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "param_shape", "=", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "#self.hs        = nn.Hardsigmoid()", "\n", "if", "apply_act", ":", "\n", "            ", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param_shape", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeEN.reset_params": [[353, 358], ["quantize.RangeEN.weight.data.uniform_", "quantize.RangeEN.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.RangeEN.forward": [[359, 394], ["quantize.RangeEN.quantize_input", "x.reshape.reshape.dim", "quantize.quantize", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.reshape.reshape.reshape", "[].mean", "[].mean", "quantize.quantize", "x.reshape.reshape.reshape", "quantize.quantize", "quantize.quantize", "quantize.quantize_grad", "n.reshape", "quantize.view", "float", "float", "float", "float", "quantize.size", "quantize.size", "float", "float", "quantize.RangeEN.v.min", "quantize.RangeEN.v.max", "x.reshape.reshape.max", "x.reshape.reshape.min", "math.log", "quantize.min", "quantize.max", "quantize.RangeEN.weight.min", "quantize.RangeEN.weight.max", "x.reshape.reshape.size", "math.log"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "'expected 4D input'", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "C", "%", "self", ".", "groups", "==", "0", "\n", "\n", "#scale.view(1, scale.size(0), 1, 1)", "\n", "x", "=", "self", ".", "quantize_input", "(", "x", ")", "\n", "if", "self", ".", "apply_act", ":", "\n", "            ", "qv", "=", "quantize", "(", "self", ".", "v", ",", "num_bits", "=", "self", ".", "num_bits", ",", "\n", "min_value", "=", "float", "(", "self", ".", "v", ".", "min", "(", ")", ")", ",", "\n", "max_value", "=", "float", "(", "self", ".", "v", ".", "max", "(", ")", ")", ")", "\n", "hs", "=", "torch", ".", "clamp", "(", "(", "(", "x", "*", "qv", ")", "/", "6", ")", "+", "0.5", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "n", "=", "x", "*", "hs", "# n = x*sigmoid(x*v)", "\n", "y", "=", "x", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "self", ".", "num_chunks", ",", "-", "1", ")", "\n", "mean_max", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean_min", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "scale_fix", "=", "(", "0.5", "*", "0.35", ")", "*", "(", "1", "+", "(", "math", ".", "pi", "*", "math", ".", "log", "(", "4", ")", ")", "**", "0.5", ")", "/", "(", "(", "2", "*", "math", ".", "log", "(", "y", ".", "size", "(", "-", "1", ")", ")", ")", "**", "0.5", ")", "\n", "scale", "=", "1", "/", "(", "(", "mean_max", "-", "mean_min", ")", "*", "scale_fix", "+", "self", ".", "eps", ")", "\n", "scale", "=", "quantize", "(", "scale", ",", "num_bits", "=", "self", ".", "num_bits", ",", "min_value", "=", "float", "(", "scale", ".", "min", "(", ")", ")", ",", "max_value", "=", "float", "(", "scale", ".", "max", "(", ")", ")", ")", "\n", "x", "=", "n", ".", "reshape", "(", "B", ",", "self", ".", "groups", ",", "-", "1", ")", "*", "scale", ".", "view", "(", "scale", ".", "size", "(", "0", ")", ",", "scale", ".", "size", "(", "1", ")", ",", "1", ")", "# x = n/var(x) groupwise instance variance", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits", ",", "\n", "min_value", "=", "float", "(", "self", ".", "weight", ".", "min", "(", ")", ")", ",", "\n", "max_value", "=", "float", "(", "self", ".", "weight", ".", "max", "(", ")", ")", ")", "\n", "out", "=", "x", "*", "qweight", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits", ")", "\n", "out", "=", "out", "+", "qbias", "\n", "", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "            ", "out", "=", "quantize_grad", "(", "out", ",", "num_bits", "=", "self", ".", "num_bits_grad", ")", "\n", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize._mean": [[9, 21], ["p.mean", "p.contiguous().view().mean().view", "p.contiguous().view().mean().view", "_mean().transpose", "p.size", "p.contiguous().view().mean", "p.dim", "p.dim", "p.size", "p.contiguous().view().mean", "quantize._mean", "p.contiguous().view", "p.dim", "p.transpose", "p.size", "p.contiguous().view", "p.contiguous", "p.size", "p.contiguous"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize._mean"], ["def", "_mean", "(", "p", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Computes the mean over all dimensions except dim\"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "return", "p", ".", "mean", "(", ")", "\n", "", "elif", "dim", "==", "0", ":", "\n", "        ", "output_size", "=", "(", "p", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "p", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "elif", "dim", "==", "p", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "output_size", "=", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "p", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "p", ".", "size", "(", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mean", "(", "p", ".", "transpose", "(", "0", ",", "dim", ")", ",", "0", ")", ".", "transpose", "(", "0", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.tile": [[22, 29], ["a.repeat.size", "a.repeat.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.index_select", "torch.index_select", "torch.index_select", "a.repeat.dim", "numpy.concatenate", "range", "numpy.arange"], "function", ["None"], ["", "", "def", "tile", "(", "a", ",", "dim", ",", "n_tile", ")", ":", "\n", "    ", "init_dim", "=", "a", ".", "size", "(", "dim", ")", "\n", "repeat_idx", "=", "[", "1", "]", "*", "a", ".", "dim", "(", ")", "\n", "repeat_idx", "[", "dim", "]", "=", "n_tile", "\n", "a", "=", "a", ".", "repeat", "(", "*", "(", "repeat_idx", ")", ")", "\n", "order_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "concatenate", "(", "[", "init_dim", "*", "np", ".", "arange", "(", "n_tile", ")", "+", "i", "for", "i", "in", "range", "(", "init_dim", ")", "]", ")", ")", "\n", "return", "torch", ".", "index_select", "(", "a", ",", "dim", ",", "order_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.conv2d_biprec": [[122, 129], ["torch.conv2d", "torch.conv2d", "quantize.quantize_grad", "input.detach", "weight.detach", "F.conv2d.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "", "def", "conv2d_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "conv2d", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.linear_biprec": [[131, 137], ["torch.linear", "torch.linear", "quantize.quantize_grad", "input.detach", "weight.detach", "F.linear.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad"], ["", "def", "linear_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "linear", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ")", "\n", "out2", "=", "F", ".", "linear", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "\n", "if", "bias", "is", "not", "None", "else", "None", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize": [[139, 141], ["UniformQuantize().apply", "quantize.UniformQuantize"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.apply"], ["", "def", "quantize", "(", "x", ",", "num_bits", "=", "8", ",", "min_value", "=", "None", ",", "max_value", "=", "None", ",", "num_chunks", "=", "None", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "UniformQuantize", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "min_value", ",", "max_value", ",", "num_chunks", ",", "stochastic", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.quantize.quantize_grad": [[144, 146], ["UniformQuantizeGrad().apply", "quantize.UniformQuantizeGrad"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.quantized_training.bwn.BoundedWeighNorm.apply"], ["", "def", "quantize_grad", "(", "x", ",", "num_bits", "=", "8", ",", "min_value", "=", "None", ",", "max_value", "=", "None", ",", "stochastic", "=", "True", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "UniformQuantizeGrad", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "min_value", ",", "max_value", ",", "stochastic", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_top_k": [[19, 34], ["x.view", "x.view.nelement", "max", "int", "torch.max", "torch.topk", "x.view.abs", "x.view.abs"], "methods", ["None"], ["    ", "def", "get_top_k", "(", "self", ",", "x", ",", "ratio", ")", ":", "\n", "        ", "\"\"\"it will sample the top 1-ratio of the samples.\"\"\"", "\n", "x_data", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "x_len", "=", "x_data", ".", "nelement", "(", ")", "\n", "top_k", "=", "max", "(", "1", ",", "int", "(", "x_len", "*", "(", "1", "-", "ratio", ")", ")", ")", "\n", "\n", "# get indices and the corresponding values", "\n", "if", "top_k", "==", "1", ":", "\n", "            ", "_", ",", "selected_indices", "=", "torch", ".", "max", "(", "x_data", ".", "abs", "(", ")", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "selected_indices", "=", "torch", ".", "topk", "(", "\n", "x_data", ".", "abs", "(", ")", ",", "top_k", ",", "largest", "=", "True", ",", "sorted", "=", "False", "\n", ")", "\n", "#print(x.size(), top_k)", "\n", "", "return", "x_data", "[", "selected_indices", "]", ",", "selected_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_mask": [[35, 41], ["torch.zeros_like", "mask.byte.byte.byte", "mask.byte.byte.float"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "flatten_arr", ",", "indices", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "zeros_like", "(", "flatten_arr", ")", "\n", "mask", "[", "indices", "]", "=", "1", "\n", "\n", "mask", "=", "mask", ".", "byte", "(", ")", "\n", "return", "mask", ".", "float", "(", ")", ",", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_random_k": [[42, 57], ["x.view", "x.view.nelement", "max", "numpy.random.choice", "torch.LongTensor().to", "int", "torch.LongTensor"], "methods", ["None"], ["", "def", "get_random_k", "(", "self", ",", "x", ",", "ratio", ",", "is_biased", "=", "True", ")", ":", "\n", "        ", "\"\"\"it will randomly sample the 1-ratio of the samples.\"\"\"", "\n", "# get tensor size.", "\n", "x_data", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "x_len", "=", "x_data", ".", "nelement", "(", ")", "\n", "top_k", "=", "max", "(", "1", ",", "int", "(", "x_len", "*", "(", "1", "-", "ratio", ")", ")", ")", "\n", "\n", "# random sample the k indices.", "\n", "selected_indices", "=", "np", ".", "random", ".", "choice", "(", "x_len", ",", "top_k", ",", "replace", "=", "False", ")", "\n", "selected_indices", "=", "torch", ".", "LongTensor", "(", "selected_indices", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "is_biased", ":", "\n", "            ", "return", "x_data", "[", "selected_indices", "]", ",", "selected_indices", "\n", "", "else", ":", "\n", "            ", "return", "x_len", "/", "top_k", "*", "x_data", "[", "selected_indices", "]", ",", "selected_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.compress": [[58, 68], ["compressor.SparsificationCompressor.get_top_k", "compressor.SparsificationCompressor.get_random_k"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_top_k", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.SparsificationCompressor.get_random_k"], ["", "", "def", "compress", "(", "self", ",", "arr", ",", "op", ",", "compress_ratio", ",", "is_biased", ")", ":", "\n", "        ", "if", "\"top_k\"", "in", "op", ":", "\n", "            ", "values", ",", "indices", "=", "self", ".", "get_top_k", "(", "arr", ",", "compress_ratio", ")", "\n", "", "elif", "\"random_k\"", "in", "op", ":", "\n", "            ", "values", ",", "indices", "=", "self", ".", "get_random_k", "(", "arr", ",", "compress_ratio", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# n_bits = get_n_bits(values) + get_n_bits(indices)", "\n", "", "return", "values", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.get_qsgd": [[71, 88], ["x.norm", "torch.floor", "x.nelement", "x.abs", "torch.rand_like", "min", "torch.sign", "math.sqrt"], "methods", ["None"], ["    ", "def", "get_qsgd", "(", "self", ",", "x", ",", "s", ",", "is_biased", "=", "False", ")", ":", "\n", "# s=255 for level=8", "\n", "        ", "norm", "=", "x", ".", "norm", "(", "p", "=", "2", ")", "\n", "level_float", "=", "s", "*", "x", ".", "abs", "(", ")", "/", "norm", "\n", "previous_level", "=", "torch", ".", "floor", "(", "level_float", ")", "\n", "is_next_level", "=", "(", "torch", ".", "rand_like", "(", "x", ")", "<", "(", "level_float", "-", "previous_level", ")", ")", ".", "float", "(", ")", "\n", "new_level", "=", "previous_level", "+", "is_next_level", "\n", "# assert not torch.isnan(is_next_level).any()", "\n", "#print('\\n',x, new_level/s)", "\n", "\n", "scale", "=", "1", "\n", "if", "is_biased", ":", "\n", "            ", "d", "=", "x", ".", "nelement", "(", ")", "\n", "scale", "=", "1.0", "/", "(", "min", "(", "d", "/", "(", "s", "**", "2", ")", ",", "math", ".", "sqrt", "(", "d", ")", "/", "s", ")", "+", "1.0", ")", "\n", "#print(scale)", "\n", "\n", "", "return", "scale", "*", "torch", ".", "sign", "(", "x", ")", "*", "norm", "*", "(", "new_level", "/", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.compress": [[90, 97], ["compressor.QuantizationCompressor.get_qsgd"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.get_qsgd"], ["", "def", "compress", "(", "self", ",", "arr", ",", "op", ",", "quantize_level", ",", "is_biased", ")", ":", "\n", "        ", "if", "quantize_level", "!=", "32", ":", "\n", "            ", "s", "=", "2", "**", "quantize_level", "-", "1", "\n", "values", "=", "self", ".", "get_qsgd", "(", "arr", ",", "s", ",", "is_biased", ")", "\n", "", "else", ":", "\n", "            ", "values", "=", "arr", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.QuantizationCompressor.uncompress": [[98, 100], ["None"], "methods", ["None"], ["", "def", "uncompress", "(", "self", ",", "arr", ")", ":", "\n", "        ", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.compressor.get_n_bits": [[11, 13], ["tensor.element_size", "tensor.nelement"], "function", ["None"], ["def", "get_n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.MixingManager.__init__": [[15, 18], ["None"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "graph", ",", "device", ")", ":", "\n", "        ", "self", ".", "graph_manager", "=", "graph", "\n", "self", ".", "device", "=", "device", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.MixingManager.is_regular": [[19, 25], ["mixing_manager.MixingManager.graph_manager.is_regular_graph", "mixing_manager.MixingManager.is_uniform"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_regular_graph", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.is_uniform"], ["\n", "", "def", "is_regular", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Whether there is bias accumulated in local entry of stationary\n        distribution of mixing matrix\n        \"\"\"", "\n", "return", "self", ".", "graph_manager", ".", "is_regular_graph", "(", ")", "and", "self", ".", "is_uniform", "(", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.MixingManager.is_uniform": [[26, 29], ["None"], "methods", ["None"], ["\n", "", "def", "is_uniform", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether mixing weights are distributed uniformly over peers \"\"\"", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.MixingManager.get_mixing_weights": [[30, 33], ["None"], "methods", ["None"], ["\n", "", "def", "get_mixing_weights", "(", "self", ",", "residual_adjusted", "=", "True", ")", ":", "\n", "        ", "\"\"\" Create mixing weight dictionary using uniform allocation \"\"\"", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.get_mixing_weights": [[37, 45], ["mixing_manager.UniformMixing.graph_manager.get_peers", "torch.tensor", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.get_peers"], ["\n", "    ", "def", "get_mixing_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Create mixing weight dictionary using uniform allocation \"\"\"", "\n", "mixing_weights", "=", "{", "}", "\n", "out_peers", ",", "_", "=", "self", ".", "graph_manager", ".", "get_peers", "(", ")", "\n", "mixing_weights", "[", "'uniform'", "]", "=", "torch", ".", "tensor", "(", "[", "1.", "/", "(", "len", "(", "out_peers", ")", "+", "1", ")", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "#mixing_weights['try'] = torch.tensor([1. / (len(out_peers)+2)], device=self.device)", "\n", "return", "mixing_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.is_uniform": [[46, 47], ["None"], "methods", ["None"], ["", "def", "is_uniform", "(", "self", ")", ":", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__init__": [[40, 170], ["torch.nn.modules.Module.__init__", "mixing_manager.UniformMixing.get_mixing_weights", "int", "utils.make_logger", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "module.parameters", "threading.Lock", "threading.Event", "threading.Event", "threading.Thread", "distributed.GossipDataParallel.gossip_thread.start", "distributed.GossipDataParallel.gossip_flag.wait", "distributed.GossipDataParallel.gossip_flag.clear", "distributed.GossipDataParallel.__register_hooks", "list", "torch.is_initialized", "torch.is_initialized", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "next", "mixing_manager.UniformMixing", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "p.clone().detach_", "distributed.GossipDataParallel.gossip_params.append", "distributed.GossipDataParallel.gossip_device_buffer.append", "distributed.GossipDataParallel.neighbor_copy.append", "distributed.GossipDataParallel.self_xhat.append", "distributed.GossipDataParallel.momentum_buff.append", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "range", "distributed.GossipDataParallel.module.parameters", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "p.clone().detach_.cpu().pin_memory", "p.clone().detach_.to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.get_backend", "torch.get_backend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "p.clone", "p.clone().detach_.cpu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.get_mixing_weights", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.make_logger", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__register_hooks"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "rank", "=", "None", ",", "world_size", "=", "None", ",", "\n", "graph", "=", "None", ",", "mixing", "=", "None", ",", "comm_device", "=", "None", ",", "push_sum", "=", "True", ",", "\n", "overlap", "=", "False", ",", "synch_freq", "=", "0", ",", "verbose", "=", "False", ",", "use_streams", "=", "False", ",", "\n", "level", "=", "32", ",", "biased", "=", "False", ",", "eta", "=", "0.5", ",", "momentum", "=", "0.9", ",", "lr", "=", "0.1", ",", "weight_decay", "=", "1e-4", ",", "qgm", "=", "0", ",", "\n", "compress_ratio", "=", "0.5", ",", "compress_fn", "=", "'sparsify'", ",", "compress_op", "=", "'top_k'", ")", ":", "\n", "        ", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# devices available locally", "\n", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "self", ".", "output_device", "=", "device_ids", "[", "0", "]", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "quasi_global_momentum", "=", "qgm", "\n", "self", ".", "epoch", "=", "0", "\n", "#self.iteration   = 0", "\n", "\n", "if", "world_size", "is", "None", "or", "rank", "is", "None", ":", "\n", "            ", "assert", "dist", ".", "is_initialized", "(", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "self", ".", "process_rank", "=", "rank", "\n", "\n", "\n", "# put model on output device", "\n", "self", ".", "module", "=", "module", "\n", "first_param_dtype", "=", "next", "(", "self", ".", "module", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "\n", "# prepare local intra-node all-reduce objects", "\n", "self", ".", "_module_copies", "=", "[", "self", ".", "module", "]", "\n", "\n", "# choose communication device based on backend", "\n", "if", "comm_device", "is", "None", ":", "\n", "            ", "cpu_comm", "=", "True", "if", "dist", ".", "get_backend", "(", ")", "==", "'gloo'", "else", "False", "\n", "comm_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "cpu_comm", "else", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "self", ".", "__cpu_comm", "=", "comm_device", ".", "type", "==", "'cpu'", "\n", "\n", "\n", "if", "mixing", "is", "None", ":", "\n", "            ", "mixing", "=", "UniformMixing", "(", "graph", ",", "comm_device", ")", "\n", "\n", "# distributed backend config", "\n", "", "self", ".", "dist_config", "=", "{", "\n", "'verbose'", ":", "verbose", ",", "\n", "'comm_device'", ":", "comm_device", ",", "\n", "'graph'", ":", "graph", ",", "\n", "'mixing'", ":", "mixing", ",", "\n", "'push_sum'", ":", "push_sum", ",", "\n", "'rank'", ":", "rank", ",", "\n", "'process_rank'", ":", "self", ".", "process_rank", ",", "\n", "'world_size'", ":", "world_size", ",", "\n", "'cpu_comm'", ":", "self", ".", "__cpu_comm", ",", "\n", "'level'", ":", "level", ",", "\n", "'biased'", ":", "biased", ",", "\n", "'compressor'", ":", "compress_fn", ",", "\n", "'ratio'", ":", "compress_ratio", ",", "\n", "'op'", ":", "compress_op", ",", "\n", "'data_transferred'", ":", "0", ",", "\n", "'epoch'", ":", "0.0", ",", "\n", "'iterations'", ":", "0", "}", "\n", "#print('quatization bit precision:', level)", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "synch_freq", "=", "synch_freq", "\n", "self", ".", "num_updates", "=", "0", "\n", "self", ".", "asynch", "=", "synch_freq", ">", "0", "\n", "\n", "# logger used to print to stdout", "\n", "self", ".", "logger", "=", "make_logger", "(", "rank", ",", "verbose", ")", "\n", "\n", "\n", "# prepare parameters for gossip", "\n", "self", ".", "gossip_enable", "=", "True", "\n", "self", ".", "gossiping", "=", "False", "\n", "self", ".", "params_mixed", "=", "True", "\n", "self", ".", "is_ps_numerator", "=", "False", "\n", "\n", "self", ".", "averaging_rate", "=", "torch", ".", "ones", "(", "1", ",", "device", "=", "comm_device", ")", ".", "type", "(", "first_param_dtype", ")", "*", "eta", "\n", "self", ".", "average_iters", "=", "int", "(", "1.0", "/", "eta", ")", "\n", "#print(self.average_iters)", "\n", "self", ".", "gossip_ps_weight", "=", "torch", ".", "ones", "(", "1", ",", "device", "=", "comm_device", ")", ".", "type", "(", "first_param_dtype", ")", "\n", "self", ".", "ps_weight", "=", "torch", ".", "ones", "(", "1", ",", "device", "=", "comm_device", ")", ".", "type", "(", "first_param_dtype", ")", "\n", "self", ".", "gossip_params", "=", "[", "]", "\n", "self", ".", "gossip_device_buffer", "=", "[", "]", "\n", "self", ".", "momentum_buff", "=", "[", "]", "\n", "#self.running_gossip = []", "\n", "self", ".", "gossip_error", "=", "[", "]", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "cp", "=", "p", ".", "clone", "(", ")", ".", "detach_", "(", ")", "\n", "#pp = cp.clone().detach_()", "\n", "cp", "=", "cp", ".", "cpu", "(", ")", ".", "pin_memory", "(", ")", "if", "self", ".", "__cpu_comm", "else", "cp", ".", "to", "(", "comm_device", ")", "#cp.cuda()", "\n", "self", ".", "gossip_params", ".", "append", "(", "cp", ")", "\n", "self", ".", "gossip_device_buffer", ".", "append", "(", "cp", ")", "\n", "self", ".", "gossip_error", ".", "append", "(", "torch", ".", "zeros_like", "(", "cp", ")", ".", "to", "(", "comm_device", ")", ")", "\n", "self", ".", "momentum_buff", ".", "append", "(", "torch", ".", "zeros_like", "(", "cp", ")", ".", "to", "(", "comm_device", ")", ")", "\n", "\n", "# prepare gossip process control objects", "\n", "", "self", ".", "gossip_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "gossip_flag", "=", "threading", ".", "Event", "(", ")", "\n", "self", ".", "train_flag", "=", "threading", ".", "Event", "(", ")", "\n", "\n", "if", "self", ".", "dist_config", "[", "'comm_device'", "]", ".", "type", "!=", "'cpu'", "and", "use_streams", ":", "\n", "            ", "self", ".", "gossip_stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gossip_stream", "=", "torch", ".", "cuda", ".", "current_stream", "(", "device", "=", "comm_device", ")", "\n", "\n", "\n", "", "self", ".", "gossip_thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "GossipDataParallel", ".", "_gossip_target", ",", "\n", "args", "=", "(", "self", ".", "dist_config", ",", "\n", "self", ".", "gossip_flag", ",", "\n", "self", ".", "train_flag", ",", "\n", "self", ".", "gossip_lock", ",", "\n", "self", ".", "gossip_params", ",", "\n", "self", ".", "gossip_device_buffer", ",", "\n", "self", ".", "gossip_error", ",", "\n", "self", ".", "gossip_stream", ",", "\n", "self", ".", "gossip_ps_weight", ")", ")", "\n", "self", ".", "gossip_thread", ".", "daemon", "=", "True", "\n", "self", ".", "gossip_thread", ".", "name", "=", "'Gossip-Thread'", "\n", "self", ".", "gossip_thread", ".", "start", "(", ")", "\n", "\n", "# wait for thread to complete initialization", "\n", "self", ".", "gossip_flag", ".", "wait", "(", ")", "\n", "self", ".", "gossip_flag", ".", "clear", "(", ")", "\n", "\n", "##############################################################", "\n", "\n", "# register ps/grad-reduction hooks", "\n", "self", ".", "__register_hooks", "(", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.update_gossiper": [[171, 182], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.dist_config[].values", "distributed.GossipDataParallel.logger.debug", "setattr", "getattr", "distributed.GossipDataParallel.logger.debug"], "methods", ["None"], ["\n", "", "def", "update_gossiper", "(", "self", ",", "attr", ",", "val", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "'waiting for gossip lock'", ")", "\n", "with", "self", ".", "gossip_lock", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'gossip lock received'", ")", "\n", "for", "gossiper", "in", "self", ".", "dist_config", "[", "'gossipers'", "]", ".", "values", "(", ")", ":", "\n", "                ", "if", "val", "==", "getattr", "(", "gossiper", ",", "attr", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "debug", "(", "'nothing to update'", ")", "\n", "return", "\n", "# update attr", "\n", "", "self", ".", "logger", ".", "debug", "(", "'setting gossiper {} to {}'", ".", "format", "(", "attr", ",", "val", ")", ")", "\n", "setattr", "(", "gossiper", ",", "attr", ",", "val", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict": [[183, 190], ["super().state_dict", "distributed.GossipDataParallel._query_gossip_queue"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.state_dict", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue"], ["\n", "", "", "", "def", "state_dict", "(", "self", ",", "finish_gossip", "=", "True", ")", ":", "\n", "        ", "if", "finish_gossip", ":", "\n", "            ", "self", ".", "_query_gossip_queue", "(", ")", "\n", "\n", "", "super_dict", "=", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "state_dict", "(", ")", "\n", "supplanted_dict", "=", "{", "'state_dict'", ":", "super_dict", ",", "}", "\n", "return", "supplanted_dict", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.load_state_dict": [[191, 194], ["super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.load_state_dict"], ["\n", "", "def", "load_state_dict", "(", "self", ",", "load_dict", ")", ":", "\n", "        ", "state_dict", "=", "load_dict", "[", "'state_dict'", "]", "\n", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.ps_numerator": [[195, 211], ["distributed.GossipDataParallel.module.parameters", "p.data.mul_", "zip", "ps_weight.type", "distributed.GossipDataParallel.module.parameters", "copy.deepcopy", "p.grad.data.add_", "copy.deepcopy.data.mul_().add_", "p.grad.data.add_", "m.data.mul_().add_", "copy.deepcopy.data.mul_", "m.data.mul_"], "methods", ["None"], ["\n", "\n", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Forward pass performed in parallel across all devices on node \"\"\"", "\n", "# scatter inputs onto devices", "\n", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "\n", "", "def", "ps_numerator", "(", "self", ")", ":", "\n", "        ", "\"\"\" Convert model params to ps-numerator \"\"\"", "\n", "if", "not", "self", ".", "is_ps_numerator", ":", "\n", "            ", "ps_weight", "=", "self", ".", "ps_weight", "\n", "#print(ps_weight)", "\n", "for", "p", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "mul_", "(", "ps_weight", ".", "type", "(", "p", ".", "data", ".", "dtype", ")", ")", "\n", "\n", "", "if", "self", ".", "quasi_global_momentum", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.unbias": [[212, 219], ["distributed.GossipDataParallel.module.parameters", "p.data.div_", "ps_weight.type"], "methods", ["None"], ["                ", "for", "p", ",", "m", "in", "zip", "(", "self", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "momentum_buff", ")", ":", "\n", "                    ", "if", "p", ".", "requires_grad", ":", "\n", "                      ", "buff", "=", "copy", ".", "deepcopy", "(", "m", ".", "data", ")", "\n", "p", ".", "grad", ".", "data", ".", "add_", "(", "self", ".", "weight_decay", ",", "p", ".", "data", ")", "\n", "buff", ".", "data", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "p", ".", "grad", ".", "data", ")", "\n", "p", ".", "grad", ".", "data", ".", "add_", "(", "self", ".", "momentum", ",", "buff", ".", "data", ")", "\n", "m", ".", "data", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "p", ".", "grad", ".", "data", ",", "alpha", "=", "1", "-", "self", ".", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.forward": [[220, 225], ["distributed.GossipDataParallel.scatter", "distributed.GossipDataParallel.module"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.scatter"], ["", "", "", "self", ".", "is_ps_numerator", "=", "True", "\n", "\n", "", "", "def", "unbias", "(", "self", ")", ":", "\n", "        ", "\"\"\" Convert model params to de-biased estimate \"\"\"", "\n", "if", "self", ".", "is_ps_numerator", ":", "\n", "            ", "ps_weight", "=", "self", ".", "ps_weight", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.scatter": [[226, 228], ["torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.scatter_gather.scatter_kwargs"], "methods", ["None"], ["#print(ps_weight)", "\n", "for", "p", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "div_", "(", "ps_weight", ".", "type", "(", "p", ".", "data", ".", "dtype", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.parallel_apply": [[229, 232], ["torch.nn.parallel.parallel_apply.parallel_apply", "torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.parallel_apply", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.parallel_apply"], ["\n", "", "self", ".", "dist_config", "[", "'iterations'", "]", "+=", "1", "\n", "self", ".", "is_ps_numerator", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.gather": [[233, 235], ["torch.nn.parallel.scatter_gather.gather", "torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.gather", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.gather"], ["\n", "\n", "", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train": [[237, 242], ["super().train", "module.train"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.train"], ["\n", "", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "\n", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n", "", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval": [[243, 249], ["super().eval", "distributed.GossipDataParallel._query_gossip_queue", "module.eval"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.eval"], ["        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "gossip_enable", "=", "True", "\n", "for", "module", "in", "self", ".", "_module_copies", "[", "1", ":", "]", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.block": [[250, 253], ["distributed.GossipDataParallel.logger.info", "torch.barrier", "torch.barrier"], "methods", ["None"], ["            ", "module", ".", "train", "(", "mode", ")", "\n", "\n", "", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "super", "(", "GossipDataParallel", ",", "self", ")", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.update_hats": [[254, 259], ["zip", "xj_hat.data.add_", "qj.data.copy_", "qj.data.add_", "float"], "methods", ["None"], ["self", ".", "gossip_enable", "=", "False", "\n", "for", "module", "in", "self", ".", "_module_copies", "[", "1", ":", "]", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "", "self", ".", "_query_gossip_queue", "(", "non_blocking", "=", "self", ".", "asynch", ")", "\n", "\n", "", "def", "block", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue": [[264, 310], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.gossip_flag.is_set", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.gossip_ps_weight.data.add_", "distributed.GossipDataParallel.gossip_ps_weight.data.mul_", "distributed.GossipDataParallel.ps_weight.data.add_", "distributed.GossipDataParallel.update_hats", "zip", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.gossip_ps_weight.copy_", "distributed.GossipDataParallel.gossip_flag.clear", "distributed.GossipDataParallel.gossip_flag.wait", "NameError", "sys.exit", "distributed.GossipDataParallel.averaging_rate.type", "distributed.GossipDataParallel.module.parameters", "r.data.mul_", "p.data.add_", "distributed.GossipDataParallel.averaging_rate.type", "m.data.add_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.update_hats", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear"], ["", "def", "_query_gossip_queue", "(", "self", ",", "non_blocking", "=", "False", ")", ":", "\n", "        ", "\"\"\" Check gossip-queue for push-sum residuals and update model \"\"\"", "\n", "if", "not", "self", ".", "gossip_enable", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "'querying gossip queue'", ")", "\n", "\n", "# no gossip happening right now so just return", "\n", "if", "not", "self", ".", "gossiping", ":", "\n", "#self.logger.warning('not gossiping right now')", "\n", "            ", "return", "False", "\n", "\n", "", "if", "not", "non_blocking", ":", "\n", "            ", "if", "not", "self", ".", "gossip_flag", ".", "wait", "(", "timeout", "=", "HEARTBEAT_TIMEOUT", ")", ":", "\n", "                ", "raise", "NameError", "(", "'Gossip flag timeout'", ")", "\n", "sys", ".", "exit", "(", ")", "# HEARTBEAT monitor", "\n", "\n", "# query gossip thread", "\n", "", "", "if", "self", ".", "gossip_flag", ".", "is_set", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'received gossip flag'", ")", "\n", "self", ".", "gossip_ps_weight", ".", "data", ".", "mul_", "(", "self", ".", "averaging_rate", ".", "type", "(", "self", ".", "ps_weight", ".", "data", ".", "dtype", ")", ")", "\n", "self", ".", "ps_weight", ".", "data", ".", "add_", "(", "self", ".", "gossip_ps_weight", ")", "\n", "#print(self.gossip_ps_weight, self.ps_weight)", "\n", "ps_weight", "=", "self", ".", "ps_weight", ".", "clone", "(", ")", "\n", "\n", "for", "p", ",", "r", ",", "m", "in", "zip", "(", "self", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "gossip_device_buffer", ",", "self", ".", "momentum_buff", ")", ":", "\n", "                ", "r", ".", "data", ".", "mul_", "(", "self", ".", "averaging_rate", ".", "type", "(", "r", ".", "data", ".", "dtype", ")", ")", "\n", "p", ".", "data", ".", "add_", "(", "r", ")", "\n", "if", "self", ".", "quasi_global_momentum", "==", "1", ":", "\n", "                    ", "m", ".", "data", ".", "add_", "(", "r", ".", "data", ",", "alpha", "=", "(", "(", "self", ".", "momentum", "-", "1.0", ")", "/", "(", "self", ".", "lr", "*", "float", "(", "ps_weight", ".", "data", ")", ")", ")", ")", "\n", "\n", "# update flags", "\n", "#self.logger.debug('updated ps-weight {}'.format(self.ps_weight))", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "'updated model params'", ")", "\n", "self", ".", "gossip_ps_weight", ".", "copy_", "(", "self", ".", "ps_weight", ")", "\n", "self", ".", "gossip_flag", ".", "clear", "(", ")", "\n", "self", ".", "params_mixed", "=", "True", "\n", "self", ".", "gossiping", "=", "False", "\n", "return", "True", "\n", "\n", "", "", "def", "transfer_params", "(", "self", ",", "mix", "=", "True", ",", "epoch", "=", "0", ",", "lr", "=", "0.1", ")", ":", "\n", "        ", "\"\"\" Transfers COPY of model parameters to gossip queue \"\"\"", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "(", "not", "self", ".", "gossip_enable", ")", ":", "\n", "            ", "return", "False", ",", "0", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params": [[311, 350], ["distributed.GossipDataParallel.logger.debug", "zip", "distributed.GossipDataParallel.gossip_stream.wait_stream", "distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.train_flag.set", "distributed.GossipDataParallel.logger.warning", "distributed.GossipDataParallel.module.parameters", "gossip_device_buffer_elem.data.copy_", "gossip_device_buffer_elem.data.add_", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "zip", "gp.copy_"], "methods", ["None"], ["\n", "", "self", ".", "logger", ".", "debug", "(", "'transfering model params'", ")", "\n", "\n", "# don't transfer new params if old params haven't been mixed yet", "\n", "if", "not", "self", ".", "params_mixed", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "'params not mixed'", ")", "\n", "return", "False", ",", "0", "\n", "\n", "\n", "# params gpu-gpu copy (fast)", "\n", "# --", "\n", "#if self.dist_config['iterations']%2==0:", "\n", "", "for", "p", ",", "gossip_device_buffer_elem", ",", "error", "in", "zip", "(", "self", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "gossip_device_buffer", ",", "self", ".", "gossip_error", ")", ":", "\n", "            ", "gossip_device_buffer_elem", ".", "data", ".", "copy_", "(", "p", ")", "\n", "gossip_device_buffer_elem", ".", "data", ".", "add_", "(", "error", ")", "\n", "\n", "# --", "\n", "# buffer to gossip-thread copy (potentially slow, but asynchronous)", "\n", "# --", "\n", "", "self", ".", "gossip_stream", ".", "wait_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", "device", "=", "self", ".", "dist_config", "[", "'comm_device'", "]", ")", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "gossip_stream", ")", ":", "\n", "            ", "for", "b", ",", "gp", "in", "zip", "(", "self", ".", "gossip_device_buffer", ",", "self", ".", "gossip_params", ")", ":", "\n", "# assert not torch.isnan(gp).any()", "\n", "                ", "gp", ".", "copy_", "(", "b", ",", "non_blocking", "=", "True", ")", "\n", "# update flags", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "'transfered model params'", ")", "\n", "self", ".", "dist_config", "[", "'epoch'", "]", "=", "epoch", "\n", "self", ".", "params_mixed", "=", "False", "\n", "self", ".", "gossiping", "=", "True", "\n", "self", ".", "train_flag", ".", "set", "(", ")", "\n", "return", "True", ",", "self", ".", "dist_config", "[", "'data_transferred'", "]", "\n", "#return True", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_gossip_into_receive_buffer", "(", "send_buffer", ",", "gossiper", ",", "receive_buffer", ",", "\n", "error_buffer", ",", "\n", "gossip_lock", ",", "\n", "dist_config", ",", "\n", "ps_weight", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._gossip_into_receive_buffer": [[351, 396], ["zip", "zip", "utils.quantize_layerwise", "utils.flatten_tensors", "xi_hat.data.add_", "gossiper.mix", "utils.unflatten_tensors", "compressor.QuantizationCompressor", "utils.sparsify_layerwise", "utils.unsparsify_layerwise", "g.copy_", "g.data.copy_", "compressor.SparsificationCompressor"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.quantize_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.SGD_DS.mix", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unflatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.sparsify_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unsparsify_layerwise"], ["\n", "        ", "if", "dist_config", "[", "'compressor'", "]", "==", "'quantize'", ":", "\n", "            ", "updated_error", "=", "copy", ".", "deepcopy", "(", "send_buffer", ")", "\n", "comp_unflat", "=", "quantize_layerwise", "(", "send_buffer", ",", "QuantizationCompressor", "(", ")", ",", "quantization_level", "=", "dist_config", "[", "'level'", "]", ",", "is_biased", "=", "dist_config", "[", "'biased'", "]", ")", "# C(Vt)", "\n", "comp_msg", "=", "flatten_tensors", "(", "comp_unflat", ")", "\n", "shapes", "=", "None", "\n", "uncompress", "=", "False", "\n", "\n", "", "elif", "dist_config", "[", "'compressor'", "]", "==", "'sparsify'", ":", "\n", "            ", "updated_error", "=", "copy", ".", "deepcopy", "(", "send_buffer", ")", "\n", "#assert not torch.isnan(flatten_tensors(send_buffer)).any()", "\n", "comp_msg", ",", "shapes", "=", "sparsify_layerwise", "(", "send_buffer", ",", "SparsificationCompressor", "(", ")", ",", "dist_config", "[", "'op'", "]", ",", "dist_config", "[", "'ratio'", "]", ",", "dist_config", "[", "'biased'", "]", ")", "\n", "comp_unflat", "=", "unsparsify_layerwise", "(", "comp_msg", ",", "shapes", ",", "send_buffer", ")", "\n", "uncompress", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "#        if dist_config['iterations']%1==0:", "\n", "", "for", "r", ",", "p", ",", "q", "in", "zip", "(", "comp_unflat", ",", "updated_error", ",", "error_buffer", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "-", "r", ")", "\n", "q", ".", "data", ".", "copy_", "(", "p", ")", "\n", "\n", "# send and receive parameters", "\n", "", "with", "gossip_lock", ":", "\n", "            ", "data_amt", "=", "0", "\n", "#if dist_config['rank']==0 :print(dist_config['iterations'], comp_msg[0])", "\n", "in_msg", ",", "updated_ps_weight", ",", "data_amt", "=", "gossiper", ".", "mix", "(", "comp_msg", ",", "send_buffer", ",", "ps_weight", ",", "residual", "=", "True", ",", "\n", "uncompress", "=", "uncompress", ",", "shapes", "=", "shapes", ",", "epoch", "=", "dist_config", "[", "'epoch'", "]", ",", "iteration", "=", "dist_config", "[", "'iterations'", "]", ")", "\n", "dist_config", "[", "'data_transferred'", "]", "=", "data_amt", "\n", "\n", "", "for", "r", ",", "g", "in", "zip", "(", "unflatten_tensors", "(", "in_msg", ",", "send_buffer", ")", ",", "receive_buffer", ")", ":", "\n", "            ", "if", "dist_config", "[", "'cpu_comm'", "]", ":", "\n", "                ", "g", ".", "copy_", "(", "r", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "g", ".", "data", ".", "copy_", "(", "r", ")", "\n", "\n", "", "", "return", "updated_ps_weight", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_gossip_target", "(", "dist_config", ",", "gossip_flag", ",", "train_flag", ",", "gossip_lock", ",", "\n", "gossip_params", ",", "gossip_device_buffer", ",", "\n", "gossip_error", ",", "\n", "gossip_stream", ",", "\n", "gossip_ps_weight", ")", ":", "\n", "        ", "\"\"\" Gossip thread, which performs push-sum on model params \"\"\"", "\n", "logger", "=", "make_logger", "(", "dist_config", "[", "'rank'", "]", ",", "dist_config", "[", "'verbose'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._gossip_target": [[397, 451], ["utils.make_logger", "utils.group_by_dtype", "utils.group_by_dtype", "utils.group_by_dtype", "gossip_flag.set", "gossiper_class", "train_flag.wait", "utils.make_logger.debug", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossip_stream.synchronize", "train_flag.clear", "gossip_flag.set", "utils.make_logger.warning", "gossipers.values", "utils.flatten_tensors", "distributed.GossipDataParallel._gossip_into_receive_buffer", "gossip_ps_weight.copy_", "gossiper.clean_msg_buffers_"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.make_logger", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.group_by_dtype", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.clear", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._gossip_into_receive_buffer", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.clean_msg_buffers_"], ["\n", "gossip_params_by_dtype", "=", "group_by_dtype", "(", "gossip_params", ")", "#send", "\n", "gossip_device_buffer_by_dtype", "=", "group_by_dtype", "(", "gossip_device_buffer", ")", "#receive", "\n", "gossip_error_by_dtype", "=", "group_by_dtype", "(", "gossip_error", ")", "\n", "\n", "gossipers", "=", "{", "}", "\n", "# init gossip instance", "\n", "gossiper_class", "=", "SGD_DS", "\n", "for", "dtype", "in", "gossip_params_by_dtype", ":", "\n", "            ", "gossipers", "[", "dtype", "]", "=", "gossiper_class", "(", "\n", "torch", ".", "cat", "(", "[", "flatten_tensors", "(", "gossip_params_by_dtype", "[", "dtype", "]", ")", ",", "gossip_ps_weight", "]", ")", ",", "\n", "device", "=", "dist_config", "[", "'comm_device'", "]", ",", "\n", "graph", "=", "dist_config", "[", "'graph'", "]", ",", "\n", "mixing", "=", "dist_config", "[", "'mixing'", "]", ",", "\n", "rank", "=", "dist_config", "[", "'process_rank'", "]", ",", "\n", "world_size", "=", "dist_config", "[", "'world_size'", "]", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "", "dist_config", "[", "'gossipers'", "]", "=", "gossipers", "\n", "\n", "gossip_flag", ".", "set", "(", ")", "\n", "\n", "# gossip loop", "\n", "while", "True", ":", "\n", "            ", "train_flag", ".", "wait", "(", ")", "\n", "logger", ".", "debug", "(", "'received train-flag'", ")", "\n", "try", ":", "\n", "                ", "if", "True", ":", "\n", "#with torch.cuda.stream(gossip_stream):", "\n", "                    ", "for", "dtype", "in", "gossip_params_by_dtype", ":", "\n", "#assert not torch.isnan(flatten_tensors(gossip_params_by_dtype[dtype])).any()", "\n", "                        ", "ps_weight", "=", "GossipDataParallel", ".", "_gossip_into_receive_buffer", "(", "\n", "gossip_params_by_dtype", "[", "dtype", "]", ",", "gossipers", "[", "dtype", "]", ",", "\n", "gossip_device_buffer_by_dtype", "[", "dtype", "]", ",", "\n", "gossip_error_by_dtype", "[", "dtype", "]", ",", "\n", "gossip_lock", ",", "dist_config", ",", "\n", "gossip_ps_weight", ")", "\n", "", "gossip_ps_weight", ".", "copy_", "(", "ps_weight", ")", "\n", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "logger", ".", "warning", "(", "'received runtime error {}'", ".", "format", "(", "e", ")", ")", "\n", "for", "gossiper", "in", "gossipers", ".", "values", "(", ")", ":", "\n", "                    ", "gossiper", ".", "clean_msg_buffers_", "(", ")", "\n", "\n", "", "", "finally", ":", "\n", "# Make sure all queued operations are complete", "\n", "                ", "gossip_stream", ".", "synchronize", "(", ")", "\n", "# give main thread go-ahead to read our gossip buffer", "\n", "train_flag", ".", "clear", "(", ")", "\n", "gossip_flag", ".", "set", "(", ")", "\n", "\n", "", "", "", "def", "__register_hooks", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__register_hooks": [[452, 459], ["distributed.GossipDataParallel.register_forward_pre_hook", "distributed.GossipDataParallel.register_backward_hook", "distributed.GossipDataParallel.__make_forward_pre_hook", "distributed.GossipDataParallel.__make_backward_hook"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__make_forward_pre_hook", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__make_backward_hook"], ["\n", "self", ".", "register_forward_pre_hook", "(", "self", ".", "__make_forward_pre_hook", "(", ")", ")", "\n", "self", ".", "register_backward_hook", "(", "self", ".", "__make_backward_hook", "(", ")", ")", "\n", "\n", "", "def", "__make_backward_hook", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "'making backward hook'", ")", "\n", "\n", "def", "hook", "(", "*", "unused", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__make_backward_hook": [[460, 497], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.ps_numerator", "torch.autograd.Variable._execution_engine.queue_callback", "torch.autograd.Variable._execution_engine.queue_callback", "len", "enumerate", "torch.cuda.comm.reduce_add_coalesced", "torch.cuda.comm.reduce_add_coalesced", "zip", "module.parameters", "grad.copy_", "module.parameters", "range", "all_grads[].append", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "param.set_"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.ps_numerator"], ["# reduce gradients across devices on a single machine", "\n", "            ", "if", "len", "(", "self", ".", "device_ids", ")", ">", "1", ":", "\n", "\n", "# collect gradients from all copies", "\n", "                ", "all_grads", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "_module_copies", ")", ")", "]", "\n", "for", "dev_idx", ",", "module", "in", "enumerate", "(", "self", ".", "_module_copies", ")", ":", "\n", "                    ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "not", "p", ".", "requires_grad", "or", "p", ".", "grad", "is", "None", ":", "\n", "                            ", "continue", "\n", "", "all_grads", "[", "dev_idx", "]", ".", "append", "(", "p", ".", "grad", ".", "data", ")", "\n", "\n", "# reduce grads", "\n", "", "", "reduced_grads", "=", "reduce_add_coalesced", "(", "\n", "all_grads", ",", "self", ".", "output_device", ",", "\n", "self", ".", "nccl_reduce_bucket_size", ")", "\n", "\n", "# update grads with reduced grads", "\n", "for", "grad", ",", "reduced", "in", "zip", "(", "all_grads", "[", "0", "]", ",", "reduced_grads", ")", ":", "\n", "                    ", "grad", ".", "copy_", "(", "reduced", ")", "\n", "\n", "# clear the gradients and parameters across all replicas", "\n", "", "for", "module", "in", "self", ".", "_module_copies", "[", "1", ":", "]", ":", "\n", "                    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                        ", "if", "param", ".", "requires_grad", ":", "\n", "                            ", "param", ".", "grad", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                                ", "param", ".", "set_", "(", ")", "\n", "\n", "\n", "# convert model back to ps-numerator", "\n", "", "", "", "", "", "self", ".", "ps_numerator", "(", ")", "\n", "\n", "\n", "\n", "", "def", "queue_hook", "(", "*", "unused", ")", ":", "\n", "            ", "Variable", ".", "_execution_engine", ".", "queue_callback", "(", "hook", ")", "\n", "", "return", "queue_hook", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.__make_forward_pre_hook": [[498, 516], ["distributed.GossipDataParallel.logger.debug", "distributed.GossipDataParallel.unbias", "distributed.GossipDataParallel._query_gossip_queue", "distributed.GossipDataParallel.transfer_params"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.unbias", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel._query_gossip_queue", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.distributed.GossipDataParallel.transfer_params"], ["", "def", "__make_forward_pre_hook", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "'making forward pre-hook'", ")", "\n", "\n", "def", "hook", "(", "*", "unused", ")", ":", "\n", "            ", "\"\"\" Query gossip queue and de-bias during forward pass \"\"\"", "\n", "# gossip during training (not inference)", "\n", "if", "self", ".", "gossip_enable", ":", "\n", "                ", "non_blocking", "=", "self", ".", "num_updates", "<", "self", ".", "synch_freq", "\n", "if", "self", ".", "_query_gossip_queue", "(", "non_blocking", ")", ":", "\n", "                    ", "self", ".", "num_updates", "=", "0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "num_updates", "+=", "1", "\n", "", "if", "self", ".", "overlap", ":", "\n", "                    ", "self", ".", "transfer_params", "(", ")", "\n", "\n", "#convert model to de-biased estimate", "\n", "", "", "self", ".", "unbias", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.Edge.__init__": [[18, 27], ["torch.new_group", "torch.new_group", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.all_reduce", "torch.all_reduce", "torch.Tensor().to().half", "torch.Tensor().to().half", "torch.Tensor().to().half", "torch.Tensor().to().half", "torch.all_reduce", "torch.all_reduce", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "local_master_rank", ",", "dest", ",", "src", ",", "local_rank", ")", ":", "\n", "        ", "self", ".", "dest", "=", "dest", "\n", "self", ".", "src", "=", "src", "\n", "self", ".", "process_group", "=", "dist", ".", "new_group", "(", "[", "src", ",", "dest", "]", ")", "\n", "if", "local_master_rank", "in", "[", "self", ".", "src", ",", "self", ".", "dest", "]", "and", "local_rank", "==", "0", ":", "\n", "            ", "initializer_tensor", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "local_master_rank", "%", "4", ")", ")", ")", "\n", "dist", ".", "all_reduce", "(", "initializer_tensor", ",", "group", "=", "self", ".", "process_group", ")", "\n", "initializer_tensor", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "local_master_rank", "%", "4", ")", ")", ")", ".", "half", "(", ")", "\n", "dist", ".", "all_reduce", "(", "initializer_tensor", ",", "group", "=", "self", ".", "process_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.__init__": [[31, 41], ["graph_manager.GraphManager._make_graph", "int", "range", "range"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph._make_graph"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "world_size", ",", "nprocs_per_node", "=", "1", ",", "local_rank", "=", "0", ",", "peers_per_itr", "=", "1", ")", ":", "\n", "        ", "assert", "int", "(", "peers_per_itr", ")", ">=", "1", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "self", ".", "_peers_per_itr", "=", "peers_per_itr", "\n", "self", ".", "_group_indices", "=", "[", "i", "for", "i", "in", "range", "(", "peers_per_itr", ")", "]", "\n", "self", ".", "nprocs_per_node", "=", "nprocs_per_node", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "_make_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.peers_per_itr": [[46, 51], ["range"], "methods", ["None"], ["", "@", "peers_per_itr", ".", "setter", "\n", "def", "peers_per_itr", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "_peers_per_itr", "=", "v", "\n", "# set group-indices attr. --- point to out-peers in phone-book", "\n", "self", ".", "_group_indices", "=", "[", "i", "for", "i", "in", "range", "(", "v", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._make_graph": [[52, 59], ["None"], "methods", ["None"], ["", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a nested list of peers; the outer-list is indexed by rank,\n        the inner list denotes the set of peers that 'rank' can send\n        messages to at any point in time\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers": [[60, 68], ["graph_manager.GraphManager.phone_book[].append", "graph_manager.Edge"], "methods", ["None"], ["", "def", "_add_peers", "(", "self", ",", "rank", ",", "peers", ")", ":", "\n", "        ", "for", "peer", "in", "peers", ":", "\n", "            ", "if", "peer", "not", "in", "self", ".", "phone_book", "[", "rank", "]", ":", "\n", "                ", "self", ".", "phone_book", "[", "rank", "]", ".", "append", "(", "Edge", "(", "\n", "local_master_rank", "=", "(", "self", ".", "rank", "*", "self", ".", "nprocs_per_node", ")", ",", "\n", "dest", "=", "(", "peer", "*", "self", ".", "nprocs_per_node", ")", ",", "\n", "src", "=", "(", "rank", "*", "self", ".", "nprocs_per_node", ")", ",", "\n", "local_rank", "=", "self", ".", "local_rank", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.is_regular_graph": [[69, 72], ["None"], "methods", ["None"], ["", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether each node has the same number of in-peers as out-peers \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.is_bipartite_graph": [[73, 76], ["None"], "methods", ["None"], ["", "def", "is_bipartite_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether graph is bipartite or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.is_passive": [[77, 80], ["None"], "methods", ["None"], ["", "def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "\"\"\" Whether 'rank' is a passive node or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.is_dynamic_graph": [[81, 84], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "\n", "        ", "\"\"\" Whether the graph-type is dynamic (as opposed to static) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.get_peers": [[85, 101], ["graph_manager.GraphManager._rotate_group_indices", "out_peers.append", "enumerate", "in_peers.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_group_indices"], ["", "def", "get_peers", "(", "self", ",", "rotate", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the out and in-peers corresponding to 'self.rank' \"\"\"", "\n", "# cycle through in- and out-peers by updating group-index", "\n", "if", "rotate", ":", "\n", "            ", "self", ".", "_rotate_group_indices", "(", ")", "\n", "\n", "# get out- and in-peers using new group-indices", "\n", "", "out_peers", ",", "in_peers", "=", "[", "]", ",", "[", "]", "\n", "for", "group_index", "in", "self", ".", "_group_indices", ":", "\n", "            ", "out_peers", ".", "append", "(", "self", ".", "phone_book", "[", "self", ".", "rank", "]", "[", "group_index", "]", ".", "dest", ")", "\n", "for", "rank", ",", "peers", "in", "enumerate", "(", "self", ".", "phone_book", ")", ":", "\n", "                ", "if", "rank", "==", "self", ".", "rank", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "rank", "*", "self", ".", "nprocs_per_node", "==", "peers", "[", "group_index", "]", ".", "dest", ":", "\n", "                    ", "in_peers", ".", "append", "(", "rank", ")", "\n", "", "", "", "return", "out_peers", ",", "in_peers", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.get_edges": [[102, 121], ["graph_manager.GraphManager._rotate_group_indices", "out_edges.append", "enumerate", "in_edges.append"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_group_indices"], ["", "def", "get_edges", "(", "self", ",", "rotate", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the pairwise process groups between rank and the out and\n        in-peers corresponding to 'self.rank' \"\"\"", "\n", "# cycle through in- and out-peers by updating group-index", "\n", "if", "rotate", ":", "\n", "            ", "self", ".", "_rotate_group_indices", "(", ")", "\n", "\n", "# get out- and in-peers using new group-indices", "\n", "", "out_edges", ",", "in_edges", "=", "[", "]", ",", "[", "]", "\n", "for", "group_index", "in", "self", ".", "_group_indices", ":", "\n", "            ", "out_edges", ".", "append", "(", "\n", "self", ".", "phone_book", "[", "self", ".", "rank", "]", "[", "group_index", "]", ")", "\n", "for", "rank", ",", "edges", "in", "enumerate", "(", "self", ".", "phone_book", ")", ":", "\n", "                ", "if", "rank", "==", "self", ".", "rank", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "rank", "*", "self", ".", "nprocs_per_node", "==", "edges", "[", "group_index", "]", ".", "dest", ":", "\n", "                    ", "in_edges", ".", "append", "(", "\n", "self", ".", "phone_book", "[", "rank", "]", "[", "group_index", "]", ")", "\n", "", "", "", "return", "out_edges", ",", "in_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_group_indices": [[122, 128], ["enumerate", "int", "len"], "methods", ["None"], ["", "def", "_rotate_group_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\" Incerement group indices to point to the next out-peer \"\"\"", "\n", "increment", "=", "self", ".", "peers_per_itr", "\n", "for", "i", ",", "group_index", "in", "enumerate", "(", "self", ".", "_group_indices", ")", ":", "\n", "            ", "self", ".", "_group_indices", "[", "i", "]", "=", "int", "(", "(", "group_index", "+", "increment", ")", "\n", "%", "len", "(", "self", ".", "phone_book", "[", "self", ".", "rank", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward": [[129, 132], ["None"], "methods", ["None"], ["", "", "def", "_rotate_forward", "(", "self", ",", "r", ",", "p", ")", ":", "\n", "        ", "\"\"\" Helper function returns peer that is p hops ahead of r \"\"\"", "\n", "return", "(", "r", "+", "p", ")", "%", "self", ".", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward": [[133, 141], ["range"], "methods", ["None"], ["", "def", "_rotate_backward", "(", "self", ",", "r", ",", "p", ")", ":", "\n", "        ", "\"\"\" Helper function returns peer that is p hops behind r \"\"\"", "\n", "temp", "=", "r", "\n", "for", "_", "in", "range", "(", "p", ")", ":", "\n", "            ", "temp", "-=", "1", "\n", "if", "temp", "<", "0", ":", "\n", "                ", "temp", "=", "self", ".", "world_size", "-", "1", "\n", "", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedExponentialGraph._make_graph": [[145, 151], ["range", "range", "graph_manager.DynamicDirectedExponentialGraph._rotate_forward", "graph_manager.DynamicDirectedExponentialGraph._rotate_backward", "graph_manager.DynamicDirectedExponentialGraph._add_peers", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "2", ")", ")", "+", "1", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "2", "**", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "2", "**", "i", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedExponentialGraph.is_regular_graph": [[152, 153], ["None"], "methods", ["None"], ["", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedExponentialGraph.is_bipartite_graph": [[154, 155], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedExponentialGraph.is_passive": [[156, 157], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedExponentialGraph.is_dynamic_graph": [[158, 159], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.NPeerDynamicDirectedExponentialGraph._make_graph": [[163, 171], ["range", "range", "range", "int", "graph_manager.NPeerDynamicDirectedExponentialGraph._rotate_forward", "graph_manager.NPeerDynamicDirectedExponentialGraph._add_peers", "math.log"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "\n", "self", ".", "_peers_per_itr", "+", "1", ")", ")", "+", "1", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "1", ",", "self", ".", "_peers_per_itr", "+", "1", ")", ":", "\n", "                    ", "distance_to_neighbor", "=", "j", "*", "(", "(", "self", ".", "_peers_per_itr", "+", "1", ")", "**", "i", ")", "\n", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "distance_to_neighbor", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.NPeerDynamicDirectedExponentialGraph.is_regular_graph": [[172, 173], ["None"], "methods", ["None"], ["", "", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.NPeerDynamicDirectedExponentialGraph.is_bipartite_graph": [[174, 175], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.NPeerDynamicDirectedExponentialGraph.is_passive": [[176, 177], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.NPeerDynamicDirectedExponentialGraph.is_dynamic_graph": [[178, 179], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteExponentialGraph._make_graph": [[183, 200], ["range", "range", "int", "graph_manager.DynamicBipartiteExponentialGraph._rotate_forward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_backward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_forward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_backward", "graph_manager.DynamicBipartiteExponentialGraph._add_peers", "math.log", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph._add_peers", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "2", ")", ")", "+", "1", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", "+", "2", "**", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", "+", "2", "**", "i", ")", "\n", "# create directory for non-passive peers", "\n", "", "if", "not", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "self", ".", "is_passive", "(", "f_peer", ")", "and", "self", ".", "is_passive", "(", "b_peer", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "# create directory for passive peers", "\n", "", "elif", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "not", "(", "self", ".", "is_passive", "(", "f_peer", ")", "or", "self", ".", "is_passive", "(", "b_peer", ")", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteExponentialGraph.is_regular_graph": [[201, 202], ["None"], "methods", ["None"], ["", "", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteExponentialGraph.is_bipartite_graph": [[203, 204], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteExponentialGraph.is_passive": [[205, 208], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "if", "rank", "is", "None", "else", "rank", "\n", "return", "(", "rank", "%", "2", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteExponentialGraph.is_dynamic_graph": [[209, 210], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedLinearGraph._make_graph": [[214, 222], ["range", "range", "graph_manager.DynamicDirectedLinearGraph._rotate_forward", "graph_manager.DynamicDirectedLinearGraph._rotate_backward", "graph_manager.DynamicDirectedLinearGraph._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "if", "i", "%", "2", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "i", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedLinearGraph.is_regular_graph": [[223, 224], ["None"], "methods", ["None"], ["", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedLinearGraph.is_bipartite_graph": [[225, 226], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedLinearGraph.is_passive": [[227, 228], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicDirectedLinearGraph.is_dynamic_graph": [[229, 230], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteLinearGraph._make_graph": [[234, 247], ["range", "range", "graph_manager.DynamicBipartiteLinearGraph._rotate_forward", "graph_manager.DynamicBipartiteLinearGraph._rotate_backward", "graph_manager.DynamicBipartiteLinearGraph._add_peers", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph._add_peers", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "i", ")", "\n", "# create directory for non-passive peers", "\n", "if", "not", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "self", ".", "is_passive", "(", "f_peer", ")", "and", "self", ".", "is_passive", "(", "b_peer", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "# create directory for passive peers", "\n", "", "elif", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "not", "(", "self", ".", "is_passive", "(", "f_peer", ")", "or", "self", ".", "is_passive", "(", "b_peer", ")", ")", ")", ":", "\n", "                    ", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteLinearGraph.is_regular_graph": [[248, 249], ["None"], "methods", ["None"], ["", "", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteLinearGraph.is_bipartite_graph": [[250, 251], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteLinearGraph.is_passive": [[252, 255], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "if", "rank", "is", "None", "else", "rank", "\n", "return", "(", "rank", "%", "2", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.DynamicBipartiteLinearGraph.is_dynamic_graph": [[256, 257], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph._make_graph": [[261, 266], ["range", "graph_manager.RingGraph._rotate_forward", "graph_manager.RingGraph._rotate_backward", "graph_manager.RingGraph._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "f_peer", ",", "b_peer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph.is_regular_graph": [[267, 268], ["None"], "methods", ["None"], ["", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph.is_bipartite_graph": [[269, 270], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph.is_passive": [[271, 272], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph.is_dynamic_graph": [[273, 274], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph_dynamic._make_graph": [[279, 288], ["range", "graph_manager.RingGraph_dynamic._rotate_forward", "graph_manager.RingGraph_dynamic._rotate_backward", "graph_manager.RingGraph_dynamic._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "a", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "c", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "4", ")", "\n", "d", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "4", ")", "\n", "\n", "self", ".", "_add_peers", "(", "rank", ",", "[", "a", ",", "b", ",", "c", ",", "d", "]", ")", "\n", "\n", "", "", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph_dynamic.is_regular_graph": [[291, 292], ["None"], "methods", ["None"], ["\n", "def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph_dynamic.is_bipartite_graph": [[293, 294], ["None"], "methods", ["None"], ["\n", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "False", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph_dynamic.is_passive": [[295, 296], ["None"], "methods", ["None"], ["", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.RingGraph_dynamic.is_dynamic_graph": [[297, 298], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph._make_graph": [[302, 310], ["range", "graph_manager.GridGraph._rotate_forward", "graph_manager.GridGraph._rotate_backward", "graph_manager.GridGraph._rotate_forward", "graph_manager.GridGraph._rotate_backward", "graph_manager.GridGraph._add_peers"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager._add_peers"], []], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_regular_graph": [[311, 312], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_bipartite_graph": [[313, 314], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive": [[315, 316], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_dynamic_graph": [[317, 318], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.__init__": [[31, 85], ["isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gossiper.Gossiper._graph_manager.is_passive", "gossiper.Gossiper.refresh_peers_", "isinstance", "gossiper.Gossiper.refresh_mixing_weights_", "msg.clone().detach_().to", "gossiper.Gossiper.in_msg_buffer.clone", "torch.is_initialized", "torch.is_initialized", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "mixing_manager.UniformMixing", "msg.clone().detach_", "gossiper.Gossiper.in_msg_buffer.pin_memory", "msg.clone", "gossiper.Gossiper.logger.error"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_passive", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_peers_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_mixing_weights_"], ["def", "__init__", "(", "self", ",", "msg", ",", "graph", ",", "device", "=", "None", ",", "mixing", "=", "None", ",", "logger", "=", "None", ",", "\n", "rank", "=", "None", ",", "world_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize generic averaging class designed for multi-peer comms\n\n        :param msg: (tensor) message used to initialize recv buffer\n        :param device: (device) device on which to initialize recv buffer\n        :param graph: (GraphManager) Subclass of GraphManager\n        :param mixing: (MixingManager) Subclass of MixingManager\n        :param logger: (python logger) module used to log results\n        \"\"\"", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "if", "rank", "is", "None", "or", "world_size", "is", "None", ":", "\n", "            ", "assert", "dist", ".", "is_initialized", "(", ")", "\n", "# for now p2p communication only supported withed tcp and mpi", "\n", "assert", "dist", ".", "_backend", "!=", "dist_backend", ".", "GLOO", "\n", "assert", "dist", ".", "_backend", "!=", "dist_backend", ".", "NCCL", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "# graph topology properties", "\n", "", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "assert", "isinstance", "(", "graph", ",", "GraphManager", ")", "\n", "self", ".", "_graph_manager", "=", "graph", "\n", "self", ".", "peers_per_itr_device", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "_graph_manager", ".", "peers_per_itr", "]", ",", "device", "=", "device", ",", "\n", "dtype", "=", "msg", ".", "dtype", ")", "\n", "self", ".", "passive", "=", "self", ".", "_graph_manager", ".", "is_passive", "(", ")", "\n", "self", ".", "refresh_peers_", "(", "iteration", "=", "0", ",", "epoch", "=", "0", ",", "rotate", "=", "False", ")", "# sets in- and out-peers attributes", "\n", "\n", "# mixing matrix", "\n", "if", "mixing", "is", "None", ":", "\n", "            ", "mixing", "=", "UniformMixing", "(", "self", ".", "_graph_manager", ",", "device", ")", "\n", "", "assert", "isinstance", "(", "mixing", ",", "MixingManager", ")", "\n", "self", ".", "_mixing_manager", "=", "mixing", "\n", "self", ".", "refresh_mixing_weights_", "(", ")", "# sets mixing-weights attribute", "\n", "\n", "\n", "# msg buffers used during send/recv", "\n", "self", ".", "device", "=", "device", "if", "device", "is", "not", "None", "else", "msg", ".", "device", "\n", "self", ".", "out_msg_buffer", "=", "[", "]", "\n", "self", ".", "in_msg_buffer", "=", "msg", ".", "clone", "(", ")", ".", "detach_", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "device", ".", "type", "==", "'cpu'", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "in_msg_buffer", "=", "self", ".", "in_msg_buffer", ".", "pin_memory", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "logger", ".", "error", "(", "e", ")", "\n", "", "", "", "self", ".", "placeholder", "=", "self", ".", "in_msg_buffer", ".", "clone", "(", ")", "\n", "#print(self.placeholder.size())", "\n", "\n", "self", ".", "_pending_req", "=", "None", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.peers_per_itr": [[90, 93], ["None"], "methods", ["None"], ["\n", "", "@", "peers_per_itr", ".", "setter", "\n", "def", "peers_per_itr", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "_graph_manager", ".", "peers_per_itr", "=", "v", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_peers_": [[94, 105], ["gossiper.Gossiper._graph_manager.is_dynamic_graph", "gossiper.Gossiper._graph_manager.get_edges"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GridGraph.is_dynamic_graph", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.graph_manager.GraphManager.get_edges"], ["\n", "", "def", "refresh_peers_", "(", "self", ",", "iteration", ",", "epoch", ",", "rotate", "=", "None", ")", ":", "\n", "        ", "\"\"\" Update in- and out-peers \"\"\"", "\n", "# if rotate is None:", "\n", "#     rotate = True if self._graph_manager.is_dynamic_graph() else False", "\n", "# cannot cycle peers in a static graph", "\n", "#assert not (rotate and not self._graph_manager.is_dynamic_graph())", "\n", "if", "self", ".", "_graph_manager", ".", "is_dynamic_graph", "(", ")", ":", "\n", "            ", "if", "iteration", "%", "1", "==", "0", ":", "\n", "                ", "rotate", "=", "True", "\n", "", "", "self", ".", "out_edges", ",", "self", ".", "in_edges", "=", "self", ".", "_graph_manager", ".", "get_edges", "(", "rotate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_mixing_weights_": [[106, 109], ["gossiper.Gossiper._mixing_manager.get_mixing_weights"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.get_mixing_weights"], ["\n", "", "def", "refresh_mixing_weights_", "(", "self", ")", ":", "\n", "        ", "\"\"\" Update mixing-matrix weights \"\"\"", "\n", "self", ".", "mixing_weights", "=", "self", ".", "_mixing_manager", ".", "get_mixing_weights", "(", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.mix_out_msg_": [[110, 121], ["gossiper.Gossiper.refresh_mixing_weights_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.Gossiper._mixing_manager.is_uniform", "weight.type", "gossiper.Gossiper.ps_weight.type"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_mixing_weights_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.mixing_manager.UniformMixing.is_uniform"], ["\n", "\n", "", "def", "mix_out_msg_", "(", "self", ",", "out_msg", ",", "ps_weight", ",", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns a generator mixing messages on the fly \"\"\"", "\n", "self", ".", "refresh_mixing_weights_", "(", ")", "\n", "self", ".", "ps_weight", "=", "ps_weight", "\n", "\n", "# check whether or not we need to communicate ps_weight", "\n", "# if not self.regular:", "\n", "out_msg", "=", "torch", ".", "cat", "(", "[", "out_msg", ",", "self", ".", "ps_weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "]", ")", "\n", "\n", "# first return 'loopback msg to self'", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.self_msg_": [[123, 126], ["None"], "methods", ["None"], ["            ", "yield", "out_msg", ".", "mul", "(", "self", ".", "mixing_weights", "[", "'uniform'", "]", ".", "type", "(", "out_msg", ".", "dtype", ")", ")", "\n", "\n", "# check whether or not we need to create a buffer for each out-msg", "\n", "", "if", "self", ".", "_mixing_manager", ".", "is_uniform", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.clean_msg_buffers_": [[127, 138], ["len", "gossiper.Gossiper.out_msg_buffer.pop", "req.wait", "msgs.append", "len", "msgs.pop", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "msgs.pop.set_"], "methods", ["None"], ["            ", "weight", "=", "self", ".", "mixing_weights", "[", "'uniform'", "]", "\n", "\n", "#print(weight)", "\n", "#weight = self.mixing_weights['try']", "\n", "out_msg", "*=", "weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "\n", "for", "_", "in", "self", ".", "out_edges", ":", "\n", "                ", "yield", "out_msg", "\n", "", "", "else", ":", "\n", "            ", "for", "out_edge", "in", "self", ".", "out_edges", ":", "\n", "                ", "weight", "=", "self", ".", "mixing_weights", "[", "out_edge", ".", "dest", "]", "\n", "yield", "out_msg", ".", "mul", "(", "weight", ".", "type", "(", "out_msg", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.parse_in_msg_buffer": [[139, 149], ["msg.narrow", "len"], "methods", ["None"], ["", "", "", "def", "mix_self_msg_", "(", "self", ",", "out_msg", ",", "ps_weight", ",", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns a generator mixing messages on the fly \"\"\"", "\n", "self", ".", "refresh_mixing_weights_", "(", ")", "\n", "self", ".", "ps_weight", "=", "ps_weight", "\n", "out_msg", "=", "torch", ".", "cat", "(", "[", "out_msg", ",", "self", ".", "ps_weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "]", ")", "\n", "if", "self", ".", "_mixing_manager", ".", "is_uniform", "(", ")", ":", "\n", "            ", "weight", "=", "self", ".", "mixing_weights", "[", "'uniform'", "]", "-", "1.0", "\n", "out_msg", "*=", "weight", ".", "type", "(", "out_msg", ".", "dtype", ")", "\n", "yield", "out_msg", "\n", "\n", "", "", "def", "clean_msg_buffers_", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.mix": [[150, 153], ["None"], "methods", ["None"], ["        ", "\"\"\" Clean outgoing message buffer \"\"\"", "\n", "msgs", "=", "[", "]", "\n", "while", "len", "(", "self", ".", "out_msg_buffer", ")", ">", "0", ":", "\n", "            ", "req", ",", "msg", "=", "self", ".", "out_msg_buffer", ".", "pop", "(", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.SGD_DS.mix": [[159, 209], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gossiper.SGD_DS.in_msg_buffer.zero_", "gossiper.SGD_DS.refresh_peers_", "gossiper.SGD_DS.clean_msg_buffers_", "gossiper.SGD_DS.in_msg_buffer.narrow", "gossiper.SGD_DS.logger.debug", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.SGD_DS.mix_out_msg_", "gossiper.SGD_DS.mix_out_msg_", "next", "torch.broadcast", "torch.broadcast", "gossiper.SGD_DS.out_msg_buffer.append", "torch.broadcast", "torch.broadcast", "gossiper.SGD_DS.in_msg_buffer.add_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.unsparsify_layerwise", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gossiper.SGD_DS.placeholder.copy_", "gossiper.SGD_DS.placeholder.copy_", "len", "int", "int", "torch.cat.nelement", "torch.cat.nelement", "torch.cat.element_size", "torch.cat.element_size", "torch.cat.nelement", "torch.cat.nelement", "torch.zeros_like.narrow", "torch.zeros_like.narrow", "msg[].view", "torch.cat.element_size", "torch.cat.element_size", "utils.flatten_tensors", "in_weight.view", "len", "len", "torch.cat.nelement", "torch.cat.nelement", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.refresh_peers_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.clean_msg_buffers_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.mix_out_msg_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.gossip_choco.gossiper.Gossiper.mix_out_msg_", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.unsparsify_layerwise", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.flatten_tensors"], ["                ", "msg", ".", "set_", "(", ")", "\n", "\n", "", "", "", "def", "parse_in_msg_buffer", "(", "self", ",", "residual", "=", "False", ")", ":", "\n", "        ", "\"\"\" Parse in-msg buffer and return msg and ps-weight separately \"\"\"", "\n", "msg", "=", "self", ".", "in_msg_buffer", "\n", "if", "not", "self", ".", "regular", ":", "\n", "            ", "return", "msg", ".", "narrow", "(", "0", ",", "0", ",", "len", "(", "msg", ")", "-", "1", ")", ",", "msg", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "if", "residual", ":", "\n", "                ", "return", "msg", ",", "self", ".", "ps_weight", "*", "self", ".", "peers_per_itr_device", "\n", "", "else", ":", "\n", "                ", "return", "msg", ",", "torch", ".", "ones", "(", "1", ",", "device", "=", "self", ".", "device", ")", ".", "type", "(", "msg", ".", "dtype", ")", "\n", "\n", "", "", "", "def", "mix", "(", "self", ")", ":", "\n", "        ", "\"\"\" Single gossip step \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "\n", "\n", "", "", "class", "SGD_DS", "(", "Gossiper", ")", ":", "\n", "    ", "\"\"\" 1-peer Push-Sum consensus averaging module \"\"\"", "\n", "\n", "def", "mix", "(", "self", ",", "out_msg", ",", "ref_msg", ",", "ps_weight", ",", "epoch", ",", "iteration", ",", "residual", "=", "False", ",", "uncompress", "=", "False", ",", "shapes", "=", "None", ")", ":", "\n", "        ", "\"\"\" Consensus averaging step \"\"\"", "\n", "# out_msg must be on the correct device", "\n", "assert", "out_msg", ".", "device", ".", "type", "==", "self", ".", "device", ".", "type", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'in/out -peers {}/{}'", "\n", ".", "format", "(", "self", ".", "in_edges", ",", "self", ".", "out_edges", ")", ")", "\n", "\n", "# prepare messages for gossip", "\n", "", "out_copy", "=", "copy", ".", "deepcopy", "(", "out_msg", ")", "\n", "ps_copy", "=", "copy", ".", "deepcopy", "(", "ps_weight", ")", "\n", "placeholder", "=", "torch", ".", "zeros_like", "(", "torch", ".", "cat", "(", "[", "out_msg", ",", "ps_weight", "]", ")", ")", "\n", "if", "uncompress", ":", "\n", "            ", "values", "=", "out_msg", "[", ":", "int", "(", "len", "(", "out_msg", ")", "/", "2", ")", "]", "\n", "indices", "=", "out_msg", "[", "int", "(", "len", "(", "out_msg", ")", "/", "2", ")", ":", "]", "\n", "mixed_out_msgs", "=", "self", ".", "mix_out_msg_", "(", "values", ",", "ps_weight", ",", "residual", ")", "\n", "", "else", ":", "\n", "            ", "mixed_out_msgs", "=", "self", ".", "mix_out_msg_", "(", "out_msg", ",", "ps_weight", ",", "residual", ")", "\n", "\n", "# non-blocking send", "\n", "# print(len(self.out_edges), len(self.in_edges))", "\n", "", "data_amt", "=", "0", "\n", "for", "out_edge", "in", "self", ".", "out_edges", ":", "\n", "            ", "msg", "=", "next", "(", "mixed_out_msgs", ")", "\n", "if", "uncompress", ":", "\n", "                ", "msg", "=", "torch", ".", "cat", "(", "[", "msg", "[", "0", ":", "(", "len", "(", "msg", ")", "-", "1", ")", "]", ",", "indices", ",", "msg", "[", "-", "1", "]", ".", "view", "(", "1", ")", "]", ")", "\n", "", "assert", "self", ".", "rank", "==", "out_edge", ".", "src", "\n", "req", "=", "dist", ".", "broadcast", "(", "tensor", "=", "msg", ",", "src", "=", "out_edge", ".", "src", ",", "group", "=", "out_edge", ".", "process_group", ",", "async_op", "=", "True", ")", "\n", "self", ".", "out_msg_buffer", ".", "append", "(", "(", "req", ",", "msg", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.__init__": [[11, 32], ["metering.Meter.reset", "print"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset"], ["\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "ptag", "=", "ptag", "\n", "self", ".", "value_history", "=", "None", "\n", "self", ".", "stateful", "=", "stateful", "\n", "if", "self", ".", "stateful", ":", "\n", "            ", "self", ".", "value_history", "=", "[", "]", "\n", "", "self", ".", "csv_format", "=", "csv_format", "\n", "if", "init_dict", "is", "not", "None", ":", "\n", "            ", "for", "key", "in", "init_dict", ":", "\n", "                ", "try", ":", "\n", "# TODO: add type checking to init_dict values", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "init_dict", "[", "key", "]", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "'(Warning) Invalid key {} in init_dict'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "std", "=", "0", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.reset": [[33, 41], ["None"], "methods", ["None"], ["self", ".", "sqsum", "=", "0", "\n", "self", ".", "mad", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "self", ".", "sqsum", "+=", "(", "val", "**", "2", ")", "*", "n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.update": [[42, 58], ["metering.Meter.value_history.append", "abs", "len"], "methods", ["None"], ["if", "self", ".", "count", ">", "1", ":", "\n", "            ", "self", ".", "std", "=", "(", "(", "self", ".", "sqsum", "-", "(", "self", ".", "sum", "**", "2", ")", "/", "self", ".", "count", ")", "\n", "/", "(", "self", ".", "count", "-", "1", ")", "\n", ")", "**", "0.5", "\n", "", "if", "self", ".", "stateful", ":", "\n", "            ", "self", ".", "value_history", ".", "append", "(", "val", ")", "\n", "mad", "=", "0", "\n", "for", "v", "in", "self", ".", "value_history", ":", "\n", "                ", "mad", "+=", "abs", "(", "v", "-", "self", ".", "avg", ")", "\n", "", "self", ".", "mad", "=", "mad", "/", "len", "(", "self", ".", "value_history", ")", "\n", "\n", "", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "csv_format", ":", "\n", "            ", "if", "self", ".", "stateful", ":", "\n", "                ", "return", "str", "(", "'{dm.val:.3f},{dm.avg:.3f},{dm.mad:.3f}'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.metering.Meter.__str__": [[59, 76], ["str", "str", "str", "str", "str", "str"], "methods", ["None"], ["                ", "return", "str", "(", "'{dm.val:.3f},{dm.avg:.3f},{dm.std:.3f}'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "stateful", ":", "\n", "                ", "return", "str", "(", "self", ".", "ptag", ")", "+", "str", "(", "': {dm.val:.3f} ({dm.avg:.3f} +- {dm.mad:.3f})'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "str", "(", "self", ".", "ptag", ")", "+", "str", "(", "': {dm.val:.3f} ({dm.avg:.3f} +- {dm.std:.3f})'", "\n", ".", "format", "(", "dm", "=", "self", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.set_checkpoint_dir": [[27, 30], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "set_checkpoint_dir", "(", "checkpoint_dir", ")", ":", "\n", "        ", "ClusterManager", ".", "CHECKPOINT_DIR", "=", "checkpoint_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.__init__": [[31, 80], ["os.getpid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "helpers.make_logger", "cluster_manager.ClusterManager.install_signal_handlers", "cluster_manager.ClusterManager.signal_tensor.cuda", "torch.is_initialized", "torch.is_initialized", "torch.new_group", "torch.new_group", "str", "str", "list", "range", "str", "str"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.make_logger", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.install_signal_handlers"], ["", "def", "__init__", "(", "self", ",", "rank", ",", "world_size", ",", "state", ",", "\n", "model_tag", "=", "''", ",", "callback", "=", "None", ",", "all_workers", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for ClusterManager()\n\n        :param rank: The agent's rank (unique Id)\n        :param world_size: Number of agents used for training\n        :param state: Dictionary used to encode training state\n        :param model_tag: Tag used in the name of the checkpoint file\n        :param callback: function to execute when SIGTERM is received\n        :param all_workers: Whether to save all workers' models in checkpoints\n        \"\"\"", "\n", "assert", "ClusterManager", ".", "CHECKPOINT_DIR", "is", "not", "None", "\n", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "all_workers", "=", "all_workers", "\n", "self", ".", "main_pid", "=", "os", ".", "getpid", "(", ")", "\n", "self", ".", "signal_tensor", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "signal_tensor", "=", "self", ".", "signal_tensor", ".", "cuda", "(", ")", "\n", "", "self", ".", "signal_handlers_installed", "=", "False", "\n", "self", ".", "logger", "=", "make_logger", "(", "rank", ")", "\n", "self", ".", "callback", "=", "None", "\n", "\n", "if", "all_workers", ":", "\n", "            ", "model_rank", "=", "rank", "\n", "", "else", ":", "\n", "            ", "model_rank", "=", "ClusterManager", ".", "MASTER_RANK", "\n", "\n", "", "self", ".", "model_tag", "=", "model_tag", "\n", "\n", "self", ".", "checkpoint_fname", "=", "'checkpoint_r'", "+", "str", "(", "model_rank", ")", "+", "'_n'", "+", "str", "(", "world_size", ")", "+", "'.pth.tar'", "\n", "self", ".", "model_best_fname", "=", "'model_best_r'", "+", "str", "(", "model_rank", ")", "+", "'_n'", "+", "str", "(", "world_size", ")", "+", "'.pth.tar'", "\n", "self", ".", "checkpoint_fpath", "=", "ClusterManager", ".", "CHECKPOINT_DIR", "+", "self", ".", "model_tag", "+", "self", ".", "checkpoint_fname", "\n", "self", ".", "model_best_fpath", "=", "ClusterManager", ".", "CHECKPOINT_DIR", "+", "self", ".", "model_tag", "+", "self", ".", "model_best_fname", "\n", "\n", "self", ".", "install_signal_handlers", "(", ")", "\n", "\n", "if", "self", ".", "world_size", ">", "1", ":", "\n", "            ", "assert", "dist", ".", "is_initialized", "(", ")", "\n", "self", ".", "process_group", "=", "dist", ".", "new_group", "(", "list", "(", "range", "(", "self", ".", "world_size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.save_checkpoint": [[81, 114], ["cluster_manager.ClusterManager.logger.info", "torch.all_reduce", "torch.all_reduce", "torch.save", "torch.save", "torch.save", "torch.save", "cluster_manager.ClusterManager.logger.info", "cluster_manager.ClusterManager.logger.info", "sys.exit", "shutil.copyfile", "cluster_manager.ClusterManager.logger.info", "os.system", "cluster_manager.ClusterManager.logger.info", "os.getpid", "RuntimeError", "str"], "methods", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save", "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.log.ResultsLog.save"], ["", "", "def", "save_checkpoint", "(", "self", ",", "epoch_id", "=", "None", ",", "requeue_on_signal", "=", "True", ")", ":", "\n", "# To find out if a signal is received in any process", "\n", "        ", "if", "requeue_on_signal", "and", "self", ".", "world_size", ">", "1", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "self", ".", "signal_tensor", ",", "group", "=", "self", ".", "process_group", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Saving checkpoint'", ")", "\n", "if", "self", ".", "all_workers", "or", "self", ".", "rank", "==", "ClusterManager", ".", "MASTER_RANK", ":", "\n", "            ", "if", "epoch_id", "is", "None", ":", "\n", "                ", "checkpoint_fpath", "=", "self", ".", "checkpoint_fpath", "\n", "", "else", ":", "\n", "                ", "checkpoint_fpath", "=", "ClusterManager", ".", "CHECKPOINT_DIR", "+", "'ep'", "+", "str", "(", "epoch_id", ")", "+", "'_'", "+", "self", ".", "model_tag", "+", "self", ".", "checkpoint_fname", "\n", "", "torch", ".", "save", "(", "self", ".", "state", ",", "checkpoint_fpath", ")", "\n", "if", "self", ".", "state", "[", "'is_best'", "]", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "checkpoint_fpath", ",", "\n", "self", ".", "model_best_fpath", ")", "\n", "self", ".", "state", "[", "'is_best'", "]", "=", "False", "\n", "\n", "", "", "if", "requeue_on_signal", "and", "self", ".", "signal_tensor", "[", "0", "]", ">", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Atleast 1 process received SIGUSR1. Terminating'", ")", "\n", "\n", "# relaunch job on cluster starting from checkpoint only for", "\n", "# main process of the rank 0 agent", "\n", "if", "self", ".", "rank", "==", "0", "and", "os", ".", "getpid", "(", ")", "==", "self", ".", "main_pid", ":", "\n", "                ", "command", "=", "f'scontrol requeue {os.environ[\"SLURM_JOB_ID\"]}'", "\n", "self", ".", "logger", ".", "info", "(", "'Relaunching: '", "+", "command", ")", "\n", "if", "os", ".", "system", "(", "command", ")", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'sbatch failed'", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'New job submitted to the queue'", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Terminating'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.install_signal_handlers": [[115, 120], ["cluster_manager.ClusterManager.logger.info", "signal.signal", "signal.signal"], "methods", ["None"], ["", "", "def", "install_signal_handlers", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Signal handlers installed'", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGUSR1", ",", "self", ".", "SIGUSR1Handler", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "self", ".", "SIGTERMHandler", ")", "\n", "self", ".", "signal_handlers_installed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.SIGTERMHandler": [[121, 127], ["cluster_manager.ClusterManager.logger.info"], "methods", ["None"], ["", "def", "SIGTERMHandler", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n        Ignore SIGTERM preemption signal (doesn't stop preemption);\n        instead SIGUSR1 will be moved up and handled accordingly\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "'Received SIGTERM'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.cluster_manager.ClusterManager.SIGUSR1Handler": [[128, 137], ["cluster_manager.ClusterManager.logger.info", "cluster_manager.ClusterManager.callback"], "methods", ["None"], ["", "def", "SIGUSR1Handler", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "\"\"\" Cleanup and relaunch job following SIGUSR1 signal \"\"\"", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Received SIGUSR1'", ")", "\n", "\n", "if", "self", ".", "callback", "is", "not", "None", ":", "\n", "            ", "self", ".", "callback", "(", ")", "\n", "\n", "", "self", ".", "signal_tensor", "[", "0", "]", "=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.make_logger": [[13, 37], ["logging.getLogger", "getattr", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "getattr", "logging.Formatter", "logging.getLogger.setLevel", "logging.getLogger.setLevel"], "function", ["None"], ["import", "torch", ".", "distributed", "as", "dist", "\n", "\n", "\n", "def", "flatten_tensors", "(", "tensors", ")", ":", "\n", "    ", "\"\"\"\n    Flatten dense tensors into a contiguous 1D buffer. Assume tensors are of\n    same dense type.\n    Since inputs are dense, the resulting tensor will be a concatenated 1D\n    buffer. Element-wise operation on this buffer will be equivalent to\n    operating individually.\n    Arguments:\n        tensors (Iterable[Tensor]): dense tensors to flatten.\n    Returns:\n        A 1D buffer containing input tensors.\n    \"\"\"", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "", "flat", "=", "torch", ".", "cat", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "tensors", "]", ",", "dim", "=", "0", ")", "\n", "return", "flat", "\n", "\n", "\n", "", "def", "unflatten_tensors", "(", "flat", ",", "tensors", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.experiment_utils.helpers.get_tcp_interface_name": [[39, 63], ["os.listdir", "subprocess.Popen", "subprocess.Popen.communicate", "print", "print", "Exception", "network_interface.startswith", "print", "out.decode"], "function", ["home.repos.pwc.inspect_result.aparna-aketi_Low_Precision_DL.utils.helpers.communicate"], ["\n", "outputs", "=", "[", "]", "\n", "offset", "=", "0", "\n", "for", "tensor", "in", "tensors", ":", "\n", "        ", "numel", "=", "tensor", ".", "numel", "(", ")", "\n", "outputs", ".", "append", "(", "flat", ".", "narrow", "(", "0", ",", "offset", ",", "numel", ")", ".", "view_as", "(", "tensor", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n", "", "def", "unflatten", "(", "flat", ",", "tensor", ")", ":", "\n", "\n", "   ", "offset", "=", "0", "\n", "numel", "=", "tensor", ".", "numel", "(", ")", "\n", "output", "=", "(", "flat", ".", "narrow", "(", "0", ",", "offset", ",", "numel", ")", ".", "view_as", "(", "tensor", ")", ")", "\n", "return", "output", "\n", "\n", "\n", "", "def", "group_by_dtype", "(", "tensors", ")", ":", "\n", "    "]]}