{"home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.__init__": [[112, 149], ["os.listdir", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "test.Test.face_decoder.module.facemodel.tri.unsqueeze", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "test.Test.face_encoder.load_state_dict", "test.Test.face_encoder.eval", "torch.load", "torch.load", "torch.load", "torch.load", "test.Test.generator.load_state_dict", "cv2.namedWindow", "numpy.array", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "utils.simple_renderer.SimpleRenderer().to", "models.face_decoder.Face3D().to", "models.networks_inpaint.Generator().to", "models.face_encoder_res50.FaceEncoder().to", "open", "pickle.load", "utils.simple_renderer.SimpleRenderer", "models.face_decoder.Face3D", "models.networks_inpaint.Generator", "models.face_encoder_res50.FaceEncoder"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda:0'", "\n", "self", ".", "img_root", "=", "'./input/'", "\n", "self", ".", "ldmk_root", "=", "'./ldmk/'", "\n", "self", ".", "img_lst", "=", "os", ".", "listdir", "(", "self", ".", "img_root", ")", "\n", "self", ".", "renderer", "=", "torch", ".", "nn", ".", "DataParallel", "(", "SimpleRenderer", "(", "device", ")", ".", "to", "(", "device", ")", ",", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "face_decoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Face3D", "(", "device", ")", ".", "to", "(", "device", ")", ",", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "generator", "=", "torch", ".", "nn", ".", "DataParallel", "(", "Generator", "(", ")", ".", "to", "(", "device", ")", ",", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "tri", "=", "self", ".", "face_decoder", ".", "module", ".", "facemodel", ".", "tri", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "face_encoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "FaceEncoder", "(", ")", ".", "to", "(", "device", ")", ",", "[", "0", ",", "1", "]", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'./ckpts/3D_it_500000.pkl'", ")", "\n", "self", ".", "face_encoder", ".", "load_state_dict", "(", "state_dict", ")", "\n", "self", ".", "face_encoder", ".", "eval", "(", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'./ckpts/inpaint_it_200000.pkl'", ")", "\n", "self", ".", "generator", ".", "load_state_dict", "(", "state_dict", "[", "'gen'", "]", ")", "\n", "\n", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "title", "=", "'show'", "\n", "cv2", ".", "namedWindow", "(", "self", ".", "title", ")", "\n", "with", "open", "(", "'./ckpts/expression_mu_std.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "exp", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "std", "=", "exp", "[", "'std'", "]", "\n", "self", ".", "std", "[", "2", "]", "*=", "4", "\n", "self", ".", "std", "[", "5", "]", "*=", "4", "\n", "self", ".", "std", "[", "50", "]", "*=", "5", "\n", "self", ".", "std", "[", "51", "]", "*=", "5", "\n", "self", ".", "std", "[", "81", "]", "*=", "4", "\n", "self", ".", "std", "[", "83", "]", "*=", "1.5", "\n", "self", ".", "std", "[", "84", "]", "=", "self", ".", "std", "[", "83", "]", "\n", "self", ".", "std", "[", "89", "]", "*=", "4", "\n", "self", ".", "mu", "=", "exp", "[", "'mean'", "]", "\n", "# self.top_idx = exp['idx']", "\n", "self", ".", "top_idx", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "8", ",", "16", ",", "33", ",", "50", ",", "51", ",", "80", ",", "81", ",", "82", ",", "83", ",", "84", ",", "85", ",", "89", ",", "144", ",", "145", ",", "146", "]", ")", "\n", "self", ".", "step_sz", "=", "self", ".", "std", "*", "6", "/", "20", "\n", "self", ".", "coeff_clone", "=", "torch", ".", "zeros", "(", "1", ",", "257", ")", "\n", "self", ".", "stop", "=", "False", "\n", "self", ".", "noise", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "# self.generator#.eval()", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.create_trackbars": [[151, 165], ["int", "cv2.createTrackbar", "test.Test.de_mask", "test.Test.create_trackbars.create_callback"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.de_mask"], ["", "def", "create_trackbars", "(", "self", ")", ":", "\n", "        ", "def", "create_callback", "(", "idx", ")", ":", "\n", "            ", "def", "callback", "(", "val", ")", ":", "\n", "                ", "value", "=", "self", ".", "coeff_clone", "[", "0", ",", "idx", "]", "\n", "self", ".", "data", "[", "'coeff'", "]", "[", "0", ",", "idx", "]", "=", "value", "+", "(", "val", "-", "10", ")", "*", "self", ".", "step_sz", "[", "idx", "]", "\n", "self", ".", "de_mask", "(", ")", "\n", "\n", "", "return", "callback", "\n", "\n", "", "for", "idx", "in", "self", ".", "top_idx", "[", ":", "30", "]", ":", "\n", "            ", "value", "=", "self", ".", "data", "[", "'coeff'", "]", "[", "0", ",", "idx", "]", "\n", "location", "=", "(", "value", "-", "self", ".", "mu", "[", "idx", "]", "+", "3", "*", "self", ".", "std", "[", "idx", "]", ")", "/", "self", ".", "step_sz", "[", "idx", "]", "\n", "location", "=", "int", "(", "location", ")", "\n", "cv2", ".", "createTrackbar", "(", "'{}'", ".", "format", "(", "idx", ")", ",", "self", ".", "title", ",", "location", ",", "20", ",", "create_callback", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.load_data": [[166, 194], ["os.path.join", "os.path.join", "test.Preprocess", "numpy.array", "utils.cv.img2tensor().cuda", "test.Test.face_encoder", "utils.seg_util.tensor_dilate", "utils.seg_util.tensor_dilate", "os.path.join", "cv2.imread", "open", "pickle.load", "utils.cv.tensor2img", "cv2.warpAffine", "os.path.exists", "cv2.imwrite", "name.split", "utils.cv.img2tensor", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Preprocess", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_dilate", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_dilate", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.tensor2img", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.img2tensor"], ["", "", "def", "load_data", "(", "self", ",", "name", ")", ":", "\n", "        ", "img_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_root", ",", "name", ")", "\n", "img_init", "=", "cv2", ".", "imread", "(", "img_pth", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "ldmk_name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.pkl'", "\n", "ldmk_pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ldmk_root", ",", "ldmk_name", ")", "\n", "with", "open", "(", "ldmk_pth", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "ldmk", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "img", ",", "_", ",", "mat", "=", "Preprocess", "(", "img_init", ",", "ldmk", ")", "\n", "mat_inv", "=", "np", ".", "array", "(", "[", "[", "1", "/", "mat", "[", "0", ",", "0", "]", ",", "0", ",", "-", "mat", "[", "0", ",", "2", "]", "/", "mat", "[", "0", ",", "0", "]", "]", ",", "\n", "[", "0", ",", "1", "/", "mat", "[", "1", ",", "1", "]", ",", "-", "mat", "[", "1", ",", "2", "]", "/", "mat", "[", "1", ",", "1", "]", "]", "]", ")", "\n", "\n", "img_tensor", "=", "img2tensor", "(", "img", ")", ".", "cuda", "(", ")", "\n", "coeff", ",", "seg1", ",", "seg2", ",", "seg3", "=", "self", ".", "face_encoder", "(", "img_tensor", ")", "\n", "# verts, tex, id_coeff, ex_coeff, tex_coeff, gamma, ldmk_pred = self.face_decoder(coeff)", "\n", "mask", "=", "(", "torch", ".", "sigmoid", "(", "seg1", ")", ">", "0.1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "mask", "=", "tensor_dilate", "(", "mask", ",", "5", ")", "\n", "mask", "=", "tensor_dilate", "(", "mask", ",", "3", ")", "\n", "seg", "=", "tensor2img", "(", "mask", ")", "//", "255", "\n", "# seg = cv2.dilate(seg, np.ones((3, 3), np.uint8))", "\n", "seg_pth", "=", "os", ".", "path", ".", "join", "(", "'mask/{}'", ".", "format", "(", "name", ")", ")", "\n", "seg", "=", "cv2", ".", "warpAffine", "(", "seg", ",", "mat_inv", ",", "(", "256", ",", "256", ")", ")", "*", "255", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seg_pth", ")", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "seg_pth", ",", "seg", ")", "\n", "\n", "\n", "", "return", "img_init", ",", "img", ",", "img_tensor", ",", "seg", ",", "coeff", ",", "mask", ",", "mat_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.seamless": [[195, 202], ["cv2.boundingRect", "cv2.seamlessClone"], "methods", ["None"], ["", "def", "seamless", "(", "self", ",", "src", ",", "dst", ",", "mask", ")", ":", "\n", "        ", "x", ",", "y", ",", "W", ",", "H", "=", "cv2", ".", "boundingRect", "(", "mask", ")", "\n", "mask_crop", "=", "mask", "[", "y", ":", "y", "+", "H", ",", "x", ":", "x", "+", "W", "]", "\n", "src_crop", "=", "src", "[", "y", ":", "y", "+", "H", ",", "x", ":", "x", "+", "W", "]", "\n", "ctr", "=", "(", "x", "+", "W", "//", "2", ",", "y", "+", "H", "//", "2", ")", "\n", "out", "=", "cv2", ".", "seamlessClone", "(", "src_crop", ",", "dst", ",", "mask_crop", ",", "ctr", ",", "cv2", ".", "NORMAL_CLONE", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.de_mask": [[203, 228], ["test.Test.face_decoder", "test.Test.renderer", "ldmk_pred.squeeze().cpu().detach().numpy", "numpy.concatenate().dot", "utils.cv.tensor2img", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "test.Test.generator", "utils.cv.tensor2img", "cv2.warpAffine", "cv2.warpAffine", "numpy.array", "numpy.concatenate", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "ldmk_pred.squeeze().cpu().detach", "numpy.concatenate", "ldmk_pred.squeeze().cpu", "numpy.ones", "ldmk_pred.squeeze"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.tensor2img", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.tensor2img"], ["", "def", "de_mask", "(", "self", ")", ":", "\n", "        ", "img", ",", "img_tensor", ",", "mask", ",", "seg", ",", "coeff", ",", "img_init", ",", "mat", "=", "self", ".", "data", "[", "'I'", "]", ",", "self", ".", "data", "[", "'I_t'", "]", ",", "self", ".", "data", "[", "'mask'", "]", ",", "self", ".", "data", "[", "'seg'", "]", ",", "self", ".", "data", "[", "'coeff'", "]", ",", "self", ".", "data", "[", "'img_init'", "]", ",", "self", ".", "data", "[", "'mat'", "]", "\n", "\n", "verts", ",", "tex", ",", "id_coeff", ",", "ex_coeff", ",", "tex_coeff", ",", "gamma", ",", "ldmk_pred", "=", "self", ".", "face_decoder", "(", "coeff", ")", "\n", "out", "=", "self", ".", "renderer", "(", "verts", ",", "self", ".", "tri", ",", "size", "=", "256", ",", "colors", "=", "tex", ",", "gamma", "=", "gamma", ",", "front_mask", "=", "None", ")", "\n", "recon", "=", "out", "[", "'rgb'", "]", "\n", "ldmk_np", "=", "ldmk_pred", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "ldmk_np", "=", "np", ".", "concatenate", "(", "(", "ldmk_np", ",", "np", ".", "ones", "(", "(", "68", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", ".", "dot", "(", "mat", ".", "T", ")", "\n", "self", ".", "data", "[", "'ldmk'", "]", "=", "ldmk_np", "\n", "\n", "recon_show", "=", "tensor2img", "(", "torch", ".", "clamp", "(", "recon", "+", "1", "-", "out", "[", "'mask'", "]", ",", "0", ",", "1", ")", ")", "\n", "I_de_occ", "=", "(", "img_tensor", "*", "(", "1", "-", "mask", ")", "+", "self", ".", "noise", ")", ".", "cuda", "(", ")", "\n", "occ_recon", "=", "torch", ".", "cat", "(", "(", "I_de_occ", ",", "recon", ",", "mask", ")", ",", "dim", "=", "1", ")", "\n", "inpaint", "=", "self", ".", "generator", "(", "occ_recon", ")", "\n", "inpaint_show", "=", "tensor2img", "(", "inpaint", ")", "\n", "inpaint_show", "=", "cv2", ".", "warpAffine", "(", "inpaint_show", ",", "mat", ",", "(", "256", ",", "256", ")", ",", "borderValue", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "recon_show", "=", "cv2", ".", "warpAffine", "(", "recon_show", ",", "mat", ",", "(", "256", ",", "256", ")", ",", "borderValue", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "inpaint_show", "=", "img_init", "*", "(", "1", "-", "seg", "[", "...", ",", "np", ".", "newaxis", "]", "//", "255", ")", "+", "inpaint_show", "*", "(", "seg", "[", "...", ",", "np", ".", "newaxis", "]", "//", "255", ")", "\n", "inpaint_show", "[", "-", "1", ",", ":", ",", ":", "]", "=", "np", ".", "array", "(", "[", "255", ",", "255", ",", "255", "]", ")", "\n", "# inpaint_show = self.seamless(inpaint_show, img_init, seg)", "\n", "self", ".", "data", "[", "'inpaint_show'", "]", "=", "inpaint_show", "\n", "self", ".", "data", "[", "'recon_show'", "]", "=", "recon_show", "\n", "self", ".", "data", "[", "'show'", "]", "=", "np", ".", "concatenate", "(", "(", "img_init", ",", "recon_show", ",", "inpaint_show", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.forward": [[229, 273], ["cv2.namedWindow", "test.Test.load_data", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "coeff.clone", "test.Test.create_trackbars", "test.Test.de_mask", "cv2.imshow", "cv2.waitKey", "ord", "ord", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "test.Test.de_mask", "ord", "test.Test.coeff_clone.clone", "cv2.destroyWindow", "cv2.namedWindow", "test.Test.create_trackbars", "test.Test.de_mask", "ord", "os.path.join", "cv2.imwrite", "os.path.join", "cv2.imwrite", "os.path.join", "numpy.savetxt", "ord", "cv2.destroyWindow", "name.split", "name.split"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.load_data", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.create_trackbars", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.de_mask", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.de_mask", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.create_trackbars", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Test.de_mask"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "img_lst", ":", "\n", "            ", "cv2", ".", "namedWindow", "(", "self", ".", "title", ")", "\n", "img_init", ",", "img", ",", "img_tensor", ",", "seg", ",", "coeff", ",", "mask", ",", "mat", "=", "self", ".", "load_data", "(", "name", ")", "\n", "self", ".", "data", "=", "{", "'I'", ":", "img", ",", "'I_t'", ":", "img_tensor", ",", "'mask'", ":", "mask", ",", "'seg'", ":", "seg", ",", "'coeff'", ":", "coeff", ",", "'img_init'", ":", "img_init", ",", "'mat'", ":", "mat", "}", "\n", "self", ".", "noise", "=", "torch", ".", "rand_like", "(", "mask", ")", "\n", "self", ".", "coeff_clone", "=", "coeff", ".", "clone", "(", ")", "\n", "self", ".", "create_trackbars", "(", ")", "\n", "self", ".", "de_mask", "(", ")", "\n", "count", "=", "0", "\n", "while", "True", ":", "\n", "                ", "show", "=", "self", ".", "data", "[", "'show'", "]", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "cv2", ".", "imshow", "(", "self", ".", "title", ",", "show", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "5", ")", "\n", "if", "key", "==", "ord", "(", "'q'", ")", ":", "\n", "                    ", "self", ".", "stop", "=", "True", "\n", "break", "\n", "", "elif", "key", "==", "ord", "(", "'n'", ")", ":", "\n", "                    ", "cv2", ".", "destroyWindow", "(", "self", ".", "title", ")", "\n", "break", "\n", "", "if", "key", "==", "ord", "(", "'r'", ")", ":", "\n", "                    ", "self", ".", "noise", "=", "torch", ".", "rand_like", "(", "mask", ")", "\n", "self", ".", "de_mask", "(", ")", "\n", "", "if", "key", "==", "ord", "(", "'d'", ")", ":", "\n", "                    ", "self", ".", "data", "[", "'coeff'", "]", "=", "self", ".", "coeff_clone", ".", "clone", "(", ")", "\n", "cv2", ".", "destroyWindow", "(", "self", ".", "title", ")", "\n", "cv2", ".", "namedWindow", "(", "self", ".", "title", ")", "\n", "self", ".", "create_trackbars", "(", ")", "\n", "self", ".", "de_mask", "(", ")", "\n", "", "if", "key", "==", "ord", "(", "'s'", ")", ":", "\n", "                    ", "sv_name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_{}.png'", ".", "format", "(", "count", ")", "\n", "img_pth", "=", "os", ".", "path", ".", "join", "(", "'animation/res/'", ",", "sv_name", ")", "\n", "cv2", ".", "imwrite", "(", "img_pth", ",", "self", ".", "data", "[", "'inpaint_show'", "]", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "rec_pth", "=", "os", ".", "path", ".", "join", "(", "'animation/3D/'", ",", "sv_name", ")", "\n", "cv2", ".", "imwrite", "(", "rec_pth", ",", "self", ".", "data", "[", "'recon_show'", "]", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "ldmk_sv_name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_{}.txt'", ".", "format", "(", "count", ")", "\n", "ldmk_pth", "=", "os", ".", "path", ".", "join", "(", "'animation/ldmk/'", ",", "ldmk_sv_name", ")", "\n", "np", ".", "savetxt", "(", "ldmk_pth", ",", "self", ".", "data", "[", "'ldmk'", "]", ")", "\n", "count", "+=", "1", "\n", "# cv2.imwrite('output_ours/{}'.format(name), self.data['inpaint_show'][...,::-1])", "\n", "\n", "", "", "if", "self", ".", "stop", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.load_lm3d": [[18, 30], ["scipy.io.loadmat", "numpy.stack", "numpy.array", "numpy.mean", "numpy.mean"], "function", ["None"], ["def", "load_lm3d", "(", ")", ":", "\n", "    ", "pth", "=", "'./BFM/similarity_Lm3D_all.mat'", "\n", "Lm3D", "=", "loadmat", "(", "pth", ")", "\n", "Lm3D", "=", "Lm3D", "[", "'lm'", "]", "\n", "\n", "# calculate 5 facial landmarks using 68 landmarks", "\n", "lm_idx", "=", "np", ".", "array", "(", "[", "31", ",", "37", ",", "40", ",", "43", ",", "46", ",", "49", ",", "55", "]", ")", "-", "1", "\n", "Lm3D", "=", "np", ".", "stack", "(", "[", "Lm3D", "[", "lm_idx", "[", "0", "]", ",", ":", "]", ",", "np", ".", "mean", "(", "Lm3D", "[", "lm_idx", "[", "[", "1", ",", "2", "]", "]", ",", ":", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "Lm3D", "[", "lm_idx", "[", "[", "3", ",", "4", "]", "]", ",", ":", "]", ",", "0", ")", ",", "\n", "Lm3D", "[", "lm_idx", "[", "5", "]", ",", ":", "]", ",", "Lm3D", "[", "lm_idx", "[", "6", "]", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "Lm3D", "=", "Lm3D", "[", "[", "1", ",", "2", ",", "0", ",", "3", ",", "4", "]", ",", ":", "]", "\n", "\n", "return", "Lm3D", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.POS": [[35, 68], ["numpy.zeros", "numpy.concatenate", "numpy.reshape", "numpy.linalg.lstsq", "numpy.stack", "numpy.stack", "numpy.array", "numpy.stack", "numpy.array", "numpy.ones", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["None"], ["def", "POS", "(", "xp", ",", "x", ")", ":", "\n", "    ", "npts", "=", "xp", ".", "shape", "[", "0", "]", "\n", "if", "npts", "==", "68", ":", "\n", "        ", "lm_idx", "=", "np", ".", "array", "(", "[", "31", ",", "37", ",", "40", ",", "43", ",", "46", ",", "49", ",", "55", "]", ")", "-", "1", "\n", "xp", "=", "np", ".", "stack", "(", "[", "xp", "[", "lm_idx", "[", "0", "]", ",", ":", "]", ",", "np", ".", "mean", "(", "xp", "[", "lm_idx", "[", "[", "1", ",", "2", "]", "]", ",", ":", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "xp", "[", "lm_idx", "[", "[", "3", ",", "4", "]", "]", ",", ":", "]", ",", "0", ")", ",", "\n", "xp", "[", "lm_idx", "[", "5", "]", ",", ":", "]", ",", "xp", "[", "lm_idx", "[", "6", "]", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "xp", "=", "xp", "[", "[", "1", ",", "2", ",", "0", ",", "3", ",", "4", "]", ",", ":", "]", "\n", "npts", "=", "5", "\n", "", "if", "npts", "==", "29", ":", "\n", "        ", "lm_idx", "=", "np", ".", "array", "(", "[", "20", ",", "8", ",", "10", ",", "9", ",", "11", ",", "22", ",", "23", "]", ")", "\n", "xp", "=", "np", ".", "stack", "(", "[", "xp", "[", "lm_idx", "[", "0", "]", ",", ":", "]", ",", "np", ".", "mean", "(", "xp", "[", "lm_idx", "[", "[", "1", ",", "2", "]", "]", ",", ":", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "xp", "[", "lm_idx", "[", "[", "3", ",", "4", "]", "]", ",", ":", "]", ",", "0", ")", ",", "\n", "xp", "[", "lm_idx", "[", "5", "]", ",", ":", "]", ",", "xp", "[", "lm_idx", "[", "6", "]", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "xp", "=", "xp", "[", "[", "1", ",", "2", ",", "0", ",", "3", ",", "4", "]", ",", ":", "]", "\n", "npts", "=", "5", "\n", "\n", "", "A", "=", "np", ".", "zeros", "(", "[", "2", "*", "npts", ",", "8", "]", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "x", ",", "np", ".", "ones", "(", "(", "npts", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "A", "[", "0", ":", "2", "*", "npts", "-", "1", ":", "2", ",", "0", ":", "4", "]", "=", "x", "\n", "\n", "A", "[", "1", ":", "2", "*", "npts", ":", "2", ",", "4", ":", "]", "=", "x", "\n", "\n", "b", "=", "np", ".", "reshape", "(", "xp", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "k", ",", "_", ",", "_", ",", "_", "=", "np", ".", "linalg", ".", "lstsq", "(", "A", ",", "b", ",", "rcond", "=", "None", ")", "\n", "\n", "R1", "=", "k", "[", "0", ":", "3", "]", "\n", "R2", "=", "k", "[", "4", ":", "7", "]", "\n", "sTx", "=", "k", "[", "3", "]", "\n", "sTy", "=", "k", "[", "7", "]", "\n", "s", "=", "(", "np", ".", "linalg", ".", "norm", "(", "R1", ")", "+", "np", ".", "linalg", ".", "norm", "(", "R2", ")", ")", "/", "2", "\n", "t", "=", "np", ".", "stack", "(", "[", "sTx", ",", "sTy", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "t", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.process_img": [[70, 93], ["numpy.array", "numpy.array", "max", "max", "min", "min", "numpy.zeros", "cv2.warpAffine", "img_affine.astype.astype", "img_affine.astype.astype", "cv2.blur"], "function", ["None"], ["", "def", "process_img", "(", "img", ",", "t", ",", "s", ",", "target_size", "=", "256", ")", ":", "\n", "    ", "h0", ",", "w0", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "116.", "/", "s", "\n", "dx", "=", "-", "(", "t", "[", "0", ",", "0", "]", "*", "scale", "-", "target_size", "/", "2", ")", "\n", "dy", "=", "-", "(", "(", "h0", "-", "t", "[", "1", ",", "0", "]", ")", "*", "scale", "-", "target_size", "/", "2", ")", "\n", "mat", "=", "np", ".", "array", "(", "[", "[", "scale", ",", "0", ",", "dx", "]", ",", "\n", "[", "0", ",", "scale", ",", "dy", "]", "]", ")", "\n", "\n", "corners", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "w0", "-", "1", ",", "h0", "-", "1", ",", "1", "]", "]", ")", "\n", "new_corners", "=", "(", "corners", "@", "mat", ".", "T", ")", ".", "astype", "(", "'int32'", ")", "\n", "pad_left", "=", "max", "(", "new_corners", "[", "0", ",", "0", "]", ",", "0", ")", "\n", "pad_top", "=", "max", "(", "new_corners", "[", "0", ",", "1", "]", ",", "0", ")", "\n", "pad_right", "=", "min", "(", "new_corners", "[", "1", ",", "0", "]", ",", "target_size", "-", "1", ")", "\n", "pad_bottom", "=", "min", "(", "new_corners", "[", "1", ",", "1", "]", ",", "target_size", "-", "1", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "target_size", ",", "target_size", ",", "3", ")", ")", "\n", "mask", "[", ":", "pad_top", ",", ":", ",", ":", "]", "=", "1", "\n", "mask", "[", "pad_bottom", ":", ",", ":", ",", ":", "]", "=", "1", "\n", "mask", "[", ":", ",", ":", "pad_left", ",", ":", "]", "=", "1", "\n", "mask", "[", ":", ",", "pad_right", ":", ",", ":", "]", "=", "1", "\n", "img_affine", "=", "cv2", ".", "warpAffine", "(", "img", ",", "mat", ",", "(", "target_size", ",", "target_size", ")", ",", "borderMode", "=", "cv2", ".", "BORDER_REFLECT_101", ")", "\n", "img_affine", "=", "img_affine", ".", "astype", "(", "'float32'", ")", "*", "(", "1", "-", "mask", ")", "+", "cv2", ".", "blur", "(", "img_affine", ",", "(", "10", ",", "10", ")", ")", "*", "mask", "\n", "img_affine", "=", "img_affine", ".", "astype", "(", "'uint8'", ")", "\n", "return", "img_affine", ",", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.show_ldmk": [[95, 99], ["cv2.circle", "int", "int"], "function", ["None"], ["", "def", "show_ldmk", "(", "img", ",", "lm", ")", ":", "\n", "    ", "for", "pt", "in", "lm", ":", "\n", "        ", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", ")", ",", "4", ",", "(", "0", ",", "0", ",", "255", ")", ",", "-", "1", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.Preprocess": [[101, 109], ["numpy.stack", "test.POS", "test.process_img", "numpy.concatenate", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.POS", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.None.test.process_img"], ["", "def", "Preprocess", "(", "img", ",", "lm", ")", ":", "\n", "    ", "h0", ",", "w0", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "lm_", "=", "np", ".", "stack", "(", "[", "lm", "[", ":", ",", "0", "]", ",", "h0", "-", "1", "-", "lm", "[", ":", ",", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "t", ",", "s", "=", "POS", "(", "lm_", ",", "lm3D", ")", "\n", "img_new", ",", "mat", "=", "process_img", "(", "img", ",", "t", ",", "s", ")", "\n", "lm_affine", "=", "np", ".", "concatenate", "(", "(", "lm", "[", ":", ",", ":", "2", "]", ",", "np", ".", "ones", "(", "(", "lm", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "lm_affine", "=", "lm_affine", "@", "mat", ".", "T", "\n", "return", "img_new", ",", "lm_affine", ",", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.rgb2gray": [[13, 18], ["torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "rgb2gray", "(", "batch_img", ")", ":", "\n", "    ", "device", "=", "batch_img", ".", "device", "\n", "weight", "=", "torch", ".", "tensor", "(", "[", "0.299", ",", "0.587", ",", "0.114", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "# RGB order", "\n", "gray", "=", "(", "batch_img", "*", "weight", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.tensor2img": [[20, 39], ["torchvision.utils.make_grid.detach().permute().cpu().numpy", "len", "torchvision.utils.make_grid.max", "torchvision.utils.make_grid.astype", "tensor.squeeze", "torchvision.utils.make_grid", "torchvision.utils.make_grid.detach().permute().cpu", "torchvision.utils.make_grid.min", "torchvision.utils.make_grid.detach().permute", "torchvision.utils.make_grid.detach"], "function", ["None"], ["", "def", "tensor2img", "(", "tensor", ")", ":", "\n", "    ", "shape", "=", "tensor", ".", "shape", "\n", "show", "=", "tensor", "\n", "if", "len", "(", "shape", ")", "==", "4", ":", "\n", "        ", "if", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "show", "=", "tensor", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "show", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "tensor", ".", "shape", "[", "0", "]", ",", "padding", "=", "0", ")", "\n", "\n", "", "", "show", "=", "show", ".", "detach", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "show", ".", "max", "(", ")", ">", "1", ":", "\n", "        ", "show", "=", "show", ".", "astype", "(", "'uint8'", ")", "\n", "", "elif", "show", ".", "min", "(", ")", "<", "0", ":", "\n", "        ", "show", "=", "(", "show", "*", "128", "+", "127.5", ")", ".", "astype", "(", "'uint8'", ")", "\n", "#show = show*0.5+0.5", "\n", "#show = (show * 255).astype('uint8')", "\n", "", "else", ":", "\n", "        ", "show", "=", "(", "show", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "", "return", "show", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.save_result": [[41, 60], ["torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torchvision.utils.make_grid", "cv2.imwrite", "batch_list.append", "F.interpolate.repeat", "torch.interpolate", "torchvision.utils.make_grid.detach().squeeze().permute().cpu().numpy", "torchvision.utils.make_grid.detach().squeeze().permute().cpu", "torchvision.utils.make_grid.detach().squeeze().permute", "torchvision.utils.make_grid.detach().squeeze", "torchvision.utils.make_grid.detach"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_result", "(", "batch_img_list", ",", "pth", ")", ":", "\n", "    ", "batch_list", "=", "[", "]", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "batch_img_list", "[", "0", "]", ".", "shape", "\n", "for", "batch_img", "in", "batch_img_list", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "batch_img", ".", "shape", "\n", "if", "c", "!=", "3", ":", "\n", "            ", "batch_img", "=", "batch_img", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "if", "h", "!=", "H", ":", "\n", "            ", "batch_img", "=", "F", ".", "interpolate", "(", "batch_img", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "batch_list", ".", "append", "(", "batch_img", ")", "\n", "\n", "", "bz", "=", "batch_img_list", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "total", "=", "torch", ".", "cat", "(", "batch_list", ",", "dim", "=", "0", ")", "\n", "# save_image(total, pth, nrow=bz, padding=2, normalize=True, scale_each=True)", "\n", "show", "=", "make_grid", "(", "total", ",", "nrow", "=", "bz", ",", "padding", "=", "2", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", "\n", "show", "=", "(", "show", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "cv2", ".", "imwrite", "(", "pth", ",", "show", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.save_ckpt": [[62, 64], ["torch.save", "torch.save"], "function", ["None"], ["", "def", "save_ckpt", "(", "ckpt_dict", ",", "pth", ")", ":", "\n", "    ", "torch", ".", "save", "(", "ckpt_dict", ",", "pth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.mkdir": [[66, 74], ["pathlib.Path().parent.parent.absolute", "os.path.join", "os.path.exists", "os.mkdir", "os.path.join", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.mkdir"], ["", "def", "mkdir", "(", "name", ",", "format", "=", "None", ")", ":", "\n", "    ", "pth", "=", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", ".", "absolute", "(", ")", "\n", "dir_pth", "=", "os", ".", "path", ".", "join", "(", "pth", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_pth", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_pth", ")", "\n", "", "if", "format", "is", "not", "None", ":", "\n", "        ", "dir_pth", "=", "os", ".", "path", ".", "join", "(", "dir_pth", ",", "format", ")", "\n", "", "return", "dir_pth", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.img2tensor": [[76, 82], ["torch.from_numpy().permute().unsqueeze", "torch.from_numpy().permute().unsqueeze", "torch.from_numpy().permute().unsqueeze.max", "torch.from_numpy().permute().unsqueeze.astype", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "img2tensor", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "max", "(", ")", ">", "1", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.ldmk2mask": [[84, 99], ["ldmk.astype.astype", "numpy.ones", "cv2.convexHull", "cv2.convexHull", "cv2.fillPoly", "cv2.fillPoly"], "function", ["None"], ["", "def", "ldmk2mask", "(", "ldmk", ",", "size", "=", "128", ")", ":", "\n", "    ", "ldmk", "=", "ldmk", ".", "astype", "(", "'int64'", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "size", ",", "size", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "# face = cv2.convexHull(np.vstack((ldmk[0:17],", "\n", "#                                  ldmk[22:27][::-1],", "\n", "#                                  ldmk[17:22][::-1])))", "\n", "left_eye", "=", "cv2", ".", "convexHull", "(", "ldmk", "[", "36", ":", "42", "]", ")", "\n", "right_eye", "=", "cv2", ".", "convexHull", "(", "ldmk", "[", "42", ":", "48", "]", ")", "\n", "inner_mouth", "=", "ldmk", "[", "60", ":", "]", "\n", "# cv2.fillPoly(mask, [face], 1)", "\n", "cv2", ".", "fillPoly", "(", "mask", ",", "[", "left_eye", ",", "right_eye", "]", ",", "0", ")", "\n", "cv2", ".", "fillPoly", "(", "mask", ",", "[", "inner_mouth", "]", ",", "0", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.draw_ldmk": [[101, 120], ["range", "type", "cv.tensor2img", "type", "ldmk.squeeze().numpy.squeeze().numpy", "cv2.resize", "tuple", "cv2.circle", "cv2.putText", "ldmk[].astype", "ldmk.squeeze().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.tensor2img"], ["", "def", "draw_ldmk", "(", "img", ",", "ldmk", ")", ":", "\n", "    ", "if", "type", "(", "img", ")", "is", "torch", ".", "Tensor", ":", "\n", "        ", "img", "=", "tensor2img", "(", "img", ")", "\n", "", "if", "type", "(", "ldmk", ")", "is", "torch", ".", "Tensor", ":", "\n", "        ", "ldmk", "=", "ldmk", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "shape", "=", "img", ".", "shape", "\n", "if", "img", ".", "shape", "[", "0", "]", "<", "512", ":", "\n", "        ", "scale", "=", "512", "//", "img", ".", "shape", "[", "0", "]", "\n", "dsize", "=", "(", "shape", "[", "1", "]", "*", "scale", ",", "shape", "[", "0", "]", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "ldmk", "=", "ldmk", "*", "scale", "\n", "\n", "", "for", "idx", "in", "range", "(", "ldmk", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "point", "=", "tuple", "(", "ldmk", "[", "idx", "]", ".", "astype", "(", "'int'", ")", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "point", ",", "radius", "=", "1", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "thickness", "=", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "'{}'", ".", "format", "(", "idx", ")", ",", "point", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.3", ",", "(", "255", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.show_img": [[122, 132], ["cv2.imshow", "cv2.waitKey", "cv2.destroyAllWindows", "matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.show"], "function", ["None"], ["", "def", "show_img", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "cv2", ".", "imshow", "(", "'img'", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.beauty_face": [[134, 152], ["cv2.GaussianBlur", "cv2.subtract", "cv2.add", "cv2.GaussianBlur", "cv2.add", "cv2.addWeighted", "cv2.add"], "function", ["None"], ["", "", "def", "beauty_face", "(", "img", ")", ":", "\n", "    ", "v1", "=", "5", "# \u78e8\u76ae\u7a0b\u5ea6", "\n", "v2", "=", "3", "# \u7ec6\u8282\u7a0b\u5ea6", "\n", "dx", "=", "v1", "*", "5", "# \u53cc\u8fb9\u6ee4\u6ce2\u53c2\u6570\u4e4b\u4e00", "\n", "fc", "=", "v1", "*", "12.5", "# \u53cc\u8fb9\u6ee4\u6ce2\u53c2\u6570\u4e4b\u4e00", "\n", "p", "=", "0.1", "\n", "# \u53cc\u8fb9\u6ee4\u6ce2", "\n", "# temp1 = cv2.bilateralFilter(img, dx, fc, fc)", "\n", "temp1", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "5", ",", "5", ")", ",", "0", ")", "\n", "\n", "temp2", "=", "cv2", ".", "subtract", "(", "temp1", ",", "img", ")", ";", "\n", "temp2", "=", "cv2", ".", "add", "(", "temp2", ",", "(", "10", ",", "10", ",", "10", ",", "128", ")", ")", "\n", "# \u9ad8\u65af\u6a21\u7cca", "\n", "temp3", "=", "cv2", ".", "GaussianBlur", "(", "temp2", ",", "(", "2", "*", "v2", "-", "1", ",", "2", "*", "v2", "-", "1", ")", ",", "0", ")", "\n", "temp4", "=", "cv2", ".", "add", "(", "img", ",", "temp3", ")", "\n", "dst", "=", "cv2", ".", "addWeighted", "(", "img", ",", "p", ",", "temp4", ",", "1", "-", "p", ",", "0.0", ")", "\n", "dst", "=", "cv2", ".", "add", "(", "dst", ",", "(", "10", ",", "10", ",", "10", ",", "255", ")", ")", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.__init__": [[15, 18], ["super().__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.rasterize": [[19, 39], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pytorch3d.structures.Meshes", "pytorch3d.renderer.rasterize_meshes", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.tensor().expand().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "pytorch3d.structures.Meshes.faces_packed", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor().expand", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rasterize", "(", "verts", ",", "faces", ",", "image_size", "=", "128", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rot_mat", "=", "torch", ".", "tensor", "(", "[", "[", "-", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "expand", "(", "verts", ".", "shape", "[", "0", "]", ",", "3", ",", "\n", "3", ")", ".", "to", "(", "verts", ".", "device", ")", "\n", "trans", "=", "torch", ".", "zeros_like", "(", "verts", ")", "\n", "trans", "[", ":", ",", ":", ",", "2", "]", "=", "5", "# 5", "\n", "\n", "", "verts", "=", "torch", ".", "bmm", "(", "verts", ",", "rot_mat", ")", "\n", "verts", "=", "verts", "+", "trans", "\n", "meshes", "=", "Meshes", "(", "verts", ",", "faces", ")", "\n", "pix_to_face", ",", "zbuf", ",", "bary_coords", ",", "dists", "=", "rasterize_meshes", "(", "\n", "meshes", ",", "\n", "image_size", ",", "\n", "blur_radius", "=", "0", ",", "\n", "faces_per_pixel", "=", "1", ",", "\n", "clip_barycentric_coords", "=", "False", ",", "\n", "cull_backfaces", "=", "False", "\n", ")", "\n", "return", "pix_to_face", ",", "bary_coords", ",", "meshes", ".", "faces_packed", "(", ")", ",", "zbuf", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.compute_normal": [[40, 55], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "range", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "verts_normals.index_add.index_add.index_add"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_normal", "(", "verts_packed", ",", "faces_packed", ")", ":", "\n", "        ", "faces_verts", "=", "verts_packed", "[", "faces_packed", "]", "\n", "verts_normals", "=", "torch", ".", "zeros_like", "(", "verts_packed", ")", "\n", "# face_normals = torch.cross(faces_verts[:, 1] - faces_verts[:, 0],", "\n", "#                            faces_verts[:, 2] - faces_verts[:, 0], dim=1) # when use microsoft tri", "\n", "\n", "face_normals", "=", "torch", ".", "cross", "(", "faces_verts", "[", ":", ",", "2", "]", "-", "faces_verts", "[", ":", ",", "0", "]", ",", "\n", "faces_verts", "[", ":", ",", "1", "]", "-", "faces_verts", "[", ":", ",", "0", "]", ",", "dim", "=", "1", ")", "# when use tddfa tri", "\n", "\n", "for", "idx", "in", "range", "(", "3", ")", ":", "\n", "            ", "verts_normals", "=", "verts_normals", ".", "index_add", "(", "0", ",", "faces_packed", "[", ":", ",", "idx", "]", ",", "face_normals", ")", "\n", "\n", "", "verts_normals_packed", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "verts_normals", ",", "eps", "=", "1e-6", ",", "dim", "=", "1", ")", "\n", "return", "verts_normals_packed", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.lighting": [[56, 98], ["verts.view", "simple_renderer.SimpleRenderer.compute_normal", "pytorch3d.ops.interpolate_face_attributes", "torch.normalize", "torch.normalize", "torch.normalize", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "light_position.light_point", "pytorch3d.ops.interpolate_face_attributes", "light_position.light_direction", "torch.normalize", "torch.normalize", "torch.normalize", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.normalize", "torch.normalize", "torch.normalize", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.relu", "torch.relu", "torch.relu", "pytorch3d.ops.interpolate_face_attributes", "torch.relu", "torch.relu", "torch.relu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.compute_normal", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.light_position.light_point", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.light_position.light_direction"], ["", "def", "lighting", "(", "self", ",", "verts", ",", "faces_packed", ",", "pix_to_face", ",", "bary_coords", ",", "point", "=", "False", ",", "random", "=", "0.7", ",", "specular", "=", "False", ")", ":", "\n", "        ", "verts_packed", "=", "verts", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "verts_normals_packed", "=", "self", ".", "compute_normal", "(", "verts_packed", ",", "faces_packed", ")", "\n", "faces_normals", "=", "verts_normals_packed", "[", "faces_packed", "]", "\n", "pixel_normals", "=", "interpolate_face_attributes", "(", "pix_to_face", ",", "bary_coords", ",", "faces_normals", ")", "\n", "pixel_coords", "=", "None", "\n", "if", "point", ":", "\n", "            ", "light_loc", "=", "light_point", "(", "random", "=", "random", ",", "device", "=", "verts", ".", "device", ")", "\n", "faces_verts", "=", "verts_packed", "[", "faces_packed", "]", "\n", "pixel_coords", "=", "interpolate_face_attributes", "(", "pix_to_face", ",", "bary_coords", ",", "faces_verts", ")", "# to calc light direction", "\n", "direction", "=", "light_loc", "-", "pixel_coords", "\n", "", "else", ":", "\n", "            ", "direction", "=", "light_direction", "(", "random", "=", "random", ",", "device", "=", "verts", ".", "device", ")", "\n", "\n", "", "direction", "=", "F", ".", "normalize", "(", "direction", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "\n", "# color of the light", "\n", "color", "=", "torch", ".", "tensor", "(", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", ".", "to", "(", "verts", ".", "device", ")", "\n", "\n", "normals", "=", "-", "F", ".", "normalize", "(", "pixel_normals", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "\n", "# diffuse", "\n", "cos_angle", "=", "torch", ".", "sum", "(", "normals", "*", "direction", ",", "dim", "=", "-", "1", ")", "\n", "diffuse", "=", "color", "*", "F", ".", "relu", "(", "cos_angle", ")", "[", "...", ",", "None", "]", "\n", "\n", "# specular", "\n", "if", "specular", ":", "\n", "            ", "camera_position", "=", "torch", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "-", "1000.", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "verts", ".", "device", ")", "\n", "mask", "=", "(", "cos_angle", ">", "0", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "reflect_direction", "=", "-", "direction", "+", "2", "*", "(", "cos_angle", "[", "...", ",", "None", "]", "*", "normals", ")", "\n", "if", "pixel_coords", "is", "None", ":", "\n", "                ", "faces_verts", "=", "verts_packed", "[", "faces_packed", "]", "\n", "pixel_coords", "=", "interpolate_face_attributes", "(", "pix_to_face", ",", "bary_coords", ",", "faces_verts", ")", "\n", "\n", "", "view_direction", "=", "camera_position", "-", "pixel_coords", "\n", "view_direction", "=", "F", ".", "normalize", "(", "view_direction", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "alpha", "=", "F", ".", "relu", "(", "torch", ".", "sum", "(", "view_direction", "*", "reflect_direction", ",", "dim", "=", "-", "1", ")", ")", "*", "mask", "\n", "specular", "=", "color", "*", "torch", ".", "pow", "(", "alpha", ",", "1e3", ")", "[", "...", ",", "None", "]", "# shininess of the material:5", "\n", "return", "diffuse", ",", "specular", ",", "normals", ",", "verts_normals_packed", "\n", "\n", "", "else", ":", "\n", "            ", "return", "diffuse", ",", "0", ",", "normals", ",", "verts_normals_packed", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.visible_verts_mask": [[99, 120], ["verts.view", "pytorch3d.ops.interpolate_face_attributes", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "depth.view.view.view", "depth.view.view.gather", "pytorch3d.ops.interpolate_face_attributes.squeeze", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "visible_verts_mask", "(", "verts", ",", "faces_packed", ",", "pix_to_face", ",", "bary_coords", ",", "size", ",", "mask_edge", "=", "None", ")", ":", "\n", "        ", "verts_packed", "=", "verts", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "faces_verts", "=", "verts_packed", "[", "faces_packed", "]", "\n", "pixel_coords", "=", "interpolate_face_attributes", "(", "pix_to_face", ",", "bary_coords", ",", "faces_verts", ")", "# # 3x128x128x1x3", "\n", "depth", "=", "pixel_coords", ".", "squeeze", "(", "3", ")", "[", "...", ",", "2", "]", "# 3x128x128x1", "\n", "if", "mask_edge", "is", "not", "None", ":", "\n", "            ", "depth", "+=", "mask_edge", "\n", "\n", "", "x", "=", "(", "verts", "[", "...", ",", "0", "]", "*", "0.5", "+", "0.5", ")", "*", "(", "size", "-", "1", ")", "\n", "y", "=", "(", "1", "-", "(", "verts", "[", "...", ",", "1", "]", "*", "0.5", "+", "0.5", ")", ")", "*", "(", "size", "-", "1", ")", "\n", "outlier", "=", "(", "x", "<", "0", ")", "+", "(", "x", ">", "(", "size", "-", "1", ")", ")", "+", "(", "y", "<", "0", ")", "+", "(", "y", ">", "(", "size", "-", "1", ")", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "x", ")", ",", "0", ",", "size", "-", "1", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "y", ")", ",", "0", ",", "size", "-", "1", ")", "\n", "vert_depth", "=", "verts", "[", "...", ",", "2", "]", "\n", "idx", "=", "(", "size", "*", "y", "+", "x", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "depth", "=", "depth", ".", "view", "(", "-", "1", ",", "size", "*", "size", ")", "\n", "vert_buffer", "=", "depth", ".", "gather", "(", "1", ",", "idx", ")", "\n", "mask", "=", "(", "vert_depth", ">=", "(", "vert_buffer", "-", "0.03", ")", ")", "\n", "mask", "=", "mask", "*", "~", "outlier", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.mask_erosion": [[121, 130], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "list", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "map", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cv2.erode", "math.detach().squeeze().cpu().numpy().astype", "math.detach().squeeze().cpu().numpy", "math.detach().squeeze().cpu", "math.detach().squeeze", "math.detach"], "methods", ["None"], ["", "def", "mask_erosion", "(", "self", ",", "batch_mask", ",", "mask_kernel", ")", ":", "# bz*H*W", "\n", "        ", "bz", "=", "batch_mask", ".", "shape", "[", "0", "]", "\n", "masks", "=", "torch", ".", "chunk", "(", "batch_mask", ",", "bz", ")", "\n", "erode", "=", "lambda", "m", ":", "torch", ".", "from_numpy", "(", "\n", "cv2", ".", "erode", "(", "m", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", ",", "mask_kernel", ",", "iterations", "=", "1", ")", ")", ".", "type", "(", "\n", "torch", ".", "float32", ")", "\n", "masks", "=", "list", "(", "map", "(", "erode", ",", "masks", ")", ")", "\n", "batch_mask_ero", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", ".", "to", "(", "batch_mask", ".", "device", ")", "\n", "return", "batch_mask_ero", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.illumination": [[131, 162], ["torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.reshape().permute", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "math.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "math.sqrt", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "illumination", "(", "face_texture", ",", "norm_r", ",", "gamma", ")", ":", "\n", "        ", "n_data", "=", "gamma", ".", "shape", "[", "0", "]", "\n", "n_point", "=", "norm_r", ".", "shape", "[", "1", "]", "\n", "device", "=", "face_texture", ".", "device", "\n", "gamma", "=", "torch", ".", "reshape", "(", "gamma", ",", "(", "-", "1", ",", "3", ",", "9", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "init_lit", "=", "torch", ".", "zeros_like", "(", "gamma", ")", "\n", "init_lit", "[", ":", ",", "0", "]", "=", "0.8", "\n", "gamma", "=", "gamma", "+", "init_lit", "\n", "\n", "a0", "=", "m", ".", "pi", "\n", "a1", "=", "2", "*", "m", ".", "pi", "/", "m", ".", "sqrt", "(", "3.0", ")", "\n", "a2", "=", "2", "*", "m", ".", "pi", "/", "m", ".", "sqrt", "(", "8.0", ")", "\n", "c0", "=", "1", "/", "m", ".", "sqrt", "(", "4", "*", "m", ".", "pi", ")", "\n", "c1", "=", "m", ".", "sqrt", "(", "3.0", ")", "/", "m", ".", "sqrt", "(", "4", "*", "m", ".", "pi", ")", "\n", "c2", "=", "3", "*", "m", ".", "sqrt", "(", "5.0", ")", "/", "m", ".", "sqrt", "(", "12", "*", "m", ".", "pi", ")", "\n", "\n", "Y", "=", "torch", ".", "cat", "(", "(", "a0", "*", "c0", "*", "torch", ".", "ones", "(", "n_data", ",", "n_point", ",", "1", ")", ".", "to", "(", "device", ")", ",", "\n", "-", "a1", "*", "c1", "*", "norm_r", "[", ":", ",", ":", ",", "1", ":", "2", "]", ",", "\n", "a1", "*", "c1", "*", "norm_r", "[", ":", ",", ":", ",", "2", ":", "3", "]", ",", "\n", "-", "a1", "*", "c1", "*", "norm_r", "[", ":", ",", ":", ",", "0", ":", "1", "]", ",", "\n", "a2", "*", "c2", "*", "norm_r", "[", ":", ",", ":", ",", "0", ":", "1", "]", "*", "norm_r", "[", ":", ",", ":", ",", "1", ":", "2", "]", ",", "\n", "-", "a2", "*", "c2", "*", "norm_r", "[", ":", ",", ":", ",", "1", ":", "2", "]", "*", "norm_r", "[", ":", ",", ":", ",", "2", ":", "3", "]", ",", "\n", "a2", "*", "c2", "*", "0.5", "/", "m", ".", "sqrt", "(", "3.0", ")", "*", "(", "3", "*", "norm_r", "[", ":", ",", ":", ",", "2", ":", "3", "]", "**", "2", "-", "1", ")", ",", "\n", "-", "a2", "*", "c2", "*", "norm_r", "[", ":", ",", ":", ",", "0", ":", "1", "]", "*", "norm_r", "[", ":", ",", ":", ",", "2", ":", "3", "]", ",", "\n", "a2", "*", "c2", "*", "0.5", "*", "(", "norm_r", "[", ":", ",", ":", ",", "0", ":", "1", "]", "**", "2", "-", "norm_r", "[", ":", ",", ":", ",", "1", ":", "2", "]", "**", "2", ")", "\n", ")", ",", "dim", "=", "2", ")", ".", "to", "(", "device", ")", "\n", "\n", "color", "=", "torch", ".", "bmm", "(", "Y", ",", "gamma", ")", "\n", "face_color", "=", "face_texture", "*", "color", "\n", "return", "face_color", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.forward_color": [[163, 169], ["colors.reshape", "pytorch3d.ops.interpolate_face_attributes"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward_color", "(", "colors", ",", "faces_packed", ",", "pix_to_face", ",", "bary_coords", ")", ":", "\n", "        ", "colors_packed", "=", "colors", ".", "reshape", "(", "-", "1", ",", "colors", ".", "shape", "[", "2", "]", ")", "\n", "faces_colors", "=", "colors_packed", "[", "faces_packed", "]", "\n", "pixel_colors", "=", "interpolate_face_attributes", "(", "pix_to_face", ",", "bary_coords", ",", "faces_colors", ")", "\n", "return", "pixel_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.forward": [[170, 201], ["simple_renderer.SimpleRenderer.rasterize", "simple_renderer.SimpleRenderer.lighting", "verts_normals_packed.view", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "torch.clamp().squeeze().permute().contiguous", "simple_renderer.SimpleRenderer.illumination", "simple_renderer.SimpleRenderer.forward_color", "torch.clamp.squeeze().permute().contiguous", "torch.clamp.squeeze().permute().contiguous", "torch.clamp.squeeze().permute().contiguous", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.clamp().squeeze().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp.squeeze().permute", "torch.clamp.squeeze().permute", "torch.clamp.squeeze().permute", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp().squeeze", "torch.clamp.squeeze", "torch.clamp.squeeze", "torch.clamp.squeeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.rasterize", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.lighting", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.illumination", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.simple_renderer.SimpleRenderer.forward_color"], ["", "def", "forward", "(", "self", ",", "verts", ",", "faces", ",", "size", "=", "256", ",", "colors", "=", "None", ",", "gamma", "=", "None", ",", "front_mask", "=", "None", ")", ":", "\n", "        ", "pix_to_face", ",", "bary_coords", ",", "faces_packed", ",", "zbuf", "=", "self", ".", "rasterize", "(", "verts", ",", "faces", ",", "size", ")", "\n", "diffuse", ",", "specular", ",", "normals", ",", "verts_normals_packed", "=", "self", ".", "lighting", "(", "verts", ",", "faces_packed", ",", "\n", "pix_to_face", ",", "bary_coords", ",", "\n", "random", "=", ".0", ",", "specular", "=", "True", ")", "\n", "verts_normals", "=", "verts_normals_packed", ".", "view", "(", "*", "verts", ".", "shape", ")", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "            ", "colors", "=", "self", ".", "illumination", "(", "colors", ",", "verts_normals", ",", "gamma", ")", "\n", "", "else", ":", "\n", "            ", "colors", "=", "colors", "\n", "\n", "", "light", "=", "diffuse", "+", "specular", "\n", "light", "=", "torch", ".", "clamp", "(", "light", ",", "0", ",", "1", ")", ".", "squeeze", "(", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "mask", "=", "(", "pix_to_face", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "unsqueeze", "(", "1", ")", "\n", "out", "=", "{", "'rgb'", ":", "None", ",", "'mask_eros'", ":", "None", ",", "'mask_verts'", ":", "None", ",", "'mask_front'", ":", "None", ",", "\n", "'mask'", ":", "mask", ",", "'light'", ":", "light", ",", "'verts_normals'", ":", "verts_normals", ",", "'colors'", ":", "colors", "}", "\n", "\n", "if", "colors", "is", "not", "None", ":", "\n", "            ", "if", "front_mask", "is", "not", "None", ":", "\n", "                ", "colors", "=", "torch", ".", "cat", "(", "(", "colors", ",", "front_mask", ")", ",", "dim", "=", "2", ")", "\n", "", "rgb", "=", "self", ".", "forward_color", "(", "colors", ",", "faces_packed", ",", "pix_to_face", ",", "bary_coords", ")", "\n", "rgb", "=", "rgb", ".", "squeeze", "(", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "rgb", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "                ", "mask_front", "=", "(", "rgb", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", ">", "0", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "rgb", "=", "rgb", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "out", "[", "'mask_front'", "]", "=", "mask_front", "\n", "", "rgb", "=", "torch", ".", "clamp", "(", "rgb", ",", "0.0", ",", "1.0", ")", "\n", "out", "[", "'rgb'", "]", "=", "rgb", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.__init__": [[9, 17], ["torch.nn.Module.__init__", "uv.Attr2Uv.rasterize_uv"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.rasterize_uv"], ["    ", "def", "__init__", "(", "self", ",", "uv_coords", ",", "faces", ",", "batch_size", "=", "8", ",", "size", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "uv_coords", "=", "uv_coords", "\n", "pix_to_face", ",", "bary_coords", ",", "faces_packed", "=", "self", ".", "rasterize_uv", "(", "uv_coords", ",", "faces", ",", "batch_size", ")", "\n", "self", ".", "pix_to_face", "=", "pix_to_face", "\n", "self", ".", "bary_coords", "=", "bary_coords", "\n", "self", ".", "faces_packed", "=", "faces_packed", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.process_uv": [[18, 27], ["torch.ones().type().to", "torch.cat", "torch.ones().type", "torch.cat.min", "torch.cat.max", "torch.cat.min", "torch.ones"], "methods", ["None"], ["", "def", "process_uv", "(", "self", ",", "uv_coords", ")", ":", "\n", "        ", "bz", ",", "n_vert", ",", "_", "=", "uv_coords", ".", "shape", "# data is in batch form", "\n", "uv_coords", "=", "(", "uv_coords", "-", "uv_coords", ".", "min", "(", "dim", "=", "1", ")", ".", "values", ")", "/", "(", "\n", "uv_coords", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "-", "uv_coords", ".", "min", "(", "dim", "=", "1", ")", ".", "values", ")", "\n", "uv_coords", "=", "(", "uv_coords", "-", "0.5", ")", "*", "2", "\n", "uv_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "# prevent lr-flip of uv map", "\n", "ones", "=", "torch", ".", "ones", "(", "bz", ",", "n_vert", ",", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "uv_coords", ".", "device", ")", "\n", "uv_coords", "=", "torch", ".", "cat", "(", "(", "uv_coords", ",", "ones", ")", ",", "dim", "=", "2", ")", "\n", "return", "uv_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.rasterize_uv": [[28, 40], ["uv.Attr2Uv.process_uv", "uv_coords.repeat.repeat.repeat", "faces.repeat.repeat.repeat", "pytorch3d.structures.Meshes", "pytorch3d.renderer.rasterize_meshes", "pytorch3d.structures.Meshes.faces_packed"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.process_uv"], ["", "def", "rasterize_uv", "(", "self", ",", "uv_coords", ",", "faces", ",", "bz", ")", ":", "\n", "        ", "uv_coords", "=", "self", ".", "process_uv", "(", "uv_coords", ")", "\n", "uv_coords", "=", "uv_coords", ".", "repeat", "(", "bz", ",", "1", ",", "1", ")", "\n", "faces", "=", "faces", ".", "repeat", "(", "bz", ",", "1", ",", "1", ")", "\n", "meshes", "=", "Meshes", "(", "uv_coords", ",", "faces", ")", "\n", "pix_to_face", ",", "z_buf", ",", "bary_coords", ",", "dist", "=", "rasterize_meshes", "(", "meshes", ",", "\n", "self", ".", "size", ",", "\n", "blur_radius", "=", "0", ",", "\n", "faces_per_pixel", "=", "1", ",", "\n", "clip_barycentric_coords", "=", "False", ")", "\n", "faces_packed", "=", "meshes", ".", "faces_packed", "(", ")", "\n", "return", "pix_to_face", ",", "bary_coords", ",", "faces_packed", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.backface_culling": [[41, 47], ["faces_verts.unbind", "torch.zeros_like"], "methods", ["None"], ["", "def", "backface_culling", "(", "self", ",", "faces_verts", ",", "faces_attrs", ")", ":", "\n", "        ", "v0", ",", "v1", ",", "v2", "=", "faces_verts", ".", "unbind", "(", "dim", "=", "1", ")", "\n", "areas", "=", "(", "v0", "[", ":", ",", "0", "]", "-", "v1", "[", ":", ",", "0", "]", ")", "*", "(", "v2", "[", ":", ",", "1", "]", "-", "v1", "[", ":", ",", "1", "]", ")", "-", "(", "v0", "[", ":", ",", "1", "]", "-", "v1", "[", ":", ",", "1", "]", ")", "*", "(", "v2", "[", ":", ",", "0", "]", "-", "v1", "[", ":", ",", "0", "]", ")", "\n", "mask", "=", "areas", "<=", "0", "\n", "faces_attrs", "[", "mask", "]", "=", "torch", ".", "zeros_like", "(", "faces_attrs", "[", "0", "]", ")", "\n", "return", "faces_attrs", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.forward": [[48, 59], ["vert_attr.reshape", "pytorch3d.ops.interpolate_face_attributes", "pytorch3d.ops.interpolate_face_attributes.squeeze().permute().contiguous", "vert.reshape", "uv.Attr2Uv.backface_culling", "pytorch3d.ops.interpolate_face_attributes.squeeze().permute", "pytorch3d.ops.interpolate_face_attributes.squeeze"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Attr2Uv.backface_culling"], ["", "def", "forward", "(", "self", ",", "vert_attr", ",", "vert", ",", "cull", "=", "True", ")", ":", "\n", "        ", "c", "=", "vert_attr", ".", "shape", "[", "2", "]", "\n", "vert_attr_packed", "=", "vert_attr", ".", "reshape", "(", "-", "1", ",", "c", ")", "\n", "faces_attrs", "=", "vert_attr_packed", "[", "self", ".", "faces_packed", "]", "\n", "if", "cull", ":", "\n", "            ", "vert_packed", "=", "vert", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "faces_verts", "=", "vert_packed", "[", "self", ".", "faces_packed", "]", "\n", "faces_attrs", "=", "self", ".", "backface_culling", "(", "faces_verts", ",", "faces_attrs", ")", "\n", "\n", "", "uv_tex", "=", "interpolate_face_attributes", "(", "self", ".", "pix_to_face", ",", "self", ".", "bary_coords", ",", "faces_attrs", ")", "\n", "return", "uv_tex", ".", "squeeze", "(", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Uv2Attr.__init__": [[62, 73], ["torch.nn.Module.__init__", "torch.chunk", "x.squeeze", "y.squeeze", "uv_coords.min", "uv_coords.max", "uv_coords.min"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "uv_coords", ",", "faces_packed", "=", "None", ",", "size", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# uv_coords 1*nvert*2", "\n", "uv_coords", "=", "(", "uv_coords", "-", "uv_coords", ".", "min", "(", "dim", "=", "1", ")", ".", "values", ")", "/", "(", "\n", "uv_coords", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "-", "uv_coords", ".", "min", "(", "dim", "=", "1", ")", ".", "values", ")", "\n", "x", ",", "y", "=", "torch", ".", "chunk", "(", "uv_coords", ",", "2", ",", "dim", "=", "2", ")", "\n", "x", "=", "x", "*", "(", "size", "-", "1", ")", "\n", "y", "=", "size", "-", "1", "-", "y", "*", "(", "size", "-", "1", ")", "\n", "self", ".", "x", "=", "x", ".", "squeeze", "(", "2", ")", "\n", "self", ".", "y", "=", "y", ".", "squeeze", "(", "2", ")", "\n", "self", ".", "faces_packed", "=", "faces_packed", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Uv2Attr.index_vert_attr": [[74, 84], ["torch.clamp", "torch.clamp", "uvmap.view.view.view", "idx.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "uvmap.view.view.gather", "idx.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "index_vert_attr", "(", "x", ",", "y", ",", "uvmap", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "uvmap", ".", "shape", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "W", "-", "1", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "y", ",", "0", ",", "H", "-", "1", ")", "\n", "idx", "=", "(", "W", "*", "y", "+", "x", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "uvmap", "=", "uvmap", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "idx", "=", "idx", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "B", ",", "C", ",", "1", ")", "\n", "vert_attr", "=", "uvmap", ".", "gather", "(", "2", ",", "idx", ")", "\n", "return", "vert_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Uv2Attr.nearest": [[85, 91], ["torch.round", "torch.round", "uv.Uv2Attr.index_vert_attr"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr"], ["", "def", "nearest", "(", "self", ",", "uvmap", ")", ":", "\n", "# not work. too much points overlap, show nothing", "\n", "        ", "x", "=", "torch", ".", "round", "(", "self", ".", "x", ")", "\n", "y", "=", "torch", ".", "round", "(", "self", ".", "y", ")", "\n", "vert_attr", "=", "self", ".", "index_vert_attr", "(", "x", ",", "y", ",", "uvmap", ")", "\n", "return", "vert_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Uv2Attr.bilinear": [[92, 114], ["torch.floor", "torch.floor", "uv.Uv2Attr.index_vert_attr", "uv.Uv2Attr.index_vert_attr", "uv.Uv2Attr.index_vert_attr", "uv.Uv2Attr.index_vert_attr", "wd.unsqueeze().repeat", "wc.unsqueeze().repeat", "wa.unsqueeze().repeat", "wb.unsqueeze().repeat", "wd.unsqueeze", "wc.unsqueeze", "wa.unsqueeze", "wb.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr"], ["", "def", "bilinear", "(", "self", ",", "uvmap", ")", ":", "\n", "        ", "x", "=", "self", ".", "x", "\n", "y", "=", "self", ".", "y", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "ia", "=", "self", ".", "index_vert_attr", "(", "x0", ",", "y0", ",", "uvmap", ")", "# 5x3x38365", "\n", "ib", "=", "self", ".", "index_vert_attr", "(", "x0", ",", "y1", ",", "uvmap", ")", "\n", "ic", "=", "self", ".", "index_vert_attr", "(", "x1", ",", "y0", ",", "uvmap", ")", "\n", "id", "=", "self", ".", "index_vert_attr", "(", "x1", ",", "y1", ",", "uvmap", ")", "\n", "\n", "wa", "=", "(", "x1", "-", "x", ")", "*", "(", "y1", "-", "y", ")", "# 1x38365", "\n", "wb", "=", "(", "x1", "-", "x", ")", "*", "(", "y", "-", "y0", ")", "\n", "\n", "wc", "=", "(", "x", "-", "x0", ")", "*", "(", "y1", "-", "y", ")", "\n", "\n", "wd", "=", "(", "x", "-", "x0", ")", "*", "(", "y", "-", "y0", ")", "\n", "\n", "vert_attr", "=", "wa", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "*", "ia", "+", "wb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "*", "ib", "+", "wc", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "*", "ic", "+", "wd", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ")", "*", "id", "\n", "return", "vert_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Uv2Attr.get_edge_tri_idx": [[115, 121], ["vert_attr.permute().reshape", "vert_attr.permute", "torch.zeros_like"], "methods", ["None"], ["", "def", "get_edge_tri_idx", "(", "self", ",", "vert_attr", ")", ":", "\n", "        ", "vert_packed", "=", "vert_attr", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "faces_verts", "=", "vert_packed", "[", "self", ".", "faces_packed", "]", "\n", "# background vert: [0.0, 0.0, 0.0]", "\n", "mask", "=", "(", "faces_verts", "==", "torch", ".", "zeros_like", "(", "faces_verts", "[", "0", ",", "0", "]", ")", ")", ".", "all", "(", "dim", "=", "2", ")", ".", "any", "(", "dim", "=", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.Uv2Attr.forward": [[122, 129], ["uv.Uv2Attr.bilinear", "uv.Uv2Attr.nearest"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.bilinear", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.nearest"], ["", "def", "forward", "(", "self", ",", "batch_uv", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "if", "bilinear", ":", "\n", "            ", "vert_attr", "=", "self", ".", "bilinear", "(", "batch_uv", ")", "\n", "", "else", ":", "\n", "            ", "vert_attr", "=", "self", ".", "nearest", "(", "batch_uv", ")", "\n", "# mask = self.get_edge_tri_idx(vert_attr)", "\n", "", "return", "vert_attr", "# , mask", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr": [[132, 149], ["outlier.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.clamp", "torch.clamp", "batch_img.view.view.view", "idx.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "batch_img.view.view.gather", "outlier.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "idx.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "index_vert_attr", "(", "x", ",", "y", ",", "batch_img", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "batch_img", ".", "shape", "\n", "outlier", "=", "(", "x", "<", "0", ")", "+", "(", "x", ">", "(", "W", "-", "1", ")", ")", "+", "(", "y", "<", "0", ")", "+", "(", "y", ">", "(", "H", "-", "1", ")", ")", "\n", "outlier", "=", "outlier", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "W", "-", "1", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "y", ",", "0", ",", "H", "-", "1", ")", "\n", "idx", "=", "(", "W", "*", "y", "+", "x", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "batch_img", "=", "batch_img", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "idx", "=", "idx", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "\n", "vert_attr", "=", "batch_img", ".", "gather", "(", "2", ",", "idx", ")", "\n", "vert_attr", "[", "outlier", "]", "=", "0", "\n", "\n", "# black = -torch.ones(1,3,1).to(batch_img.device)*127.5/128", "\n", "# edge_mask = vert_attr==black", "\n", "# vert_attr[edge_mask] = 0", "\n", "return", "vert_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.nearest": [[150, 158], ["torch.round", "torch.round", "uv.ImgVertAttr.index_vert_attr"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr"], ["", "def", "nearest", "(", "self", ",", "verts", ",", "batch_img", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "batch_img", ".", "shape", "\n", "x", "=", "(", "verts", "[", "...", ",", "0", "]", "*", "0.5", "+", "0.5", ")", "*", "(", "W", "-", "1", ")", "\n", "y", "=", "(", "1", "-", "(", "verts", "[", "...", ",", "1", "]", "*", "0.5", "+", "0.5", ")", ")", "*", "(", "H", "-", "1", ")", "\n", "x", "=", "torch", ".", "round", "(", "x", ")", "\n", "y", "=", "torch", ".", "round", "(", "y", ")", "\n", "vert_attr", "=", "self", ".", "index_vert_attr", "(", "x", ",", "y", ",", "batch_img", ")", "\n", "return", "vert_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.bilinear": [[159, 179], ["torch.floor", "torch.floor", "uv.ImgVertAttr.index_vert_attr", "uv.ImgVertAttr.index_vert_attr", "uv.ImgVertAttr.index_vert_attr", "uv.ImgVertAttr.index_vert_attr", "wd.unsqueeze().repeat", "wc.unsqueeze().repeat", "wa.unsqueeze().repeat", "wb.unsqueeze().repeat", "wd.unsqueeze", "wc.unsqueeze", "wa.unsqueeze", "wb.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.uv.ImgVertAttr.index_vert_attr"], ["", "def", "bilinear", "(", "self", ",", "verts", ",", "batch_img", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "batch_img", ".", "shape", "\n", "x", "=", "(", "verts", "[", "...", ",", "0", "]", "*", "0.5", "+", "0.5", ")", "*", "(", "W", "-", "1", ")", "\n", "y", "=", "(", "1", "-", "(", "verts", "[", "...", ",", "1", "]", "*", "0.5", "+", "0.5", ")", ")", "*", "(", "H", "-", "1", ")", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "ia", "=", "self", ".", "index_vert_attr", "(", "x0", ",", "y0", ",", "batch_img", ")", "# 5x3x38365", "\n", "ib", "=", "self", ".", "index_vert_attr", "(", "x0", ",", "y1", ",", "batch_img", ")", "\n", "ic", "=", "self", ".", "index_vert_attr", "(", "x1", ",", "y0", ",", "batch_img", ")", "\n", "id", "=", "self", ".", "index_vert_attr", "(", "x1", ",", "y1", ",", "batch_img", ")", "\n", "\n", "wa", "=", "(", "x1", "-", "x", ")", "*", "(", "y1", "-", "y", ")", "# 1x38365", "\n", "wb", "=", "(", "x1", "-", "x", ")", "*", "(", "y", "-", "y0", ")", "\n", "wc", "=", "(", "x", "-", "x0", ")", "*", "(", "y1", "-", "y", ")", "\n", "wd", "=", "(", "x", "-", "x0", ")", "*", "(", "y", "-", "y0", ")", "\n", "vert_attr", "=", "wa", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "*", "ia", "+", "wb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "*", "ib", "+", "wc", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "*", "ic", "+", "wd", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ")", "*", "id", "\n", "return", "vert_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.OhemCELoss.__init__": [[121, 127], ["torch.nn.Module.__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "thresh", ",", "n_min", ",", "ignore_lb", "=", "255", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OhemCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thresh", "=", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "thresh", ",", "dtype", "=", "torch", ".", "float", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "n_min", "=", "n_min", "\n", "self", ".", "ignore_lb", "=", "ignore_lb", "\n", "self", ".", "criteria", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_lb", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.OhemCELoss.forward": [[128, 136], ["seg_util.OhemCELoss.criteria().view", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "seg_util.OhemCELoss.criteria"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "loss", "=", "self", ".", "criteria", "(", "logits", ",", "labels", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", ",", "_", "=", "torch", ".", "sort", "(", "loss", ",", "descending", "=", "True", ")", "\n", "if", "loss", "[", "self", ".", "n_min", "]", ">", "self", ".", "thresh", ":", "\n", "            ", "loss", "=", "loss", "[", "loss", ">", "self", ".", "thresh", "]", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss", "[", ":", "self", ".", "n_min", "]", "\n", "", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.OhemBCELoss.__init__": [[139, 144], ["torch.nn.Module.__init__", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "thresh", ",", "n_min", ")", ":", "\n", "        ", "super", "(", "OhemBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_min", "=", "n_min", "\n", "self", ".", "criteria", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "thresh", "=", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "thresh", ",", "dtype", "=", "torch", ".", "float", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.OhemBCELoss.forward": [[145, 155], ["seg_util.OhemBCELoss.criteria().view", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "seg_util.OhemBCELoss.criteria"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "loss", "=", "self", ".", "criteria", "(", "logits", ",", "labels", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", ",", "_", "=", "torch", ".", "sort", "(", "loss", ",", "descending", "=", "True", ")", "\n", "if", "loss", "[", "self", ".", "n_min", "]", ">", "self", ".", "thresh", ":", "\n", "            ", "loss", "=", "loss", "[", "loss", ">", "self", ".", "thresh", "]", "\n", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss", "[", ":", "self", ".", "n_min", "]", "\n", "\n", "", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.fill_mask_model": [[7, 13], ["mask_model.copy", "cv2.floodFill", "cv2.bitwise_not", "numpy.zeros"], "function", ["None"], ["def", "fill_mask_model", "(", "mask_model", ")", ":", "\n", "    ", "mask_model_flood", "=", "mask_model", ".", "copy", "(", ")", "\n", "cv2", ".", "floodFill", "(", "mask_model_flood", ",", "np", ".", "zeros", "(", "(", "258", ",", "258", ")", ",", "np", ".", "uint8", ")", ",", "(", "0", ",", "0", ")", ",", "255", ")", "\n", "mask_model_flood_inv", "=", "cv2", ".", "bitwise_not", "(", "mask_model_flood", ")", "\n", "mask_model", "=", "mask_model_flood_inv", "|", "mask_model", "\n", "return", "mask_model", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.seg_rgb2shape": [[14, 49], ["torch.no_grad", "torch.no_grad", "seg_rgb.argmax.squeeze", "seg_rgb.argmax.dim", "seg_rgb.argmax.argmax", "seg_rgb.argmax.dim", "face_mask.squeeze.squeeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "seg_rgb2shape", "(", "seg_rgb", ",", "face_mask", "=", "None", ")", ":", "\n", "# get the ground truth of training, no need to require grad", "\n", "# seg_rgb: Nx1xHxW or Nx13xHxW", "\n", "    ", "seg_rgb", "=", "seg_rgb", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "if", "seg_rgb", ".", "dim", "(", ")", "==", "4", ":", "\n", "        ", "seg_rgb", "=", "seg_rgb", ".", "argmax", "(", "dim", "=", "1", ")", "# NxHxW", "\n", "", "assert", "seg_rgb", ".", "dim", "(", ")", "==", "3", "\n", "\n", "if", "face_mask", "is", "not", "None", ":", "\n", "        ", "face_mask", "=", "face_mask", ".", "squeeze", "(", "1", ")", "\n", "seg_shape", "=", "torch", ".", "zeros_like", "(", "face_mask", ")", "# background 0", "\n", "seg_shape", "+=", "face_mask", "# skin 1", "\n", "seg_shape", "[", "seg_rgb", "==", "5", "]", "=", "2", "# l_eye 2", "\n", "seg_shape", "[", "seg_rgb", "==", "6", "]", "=", "3", "# r_eye 3", "\n", "seg_shape", "[", "seg_rgb", "==", "7", "]", "=", "4", "# nose 4", "\n", "seg_shape", "[", "seg_rgb", "==", "8", "]", "=", "0", "# mouth 0", "\n", "seg_shape", "[", "seg_rgb", "==", "9", "]", "=", "6", "# u_lip 6", "\n", "seg_shape", "[", "seg_rgb", "==", "10", "]", "=", "7", "# l_lip 7", "\n", "\n", "", "else", ":", "\n", "        ", "seg_shape", "=", "torch", ".", "zeros_like", "(", "seg_rgb", ")", "\n", "seg_shape", "[", "seg_rgb", "==", "1", "]", "=", "1", "# skin", "\n", "seg_shape", "[", "seg_rgb", "==", "11", "]", "=", "1", "# hair to skin", "\n", "seg_shape", "[", "seg_rgb", "==", "2", "]", "=", "1", "# l_brow to skin", "\n", "seg_shape", "[", "seg_rgb", "==", "3", "]", "=", "1", "# r_brow to skin", "\n", "seg_shape", "[", "seg_rgb", "==", "4", "]", "=", "1", "# eye_g to skin", "\n", "seg_shape", "[", "seg_rgb", "==", "5", "]", "=", "2", "# l_eye", "\n", "seg_shape", "[", "seg_rgb", "==", "6", "]", "=", "3", "# r_eye", "\n", "seg_shape", "[", "seg_rgb", "==", "7", "]", "=", "4", "# nose", "\n", "seg_shape", "[", "seg_rgb", "==", "8", "]", "=", "0", "# mouth", "\n", "seg_shape", "[", "seg_rgb", "==", "9", "]", "=", "5", "# u_lip", "\n", "seg_shape", "[", "seg_rgb", "==", "10", "]", "=", "6", "# l_lip", "\n", "\n", "", "return", "seg_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.valid_seg_rgb": [[51, 75], ["torch.no_grad", "torch.no_grad", "seg_rgb.squeeze.squeeze", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "valid_seg_rgb", "(", "seg_rgb", ")", ":", "\n", "# seg_rgb: output of data fetcher, Bx1xHxW", "\n", "# set border", "\n", "    ", "seg_rgb", "[", ":", ",", ":", ",", "0", ":", "2", ",", ":", "]", "=", "0", "\n", "seg_rgb", "[", ":", ",", ":", ",", "-", "2", ":", ",", ":", "]", "=", "0", "\n", "seg_rgb", "[", ":", ",", ":", ",", ":", ",", "0", ":", "2", "]", "=", "0", "\n", "seg_rgb", "[", ":", ",", ":", ",", ":", ",", "-", "2", ":", "]", "=", "0", "\n", "\n", "# convert label", "\n", "seg_rgb", "=", "seg_rgb", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "seg_valid", "=", "torch", ".", "zeros_like", "(", "seg_rgb", ")", "\n", "seg_valid", "[", "seg_rgb", "==", "1", "]", "=", "1", "# skin", "\n", "seg_valid", "[", "seg_rgb", "==", "2", "]", "=", "1", "# l_brow to skin", "\n", "seg_valid", "[", "seg_rgb", "==", "3", "]", "=", "1", "# r_brow to skin", "\n", "seg_valid", "[", "seg_rgb", "==", "4", "]", "=", "0", "# eye_g to bg", "\n", "seg_valid", "[", "seg_rgb", "==", "5", "]", "=", "2", "# l_eye", "\n", "seg_valid", "[", "seg_rgb", "==", "6", "]", "=", "3", "# r_eye", "\n", "seg_valid", "[", "seg_rgb", "==", "7", "]", "=", "4", "# nose", "\n", "seg_valid", "[", "seg_rgb", "==", "8", "]", "=", "0", "# mouth", "\n", "seg_valid", "[", "seg_rgb", "==", "9", "]", "=", "5", "# u_lip", "\n", "seg_valid", "[", "seg_rgb", "==", "10", "]", "=", "6", "# u_lip", "\n", "seg_valid", "[", "seg_rgb", "==", "11", "]", "=", "0", "# hair to bg", "\n", "return", "seg_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.label2onehot": [[77, 81], ["torch.no_grad", "torch.no_grad", "torch.eye().to", "torch.eye().to", "onehot[].permute", "torch.eye", "torch.eye"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "label2onehot", "(", "label", ")", ":", "\n", "    ", "onehot", "=", "torch", ".", "eye", "(", "7", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "return", "onehot", "[", "label", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.get_face_mask": [[83, 88], ["torch.no_grad", "torch.no_grad", "mask.type.type"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_face_mask", "(", "label", ")", ":", "\n", "    ", "mask", "=", "(", "label", ">", "0", ")", "*", "(", "label", "<", "11", ")", "*", "(", "~", "(", "label", "==", "4", ")", ")", "*", "(", "~", "(", "label", "==", "8", ")", ")", "# when train sampler set comment label==8", "\n", "mask", "=", "mask", ".", "type", "(", "torch", ".", "float32", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_erode": [[90, 100], ["torch.pad", "F.pad.unfold", "patches.unfold.unfold", "patches.unfold.reshape().min", "patches.unfold.reshape"], "function", ["None"], ["", "def", "tensor_erode", "(", "bin_img", ",", "ksize", "=", "5", ")", ":", "\n", "# \u9996\u5148\u52a0\u5165 padding\uff0c\u9632\u6b62\u8150\u8680\u540e\u56fe\u50cf\u5c3a\u5bf8\u7f29\u5c0f", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "bin_img", ".", "shape", "\n", "pad", "=", "(", "ksize", "-", "1", ")", "//", "2", "\n", "bin_img", "=", "F", ".", "pad", "(", "bin_img", ",", "[", "pad", ",", "pad", ",", "pad", ",", "pad", "]", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "patches", "=", "bin_img", ".", "unfold", "(", "dimension", "=", "2", ",", "size", "=", "ksize", ",", "step", "=", "1", ")", "\n", "patches", "=", "patches", ".", "unfold", "(", "dimension", "=", "3", ",", "size", "=", "ksize", ",", "step", "=", "1", ")", "\n", "# B x C x H x W x k x k", "\n", "eroded", ",", "_", "=", "patches", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ",", "-", "1", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "return", "eroded", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_dilate": [[102, 112], ["torch.pad", "F.pad.unfold", "patches.unfold.unfold", "patches.unfold.reshape().max", "patches.unfold.reshape"], "function", ["None"], ["", "def", "tensor_dilate", "(", "bin_img", ",", "ksize", "=", "5", ")", ":", "\n", "# \u9996\u5148\u52a0\u5165 padding\uff0c\u9632\u6b62\u8150\u8680\u540e\u56fe\u50cf\u5c3a\u5bf8\u7f29\u5c0f", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "bin_img", ".", "shape", "\n", "pad", "=", "(", "ksize", "-", "1", ")", "//", "2", "\n", "bin_img", "=", "F", ".", "pad", "(", "bin_img", ",", "[", "pad", ",", "pad", ",", "pad", ",", "pad", "]", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "patches", "=", "bin_img", ".", "unfold", "(", "dimension", "=", "2", ",", "size", "=", "ksize", ",", "step", "=", "1", ")", "\n", "patches", "=", "patches", ".", "unfold", "(", "dimension", "=", "3", ",", "size", "=", "ksize", ",", "step", "=", "1", ")", "\n", "# B x C x H x W x k x k", "\n", "eroded", ",", "_", "=", "patches", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ",", "-", "1", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "return", "eroded", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_close": [[114, 118], ["seg_util.tensor_dilate", "seg_util.tensor_erode"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_dilate", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.seg_util.tensor_erode"], ["", "def", "tensor_close", "(", "bin_img", ",", "ksize", "=", "3", ")", ":", "\n", "    ", "out", "=", "tensor_dilate", "(", "bin_img", ",", "ksize", ")", "\n", "out", "=", "tensor_erode", "(", "out", ",", "ksize", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.load_lm3d": [[10, 22], ["os.path.join", "scipy.io.loadmat", "numpy.stack", "numpy.array", "numpy.mean", "numpy.mean", "pathlib.Path"], "function", ["None"], ["def", "load_lm3d", "(", ")", ":", "\n", "    ", "pth", "=", "os", ".", "path", ".", "join", "(", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", ",", "'BFM/similarity_Lm3D_all.mat'", ")", "\n", "Lm3D", "=", "loadmat", "(", "pth", ")", "\n", "Lm3D", "=", "Lm3D", "[", "'lm'", "]", "\n", "\n", "# calculate 5 facial landmarks using 68 landmarks", "\n", "lm_idx", "=", "np", ".", "array", "(", "[", "31", ",", "37", ",", "40", ",", "43", ",", "46", ",", "49", ",", "55", "]", ")", "-", "1", "\n", "Lm3D", "=", "np", ".", "stack", "(", "[", "Lm3D", "[", "lm_idx", "[", "0", "]", ",", ":", "]", ",", "np", ".", "mean", "(", "Lm3D", "[", "lm_idx", "[", "[", "1", ",", "2", "]", "]", ",", ":", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "Lm3D", "[", "lm_idx", "[", "[", "3", ",", "4", "]", "]", ",", ":", "]", ",", "0", ")", ",", "\n", "Lm3D", "[", "lm_idx", "[", "5", "]", ",", ":", "]", ",", "Lm3D", "[", "lm_idx", "[", "6", "]", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "Lm3D", "=", "Lm3D", "[", "[", "1", ",", "2", ",", "0", ",", "3", ",", "4", "]", ",", ":", "]", "\n", "\n", "return", "Lm3D", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.POS": [[24, 51], ["numpy.zeros", "numpy.concatenate", "numpy.reshape", "numpy.linalg.lstsq", "numpy.stack", "numpy.stack", "numpy.array", "numpy.ones", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "POS", "(", "xp", ",", "x", ")", ":", "\n", "    ", "npts", "=", "xp", ".", "shape", "[", "0", "]", "\n", "if", "npts", "==", "68", ":", "\n", "        ", "lm_idx", "=", "np", ".", "array", "(", "[", "31", ",", "37", ",", "40", ",", "43", ",", "46", ",", "49", ",", "55", "]", ")", "-", "1", "\n", "xp", "=", "np", ".", "stack", "(", "[", "xp", "[", "lm_idx", "[", "0", "]", ",", ":", "]", ",", "np", ".", "mean", "(", "xp", "[", "lm_idx", "[", "[", "1", ",", "2", "]", "]", ",", ":", "]", ",", "0", ")", ",", "np", ".", "mean", "(", "xp", "[", "lm_idx", "[", "[", "3", ",", "4", "]", "]", ",", ":", "]", ",", "0", ")", ",", "\n", "xp", "[", "lm_idx", "[", "5", "]", ",", ":", "]", ",", "xp", "[", "lm_idx", "[", "6", "]", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "xp", "=", "xp", "[", "[", "1", ",", "2", ",", "0", ",", "3", ",", "4", "]", ",", ":", "]", "\n", "npts", "=", "5", "\n", "\n", "", "A", "=", "np", ".", "zeros", "(", "[", "2", "*", "npts", ",", "8", "]", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "x", ",", "np", ".", "ones", "(", "(", "npts", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "A", "[", "0", ":", "2", "*", "npts", "-", "1", ":", "2", ",", "0", ":", "4", "]", "=", "x", "\n", "\n", "A", "[", "1", ":", "2", "*", "npts", ":", "2", ",", "4", ":", "]", "=", "x", "\n", "\n", "b", "=", "np", ".", "reshape", "(", "xp", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "k", ",", "_", ",", "_", ",", "_", "=", "np", ".", "linalg", ".", "lstsq", "(", "A", ",", "b", ",", "rcond", "=", "None", ")", "\n", "\n", "R1", "=", "k", "[", "0", ":", "3", "]", "\n", "R2", "=", "k", "[", "4", ":", "7", "]", "\n", "sTx", "=", "k", "[", "3", "]", "\n", "sTy", "=", "k", "[", "7", "]", "\n", "s", "=", "(", "np", ".", "linalg", ".", "norm", "(", "R1", ")", "+", "np", ".", "linalg", ".", "norm", "(", "R2", ")", ")", "/", "2", "\n", "t", "=", "np", ".", "stack", "(", "[", "sTx", ",", "sTy", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "t", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.get_inverse_mat": [[53, 64], ["numpy.stack", "microsoft_align.POS", "numpy.array().astype", "numpy.array"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.POS"], ["", "def", "get_inverse_mat", "(", "lm", ",", "src_sz", "=", "1024", ",", "microsoft_sz", "=", "224", ")", ":", "\n", "    ", "lm_", "=", "np", ".", "stack", "(", "[", "lm", "[", ":", ",", "0", "]", ",", "src_sz", "-", "1", "-", "lm", "[", ":", ",", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "t", ",", "s", "=", "POS", "(", "lm_", ",", "lm3D", ")", "\n", "scale", "=", "102.", "/", "s", "\n", "dx", "=", "-", "(", "t", "[", "0", ",", "0", "]", "*", "scale", "-", "microsoft_sz", "/", "2", ")", "\n", "dy", "=", "-", "(", "(", "src_sz", "-", "t", "[", "1", ",", "0", "]", ")", "*", "scale", "-", "microsoft_sz", "/", "2", ")", "\n", "mat_inverse", "=", "np", ".", "array", "(", "[", "[", "1", "/", "scale", ",", "0", ",", "0", ",", "-", "dx", "/", "scale", "]", ",", "\n", "[", "0", ",", "1", "/", "scale", ",", "0", ",", "-", "dy", "/", "scale", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "/", "scale", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "mat_inverse", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.get_inverse_mat_256": [[66, 75], ["numpy.stack", "microsoft_align.POS", "numpy.array().astype", "numpy.array"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.microsoft_align.POS"], ["", "def", "get_inverse_mat_256", "(", "lm", ",", "src_sz", "=", "1024", ",", "mic_sz", "=", "256", ")", ":", "\n", "    ", "lm_", "=", "np", ".", "stack", "(", "[", "lm", "[", ":", ",", "0", "]", ",", "src_sz", "-", "1", "-", "lm", "[", ":", ",", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "t", ",", "s", "=", "POS", "(", "lm_", ",", "lm3D", ")", "\n", "scale", "=", "116.", "/", "s", "\n", "dx", "=", "-", "(", "t", "[", "0", ",", "0", "]", "*", "scale", "-", "mic_sz", "/", "2", ")", "\n", "dy", "=", "-", "(", "(", "src_sz", "-", "t", "[", "1", ",", "0", "]", ")", "*", "scale", "-", "mic_sz", "/", "2", ")", "\n", "mat_inverse", "=", "np", ".", "array", "(", "[", "[", "1", "/", "scale", ",", "0", ",", "-", "dx", "/", "scale", "]", ",", "\n", "[", "0", ",", "1", "/", "scale", ",", "-", "dy", "/", "scale", "]", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "mat_inverse", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.logger.setup_logger": [[6, 14], ["logging.getLogger", "os.path.join", "logging.basicConfig", "os.path.exists", "os.mkdir", "time.strftime"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.cv.mkdir"], ["def", "setup_logger", "(", "logpth", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "logpth", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "logpth", ")", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logfile", "=", "'FaceRecon-{}.log'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M-%S'", ")", ")", "\n", "logfile", "=", "os", ".", "path", ".", "join", "(", "logpth", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(levelname)s: %(message)s'", ",", "level", "=", "logging", ".", "INFO", ",", "filename", "=", "logfile", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.light_position.light_direction": [[20, 33], ["numpy.random.rand", "torch.tensor().to", "torch.tensor().to", "torch.rand", "torch.tensor", "torch.tensor", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.sin"], "function", ["None"], ["def", "light_direction", "(", "random", "=", "0.5", ",", "device", "=", "'cpu'", ")", ":", "\n", "# theta: [0, pi] angle between the light direction and the positive direction of y axis", "\n", "# gamma: [0, pi] angle between the projection of the light on x-z plan and the positive direction of x axis", "\n", "    ", "angle_range", "=", "[", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "*", "3", "/", "4", "]", "\n", "rand_num", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "rand_num", "<", "random", ":", "\n", "        ", "theta", ",", "gamma", "=", "torch", ".", "rand", "(", "2", ")", "*", "(", "angle_range", "[", "1", "]", "-", "angle_range", "[", "0", "]", ")", "+", "angle_range", "[", "0", "]", "\n", "direction", "=", "torch", ".", "tensor", "(", "[", "[", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "cos", "(", "gamma", ")", ",", "\n", "torch", ".", "cos", "(", "theta", ")", ",", "\n", "-", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "sin", "(", "gamma", ")", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "direction", "=", "torch", ".", "tensor", "(", "[", "[", "0.0", ",", "0.0", ",", "-", "3.0", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "", "return", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.light_position.light_point": [[35, 46], ["numpy.random.rand", "light_position.light_direction", "numpy.random.uniform", "torch.tensor().to", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.utils.light_position.light_direction"], ["", "def", "light_point", "(", "random", "=", "0.5", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "rand_num", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "rand_num", "<", "random", ":", "\n", "        ", "direction", "=", "light_direction", "(", "random", "=", "True", ",", "device", "=", "device", ")", "\n", "dist", "=", "np", ".", "random", ".", "uniform", "(", "2", ",", "5", ")", "\n", "position", "=", "dist", "*", "direction", "\n", "", "else", ":", "\n", "        ", "position", "=", "torch", ".", "tensor", "(", "[", "[", "0.0", ",", "0.0", ",", "-", "10.0", "]", "]", ")", ".", "to", "(", "\n", "device", ")", "# if not random, set a far distance to simulate the parallel direction light", "\n", "\n", "", "return", "position", "\n", "", ""]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.__init__": [[8, 12], ["torch.nn.Module.__init__", "models.bfm.BfmExtend"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "facemodel", "=", "BfmExtend", "(", ")", "\n", "self", ".", "keypoints", "=", "self", ".", "facemodel", ".", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.Split_coeff": [[13, 21], ["None"], "methods", ["None"], ["", "def", "Split_coeff", "(", "self", ",", "coeff", ")", ":", "\n", "        ", "shp_coeff", "=", "coeff", "[", ":", ",", ":", "144", "]", "# id_coeff :80, ex_coeff 80:144", "\n", "tex_coeff", "=", "coeff", "[", ":", ",", "144", ":", "224", "]", "\n", "angles", "=", "coeff", "[", ":", ",", "224", ":", "227", "]", "\n", "gamma", "=", "coeff", "[", ":", ",", "227", ":", "254", "]", "\n", "translation", "=", "coeff", "[", ":", ",", "254", ":", "257", "]", "\n", "\n", "return", "shp_coeff", ",", "tex_coeff", ",", "angles", ",", "translation", ",", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.Compute_rotation_matrix": [[22, 42], ["torch.zeros().to", "torch.transpose", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.zeros"], "methods", ["None"], ["", "def", "Compute_rotation_matrix", "(", "self", ",", "angles", ")", ":", "\n", "        ", "N", "=", "angles", ".", "shape", "[", "0", "]", "\n", "device", "=", "angles", ".", "device", "\n", "x", "=", "angles", "[", ":", ",", "0", "]", "\n", "y", "=", "angles", "[", ":", ",", "1", "]", "\n", "z", "=", "angles", "[", ":", ",", "2", "]", "\n", "cx", ",", "cy", ",", "cz", "=", "torch", ".", "cos", "(", "x", ")", ",", "torch", ".", "cos", "(", "y", ")", ",", "torch", ".", "cos", "(", "z", ")", "\n", "sx", ",", "sy", ",", "sz", "=", "torch", ".", "sin", "(", "x", ")", ",", "torch", ".", "sin", "(", "y", ")", ",", "torch", ".", "sin", "(", "z", ")", "\n", "rotation", "=", "torch", ".", "zeros", "(", "N", ",", "3", ",", "3", ")", ".", "to", "(", "device", ")", "\n", "rotation", "[", ":", ",", "0", ",", "0", "]", "=", "cz", "*", "cy", "\n", "rotation", "[", ":", ",", "0", ",", "1", "]", "=", "sx", "*", "sy", "*", "cz", "-", "cx", "*", "sz", "\n", "rotation", "[", ":", ",", "0", ",", "2", "]", "=", "cx", "*", "sy", "*", "cz", "+", "sx", "*", "sz", "\n", "rotation", "[", ":", ",", "1", ",", "0", "]", "=", "cy", "*", "sz", "\n", "rotation", "[", ":", ",", "1", ",", "1", "]", "=", "sx", "*", "sy", "*", "sz", "+", "cx", "*", "cz", "\n", "rotation", "[", ":", ",", "1", ",", "2", "]", "=", "cx", "*", "sy", "*", "sz", "-", "sx", "*", "cz", "\n", "rotation", "[", ":", ",", "2", ",", "0", "]", "=", "-", "sy", "\n", "rotation", "[", ":", ",", "2", ",", "1", "]", "=", "sx", "*", "cy", "\n", "rotation", "[", ":", ",", "2", ",", "2", "]", "=", "cx", "*", "cy", "\n", "rotation", "=", "torch", ".", "transpose", "(", "rotation", ",", "1", ",", "2", ")", "\n", "return", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.Rigid_transform_block": [[43, 47], ["torch.bmm", "translation.unsqueeze"], "methods", ["None"], ["", "def", "Rigid_transform_block", "(", "self", ",", "face_shape", ",", "rotation", ",", "translation", ")", ":", "\n", "        ", "face_shape_r", "=", "torch", ".", "bmm", "(", "face_shape", ",", "rotation", ")", "\n", "face_shape_t", "=", "face_shape_r", "+", "translation", ".", "unsqueeze", "(", "1", ")", "\n", "return", "face_shape_t", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.Orthogonal_projection_block": [[48, 55], ["torch.ones_like"], "methods", ["None"], ["", "def", "Orthogonal_projection_block", "(", "self", ",", "face_shape", ",", "focal", "=", "1015.0", ")", ":", "\n", "# the reconstructed coordinates are from -112 to 112", "\n", "        ", "div", "=", "torch", ".", "ones_like", "(", "face_shape", ")", "# *10", "\n", "div", "[", ":", ",", ":", ",", "0", "]", "=", "10", "-", "face_shape", "[", ":", ",", ":", ",", "2", "]", "\n", "div", "[", ":", ",", ":", ",", "1", "]", "=", "10", "-", "face_shape", "[", ":", ",", ":", ",", "2", "]", "\n", "div", "[", ":", ",", ":", ",", "2", "]", "=", "10", "\n", "return", "face_shape", "*", "focal", "/", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.forward": [[56, 87], ["face_decoder_256.Face3D.Split_coeff", "face_decoder_256.Face3D.facemodel", "face_decoder_256.Face3D.Compute_rotation_matrix", "face_decoder_256.Face3D.Rigid_transform_block", "face_decoder_256.Face3D.Orthogonal_projection_block", "torch.Tensor().to().repeat", "torch.bmm", "torch.bmm", "torch.Tensor().to().repeat", "torch.bmm", "torch.cat", "torch.bmm.transpose", "torch.Tensor().to().repeat.transpose", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.ones_like", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Split_coeff", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Compute_rotation_matrix", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Rigid_transform_block", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder_256.Face3D.Orthogonal_projection_block"], ["", "def", "forward", "(", "self", ",", "coeff", ",", "mat_inverse", ",", "src_sz", "=", "256", ")", ":", "\n", "# mat_reverse = None", "\n", "        ", "shp_coeff", ",", "tex_coeff", ",", "angles", ",", "translation", ",", "gamma", "=", "self", ".", "Split_coeff", "(", "coeff", ")", "\n", "shape", ",", "tex", "=", "self", ".", "facemodel", "(", "shp_coeff", ",", "params_tex", "=", "tex_coeff", ")", "# tex_coeff", "\n", "rotation", "=", "self", ".", "Compute_rotation_matrix", "(", "angles", ")", "\n", "verts", "=", "self", ".", "Rigid_transform_block", "(", "shape", ",", "rotation", ",", "translation", ")", "\n", "verts", "=", "self", ".", "Orthogonal_projection_block", "(", "verts", ")", "\n", "# print(mat_reverse[:, 2])", "\n", "\n", "# to image coordinates", "\n", "bz", "=", "mat_inverse", ".", "shape", "[", "0", "]", "\n", "mat_img", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "112", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", ",", "112", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ".", "to", "(", "coeff", ".", "device", ")", ".", "repeat", "(", "bz", ",", "1", ",", "1", ")", "\n", "\n", "mat_inverse", "=", "torch", ".", "bmm", "(", "mat_inverse", ",", "mat_img", ")", "\n", "verts", "=", "torch", ".", "bmm", "(", "torch", ".", "cat", "(", "(", "verts", ",", "torch", ".", "ones_like", "(", "verts", ")", "[", ":", ",", ":", ",", "0", ":", "1", "]", ")", ",", "dim", "=", "2", ")", ",", "mat_inverse", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "keypoints", "=", "verts", "[", ":", ",", "self", ".", "keypoints", ",", ":", "2", "]", "\n", "# to NDC", "\n", "# mat_ndc = torch.Tensor([[1 / 128., 0, 0, -1],", "\n", "#                         [0, -1 / 128., 0, 255 / 128 - 1],", "\n", "#                         [0, 0, 1 / 128., 0]]).to(self.device).repeat(bz, 1, 1)", "\n", "\n", "mat_ndc", "=", "torch", ".", "Tensor", "(", "[", "[", "2", "/", "src_sz", ",", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "[", "0", ",", "-", "2", "/", "src_sz", ",", "0", ",", "1", "-", "2", "/", "src_sz", "]", ",", "\n", "[", "0", ",", "0", ",", "2", "/", "src_sz", ",", "0", "]", "]", ")", ".", "to", "(", "coeff", ".", "device", ")", ".", "repeat", "(", "bz", ",", "1", ",", "1", ")", "\n", "\n", "verts", "=", "torch", ".", "bmm", "(", "verts", ",", "mat_ndc", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "return", "verts", ",", "tex", ",", "gamma", ",", "keypoints", "# verts*1.2 for figure1", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.BasicBlock.__init__": [[34, 51], ["torch.Module.__init__", "resnet50_microsoft.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet50_microsoft.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.BasicBlock.forward": [[52, 69], ["resnet50_microsoft.BasicBlock.conv1", "resnet50_microsoft.BasicBlock.bn1", "resnet50_microsoft.BasicBlock.relu", "resnet50_microsoft.BasicBlock.conv2", "resnet50_microsoft.BasicBlock.bn2", "resnet50_microsoft.BasicBlock.relu", "resnet50_microsoft.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.Bottleneck.__init__": [[74, 90], ["torch.Module.__init__", "resnet50_microsoft.conv1x1", "norm_layer", "resnet50_microsoft.conv3x3", "norm_layer", "resnet50_microsoft.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.Bottleneck.forward": [[91, 112], ["resnet50_microsoft.Bottleneck.conv1", "resnet50_microsoft.Bottleneck.bn1", "resnet50_microsoft.Bottleneck.relu", "resnet50_microsoft.Bottleneck.conv2", "resnet50_microsoft.Bottleneck.bn2", "resnet50_microsoft.Bottleneck.relu", "resnet50_microsoft.Bottleneck.conv3", "resnet50_microsoft.Bottleneck.bn3", "resnet50_microsoft.Bottleneck.relu", "resnet50_microsoft.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.ResNet.__init__": [[116, 166], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet50_microsoft.ResNet._make_layer", "resnet50_microsoft.ResNet._make_layer", "resnet50_microsoft.ResNet._make_layer", "resnet50_microsoft.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet50_microsoft.ResNet.modules", "len", "ValueError", "isinstance", "resnet50_microsoft.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.ResNet._make_layer": [[167, 190], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet50_microsoft.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.ResNet.forward": [[191, 204], ["resnet50_microsoft.ResNet.conv1", "resnet50_microsoft.ResNet.bn1", "resnet50_microsoft.ResNet.relu", "resnet50_microsoft.ResNet.maxpool", "resnet50_microsoft.ResNet.layer1", "resnet50_microsoft.ResNet.layer2", "resnet50_microsoft.ResNet.layer3", "resnet50_microsoft.ResNet.layer4", "resnet50_microsoft.ResNet.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.ReconNetWrapper.__init__": [[233, 252], ["torch.Module.__init__", "func", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "resnet50_microsoft.conv1x1", "resnet50_microsoft.conv1x1", "resnet50_microsoft.conv1x1", "resnet50_microsoft.conv1x1", "resnet50_microsoft.conv1x1", "resnet50_microsoft.conv1x1", "resnet50_microsoft.conv1x1"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ReconNetWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "func", "=", "resnet50", "\n", "last_dim", "=", "2048", "\n", "backbone", "=", "func", "(", "num_classes", "=", "self", ".", "fc_dim", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "\n", "self", ".", "final_layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv1x1", "(", "last_dim", ",", "80", ",", "bias", "=", "True", ")", ",", "# id layer", "\n", "conv1x1", "(", "last_dim", ",", "64", ",", "bias", "=", "True", ")", ",", "# exp layer", "\n", "conv1x1", "(", "last_dim", ",", "80", ",", "bias", "=", "True", ")", ",", "# tex layer", "\n", "conv1x1", "(", "last_dim", ",", "3", ",", "bias", "=", "True", ")", ",", "# angle layer", "\n", "conv1x1", "(", "last_dim", ",", "27", ",", "bias", "=", "True", ")", ",", "# gamma layer", "\n", "conv1x1", "(", "last_dim", ",", "2", ",", "bias", "=", "True", ")", ",", "# tx, ty", "\n", "conv1x1", "(", "last_dim", ",", "1", ",", "bias", "=", "True", ")", "# tz", "\n", "]", ")", "\n", "for", "m", "in", "self", ".", "final_layers", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.ReconNetWrapper.forward": [[253, 260], ["resnet50_microsoft.ReconNetWrapper.backbone", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "output.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "output", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "final_layers", ":", "\n", "            ", "output", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "x", "=", "torch", ".", "flatten", "(", "torch", ".", "cat", "(", "output", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.conv1x1": [[26, 29], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft._resnet": [[206, 216], ["resnet50_microsoft.ResNet", "torch.load_url", "ResNet.state_dict", "modelzoo.load_url.items", "ResNet.load_state_dict", "model.state_dict.update"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "modelzoo", ".", "load_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "True", ")", "\n", "self_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'fc'", "in", "k", ":", "continue", "\n", "self_state_dict", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "model", ".", "load_state_dict", "(", "self_state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50_microsoft.resnet50": [[218, 228], ["resnet50_microsoft._resnet"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.bfm.BfmExtend.__init__": [[10, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "bfm.BfmExtend.load_weight"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.bfm.BfmExtend.load_weight"], ["    ", "def", "__init__", "(", "self", ",", "n_shp", "=", "80", ",", "n_exp", "=", "64", ",", "n_tex", "=", "80", ")", ":", "\n", "        ", "super", "(", "BfmExtend", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "nn", ".", "Linear", "(", "n_shp", "+", "n_exp", ",", "107127", ")", "\n", "self", ".", "tex", "=", "nn", ".", "Linear", "(", "n_tex", ",", "107127", ")", "\n", "self", ".", "load_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.bfm.BfmExtend.load_weight": [[16, 46], ["pathlib.Path().parent.parent.absolute", "os.path.join", "scipy.io.loadmat", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze.view().mean().view", "torch.from_numpy().squeeze.view().mean().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.cat().type", "torch.cat().type", "torch.cat().type", "torch.cat().type", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "torch.from_numpy().type().unsqueeze", "scipy.io.loadmat.BfmExtend.register_buffer", "scipy.io.loadmat.BfmExtend.register_buffer", "scipy.io.loadmat.BfmExtend.register_buffer", "scipy.io.loadmat.BfmExtend.register_buffer", "scipy.io.loadmat.BfmExtend.register_buffer", "scipy.io.loadmat.BfmExtend.register_buffer", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().squeeze.view().mean", "torch.from_numpy().squeeze.view().mean", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "[].astype", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pathlib.Path", "torch.from_numpy().squeeze.view", "torch.from_numpy().squeeze.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "load_weight", "(", "self", ")", ":", "\n", "        ", "pth", "=", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", ".", "absolute", "(", ")", "\n", "weight_pth", "=", "os", ".", "path", ".", "join", "(", "pth", ",", "'BFM/BFM_model_front3.mat'", ")", "\n", "bfm", "=", "loadmat", "(", "weight_pth", ")", "\n", "meanshape", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'meanshape'", "]", ")", ".", "squeeze", "(", ")", "\n", "mean_ctr", "=", "meanshape", ".", "view", "(", "-", "1", ",", "3", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "view", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "idBase", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'idBase'", "]", ")", "\n", "exBase", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'exBase'", "]", ")", "\n", "meantex", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'meantex'", "]", ")", ".", "squeeze", "(", ")", "/", "255.", "\n", "texBase", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'texBase'", "]", ")", "/", "255.", "\n", "tri", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'tri'", "]", ")", ".", "type", "(", "torch", ".", "long", ")", "-", "1", "\n", "tri", "=", "torch", ".", "mm", "(", "tri", ",", "torch", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ")", "\n", "\n", "uv", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'uv'", "]", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "keypoints", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'keypoints'", "]", "[", "0", "]", ".", "astype", "(", "'int64'", ")", ")", "-", "1", "\n", "w", "=", "torch", ".", "cat", "(", "(", "idBase", ",", "exBase", ")", ",", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "skin_mask", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'skinmask'", "]", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "front_mask", "=", "torch", ".", "from_numpy", "(", "bfm", "[", "'frontmask'", "]", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "self", ".", "shape", ".", "weight", ".", "data", "=", "w", "\n", "self", ".", "shape", ".", "bias", ".", "data", "=", "meanshape", "\n", "self", ".", "tex", ".", "weight", ".", "data", "=", "texBase", "\n", "self", ".", "tex", ".", "bias", ".", "data", "=", "meantex", "\n", "self", ".", "register_buffer", "(", "'tri'", ",", "tri", ")", "\n", "self", ".", "register_buffer", "(", "'uv'", ",", "uv", ")", "\n", "self", ".", "register_buffer", "(", "'mean_ctr'", ",", "mean_ctr", ")", "\n", "self", ".", "register_buffer", "(", "'keypoints'", ",", "keypoints", ")", "\n", "self", ".", "register_buffer", "(", "'skin_mask'", ",", "skin_mask", ")", "\n", "self", ".", "register_buffer", "(", "'front_mask'", ",", "front_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.bfm.BfmExtend.forward": [[47, 55], ["bfm.BfmExtend.shape", "bfm.BfmExtend.tex", "shape.view.view.view", "tex.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "params_shp", ",", "params_tex", ")", ":", "\n", "        ", "shape", "=", "self", ".", "shape", "(", "params_shp", ")", "\n", "tex", "=", "self", ".", "tex", "(", "params_tex", ")", "\n", "bz", "=", "params_shp", ".", "shape", "[", "0", "]", "\n", "shape", "=", "shape", ".", "view", "(", "bz", ",", "-", "1", ",", "3", ")", "\n", "tex", "=", "tex", ".", "view", "(", "bz", ",", "-", "1", ",", "3", ")", "\n", "shape", "=", "shape", "-", "self", ".", "mean_ctr", "\n", "return", "shape", ",", "tex", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ResidualBlock.__init__": [[15, 24], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ResidualBlock.forward": [[25, 27], ["math.sqrt", "networks_inpaint.ResidualBlock.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "x", "+", "self", ".", "main", "(", "x", ")", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ConvUp.__init__": [[30, 34], ["torch.nn.Module.__init__", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ConvUp.forward": [[35, 42], ["networks_inpaint.ConvUp.conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "size", "is", "None", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "self", ".", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.Conv2d.__init__": [[45, 49], ["torch.nn.Module.__init__", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.Conv2d.forward": [[50, 54], ["networks_inpaint.Conv2d.conv", "networks_inpaint.Conv2d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ConvPool.__init__": [[57, 63], ["torch.nn.Module.__init__", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "down", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "dim_in", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ConvPool.forward": [[64, 70], ["networks_inpaint.ConvPool.norm", "networks_inpaint.ConvPool.conv", "networks_inpaint.ConvPool.relu", "networks_inpaint.ConvPool.down"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "down", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.Discriminator.__init__": [[77, 97], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "int", "min", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.Conv2d", "torch.nn.Conv2d", "numpy.log2", "networks_inpaint.ConvPool", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "repeat_num", "=", "6", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "256", "\n", "max_conv_dim", "=", "512", "\n", "dim_in", "=", "2", "**", "14", "//", "img_size", "\n", "blocks", "=", "[", "]", "\n", "blocks", "+=", "[", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "3", ",", "dim_in", ",", "3", ",", "1", ",", "1", ")", ")", "]", "\n", "\n", "repeat_num", "=", "int", "(", "np", ".", "log2", "(", "img_size", ")", ")", "-", "2", "\n", "dim_out", "=", "dim_in", "\n", "for", "_", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "dim_out", "=", "min", "(", "dim_in", "*", "2", ",", "max_conv_dim", ")", "\n", "blocks", "+=", "[", "ConvPool", "(", "dim_in", ",", "dim_out", ")", "]", "\n", "dim_in", "=", "dim_out", "\n", "\n", "", "blocks", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "4", ",", "1", ",", "0", ")", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "dim_out", ",", "1", ",", "1", ",", "1", ",", "0", ")", ")", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.Discriminator.forward": [[98, 101], ["networks_inpaint.Discriminator.main", "networks_inpaint.Discriminator.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "h", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ResEncoder.__init__": [[108, 130], ["torch.nn.Module.__init__", "layers.append", "layers.append", "layers.append", "range", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "networks_inpaint.ResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", "=", "7", ",", "conv_dim", "=", "64", ",", "repeat_num", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "conv_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "conv_dim", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# Down-sampling layers.", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "*", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# Bottleneck layers.", "\n", "", "for", "i", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ")", ")", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ResEncoder.forward": [[131, 134], ["networks_inpaint.ResEncoder.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ResDecoder.__init__": [[137, 158], ["torch.nn.Module.__init__", "range", "range", "layers.append", "layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "layers.append", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "networks_inpaint.ResidualBlock", "networks_inpaint.ConvUp", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "repeat_num", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "# downsampling 2^2", "\n", "curr_dim", "=", "conv_dim", "*", "4", "\n", "# Bottleneck layers.", "\n", "for", "i", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ")", ")", "\n", "\n", "# Up-sampling layers.", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "# layers.append(nn.ConvTranspose2d(curr_dim, curr_dim // 2, kernel_size=4, stride=2, padding=1, bias=False))", "\n", "            ", "layers", ".", "append", "(", "ConvUp", "(", "curr_dim", ",", "curr_dim", "//", "2", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "//", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "3", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.ResDecoder.forward": [[159, 162], ["networks_inpaint.ResDecoder.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "out", "=", "self", ".", "main", "(", "h", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.Generator.__init__": [[166, 170], ["torch.nn.Module.__init__", "networks_inpaint.ResEncoder", "networks_inpaint.ResDecoder"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "ResEncoder", "(", ")", "\n", "self", ".", "decoder", "=", "ResDecoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.networks_inpaint.Generator.forward": [[171, 175], ["networks_inpaint.Generator.encoder", "networks_inpaint.Generator.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "uv_map", ")", ":", "\n", "        ", "code", "=", "self", ".", "encoder", "(", "uv_map", ")", "\n", "out", "=", "self", ".", "decoder", "(", "code", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.ConvBNReLU.__init__": [[8, 18], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "face_encoder_res50.ConvBNReLU.init_weight"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_chan", ",", "\n", "out_chan", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.ConvBNReLU.init_weight": [[19, 24], ["face_encoder_res50.ConvBNReLU.children", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.ConvBNReLU.forward": [[25, 29], ["face_encoder_res50.ConvBNReLU.conv", "torch.relu", "torch.relu", "face_encoder_res50.ConvBNReLU.bn"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.AttentionRefinementModule.__init__": [[32, 39], ["torch.nn.Module.__init__", "face_encoder_res50.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "face_encoder_res50.AttentionRefinementModule.init_weight"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "in_chan", ",", "out_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_atten", "=", "nn", ".", "Conv2d", "(", "out_chan", ",", "out_chan", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_atten", "=", "nn", ".", "BatchNorm2d", "(", "out_chan", ")", "\n", "self", ".", "sigmoid_atten", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.AttentionRefinementModule.init_weight": [[40, 45], ["face_encoder_res50.AttentionRefinementModule.children", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.AttentionRefinementModule.forward": [[46, 54], ["face_encoder_res50.AttentionRefinementModule.conv", "torch.avg_pool2d", "torch.avg_pool2d", "face_encoder_res50.AttentionRefinementModule.conv_atten", "face_encoder_res50.AttentionRefinementModule.bn_atten", "face_encoder_res50.AttentionRefinementModule.sigmoid_atten", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "face_encoder_res50.AttentionRefinementModule.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "conv", "(", "x", ")", "\n", "atten", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "feat", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "atten", "=", "self", ".", "conv_atten", "(", "atten", ")", "\n", "atten", "=", "self", ".", "bn_atten", "(", "atten", ")", "\n", "atten", "=", "self", ".", "sigmoid_atten", "(", "atten", ")", "\n", "out", "=", "torch", ".", "mul", "(", "feat", ",", "atten", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FeatureFusionModule.__init__": [[57, 74], ["torch.nn.Module.__init__", "face_encoder_res50.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "face_encoder_res50.FeatureFusionModule.init_weight"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "out_chan", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convblk", "=", "ConvBNReLU", "(", "in_chan", ",", "out_chan", ",", "ks", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "out_chan", ",", "\n", "out_chan", "//", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_chan", "//", "4", ",", "out_chan", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FeatureFusionModule.init_weight": [[75, 80], ["face_encoder_res50.FeatureFusionModule.children", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FeatureFusionModule.forward": [[81, 92], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "face_encoder_res50.FeatureFusionModule.convblk", "torch.avg_pool2d", "torch.avg_pool2d", "face_encoder_res50.FeatureFusionModule.conv1", "face_encoder_res50.FeatureFusionModule.relu", "face_encoder_res50.FeatureFusionModule.conv2", "face_encoder_res50.FeatureFusionModule.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "face_encoder_res50.FeatureFusionModule.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "fsp", ",", "fcp", ")", ":", "\n", "        ", "fcat", "=", "torch", ".", "cat", "(", "[", "fsp", ",", "fcp", "]", ",", "dim", "=", "1", ")", "\n", "feat", "=", "self", ".", "convblk", "(", "fcat", ")", "\n", "atten", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "feat", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "atten", "=", "self", ".", "conv1", "(", "atten", ")", "\n", "atten", "=", "self", ".", "relu", "(", "atten", ")", "\n", "atten", "=", "self", ".", "conv2", "(", "atten", ")", "\n", "atten", "=", "self", ".", "sigmoid", "(", "atten", ")", "\n", "feat_atten", "=", "torch", ".", "mul", "(", "feat", ",", "atten", ")", "\n", "feat_out", "=", "feat_atten", "+", "feat", "\n", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.ContextPath.__init__": [[95, 103], ["torch.nn.Module.__init__", "face_encoder_res50.AttentionRefinementModule", "face_encoder_res50.AttentionRefinementModule", "face_encoder_res50.ConvBNReLU", "face_encoder_res50.ConvBNReLU", "face_encoder_res50.ConvBNReLU", "face_encoder_res50.ContextPath.init_weight"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arm8", "=", "AttentionRefinementModule", "(", "512", ",", "256", ")", "\n", "self", ".", "arm16", "=", "AttentionRefinementModule", "(", "1024", ",", "256", ")", "\n", "self", ".", "conv_head8", "=", "ConvBNReLU", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_head16", "=", "ConvBNReLU", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_avg", "=", "ConvBNReLU", "(", "1024", ",", "256", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.ContextPath.init_weight": [[104, 109], ["face_encoder_res50.ContextPath.children", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.ContextPath.forward": [[110, 130], ["torch.avg_pool2d", "torch.avg_pool2d", "face_encoder_res50.ContextPath.conv_avg", "torch.interpolate", "torch.interpolate", "face_encoder_res50.ContextPath.arm16", "torch.interpolate", "torch.interpolate", "face_encoder_res50.ContextPath.conv_head16", "face_encoder_res50.ContextPath.arm8", "torch.interpolate", "torch.interpolate", "face_encoder_res50.ContextPath.conv_head8", "feat16.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feat4", ",", "feat8", ",", "feat16", ")", ":", "\n", "        ", "H4", ",", "W4", "=", "feat4", ".", "shape", "[", "2", ":", "]", "\n", "H8", ",", "W8", "=", "feat8", ".", "shape", "[", "2", ":", "]", "\n", "H16", ",", "W16", "=", "feat16", ".", "shape", "[", "2", ":", "]", "\n", "\n", "avg", "=", "F", ".", "avg_pool2d", "(", "feat16", ",", "feat16", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "avg", "=", "self", ".", "conv_avg", "(", "avg", ")", "\n", "avg_up", "=", "F", ".", "interpolate", "(", "avg", ",", "(", "H16", ",", "W16", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "feat16_arm", "=", "self", ".", "arm16", "(", "feat16", ")", "\n", "feat16_sum", "=", "feat16_arm", "+", "avg_up", "\n", "feat16_up", "=", "F", ".", "interpolate", "(", "feat16_sum", ",", "(", "H8", ",", "W8", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat16_up", "=", "self", ".", "conv_head16", "(", "feat16_up", ")", "\n", "\n", "feat8_arm", "=", "self", ".", "arm8", "(", "feat8", ")", "\n", "feat8_sum", "=", "feat8_arm", "+", "feat16_up", "\n", "feat8_up", "=", "F", ".", "interpolate", "(", "feat8_sum", ",", "(", "H4", ",", "W4", ")", ",", "mode", "=", "'nearest'", ")", "\n", "feat8_up", "=", "self", ".", "conv_head8", "(", "feat8_up", ")", "\n", "\n", "return", "feat4", ",", "feat8_up", ",", "feat16_up", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.BiSeNetOutPut.__init__": [[133, 138], ["torch.nn.Module.__init__", "face_encoder_res50.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "face_encoder_res50.BiSeNetOutPut.init_weight"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "mid_chan", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "in_chan", ",", "mid_chan", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "mid_chan", ",", "n_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.BiSeNetOutPut.init_weight": [[139, 144], ["face_encoder_res50.BiSeNetOutPut.children", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.BiSeNetOutPut.forward": [[145, 149], ["face_encoder_res50.BiSeNetOutPut.conv", "face_encoder_res50.BiSeNetOutPut.conv_out"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.__init__": [[152, 162], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "face_encoder_res50.GatedConv2d.init_weight", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_chan", ",", "mid_chan", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ConvMask", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chan", ",", "mid_chan", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_chan", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_chan", ",", "in_chan", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.init_weight": [[163, 168], ["face_encoder_res50.GatedConv2d.children", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "ly", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "ly", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "ly", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "ly", ".", "bias", "is", "None", ":", "nn", ".", "init", ".", "constant_", "(", "ly", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.GatedConv2d.forward": [[169, 173], ["face_encoder_res50.GatedConv2d.ConvMask"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "mask", "=", "self", ".", "ConvMask", "(", "feat", ")", "\n", "out", "=", "feat", "*", "mask", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FaceEncoder.__init__": [[176, 188], ["torch.nn.Module.__init__", "models.resnet50.resnet50", "torch.nn.Conv2d", "torch.nn.Conv2d", "face_encoder_res50.ContextPath", "face_encoder_res50.FeatureFusionModule", "face_encoder_res50.BiSeNetOutPut", "face_encoder_res50.BiSeNetOutPut", "face_encoder_res50.BiSeNetOutPut", "face_encoder_res50.GatedConv2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "face_encoder_res50.FaceEncoder.weight_init"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.resnet50", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FaceEncoder.weight_init"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FaceEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "coeff", "=", "nn", ".", "Conv2d", "(", "2048", ",", "257", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "cp", "=", "ContextPath", "(", ")", "\n", "self", ".", "ffm", "=", "FeatureFusionModule", "(", "512", ",", "256", ")", "\n", "self", ".", "conv_out", "=", "BiSeNetOutPut", "(", "256", ",", "256", ",", "n_classes", "=", "1", ")", "\n", "self", ".", "conv_out8", "=", "BiSeNetOutPut", "(", "256", ",", "128", ",", "n_classes", "=", "1", ")", "\n", "self", ".", "conv_out16", "=", "BiSeNetOutPut", "(", "256", ",", "128", ",", "n_classes", "=", "1", ")", "\n", "self", ".", "gated", "=", "GatedConv2d", "(", "1024", ",", "512", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "weight_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FaceEncoder.weight_init": [[189, 193], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "face_encoder_res50.FaceEncoder.coeff.weight.zero_", "face_encoder_res50.FaceEncoder.coeff.bias.zero_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "weight_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "coeff", ".", "weight", ".", "zero_", "(", ")", "\n", "self", ".", "coeff", ".", "bias", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_encoder_res50.FaceEncoder.forward": [[194, 212], ["face_encoder_res50.FaceEncoder.feat", "face_encoder_res50.FaceEncoder.cp", "face_encoder_res50.FaceEncoder.ffm", "face_encoder_res50.FaceEncoder.conv_out", "face_encoder_res50.FaceEncoder.conv_out8", "face_encoder_res50.FaceEncoder.conv_out16", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "face_encoder_res50.FaceEncoder.gated", "face_encoder_res50.FaceEncoder.feat.layer4", "face_encoder_res50.FaceEncoder.avgpool", "face_encoder_res50.FaceEncoder.coeff", "face_encoder_res50.FaceEncoder.squeeze().squeeze", "face_encoder_res50.FaceEncoder.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "H", ",", "W", "=", "img", ".", "shape", "[", "2", ":", "]", "\n", "feat4", ",", "feat8", ",", "feat16", "=", "self", ".", "feat", "(", "img", ")", "# 1/4, 1/8. 1/16 of initial size", "\n", "feat_res4", ",", "feat_cp4", ",", "feat_cp8", "=", "self", ".", "cp", "(", "feat4", ",", "feat8", ",", "feat16", ")", "\n", "feat_sp", "=", "feat_res4", "\n", "\n", "feat_fuse", "=", "self", ".", "ffm", "(", "feat_sp", ",", "feat_cp4", ")", "\n", "feat_out", "=", "self", ".", "conv_out", "(", "feat_fuse", ")", "\n", "feat_out8", "=", "self", ".", "conv_out8", "(", "feat_cp4", ")", "\n", "feat_out16", "=", "self", ".", "conv_out16", "(", "feat_cp8", ")", "\n", "feat_out", "=", "F", ".", "interpolate", "(", "feat_out", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat_out8", "=", "F", ".", "interpolate", "(", "feat_out8", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat_out16", "=", "F", ".", "interpolate", "(", "feat_out16", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "feat16", "=", "self", ".", "gated", "(", "feat16", ")", "\n", "feat", "=", "self", ".", "feat", ".", "layer4", "(", "feat16", ")", "\n", "feat", "=", "self", ".", "avgpool", "(", "feat", ")", "\n", "coeff", "=", "self", ".", "coeff", "(", "feat", ")", "\n", "return", "coeff", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", ",", "feat_out", ",", "feat_out8", ",", "feat_out16", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.BasicBlock.__init__": [[34, 51], ["torch.Module.__init__", "resnet50.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet50.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.BasicBlock.forward": [[52, 69], ["resnet50.BasicBlock.conv1", "resnet50.BasicBlock.bn1", "resnet50.BasicBlock.relu", "resnet50.BasicBlock.conv2", "resnet50.BasicBlock.bn2", "resnet50.BasicBlock.relu", "resnet50.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.Bottleneck.__init__": [[74, 90], ["torch.Module.__init__", "resnet50.conv1x1", "norm_layer", "resnet50.conv3x3", "norm_layer", "resnet50.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.Bottleneck.forward": [[91, 112], ["resnet50.Bottleneck.conv1", "resnet50.Bottleneck.bn1", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv2", "resnet50.Bottleneck.bn2", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv3", "resnet50.Bottleneck.bn3", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet.__init__": [[116, 166], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet50.ResNet.modules", "len", "ValueError", "isinstance", "resnet50.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet._make_layer": [[167, 190], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet50.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.ResNet.forward": [[191, 204], ["resnet50.ResNet.conv1", "resnet50.ResNet.bn1", "resnet50.ResNet.relu", "resnet50.ResNet.maxpool", "resnet50.ResNet.layer1", "resnet50.ResNet.layer2", "resnet50.ResNet.layer3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# 128 64", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "# 64 256 64", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "# 64 256", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "# 32 512", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "# 16 1024", "\n", "#x = self.layer4(x3)  # 8 2048", "\n", "\n", "#x = self.avgpool(x) # 1 2048", "\n", "return", "x1", ",", "x2", ",", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.conv1x1": [[26, 29], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50._resnet": [[206, 216], ["resnet50.ResNet", "torch.load_url", "ResNet.state_dict", "modelzoo.load_url.items", "ResNet.load_state_dict", "model.state_dict.update"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "modelzoo", ".", "load_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "True", ")", "\n", "self_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'fc'", "in", "k", ":", "continue", "\n", "self_state_dict", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "model", ".", "load_state_dict", "(", "self_state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50.resnet50": [[218, 228], ["resnet50._resnet"], "function", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.resnet50._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__": [[8, 13], ["torch.nn.Module.__init__", "models.bfm.BfmExtend().to", "models.bfm.BfmExtend"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "facemodel", "=", "BfmExtend", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "keypoints", "=", "self", ".", "facemodel", ".", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Split_coeff": [[14, 24], ["None"], "methods", ["None"], ["", "def", "Split_coeff", "(", "self", ",", "coeff", ")", ":", "\n", "# shp_coeff = coeff[:, :144]  # id_coeff :80, ex_coeff 80:144", "\n", "        ", "id_coeff", "=", "coeff", "[", ":", ",", ":", "80", "]", "\n", "ex_coeff", "=", "coeff", "[", ":", ",", "80", ":", "144", "]", "\n", "tex_coeff", "=", "coeff", "[", ":", ",", "144", ":", "224", "]", "\n", "angles", "=", "coeff", "[", ":", ",", "224", ":", "227", "]", "\n", "gamma", "=", "coeff", "[", ":", ",", "227", ":", "254", "]", "\n", "translation", "=", "coeff", "[", ":", ",", "254", ":", "257", "]", "\n", "\n", "return", "id_coeff", ",", "ex_coeff", ",", "tex_coeff", ",", "angles", ",", "translation", ",", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Compute_rotation_matrix": [[25, 45], ["torch.zeros().to", "torch.transpose", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.zeros"], "methods", ["None"], ["", "def", "Compute_rotation_matrix", "(", "self", ",", "angles", ")", ":", "\n", "        ", "N", "=", "angles", ".", "shape", "[", "0", "]", "\n", "device", "=", "angles", ".", "device", "\n", "x", "=", "angles", "[", ":", ",", "0", "]", "\n", "y", "=", "angles", "[", ":", ",", "1", "]", "\n", "z", "=", "angles", "[", ":", ",", "2", "]", "\n", "cx", ",", "cy", ",", "cz", "=", "torch", ".", "cos", "(", "x", ")", ",", "torch", ".", "cos", "(", "y", ")", ",", "torch", ".", "cos", "(", "z", ")", "\n", "sx", ",", "sy", ",", "sz", "=", "torch", ".", "sin", "(", "x", ")", ",", "torch", ".", "sin", "(", "y", ")", ",", "torch", ".", "sin", "(", "z", ")", "\n", "rotation", "=", "torch", ".", "zeros", "(", "N", ",", "3", ",", "3", ")", ".", "to", "(", "device", ")", "\n", "rotation", "[", ":", ",", "0", ",", "0", "]", "=", "cz", "*", "cy", "\n", "rotation", "[", ":", ",", "0", ",", "1", "]", "=", "sx", "*", "sy", "*", "cz", "-", "cx", "*", "sz", "\n", "rotation", "[", ":", ",", "0", ",", "2", "]", "=", "cx", "*", "sy", "*", "cz", "+", "sx", "*", "sz", "\n", "rotation", "[", ":", ",", "1", ",", "0", "]", "=", "cy", "*", "sz", "\n", "rotation", "[", ":", ",", "1", ",", "1", "]", "=", "sx", "*", "sy", "*", "sz", "+", "cx", "*", "cz", "\n", "rotation", "[", ":", ",", "1", ",", "2", "]", "=", "cx", "*", "sy", "*", "sz", "-", "sx", "*", "cz", "\n", "rotation", "[", ":", ",", "2", ",", "0", "]", "=", "-", "sy", "\n", "rotation", "[", ":", ",", "2", ",", "1", "]", "=", "sx", "*", "cy", "\n", "rotation", "[", ":", ",", "2", ",", "2", "]", "=", "cx", "*", "cy", "\n", "rotation", "=", "torch", ".", "transpose", "(", "rotation", ",", "1", ",", "2", ")", "\n", "return", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Rigid_transform_block": [[46, 50], ["torch.bmm", "translation.unsqueeze"], "methods", ["None"], ["", "def", "Rigid_transform_block", "(", "self", ",", "face_shape", ",", "rotation", ",", "translation", ")", ":", "\n", "        ", "face_shape_r", "=", "torch", ".", "bmm", "(", "face_shape", ",", "rotation", ")", "\n", "face_shape_t", "=", "face_shape_r", "+", "translation", ".", "unsqueeze", "(", "1", ")", "\n", "return", "face_shape_t", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Projection_block": [[52, 59], ["torch.ones_like"], "methods", ["None"], ["", "def", "Projection_block", "(", "self", ",", "face_shape", ",", "focal", "=", "1160.0", ")", ":", "\n", "# the reconstructed coordinates are from -128 to 128", "\n", "        ", "div", "=", "torch", ".", "ones_like", "(", "face_shape", ")", "# *10", "\n", "div", "[", ":", ",", ":", ",", "0", "]", "=", "10", "-", "face_shape", "[", ":", ",", ":", ",", "2", "]", "\n", "div", "[", ":", ",", ":", ",", "1", "]", "=", "10", "-", "face_shape", "[", ":", ",", ":", ",", "2", "]", "\n", "div", "[", ":", ",", ":", ",", "2", "]", "=", "10", "\n", "return", "face_shape", "*", "focal", "/", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.forward": [[60, 86], ["face_decoder.Face3D.Split_coeff", "torch.cat", "face_decoder.Face3D.facemodel", "face_decoder.Face3D.Compute_rotation_matrix", "face_decoder.Face3D.Rigid_transform_block", "face_decoder.Face3D.Projection_block", "torch.Tensor().to().repeat", "torch.bmm", "torch.tensor().to", "torch.tensor().to", "torch.Tensor().to().repeat.transpose", "torch.Tensor().to", "torch.tensor", "torch.tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Split_coeff", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Compute_rotation_matrix", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Rigid_transform_block", "home.repos.pwc.inspect_result.face3d0725_face_de_mask.models.face_decoder.Face3D.Projection_block"], ["", "def", "forward", "(", "self", ",", "coeff", ",", "size", "=", "256", ")", ":", "\n", "# mat_reverse = None", "\n", "        ", "id_coeff", ",", "ex_coeff", ",", "tex_coeff", ",", "angles", ",", "translation", ",", "gamma", "=", "self", ".", "Split_coeff", "(", "coeff", ")", "\n", "shp_coeff", "=", "torch", ".", "cat", "(", "(", "id_coeff", ",", "ex_coeff", ")", ",", "dim", "=", "1", ")", "\n", "shape", ",", "tex", "=", "self", ".", "facemodel", "(", "shp_coeff", ",", "tex_coeff", ")", "\n", "rotation", "=", "self", ".", "Compute_rotation_matrix", "(", "angles", ")", "\n", "verts", "=", "self", ".", "Rigid_transform_block", "(", "shape", ",", "rotation", ",", "translation", ")", "\n", "focal", "=", "1015", "/", "224", "*", "size", "\n", "verts", "=", "self", ".", "Projection_block", "(", "verts", ",", "focal", ")", "\n", "# print(mat_reverse[:, 2])", "\n", "\n", "# get keypoints under image coordinates", "\n", "half_sz", "=", "size", "/", "2", "\n", "bz", "=", "coeff", ".", "shape", "[", "0", "]", "\n", "keypoints", "=", "verts", "[", ":", ",", "self", ".", "keypoints", ",", ":", "2", "]", "\n", "keypoints", "=", "keypoints", "*", "torch", ".", "tensor", "(", "[", "[", "[", "1.", ",", "-", "1.", "]", "]", "]", ")", ".", "to", "(", "keypoints", ".", "device", ")", "\n", "keypoints", "=", "keypoints", "+", "torch", ".", "tensor", "(", "[", "[", "[", "half_sz", ",", "half_sz", "]", "]", "]", ")", ".", "to", "(", "keypoints", ".", "device", ")", "\n", "\n", "# to NDC", "\n", "\n", "mat_ndc", "=", "torch", ".", "Tensor", "(", "[", "[", "1", "/", "half_sz", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", "/", "half_sz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "/", "half_sz", "]", "]", ")", ".", "to", "(", "verts", ".", "device", ")", ".", "repeat", "(", "bz", ",", "1", ",", "1", ")", "\n", "\n", "verts", "=", "torch", ".", "bmm", "(", "verts", ",", "mat_ndc", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "verts", ",", "tex", ",", "id_coeff", ",", "ex_coeff", ",", "tex_coeff", ",", "gamma", ",", "keypoints", "\n", "\n"]]}