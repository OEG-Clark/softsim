{"home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp": [[4, 44], ["type", "print", "len", "mult_arr.multiply.getnnz", "type", "print", "mult_arr.multiply.multiply", "type", "print", "print", "type"], "function", ["None"], ["def", "supp", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    \n    A, B lists\n    \n    \n    Support measure for a term or rule.\n    If B is provided then returns the support for rule A -> B. Otherwise, the support of term A is returned.\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "if", "B", "==", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "selected_indices", "=", "[", "item_index_dict", "[", "a", "]", "for", "a", "in", "A", "]", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "            ", "print", "(", "\"Please provide valid items.\"", ")", "\n", "return", "None", "\n", "", "", "else", ":", "\n", "\n", "        ", "if", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "            ", "print", "(", "\"Please provide items as valid type (received {})\\nif tuple of single string,\\\n            then please pass a list\"", ".", "format", "(", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "try", ":", "\n", "            ", "selected_indices", "=", "[", "item_index_dict", "[", "ab", "]", "for", "ab", "in", "A", "+", "B", "]", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "            ", "print", "(", "\"Please provide valid items.\"", ")", "\n", "return", "None", "\n", "\n", "", "", "mult_arr", "=", "csc_occs", "[", ":", ",", "selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "mult_arr", "=", "mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "return", "mult_arr", ".", "getnnz", "(", ")", "/", "csc_occs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_neg": [[45, 55], ["type", "print", "ar_metrics.supp", "type"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp"], ["", "def", "supp_neg", "(", "A", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    returns Supp(!A) = 1-Supp(A)\n    \"\"\"", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "1", "-", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf": [[56, 85], ["print", "len", "len", "AB_mult_arr.multiply.getnnz", "A_mult_arr.multiply.getnnz", "type", "type", "print", "AB_mult_arr.multiply.multiply", "A_mult_arr.multiply.multiply", "type", "type"], "function", ["None"], ["", "def", "conf", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Confidence measure over rule A -> B\n    Returns float in [0, 1] as a result of P(AB)/P(A)\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "try", ":", "\n", "        ", "A_selected_indices", "=", "[", "item_index_dict", "[", "a", "]", "for", "a", "in", "A", "]", "\n", "AB_selected_indices", "=", "[", "item_index_dict", "[", "b", "]", "for", "b", "in", "B", "]", "+", "A_selected_indices", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "        ", "print", "(", "\"Please provide valid items.\"", ")", "\n", "return", "None", "\n", "\n", "", "AB_mult_arr", "=", "csc_occs", "[", ":", ",", "AB_selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "AB_selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "AB_selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "AB_mult_arr", "=", "AB_mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "A_mult_arr", "=", "csc_occs", "[", ":", ",", "A_selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "A_selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "A_selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "A_mult_arr", "=", "A_mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "return", "AB_mult_arr", ".", "getnnz", "(", ")", "/", "A_mult_arr", ".", "getnnz", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift": [[87, 128], ["print", "len", "len", "len", "type", "type", "print", "AB_mult_arr.multiply.multiply", "A_mult_arr.multiply.multiply", "B_mult_arr.multiply.multiply", "AB_mult_arr.multiply.getnnz", "A_mult_arr.multiply.getnnz", "B_mult_arr.multiply.getnnz", "type", "type"], "function", ["None"], ["", "def", "lift", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Lift measure for rule A->B\n    \n    Returns float f so that\n        - if f < 0: negative correlation\n        - if f == 1: no correlation\n        - if f > 1: positive correlation\n    \n    Lift(A->B) = P(B | A) / P(B) = P(AB)/(P(A)P(B))\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "try", ":", "\n", "        ", "A_selected_indices", "=", "[", "item_index_dict", "[", "a", "]", "for", "a", "in", "A", "]", "\n", "B_selected_indices", "=", "[", "item_index_dict", "[", "b", "]", "for", "b", "in", "B", "]", "\n", "AB_selected_indices", "=", "A_selected_indices", "+", "B_selected_indices", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "        ", "print", "(", "\"Please provide valid items.\"", ")", "\n", "return", "None", "\n", "\n", "", "AB_mult_arr", "=", "csc_occs", "[", ":", ",", "AB_selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "AB_selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "AB_selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "AB_mult_arr", "=", "AB_mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "A_mult_arr", "=", "csc_occs", "[", ":", ",", "A_selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "A_selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "A_selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "A_mult_arr", "=", "A_mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "B_mult_arr", "=", "csc_occs", "[", ":", ",", "B_selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "B_selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "B_selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "B_mult_arr", "=", "B_mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "return", "(", "AB_mult_arr", ".", "getnnz", "(", ")", "/", "A_mult_arr", ".", "getnnz", "(", ")", ")", "/", "(", "B_mult_arr", ".", "getnnz", "(", ")", "/", "csc_occs", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg2": [[130, 143], ["print", "ar_metrics.conf", "type", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf"], ["", "def", "conf_neg2", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Confidence measure over rule A -> not B\n    Returns float in [0, 1]\n    Conf(A->!B) = 1- Conf(A->B)\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "1", "-", "conf", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg1": [[144, 161], ["print", "ar_metrics.supp", "print", "type", "type", "type", "type", "ar_metrics.supp", "ar_metrics.supp", "ar_metrics.conf"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf"], ["", "def", "conf_neg1", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Confidence measure over rule !A -> B\n    Returns float in [0, 1]\n    Conf(!A->B) = (Supp(B)(1-Conf(B->A)))/(1-P(A))\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "if", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ")", "==", "1", ":", "\n", "        ", "print", "(", "\"Please provide an item whose support is <1. (supp({})=1)\"", ".", "format", "(", "A", ")", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "(", "supp", "(", "B", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "*", "(", "1", "-", "conf", "(", "B", ",", "A", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", ")", "/", "(", "1", "-", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg12": [[162, 179], ["print", "ar_metrics.supp", "print", "type", "type", "ar_metrics.supp", "ar_metrics.supp", "type", "type", "ar_metrics.supp", "ar_metrics.supp", "list", "list"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp"], ["", "", "def", "conf_neg12", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Confidence measure over rule !A -> !B\n    Returns float in [0, 1]\n    Conf(!A->!B) = (1-Supp(A)-Supp(B)+Supp(A u B))/(1-P(A))\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "if", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ")", "==", "1", ":", "\n", "        ", "print", "(", "\"Please provide an item whose support is <1. (supp({})=1)\"", ".", "format", "(", "A", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "(", "1", "-", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "-", "supp", "(", "B", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "+", "supp", "(", "list", "(", "A", ")", "+", "list", "(", "B", ")", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", "/", "(", "1", "-", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_union_neg2": [[181, 193], ["print", "ar_metrics.supp", "ar_metrics.supp", "type", "type", "type", "type", "list", "list"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp"], ["", "def", "supp_union_neg2", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    support for A u not B\n    supp(A u !B) = Supp(A) - Supp(A u B)\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "-", "supp", "(", "list", "(", "A", ")", "+", "list", "(", "B", ")", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_union_neg1": [[195, 206], ["print", "ar_metrics.supp", "ar_metrics.supp", "type", "type", "type", "type", "list", "list"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp"], ["", "def", "supp_union_neg1", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    support for not A u B\n    supp(!A u B) = Supp(B) - Supp(A u B)\n    \"\"\"", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "supp", "(", "B", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "-", "supp", "(", "list", "(", "A", ")", "+", "list", "(", "B", ")", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_union_neg12": [[208, 219], ["print", "ar_metrics.supp", "type", "type", "ar_metrics.supp", "type", "type", "ar_metrics.supp", "list", "list"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp"], ["", "def", "supp_union_neg12", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    support for not A u not B\n    Supp(!A u !B) = 1 - Supp(A) - Supp(B) + Supp(AuB)\n    \"\"\"", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "1", "-", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "-", "supp", "(", "B", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "+", "supp", "(", "list", "(", "A", ")", "+", "list", "(", "B", ")", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg2": [[221, 243], ["print", "ar_metrics.supp_neg", "print", "ar_metrics.supp_union_neg2", "type", "type", "ar_metrics.supp", "ar_metrics.supp_neg", "type", "type"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_neg", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_union_neg2", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_neg"], ["", "def", "lift_neg2", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Lift measure for rule A->!B\n    \n    Returns float f so that\n        - if f < 0: negative correlation\n        - if f == 1: no correlation\n        - if f > 1: positive correlation\n    \n    Lift(A->!B) = Supp(Au!B)/(Supp(A)Supp(!B))\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "if", "supp_neg", "(", "B", ",", "csc_occs", ",", "item_index_dict", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"Please provide B so that supp(B)<1\"", ")", "\n", "return", "None", "\n", "\n", "", "return", "supp_union_neg2", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "/", "(", "supp", "(", "A", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "*", "supp_neg", "(", "B", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg1": [[245, 263], ["print", "ar_metrics.supp_union_neg1", "type", "type", "ar_metrics.supp_neg", "ar_metrics.supp", "type", "type"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_union_neg1", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_neg", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp"], ["", "def", "lift_neg1", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Lift measure for rule !A->B\n    \n    Returns float f so that\n        - if f < 0: negative correlation\n        - if f == 1: no correlation\n        - if f > 1: positive correlation\n    \n    Lift(!A->B) = Supp(!AuB)/(Supp(!A)Supp(B))\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "supp_union_neg1", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "/", "(", "supp_neg", "(", "A", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "*", "supp", "(", "B", ",", "None", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg12": [[265, 283], ["print", "ar_metrics.supp_union_neg12", "type", "type", "ar_metrics.supp_neg", "ar_metrics.supp_neg", "type", "type"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_union_neg12", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_neg", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp_neg"], ["", "def", "lift_neg12", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    Lift measure for rule !A->!B\n    \n    Returns float f so that\n        - if f < 0: negative correlation\n        - if f == 1: no correlation\n        - if f > 1: positive correlation\n    \n    Lift(!A->!B) = Supp(!A u !B)/(Supp(!A)Supp(!B))\n    \"\"\"", "\n", "\n", "if", "type", "(", "A", ")", "not", "in", "accepted_type", "or", "type", "(", "B", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide items as valid type (received {} and {})\\nif tuple of single string,\\\n        then please pass a list\"", ".", "format", "(", "type", "(", "A", ")", ",", "type", "(", "B", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "supp_union_neg12", "(", "A", ",", "B", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "/", "(", "supp_neg", "(", "A", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", "*", "supp_neg", "(", "B", ",", "csc_occs", ",", "item_index_dict", ",", "[", "list", ",", "tuple", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.IDF": [[285, 315], ["numpy.log", "type", "print", "len", "print", "mult_arr.multiply.multiply", "mult_arr.multiply.getnnz", "type"], "function", ["None"], ["", "def", "IDF", "(", "i", ",", "csc_occs", ",", "item_index_dict", ",", "accepted_type", "=", "[", "list", ",", "tuple", "]", ")", ":", "\n", "    ", "\"\"\"\n    \n    Inverse Document Frequency\n    \n    IDF(i) = log(|D|/d_i)\n    \n    where\n        - |D| = number of transactions in the datasets D\n        - d_i = number of transactions in D containing i\n        \n    \"\"\"", "\n", "\n", "if", "type", "(", "i", ")", "not", "in", "accepted_type", ":", "\n", "        ", "print", "(", "\"Please provide terms as valid types. (received {}. \\\n        If tuple of single element please provide list.)\"", ".", "format", "(", "type", "(", "i", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "try", ":", "\n", "        ", "i_selected_indices", "=", "[", "item_index_dict", "[", "x", "]", "for", "x", "in", "i", "]", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "        ", "print", "(", "\"Please provide valid items.\"", ")", "\n", "return", "None", "\n", "\n", "", "mult_arr", "=", "csc_occs", "[", ":", ",", "i_selected_indices", "[", "0", "]", "]", "\n", "if", "len", "(", "i_selected_indices", ")", ">", "1", ":", "\n", "        ", "for", "ind", "in", "i_selected_indices", "[", "1", ":", "]", ":", "\n", "            ", "mult_arr", "=", "mult_arr", ".", "multiply", "(", "csc_occs", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "", "return", "np", ".", "log", "(", "csc_occs", ".", "shape", "[", "0", "]", "/", "mult_arr", ".", "getnnz", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.__init__": [[26, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "topN", ",", "min_supp", ",", "min_conf", ",", "\n", "max_IDF_percentile", ",", "min_lift", ")", ":", "\n", "        ", "\"\"\"\n        topN: top n% selection from IDF filtering for itemset\n        min_supp: minimum support threshold\n        min_conf: minimum confidence threshold\n        max_IDF_percentile: defines maximum IDF percentile to keep \n                            higher IDFs will be discarded since too rare items -> typos etc\n        min_lift: minimum lift for rules filtering\n        \"\"\"", "\n", "self", ".", "topN", "=", "topN", "\n", "self", ".", "min_supp", "=", "min_supp", "\n", "self", ".", "min_conf", "=", "min_conf", "\n", "self", ".", "max_IDF_percentile", "=", "max_IDF_percentile", "\n", "self", ".", "min_lift", "=", "min_lift", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.initialize": [[42, 71], ["os.path.join", "pandas.read_csv", "print", "fisinfis.FISinFIS.df.reset_index", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "dict", "tqdm.tqdm.tqdm", "range", "open", "pickle.dump", "open", "pickle.load"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "data_folder", ",", "csv_name", ",", "verbose_cols", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "csv_name", "=", "csv_name", "\n", "self", ".", "aux_folder", "=", "\"../aux_fisinfis_{}\"", ".", "format", "(", "csv_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "aux_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "aux_folder", ")", "\n", "", "self", ".", "imgs_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"imgs\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imgs_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "imgs_folder", ")", "\n", "\n", "", "self", ".", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "csv_name", ")", ")", "\n", "\n", "print", "(", "\"df shape:\\t{}\"", ".", "format", "(", "self", ".", "df", ".", "shape", ")", ")", "\n", "self", ".", "df", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "descr_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_description_dict.pkl\"", ".", "format", "(", "csv_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "descr_dict_path", ")", ":", "\n", "# indexing merged transactions", "\n", "            ", "self", ".", "descriptions_dict", "=", "dict", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "self", ".", "df", ".", "shape", "[", "0", "]", ")", ",", "desc", "=", "'transactions processed'", ")", ":", "\n", "                ", "r", "=", "self", ".", "df", ".", "iloc", "[", "i", "]", "\n", "self", ".", "descriptions_dict", "[", "i", "]", "=", "\"\"", "\n", "for", "c", "in", "verbose_cols", ":", "\n", "                    ", "self", ".", "descriptions_dict", "[", "i", "]", "+=", "\"{} \"", ".", "format", "(", "r", "[", "c", "]", ")", ".", "lower", "(", ")", "\n", "", "", "with", "open", "(", "descr_dict_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "descriptions_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "descr_dict_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "descriptions_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.cleanse": [[72, 132], ["nltk.stem.snowball.SnowballStemmer", "nltk.tokenize.RegexpTokenizer", "list", "fisinfis.FISinFIS.descriptions_dict.copy", "os.path.join", "os.path.join", "collections.defaultdict", "collections.defaultdict", "collections.Counter().most_common", "matplotlib.figure", "matplotlib.figure", "matplotlib.barh", "matplotlib.barh", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.savefig", "matplotlib.savefig", "os.path.join", "print", "set", "tqdm.tqdm.tqdm", "dict", "collections.defaultdict.items", "len", "os.path.join", "os.path.exists", "list", "nltk.corpus.stopwords.words", "os.path.exists", "os.path.exists", "fisinfis.FISinFIS.descriptions_dict.keys", "nltk.tokenize.RegexpTokenizer.tokenize", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.load", "fisinfis.FISinFIS.descriptions_dict.items", "collections.Counter", "set", "open", "pickle.dump", "open", "pickle.load", "len", "nltk.stem.snowball.SnowballStemmer.stem", "descriptions_dict_mod[].append", "fisinfis.FISinFIS.stem_word_dict[].add", "fisinfis.FISinFIS.descriptions_dict.items"], "methods", ["None"], ["", "", "", "def", "cleanse", "(", "self", ",", "lang", ")", ":", "\n", "        ", "\"\"\"\n        performs stop words removal and stemming with snowball stemming\n        \"\"\"", "\n", "snowball", "=", "SnowballStemmer", "(", "language", "=", "lang", ")", "\n", "tokenizer", "=", "RegexpTokenizer", "(", "'\\w+'", ")", "\n", "stop_words", "=", "list", "(", "set", "(", "stopwords", ".", "words", "(", "lang", ")", ")", ")", "\n", "if", "lang", "==", "'italian'", ":", "\n", "            ", "stop_words", "+=", "[", "\"il\"", ",", "\"lo\"", ",", "\"la\"", ",", "\"i\"", ",", "\"gli\"", ",", "\"le\"", "]", "#exta stop words to remove", "\n", "\n", "", "self", ".", "source_descriptions_dict", "=", "self", ".", "descriptions_dict", ".", "copy", "(", ")", "\n", "descr_dict_path_mod", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_description_dict_mod.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", "\n", "stem_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_stem_dict.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", "\n", "self", ".", "stem_word_dict", "=", "defaultdict", "(", "set", ")", "\n", "descriptions_dict_mod", "=", "defaultdict", "(", "list", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "descr_dict_path_mod", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "stem_dict_path", ")", ")", ":", "\n", "# stemming and stop words removal", "\n", "            ", "for", "k", "in", "tqdm", "(", "self", ".", "descriptions_dict", ".", "keys", "(", ")", ",", "desc", "=", "'transactions stemmed and cleaned'", ")", ":", "\n", "#[snowball.stem(x) for x in tokenizer.tokenize(descriptions_dict[k]) if x not in stop_words]", "\n", "                ", "for", "x", "in", "tokenizer", ".", "tokenize", "(", "self", ".", "descriptions_dict", "[", "k", "]", ")", ":", "\n", "                    ", "if", "x", "not", "in", "stop_words", ":", "\n", "                        ", "stemmed", "=", "snowball", ".", "stem", "(", "x", ")", "\n", "descriptions_dict_mod", "[", "k", "]", ".", "append", "(", "stemmed", ")", "\n", "self", ".", "stem_word_dict", "[", "stemmed", "]", ".", "add", "(", "x", ")", "\n", "\n", "# reset key indices in case of empty descriptions found", "\n", "", "", "", "ni", "=", "0", "\n", "self", ".", "descriptions_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "descriptions_dict_mod", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "descriptions_dict", "[", "ni", "]", "=", "v", "\n", "ni", "+=", "1", "\n", "\n", "", "with", "open", "(", "descr_dict_path_mod", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "descriptions_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "with", "open", "(", "stem_dict_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "stem_word_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "descr_dict_path_mod", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "descriptions_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "stem_dict_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "stem_word_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# top topn items", "\n", "", "", "topn", "=", "30", "\n", "tl", "=", "[", "i", "for", "k", ",", "v", "in", "self", ".", "descriptions_dict", ".", "items", "(", ")", "for", "i", "in", "v", "]", "\n", "mctl", "=", "Counter", "(", "tl", ")", ".", "most_common", "(", "len", "(", "tl", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "25", ",", "25", ")", ")", "\n", "plt", ".", "barh", "(", "[", "x", "[", "0", "]", "for", "x", "in", "mctl", "]", "[", ":", "topn", "]", ",", "[", "x", "[", "1", "]", "for", "x", "in", "mctl", "]", "[", ":", "topn", "]", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "25", ")", ";", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "\"top_{}_items_occs_bar.pdf\"", ".", "format", "(", "topn", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "items_list_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_items_list.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "items_list_path", ")", ":", "\n", "            ", "self", ".", "I", "=", "list", "(", "set", "(", "[", "x", "for", "k", ",", "v", "in", "self", ".", "descriptions_dict", ".", "items", "(", ")", "for", "x", "in", "v", "]", ")", ")", "\n", "with", "open", "(", "items_list_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "I", ",", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "items_list_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "I", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "print", "(", "\"itemset I contains {} items.\"", ".", "format", "(", "len", "(", "self", ".", "I", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.move_to_sparse": [[134, 162], ["print", "fisinfis.FISinFIS.coo_occs.tocsc", "os.path.exists", "numpy.zeros", "tqdm.tqdm.tqdm", "scipy.sparse.coo_matrix", "os.path.join", "fisinfis.FISinFIS.descriptions_dict.keys", "open", "pickle.dump", "open", "pickle.load", "range", "range", "len", "len", "os.path.join", "os.path.join", "len", "len", "fisinfis.FISinFIS.coo_occs.getnnz", "numpy.prod", "fisinfis.FISinFIS.I.index"], "methods", ["None"], ["", "def", "move_to_sparse", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        create coo and csc matrices for efficient metrics computation\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_coo_matrix.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", ")", ":", "\n", "# boolean matrix |T| x |I| representing occurrence of items in transactions", "\n", "            ", "dense_occs", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "descriptions_dict", ")", ",", "len", "(", "self", ".", "I", ")", ")", ",", "dtype", "=", "int", ")", "\n", "for", "k", "in", "tqdm", "(", "self", ".", "descriptions_dict", ".", "keys", "(", ")", ",", "desc", "=", "'transactions processed'", ")", ":", "\n", "                ", "for", "i", "in", "self", ".", "descriptions_dict", "[", "k", "]", ":", "\n", "                    ", "dense_occs", "[", "k", "]", "[", "self", ".", "I", ".", "index", "(", "i", ")", "]", "=", "1", "\n", "\n", "# build coo sparse matrix", "\n", "", "", "self", ".", "coo_occs", "=", "coo_matrix", "(", "dense_occs", ")", "\n", "\n", "# dump sparse matrix", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_coo_matrix.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "coo_occs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_coo_matrix.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "coo_occs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "print", "(", "\"Percentage of matrix population (density):\\t{}%\"", ".", "format", "(", "self", ".", "coo_occs", ".", "getnnz", "(", ")", "/", "np", ".", "prod", "(", "self", ".", "coo_occs", ".", "shape", ")", "*", "100", ")", ")", "\n", "\n", "# to csc", "\n", "self", ".", "csc_occs", "=", "self", ".", "coo_occs", ".", "tocsc", "(", ")", "\n", "self", ".", "item_index_dict", "=", "{", "self", ".", "I", "[", "x", "]", ":", "x", "for", "x", "in", "range", "(", "len", "(", "self", ".", "I", ")", ")", "}", "\n", "self", ".", "index_item_dict", "=", "{", "x", ":", "self", ".", "I", "[", "x", "]", "for", "x", "in", "range", "(", "len", "(", "self", ".", "I", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.algorithm1": [[163, 292], ["os.path.join", "IDF_sorted_list.sort", "list", "list.sort", "print", "collections.Counter().most_common", "matplotlib.figure", "matplotlib.figure", "matplotlib.title", "matplotlib.title", "seaborn.kdeplot", "matplotlib.vlines", "matplotlib.vlines", "matplotlib.axvspan", "matplotlib.axvspan", "matplotlib.legend", "matplotlib.legend", "matplotlib.savefig", "matplotlib.savefig", "support_values.sort", "len", "print", "print", "matplotlib.figure", "matplotlib.figure", "matplotlib.title", "matplotlib.title", "seaborn.kdeplot", "matplotlib.vlines", "matplotlib.vlines", "matplotlib.axvspan", "matplotlib.axvspan", "matplotlib.legend", "matplotlib.legend", "matplotlib.savefig", "matplotlib.savefig", "numpy.percentile", "print", "tqdm.tqdm.tqdm", "print", "print", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm.tqdm", "collections.defaultdict.keys", "collections.defaultdict.keys", "print", "print", "os.path.join", "os.path.join", "os.path.exists", "dict", "tqdm.tqdm.tqdm", "set", "len", "min", "max", "min", "os.path.join", "ar_metrics.supp", "min", "max", "min", "os.path.join", "range", "k_comb_inFIS_dict[].items", "k_comb_FIS_dict[].items", "os.path.exists", "os.path.exists", "ar_metrics.IDF", "open", "pickle.dump", "open", "pickle.load", "fisinfis.FISinFIS.items_IDF_dict.items", "len", "len", "collections.Counter", "len", "len", "fisinfis.FISinFIS.items_IDF_dict.items", "len", "len", "len", "ar_metrics.supp", "fisinfis.FISinFIS.FIS.append", "fisinfis.FISinFIS.inFIS.append", "len", "len", "multarr.multiply.multiply.getnnz", "multarr.multiply.multiply.multiply", "fisinfis.FISinFIS.inFIS.append", "fisinfis.FISinFIS.FIS.append", "len", "len", "open", "pickle.dump", "open", "pickle.dump", "int", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.xticks", "ar_metrics.supp", "len", "ar_metrics.IDF", "len", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.xticks", "multarr.multiply.multiply.getnnz", "len", "tuple", "tuple", "range", "range"], "methods", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.IDF", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.supp", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.IDF"], ["", "def", "algorithm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        FISinFIS algorithm 1\n        \"\"\"", "\n", "IDF_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"{}_IDF_dict.pkl\"", ".", "format", "(", "self", ".", "csv_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "IDF_dict_path", ")", ":", "\n", "            ", "self", ".", "items_IDF_dict", "=", "dict", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "self", ".", "I", ",", "desc", "=", "\"items processed\"", ")", ":", "\n", "                ", "self", ".", "items_IDF_dict", "[", "i", "]", "=", "IDF", "(", "[", "i", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "\n", "# serialize idf dict to disk", "\n", "", "with", "open", "(", "IDF_dict_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "items_IDF_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "IDF_dict_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "items_IDF_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "IDF_sorted_list", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "items_IDF_dict", ".", "items", "(", ")", "]", "\n", "IDF_sorted_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "IDF_values_list", "=", "[", "x", "[", "1", "]", "for", "x", "in", "IDF_sorted_list", "]", "\n", "\n", "# select topn IDF values", "\n", "IDF_values_unique", "=", "list", "(", "set", "(", "IDF_values_list", ")", ")", "\n", "IDF_values_unique", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "lowest_idf", "=", "IDF_values_unique", "[", ":", "int", "(", "len", "(", "IDF_values_unique", ")", "*", "self", ".", "topN", ")", "]", "[", "-", "1", "]", "\n", "highest_idf", "=", "IDF_values_unique", "[", "0", "]", "\n", "\n", "print", "(", "\"Discarded {}/{} items with IDF lower than minimum.\"", ".", "format", "(", "len", "(", "[", "x", "for", "x", "in", "IDF_values_list", "if", "x", "<", "lowest_idf", "]", ")", ",", "len", "(", "self", ".", "I", ")", ")", ")", "\n", "\n", "IDF_counter", "=", "Counter", "(", "IDF_values_list", ")", ".", "most_common", "(", "len", "(", "IDF_values_list", ")", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "10", ")", ")", "\n", "plt", ".", "title", "(", "\"IDF distribution kde - topN = {}%\"", ".", "format", "(", "self", ".", "topN", "*", "100", ")", ")", "\n", "sns", ".", "kdeplot", "(", "IDF_values_list", ",", "label", "=", "'IDF kde'", ")", ";", "\n", "plt", ".", "vlines", "(", "lowest_idf", ",", "min", "(", "plt", ".", "yticks", "(", ")", "[", "0", "]", ")", ",", "max", "(", "plt", ".", "yticks", "(", ")", "[", "0", "]", ")", ",", "color", "=", "'red'", ",", "label", "=", "'IDF threshold'", ")", "\n", "plt", ".", "axvspan", "(", "min", "(", "plt", ".", "xticks", "(", ")", "[", "0", "]", ")", ",", "lowest_idf", ",", "facecolor", "=", "'red'", ",", "alpha", "=", "0.1", ",", "label", "=", "'discarded region'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "\"idf_kde_topN_{}.pdf\"", ".", "format", "(", "self", ".", "topN", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "# single items support plot", "\n", "support_values", "=", "[", "supp", "(", "[", "x", "]", ",", "None", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "for", "x", "in", "self", ".", "I", "]", "\n", "support_values", ".", "sort", "(", ")", "\n", "high_supp_items", "=", "[", "x", "for", "x", "in", "self", ".", "I", "if", "supp", "(", "[", "x", "]", ",", "None", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", ">=", "self", ".", "min_supp", "]", "\n", "num_discarded_items", "=", "len", "(", "[", "x", "for", "x", "in", "support_values", "if", "x", "<", "self", ".", "min_supp", "]", ")", "\n", "print", "(", "\"Discarding {}/{} items with support lower than min_supp={}\\nLeft items:\\t{}\"", ".", "format", "(", "\n", "num_discarded_items", ",", "len", "(", "self", ".", "I", ")", ",", "self", ".", "min_supp", ",", "len", "(", "self", ".", "I", ")", "-", "num_discarded_items", ")", ")", "\n", "\n", "surviving_items", "=", "[", "x", "for", "x", "in", "high_supp_items", "if", "IDF", "(", "[", "x", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", ">=", "lowest_idf", "]", "\n", "print", "(", "\"{}/{} left items with IDF > minimum IDF_threshold ({} = lowest IDF value to select topN = top {}%)\"", ".", "format", "(", "\n", "len", "(", "surviving_items", ")", ",", "len", "(", "self", ".", "I", ")", "-", "num_discarded_items", ",", "lowest_idf", ",", "self", ".", "topN", "*", "100", ")", ")", "\n", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "10", ")", ")", "\n", "plt", ".", "title", "(", "\"Support distribution kde - min_supp={}\"", ".", "format", "(", "self", ".", "min_supp", ")", ")", "\n", "sns", ".", "kdeplot", "(", "support_values", ",", "label", "=", "'items support'", ")", ";", "\n", "plt", ".", "vlines", "(", "self", ".", "min_supp", ",", "min", "(", "plt", ".", "yticks", "(", ")", "[", "0", "]", ")", ",", "max", "(", "plt", ".", "yticks", "(", ")", "[", "0", "]", ")", ",", "color", "=", "'red'", ",", "label", "=", "'min_supp'", ")", "\n", "plt", ".", "axvspan", "(", "min", "(", "plt", ".", "xticks", "(", ")", "[", "0", "]", ")", ",", "self", ".", "min_supp", ",", "facecolor", "=", "'red'", ",", "alpha", "=", "0.1", ",", "label", "=", "'discarded region'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "\"support_plot_min_supp_{}.pdf\"", ".", "format", "(", "self", ".", "min_supp", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "# filter too high IDF = terms occurring too rarely", "\n", "max_IDF", "=", "np", ".", "percentile", "(", "IDF_values_unique", ",", "self", ".", "max_IDF_percentile", ")", "\n", "\n", "# filtered items by IDF topN selection", "\n", "tempk", "=", "[", "]", "\n", "tempk", "=", "[", "k", "for", "k", ",", "v", "in", "self", ".", "items_IDF_dict", ".", "items", "(", ")", "if", "v", ">=", "lowest_idf", "and", "v", "<=", "max_IDF", "]", "# top N % items based on IDF", "\n", "print", "(", "\"selected {}/{} items with topN={} leading to minimum IDF of {}.\\\n        \\nDiscarded {} elements with IDF value higher than maximum.\"", ".", "format", "(", "\n", "len", "(", "tempk", ")", ",", "len", "(", "self", ".", "I", ")", ",", "self", ".", "topN", ",", "lowest_idf", ",", "len", "(", "[", "x", "for", "x", "in", "IDF_values_list", "if", "x", ">", "max_IDF", "]", ")", ")", ")", "\n", "\n", "# actual algo 1", "\n", "k", "=", "1", "\n", "# INITIALIZE", "\n", "# create FIS and inFIS sets filtering over support ", "\n", "self", ".", "FIS", "=", "[", "]", "\n", "self", ".", "inFIS", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "tempk", ",", "desc", "=", "\"filtered items processed\"", ")", ":", "\n", "            ", "if", "supp", "(", "[", "i", "]", ",", "None", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", ">=", "self", ".", "min_supp", ":", "\n", "                ", "self", ".", "FIS", ".", "append", "(", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "inFIS", ".", "append", "(", "[", "i", "]", ")", "\n", "", "", "print", "(", "\"FIS[1] len: {}\"", ".", "format", "(", "len", "(", "self", ".", "FIS", ")", ")", ")", "\n", "print", "(", "\"inFIS[1] len: {}\"", ".", "format", "(", "len", "(", "self", ".", "inFIS", ")", ")", ")", "\n", "\n", "# builds dict like", "\n", "# {k: {(i1, i2): supp_value>0}}", "\n", "# for k >= 2", "\n", "#", "\n", "k_comb_FIS_dict", "=", "defaultdict", "(", "dict", ")", "\n", "k_comb_inFIS_dict", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "ci", "in", "tqdm", "(", "range", "(", "self", ".", "csc_occs", ".", "shape", "[", "1", "]", "-", "1", ")", ",", "desc", "=", "'main column'", ")", ":", "\n", "            ", "multarr", "=", "self", ".", "csc_occs", "[", ":", ",", "ci", "]", "\n", "ma_supp", "=", "multarr", ".", "getnnz", "(", ")", "/", "self", ".", "csc_occs", ".", "shape", "[", "0", "]", "\n", "k", "=", "2", "\n", "oci", "=", "ci", "+", "1", "\n", "while", "(", "ma_supp", ">", "0", "and", "oci", "<", "self", ".", "csc_occs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "multarr", "=", "multarr", ".", "multiply", "(", "self", ".", "csc_occs", "[", ":", ",", "oci", "]", ")", "\n", "ma_supp", "=", "multarr", ".", "getnnz", "(", ")", "/", "self", ".", "csc_occs", ".", "shape", "[", "0", "]", "\n", "if", "ma_supp", ">", "0", ":", "# minsup = 0 according to paper notation in Algorithm 1", "\n", "                    ", "if", "ma_supp", ">", "self", ".", "min_supp", ":", "\n", "                        ", "k_comb_FIS_dict", "[", "k", "]", "[", "tuple", "(", "[", "self", ".", "index_item_dict", "[", "x", "]", "for", "x", "in", "range", "(", "ci", ",", "oci", "+", "1", ")", "]", ")", "]", "=", "ma_supp", "\n", "", "else", ":", "\n", "                        ", "k_comb_inFIS_dict", "[", "k", "]", "[", "tuple", "(", "[", "self", ".", "index_item_dict", "[", "x", "]", "for", "x", "in", "range", "(", "ci", ",", "oci", "+", "1", ")", "]", ")", "]", "=", "ma_supp", "\n", "", "", "k", "+=", "1", "\n", "oci", "+=", "1", "\n", "\n", "", "", "for", "k", "in", "k_comb_inFIS_dict", ".", "keys", "(", ")", ":", "\n", "            ", "for", "comb", ",", "csupp", "in", "k_comb_inFIS_dict", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "inFIS", ".", "append", "(", "comb", ")", "\n", "\n", "", "", "for", "k", "in", "k_comb_FIS_dict", ".", "keys", "(", ")", ":", "\n", "            ", "for", "comb", ",", "csupp", "in", "k_comb_FIS_dict", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "FIS", ".", "append", "(", "comb", ")", "\n", "\n", "", "", "print", "(", "\"FIS len:\\t{}\"", ".", "format", "(", "len", "(", "self", ".", "FIS", ")", ")", ")", "\n", "print", "(", "\"inFIS len:\\t{}\"", ".", "format", "(", "len", "(", "self", ".", "inFIS", ")", ")", ")", "\n", "\n", "# serialize FIS e inFIS per params", "\n", "FIS_apriori_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"FIS_apriori_topN_{}_minsupp_{}_max_idf_perc_{}_min_lift_{}\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_lift", ")", ")", "\n", "inFIS_apriori_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"inFIS_apriori_topN_{}_minsupp_{}_max_idf_perc_{}_min_lift_{}\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_lift", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "FIS_apriori_path", ")", ":", "\n", "            ", "with", "open", "(", "FIS_apriori_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "FIS", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "inFIS_apriori_path", ")", ":", "\n", "            ", "with", "open", "(", "inFIS_apriori_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "inFIS", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.generateARs": [[293, 353], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "print", "itertools.combinations", "itertools.combinations", "int", "ar_metrics.conf", "ar_metrics.lift", "ar_metrics.conf_neg1", "ar_metrics.lift_neg1", "ar_metrics.conf_neg2", "ar_metrics.lift_neg2", "int", "ar_metrics.conf", "ar_metrics.lift", "ar_metrics.conf_neg1", "ar_metrics.lift_neg1", "ar_metrics.conf_neg2", "ar_metrics.lift_neg2", "len", "len", "scipy.special.binom", "PAR.append", "NAR_neg1.append", "NAR_neg2.append", "scipy.special.binom", "PAR.append", "NAR_neg1.append", "NAR_neg2.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg1", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg1", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg2", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg2", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg1", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg1", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.conf_neg2", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.ar_metrics.lift_neg2"], ["", "", "", "def", "generateARs", "(", "self", ",", "FIS", ",", "inFIS", ",", "min_conf", ",", "min_lift", ")", ":", "\n", "        ", "\"\"\"\n        aux: Algorithm 2 part to generate ARs\n        \"\"\"", "\n", "nPARFIS", "=", "0", "\n", "nNARFIS", "=", "0", "\n", "nPARinFIS", "=", "0", "\n", "nNARinFIS", "=", "0", "\n", "PAR", "=", "[", "]", "\n", "NAR_neg1", "=", "[", "]", "\n", "NAR_neg2", "=", "[", "]", "\n", "NAR_neg12", "=", "[", "]", "\n", "# ARs from FIS", "\n", "for", "fiscomb", "in", "tqdm", "(", "combinations", "(", "FIS", ",", "2", ")", ",", "desc", "=", "\"ARs processed from FIS\"", ",", "total", "=", "int", "(", "binom", "(", "len", "(", "FIS", ")", ",", "2", ")", ")", ")", ":", "\n", "            ", "if", "fiscomb", "[", "0", "]", "!=", "fiscomb", "[", "1", "]", ":", "\n", "# PARs", "\n", "                ", "rconf", "=", "conf", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "rlift", "=", "lift", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "if", "(", "rconf", ">", "min_conf", ")", "and", "(", "rlift", ">", "min_lift", ")", ":", "\n", "                    ", "PAR", ".", "append", "(", "[", "fiscomb", ",", "rconf", ",", "rlift", "]", ")", "\n", "nPARFIS", "+=", "1", "\n", "# NARs", "\n", "", "rconf", "=", "conf_neg1", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "rlift", "=", "lift_neg1", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "if", "(", "rconf", ">", "min_conf", ")", "and", "(", "rlift", ">", "min_lift", ")", ":", "\n", "                    ", "NAR_neg1", ".", "append", "(", "[", "fiscomb", ",", "rconf", ",", "rlift", "]", ")", "\n", "nNARFIS", "+=", "1", "\n", "", "rconf", "=", "conf_neg2", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "rlift", "=", "lift_neg2", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "if", "(", "rconf", ">", "min_conf", ")", "and", "(", "rlift", ">", "min_lift", ")", ":", "\n", "                    ", "NAR_neg2", ".", "append", "(", "[", "fiscomb", ",", "rconf", ",", "rlift", "]", ")", "\n", "nNARFIS", "+=", "1", "\n", "\n", "# ARs from inFIS", "\n", "", "", "", "for", "fiscomb", "in", "tqdm", "(", "combinations", "(", "inFIS", ",", "2", ")", ",", "desc", "=", "\"ARs processed from inFIS\"", ",", "total", "=", "int", "(", "binom", "(", "len", "(", "inFIS", ")", ",", "2", ")", ")", ")", ":", "\n", "            ", "if", "fiscomb", "[", "0", "]", "!=", "fiscomb", "[", "1", "]", ":", "\n", "# PARs", "\n", "                ", "rconf", "=", "conf", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "rlift", "=", "lift", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "if", "(", "rconf", ">", "min_conf", ")", "and", "(", "rlift", ">", "min_lift", ")", ":", "\n", "                    ", "PAR", ".", "append", "(", "[", "fiscomb", ",", "rconf", ",", "rlift", "]", ")", "\n", "nPARinFIS", "+=", "1", "\n", "# NARs", "\n", "", "rconf", "=", "conf_neg1", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "rlift", "=", "lift_neg1", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "if", "(", "rconf", ">", "min_conf", ")", "and", "(", "rlift", ">", "min_lift", ")", ":", "\n", "                    ", "NAR_neg1", ".", "append", "(", "[", "fiscomb", ",", "rconf", ",", "rlift", "]", ")", "\n", "nNARinFIS", "+=", "1", "\n", "", "rconf", "=", "conf_neg2", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "rlift", "=", "lift_neg2", "(", "fiscomb", "[", "0", "]", ",", "fiscomb", "[", "1", "]", ",", "self", ".", "csc_occs", ",", "self", ".", "item_index_dict", ")", "\n", "if", "(", "rconf", ">", "min_conf", ")", "and", "(", "rlift", ">", "min_lift", ")", ":", "\n", "                    ", "NAR_neg2", ".", "append", "(", "[", "fiscomb", ",", "rconf", ",", "rlift", "]", ")", "\n", "nNARinFIS", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"generated {} PARs and {} NARs.\\n{} PAR from FIS\\n{} NAR from FIS\\n{}\\\n        PAR from inFIS\\n{} NAR from inFIS\"", ".", "format", "(", "len", "(", "PAR", ")", ",", "len", "(", "NAR_neg1", "+", "NAR_neg2", "+", "NAR_neg12", ")", ",", "\n", "nPARFIS", ",", "nNARFIS", ",", "nPARinFIS", ",", "nNARinFIS", ")", ")", "\n", "\n", "# (items, confidence, lift)", "\n", "return", "(", "PAR", ",", "NAR_neg1", ",", "NAR_neg2", ",", "NAR_neg12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.negate_consequent": [[354, 359], ["str"], "methods", ["None"], ["", "def", "negate_consequent", "(", "self", ",", "cons_conf_lift_list", ")", ":", "\n", "        ", "\"\"\"\n        aux\n        \"\"\"", "\n", "return", "(", "\"! \"", "+", "str", "(", "cons_conf_lift_list", "[", "0", "]", ")", ",", "cons_conf_lift_list", "[", "1", "]", ",", "cons_conf_lift_list", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.algorithm2": [[360, 490], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "collections.defaultdict", "tqdm.tqdm.tqdm", "collections.defaultdict", "tqdm.tqdm.tqdm", "collections.defaultdict", "tqdm.tqdm.tqdm", "collections.defaultdict", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "dict", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "fisinfis.FISinFIS.generateARs", "print", "fisinfis.FISinFIS.PAR_antecedent_consequents_dict[].append", "fisinfis.FISinFIS.NAR_neg1_antecedent_consequents_dict[].append", "fisinfis.FISinFIS.NAR_neg2_antecedent_consequents_dict[].append", "fisinfis.FISinFIS.NAR_neg12_antecedent_consequents_dict[].append", "fisinfis.FISinFIS.NAR_neg1_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.NAR_neg2_antecedent_consequents_dict.keys", "list", "fisinfis.FISinFIS.NAR_neg12_antecedent_consequents_dict.keys", "list", "fisinfis.FISinFIS.PAR_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.NAR_neg1_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.NAR_neg2_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.NAR_neg12_antecedent_consequents_dict.keys", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "type", "type", "type", "type", "type", "type", "type", "type", "map", "map", "fisinfis.FISinFIS.NAR_neg2_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.NAR_neg12_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.PAR_antecedent_consequents_dict.keys", "fisinfis.FISinFIS.NAR_neg1_antecedent_consequents_dict.keys", "str", "fisinfis.FISinFIS.negate_consequent", "str", "fisinfis.FISinFIS.negate_consequent"], "methods", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.generateARs", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.negate_consequent", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.negate_consequent"], ["", "def", "algorithm2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        FISinFIS algorithm2\n        \"\"\"", "\n", "\n", "# compute PARs and NARs if not on disk already for same parameters", "\n", "PAR_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"PAR_topN_{}_minsupp_{}_max_idf_perc_{}_minconf_{}_min_lift_{}.pkl\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", ")", "\n", "NAR_neg1_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"NAR_neg1_topN_{}_minsupp_{}_max_idf_perc_{}_minconf_{}_min_lift_{}.pkl\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", ")", "\n", "NAR_neg2_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"NAR_neg2_topN_{}_minsupp_{}_max_idf_perc_{}_minconf_{}_min_lift_{}.pkl\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", ")", "\n", "NAR_neg12_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "aux_folder", ",", "\"NAR_neg12_topN_{}_minsupp_{}_max_idf_perc_{}_minconf_{}_min_lift_{}.pkl\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "PAR_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "NAR_neg1_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "NAR_neg2_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "NAR_neg12_path", ")", ":", "\n", "            ", "self", ".", "PAR", ",", "self", ".", "NAR_neg1", ",", "self", ".", "NAR_neg2", ",", "self", ".", "NAR_neg12", "=", "self", ".", "generateARs", "(", "self", ".", "FIS", ",", "self", ".", "inFIS", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", "\n", "with", "open", "(", "PAR_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "PAR", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "with", "open", "(", "NAR_neg1_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "NAR_neg1", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "with", "open", "(", "NAR_neg2_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "NAR_neg2", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "with", "open", "(", "NAR_neg12_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "NAR_neg12", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Already computed PARs and NARs for parameters topN {}, minsupp {}, max_idf_perc {}, minconf {}!\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ")", ")", "\n", "with", "open", "(", "PAR_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "PAR", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "NAR_neg1_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "NAR_neg1", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "NAR_neg2_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "NAR_neg2", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "NAR_neg12_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "NAR_neg12", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# for rules A -> B with confidence c1 and lift l1, A -> C with c2 and l2, build dict like", "\n", "# {A : [(B, c1, l1), (C, c2, l2), ...], ...}", "\n", "# ", "\n", "", "", "print", "(", "\"Building antecedent-consequent dicts...\"", ")", "\n", "self", ".", "PAR_antecedent_consequents_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "parlist", "in", "tqdm", "(", "self", ".", "PAR", ",", "desc", "=", "\"PARs\"", ")", ":", "\n", "            ", "antec", "=", "parlist", "[", "0", "]", "[", "0", "]", "\n", "consec", "=", "parlist", "[", "0", "]", "[", "1", "]", "\n", "if", "type", "(", "antec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "antec", "=", "antec", "[", "0", "]", "\n", "", "if", "type", "(", "consec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "consec", "=", "consec", "[", "0", "]", "\n", "", "self", ".", "PAR_antecedent_consequents_dict", "[", "antec", "]", ".", "append", "(", "(", "consec", ",", "parlist", "[", "1", "]", ",", "parlist", "[", "2", "]", ")", ")", "\n", "\n", "", "self", ".", "NAR_neg1_antecedent_consequents_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "narlist", "in", "tqdm", "(", "self", ".", "NAR_neg1", ",", "desc", "=", "\"NARs neg1\"", ")", ":", "\n", "            ", "antec", "=", "narlist", "[", "0", "]", "[", "0", "]", "\n", "consec", "=", "narlist", "[", "0", "]", "[", "1", "]", "\n", "if", "type", "(", "antec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "antec", "=", "antec", "[", "0", "]", "\n", "", "if", "type", "(", "consec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "consec", "=", "consec", "[", "0", "]", "\n", "", "self", ".", "NAR_neg1_antecedent_consequents_dict", "[", "antec", "]", ".", "append", "(", "(", "consec", ",", "narlist", "[", "1", "]", ",", "narlist", "[", "2", "]", ")", ")", "\n", "\n", "", "self", ".", "NAR_neg2_antecedent_consequents_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "narlist", "in", "tqdm", "(", "self", ".", "NAR_neg2", ",", "desc", "=", "\"NARs neg2\"", ")", ":", "\n", "            ", "antec", "=", "narlist", "[", "0", "]", "[", "0", "]", "\n", "consec", "=", "narlist", "[", "0", "]", "[", "1", "]", "\n", "if", "type", "(", "antec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "antec", "=", "antec", "[", "0", "]", "\n", "", "if", "type", "(", "consec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "consec", "=", "consec", "[", "0", "]", "\n", "", "self", ".", "NAR_neg2_antecedent_consequents_dict", "[", "antec", "]", ".", "append", "(", "(", "consec", ",", "narlist", "[", "1", "]", ",", "narlist", "[", "2", "]", ")", ")", "\n", "\n", "", "self", ".", "NAR_neg12_antecedent_consequents_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "narlist", "in", "tqdm", "(", "self", ".", "NAR_neg12", ",", "desc", "=", "\"NARs neg12\"", ")", ":", "\n", "            ", "antec", "=", "narlist", "[", "0", "]", "[", "0", "]", "\n", "consec", "=", "narlist", "[", "0", "]", "[", "1", "]", "\n", "if", "type", "(", "antec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "antec", "=", "antec", "[", "0", "]", "\n", "", "if", "type", "(", "consec", ")", "==", "list", ":", "# list if single element", "\n", "                ", "consec", "=", "consec", "[", "0", "]", "\n", "", "self", ".", "NAR_neg12_antecedent_consequents_dict", "[", "antec", "]", ".", "append", "(", "(", "consec", ",", "narlist", "[", "1", "]", ",", "narlist", "[", "2", "]", ")", ")", "\n", "\n", "# negate antecedent in neg1 rules", "\n", "", "for", "k", "in", "tqdm", "(", "self", ".", "NAR_neg1_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"neg1 rules processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "NAR_neg1_antecedent_consequents_dict", "[", "k", "]", "\n", "self", ".", "NAR_neg1_antecedent_consequents_dict", "[", "\"! \"", "+", "str", "(", "k", ")", "]", "=", "v", "\n", "\n", "# negate consequent in neg2 rules", "\n", "", "for", "k", "in", "tqdm", "(", "self", ".", "NAR_neg2_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"neg2 rules processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "NAR_neg2_antecedent_consequents_dict", "[", "k", "]", "\n", "self", ".", "NAR_neg2_antecedent_consequents_dict", "[", "k", "]", "=", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "negate_consequent", "(", "x", ")", ",", "v", ")", ")", "\n", "\n", "# negate antecedent and consequent in neg12 rules", "\n", "", "for", "k", "in", "tqdm", "(", "self", ".", "NAR_neg12_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"neg12 rules processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "NAR_neg12_antecedent_consequents_dict", "[", "k", "]", "\n", "self", ".", "NAR_neg12_antecedent_consequents_dict", "[", "\"! \"", "+", "str", "(", "k", ")", "]", "=", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "negate_consequent", "(", "x", ")", ",", "v", ")", ")", "\n", "\n", "# create single ar dict", "\n", "", "self", ".", "AR_antecedent_consequent_dict", "=", "dict", "(", ")", "\n", "\n", "for", "k", "in", "tqdm", "(", "self", ".", "PAR_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"PARs processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "PAR_antecedent_consequents_dict", "[", "k", "]", "\n", "if", "k", "in", "self", ".", "NAR_neg2_antecedent_consequents_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "+", "self", ".", "NAR_neg2_antecedent_consequents_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "for", "k", "in", "tqdm", "(", "self", ".", "NAR_neg1_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"NARs neg1 processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "NAR_neg1_antecedent_consequents_dict", "[", "k", "]", "\n", "if", "k", "in", "self", ".", "NAR_neg12_antecedent_consequents_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "+", "self", ".", "NAR_neg12_antecedent_consequents_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "for", "k", "in", "tqdm", "(", "self", ".", "NAR_neg2_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"NARs neg2 processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "NAR_neg2_antecedent_consequents_dict", "[", "k", "]", "\n", "if", "k", "in", "self", ".", "PAR_antecedent_consequents_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "+", "self", ".", "PAR_antecedent_consequents_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "for", "k", "in", "tqdm", "(", "self", ".", "NAR_neg12_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"NARs neg12 processed\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "NAR_neg12_antecedent_consequents_dict", "[", "k", "]", "\n", "if", "k", "in", "self", ".", "NAR_neg1_antecedent_consequents_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "+", "self", ".", "NAR_neg1_antecedent_consequents_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.plot_ARs_graphs": [[491, 547], ["matplotlib.use", "matplotlib.use", "matplotlib.use", "matplotlib.use", "os.path.join", "tqdm.tqdm.tqdm", "matplotlib.use", "matplotlib.use", "matplotlib.use", "matplotlib.use", "os.path.join", "tqdm.tqdm.tqdm", "os.path.exists", "os.makedirs", "fisinfis.FISinFIS.AR_antecedent_consequent_dict.keys", "matplotlib.figure", "matplotlib.figure", "networkx.DiGraph", "dict", "networkx.DiGraph.edges", "networkx.spring_layout", "networkx.draw_networkx", "networkx.draw_networkx_edge_labels", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.clf", "matplotlib.clf", "os.path.exists", "os.makedirs", "fisinfis.FISinFIS.PAR_antecedent_consequents_dict.keys", "matplotlib.figure", "matplotlib.figure", "networkx.DiGraph", "dict", "networkx.DiGraph.edges", "networkx.spring_layout", "networkx.draw_networkx", "networkx.draw_networkx_edge_labels", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.clf", "matplotlib.clf", "networkx.DiGraph.add_edge", "os.path.join", "networkx.DiGraph.add_edge", "os.path.join", "str", "str"], "methods", ["None"], ["", "", "", "def", "plot_ARs_graphs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        plots and serialize ARs as graphs\n        \"\"\"", "\n", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "AR_graphs_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "\"ARs_graph_topN_{}_minsupp_{}_max_idf_perc_{}_minconf_{}_min_lift_{}\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "AR_graphs_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "AR_graphs_dir", ")", "\n", "\n", "", "for", "k", "in", "tqdm", "(", "self", ".", "AR_antecedent_consequent_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"antecedent\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "AR_antecedent_consequent_dict", "[", "k", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "20", ")", ")", ";", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", ";", "\n", "edge_labels", "=", "dict", "(", ")", "\n", "for", "conslist", "in", "v", ":", "\n", "                ", "node1", "=", "k", "\n", "node2", "=", "conslist", "[", "0", "]", "\n", "weight", "=", "\"c={:.2f} l={:.2f}\"", ".", "format", "(", "conslist", "[", "1", "]", ",", "conslist", "[", "2", "]", ")", "\n", "G", ".", "add_edge", "(", "node1", ",", "node2", ",", "label", "=", "str", "(", "weight", ")", ",", "weight", "=", "conslist", "[", "1", "]", "*", "conslist", "[", "2", "]", "/", "2", ")", ";", "\n", "edge_labels", "[", "(", "node1", ",", "node2", ")", "]", "=", "weight", ";", "\n", "", "edges", "=", "G", ".", "edges", "(", ")", "\n", "weights", "=", "[", "G", "[", "u", "]", "[", "v", "]", "[", "'weight'", "]", "for", "u", ",", "v", "in", "edges", "]", "\n", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", ";", "\n", "nx", ".", "draw_networkx", "(", "G", ",", "pos", "=", "pos", ",", "node_color", "=", "'#92f0eb'", ",", "font_size", "=", "15", ",", "width", "=", "weights", ")", ";", "\n", "nx", ".", "draw_networkx_edge_labels", "(", "G", ",", "pos", "=", "pos", ",", "edge_labels", "=", "edge_labels", ",", "font_size", "=", "15", ")", ";", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "AR_graphs_dir", ",", "\"{}.pdf\"", ".", "format", "(", "k", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "clf", "(", ")", ";", "\n", "\n", "# visualize PARs only", "\n", "", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "PAR_graphs_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgs_folder", ",", "\"PARs_graph_topN_{}_minsupp_{}_max_idf_perc_{}_minconf_{}_min_lift_{}\"", ".", "format", "(", "\n", "self", ".", "topN", ",", "self", ".", "min_supp", ",", "self", ".", "max_IDF_percentile", ",", "self", ".", "min_conf", ",", "self", ".", "min_lift", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "PAR_graphs_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "PAR_graphs_dir", ")", "\n", "\n", "", "for", "k", "in", "tqdm", "(", "self", ".", "PAR_antecedent_consequents_dict", ".", "keys", "(", ")", ",", "desc", "=", "\"antecedent\"", ")", ":", "\n", "            ", "v", "=", "self", ".", "PAR_antecedent_consequents_dict", "[", "k", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "20", ")", ")", ";", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", ";", "\n", "edge_labels", "=", "dict", "(", ")", "\n", "for", "conslist", "in", "v", ":", "\n", "                ", "node1", "=", "k", "\n", "node2", "=", "conslist", "[", "0", "]", "\n", "weight", "=", "\"c={:.2f} l={:.2f}\"", ".", "format", "(", "conslist", "[", "1", "]", ",", "conslist", "[", "2", "]", ")", "\n", "G", ".", "add_edge", "(", "node1", ",", "node2", ",", "label", "=", "str", "(", "weight", ")", ",", "weight", "=", "conslist", "[", "1", "]", "*", "conslist", "[", "2", "]", "/", "2", ")", ";", "\n", "edge_labels", "[", "(", "node1", ",", "node2", ")", "]", "=", "weight", ";", "\n", "", "edges", "=", "G", ".", "edges", "(", ")", "\n", "weights", "=", "[", "G", "[", "u", "]", "[", "v", "]", "[", "'weight'", "]", "for", "u", ",", "v", "in", "edges", "]", "\n", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", ";", "\n", "nx", ".", "draw_networkx", "(", "G", ",", "pos", "=", "pos", ",", "node_color", "=", "'#92f0eb'", ",", "font_size", "=", "15", ",", "width", "=", "weights", ")", ";", "\n", "nx", ".", "draw_networkx_edge_labels", "(", "G", ",", "pos", "=", "pos", ",", "edge_labels", "=", "edge_labels", ",", "font_size", "=", "15", ")", ";", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "PAR_graphs_dir", ",", "\"{}.pdf\"", ".", "format", "(", "k", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "clf", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.show_stem_transactions": [[550, 622], ["print", "type", "range", "len", "print", "print", "input", "print", "len", "input", "print", "numpy.ceil", "type", "print", "len", "len", "print", "len", "print", "len", "print", "fisinfis.FISinFIS.descriptions_dict.items", "all", "fisinfis.FISinFIS.descriptions_dict.items", "len", "len", "print", "len", "input", "type", "len", "len"], "methods", ["None"], ["", "", "def", "show_stem_transactions", "(", "self", ",", "selected_stem", ")", ":", "\n", "        ", "\"\"\"\n        shows info about stem item and transactions containg the corresponding items to the selected stem\n        input:\n            - selected_stem: string or list of strings\n        \"\"\"", "\n", "if", "type", "(", "selected_stem", ")", "==", "list", ":", "\n", "            ", "corresponding_words", "=", "[", "self", ".", "stem_word_dict", "[", "x", "]", "for", "x", "in", "selected_stem", "]", "\n", "islist", "=", "True", "\n", "", "elif", "type", "(", "selected_stem", ")", "==", "str", ":", "\n", "            ", "corresponding_words", "=", "self", ".", "stem_word_dict", "[", "selected_stem", "]", "\n", "islist", "=", "False", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Unrecognized type for selected_item\u00a0{}\"", ".", "format", "(", "type", "(", "selected_stem", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "num_matches", "=", "0", "\n", "if", "islist", ":", "\n", "            ", "for", "ei", "in", "range", "(", "len", "(", "selected_stem", ")", ")", ":", "\n", "                ", "cw", "=", "len", "(", "corresponding_words", "[", "ei", "]", ")", "\n", "print", "(", "\"Found {} items corresponding to stem {}.\"", ".", "format", "(", "cw", ",", "selected_stem", "[", "ei", "]", ")", ")", "\n", "if", "cw", "==", "0", ":", "\n", "                    ", "print", "(", "\"(Check the stem spelling.)\"", ")", "\n", "", "num_matches", "+=", "cw", "\n", "", "", "else", ":", "\n", "            ", "cw", "=", "len", "(", "corresponding_words", ")", "\n", "print", "(", "\"Found {} corresponding items to stem {}.\"", ".", "format", "(", "cw", ",", "selected_stem", ")", ")", "\n", "num_matches", "=", "cw", "\n", "", "if", "num_matches", ">", "0", ":", "\n", "            ", "see_words_choice", "=", "None", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Check the stem(s) spelling.\"", ")", "\n", "see_words_choice", "=", "\"no\"", "\n", "", "while", "see_words_choice", "not", "in", "[", "\"yes\"", ",", "\"no\"", "]", ":", "\n", "            ", "see_words_choice", "=", "input", "(", "\"Do you want to see the items?\\t[yes/no]\"", ")", "\n", "", "if", "see_words_choice", "==", "\"yes\"", ":", "\n", "            ", "print", "(", "corresponding_words", ")", "\n", "\n", "", "if", "islist", ":", "\n", "            ", "selected_desc_indices", "=", "[", "k", "for", "k", ",", "v", "in", "self", ".", "descriptions_dict", ".", "items", "(", ")", "if", "all", "(", "s", "in", "v", "for", "s", "in", "selected_stem", ")", "]", "\n", "", "else", ":", "\n", "            ", "selected_desc_indices", "=", "[", "k", "for", "k", ",", "v", "in", "self", ".", "descriptions_dict", ".", "items", "(", ")", "if", "selected_stem", "in", "v", "]", "\n", "\n", "", "print", "(", "\"Found {} transactions containing stemmed item {}.\"", ".", "format", "(", "len", "(", "selected_desc_indices", ")", ",", "selected_stem", ")", ")", "\n", "\n", "if", "len", "(", "selected_desc_indices", ")", ">", "0", ":", "\n", "            ", "see_sent_choice", "=", "None", "\n", "", "else", ":", "\n", "            ", "see_sent_choice", "=", "\"no\"", "\n", "", "while", "see_sent_choice", "not", "in", "[", "\"yes\"", ",", "\"no\"", "]", ":", "\n", "            ", "see_sent_choice", "=", "input", "(", "\"Do you want to see the transactions?\\t[yes/no]\"", ")", "\n", "", "if", "see_sent_choice", "==", "\"yes\"", ":", "\n", "            ", "print", "(", ")", "\n", "tabs_len", "=", "10", "\n", "tabs_num", "=", "np", ".", "ceil", "(", "len", "(", "selected_desc_indices", ")", "/", "tabs_len", ")", "\n", "tr_it", "=", "0", "\n", "continue_transactions", "=", "\"yes\"", "\n", "shown_t", "=", "0", "\n", "while", "continue_transactions", "==", "\"yes\"", "and", "shown_t", "<", "len", "(", "selected_desc_indices", ")", ":", "\n", "                ", "filtered_transactions_indices", "=", "selected_desc_indices", "[", "tabs_len", "*", "tr_it", ":", "tabs_len", "*", "(", "tr_it", "+", "1", ")", "]", "\n", "for", "k", "in", "filtered_transactions_indices", ":", "\n", "                    ", "print", "(", "\"- {}\\n\"", ".", "format", "(", "self", ".", "source_descriptions_dict", "[", "k", "]", ")", ")", "\n", "\n", "", "print", "(", "\"Shown {}/{} transactions.\"", ".", "format", "(", "shown_t", "+", "len", "(", "filtered_transactions_indices", ")", ",", "len", "(", "selected_desc_indices", ")", ")", ")", "\n", "tr_it", "+=", "1", "\n", "shown_t", "+=", "len", "(", "filtered_transactions_indices", ")", "\n", "if", "shown_t", "<", "len", "(", "selected_desc_indices", ")", ":", "\n", "                    ", "continue_transactions", "=", "None", "\n", "", "else", ":", "\n", "                    ", "continue_transactions", "=", "\"no\"", "\n", "", "while", "continue_transactions", "not", "in", "[", "\"yes\"", ",", "\"no\"", "]", ":", "\n", "                    ", "continue_transactions", "=", "input", "(", "\"Continue?\\t[yes/no]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.main": [[624, 636], ["fisinfis.FISinFIS", "fisinfis.FISinFIS.initialize", "fisinfis.FISinFIS.cleanse", "fisinfis.FISinFIS.move_to_sparse", "fisinfis.FISinFIS.algorithm1", "fisinfis.FISinFIS.algorithm2", "fisinfis.FISinFIS.plot_ARs_graphs"], "function", ["home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.initialize", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.cleanse", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.move_to_sparse", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.algorithm1", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.algorithm2", "home.repos.pwc.inspect_result.AlessioMongelluzzo_FISinFIS_Apriori_Python.code.fisinfis.FISinFIS.plot_ARs_graphs"], ["", "", "", "", "", "def", "main", "(", "topN", ",", "min_supp", ",", "min_conf", ",", "max_IDF_percentile", ",", "min_lift", ",", "\n", "data_folder", ",", "csv_name", ",", "verbose_cols", ",", "lang", ")", ":", "\n", "\n", "    ", "fisinfis", "=", "FISinFIS", "(", "topN", ",", "min_supp", ",", "min_conf", ",", "\n", "max_IDF_percentile", ",", "min_lift", ")", "\n", "\n", "fisinfis", ".", "initialize", "(", "data_folder", ",", "csv_name", ",", "verbose_cols", ")", "\n", "fisinfis", ".", "cleanse", "(", "lang", ")", "\n", "fisinfis", ".", "move_to_sparse", "(", ")", "\n", "fisinfis", ".", "algorithm1", "(", ")", "\n", "fisinfis", ".", "algorithm2", "(", ")", "\n", "fisinfis", ".", "plot_ARs_graphs", "(", ")", "\n", "\n"]]}