{"home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.eval.EnvRollout.__init__": [[21, 49], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "fabricflownet.picknet.dataset.Goals", "torch.utils.data.DataLoader", "softgym.envs.bimanual_env.BimanualEnv", "os.path.exists", "os.mkdir", "softgym.envs.bimanual_tshirt.BimanualTshirtEnv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "'towel'", "in", "args", ".", "cloth_type", ":", "\n", "            ", "self", ".", "env", "=", "BimanualEnv", "(", "use_depth", "=", "True", ",", "\n", "use_cached_states", "=", "False", ",", "\n", "horizon", "=", "1", ",", "\n", "use_desc", "=", "False", ",", "\n", "action_repeat", "=", "1", ",", "\n", "headless", "=", "args", ".", "headless", ",", "\n", "shape", "=", "'default'", "if", "'square'", "in", "args", ".", "cloth_type", "else", "'rect'", ")", "\n", "", "elif", "args", ".", "cloth_type", "==", "'tshirt'", ":", "\n", "            ", "self", ".", "env", "=", "BimanualTshirtEnv", "(", "use_depth", "=", "True", ",", "\n", "use_cached_states", "=", "False", ",", "\n", "use_desc", "=", "False", ",", "\n", "horizon", "=", "1", ",", "\n", "action_repeat", "=", "1", ",", "\n", "headless", "=", "args", ".", "headless", ")", "\n", "\n", "", "goal_data", "=", "Goals", "(", "cloth_type", "=", "args", ".", "cloth_type", ")", "\n", "self", ".", "goal_loader", "=", "DataLoader", "(", "goal_data", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "self", ".", "save_dir", "=", "f'{args.run_path}/rollout'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.eval.EnvRollout.load_model": [[50, 67], ["omegaconf.OmegaConf.load", "fabricflownet.picknet.models.FlowPickSplitModel().cuda", "eval.EnvRollout.picknet.first.load_state_dict", "eval.EnvRollout.picknet.second.load_state_dict", "eval.EnvRollout.picknet.eval", "fabricflownet.flownet.models.FlowNet().cuda", "torch.load", "eval.EnvRollout.flownet.load_state_dict", "eval.EnvRollout.flownet.eval", "torch.load", "torch.load", "fabricflownet.picknet.models.FlowPickSplitModel", "fabricflownet.flownet.models.FlowNet", "os.path.dirname"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "load_iter", "=", "0", ")", ":", "\n", "        ", "picknet_cfg", "=", "OmegaConf", ".", "load", "(", "f'{self.args.run_path}/config.yaml'", ")", "\n", "first_path", "=", "f\"{self.args.run_path}/weights/first_{load_iter}.pt\"", "\n", "second_path", "=", "f\"{self.args.run_path}/weights/second_{load_iter}.pt\"", "\n", "\n", "self", ".", "picknet", "=", "FlowPickSplitModel", "(", "\n", "s_pick_thres", "=", "self", ".", "args", ".", "single_pick_thresh", ",", "\n", "a_len_thres", "=", "self", ".", "args", ".", "action_len_thresh", ")", ".", "cuda", "(", ")", "\n", "self", ".", "picknet", ".", "first", ".", "load_state_dict", "(", "torch", ".", "load", "(", "first_path", ")", ")", "\n", "self", ".", "picknet", ".", "second", ".", "load_state_dict", "(", "torch", ".", "load", "(", "second_path", ")", ")", "\n", "self", ".", "picknet", ".", "eval", "(", ")", "\n", "\n", "# flow model", "\n", "self", ".", "flownet", "=", "FlowNet", "(", "input_channels", "=", "2", ")", ".", "cuda", "(", ")", "\n", "checkpt", "=", "torch", ".", "load", "(", "f'{os.path.dirname(__file__)}/../data/{picknet_cfg.flow}'", ")", "\n", "self", ".", "flownet", ".", "load_state_dict", "(", "checkpt", "[", "'state_dict'", "]", ")", "\n", "self", ".", "flownet", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.eval.EnvRollout.run": [[68, 123], ["enumerate", "print", "print", "numpy.save", "range", "eval.EnvRollout.env.compute_reward", "total_metrics.append", "print", "numpy.mean", "numpy.std", "len", "transition[].squeeze", "transition[].squeeze", "transition[].cuda", "range", "eval.EnvRollout.env.reset", "pyflex.set_positions", "pyflex.step", "eval.EnvRollout.env.render", "eval.EnvRollout.env.get_rgbd", "cv2.resize", "torch.FloatTensor().unsqueeze().cuda", "torch.cat().unsqueeze", "eval.EnvRollout.flownet", "time.time", "eval.EnvRollout.picknet.get_action", "times.append", "actions.append", "eval.EnvRollout.env.step", "eval.EnvRollout.env.render", "cv2.cvtColor", "eval.EnvRollout.action_viz", "cv2.imwrite", "numpy.mean", "torch.FloatTensor().unsqueeze().cuda.unsqueeze", "transition[].cuda.unsqueeze", "time.time", "torch.FloatTensor().unsqueeze", "torch.cat", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_action", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.action_viz"], ["", "def", "run", "(", "self", ",", "crumple_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"Main eval loop\n        crumple_idx: which crumpled configuration to load whenever environment is reset. -1 is no crumpling\n        \"\"\"", "\n", "actions", "=", "[", "]", "\n", "total_metrics", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "\n", "for", "goal_idx", ",", "b", "in", "enumerate", "(", "self", ".", "goal_loader", ")", ":", "\n", "            ", "for", "step", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "                ", "transition", "=", "b", "[", "step", "]", "\n", "goal_name", "=", "transition", "[", "'goal_name'", "]", "[", "0", "]", "\n", "coords_pre", "=", "transition", "[", "'coords_pre'", "]", ".", "squeeze", "(", ")", "\n", "coords_post", "=", "transition", "[", "'coords_post'", "]", ".", "squeeze", "(", ")", "\n", "goal_im", "=", "transition", "[", "'goal_im'", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "self", ".", "env", ".", "reset", "(", ")", "\n", "pyflex", ".", "set_positions", "(", "coords_pre", ")", "\n", "pyflex", ".", "step", "(", ")", "\n", "\n", "", "for", "rep", "in", "range", "(", "self", ".", "args", ".", "goal_repeat", ")", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", "\n", "_", ",", "depth", "=", "self", ".", "env", ".", "get_rgbd", "(", "cloth_only", "=", "True", ")", "\n", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "200", ",", "200", ")", ")", "\n", "curr_im", "=", "torch", ".", "FloatTensor", "(", "depth", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "curr_im", ",", "goal_im", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "flow_out", "=", "self", ".", "flownet", "(", "inp", ")", "\n", "\n", "# mask flow", "\n", "flow_out", "[", "0", ",", "0", ",", ":", ",", ":", "]", "[", "inp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "==", "0", "]", "=", "0", "\n", "flow_out", "[", "0", ",", "1", ",", ":", ",", ":", "]", "[", "inp", "[", "0", ",", "0", ",", ":", ",", ":", "]", "==", "0", "]", "=", "0", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "action", ",", "unmasked_pred", "=", "self", ".", "picknet", ".", "get_action", "(", "flow_out", ",", "curr_im", ".", "unsqueeze", "(", "0", ")", ",", "goal_im", ".", "unsqueeze", "(", "0", ")", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "times", ".", "append", "(", "duration", ")", "\n", "\n", "actions", ".", "append", "(", "action", ")", "\n", "next_state", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "action", ",", "pickplace", "=", "True", ",", "on_table", "=", "True", ")", "\n", "self", ".", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", "\n", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "next_state", "[", "\"color\"", "]", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img", "=", "self", ".", "action_viz", "(", "img", ",", "action", ",", "unmasked_pred", ")", "\n", "cv2", ".", "imwrite", "(", "f'{self.save_dir}/{goal_name}-step{step}-rep{rep}.png'", ",", "img", ")", "\n", "\n", "", "", "metrics", "=", "self", ".", "env", ".", "compute_reward", "(", "goal_pos", "=", "coords_post", "[", ":", ",", ":", "3", "]", ")", "\n", "total_metrics", ".", "append", "(", "metrics", ")", "\n", "print", "(", "f\"goal {goal_idx}: {metrics}\"", ")", "\n", "\n", "", "print", "(", "f\"average action time: {np.mean(times)}\"", ")", "\n", "print", "(", "\"\\nmean, std metrics: \"", ",", "np", ".", "mean", "(", "total_metrics", ")", ",", "np", ".", "std", "(", "total_metrics", ")", ")", "\n", "np", ".", "save", "(", "f\"{self.save_dir}/actions.npy\"", ",", "actions", ")", "\n", "return", "total_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.eval.EnvRollout.action_viz": [[124, 141], ["cv2.circle", "cv2.arrowedLine", "cv2.circle", "cv2.arrowedLine", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "action_viz", "(", "self", ",", "img", ",", "action", ",", "unmasked_pred", ")", ":", "\n", "        ", "''' img: cv2 image\n            action: pick1, place1, pick2, place2\n            unmasked_pred: pick1_pred, pick2_pred'''", "\n", "pick1", ",", "place1", ",", "pick2", ",", "place2", "=", "action", "\n", "pick1_pred", ",", "pick2_pred", "=", "unmasked_pred", "\n", "\n", "# draw the masked action", "\n", "u1", ",", "v1", "=", "pick1", "\n", "u2", ",", "v2", "=", "place1", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "v1", ")", ",", "int", "(", "u1", ")", ")", ",", "6", ",", "(", "0", ",", "200", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "arrowedLine", "(", "img", ",", "(", "int", "(", "v1", ")", ",", "int", "(", "u1", ")", ")", ",", "(", "int", "(", "v2", ")", ",", "int", "(", "u2", ")", ")", ",", "(", "0", ",", "200", ",", "0", ")", ",", "3", ")", "\n", "u1", ",", "v1", "=", "pick2", "\n", "u2", ",", "v2", "=", "place2", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "v1", ")", ",", "int", "(", "u1", ")", ")", ",", "6", ",", "(", "0", ",", "200", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "arrowedLine", "(", "img", ",", "(", "int", "(", "v1", ")", ",", "int", "(", "u1", ")", ")", ",", "(", "int", "(", "v2", ")", ",", "int", "(", "u2", ")", ")", ",", "(", "0", ",", "200", ",", "0", ")", ",", "3", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.Flow.get_flow_image": [[224, 235], ["numpy.rint", "numpy.rint().astype", "numpy.zeros", "numpy.isnan().any", "numpy.rint", "numpy.isnan"], "methods", ["None"], ["    ", "def", "get_flow_image", "(", "self", ",", "uv_obs", ",", "uv_goal_float", ")", ":", "\n", "# Compute uv diff", "\n", "        ", "uv_diff", "=", "np", ".", "rint", "(", "(", "uv_goal_float", "-", "uv_obs", ")", "/", "719", "*", "199", ")", "\n", "non_nan_idxs", "=", "~", "np", ".", "isnan", "(", "uv_diff", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "uv_diff_nonan", "=", "uv_diff", "[", "non_nan_idxs", "]", "\n", "uv_obs_nonan", "=", "np", ".", "rint", "(", "uv_obs", "[", "non_nan_idxs", "]", "/", "719", "*", "199", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# Make diff image", "\n", "im_diff", "=", "np", ".", "zeros", "(", "(", "200", ",", "200", ",", "2", ")", ")", "\n", "im_diff", "[", "uv_obs_nonan", "[", ":", ",", "1", "]", ",", "uv_obs_nonan", "[", ":", ",", "0", "]", ",", ":", "]", "=", "uv_diff_nonan", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "return", "im_diff", "", "", "", ""]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.remove_occluded_knots": [[10, 68], ["enumerate", "print", "cv2.resize", "np.array.append", "matplotlib.subplots", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].imshow", "ax[].set_title", "numpy.array", "ax[].scatter", "matplotlib.show", "numpy.isnan", "numpy.isnan", "int", "int", "softgym.envs.bimanual_env.uv_to_world_pos", "np.array.append", "copy.deepcopy", "numpy.array", "ax[].scatter", "numpy.rint", "numpy.rint", "float", "float", "copy.deepcopy", "float", "float"], "function", ["None"], ["def", "remove_occluded_knots", "(", "camera_params", ",", "knots", ",", "coords", ",", "depth", ",", "zthresh", "=", "0.001", ",", "debug_viz", "=", "False", ")", ":", "\n", "    ", "if", "depth", ".", "shape", "[", "0", "]", "<", "camera_params", "[", "'default_camera'", "]", "[", "'height'", "]", ":", "\n", "        ", "print", "(", "'Warning: resizing depth'", ")", "\n", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "camera_params", "[", "'default_camera'", "]", "[", "'height'", "]", ",", "camera_params", "[", "'default_camera'", "]", "[", "'width'", "]", ")", ")", "\n", "\n", "", "unoccluded_knots", "=", "[", "]", "\n", "occluded_knots", "=", "[", "]", "\n", "for", "i", ",", "uv", "in", "enumerate", "(", "knots", ")", ":", "\n", "        ", "u_float", ",", "v_float", "=", "uv", "[", "0", "]", ",", "uv", "[", "1", "]", "\n", "if", "np", ".", "isnan", "(", "u_float", ")", "or", "np", ".", "isnan", "(", "v_float", ")", ":", "\n", "            ", "continue", "\n", "", "u", ",", "v", "=", "int", "(", "np", ".", "rint", "(", "u_float", ")", ")", ",", "int", "(", "np", ".", "rint", "(", "v_float", ")", ")", "\n", "\n", "# check if pixel is outside of image bounds", "\n", "if", "u", "<", "0", "or", "v", "<", "0", "or", "u", ">=", "depth", ".", "shape", "[", "1", "]", "or", "v", ">=", "depth", ".", "shape", "[", "0", "]", ":", "\n", "            ", "knots", "[", "i", "]", "=", "[", "float", "(", "'NaN'", ")", ",", "float", "(", "'NaN'", ")", "]", "\n", "continue", "\n", "\n", "# Get depth into world coordinates", "\n", "", "d", "=", "depth", "[", "v", ",", "u", "]", "\n", "deproj_coords", "=", "uv_to_world_pos", "(", "camera_params", ",", "depth", ",", "u_float", ",", "v_float", ",", "particle_radius", "=", "0", ",", "on_table", "=", "False", ")", "[", "0", ":", "3", "]", "\n", "zdiff", "=", "deproj_coords", "[", "1", "]", "-", "coords", "[", "i", "]", "[", "1", "]", "\n", "\n", "# Check is well projected xyz point", "\n", "if", "zdiff", ">", "zthresh", ":", "\n", "# invalidate u, v and continue", "\n", "            ", "occluded_knots", ".", "append", "(", "deepcopy", "(", "knots", "[", "i", "]", ")", ")", "\n", "knots", "[", "i", "]", "=", "[", "float", "(", "'NaN'", ")", ",", "float", "(", "'NaN'", ")", "]", "\n", "continue", "\n", "\n", "", "unoccluded_knots", ".", "append", "(", "deepcopy", "(", "knots", "[", "i", "]", ")", ")", "\n", "\n", "# Debug plotting", "\n", "", "if", "debug_viz", ":", "\n", "# 3D scatterplot", "\n", "# fig = plt.figure()", "\n", "# ax = fig.add_subplot(1, 1, 1, projection='3d')", "\n", "# for i, (u, v) in enumerate(knots[::3]):", "\n", "#     c = 'r' if np.isnan(u) or np.isnan(v) else 'b'", "\n", "#     ax.scatter(coords[i, 0], coords[i, 2], coords[i, 1], s=1, c=c)", "\n", "# plt.show()", "\n", "\n", "# 2D plot", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "8", ",", "3", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'depth'", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "depth", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'occluded points\\nin red'", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "depth", ")", "\n", "if", "occluded_knots", "!=", "[", "]", ":", "\n", "            ", "occluded_knots", "=", "np", ".", "array", "(", "occluded_knots", ")", "\n", "ax", "[", "1", "]", ".", "scatter", "(", "occluded_knots", "[", ":", ",", "0", "]", ",", "occluded_knots", "[", ":", ",", "1", "]", ",", "marker", "=", "'.'", ",", "s", "=", "1", ",", "c", "=", "'r'", ",", "alpha", "=", "0.4", ")", "\n", "", "ax", "[", "2", "]", ".", "imshow", "(", "depth", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'unoccluded points\\nin blue'", ")", "\n", "unoccluded_knots", "=", "np", ".", "array", "(", "unoccluded_knots", ")", "\n", "ax", "[", "2", "]", ".", "scatter", "(", "unoccluded_knots", "[", ":", ",", "0", "]", ",", "unoccluded_knots", "[", ":", ",", "1", "]", ",", "marker", "=", "'.'", ",", "s", "=", "1", ",", "alpha", "=", "0.4", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "knots", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.get_harris": [[69, 90], ["cv2.cornerHarris", "cv2.dilate", "numpy.ones", "cv2.cornerHarris.max"], "function", ["None"], ["", "def", "get_harris", "(", "mask", ",", "thresh", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"Harris corner detector\n    Params\n    ------\n        - mask: np.float32 image of 0.0 and 1.0\n        - thresh: threshold for filtering small harris values    Returns\n    -------\n        - harris: np.float32 array of\n    \"\"\"", "\n", "# Params for cornerHarris: ", "\n", "# mask - Input image, it should be grayscale and float32 type.", "\n", "# blockSize - It is the size of neighbourhood considered for corner detection", "\n", "# ksize - Aperture parameter of Sobel derivative used.", "\n", "# k - Harris detector free parameter in the equation.", "\n", "# https://docs.opencv.org/master/dd/d1a/group__imgproc__feature.html#gac1fc3598018010880e370e2f709b4345", "\n", "harris", "=", "cv2", ".", "cornerHarris", "(", "mask", ",", "blockSize", "=", "5", ",", "ksize", "=", "5", ",", "k", "=", "0.01", ")", "\n", "harris", "[", "harris", "<", "thresh", "*", "harris", ".", "max", "(", ")", "]", "=", "0.0", "# filter small values", "\n", "harris", "[", "harris", "!=", "0", "]", "=", "1.0", "\n", "harris_dilated", "=", "cv2", ".", "dilate", "(", "harris", ",", "kernel", "=", "np", ".", "ones", "(", "(", "7", ",", "7", ")", ",", "np", ".", "uint8", ")", ")", "\n", "harris_dilated", "[", "mask", "==", "0", "]", "=", "0", "\n", "return", "harris_dilated", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.plot_flow": [[91, 112], ["numpy.zeros", "ax.imshow", "numpy.where", "len", "numpy.random.choice", "numpy.linalg.norm", "matplotlib.colors.Normalize", "mpl.colors.Normalize.autoscale", "ax.quiver", "numpy.arange", "int", "cm", "mpl.colors.Normalize."], "function", ["None"], ["", "def", "plot_flow", "(", "ax", ",", "flow_im", ",", "skip", "=", "0.25", ")", ":", "\n", "    ", "\"\"\"Plot flow as a set of arrows on an existing axis.\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "flow_im", ".", "shape", "\n", "bg", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ")", "\n", "ax", ".", "imshow", "(", "bg", ")", "\n", "ys", ",", "xs", ",", "_", "=", "np", ".", "where", "(", "flow_im", "!=", "0", ")", "\n", "n", "=", "len", "(", "xs", ")", "\n", "\n", "inds", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n", ")", ",", "size", "=", "int", "(", "n", "*", "skip", ")", ",", "replace", "=", "False", ")", "\n", "flu", "=", "flow_im", "[", "ys", "[", "inds", "]", ",", "xs", "[", "inds", "]", ",", "1", "]", "\n", "flv", "=", "flow_im", "[", "ys", "[", "inds", "]", ",", "xs", "[", "inds", "]", ",", "0", "]", "\n", "mags", "=", "np", ".", "linalg", ".", "norm", "(", "flow_im", "[", "ys", "[", "inds", "]", ",", "xs", "[", "inds", "]", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "norm", "=", "mpl", ".", "colors", ".", "Normalize", "(", ")", "\n", "norm", ".", "autoscale", "(", "mags", ")", "\n", "cm", "=", "mpl", ".", "cm", ".", "autumn", "\n", "\n", "ax", ".", "quiver", "(", "xs", "[", "inds", "]", ",", "ys", "[", "inds", "]", ",", "flu", ",", "flv", ",", "\n", "alpha", "=", "0.9", ",", "color", "=", "cm", "(", "norm", "(", "mags", ")", ")", ",", "angles", "=", "'xy'", ",", "\n", "scale_units", "=", "'xy'", ",", "scale", "=", "1", ",", "\n", "headwidth", "=", "10", ",", "headlength", "=", "10", ",", "width", "=", "0.0025", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.flow_affinewarp": [[113, 146], ["cv2.getRotationMatrix2D", "cv2.warpAffine", "numpy.reshape", "numpy.reshape"], "function", ["None"], ["", "def", "flow_affinewarp", "(", "flow_im", ",", "angle", ",", "dx", ",", "dy", ")", ":", "\n", "    ", "\"\"\"Affine transformation of flow image and per-pixel flow vectors.    \n\n    Parameters\n    -----------\n    flow_im : np.ndarray\n        Flow image\n        \n    angle : float\n        Angle in degrees of rotation    \n        \n    dx : int\n        delta x translation    \n        \n    dy : int\n        delta y translation    \n\n    Returns\n    -------\n    flow_pxrot: np.ndarray\n        Flow image transformed both on image level and per-pixel level.\n    \"\"\"", "\n", "# Translate and rotate image", "\n", "h", ",", "w", ",", "_", "=", "flow_im", ".", "shape", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "w", "//", "2", ",", "h", "//", "2", ")", ",", "angle", ",", "1.0", ")", "\n", "M", "[", ":", "2", ",", "2", "]", "+=", "[", "dx", ",", "dy", "]", "\n", "flow_im_tf", "=", "cv2", ".", "warpAffine", "(", "flow_im", ",", "M", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# Rotate per-pixel flow values", "\n", "R", "=", "M", "[", ":", "2", ",", ":", "2", "]", ".", "T", "\n", "px", "=", "np", ".", "reshape", "(", "flow_im_tf", ",", "(", "h", "*", "w", ",", "2", ")", ")", ".", "T", "# (2 x h*w) pixel values", "\n", "flow_px_tf", "=", "np", ".", "reshape", "(", "(", "R", "@", "px", ")", ".", "T", ",", "(", "h", ",", "w", ",", "2", ")", ")", "\n", "return", "flow_px_tf", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.unravel_index": [[147, 169], ["reversed", "torch.stack", "torch.stack", "torch.stack.append"], "function", ["None"], ["", "def", "unravel_index", "(", "indices", ",", "shape", ")", ":", "\n", "    ", "r\"\"\"Converts flat indices into unraveled coordinates in a target shape.\n\n    This is a `torch` implementation of `numpy.unravel_index`.\n\n    Args:\n        indices: A tensor of (flat) indices, (*, N).\n        shape: The targeted shape, (D,).\n\n    Returns:\n        The unraveled coordinates, (*, N, D).\n    \"\"\"", "\n", "\n", "coord", "=", "[", "]", "\n", "\n", "for", "dim", "in", "reversed", "(", "shape", ")", ":", "\n", "        ", "coord", ".", "append", "(", "indices", "%", "dim", ")", "\n", "indices", "=", "indices", "//", "dim", "\n", "\n", "", "coord", "=", "torch", ".", "stack", "(", "coord", "[", ":", ":", "-", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.get_flow_place_pt": [[170, 183], ["numpy.argwhere", "numpy.argwhere"], "function", ["None"], ["", "def", "get_flow_place_pt", "(", "u", ",", "v", ",", "flow", ")", ":", "\n", "    ", "flow_u_idxs", "=", "np", ".", "argwhere", "(", "flow", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "flow_v_idxs", "=", "np", ".", "argwhere", "(", "flow", "[", "1", ",", ":", ",", ":", "]", ")", "\n", "nearest_u_idx", "=", "flow_u_idxs", "[", "(", "(", "flow_u_idxs", "-", "[", "u", ",", "v", "]", ")", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "argmin", "(", ")", "]", "\n", "nearest_v_idx", "=", "flow_v_idxs", "[", "(", "(", "flow_v_idxs", "-", "[", "u", ",", "v", "]", ")", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "argmin", "(", ")", "]", "\n", "\n", "flow_u", "=", "flow", "[", "0", ",", "nearest_u_idx", "[", "0", "]", ",", "nearest_u_idx", "[", "1", "]", "]", "\n", "flow_v", "=", "flow", "[", "1", ",", "nearest_v_idx", "[", "0", "]", ",", "nearest_v_idx", "[", "1", "]", "]", "\n", "\n", "new_u", "=", "u", "+", "flow_u", "\n", "new_v", "=", "v", "+", "flow_v", "\n", "\n", "return", "new_u", ",", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.get_gaussian": [[184, 195], ["torch.arange().float", "torch.arange().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.outer", "torch.outer", "g.unsqueeze.unsqueeze", "torch.arange", "torch.arange", "g.unsqueeze.min", "g.unsqueeze.max", "g.unsqueeze.min"], "function", ["None"], ["", "def", "get_gaussian", "(", "u", ",", "v", ",", "sigma", "=", "5", ",", "size", "=", "200", ")", ":", "\n", "    ", "x0", ",", "y0", "=", "u", ",", "v", "\n", "num", "=", "torch", ".", "arange", "(", "size", ")", ".", "float", "(", ")", "\n", "x", ",", "y", "=", "num", ",", "num", "\n", "gx", "=", "torch", ".", "exp", "(", "-", "(", "x", "-", "x0", ")", "**", "2", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "gy", "=", "torch", ".", "exp", "(", "-", "(", "y", "-", "y0", ")", "**", "2", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g", "=", "torch", ".", "outer", "(", "gx", ",", "gy", ")", "\n", "g", "=", "(", "g", "-", "g", ".", "min", "(", ")", ")", "/", "(", "g", ".", "max", "(", ")", "-", "g", ".", "min", "(", ")", ")", "\n", "g", "=", "g", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.action_viz": [[196, 222], ["cv2.drawMarker", "cv2.drawMarker", "cv2.circle", "cv2.arrowedLine", "cv2.circle", "cv2.arrowedLine", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "action_viz", "(", "img", ",", "action", ",", "unmasked_pred", ")", ":", "\n", "    ", "''' img: cv2 image\n        action: pick1, place1, pick2, place2\n        unmasked_pred: pick1_pred, pick2_pred'''", "\n", "pick1", ",", "place1", ",", "pick2", ",", "place2", "=", "action", "\n", "pick1_pred", ",", "pick2_pred", "=", "unmasked_pred", "\n", "\n", "# draw the original predictions", "\n", "u", ",", "v", "=", "pick1_pred", "\n", "cv2", ".", "drawMarker", "(", "img", ",", "(", "int", "(", "u", ")", ",", "int", "(", "v", ")", ")", ",", "(", "0", ",", "0", ",", "200", ")", ",", "markerType", "=", "cv2", ".", "MARKER_STAR", ",", "\n", "markerSize", "=", "10", ",", "thickness", "=", "2", ",", "line_type", "=", "cv2", ".", "LINE_AA", ")", "\n", "u", ",", "v", "=", "pick2_pred", "\n", "cv2", ".", "drawMarker", "(", "img", ",", "(", "int", "(", "u", ")", ",", "int", "(", "v", ")", ")", ",", "(", "0", ",", "0", ",", "200", ")", ",", "markerType", "=", "cv2", ".", "MARKER_STAR", ",", "\n", "markerSize", "=", "10", ",", "thickness", "=", "2", ",", "line_type", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# draw the masked action", "\n", "u1", ",", "v1", "=", "pick1", "\n", "u2", ",", "v2", "=", "place1", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "u1", ")", ",", "int", "(", "v1", ")", ")", ",", "6", ",", "(", "0", ",", "200", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "arrowedLine", "(", "img", ",", "(", "int", "(", "u1", ")", ",", "int", "(", "v1", ")", ")", ",", "(", "int", "(", "u2", ")", ",", "int", "(", "v2", ")", ")", ",", "(", "0", ",", "200", ",", "0", ")", ",", "2", ")", "\n", "u1", ",", "v1", "=", "pick2", "\n", "u2", ",", "v2", "=", "place2", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "u1", ")", ",", "int", "(", "v1", ")", ")", ",", "6", ",", "(", "0", ",", "200", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "arrowedLine", "(", "img", ",", "(", "int", "(", "u1", ")", ",", "int", "(", "v1", ")", ")", ",", "(", "int", "(", "u2", ")", ",", "int", "(", "v2", ")", ")", ",", "(", "0", ",", "200", ",", "0", ")", ",", "2", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.__init__": [[36, 86], ["pytorch_lightning.LightningModule.__init__", "models.conv", "models.conv", "models.conv", "models.conv", "models.conv", "models.conv", "models.conv", "models.conv", "models.conv", "models.conv", "models.deconv", "models.deconv", "models.deconv", "models.deconv", "models.predict_flow", "models.predict_flow", "models.predict_flow", "models.predict_flow", "models.predict_flow", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "models.FlowNet.modules", "torch.Upsample", "torch.Upsample", "isinstance", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.Goals.__init__", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.deconv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.deconv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.deconv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.deconv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.predict_flow", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.predict_flow", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.predict_flow", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.predict_flow", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.predict_flow"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_channels", "=", "2", ",", "\n", "batchNorm", "=", "True", ",", "\n", "lr", "=", "0.0001", ",", "\n", "weight_decay", "=", "0.0001", ")", ":", "\n", "        ", "super", "(", "FlowNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "fs", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", "# filter sizes", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "self", ".", "conv1", "=", "conv", "(", "self", ".", "batchNorm", ",", "input_channels", ",", "fs", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ")", "# 384 -> (384 - 7 + 2*3)/2 + 1 = 377", "\n", "self", ".", "conv2", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "2", "]", ",", "fs", "[", "2", "]", ")", "\n", "self", ".", "conv4", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "2", "]", ",", "fs", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv4_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "3", "]", ")", "\n", "self", ".", "conv5", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv5_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "3", "]", ")", "\n", "self", ".", "conv6", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "4", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv6_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "4", "]", ",", "fs", "[", "4", "]", ")", "\n", "\n", "self", ".", "deconv5", "=", "deconv", "(", "fs", "[", "4", "]", ",", "fs", "[", "3", "]", ")", "\n", "self", ".", "deconv4", "=", "deconv", "(", "fs", "[", "3", "]", "+", "fs", "[", "3", "]", "+", "2", ",", "fs", "[", "2", "]", ")", "\n", "self", ".", "deconv3", "=", "deconv", "(", "fs", "[", "3", "]", "+", "fs", "[", "2", "]", "+", "2", ",", "fs", "[", "1", "]", ")", "\n", "self", ".", "deconv2", "=", "deconv", "(", "fs", "[", "2", "]", "+", "fs", "[", "1", "]", "+", "2", ",", "fs", "[", "0", "]", ",", "ksize", "=", "4", ")", "\n", "\n", "self", ".", "predict_flow6", "=", "predict_flow", "(", "fs", "[", "4", "]", ")", "\n", "self", ".", "predict_flow5", "=", "predict_flow", "(", "fs", "[", "3", "]", "+", "fs", "[", "3", "]", "+", "2", ")", "\n", "self", ".", "predict_flow4", "=", "predict_flow", "(", "fs", "[", "3", "]", "+", "fs", "[", "2", "]", "+", "2", ")", "\n", "self", ".", "predict_flow3", "=", "predict_flow", "(", "fs", "[", "2", "]", "+", "fs", "[", "1", "]", "+", "2", ")", "\n", "self", ".", "predict_flow2", "=", "predict_flow", "(", "fs", "[", "1", "]", "+", "fs", "[", "0", "]", "+", "2", ")", "\n", "\n", "self", ".", "upsampled_flow6_to_5", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "# (H_in-1)*stride - 2*padding + (kernel-1) + 1", "\n", "self", ".", "upsampled_flow5_to_4", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "upsampled_flow4_to_3", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "upsampled_flow3_to_2", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "uniform_", "(", "m", ".", "bias", ")", "\n", "", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "uniform_", "(", "m", ".", "bias", ")", "\n", "", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "", "self", ".", "upsample1", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.forward": [[87, 119], ["models.FlowNet.conv1", "models.FlowNet.conv2", "models.FlowNet.conv3_1", "models.FlowNet.conv4_1", "models.FlowNet.conv5_1", "models.FlowNet.conv6_1", "models.FlowNet.predict_flow6", "models.FlowNet.upsampled_flow6_to_5", "models.FlowNet.deconv5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.FlowNet.predict_flow5", "models.FlowNet.upsampled_flow5_to_4", "models.FlowNet.deconv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.FlowNet.predict_flow4", "models.FlowNet.upsampled_flow4_to_3", "models.FlowNet.deconv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.FlowNet.predict_flow3", "models.FlowNet.upsampled_flow3_to_2", "models.FlowNet.deconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.FlowNet.predict_flow2", "models.FlowNet.upsample1", "models.FlowNet.conv3", "models.FlowNet.conv4", "models.FlowNet.conv5", "models.FlowNet.conv6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out_conv2", "=", "self", ".", "conv2", "(", "out_conv1", ")", "\n", "out_conv3", "=", "self", ".", "conv3_1", "(", "self", ".", "conv3", "(", "out_conv2", ")", ")", "\n", "out_conv4", "=", "self", ".", "conv4_1", "(", "self", ".", "conv4", "(", "out_conv3", ")", ")", "\n", "out_conv5", "=", "self", ".", "conv5_1", "(", "self", ".", "conv5", "(", "out_conv4", ")", ")", "\n", "out_conv6", "=", "self", ".", "conv6_1", "(", "self", ".", "conv6", "(", "out_conv5", ")", ")", "\n", "\n", "flow6", "=", "self", ".", "predict_flow6", "(", "out_conv6", ")", "\n", "flow6_up", "=", "self", ".", "upsampled_flow6_to_5", "(", "flow6", ")", "\n", "out_deconv5", "=", "self", ".", "deconv5", "(", "out_conv6", ")", "\n", "\n", "concat5", "=", "torch", ".", "cat", "(", "(", "out_conv5", ",", "out_deconv5", ",", "flow6_up", ")", ",", "1", ")", "\n", "flow5", "=", "self", ".", "predict_flow5", "(", "concat5", ")", "\n", "flow5_up", "=", "self", ".", "upsampled_flow5_to_4", "(", "flow5", ")", "\n", "out_deconv4", "=", "self", ".", "deconv4", "(", "concat5", ")", "\n", "\n", "concat4", "=", "torch", ".", "cat", "(", "(", "out_conv4", ",", "out_deconv4", ",", "flow5_up", ")", ",", "1", ")", "\n", "flow4", "=", "self", ".", "predict_flow4", "(", "concat4", ")", "\n", "flow4_up", "=", "self", ".", "upsampled_flow4_to_3", "(", "flow4", ")", "\n", "out_deconv3", "=", "self", ".", "deconv3", "(", "concat4", ")", "\n", "\n", "concat3", "=", "torch", ".", "cat", "(", "(", "out_conv3", ",", "out_deconv3", ",", "flow4_up", ")", ",", "1", ")", "\n", "flow3", "=", "self", ".", "predict_flow3", "(", "concat3", ")", "\n", "flow3_up", "=", "self", ".", "upsampled_flow3_to_2", "(", "flow3", ")", "\n", "out_deconv2", "=", "self", ".", "deconv2", "(", "concat3", ")", "\n", "\n", "concat2", "=", "torch", ".", "cat", "(", "(", "out_conv2", ",", "out_deconv2", ",", "flow3_up", ")", ",", "1", ")", "\n", "flow2", "=", "self", ".", "predict_flow2", "(", "concat2", ")", "\n", "\n", "out", "=", "self", ".", "upsample1", "(", "flow2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.loss": [[120, 128], ["input_flow.size", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "mean_norm_diff_flow.mean", "torch.linalg.norm.sum", "torch.linalg.norm.sum", "torch.reshape.sum", "torch.reshape.sum"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "input_flow", ",", "target_flow", ",", "mask", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "input_flow", ".", "size", "(", ")", "\n", "diff_flow", "=", "torch", ".", "reshape", "(", "target_flow", "-", "input_flow", "*", "mask", ",", "(", "b", ",", "c", ",", "h", "*", "w", ")", ")", "\n", "mask", "=", "torch", ".", "reshape", "(", "mask", ",", "(", "b", ",", "h", "*", "w", ")", ")", "\n", "norm_diff_flow", "=", "torch", ".", "linalg", ".", "norm", "(", "diff_flow", ",", "ord", "=", "2", ",", "dim", "=", "1", ")", "# B x 40000 get norm of flow vector diff", "\n", "mean_norm_diff_flow", "=", "norm_diff_flow", ".", "sum", "(", "dim", "=", "1", ")", "/", "mask", ".", "sum", "(", "dim", "=", "1", ")", "# B x 1 get average norm for each image", "\n", "batch_mean_diff_flow", "=", "mean_norm_diff_flow", ".", "mean", "(", ")", "# mean over the batch", "\n", "return", "batch_mean_diff_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.training_step": [[129, 141], ["models.FlowNet.forward", "models.FlowNet.loss", "models.FlowNet.log", "models.FlowNet.plot"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.forward", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.loss", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.plot"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "depth_input", "=", "batch", "[", "'depths'", "]", "\n", "flow_gt", "=", "batch", "[", "'flow_gt'", "]", "\n", "loss_mask", "=", "batch", "[", "'loss_mask'", "]", "\n", "flow_out", "=", "self", ".", "forward", "(", "depth_input", ")", "\n", "train_loss", "=", "self", ".", "loss", "(", "flow_out", ",", "flow_gt", ",", "loss_mask", ")", "\n", "loss", "=", "train_loss", "\n", "\n", "if", "batch_idx", "==", "0", ":", "\n", "            ", "self", ".", "plot", "(", "depth_input", ",", "loss_mask", ",", "flow_gt", ",", "flow_out", ",", "stage", "=", "\"train\"", ")", "\n", "", "self", ".", "log", "(", "'loss/train'", ",", "loss", ")", "\n", "return", "{", "'loss'", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.validation_step": [[142, 153], ["models.FlowNet.forward", "models.FlowNet.loss", "models.FlowNet.log", "models.FlowNet.plot"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.forward", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.loss", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.plot"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "depth_input", "=", "batch", "[", "'depths'", "]", "\n", "flow_gt", "=", "batch", "[", "'flow_gt'", "]", "\n", "loss_mask", "=", "batch", "[", "'loss_mask'", "]", "\n", "flow_out", "=", "self", ".", "forward", "(", "depth_input", ")", "\n", "loss", "=", "self", ".", "loss", "(", "flow_out", ",", "flow_gt", ",", "loss_mask", ")", "\n", "\n", "if", "batch_idx", "==", "0", ":", "\n", "            ", "self", ".", "plot", "(", "depth_input", ",", "loss_mask", ",", "flow_gt", ",", "flow_out", ",", "stage", "=", "\"val\"", ")", "\n", "", "self", ".", "log", "(", "'loss/val'", ",", "loss", ")", "\n", "return", "{", "'loss'", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.configure_optimizers": [[154, 157], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "models.FlowNet.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.FlowNet.plot": [[158, 184], ["depth_input[].detach().cpu().numpy", "depth_input[].detach().cpu().numpy", "loss_mask[].detach().squeeze().cpu().numpy", "flow_gt[].detach().permute().cpu().numpy", "flow_out[].detach().permute().cpu().numpy", "matplotlib.subplots", "matplotlib.subplots", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "fabricflownet.utils.plot_flow", "ax[].set_title", "fabricflownet.utils.plot_flow", "ax[].set_title", "ax[].imshow", "matplotlib.tight_layout", "matplotlib.tight_layout", "models.FlowNet.logger[].experiment.add_figure", "matplotlib.close", "matplotlib.close", "depth_input[].detach().cpu", "depth_input[].detach().cpu", "loss_mask[].detach().squeeze().cpu", "flow_gt[].detach().permute().cpu", "flow_out[].detach().permute().cpu", "depth_input[].detach", "depth_input[].detach", "loss_mask[].detach().squeeze", "flow_gt[].detach().permute", "flow_out[].detach().permute", "loss_mask[].detach", "flow_gt[].detach", "flow_out[].detach"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.plot_flow", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.plot_flow"], ["", "def", "plot", "(", "self", ",", "depth_input", ",", "loss_mask", ",", "flow_gt", ",", "flow_out", ",", "stage", ")", ":", "\n", "        ", "im1", "=", "depth_input", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "im2", "=", "depth_input", "[", "0", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_mask", "=", "loss_mask", "[", "0", "]", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_gt", "=", "flow_gt", "[", "0", "]", ".", "detach", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_out", "=", "flow_out", "[", "0", "]", ".", "detach", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "5", ",", "figsize", "=", "(", "12", ",", "3", ")", ",", "dpi", "=", "300", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"depth before\"", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "im1", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"depth after\"", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "im2", ")", "\n", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"ground-truth flow\"", ")", "\n", "plot_flow", "(", "ax", "[", "2", "]", ",", "flow_gt", ")", "\n", "\n", "ax", "[", "3", "]", ".", "set_title", "(", "\"predicted flow (masked)\"", ")", "\n", "flow_out", "[", "loss_mask", "==", "0", ",", ":", "]", "=", "0", "\n", "plot_flow", "(", "ax", "[", "3", "]", ",", "flow_out", ")", "\n", "\n", "ax", "[", "4", "]", ".", "set_title", "(", "\"loss mask\"", ")", "\n", "ax", "[", "4", "]", ".", "imshow", "(", "loss_mask", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "self", ".", "logger", "[", "1", "]", ".", "experiment", ".", "add_figure", "(", "stage", ",", "fig", ",", "self", ".", "global_step", ")", "# tensorboard", "\n", "plt", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.conv": [[13, 24], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.LeakyReLU"], "function", ["None"], ["def", "conv", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.predict_flow": [[26, 28], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "predict_flow", "(", "in_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.models.deconv": [[29, 33], ["torch.Sequential", "torch.ConvTranspose2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "deconv", "(", "in_planes", ",", "out_planes", ",", "ksize", "=", "3", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.train.get_flownet_dataloaders": [[17, 46], ["sorted", "sorted", "numpy.testing.assert_equal", "fabricflownet.flownet.dataset.FlowDataset", "fabricflownet.flownet.dataset.FlowDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "numpy.load", "numpy.load", "os.listdir", "os.listdir", "fn.split", "len", "fn.split", "len"], "function", ["None"], ["def", "get_flownet_dataloaders", "(", "cfg", ")", ":", "\n", "# Get training samples", "\n", "    ", "trainpath", "=", "f'{cfg.base_path}/{cfg.train_name}'", "\n", "trainfs", "=", "sorted", "(", "[", "'_'", ".", "join", "(", "fn", ".", "split", "(", "'_'", ")", "[", "0", ":", "2", "]", ")", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "f'{trainpath}/actions'", ")", "]", ")", "\n", "if", "cfg", "[", "'max_train_samples'", "]", "!=", "None", ":", "\n", "        ", "trainfs", "=", "trainfs", "[", ":", "cfg", "[", "'max_train_samples'", "]", "]", "\n", "print", "(", "f\"Max training set: {len(trainfs)}\"", ")", "\n", "\n", "# Get validation samples", "\n", "", "valpath", "=", "f'{cfg.base_path}/{cfg.val_name}'", "\n", "valfs", "=", "sorted", "(", "[", "'_'", ".", "join", "(", "fn", ".", "split", "(", "'_'", ")", "[", "0", ":", "2", "]", ")", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "f'{valpath}/actions'", ")", "]", ")", "\n", "if", "cfg", "[", "'max_val_samples'", "]", "!=", "None", ":", "\n", "        ", "valfs", "=", "valfs", "[", ":", "cfg", "[", "'max_val_samples'", "]", "]", "\n", "print", "(", "f\"Max val set: {len(valfs)}\"", ")", "\n", "\n", "# Get camera params", "\n", "", "train_camera_params", "=", "np", ".", "load", "(", "f\"{trainpath}/camera_params.npy\"", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "val_camera_params", "=", "np", ".", "load", "(", "f\"{valpath}/camera_params.npy\"", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "np", ".", "testing", ".", "assert_equal", "(", "val_camera_params", ",", "train_camera_params", ")", "\n", "camera_params", "=", "train_camera_params", "\n", "\n", "# Get datasets", "\n", "train_data", "=", "FlowDataset", "(", "cfg", ",", "trainfs", ",", "camera_params", ",", "stage", "=", "'train'", ")", "\n", "val_data", "=", "FlowDataset", "(", "cfg", ",", "valfs", ",", "camera_params", ",", "stage", "=", "'val'", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cfg", ".", "workers", ",", "persistent_workers", "=", "cfg", ".", "workers", ">", "0", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_data", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cfg", ".", "workers", ",", "persistent_workers", "=", "cfg", ".", "workers", ">", "0", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.train.main": [[47, 66], ["hydra.main", "pytorch_lightning.seed_everything", "train.get_flownet_dataloaders", "pytorch_lightning.loggers.CSVLogger", "pytorch_lightning.loggers.TensorBoardLogger", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer", "fabricflownet.flownet.models.FlowNet", "pl.Trainer.fit", "open", "f.write", "len", "len"], "function", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.train.main", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.train.get_flownet_dataloaders"], ["", "@", "hydra", ".", "main", "(", "config_name", "=", "\"config\"", ")", "\n", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "seed_utils", ".", "seed_everything", "(", "cfg", ".", "seed", ")", "\n", "with", "open", "(", "'.hydra/command.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'python '", "+", "' '", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "\n", "", "train_loader", ",", "val_loader", "=", "get_flownet_dataloaders", "(", "cfg", ")", "\n", "csv_logger", "=", "pl_loggers", ".", "CSVLogger", "(", "save_dir", "=", "cfg", ".", "csv_log_dir", ")", "\n", "tb_logger", "=", "pl_loggers", ".", "TensorBoardLogger", "(", "save_dir", "=", "cfg", ".", "tboard_log_dir", ")", "\n", "chkpt_cb", "=", "ModelCheckpoint", "(", "monitor", "=", "'loss/val'", ",", "save_last", "=", "True", ",", "save_top_k", "=", "-", "1", ",", "every_n_val_epochs", "=", "10", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "gpus", "=", "[", "0", "]", ",", "\n", "logger", "=", "[", "csv_logger", ",", "tb_logger", "]", ",", "\n", "max_epochs", "=", "cfg", ".", "epochs", ",", "\n", "check_val_every_n_epoch", "=", "cfg", ".", "check_val_every_n_epoch", ",", "\n", "log_every_n_steps", "=", "len", "(", "train_loader", ")", "if", "len", "(", "train_loader", ")", "<", "50", "else", "50", ",", "\n", "callbacks", "=", "[", "chkpt_cb", "]", ")", "\n", "\n", "flownet", "=", "FlowNet", "(", "**", "cfg", ".", "net_cfg", ")", "\n", "trainer", ".", "fit", "(", "flownet", ",", "train_loader", ",", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset.__init__": [[17, 26], ["torchvision.Compose", "torchvision.Compose", "fabricflownet.utils.Flow", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "ids", ",", "camera_params", ",", "stage", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "camera_params", "=", "camera_params", "\n", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "data_path", "=", "f'{cfg.base_path}/{cfg.train_name}'", "if", "stage", "==", "'train'", "else", "f'{cfg.base_path}/{cfg.val_name}'", "\n", "self", ".", "ids", "=", "ids", "\n", "self", ".", "flow", "=", "Flow", "(", ")", "\n", "self", ".", "stage", "=", "stage", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._get_uv_pre": [[30, 40], ["numpy.load", "numpy.load", "cv2.resize", "fabricflownet.utils.remove_occluded_knots", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.remove_occluded_knots"], ["", "def", "_get_uv_pre", "(", "self", ",", "depth_pre", ",", "id", ")", ":", "\n", "        ", "coords_pre", "=", "np", ".", "load", "(", "f'{self.data_path}/coords/{id}_coords_before.npy'", ")", "\n", "uv_pre_float", "=", "np", ".", "load", "(", "f'{self.data_path}/knots/{id}_knots_before.npy'", ")", "\n", "\n", "# Remove occluded points and save", "\n", "depth_pre_resized", "=", "cv2", ".", "resize", "(", "depth_pre", ",", "(", "720", ",", "720", ")", ")", "\n", "uv_pre", "=", "remove_occluded_knots", "(", "self", ".", "camera_params", ",", "uv_pre_float", ",", "coords_pre", ",", "depth_pre_resized", ",", "\n", "zthresh", "=", "0.005", ",", "debug_viz", "=", "self", ".", "cfg", ".", "debug_viz", ".", "remove_occlusions", ")", "\n", "np", ".", "save", "(", "f'{self.data_path}/knots/{id}_visibleknots_before.npy'", ",", "uv_pre", ")", "\n", "return", "uv_pre", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset.__getitem__": [[41, 89], ["numpy.load", "dataset.FlowDataset.transform", "dataset.FlowDataset.transform", "numpy.load", "numpy.load", "dataset.FlowDataset.transform", "float", "float", "dataset.FlowDataset.flow.get_flow_image", "dataset.FlowDataset.transform", "torch.zeros", "numpy.rint().astype", "loss_mask.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "os.path.exists", "dataset.FlowDataset._get_uv_pre", "numpy.load", "dataset.FlowDataset._spatial_aug", "dataset.FlowDataset.squeeze().numpy", "dataset.FlowDataset.squeeze().numpy", "dataset.FlowDataset.permute().numpy", "loss_mask.unsqueeze.unsqueeze.squeeze().numpy", "dataset.FlowDataset._plot", "torch.rand", "numpy.rint", "dataset.FlowDataset.squeeze", "dataset.FlowDataset.squeeze", "dataset.FlowDataset.permute", "loss_mask.unsqueeze.unsqueeze.squeeze", "numpy.isnan().any", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.Flow.get_flow_image", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._get_uv_pre", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._spatial_aug", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._plot"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "# Load depth before action, cloth mask, knots", "\n", "depth_pre", "=", "np", ".", "load", "(", "f'{self.data_path}/rendered_images/{id}_depth_before.npy'", ")", "\n", "cloth_mask", "=", "(", "depth_pre", "!=", "0", ")", ".", "astype", "(", "float", ")", "# 200 x 200", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f'{self.data_path}/knots/{id}_visibleknots_before.npy'", ")", ":", "\n", "            ", "uv_pre", "=", "self", ".", "_get_uv_pre", "(", "depth_pre", ",", "id", ")", "\n", "", "else", ":", "\n", "            ", "uv_pre", "=", "np", ".", "load", "(", "f'{self.data_path}/knots/{id}_visibleknots_before.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "depth_pre", "=", "self", ".", "transform", "(", "depth_pre", ")", "\n", "cloth_mask", "=", "self", ".", "transform", "(", "cloth_mask", ")", "\n", "\n", "# Load depth after action and knots", "\n", "depth_post", "=", "np", ".", "load", "(", "f'{self.data_path}/rendered_images/{id}_depth_after.npy'", ")", "\n", "uv_post_float", "=", "np", ".", "load", "(", "f'{self.data_path}/knots/{id}_knots_after.npy'", ")", "\n", "depth_post", "=", "self", ".", "transform", "(", "depth_post", ")", "\n", "\n", "# Spatial augmentation", "\n", "if", "self", ".", "stage", "==", "'train'", "and", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "cfg", ".", "spatial_aug", ":", "\n", "            ", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", "=", "self", ".", "_spatial_aug", "(", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", ")", "\n", "\n", "# Remove out of bounds", "\n", "", "uv_pre", "[", "uv_pre", "<", "0", "]", "=", "float", "(", "'NaN'", ")", "\n", "uv_pre", "[", "uv_pre", ">=", "720", "]", "=", "float", "(", "'NaN'", ")", "\n", "\n", "# Get flow image", "\n", "flow_gt", "=", "self", ".", "flow", ".", "get_flow_image", "(", "uv_pre", ",", "uv_post_float", ")", "\n", "flow_gt", "=", "self", ".", "transform", "(", "flow_gt", ")", "\n", "\n", "# Get loss mask", "\n", "loss_mask", "=", "torch", ".", "zeros", "(", "(", "flow_gt", ".", "shape", "[", "1", "]", ",", "flow_gt", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "non_nan_idxs", "=", "np", ".", "rint", "(", "uv_pre", "[", "~", "np", ".", "isnan", "(", "uv_pre", ")", ".", "any", "(", "axis", "=", "1", ")", "]", "/", "719", "*", "199", ")", ".", "astype", "(", "int", ")", "\n", "loss_mask", "[", "non_nan_idxs", "[", ":", ",", "1", "]", ",", "non_nan_idxs", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "loss_mask", "=", "loss_mask", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Construct sample", "\n", "depths", "=", "torch", ".", "cat", "(", "[", "depth_pre", ",", "depth_post", "]", ",", "axis", "=", "0", ")", "\n", "sample", "=", "{", "'depths'", ":", "depths", ",", "'flow_gt'", ":", "flow_gt", ",", "'loss_mask'", ":", "loss_mask", ",", "'cloth_mask'", ":", "cloth_mask", "}", "\n", "\n", "# Debug plotting", "\n", "if", "self", ".", "cfg", ".", "debug_viz", ".", "data_sample", "and", "self", ".", "stage", "==", "'train'", ":", "\n", "            ", "depth_pre_np", "=", "depth_pre", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "depth_post_np", "=", "depth_post", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "flow_gt_np", "=", "flow_gt", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "loss_mask_np", "=", "loss_mask", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "_plot", "(", "depth_pre_np", ",", "depth_post_np", ",", "flow_gt_np", ",", "loss_mask_np", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._aug_uv": [[90, 101], ["numpy.deg2rad", "numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_aug_uv", "(", "self", ",", "uv", ",", "angle", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "rad", "=", "np", ".", "deg2rad", "(", "-", "angle", ")", "\n", "R", "=", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "rad", ")", ",", "-", "np", ".", "sin", "(", "rad", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "rad", ")", ",", "np", ".", "cos", "(", "rad", ")", "]", "]", ")", "\n", "uv", "-=", "719", "/", "2", "\n", "uv", "=", "np", ".", "dot", "(", "R", ",", "uv", ".", "T", ")", ".", "T", "\n", "uv", "+=", "719", "/", "2", "\n", "uv", "[", ":", ",", "0", "]", "+=", "dx", "\n", "uv", "[", ":", ",", "1", "]", "+=", "dy", "\n", "return", "uv", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._spatial_aug": [[102, 114], ["torch.randint", "numpy.random.randint", "numpy.random.randint", "torchvision.affine", "torchvision.affine", "torchvision.affine", "torchvision.affine", "torchvision.affine", "torchvision.affine", "dataset.FlowDataset._aug_uv", "dataset.FlowDataset._aug_uv", "torch.randint.item", "torch.randint.item", "torch.randint.item"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._aug_uv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._aug_uv"], ["", "def", "_spatial_aug", "(", "self", ",", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", ")", ":", "\n", "        ", "spatial_rot", "=", "self", ".", "cfg", ".", "spatial_rot", "\n", "spatial_trans", "=", "self", ".", "cfg", ".", "spatial_trans", "\n", "angle", "=", "torch", ".", "randint", "(", "low", "=", "-", "spatial_rot", ",", "high", "=", "spatial_rot", "+", "1", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "spatial_trans", ",", "spatial_trans", "+", "1", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "spatial_trans", ",", "spatial_trans", "+", "1", ")", "\n", "depth_pre", "=", "TF", ".", "affine", "(", "depth_pre", ",", "angle", "=", "angle", ".", "item", "(", ")", ",", "translate", "=", "(", "dx", ",", "dy", ")", ",", "scale", "=", "1.0", ",", "shear", "=", "0", ")", "\n", "depth_post", "=", "TF", ".", "affine", "(", "depth_post", ",", "angle", "=", "angle", ".", "item", "(", ")", ",", "translate", "=", "(", "dx", ",", "dy", ")", ",", "scale", "=", "1.0", ",", "shear", "=", "0", ")", "\n", "cloth_mask", "=", "TF", ".", "affine", "(", "cloth_mask", ",", "angle", "=", "angle", ".", "item", "(", ")", ",", "translate", "=", "(", "dx", ",", "dy", ")", ",", "scale", "=", "1.0", ",", "shear", "=", "0", ")", "\n", "uv_pre", "=", "self", ".", "_aug_uv", "(", "uv_pre", ",", "-", "angle", ",", "dx", "/", "199", "*", "719", ",", "dy", "/", "199", "*", "719", ")", "\n", "uv_post_float", "=", "self", ".", "_aug_uv", "(", "uv_post_float", ",", "-", "angle", ",", "dx", "/", "199", "*", "719", ",", "dy", "/", "199", "*", "719", ")", "\n", "return", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.flownet.dataset.FlowDataset._plot": [[115, 127], ["matplotlib.subplots", "ax[].set_title", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "fabricflownet.utils.plot_flow", "ax[].set_title", "ax[].imshow", "matplotlib.tight_layout", "matplotlib.show"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.plot_flow"], ["", "def", "_plot", "(", "self", ",", "depth_pre", ",", "depth_post", ",", "flow_gt", ",", "loss_mask", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "4", ",", "figsize", "=", "(", "12", ",", "3", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"depth before\"", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "depth_pre", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"depth after\"", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "depth_post", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"ground-truth flow\"", ")", "\n", "plot_flow", "(", "ax", "[", "2", "]", ",", "flow_gt", ")", "\n", "ax", "[", "3", "]", ".", "set_title", "(", "\"loss mask\"", ")", "\n", "ax", "[", "3", "]", ".", "imshow", "(", "loss_mask", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplit.__init__": [[11, 29], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.UpsamplingBilinear2d", "torch.nn.UpsamplingBilinear2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.Goals.__init__"], ["from", "fabricflownet", ".", "utils", "import", "plot_flow", "\n", "\n", "def", "conv", "(", "batchNorm", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "    ", "if", "batchNorm", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "", "def", "predict_flow", "(", "in_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "", "def", "deconv", "(", "in_planes", ",", "out_planes", ",", "ksize", "=", "3", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplit.forward": [[30, 35], ["models.FlowPickSplit.trunk", "models.FlowPickSplit.head", "models.FlowPickSplit.upsample"], "methods", ["None"], ["    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "class", "FlowNet", "(", "pl", ".", "LightningModule", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.__init__": [[37, 57], ["pytorch_lightning.LightningModule.__init__", "models.FlowPickSplitModel.init_models"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.Goals.__init__", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.init_models"], ["input_channels", "=", "2", ",", "\n", "batchNorm", "=", "True", ",", "\n", "lr", "=", "0.0001", ",", "\n", "weight_decay", "=", "0.0001", ")", ":", "\n", "        ", "super", "(", "FlowNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "fs", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", "# filter sizes", "\n", "self", ".", "batchNorm", "=", "batchNorm", "\n", "self", ".", "conv1", "=", "conv", "(", "self", ".", "batchNorm", ",", "input_channels", ",", "fs", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ")", "# 384 -> (384 - 7 + 2*3)/2 + 1 = 377", "\n", "self", ".", "conv2", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "2", "]", ",", "fs", "[", "2", "]", ")", "\n", "self", ".", "conv4", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "2", "]", ",", "fs", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv4_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "3", "]", ")", "\n", "self", ".", "conv5", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv5_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "3", "]", ")", "\n", "self", ".", "conv6", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "3", "]", ",", "fs", "[", "4", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv6_1", "=", "conv", "(", "self", ".", "batchNorm", ",", "fs", "[", "4", "]", ",", "fs", "[", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.init_models": [[58, 64], ["models.FlowPickSplit", "models.FlowPickSplit"], "methods", ["None"], ["\n", "self", ".", "deconv5", "=", "deconv", "(", "fs", "[", "4", "]", ",", "fs", "[", "3", "]", ")", "\n", "self", ".", "deconv4", "=", "deconv", "(", "fs", "[", "3", "]", "+", "fs", "[", "3", "]", "+", "2", ",", "fs", "[", "2", "]", ")", "\n", "self", ".", "deconv3", "=", "deconv", "(", "fs", "[", "3", "]", "+", "fs", "[", "2", "]", "+", "2", ",", "fs", "[", "1", "]", ")", "\n", "self", ".", "deconv2", "=", "deconv", "(", "fs", "[", "2", "]", "+", "fs", "[", "1", "]", "+", "2", ",", "fs", "[", "0", "]", ",", "ksize", "=", "4", ")", "\n", "\n", "self", ".", "predict_flow6", "=", "predict_flow", "(", "fs", "[", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.nearest_to_mask": [[65, 69], ["numpy.argwhere"], "methods", ["None"], ["self", ".", "predict_flow5", "=", "predict_flow", "(", "fs", "[", "3", "]", "+", "fs", "[", "3", "]", "+", "2", ")", "\n", "self", ".", "predict_flow4", "=", "predict_flow", "(", "fs", "[", "3", "]", "+", "fs", "[", "2", "]", "+", "2", ")", "\n", "self", ".", "predict_flow3", "=", "predict_flow", "(", "fs", "[", "2", "]", "+", "fs", "[", "1", "]", "+", "2", ")", "\n", "self", ".", "predict_flow2", "=", "predict_flow", "(", "fs", "[", "1", "]", "+", "fs", "[", "0", "]", "+", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_flow_place_pt": [[70, 85], ["numpy.argwhere", "numpy.argwhere", "numpy.clip", "numpy.clip"], "methods", ["None"], ["self", ".", "upsampled_flow6_to_5", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "# (H_in-1)*stride - 2*padding + (kernel-1) + 1", "\n", "self", ".", "upsampled_flow5_to_4", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "upsampled_flow4_to_3", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "upsampled_flow3_to_2", "=", "nn", ".", "ConvTranspose2d", "(", "2", ",", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "uniform_", "(", "m", ".", "bias", ")", "\n", "", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "uniform_", "(", "m", ".", "bias", ")", "\n", "", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "", "self", ".", "upsample1", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_action": [[86, 118], ["models.FlowPickSplitModel.forward", "depth_pre.detach().squeeze().cpu().numpy", "models.FlowPickSplitModel.nearest_to_mask", "models.FlowPickSplitModel.nearest_to_mask", "flow.detach().squeeze().cpu().numpy", "models.FlowPickSplitModel.get_flow_place_pt", "models.FlowPickSplitModel.get_flow_place_pt", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "depth_pre.detach().squeeze().cpu", "flow.detach().squeeze().cpu", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "depth_pre.detach().squeeze", "flow.detach().squeeze", "depth_pre.detach", "flow.detach"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.forward", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.nearest_to_mask", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.nearest_to_mask", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_flow_place_pt", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_flow_place_pt"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out_conv2", "=", "self", ".", "conv2", "(", "out_conv1", ")", "\n", "out_conv3", "=", "self", ".", "conv3_1", "(", "self", ".", "conv3", "(", "out_conv2", ")", ")", "\n", "out_conv4", "=", "self", ".", "conv4_1", "(", "self", ".", "conv4", "(", "out_conv3", ")", ")", "\n", "out_conv5", "=", "self", ".", "conv5_1", "(", "self", ".", "conv5", "(", "out_conv4", ")", ")", "\n", "out_conv6", "=", "self", ".", "conv6_1", "(", "self", ".", "conv6", "(", "out_conv5", ")", ")", "\n", "\n", "flow6", "=", "self", ".", "predict_flow6", "(", "out_conv6", ")", "\n", "flow6_up", "=", "self", ".", "upsampled_flow6_to_5", "(", "flow6", ")", "\n", "out_deconv5", "=", "self", ".", "deconv5", "(", "out_conv6", ")", "\n", "\n", "concat5", "=", "torch", ".", "cat", "(", "(", "out_conv5", ",", "out_deconv5", ",", "flow6_up", ")", ",", "1", ")", "\n", "flow5", "=", "self", ".", "predict_flow5", "(", "concat5", ")", "\n", "flow5_up", "=", "self", ".", "upsampled_flow5_to_4", "(", "flow5", ")", "\n", "out_deconv4", "=", "self", ".", "deconv4", "(", "concat5", ")", "\n", "\n", "concat4", "=", "torch", ".", "cat", "(", "(", "out_conv4", ",", "out_deconv4", ",", "flow5_up", ")", ",", "1", ")", "\n", "flow4", "=", "self", ".", "predict_flow4", "(", "concat4", ")", "\n", "flow4_up", "=", "self", ".", "upsampled_flow4_to_3", "(", "flow4", ")", "\n", "out_deconv3", "=", "self", ".", "deconv3", "(", "concat4", ")", "\n", "\n", "concat3", "=", "torch", ".", "cat", "(", "(", "out_conv3", ",", "out_deconv3", ",", "flow4_up", ")", ",", "1", ")", "\n", "flow3", "=", "self", ".", "predict_flow3", "(", "concat3", ")", "\n", "flow3_up", "=", "self", ".", "upsampled_flow3_to_2", "(", "flow3", ")", "\n", "out_deconv2", "=", "self", ".", "deconv2", "(", "concat3", ")", "\n", "\n", "concat2", "=", "torch", ".", "cat", "(", "(", "out_conv2", ",", "out_deconv2", ",", "flow3_up", ")", ",", "1", ")", "\n", "flow2", "=", "self", ".", "predict_flow2", "(", "concat2", ")", "\n", "\n", "out", "=", "self", ".", "upsample1", "(", "flow2", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.forward": [[119, 138], ["models.FlowPickSplitModel.first", "models.FlowPickSplitModel.get_pt", "models.FlowPickSplitModel.get_gaussian", "models.FlowPickSplitModel.second", "models.FlowPickSplitModel.get_pt", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_pt", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_gaussian", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_pt"], ["\n", "", "def", "loss", "(", "self", ",", "input_flow", ",", "target_flow", ",", "mask", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "input_flow", ".", "size", "(", ")", "\n", "diff_flow", "=", "torch", ".", "reshape", "(", "target_flow", "-", "input_flow", "*", "mask", ",", "(", "b", ",", "c", ",", "h", "*", "w", ")", ")", "\n", "mask", "=", "torch", ".", "reshape", "(", "mask", ",", "(", "b", ",", "h", "*", "w", ")", ")", "\n", "norm_diff_flow", "=", "torch", ".", "linalg", ".", "norm", "(", "diff_flow", ",", "ord", "=", "2", ",", "dim", "=", "1", ")", "# B x 40000 get norm of flow vector diff", "\n", "mean_norm_diff_flow", "=", "norm_diff_flow", ".", "sum", "(", "dim", "=", "1", ")", "/", "mask", ".", "sum", "(", "dim", "=", "1", ")", "# B x 1 get average norm for each image", "\n", "batch_mean_diff_flow", "=", "mean_norm_diff_flow", ".", "mean", "(", ")", "# mean over the batch", "\n", "return", "batch_mean_diff_flow", "\n", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "depth_input", "=", "batch", "[", "'depths'", "]", "\n", "flow_gt", "=", "batch", "[", "'flow_gt'", "]", "\n", "loss_mask", "=", "batch", "[", "'loss_mask'", "]", "\n", "flow_out", "=", "self", ".", "forward", "(", "depth_input", ")", "\n", "train_loss", "=", "self", ".", "loss", "(", "flow_out", ",", "flow_gt", ",", "loss_mask", ")", "\n", "loss", "=", "train_loss", "\n", "\n", "if", "batch_idx", "==", "0", ":", "\n", "            ", "self", ".", "plot", "(", "depth_input", ",", "loss_mask", ",", "flow_gt", ",", "flow_out", ",", "stage", "=", "\"train\"", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_pt": [[139, 152], ["logits.size", "logits.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "prdepth_pre.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "u.item", "v.item"], "methods", ["None"], ["", "self", ".", "log", "(", "'loss/train'", ",", "loss", ")", "\n", "return", "{", "'loss'", ":", "loss", "}", "\n", "\n", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "depth_input", "=", "batch", "[", "'depths'", "]", "\n", "flow_gt", "=", "batch", "[", "'flow_gt'", "]", "\n", "loss_mask", "=", "batch", "[", "'loss_mask'", "]", "\n", "flow_out", "=", "self", ".", "forward", "(", "depth_input", ")", "\n", "loss", "=", "self", ".", "loss", "(", "flow_out", ",", "flow_gt", ",", "loss_mask", ")", "\n", "\n", "if", "batch_idx", "==", "0", ":", "\n", "            ", "self", ".", "plot", "(", "depth_input", ",", "loss_mask", ",", "flow_gt", ",", "flow_out", ",", "stage", "=", "\"val\"", ")", "\n", "", "self", ".", "log", "(", "'loss/val'", ",", "loss", ")", "\n", "return", "{", "'loss'", ":", "loss", "}", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_gaussian": [[153, 175], ["torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "g.unsqueeze.unsqueeze.amin", "g.unsqueeze.unsqueeze.amax", "g.unsqueeze.unsqueeze.unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.vstack().to", "torch.vstack().to", "torch.vstack().to", "torch.vstack().to", "torch.vstack().to", "torch.vstack().to", "torch.vstack().to", "torch.vstack().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack"], "methods", ["None"], ["\n", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "return", "optimizer", "\n", "\n", "", "def", "plot", "(", "self", ",", "depth_input", ",", "loss_mask", ",", "flow_gt", ",", "flow_out", ",", "stage", ")", ":", "\n", "        ", "im1", "=", "depth_input", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "im2", "=", "depth_input", "[", "0", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_mask", "=", "loss_mask", "[", "0", "]", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_gt", "=", "flow_gt", "[", "0", "]", ".", "detach", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flow_out", "=", "flow_out", "[", "0", "]", ".", "detach", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "5", ",", "figsize", "=", "(", "12", ",", "3", ")", ",", "dpi", "=", "300", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"depth before\"", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "im1", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"depth after\"", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "im2", ")", "\n", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"ground-truth flow\"", ")", "\n", "plot_flow", "(", "ax", "[", "2", "]", ",", "flow_gt", ")", "\n", "\n", "ax", "[", "3", "]", ".", "set_title", "(", "\"predicted flow (masked)\"", ")", "\n", "flow_out", "[", "loss_mask", "==", "0", ",", ":", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.loss": [[176, 198], ["logits1.size", "logits1.size", "pick_uv1.cuda.cuda.cuda", "pick_uv2.cuda.cuda.cuda", "models.FlowPickSplitModel.get_gaussian", "models.FlowPickSplitModel.get_gaussian", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.where().mean", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_gaussian", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.get_gaussian"], ["plot_flow", "(", "ax", "[", "3", "]", ",", "flow_out", ")", "\n", "\n", "ax", "[", "4", "]", ".", "set_title", "(", "\"loss mask\"", ")", "\n", "ax", "[", "4", "]", ".", "imshow", "(", "loss_mask", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "self", ".", "logger", "[", "1", "]", ".", "experiment", ".", "add_figure", "(", "stage", ",", "fig", ",", "self", ".", "global_step", ")", "# tensorboard", "\n", "plt", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.training_step": [[199, 220], ["models.FlowPickSplitModel.optimizers", "models.FlowPickSplitModel.forward", "models.FlowPickSplitModel.loss", "opt1.zero_grad", "models.FlowPickSplitModel.manual_backward", "opt1.step", "opt2.zero_grad", "models.FlowPickSplitModel.manual_backward", "opt2.step", "models.FlowPickSplitModel.log_dict", "models.FlowPickSplitModel.plot"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.forward", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.loss", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.plot"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.validation_step": [[221, 234], ["models.FlowPickSplitModel.forward", "models.FlowPickSplitModel.loss", "models.FlowPickSplitModel.log_dict", "models.FlowPickSplitModel.plot"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.forward", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.loss", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.plot"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.configure_optimizers": [[235, 240], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "models.FlowPickSplitModel.first.parameters", "models.FlowPickSplitModel.second.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.models.FlowPickSplitModel.plot": [[241, 276], ["matplotlib.subplots", "depth_pre[].squeeze().cpu().numpy", "depth_post[].squeeze().cpu().numpy", "flow[].squeeze().permute().cpu().numpy", "gt_uv1[].squeeze().cpu().numpy", "gt_uv2[].squeeze().cpu().numpy", "[].set_title", "[].imshow", "[].scatter", "[].scatter", "[].legend", "[].set_title", "[].imshow", "[].set_title", "fabricflownet.utils.plot_flow", "[].detach().squeeze().cpu().numpy", "cv2.resize", "[].detach().cpu().squeeze().numpy", "[].detach().cpu().squeeze().numpy", "cv2.resize", "[].set_title", "[].imshow", "[].set_title", "[].imshow", "[].set_title", "[].imshow", "matplotlib.tight_layout", "models.FlowPickSplitModel.logger[].experiment.add_figure", "matplotlib.close", "depth_pre[].squeeze().cpu", "depth_post[].squeeze().cpu", "flow[].squeeze().permute().cpu", "gt_uv1[].squeeze().cpu", "gt_uv2[].squeeze().cpu", "[].detach().squeeze().cpu", "[].detach().cpu().squeeze", "[].detach().cpu().squeeze", "depth_pre[].squeeze", "depth_post[].squeeze", "flow[].squeeze().permute", "gt_uv1[].squeeze", "gt_uv2[].squeeze", "[].detach().squeeze", "[].detach().cpu", "[].detach().cpu", "flow[].squeeze", "[].detach", "[].detach", "[].detach"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.plot_flow"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.train.main": [[23, 80], ["hydra.main", "pytorch_lightning.seed_everything", "sorted", "sorted", "numpy.testing.assert_equal", "fabricflownet.picknet.dataset.PickNetDataset", "fabricflownet.picknet.dataset.PickNetDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pytorch_lightning.loggers.CSVLogger", "pytorch_lightning.loggers.TensorBoardLogger", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer", "pl.Trainer.fit", "open", "f.write", "print", "print", "numpy.load", "numpy.load", "fabricflownet.picknet.models.FlowPickSplitModel", "os.listdir", "os.listdir", "len", "fn.split", "len", "fn.split", "len", "len"], "function", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.train.main"], ["        ", "trainfs", "=", "trainfs", "[", ":", "cfg", "[", "'max_train_samples'", "]", "]", "\n", "print", "(", "f\"Max training set: {len(trainfs)}\"", ")", "\n", "\n", "# Get validation samples", "\n", "", "valpath", "=", "f'{cfg.base_path}/{cfg.val_name}'", "\n", "valfs", "=", "sorted", "(", "[", "'_'", ".", "join", "(", "fn", ".", "split", "(", "'_'", ")", "[", "0", ":", "2", "]", ")", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "f'{valpath}/actions'", ")", "]", ")", "\n", "if", "cfg", "[", "'max_val_samples'", "]", "!=", "None", ":", "\n", "        ", "valfs", "=", "valfs", "[", ":", "cfg", "[", "'max_val_samples'", "]", "]", "\n", "print", "(", "f\"Max val set: {len(valfs)}\"", ")", "\n", "\n", "# Get camera params", "\n", "", "train_camera_params", "=", "np", ".", "load", "(", "f\"{trainpath}/camera_params.npy\"", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "val_camera_params", "=", "np", ".", "load", "(", "f\"{valpath}/camera_params.npy\"", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "np", ".", "testing", ".", "assert_equal", "(", "val_camera_params", ",", "train_camera_params", ")", "\n", "camera_params", "=", "train_camera_params", "\n", "\n", "# Get datasets", "\n", "train_data", "=", "FlowDataset", "(", "cfg", ",", "trainfs", ",", "camera_params", ",", "stage", "=", "'train'", ")", "\n", "val_data", "=", "FlowDataset", "(", "cfg", ",", "valfs", ",", "camera_params", ",", "stage", "=", "'val'", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cfg", ".", "workers", ",", "persistent_workers", "=", "cfg", ".", "workers", ">", "0", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_data", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cfg", ".", "workers", ",", "persistent_workers", "=", "cfg", ".", "workers", ">", "0", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n", "", "@", "hydra", ".", "main", "(", "config_name", "=", "\"config\"", ")", "\n", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "seed_utils", ".", "seed_everything", "(", "cfg", ".", "seed", ")", "\n", "with", "open", "(", "'.hydra/command.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'python '", "+", "' '", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "\n", "", "train_loader", ",", "val_loader", "=", "get_flownet_dataloaders", "(", "cfg", ")", "\n", "csv_logger", "=", "pl_loggers", ".", "CSVLogger", "(", "save_dir", "=", "cfg", ".", "csv_log_dir", ")", "\n", "tb_logger", "=", "pl_loggers", ".", "TensorBoardLogger", "(", "save_dir", "=", "cfg", ".", "tboard_log_dir", ")", "\n", "chkpt_cb", "=", "ModelCheckpoint", "(", "monitor", "=", "'loss/val'", ",", "save_last", "=", "True", ",", "save_top_k", "=", "-", "1", ",", "every_n_val_epochs", "=", "10", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "gpus", "=", "[", "0", "]", ",", "\n", "logger", "=", "[", "csv_logger", ",", "tb_logger", "]", ",", "\n", "max_epochs", "=", "cfg", ".", "epochs", ",", "\n", "check_val_every_n_epoch", "=", "cfg", ".", "check_val_every_n_epoch", ",", "\n", "log_every_n_steps", "=", "len", "(", "train_loader", ")", "if", "len", "(", "train_loader", ")", "<", "50", "else", "50", ",", "\n", "callbacks", "=", "[", "chkpt_cb", "]", ")", "\n", "\n", "flownet", "=", "FlowNet", "(", "**", "cfg", ".", "net_cfg", ")", "\n", "trainer", ".", "fit", "(", "flownet", ",", "train_loader", ",", "val_loader", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.__init__": [[16, 41], ["fabricflownet.utils.Flow", "fabricflownet.flownet.models.FlowNet", "torch.load", "dataset.PickNetDataset.flow.load_state_dict", "dataset.PickNetDataset.flow.eval", "os.exists", "os.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.exists", "os.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["class", "FlowDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ",", "ids", ",", "camera_params", ",", "stage", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "camera_params", "=", "camera_params", "\n", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "data_path", "=", "f'{cfg.base_path}/{cfg.train_name}'", "if", "stage", "==", "'train'", "else", "f'{cfg.base_path}/{cfg.val_name}'", "\n", "self", ".", "ids", "=", "ids", "\n", "self", ".", "flow", "=", "Flow", "(", ")", "\n", "self", ".", "stage", "=", "stage", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n", "", "def", "_get_uv_pre", "(", "self", ",", "depth_pre", ",", "id", ")", ":", "\n", "        ", "coords_pre", "=", "np", ".", "load", "(", "f'{self.data_path}/coords/{id}_coords_before.npy'", ")", "\n", "uv_pre_float", "=", "np", ".", "load", "(", "f'{self.data_path}/knots/{id}_knots_before.npy'", ")", "\n", "\n", "# Remove occluded points and save", "\n", "depth_pre_resized", "=", "cv2", ".", "resize", "(", "depth_pre", ",", "(", "720", ",", "720", ")", ")", "\n", "uv_pre", "=", "remove_occluded_knots", "(", "self", ".", "camera_params", ",", "uv_pre_float", ",", "coords_pre", ",", "depth_pre_resized", ",", "\n", "zthresh", "=", "0.005", ",", "debug_viz", "=", "self", ".", "cfg", ".", "debug_viz", ".", "remove_occlusions", ")", "\n", "np", ".", "save", "(", "f'{self.data_path}/knots/{id}_visibleknots_before.npy'", ",", "uv_pre", ")", "\n", "return", "uv_pre", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.__len__": [[42, 44], ["len"], "methods", ["None"], ["        ", "id", "=", "self", ".", "ids", "[", "index", "]", "\n", "# Load depth before action, cloth mask, knots", "\n", "depth_pre", "=", "np", ".", "load", "(", "f'{self.data_path}/rendered_images/{id}_depth_before.npy'", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.__getitem__": [[45, 121], ["numpy.load", "numpy.load", "numpy.load", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "numpy.load", "numpy.load.transpose", "isinstance", "torch.FloatTensor", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "dataset.PickNetDataset.spatial_aug", "numpy.load.permute().detach().numpy", "fabricflownet.utils.flow_affinewarp", "torch.FloatTensor().permute", "dataset.PickNetDataset.plot", "os.exists", "os.exists", "numpy.load", "numpy.load", "cv2.resize", "fabricflownet.utils.remove_occluded_knots", "float", "float", "dataset.PickNetDataset.flow.get_image", "numpy.save", "numpy.load", "os.exists", "os.exists", "torch.stack().unsqueeze", "dataset.PickNetDataset.flow", "numpy.load.squeeze().cpu", "numpy.save", "numpy.load", "torch.FloatTensor", "torch.FloatTensor", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "numpy.load.detach().numpy", "os.join", "os.join", "numpy.load.permute().detach", "torch.FloatTensor", "torch.stack", "numpy.load.squeeze", "numpy.load.detach", "numpy.load.permute", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.spatial_aug", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.flow_affinewarp", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.plot", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.remove_occluded_knots"], ["cloth_mask", "=", "(", "depth_pre", "!=", "0", ")", ".", "astype", "(", "float", ")", "# 200 x 200", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f'{self.data_path}/knots/{id}_visibleknots_before.npy'", ")", ":", "\n", "            ", "uv_pre", "=", "self", ".", "_get_uv_pre", "(", "depth_pre", ",", "id", ")", "\n", "", "else", ":", "\n", "            ", "uv_pre", "=", "np", ".", "load", "(", "f'{self.data_path}/knots/{id}_visibleknots_before.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "depth_pre", "=", "self", ".", "transform", "(", "depth_pre", ")", "\n", "cloth_mask", "=", "self", ".", "transform", "(", "cloth_mask", ")", "\n", "\n", "# Load depth after action and knots", "\n", "depth_post", "=", "np", ".", "load", "(", "f'{self.data_path}/rendered_images/{id}_depth_after.npy'", ")", "\n", "uv_post_float", "=", "np", ".", "load", "(", "f'{self.data_path}/knots/{id}_knots_after.npy'", ")", "\n", "depth_post", "=", "self", ".", "transform", "(", "depth_post", ")", "\n", "\n", "# Spatial augmentation", "\n", "if", "self", ".", "stage", "==", "'train'", "and", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "cfg", ".", "spatial_aug", ":", "\n", "            ", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", "=", "self", ".", "_spatial_aug", "(", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", ")", "\n", "\n", "# Remove out of bounds", "\n", "", "uv_pre", "[", "uv_pre", "<", "0", "]", "=", "float", "(", "'NaN'", ")", "\n", "uv_pre", "[", "uv_pre", ">=", "720", "]", "=", "float", "(", "'NaN'", ")", "\n", "\n", "# Get flow image", "\n", "flow_gt", "=", "self", ".", "flow", ".", "get_flow_image", "(", "uv_pre", ",", "uv_post_float", ")", "\n", "flow_gt", "=", "self", ".", "transform", "(", "flow_gt", ")", "\n", "\n", "# Get loss mask", "\n", "loss_mask", "=", "torch", ".", "zeros", "(", "(", "flow_gt", ".", "shape", "[", "1", "]", ",", "flow_gt", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "non_nan_idxs", "=", "np", ".", "rint", "(", "uv_pre", "[", "~", "np", ".", "isnan", "(", "uv_pre", ")", ".", "any", "(", "axis", "=", "1", ")", "]", "/", "719", "*", "199", ")", ".", "astype", "(", "int", ")", "\n", "loss_mask", "[", "non_nan_idxs", "[", ":", ",", "1", "]", ",", "non_nan_idxs", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "loss_mask", "=", "loss_mask", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Construct sample", "\n", "depths", "=", "torch", ".", "cat", "(", "[", "depth_pre", ",", "depth_post", "]", ",", "axis", "=", "0", ")", "\n", "sample", "=", "{", "'depths'", ":", "depths", ",", "'flow_gt'", ":", "flow_gt", ",", "'loss_mask'", ":", "loss_mask", ",", "'cloth_mask'", ":", "cloth_mask", "}", "\n", "\n", "# Debug plotting", "\n", "if", "self", ".", "cfg", ".", "debug_viz", ".", "data_sample", "and", "self", ".", "stage", "==", "'train'", ":", "\n", "            ", "depth_pre_np", "=", "depth_pre", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "depth_post_np", "=", "depth_post", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "flow_gt_np", "=", "flow_gt", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "loss_mask_np", "=", "loss_mask", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "_plot", "(", "depth_pre_np", ",", "depth_post_np", ",", "flow_gt_np", ",", "loss_mask_np", ")", "\n", "", "return", "sample", "\n", "\n", "", "def", "_aug_uv", "(", "self", ",", "uv", ",", "angle", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "rad", "=", "np", ".", "deg2rad", "(", "-", "angle", ")", "\n", "R", "=", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "rad", ")", ",", "-", "np", ".", "sin", "(", "rad", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "rad", ")", ",", "np", ".", "cos", "(", "rad", ")", "]", "]", ")", "\n", "uv", "-=", "719", "/", "2", "\n", "uv", "=", "np", ".", "dot", "(", "R", ",", "uv", ".", "T", ")", ".", "T", "\n", "uv", "+=", "719", "/", "2", "\n", "uv", "[", ":", ",", "0", "]", "+=", "dx", "\n", "uv", "[", ":", ",", "1", "]", "+=", "dy", "\n", "return", "uv", "\n", "\n", "", "def", "_spatial_aug", "(", "self", ",", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", ")", ":", "\n", "        ", "spatial_rot", "=", "self", ".", "cfg", ".", "spatial_rot", "\n", "spatial_trans", "=", "self", ".", "cfg", ".", "spatial_trans", "\n", "angle", "=", "torch", ".", "randint", "(", "low", "=", "-", "spatial_rot", ",", "high", "=", "spatial_rot", "+", "1", ",", "size", "=", "(", "1", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "spatial_trans", ",", "spatial_trans", "+", "1", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "spatial_trans", ",", "spatial_trans", "+", "1", ")", "\n", "depth_pre", "=", "TF", ".", "affine", "(", "depth_pre", ",", "angle", "=", "angle", ".", "item", "(", ")", ",", "translate", "=", "(", "dx", ",", "dy", ")", ",", "scale", "=", "1.0", ",", "shear", "=", "0", ")", "\n", "depth_post", "=", "TF", ".", "affine", "(", "depth_post", ",", "angle", "=", "angle", ".", "item", "(", ")", ",", "translate", "=", "(", "dx", ",", "dy", ")", ",", "scale", "=", "1.0", ",", "shear", "=", "0", ")", "\n", "cloth_mask", "=", "TF", ".", "affine", "(", "cloth_mask", ",", "angle", "=", "angle", ".", "item", "(", ")", ",", "translate", "=", "(", "dx", ",", "dy", ")", ",", "scale", "=", "1.0", ",", "shear", "=", "0", ")", "\n", "uv_pre", "=", "self", ".", "_aug_uv", "(", "uv_pre", ",", "-", "angle", ",", "dx", "/", "199", "*", "719", ",", "dy", "/", "199", "*", "719", ")", "\n", "uv_post_float", "=", "self", ".", "_aug_uv", "(", "uv_post_float", ",", "-", "angle", ",", "dx", "/", "199", "*", "719", ",", "dy", "/", "199", "*", "719", ")", "\n", "return", "depth_pre", ",", "depth_post", ",", "cloth_mask", ",", "uv_pre", ",", "uv_post_float", "\n", "\n", "", "def", "_plot", "(", "self", ",", "depth_pre", ",", "depth_post", ",", "flow_gt", ",", "loss_mask", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "4", ",", "figsize", "=", "(", "12", ",", "3", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"depth before\"", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "depth_pre", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"depth after\"", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "depth_post", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"ground-truth flow\"", ")", "\n"]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.spatial_aug": [[122, 134], ["torchvision.affine", "torchvision.affine", "torchvision.affine", "torchvision.affine", "dataset.PickNetDataset.aug_uv", "pick_uv1.squeeze().astype.squeeze().astype.squeeze().astype", "dataset.PickNetDataset.aug_uv", "pick_uv2.squeeze().astype.squeeze().astype.squeeze().astype", "dataset.PickNetDataset.aug_uv", "place_uv1.squeeze().astype.squeeze().astype.squeeze().astype", "dataset.PickNetDataset.aug_uv", "place_uv2.squeeze().astype.squeeze().astype.squeeze().astype", "pick_uv1.squeeze().astype.squeeze().astype.astype", "pick_uv1.squeeze().astype.squeeze().astype.squeeze", "pick_uv2.squeeze().astype.squeeze().astype.astype", "pick_uv2.squeeze().astype.squeeze().astype.squeeze", "place_uv1.squeeze().astype.squeeze().astype.astype", "place_uv1.squeeze().astype.squeeze().astype.squeeze", "place_uv2.squeeze().astype.squeeze().astype.astype", "place_uv2.squeeze().astype.squeeze().astype.squeeze"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.aug_uv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.aug_uv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.aug_uv", "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.aug_uv"], ["plot_flow", "(", "ax", "[", "2", "]", ",", "flow_gt", ")", "\n", "ax", "[", "3", "]", ".", "set_title", "(", "\"loss mask\"", ")", "\n", "ax", "[", "3", "]", ".", "imshow", "(", "loss_mask", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.aug_uv": [[135, 147], ["numpy.deg2rad", "numpy.array", "numpy.clip", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.PickNetDataset.plot": [[148, 163], ["depth_pre.squeeze().numpy.squeeze().numpy.squeeze().numpy", "depth_post.squeeze().numpy.squeeze().numpy.squeeze().numpy", "flow.detach().permute().numpy.detach().permute().numpy.detach().permute().numpy", "matplotlib.subplots", "ax[].set_title", "ax[].imshow", "ax[].scatter", "ax[].scatter", "ax[].set_title", "ax[].imshow", "ax[].set_title", "fabricflownet.utils.plot_flow", "matplotlib.tight_layout", "matplotlib.show", "depth_pre.squeeze().numpy.squeeze().numpy.squeeze", "depth_post.squeeze().numpy.squeeze().numpy.squeeze", "flow.detach().permute().numpy.detach().permute().numpy.detach().permute", "flow.detach().permute().numpy.detach().permute().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.fabricflownet.utils.plot_flow"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.Goals.__init__": [[165, 212], ["numpy.load", "sorted", "sorted", "dataset.Goals.goals.append", "numpy.load", "dataset.Goals.goals.append", "numpy.load", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath", "x.replace", "x.replace", "torch.FloatTensor", "curr_goals.append", "dataset.Goals.goals.append", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "int", "cv2.imread", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "cv2.imread", "torch.FloatTensor", "x.split"], "methods", ["None"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.Goals.__len__": [[213, 215], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.thomasweng15_FabricFlowNet.picknet.dataset.Goals.__getitem__": [[216, 219], ["None"], "methods", ["None"], []]}