{"home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.LossType.is_vb": [[99, 101], ["None"], "methods", ["None"], ["def", "is_vb", "(", "self", ")", ":", "\n", "        ", "return", "self", "==", "LossType", ".", "KL", "or", "self", "==", "LossType", ".", "RESCALED_KL", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.__init__": [[120, 171], ["numpy.array", "int", "numpy.cumprod", "numpy.append", "numpy.append", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.sqrt", "numpy.sqrt", "numpy.log", "len", "numpy.append", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "betas", ",", "\n", "model_mean_type", ",", "\n", "model_var_type", ",", "\n", "loss_type", ",", "\n", "rescale_timesteps", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model_mean_type", "=", "model_mean_type", "\n", "self", ".", "model_var_type", "=", "model_var_type", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "rescale_timesteps", "=", "rescale_timesteps", "\n", "\n", "# Use float64 for accuracy.", "\n", "betas", "=", "np", ".", "array", "(", "betas", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "betas", "=", "betas", "\n", "assert", "len", "(", "betas", ".", "shape", ")", "==", "1", ",", "\"betas must be 1-D\"", "\n", "assert", "(", "betas", ">", "0", ")", ".", "all", "(", ")", "and", "(", "betas", "<=", "1", ")", ".", "all", "(", ")", "\n", "\n", "self", ".", "num_timesteps", "=", "int", "(", "betas", ".", "shape", "[", "0", "]", ")", "\n", "\n", "alphas", "=", "1.0", "-", "betas", "\n", "self", ".", "alphas_cumprod", "=", "np", ".", "cumprod", "(", "alphas", ",", "axis", "=", "0", ")", "\n", "self", ".", "alphas_cumprod_prev", "=", "np", ".", "append", "(", "1.0", ",", "self", ".", "alphas_cumprod", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "alphas_cumprod_next", "=", "np", ".", "append", "(", "self", ".", "alphas_cumprod", "[", "1", ":", "]", ",", "0.0", ")", "\n", "assert", "self", ".", "alphas_cumprod_prev", ".", "shape", "==", "(", "self", ".", "num_timesteps", ",", ")", "\n", "\n", "# calculations for diffusion q(x_t | x_{t-1}) and others", "\n", "self", ".", "sqrt_alphas_cumprod", "=", "np", ".", "sqrt", "(", "self", ".", "alphas_cumprod", ")", "\n", "self", ".", "sqrt_one_minus_alphas_cumprod", "=", "np", ".", "sqrt", "(", "1.0", "-", "self", ".", "alphas_cumprod", ")", "\n", "self", ".", "log_one_minus_alphas_cumprod", "=", "np", ".", "log", "(", "1.0", "-", "self", ".", "alphas_cumprod", ")", "\n", "self", ".", "sqrt_recip_alphas_cumprod", "=", "np", ".", "sqrt", "(", "1.0", "/", "self", ".", "alphas_cumprod", ")", "\n", "self", ".", "sqrt_recipm1_alphas_cumprod", "=", "np", ".", "sqrt", "(", "1.0", "/", "self", ".", "alphas_cumprod", "-", "1", ")", "\n", "\n", "# calculations for posterior q(x_{t-1} | x_t, x_0)", "\n", "self", ".", "posterior_variance", "=", "(", "\n", "betas", "*", "(", "1.0", "-", "self", ".", "alphas_cumprod_prev", ")", "/", "(", "1.0", "-", "self", ".", "alphas_cumprod", ")", "\n", ")", "\n", "# log calculation clipped because the posterior variance is 0 at the", "\n", "# beginning of the diffusion chain.", "\n", "self", ".", "posterior_log_variance_clipped", "=", "np", ".", "log", "(", "\n", "np", ".", "append", "(", "self", ".", "posterior_variance", "[", "1", "]", ",", "self", ".", "posterior_variance", "[", "1", ":", "]", ")", "\n", ")", "\n", "self", ".", "posterior_mean_coef1", "=", "(", "\n", "betas", "*", "np", ".", "sqrt", "(", "self", ".", "alphas_cumprod_prev", ")", "/", "(", "1.0", "-", "self", ".", "alphas_cumprod", ")", "\n", ")", "\n", "self", ".", "posterior_mean_coef2", "=", "(", "\n", "(", "1.0", "-", "self", ".", "alphas_cumprod_prev", ")", "\n", "*", "np", ".", "sqrt", "(", "alphas", ")", "\n", "/", "(", "1.0", "-", "self", ".", "alphas_cumprod", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_mean_variance": [[173, 189], ["gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "q_mean_variance", "(", "self", ",", "x_start", ",", "t", ")", ":", "\n", "        ", "\"\"\"\n        Get the distribution q(x_t | x_0).\n\n        :param x_start: the [N x C x ...] tensor of noiseless inputs.\n        :param t: the number of diffusion steps (minus 1). Here, 0 means one step.\n        :return: A tuple (mean, variance, log_variance), all of x_start's shape.\n        \"\"\"", "\n", "mean", "=", "(", "\n", "_extract_into_tensor", "(", "self", ".", "sqrt_alphas_cumprod", ",", "t", ",", "x_start", ".", "shape", ")", "*", "x_start", "\n", ")", "\n", "variance", "=", "_extract_into_tensor", "(", "1.0", "-", "self", ".", "alphas_cumprod", ",", "t", ",", "x_start", ".", "shape", ")", "\n", "log_variance", "=", "_extract_into_tensor", "(", "\n", "self", ".", "log_one_minus_alphas_cumprod", ",", "t", ",", "x_start", ".", "shape", "\n", ")", "\n", "return", "mean", ",", "variance", ",", "log_variance", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_sample": [[190, 208], ["torch.randn_like", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "q_sample", "(", "self", ",", "x_start", ",", "t", ",", "noise", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Diffuse the data for a given number of diffusion steps.\n\n        In other words, sample from q(x_t | x_0).\n\n        :param x_start: the initial data batch.\n        :param t: the number of diffusion steps (minus 1). Here, 0 means one step.\n        :param noise: if specified, the split-out normal noise.\n        :return: A noisy version of x_start.\n        \"\"\"", "\n", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "th", ".", "randn_like", "(", "x_start", ")", "\n", "", "assert", "noise", ".", "shape", "==", "x_start", ".", "shape", "\n", "return", "(", "\n", "_extract_into_tensor", "(", "self", ".", "sqrt_alphas_cumprod", ",", "t", ",", "x_start", ".", "shape", ")", "*", "x_start", "\n", "+", "_extract_into_tensor", "(", "self", ".", "sqrt_one_minus_alphas_cumprod", ",", "t", ",", "x_start", ".", "shape", ")", "\n", "*", "noise", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance": [[210, 233], ["gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "q_posterior_mean_variance", "(", "self", ",", "x_start", ",", "x_t", ",", "t", ")", ":", "\n", "        ", "\"\"\"\n        Compute the mean and variance of the diffusion posterior:\n\n            q(x_{t-1} | x_t, x_0)\n\n        \"\"\"", "\n", "assert", "x_start", ".", "shape", "==", "x_t", ".", "shape", "\n", "posterior_mean", "=", "(", "\n", "_extract_into_tensor", "(", "self", ".", "posterior_mean_coef1", ",", "t", ",", "x_t", ".", "shape", ")", "*", "x_start", "\n", "+", "_extract_into_tensor", "(", "self", ".", "posterior_mean_coef2", ",", "t", ",", "x_t", ".", "shape", ")", "*", "x_t", "\n", ")", "\n", "posterior_variance", "=", "_extract_into_tensor", "(", "self", ".", "posterior_variance", ",", "t", ",", "x_t", ".", "shape", ")", "\n", "posterior_log_variance_clipped", "=", "_extract_into_tensor", "(", "\n", "self", ".", "posterior_log_variance_clipped", ",", "t", ",", "x_t", ".", "shape", "\n", ")", "\n", "assert", "(", "\n", "posterior_mean", ".", "shape", "[", "0", "]", "\n", "==", "posterior_variance", ".", "shape", "[", "0", "]", "\n", "==", "posterior_log_variance_clipped", ".", "shape", "[", "0", "]", "\n", "==", "x_start", ".", "shape", "[", "0", "]", "\n", ")", "\n", "return", "posterior_mean", ",", "posterior_variance", ",", "posterior_log_variance_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_mean_variance": [[234, 332], ["torch.cat", "model", "gaussian_diffusion.GaussianDiffusion._scale_timesteps", "torch.split", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion.GaussianDiffusion.p_mean_variance.process_xstart"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._scale_timesteps", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "p_mean_variance", "(", "\n", "self", ",", "model", ",", "x", ",", "t", ",", "clip_denoised", "=", "True", ",", "denoised_fn", "=", "None", ",", "x_start", "=", "None", ",", "model_kwargs", "=", "None", ",", "device", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Apply the model to get p(x_{t-1} | x_t), as well as a prediction of\n        the initial x, x_0.\n\n        :param model: the model, which takes a signal and a batch of timesteps\n                      as input.\n        :param x: the [N x C x ...] tensor at time t.\n        :param t: a 1-D Tensor of timesteps.\n        :param clip_denoised: if True, clip the denoised signal into [-1, 1].\n        :param denoised_fn: if not None, a function which applies to the\n            x_start prediction before it is used to sample. Applies before\n            clip_denoised.\n        :param model_kwargs: if not None, a dict of extra keyword arguments to\n            pass to the model. This can be used for conditioning.\n        :return: a dict with the following keys:\n                 - 'mean': the model mean output.\n                 - 'variance': the model variance output.\n                 - 'log_variance': the log of 'variance'.\n                 - 'pred_xstart': the prediction for x_0.\n        \"\"\"", "\n", "if", "model_kwargs", "is", "None", ":", "\n", "            ", "model_kwargs", "=", "{", "}", "\n", "\n", "", "B", ",", "C", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "assert", "t", ".", "shape", "==", "(", "B", ",", ")", "\n", "\n", "\n", "model_inp", "=", "th", ".", "cat", "(", "[", "x", ",", "x_start", "]", ",", "1", ")", "\n", "# model_inp = x", "\n", "model_output", "=", "model", "(", "model_inp", ",", "self", ".", "_scale_timesteps", "(", "t", ")", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "self", ".", "model_var_type", "in", "[", "ModelVarType", ".", "LEARNED", ",", "ModelVarType", ".", "LEARNED_RANGE", "]", ":", "\n", "            ", "assert", "model_output", ".", "shape", "==", "(", "B", ",", "C", "*", "2", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "model_output", ",", "model_var_values", "=", "th", ".", "split", "(", "model_output", ",", "C", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "model_var_type", "==", "ModelVarType", ".", "LEARNED", ":", "\n", "                ", "model_log_variance", "=", "model_var_values", "\n", "model_variance", "=", "th", ".", "exp", "(", "model_log_variance", ")", "\n", "", "else", ":", "\n", "                ", "min_log", "=", "_extract_into_tensor", "(", "\n", "self", ".", "posterior_log_variance_clipped", ",", "t", ",", "x", ".", "shape", "\n", ")", "\n", "max_log", "=", "_extract_into_tensor", "(", "np", ".", "log", "(", "self", ".", "betas", ")", ",", "t", ",", "x", ".", "shape", ")", "\n", "# The model_var_values is [-1, 1] for [min_var, max_var].", "\n", "frac", "=", "(", "model_var_values", "+", "1", ")", "/", "2", "\n", "model_log_variance", "=", "frac", "*", "max_log", "+", "(", "1", "-", "frac", ")", "*", "min_log", "\n", "model_variance", "=", "th", ".", "exp", "(", "model_log_variance", ")", "\n", "", "", "else", ":", "\n", "            ", "model_variance", ",", "model_log_variance", "=", "{", "\n", "# for fixedlarge, we set the initial (log-)variance like so", "\n", "# to get a better decoder log likelihood.", "\n", "ModelVarType", ".", "FIXED_LARGE", ":", "(", "\n", "np", ".", "append", "(", "self", ".", "posterior_variance", "[", "1", "]", ",", "self", ".", "betas", "[", "1", ":", "]", ")", ",", "\n", "np", ".", "log", "(", "np", ".", "append", "(", "self", ".", "posterior_variance", "[", "1", "]", ",", "self", ".", "betas", "[", "1", ":", "]", ")", ")", ",", "\n", ")", ",", "\n", "ModelVarType", ".", "FIXED_SMALL", ":", "(", "\n", "self", ".", "posterior_variance", ",", "\n", "self", ".", "posterior_log_variance_clipped", ",", "\n", ")", ",", "\n", "}", "[", "self", ".", "model_var_type", "]", "\n", "model_variance", "=", "_extract_into_tensor", "(", "model_variance", ",", "t", ",", "x", ".", "shape", ")", "\n", "model_log_variance", "=", "_extract_into_tensor", "(", "model_log_variance", ",", "t", ",", "x", ".", "shape", ")", "\n", "\n", "", "def", "process_xstart", "(", "x", ")", ":", "\n", "            ", "if", "denoised_fn", "is", "not", "None", ":", "\n", "                ", "x", "=", "denoised_fn", "(", "x", ")", "\n", "", "if", "clip_denoised", ":", "\n", "                ", "return", "x", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "", "return", "x", "\n", "\n", "", "if", "self", ".", "model_mean_type", "==", "ModelMeanType", ".", "PREVIOUS_X", ":", "\n", "            ", "pred_xstart", "=", "process_xstart", "(", "\n", "self", ".", "_predict_xstart_from_xprev", "(", "x_t", "=", "x", ",", "t", "=", "t", ",", "xprev", "=", "model_output", ")", "\n", ")", "\n", "model_mean", "=", "model_output", "\n", "", "elif", "self", ".", "model_mean_type", "in", "[", "ModelMeanType", ".", "START_X", ",", "ModelMeanType", ".", "EPSILON", "]", ":", "\n", "            ", "if", "self", ".", "model_mean_type", "==", "ModelMeanType", ".", "START_X", ":", "\n", "                ", "pred_xstart", "=", "process_xstart", "(", "model_output", ")", "\n", "", "else", ":", "\n", "                ", "pred_xstart", "=", "process_xstart", "(", "\n", "self", ".", "_predict_xstart_from_eps", "(", "x_t", "=", "x", ",", "t", "=", "t", ",", "eps", "=", "model_output", ")", "\n", ")", "\n", "", "model_mean", ",", "_", ",", "_", "=", "self", ".", "q_posterior_mean_variance", "(", "\n", "x_start", "=", "pred_xstart", ",", "x_t", "=", "x", ",", "t", "=", "t", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "self", ".", "model_mean_type", ")", "\n", "\n", "", "assert", "(", "\n", "model_mean", ".", "shape", "==", "model_log_variance", ".", "shape", "==", "pred_xstart", ".", "shape", "==", "x", ".", "shape", "\n", ")", "\n", "return", "{", "\n", "\"mean\"", ":", "model_mean", ",", "\n", "\"variance\"", ":", "model_variance", ",", "\n", "\"log_variance\"", ":", "model_log_variance", ",", "\n", "\"pred_xstart\"", ":", "pred_xstart", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_xstart_from_eps": [[334, 339], ["gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "_predict_xstart_from_eps", "(", "self", ",", "x_t", ",", "t", ",", "eps", ")", ":", "\n", "        ", "assert", "x_t", ".", "shape", "==", "eps", ".", "shape", "\n", "return", "(", "\n", "_extract_into_tensor", "(", "self", ".", "sqrt_recip_alphas_cumprod", ",", "t", ",", "x_t", ".", "shape", ")", "*", "x_t", "\n", "-", "_extract_into_tensor", "(", "self", ".", "sqrt_recipm1_alphas_cumprod", ",", "t", ",", "x_t", ".", "shape", ")", "*", "eps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_xstart_from_xprev": [[341, 349], ["gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "_predict_xstart_from_xprev", "(", "self", ",", "x_t", ",", "t", ",", "xprev", ")", ":", "\n", "        ", "assert", "x_t", ".", "shape", "==", "xprev", ".", "shape", "\n", "return", "(", "# (xprev - coef2*x_t) / coef1", "\n", "_extract_into_tensor", "(", "1.0", "/", "self", ".", "posterior_mean_coef1", ",", "t", ",", "x_t", ".", "shape", ")", "*", "xprev", "\n", "-", "_extract_into_tensor", "(", "\n", "self", ".", "posterior_mean_coef2", "/", "self", ".", "posterior_mean_coef1", ",", "t", ",", "x_t", ".", "shape", "\n", ")", "\n", "*", "x_t", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart": [[351, 356], ["gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "_predict_eps_from_xstart", "(", "self", ",", "x_t", ",", "t", ",", "pred_xstart", ")", ":", "\n", "        ", "return", "(", "\n", "_extract_into_tensor", "(", "self", ".", "sqrt_recip_alphas_cumprod", ",", "t", ",", "x_t", ".", "shape", ")", "*", "x_t", "\n", "-", "pred_xstart", "\n", ")", "/", "_extract_into_tensor", "(", "self", ".", "sqrt_recipm1_alphas_cumprod", ",", "t", ",", "x_t", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._scale_timesteps": [[357, 361], ["t.float"], "methods", ["None"], ["", "def", "_scale_timesteps", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "rescale_timesteps", ":", "\n", "            ", "return", "t", ".", "float", "(", ")", "*", "(", "1000.0", "/", "self", ".", "num_timesteps", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.condition_mean": [[362, 376], ["cond_fn", "gaussian_diffusion.GaussianDiffusion._scale_timesteps", "p_mean_var[].float", "cond_fn.float"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._scale_timesteps"], ["", "def", "condition_mean", "(", "self", ",", "cond_fn", ",", "p_mean_var", ",", "x", ",", "t", ",", "model_kwargs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute the mean for the previous step, given a function cond_fn that\n        computes the gradient of a conditional log probability with respect to\n        x. In particular, cond_fn computes grad(log(p(y|x))), and we want to\n        condition on y.\n\n        This uses the conditioning strategy from Sohl-Dickstein et al. (2015).\n        \"\"\"", "\n", "gradient", "=", "cond_fn", "(", "x", ",", "self", ".", "_scale_timesteps", "(", "t", ")", ",", "**", "model_kwargs", ")", "\n", "new_mean", "=", "(", "\n", "p_mean_var", "[", "\"mean\"", "]", ".", "float", "(", ")", "+", "p_mean_var", "[", "\"variance\"", "]", "*", "gradient", ".", "float", "(", ")", "\n", ")", "\n", "return", "new_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.condition_score": [[377, 400], ["gaussian_diffusion._extract_into_tensor", "gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart", "p_mean_var.copy", "gaussian_diffusion.GaussianDiffusion._predict_xstart_from_eps", "gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance", "cond_fn", "gaussian_diffusion.GaussianDiffusion._scale_timesteps"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_xstart_from_eps", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._scale_timesteps"], ["", "def", "condition_score", "(", "self", ",", "cond_fn", ",", "p_mean_var", ",", "x", ",", "t", ",", "model_kwargs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute what the p_mean_variance output would have been, should the\n        model's score function be conditioned by cond_fn.\n\n        See condition_mean() for details on cond_fn.\n\n        Unlike condition_mean(), this instead uses the conditioning strategy\n        from Song et al (2020).\n        \"\"\"", "\n", "alpha_bar", "=", "_extract_into_tensor", "(", "self", ".", "alphas_cumprod", ",", "t", ",", "x", ".", "shape", ")", "\n", "\n", "eps", "=", "self", ".", "_predict_eps_from_xstart", "(", "x", ",", "t", ",", "p_mean_var", "[", "\"pred_xstart\"", "]", ")", "\n", "eps", "=", "eps", "-", "(", "1", "-", "alpha_bar", ")", ".", "sqrt", "(", ")", "*", "cond_fn", "(", "\n", "x", ",", "self", ".", "_scale_timesteps", "(", "t", ")", ",", "**", "model_kwargs", "\n", ")", "\n", "\n", "out", "=", "p_mean_var", ".", "copy", "(", ")", "\n", "out", "[", "\"pred_xstart\"", "]", "=", "self", ".", "_predict_xstart_from_eps", "(", "x", ",", "t", ",", "eps", ")", "\n", "out", "[", "\"mean\"", "]", ",", "_", ",", "_", "=", "self", ".", "q_posterior_mean_variance", "(", "\n", "x_start", "=", "out", "[", "\"pred_xstart\"", "]", ",", "x_t", "=", "x", ",", "t", "=", "t", "\n", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample": [[401, 467], ["gaussian_diffusion.GaussianDiffusion.p_mean_variance", "torch.randn_like", "gaussian_diffusion.GaussianDiffusion.condition_mean", "torch.exp", "len"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.p_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.condition_mean"], ["", "def", "p_sample", "(", "\n", "self", ",", "\n", "model", ",", "\n", "x", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "cond_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sample x_{t-1} from the model at the given timestep.\n\n        :param model: the model to sample from.\n        :param x: the current tensor at x_{t-1}.\n        :param t: the value of t, starting at 0 for the first diffusion step.\n        :param clip_denoised: if True, clip the x_start prediction to [-1, 1].\n        :param denoised_fn: if not None, a function which applies to the\n            x_start prediction before it is used to sample.\n        :param cond_fn: if not None, this is a gradient function that acts\n                        similarly to the model.\n        :param model_kwargs: if not None, a dict of extra keyword arguments to\n            pass to the model. This can be used for conditioning.\n        :return: a dict containing the following keys:\n                 - 'sample': a random sample from the model.\n                 - 'pred_xstart': a prediction of x_0.\n        \"\"\"", "\n", "\n", "x_disto_start", "=", "model_kwargs", "[", "\"SR\"", "]", "\n", "\n", "# x_disto_start =  model_kwargs[\"noise\"]", "\n", "\n", "\n", "# x_t = self.q_sample(x_start, t)", "\n", "# x_disto = self.q_sample(x_disto_start, t)", "\n", "# model_inp = th.cat([x_t,x_disto_start],1)", "\n", "# x_start = ", "\n", "out", "=", "self", ".", "p_mean_variance", "(", "\n", "model", ",", "\n", "x", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "x_start", "=", "x_disto_start", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "# out = self.p_mean_variance(", "\n", "#     model,", "\n", "#     x,", "\n", "#     t,", "\n", "#     clip_denoised=clip_denoised,", "\n", "#     denoised_fn=denoised_fn,", "\n", "#     model_kwargs=model_kwargs,", "\n", "# )", "\n", "noise", "=", "th", ".", "randn_like", "(", "x", ")", "\n", "nonzero_mask", "=", "(", "\n", "(", "t", "!=", "0", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "(", "len", "(", "x", ".", "shape", ")", "-", "1", ")", ")", ")", "\n", ")", "# no noise when t == 0", "\n", "if", "cond_fn", "is", "not", "None", ":", "\n", "            ", "out", "[", "\"mean\"", "]", "=", "self", ".", "condition_mean", "(", "\n", "cond_fn", ",", "out", ",", "x", ",", "t", ",", "model_kwargs", "=", "model_kwargs", "\n", ")", "\n", "", "sample", "=", "out", "[", "\"mean\"", "]", "+", "nonzero_mask", "*", "th", ".", "exp", "(", "0.5", "*", "out", "[", "\"log_variance\"", "]", ")", "*", "noise", "\n", "return", "{", "\"sample\"", ":", "sample", ",", "\"pred_xstart\"", ":", "out", "[", "\"pred_xstart\"", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample_loop": [[468, 513], ["gaussian_diffusion.GaussianDiffusion.p_sample_loop_progressive"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample_loop_progressive"], ["", "def", "p_sample_loop", "(", "\n", "self", ",", "\n", "model", ",", "\n", "shape", ",", "\n", "noise", "=", "None", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "cond_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", "progress", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Generate samples from the model.\n\n        :param model: the model module.\n        :param shape: the shape of the samples, (N, C, H, W).\n        :param noise: if specified, the noise from the encoder to sample.\n                      Should be of the same shape as `shape`.\n        :param clip_denoised: if True, clip x_start predictions to [-1, 1].\n        :param denoised_fn: if not None, a function which applies to the\n            x_start prediction before it is used to sample.\n        :param cond_fn: if not None, this is a gradient function that acts\n                        similarly to the model.\n        :param model_kwargs: if not None, a dict of extra keyword arguments to\n            pass to the model. This can be used for conditioning.\n        :param device: if specified, the device to create the samples on.\n                       If not specified, use a model parameter's device.\n        :param progress: if True, show a tqdm progress bar.\n        :return: a non-differentiable batch of samples.\n        \"\"\"", "\n", "final", "=", "None", "\n", "for", "sample", "in", "self", ".", "p_sample_loop_progressive", "(", "\n", "model", ",", "\n", "shape", ",", "\n", "noise", "=", "noise", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "cond_fn", "=", "cond_fn", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "device", "=", "device", ",", "\n", "progress", "=", "progress", ",", "\n", ")", ":", "\n", "            ", "final", "=", "sample", "\n", "", "return", "final", "[", "\"sample\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample_loop_progressive": [[514, 565], ["isinstance", "torch.randn", "list", "tqdm", "torch.tensor", "next", "range", "torch.no_grad", "gaussian_diffusion.GaussianDiffusion.p_sample", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample"], ["", "def", "p_sample_loop_progressive", "(", "\n", "self", ",", "\n", "model", ",", "\n", "shape", ",", "\n", "noise", "=", "None", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "cond_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", "progress", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Generate samples from the model and yield intermediate samples from\n        each timestep of diffusion.\n\n        Arguments are the same as p_sample_loop().\n        Returns a generator over dicts, where each dict is the return value of\n        p_sample().\n        \"\"\"", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "", "assert", "isinstance", "(", "shape", ",", "(", "tuple", ",", "list", ")", ")", "\n", "if", "noise", "is", "not", "None", ":", "\n", "            ", "img", "=", "noise", "\n", "", "else", ":", "\n", "            ", "img", "=", "th", ".", "randn", "(", "*", "shape", ",", "device", "=", "device", ")", "\n", "\n", "", "indices", "=", "list", "(", "range", "(", "self", ".", "num_timesteps", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "if", "progress", ":", "\n", "# Lazy import so that we don't depend on tqdm.", "\n", "            ", "from", "tqdm", ".", "auto", "import", "tqdm", "\n", "\n", "indices", "=", "tqdm", "(", "indices", ")", "\n", "\n", "", "for", "i", "in", "indices", ":", "\n", "            ", "t", "=", "th", ".", "tensor", "(", "[", "i", "]", "*", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "p_sample", "(", "\n", "model", ",", "\n", "img", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "cond_fn", "=", "cond_fn", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "yield", "out", "\n", "img", "=", "out", "[", "\"sample\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_sample": [[567, 628], ["gaussian_diffusion.GaussianDiffusion.p_mean_variance", "gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor", "torch.randn_like", "gaussian_diffusion.GaussianDiffusion.condition_score", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "len"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.p_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.condition_score"], ["", "", "", "def", "ddim_sample", "(", "\n", "self", ",", "\n", "model", ",", "\n", "x", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "cond_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", "eta", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sample x_{t-1} from the model using DDIM.\n\n        Same usage as p_sample().\n        \"\"\"", "\n", "x_disto_start", "=", "model_kwargs", "[", "\"SR\"", "]", "\n", "\n", "# x_disto_start =  model_kwargs[\"noise\"]", "\n", "\n", "\n", "# x_t = self.q_sample(x_start, t)", "\n", "# x_disto = self.q_sample(x_disto_start, t)", "\n", "# model_inp = th.cat([x_t,x_disto_start],1)", "\n", "# x_start = ", "\n", "out", "=", "self", ".", "p_mean_variance", "(", "\n", "model", ",", "\n", "x", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "x_start", "=", "x_disto_start", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "if", "cond_fn", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "condition_score", "(", "cond_fn", ",", "out", ",", "x", ",", "t", ",", "model_kwargs", "=", "model_kwargs", ")", "\n", "\n", "# Usually our model outputs epsilon, but we re-derive it", "\n", "# in case we used x_start or x_prev prediction.", "\n", "", "eps", "=", "self", ".", "_predict_eps_from_xstart", "(", "x", ",", "t", ",", "out", "[", "\"pred_xstart\"", "]", ")", "\n", "\n", "alpha_bar", "=", "_extract_into_tensor", "(", "self", ".", "alphas_cumprod", ",", "t", ",", "x", ".", "shape", ")", "\n", "alpha_bar_prev", "=", "_extract_into_tensor", "(", "self", ".", "alphas_cumprod_prev", ",", "t", ",", "x", ".", "shape", ")", "\n", "sigma", "=", "(", "\n", "eta", "\n", "*", "th", ".", "sqrt", "(", "(", "1", "-", "alpha_bar_prev", ")", "/", "(", "1", "-", "alpha_bar", ")", ")", "\n", "*", "th", ".", "sqrt", "(", "1", "-", "alpha_bar", "/", "alpha_bar_prev", ")", "\n", ")", "\n", "# Equation 12.", "\n", "noise", "=", "th", ".", "randn_like", "(", "x", ")", "\n", "mean_pred", "=", "(", "\n", "out", "[", "\"pred_xstart\"", "]", "*", "th", ".", "sqrt", "(", "alpha_bar_prev", ")", "\n", "+", "th", ".", "sqrt", "(", "1", "-", "alpha_bar_prev", "-", "sigma", "**", "2", ")", "*", "eps", "\n", ")", "\n", "nonzero_mask", "=", "(", "\n", "(", "t", "!=", "0", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "(", "len", "(", "x", ".", "shape", ")", "-", "1", ")", ")", ")", "\n", ")", "# no noise when t == 0", "\n", "sample", "=", "mean_pred", "+", "nonzero_mask", "*", "sigma", "*", "noise", "\n", "return", "{", "\"sample\"", ":", "sample", ",", "\"pred_xstart\"", ":", "out", "[", "\"pred_xstart\"", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_reverse_sample": [[629, 666], ["gaussian_diffusion.GaussianDiffusion.p_mean_variance", "gaussian_diffusion._extract_into_tensor", "gaussian_diffusion._extract_into_tensor", "torch.sqrt", "torch.sqrt", "gaussian_diffusion._extract_into_tensor"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.p_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor"], ["", "def", "ddim_reverse_sample", "(", "\n", "self", ",", "\n", "model", ",", "\n", "x", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "eta", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sample x_{t+1} from the model using DDIM reverse ODE.\n        \"\"\"", "\n", "assert", "eta", "==", "0.0", ",", "\"Reverse ODE only for deterministic path\"", "\n", "out", "=", "self", ".", "p_mean_variance", "(", "\n", "model", ",", "\n", "x", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", ")", "\n", "# Usually our model outputs epsilon, but we re-derive it", "\n", "# in case we used x_start or x_prev prediction.", "\n", "eps", "=", "(", "\n", "_extract_into_tensor", "(", "self", ".", "sqrt_recip_alphas_cumprod", ",", "t", ",", "x", ".", "shape", ")", "*", "x", "\n", "-", "out", "[", "\"pred_xstart\"", "]", "\n", ")", "/", "_extract_into_tensor", "(", "self", ".", "sqrt_recipm1_alphas_cumprod", ",", "t", ",", "x", ".", "shape", ")", "\n", "alpha_bar_next", "=", "_extract_into_tensor", "(", "self", ".", "alphas_cumprod_next", ",", "t", ",", "x", ".", "shape", ")", "\n", "\n", "# Equation 12. reversed", "\n", "mean_pred", "=", "(", "\n", "out", "[", "\"pred_xstart\"", "]", "*", "th", ".", "sqrt", "(", "alpha_bar_next", ")", "\n", "+", "th", ".", "sqrt", "(", "1", "-", "alpha_bar_next", ")", "*", "eps", "\n", ")", "\n", "\n", "return", "{", "\"sample\"", ":", "mean_pred", ",", "\"pred_xstart\"", ":", "out", "[", "\"pred_xstart\"", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_sample_loop": [[667, 700], ["gaussian_diffusion.GaussianDiffusion.ddim_sample_loop_progressive"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_sample_loop_progressive"], ["", "def", "ddim_sample_loop", "(", "\n", "self", ",", "\n", "model", ",", "\n", "shape", ",", "\n", "noise", "=", "None", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "cond_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", "progress", "=", "False", ",", "\n", "eta", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Generate samples from the model using DDIM.\n\n        Same usage as p_sample_loop().\n        \"\"\"", "\n", "final", "=", "None", "\n", "for", "sample", "in", "self", ".", "ddim_sample_loop_progressive", "(", "\n", "model", ",", "\n", "shape", ",", "\n", "noise", "=", "noise", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "cond_fn", "=", "cond_fn", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "device", "=", "device", ",", "\n", "progress", "=", "progress", ",", "\n", "eta", "=", "eta", ",", "\n", ")", ":", "\n", "            ", "final", "=", "sample", "\n", "", "return", "final", "[", "\"sample\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_sample_loop_progressive": [[701, 773], ["isinstance", "torch.randn", "list", "tqdm", "torch.tensor", "next", "range", "gaussian_diffusion.GaussianDiffusion.ddim_sample", "model.parameters", "torch.no_grad", "gaussian_diffusion.GaussianDiffusion.ddim_sample"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_sample", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.ddim_sample"], ["", "def", "ddim_sample_loop_progressive", "(", "\n", "self", ",", "\n", "model", ",", "\n", "shape", ",", "\n", "noise", "=", "None", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "denoised_fn", "=", "None", ",", "\n", "cond_fn", "=", "None", ",", "\n", "model_kwargs", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", "progress", "=", "False", ",", "\n", "eta", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Use DDIM to sample from the model and yield intermediate samples from\n        each timestep of DDIM.\n\n        Same usage as p_sample_loop_progressive().\n        \"\"\"", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "", "assert", "isinstance", "(", "shape", ",", "(", "tuple", ",", "list", ")", ")", "\n", "if", "noise", "is", "not", "None", ":", "\n", "            ", "img", "=", "noise", "\n", "\n", "", "else", ":", "\n", "            ", "img", "=", "th", ".", "randn", "(", "*", "shape", ",", "device", "=", "device", ")", "\n", "\n", "", "indices", "=", "list", "(", "range", "(", "self", ".", "num_timesteps", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "if", "progress", ":", "\n", "# Lazy import so that we don't depend on tqdm.", "\n", "            ", "from", "tqdm", ".", "auto", "import", "tqdm", "\n", "\n", "indices", "=", "tqdm", "(", "indices", ")", "\n", "\n", "# print(indices)", "\n", "\n", "", "for", "i", "in", "indices", ":", "\n", "            ", "t", "=", "th", ".", "tensor", "(", "[", "i", "]", "*", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "# print(i)", "\n", "if", "i", "==", "0", ":", "\n", "                ", "out", "=", "self", ".", "ddim_sample", "(", "\n", "model", ",", "\n", "img", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "cond_fn", "=", "cond_fn", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "device", "=", "device", ",", "\n", "eta", "=", "eta", ",", "\n", ")", "\n", "yield", "out", "\n", "img", "=", "out", "[", "\"sample\"", "]", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out", "=", "self", ".", "ddim_sample", "(", "\n", "model", ",", "\n", "img", ",", "\n", "t", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "denoised_fn", "=", "denoised_fn", ",", "\n", "cond_fn", "=", "cond_fn", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", "eta", "=", "eta", ",", "\n", ")", "\n", "yield", "out", "\n", "img", "=", "out", "[", "\"sample\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._vb_terms_bpd": [[791, 825], ["gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance", "gaussian_diffusion.GaussianDiffusion.p_mean_variance", "losses.normal_kl", "torch.where", "nn.mean_flat", "numpy.log", "losses.discretized_gaussian_log_likelihood", "nn.mean_flat", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.p_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.normal_kl", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.discretized_gaussian_log_likelihood", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "", "", "", "def", "_vb_terms_bpd", "(", "\n", "self", ",", "model", ",", "x_start", ",", "x_t", ",", "t", ",", "clip_denoised", "=", "True", ",", "model_kwargs", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Get a term for the variational lower-bound.\n\n        The resulting units are bits (rather than nats, as one might expect).\n        This allows for comparison to other papers.\n\n        :return: a dict with the following keys:\n                 - 'output': a shape [N] tensor of NLLs or KLs.\n                 - 'pred_xstart': the x_0 predictions.\n        \"\"\"", "\n", "true_mean", ",", "_", ",", "true_log_variance_clipped", "=", "self", ".", "q_posterior_mean_variance", "(", "\n", "x_start", "=", "x_start", ",", "x_t", "=", "x_t", ",", "t", "=", "t", "\n", ")", "\n", "out", "=", "self", ".", "p_mean_variance", "(", "\n", "model", ",", "x_t", ",", "t", ",", "clip_denoised", "=", "clip_denoised", ",", "x_start", "=", "x_start", ",", "model_kwargs", "=", "model_kwargs", "\n", ")", "\n", "kl", "=", "normal_kl", "(", "\n", "true_mean", ",", "true_log_variance_clipped", ",", "out", "[", "\"mean\"", "]", ",", "out", "[", "\"log_variance\"", "]", "\n", ")", "\n", "kl", "=", "mean_flat", "(", "kl", ")", "/", "np", ".", "log", "(", "2.0", ")", "\n", "\n", "decoder_nll", "=", "-", "discretized_gaussian_log_likelihood", "(", "\n", "x_start", ",", "means", "=", "out", "[", "\"mean\"", "]", ",", "log_scales", "=", "0.5", "*", "out", "[", "\"log_variance\"", "]", "\n", ")", "\n", "assert", "decoder_nll", ".", "shape", "==", "x_start", ".", "shape", "\n", "decoder_nll", "=", "mean_flat", "(", "decoder_nll", ")", "/", "np", ".", "log", "(", "2.0", ")", "\n", "\n", "# At the first timestep return the decoder NLL,", "\n", "# otherwise return KL(q(x_{t-1}|x_t,x_0) || p(x_{t-1}|x_t))", "\n", "output", "=", "th", ".", "where", "(", "(", "t", "==", "0", ")", ",", "decoder_nll", ",", "kl", ")", "\n", "return", "{", "\"output\"", ":", "output", ",", "\"pred_xstart\"", ":", "out", "[", "\"pred_xstart\"", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.training_losses": [[826, 933], ["gaussian_diffusion.GaussianDiffusion.q_sample", "torch.cat", "model", "torch.randn_like", "gaussian_diffusion.GaussianDiffusion._scale_timesteps", "x.clamp", "gaussian_diffusion.GaussianDiffusion._vb_terms_bpd", "nn.mean_flat", "NotImplementedError", "torch.split", "torch.cat", "gaussian_diffusion.GaussianDiffusion._vb_terms_bpd", "model.detach", "gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_sample", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._scale_timesteps", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._vb_terms_bpd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._vb_terms_bpd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_posterior_mean_variance"], ["", "def", "training_losses", "(", "self", ",", "model", ",", "x_start", ",", "t", ",", "model_kwargs", "=", "None", ",", "noise", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute training losses for a single timestep.\n\n        :param model: the model to evaluate loss on.\n        :param x_start: the [N x C x ...] tensor of inputs.\n        :param t: a batch of timestep indices.\n        :param model_kwargs: if not None, a dict of extra keyword arguments to\n            pass to the model. This can be used for conditioning.\n        :param noise: if specified, the specific Gaussian noise to try to remove.\n        :return: a dict with the key \"loss\" containing a tensor of shape [N].\n                 Some mean or variance settings may also have other keys.\n        \"\"\"", "\n", "if", "model_kwargs", "is", "None", ":", "\n", "            ", "model_kwargs", "=", "{", "}", "\n", "", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "th", ".", "randn_like", "(", "x_start", ")", "\n", "", "x_disto_start", "=", "model_kwargs", "[", "\"SR\"", "]", "\n", "\n", "# x_disto_start =  model_kwargs[\"noise\"]", "\n", "\n", "x_t", "=", "self", ".", "q_sample", "(", "x_start", ",", "t", ",", "noise", "=", "noise", ")", "###use this", "\n", "# x_t = model_kwargs[\"SR\"]", "\n", "\n", "# x_disto = self.q_sample(x_disto_start, t, noise=noise)", "\n", "model_inp", "=", "th", ".", "cat", "(", "[", "x_t", ",", "x_disto_start", "]", ",", "1", ")", "### use this", "\n", "\n", "# model_inp = x_t", "\n", "# model_inp1 = th.cat([x_disto,x_disto_start],1)", "\n", "model_output", "=", "model", "(", "model_inp", ",", "self", ".", "_scale_timesteps", "(", "t", ")", ",", "**", "model_kwargs", ")", "\n", "# print(model_output.type())", "\n", "\n", "# model_output1 = model(model_inp1, self._scale_timesteps(t), **model_kwargs)", "\n", "\n", "# x_t = self.q_sample(x_start, t, noise=noise)", "\n", "def", "process_xstart", "(", "x", ")", ":", "\n", "                ", "return", "x", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "# model_output11, model_var_values11 = th.split(model_output1, 3, dim=1)", "\n", "# model_output11, model_var_values11 = th.split(model_output1, 3, dim=1)", "\n", "\n", "# pred_xstart1 = process_xstart(self._predict_xstart_from_eps(x_t=x_disto, t=t, eps=model_output11))", "\n", "", "terms", "=", "{", "}", "\n", "\n", "if", "self", ".", "loss_type", "==", "LossType", ".", "KL", "or", "self", ".", "loss_type", "==", "LossType", ".", "RESCALED_KL", ":", "\n", "            ", "terms", "[", "\"loss\"", "]", "=", "self", ".", "_vb_terms_bpd", "(", "\n", "model", "=", "model", ",", "\n", "x_start", "=", "x_start", ",", "\n", "x_t", "=", "x_t", ",", "\n", "t", "=", "t", ",", "\n", "clip_denoised", "=", "False", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", ")", "[", "\"output\"", "]", "\n", "if", "self", ".", "loss_type", "==", "LossType", ".", "RESCALED_KL", ":", "\n", "                ", "terms", "[", "\"loss\"", "]", "*=", "self", ".", "num_timesteps", "\n", "", "", "elif", "self", ".", "loss_type", "==", "LossType", ".", "MSE", "or", "self", ".", "loss_type", "==", "LossType", ".", "RESCALED_MSE", ":", "\n", "# print(model_kwargs)", "\n", "# for _ in model_kwargs:", "\n", "#     print(_)", "\n", "# stop", "\n", "\n", "# model_output1 = model(model_inp1, self._scale_timesteps(t), **model_kwargs)", "\n", "\n", "            ", "if", "self", ".", "model_var_type", "in", "[", "\n", "ModelVarType", ".", "LEARNED", ",", "\n", "ModelVarType", ".", "LEARNED_RANGE", ",", "\n", "]", ":", "\n", "                ", "B", ",", "C", "=", "x_t", ".", "shape", "[", ":", "2", "]", "\n", "assert", "model_output", ".", "shape", "==", "(", "B", ",", "C", "*", "2", ",", "*", "x_t", ".", "shape", "[", "2", ":", "]", ")", "\n", "model_output", ",", "model_var_values", "=", "th", ".", "split", "(", "model_output", ",", "C", ",", "dim", "=", "1", ")", "\n", "# model_output1, model_var_values = th.split(model_output1, C, dim=1)", "\n", "\n", "# Learn the variance using the variational bound, but don't let", "\n", "# it affect our mean prediction.", "\n", "frozen_out", "=", "th", ".", "cat", "(", "[", "model_output", ".", "detach", "(", ")", ",", "model_var_values", "]", ",", "dim", "=", "1", ")", "\n", "\n", "terms", "[", "\"vb\"", "]", "=", "self", ".", "_vb_terms_bpd", "(", "\n", "model", "=", "lambda", "*", "args", ",", "r", "=", "frozen_out", ":", "r", ",", "\n", "x_start", "=", "x_start", ",", "\n", "x_t", "=", "x_t", ",", "\n", "t", "=", "t", ",", "\n", "clip_denoised", "=", "False", ",", "\n", ")", "[", "\"output\"", "]", "\n", "\n", "if", "self", ".", "loss_type", "==", "LossType", ".", "RESCALED_MSE", ":", "\n", "# Divide by 1000 for equivalence with initial implementation.", "\n", "# Without a factor of 1/1000, the VB term hurts the MSE term.", "\n", "                    ", "terms", "[", "\"vb\"", "]", "*=", "self", ".", "num_timesteps", "/", "1000.0", "\n", "\n", "", "", "target", "=", "{", "\n", "ModelMeanType", ".", "PREVIOUS_X", ":", "self", ".", "q_posterior_mean_variance", "(", "\n", "x_start", "=", "x_start", ",", "x_t", "=", "x_t", ",", "t", "=", "t", "\n", ")", "[", "0", "]", ",", "\n", "ModelMeanType", ".", "START_X", ":", "x_start", ",", "\n", "ModelMeanType", ".", "EPSILON", ":", "noise", ",", "\n", "}", "[", "self", ".", "model_mean_type", "]", "\n", "assert", "model_output", ".", "shape", "==", "target", ".", "shape", "==", "x_start", ".", "shape", "\n", "\n", "terms", "[", "\"mse\"", "]", "=", "mean_flat", "(", "(", "target", "-", "model_output", ")", "**", "2", ")", "#+ 0.001*mean_flat((model_output- model_output11) ** 2)", "\n", "if", "\"vb\"", "in", "terms", ":", "\n", "                ", "terms", "[", "\"loss\"", "]", "=", "terms", "[", "\"mse\"", "]", "+", "terms", "[", "\"vb\"", "]", "\n", "\n", "", "else", ":", "\n", "                ", "terms", "[", "\"loss\"", "]", "=", "terms", "[", "\"mse\"", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "self", ".", "loss_type", ")", "\n", "\n", "", "return", "terms", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._prior_bpd": [[934, 951], ["torch.tensor", "gaussian_diffusion.GaussianDiffusion.q_mean_variance", "losses.normal_kl", "nn.mean_flat", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.normal_kl", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "_prior_bpd", "(", "self", ",", "x_start", ")", ":", "\n", "        ", "\"\"\"\n        Get the prior KL term for the variational lower-bound, measured in\n        bits-per-dim.\n\n        This term can't be optimized, as it only depends on the encoder.\n\n        :param x_start: the [N x C x ...] tensor of inputs.\n        :return: a batch of [N] KL values (in bits), one per batch element.\n        \"\"\"", "\n", "batch_size", "=", "x_start", ".", "shape", "[", "0", "]", "\n", "t", "=", "th", ".", "tensor", "(", "[", "self", ".", "num_timesteps", "-", "1", "]", "*", "batch_size", ",", "device", "=", "x_start", ".", "device", ")", "\n", "qt_mean", ",", "_", ",", "qt_log_variance", "=", "self", ".", "q_mean_variance", "(", "x_start", ",", "t", ")", "\n", "kl_prior", "=", "normal_kl", "(", "\n", "mean1", "=", "qt_mean", ",", "logvar1", "=", "qt_log_variance", ",", "mean2", "=", "0.0", ",", "logvar2", "=", "0.0", "\n", ")", "\n", "return", "mean_flat", "(", "kl_prior", ")", "/", "np", ".", "log", "(", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.calc_bpd_loop": [[952, 1007], ["torch.stack", "torch.stack", "torch.stack", "gaussian_diffusion.GaussianDiffusion._prior_bpd", "list", "torch.tensor", "torch.randn_like", "gaussian_diffusion.GaussianDiffusion.q_sample", "torch.stack.append", "torch.stack.append", "gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart", "torch.stack.append", "torch.stack.sum", "range", "torch.no_grad", "gaussian_diffusion.GaussianDiffusion._vb_terms_bpd", "nn.mean_flat", "nn.mean_flat"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._prior_bpd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.q_sample", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._predict_eps_from_xstart", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion._vb_terms_bpd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat"], ["", "def", "calc_bpd_loop", "(", "self", ",", "model", ",", "x_start", ",", "clip_denoised", "=", "True", ",", "model_kwargs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute the entire variational lower-bound, measured in bits-per-dim,\n        as well as other related quantities.\n\n        :param model: the model to evaluate loss on.\n        :param x_start: the [N x C x ...] tensor of inputs.\n        :param clip_denoised: if True, clip denoised samples.\n        :param model_kwargs: if not None, a dict of extra keyword arguments to\n            pass to the model. This can be used for conditioning.\n\n        :return: a dict containing the following keys:\n                 - total_bpd: the total variational lower-bound, per batch element.\n                 - prior_bpd: the prior term in the lower-bound.\n                 - vb: an [N x T] tensor of terms in the lower-bound.\n                 - xstart_mse: an [N x T] tensor of x_0 MSEs for each timestep.\n                 - mse: an [N x T] tensor of epsilon MSEs for each timestep.\n        \"\"\"", "\n", "device", "=", "x_start", ".", "device", "\n", "batch_size", "=", "x_start", ".", "shape", "[", "0", "]", "\n", "\n", "vb", "=", "[", "]", "\n", "xstart_mse", "=", "[", "]", "\n", "mse", "=", "[", "]", "\n", "for", "t", "in", "list", "(", "range", "(", "self", ".", "num_timesteps", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "t_batch", "=", "th", ".", "tensor", "(", "[", "t", "]", "*", "batch_size", ",", "device", "=", "device", ")", "\n", "noise", "=", "th", ".", "randn_like", "(", "x_start", ")", "\n", "x_t", "=", "self", ".", "q_sample", "(", "x_start", "=", "x_start", ",", "t", "=", "t_batch", ",", "noise", "=", "noise", ")", "\n", "# Calculate VLB term at the current timestep", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "_vb_terms_bpd", "(", "\n", "model", ",", "\n", "x_start", "=", "x_start", ",", "\n", "x_t", "=", "x_t", ",", "\n", "t", "=", "t_batch", ",", "\n", "clip_denoised", "=", "clip_denoised", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", ")", "\n", "", "vb", ".", "append", "(", "out", "[", "\"output\"", "]", ")", "\n", "xstart_mse", ".", "append", "(", "mean_flat", "(", "(", "out", "[", "\"pred_xstart\"", "]", "-", "x_start", ")", "**", "2", ")", ")", "\n", "eps", "=", "self", ".", "_predict_eps_from_xstart", "(", "x_t", ",", "t_batch", ",", "out", "[", "\"pred_xstart\"", "]", ")", "\n", "mse", ".", "append", "(", "mean_flat", "(", "(", "eps", "-", "noise", ")", "**", "2", ")", ")", "\n", "\n", "", "vb", "=", "th", ".", "stack", "(", "vb", ",", "dim", "=", "1", ")", "\n", "xstart_mse", "=", "th", ".", "stack", "(", "xstart_mse", ",", "dim", "=", "1", ")", "\n", "mse", "=", "th", ".", "stack", "(", "mse", ",", "dim", "=", "1", ")", "\n", "\n", "prior_bpd", "=", "self", ".", "_prior_bpd", "(", "x_start", ")", "\n", "total_bpd", "=", "vb", ".", "sum", "(", "dim", "=", "1", ")", "+", "prior_bpd", "\n", "return", "{", "\n", "\"total_bpd\"", ":", "total_bpd", ",", "\n", "\"prior_bpd\"", ":", "prior_bpd", ",", "\n", "\"vb\"", ":", "vb", ",", "\n", "\"xstart_mse\"", ":", "xstart_mse", ",", "\n", "\"mse\"", ":", "mse", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.get_named_beta_schedule": [[19, 45], ["numpy.linspace", "gaussian_diffusion.betas_for_alpha_bar", "NotImplementedError", "math.cos"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.betas_for_alpha_bar"], ["def", "get_named_beta_schedule", "(", "schedule_name", ",", "num_diffusion_timesteps", ")", ":", "\n", "    ", "\"\"\"\n    Get a pre-defined beta schedule for the given name.\n\n    The beta schedule library consists of beta schedules which remain similar\n    in the limit of num_diffusion_timesteps.\n    Beta schedules may be added, but should not be removed or changed once\n    they are committed to maintain backwards compatibility.\n    \"\"\"", "\n", "# schedule_name=cosine", "\n", "if", "schedule_name", "==", "\"linear\"", ":", "\n", "# Linear schedule from Ho et al, extended to work for any number of", "\n", "# diffusion steps.", "\n", "        ", "scale", "=", "1000", "/", "num_diffusion_timesteps", "\n", "beta_start", "=", "scale", "*", "0.0001", "\n", "beta_end", "=", "scale", "*", "0.02", "\n", "return", "np", ".", "linspace", "(", "\n", "beta_start", ",", "beta_end", ",", "num_diffusion_timesteps", ",", "dtype", "=", "np", ".", "float64", "\n", ")", "\n", "", "elif", "schedule_name", "==", "\"cosine\"", ":", "\n", "        ", "return", "betas_for_alpha_bar", "(", "\n", "num_diffusion_timesteps", ",", "\n", "lambda", "t", ":", "math", ".", "cos", "(", "(", "t", "+", "0.008", ")", "/", "1.008", "*", "math", ".", "pi", "/", "2", ")", "**", "2", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"unknown beta schedule: {schedule_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.betas_for_alpha_bar": [[47, 65], ["range", "numpy.array", "betas.append", "min", "alpha_bar", "alpha_bar"], "function", ["None"], ["", "", "def", "betas_for_alpha_bar", "(", "num_diffusion_timesteps", ",", "alpha_bar", ",", "max_beta", "=", "0.999", ")", ":", "\n", "    ", "\"\"\"\n    Create a beta schedule that discretizes the given alpha_t_bar function,\n    which defines the cumulative product of (1-beta) over time from t = [0,1].\n\n    :param num_diffusion_timesteps: the number of betas to produce.\n    :param alpha_bar: a lambda that takes an argument t from 0 to 1 and\n                      produces the cumulative product of (1-beta) up to that\n                      part of the diffusion process.\n    :param max_beta: the maximum beta to use; use values lower than 1 to\n                     prevent singularities.\n    \"\"\"", "\n", "betas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_diffusion_timesteps", ")", ":", "\n", "        ", "t1", "=", "i", "/", "num_diffusion_timesteps", "\n", "t2", "=", "(", "i", "+", "1", ")", "/", "num_diffusion_timesteps", "\n", "betas", ".", "append", "(", "min", "(", "1", "-", "alpha_bar", "(", "t2", ")", "/", "alpha_bar", "(", "t1", ")", ",", "max_beta", ")", ")", "\n", "", "return", "np", ".", "array", "(", "betas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion._extract_into_tensor": [[1010, 1024], ["[].float", "[].float.expand", "len", "len", "torch.from_numpy().to", "torch.from_numpy"], "function", ["None"], ["", "", "def", "_extract_into_tensor", "(", "arr", ",", "timesteps", ",", "broadcast_shape", ")", ":", "\n", "    ", "\"\"\"\n    Extract values from a 1-D numpy array for a batch of indices.\n\n    :param arr: the 1-D numpy array.\n    :param timesteps: a tensor of indices into the array to extract.\n    :param broadcast_shape: a larger shape of K dimensions with the batch\n                            dimension equal to the length of timesteps.\n    :return: a tensor of shape [batch_size, 1, ...] where the shape has K dims.\n    \"\"\"", "\n", "res", "=", "th", ".", "from_numpy", "(", "arr", ")", ".", "to", "(", "device", "=", "timesteps", ".", "device", ")", "[", "timesteps", "]", ".", "float", "(", ")", "\n", "while", "len", "(", "res", ".", "shape", ")", "<", "len", "(", "broadcast_shape", ")", ":", "\n", "        ", "res", "=", "res", "[", "...", ",", "None", "]", "\n", "", "return", "res", ".", "expand", "(", "broadcast_shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.setup_dist": [[21, 45], ["torch.is_initialized", "comm.bcast", "str", "str", "comm.bcast", "str", "torch.init_process_group", "socket.gethostbyname", "dist_util._find_free_port", "torch.cuda.is_available", "socket.getfqdn", "mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util._find_free_port"], ["def", "setup_dist", "(", ")", ":", "\n", "    ", "\"\"\"\n    Setup a distributed process group.\n    \"\"\"", "\n", "if", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "f\"{MPI.COMM_WORLD.Get_rank() % GPUS_PER_NODE}\"", "\n", "# os.environ[\"CUDA_VISIBLE_DEVICES\"] = '1'", "\n", "# print(os.environ[\"CUDA_VISIBLE_DEVICES\"])", "\n", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "backend", "=", "\"gloo\"", "if", "not", "th", ".", "cuda", ".", "is_available", "(", ")", "else", "\"nccl\"", "\n", "\n", "if", "backend", "==", "\"gloo\"", ":", "\n", "        ", "hostname", "=", "\"localhost\"", "\n", "", "else", ":", "\n", "        ", "hostname", "=", "socket", ".", "gethostbyname", "(", "socket", ".", "getfqdn", "(", ")", ")", "\n", "", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "comm", ".", "bcast", "(", "hostname", ",", "root", "=", "0", ")", "\n", "os", ".", "environ", "[", "\"RANK\"", "]", "=", "str", "(", "comm", ".", "rank", ")", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "comm", ".", "size", ")", "\n", "\n", "port", "=", "comm", ".", "bcast", "(", "_find_free_port", "(", ")", ",", "root", "=", "0", ")", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "port", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "init_method", "=", "\"env://\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev": [[47, 54], ["torch.cuda.is_available", "torch.device", "torch.device"], "function", ["None"], ["", "def", "dev", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get the device to use for torch.distributed.\n    \"\"\"", "\n", "if", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "th", ".", "device", "(", "f\"cuda\"", ")", "\n", "", "return", "th", ".", "device", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict": [[56, 77], ["torch.load", "mpi4py.MPI.COMM_WORLD.Get_rank", "mpi4py.MPI.COMM_WORLD.bcast", "range", "mpi4py.MPI.COMM_WORLD.bcast", "bytes", "range", "io.BytesIO", "blobfile.BlobFile", "f.read", "len", "len", "len", "mpi4py.MPI.COMM_WORLD.bcast", "mpi4py.MPI.COMM_WORLD.bcast"], "function", ["None"], ["", "def", "load_state_dict", "(", "path", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Load a PyTorch file without redundant fetches across MPI ranks.\n    \"\"\"", "\n", "chunk_size", "=", "2", "**", "30", "# MPI has a relatively small size limit", "\n", "if", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "with", "bf", ".", "BlobFile", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", ")", "\n", "", "num_chunks", "=", "len", "(", "data", ")", "//", "chunk_size", "\n", "if", "len", "(", "data", ")", "%", "chunk_size", ":", "\n", "            ", "num_chunks", "+=", "1", "\n", "", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "num_chunks", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", ")", ",", "chunk_size", ")", ":", "\n", "            ", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "data", "[", "i", ":", "i", "+", "chunk_size", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "num_chunks", "=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "None", ")", "\n", "data", "=", "bytes", "(", ")", "\n", "for", "_", "in", "range", "(", "num_chunks", ")", ":", "\n", "            ", "data", "+=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "None", ")", "\n", "\n", "", "", "return", "th", ".", "load", "(", "io", ".", "BytesIO", "(", "data", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.sync_params": [[79, 86], ["torch.no_grad", "torch.broadcast"], "function", ["None"], ["", "def", "sync_params", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    Synchronize a sequence of Tensors across ranks from rank 0.\n    \"\"\"", "\n", "for", "p", "in", "params", ":", "\n", "        ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist", ".", "broadcast", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util._find_free_port": [[88, 96], ["socket.socket", "socket.socket.bind", "socket.socket.setsockopt", "socket.socket.close", "socket.socket.getsockname"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close"], ["", "", "", "def", "_find_free_port", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "s", ".", "bind", "(", "(", "\"\"", ",", "0", ")", ")", "\n", "s", ".", "setsockopt", "(", "socket", ".", "SOL_SOCKET", ",", "socket", ".", "SO_REUSEADDR", ",", "1", ")", "\n", "return", "s", ".", "getsockname", "(", ")", "[", "1", "]", "\n", "", "finally", ":", "\n", "        ", "s", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.__init__": [[72, 87], ["set", "len", "gaussian_diffusion.GaussianDiffusion", "enumerate", "numpy.array", "gaussian_diffusion.GaussianDiffusion.__init__", "new_betas.append", "respace.SpacedDiffusion.timestep_map.append"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "use_timesteps", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "use_timesteps", "=", "set", "(", "use_timesteps", ")", "\n", "self", ".", "timestep_map", "=", "[", "]", "\n", "self", ".", "original_num_steps", "=", "len", "(", "kwargs", "[", "\"betas\"", "]", ")", "\n", "\n", "base_diffusion", "=", "GaussianDiffusion", "(", "**", "kwargs", ")", "# pylint: disable=missing-kwoa", "\n", "last_alpha_cumprod", "=", "1.0", "\n", "new_betas", "=", "[", "]", "\n", "for", "i", ",", "alpha_cumprod", "in", "enumerate", "(", "base_diffusion", ".", "alphas_cumprod", ")", ":", "\n", "            ", "if", "i", "in", "self", ".", "use_timesteps", ":", "\n", "                ", "new_betas", ".", "append", "(", "1", "-", "alpha_cumprod", "/", "last_alpha_cumprod", ")", "\n", "last_alpha_cumprod", "=", "alpha_cumprod", "\n", "self", ".", "timestep_map", ".", "append", "(", "i", ")", "\n", "", "", "kwargs", "[", "\"betas\"", "]", "=", "np", ".", "array", "(", "new_betas", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.p_mean_variance": [[88, 92], ["super().p_mean_variance", "respace.SpacedDiffusion._wrap_model"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.p_mean_variance", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._wrap_model"], ["", "def", "p_mean_variance", "(", "\n", "self", ",", "model", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "# pylint: disable=signature-differs", "\n", "        ", "return", "super", "(", ")", ".", "p_mean_variance", "(", "self", ".", "_wrap_model", "(", "model", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.training_losses": [[93, 97], ["super().training_losses", "respace.SpacedDiffusion._wrap_model"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.training_losses", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._wrap_model"], ["", "def", "training_losses", "(", "\n", "self", ",", "model", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "# pylint: disable=signature-differs", "\n", "        ", "return", "super", "(", ")", ".", "training_losses", "(", "self", ".", "_wrap_model", "(", "model", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.condition_mean": [[98, 100], ["super().condition_mean", "respace.SpacedDiffusion._wrap_model"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.condition_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._wrap_model"], ["", "def", "condition_mean", "(", "self", ",", "cond_fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "condition_mean", "(", "self", ".", "_wrap_model", "(", "cond_fn", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.condition_score": [[101, 103], ["super().condition_score", "respace.SpacedDiffusion._wrap_model"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion.condition_score", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._wrap_model"], ["", "def", "condition_score", "(", "self", ",", "cond_fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "condition_score", "(", "self", ".", "_wrap_model", "(", "cond_fn", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._wrap_model": [[104, 109], ["isinstance", "respace._WrappedModel"], "methods", ["None"], ["", "def", "_wrap_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "_WrappedModel", ")", ":", "\n", "            ", "return", "model", "\n", "", "return", "_WrappedModel", "(", "\n", "model", ",", "self", ".", "timestep_map", ",", "self", ".", "rescale_timesteps", ",", "self", ".", "original_num_steps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.SpacedDiffusion._scale_timesteps": [[111, 114], ["None"], "methods", ["None"], ["", "def", "_scale_timesteps", "(", "self", ",", "t", ")", ":", "\n", "# Scaling is done by the wrapped model.", "\n", "        ", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace._WrappedModel.__init__": [[117, 122], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "timestep_map", ",", "rescale_timesteps", ",", "original_num_steps", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "timestep_map", "=", "timestep_map", "\n", "self", ".", "rescale_timesteps", "=", "rescale_timesteps", "\n", "self", ".", "original_num_steps", "=", "original_num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace._WrappedModel.__call__": [[123, 132], ["torch.tensor", "respace._WrappedModel.model", "new_ts.float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "ts", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "map_tensor", "=", "th", ".", "tensor", "(", "self", ".", "timestep_map", ",", "device", "=", "ts", ".", "device", ",", "dtype", "=", "ts", ".", "dtype", ")", "\n", "new_ts", "=", "map_tensor", "[", "ts", "]", "\n", "if", "self", ".", "rescale_timesteps", ":", "\n", "            ", "new_ts", "=", "new_ts", ".", "float", "(", ")", "*", "(", "1000.0", "/", "self", ".", "original_num_steps", ")", "\n", "# print('new_ts')", "\n", "# print(new_ts.device)", "\n", "", "return", "self", ".", "model", "(", "x", ",", "new_ts", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.space_timesteps": [[7, 61], ["isinstance", "enumerate", "set", "section_counts.startswith", "len", "len", "range", "int", "range", "ValueError", "int", "ValueError", "taken_steps.append", "section_counts.split", "len", "set", "round", "len", "range", "range"], "function", ["None"], ["def", "space_timesteps", "(", "num_timesteps", ",", "section_counts", ")", ":", "\n", "    ", "\"\"\"\n    Create a list of timesteps to use from an original diffusion process,\n    given the number of timesteps we want to take from equally-sized portions\n    of the original process.\n\n    For example, if there's 300 timesteps and the section counts are [10,15,20]\n    then the first 100 timesteps are strided to be 10 timesteps, the second 100\n    are strided to be 15 timesteps, and the final 100 are strided to be 20.\n\n    If the stride is a string starting with \"ddim\", then the fixed striding\n    from the DDIM paper is used, and only one section is allowed.\n\n    :param num_timesteps: the number of diffusion steps in the original\n                          process to divide up.\n    :param section_counts: either a list of numbers, or a string containing\n                           comma-separated numbers, indicating the step count\n                           per section. As a special case, use \"ddimN\" where N\n                           is a number of steps to use the striding from the\n                           DDIM paper.\n    :return: a set of diffusion steps from the original process to use.\n    \"\"\"", "\n", "if", "isinstance", "(", "section_counts", ",", "str", ")", ":", "\n", "        ", "if", "section_counts", ".", "startswith", "(", "\"ddim\"", ")", ":", "\n", "            ", "desired_count", "=", "int", "(", "section_counts", "[", "len", "(", "\"ddim\"", ")", ":", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_timesteps", ")", ":", "\n", "                ", "if", "len", "(", "range", "(", "0", ",", "num_timesteps", ",", "i", ")", ")", "==", "desired_count", ":", "\n", "                    ", "return", "set", "(", "range", "(", "0", ",", "num_timesteps", ",", "i", ")", ")", "\n", "", "", "raise", "ValueError", "(", "\n", "f\"cannot create exactly {num_timesteps} steps with an integer stride\"", "\n", ")", "\n", "", "section_counts", "=", "[", "int", "(", "x", ")", "for", "x", "in", "section_counts", ".", "split", "(", "\",\"", ")", "]", "\n", "", "size_per", "=", "num_timesteps", "//", "len", "(", "section_counts", ")", "\n", "extra", "=", "num_timesteps", "%", "len", "(", "section_counts", ")", "\n", "start_idx", "=", "0", "\n", "all_steps", "=", "[", "]", "\n", "for", "i", ",", "section_count", "in", "enumerate", "(", "section_counts", ")", ":", "\n", "        ", "size", "=", "size_per", "+", "(", "1", "if", "i", "<", "extra", "else", "0", ")", "\n", "if", "size", "<", "section_count", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"cannot divide section of {size} steps into {section_count}\"", "\n", ")", "\n", "", "if", "section_count", "<=", "1", ":", "\n", "            ", "frac_stride", "=", "1", "\n", "", "else", ":", "\n", "            ", "frac_stride", "=", "(", "size", "-", "1", ")", "/", "(", "section_count", "-", "1", ")", "\n", "", "cur_idx", "=", "0.0", "\n", "taken_steps", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "section_count", ")", ":", "\n", "            ", "taken_steps", ".", "append", "(", "start_idx", "+", "round", "(", "cur_idx", ")", ")", "\n", "cur_idx", "+=", "frac_stride", "\n", "", "all_steps", "+=", "taken_steps", "\n", "start_idx", "+=", "size", "\n", "", "return", "set", "(", "all_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.VGG19.__init__": [[26, 35], ["torch.Module.__init__", "torchvision.models.vgg19", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "list", "torchvision.models.vgg19.features.children"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''\n         use vgg19 conv1_2, conv2_2, conv3_3 feature, before relu layer\n        '''", "\n", "self", ".", "feature_list", "=", "[", "7", "]", "\n", "vgg19", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "model", "=", "th", ".", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg19", ".", "features", ".", "children", "(", ")", ")", "[", ":", "self", ".", "feature_list", "[", "-", "1", "]", "+", "1", "]", ")", "\n", "# self.model.apply(convert_module_to_f16)", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.VGG19.forward": [[37, 47], ["enumerate", "list", "layer", "features.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "# x = (x-0.5)/0.5", "\n", "        ", "features", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "list", "(", "self", ".", "model", ")", ")", ":", "\n", "# print(layer,i)", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "feature_list", ":", "\n", "                ", "features", ".", "append", "(", "x", ")", "\n", "# print(x.shape)", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.AttentionPool2d.__init__": [[55, 70], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.conv_nd", "torch.conv_nd", "unet.QKVAttention", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "spacial_dim", ":", "int", ",", "\n", "embed_dim", ":", "int", ",", "\n", "num_heads_channels", ":", "int", ",", "\n", "output_dim", ":", "int", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "\n", "th", ".", "randn", "(", "embed_dim", ",", "spacial_dim", "**", "2", "+", "1", ")", "/", "embed_dim", "**", "0.5", "\n", ")", "\n", "self", ".", "qkv_proj", "=", "conv_nd", "(", "1", ",", "embed_dim", ",", "3", "*", "embed_dim", ",", "1", ")", "\n", "self", ".", "c_proj", "=", "conv_nd", "(", "1", ",", "embed_dim", ",", "output_dim", "or", "embed_dim", ",", "1", ")", "\n", "self", ".", "num_heads", "=", "embed_dim", "//", "num_heads_channels", "\n", "self", ".", "attention", "=", "QKVAttention", "(", "self", ".", "num_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.AttentionPool2d.forward": [[71, 80], ["unet.AttentionPool2d.reshape", "torch.cat", "torch.cat", "torch.cat", "unet.AttentionPool2d.qkv_proj", "unet.AttentionPool2d.attention", "unet.AttentionPool2d.c_proj", "unet.AttentionPool2d.positional_embedding[].to", "unet.AttentionPool2d.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "*", "_spatial", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "# NC(HW)", "\n", "x", "=", "th", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "# NC(HW+1)", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", "None", ",", ":", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# NC(HW+1)", "\n", "x", "=", "self", ".", "qkv_proj", "(", "x", ")", "\n", "x", "=", "self", ".", "attention", "(", "x", ")", "\n", "x", "=", "self", ".", "c_proj", "(", "x", ")", "\n", "return", "x", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.TimestepBlock.forward": [[87, 92], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "\"\"\"\n        Apply the module to `x` given `emb` timestep embeddings.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.TimestepEmbedSequential.forward": [[100, 107], ["isinstance", "layer", "layer"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "for", "layer", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "TimestepBlock", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "emb", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.Upsample.__init__": [[119, 127], ["torch.Module.__init__", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "self", ",", "channels", ",", "use_conv", ",", "dims", "=", "2", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "dims", "=", "dims", "\n", "if", "use_conv", ":", "\n", "            ", "self", ".", "conv", "=", "conv_nd", "(", "dims", ",", "self", ".", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.Upsample.forward": [[128, 139], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "unet.Upsample.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "channels", "\n", "if", "self", ".", "dims", "==", "3", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "*", "2", ",", "x", ".", "shape", "[", "4", "]", "*", "2", ")", ",", "mode", "=", "\"nearest\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "", "if", "self", ".", "use_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.Downsample.__init__": [[151, 165], ["torch.Module.__init__", "torch.conv_nd", "torch.avg_pool_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.avg_pool_nd"], ["def", "__init__", "(", "self", ",", "channels", ",", "use_conv", ",", "dims", "=", "2", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "dims", "=", "dims", "\n", "stride", "=", "2", "if", "dims", "!=", "3", "else", "(", "1", ",", "2", ",", "2", ")", "\n", "if", "use_conv", ":", "\n", "            ", "self", ".", "op", "=", "conv_nd", "(", "\n", "dims", ",", "self", ".", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "channels", "==", "self", ".", "out_channels", "\n", "self", ".", "op", "=", "avg_pool_nd", "(", "dims", ",", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.Downsample.forward": [[166, 169], ["unet.Downsample.op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "channels", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.ResBlock.__init__": [[188, 251], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.conv_nd", "unet.Upsample", "unet.Upsample", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zero_module", "torch.Identity", "torch.Identity", "torch.Identity", "unet.Downsample", "unet.Downsample", "torch.Identity", "torch.Identity", "torch.Identity", "torch.conv_nd", "torch.conv_nd", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "emb_channels", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "None", ",", "\n", "use_conv", "=", "False", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "dims", "=", "2", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "up", "=", "False", ",", "\n", "down", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "emb_channels", "=", "emb_channels", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "use_scale_shift_norm", "=", "use_scale_shift_norm", "\n", "\n", "self", ".", "in_layers", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "channels", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "conv_nd", "(", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "updown", "=", "up", "or", "down", "\n", "\n", "if", "up", ":", "\n", "            ", "self", ".", "h_upd", "=", "Upsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "self", ".", "x_upd", "=", "Upsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "", "elif", "down", ":", "\n", "            ", "self", ".", "h_upd", "=", "Downsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "self", ".", "x_upd", "=", "Downsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_upd", "=", "self", ".", "x_upd", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "emb_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "\n", "emb_channels", ",", "\n", "2", "*", "self", ".", "out_channels", "if", "use_scale_shift_norm", "else", "self", ".", "out_channels", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "out_layers", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "self", ".", "out_channels", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", "zero_module", "(", "\n", "conv_nd", "(", "dims", ",", "self", ".", "out_channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "out_channels", "==", "channels", ":", "\n", "            ", "self", ".", "skip_connection", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "use_conv", ":", "\n", "            ", "self", ".", "skip_connection", "=", "conv_nd", "(", "\n", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip_connection", "=", "conv_nd", "(", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.ResBlock.forward": [[252, 262], ["torch.checkpoint", "unet.ResBlock.parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.checkpoint"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "\"\"\"\n        Apply the block to a Tensor, conditioned on a timestep embedding.\n\n        :param x: an [N x C x ...] Tensor of features.\n        :param emb: an [N x emb_channels] Tensor of timestep embeddings.\n        :return: an [N x C x ...] Tensor of outputs.\n        \"\"\"", "\n", "return", "checkpoint", "(", "\n", "self", ".", "_forward", ",", "(", "x", ",", "emb", ")", ",", "self", ".", "parameters", "(", ")", ",", "self", ".", "use_checkpoint", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.ResBlock._forward": [[264, 285], ["unet.ResBlock.emb_layers().type", "in_rest", "unet.ResBlock.h_upd", "unet.ResBlock.x_upd", "in_conv", "unet.ResBlock.in_layers", "len", "len", "torch.chunk", "torch.chunk", "torch.chunk", "out_rest", "unet.ResBlock.out_layers", "unet.ResBlock.skip_connection", "unet.ResBlock.emb_layers", "out_norm"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "if", "self", ".", "updown", ":", "\n", "            ", "in_rest", ",", "in_conv", "=", "self", ".", "in_layers", "[", ":", "-", "1", "]", ",", "self", ".", "in_layers", "[", "-", "1", "]", "\n", "h", "=", "in_rest", "(", "x", ")", "\n", "h", "=", "self", ".", "h_upd", "(", "h", ")", "\n", "x", "=", "self", ".", "x_upd", "(", "x", ")", "\n", "h", "=", "in_conv", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "in_layers", "(", "x", ")", "\n", "", "emb_out", "=", "self", ".", "emb_layers", "(", "emb", ")", ".", "type", "(", "h", ".", "dtype", ")", "\n", "while", "len", "(", "emb_out", ".", "shape", ")", "<", "len", "(", "h", ".", "shape", ")", ":", "\n", "            ", "emb_out", "=", "emb_out", "[", "...", ",", "None", "]", "\n", "", "if", "self", ".", "use_scale_shift_norm", ":", "\n", "            ", "out_norm", ",", "out_rest", "=", "self", ".", "out_layers", "[", "0", "]", ",", "self", ".", "out_layers", "[", "1", ":", "]", "\n", "scale", ",", "shift", "=", "th", ".", "chunk", "(", "emb_out", ",", "2", ",", "dim", "=", "1", ")", "\n", "h", "=", "out_norm", "(", "h", ")", "*", "(", "1", "+", "scale", ")", "+", "shift", "\n", "h", "=", "out_rest", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", "+", "emb_out", "\n", "h", "=", "self", ".", "out_layers", "(", "h", ")", "\n", "", "return", "self", ".", "skip_connection", "(", "x", ")", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.AttentionBlock.__init__": [[295, 323], ["torch.Module.__init__", "torch.normalization", "torch.conv_nd", "torch.zero_module", "unet.QKVAttention", "unet.QKVAttentionLegacy", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "if", "num_head_channels", "==", "-", "1", ":", "\n", "            ", "self", ".", "num_heads", "=", "num_heads", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "channels", "%", "num_head_channels", "==", "0", "\n", ")", ",", "f\"q,k,v channels {channels} is not divisible by num_head_channels {num_head_channels}\"", "\n", "self", ".", "num_heads", "=", "channels", "//", "num_head_channels", "\n", "", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "norm", "=", "normalization", "(", "channels", ")", "\n", "self", ".", "qkv", "=", "conv_nd", "(", "1", ",", "channels", ",", "channels", "*", "3", ",", "1", ")", "\n", "if", "use_new_attention_order", ":", "\n", "# split qkv before split heads", "\n", "            ", "self", ".", "attention", "=", "QKVAttention", "(", "self", ".", "num_heads", ")", "\n", "", "else", ":", "\n", "# split heads before split qkv", "\n", "            ", "self", ".", "attention", "=", "QKVAttentionLegacy", "(", "self", ".", "num_heads", ")", "\n", "\n", "", "self", ".", "proj_out", "=", "zero_module", "(", "conv_nd", "(", "1", ",", "channels", ",", "channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.AttentionBlock.forward": [[324, 326], ["torch.checkpoint", "unet.AttentionBlock.parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.checkpoint"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "checkpoint", "(", "self", ".", "_forward", ",", "(", "x", ",", ")", ",", "self", ".", "parameters", "(", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.AttentionBlock._forward": [[327, 334], ["x.reshape.reshape.reshape", "unet.AttentionBlock.qkv", "unet.AttentionBlock.attention", "unet.AttentionBlock.proj_out", "unet.AttentionBlock.norm"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "*", "spatial", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "qkv", "=", "self", ".", "qkv", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "attention", "(", "qkv", ")", "\n", "h", "=", "self", ".", "proj_out", "(", "h", ")", "\n", "return", "(", "x", "+", "h", ")", ".", "reshape", "(", "b", ",", "c", ",", "*", "spatial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.QKVAttentionLegacy.__init__": [[361, 364], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "n_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.QKVAttentionLegacy.forward": [[365, 383], ["qkv.reshape().split", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().type", "torch.softmax().type", "torch.softmax().type", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.reshape", "math.sqrt", "qkv.reshape", "math.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().type.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qkv", ")", ":", "\n", "        ", "\"\"\"\n        Apply QKV attention.\n\n        :param qkv: an [N x (H * 3 * C) x T] tensor of Qs, Ks, and Vs.\n        :return: an [N x (H * C) x T] tensor after attention.\n        \"\"\"", "\n", "bs", ",", "width", ",", "length", "=", "qkv", ".", "shape", "\n", "assert", "width", "%", "(", "3", "*", "self", ".", "n_heads", ")", "==", "0", "\n", "ch", "=", "width", "//", "(", "3", "*", "self", ".", "n_heads", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", ".", "reshape", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", "*", "3", ",", "length", ")", ".", "split", "(", "ch", ",", "dim", "=", "1", ")", "\n", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "math", ".", "sqrt", "(", "ch", ")", ")", "\n", "weight", "=", "th", ".", "einsum", "(", "\n", "\"bct,bcs->bts\"", ",", "q", "*", "scale", ",", "k", "*", "scale", "\n", ")", "# More stable with f16 than dividing afterwards", "\n", "weight", "=", "th", ".", "softmax", "(", "weight", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type", "(", "weight", ".", "dtype", ")", "\n", "a", "=", "th", ".", "einsum", "(", "\"bts,bcs->bct\"", ",", "weight", ",", "v", ")", "\n", "return", "a", ".", "reshape", "(", "bs", ",", "-", "1", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.QKVAttentionLegacy.count_flops": [[384, 387], ["unet.count_flops_attn"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.count_flops_attn"], ["", "@", "staticmethod", "\n", "def", "count_flops", "(", "model", ",", "_x", ",", "y", ")", ":", "\n", "        ", "return", "count_flops_attn", "(", "model", ",", "_x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.QKVAttention.__init__": [[394, 397], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "n_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.QKVAttention.forward": [[398, 418], ["qkv.chunk", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().type", "torch.softmax().type", "torch.softmax().type", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.reshape", "math.sqrt", "v.reshape", "math.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().type.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qkv", ")", ":", "\n", "        ", "\"\"\"\n        Apply QKV attention.\n\n        :param qkv: an [N x (3 * H * C) x T] tensor of Qs, Ks, and Vs.\n        :return: an [N x (H * C) x T] tensor after attention.\n        \"\"\"", "\n", "bs", ",", "width", ",", "length", "=", "qkv", ".", "shape", "\n", "assert", "width", "%", "(", "3", "*", "self", ".", "n_heads", ")", "==", "0", "\n", "ch", "=", "width", "//", "(", "3", "*", "self", ".", "n_heads", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", ".", "chunk", "(", "3", ",", "dim", "=", "1", ")", "\n", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "math", ".", "sqrt", "(", "ch", ")", ")", "\n", "weight", "=", "th", ".", "einsum", "(", "\n", "\"bct,bcs->bts\"", ",", "\n", "(", "q", "*", "scale", ")", ".", "view", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", ",", "length", ")", ",", "\n", "(", "k", "*", "scale", ")", ".", "view", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", ",", "length", ")", ",", "\n", ")", "# More stable with f16 than dividing afterwards", "\n", "weight", "=", "th", ".", "softmax", "(", "weight", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type", "(", "weight", ".", "dtype", ")", "\n", "a", "=", "th", ".", "einsum", "(", "\"bts,bcs->bct\"", ",", "weight", ",", "v", ".", "reshape", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", ",", "length", ")", ")", "\n", "return", "a", ".", "reshape", "(", "bs", ",", "-", "1", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.QKVAttention.count_flops": [[419, 422], ["unet.count_flops_attn"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.count_flops_attn"], ["", "@", "staticmethod", "\n", "def", "count_flops", "(", "model", ",", "_x", ",", "y", ")", ":", "\n", "        ", "return", "count_flops_attn", "(", "model", ",", "_x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.UNetModel.__init__": [[454, 689], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "unet.TimestepEmbedSequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "unet.VGG19", "unet.ResBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.linear", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "range", "unet.ResBlock", "unet.AttentionBlock", "unet.ResBlock", "list", "range", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.zero_module", "unet.TimestepEmbedSequential", "int", "unet.UNetModel.input_blocks.append", "input_block_chans.append", "unet.UNetModel.input_blocks.append", "input_block_chans.append", "enumerate", "input_block_chans.pop", "int", "unet.UNetModel.output_blocks.append", "torch.conv_nd", "torch.conv_nd", "unet.ResBlock", "layers.append", "unet.TimestepEmbedSequential", "len", "unet.TimestepEmbedSequential", "unet.ResBlock", "layers.append", "layers.append", "unet.TimestepEmbedSequential", "unet.AttentionBlock", "unet.AttentionBlock", "int", "unet.ResBlock", "unet.Downsample", "int", "unet.ResBlock", "unet.Upsample"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "in_channels", ",", "\n", "model_channels", ",", "\n", "out_channels", ",", "\n", "num_res_blocks", ",", "\n", "attention_resolutions", ",", "\n", "dropout", "=", "0", ",", "\n", "channel_mult", "=", "(", "1", ",", "2", ",", "4", ",", "8", ")", ",", "\n", "conv_resample", "=", "True", ",", "\n", "dims", "=", "2", ",", "\n", "num_classes", "=", "None", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "num_heads_upsample", "==", "-", "1", ":", "\n", "            ", "num_heads_upsample", "=", "num_heads", "\n", "", "in_channels", "=", "6", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "model_channels", "=", "model_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_res_blocks", "=", "num_res_blocks", "\n", "self", ".", "attention_resolutions", "=", "attention_resolutions", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "channel_mult", "=", "channel_mult", "\n", "self", ".", "conv_resample", "=", "conv_resample", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "dtype", "=", "th", ".", "float16", "if", "use_fp16", "else", "th", ".", "float32", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_head_channels", "=", "num_head_channels", "\n", "self", ".", "num_heads_upsample", "=", "num_heads_upsample", "\n", "time_embed_dim", "=", "model_channels", "*", "4", "\n", "self", ".", "time_embed", "=", "nn", ".", "Sequential", "(", "\n", "linear", "(", "model_channels", ",", "time_embed_dim", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "time_embed_dim", ",", "time_embed_dim", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "label_emb", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "time_embed_dim", ")", "\n", "\n", "", "ch", "=", "input_ch", "=", "int", "(", "channel_mult", "[", "0", "]", "*", "model_channels", ")", "\n", "# print(channel_mult,in_channels)", "\n", "# in_channels=6", "\n", "# print(in_channels)", "\n", "# self.input_transform_1 = conv_nd(2, 6, 3, 3, padding=1)", "\n", "self", ".", "input_blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "TimestepEmbedSequential", "(", "conv_nd", "(", "dims", ",", "in_channels", ",", "ch", ",", "3", ",", "padding", "=", "1", ")", ")", "]", "\n", ")", "\n", "self", ".", "_feature_size", "=", "ch", "\n", "input_block_chans", "=", "[", "ch", "]", "\n", "ds", "=", "1", "\n", "blah", "=", "0", "\n", "for", "level", ",", "mult", "in", "enumerate", "(", "channel_mult", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_res_blocks", ")", ":", "\n", "# print(level,mult,int(mult * model_channels))", "\n", "\n", "                ", "layers", "=", "[", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "int", "(", "mult", "*", "model_channels", ")", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "]", "\n", "ch", "=", "int", "(", "mult", "*", "model_channels", ")", "\n", "if", "ds", "in", "attention_resolutions", ":", "\n", "                    ", "layers", ".", "append", "(", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "input_blocks", ".", "append", "(", "TimestepEmbedSequential", "(", "*", "layers", ")", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "", "if", "level", "!=", "len", "(", "channel_mult", ")", "-", "1", ":", "\n", "                ", "out_ch", "=", "ch", "\n", "blah", "=", "blah", "+", "1", "\n", "# if(blah==1):", "\n", "#     ch1=ch+64", "\n", "# elif(blah==2):", "\n", "#     ch1=ch+128", "\n", "# elif(blah==3):", "\n", "#     ch1=ch+256", "\n", "# else:", "\n", "#     ch1=ch", "\n", "ch1", "=", "ch", "\n", "# print(resblock_updown)", "\n", "self", ".", "input_blocks", ".", "append", "(", "\n", "TimestepEmbedSequential", "(", "\n", "ResBlock", "(", "\n", "ch1", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "down", "=", "True", ",", "\n", ")", "\n", "if", "resblock_updown", "\n", "else", "Downsample", "(", "\n", "ch", ",", "conv_resample", ",", "dims", "=", "dims", ",", "out_channels", "=", "out_ch", "\n", ")", "\n", ")", "\n", ")", "\n", "ch", "=", "out_ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "ds", "*=", "2", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "# print(input_block_chans)", "\n", "", "", "self", ".", "middle_block", "=", "TimestepEmbedSequential", "(", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", ",", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "\n", "self", ".", "output_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "level", ",", "mult", "in", "list", "(", "enumerate", "(", "channel_mult", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_res_blocks", "+", "1", ")", ":", "\n", "                ", "ich", "=", "input_block_chans", ".", "pop", "(", ")", "\n", "layers", "=", "[", "\n", "ResBlock", "(", "\n", "ch", "+", "ich", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "int", "(", "model_channels", "*", "mult", ")", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "]", "\n", "ch", "=", "int", "(", "model_channels", "*", "mult", ")", "\n", "if", "ds", "in", "attention_resolutions", ":", "\n", "                    ", "layers", ".", "append", "(", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads_upsample", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", ")", "\n", "", "if", "level", "and", "i", "==", "num_res_blocks", ":", "\n", "                    ", "out_ch", "=", "ch", "\n", "layers", ".", "append", "(", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "up", "=", "True", ",", "\n", ")", "\n", "if", "resblock_updown", "\n", "else", "Upsample", "(", "ch", ",", "conv_resample", ",", "dims", "=", "dims", ",", "out_channels", "=", "out_ch", ")", "\n", ")", "\n", "ds", "//=", "2", "\n", "", "self", ".", "output_blocks", ".", "append", "(", "TimestepEmbedSequential", "(", "*", "layers", ")", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "\n", "", "", "self", ".", "vgg", "=", "VGG19", "(", ")", "\n", "# self.conv_convert1 =  ResBlock(", "\n", "#                 256,", "\n", "#                 time_embed_dim,", "\n", "#                 dropout,", "\n", "#                 out_channels=192,", "\n", "#                 dims=dims,", "\n", "#                 use_checkpoint=use_checkpoint,", "\n", "#                 use_scale_shift_norm=use_scale_shift_norm,", "\n", "#             )", "\n", "self", ".", "conv_convert2", "=", "ResBlock", "(", "\n", "320", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "192", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "# self.conv_convert3 =  ResBlock(", "\n", "#                 640,", "\n", "#                 time_embed_dim,", "\n", "#                 dropout,", "\n", "#                 out_channels=384,", "\n", "#                 dims=dims,", "\n", "#                 use_checkpoint=use_checkpoint,", "\n", "#                 use_scale_shift_norm=use_scale_shift_norm,", "\n", "#             )", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "ch", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "zero_module", "(", "conv_nd", "(", "dims", ",", "input_ch", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.UNetModel.convert_to_fp16": [[691, 703], ["unet.UNetModel.vgg.apply", "unet.UNetModel.input_blocks.apply", "unet.UNetModel.middle_block.apply", "unet.UNetModel.output_blocks.apply", "unet.UNetModel.conv_convert2.apply", "unet.UNetModel.input_transform_1.apply"], "methods", ["None"], ["", "def", "convert_to_fp16", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float16.\n        \"\"\"", "\n", "self", ".", "vgg", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "output_blocks", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "# self.conv_convert1.apply(convert_module_to_f16)", "\n", "self", ".", "conv_convert2", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "# self.conv_convert3.apply(convert_module_to_f16)", "\n", "self", ".", "input_transform_1", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.UNetModel.convert_to_fp32": [[705, 714], ["unet.UNetModel.vgg.apply", "unet.UNetModel.input_blocks.apply", "unet.UNetModel.middle_block.apply", "unet.UNetModel.output_blocks.apply"], "methods", ["None"], ["", "def", "convert_to_fp32", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float32.\n        \"\"\"", "\n", "self", ".", "vgg", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "self", ".", "output_blocks", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.UNetModel.forward": [[715, 769], ["unet.UNetModel.time_embed", "x.type", "enumerate", "unet.UNetModel.middle_block", "module.type", "unet.UNetModel.out", "torch.timestep_embedding", "module", "hs.append", "torch.cat", "torch.cat", "torch.cat", "module", "hs.pop"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.timestep_embedding"], ["", "def", "forward", "(", "self", ",", "x", ",", "timesteps", ",", "low_res", ",", "high_res", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Apply the model to an input batch.\n\n        :param x: an [N x C x ...] Tensor of inputs.\n        :param timesteps: a 1-D batch of timesteps.\n        :param y: an [N] Tensor of labels, if class-conditional.\n        :return: an [N x C x ...] Tensor of outputs.\n        \"\"\"", "\n", "\n", "hs", "=", "[", "]", "\n", "# x1 = th.cat([x,high_res],1).type(self.dtype)", "\n", "# x1 = self.input_transform_1(x)", "\n", "emb", "=", "self", ".", "time_embed", "(", "timestep_embedding", "(", "timesteps", ",", "self", ".", "model_channels", ")", ")", "\n", "# input1=low_res", "\n", "high_res", "=", "x", "[", ":", ",", "3", ":", "]", "\n", "# vgg_feats = self.vgg(high_res.type(self.dtype), emb)", "\n", "# vgg_feats1 = self.vgg(high_res.type(self.dtype), emb)", "\n", "\n", "# print(x.shape)", "\n", "# print(emb.shape)", "\n", "# vgg_feats=vgg_feats.type(self.dtype)", "\n", "# print(vgg_feats[0].shape)", "\n", "# print(emb.shape)", "\n", "h", "=", "x", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "input_blocks", ")", ":", "\n", "# print(i,module,h.shape)", "\n", "\n", "# if(i==3):", "\n", "#     # print()", "\n", "#     h= th.cat([h,vgg_feats[0]],1)", "\n", "#     h = self.conv_convert1(h,emb)", "\n", "# if(i==6):        ", "\n", "#     h= th.cat([h,vgg_feats[0]],1)", "\n", "#     h = self.conv_convert2(h,emb)", "\n", "\n", "# if(i==9):", "\n", "#     h = th.cat([h,vgg_feats[2]],1)", "\n", "#     h = self.conv_convert3(h,emb)", "\n", "# print(h.shape)", "\n", "# print(h.shape,emb.shape)", "\n", "            ", "h", "=", "module", "(", "h", ",", "emb", ")", "\n", "\n", "hs", ".", "append", "(", "h", ")", "\n", "# print(h.shape)", "\n", "", "h", "=", "self", ".", "middle_block", "(", "h", ",", "emb", ")", "\n", "# stop", "\n", "for", "module", "in", "self", ".", "output_blocks", ":", "\n", "            ", "h", "=", "th", ".", "cat", "(", "[", "h", ",", "hs", ".", "pop", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "module", "(", "h", ",", "emb", ")", "\n", "", "h", "=", "h", ".", "type", "(", "x", ".", "dtype", ")", "\n", "out", "=", "self", ".", "out", "(", "h", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.SuperResModel.__init__": [[778, 780], ["unet.UNetModel.__init__"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "image_size", ",", "in_channels", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "image_size", ",", "in_channels", "*", "2", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.SuperResModel.forward": [[781, 791], ["unet.UNetModel.forward"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "timesteps", ",", "low_res", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "_", ",", "_", ",", "new_height", ",", "new_width", "=", "x", ".", "shape", "\n", "low_res", "=", "kwargs", "[", "'SR'", "]", "\n", "# upsampled = F.interpolate(low_res, (new_height, new_width), mode=\"bilinear\")", "\n", "# print(x.shape,low_res.shape)", "\n", "# high_res= kwargs['full_res']", "\n", "# print(x.shape)", "\n", "# low_res=x[:,3:]", "\n", "# x = th.cat([x, low_res], dim=1)", "\n", "return", "super", "(", ")", ".", "forward", "(", "x", ",", "timesteps", ",", "low_res", ",", "low_res", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.EncoderUNetModel.__init__": [[800, 966], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "unet.TimestepEmbedSequential", "torch.linear", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "range", "unet.ResBlock", "unet.AttentionBlock", "unet.ResBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet.TimestepEmbedSequential", "int", "unet.EncoderUNetModel.input_blocks.append", "input_block_chans.append", "unet.EncoderUNetModel.input_blocks.append", "input_block_chans.append", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.zero_module", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.conv_nd", "unet.ResBlock", "layers.append", "unet.TimestepEmbedSequential", "len", "unet.TimestepEmbedSequential", "torch.conv_nd", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "unet.AttentionPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet.AttentionBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "int", "unet.ResBlock", "unet.Downsample", "torch.Linear", "torch.Linear", "torch.Linear", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization"], ["def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "in_channels", ",", "\n", "model_channels", ",", "\n", "out_channels", ",", "\n", "num_res_blocks", ",", "\n", "attention_resolutions", ",", "\n", "dropout", "=", "0", ",", "\n", "channel_mult", "=", "(", "1", ",", "2", ",", "4", ",", "8", ")", ",", "\n", "conv_resample", "=", "True", ",", "\n", "dims", "=", "2", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", "pool", "=", "\"adaptive\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "num_heads_upsample", "==", "-", "1", ":", "\n", "            ", "num_heads_upsample", "=", "num_heads", "\n", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "model_channels", "=", "model_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_res_blocks", "=", "num_res_blocks", "\n", "self", ".", "attention_resolutions", "=", "attention_resolutions", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "channel_mult", "=", "channel_mult", "\n", "self", ".", "conv_resample", "=", "conv_resample", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "dtype", "=", "th", ".", "float16", "if", "use_fp16", "else", "th", ".", "float32", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_head_channels", "=", "num_head_channels", "\n", "self", ".", "num_heads_upsample", "=", "num_heads_upsample", "\n", "\n", "time_embed_dim", "=", "model_channels", "*", "4", "\n", "self", ".", "time_embed", "=", "nn", ".", "Sequential", "(", "\n", "linear", "(", "model_channels", ",", "time_embed_dim", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "time_embed_dim", ",", "time_embed_dim", ")", ",", "\n", ")", "\n", "\n", "ch", "=", "int", "(", "channel_mult", "[", "0", "]", "*", "model_channels", ")", "\n", "self", ".", "input_blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "TimestepEmbedSequential", "(", "conv_nd", "(", "dims", ",", "in_channels", ",", "ch", ",", "3", ",", "padding", "=", "1", ")", ")", "]", "\n", ")", "\n", "self", ".", "_feature_size", "=", "ch", "\n", "input_block_chans", "=", "[", "ch", "]", "\n", "ds", "=", "1", "\n", "for", "level", ",", "mult", "in", "enumerate", "(", "channel_mult", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_res_blocks", ")", ":", "\n", "                ", "layers", "=", "[", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "int", "(", "mult", "*", "model_channels", ")", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "]", "\n", "ch", "=", "int", "(", "mult", "*", "model_channels", ")", "\n", "if", "ds", "in", "attention_resolutions", ":", "\n", "                    ", "layers", ".", "append", "(", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "input_blocks", ".", "append", "(", "TimestepEmbedSequential", "(", "*", "layers", ")", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "", "if", "level", "!=", "len", "(", "channel_mult", ")", "-", "1", ":", "\n", "                ", "out_ch", "=", "ch", "\n", "self", ".", "input_blocks", ".", "append", "(", "\n", "TimestepEmbedSequential", "(", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "down", "=", "True", ",", "\n", ")", "\n", "if", "resblock_updown", "\n", "else", "Downsample", "(", "\n", "ch", ",", "conv_resample", ",", "dims", "=", "dims", ",", "out_channels", "=", "out_ch", "\n", ")", "\n", ")", "\n", ")", "\n", "ch", "=", "out_ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "ds", "*=", "2", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "\n", "", "", "self", ".", "middle_block", "=", "TimestepEmbedSequential", "(", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", ",", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "self", ".", "pool", "=", "pool", "\n", "if", "pool", "==", "\"adaptive\"", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "ch", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "zero_module", "(", "conv_nd", "(", "dims", ",", "ch", ",", "out_channels", ",", "1", ")", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", "\n", "", "elif", "pool", "==", "\"attention\"", ":", "\n", "            ", "assert", "num_head_channels", "!=", "-", "1", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "ch", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "AttentionPool2d", "(", "\n", "(", "image_size", "//", "ds", ")", ",", "ch", ",", "num_head_channels", ",", "out_channels", "\n", ")", ",", "\n", ")", "\n", "", "elif", "pool", "==", "\"spatial\"", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "_feature_size", ",", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "out_channels", ")", ",", "\n", ")", "\n", "", "elif", "pool", "==", "\"spatial_v2\"", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "_feature_size", ",", "2048", ")", ",", "\n", "normalization", "(", "2048", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Unexpected {pool} pooling\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.EncoderUNetModel.convert_to_fp16": [[967, 973], ["unet.EncoderUNetModel.input_blocks.apply", "unet.EncoderUNetModel.middle_block.apply"], "methods", ["None"], ["", "", "def", "convert_to_fp16", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float16.\n        \"\"\"", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.EncoderUNetModel.convert_to_fp32": [[974, 980], ["unet.EncoderUNetModel.input_blocks.apply", "unet.EncoderUNetModel.middle_block.apply"], "methods", ["None"], ["", "def", "convert_to_fp32", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float32.\n        \"\"\"", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.EncoderUNetModel.forward": [[981, 1006], ["unet.EncoderUNetModel.time_embed", "x.type", "unet.EncoderUNetModel.middle_block", "unet.EncoderUNetModel.pool.startswith", "torch.timestep_embedding", "module", "unet.EncoderUNetModel.pool.startswith", "results.append", "torch.cat", "torch.cat", "torch.cat", "unet.EncoderUNetModel.out", "h.type.type.type", "unet.EncoderUNetModel.out", "results.append", "h.type.type.type().mean", "h.type.type.type().mean", "h.type.type.type", "h.type.type.type"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.timestep_embedding"], ["", "def", "forward", "(", "self", ",", "x", ",", "timesteps", ")", ":", "\n", "        ", "\"\"\"\n        Apply the model to an input batch.\n\n        :param x: an [N x C x ...] Tensor of inputs.\n        :param timesteps: a 1-D batch of timesteps.\n        :return: an [N x K] Tensor of outputs.\n        \"\"\"", "\n", "emb", "=", "self", ".", "time_embed", "(", "timestep_embedding", "(", "timesteps", ",", "self", ".", "model_channels", ")", ")", "\n", "\n", "results", "=", "[", "]", "\n", "h", "=", "x", ".", "type", "(", "self", ".", "dtype", ")", "\n", "for", "module", "in", "self", ".", "input_blocks", ":", "\n", "            ", "h", "=", "module", "(", "h", ",", "emb", ")", "\n", "if", "self", ".", "pool", ".", "startswith", "(", "\"spatial\"", ")", ":", "\n", "                ", "results", ".", "append", "(", "h", ".", "type", "(", "x", ".", "dtype", ")", ".", "mean", "(", "dim", "=", "(", "2", ",", "3", ")", ")", ")", "\n", "", "", "h", "=", "self", ".", "middle_block", "(", "h", ",", "emb", ")", "\n", "\n", "if", "self", ".", "pool", ".", "startswith", "(", "\"spatial\"", ")", ":", "\n", "            ", "results", ".", "append", "(", "h", ".", "type", "(", "x", ".", "dtype", ")", ".", "mean", "(", "dim", "=", "(", "2", ",", "3", ")", ")", ")", "\n", "h", "=", "th", ".", "cat", "(", "results", ",", "axis", "=", "-", "1", ")", "\n", "return", "self", ".", "out", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", ".", "type", "(", "x", ".", "dtype", ")", "\n", "return", "self", ".", "out", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet.count_flops_attn": [[336, 354], ["int", "torch.DoubleTensor", "numpy.prod"], "function", ["None"], ["", "", "def", "count_flops_attn", "(", "model", ",", "_x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    A counter for the `thop` package to count the operations in an\n    attention operation.\n    Meant to be used like:\n        macs, params = thop.profile(\n            model,\n            inputs=(inputs, timestamps),\n            custom_ops={QKVAttention: QKVAttention.count_flops},\n        )\n    \"\"\"", "\n", "b", ",", "c", ",", "*", "spatial", "=", "y", "[", "0", "]", ".", "shape", "\n", "num_spatial", "=", "int", "(", "np", ".", "prod", "(", "spatial", ")", ")", "\n", "# We perform two matmuls with the same number of ops.", "\n", "# The first computes the weight matrix, the second computes", "\n", "# the combination of the value vectors.", "\n", "matmul_ops", "=", "2", "*", "b", "*", "(", "num_spatial", "**", "2", ")", "*", "c", "\n", "model", ".", "total_ops", "+=", "th", ".", "DoubleTensor", "(", "[", "matmul_ops", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.__init__": [[29, 120], ["torch.cuda.is_available", "torch.cuda.is_available", "train_util.TrainLoop._load_and_sync_parameters", "fp16_util.MixedPrecisionTrainer", "torch.optim.AdamW", "torch.optim.AdamW", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "resample.UniformSampler", "torch.get_world_size", "torch.get_world_size", "train_util.TrainLoop._load_optimizer_state", "print", "torch.nn.parallel.distributed.DistributedDataParallel", "torch.nn.parallel.distributed.DistributedDataParallel", "float", "train_util.TrainLoop._load_ema_parameters", "copy.deepcopy", "torch.get_world_size", "torch.get_world_size", "logger.warn", "ema_rate.split", "range", "dist_util.dev", "len", "dist_util.dev"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._load_and_sync_parameters", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._load_optimizer_state", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._load_ema_parameters", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.warn", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "model", ",", "\n", "diffusion", ",", "\n", "data", ",", "\n", "val_dat", ",", "\n", "batch_size", ",", "\n", "microbatch", ",", "\n", "lr", ",", "\n", "ema_rate", ",", "\n", "log_interval", ",", "\n", "save_interval", ",", "\n", "resume_checkpoint", ",", "\n", "args", ",", "\n", "use_fp16", "=", "False", ",", "\n", "fp16_scale_growth", "=", "1e-3", ",", "\n", "schedule_sampler", "=", "None", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "lr_anneal_steps", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "diffusion", "=", "diffusion", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "val_data", "=", "val_dat", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "microbatch", "=", "microbatch", "if", "microbatch", ">", "0", "else", "batch_size", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "ema_rate", "=", "(", "\n", "[", "ema_rate", "]", "\n", "if", "isinstance", "(", "ema_rate", ",", "float", ")", "\n", "else", "[", "float", "(", "x", ")", "for", "x", "in", "ema_rate", ".", "split", "(", "\",\"", ")", "]", "\n", ")", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "save_interval", "=", "save_interval", "\n", "self", ".", "resume_checkpoint", "=", "resume_checkpoint", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "fp16_scale_growth", "=", "fp16_scale_growth", "\n", "self", ".", "schedule_sampler", "=", "schedule_sampler", "or", "UniformSampler", "(", "diffusion", ")", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "lr_anneal_steps", "=", "lr_anneal_steps", "\n", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "resume_step", "=", "0", "\n", "self", ".", "global_batch", "=", "self", ".", "batch_size", "*", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "self", ".", "sync_cuda", "=", "th", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "self", ".", "_load_and_sync_parameters", "(", ")", "\n", "self", ".", "mp_trainer", "=", "MixedPrecisionTrainer", "(", "\n", "model", "=", "self", ".", "model", ",", "\n", "use_fp16", "=", "self", ".", "use_fp16", ",", "\n", "fp16_scale_growth", "=", "fp16_scale_growth", ",", "\n", ")", "\n", "\n", "self", ".", "opt", "=", "AdamW", "(", "\n", "self", ".", "mp_trainer", ".", "master_params", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "if", "self", ".", "resume_step", ":", "\n", "            ", "self", ".", "_load_optimizer_state", "(", ")", "\n", "# Model was resumed, either due to a restart or a checkpoint", "\n", "# being specified at the command line.", "\n", "self", ".", "ema_params", "=", "[", "\n", "self", ".", "_load_ema_parameters", "(", "rate", ")", "for", "rate", "in", "self", ".", "ema_rate", "\n", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ema_params", "=", "[", "\n", "copy", ".", "deepcopy", "(", "self", ".", "mp_trainer", ".", "master_params", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "self", ".", "ema_rate", ")", ")", "\n", "]", "\n", "\n", "", "if", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "print", "(", "'cuda available'", ")", "\n", "self", ".", "use_ddp", "=", "True", "\n", "self", ".", "ddp_model", "=", "DDP", "(", "\n", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "dist_util", ".", "dev", "(", ")", "]", ",", "\n", "output_device", "=", "dist_util", ".", "dev", "(", ")", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "bucket_cap_mb", "=", "128", ",", "\n", "find_unused_parameters", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "dist", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "                ", "logger", ".", "warn", "(", "\n", "\"Distributed training requires CUDA. \"", "\n", "\"Gradients will not be synchronized properly!\"", "\n", ")", "\n", "", "self", ".", "use_ddp", "=", "False", "\n", "self", ".", "ddp_model", "=", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._load_and_sync_parameters": [[121, 132], ["dist_util.sync_params", "train_util.find_resume_checkpoint", "train_util.parse_resume_step_from_filename", "train_util.TrainLoop.model.parameters", "torch.get_rank", "torch.get_rank", "logger.log", "dist_util.load_state_dict", "train_util.TrainLoop.model.load_state_dict", "dist_util.dev"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.sync_params", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.find_resume_checkpoint", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.parse_resume_step_from_filename", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["", "", "def", "_load_and_sync_parameters", "(", "self", ")", ":", "\n", "        ", "resume_checkpoint", "=", "find_resume_checkpoint", "(", ")", "or", "self", ".", "resume_checkpoint", "\n", "\n", "if", "resume_checkpoint", ":", "\n", "            ", "self", ".", "resume_step", "=", "parse_resume_step_from_filename", "(", "resume_checkpoint", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "logger", ".", "log", "(", "f\"loading model from checkpoint: {resume_checkpoint}...\"", ")", "\n", "dict_load", "=", "dist_util", ".", "load_state_dict", "(", "resume_checkpoint", ",", "map_location", "=", "dist_util", ".", "dev", "(", ")", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "dict_load", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "dist_util", ".", "sync_params", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._load_ema_parameters": [[133, 148], ["copy.deepcopy", "train_util.find_ema_checkpoint", "dist_util.sync_params", "train_util.find_resume_checkpoint", "torch.get_rank", "torch.get_rank", "logger.log", "dist_util.load_state_dict", "train_util.TrainLoop.mp_trainer.state_dict_to_master_params", "dist_util.dev"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.find_ema_checkpoint", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.sync_params", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.find_resume_checkpoint", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.state_dict_to_master_params", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["", "def", "_load_ema_parameters", "(", "self", ",", "rate", ")", ":", "\n", "        ", "ema_params", "=", "copy", ".", "deepcopy", "(", "self", ".", "mp_trainer", ".", "master_params", ")", "\n", "\n", "main_checkpoint", "=", "find_resume_checkpoint", "(", ")", "or", "self", ".", "resume_checkpoint", "\n", "ema_checkpoint", "=", "find_ema_checkpoint", "(", "main_checkpoint", ",", "self", ".", "resume_step", ",", "rate", ")", "\n", "if", "ema_checkpoint", ":", "\n", "            ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "logger", ".", "log", "(", "f\"loading EMA from checkpoint: {ema_checkpoint}...\"", ")", "\n", "state_dict", "=", "dist_util", ".", "load_state_dict", "(", "\n", "ema_checkpoint", ",", "map_location", "=", "dist_util", ".", "dev", "(", ")", "\n", ")", "\n", "ema_params", "=", "self", ".", "mp_trainer", ".", "state_dict_to_master_params", "(", "state_dict", ")", "\n", "\n", "", "", "dist_util", ".", "sync_params", "(", "ema_params", ")", "\n", "return", "ema_params", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._load_optimizer_state": [[149, 160], ["blobfile.join", "blobfile.exists", "train_util.find_resume_checkpoint", "blobfile.dirname", "logger.log", "dist_util.load_state_dict", "train_util.TrainLoop.opt.load_state_dict", "dist_util.dev"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.find_resume_checkpoint", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["", "def", "_load_optimizer_state", "(", "self", ")", ":", "\n", "        ", "main_checkpoint", "=", "find_resume_checkpoint", "(", ")", "or", "self", ".", "resume_checkpoint", "\n", "opt_checkpoint", "=", "bf", ".", "join", "(", "\n", "bf", ".", "dirname", "(", "main_checkpoint", ")", ",", "f\"opt{self.resume_step:06}.pt\"", "\n", ")", "\n", "if", "bf", ".", "exists", "(", "opt_checkpoint", ")", ":", "\n", "            ", "logger", ".", "log", "(", "f\"loading optimizer state from checkpoint: {opt_checkpoint}\"", ")", "\n", "state_dict", "=", "dist_util", ".", "load_state_dict", "(", "\n", "opt_checkpoint", ",", "map_location", "=", "dist_util", ".", "dev", "(", ")", "\n", ")", "\n", "self", ".", "opt", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.run_loop": [[161, 255], ["next", "train_util.TrainLoop.run_step", "print", "torch.no_grad", "torch.no_grad", "enumerate", "print", "print", "model_kwargs1.items", "train_util.TrainLoop.diffusion.p_sample_loop", "cv2.cvtColor.clamp().to", "cv2.cvtColor.permute", "cv2.cvtColor.contiguous().cpu().numpy", "cv2.cvtColor.permute", "cv2.cvtColor.contiguous().cpu().numpy", "cv2.cvtColor", "cv2.cvtColor", "skimage.metrics.peak_signal_noise_ratio", "train_util.TrainLoop.save_val", "v.to", "cv2.cvtColor.clamp", "cv2.cvtColor.contiguous().cpu", "cv2.cvtColor.contiguous().cpu", "dist_util.dev", "cv2.cvtColor.contiguous", "cv2.cvtColor.contiguous"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.run_step", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample_loop", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.save_val", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["", "", "def", "run_loop", "(", "self", ")", ":", "\n", "        ", "val_idx", "=", "0", "\n", "best_psnr", "=", "0", "\n", "# wandb.init(project = 'diffusion_small', config=self.args)", "\n", "\n", "while", "(", "\n", "not", "self", ".", "lr_anneal_steps", "\n", "or", "self", ".", "step", "+", "self", ".", "resume_step", "<", "self", ".", "lr_anneal_steps", "\n", ")", ":", "\n", "# wandb_logger = WandbLogger()", "\n", "\n", "            ", "batch", ",", "cond", "=", "next", "(", "self", ".", "data", ")", "\n", "self", ".", "run_step", "(", "batch", ",", "cond", ")", "\n", "\n", "\n", "\n", "\n", "if", "(", "self", ".", "step", "+", "1", ")", "%", "self", ".", "save_interval", "==", "0", ":", "\n", "\n", "                ", "number", "=", "0", "\n", "all_images", "=", "[", "]", "\n", "number", "=", "0", "\n", "print", "(", "'validation'", ")", "\n", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                        ", "val_idx", "=", "val_idx", "+", "1", "\n", "psnr_val", "=", "0", "\n", "for", "batch_id1", ",", "data_var", "in", "enumerate", "(", "self", ".", "val_data", ")", ":", "\n", "                            ", "clean_batch", ",", "model_kwargs1", "=", "data_var", "\n", "model_kwargs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "model_kwargs1", ".", "items", "(", ")", ":", "\n", "                                ", "if", "(", "'Index'", "in", "k", ")", ":", "\n", "                                    ", "img_name", "=", "v", "\n", "", "else", ":", "\n", "                                    ", "model_kwargs", "[", "k", "]", "=", "v", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "\n", "\n", "\n", "\n", "", "", "sample", "=", "self", ".", "diffusion", ".", "p_sample_loop", "(", "\n", "self", ".", "model", ",", "\n", "(", "clean_batch", ".", "shape", "[", "0", "]", ",", "3", ",", "256", ",", "256", ")", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", ")", "\n", "\n", "\n", "sample", "=", "(", "(", "sample", "+", "1", ")", "*", "127.5", ")", "\n", "sample", "=", "sample", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "th", ".", "uint8", ")", "\n", "sample", "=", "sample", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "sample", "=", "sample", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "\n", "number", "=", "number", "+", "1", "\n", "\n", "clean_image", "=", "(", "(", "model_kwargs", "[", "'HR'", "]", "+", "1", ")", "*", "127.5", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "th", ".", "uint8", ")", "\n", "clean_image", "=", "clean_image", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "clean_image", "=", "clean_image", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "\n", "\n", "\n", "clean_image", "=", "clean_image", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "sample", "=", "sample", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "clean_image", "=", "cv2", ".", "cvtColor", "(", "clean_image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "sample", "=", "cv2", ".", "cvtColor", "(", "sample", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "psnr_im", "=", "psnr", "(", "clean_image", ",", "sample", ")", "\n", "# print(img_name[0])", "\n", "# print(psnr_im)", "\n", "\n", "\n", "psnr_val", "=", "psnr_val", "+", "psnr_im", "\n", "\n", "\n", "", "psnr_val", "=", "psnr_val", "/", "number", "\n", "\n", "print", "(", "'psnr ='", ")", "\n", "print", "(", "psnr_val", ")", "\n", "# wandb.log({\"psnr\": psnr_val})", "\n", "\n", "if", "best_psnr", "<", "psnr_val", ":", "\n", "                            ", "best_psnr", "=", "psnr_val", "\n", "self", ".", "save_val", "(", ")", "\n", "\n", "\n", "\n", "\n", "# Run for a finite amount of time in integration tests.", "\n", "# if os.environ.get(\"DIFFUSION_TRAINING_TEST\", \"\") and self.step > 0:", "\n", "#     return", "\n", "", "", "", "self", ".", "step", "+=", "1", "\n", "# Save the last checkpoint if it wasn't already saved.", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.run_step": [[259, 266], ["train_util.TrainLoop.forward_backward", "train_util.TrainLoop.mp_trainer.optimize", "train_util.TrainLoop._anneal_lr", "train_util.TrainLoop.log_step", "train_util.TrainLoop._update_ema"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.forward_backward", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.optimize", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._anneal_lr", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.log_step", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._update_ema"], ["", "", "def", "run_step", "(", "self", ",", "batch", ",", "cond", ")", ":", "\n", "        ", "self", ".", "forward_backward", "(", "batch", ",", "cond", ")", "\n", "took_step", "=", "self", ".", "mp_trainer", ".", "optimize", "(", "self", ".", "opt", ")", "\n", "if", "took_step", ":", "\n", "            ", "self", ".", "_update_ema", "(", ")", "\n", "", "self", ".", "_anneal_lr", "(", ")", "\n", "self", ".", "log_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.forward_backward": [[267, 311], ["train_util.TrainLoop.mp_trainer.zero_grad", "range", "batch[].to", "train_util.TrainLoop.schedule_sampler.sample", "functools.partial", "isinstance", "train_util.log_loss_dict", "train_util.TrainLoop.mp_trainer.backward", "dist_util.dev", "v[].to", "dist_util.dev", "functools.partial.", "train_util.TrainLoop.schedule_sampler.update_with_local_losses", "torch.log10", "torch.log10", "dist_util.dev", "cond.items", "train_util.TrainLoop.ddp_model.no_sync", "functools.partial.", "losses[].detach", "functools.partial.items"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.zero_grad", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.ScheduleSampler.sample", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.log_loss_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.backward", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossAwareSampler.update_with_local_losses", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["", "def", "forward_backward", "(", "self", ",", "batch", ",", "cond", ")", ":", "\n", "        ", "self", ".", "mp_trainer", ".", "zero_grad", "(", ")", "\n", "num_im", "=", "0", "\n", "loss_wandb", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "batch", ".", "shape", "[", "0", "]", ",", "self", ".", "microbatch", ")", ":", "\n", "            ", "num_im", "=", "num_im", "+", "1", "\n", "\n", "micro", "=", "batch", "[", "i", ":", "i", "+", "self", ".", "microbatch", "]", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "micro_cond", "=", "{", "\n", "k", ":", "v", "[", "i", ":", "i", "+", "self", ".", "microbatch", "]", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "cond", ".", "items", "(", ")", "\n", "}", "\n", "last_batch", "=", "(", "i", "+", "self", ".", "microbatch", ")", ">=", "batch", ".", "shape", "[", "0", "]", "\n", "t", ",", "weights", "=", "self", ".", "schedule_sampler", ".", "sample", "(", "micro", ".", "shape", "[", "0", "]", ",", "dist_util", ".", "dev", "(", ")", ")", "\n", "# print(t.shape)", "\n", "# print(t)", "\n", "\n", "compute_losses", "=", "functools", ".", "partial", "(", "\n", "self", ".", "diffusion", ".", "training_losses", ",", "\n", "self", ".", "ddp_model", ",", "\n", "micro", ",", "\n", "t", ",", "\n", "model_kwargs", "=", "micro_cond", ",", "\n", ")", "\n", "\n", "if", "last_batch", "or", "not", "self", ".", "use_ddp", ":", "\n", "                ", "losses", "=", "compute_losses", "(", ")", "\n", "", "else", ":", "\n", "                ", "with", "self", ".", "ddp_model", ".", "no_sync", "(", ")", ":", "\n", "                    ", "losses", "=", "compute_losses", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "schedule_sampler", ",", "LossAwareSampler", ")", ":", "\n", "                ", "self", ".", "schedule_sampler", ".", "update_with_local_losses", "(", "\n", "t", ",", "losses", "[", "\"loss\"", "]", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "", "loss", "=", "(", "losses", "[", "\"loss\"", "]", "*", "weights", ")", ".", "mean", "(", ")", "\n", "loss_wandb", "=", "th", ".", "log10", "(", "loss", ")", "+", "loss_wandb", "\n", "\n", "log_loss_dict", "(", "\n", "self", ".", "diffusion", ",", "t", ",", "{", "k", ":", "v", "*", "weights", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", "}", "\n", ")", "\n", "self", ".", "mp_trainer", ".", "backward", "(", "loss", ")", "\n", "", "loss_wandb_f", "=", "loss_wandb", "/", "num_im", "\n", "# wandb.log({\"loss\": loss_wandb_f})", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._update_ema": [[313, 316], ["zip", "nn.update_ema"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.update_ema"], ["", "def", "_update_ema", "(", "self", ")", ":", "\n", "        ", "for", "rate", ",", "params", "in", "zip", "(", "self", ".", "ema_rate", ",", "self", ".", "ema_params", ")", ":", "\n", "            ", "update_ema", "(", "params", ",", "self", ".", "mp_trainer", ".", "master_params", ",", "rate", "=", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop._anneal_lr": [[317, 324], ["None"], "methods", ["None"], ["", "", "def", "_anneal_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "lr_anneal_steps", ":", "\n", "            ", "return", "\n", "", "frac_done", "=", "(", "self", ".", "step", "+", "self", ".", "resume_step", ")", "/", "self", ".", "lr_anneal_steps", "\n", "lr", "=", "self", ".", "lr", "*", "(", "1", "-", "frac_done", ")", "\n", "for", "param_group", "in", "self", ".", "opt", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.log_step": [[325, 328], ["logger.logkv", "logger.logkv"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv"], ["", "", "def", "log_step", "(", "self", ")", ":", "\n", "        ", "logger", ".", "logkv", "(", "\"step\"", ",", "self", ".", "step", "+", "self", ".", "resume_step", ")", "\n", "logger", ".", "logkv", "(", "\"samples\"", ",", "(", "self", ".", "step", "+", "self", ".", "resume_step", "+", "1", ")", "*", "self", ".", "global_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.save": [[329, 353], ["train_util.TrainLoop.save.save_checkpoint"], "methods", ["None"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "def", "save_checkpoint", "(", "rate", ",", "params", ")", ":", "\n", "            ", "state_dict", "=", "self", ".", "mp_trainer", ".", "master_params_to_state_dict", "(", "params", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "logger", ".", "log", "(", "f\"saving model {rate}...\"", ")", "\n", "if", "not", "rate", ":", "\n", "                    ", "filename", "=", "f\"model{(self.step+self.resume_step):06d}.pt\"", "\n", "", "else", ":", "\n", "                    ", "filename", "=", "f\"ema_{rate}_{(self.step+self.resume_step):06d}.pt\"", "\n", "", "with", "bf", ".", "BlobFile", "(", "bf", ".", "join", "(", "\"./weights\"", ",", "filename", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "th", ".", "save", "(", "state_dict", ",", "f", ")", "\n", "\n", "", "", "", "save_checkpoint", "(", "0", ",", "self", ".", "mp_trainer", ".", "master_params", ")", "\n", "for", "rate", ",", "params", "in", "zip", "(", "self", ".", "ema_rate", ",", "self", ".", "ema_params", ")", ":", "\n", "            ", "save_checkpoint", "(", "rate", ",", "params", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "with", "bf", ".", "BlobFile", "(", "\n", "bf", ".", "join", "(", "get_blob_logdir", "(", ")", ",", "f\"opt{(self.step+self.resume_step):06d}.pt\"", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "th", ".", "save", "(", "self", ".", "opt", ".", "state_dict", "(", ")", ",", "f", ")", "\n", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.save_val": [[354, 378], ["train_util.TrainLoop.save_val.save_checkpoint_val"], "methods", ["None"], ["", "def", "save_val", "(", "self", ")", ":", "\n", "        ", "def", "save_checkpoint_val", "(", "rate", ",", "params", ")", ":", "\n", "            ", "state_dict", "=", "self", ".", "mp_trainer", ".", "master_params_to_state_dict", "(", "params", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "logger", ".", "log", "(", "f\"saving model {rate}...\"", ")", "\n", "if", "not", "rate", ":", "\n", "                    ", "filename", "=", "f\"model{(self.step+self.resume_step):06d}.pt\"", "\n", "", "else", ":", "\n", "                    ", "filename", "=", "f\"ema_{rate}_{(self.step+self.resume_step):06d}.pt\"", "\n", "", "with", "bf", ".", "BlobFile", "(", "bf", ".", "join", "(", "\"./weights\"", ",", "filename", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "th", ".", "save", "(", "state_dict", ",", "f", ")", "\n", "\n", "", "", "", "save_checkpoint_val", "(", "0", ",", "self", ".", "mp_trainer", ".", "master_params", ")", "\n", "for", "rate", ",", "params", "in", "zip", "(", "self", ".", "ema_rate", ",", "self", ".", "ema_params", ")", ":", "\n", "            ", "save_checkpoint_val", "(", "rate", ",", "params", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "with", "bf", ".", "BlobFile", "(", "\n", "bf", ".", "join", "(", "get_blob_logdir", "(", ")", ",", "f\"opt{(self.step+self.resume_step):06d}.pt\"", ")", ",", "\n", "\"wb\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "th", ".", "save", "(", "self", ".", "opt", ".", "state_dict", "(", ")", ",", "f", ")", "\n", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.parse_resume_step_from_filename": [[380, 393], ["filename.split", "len", "split[].split", "int"], "function", ["None"], ["", "", "def", "parse_resume_step_from_filename", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Parse filenames of the form path/to/modelNNNNNN.pt, where NNNNNN is the\n    checkpoint's number of steps.\n    \"\"\"", "\n", "split", "=", "filename", ".", "split", "(", "\"model\"", ")", "\n", "if", "len", "(", "split", ")", "<", "2", ":", "\n", "        ", "return", "0", "\n", "", "split1", "=", "split", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "try", ":", "\n", "        ", "return", "int", "(", "split1", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.get_blob_logdir": [[395, 399], ["logger.get_dir"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_dir"], ["", "", "def", "get_blob_logdir", "(", ")", ":", "\n", "# You can change this to be a separate path to save checkpoints to", "\n", "# a blobstore or some external drive.", "\n", "    ", "return", "logger", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.find_resume_checkpoint": [[401, 405], ["None"], "function", ["None"], ["", "def", "find_resume_checkpoint", "(", ")", ":", "\n", "# On your infrastructure, you may want to override this to automatically", "\n", "# discover the latest checkpoint on your blob storage, etc.", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.find_ema_checkpoint": [[407, 415], ["blobfile.join", "blobfile.exists", "blobfile.dirname"], "function", ["None"], ["", "def", "find_ema_checkpoint", "(", "main_checkpoint", ",", "step", ",", "rate", ")", ":", "\n", "    ", "if", "main_checkpoint", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "filename", "=", "f\"ema_{rate}_{(step):06d}.pt\"", "\n", "path", "=", "bf", ".", "join", "(", "bf", ".", "dirname", "(", "main_checkpoint", ")", ",", "filename", ")", "\n", "if", "bf", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "path", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.log_loss_dict": [[417, 424], ["losses.items", "logger.logkv_mean", "zip", "values.mean().item", "ts.cpu().numpy", "values.detach().cpu().numpy", "int", "logger.logkv_mean", "values.mean", "ts.cpu", "values.detach().cpu", "values.detach"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean"], ["", "def", "log_loss_dict", "(", "diffusion", ",", "ts", ",", "losses", ")", ":", "\n", "    ", "for", "key", ",", "values", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "logkv_mean", "(", "key", ",", "values", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "# Log the quantiles (four quartiles, in particular).", "\n", "for", "sub_t", ",", "sub_loss", "in", "zip", "(", "ts", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "values", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "            ", "quartile", "=", "int", "(", "4", "*", "sub_t", "/", "diffusion", ".", "num_timesteps", ")", "\n", "logger", ".", "logkv_mean", "(", "f\"{key}_q{quartile}\"", ",", "sub_loss", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.diffusion_defaults": [[11, 24], ["dict"], "function", ["None"], ["def", "diffusion_defaults", "(", ")", ":", "\n", "    ", "\"\"\"\n    Defaults for image and classifier training.\n    \"\"\"", "\n", "return", "dict", "(", "\n", "learn_sigma", "=", "False", ",", "\n", "diffusion_steps", "=", "1000", ",", "\n", "noise_schedule", "=", "\"linear\"", ",", "\n", "timestep_respacing", "=", "\"ddim100\"", ",", "\n", "use_kl", "=", "False", ",", "\n", "predict_xstart", "=", "False", ",", "\n", "rescale_timesteps", "=", "True", ",", "\n", "rescale_learned_sigmas", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.classifier_defaults": [[27, 40], ["dict"], "function", ["None"], ["", "def", "classifier_defaults", "(", ")", ":", "\n", "    ", "\"\"\"\n    Defaults for classifier models.\n    \"\"\"", "\n", "return", "dict", "(", "\n", "image_size", "=", "64", ",", "\n", "classifier_use_fp16", "=", "False", ",", "\n", "classifier_width", "=", "128", ",", "\n", "classifier_depth", "=", "2", ",", "\n", "classifier_attention_resolutions", "=", "\"32,16,8\"", ",", "# 16", "\n", "classifier_use_scale_shift_norm", "=", "True", ",", "# False", "\n", "classifier_resblock_updown", "=", "True", ",", "# False", "\n", "classifier_pool", "=", "\"attention\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.model_and_diffusion_defaults": [[43, 66], ["dict", "dict.update", "script_util.diffusion_defaults"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.diffusion_defaults"], ["", "def", "model_and_diffusion_defaults", "(", ")", ":", "\n", "    ", "\"\"\"\n    Defaults for image training.\n    \"\"\"", "\n", "res", "=", "dict", "(", "\n", "image_size", "=", "64", ",", "\n", "num_channels", "=", "128", ",", "\n", "num_res_blocks", "=", "2", ",", "\n", "num_heads", "=", "4", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "attention_resolutions", "=", "\"16,8\"", ",", "\n", "channel_mult", "=", "\"\"", ",", "\n", "dropout", "=", "0.0", ",", "\n", "class_cond", "=", "False", ",", "\n", "use_checkpoint", "=", "True", ",", "\n", "use_scale_shift_norm", "=", "True", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", ")", "\n", "res", ".", "update", "(", "diffusion_defaults", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.classifier_and_diffusion_defaults": [[68, 72], ["script_util.classifier_defaults", "classifier_defaults.update", "script_util.diffusion_defaults"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.classifier_defaults", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.diffusion_defaults"], ["", "def", "classifier_and_diffusion_defaults", "(", ")", ":", "\n", "    ", "res", "=", "classifier_defaults", "(", ")", "\n", "res", ".", "update", "(", "diffusion_defaults", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_model_and_diffusion": [[74, 128], ["script_util.create_model", "script_util.create_gaussian_diffusion"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_model", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_gaussian_diffusion"], ["", "def", "create_model_and_diffusion", "(", "\n", "image_size", ",", "\n", "class_cond", ",", "\n", "learn_sigma", ",", "\n", "num_channels", ",", "\n", "num_res_blocks", ",", "\n", "channel_mult", ",", "\n", "num_heads", ",", "\n", "num_head_channels", ",", "\n", "num_heads_upsample", ",", "\n", "attention_resolutions", ",", "\n", "dropout", ",", "\n", "diffusion_steps", ",", "\n", "noise_schedule", ",", "\n", "timestep_respacing", ",", "\n", "use_kl", ",", "\n", "predict_xstart", ",", "\n", "rescale_timesteps", ",", "\n", "rescale_learned_sigmas", ",", "\n", "use_checkpoint", ",", "\n", "use_scale_shift_norm", ",", "\n", "resblock_updown", ",", "\n", "use_fp16", ",", "\n", "use_new_attention_order", ",", "\n", ")", ":", "\n", "    ", "model", "=", "create_model", "(", "\n", "image_size", ",", "\n", "num_channels", ",", "\n", "num_res_blocks", ",", "\n", "channel_mult", "=", "channel_mult", ",", "\n", "learn_sigma", "=", "learn_sigma", ",", "\n", "class_cond", "=", "class_cond", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "attention_resolutions", "=", "attention_resolutions", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "num_heads_upsample", "=", "num_heads_upsample", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "resblock_updown", "=", "resblock_updown", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", "diffusion", "=", "create_gaussian_diffusion", "(", "\n", "steps", "=", "diffusion_steps", ",", "\n", "learn_sigma", "=", "learn_sigma", ",", "\n", "noise_schedule", "=", "noise_schedule", ",", "\n", "use_kl", "=", "use_kl", ",", "\n", "predict_xstart", "=", "predict_xstart", ",", "\n", "rescale_timesteps", "=", "rescale_timesteps", ",", "\n", "rescale_learned_sigmas", "=", "rescale_learned_sigmas", ",", "\n", "timestep_respacing", "=", "timestep_respacing", ",", "\n", ")", "\n", "return", "model", ",", "diffusion", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_model": [[130, 184], ["attention_resolutions.split", "unet.UNetModel", "tuple", "attention_ds.append", "tuple", "int", "int", "tuple.split", "ValueError"], "function", ["None"], ["", "def", "create_model", "(", "\n", "image_size", ",", "\n", "num_channels", ",", "\n", "num_res_blocks", ",", "\n", "channel_mult", "=", "\"\"", ",", "\n", "learn_sigma", "=", "False", ",", "\n", "class_cond", "=", "False", ",", "\n", "use_checkpoint", "=", "True", ",", "\n", "attention_resolutions", "=", "\"16\"", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "dropout", "=", "0", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "channel_mult", "==", "\"\"", ":", "\n", "        ", "if", "image_size", "==", "512", ":", "\n", "            ", "channel_mult", "=", "(", "0.5", ",", "1", ",", "1", ",", "2", ",", "2", ",", "4", ",", "4", ")", "\n", "", "elif", "image_size", "==", "256", ":", "\n", "            ", "channel_mult", "=", "(", "1", ",", "1", ",", "2", ",", "2", ",", "4", ",", "4", ")", "\n", "", "elif", "image_size", "==", "128", ":", "\n", "            ", "channel_mult", "=", "(", "1", ",", "1", ",", "2", ",", "3", ",", "4", ")", "\n", "", "elif", "image_size", "==", "64", ":", "\n", "            ", "channel_mult", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"unsupported image size: {image_size}\"", ")", "\n", "", "", "else", ":", "\n", "        ", "channel_mult", "=", "tuple", "(", "int", "(", "ch_mult", ")", "for", "ch_mult", "in", "channel_mult", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "", "attention_ds", "=", "[", "]", "\n", "for", "res", "in", "attention_resolutions", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "attention_ds", ".", "append", "(", "image_size", "//", "int", "(", "res", ")", ")", "\n", "\n", "", "return", "UNetModel", "(", "\n", "image_size", "=", "image_size", ",", "\n", "in_channels", "=", "3", ",", "\n", "model_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "(", "3", "if", "not", "learn_sigma", "else", "6", ")", ",", "\n", "num_res_blocks", "=", "num_res_blocks", ",", "\n", "attention_resolutions", "=", "tuple", "(", "attention_ds", ")", ",", "\n", "dropout", "=", "dropout", ",", "\n", "channel_mult", "=", "channel_mult", ",", "\n", "num_classes", "=", "(", "NUM_CLASSES", "if", "class_cond", "else", "None", ")", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "num_heads_upsample", "=", "num_heads_upsample", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "resblock_updown", "=", "resblock_updown", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_classifier_and_diffusion": [[187, 226], ["script_util.create_classifier", "script_util.create_gaussian_diffusion"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_classifier", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_gaussian_diffusion"], ["", "def", "create_classifier_and_diffusion", "(", "\n", "image_size", ",", "\n", "classifier_use_fp16", ",", "\n", "classifier_width", ",", "\n", "classifier_depth", ",", "\n", "classifier_attention_resolutions", ",", "\n", "classifier_use_scale_shift_norm", ",", "\n", "classifier_resblock_updown", ",", "\n", "classifier_pool", ",", "\n", "learn_sigma", ",", "\n", "diffusion_steps", ",", "\n", "noise_schedule", ",", "\n", "timestep_respacing", ",", "\n", "use_kl", ",", "\n", "predict_xstart", ",", "\n", "rescale_timesteps", ",", "\n", "rescale_learned_sigmas", ",", "\n", ")", ":", "\n", "    ", "classifier", "=", "create_classifier", "(", "\n", "image_size", ",", "\n", "classifier_use_fp16", ",", "\n", "classifier_width", ",", "\n", "classifier_depth", ",", "\n", "classifier_attention_resolutions", ",", "\n", "classifier_use_scale_shift_norm", ",", "\n", "classifier_resblock_updown", ",", "\n", "classifier_pool", ",", "\n", ")", "\n", "diffusion", "=", "create_gaussian_diffusion", "(", "\n", "steps", "=", "diffusion_steps", ",", "\n", "learn_sigma", "=", "learn_sigma", ",", "\n", "noise_schedule", "=", "noise_schedule", ",", "\n", "use_kl", "=", "use_kl", ",", "\n", "predict_xstart", "=", "predict_xstart", ",", "\n", "rescale_timesteps", "=", "rescale_timesteps", ",", "\n", "rescale_learned_sigmas", "=", "rescale_learned_sigmas", ",", "\n", "timestep_respacing", "=", "timestep_respacing", ",", "\n", ")", "\n", "return", "classifier", ",", "diffusion", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_classifier": [[228, 266], ["classifier_attention_resolutions.split", "unet.EncoderUNetModel", "attention_ds.append", "tuple", "int", "ValueError"], "function", ["None"], ["", "def", "create_classifier", "(", "\n", "image_size", ",", "\n", "classifier_use_fp16", ",", "\n", "classifier_width", ",", "\n", "classifier_depth", ",", "\n", "classifier_attention_resolutions", ",", "\n", "classifier_use_scale_shift_norm", ",", "\n", "classifier_resblock_updown", ",", "\n", "classifier_pool", ",", "\n", ")", ":", "\n", "    ", "if", "image_size", "==", "512", ":", "\n", "        ", "channel_mult", "=", "(", "0.5", ",", "1", ",", "1", ",", "2", ",", "2", ",", "4", ",", "4", ")", "\n", "", "elif", "image_size", "==", "256", ":", "\n", "        ", "channel_mult", "=", "(", "1", ",", "1", ",", "2", ",", "2", ",", "4", ",", "4", ")", "\n", "", "elif", "image_size", "==", "128", ":", "\n", "        ", "channel_mult", "=", "(", "1", ",", "1", ",", "2", ",", "3", ",", "4", ")", "\n", "", "elif", "image_size", "==", "64", ":", "\n", "        ", "channel_mult", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unsupported image size: {image_size}\"", ")", "\n", "\n", "", "attention_ds", "=", "[", "]", "\n", "for", "res", "in", "classifier_attention_resolutions", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "attention_ds", ".", "append", "(", "image_size", "//", "int", "(", "res", ")", ")", "\n", "\n", "", "return", "EncoderUNetModel", "(", "\n", "image_size", "=", "image_size", ",", "\n", "in_channels", "=", "3", ",", "\n", "model_channels", "=", "classifier_width", ",", "\n", "out_channels", "=", "1000", ",", "\n", "num_res_blocks", "=", "classifier_depth", ",", "\n", "attention_resolutions", "=", "tuple", "(", "attention_ds", ")", ",", "\n", "channel_mult", "=", "channel_mult", ",", "\n", "use_fp16", "=", "classifier_use_fp16", ",", "\n", "num_head_channels", "=", "64", ",", "\n", "use_scale_shift_norm", "=", "classifier_use_scale_shift_norm", ",", "\n", "resblock_updown", "=", "classifier_resblock_updown", ",", "\n", "pool", "=", "classifier_pool", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_model_and_diffusion_defaults": [[269, 278], ["script_util.model_and_diffusion_defaults", "model_and_diffusion_defaults.copy().keys", "inspect.getfullargspec", "model_and_diffusion_defaults.copy"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.model_and_diffusion_defaults"], ["", "def", "sr_model_and_diffusion_defaults", "(", ")", ":", "\n", "    ", "res", "=", "model_and_diffusion_defaults", "(", ")", "\n", "res", "[", "\"large_size\"", "]", "=", "256", "\n", "res", "[", "\"small_size\"", "]", "=", "256", "\n", "arg_names", "=", "inspect", ".", "getfullargspec", "(", "sr_create_model_and_diffusion", ")", "[", "0", "]", "\n", "for", "k", "in", "res", ".", "copy", "(", ")", ".", "keys", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "arg_names", ":", "\n", "            ", "del", "res", "[", "k", "]", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_create_model_and_diffusion": [[280, 332], ["script_util.sr_create_model", "script_util.create_gaussian_diffusion"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_create_model", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_gaussian_diffusion"], ["", "def", "sr_create_model_and_diffusion", "(", "\n", "large_size", ",", "\n", "small_size", ",", "\n", "class_cond", ",", "\n", "learn_sigma", ",", "\n", "num_channels", ",", "\n", "num_res_blocks", ",", "\n", "num_heads", ",", "\n", "num_head_channels", ",", "\n", "num_heads_upsample", ",", "\n", "attention_resolutions", ",", "\n", "dropout", ",", "\n", "diffusion_steps", ",", "\n", "noise_schedule", ",", "\n", "timestep_respacing", ",", "\n", "use_kl", ",", "\n", "predict_xstart", ",", "\n", "rescale_timesteps", ",", "\n", "rescale_learned_sigmas", ",", "\n", "use_checkpoint", ",", "\n", "use_scale_shift_norm", ",", "\n", "resblock_updown", ",", "\n", "use_fp16", ",", "\n", ")", ":", "\n", "    ", "model", "=", "sr_create_model", "(", "\n", "large_size", ",", "\n", "small_size", ",", "\n", "num_channels", ",", "\n", "num_res_blocks", ",", "\n", "learn_sigma", "=", "learn_sigma", ",", "\n", "class_cond", "=", "class_cond", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "attention_resolutions", "=", "attention_resolutions", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "num_heads_upsample", "=", "num_heads_upsample", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "dropout", "=", "dropout", ",", "\n", "resblock_updown", "=", "resblock_updown", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", ")", "\n", "diffusion", "=", "create_gaussian_diffusion", "(", "\n", "steps", "=", "diffusion_steps", ",", "\n", "learn_sigma", "=", "learn_sigma", ",", "\n", "noise_schedule", "=", "noise_schedule", ",", "\n", "use_kl", "=", "use_kl", ",", "\n", "predict_xstart", "=", "predict_xstart", ",", "\n", "rescale_timesteps", "=", "rescale_timesteps", ",", "\n", "rescale_learned_sigmas", "=", "rescale_learned_sigmas", ",", "\n", "timestep_respacing", "=", "timestep_respacing", ",", "\n", ")", "\n", "return", "model", ",", "diffusion", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_create_model": [[334, 383], ["attention_resolutions.split", "unet.SuperResModel", "attention_ds.append", "tuple", "ValueError", "int"], "function", ["None"], ["", "def", "sr_create_model", "(", "\n", "large_size", ",", "\n", "small_size", ",", "\n", "num_channels", ",", "\n", "num_res_blocks", ",", "\n", "learn_sigma", ",", "\n", "class_cond", ",", "\n", "use_checkpoint", ",", "\n", "attention_resolutions", ",", "\n", "num_heads", ",", "\n", "num_head_channels", ",", "\n", "num_heads_upsample", ",", "\n", "use_scale_shift_norm", ",", "\n", "dropout", ",", "\n", "resblock_updown", ",", "\n", "use_fp16", ",", "\n", ")", ":", "\n", "    ", "_", "=", "small_size", "# hack to prevent unused variable", "\n", "\n", "if", "large_size", "==", "512", ":", "\n", "        ", "channel_mult", "=", "(", "1", ",", "1", ",", "2", ",", "2", ",", "4", ",", "4", ")", "\n", "", "elif", "large_size", "==", "256", ":", "\n", "        ", "channel_mult", "=", "(", "1", ",", "1", ",", "2", ",", "2", ",", "4", ",", "4", ")", "\n", "", "elif", "large_size", "==", "64", ":", "\n", "        ", "channel_mult", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unsupported large size: {large_size}\"", ")", "\n", "\n", "", "attention_ds", "=", "[", "]", "\n", "for", "res", "in", "attention_resolutions", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "attention_ds", ".", "append", "(", "large_size", "//", "int", "(", "res", ")", ")", "\n", "\n", "", "return", "SuperResModel", "(", "\n", "image_size", "=", "large_size", ",", "\n", "in_channels", "=", "3", ",", "\n", "model_channels", "=", "num_channels", ",", "\n", "out_channels", "=", "(", "3", "if", "not", "learn_sigma", "else", "6", ")", ",", "\n", "num_res_blocks", "=", "num_res_blocks", ",", "\n", "attention_resolutions", "=", "tuple", "(", "attention_ds", ")", ",", "\n", "dropout", "=", "dropout", ",", "\n", "channel_mult", "=", "channel_mult", ",", "\n", "num_classes", "=", "(", "NUM_CLASSES", "if", "class_cond", "else", "None", ")", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "num_heads_upsample", "=", "num_heads_upsample", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "resblock_updown", "=", "resblock_updown", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.create_gaussian_diffusion": [[386, 424], ["gaussian_diffusion.get_named_beta_schedule", "respace.SpacedDiffusion", "respace.space_timesteps"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.get_named_beta_schedule", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.respace.space_timesteps"], ["", "def", "create_gaussian_diffusion", "(", "\n", "*", ",", "\n", "steps", "=", "1000", ",", "\n", "learn_sigma", "=", "False", ",", "\n", "sigma_small", "=", "False", ",", "\n", "noise_schedule", "=", "\"linear\"", ",", "\n", "use_kl", "=", "False", ",", "\n", "predict_xstart", "=", "False", ",", "\n", "rescale_timesteps", "=", "False", ",", "\n", "rescale_learned_sigmas", "=", "False", ",", "\n", "timestep_respacing", "=", "\"\"", ",", "\n", ")", ":", "\n", "    ", "betas", "=", "gd", ".", "get_named_beta_schedule", "(", "noise_schedule", ",", "steps", ")", "\n", "if", "use_kl", ":", "\n", "        ", "loss_type", "=", "gd", ".", "LossType", ".", "RESCALED_KL", "\n", "", "elif", "rescale_learned_sigmas", ":", "\n", "        ", "loss_type", "=", "gd", ".", "LossType", ".", "RESCALED_MSE", "\n", "", "else", ":", "\n", "        ", "loss_type", "=", "gd", ".", "LossType", ".", "MSE", "\n", "", "if", "not", "timestep_respacing", ":", "\n", "        ", "timestep_respacing", "=", "[", "steps", "]", "\n", "", "return", "SpacedDiffusion", "(", "\n", "use_timesteps", "=", "space_timesteps", "(", "steps", ",", "timestep_respacing", ")", ",", "\n", "betas", "=", "betas", ",", "\n", "model_mean_type", "=", "(", "\n", "gd", ".", "ModelMeanType", ".", "EPSILON", "if", "not", "predict_xstart", "else", "gd", ".", "ModelMeanType", ".", "START_X", "\n", ")", ",", "\n", "model_var_type", "=", "(", "\n", "(", "\n", "gd", ".", "ModelVarType", ".", "FIXED_LARGE", "\n", "if", "not", "sigma_small", "\n", "else", "gd", ".", "ModelVarType", ".", "FIXED_SMALL", "\n", ")", "\n", "if", "not", "learn_sigma", "\n", "else", "gd", ".", "ModelVarType", ".", "LEARNED_RANGE", "\n", ")", ",", "\n", "loss_type", "=", "loss_type", ",", "\n", "rescale_timesteps", "=", "rescale_timesteps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.add_dict_to_argparser": [[427, 435], ["default_dict.items", "type", "parser.add_argument", "isinstance"], "function", ["None"], ["", "def", "add_dict_to_argparser", "(", "parser", ",", "default_dict", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "default_dict", ".", "items", "(", ")", ":", "\n", "        ", "v_type", "=", "type", "(", "v", ")", "\n", "if", "v", "is", "None", ":", "\n", "            ", "v_type", "=", "str", "\n", "", "elif", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "v_type", "=", "str2bool", "\n", "", "parser", ".", "add_argument", "(", "f\"--{k}\"", ",", "default", "=", "v", ",", "type", "=", "v_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.args_to_dict": [[437, 439], ["getattr"], "function", ["None"], ["", "", "def", "args_to_dict", "(", "args", ",", "keys", ")", ":", "\n", "    ", "return", "{", "k", ":", "getattr", "(", "args", ",", "k", ")", "for", "k", "in", "keys", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.str2bool": [[441, 453], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse\n    \"\"\"", "\n", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"boolean value expected\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.RandomCrop.__init__": [[91, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", "=", "[", "256", ",", "256", "]", ")", ":", "\n", "        ", "\"\"\"Set the height and weight before and after cropping\"\"\"", "\n", "self", ".", "crop_size_h", "=", "crop_size", "[", "0", "]", "\n", "self", ".", "crop_size_w", "=", "crop_size", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.RandomCrop.__call__": [[96, 108], ["random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "input_size_h", ",", "input_size_w", ",", "_", "=", "inputs", ".", "shape", "\n", "try", ":", "\n", "            ", "x_start", "=", "random", ".", "randint", "(", "0", ",", "input_size_w", "-", "self", ".", "crop_size_w", ")", "\n", "y_start", "=", "random", ".", "randint", "(", "0", ",", "input_size_h", "-", "self", ".", "crop_size_h", ")", "\n", "inputs", "=", "inputs", "[", "y_start", ":", "y_start", "+", "self", ".", "crop_size_h", ",", "x_start", ":", "x_start", "+", "self", ".", "crop_size_w", "]", "\n", "target", "=", "target", "[", "y_start", ":", "y_start", "+", "self", ".", "crop_size_h", ",", "x_start", ":", "x_start", "+", "self", ".", "crop_size_w", "]", "\n", "", "except", ":", "\n", "            ", "inputs", "=", "cv2", ".", "resize", "(", "inputs", ",", "(", "256", ",", "256", ")", ")", "\n", "target", "=", "cv2", ".", "resize", "(", "target", ",", "(", "256", ",", "256", ")", ")", "\n", "\n", "", "return", "inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.ImageDataset.__init__": [[110, 131], ["torch.utils.data.Dataset.__init__", "imgaug.ElasticTransformation"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "resolution", ",", "\n", "image_paths", ",", "\n", "gt_paths", ",", "\n", "classes", "=", "None", ",", "\n", "shard", "=", "0", ",", "\n", "num_shards", "=", "1", ",", "\n", "random_crop", "=", "False", ",", "\n", "random_flip", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "local_images", "=", "image_paths", "[", "shard", ":", "]", "[", ":", ":", "num_shards", "]", "\n", "self", ".", "local_classes", "=", "None", "if", "classes", "is", "None", "else", "classes", "[", "shard", ":", "]", "[", ":", ":", "num_shards", "]", "\n", "self", ".", "random_crop", "=", "True", "#random_crop", "\n", "self", ".", "random_flip", "=", "random_flip", "\n", "self", ".", "gt_paths", "=", "gt_paths", "\n", "# train_list=train_list[:10000]", "\n", "\n", "self", ".", "deformation", "=", "iaa", ".", "ElasticTransformation", "(", "alpha", "=", "[", "0", ",", "50.", "]", ",", "sigma", "=", "[", "4.", ",", "5.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.ImageDataset.__len__": [[132, 134], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "local_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.ImageDataset.__getitem__": [[135, 183], ["cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "numpy.repeat", "seed.gamma().astype", "numpy.sqrt", "numpy.array", "numpy.array", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.transpose", "numpy.transpose", "seed.gamma", "numpy.transpose.astype", "numpy.transpose.astype", "numpy.float32"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "local_images", "[", "idx", "]", "\n", "\n", "\n", "pil_image", "=", "cv2", ".", "imread", "(", "path", ")", "## Clean image RGB", "\n", "\n", "pil_image", "=", "cv2", ".", "cvtColor", "(", "pil_image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "pil_image", "=", "np", ".", "repeat", "(", "pil_image", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "\n", "\n", "\n", "im1", "=", "(", "(", "np", ".", "float32", "(", "pil_image", ")", "+", "1.0", ")", "/", "256.0", ")", "**", "2", "\n", "gamma_noise", "=", "seed", ".", "gamma", "(", "size", "=", "im1", ".", "shape", ",", "shape", "=", "1.0", ",", "scale", "=", "1.0", ")", ".", "astype", "(", "im1", ".", "dtype", ")", "\n", "syn_sar", "=", "np", ".", "sqrt", "(", "im1", "*", "gamma_noise", ")", "\n", "pil_image1", "=", "syn_sar", "*", "256", "-", "1", "## Noisy image", "\n", "\n", "\n", "\n", "\n", "arr1", "=", "np", ".", "array", "(", "pil_image", ")", "\n", "arr2", "=", "np", ".", "array", "(", "pil_image1", ")", "\n", "\n", "\n", "\n", "arr1", "=", "cv2", ".", "resize", "(", "arr1", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "arr2", "=", "cv2", ".", "resize", "(", "arr2", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "\n", "\n", "\n", "arr1", "=", "arr1", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "arr2", "=", "arr2", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "\n", "\n", "\n", "out_dict", "=", "{", "}", "\n", "\n", "\n", "\n", "arr2", "=", "np", ".", "transpose", "(", "arr2", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "arr1", "=", "np", ".", "transpose", "(", "arr1", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "out_dict", "[", "\"SR\"", "]", "=", "arr2", "\n", "out_dict", "[", "\"HR\"", "]", "=", "arr1", "\n", "\n", "\n", "\n", "return", "arr1", ",", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.load_data": [[16, 75], ["image_datasets._list_image_files_recursively", "image_datasets.ImageDataset", "ValueError", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "mpi4py.MPI.COMM_WORLD.Get_rank", "mpi4py.MPI.COMM_WORLD.Get_size", "blobfile.basename().split", "enumerate", "sorted", "blobfile.basename", "set"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets._list_image_files_recursively"], ["def", "load_data", "(", "\n", "*", ",", "\n", "data_dir", ",", "\n", "gt_dir", ",", "\n", "batch_size", ",", "\n", "image_size", ",", "\n", "class_cond", "=", "False", ",", "\n", "deterministic", "=", "False", ",", "\n", "random_crop", "=", "False", ",", "\n", "random_flip", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    For a dataset, create a generator over (images, kwargs) pairs.\n\n    Each images is an NCHW float tensor, and the kwargs dict contains zero or\n    more keys, each of which map to a batched Tensor of their own.\n    The kwargs dict can be used for class labels, in which case the key is \"y\"\n    and the values are integer tensors of class labels.\n\n    :param data_dir: a dataset directory.\n    :param batch_size: the batch size of each returned pair.\n    :param image_size: the size to which images are resized.\n    :param class_cond: if True, include a \"y\" key in returned dicts for class\n                       label. If classes are not available and this is true, an\n                       exception will be raised.\n    :param deterministic: if True, yield results in a deterministic order.\n    :param random_crop: if True, randomly crop the images for augmentation.\n    :param random_flip: if True, randomly flip the images for augmentation.\n    \"\"\"", "\n", "if", "not", "data_dir", ":", "\n", "        ", "raise", "ValueError", "(", "\"unspecified data directory\"", ")", "\n", "", "all_files", "=", "_list_image_files_recursively", "(", "data_dir", ")", "\n", "classes", "=", "None", "\n", "if", "class_cond", ":", "\n", "# Assume classes are the first part of the filename,", "\n", "# before an underscore.", "\n", "        ", "class_names", "=", "[", "bf", ".", "basename", "(", "path", ")", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "path", "in", "all_files", "]", "\n", "sorted_classes", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "sorted", "(", "set", "(", "class_names", ")", ")", ")", "}", "\n", "classes", "=", "[", "sorted_classes", "[", "x", "]", "for", "x", "in", "class_names", "]", "\n", "", "dataset", "=", "ImageDataset", "(", "\n", "image_size", ",", "\n", "all_files", ",", "\n", "gt_dir", ",", "\n", "classes", "=", "classes", ",", "\n", "shard", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", ",", "\n", "num_shards", "=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", ",", "\n", "random_crop", "=", "random_crop", ",", "\n", "random_flip", "=", "random_flip", ",", "\n", ")", "\n", "if", "deterministic", ":", "\n", "        ", "loader", "=", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "drop_last", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "        ", "loader", "=", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "drop_last", "=", "True", "\n", ")", "\n", "", "while", "True", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets._list_image_files_recursively": [[77, 87], ["sorted", "blobfile.listdir", "blobfile.join", "entry.split", "results.append", "blobfile.isdir", "ext.lower", "results.extend", "image_datasets._list_image_files_recursively"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets._list_image_files_recursively"], ["", "", "def", "_list_image_files_recursively", "(", "data_dir", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "entry", "in", "sorted", "(", "bf", ".", "listdir", "(", "data_dir", ")", ")", ":", "\n", "        ", "full_path", "=", "bf", ".", "join", "(", "data_dir", ",", "entry", ")", "\n", "ext", "=", "entry", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "if", "\".\"", "in", "entry", "and", "ext", ".", "lower", "(", ")", "in", "[", "\"jpg\"", ",", "\"jpeg\"", ",", "\"png\"", ",", "\"gif\"", "]", ":", "\n", "            ", "results", ".", "append", "(", "full_path", ")", "\n", "", "elif", "bf", ".", "isdir", "(", "full_path", ")", ":", "\n", "            ", "results", ".", "extend", "(", "_list_image_files_recursively", "(", "full_path", ")", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.center_crop_arr": [[187, 216], ["pil_image.resize.resize", "pil_image1.resize.resize", "numpy.array", "numpy.array", "min", "pil_image.resize.resize", "min", "tuple", "min", "pil_image1.resize.resize", "min", "tuple", "tuple", "tuple", "round", "round"], "function", ["None"], ["", "", "def", "center_crop_arr", "(", "pil_image", ",", "pil_image1", ",", "image_size", ")", ":", "\n", "# We are not on a new enough PIL to support the `reducing_gap`", "\n", "# argument, which uses BOX downsampling at powers of two first.", "\n", "# Thus, we do it by hand to improve downsample quality.", "\n", "    ", "while", "min", "(", "*", "pil_image", ".", "size", ")", ">=", "2", "*", "image_size", ":", "\n", "        ", "pil_image", "=", "pil_image", ".", "resize", "(", "\n", "tuple", "(", "x", "//", "2", "for", "x", "in", "pil_image", ".", "size", ")", ",", "resample", "=", "Image", ".", "BOX", "\n", ")", "\n", "\n", "", "scale", "=", "image_size", "/", "min", "(", "*", "pil_image", ".", "size", ")", "\n", "pil_image", "=", "pil_image", ".", "resize", "(", "\n", "tuple", "(", "round", "(", "x", "*", "scale", ")", "for", "x", "in", "pil_image", ".", "size", ")", ",", "resample", "=", "Image", ".", "BICUBIC", "\n", ")", "\n", "while", "min", "(", "*", "pil_image1", ".", "size", ")", ">=", "2", "*", "image_size", ":", "\n", "        ", "pil_image1", "=", "pil_image1", ".", "resize", "(", "\n", "tuple", "(", "x", "//", "2", "for", "x", "in", "pil_image", ".", "size", ")", ",", "resample", "=", "Image", ".", "BOX", "\n", ")", "\n", "\n", "", "scale", "=", "image_size", "/", "min", "(", "*", "pil_image1", ".", "size", ")", "\n", "pil_image1", "=", "pil_image1", ".", "resize", "(", "\n", "tuple", "(", "round", "(", "x", "*", "scale", ")", "for", "x", "in", "pil_image1", ".", "size", ")", ",", "resample", "=", "Image", ".", "BICUBIC", "\n", ")", "\n", "\n", "arr", "=", "np", ".", "array", "(", "pil_image", ")", "\n", "arr1", "=", "np", ".", "array", "(", "pil_image1", ")", "\n", "\n", "crop_y", "=", "(", "arr", ".", "shape", "[", "0", "]", "-", "image_size", ")", "//", "2", "\n", "crop_x", "=", "(", "arr", ".", "shape", "[", "1", "]", "-", "image_size", ")", "//", "2", "\n", "return", "arr", "[", "crop_y", ":", "crop_y", "+", "image_size", ",", "crop_x", ":", "crop_x", "+", "image_size", "]", ",", "arr1", "[", "crop_y", ":", "crop_y", "+", "image_size", ",", "crop_x", ":", "crop_x", "+", "image_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.random_crop_arr": [[218, 250], ["math.ceil", "math.ceil", "math.ceil", "math.ceil", "random.randrange", "random.randrange", "pil_image.resize.resize", "pil_image1.resize.resize", "numpy.array", "numpy.array", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "min", "pil_image.resize.resize", "min", "tuple", "min", "pil_image.resize.resize", "min", "tuple", "tuple", "tuple", "round", "round"], "function", ["None"], ["", "def", "random_crop_arr", "(", "pil_image", ",", "pil_image1", ",", "image_size", ",", "min_crop_frac", "=", "0.8", ",", "max_crop_frac", "=", "1.0", ")", ":", "\n", "    ", "min_smaller_dim_size", "=", "math", ".", "ceil", "(", "image_size", "/", "max_crop_frac", ")", "\n", "max_smaller_dim_size", "=", "math", ".", "ceil", "(", "image_size", "/", "min_crop_frac", ")", "\n", "smaller_dim_size", "=", "random", ".", "randrange", "(", "min_smaller_dim_size", ",", "max_smaller_dim_size", "+", "1", ")", "\n", "\n", "# We are not on a new enough PIL to support the `reducing_gap`", "\n", "# argument, which uses BOX downsampling at powers of two first.", "\n", "# Thus, we do it by hand to improve downsample quality.", "\n", "while", "min", "(", "*", "pil_image", ".", "size", ")", ">=", "2", "*", "smaller_dim_size", ":", "\n", "        ", "pil_image", "=", "pil_image", ".", "resize", "(", "\n", "tuple", "(", "x", "//", "2", "for", "x", "in", "pil_image", ".", "size", ")", ",", "resample", "=", "Image", ".", "BOX", "\n", ")", "\n", "\n", "", "scale", "=", "smaller_dim_size", "/", "min", "(", "*", "pil_image", ".", "size", ")", "\n", "pil_image", "=", "pil_image", ".", "resize", "(", "\n", "tuple", "(", "round", "(", "x", "*", "scale", ")", "for", "x", "in", "pil_image", ".", "size", ")", ",", "resample", "=", "Image", ".", "BICUBIC", "\n", ")", "\n", "while", "min", "(", "*", "pil_image1", ".", "size", ")", ">=", "2", "*", "smaller_dim_size", ":", "\n", "        ", "pil_image", "=", "pil_image", ".", "resize", "(", "\n", "tuple", "(", "x", "//", "2", "for", "x", "in", "pil_image1", ".", "size", ")", ",", "resample", "=", "Image", ".", "BOX", "\n", ")", "\n", "\n", "", "scale", "=", "smaller_dim_size", "/", "min", "(", "*", "pil_image1", ".", "size", ")", "\n", "pil_image1", "=", "pil_image1", ".", "resize", "(", "\n", "tuple", "(", "round", "(", "x", "*", "scale", ")", "for", "x", "in", "pil_image1", ".", "size", ")", ",", "resample", "=", "Image", ".", "BICUBIC", "\n", ")", "\n", "arr", "=", "np", ".", "array", "(", "pil_image", ")", "\n", "arr1", "=", "np", ".", "array", "(", "pil_image1", ")", "\n", "\n", "crop_y", "=", "random", ".", "randrange", "(", "arr", ".", "shape", "[", "0", "]", "-", "image_size", "+", "1", ")", "\n", "crop_x", "=", "random", ".", "randrange", "(", "arr", ".", "shape", "[", "1", "]", "-", "image_size", "+", "1", ")", "\n", "return", "arr", "[", "crop_y", ":", "crop_y", "+", "image_size", ",", "crop_x", ":", "crop_x", "+", "image_size", "]", ",", "arr1", "[", "crop_y", ":", "crop_y", "+", "image_size", ",", "crop_x", ":", "crop_x", "+", "image_size", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.KVWriter.writekvs": [[27, 29], ["None"], "methods", ["None"], ["    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.SeqWriter.writeseq": [[32, 34], ["None"], "methods", ["None"], ["    ", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat.__init__": [[37, 47], ["isinstance", "open", "hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename_or_file", ")", ":", "\n", "        ", "if", "isinstance", "(", "filename_or_file", ",", "str", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "filename_or_file", ",", "\"wt\"", ")", "\n", "self", ".", "own_file", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "hasattr", "(", "filename_or_file", ",", "\"read\"", ")", ",", "(", "\n", "\"expected file or str, got %s\"", "%", "filename_or_file", "\n", ")", "\n", "self", ".", "file", "=", "filename_or_file", "\n", "self", ".", "own_file", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat.writekvs": [[48, 79], ["sorted", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "hasattr", "logger.HumanOutputFormat._truncate", "len", "print", "max", "max", "key2str.items", "lines.append", "str", "map", "map", "logger.HumanOutputFormat._truncate", "key2str.keys", "key2str.values", "kv[].lower", "len", "len"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat._truncate"], ["", "", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "val", ",", "\"__float__\"", ")", ":", "\n", "                ", "valstr", "=", "\"%-8.3g\"", "%", "val", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "if", "len", "(", "key2str", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"WARNING: tried to write empty key-value dict\"", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "", "dashes", "=", "\"-\"", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "\n", "\"| %s%s | %s%s |\"", "\n", "%", "(", "key", ",", "\" \"", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "val", ",", "\" \"", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ")", "\n", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat._truncate": [[80, 83], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "maxlen", "=", "30", "\n", "return", "s", "[", ":", "maxlen", "-", "3", "]", "+", "\"...\"", "if", "len", "(", "s", ")", ">", "maxlen", "else", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat.writeseq": [[84, 92], ["list", "enumerate", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.write", "len"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "seq", "=", "list", "(", "seq", ")", "\n", "for", "(", "i", ",", "elem", ")", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "elem", ")", "\n", "if", "i", "<", "len", "(", "seq", ")", "-", "1", ":", "# add space unless this is the last one", "\n", "                ", "self", ".", "file", ".", "write", "(", "\" \"", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat.close": [[93, 96], ["logger.HumanOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "own_file", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.JSONOutputFormat.__init__": [[99, 101], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.JSONOutputFormat.writekvs": [[102, 108], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "float", "json.dumps"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"dtype\"", ")", ":", "\n", "                ", "kvs", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.JSONOutputFormat.close": [[109, 111], ["logger.JSONOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.CSVOutputFormat.__init__": [[114, 118], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "\"w+t\"", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "sep", "=", "\",\"", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.CSVOutputFormat.writekvs": [[119, 145], ["list", "list.sort", "enumerate", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.flush", "logger.CSVOutputFormat.keys.extend", "logger.CSVOutputFormat.file.seek", "logger.CSVOutputFormat.file.readlines", "logger.CSVOutputFormat.file.seek", "enumerate", "logger.CSVOutputFormat.file.write", "kvs.get", "kvs.keys", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "str", "len"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Add our current row to the history", "\n", "        ", "extra_keys", "=", "list", "(", "kvs", ".", "keys", "(", ")", "-", "self", ".", "keys", ")", "\n", "extra_keys", ".", "sort", "(", ")", "\n", "if", "extra_keys", ":", "\n", "            ", "self", ".", "keys", ".", "extend", "(", "extra_keys", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "lines", "=", "self", ".", "file", ".", "readlines", "(", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "                ", "if", "i", ">", "0", ":", "\n", "                    ", "self", ".", "file", ".", "write", "(", "\",\"", ")", "\n", "", "self", ".", "file", ".", "write", "(", "k", ")", "\n", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "sep", "*", "len", "(", "extra_keys", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "\",\"", ")", "\n", "", "v", "=", "kvs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.CSVOutputFormat.close": [[146, 148], ["logger.CSVOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.TensorBoardOutputFormat.__init__": [[155, 170], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "step", "=", "1", "\n", "prefix", "=", "\"events\"", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "dir", ")", ",", "prefix", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", "import", "pywrap_tensorflow", "\n", "from", "tensorflow", ".", "core", ".", "util", "import", "event_pb2", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "compat", "\n", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "event_pb2", "=", "event_pb2", "\n", "self", ".", "pywrap_tensorflow", "=", "pywrap_tensorflow", "\n", "self", ".", "writer", "=", "pywrap_tensorflow", ".", "EventsWriter", "(", "compat", ".", "as_bytes", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.TensorBoardOutputFormat.writekvs": [[171, 184], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "def", "summary_val", "(", "k", ",", "v", ")", ":", "\n", "            ", "kwargs", "=", "{", "\"tag\"", ":", "k", ",", "\"simple_value\"", ":", "float", "(", "v", ")", "}", "\n", "return", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "**", "kwargs", ")", "\n", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "summary_val", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "event", "=", "self", ".", "event_pb2", ".", "Event", "(", "wall_time", "=", "time", ".", "time", "(", ")", ",", "summary", "=", "summary", ")", "\n", "event", ".", "step", "=", "(", "\n", "self", ".", "step", "\n", ")", "# is there any reason why you'd want to specify the step?", "\n", "self", ".", "writer", ".", "WriteEvent", "(", "event", ")", "\n", "self", ".", "writer", ".", "Flush", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.TensorBoardOutputFormat.close": [[185, 189], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "Close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.__init__": [[337, 344], ["collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ",", "output_formats", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "name2val", "=", "defaultdict", "(", "float", ")", "# values this iteration", "\n", "self", ".", "name2cnt", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "self", ".", "comm", "=", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.logkv": [[347, 349], ["None"], "methods", ["None"], ["", "def", "logkv", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "name2val", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.logkv_mean": [[350, 354], ["None"], "methods", ["None"], ["", "def", "logkv_mean", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "oldval", ",", "cnt", "=", "self", ".", "name2val", "[", "key", "]", ",", "self", ".", "name2cnt", "[", "key", "]", "\n", "self", ".", "name2val", "[", "key", "]", "=", "oldval", "*", "cnt", "/", "(", "cnt", "+", "1", ")", "+", "val", "/", "(", "cnt", "+", "1", ")", "\n", "self", ".", "name2cnt", "[", "key", "]", "=", "cnt", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.dumpkvs": [[355, 375], ["mpi_weighted_mean.copy", "logger.Logger.name2val.clear", "logger.Logger.name2cnt.clear", "logger.mpi_weighted_mean", "isinstance", "fmt.writekvs", "logger.Logger.name2cnt.get", "logger.Logger.name2val.items"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.mpi_weighted_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.TensorBoardOutputFormat.writekvs"], ["", "def", "dumpkvs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", "is", "None", ":", "\n", "            ", "d", "=", "self", ".", "name2val", "\n", "", "else", ":", "\n", "            ", "d", "=", "mpi_weighted_mean", "(", "\n", "self", ".", "comm", ",", "\n", "{", "\n", "name", ":", "(", "val", ",", "self", ".", "name2cnt", ".", "get", "(", "name", ",", "1", ")", ")", "\n", "for", "(", "name", ",", "val", ")", "in", "self", ".", "name2val", ".", "items", "(", ")", "\n", "}", ",", "\n", ")", "\n", "if", "self", ".", "comm", ".", "rank", "!=", "0", ":", "\n", "                ", "d", "[", "\"dummy\"", "]", "=", "1", "# so we don't get a warning about empty dict", "\n", "", "", "out", "=", "d", ".", "copy", "(", ")", "# Return the dict for unit testing purposes", "\n", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "KVWriter", ")", ":", "\n", "                ", "fmt", ".", "writekvs", "(", "d", ")", "\n", "", "", "self", ".", "name2val", ".", "clear", "(", ")", "\n", "self", ".", "name2cnt", ".", "clear", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.log": [[376, 379], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.set_level": [[382, 384], ["None"], "methods", ["None"], ["", "", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.set_comm": [[385, 387], ["None"], "methods", ["None"], ["", "def", "set_comm", "(", "self", ",", "comm", ")", ":", "\n", "        ", "self", ".", "comm", "=", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.get_dir": [[388, 390], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close": [[391, 394], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger._do_log": [[397, 401], ["isinstance", "fmt.writeseq", "map"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.HumanOutputFormat.writeseq"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "SeqWriter", ")", ":", "\n", "                ", "fmt", ".", "writeseq", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.make_output_format": [[191, 205], ["os.makedirs", "os.makedirs", "logger.HumanOutputFormat", "logger.HumanOutputFormat", "os.join", "logger.JSONOutputFormat", "os.join", "logger.CSVOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "format", ",", "ev_dir", ",", "log_suffix", "=", "\"\"", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ev_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "format", "==", "\"stdout\"", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "format", "==", "\"log\"", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "\"log%s.txt\"", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "\"json\"", ":", "\n", "        ", "return", "JSONOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "\"progress%s.json\"", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "\"csv\"", ":", "\n", "        ", "return", "CSVOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "\"progress%s.csv\"", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "\"tensorboard\"", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "\"tb%s\"", "%", "log_suffix", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown format specified: %s\"", "%", "(", "format", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv": [[212, 219], ["get_current().logkv", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "", "def", "logkv", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    If called many times, last value will be used.\n    \"\"\"", "\n", "get_current", "(", ")", ".", "logkv", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean": [[221, 226], ["get_current().logkv_mean", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "def", "logkv_mean", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    The same as logkv(), but if called many times, values averaged.\n    \"\"\"", "\n", "get_current", "(", ")", ".", "logkv_mean", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkvs": [[228, 234], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv"], ["", "def", "logkvs", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Log a dictionary of key-value pairs\n    \"\"\"", "\n", "for", "(", "k", ",", "v", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "logkv", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.dumpkvs": [[236, 241], ["get_current().dumpkvs", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.dumpkvs", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "", "def", "dumpkvs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n    \"\"\"", "\n", "return", "get_current", "(", ")", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.getkvs": [[243, 245], ["logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "def", "getkvs", "(", ")", ":", "\n", "    ", "return", "get_current", "(", ")", ".", "name2val", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log": [[247, 252], ["get_current().log", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "def", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Write the sequence of args, with no separators, to the console and output files (if you've configured an output file).\n    \"\"\"", "\n", "get_current", "(", ")", ".", "log", "(", "*", "args", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.debug": [[254, 256], ["logger.log"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.info": [[258, 260], ["logger.log"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.warn": [[262, 264], ["logger.log"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "warn", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.error": [[266, 268], ["logger.log"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.set_level": [[270, 275], ["get_current().set_level", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.set_level", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "get_current", "(", ")", ".", "set_level", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.set_comm": [[277, 279], ["get_current().set_comm", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.set_comm", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "def", "set_comm", "(", "comm", ")", ":", "\n", "    ", "get_current", "(", ")", ".", "set_comm", "(", "comm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_dir": [[281, 287], ["get_current().get_dir", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_dir", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["", "def", "get_dir", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get directory that log files are being written to.\n    will be None if there is no output directory (i.e., if you didn't call start)\n    \"\"\"", "\n", "return", "get_current", "(", ")", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.profile_kv": [[293, 301], ["time.time", "time.time", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current"], ["@", "contextmanager", "\n", "def", "profile_kv", "(", "scopename", ")", ":", "\n", "    ", "logkey", "=", "\"wait_\"", "+", "scopename", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "get_current", "(", ")", ".", "name2val", "[", "logkey", "]", "+=", "time", ".", "time", "(", ")", "-", "tstart", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.profile": [[303, 318], ["logger.profile_kv", "func"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.profile_kv"], ["", "", "def", "profile", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    Usage:\n    @profile(\"my_func\")\n    def my_func(): code\n    \"\"\"", "\n", "\n", "def", "decorator_with_name", "(", "func", ")", ":", "\n", "        ", "def", "func_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "with", "profile_kv", "(", "n", ")", ":", "\n", "                ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "func_wrapper", "\n", "\n", "", "return", "decorator_with_name", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_current": [[325, 330], ["logger._configure_default_logger"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger._configure_default_logger"], ["", "def", "get_current", "(", ")", ":", "\n", "    ", "if", "Logger", ".", "CURRENT", "is", "None", ":", "\n", "        ", "_configure_default_logger", "(", ")", "\n", "\n", "", "return", "Logger", ".", "CURRENT", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_rank_without_mpi_import": [[403, 410], ["int"], "function", ["None"], ["", "", "", "", "def", "get_rank_without_mpi_import", "(", ")", ":", "\n", "# check environment variables here instead of importing mpi4py", "\n", "# to avoid calling MPI_Init() when this module is imported", "\n", "    ", "for", "varname", "in", "[", "\"PMI_RANK\"", ",", "\"OMPI_COMM_WORLD_RANK\"", "]", ":", "\n", "        ", "if", "varname", "in", "os", ".", "environ", ":", "\n", "            ", "return", "int", "(", "os", ".", "environ", "[", "varname", "]", ")", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.mpi_weighted_mean": [[412, 440], ["comm.gather", "collections.defaultdict", "collections.defaultdict", "n2vc.items", "float", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.warn"], ["", "def", "mpi_weighted_mean", "(", "comm", ",", "local_name2valcount", ")", ":", "\n", "    ", "\"\"\"\n    Copied from: https://github.com/openai/baselines/blob/ea25b9e8b234e6ee1bca43083f8f3cf974143998/baselines/common/mpi_util.py#L110\n    Perform a weighted average over dicts that are each on a different node\n    Input: local_name2valcount: dict mapping key -> (value, count)\n    Returns: key -> mean\n    \"\"\"", "\n", "all_name2valcount", "=", "comm", ".", "gather", "(", "local_name2valcount", ")", "\n", "if", "comm", ".", "rank", "==", "0", ":", "\n", "        ", "name2sum", "=", "defaultdict", "(", "float", ")", "\n", "name2count", "=", "defaultdict", "(", "float", ")", "\n", "for", "n2vc", "in", "all_name2valcount", ":", "\n", "            ", "for", "(", "name", ",", "(", "val", ",", "count", ")", ")", "in", "n2vc", ".", "items", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "val", "=", "float", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "if", "comm", ".", "rank", "==", "0", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\n", "\"WARNING: tried to compute mean on non-float {}={}\"", ".", "format", "(", "\n", "name", ",", "val", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                    ", "name2sum", "[", "name", "]", "+=", "val", "*", "count", "\n", "name2count", "[", "name", "]", "+=", "count", "\n", "", "", "", "return", "{", "name", ":", "name2sum", "[", "name", "]", "/", "name2count", "[", "name", "]", "for", "name", "in", "name2sum", "}", "\n", "", "else", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.configure": [[442, 472], ["isinstance", "os.path.expanduser", "os.path.expanduser", "os.makedirs", "os.makedirs", "logger.get_rank_without_mpi_import", "filter", "logger.Logger", "os.getenv", "os.getenv", "os.join", "os.path.expanduser", "os.path.expanduser", "logger.make_output_format", "logger.log", "tempfile.gettempdir", "datetime.datetime.now().strftime", "os.getenv().split", "os.getenv().split", "os.getenv().split", "os.getenv().split", "datetime.datetime.now", "os.getenv", "os.getenv", "os.getenv", "os.getenv"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.get_rank_without_mpi_import", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.make_output_format", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "", "def", "configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ",", "comm", "=", "None", ",", "log_suffix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"\n    If comm is provided, average all numerical stats across that comm\n    \"\"\"", "\n", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "os", ".", "getenv", "(", "\"OPENAI_LOGDIR\"", ")", "\n", "", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "osp", ".", "join", "(", "\n", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ",", "\n", ")", "\n", "", "assert", "isinstance", "(", "dir", ",", "str", ")", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "expanduser", "(", "dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "rank", "=", "get_rank_without_mpi_import", "(", ")", "\n", "if", "rank", ">", "0", ":", "\n", "        ", "log_suffix", "=", "log_suffix", "+", "\"-rank%03i\"", "%", "rank", "\n", "\n", "", "if", "format_strs", "is", "None", ":", "\n", "        ", "if", "rank", "==", "0", ":", "\n", "            ", "format_strs", "=", "os", ".", "getenv", "(", "\"OPENAI_LOG_FORMAT\"", ",", "\"stdout,log,csv\"", ")", ".", "split", "(", "\",\"", ")", "\n", "", "else", ":", "\n", "            ", "format_strs", "=", "os", ".", "getenv", "(", "\"OPENAI_LOG_FORMAT_MPI\"", ",", "\"log\"", ")", ".", "split", "(", "\",\"", ")", "\n", "", "", "format_strs", "=", "filter", "(", "None", ",", "format_strs", ")", "\n", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "dir", ",", "log_suffix", ")", "for", "f", "in", "format_strs", "]", "\n", "\n", "Logger", ".", "CURRENT", "=", "Logger", "(", "dir", "=", "dir", ",", "output_formats", "=", "output_formats", ",", "comm", "=", "comm", ")", "\n", "if", "output_formats", ":", "\n", "        ", "log", "(", "\"Logging to %s\"", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger._configure_default_logger": [[474, 477], ["logger.configure"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.configure"], ["", "", "def", "_configure_default_logger", "(", ")", ":", "\n", "    ", "configure", "(", ")", "\n", "Logger", ".", "DEFAULT", "=", "Logger", ".", "CURRENT", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.reset": [[479, 484], ["Logger.CURRENT.close", "logger.log"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "Logger", ".", "CURRENT", "is", "not", "Logger", ".", "DEFAULT", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "Logger", ".", "DEFAULT", "\n", "log", "(", "\"Reset logger\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.scoped_configure": [[486, 495], ["logger.configure", "Logger.CURRENT.close"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.configure", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.Logger.close"], ["", "", "@", "contextmanager", "\n", "def", "scoped_configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ",", "comm", "=", "None", ")", ":", "\n", "    ", "prevlogger", "=", "Logger", ".", "CURRENT", "\n", "configure", "(", "dir", "=", "dir", ",", "format_strs", "=", "format_strs", ",", "comm", "=", "comm", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "prevlogger", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.SiLU.forward": [[13, 15], ["torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "th", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.GroupNorm32.forward": [[18, 20], ["super().forward().type", "super().forward", "x.float"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "x", ".", "float", "(", ")", ")", ".", "type", "(", "x", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.CheckpointFunction.forward": [[143, 151], ["list", "list", "torch.no_grad", "torch.no_grad", "ctx.run_function"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "run_function", ",", "length", ",", "*", "args", ")", ":", "\n", "        ", "ctx", ".", "run_function", "=", "run_function", "\n", "ctx", ".", "input_tensors", "=", "list", "(", "args", "[", ":", "length", "]", ")", "\n", "ctx", ".", "input_params", "=", "list", "(", "args", "[", "length", ":", "]", ")", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_tensors", "=", "ctx", ".", "run_function", "(", "*", "ctx", ".", "input_tensors", ")", "\n", "", "return", "output_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.CheckpointFunction.backward": [[152, 171], ["torch.autograd.grad", "torch.autograd.grad", "x.detach().requires_grad_", "torch.enable_grad", "torch.enable_grad", "ctx.run_function", "x.view_as", "x.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "output_grads", ")", ":", "\n", "        ", "ctx", ".", "input_tensors", "=", "[", "x", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "for", "x", "in", "ctx", ".", "input_tensors", "]", "\n", "with", "th", ".", "enable_grad", "(", ")", ":", "\n", "# Fixes a bug where the first op in run_function modifies the", "\n", "# Tensor storage in place, which is not allowed for detach()'d", "\n", "# Tensors.", "\n", "            ", "shallow_copies", "=", "[", "x", ".", "view_as", "(", "x", ")", "for", "x", "in", "ctx", ".", "input_tensors", "]", "\n", "output_tensors", "=", "ctx", ".", "run_function", "(", "*", "shallow_copies", ")", "\n", "", "input_grads", "=", "th", ".", "autograd", ".", "grad", "(", "\n", "output_tensors", ",", "\n", "ctx", ".", "input_tensors", "+", "ctx", ".", "input_params", ",", "\n", "output_grads", ",", "\n", "allow_unused", "=", "True", ",", "\n", ")", "\n", "del", "ctx", ".", "input_tensors", "\n", "del", "ctx", ".", "input_params", "\n", "del", "output_tensors", "\n", "return", "(", "None", ",", "None", ")", "+", "input_grads", "\n", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd": [[22, 33], ["ValueError", "torch.Conv1d", "torch.Conv2d", "torch.Conv3d"], "function", ["None"], ["", "", "def", "conv_nd", "(", "dims", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Create a 1D, 2D, or 3D convolution module.\n    \"\"\"", "\n", "if", "dims", "==", "1", ":", "\n", "        ", "return", "nn", ".", "Conv1d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "dims", "==", "2", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "dims", "==", "3", ":", "\n", "        ", "return", "nn", ".", "Conv3d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "f\"unsupported dimensions: {dims}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear": [[35, 40], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Create a linear module.\n    \"\"\"", "\n", "return", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.avg_pool_nd": [[42, 53], ["ValueError", "torch.AvgPool1d", "torch.AvgPool2d", "torch.AvgPool3d"], "function", ["None"], ["", "def", "avg_pool_nd", "(", "dims", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Create a 1D, 2D, or 3D average pooling module.\n    \"\"\"", "\n", "if", "dims", "==", "1", ":", "\n", "        ", "return", "nn", ".", "AvgPool1d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "dims", "==", "2", ":", "\n", "        ", "return", "nn", ".", "AvgPool2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "dims", "==", "3", ":", "\n", "        ", "return", "nn", ".", "AvgPool3d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "f\"unsupported dimensions: {dims}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.update_ema": [[55, 66], ["zip", "targ.detach().mul_().add_", "targ.detach().mul_", "targ.detach"], "function", ["None"], ["", "def", "update_ema", "(", "target_params", ",", "source_params", ",", "rate", "=", "0.99", ")", ":", "\n", "    ", "\"\"\"\n    Update target parameters to be closer to those of source parameters using\n    an exponential moving average.\n\n    :param target_params: the target parameter sequence.\n    :param source_params: the source parameter sequence.\n    :param rate: the EMA rate (closer to 1 means slower).\n    \"\"\"", "\n", "for", "targ", ",", "src", "in", "zip", "(", "target_params", ",", "source_params", ")", ":", "\n", "        ", "targ", ".", "detach", "(", ")", ".", "mul_", "(", "rate", ")", ".", "add_", "(", "src", ",", "alpha", "=", "1", "-", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module": [[68, 75], ["module.parameters", "p.detach().zero_", "p.detach"], "function", ["None"], ["", "", "def", "zero_module", "(", "module", ")", ":", "\n", "    ", "\"\"\"\n    Zero out the parameters of a module and return it.\n    \"\"\"", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "detach", "(", ")", ".", "zero_", "(", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.scale_module": [[77, 84], ["module.parameters", "p.detach().mul_", "p.detach"], "function", ["None"], ["", "def", "scale_module", "(", "module", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    Scale the parameters of a module and return it.\n    \"\"\"", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "detach", "(", ")", ".", "mul_", "(", "scale", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.mean_flat": [[86, 91], ["tensor.mean", "list", "range", "len"], "function", ["None"], ["", "def", "mean_flat", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Take the mean over all non-batch dimensions.\n    \"\"\"", "\n", "return", "tensor", ".", "mean", "(", "dim", "=", "list", "(", "range", "(", "1", ",", "len", "(", "tensor", ".", "shape", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization": [[93, 101], ["nn.GroupNorm32"], "function", ["None"], ["", "def", "normalization", "(", "channels", ")", ":", "\n", "    ", "\"\"\"\n    Make a standard normalization layer.\n\n    :param channels: number of input channels.\n    :return: an nn.Module for normalization.\n    \"\"\"", "\n", "return", "GroupNorm32", "(", "32", ",", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.timestep_embedding": [[103, 122], ["torch.exp().to", "torch.cat", "timesteps[].float", "torch.cat", "torch.exp", "torch.cos", "torch.sin", "torch.zeros_like", "torch.arange", "math.log"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "timestep_embedding", "(", "timesteps", ",", "dim", ",", "max_period", "=", "10000", ")", ":", "\n", "    ", "\"\"\"\n    Create sinusoidal timestep embeddings.\n\n    :param timesteps: a 1-D Tensor of N indices, one per batch element.\n                      These may be fractional.\n    :param dim: the dimension of the output.\n    :param max_period: controls the minimum frequency of the embeddings.\n    :return: an [N x dim] Tensor of positional embeddings.\n    \"\"\"", "\n", "half", "=", "dim", "//", "2", "\n", "freqs", "=", "th", ".", "exp", "(", "\n", "-", "math", ".", "log", "(", "max_period", ")", "*", "th", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "half", ",", "dtype", "=", "th", ".", "float32", ")", "/", "half", "\n", ")", ".", "to", "(", "device", "=", "timesteps", ".", "device", ")", "\n", "args", "=", "timesteps", "[", ":", ",", "None", "]", ".", "float", "(", ")", "*", "freqs", "[", "None", "]", "\n", "embedding", "=", "th", ".", "cat", "(", "[", "th", ".", "cos", "(", "args", ")", ",", "th", ".", "sin", "(", "args", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "dim", "%", "2", ":", "\n", "        ", "embedding", "=", "th", ".", "cat", "(", "[", "embedding", ",", "th", ".", "zeros_like", "(", "embedding", "[", ":", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.checkpoint": [[124, 140], ["CheckpointFunction.apply", "func", "tuple", "tuple", "len"], "function", ["None"], ["", "def", "checkpoint", "(", "func", ",", "inputs", ",", "params", ",", "flag", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate a function without caching intermediate activations, allowing for\n    reduced memory at the expense of extra compute in the backward pass.\n\n    :param func: the function to evaluate.\n    :param inputs: the argument sequence to pass to `func`.\n    :param params: a sequence of parameters `func` depends on but does not\n                   explicitly take as arguments.\n    :param flag: if False, disable gradient checkpointing.\n    \"\"\"", "\n", "if", "flag", ":", "\n", "        ", "args", "=", "tuple", "(", "inputs", ")", "+", "tuple", "(", "params", ")", "\n", "return", "CheckpointFunction", ".", "apply", "(", "func", ",", "len", "(", "inputs", ")", ",", "*", "args", ")", "\n", "", "else", ":", "\n", "        ", "return", "func", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.__init__": [[168, 191], ["list", "fp16_util.MixedPrecisionTrainer.model.parameters", "fp16_util.get_param_groups_and_shapes", "fp16_util.make_master_params", "fp16_util.MixedPrecisionTrainer.model.convert_to_fp16", "fp16_util.MixedPrecisionTrainer.model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.get_param_groups_and_shapes", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.make_master_params", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.convert_to_fp16"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "model", ",", "\n", "use_fp16", "=", "False", ",", "\n", "fp16_scale_growth", "=", "1e-3", ",", "\n", "initial_lg_loss_scale", "=", "INITIAL_LOG_LOSS_SCALE", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "fp16_scale_growth", "=", "fp16_scale_growth", "\n", "\n", "self", ".", "model_params", "=", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "master_params", "=", "self", ".", "model_params", "\n", "self", ".", "param_groups_and_shapes", "=", "None", "\n", "self", ".", "lg_loss_scale", "=", "initial_lg_loss_scale", "\n", "\n", "if", "self", ".", "use_fp16", ":", "\n", "            ", "self", ".", "param_groups_and_shapes", "=", "get_param_groups_and_shapes", "(", "\n", "self", ".", "model", ".", "named_parameters", "(", ")", "\n", ")", "\n", "self", ".", "master_params", "=", "make_master_params", "(", "self", ".", "param_groups_and_shapes", ")", "\n", "self", ".", "model", ".", "convert_to_fp16", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.zero_grad": [[192, 194], ["fp16_util.MixedPrecisionTrainer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.zero_grad"], ["", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "zero_grad", "(", "self", ".", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.backward": [[195, 201], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.backward"], ["", "def", "backward", "(", "self", ",", "loss", ":", "th", ".", "Tensor", ")", ":", "\n", "        ", "if", "self", ".", "use_fp16", ":", "\n", "            ", "loss_scale", "=", "2", "**", "self", ".", "lg_loss_scale", "\n", "(", "loss", "*", "loss_scale", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.optimize": [[202, 207], ["fp16_util.MixedPrecisionTrainer._optimize_fp16", "fp16_util.MixedPrecisionTrainer._optimize_normal"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._optimize_fp16", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._optimize_normal"], ["", "", "def", "optimize", "(", "self", ",", "opt", ":", "th", ".", "optim", ".", "Optimizer", ")", ":", "\n", "        ", "if", "self", ".", "use_fp16", ":", "\n", "            ", "return", "self", ".", "_optimize_fp16", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_optimize_normal", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._optimize_fp16": [[208, 227], ["logger.logkv_mean", "fp16_util.model_grads_to_master_grads", "fp16_util.MixedPrecisionTrainer._compute_norms", "fp16_util.check_overflow", "logger.logkv_mean", "logger.logkv_mean", "fp16_util.MixedPrecisionTrainer.master_params[].grad.mul_", "opt.step", "fp16_util.zero_master_grads", "fp16_util.master_params_to_model_params", "logger.log", "fp16_util.zero_master_grads"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.model_grads_to_master_grads", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._compute_norms", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.check_overflow", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.zero_master_grads", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.master_params_to_model_params", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.zero_master_grads"], ["", "", "def", "_optimize_fp16", "(", "self", ",", "opt", ":", "th", ".", "optim", ".", "Optimizer", ")", ":", "\n", "        ", "logger", ".", "logkv_mean", "(", "\"lg_loss_scale\"", ",", "self", ".", "lg_loss_scale", ")", "\n", "model_grads_to_master_grads", "(", "self", ".", "param_groups_and_shapes", ",", "self", ".", "master_params", ")", "\n", "grad_norm", ",", "param_norm", "=", "self", ".", "_compute_norms", "(", "grad_scale", "=", "2", "**", "self", ".", "lg_loss_scale", ")", "\n", "if", "check_overflow", "(", "grad_norm", ")", ":", "\n", "            ", "self", ".", "lg_loss_scale", "-=", "1", "\n", "logger", ".", "log", "(", "f\"Found NaN, decreased lg_loss_scale to {self.lg_loss_scale}\"", ")", "\n", "zero_master_grads", "(", "self", ".", "master_params", ")", "\n", "return", "False", "\n", "\n", "", "logger", ".", "logkv_mean", "(", "\"grad_norm\"", ",", "grad_norm", ")", "\n", "logger", ".", "logkv_mean", "(", "\"param_norm\"", ",", "param_norm", ")", "\n", "\n", "self", ".", "master_params", "[", "0", "]", ".", "grad", ".", "mul_", "(", "1.0", "/", "(", "2", "**", "self", ".", "lg_loss_scale", ")", ")", "\n", "opt", ".", "step", "(", ")", "\n", "zero_master_grads", "(", "self", ".", "master_params", ")", "\n", "master_params_to_model_params", "(", "self", ".", "param_groups_and_shapes", ",", "self", ".", "master_params", ")", "\n", "self", ".", "lg_loss_scale", "+=", "self", ".", "fp16_scale_growth", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._optimize_normal": [[228, 234], ["fp16_util.MixedPrecisionTrainer._compute_norms", "logger.logkv_mean", "logger.logkv_mean", "opt.step"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._compute_norms", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.logkv_mean"], ["", "def", "_optimize_normal", "(", "self", ",", "opt", ":", "th", ".", "optim", ".", "Optimizer", ")", ":", "\n", "        ", "grad_norm", ",", "param_norm", "=", "self", ".", "_compute_norms", "(", ")", "\n", "logger", ".", "logkv_mean", "(", "\"grad_norm\"", ",", "grad_norm", ")", "\n", "logger", ".", "logkv_mean", "(", "\"param_norm\"", ",", "param_norm", ")", "\n", "opt", ".", "step", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer._compute_norms": [[235, 244], ["numpy.sqrt", "torch.no_grad", "torch.no_grad", "numpy.sqrt", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "_compute_norms", "(", "self", ",", "grad_scale", "=", "1.0", ")", ":", "\n", "        ", "grad_norm", "=", "0.0", "\n", "param_norm", "=", "0.0", "\n", "for", "p", "in", "self", ".", "master_params", ":", "\n", "            ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "                ", "param_norm", "+=", "th", ".", "norm", "(", "p", ",", "p", "=", "2", ",", "dtype", "=", "th", ".", "float32", ")", ".", "item", "(", ")", "**", "2", "\n", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "grad_norm", "+=", "th", ".", "norm", "(", "p", ".", "grad", ",", "p", "=", "2", ",", "dtype", "=", "th", ".", "float32", ")", ".", "item", "(", ")", "**", "2", "\n", "", "", "", "return", "np", ".", "sqrt", "(", "grad_norm", ")", "/", "grad_scale", ",", "np", ".", "sqrt", "(", "param_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.master_params_to_state_dict": [[245, 248], ["fp16_util.MixedPrecisionTrainer.master_params_to_state_dict"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.master_params_to_state_dict"], ["", "def", "master_params_to_state_dict", "(", "self", ",", "master_params", ")", ":", "\n", "        ", "return", "master_params_to_state_dict", "(", "\n", "self", ".", "model", ",", "self", ".", "param_groups_and_shapes", ",", "master_params", ",", "self", ".", "use_fp16", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.MixedPrecisionTrainer.state_dict_to_master_params": [[250, 252], ["fp16_util.MixedPrecisionTrainer.state_dict_to_master_params"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.state_dict_to_master_params"], ["", "def", "state_dict_to_master_params", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "return", "state_dict_to_master_params", "(", "self", ".", "model", ",", "state_dict", ",", "self", ".", "use_fp16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.convert_module_to_f16": [[15, 23], ["isinstance", "l.weight.data.half", "l.bias.data.half"], "function", ["None"], ["def", "convert_module_to_f16", "(", "l", ")", ":", "\n", "    ", "\"\"\"\n    Convert primitive modules to float16.\n    \"\"\"", "\n", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "        ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "half", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "            ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "half", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.convert_module_to_f32": [[25, 33], ["isinstance", "l.weight.data.float", "l.bias.data.float"], "function", ["None"], ["", "", "", "def", "convert_module_to_f32", "(", "l", ")", ":", "\n", "    ", "\"\"\"\n    Convert primitive modules to float32, undoing convert_module_to_f16().\n    \"\"\"", "\n", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "        ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "float", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "            ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.make_master_params": [[35, 50], ["torch.Parameter", "master_params.append", "torch._utils._flatten_dense_tensors().view", "torch._utils._flatten_dense_tensors", "param.detach().float", "param.detach"], "function", ["None"], ["", "", "", "def", "make_master_params", "(", "param_groups_and_shapes", ")", ":", "\n", "    ", "\"\"\"\n    Copy model parameters into a (differently-shaped) list of full-precision\n    parameters.\n    \"\"\"", "\n", "master_params", "=", "[", "]", "\n", "for", "param_group", ",", "shape", "in", "param_groups_and_shapes", ":", "\n", "        ", "master_param", "=", "nn", ".", "Parameter", "(", "\n", "_flatten_dense_tensors", "(", "\n", "[", "param", ".", "detach", "(", ")", ".", "float", "(", ")", "for", "(", "_", ",", "param", ")", "in", "param_group", "]", "\n", ")", ".", "view", "(", "shape", ")", "\n", ")", "\n", "master_param", ".", "requires_grad", "=", "True", "\n", "master_params", ".", "append", "(", "master_param", ")", "\n", "", "return", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.model_grads_to_master_grads": [[52, 63], ["zip", "torch._utils._flatten_dense_tensors().view", "torch._utils._flatten_dense_tensors", "fp16_util.param_grad_or_zeros"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.param_grad_or_zeros"], ["", "def", "model_grads_to_master_grads", "(", "param_groups_and_shapes", ",", "master_params", ")", ":", "\n", "    ", "\"\"\"\n    Copy the gradients from the model parameters into the master parameters\n    from make_master_params().\n    \"\"\"", "\n", "for", "master_param", ",", "(", "param_group", ",", "shape", ")", "in", "zip", "(", "\n", "master_params", ",", "param_groups_and_shapes", "\n", ")", ":", "\n", "        ", "master_param", ".", "grad", "=", "_flatten_dense_tensors", "(", "\n", "[", "param_grad_or_zeros", "(", "param", ")", "for", "(", "_", ",", "param", ")", "in", "param_group", "]", "\n", ")", ".", "view", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.master_params_to_model_params": [[65, 76], ["zip", "zip", "fp16_util.unflatten_master_params", "param.detach().copy_", "master_param.view", "param.detach"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.unflatten_master_params"], ["", "", "def", "master_params_to_model_params", "(", "param_groups_and_shapes", ",", "master_params", ")", ":", "\n", "    ", "\"\"\"\n    Copy the master parameter data back into the model parameters.\n    \"\"\"", "\n", "# Without copying to a list, if a generator is passed, this will", "\n", "# silently not copy any parameters.", "\n", "for", "master_param", ",", "(", "param_group", ",", "_", ")", "in", "zip", "(", "master_params", ",", "param_groups_and_shapes", ")", ":", "\n", "        ", "for", "(", "_", ",", "param", ")", ",", "unflat_master_param", "in", "zip", "(", "\n", "param_group", ",", "unflatten_master_params", "(", "param_group", ",", "master_param", ".", "view", "(", "-", "1", ")", ")", "\n", ")", ":", "\n", "            ", "param", ".", "detach", "(", ")", ".", "copy_", "(", "unflat_master_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.unflatten_master_params": [[78, 80], ["torch._utils._unflatten_dense_tensors"], "function", ["None"], ["", "", "", "def", "unflatten_master_params", "(", "param_group", ",", "master_param", ")", ":", "\n", "    ", "return", "_unflatten_dense_tensors", "(", "master_param", ",", "[", "param", "for", "(", "_", ",", "param", ")", "in", "param_group", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.get_param_groups_and_shapes": [[82, 93], ["list"], "function", ["None"], ["", "def", "get_param_groups_and_shapes", "(", "named_model_params", ")", ":", "\n", "    ", "named_model_params", "=", "list", "(", "named_model_params", ")", "\n", "scalar_vector_named_params", "=", "(", "\n", "[", "(", "n", ",", "p", ")", "for", "(", "n", ",", "p", ")", "in", "named_model_params", "if", "p", ".", "ndim", "<=", "1", "]", ",", "\n", "(", "-", "1", ")", ",", "\n", ")", "\n", "matrix_named_params", "=", "(", "\n", "[", "(", "n", ",", "p", ")", "for", "(", "n", ",", "p", ")", "in", "named_model_params", "if", "p", ".", "ndim", ">", "1", "]", ",", "\n", "(", "1", ",", "-", "1", ")", ",", "\n", ")", "\n", "return", "[", "scalar_vector_named_params", ",", "matrix_named_params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.master_params_to_state_dict": [[115, 134], ["model.state_dict", "zip", "model.state_dict", "enumerate", "zip", "model.named_parameters", "fp16_util.unflatten_master_params", "master_param.view"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.unflatten_master_params"], ["", "def", "master_params_to_state_dict", "(", "\n", "model", ",", "param_groups_and_shapes", ",", "master_params", ",", "use_fp16", "\n", ")", ":", "\n", "    ", "if", "use_fp16", ":", "\n", "        ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "master_param", ",", "(", "param_group", ",", "_", ")", "in", "zip", "(", "\n", "master_params", ",", "param_groups_and_shapes", "\n", ")", ":", "\n", "            ", "for", "(", "name", ",", "_", ")", ",", "unflat_master_param", "in", "zip", "(", "\n", "param_group", ",", "unflatten_master_params", "(", "param_group", ",", "master_param", ".", "view", "(", "-", "1", ")", ")", "\n", ")", ":", "\n", "                ", "if", "name", "in", "state_dict", ":", "\n", "                    ", "state_dict", "[", "name", "]", "=", "unflat_master_param", "\n", "", "", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "i", ",", "(", "name", ",", "_value", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "name", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "name", "]", "=", "master_params", "[", "i", "]", "\n", "", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.state_dict_to_master_params": [[135, 145], ["fp16_util.get_param_groups_and_shapes", "fp16_util.make_master_params", "model.named_parameters", "model.named_parameters"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.get_param_groups_and_shapes", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.make_master_params"], ["", "def", "state_dict_to_master_params", "(", "model", ",", "state_dict", ",", "use_fp16", ")", ":", "\n", "    ", "if", "use_fp16", ":", "\n", "        ", "named_model_params", "=", "[", "\n", "(", "name", ",", "state_dict", "[", "name", "]", ")", "for", "name", ",", "_", "in", "model", ".", "named_parameters", "(", ")", "\n", "]", "\n", "param_groups_and_shapes", "=", "get_param_groups_and_shapes", "(", "named_model_params", ")", "\n", "master_params", "=", "make_master_params", "(", "param_groups_and_shapes", ")", "\n", "", "else", ":", "\n", "        ", "master_params", "=", "[", "state_dict", "[", "name", "]", "for", "name", ",", "_", "in", "model", ".", "named_parameters", "(", ")", "]", "\n", "", "return", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.zero_master_grads": [[147, 150], ["None"], "function", ["None"], ["", "def", "zero_master_grads", "(", "master_params", ")", ":", "\n", "    ", "for", "param", "in", "master_params", ":", "\n", "        ", "param", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.zero_grad": [[152, 158], ["param.grad.detach_", "param.grad.zero_"], "function", ["None"], ["", "", "def", "zero_grad", "(", "model_params", ")", ":", "\n", "    ", "for", "param", "in", "model_params", ":", "\n", "# Taken from https://pytorch.org/docs/stable/_modules/torch/optim/optimizer.html#Optimizer.add_param_group", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param", ".", "grad", ".", "detach_", "(", ")", "\n", "param", ".", "grad", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.param_grad_or_zeros": [[160, 165], ["param.grad.data.detach", "torch.zeros_like"], "function", ["None"], ["", "", "", "def", "param_grad_or_zeros", "(", "param", ")", ":", "\n", "    ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "        ", "return", "param", ".", "grad", ".", "data", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "th", ".", "zeros_like", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.fp16_util.check_overflow": [[254, 256], ["float", "float"], "function", ["None"], ["", "", "def", "check_overflow", "(", "value", ")", ":", "\n", "    ", "return", "(", "value", "==", "float", "(", "\"inf\"", ")", ")", "or", "(", "value", "==", "-", "float", "(", "\"inf\"", ")", ")", "or", "(", "value", "!=", "value", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.ScheduleSampler.weights": [[34, 41], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a numpy array of weights, one per diffusion step.\n\n        The weights needn't be normalized, but must be positive.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.ScheduleSampler.sample": [[42, 59], ["resample.ScheduleSampler.weights", "numpy.random.choice", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "numpy.sum", "len", "torch.from_numpy().long", "torch.from_numpy().long", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler.weights"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Importance-sample timesteps for a batch.\n\n        :param batch_size: the number of timesteps.\n        :param device: the torch device to save to.\n        :return: a tuple (timesteps, weights):\n                 - timesteps: a tensor of timestep indices.\n                 - weights: a tensor of weights to scale the resulting losses.\n        \"\"\"", "\n", "w", "=", "self", ".", "weights", "(", ")", "\n", "p", "=", "w", "/", "np", ".", "sum", "(", "w", ")", "\n", "indices_np", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "p", ")", ",", "size", "=", "(", "batch_size", ",", ")", ",", "p", "=", "p", ")", "\n", "indices", "=", "th", ".", "from_numpy", "(", "indices_np", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "weights_np", "=", "1", "/", "(", "len", "(", "p", ")", "*", "p", "[", "indices_np", "]", ")", "\n", "weights", "=", "th", ".", "from_numpy", "(", "weights_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "indices", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.UniformSampler.__init__": [[62, 65], ["numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "diffusion", ")", ":", "\n", "        ", "self", ".", "diffusion", "=", "diffusion", "\n", "self", ".", "_weights", "=", "np", ".", "ones", "(", "[", "diffusion", ".", "num_timesteps", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.UniformSampler.weights": [[66, 68], ["None"], "methods", ["None"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossAwareSampler.update_with_local_losses": [[71, 105], ["torch.all_gather", "torch.all_gather", "max", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "resample.LossAwareSampler.update_with_all_losses", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "x.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "x.item", "x.item", "range", "zip", "zip", "torch.get_world_size", "torch.get_world_size", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler.update_with_all_losses"], ["    ", "def", "update_with_local_losses", "(", "self", ",", "local_ts", ",", "local_losses", ")", ":", "\n", "        ", "\"\"\"\n        Update the reweighting using losses from a model.\n\n        Call this method from each rank with a batch of timesteps and the\n        corresponding losses for each of those timesteps.\n        This method will perform synchronization to make sure all of the ranks\n        maintain the exact same reweighting.\n\n        :param local_ts: an integer Tensor of timesteps.\n        :param local_losses: a 1D Tensor of losses.\n        \"\"\"", "\n", "batch_sizes", "=", "[", "\n", "th", ".", "tensor", "(", "[", "0", "]", ",", "dtype", "=", "th", ".", "int32", ",", "device", "=", "local_ts", ".", "device", ")", "\n", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "\n", "batch_sizes", ",", "\n", "th", ".", "tensor", "(", "[", "len", "(", "local_ts", ")", "]", ",", "dtype", "=", "th", ".", "int32", ",", "device", "=", "local_ts", ".", "device", ")", ",", "\n", ")", "\n", "\n", "# Pad all_gather batches to be the maximum batch size.", "\n", "batch_sizes", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "batch_sizes", "]", "\n", "max_bs", "=", "max", "(", "batch_sizes", ")", "\n", "\n", "timestep_batches", "=", "[", "th", ".", "zeros", "(", "max_bs", ")", ".", "to", "(", "local_ts", ")", "for", "bs", "in", "batch_sizes", "]", "\n", "loss_batches", "=", "[", "th", ".", "zeros", "(", "max_bs", ")", ".", "to", "(", "local_losses", ")", "for", "bs", "in", "batch_sizes", "]", "\n", "dist", ".", "all_gather", "(", "timestep_batches", ",", "local_ts", ")", "\n", "dist", ".", "all_gather", "(", "loss_batches", ",", "local_losses", ")", "\n", "timesteps", "=", "[", "\n", "x", ".", "item", "(", ")", "for", "y", ",", "bs", "in", "zip", "(", "timestep_batches", ",", "batch_sizes", ")", "for", "x", "in", "y", "[", ":", "bs", "]", "\n", "]", "\n", "losses", "=", "[", "x", ".", "item", "(", ")", "for", "y", ",", "bs", "in", "zip", "(", "loss_batches", ",", "batch_sizes", ")", "for", "x", "in", "y", "[", ":", "bs", "]", "]", "\n", "self", ".", "update_with_all_losses", "(", "timesteps", ",", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossAwareSampler.update_with_all_losses": [[106, 122], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update_with_all_losses", "(", "self", ",", "ts", ",", "losses", ")", ":", "\n", "        ", "\"\"\"\n        Update the reweighting using losses from a model.\n\n        Sub-classes should override this method to update the reweighting\n        using losses from the model.\n\n        This method directly updates the reweighting without synchronizing\n        between workers. It is called by update_with_local_losses from all\n        ranks with identical arguments. Thus, it should have deterministic\n        behavior to maintain state across workers.\n\n        :param ts: a list of int timesteps.\n        :param losses: a list of float losses, one per timestep.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler.__init__": [[125, 133], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "diffusion", ",", "history_per_term", "=", "10", ",", "uniform_prob", "=", "0.001", ")", ":", "\n", "        ", "self", ".", "diffusion", "=", "diffusion", "\n", "self", ".", "history_per_term", "=", "history_per_term", "\n", "self", ".", "uniform_prob", "=", "uniform_prob", "\n", "self", ".", "_loss_history", "=", "np", ".", "zeros", "(", "\n", "[", "diffusion", ".", "num_timesteps", ",", "history_per_term", "]", ",", "dtype", "=", "np", ".", "float64", "\n", ")", "\n", "self", ".", "_loss_counts", "=", "np", ".", "zeros", "(", "[", "diffusion", ".", "num_timesteps", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler.weights": [[134, 142], ["numpy.sqrt", "numpy.sum", "resample.LossSecondMomentResampler._warmed_up", "numpy.ones", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler._warmed_up"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_warmed_up", "(", ")", ":", "\n", "            ", "return", "np", ".", "ones", "(", "[", "self", ".", "diffusion", ".", "num_timesteps", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "weights", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "self", ".", "_loss_history", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "weights", "/=", "np", ".", "sum", "(", "weights", ")", "\n", "weights", "*=", "1", "-", "self", ".", "uniform_prob", "\n", "weights", "+=", "self", ".", "uniform_prob", "/", "len", "(", "weights", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler.update_with_all_losses": [[143, 152], ["zip"], "methods", ["None"], ["", "def", "update_with_all_losses", "(", "self", ",", "ts", ",", "losses", ")", ":", "\n", "        ", "for", "t", ",", "loss", "in", "zip", "(", "ts", ",", "losses", ")", ":", "\n", "            ", "if", "self", ".", "_loss_counts", "[", "t", "]", "==", "self", ".", "history_per_term", ":", "\n", "# Shift out the oldest loss term.", "\n", "                ", "self", ".", "_loss_history", "[", "t", ",", ":", "-", "1", "]", "=", "self", ".", "_loss_history", "[", "t", ",", "1", ":", "]", "\n", "self", ".", "_loss_history", "[", "t", ",", "-", "1", "]", "=", "loss", "\n", "", "else", ":", "\n", "                ", "self", ".", "_loss_history", "[", "t", ",", "self", ".", "_loss_counts", "[", "t", "]", "]", "=", "loss", "\n", "self", ".", "_loss_counts", "[", "t", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.LossSecondMomentResampler._warmed_up": [[153, 155], ["None"], "methods", ["None"], ["", "", "", "def", "_warmed_up", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_loss_counts", "==", "self", ".", "history_per_term", ")", ".", "all", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.create_named_schedule_sampler": [[8, 21], ["resample.UniformSampler", "resample.LossSecondMomentResampler", "NotImplementedError"], "function", ["None"], ["def", "create_named_schedule_sampler", "(", "name", ",", "diffusion", ")", ":", "\n", "    ", "\"\"\"\n    Create a ScheduleSampler from a library of pre-defined samplers.\n\n    :param name: the name of the sampler.\n    :param diffusion: the diffusion object to sample for.\n    \"\"\"", "\n", "if", "name", "==", "\"uniform\"", ":", "\n", "        ", "return", "UniformSampler", "(", "diffusion", ")", "\n", "", "elif", "name", "==", "\"loss-second-moment\"", ":", "\n", "        ", "return", "LossSecondMomentResampler", "(", "diffusion", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"unknown schedule sampler: {name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.normal_kl": [[12, 39], ["isinstance", "isinstance", "torch.tensor().to", "torch.exp", "torch.exp", "torch.tensor"], "function", ["None"], ["def", "normal_kl", "(", "mean1", ",", "logvar1", ",", "mean2", ",", "logvar2", ")", ":", "\n", "    ", "\"\"\"\n    Compute the KL divergence between two gaussians.\n\n    Shapes are automatically broadcasted, so batches can be compared to\n    scalars, among other use cases.\n    \"\"\"", "\n", "tensor", "=", "None", "\n", "for", "obj", "in", "(", "mean1", ",", "logvar1", ",", "mean2", ",", "logvar2", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "th", ".", "Tensor", ")", ":", "\n", "            ", "tensor", "=", "obj", "\n", "break", "\n", "", "", "assert", "tensor", "is", "not", "None", ",", "\"at least one argument must be a Tensor\"", "\n", "\n", "# Force variances to be Tensors. Broadcasting helps convert scalars to", "\n", "# Tensors, but it does not work for th.exp().", "\n", "logvar1", ",", "logvar2", "=", "[", "\n", "x", "if", "isinstance", "(", "x", ",", "th", ".", "Tensor", ")", "else", "th", ".", "tensor", "(", "x", ")", ".", "to", "(", "tensor", ")", "\n", "for", "x", "in", "(", "logvar1", ",", "logvar2", ")", "\n", "]", "\n", "\n", "return", "0.5", "*", "(", "\n", "-", "1.0", "\n", "+", "logvar2", "\n", "-", "logvar1", "\n", "+", "th", ".", "exp", "(", "logvar1", "-", "logvar2", ")", "\n", "+", "(", "(", "mean1", "-", "mean2", ")", "**", "2", ")", "*", "th", ".", "exp", "(", "-", "logvar2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.approx_standard_normal_cdf": [[42, 48], ["torch.tanh", "numpy.sqrt", "torch.pow"], "function", ["None"], ["", "def", "approx_standard_normal_cdf", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    A fast approximation of the cumulative distribution function of the\n    standard normal.\n    \"\"\"", "\n", "return", "0.5", "*", "(", "1.0", "+", "th", ".", "tanh", "(", "np", ".", "sqrt", "(", "2.0", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "th", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.discretized_gaussian_log_likelihood": [[50, 78], ["torch.exp", "losses.approx_standard_normal_cdf", "losses.approx_standard_normal_cdf", "torch.log", "torch.log", "torch.where", "approx_standard_normal_cdf.clamp", "torch.where", "torch.log", "cdf_delta.clamp"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.approx_standard_normal_cdf", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.losses.approx_standard_normal_cdf", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "discretized_gaussian_log_likelihood", "(", "x", ",", "*", ",", "means", ",", "log_scales", ")", ":", "\n", "    ", "\"\"\"\n    Compute the log-likelihood of a Gaussian distribution discretizing to a\n    given image.\n\n    :param x: the target images. It is assumed that this was uint8 values,\n              rescaled to the range [-1, 1].\n    :param means: the Gaussian mean Tensor.\n    :param log_scales: the Gaussian log stddev Tensor.\n    :return: a tensor like x of log probabilities (in nats).\n    \"\"\"", "\n", "assert", "x", ".", "shape", "==", "means", ".", "shape", "==", "log_scales", ".", "shape", "\n", "centered_x", "=", "x", "-", "means", "\n", "inv_stdv", "=", "th", ".", "exp", "(", "-", "log_scales", ")", "\n", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.0", "/", "255.0", ")", "\n", "cdf_plus", "=", "approx_standard_normal_cdf", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.0", "/", "255.0", ")", "\n", "cdf_min", "=", "approx_standard_normal_cdf", "(", "min_in", ")", "\n", "log_cdf_plus", "=", "th", ".", "log", "(", "cdf_plus", ".", "clamp", "(", "min", "=", "1e-12", ")", ")", "\n", "log_one_minus_cdf_min", "=", "th", ".", "log", "(", "(", "1.0", "-", "cdf_min", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", ")", "\n", "cdf_delta", "=", "cdf_plus", "-", "cdf_min", "\n", "log_probs", "=", "th", ".", "where", "(", "\n", "x", "<", "-", "0.999", ",", "\n", "log_cdf_plus", ",", "\n", "th", ".", "where", "(", "x", ">", "0.999", ",", "log_one_minus_cdf_min", ",", "th", ".", "log", "(", "cdf_delta", ".", "clamp", "(", "min", "=", "1e-12", ")", ")", ")", ",", "\n", ")", "\n", "assert", "log_probs", ".", "shape", "==", "x", ".", "shape", "\n", "return", "log_probs", "\n", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.VGG19.__init__": [[26, 35], ["torch.Module.__init__", "torchvision.models.vgg19", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "list", "torchvision.models.vgg19.features.children"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''\n         use vgg19 conv1_2, conv2_2, conv3_3 feature, before relu layer\n        '''", "\n", "self", ".", "feature_list", "=", "[", "2", ",", "7", ",", "14", "]", "\n", "vgg19", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "model", "=", "th", ".", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg19", ".", "features", ".", "children", "(", ")", ")", "[", ":", "self", ".", "feature_list", "[", "-", "1", "]", "+", "1", "]", ")", "\n", "# self.model.apply(convert_module_to_f16)", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.VGG19.forward": [[37, 47], ["enumerate", "list", "layer", "features.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "# x = (x-0.5)/0.5", "\n", "        ", "features", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "list", "(", "self", ".", "model", ")", ")", ":", "\n", "# print(layer,i)", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "feature_list", ":", "\n", "                ", "features", ".", "append", "(", "x", ")", "\n", "# print(x.shape)", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.AttentionPool2d.__init__": [[55, 70], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.conv_nd", "torch.conv_nd", "unet2.QKVAttention", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "spacial_dim", ":", "int", ",", "\n", "embed_dim", ":", "int", ",", "\n", "num_heads_channels", ":", "int", ",", "\n", "output_dim", ":", "int", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "\n", "th", ".", "randn", "(", "embed_dim", ",", "spacial_dim", "**", "2", "+", "1", ")", "/", "embed_dim", "**", "0.5", "\n", ")", "\n", "self", ".", "qkv_proj", "=", "conv_nd", "(", "1", ",", "embed_dim", ",", "3", "*", "embed_dim", ",", "1", ")", "\n", "self", ".", "c_proj", "=", "conv_nd", "(", "1", ",", "embed_dim", ",", "output_dim", "or", "embed_dim", ",", "1", ")", "\n", "self", ".", "num_heads", "=", "embed_dim", "//", "num_heads_channels", "\n", "self", ".", "attention", "=", "QKVAttention", "(", "self", ".", "num_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.AttentionPool2d.forward": [[71, 80], ["unet2.AttentionPool2d.reshape", "torch.cat", "torch.cat", "torch.cat", "unet2.AttentionPool2d.qkv_proj", "unet2.AttentionPool2d.attention", "unet2.AttentionPool2d.c_proj", "unet2.AttentionPool2d.positional_embedding[].to", "unet2.AttentionPool2d.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "*", "_spatial", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "# NC(HW)", "\n", "x", "=", "th", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "-", "1", ")", "# NC(HW+1)", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", "None", ",", ":", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# NC(HW+1)", "\n", "x", "=", "self", ".", "qkv_proj", "(", "x", ")", "\n", "x", "=", "self", ".", "attention", "(", "x", ")", "\n", "x", "=", "self", ".", "c_proj", "(", "x", ")", "\n", "return", "x", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.TimestepBlock.forward": [[87, 92], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "\"\"\"\n        Apply the module to `x` given `emb` timestep embeddings.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.TimestepEmbedSequential.forward": [[100, 107], ["isinstance", "layer", "layer"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "emb", ",", "zsem", ")", ":", "\n", "        ", "for", "layer", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "TimestepBlock", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "emb", ",", "zsem", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.TimestepEmbedSequential1.forward": [[115, 122], ["isinstance", "layer", "layer"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "for", "layer", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "TimestepBlock", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "emb", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.Upsample.__init__": [[133, 141], ["torch.Module.__init__", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "self", ",", "channels", ",", "use_conv", ",", "dims", "=", "2", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "dims", "=", "dims", "\n", "if", "use_conv", ":", "\n", "            ", "self", ".", "conv", "=", "conv_nd", "(", "dims", ",", "self", ".", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.Upsample.forward": [[142, 153], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "unet2.Upsample.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "channels", "\n", "if", "self", ".", "dims", "==", "3", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "\n", "x", ",", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "*", "2", ",", "x", ".", "shape", "[", "4", "]", "*", "2", ")", ",", "mode", "=", "\"nearest\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "", "if", "self", ".", "use_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.Downsample.__init__": [[165, 179], ["torch.Module.__init__", "torch.conv_nd", "torch.avg_pool_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.avg_pool_nd"], ["def", "__init__", "(", "self", ",", "channels", ",", "use_conv", ",", "dims", "=", "2", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "dims", "=", "dims", "\n", "stride", "=", "2", "if", "dims", "!=", "3", "else", "(", "1", ",", "2", ",", "2", ")", "\n", "if", "use_conv", ":", "\n", "            ", "self", ".", "op", "=", "conv_nd", "(", "\n", "dims", ",", "self", ".", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "channels", "==", "self", ".", "out_channels", "\n", "self", ".", "op", "=", "avg_pool_nd", "(", "dims", ",", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.Downsample.forward": [[180, 183], ["unet2.Downsample.op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "channels", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.ResBlock.__init__": [[202, 271], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.conv_nd", "unet2.Upsample", "unet2.Upsample", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zero_module", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "torch.Identity", "torch.Identity", "torch.Identity", "unet2.Downsample", "unet2.Downsample", "torch.Identity", "torch.Identity", "torch.Identity", "torch.conv_nd", "torch.conv_nd", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "emb_channels", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "None", ",", "\n", "use_conv", "=", "False", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "dims", "=", "2", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "up", "=", "False", ",", "\n", "down", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "emb_channels", "=", "emb_channels", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "use_scale_shift_norm", "=", "use_scale_shift_norm", "\n", "\n", "self", ".", "in_layers", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "channels", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "conv_nd", "(", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "updown", "=", "up", "or", "down", "\n", "\n", "if", "up", ":", "\n", "            ", "self", ".", "h_upd", "=", "Upsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "self", ".", "x_upd", "=", "Upsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "", "elif", "down", ":", "\n", "            ", "self", ".", "h_upd", "=", "Downsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "self", ".", "x_upd", "=", "Downsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_upd", "=", "self", ".", "x_upd", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "emb_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "\n", "emb_channels", ",", "\n", "2", "*", "self", ".", "out_channels", "if", "use_scale_shift_norm", "else", "self", ".", "out_channels", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "out_layers", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "self", ".", "out_channels", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", "zero_module", "(", "\n", "conv_nd", "(", "dims", ",", "self", ".", "out_channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", ")", ",", "\n", ")", "\n", "self", ".", "sem_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "\n", "512", ",", "\n", "self", ".", "out_channels", ",", "\n", ")", ",", "\n", ")", "\n", "if", "self", ".", "out_channels", "==", "channels", ":", "\n", "            ", "self", ".", "skip_connection", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "use_conv", ":", "\n", "            ", "self", ".", "skip_connection", "=", "conv_nd", "(", "\n", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip_connection", "=", "conv_nd", "(", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.ResBlock.forward": [[272, 282], ["torch.checkpoint", "unet2.ResBlock.parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.checkpoint"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "emb", ",", "sem", ")", ":", "\n", "        ", "\"\"\"\n        Apply the block to a Tensor, conditioned on a timestep embedding.\n\n        :param x: an [N x C x ...] Tensor of features.\n        :param emb: an [N x emb_channels] Tensor of timestep embeddings.\n        :return: an [N x C x ...] Tensor of outputs.\n        \"\"\"", "\n", "return", "checkpoint", "(", "\n", "self", ".", "_forward", ",", "(", "x", ",", "emb", ",", "sem", ")", ",", "self", ".", "parameters", "(", ")", ",", "self", ".", "use_checkpoint", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.ResBlock._forward": [[284, 312], ["unet2.ResBlock.emb_layers().type", "unet2.ResBlock.sem_layers().type", "in_rest", "unet2.ResBlock.h_upd", "unet2.ResBlock.x_upd", "in_conv", "unet2.ResBlock.in_layers", "len", "len", "len", "len", "torch.chunk", "torch.chunk", "torch.chunk", "out_rest", "unet2.ResBlock.out_layers", "unet2.ResBlock.skip_connection", "unet2.ResBlock.emb_layers", "unet2.ResBlock.sem_layers", "out_norm"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ",", "emb", ",", "zsem", ")", ":", "\n", "        ", "if", "self", ".", "updown", ":", "\n", "            ", "in_rest", ",", "in_conv", "=", "self", ".", "in_layers", "[", ":", "-", "1", "]", ",", "self", ".", "in_layers", "[", "-", "1", "]", "\n", "h", "=", "in_rest", "(", "x", ")", "\n", "h", "=", "self", ".", "h_upd", "(", "h", ")", "\n", "x", "=", "self", ".", "x_upd", "(", "x", ")", "\n", "h", "=", "in_conv", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "in_layers", "(", "x", ")", "\n", "", "emb_out", "=", "self", ".", "emb_layers", "(", "emb", ")", ".", "type", "(", "h", ".", "dtype", ")", "\n", "# print(zsem.shape)", "\n", "sem_out", "=", "self", ".", "sem_layers", "(", "zsem", ")", ".", "type", "(", "h", ".", "dtype", ")", "\n", "\n", "while", "len", "(", "emb_out", ".", "shape", ")", "<", "len", "(", "h", ".", "shape", ")", ":", "\n", "            ", "emb_out", "=", "emb_out", "[", "...", ",", "None", "]", "\n", "", "while", "len", "(", "sem_out", ".", "shape", ")", "<", "len", "(", "h", ".", "shape", ")", ":", "\n", "            ", "sem_out", "=", "sem_out", "[", "...", ",", "None", "]", "\n", "", "if", "self", ".", "use_scale_shift_norm", ":", "\n", "            ", "out_norm", ",", "out_rest", "=", "self", ".", "out_layers", "[", "0", "]", ",", "self", ".", "out_layers", "[", "1", ":", "]", "\n", "scale", ",", "shift", "=", "th", ".", "chunk", "(", "emb_out", ",", "2", ",", "dim", "=", "1", ")", "\n", "h", "=", "out_norm", "(", "h", ")", "*", "(", "1", "+", "scale", ")", "+", "shift", "\n", "# print(h.shape,sem_out.shape,scale.shape)", "\n", "h", "=", "h", "*", "sem_out", "\n", "h", "=", "out_rest", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", "+", "emb_out", "\n", "h", "=", "self", ".", "out_layers", "(", "h", ")", "\n", "", "return", "self", ".", "skip_connection", "(", "x", ")", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.ResBlock1.__init__": [[330, 399], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.conv_nd", "unet2.Upsample", "unet2.Upsample", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zero_module", "torch.Identity", "torch.Identity", "torch.Identity", "unet2.Downsample", "unet2.Downsample", "torch.Identity", "torch.Identity", "torch.Identity", "torch.conv_nd", "torch.conv_nd", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "emb_channels", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "None", ",", "\n", "use_conv", "=", "False", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "dims", "=", "2", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "up", "=", "False", ",", "\n", "down", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "emb_channels", "=", "emb_channels", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "out_channels", "=", "out_channels", "or", "channels", "\n", "self", ".", "use_conv", "=", "use_conv", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "use_scale_shift_norm", "=", "use_scale_shift_norm", "\n", "\n", "self", ".", "in_layers", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "channels", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "conv_nd", "(", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "updown", "=", "up", "or", "down", "\n", "\n", "if", "up", ":", "\n", "            ", "self", ".", "h_upd", "=", "Upsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "self", ".", "x_upd", "=", "Upsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "", "elif", "down", ":", "\n", "            ", "self", ".", "h_upd", "=", "Downsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "self", ".", "x_upd", "=", "Downsample", "(", "channels", ",", "False", ",", "dims", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_upd", "=", "self", ".", "x_upd", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "emb_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "\n", "emb_channels", ",", "\n", "2", "*", "self", ".", "out_channels", "if", "use_scale_shift_norm", "else", "self", ".", "out_channels", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "out_layers", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "self", ".", "out_channels", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", "zero_module", "(", "\n", "conv_nd", "(", "dims", ",", "self", ".", "out_channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", ")", ",", "\n", ")", "\n", "# self.sem_layers = nn.Sequential(", "\n", "#     nn.SiLU(),", "\n", "#     linear(", "\n", "#         emb_channels,", "\n", "#         self.out_channels if use_scale_shift_norm else self.out_channels,", "\n", "#     ),", "\n", "# )", "\n", "if", "self", ".", "out_channels", "==", "channels", ":", "\n", "            ", "self", ".", "skip_connection", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "use_conv", ":", "\n", "            ", "self", ".", "skip_connection", "=", "conv_nd", "(", "\n", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "3", ",", "padding", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip_connection", "=", "conv_nd", "(", "dims", ",", "channels", ",", "self", ".", "out_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.ResBlock1.forward": [[400, 410], ["torch.checkpoint", "unet2.ResBlock1.parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.checkpoint"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "\"\"\"\n        Apply the block to a Tensor, conditioned on a timestep embedding.\n\n        :param x: an [N x C x ...] Tensor of features.\n        :param emb: an [N x emb_channels] Tensor of timestep embeddings.\n        :return: an [N x C x ...] Tensor of outputs.\n        \"\"\"", "\n", "return", "checkpoint", "(", "\n", "self", ".", "_forward", ",", "(", "x", ",", "emb", ")", ",", "self", ".", "parameters", "(", ")", ",", "self", ".", "use_checkpoint", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.ResBlock1._forward": [[412, 436], ["unet2.ResBlock1.emb_layers().type", "in_rest", "unet2.ResBlock1.h_upd", "unet2.ResBlock1.x_upd", "in_conv", "unet2.ResBlock1.in_layers", "len", "len", "torch.chunk", "torch.chunk", "torch.chunk", "out_rest", "unet2.ResBlock1.out_layers", "unet2.ResBlock1.skip_connection", "unet2.ResBlock1.emb_layers", "out_norm"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ",", "emb", ")", ":", "\n", "        ", "if", "self", ".", "updown", ":", "\n", "            ", "in_rest", ",", "in_conv", "=", "self", ".", "in_layers", "[", ":", "-", "1", "]", ",", "self", ".", "in_layers", "[", "-", "1", "]", "\n", "h", "=", "in_rest", "(", "x", ")", "\n", "h", "=", "self", ".", "h_upd", "(", "h", ")", "\n", "x", "=", "self", ".", "x_upd", "(", "x", ")", "\n", "h", "=", "in_conv", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "in_layers", "(", "x", ")", "\n", "", "emb_out", "=", "self", ".", "emb_layers", "(", "emb", ")", ".", "type", "(", "h", ".", "dtype", ")", "\n", "# sem_out = self.sem_layers(zsem).type(h.dtype)", "\n", "\n", "while", "len", "(", "emb_out", ".", "shape", ")", "<", "len", "(", "h", ".", "shape", ")", ":", "\n", "            ", "emb_out", "=", "emb_out", "[", "...", ",", "None", "]", "\n", "", "if", "self", ".", "use_scale_shift_norm", ":", "\n", "            ", "out_norm", ",", "out_rest", "=", "self", ".", "out_layers", "[", "0", "]", ",", "self", ".", "out_layers", "[", "1", ":", "]", "\n", "scale", ",", "shift", "=", "th", ".", "chunk", "(", "emb_out", ",", "2", ",", "dim", "=", "1", ")", "\n", "h", "=", "out_norm", "(", "h", ")", "*", "(", "1", "+", "scale", ")", "+", "shift", "\n", "# h=h*sem_out", "\n", "h", "=", "out_rest", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", "+", "emb_out", "\n", "h", "=", "self", ".", "out_layers", "(", "h", ")", "\n", "", "return", "self", ".", "skip_connection", "(", "x", ")", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.AttentionBlock.__init__": [[445, 473], ["torch.Module.__init__", "torch.normalization", "torch.conv_nd", "torch.zero_module", "unet2.QKVAttention", "unet2.QKVAttentionLegacy", "torch.conv_nd"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "if", "num_head_channels", "==", "-", "1", ":", "\n", "            ", "self", ".", "num_heads", "=", "num_heads", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "channels", "%", "num_head_channels", "==", "0", "\n", ")", ",", "f\"q,k,v channels {channels} is not divisible by num_head_channels {num_head_channels}\"", "\n", "self", ".", "num_heads", "=", "channels", "//", "num_head_channels", "\n", "", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "norm", "=", "normalization", "(", "channels", ")", "\n", "self", ".", "qkv", "=", "conv_nd", "(", "1", ",", "channels", ",", "channels", "*", "3", ",", "1", ")", "\n", "if", "use_new_attention_order", ":", "\n", "# split qkv before split heads", "\n", "            ", "self", ".", "attention", "=", "QKVAttention", "(", "self", ".", "num_heads", ")", "\n", "", "else", ":", "\n", "# split heads before split qkv", "\n", "            ", "self", ".", "attention", "=", "QKVAttentionLegacy", "(", "self", ".", "num_heads", ")", "\n", "\n", "", "self", ".", "proj_out", "=", "zero_module", "(", "conv_nd", "(", "1", ",", "channels", ",", "channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.AttentionBlock.forward": [[474, 476], ["torch.checkpoint", "unet2.AttentionBlock.parameters"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.checkpoint"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "checkpoint", "(", "self", ".", "_forward", ",", "(", "x", ",", ")", ",", "self", ".", "parameters", "(", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.AttentionBlock._forward": [[477, 484], ["x.reshape.reshape.reshape", "unet2.AttentionBlock.qkv", "unet2.AttentionBlock.attention", "unet2.AttentionBlock.proj_out", "unet2.AttentionBlock.norm"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "*", "spatial", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "qkv", "=", "self", ".", "qkv", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "attention", "(", "qkv", ")", "\n", "h", "=", "self", ".", "proj_out", "(", "h", ")", "\n", "return", "(", "x", "+", "h", ")", ".", "reshape", "(", "b", ",", "c", ",", "*", "spatial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.QKVAttentionLegacy.__init__": [[511, 514], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "n_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.QKVAttentionLegacy.forward": [[515, 533], ["qkv.reshape().split", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().type", "torch.softmax().type", "torch.softmax().type", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.reshape", "math.sqrt", "qkv.reshape", "math.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().type.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qkv", ")", ":", "\n", "        ", "\"\"\"\n        Apply QKV attention.\n\n        :param qkv: an [N x (H * 3 * C) x T] tensor of Qs, Ks, and Vs.\n        :return: an [N x (H * C) x T] tensor after attention.\n        \"\"\"", "\n", "bs", ",", "width", ",", "length", "=", "qkv", ".", "shape", "\n", "assert", "width", "%", "(", "3", "*", "self", ".", "n_heads", ")", "==", "0", "\n", "ch", "=", "width", "//", "(", "3", "*", "self", ".", "n_heads", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", ".", "reshape", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", "*", "3", ",", "length", ")", ".", "split", "(", "ch", ",", "dim", "=", "1", ")", "\n", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "math", ".", "sqrt", "(", "ch", ")", ")", "\n", "weight", "=", "th", ".", "einsum", "(", "\n", "\"bct,bcs->bts\"", ",", "q", "*", "scale", ",", "k", "*", "scale", "\n", ")", "# More stable with f16 than dividing afterwards", "\n", "weight", "=", "th", ".", "softmax", "(", "weight", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type", "(", "weight", ".", "dtype", ")", "\n", "a", "=", "th", ".", "einsum", "(", "\"bts,bcs->bct\"", ",", "weight", ",", "v", ")", "\n", "return", "a", ".", "reshape", "(", "bs", ",", "-", "1", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.QKVAttentionLegacy.count_flops": [[534, 537], ["unet2.count_flops_attn"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.count_flops_attn"], ["", "@", "staticmethod", "\n", "def", "count_flops", "(", "model", ",", "_x", ",", "y", ")", ":", "\n", "        ", "return", "count_flops_attn", "(", "model", ",", "_x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.QKVAttention.__init__": [[544, 547], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "n_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.QKVAttention.forward": [[548, 568], ["qkv.chunk", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().type", "torch.softmax().type", "torch.softmax().type", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.reshape", "math.sqrt", "v.reshape", "math.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().type.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qkv", ")", ":", "\n", "        ", "\"\"\"\n        Apply QKV attention.\n\n        :param qkv: an [N x (3 * H * C) x T] tensor of Qs, Ks, and Vs.\n        :return: an [N x (H * C) x T] tensor after attention.\n        \"\"\"", "\n", "bs", ",", "width", ",", "length", "=", "qkv", ".", "shape", "\n", "assert", "width", "%", "(", "3", "*", "self", ".", "n_heads", ")", "==", "0", "\n", "ch", "=", "width", "//", "(", "3", "*", "self", ".", "n_heads", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", ".", "chunk", "(", "3", ",", "dim", "=", "1", ")", "\n", "scale", "=", "1", "/", "math", ".", "sqrt", "(", "math", ".", "sqrt", "(", "ch", ")", ")", "\n", "weight", "=", "th", ".", "einsum", "(", "\n", "\"bct,bcs->bts\"", ",", "\n", "(", "q", "*", "scale", ")", ".", "view", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", ",", "length", ")", ",", "\n", "(", "k", "*", "scale", ")", ".", "view", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", ",", "length", ")", ",", "\n", ")", "# More stable with f16 than dividing afterwards", "\n", "weight", "=", "th", ".", "softmax", "(", "weight", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type", "(", "weight", ".", "dtype", ")", "\n", "a", "=", "th", ".", "einsum", "(", "\"bts,bcs->bct\"", ",", "weight", ",", "v", ".", "reshape", "(", "bs", "*", "self", ".", "n_heads", ",", "ch", ",", "length", ")", ")", "\n", "return", "a", ".", "reshape", "(", "bs", ",", "-", "1", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.QKVAttention.count_flops": [[569, 572], ["unet2.count_flops_attn"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.count_flops_attn"], ["", "@", "staticmethod", "\n", "def", "count_flops", "(", "model", ",", "_x", ",", "y", ")", ":", "\n", "        ", "return", "count_flops_attn", "(", "model", ",", "_x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.UNetModel.__init__": [[604, 859], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet2.EncoderUNetModel", "int", "torch.conv_nd", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "unet2.TimestepEmbedSequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "unet2.VGG19", "unet2.ResBlock", "unet2.ResBlock", "unet2.ResBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.linear", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "range", "unet2.ResBlock", "unet2.AttentionBlock", "unet2.ResBlock", "list", "range", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.zero_module", "unet2.TimestepEmbedSequential", "int", "unet2.UNetModel.input_blocks.append", "input_block_chans.append", "unet2.UNetModel.input_blocks.append", "input_block_chans.append", "enumerate", "input_block_chans.pop", "int", "unet2.UNetModel.output_blocks.append", "torch.conv_nd", "torch.conv_nd", "unet2.ResBlock", "layers.append", "unet2.TimestepEmbedSequential", "len", "unet2.TimestepEmbedSequential", "unet2.ResBlock", "layers.append", "layers.append", "unet2.TimestepEmbedSequential", "unet2.AttentionBlock", "unet2.AttentionBlock", "int", "unet2.ResBlock", "unet2.Downsample", "int", "unet2.ResBlock", "unet2.Upsample"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd"], ["def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "in_channels", ",", "\n", "model_channels", ",", "\n", "out_channels", ",", "\n", "num_res_blocks", ",", "\n", "attention_resolutions", ",", "\n", "dropout", "=", "0", ",", "\n", "channel_mult", "=", "(", "1", ",", "2", ",", "4", ",", "8", ")", ",", "\n", "conv_resample", "=", "True", ",", "\n", "dims", "=", "2", ",", "\n", "num_classes", "=", "None", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "num_heads_upsample", "==", "-", "1", ":", "\n", "            ", "num_heads_upsample", "=", "num_heads", "\n", "", "in_channels", "=", "6", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "model_channels", "=", "model_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_res_blocks", "=", "num_res_blocks", "\n", "self", ".", "attention_resolutions", "=", "attention_resolutions", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "channel_mult", "=", "channel_mult", "\n", "self", ".", "conv_resample", "=", "conv_resample", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "dtype", "=", "th", ".", "float16", "if", "use_fp16", "else", "th", ".", "float32", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_head_channels", "=", "num_head_channels", "\n", "self", ".", "num_heads_upsample", "=", "num_heads_upsample", "\n", "time_embed_dim", "=", "model_channels", "*", "4", "\n", "self", ".", "time_embed", "=", "nn", ".", "Sequential", "(", "\n", "linear", "(", "model_channels", ",", "time_embed_dim", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "time_embed_dim", ",", "time_embed_dim", ")", ",", "\n", ")", "\n", "self", ".", "input_encoder", "=", "EncoderUNetModel", "(", "\n", "image_size", ",", "\n", "3", ",", "\n", "model_channels", ",", "\n", "out_channels", ",", "\n", "num_res_blocks", ",", "\n", "attention_resolutions", ",", "\n", "dropout", "=", "0", ",", "\n", "channel_mult", "=", "(", "1", ",", "2", ",", "4", ",", "8", ")", ",", "\n", "conv_resample", "=", "True", ",", "\n", "dims", "=", "2", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", "pool", "=", "\"spatial\"", ",", "\n", ")", "\n", "if", "self", ".", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "label_emb", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "time_embed_dim", ")", "\n", "\n", "", "ch", "=", "input_ch", "=", "int", "(", "channel_mult", "[", "0", "]", "*", "model_channels", ")", "\n", "# print(channel_mult,in_channels)", "\n", "# in_channels=6", "\n", "# print(in_channels)", "\n", "self", ".", "input_transform_1", "=", "conv_nd", "(", "2", ",", "6", ",", "3", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "input_blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "TimestepEmbedSequential", "(", "conv_nd", "(", "dims", ",", "in_channels", ",", "ch", ",", "3", ",", "padding", "=", "1", ")", ")", "]", "\n", ")", "\n", "self", ".", "_feature_size", "=", "ch", "\n", "input_block_chans", "=", "[", "ch", "]", "\n", "ds", "=", "1", "\n", "blah", "=", "0", "\n", "for", "level", ",", "mult", "in", "enumerate", "(", "channel_mult", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_res_blocks", ")", ":", "\n", "# print(level,mult,int(mult * model_channels))", "\n", "\n", "                ", "layers", "=", "[", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "int", "(", "mult", "*", "model_channels", ")", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "]", "\n", "ch", "=", "int", "(", "mult", "*", "model_channels", ")", "\n", "if", "ds", "in", "attention_resolutions", ":", "\n", "                    ", "layers", ".", "append", "(", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "input_blocks", ".", "append", "(", "TimestepEmbedSequential", "(", "*", "layers", ")", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "", "if", "level", "!=", "len", "(", "channel_mult", ")", "-", "1", ":", "\n", "                ", "out_ch", "=", "ch", "\n", "blah", "=", "blah", "+", "1", "\n", "# if(blah==1):", "\n", "#     ch1=ch+64", "\n", "# elif(blah==2):", "\n", "#     ch1=ch+128", "\n", "# elif(blah==3):", "\n", "#     ch1=ch+256", "\n", "# else:", "\n", "#     ch1=ch", "\n", "ch1", "=", "ch", "\n", "# print(resblock_updown)", "\n", "self", ".", "input_blocks", ".", "append", "(", "\n", "TimestepEmbedSequential", "(", "\n", "ResBlock", "(", "\n", "ch1", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "down", "=", "True", ",", "\n", ")", "\n", "if", "resblock_updown", "\n", "else", "Downsample", "(", "\n", "ch", ",", "conv_resample", ",", "dims", "=", "dims", ",", "out_channels", "=", "out_ch", "\n", ")", "\n", ")", "\n", ")", "\n", "ch", "=", "out_ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "ds", "*=", "2", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "# print(input_block_chans)", "\n", "", "", "self", ".", "middle_block", "=", "TimestepEmbedSequential", "(", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", ",", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "\n", "self", ".", "output_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "level", ",", "mult", "in", "list", "(", "enumerate", "(", "channel_mult", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_res_blocks", "+", "1", ")", ":", "\n", "                ", "ich", "=", "input_block_chans", ".", "pop", "(", ")", "\n", "layers", "=", "[", "\n", "ResBlock", "(", "\n", "ch", "+", "ich", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "int", "(", "model_channels", "*", "mult", ")", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "]", "\n", "ch", "=", "int", "(", "model_channels", "*", "mult", ")", "\n", "if", "ds", "in", "attention_resolutions", ":", "\n", "                    ", "layers", ".", "append", "(", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads_upsample", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", ")", "\n", "", "if", "level", "and", "i", "==", "num_res_blocks", ":", "\n", "                    ", "out_ch", "=", "ch", "\n", "layers", ".", "append", "(", "\n", "ResBlock", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "up", "=", "True", ",", "\n", ")", "\n", "if", "resblock_updown", "\n", "else", "Upsample", "(", "ch", ",", "conv_resample", ",", "dims", "=", "dims", ",", "out_channels", "=", "out_ch", ")", "\n", ")", "\n", "ds", "//=", "2", "\n", "", "self", ".", "output_blocks", ".", "append", "(", "TimestepEmbedSequential", "(", "*", "layers", ")", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "\n", "", "", "self", ".", "vgg", "=", "VGG19", "(", ")", "\n", "self", ".", "conv_convert1", "=", "ResBlock", "(", "\n", "320", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "256", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "self", ".", "conv_convert2", "=", "ResBlock", "(", "\n", "384", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "256", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "self", ".", "conv_convert3", "=", "ResBlock", "(", "\n", "768", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "512", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "ch", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "zero_module", "(", "conv_nd", "(", "dims", ",", "input_ch", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.UNetModel.convert_to_fp16": [[861, 874], ["unet2.UNetModel.vgg.apply", "unet2.UNetModel.input_blocks.apply", "unet2.UNetModel.middle_block.apply", "unet2.UNetModel.output_blocks.apply", "unet2.UNetModel.conv_convert1.apply", "unet2.UNetModel.conv_convert2.apply", "unet2.UNetModel.conv_convert3.apply", "unet2.UNetModel.input_transform_1.apply", "unet2.UNetModel.input_encoder.convert_to_fp16"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.convert_to_fp16"], ["", "def", "convert_to_fp16", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float16.\n        \"\"\"", "\n", "self", ".", "vgg", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "output_blocks", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "conv_convert1", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "conv_convert2", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "conv_convert3", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "input_transform_1", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "input_encoder", ".", "convert_to_fp16", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.UNetModel.convert_to_fp32": [[876, 885], ["unet2.UNetModel.vgg.apply", "unet2.UNetModel.input_blocks.apply", "unet2.UNetModel.middle_block.apply", "unet2.UNetModel.output_blocks.apply"], "methods", ["None"], ["", "def", "convert_to_fp32", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float32.\n        \"\"\"", "\n", "self", ".", "vgg", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "self", ".", "output_blocks", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.UNetModel.forward": [[886, 939], ["unet2.UNetModel.time_embed", "x1.type", "unet2.UNetModel.input_encoder", "enumerate", "unet2.UNetModel.middle_block", "module.type", "unet2.UNetModel.out", "torch.timestep_embedding", "module", "hs.append", "torch.cat", "torch.cat", "torch.cat", "module", "hs.pop"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.timestep_embedding"], ["", "def", "forward", "(", "self", ",", "x", ",", "timesteps", ",", "low_res", ",", "high_res", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Apply the model to an input batch.\n\n        :param x: an [N x C x ...] Tensor of inputs.\n        :param timesteps: a 1-D batch of timesteps.\n        :param y: an [N] Tensor of labels, if class-conditional.\n        :return: an [N x C x ...] Tensor of outputs.\n        \"\"\"", "\n", "\n", "hs", "=", "[", "]", "\n", "# x1 = th.cat([x,high_res],1).type(self.dtype)", "\n", "# x1 = self.input_transform_1(x.type(self.dtype))", "\n", "x1", "=", "x", "\n", "emb", "=", "self", ".", "time_embed", "(", "timestep_embedding", "(", "timesteps", ",", "self", ".", "model_channels", ")", ")", "\n", "input1", "=", "low_res", "\n", "# vgg_feats = self.vgg(input1.type(self.dtype), emb)", "\n", "# print(x.shape)", "\n", "# print(emb.shape)", "\n", "# vgg_feats=vgg_feats.type(self.dtype)", "\n", "# print(vgg_feats[0].shape)", "\n", "# print(emb.shape)", "\n", "h", "=", "x1", ".", "type", "(", "self", ".", "dtype", ")", "\n", "zsem", "=", "self", ".", "input_encoder", "(", "input1", ",", "timesteps", ")", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "input_blocks", ")", ":", "\n", "# print(i,module,h.shape)", "\n", "\n", "# if(i==3):", "\n", "#     # print()", "\n", "#     h= th.cat([h,vgg_feats[0]],1)", "\n", "#     h = self.conv_convert1(h,emb)", "\n", "# if(i==6):        ", "\n", "\n", "#     h= th.cat([h,vgg_feats[1]],1)", "\n", "#     h = self.conv_convert2(h,emb)", "\n", "\n", "# elif(i==9):", "\n", "#     h= th.cat([h,vgg_feats[2]],1)", "\n", "#     h = self.conv_convert3(h,emb)", "\n", "# print(h.shape)", "\n", "# print(h.shape,emb.shape)", "\n", "            ", "h", "=", "module", "(", "h", ",", "emb", ",", "zsem", ")", "\n", "\n", "hs", ".", "append", "(", "h", ")", "\n", "# print(h.shape)", "\n", "", "h", "=", "self", ".", "middle_block", "(", "h", ",", "emb", ",", "zsem", ")", "\n", "# stop", "\n", "for", "module", "in", "self", ".", "output_blocks", ":", "\n", "            ", "h", "=", "th", ".", "cat", "(", "[", "h", ",", "hs", ".", "pop", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "module", "(", "h", ",", "emb", ",", "zsem", ")", "\n", "", "h", "=", "h", ".", "type", "(", "x", ".", "dtype", ")", "\n", "out", "=", "self", ".", "out", "(", "h", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.SuperResModel.__init__": [[948, 950], ["unet2.UNetModel.__init__"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["def", "__init__", "(", "self", ",", "image_size", ",", "in_channels", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "image_size", ",", "in_channels", "*", "2", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.SuperResModel.forward": [[951, 959], ["torch.cat", "torch.cat", "torch.cat", "unet2.UNetModel.forward"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "timesteps", ",", "low_res", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "_", ",", "_", ",", "new_height", ",", "new_width", "=", "x", ".", "shape", "\n", "low_res", "=", "kwargs", "[", "'SR'", "]", "\n", "# upsampled = F.interpolate(low_res, (new_height, new_width), mode=\"bilinear\")", "\n", "# print(x.shape,low_res.shape)", "\n", "high_res", "=", "kwargs", "[", "'SR'", "]", "\n", "x", "=", "th", ".", "cat", "(", "[", "x", ",", "low_res", "]", ",", "dim", "=", "1", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "x", ",", "timesteps", ",", "low_res", ",", "high_res", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.__init__": [[968, 1134], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "unet2.TimestepEmbedSequential1", "torch.linear", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.linear", "range", "unet2.ResBlock1", "unet2.AttentionBlock", "unet2.ResBlock1", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet2.TimestepEmbedSequential1", "int", "unet2.EncoderUNetModel.input_blocks.append", "input_block_chans.append", "unet2.EncoderUNetModel.input_blocks.append", "input_block_chans.append", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.zero_module", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.conv_nd", "unet2.ResBlock1", "layers.append", "unet2.TimestepEmbedSequential1", "len", "unet2.TimestepEmbedSequential1", "torch.conv_nd", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "unet2.AttentionPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet2.AttentionBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "int", "unet2.ResBlock1", "unet2.Downsample", "torch.Linear", "torch.Linear", "torch.Linear", "torch.normalization", "torch.SiLU", "torch.SiLU", "torch.SiLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.linear", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.zero_module", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.conv_nd", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.normalization"], ["def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "in_channels", ",", "\n", "model_channels", ",", "\n", "out_channels", ",", "\n", "num_res_blocks", ",", "\n", "attention_resolutions", ",", "\n", "dropout", "=", "0", ",", "\n", "channel_mult", "=", "(", "1", ",", "2", ",", "4", ",", "8", ")", ",", "\n", "conv_resample", "=", "True", ",", "\n", "dims", "=", "2", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "use_fp16", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_head_channels", "=", "-", "1", ",", "\n", "num_heads_upsample", "=", "-", "1", ",", "\n", "use_scale_shift_norm", "=", "False", ",", "\n", "resblock_updown", "=", "False", ",", "\n", "use_new_attention_order", "=", "False", ",", "\n", "pool", "=", "\"adaptive\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "num_heads_upsample", "==", "-", "1", ":", "\n", "            ", "num_heads_upsample", "=", "num_heads", "\n", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "model_channels", "=", "model_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_res_blocks", "=", "num_res_blocks", "\n", "self", ".", "attention_resolutions", "=", "attention_resolutions", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "channel_mult", "=", "channel_mult", "\n", "self", ".", "conv_resample", "=", "conv_resample", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "self", ".", "dtype", "=", "th", ".", "float16", "if", "use_fp16", "else", "th", ".", "float32", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_head_channels", "=", "num_head_channels", "\n", "self", ".", "num_heads_upsample", "=", "num_heads_upsample", "\n", "\n", "time_embed_dim", "=", "model_channels", "*", "4", "\n", "self", ".", "time_embed", "=", "nn", ".", "Sequential", "(", "\n", "linear", "(", "model_channels", ",", "time_embed_dim", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "linear", "(", "time_embed_dim", ",", "time_embed_dim", ")", ",", "\n", ")", "\n", "\n", "ch", "=", "int", "(", "channel_mult", "[", "0", "]", "*", "model_channels", ")", "\n", "self", ".", "input_blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "TimestepEmbedSequential1", "(", "conv_nd", "(", "dims", ",", "in_channels", ",", "ch", ",", "3", ",", "padding", "=", "1", ")", ")", "]", "\n", ")", "\n", "self", ".", "_feature_size", "=", "ch", "\n", "input_block_chans", "=", "[", "ch", "]", "\n", "ds", "=", "1", "\n", "for", "level", ",", "mult", "in", "enumerate", "(", "channel_mult", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_res_blocks", ")", ":", "\n", "                ", "layers", "=", "[", "\n", "ResBlock1", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "int", "(", "mult", "*", "model_channels", ")", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", "\n", "]", "\n", "ch", "=", "int", "(", "mult", "*", "model_channels", ")", "\n", "if", "ds", "in", "attention_resolutions", ":", "\n", "                    ", "layers", ".", "append", "(", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "input_blocks", ".", "append", "(", "TimestepEmbedSequential1", "(", "*", "layers", ")", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "", "if", "level", "!=", "len", "(", "channel_mult", ")", "-", "1", ":", "\n", "                ", "out_ch", "=", "ch", "\n", "self", ".", "input_blocks", ".", "append", "(", "\n", "TimestepEmbedSequential1", "(", "\n", "ResBlock1", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", "down", "=", "True", ",", "\n", ")", "\n", "if", "resblock_updown", "\n", "else", "Downsample", "(", "\n", "ch", ",", "conv_resample", ",", "dims", "=", "dims", ",", "out_channels", "=", "out_ch", "\n", ")", "\n", ")", "\n", ")", "\n", "ch", "=", "out_ch", "\n", "input_block_chans", ".", "append", "(", "ch", ")", "\n", "ds", "*=", "2", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "\n", "", "", "self", ".", "middle_block", "=", "TimestepEmbedSequential1", "(", "\n", "ResBlock1", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", "AttentionBlock", "(", "\n", "ch", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_head_channels", "=", "num_head_channels", ",", "\n", "use_new_attention_order", "=", "use_new_attention_order", ",", "\n", ")", ",", "\n", "ResBlock1", "(", "\n", "ch", ",", "\n", "time_embed_dim", ",", "\n", "dropout", ",", "\n", "dims", "=", "dims", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "use_scale_shift_norm", "=", "use_scale_shift_norm", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_feature_size", "+=", "ch", "\n", "self", ".", "pool", "=", "pool", "\n", "if", "pool", "==", "\"adaptive\"", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "ch", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "zero_module", "(", "conv_nd", "(", "dims", ",", "ch", ",", "out_channels", ",", "1", ")", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", "\n", "", "elif", "pool", "==", "\"attention\"", ":", "\n", "            ", "assert", "num_head_channels", "!=", "-", "1", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "normalization", "(", "ch", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "AttentionPool2d", "(", "\n", "(", "image_size", "//", "ds", ")", ",", "ch", ",", "num_head_channels", ",", "out_channels", "\n", ")", ",", "\n", ")", "\n", "", "elif", "pool", "==", "\"spatial\"", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "_feature_size", ",", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "512", ")", ",", "\n", ")", "\n", "", "elif", "pool", "==", "\"spatial_v2\"", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "_feature_size", ",", "2048", ")", ",", "\n", "normalization", "(", "2048", ")", ",", "\n", "nn", ".", "SiLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Unexpected {pool} pooling\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.convert_to_fp16": [[1135, 1142], ["unet2.EncoderUNetModel.input_blocks.apply", "unet2.EncoderUNetModel.middle_block.apply", "unet2.EncoderUNetModel.out.apply"], "methods", ["None"], ["", "", "def", "convert_to_fp16", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float16.\n        \"\"\"", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "self", ".", "out", ".", "apply", "(", "convert_module_to_f16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.convert_to_fp32": [[1143, 1149], ["unet2.EncoderUNetModel.input_blocks.apply", "unet2.EncoderUNetModel.middle_block.apply"], "methods", ["None"], ["", "def", "convert_to_fp32", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the torso of the model to float32.\n        \"\"\"", "\n", "self", ".", "input_blocks", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "self", ".", "middle_block", ".", "apply", "(", "convert_module_to_f32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.EncoderUNetModel.forward": [[1150, 1182], ["unet2.EncoderUNetModel.time_embed", "x.type", "unet2.EncoderUNetModel.middle_block", "hs.append", "unet2.EncoderUNetModel.pool.startswith", "torch.timestep_embedding", "module", "hs.append", "unet2.EncoderUNetModel.pool.startswith", "results.append", "torch.cat", "torch.cat", "torch.cat", "h.type.type.type", "unet2.EncoderUNetModel.out", "h.type.type.type", "results.append", "h.type.type.type().mean", "h.type.type.type().mean", "h.type.type.type", "h.type.type.type"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.nn.timestep_embedding"], ["", "def", "forward", "(", "self", ",", "x", ",", "timesteps", ")", ":", "\n", "        ", "\"\"\"\n        Apply the model to an input batch.\n\n        :param x: an [N x C x ...] Tensor of inputs.\n        :param timesteps: a 1-D batch of timesteps.\n        :return: an [N x K] Tensor of outputs.\n        \"\"\"", "\n", "hs", "=", "[", "]", "\n", "emb", "=", "self", ".", "time_embed", "(", "timestep_embedding", "(", "timesteps", ",", "self", ".", "model_channels", ")", ")", "\n", "\n", "results", "=", "[", "]", "\n", "h", "=", "x", ".", "type", "(", "th", ".", "cuda", ".", "HalfTensor", ")", "\n", "\n", "for", "module", "in", "self", ".", "input_blocks", ":", "\n", "            ", "h", "=", "module", "(", "h", ",", "emb", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "if", "self", ".", "pool", ".", "startswith", "(", "\"spatial\"", ")", ":", "\n", "                ", "results", ".", "append", "(", "h", ".", "type", "(", "x", ".", "dtype", ")", ".", "mean", "(", "dim", "=", "(", "2", ",", "3", ")", ")", ")", "\n", "", "", "h", "=", "self", ".", "middle_block", "(", "h", ",", "emb", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "\n", "if", "self", ".", "pool", ".", "startswith", "(", "\"spatial\"", ")", ":", "\n", "            ", "results", ".", "append", "(", "h", ".", "type", "(", "x", ".", "dtype", ")", ".", "mean", "(", "dim", "=", "(", "2", ",", "3", ")", ")", ")", "\n", "h", "=", "th", ".", "cat", "(", "results", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"hi\")", "\n", "h", "=", "h", ".", "type", "(", "x", ".", "dtype", ")", "\n", "\n", "return", "self", ".", "out", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", ".", "type", "(", "x", ".", "dtype", ")", "\n", "return", "hs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.unet2.count_flops_attn": [[486, 504], ["int", "torch.DoubleTensor", "numpy.prod"], "function", ["None"], ["", "", "def", "count_flops_attn", "(", "model", ",", "_x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    A counter for the `thop` package to count the operations in an\n    attention operation.\n    Meant to be used like:\n        macs, params = thop.profile(\n            model,\n            inputs=(inputs, timestamps),\n            custom_ops={QKVAttention: QKVAttention.count_flops},\n        )\n    \"\"\"", "\n", "b", ",", "c", ",", "*", "spatial", "=", "y", "[", "0", "]", ".", "shape", "\n", "num_spatial", "=", "int", "(", "np", ".", "prod", "(", "spatial", ")", ")", "\n", "# We perform two matmuls with the same number of ops.", "\n", "# The first computes the weight matrix, the second computes", "\n", "# the combination of the value vectors.", "\n", "matmul_ops", "=", "2", "*", "b", "*", "(", "num_spatial", "**", "2", ")", "*", "c", "\n", "model", ".", "total_ops", "+=", "th", ".", "DoubleTensor", "(", "[", "matmul_ops", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_test.main": [[39, 139], ["create_argparser().parse_args", "print", "guided_diffusion.script_util.sr_create_model_and_diffusion", "print", "guided_diffusion.resample.create_named_schedule_sampler", "torch.utils.data.DataLoader", "torch.device", "torch.device", "model_clean.load_state_dict", "model_clean.to", "list", "print", "print", "torch.device", "torch.device", "valdata.ValDataNewReal", "torch.load", "torch.load", "model_clean.parameters", "torch.no_grad", "torch.no_grad", "enumerate", "sarddpm_test.create_argparser", "guided_diffusion.script_util.args_to_dict", "next", "model_kwargs1[].to", "model_kwargs1[].to.size", "model_kwargs1[].to.clone", "range", "cv2.cvtColor.clamp().to", "cv2.cvtColor.permute", "cv2.cvtColor.contiguous().cpu().numpy", "cv2.cvtColor", "print", "cv2.imwrite", "guided_diffusion.script_util.sr_model_and_diffusion_defaults().keys", "model_clean.parameters", "guided_diffusion.dist_util.dev", "range", "model_kwargs1.items", "diffusion.p_sample_loop", "cv2.cvtColor.clamp", "cv2.cvtColor.contiguous().cpu", "guided_diffusion.script_util.sr_model_and_diffusion_defaults", "cv2.cvtColor.contiguous", "single_img.clone.to", "v.to", "guided_diffusion.dist_util.dev", "guided_diffusion.dist_util.dev"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_create_model_and_diffusion", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.create_named_schedule_sampler", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.load_state_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_train.create_argparser", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.args_to_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.gaussian_diffusion.GaussianDiffusion.p_sample_loop", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_model_and_diffusion_defaults", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "create_argparser", "(", ")", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "\n", "model_clean", ",", "diffusion", "=", "sr_create_model_and_diffusion", "(", "\n", "**", "args_to_dict", "(", "args", ",", "sr_model_and_diffusion_defaults", "(", ")", ".", "keys", "(", ")", ")", "\n", ")", "\n", "\n", "\n", "print", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "\n", "schedule_sampler", "=", "create_named_schedule_sampler", "(", "args", ".", "schedule_sampler", ",", "diffusion", ")", "\n", "\n", "\n", "val_data", "=", "DataLoader", "(", "ValDataNewReal", "(", "dataset_path", "=", "val_dir", ")", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "#load_superres_dataval()", "\n", "\n", "device0", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "model_clean", ".", "load_state_dict", "(", "torch", ".", "load", "(", "resume_checkpoint_clean", ",", "map_location", "=", "\"cuda:0\"", ")", ")", "\n", "\n", "\n", "model_clean", ".", "to", "(", "device0", ")", "\n", "\n", "\n", "\n", "\n", "params", "=", "list", "(", "model_clean", ".", "parameters", "(", ")", ")", "\n", "\n", "print", "(", "'model clean device:'", ")", "\n", "print", "(", "next", "(", "model_clean", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "number", "=", "0", "\n", "\n", "\n", "for", "batch_id1", ",", "data_var", "in", "enumerate", "(", "val_data", ")", ":", "\n", "            ", "number", "=", "number", "+", "1", "\n", "clean_batch", ",", "model_kwargs1", "=", "data_var", "\n", "\n", "single_img", "=", "model_kwargs1", "[", "'SR'", "]", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "\n", "count", "=", "0", "\n", "[", "t1", ",", "t2", ",", "max_r", ",", "max_c", "]", "=", "single_img", ".", "size", "(", ")", "\n", "\n", "N", "=", "9", "\n", "\n", "val_inputv", "=", "single_img", ".", "clone", "(", ")", "\n", "\n", "for", "row", "in", "range", "(", "0", ",", "max_r", ",", "100", ")", ":", "\n", "                ", "for", "col", "in", "range", "(", "0", ",", "max_c", ",", "100", ")", ":", "\n", "\n", "\n", "                    ", "val_inputv", "[", ":", ",", ":", ",", ":", "row", ",", ":", "col", "]", "=", "single_img", "[", ":", ",", ":", ",", "max_r", "-", "row", ":", ",", "max_c", "-", "col", ":", "]", "\n", "val_inputv", "[", ":", ",", ":", ",", "row", ":", ",", "col", ":", "]", "=", "single_img", "[", ":", ",", ":", ",", ":", "max_r", "-", "row", ",", ":", "max_c", "-", "col", "]", "\n", "val_inputv", "[", ":", ",", ":", ",", "row", ":", ",", ":", "col", "]", "=", "single_img", "[", ":", ",", ":", ",", ":", "max_r", "-", "row", ",", "max_c", "-", "col", ":", "]", "\n", "val_inputv", "[", ":", ",", ":", ",", ":", "row", ",", "col", ":", "]", "=", "single_img", "[", ":", ",", ":", ",", "max_r", "-", "row", ":", ",", ":", "max_c", "-", "col", "]", "\n", "\n", "model_kwargs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "model_kwargs1", ".", "items", "(", ")", ":", "\n", "                        ", "if", "(", "'Index'", "in", "k", ")", ":", "\n", "                            ", "img_name", "=", "v", "\n", "", "elif", "(", "'SR'", "in", "k", ")", ":", "\n", "                            ", "model_kwargs", "[", "k", "]", "=", "val_inputv", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "model_kwargs", "[", "k", "]", "=", "v", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", "sample", "=", "diffusion", ".", "p_sample_loop", "(", "\n", "model_clean", ",", "\n", "(", "clean_batch", ".", "shape", "[", "0", "]", ",", "3", ",", "256", ",", "256", ")", ",", "\n", "clip_denoised", "=", "True", ",", "\n", "model_kwargs", "=", "model_kwargs", ",", "\n", ")", "\n", "\n", "\n", "\n", "if", "count", "==", "0", ":", "\n", "                        ", "sample_new", "=", "(", "1.0", "/", "N", ")", "*", "sample", "\n", "", "else", ":", "\n", "                        ", "sample_new", "[", ":", ",", ":", ",", "max_r", "-", "row", ":", ",", "max_c", "-", "col", ":", "]", "=", "sample_new", "[", ":", ",", ":", ",", "max_r", "-", "row", ":", ",", "max_c", "-", "col", ":", "]", "+", "(", "1.0", "/", "N", ")", "*", "sample", "[", ":", ",", ":", ",", ":", "row", ",", ":", "col", "]", "\n", "sample_new", "[", ":", ",", ":", ",", ":", "max_r", "-", "row", ",", ":", "max_c", "-", "col", "]", "=", "sample_new", "[", ":", ",", ":", ",", ":", "max_r", "-", "row", ",", ":", "max_c", "-", "col", "]", "+", "(", "1.0", "/", "N", ")", "*", "sample", "[", ":", ",", ":", ",", "row", ":", ",", "col", ":", "]", "\n", "sample_new", "[", ":", ",", ":", ",", ":", "max_r", "-", "row", ",", "max_c", "-", "col", ":", "]", "=", "sample_new", "[", ":", ",", ":", ",", ":", "max_r", "-", "row", ",", "max_c", "-", "col", ":", "]", "+", "(", "1.0", "/", "N", ")", "*", "sample", "[", ":", ",", ":", ",", "row", ":", ",", ":", "col", "]", "\n", "sample_new", "[", ":", ",", ":", ",", "max_r", "-", "row", ":", ",", ":", "max_c", "-", "col", "]", "=", "sample_new", "[", ":", ",", ":", ",", "max_r", "-", "row", ":", ",", ":", "max_c", "-", "col", "]", "+", "(", "1.0", "/", "N", ")", "*", "sample", "[", ":", ",", ":", ",", ":", "row", ",", "col", ":", "]", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "", "sample_new", "=", "(", "(", "sample_new", "+", "1", ")", "*", "127.5", ")", "\n", "sample_new", "=", "sample_new", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "sample_new", "=", "sample_new", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "sample_new", "=", "sample_new", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sample_new", "=", "sample_new", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "sample_new", "=", "cv2", ".", "cvtColor", "(", "sample_new", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "print", "(", "img_name", "[", "0", "]", ")", "\n", "cv2", ".", "imwrite", "(", "base_path", "+", "'pred_'", "+", "img_name", "[", "0", "]", ",", "sample_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_test.create_argparser": [[145, 164], ["dict", "dict.update", "argparse.ArgumentParser", "guided_diffusion.script_util.add_dict_to_argparser", "guided_diffusion.script_util.sr_model_and_diffusion_defaults"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.add_dict_to_argparser", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_model_and_diffusion_defaults"], ["", "", "", "def", "create_argparser", "(", ")", ":", "\n", "    ", "defaults", "=", "dict", "(", "\n", "data_dir", "=", "val_dir", ",", "\n", "schedule_sampler", "=", "\"uniform\"", ",", "\n", "lr", "=", "1e-4", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "lr_anneal_steps", "=", "0", ",", "\n", "batch_size", "=", "2", ",", "\n", "microbatch", "=", "1", ",", "\n", "ema_rate", "=", "\"0.9999\"", ",", "\n", "log_interval", "=", "100", ",", "\n", "save_interval", "=", "200", ",", "\n", "use_fp16", "=", "False", ",", "\n", "fp16_scale_growth", "=", "1e-3", ",", "\n", ")", "\n", "defaults", ".", "update", "(", "sr_model_and_diffusion_defaults", "(", ")", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "add_dict_to_argparser", "(", "parser", ",", "defaults", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValData.__init__": [[20, 40], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "crop_size", "=", "[", "256", ",", "256", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# train_list = train_data_dir + train_filename", "\n", "# with open(train_list) as f:", "\n", "#     contents = f.readlines()", "\n", "#     input_names = [i.strip() for i in contents]", "\n", "#     gt_names = [i.strip().replace('input','gt') for i in input_names]", "\n", "# self.train_data_dir = '/media/labuser/cb8bb1ad-451a-4aa4-870c-2d3eeafe2525/ECCV_2022/diffusion_ema_rain_imagenet/rain_sub1/'", "\n", "# self.train_data_dir = '/media/labuser/cb8bb1ad-451a-4aa4-870c-2d3eeafe2525/ICIP_Turbulence_files/Tubfaces89/300M/tubimages/'", "\n", "# self.train_data_dir = \"/media/malsha/47a8802b-e0b7-47a8-8a4d-1649cc3ad408/sar_optical/optical/\"", "\n", "\n", "\n", "self", ".", "noisy_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'noisy'", ")", "\n", "# self.noisy_path = dataset_path", "\n", "# self.clean_path = dataset_path", "\n", "self", ".", "clean_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'clean'", ")", "\n", "self", ".", "images_list", "=", "os", ".", "listdir", "(", "self", ".", "noisy_path", ")", "\n", "\n", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValData.__len__": [[41, 43], ["len", "os.listdir"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "os", ".", "listdir", "(", "self", ".", "noisy_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValData.__getitem__": [[44, 101], ["cv2.imread", "cv2.imread", "numpy.array", "numpy.array", "numpy.divide", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.transpose", "numpy.transpose", "numpy.transpose", "os.path.join", "os.path.join", "numpy.transpose.astype", "numpy.transpose.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_filename", "=", "self", ".", "images_list", "[", "idx", "]", "\n", "\n", "noisy_im", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "noisy_path", ",", "image_filename", ")", ")", "\n", "clean_im", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "clean_path", ",", "image_filename", ")", ")", "\n", "\n", "arr1", "=", "np", ".", "array", "(", "clean_im", ")", "\n", "arr2", "=", "np", ".", "array", "(", "noisy_im", ")", "\n", "arr3", "=", "arr1", "+", "1e-9", "\n", "arr3", "=", "np", ".", "divide", "(", "arr2", ",", "arr3", ")", "\n", "\n", "\n", "arr1", "=", "cv2", ".", "resize", "(", "arr1", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "arr2", "=", "cv2", ".", "resize", "(", "arr2", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "arr3", "=", "cv2", ".", "resize", "(", "arr3", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "## for grayscale images", "\n", "# arr1 = arr1[..., np.newaxis]", "\n", "# arr2 = arr2[..., np.newaxis]", "\n", "# arr3 = arr3[..., np.newaxis]", "\n", "\n", "# arr3 = np.square(arr3)", "\n", "\n", "# # for log data", "\n", "# arr1 = (arr1.astype(np.float32) + 1 )/256.0", "\n", "# arr2 = (arr2.astype(np.float32) + 1 )/256.0", "\n", "# arr1 = np.log(np.absolute(arr1))", "\n", "# arr2 = np.log(np.absolute(arr2))", "\n", "# # arr1 = arr1.astype(np.float32) / (0.5*np.log(256.0)) - 1", "\n", "# # arr2 = arr2.astype(np.float32) / (0.5*np.log(256.0)) - 1", "\n", "# arr1 = 2*(arr1.astype(np.float32) + np.log(256.0))/ np.log(256.0) - 1", "\n", "# arr2 = 2*(arr2.astype(np.float32) + np.log(256.0))/ np.log(256.0) - 1", "\n", "\n", "\n", "# ## correct normalization for log", "\n", "\n", "# arr1 = (arr1.astype(np.float32))/255.0", "\n", "# arr2 = (arr2.astype(np.float32))/255.0", "\n", "# arr1 = arr1*(math.exp(1)-math.exp(-1)) + math.exp(-1)", "\n", "# arr2 = arr2*(math.exp(1)-math.exp(-1)) + math.exp(-1)", "\n", "# arr1 = np.log(arr1)", "\n", "# arr2 = np.log(arr2)", "\n", "# arr1 = arr1.astype(np.float32)", "\n", "# arr2 = arr2.astype(np.float32)", "\n", "\n", "\n", "arr1", "=", "arr1", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "arr2", "=", "arr2", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "# arr3 = arr3.astype(np.float32) / 127.5 - 1", "\n", "# arr3 = arr3.astype(np.float32)", "\n", "\n", "arr2", "=", "np", ".", "transpose", "(", "arr2", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "arr1", "=", "np", ".", "transpose", "(", "arr1", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "arr3", "=", "np", ".", "transpose", "(", "arr3", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "# return arr3, {'SR': arr2, 'HR': arr1 , 'Index': image_filename}", "\n", "return", "arr1", ",", "{", "'SR'", ":", "arr2", ",", "'HR'", ":", "arr1", ",", "'Index'", ":", "image_filename", "}", "\n", "# return arr2, {'SR': arr2, 'HR': arr2 , 'Index': image_filename}", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValDataNew.__init__": [[107, 127], ["torch.Dataset.__init__", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "crop_size", "=", "[", "256", ",", "256", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# train_list = train_data_dir + train_filename", "\n", "# with open(train_list) as f:", "\n", "#     contents = f.readlines()", "\n", "#     input_names = [i.strip() for i in contents]", "\n", "#     gt_names = [i.strip().replace('input','gt') for i in input_names]", "\n", "# self.train_data_dir = '/media/labuser/cb8bb1ad-451a-4aa4-870c-2d3eeafe2525/ECCV_2022/diffusion_ema_rain_imagenet/rain_sub1/'", "\n", "# self.train_data_dir = '/media/labuser/cb8bb1ad-451a-4aa4-870c-2d3eeafe2525/ICIP_Turbulence_files/Tubfaces89/300M/tubimages/'", "\n", "# self.train_data_dir = \"/media/malsha/47a8802b-e0b7-47a8-8a4d-1649cc3ad408/sar_optical/optical/\"", "\n", "\n", "\n", "# self.noisy_path = os.path.join(dataset_path, 'noisy')", "\n", "self", ".", "noisy_path", "=", "dataset_path", "\n", "self", ".", "clean_path", "=", "dataset_path", "\n", "# self.clean_path = os.path.join(dataset_path, 'clean')", "\n", "self", ".", "images_list", "=", "os", ".", "listdir", "(", "self", ".", "noisy_path", ")", "\n", "\n", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValDataNew.__len__": [[128, 130], ["len", "os.listdir"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "os", ".", "listdir", "(", "self", ".", "noisy_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValDataNew.__getitem__": [[131, 168], ["cv2.imread", "cv2.cvtColor", "numpy.repeat", "seed.gamma().astype", "numpy.sqrt", "numpy.array", "numpy.array", "cv2.resize", "cv2.resize", "numpy.transpose", "numpy.transpose", "os.path.join", "seed.gamma", "numpy.transpose.astype", "numpy.transpose.astype", "numpy.float32"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_filename", "=", "self", ".", "images_list", "[", "idx", "]", "\n", "\n", "pil_image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "noisy_path", ",", "image_filename", ")", ")", "## Clean image", "\n", "\n", "pil_image", "=", "cv2", ".", "cvtColor", "(", "pil_image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "pil_image", "=", "np", ".", "repeat", "(", "pil_image", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "# print(pil_image.shape)", "\n", "\n", "\n", "im1", "=", "(", "(", "np", ".", "float32", "(", "pil_image", ")", "+", "1.0", ")", "/", "256.0", ")", "**", "2", "\n", "gamma_noise", "=", "seed", ".", "gamma", "(", "size", "=", "im1", ".", "shape", ",", "shape", "=", "1.0", ",", "scale", "=", "1.0", ")", ".", "astype", "(", "im1", ".", "dtype", ")", "\n", "syn_sar", "=", "np", ".", "sqrt", "(", "im1", "*", "gamma_noise", ")", "\n", "pil_image1", "=", "syn_sar", "*", "256", "-", "1", "## Noisy image", "\n", "\n", "\n", "\n", "arr1", "=", "np", ".", "array", "(", "pil_image", ")", "\n", "arr2", "=", "np", ".", "array", "(", "pil_image1", ")", "\n", "\n", "\n", "\n", "arr1", "=", "cv2", ".", "resize", "(", "arr1", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "arr2", "=", "cv2", ".", "resize", "(", "arr2", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "\n", "\n", "arr1", "=", "arr1", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "arr2", "=", "arr2", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "\n", "\n", "arr2", "=", "np", ".", "transpose", "(", "arr2", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "arr1", "=", "np", ".", "transpose", "(", "arr1", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "\n", "\n", "return", "arr1", ",", "{", "'SR'", ":", "arr2", ",", "'HR'", ":", "arr1", ",", "'Index'", ":", "image_filename", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValDataNewReal.__init__": [[172, 192], ["torch.Dataset.__init__", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "crop_size", "=", "[", "256", ",", "256", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# train_list = train_data_dir + train_filename", "\n", "# with open(train_list) as f:", "\n", "#     contents = f.readlines()", "\n", "#     input_names = [i.strip() for i in contents]", "\n", "#     gt_names = [i.strip().replace('input','gt') for i in input_names]", "\n", "# self.train_data_dir = '/media/labuser/cb8bb1ad-451a-4aa4-870c-2d3eeafe2525/ECCV_2022/diffusion_ema_rain_imagenet/rain_sub1/'", "\n", "# self.train_data_dir = '/media/labuser/cb8bb1ad-451a-4aa4-870c-2d3eeafe2525/ICIP_Turbulence_files/Tubfaces89/300M/tubimages/'", "\n", "# self.train_data_dir = \"/media/malsha/47a8802b-e0b7-47a8-8a4d-1649cc3ad408/sar_optical/optical/\"", "\n", "\n", "\n", "# self.noisy_path = os.path.join(dataset_path, 'noisy')", "\n", "self", ".", "noisy_path", "=", "dataset_path", "\n", "self", ".", "clean_path", "=", "dataset_path", "\n", "# self.clean_path = os.path.join(dataset_path, 'clean')", "\n", "self", ".", "images_list", "=", "os", ".", "listdir", "(", "self", ".", "noisy_path", ")", "\n", "\n", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValDataNewReal.__len__": [[193, 195], ["len", "os.listdir"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "os", ".", "listdir", "(", "self", ".", "noisy_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.valdata.ValDataNewReal.__getitem__": [[196, 270], ["cv2.imread", "numpy.repeat", "numpy.array", "numpy.array", "numpy.divide", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.transpose", "numpy.transpose", "numpy.transpose", "os.path.join", "numpy.transpose.astype", "numpy.transpose.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_filename", "=", "self", ".", "images_list", "[", "idx", "]", "\n", "\n", "pil_image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "noisy_path", ",", "image_filename", ")", ",", "0", ")", "## SAR image", "\n", "\n", "# pil_image = cv2.cvtColor(pil_image, cv2.COLOR_BGR2GRAY)", "\n", "pil_image", "=", "np", ".", "repeat", "(", "pil_image", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "# print(pil_image.shape)", "\n", "\n", "\n", "# im1 = ((np.float32(pil_image)+1.0)/256.0)**2", "\n", "# gamma_noise = seed.gamma(size=im1.shape, shape=1.0, scale=1.0).astype(im1.dtype)", "\n", "# syn_sar = np.sqrt(im1 * gamma_noise)", "\n", "# pil_image1 = syn_sar * 256-1   ## Noisy image", "\n", "\n", "# pil_image = np.repeat(pil_image[:,:,np.newaxis],3, axis=2)", "\n", "# pil_image1 = np.repeat(pil_image1[:,:,np.newaxis],3, axis=2)", "\n", "\n", "\n", "\n", "\n", "\n", "arr1", "=", "np", ".", "array", "(", "pil_image", ")", "\n", "arr2", "=", "np", ".", "array", "(", "pil_image", ")", "\n", "arr3", "=", "arr1", "+", "1e-9", "\n", "# print(arr3.dtype)", "\n", "arr3", "=", "np", ".", "divide", "(", "arr2", ",", "arr3", ")", "\n", "\n", "\n", "arr1", "=", "cv2", ".", "resize", "(", "arr1", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "arr2", "=", "cv2", ".", "resize", "(", "arr2", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "arr3", "=", "cv2", ".", "resize", "(", "arr3", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "## for grayscale images", "\n", "# arr1 = arr1[..., np.newaxis]", "\n", "# arr2 = arr2[..., np.newaxis]", "\n", "# arr3 = arr3[..., np.newaxis]", "\n", "\n", "# arr3 = np.square(arr3)", "\n", "\n", "# # for log data", "\n", "# arr1 = (arr1.astype(np.float32) + 1 )/256.0", "\n", "# arr2 = (arr2.astype(np.float32) + 1 )/256.0", "\n", "# arr1 = np.log(np.absolute(arr1))", "\n", "# arr2 = np.log(np.absolute(arr2))", "\n", "# # arr1 = arr1.astype(np.float32) / (0.5*np.log(256.0)) - 1", "\n", "# # arr2 = arr2.astype(np.float32) / (0.5*np.log(256.0)) - 1", "\n", "# arr1 = 2*(arr1.astype(np.float32) + np.log(256.0))/ np.log(256.0) - 1", "\n", "# arr2 = 2*(arr2.astype(np.float32) + np.log(256.0))/ np.log(256.0) - 1", "\n", "\n", "\n", "# ## correct normalization for log", "\n", "\n", "# arr1 = (arr1.astype(np.float32))/255.0", "\n", "# arr2 = (arr2.astype(np.float32))/255.0", "\n", "# arr1 = arr1*(math.exp(1)-math.exp(-1)) + math.exp(-1)", "\n", "# arr2 = arr2*(math.exp(1)-math.exp(-1)) + math.exp(-1)", "\n", "# arr1 = np.log(arr1)", "\n", "# arr2 = np.log(arr2)", "\n", "# arr1 = arr1.astype(np.float32)", "\n", "# arr2 = arr2.astype(np.float32)", "\n", "\n", "\n", "arr1", "=", "arr1", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "arr2", "=", "arr2", ".", "astype", "(", "np", ".", "float32", ")", "/", "127.5", "-", "1", "\n", "# arr3 = arr3.astype(np.float32) / 127.5 - 1", "\n", "# arr3 = arr3.astype(np.float32)", "\n", "\n", "arr2", "=", "np", ".", "transpose", "(", "arr2", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "arr1", "=", "np", ".", "transpose", "(", "arr1", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "arr3", "=", "np", ".", "transpose", "(", "arr3", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "# return arr3, {'SR': arr2, 'HR': arr1 , 'Index': image_filename}", "\n", "return", "arr1", ",", "{", "'SR'", ":", "arr2", ",", "'HR'", ":", "arr1", ",", "'Index'", ":", "image_filename", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_train.main": [[30, 79], ["create_argparser().parse_args", "guided_diffusion.dist_util.setup_dist", "guided_diffusion.logger.configure", "guided_diffusion.logger.log", "guided_diffusion.script_util.sr_create_model_and_diffusion", "model.to", "guided_diffusion.resample.create_named_schedule_sampler", "guided_diffusion.logger.log", "torch.utils.data.DataLoader", "print", "sarddpm_train.load_sar_data", "guided_diffusion.logger.log", "guided_diffusion.train_util.TrainLoop().run_loop", "guided_diffusion.dist_util.dev", "valdata.ValDataNew", "sarddpm_train.create_argparser", "guided_diffusion.script_util.args_to_dict", "guided_diffusion.train_util.TrainLoop", "guided_diffusion.script_util.sr_model_and_diffusion_defaults().keys", "guided_diffusion.script_util.sr_model_and_diffusion_defaults"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.setup_dist", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.configure", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_create_model_and_diffusion", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.resample.create_named_schedule_sampler", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_train.load_sar_data", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.train_util.TrainLoop.run_loop", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.dist_util.dev", "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_train.create_argparser", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.args_to_dict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_model_and_diffusion_defaults"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "create_argparser", "(", ")", ".", "parse_args", "(", ")", "\n", "\n", "dist_util", ".", "setup_dist", "(", ")", "\n", "logger", ".", "configure", "(", ")", "\n", "\n", "logger", ".", "log", "(", "\"creating model...\"", ")", "\n", "model", ",", "diffusion", "=", "sr_create_model_and_diffusion", "(", "\n", "**", "args_to_dict", "(", "args", ",", "sr_model_and_diffusion_defaults", "(", ")", ".", "keys", "(", ")", ")", "\n", ")", "\n", "model", ".", "to", "(", "dist_util", ".", "dev", "(", ")", ")", "\n", "schedule_sampler", "=", "create_named_schedule_sampler", "(", "args", ".", "schedule_sampler", ",", "diffusion", ")", "\n", "\n", "logger", ".", "log", "(", "\"creating data loader...\"", ")", "\n", "\n", "\n", "\n", "val_data", "=", "DataLoader", "(", "ValDataNew", "(", "dataset_path", "=", "val_dir", ")", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "\n", "print", "(", "args", ")", "\n", "data", "=", "load_sar_data", "(", "\n", "args", ".", "data_dir", ",", "\n", "train_dir", ",", "\n", "args", ".", "batch_size", ",", "\n", "large_size", "=", "256", ",", "\n", "small_size", "=", "256", ",", "\n", "class_cond", "=", "False", ",", "\n", ")", "\n", "\n", "logger", ".", "log", "(", "\"training...\"", ")", "\n", "TrainLoop", "(", "\n", "model", "=", "model", ",", "\n", "diffusion", "=", "diffusion", ",", "\n", "data", "=", "data", ",", "\n", "val_dat", "=", "val_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "microbatch", "=", "args", ".", "microbatch", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "ema_rate", "=", "args", ".", "ema_rate", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "save_interval", "=", "args", ".", "save_interval", ",", "\n", "resume_checkpoint", "=", "args", ".", "resume_checkpoint", ",", "\n", "args", "=", "args", ",", "\n", "use_fp16", "=", "args", ".", "use_fp16", ",", "\n", "fp16_scale_growth", "=", "args", ".", "fp16_scale_growth", ",", "\n", "schedule_sampler", "=", "schedule_sampler", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "lr_anneal_steps", "=", "args", ".", "lr_anneal_steps", ",", "\n", ")", ".", "run_loop", "(", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_train.load_sar_data": [[82, 92], ["guided_diffusion.image_datasets.load_data"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.image_datasets.load_data"], ["", "def", "load_sar_data", "(", "data_dir", ",", "gt_dirs", ",", "batch_size", ",", "large_size", ",", "small_size", ",", "class_cond", "=", "False", ")", ":", "\n", "    ", "data", "=", "load_data", "(", "\n", "data_dir", "=", "data_dir", ",", "\n", "gt_dir", "=", "gt_dirs", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "image_size", "=", "large_size", ",", "\n", "class_cond", "=", "False", ",", "\n", ")", "\n", "for", "large_batch", ",", "model_kwargs", "in", "data", ":", "\n", "        ", "yield", "large_batch", ",", "model_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.scripts.sarddpm_train.create_argparser": [[94, 115], ["dict", "dict.update", "argparse.ArgumentParser", "guided_diffusion.script_util.add_dict_to_argparser", "guided_diffusion.script_util.sr_model_and_diffusion_defaults"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.add_dict_to_argparser", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.script_util.sr_model_and_diffusion_defaults"], ["", "", "def", "create_argparser", "(", ")", ":", "\n", "    ", "defaults", "=", "dict", "(", "\n", "data_dir", "=", "train_dir", ",", "\n", "schedule_sampler", "=", "\"uniform\"", ",", "\n", "lr", "=", "1e-4", ",", "\n", "# lr=5e-5,", "\n", "weight_decay", "=", "0.0", ",", "\n", "lr_anneal_steps", "=", "0", ",", "\n", "batch_size", "=", "2", ",", "\n", "microbatch", "=", "1", ",", "\n", "ema_rate", "=", "\"0.9999\"", ",", "\n", "log_interval", "=", "1000", ",", "\n", "save_interval", "=", "10", ",", "\n", "resume_checkpoint", "=", "pretrained_weight_path", ",", "\n", "use_fp16", "=", "False", ",", "\n", "fp16_scale_growth", "=", "1e-3", ",", "\n", ")", "\n", "defaults", ".", "update", "(", "sr_model_and_diffusion_defaults", "(", ")", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "add_dict_to_argparser", "(", "parser", ",", "defaults", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.__init__": [[7, 42], ["wandb_logger.WandbLogger._wandb.init", "ImportError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "wandb", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "\"To use the Weights and Biases Logger please install wandb.\"", "\n", "\"Run `pip install wandb` to install it.\"", "\n", ")", "\n", "\n", "", "self", ".", "_wandb", "=", "wandb", "\n", "\n", "# Initialize a W&B run", "\n", "if", "self", ".", "_wandb", ".", "run", "is", "None", ":", "\n", "            ", "self", ".", "_wandb", ".", "init", "(", "\n", "project", "=", "'diff_derain'", ",", "\n", "dir", "=", "'./experiments'", "\n", ")", "\n", "\n", "", "self", ".", "config", "=", "self", ".", "_wandb", ".", "config", "\n", "\n", "# if self.config.get('log_eval', None):", "\n", "#     self.eval_table = self._wandb.Table(columns=['fake_image', ", "\n", "#                                                  'sr_image', ", "\n", "#                                                  'hr_image',", "\n", "#                                                  'psnr',", "\n", "#                                                  'ssim'])", "\n", "# else:", "\n", "self", ".", "eval_table", "=", "None", "\n", "\n", "# if self.config.get('log_infer', None):", "\n", "#     self.infer_table = self._wandb.Table(columns=['fake_image', ", "\n", "#                                                  'sr_image', ", "\n", "#                                                  'hr_image'])", "\n", "# else:", "\n", "self", ".", "infer_table", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.log_metrics": [[43, 50], ["wandb_logger.WandbLogger._wandb.log"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "log_metrics", "(", "self", ",", "metrics", ",", "commit", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Log train/validation metrics onto W&B.\n\n        metrics: dictionary of metrics to be logged\n        \"\"\"", "\n", "self", ".", "_wandb", ".", "log", "(", "metrics", ",", "commit", "=", "commit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.log_image": [[51, 59], ["wandb_logger.WandbLogger._wandb.log", "wandb_logger.WandbLogger._wandb.Image"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "log_image", "(", "self", ",", "key_name", ",", "image_array", ")", ":", "\n", "        ", "\"\"\"\n        Log image array onto W&B.\n\n        key_name: name of the key \n        image_array: numpy array of image.\n        \"\"\"", "\n", "self", ".", "_wandb", ".", "log", "(", "{", "key_name", ":", "self", ".", "_wandb", ".", "Image", "(", "image_array", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.log_images": [[60, 68], ["wandb_logger.WandbLogger._wandb.log", "wandb_logger.WandbLogger._wandb.Image"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "def", "log_images", "(", "self", ",", "key_name", ",", "list_images", ")", ":", "\n", "        ", "\"\"\"\n        Log list of image array onto W&B\n\n        key_name: name of the key \n        list_images: list of numpy image arrays\n        \"\"\"", "\n", "self", ".", "_wandb", ".", "log", "(", "{", "key_name", ":", "[", "self", ".", "_wandb", ".", "Image", "(", "img", ")", "for", "img", "in", "list_images", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.log_checkpoint": [[69, 88], ["wandb_logger.WandbLogger._wandb.Artifact", "os.path.join", "os.path.join", "wandb_logger.WandbLogger.add_file", "wandb_logger.WandbLogger.add_file", "wandb_logger.WandbLogger._wandb.log_artifact"], "methods", ["None"], ["", "def", "log_checkpoint", "(", "self", ",", "current_epoch", ",", "current_step", ")", ":", "\n", "        ", "\"\"\"\n        Log the model checkpoint as W&B artifacts\n\n        current_epoch: the current epoch \n        current_step: the current batch step\n        \"\"\"", "\n", "model_artifact", "=", "self", ".", "_wandb", ".", "Artifact", "(", "\n", "self", ".", "_wandb", ".", "run", ".", "id", "+", "\"_model\"", ",", "type", "=", "\"model\"", "\n", ")", "\n", "\n", "gen_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "path", "[", "'checkpoint'", "]", ",", "'I{}_E{}_gen.pth'", ".", "format", "(", "current_step", ",", "current_epoch", ")", ")", "\n", "opt_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "path", "[", "'checkpoint'", "]", ",", "'I{}_E{}_opt.pth'", ".", "format", "(", "current_step", ",", "current_epoch", ")", ")", "\n", "\n", "model_artifact", ".", "add_file", "(", "gen_path", ")", "\n", "model_artifact", ".", "add_file", "(", "opt_path", ")", "\n", "self", ".", "_wandb", ".", "log_artifact", "(", "model_artifact", ",", "aliases", "=", "[", "\"latest\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.log_eval_data": [[89, 106], ["wandb_logger.WandbLogger.eval_table.add_data", "wandb_logger.WandbLogger.infer_table.add_data", "wandb_logger.WandbLogger._wandb.Image", "wandb_logger.WandbLogger._wandb.Image", "wandb_logger.WandbLogger._wandb.Image", "wandb_logger.WandbLogger._wandb.Image", "wandb_logger.WandbLogger._wandb.Image", "wandb_logger.WandbLogger._wandb.Image"], "methods", ["None"], ["", "def", "log_eval_data", "(", "self", ",", "fake_img", ",", "sr_img", ",", "hr_img", ",", "psnr", "=", "None", ",", "ssim", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add data row-wise to the initialized table.\n        \"\"\"", "\n", "if", "psnr", "is", "not", "None", "and", "ssim", "is", "not", "None", ":", "\n", "            ", "self", ".", "eval_table", ".", "add_data", "(", "\n", "self", ".", "_wandb", ".", "Image", "(", "fake_img", ")", ",", "\n", "self", ".", "_wandb", ".", "Image", "(", "sr_img", ")", ",", "\n", "self", ".", "_wandb", ".", "Image", "(", "hr_img", ")", ",", "\n", "psnr", ",", "\n", "ssim", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "infer_table", ".", "add_data", "(", "\n", "self", ".", "_wandb", ".", "Image", "(", "fake_img", ")", ",", "\n", "self", ".", "_wandb", ".", "Image", "(", "sr_img", ")", ",", "\n", "self", ".", "_wandb", ".", "Image", "(", "hr_img", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.wandb_logger.WandbLogger.log_eval_table": [[108, 116], ["wandb_logger.WandbLogger._wandb.log", "wandb_logger.WandbLogger._wandb.log"], "methods", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log", "home.repos.pwc.inspect_result.malshav_sar_ddpm.guided_diffusion.logger.log"], ["", "", "def", "log_eval_table", "(", "self", ",", "commit", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Log the table\n        \"\"\"", "\n", "if", "self", ".", "eval_table", ":", "\n", "            ", "self", ".", "_wandb", ".", "log", "(", "{", "'eval_data'", ":", "self", ".", "eval_table", "}", ",", "commit", "=", "commit", ")", "\n", "", "elif", "self", ".", "infer_table", ":", "\n", "            ", "self", ".", "_wandb", ".", "log", "(", "{", "'infer_data'", ":", "self", ".", "infer_table", "}", ",", "commit", "=", "commit", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.tensor2img": [[8, 35], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "-", "1", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "\n", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.save_img": [[37, 39], ["cv2.imwrite", "cv2.cvtColor"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "# cv2.imwrite(img_path, img)", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.calculate_psnr": [[42, 50], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.ssim": [[52, 73], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.calculate_ssim": [[75, 94], ["ValueError", "metrics.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "metrics.ssim", "metrics.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.ssim", "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.ssim", "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.metrics.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.NoneDict.__missing__": [[98, 100], ["None"], "methods", ["None"], ["", "", "", "class", "JSONOutputFormat", "(", "KVWriter", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.mkdirs": [[9, 15], ["isinstance", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "function", ["None"], ["import", "os", ".", "path", "as", "osp", "\n", "import", "json", "\n", "import", "time", "\n", "import", "datetime", "\n", "import", "tempfile", "\n", "import", "warnings", "\n", "from", "collections", "import", "defaultdict", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.get_timestamp": [[17, 19], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["\n", "DEBUG", "=", "10", "\n", "INFO", "=", "20", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.parse": [[21, 95], ["json.loads", "os.path.join", "os.path.join", "opt[].items", "print", "open", "len", "logger.get_timestamp", "os.path.join", "os.path.join", "logger.mkdirs", "int", "gpu_ids.split", "str", "line.split"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.get_timestamp", "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.mkdirs"], ["ERROR", "=", "40", "\n", "\n", "DISABLED", "=", "50", "\n", "\n", "\n", "class", "KVWriter", "(", "object", ")", ":", "\n", "    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "SeqWriter", "(", "object", ")", ":", "\n", "    ", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "HumanOutputFormat", "(", "KVWriter", ",", "SeqWriter", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "filename_or_file", ")", ":", "\n", "        ", "if", "isinstance", "(", "filename_or_file", ",", "str", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "filename_or_file", ",", "\"wt\"", ")", "\n", "self", ".", "own_file", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "hasattr", "(", "filename_or_file", ",", "\"read\"", ")", ",", "(", "\n", "\"expected file or str, got %s\"", "%", "filename_or_file", "\n", ")", "\n", "self", ".", "file", "=", "filename_or_file", "\n", "self", ".", "own_file", "=", "False", "\n", "\n", "", "", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "val", ",", "\"__float__\"", ")", ":", "\n", "                ", "valstr", "=", "\"%-8.3g\"", "%", "val", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "if", "len", "(", "key2str", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"WARNING: tried to write empty key-value dict\"", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "", "dashes", "=", "\"-\"", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "\n", "\"| %s%s | %s%s |\"", "\n", "%", "(", "key", ",", "\" \"", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "val", ",", "\" \"", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ")", "\n", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "maxlen", "=", "30", "\n", "return", "s", "[", ":", "maxlen", "-", "3", "]", "+", "\"...\"", "if", "len", "(", "s", ")", ">", "maxlen", "else", "s", "\n", "\n", "", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "seq", "=", "list", "(", "seq", ")", "\n", "for", "(", "i", ",", "elem", ")", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "elem", ")", "\n", "if", "i", "<", "len", "(", "seq", ")", "-", "1", ":", "# add space unless this is the last one", "\n", "                ", "self", ".", "file", ".", "write", "(", "\" \"", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "own_file", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.dict_to_nonedict": [[103, 113], ["isinstance", "dict", "opt.items", "logger.NoneDict", "isinstance", "logger.dict_to_nonedict", "logger.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.dict_to_nonedict", "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.dict_to_nonedict"], ["        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"dtype\"", ")", ":", "\n", "                ", "kvs", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "\"\\n\"", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n", "\n", "", "", "class", "CSVOutputFormat", "(", "KVWriter", ")", ":", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.dict2str": [[115, 126], ["opt.items", "isinstance", "logger.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.dict2str"], ["        ", "self", ".", "file", "=", "open", "(", "filename", ",", "\"w+t\"", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "sep", "=", "\",\"", "\n", "\n", "", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Add our current row to the history", "\n", "        ", "extra_keys", "=", "list", "(", "kvs", ".", "keys", "(", ")", "-", "self", ".", "keys", ")", "\n", "extra_keys", ".", "sort", "(", ")", "\n", "if", "extra_keys", ":", "\n", "            ", "self", ".", "keys", ".", "extend", "(", "extra_keys", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "lines", "=", "self", ".", "file", ".", "readlines", "(", ")", "\n"]], "home.repos.pwc.inspect_result.malshav_sar_ddpm.core.logger.setup_logger": [[128, 142], ["logging.getLogger", "logging.Formatter", "os.path.join", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "                ", "if", "i", ">", "0", ":", "\n", "                    ", "self", ".", "file", ".", "write", "(", "\",\"", ")", "\n", "", "self", ".", "file", ".", "write", "(", "k", ")", "\n", "", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "sep", "*", "len", "(", "extra_keys", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "\",\"", ")", "\n", "", "v", "=", "kvs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "str", "(", "v", ")", ")", "\n"]]}