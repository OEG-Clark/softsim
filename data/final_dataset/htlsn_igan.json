{"home.repos.pwc.inspect_result.htlsn_igan.None.deconv.deconv2d.__call__": [[29, 129], ["deconv._kernel", "deconv._stride", "deconv.deconv2d.variable", "deconv.get2d_deconv_output_size", "tensorflow.nn.conv2d_transpose", "prettytensor.pretty_tensor_class.layers.add_l2loss", "books.add_scalar_summary", "input_layer.with_tensor", "len", "ValueError", "ValueError", "deconv.deconv2d.variable", "tensorflow.reduce_mean", "input_layer.with_tensor().batch_normalize", "prettytensor.pretty_tensor_class.layers.apply_activation", "prettytensor.pretty_tensor_class.layers.xavier_init", "ValueError", "tensorflow.zeros_initializer", "prettytensor.pretty_tensor_class.layers.spatial_slice_zeros", "isinstance", "tensorflow.truncated_normal_initializer", "input_layer.with_tensor"], "methods", ["home.repos.pwc.inspect_result.htlsn_igan.None.deconv._kernel", "home.repos.pwc.inspect_result.htlsn_igan.None.deconv._stride", "home.repos.pwc.inspect_result.htlsn_igan.None.deconv.get2d_deconv_output_size"], ["  ", "def", "__call__", "(", "self", ",", "\n", "input_layer", ",", "\n", "kernel", ",", "\n", "depth", ",", "\n", "name", "=", "PROVIDED", ",", "\n", "stride", "=", "None", ",", "\n", "activation_fn", "=", "None", ",", "\n", "l2loss", "=", "None", ",", "\n", "init", "=", "None", ",", "\n", "stddev", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "edges", "=", "PAD_SAME", ",", "\n", "batch_normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"Adds a convolution to the stack of operations.\n    The current head must be a rank 4 Tensor.\n    Args:\n      input_layer: The chainable object, supplied.\n      kernel: The size of the patch for the pool, either an int or a length 1 or\n        2 sequence (if length 1 or int, it is expanded).\n      depth: The depth of the new Tensor.\n      name: The name for this operation is also used to create/find the\n        parameter variables.\n      stride: The strides as a length 1, 2 or 4 sequence or an integer. If an\n        int, length 1 or 2, the stride in the first and last dimensions are 1.\n      activation_fn: A tuple of (activation_function, extra_parameters). Any\n        function that takes a tensor as its first argument can be used. More\n        common functions will have summaries added (e.g. relu).\n      l2loss: Set to a value greater than 0 to use L2 regularization to decay\n        the weights.\n      init: An optional initialization. If not specified, uses Xavier\n        initialization.\n      stddev: A standard deviation to use in parameter initialization.\n      bias: Set to False to not have a bias.\n      edges: Either SAME to use 0s for the out of bounds area or VALID to shrink\n        the output size and only uses valid input pixels.\n      batch_normalize: Set to True to batch_normalize this layer.\n    Returns:\n      Handle to the generated layer.\n    Raises:\n      ValueError: If head is not a rank 4 tensor or the  depth of the input\n        (4th dim) is not known.\n    \"\"\"", "\n", "if", "len", "(", "input_layer", ".", "shape", ")", "!=", "4", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Cannot perform conv2d on tensor with shape %s'", "%", "input_layer", ".", "shape", ")", "\n", "", "if", "input_layer", ".", "shape", "[", "3", "]", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Input depth must be known'", ")", "\n", "", "kernel", "=", "_kernel", "(", "kernel", ")", "\n", "stride", "=", "_stride", "(", "stride", ")", "\n", "size", "=", "[", "kernel", "[", "0", "]", ",", "kernel", "[", "1", "]", ",", "depth", ",", "input_layer", ".", "shape", "[", "3", "]", "]", "\n", "\n", "books", "=", "input_layer", ".", "bookkeeper", "\n", "if", "init", "is", "None", ":", "\n", "      ", "if", "stddev", "is", "None", ":", "\n", "        ", "patch_size", "=", "size", "[", "0", "]", "*", "size", "[", "1", "]", "\n", "init", "=", "layers", ".", "xavier_init", "(", "size", "[", "2", "]", "*", "patch_size", ",", "size", "[", "3", "]", "*", "patch_size", ")", "\n", "", "elif", "stddev", ":", "\n", "        ", "init", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "else", ":", "\n", "        ", "init", "=", "tf", ".", "zeros_initializer", "\n", "", "", "elif", "stddev", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Do not set both init and stddev.'", ")", "\n", "", "dtype", "=", "input_layer", ".", "tensor", ".", "dtype", "\n", "params", "=", "self", ".", "variable", "(", "'weights'", ",", "size", ",", "init", ",", "dt", "=", "dtype", ")", "\n", "\n", "input_height", "=", "input_layer", ".", "shape", "[", "1", "]", "\n", "input_width", "=", "input_layer", ".", "shape", "[", "2", "]", "\n", "\n", "filter_height", "=", "kernel", "[", "0", "]", "\n", "filter_width", "=", "kernel", "[", "1", "]", "\n", "\n", "row_stride", "=", "stride", "[", "1", "]", "\n", "col_stride", "=", "stride", "[", "2", "]", "\n", "\n", "out_rows", ",", "out_cols", "=", "get2d_deconv_output_size", "(", "input_height", ",", "input_width", ",", "filter_height", ",", "\n", "filter_width", ",", "row_stride", ",", "col_stride", ",", "edges", ")", "\n", "\n", "output_shape", "=", "[", "input_layer", ".", "shape", "[", "0", "]", ",", "out_rows", ",", "out_cols", ",", "depth", "]", "\n", "y", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input_layer", ",", "params", ",", "output_shape", ",", "stride", ",", "edges", ")", "\n", "layers", ".", "add_l2loss", "(", "books", ",", "params", ",", "l2loss", ")", "\n", "if", "bias", ":", "\n", "      ", "y", "+=", "self", ".", "variable", "(", "\n", "'bias'", ",", "\n", "[", "size", "[", "-", "2", "]", "]", ",", "\n", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dt", "=", "dtype", ")", "\n", "", "books", ".", "add_scalar_summary", "(", "\n", "tf", ".", "reduce_mean", "(", "\n", "layers", ".", "spatial_slice_zeros", "(", "y", ")", ")", ",", "'%s/zeros_spatial'", "%", "y", ".", "op", ".", "name", ")", "\n", "if", "batch_normalize", ":", "\n", "      ", "y", "=", "input_layer", ".", "with_tensor", "(", "y", ")", ".", "batch_normalize", "(", ")", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "if", "not", "isinstance", "(", "activation_fn", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "activation_fn", "=", "(", "activation_fn", ",", ")", "\n", "", "y", "=", "layers", ".", "apply_activation", "(", "\n", "books", ",", "\n", "y", ",", "\n", "activation_fn", "[", "0", "]", ",", "\n", "activation_args", "=", "activation_fn", "[", "1", ":", "]", ")", "\n", "", "return", "input_layer", ".", "with_tensor", "(", "y", ")", "\n", "# pylint: enable=redefined-outer-name,invalid-name", "\n"]], "home.repos.pwc.inspect_result.htlsn_igan.None.deconv.get2d_deconv_output_size": [[133, 162], ["tensorflow.python.framework.tensor_shape.as_dimension", "tensorflow.python.framework.tensor_shape.as_dimension", "tensorflow.python.framework.tensor_shape.as_dimension", "tensorflow.python.framework.tensor_shape.as_dimension", "int", "int", "ValueError"], "function", ["None"], ["", "", "def", "get2d_deconv_output_size", "(", "input_height", ",", "input_width", ",", "filter_height", ",", "\n", "filter_width", ",", "row_stride", ",", "col_stride", ",", "padding_type", ")", ":", "\n", "    ", "\"\"\"Returns the number of rows and columns in a convolution/pooling output.\"\"\"", "\n", "input_height", "=", "tensor_shape", ".", "as_dimension", "(", "input_height", ")", "\n", "input_width", "=", "tensor_shape", ".", "as_dimension", "(", "input_width", ")", "\n", "filter_height", "=", "tensor_shape", ".", "as_dimension", "(", "filter_height", ")", "\n", "filter_width", "=", "tensor_shape", ".", "as_dimension", "(", "filter_width", ")", "\n", "row_stride", "=", "int", "(", "row_stride", ")", "\n", "col_stride", "=", "int", "(", "col_stride", ")", "\n", "\n", "# Compute number of rows in the output, based on the padding.", "\n", "if", "input_height", ".", "value", "is", "None", "or", "filter_height", ".", "value", "is", "None", ":", "\n", "      ", "out_rows", "=", "None", "\n", "", "elif", "padding_type", "==", "\"VALID\"", ":", "\n", "      ", "out_rows", "=", "(", "input_height", ".", "value", "-", "1", ")", "*", "row_stride", "+", "filter_height", ".", "value", "\n", "", "elif", "padding_type", "==", "\"SAME\"", ":", "\n", "      ", "out_rows", "=", "input_height", ".", "value", "*", "row_stride", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Invalid value for padding: %r\"", "%", "padding_type", ")", "\n", "\n", "# Compute number of columns in the output, based on the padding.", "\n", "", "if", "input_width", ".", "value", "is", "None", "or", "filter_width", ".", "value", "is", "None", ":", "\n", "      ", "out_cols", "=", "None", "\n", "", "elif", "padding_type", "==", "\"VALID\"", ":", "\n", "      ", "out_cols", "=", "(", "input_width", ".", "value", "-", "1", ")", "*", "col_stride", "+", "filter_width", ".", "value", "\n", "", "elif", "padding_type", "==", "\"SAME\"", ":", "\n", "      ", "out_cols", "=", "input_width", ".", "value", "*", "col_stride", "\n", "\n", "", "return", "out_rows", ",", "out_cols", "\n", "\n"]], "home.repos.pwc.inspect_result.htlsn_igan.None.deconv._kernel": [[163, 178], ["isinstance", "len", "len"], "function", ["None"], ["", "def", "_kernel", "(", "kernel_spec", ")", ":", "\n", "  ", "\"\"\"Expands the kernel spec into a length 2 list.\n  Args:\n    kernel_spec: An integer or a length 1 or 2 sequence that is expanded to a\n      list.\n  Returns:\n    A length 2 list.\n  \"\"\"", "\n", "if", "isinstance", "(", "kernel_spec", ",", "int", ")", ":", "\n", "    ", "return", "[", "kernel_spec", ",", "kernel_spec", "]", "\n", "", "elif", "len", "(", "kernel_spec", ")", "==", "1", ":", "\n", "    ", "return", "[", "kernel_spec", "[", "0", "]", ",", "kernel_spec", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "    ", "assert", "len", "(", "kernel_spec", ")", "==", "2", "\n", "return", "kernel_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.htlsn_igan.None.deconv._stride": [[180, 198], ["isinstance", "len", "len", "len"], "function", ["None"], ["", "", "def", "_stride", "(", "stride_spec", ")", ":", "\n", "  ", "\"\"\"Expands the stride spec into a length 4 list.\n  Args:\n    stride_spec: None, an integer or a length 1, 2, or 4 sequence.\n  Returns:\n    A length 4 list.\n  \"\"\"", "\n", "if", "stride_spec", "is", "None", ":", "\n", "    ", "return", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "", "elif", "isinstance", "(", "stride_spec", ",", "int", ")", ":", "\n", "    ", "return", "[", "1", ",", "stride_spec", ",", "stride_spec", ",", "1", "]", "\n", "", "elif", "len", "(", "stride_spec", ")", "==", "1", ":", "\n", "    ", "return", "[", "1", ",", "stride_spec", "[", "0", "]", ",", "stride_spec", "[", "0", "]", ",", "1", "]", "\n", "", "elif", "len", "(", "stride_spec", ")", "==", "2", ":", "\n", "    ", "return", "[", "1", ",", "stride_spec", "[", "0", "]", ",", "stride_spec", "[", "1", "]", ",", "1", "]", "\n", "", "else", ":", "\n", "    ", "assert", "len", "(", "stride_spec", ")", "==", "4", "\n", "return", "stride_spec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.htlsn_igan.None.util.maybe_download": [[9, 16], ["os.path.exists", "logger.info", "util.download"], "function", ["home.repos.pwc.inspect_result.htlsn_igan.None.util.download"], ["def", "maybe_download", "(", "url", ",", "dest", ")", ":", "\n", "    ", "\"\"\"Download the url to dest if necessary, optionally checking file\n    integrity.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Downloading %s to %s'", ",", "url", ",", "dest", ")", "\n", "download", "(", "url", ",", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.htlsn_igan.None.util.download": [[18, 25], ["requests.get", "open", "requests.get.iter_content", "f.write"], "function", ["None"], ["", "", "def", "download", "(", "url", ",", "dest", ")", ":", "\n", "    ", "\"\"\"Download the url to dest, overwriting dest if it already exists.\"\"\"", "\n", "response", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "with", "open", "(", "dest", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "            ", "if", "chunk", ":", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", ""]]}