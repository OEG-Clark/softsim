{"home.repos.pwc.inspect_result.rstrudel_segmenter.None.setup.read_requirements_file": [[10, 14], ["os.path.join", "os.path.dirname", "codecs.open", "os.path.realpath", "line.strip"], "function", ["None"], ["def", "read_requirements_file", "(", "filename", ")", ":", "\n", "    ", "req_file_path", "=", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "filename", ")", "\n", "with", "open", "(", "req_file_path", ")", "as", "f", ":", "\n", "        ", "return", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.load_config": [[7, 10], ["yaml.load", "open", "pathlib.Path"], "function", ["None"], ["def", "load_config", "(", ")", ":", "\n", "    ", "return", "yaml", ".", "load", "(", "\n", "open", "(", "Path", "(", "__file__", ")", ".", "parent", "/", "\"config.yml\"", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.check_os_environ": [[13, 17], ["ValueError"], "function", ["None"], ["", "def", "check_os_environ", "(", "key", ",", "use", ")", ":", "\n", "    ", "if", "key", "not", "in", "os", ".", "environ", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"{key} is not defined in the os variables, it is required for {use}.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.dataset_dir": [[20, 23], ["config.check_os_environ"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.check_os_environ"], ["", "", "def", "dataset_dir", "(", ")", ":", "\n", "    ", "check_os_environ", "(", "\"DATASET\"", ",", "\"data loading\"", ")", "\n", "return", "os", ".", "environ", "[", "\"DATASET\"", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.engine.train_one_epoch": [[11, 62], ["torch.nn.CrossEntropyLoss", "segm.utils.logger.MetricLogger", "model.train", "data_loader.set_epoch", "segm.utils.logger.MetricLogger.log_every", "len", "batch[].to", "batch[].long().to", "criterion.item", "optimizer.zero_grad", "lr_scheduler.step_update", "torch.cuda.synchronize", "segm.utils.logger.MetricLogger.update", "amp_autocast", "model.forward", "torch.nn.CrossEntropyLoss.", "math.isfinite", "print", "loss_scaler", "criterion.backward", "optimizer.step", "batch[].long", "criterion.item", "model.parameters"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.set_epoch", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.log_every", "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.scheduler.PolynomialLR.step_update", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Block.forward"], ["def", "train_one_epoch", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "optimizer", ",", "\n", "lr_scheduler", ",", "\n", "epoch", ",", "\n", "amp_autocast", ",", "\n", "loss_scaler", ",", "\n", ")", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "IGNORE_LABEL", ")", "\n", "logger", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "f\"Epoch: [{epoch}]\"", "\n", "print_freq", "=", "100", "\n", "\n", "model", ".", "train", "(", ")", "\n", "data_loader", ".", "set_epoch", "(", "epoch", ")", "\n", "num_updates", "=", "epoch", "*", "len", "(", "data_loader", ")", "\n", "for", "batch", "in", "logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "im", "=", "batch", "[", "\"im\"", "]", ".", "to", "(", "ptu", ".", "device", ")", "\n", "seg_gt", "=", "batch", "[", "\"segmentation\"", "]", ".", "long", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "with", "amp_autocast", "(", ")", ":", "\n", "            ", "seg_pred", "=", "model", ".", "forward", "(", "im", ")", "\n", "loss", "=", "criterion", "(", "seg_pred", ",", "seg_gt", ")", "\n", "\n", "", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ",", "force", "=", "True", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "            ", "loss_scaler", "(", "\n", "loss", ",", "\n", "optimizer", ",", "\n", "parameters", "=", "model", ".", "parameters", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "num_updates", "+=", "1", "\n", "lr_scheduler", ".", "step_update", "(", "num_updates", "=", "num_updates", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "logger", ".", "update", "(", "\n", "loss", "=", "loss", ".", "item", "(", ")", ",", "\n", "learning_rate", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.engine.evaluate": [[64, 117], ["torch.no_grad", "hasattr", "segm.utils.logger.MetricLogger", "model.eval", "segm.utils.logger.MetricLogger.log_every", "segm.metrics.gather_data", "segm.metrics.compute_metrics", "segm.metrics.compute_metrics.items", "seg_pred.argmax.cpu().numpy", "segm.utils.logger.MetricLogger.update", "im.to", "ori_shape[].item", "ori_shape[].item", "amp_autocast", "segm.model.utils.inference", "seg_pred.argmax.argmax", "seg_pred.argmax.cpu"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.log_every", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.gather_data", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.compute_metrics", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.inference"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "val_seg_gt", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "amp_autocast", ",", "\n", ")", ":", "\n", "    ", "model_without_ddp", "=", "model", "\n", "if", "hasattr", "(", "model", ",", "\"module\"", ")", ":", "\n", "        ", "model_without_ddp", "=", "model", ".", "module", "\n", "", "logger", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "\"Eval:\"", "\n", "print_freq", "=", "50", "\n", "\n", "val_seg_pred", "=", "{", "}", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch", "in", "logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "ims", "=", "[", "im", ".", "to", "(", "ptu", ".", "device", ")", "for", "im", "in", "batch", "[", "\"im\"", "]", "]", "\n", "ims_metas", "=", "batch", "[", "\"im_metas\"", "]", "\n", "ori_shape", "=", "ims_metas", "[", "0", "]", "[", "\"ori_shape\"", "]", "\n", "ori_shape", "=", "(", "ori_shape", "[", "0", "]", ".", "item", "(", ")", ",", "ori_shape", "[", "1", "]", ".", "item", "(", ")", ")", "\n", "filename", "=", "batch", "[", "\"im_metas\"", "]", "[", "0", "]", "[", "\"ori_filename\"", "]", "[", "0", "]", "\n", "\n", "with", "amp_autocast", "(", ")", ":", "\n", "            ", "seg_pred", "=", "utils", ".", "inference", "(", "\n", "model_without_ddp", ",", "\n", "ims", ",", "\n", "ims_metas", ",", "\n", "ori_shape", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "batch_size", "=", "1", ",", "\n", ")", "\n", "seg_pred", "=", "seg_pred", ".", "argmax", "(", "0", ")", "\n", "\n", "", "seg_pred", "=", "seg_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_seg_pred", "[", "filename", "]", "=", "seg_pred", "\n", "\n", "", "val_seg_pred", "=", "gather_data", "(", "val_seg_pred", ")", "\n", "scores", "=", "compute_metrics", "(", "\n", "val_seg_pred", ",", "\n", "val_seg_gt", ",", "\n", "data_loader", ".", "unwrapped", ".", "n_cls", ",", "\n", "ignore_index", "=", "IGNORE_LABEL", ",", "\n", "distributed", "=", "ptu", ".", "distributed", ",", "\n", ")", "\n", "\n", "for", "k", ",", "v", "in", "scores", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "update", "(", "**", "{", "f\"{k}\"", ":", "v", ",", "\"n\"", ":", "1", "}", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.accuracy": [[18, 37], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.max"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"\n    https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    Computes the accuracy over the k top predictions for the specified values of k\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "correct_k", "/=", "batch_size", "\n", "res", ".", "append", "(", "correct_k", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.gather_data": [[46, 82], ["torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "pathlib.Path", "pickle.dump", "torch.barrier", "os.path.expandvars", "os.path.expandvars", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "open", "range", "shutil.rmtree", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "pickle.load", "seg_pred.update", "torch.tensor.encode", "len", "open", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update"], ["def", "gather_data", "(", "seg_pred", ",", "tmp_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    distributed data gathering\n    prediction and ground truth are stored in a common tmp directory\n    and loaded on the master node to compute metrics\n    \"\"\"", "\n", "if", "tmp_dir", "is", "None", ":", "\n", "        ", "tmpprefix", "=", "os", ".", "path", ".", "expandvars", "(", "\"$DATASET/temp\"", ")", "\n", "", "else", ":", "\n", "        ", "tmpprefix", "=", "os", ".", "path", ".", "expandvars", "(", "tmp_dir", ")", "\n", "", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "32", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "ptu", ".", "device", ")", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "        ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "tmpprefix", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "ptu", ".", "device", "\n", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "# broadcast tmpdir from 0 to to the other nodes", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "tmpdir", "=", "Path", "(", "tmpdir", ")", "\n", "\"\"\"\n    Save results in temp file and load them on main process\n    \"\"\"", "\n", "tmp_file", "=", "tmpdir", "/", "f\"part_{ptu.dist_rank}.pkl\"", "\n", "pkl", ".", "dump", "(", "seg_pred", ",", "open", "(", "tmp_file", ",", "\"wb\"", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "seg_pred", "=", "{", "}", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "ptu", ".", "world_size", ")", ":", "\n", "            ", "part_seg_pred", "=", "pkl", ".", "load", "(", "open", "(", "tmpdir", "/", "f\"part_{i}.pkl\"", ",", "\"rb\"", ")", ")", "\n", "seg_pred", ".", "update", "(", "part_seg_pred", ")", "\n", "", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "", "return", "seg_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.compute_metrics": [[84, 125], ["torch.zeros", "torch.zeros", "dict", "sorted", "mmseg.core.mean_iou", "torch.tensor", "torch.tensor", "torch.broadcast", "seg_pred.keys", "list_seg_pred.append", "list_seg_gt.append", "numpy.asarray", "numpy.asarray", "numpy.round", "numpy.nanmean", "ret_metric.astype"], "function", ["None"], ["", "def", "compute_metrics", "(", "\n", "seg_pred", ",", "\n", "seg_gt", ",", "\n", "n_cls", ",", "\n", "ignore_index", "=", "None", ",", "\n", "ret_cat_iou", "=", "False", ",", "\n", "tmp_dir", "=", "None", ",", "\n", "distributed", "=", "False", ",", "\n", ")", ":", "\n", "    ", "ret_metrics_mean", "=", "torch", ".", "zeros", "(", "3", ",", "dtype", "=", "float", ",", "device", "=", "ptu", ".", "device", ")", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "        ", "list_seg_pred", "=", "[", "]", "\n", "list_seg_gt", "=", "[", "]", "\n", "keys", "=", "sorted", "(", "seg_pred", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "list_seg_pred", ".", "append", "(", "np", ".", "asarray", "(", "seg_pred", "[", "k", "]", ")", ")", "\n", "list_seg_gt", ".", "append", "(", "np", ".", "asarray", "(", "seg_gt", "[", "k", "]", ")", ")", "\n", "", "ret_metrics", "=", "mean_iou", "(", "\n", "results", "=", "list_seg_pred", ",", "\n", "gt_seg_maps", "=", "list_seg_gt", ",", "\n", "num_classes", "=", "n_cls", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", ")", "\n", "ret_metrics", "=", "[", "ret_metrics", "[", "\"aAcc\"", "]", ",", "ret_metrics", "[", "\"Acc\"", "]", ",", "ret_metrics", "[", "\"IoU\"", "]", "]", "\n", "ret_metrics_mean", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "np", ".", "round", "(", "np", ".", "nanmean", "(", "ret_metric", ".", "astype", "(", "np", ".", "float", ")", ")", "*", "100", ",", "2", ")", "\n", "for", "ret_metric", "in", "ret_metrics", "\n", "]", ",", "\n", "dtype", "=", "float", ",", "\n", "device", "=", "ptu", ".", "device", ",", "\n", ")", "\n", "cat_iou", "=", "ret_metrics", "[", "2", "]", "\n", "# broadcast metrics from 0 to all nodes", "\n", "", "if", "distributed", ":", "\n", "        ", "dist", ".", "broadcast", "(", "ret_metrics_mean", ",", "0", ")", "\n", "", "pix_acc", ",", "mean_acc", ",", "miou", "=", "ret_metrics_mean", "\n", "ret", "=", "dict", "(", "pixel_accuracy", "=", "pix_acc", ",", "mean_accuracy", "=", "mean_acc", ",", "mean_iou", "=", "miou", ")", "\n", "if", "ret_cat_iou", "and", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "        ", "ret", "[", "\"cat_iou\"", "]", "=", "cat_iou", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.inference.main": [[18, 62], ["click.command", "click.option", "click.option", "click.option", "click.option", "segm.set_gpu_mode", "segm.model.factory.load_model", "model.to", "segm.data.utils.dataset_cat_description", "pathlib.Path", "pathlib.Path", "pathlib.Path.mkdir", "list", "tqdm.tqdm", "pathlib.Path", "pathlib.Path.iterdir", "PIL.Image.open().copy", "torchvision.normalize", "im.to().unsqueeze.to().unsqueeze", "dict", "segm.model.utils.inference", "segm.model.utils.inference.argmax", "segm.data.utils.seg_to_rgb", "PIL.Image.fromarray", "PIL.Image.blend().convert", "Image.blend().convert.save", "torchvision.pil_to_tensor().float", "PIL.Image.open", "im.to().unsqueeze.to", "PIL.Image.blend", "torchvision.pil_to_tensor", "segm.data.utils.seg_to_rgb.cpu().numpy", "segm.data.utils.seg_to_rgb.cpu"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.torch.set_gpu_mode", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.load_model", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.dataset_cat_description", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.inference", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.seg_to_rgb"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\"--model-path\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--input-dir\"", ",", "\"-i\"", ",", "type", "=", "str", ",", "help", "=", "\"folder with input images\"", ")", "\n", "@", "click", ".", "option", "(", "\"--output-dir\"", ",", "\"-o\"", ",", "type", "=", "str", ",", "help", "=", "\"folder with output images\"", ")", "\n", "@", "click", ".", "option", "(", "\"--gpu/--cpu\"", ",", "default", "=", "True", ",", "is_flag", "=", "True", ")", "\n", "def", "main", "(", "model_path", ",", "input_dir", ",", "output_dir", ",", "gpu", ")", ":", "\n", "    ", "ptu", ".", "set_gpu_mode", "(", "gpu", ")", "\n", "\n", "model_dir", "=", "Path", "(", "model_path", ")", ".", "parent", "\n", "model", ",", "variant", "=", "load_model", "(", "model_path", ")", "\n", "model", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "normalization_name", "=", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"normalization\"", "]", "\n", "normalization", "=", "STATS", "[", "normalization_name", "]", "\n", "cat_names", ",", "cat_colors", "=", "dataset_cat_description", "(", "ADE20K_CATS_PATH", ")", "\n", "\n", "input_dir", "=", "Path", "(", "input_dir", ")", "\n", "output_dir", "=", "Path", "(", "output_dir", ")", "\n", "output_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "list_dir", "=", "list", "(", "input_dir", ".", "iterdir", "(", ")", ")", "\n", "for", "filename", "in", "tqdm", "(", "list_dir", ",", "ncols", "=", "80", ")", ":", "\n", "        ", "pil_im", "=", "Image", ".", "open", "(", "filename", ")", ".", "copy", "(", ")", "\n", "im", "=", "F", ".", "pil_to_tensor", "(", "pil_im", ")", ".", "float", "(", ")", "/", "255", "\n", "im", "=", "F", ".", "normalize", "(", "im", ",", "normalization", "[", "\"mean\"", "]", ",", "normalization", "[", "\"std\"", "]", ")", "\n", "im", "=", "im", ".", "to", "(", "ptu", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "im_meta", "=", "dict", "(", "flip", "=", "False", ")", "\n", "logits", "=", "inference", "(", "\n", "model", ",", "\n", "[", "im", "]", ",", "\n", "[", "im_meta", "]", ",", "\n", "ori_shape", "=", "im", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "window_size", "=", "variant", "[", "\"inference_kwargs\"", "]", "[", "\"window_size\"", "]", ",", "\n", "window_stride", "=", "variant", "[", "\"inference_kwargs\"", "]", "[", "\"window_stride\"", "]", ",", "\n", "batch_size", "=", "2", ",", "\n", ")", "\n", "seg_map", "=", "logits", ".", "argmax", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "seg_rgb", "=", "seg_to_rgb", "(", "seg_map", ",", "cat_colors", ")", "\n", "seg_rgb", "=", "(", "255", "*", "seg_rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pil_seg", "=", "Image", ".", "fromarray", "(", "seg_rgb", "[", "0", "]", ")", "\n", "\n", "pil_blend", "=", "Image", ".", "blend", "(", "pil_im", ",", "pil_seg", ",", "0.5", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "pil_blend", ".", "save", "(", "output_dir", "/", "filename", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.train.main": [[27, 301], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "segm.set_gpu_mode", "segm.utils.distributed.init_process", "segm.config.load_config", "dict", "pathlib.Path", "pathlib.Path.mkdir", "segm.data.factory.create_dataset", "dataset_kwargs.copy", "segm.data.factory.create_dataset", "segm.model.factory.create_segmenter", "torch.nn.parallel.DistributedDataParallel.to", "argparse.Namespace", "vars", "optimizer_kwargs.items", "segm.optim.factory.create_optimizer", "segm.optim.factory.create_scheduler", "yaml.dump", "print", "pathlib.Path.mkdir", "hasattr", "segm.data.factory.create_dataset.dataset.get_gt_seg_maps", "print", "print", "print", "print", "range", "segm.utils.distributed.barrier", "segm.utils.distributed.destroy_process", "sys.exit", "dataset_cfg.get", "dataset_cfg.get", "dataset_cfg.get", "dataset_cfg.get", "len", "timm.utils.NativeScaler", "checkpoint_path.exists", "print", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "segm.optim.factory.create_optimizer.load_state_dict", "segm.optim.factory.create_scheduler.load_state_dict", "segm.utils.distributed.sync_model", "torch.nn.parallel.DistributedDataParallel", "open", "f.write", "segm.engine.train_one_epoch", "dict", "dict", "dict", "dict", "timm.utils.NativeScaler.load_state_dict", "dict", "torch.save", "segm.engine.evaluate", "print", "print", "len", "len", "segm.model.utils.num_params", "segm.model.utils.num_params", "timm.utils.NativeScaler.state_dict", "open", "f.write", "model_without_ddp.state_dict", "segm.optim.factory.create_optimizer.state_dict", "segm.optim.factory.create_scheduler.state_dict", "segm.engine.train_one_epoch.meters.items", "len", "segm.engine.evaluate.meters.items", "train_stats.items", "val_stats.items", "json.dumps"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.torch.set_gpu_mode", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.init_process", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.load_config", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.factory.create_dataset", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.factory.create_dataset", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_segmenter", "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.factory.create_optimizer", "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.factory.create_scheduler", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.get_gt_seg_maps", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.destroy_process", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.sync_model", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.engine.train_one_epoch", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.engine.evaluate", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.num_params", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.num_params"], ["@", "click", ".", "command", "(", "help", "=", "\"\"", ")", "\n", "@", "click", ".", "option", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "help", "=", "\"logging directory\"", ")", "\n", "@", "click", ".", "option", "(", "\"--dataset\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--im-size\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"dataset resize size\"", ")", "\n", "@", "click", ".", "option", "(", "\"--crop-size\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--window-size\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--window-stride\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--backbone\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--decoder\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--optimizer\"", ",", "default", "=", "\"sgd\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--scheduler\"", ",", "default", "=", "\"polynomial\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--weight-decay\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--dropout\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--drop-path\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--batch-size\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--epochs\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"-lr\"", ",", "\"--learning-rate\"", ",", "default", "=", "None", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--normalization\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--eval-freq\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--amp/--no-amp\"", ",", "default", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "\"--resume/--no-resume\"", ",", "default", "=", "True", ",", "is_flag", "=", "True", ")", "\n", "def", "main", "(", "\n", "log_dir", ",", "\n", "dataset", ",", "\n", "im_size", ",", "\n", "crop_size", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "backbone", ",", "\n", "decoder", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "weight_decay", ",", "\n", "dropout", ",", "\n", "drop_path", ",", "\n", "batch_size", ",", "\n", "epochs", ",", "\n", "learning_rate", ",", "\n", "normalization", ",", "\n", "eval_freq", ",", "\n", "amp", ",", "\n", "resume", ",", "\n", ")", ":", "\n", "# start distributed mode", "\n", "    ", "ptu", ".", "set_gpu_mode", "(", "True", ")", "\n", "distributed", ".", "init_process", "(", ")", "\n", "\n", "# set up configuration", "\n", "cfg", "=", "config", ".", "load_config", "(", ")", "\n", "model_cfg", "=", "cfg", "[", "\"model\"", "]", "[", "backbone", "]", "\n", "dataset_cfg", "=", "cfg", "[", "\"dataset\"", "]", "[", "dataset", "]", "\n", "if", "\"mask_transformer\"", "in", "decoder", ":", "\n", "        ", "decoder_cfg", "=", "cfg", "[", "\"decoder\"", "]", "[", "\"mask_transformer\"", "]", "\n", "", "else", ":", "\n", "        ", "decoder_cfg", "=", "cfg", "[", "\"decoder\"", "]", "[", "decoder", "]", "\n", "\n", "# model config", "\n", "", "if", "not", "im_size", ":", "\n", "        ", "im_size", "=", "dataset_cfg", "[", "\"im_size\"", "]", "\n", "", "if", "not", "crop_size", ":", "\n", "        ", "crop_size", "=", "dataset_cfg", ".", "get", "(", "\"crop_size\"", ",", "im_size", ")", "\n", "", "if", "not", "window_size", ":", "\n", "        ", "window_size", "=", "dataset_cfg", ".", "get", "(", "\"window_size\"", ",", "im_size", ")", "\n", "", "if", "not", "window_stride", ":", "\n", "        ", "window_stride", "=", "dataset_cfg", ".", "get", "(", "\"window_stride\"", ",", "im_size", ")", "\n", "\n", "", "model_cfg", "[", "\"image_size\"", "]", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "model_cfg", "[", "\"backbone\"", "]", "=", "backbone", "\n", "model_cfg", "[", "\"dropout\"", "]", "=", "dropout", "\n", "model_cfg", "[", "\"drop_path_rate\"", "]", "=", "drop_path", "\n", "decoder_cfg", "[", "\"name\"", "]", "=", "decoder", "\n", "model_cfg", "[", "\"decoder\"", "]", "=", "decoder_cfg", "\n", "\n", "# dataset config", "\n", "world_batch_size", "=", "dataset_cfg", "[", "\"batch_size\"", "]", "\n", "num_epochs", "=", "dataset_cfg", "[", "\"epochs\"", "]", "\n", "lr", "=", "dataset_cfg", "[", "\"learning_rate\"", "]", "\n", "if", "batch_size", ":", "\n", "        ", "world_batch_size", "=", "batch_size", "\n", "", "if", "epochs", ":", "\n", "        ", "num_epochs", "=", "epochs", "\n", "", "if", "learning_rate", ":", "\n", "        ", "lr", "=", "learning_rate", "\n", "", "if", "eval_freq", "is", "None", ":", "\n", "        ", "eval_freq", "=", "dataset_cfg", ".", "get", "(", "\"eval_freq\"", ",", "1", ")", "\n", "\n", "", "if", "normalization", ":", "\n", "        ", "model_cfg", "[", "\"normalization\"", "]", "=", "normalization", "\n", "\n", "# experiment config", "\n", "", "batch_size", "=", "world_batch_size", "//", "ptu", ".", "world_size", "\n", "variant", "=", "dict", "(", "\n", "world_batch_size", "=", "world_batch_size", ",", "\n", "version", "=", "\"normal\"", ",", "\n", "resume", "=", "resume", ",", "\n", "dataset_kwargs", "=", "dict", "(", "\n", "dataset", "=", "dataset", ",", "\n", "image_size", "=", "im_size", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "normalization", "=", "model_cfg", "[", "\"normalization\"", "]", ",", "\n", "split", "=", "\"train\"", ",", "\n", "num_workers", "=", "10", ",", "\n", ")", ",", "\n", "algorithm_kwargs", "=", "dict", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "start_epoch", "=", "0", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "eval_freq", "=", "eval_freq", ",", "\n", ")", ",", "\n", "optimizer_kwargs", "=", "dict", "(", "\n", "opt", "=", "optimizer", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "0.9", ",", "\n", "clip_grad", "=", "None", ",", "\n", "sched", "=", "scheduler", ",", "\n", "epochs", "=", "num_epochs", ",", "\n", "min_lr", "=", "1e-5", ",", "\n", "poly_power", "=", "0.9", ",", "\n", "poly_step_size", "=", "1", ",", "\n", ")", ",", "\n", "net_kwargs", "=", "model_cfg", ",", "\n", "amp", "=", "amp", ",", "\n", "log_dir", "=", "log_dir", ",", "\n", "inference_kwargs", "=", "dict", "(", "\n", "im_size", "=", "im_size", ",", "\n", "window_size", "=", "window_size", ",", "\n", "window_stride", "=", "window_stride", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "log_dir", "=", "Path", "(", "log_dir", ")", "\n", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path", "=", "log_dir", "/", "\"checkpoint.pth\"", "\n", "\n", "# dataset", "\n", "dataset_kwargs", "=", "variant", "[", "\"dataset_kwargs\"", "]", "\n", "\n", "train_loader", "=", "create_dataset", "(", "dataset_kwargs", ")", "\n", "val_kwargs", "=", "dataset_kwargs", ".", "copy", "(", ")", "\n", "val_kwargs", "[", "\"split\"", "]", "=", "\"val\"", "\n", "val_kwargs", "[", "\"batch_size\"", "]", "=", "1", "\n", "val_kwargs", "[", "\"crop\"", "]", "=", "False", "\n", "val_loader", "=", "create_dataset", "(", "val_kwargs", ")", "\n", "n_cls", "=", "train_loader", ".", "unwrapped", ".", "n_cls", "\n", "\n", "# model", "\n", "net_kwargs", "=", "variant", "[", "\"net_kwargs\"", "]", "\n", "net_kwargs", "[", "\"n_cls\"", "]", "=", "n_cls", "\n", "model", "=", "create_segmenter", "(", "net_kwargs", ")", "\n", "model", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "# optimizer", "\n", "optimizer_kwargs", "=", "variant", "[", "\"optimizer_kwargs\"", "]", "\n", "optimizer_kwargs", "[", "\"iter_max\"", "]", "=", "len", "(", "train_loader", ")", "*", "optimizer_kwargs", "[", "\"epochs\"", "]", "\n", "optimizer_kwargs", "[", "\"iter_warmup\"", "]", "=", "0.0", "\n", "opt_args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "opt_vars", "=", "vars", "(", "opt_args", ")", "\n", "for", "k", ",", "v", "in", "optimizer_kwargs", ".", "items", "(", ")", ":", "\n", "        ", "opt_vars", "[", "k", "]", "=", "v", "\n", "", "optimizer", "=", "create_optimizer", "(", "opt_args", ",", "model", ")", "\n", "lr_scheduler", "=", "create_scheduler", "(", "opt_args", ",", "optimizer", ")", "\n", "num_iterations", "=", "0", "\n", "amp_autocast", "=", "suppress", "\n", "loss_scaler", "=", "None", "\n", "if", "amp", ":", "\n", "        ", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "loss_scaler", "=", "NativeScaler", "(", ")", "\n", "\n", "# resume", "\n", "", "if", "resume", "and", "checkpoint_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f\"Resuming training from checkpoint: {checkpoint_path}\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "if", "loss_scaler", "and", "\"loss_scaler\"", "in", "checkpoint", ":", "\n", "            ", "loss_scaler", ".", "load_state_dict", "(", "checkpoint", "[", "\"loss_scaler\"", "]", ")", "\n", "", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"lr_scheduler\"", "]", ")", "\n", "variant", "[", "\"algorithm_kwargs\"", "]", "[", "\"start_epoch\"", "]", "=", "checkpoint", "[", "\"epoch\"", "]", "+", "1", "\n", "", "else", ":", "\n", "        ", "sync_model", "(", "log_dir", ",", "model", ")", "\n", "\n", "", "if", "ptu", ".", "distributed", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "ptu", ".", "device", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "# save config", "\n", "", "variant_str", "=", "yaml", ".", "dump", "(", "variant", ")", "\n", "print", "(", "f\"Configuration:\\n{variant_str}\"", ")", "\n", "variant", "[", "\"net_kwargs\"", "]", "=", "net_kwargs", "\n", "variant", "[", "\"dataset_kwargs\"", "]", "=", "dataset_kwargs", "\n", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "log_dir", "/", "\"variant.yml\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "variant_str", ")", "\n", "\n", "# train", "\n", "", "start_epoch", "=", "variant", "[", "\"algorithm_kwargs\"", "]", "[", "\"start_epoch\"", "]", "\n", "num_epochs", "=", "variant", "[", "\"algorithm_kwargs\"", "]", "[", "\"num_epochs\"", "]", "\n", "eval_freq", "=", "variant", "[", "\"algorithm_kwargs\"", "]", "[", "\"eval_freq\"", "]", "\n", "\n", "model_without_ddp", "=", "model", "\n", "if", "hasattr", "(", "model", ",", "\"module\"", ")", ":", "\n", "        ", "model_without_ddp", "=", "model", ".", "module", "\n", "\n", "", "val_seg_gt", "=", "val_loader", ".", "dataset", ".", "get_gt_seg_maps", "(", ")", "\n", "\n", "print", "(", "f\"Train dataset length: {len(train_loader.dataset)}\"", ")", "\n", "print", "(", "f\"Val dataset length: {len(val_loader.dataset)}\"", ")", "\n", "print", "(", "f\"Encoder parameters: {num_params(model_without_ddp.encoder)}\"", ")", "\n", "print", "(", "f\"Decoder parameters: {num_params(model_without_ddp.decoder)}\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "# train for one epoch", "\n", "        ", "train_logger", "=", "train_one_epoch", "(", "\n", "model", ",", "\n", "train_loader", ",", "\n", "optimizer", ",", "\n", "lr_scheduler", ",", "\n", "epoch", ",", "\n", "amp_autocast", ",", "\n", "loss_scaler", ",", "\n", ")", "\n", "\n", "# save checkpoint", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "            ", "snapshot", "=", "dict", "(", "\n", "model", "=", "model_without_ddp", ".", "state_dict", "(", ")", ",", "\n", "optimizer", "=", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "n_cls", "=", "model_without_ddp", ".", "n_cls", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "                ", "snapshot", "[", "\"loss_scaler\"", "]", "=", "loss_scaler", ".", "state_dict", "(", ")", "\n", "", "snapshot", "[", "\"epoch\"", "]", "=", "epoch", "\n", "torch", ".", "save", "(", "snapshot", ",", "checkpoint_path", ")", "\n", "\n", "# evaluate", "\n", "", "eval_epoch", "=", "epoch", "%", "eval_freq", "==", "0", "or", "epoch", "==", "num_epochs", "-", "1", "\n", "if", "eval_epoch", ":", "\n", "            ", "eval_logger", "=", "evaluate", "(", "\n", "model", ",", "\n", "val_loader", ",", "\n", "val_seg_gt", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "amp_autocast", ",", "\n", ")", "\n", "print", "(", "f\"Stats [{epoch}]:\"", ",", "eval_logger", ",", "flush", "=", "True", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "# log stats", "\n", "", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "            ", "train_stats", "=", "{", "\n", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "train_logger", ".", "meters", ".", "items", "(", ")", "\n", "}", "\n", "val_stats", "=", "{", "}", "\n", "if", "eval_epoch", ":", "\n", "                ", "val_stats", "=", "{", "\n", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "eval_logger", ".", "meters", ".", "items", "(", ")", "\n", "}", "\n", "\n", "", "log_stats", "=", "{", "\n", "**", "{", "f\"train_{k}\"", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f\"val_{k}\"", ":", "v", "for", "k", ",", "v", "in", "val_stats", ".", "items", "(", ")", "}", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"num_updates\"", ":", "(", "epoch", "+", "1", ")", "*", "len", "(", "train_loader", ")", ",", "\n", "}", "\n", "\n", "with", "open", "(", "log_dir", "/", "\"log.txt\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "", "distributed", ".", "barrier", "(", ")", "\n", "distributed", ".", "destroy_process", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.plot_logs": [[12, 60], ["y_key.split", "logs.items", "logs.items", "matplotlib.subplots", "ax.set_xlabel", "ax.set_ylabel", "segm.utils.lines.Lines", "list", "segm.utils.lines.Lines.", "ax.grid", "ax.set_ylim", "matplotlib.show", "fig.savefig", "matplotlib.close", "domains.append", "lines.append", "numpy.min", "numpy.max", "logs.keys", "numpy.array", "min", "max"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.max", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.max"], ["def", "plot_logs", "(", "logs", ",", "x_key", ",", "y_key", ",", "size", ",", "vmin", ",", "vmax", ",", "epochs", ")", ":", "\n", "    ", "m", "=", "np", ".", "inf", "\n", "M", "=", "-", "np", ".", "inf", "\n", "domains", "=", "[", "]", "\n", "lines", "=", "[", "]", "\n", "y_keys", "=", "y_key", ".", "split", "(", "\"/\"", ")", "\n", "for", "name", ",", "log", "in", "logs", ".", "items", "(", ")", ":", "\n", "        ", "logs", "[", "name", "]", "=", "log", "[", ":", "epochs", "]", "\n", "", "for", "name", ",", "log", "in", "logs", ".", "items", "(", ")", ":", "\n", "        ", "domain", "=", "[", "x", "[", "x_key", "]", "for", "x", "in", "log", "if", "y_keys", "[", "0", "]", "in", "x", "]", "\n", "if", "y_keys", "[", "0", "]", "not", "in", "log", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "", "log_plot", "=", "[", "x", "[", "y_keys", "[", "0", "]", "]", "for", "x", "in", "log", "if", "y_keys", "[", "0", "]", "in", "x", "]", "\n", "for", "y_key", "in", "y_keys", "[", "1", ":", "]", ":", "\n", "            ", "if", "y_key", "in", "log_plot", "[", "0", "]", ":", "\n", "                ", "log_plot", "=", "[", "x", "[", "y_key", "]", "for", "x", "in", "log_plot", "if", "y_key", "in", "x", "]", "\n", "", "", "domains", ".", "append", "(", "domain", ")", "\n", "lines", ".", "append", "(", "np", ".", "array", "(", "log_plot", ")", "[", ":", ",", "None", "]", ")", "\n", "m", "=", "np", ".", "min", "(", "(", "m", ",", "min", "(", "log_plot", ")", ")", ")", "\n", "M", "=", "np", ".", "max", "(", "(", "M", ",", "max", "(", "log_plot", ")", ")", ")", "\n", "", "if", "vmin", "is", "not", "None", ":", "\n", "        ", "m", "=", "vmin", "\n", "", "if", "vmax", "is", "not", "None", ":", "\n", "        ", "M", "=", "vmax", "\n", "", "delta", "=", "0.1", "*", "(", "M", "-", "m", ")", "\n", "\n", "ratio", "=", "0.6", "\n", "figsizes", "=", "{", "\"tight\"", ":", "(", "4", ",", "3", ")", ",", "\"large\"", ":", "(", "16", "*", "ratio", ",", "10", "*", "ratio", ")", "}", "\n", "figsize", "=", "figsizes", "[", "size", "]", "\n", "\n", "# plot parameters", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "figsize", ")", "\n", "ax", ".", "set_xlabel", "(", "x_key", ")", "\n", "ax", ".", "set_ylabel", "(", "y_key", ")", "\n", "plot_lines", "=", "Lines", "(", "resolution", "=", "50", ",", "smooth", "=", "0.0", ")", "\n", "plot_lines", ".", "LEGEND", "[", "\"loc\"", "]", "=", "\"upper left\"", "\n", "# plot_lines.LEGEND[\"fontsize\"] = \"large\"", "\n", "plot_lines", ".", "LEGEND", "[", "\"bbox_to_anchor\"", "]", "=", "(", "0.75", ",", "0.2", ")", "\n", "labels_logs", "=", "list", "(", "logs", ".", "keys", "(", ")", ")", "\n", "colors", "=", "plot_lines", "(", "ax", ",", "domains", ",", "lines", ",", "labels_logs", ")", "\n", "ax", ".", "grid", "(", "True", ",", "alpha", "=", "0.5", ")", "\n", "ax", ".", "set_ylim", "(", "m", "-", "delta", ",", "M", "+", "delta", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "fig", ".", "savefig", "(", "\n", "\"plot.png\"", ",", "bbox_inches", "=", "\"tight\"", ",", "pad_inches", "=", "0.1", ",", "transparent", "=", "False", ",", "dpi", "=", "300", "\n", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.print_logs": [[62, 86], ["y_key.split", "logs.items", "list", "print", "list", "set", "last_log.keys", "len"], "function", ["None"], ["", "def", "print_logs", "(", "logs", ",", "x_key", ",", "y_key", ",", "last_log_idx", "=", "None", ")", ":", "\n", "    ", "delim", "=", "\"   \"", "\n", "s", "=", "\"\"", "\n", "keys", "=", "[", "]", "\n", "y_keys", "=", "y_key", ".", "split", "(", "\"/\"", ")", "\n", "for", "name", ",", "log", "in", "logs", ".", "items", "(", ")", ":", "\n", "        ", "log_idx", "=", "last_log_idx", "\n", "if", "log_idx", "is", "None", ":", "\n", "            ", "log_idx", "=", "len", "(", "log", ")", "-", "1", "\n", "", "while", "y_keys", "[", "0", "]", "not", "in", "log", "[", "log_idx", "]", ":", "\n", "            ", "log_idx", "-=", "1", "\n", "", "last_log", "=", "log", "[", "log_idx", "]", "\n", "log_x", "=", "last_log", "[", "x_key", "]", "\n", "log_y", "=", "last_log", "[", "y_keys", "[", "0", "]", "]", "\n", "for", "y_key", "in", "y_keys", "[", "1", ":", "]", ":", "\n", "            ", "log_y", "=", "log_y", "[", "y_key", "]", "\n", "", "s", "+=", "f\"{name}:\\n\"", "\n", "# s += f\"{delim}{x_key}: {log_x}\\n\"", "\n", "s", "+=", "f\"{delim}{y_key}: {log_y:.4f}\\n\"", "\n", "keys", "+=", "list", "(", "last_log", ".", "keys", "(", ")", ")", "\n", "", "keys", "=", "list", "(", "set", "(", "keys", ")", ")", "\n", "keys", "=", "\", \"", ".", "join", "(", "keys", ")", "\n", "s", "=", "f\"keys: {keys}\\n\"", "+", "s", "\n", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.read_logs": [[88, 101], ["logs_path.items", "path.exists", "print", "open", "f.readlines", "json.loads", "logs[].append"], "function", ["None"], ["", "def", "read_logs", "(", "root", ",", "logs_path", ")", ":", "\n", "    ", "logs", "=", "{", "}", "\n", "for", "name", ",", "path", "in", "logs_path", ".", "items", "(", ")", ":", "\n", "        ", "path", "=", "root", "/", "path", "\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "f\"Skipping {name} that has no log file\"", ")", "\n", "continue", "\n", "", "logs", "[", "name", "]", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "d", "=", "json", ".", "loads", "(", "line", ")", "\n", "logs", "[", "name", "]", ".", "append", "(", "d", ")", "\n", "", "", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.main": [[103, 127], ["click.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "abs_path.exists", "yaml.load", "pathlib.Path", "collections.OrderedDict", "yaml.load.get", "yaml.load.get", "yaml.load.get", "logs.read_logs", "logs.print_logs", "open", "logs.plot_logs", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.read_logs", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.print_logs", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logs.plot_logs"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "\"log_path\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--x-key\"", ",", "default", "=", "\"epoch\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--y-key\"", ",", "default", "=", "\"val_mean_iou\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"-s\"", ",", "\"--size\"", ",", "default", "=", "\"large\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"-ep\"", ",", "\"--epoch\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"-plot\"", ",", "\"--plot/--no-plot\"", ",", "default", "=", "True", ",", "is_flag", "=", "True", ")", "\n", "def", "main", "(", "log_path", ",", "x_key", ",", "y_key", ",", "size", ",", "epoch", ",", "plot", ")", ":", "\n", "    ", "abs_path", "=", "Path", "(", "__file__", ")", ".", "parent", "/", "log_path", "\n", "if", "abs_path", ".", "exists", "(", ")", ":", "\n", "        ", "log_path", "=", "abs_path", "\n", "", "config", "=", "yaml", ".", "load", "(", "open", "(", "log_path", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "root", "=", "Path", "(", "config", "[", "\"root\"", "]", ")", "\n", "logs_path", "=", "OrderedDict", "(", "config", "[", "\"logs\"", "]", ")", "\n", "vmin", "=", "config", ".", "get", "(", "\"vmin\"", ",", "None", ")", "\n", "vmax", "=", "config", ".", "get", "(", "\"vmax\"", ",", "None", ")", "\n", "epochs", "=", "config", ".", "get", "(", "\"epochs\"", ",", "None", ")", "\n", "\n", "logs", "=", "read_logs", "(", "root", ",", "logs_path", ")", "\n", "if", "not", "logs", ":", "\n", "        ", "return", "\n", "", "print_logs", "(", "logs", ",", "x_key", ",", "y_key", ",", "epoch", ")", "\n", "if", "plot", ":", "\n", "        ", "plot_logs", "(", "logs", ",", "x_key", ",", "y_key", ",", "size", ",", "vmin", ",", "vmax", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.lines.Lines.__init__": [[6, 23], ["itertools.cycle", "itertools.cycle", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resolution", "=", "20", ",", "smooth", "=", "None", ")", ":", "\n", "        ", "self", ".", "COLORS", "=", "cycle", "(", "\n", "[", "\n", "\"#377eb8\"", ",", "\n", "\"#e41a1c\"", ",", "\n", "\"#4daf4a\"", ",", "\n", "\"#984ea3\"", ",", "\n", "\"#ff7f00\"", ",", "\n", "\"#ffff33\"", ",", "\n", "\"#a65628\"", ",", "\n", "\"#f781bf\"", ",", "\n", "]", "\n", ")", "\n", "self", ".", "MARKERS", "=", "cycle", "(", "\"os^Dp>d<\"", ")", "\n", "self", ".", "LEGEND", "=", "dict", "(", "fontsize", "=", "\"medium\"", ",", "labelspacing", "=", "0", ",", "numpoints", "=", "1", ")", "\n", "self", ".", "_resolution", "=", "resolution", "\n", "self", ".", "_smooth_weight", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.lines.Lines.__call__": [[24, 45], ["enumerate", "lines.Lines._plot_legend", "len", "len", "len", "zip", "lines.Lines.smooth", "ax.plot", "ax.scatter", "ax.annotate", "colors.append"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.lines.Lines._plot_legend", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.lines.Lines.smooth"], ["", "def", "__call__", "(", "self", ",", "ax", ",", "domains", ",", "lines", ",", "labels", ")", ":", "\n", "        ", "assert", "len", "(", "domains", ")", "==", "len", "(", "lines", ")", "==", "len", "(", "labels", ")", "\n", "colors", "=", "[", "]", "\n", "for", "index", ",", "(", "label", ",", "color", ",", "marker", ")", "in", "enumerate", "(", "\n", "zip", "(", "labels", ",", "self", ".", "COLORS", ",", "self", ".", "MARKERS", ")", "\n", ")", ":", "\n", "            ", "domain", ",", "line", "=", "domains", "[", "index", "]", ",", "lines", "[", "index", "]", "\n", "line", "=", "self", ".", "smooth", "(", "line", ",", "self", ".", "_smooth_weight", ")", "\n", "ax", ".", "plot", "(", "domain", ",", "line", "[", ":", ",", "0", "]", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "last_x", ",", "last_y", "=", "domain", "[", "-", "1", "]", ",", "line", "[", "-", "1", ",", "0", "]", "\n", "ax", ".", "scatter", "(", "last_x", ",", "last_y", ",", "color", "=", "color", ",", "marker", "=", "\"x\"", ")", "\n", "ax", ".", "annotate", "(", "\n", "f\"{last_y:.2f}\"", ",", "\n", "xy", "=", "(", "last_x", ",", "last_y", ")", ",", "\n", "xytext", "=", "(", "last_x", ",", "last_y", "+", "0.1", ")", ",", "\n", ")", "\n", "colors", ".", "append", "(", "color", ")", "\n", "\n", "", "self", ".", "_plot_legend", "(", "ax", ",", "lines", ",", "labels", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.lines.Lines._plot_legend": [[46, 55], ["ax.get_legend_handles_labels", "ax.legend", "ax.legend.get_frame().set_edgecolor", "ax.legend.get_lines", "line.set_alpha", "numpy.nanmedian", "zip", "ax.legend.get_frame"], "methods", ["None"], ["", "def", "_plot_legend", "(", "self", ",", "ax", ",", "lines", ",", "labels", ")", ":", "\n", "        ", "scores", "=", "{", "label", ":", "-", "np", ".", "nanmedian", "(", "line", ")", "for", "label", ",", "line", "in", "zip", "(", "labels", ",", "lines", ")", "}", "\n", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "# handles, labels = zip(*sorted(", "\n", "#     zip(handles, labels), key=lambda x: scores[x[1]]))", "\n", "legend", "=", "ax", ".", "legend", "(", "handles", ",", "labels", ",", "**", "self", ".", "LEGEND", ")", "\n", "legend", ".", "get_frame", "(", ")", ".", "set_edgecolor", "(", "\"white\"", ")", "\n", "for", "line", "in", "legend", ".", "get_lines", "(", ")", ":", "\n", "            ", "line", ".", "set_alpha", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.lines.Lines.smooth": [[56, 69], ["numpy.asarray", "enumerate"], "methods", ["None"], ["", "", "def", "smooth", "(", "self", ",", "scalars", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\n        weight in [0, 1]\n        exponential moving average, same as tensorboard\n        \"\"\"", "\n", "assert", "weight", ">=", "0", "and", "weight", "<=", "1", "\n", "last", "=", "scalars", "[", "0", "]", "\n", "smoothed", "=", "np", ".", "asarray", "(", "scalars", ")", "\n", "for", "i", ",", "point", "in", "enumerate", "(", "scalars", ")", ":", "\n", "            ", "last", "=", "last", "*", "weight", "+", "(", "1", "-", "weight", ")", "*", "point", "\n", "smoothed", "[", "i", "]", "=", "last", "\n", "\n", "", "return", "smoothed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.init_process": [[10, 36], ["distributed.silence_print.print", "torch.init_process_group", "distributed.silence_print.print", "torch.barrier", "distributed.silence_print", "os.environ[].split", "str", "str", "hostlist.expand_hostlist", "distributed.silence_print.print", "int", "min"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.silence_print"], ["def", "init_process", "(", "backend", "=", "\"nccl\"", ")", ":", "\n", "    ", "print", "(", "f\"Starting process with rank {ptu.dist_rank}...\"", ",", "flush", "=", "True", ")", "\n", "\n", "if", "\"SLURM_STEPS_GPUS\"", "in", "os", ".", "environ", ":", "\n", "        ", "gpu_ids", "=", "os", ".", "environ", "[", "\"SLURM_STEP_GPUS\"", "]", ".", "split", "(", "\",\"", ")", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "12345", "+", "int", "(", "min", "(", "gpu_ids", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "12345", ")", "\n", "\n", "", "if", "\"SLURM_JOB_NODELIST\"", "in", "os", ".", "environ", ":", "\n", "        ", "hostnames", "=", "hostlist", ".", "expand_hostlist", "(", "os", ".", "environ", "[", "\"SLURM_JOB_NODELIST\"", "]", ")", "\n", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "hostnames", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "\"127.0.0.1\"", "\n", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", ",", "\n", "rank", "=", "ptu", ".", "dist_rank", ",", "\n", "world_size", "=", "ptu", ".", "world_size", ",", "\n", ")", "\n", "print", "(", "f\"Process {ptu.dist_rank} is connected.\"", ",", "flush", "=", "True", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "silence_print", "(", "ptu", ".", "dist_rank", "==", "0", ")", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "        ", "print", "(", "f\"All processes are connected.\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.silence_print": [[38, 52], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "def", "silence_print", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "\"force\"", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.sync_model": [[54, 66], ["torch.barrier", "torch.barrier", "pathlib.Path().resolve", "torch.save", "torch.save", "model.load_state_dict", "sync_path.unlink", "model.state_dict", "torch.load", "torch.load", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier"], ["", "def", "sync_model", "(", "sync_dir", ",", "model", ")", ":", "\n", "# https://github.com/ylabbe/cosypose/blob/master/cosypose/utils/distributed.py", "\n", "    ", "sync_path", "=", "Path", "(", "sync_dir", ")", ".", "resolve", "(", ")", "/", "\"sync_model.pkl\"", "\n", "if", "ptu", ".", "dist_rank", "==", "0", "and", "ptu", ".", "world_size", ">", "1", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "sync_path", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "if", "ptu", ".", "dist_rank", ">", "0", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "sync_path", ")", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "if", "ptu", ".", "dist_rank", "==", "0", "and", "ptu", ".", "world_size", ">", "1", ":", "\n", "        ", "sync_path", ".", "unlink", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier": [[68, 70], ["torch.barrier"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier"], ["", "def", "barrier", "(", ")", ":", "\n", "    ", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.destroy_process": [[72, 74], ["torch.destroy_process_group"], "function", ["None"], ["", "def", "destroy_process", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.__init__": [[22, 29], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.update": [[30, 34], ["logger.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.synchronize_between_processes": [[35, 49], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "logger.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "ptu", ".", "device", "\n", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.median": [[50, 54], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.median", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.avg": [[55, 59], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.global_avg": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.max": [[64, 67], ["logger.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.value": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.SmoothedValue.__str__": [[72, 79], ["logger.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.__init__": [[83, 86], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update": [[87, 93], ["kwargs.items", "isinstance", "isinstance", "logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "n", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.__getattr__": [[94, 101], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\n", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.__str__": [[103, 108], ["logger.MetricLogger.meters.items", "logger.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.synchronize_between_processes": [[109, 112], ["logger.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.add_meter": [[113, 115], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.log_every": [[116, 176], ["time.time", "time.time", "logger.SmoothedValue", "logger.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logger.MetricLogger.delimiter.join", "str", "print", "logger.MetricLogger.append", "logger.SmoothedValue.update", "logger.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "logger.MetricLogger.format", "logger.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "\"\"", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "\"{avg:.4f}\"", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "\"{avg:.4f}\"", ")", "\n", "space_fmt", "=", "\":\"", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "\"d\"", "\n", "log_msg", "=", "[", "\n", "header", ",", "\n", "\"[{0\"", "+", "space_fmt", "+", "\"}/{1}]\"", ",", "\n", "\"eta: {eta}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"time: {time}\"", ",", "\n", "\"data: {data}\"", ",", "\n", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", ".", "append", "(", "\"max mem: {memory:.0f}\"", ")", "\n", "", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "log_msg", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "\n", "log_msg", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "iterable", ")", ",", "\n", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "\n", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ",", "\n", ")", ",", "\n", "flush", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\n", "log_msg", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "iterable", ")", ",", "\n", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "\n", "data", "=", "str", "(", "data_time", ")", ",", "\n", ")", ",", "\n", "flush", "=", "True", ",", "\n", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "\n", "\"{} Total time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.is_dist_avail_and_initialized": [[180, 186], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.download.check_sha1": [[7, 29], ["hashlib.sha1", "open", "hashlib.sha1.hexdigest", "f.read", "hashlib.sha1.update"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update"], ["def", "check_sha1", "(", "filename", ",", "sha1_hash", ")", ":", "\n", "    ", "\"\"\"Check whether the sha1 hash of the file content matches the expected hash.\n    Parameters\n    ----------\n    filename : str\n        Path to the file.\n    sha1_hash : str\n        Expected sha1 hash in hexadecimal digits.\n    Returns\n    -------\n    bool\n        Whether the file content matches the expected hash.\n    \"\"\"", "\n", "sha1", "=", "hashlib", ".", "sha1", "(", ")", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", "1048576", ")", "\n", "if", "not", "data", ":", "\n", "                ", "break", "\n", "", "sha1", ".", "update", "(", "data", ")", "\n", "\n", "", "", "return", "sha1", ".", "hexdigest", "(", ")", "==", "sha1_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.download.download": [[31, 100], ["os.path.expanduser", "os.path.isdir", "os.path.dirname", "print", "requests.get", "requests.get.headers.get", "url.split", "os.path.join", "os.path.exists", "os.path.abspath", "os.path.exists", "os.makedirs", "RuntimeError", "open", "UserWarning", "download.check_sha1", "os.path.expanduser", "requests.get.iter_content", "int", "tqdm.tqdm", "download.check_sha1", "url.split", "requests.get.iter_content", "f.write", "f.write", "int"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.download.check_sha1", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.download.check_sha1"], ["", "def", "download", "(", "url", ",", "path", "=", "None", ",", "overwrite", "=", "False", ",", "sha1_hash", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    https://github.com/junfu1115/DANet/blob/master/encoding/utils/files.py\n    Download a given URL\n    Parameters\n    ----------\n    url : str\n        URL to download\n    path : str, optional\n        Destination path to store downloaded file. By default stores to the\n        current directory with same name as in url.\n    overwrite : bool, optional\n        Whether to overwrite destination file if already exists.\n    sha1_hash : str, optional\n        Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified\n        but doesn't match.\n    Returns\n    -------\n    str\n        The file path of the downloaded file.\n    \"\"\"", "\n", "if", "path", "is", "None", ":", "\n", "        ", "fname", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "path", "\n", "\n", "", "", "if", "(", "\n", "overwrite", "\n", "or", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "\n", "or", "(", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ")", "\n", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "fname", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n", "", "print", "(", "\"Downloading %s from %s...\"", "%", "(", "fname", ",", "url", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "if", "r", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Failed downloading url %s\"", "%", "url", ")", "\n", "", "total_length", "=", "r", ".", "headers", ".", "get", "(", "\"content-length\"", ")", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "if", "total_length", "is", "None", ":", "# no content length header", "\n", "                ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "                    ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                        ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "else", ":", "\n", "                ", "total_length", "=", "int", "(", "total_length", ")", "\n", "for", "chunk", "in", "tqdm", "(", "\n", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ",", "\n", "total", "=", "int", "(", "total_length", "/", "1024.0", "+", "0.5", ")", ",", "\n", "unit", "=", "\"KB\"", ",", "\n", "unit_scale", "=", "False", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", ")", ":", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "", "if", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ":", "\n", "            ", "raise", "UserWarning", "(", "\n", "\"File {} is downloaded but the content hash does not match. \"", "\n", "\"The repo may be outdated or download may be incomplete. \"", "\n", "'If the \"repo_url\" is overridden, consider switching to '", "\n", "\"the default repo.\"", ".", "format", "(", "fname", ")", "\n", ")", "\n", "\n", "", "", "return", "fname", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.torch.set_gpu_mode": [[18, 33], ["int", "int", "int", "torch.device", "os.environ.get", "os.environ.get", "os.environ.get"], "function", ["None"], ["def", "set_gpu_mode", "(", "mode", ")", ":", "\n", "    ", "global", "use_gpu", "\n", "global", "device", "\n", "global", "gpu_id", "\n", "global", "distributed", "\n", "global", "dist_rank", "\n", "global", "world_size", "\n", "gpu_id", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "\"SLURM_LOCALID\"", ",", "0", ")", ")", "\n", "dist_rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "\"SLURM_PROCID\"", ",", "0", ")", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "\"SLURM_NTASKS\"", ",", "1", ")", ")", "\n", "\n", "distributed", "=", "world_size", ">", "1", "\n", "use_gpu", "=", "mode", "\n", "device", "=", "torch", ".", "device", "(", "f\"cuda:{gpu_id}\"", "if", "use_gpu", "else", "\"cpu\"", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.scheduler.PolynomialLR.__init__": [[7, 23], ["int", "int", "torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "step_size", ",", "\n", "iter_warmup", ",", "\n", "iter_max", ",", "\n", "power", ",", "\n", "min_lr", "=", "0", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iter_warmup", "=", "int", "(", "iter_warmup", ")", "\n", "self", ".", "iter_max", "=", "int", "(", "iter_max", ")", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "super", "(", "PolynomialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.scheduler.PolynomialLR.polynomial_decay": [[24, 32], ["float"], "methods", ["None"], ["", "def", "polynomial_decay", "(", "self", ",", "lr", ")", ":", "\n", "        ", "iter_cur", "=", "float", "(", "self", ".", "last_epoch", ")", "\n", "if", "iter_cur", "<", "self", ".", "iter_warmup", ":", "\n", "            ", "coef", "=", "iter_cur", "/", "self", ".", "iter_warmup", "\n", "coef", "*=", "(", "1", "-", "self", ".", "iter_warmup", "/", "self", ".", "iter_max", ")", "**", "self", ".", "power", "\n", "", "else", ":", "\n", "            ", "coef", "=", "(", "1", "-", "iter_cur", "/", "self", ".", "iter_max", ")", "**", "self", ".", "power", "\n", "", "return", "(", "lr", "-", "self", ".", "min_lr", ")", "*", "coef", "+", "self", ".", "min_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.scheduler.PolynomialLR.get_lr": [[33, 41], ["scheduler.PolynomialLR.polynomial_decay"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.optim.scheduler.PolynomialLR.polynomial_decay"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "(", "\n", "(", "self", ".", "last_epoch", "==", "0", ")", "\n", "or", "(", "self", ".", "last_epoch", "%", "self", ".", "step_size", "!=", "0", ")", "\n", "or", "(", "self", ".", "last_epoch", ">", "self", ".", "iter_max", ")", "\n", ")", ":", "\n", "            ", "return", "[", "group", "[", "\"lr\"", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "self", ".", "polynomial_decay", "(", "lr", ")", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.scheduler.PolynomialLR.step_update": [[42, 44], ["scheduler.PolynomialLR.step"], "methods", ["None"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "self", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.factory.create_scheduler": [[7, 20], ["segm.optim.scheduler.PolynomialLR", "timm.scheduler.create_scheduler"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.optim.factory.create_scheduler"], ["def", "create_scheduler", "(", "opt_args", ",", "optimizer", ")", ":", "\n", "    ", "if", "opt_args", ".", "sched", "==", "\"polynomial\"", ":", "\n", "        ", "lr_scheduler", "=", "PolynomialLR", "(", "\n", "optimizer", ",", "\n", "opt_args", ".", "poly_step_size", ",", "\n", "opt_args", ".", "iter_warmup", ",", "\n", "opt_args", ".", "iter_max", ",", "\n", "opt_args", ".", "poly_power", ",", "\n", "opt_args", ".", "min_lr", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", ",", "_", "=", "scheduler", ".", "create_scheduler", "(", "opt_args", ",", "optimizer", ")", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.optim.factory.create_optimizer": [[22, 24], ["timm.optim.create_optimizer"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.optim.factory.create_optimizer"], ["", "def", "create_optimizer", "(", "opt_args", ",", "model", ")", ":", "\n", "    ", "return", "optim", ".", "create_optimizer", "(", "opt_args", ",", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.__init__": [[10, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder", ",", "\n", "decoder", ",", "\n", "n_cls", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_cls", "=", "n_cls", "\n", "self", ".", "patch_size", "=", "encoder", ".", "patch_size", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.no_weight_decay": [[22, 31], ["append_prefix_no_weight_decay().union", "set", "segmenter.Segmenter.no_weight_decay.append_prefix_no_weight_decay"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "def", "append_prefix_no_weight_decay", "(", "prefix", ",", "module", ")", ":", "\n", "            ", "return", "set", "(", "map", "(", "lambda", "x", ":", "prefix", "+", "x", ",", "module", ".", "no_weight_decay", "(", ")", ")", ")", "\n", "\n", "", "nwd_params", "=", "append_prefix_no_weight_decay", "(", "\"encoder.\"", ",", "self", ".", "encoder", ")", ".", "union", "(", "\n", "append_prefix_no_weight_decay", "(", "\"decoder.\"", ",", "self", ".", "decoder", ")", "\n", ")", "\n", "return", "nwd_params", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.forward": [[32, 49], ["segm.model.utils.padding", "segmenter.Segmenter.encoder", "segmenter.Segmenter.decoder", "torch.interpolate", "torch.interpolate", "torch.interpolate", "segm.model.utils.unpadding", "segm.model.utils.padding.size", "segm.model.utils.padding.size", "segm.model.utils.padding.size", "segm.model.utils.padding.size"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.padding", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.unpadding"], ["", "def", "forward", "(", "self", ",", "im", ")", ":", "\n", "        ", "H_ori", ",", "W_ori", "=", "im", ".", "size", "(", "2", ")", ",", "im", ".", "size", "(", "3", ")", "\n", "im", "=", "padding", "(", "im", ",", "self", ".", "patch_size", ")", "\n", "H", ",", "W", "=", "im", ".", "size", "(", "2", ")", ",", "im", ".", "size", "(", "3", ")", "\n", "\n", "x", "=", "self", ".", "encoder", "(", "im", ",", "return_features", "=", "True", ")", "\n", "\n", "# remove CLS/DIST tokens for decoding", "\n", "num_extra_tokens", "=", "1", "+", "self", ".", "encoder", ".", "distilled", "\n", "x", "=", "x", "[", ":", ",", "num_extra_tokens", ":", "]", "\n", "\n", "masks", "=", "self", ".", "decoder", "(", "x", ",", "(", "H", ",", "W", ")", ")", "\n", "\n", "masks", "=", "F", ".", "interpolate", "(", "masks", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "masks", "=", "unpadding", "(", "masks", ",", "(", "H_ori", ",", "W_ori", ")", ")", "\n", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.get_attention_map_enc": [[50, 52], ["segmenter.Segmenter.encoder.get_attention_map"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.MaskTransformer.get_attention_map"], ["", "def", "get_attention_map_enc", "(", "self", ",", "im", ",", "layer_id", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_attention_map", "(", "im", ",", "layer_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.get_attention_map_dec": [[53, 61], ["segmenter.Segmenter.encoder", "segmenter.Segmenter.decoder.get_attention_map"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.MaskTransformer.get_attention_map"], ["", "def", "get_attention_map_dec", "(", "self", ",", "im", ",", "layer_id", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "im", ",", "return_features", "=", "True", ")", "\n", "\n", "# remove CLS/DIST tokens for decoding", "\n", "num_extra_tokens", "=", "1", "+", "self", ".", "encoder", ".", "distilled", "\n", "x", "=", "x", "[", ":", ",", "num_extra_tokens", ":", "]", "\n", "\n", "return", "self", ".", "decoder", ".", "get_attention_map", "(", "x", ",", "layer_id", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.PatchEmbedding.__init__": [[18, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "patch_size", ",", "embed_dim", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_size", "=", "image_size", "\n", "if", "image_size", "[", "0", "]", "%", "patch_size", "!=", "0", "or", "image_size", "[", "1", "]", "%", "patch_size", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"image dimensions must be divisible by the patch size\"", ")", "\n", "", "self", ".", "grid_size", "=", "image_size", "[", "0", "]", "//", "patch_size", ",", "image_size", "[", "1", "]", "//", "patch_size", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "\n", "channels", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.PatchEmbedding.forward": [[32, 36], ["vit.PatchEmbedding.proj().flatten().transpose", "vit.PatchEmbedding.proj().flatten", "vit.PatchEmbedding.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "im", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "im", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "im", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.VisionTransformer.__init__": [[39, 99], ["torch.Module.__init__", "vit.PatchEmbedding", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "torch.Identity", "torch.Identity", "vit.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "x.item", "timm.models.layers.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "segm.model.blocks.Block", "range"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "patch_size", ",", "\n", "n_layers", ",", "\n", "d_model", ",", "\n", "d_ff", ",", "\n", "n_heads", ",", "\n", "n_cls", ",", "\n", "dropout", "=", "0.1", ",", "\n", "drop_path_rate", "=", "0.0", ",", "\n", "distilled", "=", "False", ",", "\n", "channels", "=", "3", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_embed", "=", "PatchEmbedding", "(", "\n", "image_size", ",", "\n", "patch_size", ",", "\n", "d_model", ",", "\n", "channels", ",", "\n", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_ff", "=", "d_ff", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "n_cls", "=", "n_cls", "\n", "\n", "# cls and pos tokens", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "d_model", ")", ")", "\n", "self", ".", "distilled", "=", "distilled", "\n", "if", "self", ".", "distilled", ":", "\n", "            ", "self", ".", "dist_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "d_model", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "1", ",", "self", ".", "patch_embed", ".", "num_patches", "+", "2", ",", "d_model", ")", "\n", ")", "\n", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_cls", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "1", ",", "self", ".", "patch_embed", ".", "num_patches", "+", "1", ",", "d_model", ")", "\n", ")", "\n", "\n", "# transformer blocks", "\n", "", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "n_layers", ")", "]", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Block", "(", "d_model", ",", "n_heads", ",", "d_ff", ",", "dropout", ",", "dpr", "[", "i", "]", ")", "for", "i", "in", "range", "(", "n_layers", ")", "]", "\n", ")", "\n", "\n", "# output head", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_cls", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", "0.02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", "0.02", ")", "\n", "if", "self", ".", "distilled", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "dist_token", ",", "std", "=", "0.02", ")", "\n", "", "self", ".", "pre_logits", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.VisionTransformer.no_weight_decay": [[100, 103], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"pos_embed\"", ",", "\"cls_token\"", ",", "\"dist_token\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.VisionTransformer.load_pretrained": [[104, 107], ["torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "timm.models.vision_transformer._load_weights"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "(", ")", "\n", "def", "load_pretrained", "(", "self", ",", "checkpoint_path", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "_load_weights", "(", "self", ",", "checkpoint_path", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.VisionTransformer.forward": [[108, 148], ["vit.VisionTransformer.patch_embed", "vit.VisionTransformer.cls_token.expand", "vit.VisionTransformer.dropout", "vit.VisionTransformer.norm", "vit.VisionTransformer.dist_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "segm.model.utils.resize_pos_embed", "blk", "vit.VisionTransformer.head", "vit.VisionTransformer.head_dist", "vit.VisionTransformer.head"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.resize_pos_embed"], ["", "def", "forward", "(", "self", ",", "im", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "B", ",", "_", ",", "H", ",", "W", "=", "im", ".", "shape", "\n", "PS", "=", "self", ".", "patch_size", "\n", "\n", "x", "=", "self", ".", "patch_embed", "(", "im", ")", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "if", "self", ".", "distilled", ":", "\n", "            ", "dist_tokens", "=", "self", ".", "dist_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "dist_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "pos_embed", "=", "self", ".", "pos_embed", "\n", "num_extra_tokens", "=", "1", "+", "self", ".", "distilled", "\n", "if", "x", ".", "shape", "[", "1", "]", "!=", "pos_embed", ".", "shape", "[", "1", "]", ":", "\n", "            ", "pos_embed", "=", "resize_pos_embed", "(", "\n", "pos_embed", ",", "\n", "self", ".", "patch_embed", ".", "grid_size", ",", "\n", "(", "H", "//", "PS", ",", "W", "//", "PS", ")", ",", "\n", "num_extra_tokens", ",", "\n", ")", "\n", "", "x", "=", "x", "+", "pos_embed", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "self", ".", "distilled", ":", "\n", "            ", "x", ",", "x_dist", "=", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x_dist", "=", "self", ".", "head_dist", "(", "x_dist", ")", "\n", "x", "=", "(", "x", "+", "x_dist", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", "0", "]", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.VisionTransformer.get_attention_map": [[149, 181], ["vit.VisionTransformer.patch_embed", "vit.VisionTransformer.cls_token.expand", "enumerate", "ValueError", "vit.VisionTransformer.dist_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "segm.model.utils.resize_pos_embed", "blk", "blk"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.resize_pos_embed"], ["", "def", "get_attention_map", "(", "self", ",", "im", ",", "layer_id", ")", ":", "\n", "        ", "if", "layer_id", ">=", "self", ".", "n_layers", "or", "layer_id", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Provided layer_id: {layer_id} is not valid. 0 <= {layer_id} < {self.n_layers}.\"", "\n", ")", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "im", ".", "shape", "\n", "PS", "=", "self", ".", "patch_size", "\n", "\n", "x", "=", "self", ".", "patch_embed", "(", "im", ")", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "if", "self", ".", "distilled", ":", "\n", "            ", "dist_tokens", "=", "self", ".", "dist_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "dist_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "pos_embed", "=", "self", ".", "pos_embed", "\n", "num_extra_tokens", "=", "1", "+", "self", ".", "distilled", "\n", "if", "x", ".", "shape", "[", "1", "]", "!=", "pos_embed", ".", "shape", "[", "1", "]", ":", "\n", "            ", "pos_embed", "=", "resize_pos_embed", "(", "\n", "pos_embed", ",", "\n", "self", ".", "patch_embed", ".", "grid_size", ",", "\n", "(", "H", "//", "PS", ",", "W", "//", "PS", ")", ",", "\n", "num_extra_tokens", ",", "\n", ")", "\n", "", "x", "=", "x", "+", "pos_embed", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "i", "<", "layer_id", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.DecoderLinear.__init__": [[14, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "decoder.DecoderLinear.apply"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_cls", ",", "patch_size", ",", "d_encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_encoder", "=", "d_encoder", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "n_cls", "=", "n_cls", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "d_encoder", ",", "n_cls", ")", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.DecoderLinear.no_weight_decay": [[24, 27], ["set"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.DecoderLinear.forward": [[28, 35], ["decoder.DecoderLinear.head", "einops.rearrange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "im_size", ")", ":", "\n", "        ", "H", ",", "W", "=", "im_size", "\n", "GS", "=", "H", "//", "self", ".", "patch_size", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "rearrange", "(", "x", ",", "\"b (h w) c -> b c h w\"", ",", "h", "=", "GS", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.MaskTransformer.__init__": [[38, 75], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "decoder.MaskTransformer.apply", "timm.models.layers.trunc_normal_", "x.item", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "segm.model.blocks.Block", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "range"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_cls", ",", "\n", "patch_size", ",", "\n", "d_encoder", ",", "\n", "n_layers", ",", "\n", "n_heads", ",", "\n", "d_model", ",", "\n", "d_ff", ",", "\n", "drop_path_rate", ",", "\n", "dropout", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_encoder", "=", "d_encoder", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_cls", "=", "n_cls", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_ff", "=", "d_ff", "\n", "self", ".", "scale", "=", "d_model", "**", "-", "0.5", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "n_layers", ")", "]", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Block", "(", "d_model", ",", "n_heads", ",", "d_ff", ",", "dropout", ",", "dpr", "[", "i", "]", ")", "for", "i", "in", "range", "(", "n_layers", ")", "]", "\n", ")", "\n", "\n", "self", ".", "cls_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "n_cls", ",", "d_model", ")", ")", "\n", "self", ".", "proj_dec", "=", "nn", ".", "Linear", "(", "d_encoder", ",", "d_model", ")", "\n", "\n", "self", ".", "proj_patch", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "randn", "(", "d_model", ",", "d_model", ")", ")", "\n", "self", ".", "proj_classes", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "randn", "(", "d_model", ",", "d_model", ")", ")", "\n", "\n", "self", ".", "decoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "mask_norm", "=", "nn", ".", "LayerNorm", "(", "n_cls", ")", "\n", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_emb", ",", "std", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.MaskTransformer.no_weight_decay": [[76, 79], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"cls_emb\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.MaskTransformer.forward": [[80, 103], ["decoder.MaskTransformer.proj_dec", "decoder.MaskTransformer.cls_emb.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MaskTransformer.decoder_norm", "decoder.MaskTransformer.mask_norm", "einops.rearrange", "blk.size", "blk", "patches.norm", "cls_seg_feat.norm", "cls_seg_feat.transpose", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "im_size", ")", ":", "\n", "        ", "H", ",", "W", "=", "im_size", "\n", "GS", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x", "=", "self", ".", "proj_dec", "(", "x", ")", "\n", "cls_emb", "=", "self", ".", "cls_emb", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "cls_emb", ")", ",", "1", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "self", ".", "decoder_norm", "(", "x", ")", "\n", "\n", "patches", ",", "cls_seg_feat", "=", "x", "[", ":", ",", ":", "-", "self", ".", "n_cls", "]", ",", "x", "[", ":", ",", "-", "self", ".", "n_cls", ":", "]", "\n", "patches", "=", "patches", "@", "self", ".", "proj_patch", "\n", "cls_seg_feat", "=", "cls_seg_feat", "@", "self", ".", "proj_classes", "\n", "\n", "patches", "=", "patches", "/", "patches", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "cls_seg_feat", "=", "cls_seg_feat", "/", "cls_seg_feat", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "masks", "=", "patches", "@", "cls_seg_feat", ".", "transpose", "(", "1", ",", "2", ")", "\n", "masks", "=", "self", ".", "mask_norm", "(", "masks", ")", "\n", "masks", "=", "rearrange", "(", "masks", ",", "\"b (h w) n -> b n h w\"", ",", "h", "=", "int", "(", "GS", ")", ")", "\n", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.decoder.MaskTransformer.get_attention_map": [[104, 117], ["decoder.MaskTransformer.proj_dec", "decoder.MaskTransformer.cls_emb.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "ValueError", "blk.size", "blk", "blk"], "methods", ["None"], ["", "def", "get_attention_map", "(", "self", ",", "x", ",", "layer_id", ")", ":", "\n", "        ", "if", "layer_id", ">=", "self", ".", "n_layers", "or", "layer_id", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Provided layer_id: {layer_id} is not valid. 0 <= {layer_id} < {self.n_layers}.\"", "\n", ")", "\n", "", "x", "=", "self", ".", "proj_dec", "(", "x", ")", "\n", "cls_emb", "=", "self", ".", "cls_emb", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "cls_emb", ")", ",", "1", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "i", "<", "layer_id", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.FeedForward.__init__": [[17, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "dropout", ",", "out_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", "\n", "self", ".", "act", "=", "nn", ".", "GELU", "(", ")", "\n", "if", "out_dim", "is", "None", ":", "\n", "            ", "out_dim", "=", "dim", "\n", "", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.FeedForward.unwrapped": [[26, 29], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.FeedForward.forward": [[30, 37], ["blocks.FeedForward.fc1", "blocks.FeedForward.act", "blocks.FeedForward.drop", "blocks.FeedForward.fc2", "blocks.FeedForward.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Attention.__init__": [[40, 51], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "heads", "=", "heads", "\n", "head_dim", "=", "dim", "//", "heads", "\n", "self", ".", "scale", "=", "head_dim", "**", "-", "0.5", "\n", "self", ".", "attn", "=", "None", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Attention.unwrapped": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Attention.forward": [[56, 78], ["blocks.Attention.qkv().reshape().permute", "blocks.Attention.softmax", "blocks.Attention.attn_drop", "blocks.Attention.proj", "blocks.Attention.proj_drop", "blocks.Attention.qkv().reshape", "k.transpose", "blocks.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "(", "\n", "self", ".", "qkv", "(", "x", ")", "\n", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "heads", ",", "C", "//", "self", ".", "heads", ")", "\n", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", ")", "\n", "q", ",", "k", ",", "v", "=", "(", "\n", "qkv", "[", "0", "]", ",", "\n", "qkv", "[", "1", "]", ",", "\n", "qkv", "[", "2", "]", ",", "\n", ")", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Block.__init__": [[81, 88], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "blocks.Attention", "blocks.FeedForward", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", ",", "mlp_dim", ",", "dropout", ",", "drop_path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "dim", ",", "heads", ",", "dropout", ")", "\n", "self", ".", "mlp", "=", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Block.forward": [[89, 96], ["blocks.Block.attn", "blocks.Block.norm1", "blocks.Block.drop_path", "blocks.Block.drop_path", "blocks.Block.mlp", "blocks.Block.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "y", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "mask", ")", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.vit_base_patch8_384": [[21, 40], ["dict", "timm.models.vision_transformer._create_vision_transformer", "dict"], "function", ["None"], ["\n", "", "def", "create_optimizer", "(", "opt_args", ",", "model", ")", ":", "\n", "    ", "return", "optim", ".", "create_optimizer", "(", "opt_args", ",", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_vit": [[42, 79], ["model_cfg.copy.copy", "model_cfg.copy.pop", "model_cfg.copy.pop", "segm.model.vit.VisionTransformer", "dict", "os.path.expandvars", "torch.load", "torch.load", "segm.model.utils.checkpoint_filter_fn", "segm.model.vit.VisionTransformer.load_state_dict", "timm.models.helpers.load_pretrained", "timm.models.helpers.load_custom_pretrained"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.checkpoint_filter_fn", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.vit.VisionTransformer.load_pretrained"], []], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_decoder": [[81, 99], ["decoder_cfg.copy.copy", "decoder_cfg.copy.pop", "segm.model.decoder.DecoderLinear", "segm.model.decoder.MaskTransformer", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_segmenter": [[101, 111], ["model_cfg.copy.copy", "model_cfg.copy.pop", "factory.create_vit", "factory.create_decoder", "segm.model.segmenter.Segmenter"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_vit", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_decoder"], []], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.load_model": [[113, 126], ["factory.create_segmenter", "torch.load", "torch.load", "create_segmenter.load_state_dict", "open", "yaml.load", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_segmenter"], []], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.init_weights": [[12, 20], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.resize_pos_embed": [[22, 41], ["posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "int", "math.sqrt", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "len"], "function", ["None"], ["", "", "def", "resize_pos_embed", "(", "posemb", ",", "grid_old_shape", ",", "grid_new_shape", ",", "num_extra_tokens", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "posemb_tok", ",", "posemb_grid", "=", "(", "\n", "posemb", "[", ":", ",", ":", "num_extra_tokens", "]", ",", "\n", "posemb", "[", "0", ",", "num_extra_tokens", ":", "]", ",", "\n", ")", "\n", "if", "grid_old_shape", "is", "None", ":", "\n", "        ", "gs_old_h", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "gs_old_w", "=", "gs_old_h", "\n", "", "else", ":", "\n", "        ", "gs_old_h", ",", "gs_old_w", "=", "grid_old_shape", "\n", "\n", "", "gs_h", ",", "gs_w", "=", "grid_new_shape", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old_h", ",", "gs_old_w", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "(", "gs_h", ",", "gs_w", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "gs_h", "*", "gs_w", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.checkpoint_filter_fn": [[43, 63], ["state_dict.items", "state_dict.keys", "utils.resize_pos_embed"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.resize_pos_embed"], ["", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "if", "\"model\"", "in", "state_dict", ":", "\n", "# For deit models", "\n", "        ", "state_dict", "=", "state_dict", "[", "\"model\"", "]", "\n", "", "num_extra_tokens", "=", "1", "+", "(", "\"dist_token\"", "in", "state_dict", ".", "keys", "(", ")", ")", "\n", "patch_size", "=", "model", ".", "patch_size", "\n", "image_size", "=", "model", ".", "patch_embed", ".", "image_size", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "\"pos_embed\"", "and", "v", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "            ", "v", "=", "resize_pos_embed", "(", "\n", "v", ",", "\n", "None", ",", "\n", "(", "image_size", "[", "0", "]", "//", "patch_size", ",", "image_size", "[", "1", "]", "//", "patch_size", ")", ",", "\n", "num_extra_tokens", ",", "\n", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.padding": [[65, 77], ["im.size", "im.size", "torch.pad"], "function", ["None"], ["", "def", "padding", "(", "im", ",", "patch_size", ",", "fill_value", "=", "0", ")", ":", "\n", "# make the image sizes divisible by patch_size", "\n", "    ", "H", ",", "W", "=", "im", ".", "size", "(", "2", ")", ",", "im", ".", "size", "(", "3", ")", "\n", "pad_h", ",", "pad_w", "=", "0", ",", "0", "\n", "if", "H", "%", "patch_size", ">", "0", ":", "\n", "        ", "pad_h", "=", "patch_size", "-", "(", "H", "%", "patch_size", ")", "\n", "", "if", "W", "%", "patch_size", ">", "0", ":", "\n", "        ", "pad_w", "=", "patch_size", "-", "(", "W", "%", "patch_size", ")", "\n", "", "im_padded", "=", "im", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "im_padded", "=", "F", ".", "pad", "(", "im", ",", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ",", "value", "=", "fill_value", ")", "\n", "", "return", "im_padded", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.unpadding": [[79, 90], ["y.size", "y.size"], "function", ["None"], ["", "def", "unpadding", "(", "y", ",", "target_size", ")", ":", "\n", "    ", "H", ",", "W", "=", "target_size", "\n", "H_pad", ",", "W_pad", "=", "y", ".", "size", "(", "2", ")", ",", "y", ".", "size", "(", "3", ")", "\n", "# crop predictions on extra pixels coming from padding", "\n", "extra_h", "=", "H_pad", "-", "H", "\n", "extra_w", "=", "W_pad", "-", "W", "\n", "if", "extra_h", ">", "0", ":", "\n", "        ", "y", "=", "y", "[", ":", ",", ":", ",", ":", "-", "extra_h", "]", "\n", "", "if", "extra_w", ">", "0", ":", "\n", "        ", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", ":", "-", "extra_w", "]", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.resize": [[92, 105], ["min", "torch.interpolate", "int", "int", "segm.ptu.device"], "function", ["None"], ["", "def", "resize", "(", "im", ",", "smaller_size", ")", ":", "\n", "    ", "h", ",", "w", "=", "im", ".", "shape", "[", "2", ":", "]", "\n", "if", "h", "<", "w", ":", "\n", "        ", "ratio", "=", "w", "/", "h", "\n", "h_res", ",", "w_res", "=", "smaller_size", ",", "ratio", "*", "smaller_size", "\n", "", "else", ":", "\n", "        ", "ratio", "=", "h", "/", "w", "\n", "h_res", ",", "w_res", "=", "ratio", "*", "smaller_size", ",", "smaller_size", "\n", "", "if", "min", "(", "h", ",", "w", ")", "<", "smaller_size", ":", "\n", "        ", "im_res", "=", "F", ".", "interpolate", "(", "im", ",", "(", "int", "(", "h_res", ")", ",", "int", "(", "w_res", ")", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "", "else", ":", "\n", "        ", "im_res", "=", "im", "\n", "", "return", "im_res", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.sliding_window": [[107, 124], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "h.item", "w.item", "windows[].append", "windows[].append"], "function", ["None"], ["", "def", "sliding_window", "(", "im", ",", "flip", ",", "window_size", ",", "window_stride", ")", ":", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "im", ".", "shape", "\n", "ws", "=", "window_size", "\n", "\n", "windows", "=", "{", "\"crop\"", ":", "[", "]", ",", "\"anchors\"", ":", "[", "]", "}", "\n", "h_anchors", "=", "torch", ".", "arange", "(", "0", ",", "H", ",", "window_stride", ")", "\n", "w_anchors", "=", "torch", ".", "arange", "(", "0", ",", "W", ",", "window_stride", ")", "\n", "h_anchors", "=", "[", "h", ".", "item", "(", ")", "for", "h", "in", "h_anchors", "if", "h", "<", "H", "-", "ws", "]", "+", "[", "H", "-", "ws", "]", "\n", "w_anchors", "=", "[", "w", ".", "item", "(", ")", "for", "w", "in", "w_anchors", "if", "w", "<", "W", "-", "ws", "]", "+", "[", "W", "-", "ws", "]", "\n", "for", "ha", "in", "h_anchors", ":", "\n", "        ", "for", "wa", "in", "w_anchors", ":", "\n", "            ", "window", "=", "im", "[", ":", ",", ":", ",", "ha", ":", "ha", "+", "ws", ",", "wa", ":", "wa", "+", "ws", "]", "\n", "windows", "[", "\"crop\"", "]", ".", "append", "(", "window", ")", "\n", "windows", "[", "\"anchors\"", "]", ".", "append", "(", "(", "ha", ",", "wa", ")", ")", "\n", "", "", "windows", "[", "\"flip\"", "]", "=", "flip", "\n", "windows", "[", "\"shape\"", "]", "=", "(", "H", ",", "W", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.merge_windows": [[126, 149], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "torch.softmax", "torch.interpolate", "torch.flip", "torch.flip", "torch.flip", "torch.flip.unsqueeze"], "function", ["None"], ["", "def", "merge_windows", "(", "windows", ",", "window_size", ",", "ori_shape", ")", ":", "\n", "    ", "ws", "=", "window_size", "\n", "im_windows", "=", "windows", "[", "\"seg_maps\"", "]", "\n", "anchors", "=", "windows", "[", "\"anchors\"", "]", "\n", "C", "=", "im_windows", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "H", ",", "W", "=", "windows", "[", "\"shape\"", "]", "\n", "flip", "=", "windows", "[", "\"flip\"", "]", "\n", "\n", "logit", "=", "torch", ".", "zeros", "(", "(", "C", ",", "H", ",", "W", ")", ",", "device", "=", "im_windows", ".", "device", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H", ",", "W", ")", ",", "device", "=", "im_windows", ".", "device", ")", "\n", "for", "window", ",", "(", "ha", ",", "wa", ")", "in", "zip", "(", "im_windows", ",", "anchors", ")", ":", "\n", "        ", "logit", "[", ":", ",", "ha", ":", "ha", "+", "ws", ",", "wa", ":", "wa", "+", "ws", "]", "+=", "window", "\n", "count", "[", ":", ",", "ha", ":", "ha", "+", "ws", ",", "wa", ":", "wa", "+", "ws", "]", "+=", "1", "\n", "", "logit", "=", "logit", "/", "count", "\n", "logit", "=", "F", ".", "interpolate", "(", "\n", "logit", ".", "unsqueeze", "(", "0", ")", ",", "\n", "ori_shape", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", ")", "[", "0", "]", "\n", "if", "flip", ":", "\n", "        ", "logit", "=", "torch", ".", "flip", "(", "logit", ",", "(", "2", ",", ")", ")", "\n", "", "result", "=", "F", ".", "softmax", "(", "logit", ",", "0", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.inference": [[151, 179], ["torch.zeros", "torch.zeros", "torch.zeros", "zip", "len", "resize.to", "utils.resize", "utils.sliding_window", "len", "torch.zeros", "torch.zeros", "torch.zeros", "utils.merge_windows", "torch.stack", "torch.stack", "torch.stack", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "sliding_window.pop", "model.forward"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.resize", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.sliding_window", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.merge_windows", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Block.forward"], ["", "def", "inference", "(", "\n", "model", ",", "\n", "ims", ",", "\n", "ims_metas", ",", "\n", "ori_shape", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "batch_size", ",", "\n", ")", ":", "\n", "    ", "C", "=", "model", ".", "n_cls", "\n", "seg_map", "=", "torch", ".", "zeros", "(", "(", "C", ",", "ori_shape", "[", "0", "]", ",", "ori_shape", "[", "1", "]", ")", ",", "device", "=", "ptu", ".", "device", ")", "\n", "for", "im", ",", "im_metas", "in", "zip", "(", "ims", ",", "ims_metas", ")", ":", "\n", "        ", "im", "=", "im", ".", "to", "(", "ptu", ".", "device", ")", "\n", "im", "=", "resize", "(", "im", ",", "window_size", ")", "\n", "flip", "=", "im_metas", "[", "\"flip\"", "]", "\n", "windows", "=", "sliding_window", "(", "im", ",", "flip", ",", "window_size", ",", "window_stride", ")", "\n", "crops", "=", "torch", ".", "stack", "(", "windows", ".", "pop", "(", "\"crop\"", ")", ")", "[", ":", ",", "0", "]", "\n", "B", "=", "len", "(", "crops", ")", "\n", "WB", "=", "batch_size", "\n", "seg_maps", "=", "torch", ".", "zeros", "(", "(", "B", ",", "C", ",", "window_size", ",", "window_size", ")", ",", "device", "=", "im", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "B", ",", "WB", ")", ":", "\n", "                ", "seg_maps", "[", "i", ":", "i", "+", "WB", "]", "=", "model", ".", "forward", "(", "crops", "[", "i", ":", "i", "+", "WB", "]", ")", "\n", "", "", "windows", "[", "\"seg_maps\"", "]", "=", "seg_maps", "\n", "im_seg_map", "=", "merge_windows", "(", "windows", ",", "window_size", ",", "ori_shape", ")", "\n", "seg_map", "+=", "im_seg_map", "\n", "", "seg_map", "/=", "len", "(", "ims", ")", "\n", "return", "seg_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.num_params": [[181, 185], ["filter", "sum", "sum.item", "model.parameters", "torch.prod", "torch.prod", "torch.prod", "torch.tensor", "torch.tensor", "torch.tensor", "p.size"], "function", ["None"], ["", "def", "num_params", "(", "model", ")", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "n_params", "=", "sum", "(", "[", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "n_params", ".", "item", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.blend_im": [[26, 31], ["PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.blend().convert", "numpy.asarray", "PIL.Image.blend"], "function", ["None"], ["def", "blend_im", "(", "im", ",", "seg", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "pil_im", "=", "Image", ".", "fromarray", "(", "im", ")", "\n", "pil_seg", "=", "Image", ".", "fromarray", "(", "seg", ")", "\n", "im_blend", "=", "Image", ".", "blend", "(", "pil_im", ",", "pil_seg", ",", "alpha", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "np", ".", "asarray", "(", "im_blend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.save_im": [[33, 56], ["segm.data.utils.seg_to_rgb", "segm.data.utils.seg_to_rgb", "segm.data.utils.rgb_denormalize", "pathlib.Path", "segm.data.utils.rgb_denormalize.permute().cpu().numpy().astype", "range", "zip", "segm.data.utils.rgb_denormalize.permute().cpu().numpy", "miou.blend_im", "miou.blend_im", "PIL.Image.fromarray", "im_dir.mkdir", "Image.fromarray.save", "segm.data.utils.seg_to_rgb.cpu().numpy", "segm.data.utils.seg_to_rgb.cpu().numpy", "segm.data.utils.rgb_denormalize.permute().cpu", "segm.data.utils.seg_to_rgb.cpu", "segm.data.utils.seg_to_rgb.cpu", "segm.data.utils.rgb_denormalize.permute"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.seg_to_rgb", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.seg_to_rgb", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.rgb_denormalize", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.blend_im", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.blend_im"], ["", "def", "save_im", "(", "save_dir", ",", "save_name", ",", "im", ",", "seg_pred", ",", "seg_gt", ",", "colors", ",", "blend", ",", "normalization", ")", ":", "\n", "    ", "seg_rgb", "=", "seg_to_rgb", "(", "seg_gt", "[", "None", "]", ",", "colors", ")", "\n", "pred_rgb", "=", "seg_to_rgb", "(", "seg_pred", "[", "None", "]", ",", "colors", ")", "\n", "im_unnorm", "=", "rgb_denormalize", "(", "im", ",", "normalization", ")", "\n", "save_dir", "=", "Path", "(", "save_dir", ")", "\n", "\n", "# save images", "\n", "im_uint", "=", "(", "im_unnorm", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "seg_rgb_uint", "=", "(", "255", "*", "seg_rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "seg_pred_uint", "=", "(", "255", "*", "pred_rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "pred_rgb", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "blend", ":", "\n", "            ", "blend_pred", "=", "blend_im", "(", "im_uint", "[", "i", "]", ",", "seg_pred_uint", "[", "i", "]", ")", "\n", "blend_gt", "=", "blend_im", "(", "im_uint", "[", "i", "]", ",", "seg_rgb_uint", "[", "i", "]", ")", "\n", "ims", "=", "(", "im_uint", "[", "i", "]", ",", "blend_pred", ",", "blend_gt", ")", "\n", "", "else", ":", "\n", "            ", "ims", "=", "(", "im_uint", "[", "i", "]", ",", "seg_pred_uint", "[", "i", "]", ",", "seg_rgb_uint", "[", "i", "]", ")", "\n", "", "for", "im", ",", "im_dir", "in", "zip", "(", "\n", "ims", ",", "(", "save_dir", "/", "\"input\"", ",", "save_dir", "/", "\"pred\"", ",", "save_dir", "/", "\"gt\"", ")", ",", "\n", ")", ":", "\n", "            ", "pil_out", "=", "Image", ".", "fromarray", "(", "im", ")", "\n", "im_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "pil_out", ".", "save", "(", "im_dir", "/", "save_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.process_batch": [[58, 83], ["segm.model.utils.inference", "seg_pred.argmax.argmax", "torch.interpolate", "ori_shape[].item", "ori_shape[].item", "F.interpolate.cpu", "seg_pred.argmax.cpu"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.model.utils.inference"], ["", "", "", "def", "process_batch", "(", "\n", "model", ",", "batch", ",", "window_size", ",", "window_stride", ",", "window_batch_size", ",", "\n", ")", ":", "\n", "    ", "ims", "=", "batch", "[", "\"im\"", "]", "\n", "ims_metas", "=", "batch", "[", "\"im_metas\"", "]", "\n", "ori_shape", "=", "ims_metas", "[", "0", "]", "[", "\"ori_shape\"", "]", "\n", "ori_shape", "=", "(", "ori_shape", "[", "0", "]", ".", "item", "(", ")", ",", "ori_shape", "[", "1", "]", ".", "item", "(", ")", ")", "\n", "filename", "=", "batch", "[", "\"im_metas\"", "]", "[", "0", "]", "[", "\"ori_filename\"", "]", "[", "0", "]", "\n", "\n", "model_without_ddp", "=", "model", "\n", "if", "ptu", ".", "distributed", ":", "\n", "        ", "model_without_ddp", "=", "model", ".", "module", "\n", "", "seg_pred", "=", "inference", "(", "\n", "model_without_ddp", ",", "\n", "ims", ",", "\n", "ims_metas", ",", "\n", "ori_shape", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "window_batch_size", ",", "\n", ")", "\n", "seg_pred", "=", "seg_pred", ".", "argmax", "(", "0", ")", "\n", "im", "=", "F", ".", "interpolate", "(", "ims", "[", "-", "1", "]", ",", "ori_shape", ",", "mode", "=", "\"bilinear\"", ")", "\n", "\n", "return", "filename", ",", "im", ".", "cpu", "(", ")", ",", "seg_pred", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.eval_dataset": [[85, 185], ["segm.data.factory.create_dataset", "segm.utils.logger.MetricLogger", "segm.utils.logger.MetricLogger.log_every", "segm.data.factory.create_dataset.dataset.get_gt_seg_maps", "segm.metrics.compute_metrics", "segm.data.factory.create_dataset.dataset.set_multiscale_mode", "miou.process_batch", "sorted", "torch.distributed.barrier", "torch.distributed.barrier", "segm.metrics.gather_data", "numpy.round().tolist", "segm.metrics.compute_metrics.items", "yaml.dump", "save_dir.exists", "save_dir.mkdir", "torch.distributed.barrier", "torch.distributed.barrier", "miou.save_im", "shutil.make_archive", "print", "open", "f.write", "len", "shutil.rmtree", "name.split", "torch.tensor", "torch.tensor", "numpy.round", "v.item", "print", "instance_dir.exists", "instance_dir.mkdir"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.factory.create_dataset", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.log_every", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.get_gt_seg_maps", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.compute_metrics", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.set_multiscale_mode", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.process_batch", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.gather_data", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.save_im"], ["", "def", "eval_dataset", "(", "\n", "model", ",", "\n", "multiscale", ",", "\n", "model_dir", ",", "\n", "blend", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "window_batch_size", ",", "\n", "save_images", ",", "\n", "frac_dataset", ",", "\n", "dataset_kwargs", ",", "\n", ")", ":", "\n", "    ", "db", "=", "create_dataset", "(", "dataset_kwargs", ")", "\n", "normalization", "=", "db", ".", "dataset", ".", "normalization", "\n", "dataset_name", "=", "dataset_kwargs", "[", "\"dataset\"", "]", "\n", "im_size", "=", "dataset_kwargs", "[", "\"image_size\"", "]", "\n", "cat_names", "=", "db", ".", "base_dataset", ".", "names", "\n", "n_cls", "=", "db", ".", "unwrapped", ".", "n_cls", "\n", "if", "multiscale", ":", "\n", "        ", "db", ".", "dataset", ".", "set_multiscale_mode", "(", ")", "\n", "\n", "", "logger", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "\"\"", "\n", "print_freq", "=", "50", "\n", "\n", "ims", "=", "{", "}", "\n", "seg_pred_maps", "=", "{", "}", "\n", "idx", "=", "0", "\n", "for", "batch", "in", "logger", ".", "log_every", "(", "db", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "colors", "=", "batch", "[", "\"colors\"", "]", "\n", "filename", ",", "im", ",", "seg_pred", "=", "process_batch", "(", "\n", "model", ",", "batch", ",", "window_size", ",", "window_stride", ",", "window_batch_size", ",", "\n", ")", "\n", "ims", "[", "filename", "]", "=", "im", "\n", "seg_pred_maps", "[", "filename", "]", "=", "seg_pred", "\n", "idx", "+=", "1", "\n", "if", "idx", ">", "len", "(", "db", ")", "*", "frac_dataset", ":", "\n", "            ", "break", "\n", "\n", "", "", "seg_gt_maps", "=", "db", ".", "dataset", ".", "get_gt_seg_maps", "(", ")", "\n", "if", "save_images", ":", "\n", "        ", "save_dir", "=", "model_dir", "/", "\"images\"", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "            ", "if", "save_dir", ".", "exists", "(", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "", "save_dir", ".", "mkdir", "(", ")", "\n", "", "if", "ptu", ".", "distributed", ":", "\n", "            ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "for", "name", "in", "sorted", "(", "ims", ")", ":", "\n", "            ", "instance_dir", "=", "save_dir", "\n", "filename", "=", "name", "\n", "\n", "if", "dataset_name", "==", "\"cityscapes\"", ":", "\n", "                ", "filename_list", "=", "name", ".", "split", "(", "\"/\"", ")", "\n", "instance_dir", "=", "instance_dir", "/", "filename_list", "[", "0", "]", "\n", "filename", "=", "filename_list", "[", "-", "1", "]", "\n", "if", "not", "instance_dir", ".", "exists", "(", ")", ":", "\n", "                    ", "instance_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "", "save_im", "(", "\n", "instance_dir", ",", "\n", "filename", ",", "\n", "ims", "[", "name", "]", ",", "\n", "seg_pred_maps", "[", "name", "]", ",", "\n", "torch", ".", "tensor", "(", "seg_gt_maps", "[", "name", "]", ")", ",", "\n", "colors", ",", "\n", "blend", ",", "\n", "normalization", ",", "\n", ")", "\n", "", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "            ", "shutil", ".", "make_archive", "(", "save_dir", ",", "\"zip\"", ",", "save_dir", ")", "\n", "# shutil.rmtree(save_dir)", "\n", "print", "(", "f\"Saved eval images in {save_dir}.zip\"", ")", "\n", "\n", "", "", "if", "ptu", ".", "distributed", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "seg_pred_maps", "=", "gather_data", "(", "seg_pred_maps", ")", "\n", "\n", "", "scores", "=", "compute_metrics", "(", "\n", "seg_pred_maps", ",", "\n", "seg_gt_maps", ",", "\n", "n_cls", ",", "\n", "ignore_index", "=", "IGNORE_LABEL", ",", "\n", "ret_cat_iou", "=", "True", ",", "\n", "distributed", "=", "ptu", ".", "distributed", ",", "\n", ")", "\n", "\n", "if", "ptu", ".", "dist_rank", "==", "0", ":", "\n", "        ", "scores", "[", "\"inference\"", "]", "=", "\"single_scale\"", "if", "not", "multiscale", "else", "\"multi_scale\"", "\n", "suffix", "=", "\"ss\"", "if", "not", "multiscale", "else", "\"ms\"", "\n", "scores", "[", "\"cat_iou\"", "]", "=", "np", ".", "round", "(", "100", "*", "scores", "[", "\"cat_iou\"", "]", ",", "2", ")", ".", "tolist", "(", ")", "\n", "for", "k", ",", "v", "in", "scores", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"cat_iou\"", "and", "k", "!=", "\"inference\"", ":", "\n", "                ", "scores", "[", "k", "]", "=", "v", ".", "item", "(", ")", "\n", "", "if", "k", "!=", "\"cat_iou\"", ":", "\n", "                ", "print", "(", "f\"{k}: {scores[k]}\"", ")", "\n", "", "", "scores_str", "=", "yaml", ".", "dump", "(", "scores", ")", "\n", "with", "open", "(", "model_dir", "/", "f\"scores_{suffix}.yml\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "scores_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.miou.main": [[187, 263], ["click.command", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "segm.set_gpu_mode", "segm.utils.distributed.init_process", "segm.model.factory.load_model", "torch.nn.parallel.DistributedDataParallel.eval", "torch.nn.parallel.DistributedDataParallel.to", "segm.config.load_config", "dict", "miou.eval_dataset", "segm.utils.distributed.barrier", "segm.utils.distributed.destroy_process", "sys.exit", "pathlib.Path", "torch.nn.parallel.DistributedDataParallel", "dataset_cfg.get"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.torch.set_gpu_mode", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.init_process", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.load_model", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.load_config", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.accuracy.eval_dataset", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.barrier", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.distributed.destroy_process"], ["", "", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "\"model_path\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "\"dataset_name\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--im-size\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--multiscale/--singlescale\"", ",", "default", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "\"--blend/--no-blend\"", ",", "default", "=", "True", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "\"--window-size\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--window-stride\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--window-batch-size\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--save-images/--no-save-images\"", ",", "default", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "\"-frac-dataset\"", ",", "\"--frac-dataset\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "def", "main", "(", "\n", "model_path", ",", "\n", "dataset_name", ",", "\n", "im_size", ",", "\n", "multiscale", ",", "\n", "blend", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "window_batch_size", ",", "\n", "save_images", ",", "\n", "frac_dataset", ",", "\n", ")", ":", "\n", "\n", "    ", "model_dir", "=", "Path", "(", "model_path", ")", ".", "parent", "\n", "\n", "# start distributed mode", "\n", "ptu", ".", "set_gpu_mode", "(", "True", ")", "\n", "distributed", ".", "init_process", "(", ")", "\n", "\n", "model", ",", "variant", "=", "load_model", "(", "model_path", ")", "\n", "patch_size", "=", "model", ".", "patch_size", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "ptu", ".", "device", ")", "\n", "if", "ptu", ".", "distributed", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "ptu", ".", "device", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "cfg", "=", "config", ".", "load_config", "(", ")", "\n", "dataset_cfg", "=", "cfg", "[", "\"dataset\"", "]", "[", "dataset_name", "]", "\n", "normalization", "=", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"normalization\"", "]", "\n", "if", "im_size", "is", "None", ":", "\n", "        ", "im_size", "=", "dataset_cfg", ".", "get", "(", "\"im_size\"", ",", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"image_size\"", "]", ")", "\n", "", "if", "window_size", "is", "None", ":", "\n", "        ", "window_size", "=", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"crop_size\"", "]", "\n", "", "if", "window_stride", "is", "None", ":", "\n", "        ", "window_stride", "=", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"crop_size\"", "]", "-", "32", "\n", "\n", "", "dataset_kwargs", "=", "dict", "(", "\n", "dataset", "=", "dataset_name", ",", "\n", "image_size", "=", "im_size", ",", "\n", "crop_size", "=", "im_size", ",", "\n", "patch_size", "=", "patch_size", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "10", ",", "\n", "split", "=", "\"val\"", ",", "\n", "normalization", "=", "normalization", ",", "\n", "crop", "=", "False", ",", "\n", "rep_aug", "=", "False", ",", "\n", ")", "\n", "\n", "eval_dataset", "(", "\n", "model", ",", "\n", "multiscale", ",", "\n", "model_dir", ",", "\n", "blend", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "window_batch_size", ",", "\n", "save_images", ",", "\n", "frac_dataset", ",", "\n", "dataset_kwargs", ",", "\n", ")", "\n", "\n", "distributed", ".", "barrier", "(", ")", "\n", "distributed", ".", "destroy_process", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.accuracy.compute_labels": [[15, 25], ["segm.metrics.accuracy", "torch.no_grad", "acc1.item", "acc5.item", "torch.cuda.amp.autocast", "model.forward"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.segm.metrics.accuracy", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.blocks.Block.forward"], ["def", "compute_labels", "(", "model", ",", "batch", ")", ":", "\n", "    ", "im", "=", "batch", "[", "\"im\"", "]", "\n", "target", "=", "batch", "[", "\"target\"", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "output", "=", "model", ".", "forward", "(", "im", ")", "\n", "", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "return", "acc1", ".", "item", "(", ")", ",", "acc5", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.accuracy.eval_dataset": [[27, 41], ["segm.data.factory.create_dataset", "segm.utils.logger.MetricLogger", "segm.utils.logger.MetricLogger.log_every", "print", "batch.items", "accuracy.compute_labels", "batch[].size", "segm.utils.logger.MetricLogger.update", "segm.utils.logger.MetricLogger.update", "v.to"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.factory.create_dataset", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.log_every", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.accuracy.compute_labels", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update", "home.repos.pwc.inspect_result.rstrudel_segmenter.utils.logger.MetricLogger.update"], ["", "def", "eval_dataset", "(", "model", ",", "dataset_kwargs", ")", ":", "\n", "    ", "db", "=", "create_dataset", "(", "dataset_kwargs", ")", "\n", "print_freq", "=", "20", "\n", "header", "=", "\"\"", "\n", "logger", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "\n", "for", "batch", "in", "logger", ".", "log_every", "(", "db", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "batch", "[", "k", "]", "=", "v", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "acc1", ",", "acc5", "=", "compute_labels", "(", "model", ",", "batch", ")", "\n", "batch_size", "=", "batch", "[", "\"im\"", "]", ".", "size", "(", "0", ")", "\n", "logger", ".", "update", "(", "acc1", "=", "acc1", ",", "n", "=", "batch_size", ")", "\n", "logger", ".", "update", "(", "acc5", "=", "acc5", ",", "n", "=", "batch_size", ")", "\n", "", "print", "(", "f\"Imagenet accuracy: {logger}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.accuracy.main": [[43, 72], ["click.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "segm.set_gpu_mode", "segm.config.load_config", "dict", "segm.model.factory.create_vit", "segm.model.factory.create_vit.to", "segm.model.factory.create_vit.eval", "accuracy.eval_dataset"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.torch.set_gpu_mode", "home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.load_config", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.create_vit", "home.repos.pwc.inspect_result.rstrudel_segmenter.eval.accuracy.eval_dataset"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "\"backbone\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--imagenet-dir\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"-bs\"", ",", "\"--batch-size\"", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"-nw\"", ",", "\"--num-workers\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"-gpu\"", ",", "\"--gpu/--no-gpu\"", ",", "default", "=", "True", ",", "is_flag", "=", "True", ")", "\n", "def", "main", "(", "backbone", ",", "imagenet_dir", ",", "batch_size", ",", "num_workers", ",", "gpu", ")", ":", "\n", "    ", "ptu", ".", "set_gpu_mode", "(", "gpu", ")", "\n", "cfg", "=", "config", ".", "load_config", "(", ")", "\n", "cfg", "=", "cfg", "[", "\"model\"", "]", "[", "backbone", "]", "\n", "cfg", "[", "\"backbone\"", "]", "=", "backbone", "\n", "cfg", "[", "\"image_size\"", "]", "=", "(", "cfg", "[", "\"image_size\"", "]", ",", "cfg", "[", "\"image_size\"", "]", ")", "\n", "\n", "dataset_kwargs", "=", "dict", "(", "\n", "dataset", "=", "\"imagenet\"", ",", "\n", "root_dir", "=", "imagenet_dir", ",", "\n", "image_size", "=", "cfg", "[", "\"image_size\"", "]", ",", "\n", "crop_size", "=", "cfg", "[", "\"image_size\"", "]", ",", "\n", "patch_size", "=", "cfg", "[", "\"patch_size\"", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "split", "=", "\"val\"", ",", "\n", "normalization", "=", "STATS", "[", "cfg", "[", "\"normalization\"", "]", "]", ",", "\n", ")", "\n", "\n", "model", "=", "create_vit", "(", "cfg", ")", "\n", "model", ".", "to", "(", "ptu", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "eval_dataset", "(", "model", ",", "dataset_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.show_attn_map.visualize": [[19, 198], ["click.command", "click.argument", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "pathlib.Path", "segm.set_gpu_mode", "segm.model.factory.load_model", "model.parameters", "model.eval", "model.to", "torchvision.transforms.Compose", "transforms.Compose.", "img[].unsqueeze", "pathlib.Path.mkdir", "attentions.reshape.reshape", "torch.interpolate().cpu().numpy", "range", "pathlib.Path", "ValueError", "ValueError", "ValueError", "ValueError", "print", "model.get_attention_map_enc", "print", "model.get_attention_map_dec", "attentions.reshape.reshape", "attentions.reshape.reshape", "range", "torchvision.utils.make_grid", "einops.repeat", "torchvision.utils.save_image", "open", "PIL.Image.open", "img.convert.convert", "ValueError", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "isinstance", "ValueError", "img.convert.to", "img.convert.to", "torch.interpolate().cpu", "pathlib.Path.mkdir", "matplotlib.imsave", "print", "torch.tensor", "torch.tensor", "str", "pathlib.Path.mkdir", "pathlib.Path.mkdir", "torch.interpolate", "str"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.torch.set_gpu_mode", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.factory.load_model", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.get_attention_map_enc", "home.repos.pwc.inspect_result.rstrudel_segmenter.model.segmenter.Segmenter.get_attention_map_dec"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "\"model-path\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "\"image-path\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "\"output-dir\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--layer-id\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--x-patch\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--y-patch\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--cmap\"", ",", "default", "=", "\"viridis\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--enc/--dec\"", ",", "default", "=", "True", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "\"--cls/--patch\"", ",", "default", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "def", "visualize", "(", "\n", "model_path", ",", "\n", "image_path", ",", "\n", "output_dir", ",", "\n", "layer_id", ",", "\n", "x_patch", ",", "\n", "y_patch", ",", "\n", "cmap", ",", "\n", "enc", ",", "\n", "cls", ",", "\n", ")", ":", "\n", "\n", "    ", "output_dir", "=", "Path", "(", "output_dir", ")", "\n", "model_dir", "=", "Path", "(", "model_path", ")", ".", "parent", "\n", "\n", "ptu", ".", "set_gpu_mode", "(", "True", ")", "\n", "\n", "# Build model", "\n", "model", ",", "variant", "=", "load_model", "(", "model_path", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "# Get model config", "\n", "patch_size", "=", "model", ".", "patch_size", "\n", "normalization", "=", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"normalization\"", "]", "\n", "image_size", "=", "variant", "[", "\"dataset_kwargs\"", "]", "[", "\"image_size\"", "]", "\n", "n_cls", "=", "variant", "[", "\"net_kwargs\"", "]", "[", "\"n_cls\"", "]", "\n", "stats", "=", "STATS", "[", "normalization", "]", "\n", "\n", "# Open image and process it", "\n", "try", ":", "\n", "        ", "with", "open", "(", "image_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "", "except", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Provided image path {image_path} is not a valid image file.\"", ")", "\n", "\n", "# Normalize and resize", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "stats", "[", "\"mean\"", "]", ",", "stats", "[", "\"std\"", "]", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "img", "=", "transform", "(", "img", ")", "\n", "\n", "# Make the image divisible by the patch size", "\n", "w", ",", "h", "=", "(", "\n", "image_size", "-", "image_size", "%", "patch_size", ",", "\n", "image_size", "-", "image_size", "%", "patch_size", ",", "\n", ")", "\n", "\n", "# Crop to image size", "\n", "img", "=", "img", "[", ":", ",", ":", "w", ",", ":", "h", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "w_featmap", "=", "img", ".", "shape", "[", "-", "2", "]", "//", "patch_size", "\n", "h_featmap", "=", "img", ".", "shape", "[", "-", "1", "]", "//", "patch_size", "\n", "\n", "# Sanity checks", "\n", "if", "not", "enc", "and", "not", "isinstance", "(", "model", ".", "decoder", ",", "MaskTransformer", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Attention maps for decoder are only availabe for MaskTransformer. Provided model with decoder type: {model.decoder}.\"", "\n", ")", "\n", "\n", "", "if", "not", "cls", ":", "\n", "        ", "if", "x_patch", ">", "w_featmap", "or", "y_patch", ">", "h_featmap", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Provided patch x: {x_patch} y: {y_patch} is not valid. Patch should be in the range x: [0, {w_featmap}), y: [0, {h_featmap})\"", "\n", ")", "\n", "", "num_patch", "=", "w_featmap", "*", "y_patch", "+", "x_patch", "\n", "\n", "", "if", "layer_id", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Provided layer_id should be positive.\"", ")", "\n", "\n", "", "if", "enc", "and", "model", ".", "encoder", ".", "n_layers", "<=", "layer_id", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Provided layer_id: {layer_id} is not valid for encoder with {model.encoder.n_layers}.\"", "\n", ")", "\n", "\n", "", "if", "not", "enc", "and", "model", ".", "decoder", ".", "n_layers", "<=", "layer_id", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Provided layer_id: {layer_id} is not valid for decoder with {model.decoder.n_layers}.\"", "\n", ")", "\n", "\n", "", "Path", ".", "mkdir", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Process input and extract attention maps", "\n", "if", "enc", ":", "\n", "        ", "print", "(", "f\"Generating Attention Mapping for Encoder Layer Id {layer_id}\"", ")", "\n", "attentions", "=", "model", ".", "get_attention_map_enc", "(", "img", ".", "to", "(", "ptu", ".", "device", ")", ",", "layer_id", ")", "\n", "num_extra_tokens", "=", "1", "+", "model", ".", "encoder", ".", "distilled", "\n", "if", "cls", ":", "\n", "            ", "attentions", "=", "attentions", "[", "0", ",", ":", ",", "0", ",", "num_extra_tokens", ":", "]", "\n", "", "else", ":", "\n", "            ", "attentions", "=", "attentions", "[", "\n", "0", ",", ":", ",", "num_patch", "+", "num_extra_tokens", ",", "num_extra_tokens", ":", "\n", "]", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "f\"Generating Attention Mapping for Decoder Layer Id {layer_id}\"", ")", "\n", "attentions", "=", "model", ".", "get_attention_map_dec", "(", "img", ".", "to", "(", "ptu", ".", "device", ")", ",", "layer_id", ")", "\n", "if", "cls", ":", "\n", "            ", "attentions", "=", "attentions", "[", "0", ",", ":", ",", "-", "n_cls", ":", ",", ":", "-", "n_cls", "]", "\n", "", "else", ":", "\n", "            ", "attentions", "=", "attentions", "[", "0", ",", ":", ",", "num_patch", ",", ":", "-", "n_cls", "]", "\n", "\n", "# Reshape into image shape", "\n", "", "", "nh", "=", "attentions", ".", "shape", "[", "0", "]", "# Number of heads", "\n", "attentions", "=", "attentions", ".", "reshape", "(", "nh", ",", "-", "1", ")", "\n", "\n", "if", "cls", "and", "not", "enc", ":", "\n", "        ", "attentions", "=", "attentions", ".", "reshape", "(", "nh", ",", "n_cls", ",", "w_featmap", ",", "h_featmap", ")", "\n", "", "else", ":", "\n", "        ", "attentions", "=", "attentions", ".", "reshape", "(", "nh", ",", "1", ",", "w_featmap", ",", "h_featmap", ")", "\n", "\n", "# Resize attention maps to match input size", "\n", "", "attentions", "=", "(", "\n", "F", ".", "interpolate", "(", "attentions", ",", "scale_factor", "=", "patch_size", ",", "mode", "=", "\"nearest\"", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "# Save Attention map for each head", "\n", "for", "i", "in", "range", "(", "nh", ")", ":", "\n", "        ", "base_name", "=", "\"enc\"", "if", "enc", "else", "\"dec\"", "\n", "head_name", "=", "f\"{base_name}_layer{layer_id}_attn-head{i}\"", "\n", "attention_maps_list", "=", "attentions", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "attention_maps_list", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "attention_map", "=", "attention_maps_list", "[", "j", "]", "\n", "file_name", "=", "head_name", "\n", "dir_path", "=", "output_dir", "/", "f\"{base_name}_layer{layer_id}\"", "\n", "Path", ".", "mkdir", "(", "dir_path", ",", "exist_ok", "=", "True", ")", "\n", "if", "cls", ":", "\n", "                ", "if", "enc", ":", "\n", "                    ", "file_name", "=", "f\"{file_name}_cls\"", "\n", "dir_path", "/=", "\"cls\"", "\n", "", "else", ":", "\n", "                    ", "file_name", "=", "f\"{file_name}_{j}\"", "\n", "dir_path", "/=", "f\"cls_{j}\"", "\n", "", "Path", ".", "mkdir", "(", "dir_path", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "dir_path", "/=", "f\"patch_{x_patch}_{y_patch}\"", "\n", "Path", ".", "mkdir", "(", "dir_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "file_path", "=", "dir_path", "/", "f\"{file_name}.png\"", "\n", "plt", ".", "imsave", "(", "fname", "=", "str", "(", "file_path", ")", ",", "arr", "=", "attention_map", ",", "format", "=", "\"png\"", ",", "cmap", "=", "cmap", ")", "\n", "print", "(", "f\"{file_path} saved.\"", ")", "\n", "\n", "# Save input image showing selected patch", "\n", "", "", "if", "not", "cls", ":", "\n", "        ", "im_n", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "img", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", "\n", "\n", "# Compute corresponding X and Y px in the original image", "\n", "x_px", "=", "x_patch", "*", "patch_size", "\n", "y_px", "=", "y_patch", "*", "patch_size", "\n", "px_v", "=", "einops", ".", "repeat", "(", "\n", "torch", ".", "tensor", "(", "[", "1", ",", "0", ",", "0", "]", ")", ",", "\n", "\"c -> 1 c h w\"", ",", "\n", "h", "=", "patch_size", ",", "\n", "w", "=", "patch_size", ",", "\n", ")", "\n", "\n", "# Draw pixels for selected patch", "\n", "im_n", "[", ":", ",", "y_px", ":", "y_px", "+", "patch_size", ",", "x_px", ":", "x_px", "+", "patch_size", "]", "=", "px_v", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "im_n", ",", "\n", "str", "(", "dir_path", "/", "\"input_img.png\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_ade20k.download_ade": [[9, 29], ["download_dir.mkdir", "segm.utils.download.download", "zipfile.ZipFile", "zip_ref.extractall", "str", "str"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.download.download"], ["def", "download_ade", "(", "path", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "_AUG_DOWNLOAD_URLS", "=", "[", "\n", "(", "\n", "\"http://data.csail.mit.edu/places/ADEchallenge/ADEChallengeData2016.zip\"", ",", "\n", "\"219e1696abb36c8ba3a3afe7fb2f4b4606a897c7\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"http://data.csail.mit.edu/places/ADEchallenge/release_test.zip\"", ",", "\n", "\"e05747892219d10e9243933371a497e905a4860c\"", ",", "\n", ")", ",", "\n", "]", "\n", "download_dir", "=", "path", "/", "\"downloads\"", "\n", "download_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "for", "url", ",", "checksum", "in", "_AUG_DOWNLOAD_URLS", ":", "\n", "        ", "filename", "=", "download", "(", "\n", "url", ",", "path", "=", "str", "(", "download_dir", ")", ",", "overwrite", "=", "overwrite", ",", "sha1_hash", "=", "checksum", "\n", ")", "\n", "# extract", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", ",", "\"r\"", ")", "as", "zip_ref", ":", "\n", "            ", "zip_ref", ".", "extractall", "(", "path", "=", "str", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_ade20k.main": [[31, 36], ["click.command", "click.argument", "prepare_ade20k.download_ade", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_ade20k.download_ade"], ["", "", "", "@", "click", ".", "command", "(", "help", "=", "\"Initialize ADE20K dataset.\"", ")", "\n", "@", "click", ".", "argument", "(", "\"download_dir\"", ",", "type", "=", "str", ")", "\n", "def", "main", "(", "download_dir", ")", ":", "\n", "    ", "dataset_dir", "=", "Path", "(", "download_dir", ")", "/", "\"ade20k\"", "\n", "download_ade", "(", "dataset_dir", ",", "overwrite", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_cityscapes.download_cityscapes": [[15, 42], ["download_dir.mkdir", "os.system", "os.system", "os.system", "print", "zipfile.ZipFile", "zip_ref.extractall", "str"], "function", ["None"], ["def", "download_cityscapes", "(", "path", ",", "username", ",", "password", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "_CITY_DOWNLOAD_URLS", "=", "[", "\n", "(", "\"gtFine_trainvaltest.zip\"", ",", "\"99f532cb1af174f5fcc4c5bc8feea8c66246ddbc\"", ")", ",", "\n", "(", "\"leftImg8bit_trainvaltest.zip\"", ",", "\"2c0b77ce9933cc635adda307fbba5566f5d9d404\"", ")", ",", "\n", "]", "\n", "download_dir", "=", "path", "/", "\"downloads\"", "\n", "download_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "os", ".", "system", "(", "\n", "f\"wget --keep-session-cookies --save-cookies=cookies.txt --post-data 'username={username}&password={password}&submit=Login' https://www.cityscapes-dataset.com/login/ -P {download_dir}\"", "\n", ")", "\n", "\n", "if", "not", "(", "download_dir", "/", "\"gtFine_trainvaltest.zip\"", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "os", ".", "system", "(", "\n", "f\"wget --load-cookies cookies.txt --content-disposition https://www.cityscapes-dataset.com/file-handling/?packageID=1 -P {download_dir}\"", "\n", ")", "\n", "\n", "", "if", "not", "(", "download_dir", "/", "\"leftImg8bit_trainvaltest.zip\"", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "os", ".", "system", "(", "\n", "f\"wget --load-cookies cookies.txt --content-disposition https://www.cityscapes-dataset.com/file-handling/?packageID=3 -P {download_dir}\"", "\n", ")", "\n", "\n", "", "for", "filename", ",", "checksum", "in", "_CITY_DOWNLOAD_URLS", ":", "\n", "# extract", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "str", "(", "download_dir", "/", "filename", ")", ",", "\"r\"", ")", "as", "zip_ref", ":", "\n", "            ", "zip_ref", ".", "extractall", "(", "path", "=", "path", ")", "\n", "", "print", "(", "\"Extracted\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_cityscapes.install_cityscapes_api": [[44, 52], ["os.system", "print"], "function", ["None"], ["", "", "def", "install_cityscapes_api", "(", ")", ":", "\n", "    ", "os", ".", "system", "(", "\"pip install cityscapesscripts\"", ")", "\n", "try", ":", "\n", "        ", "import", "cityscapesscripts", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "\n", "\"Installing Cityscapes API failed, please install it manually %s\"", "\n", "%", "(", "repo_url", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_cityscapes.convert_json_to_label": [[55, 60], ["json_file.replace", "json2labelImg"], "function", ["None"], ["", "", "def", "convert_json_to_label", "(", "json_file", ")", ":", "\n", "    ", "from", "cityscapesscripts", ".", "preparation", ".", "json2labelImg", "import", "json2labelImg", "\n", "\n", "label_file", "=", "json_file", ".", "replace", "(", "\"_polygons.json\"", ",", "\"_labelTrainIds.png\"", ")", "\n", "json2labelImg", "(", "json_file", ",", "label_file", ",", "\"trainIds\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_cityscapes.main": [[62, 101], ["click.command", "click.argument", "click.option", "click.option", "click.option", "prepare_cityscapes.download_cityscapes", "prepare_cityscapes.install_cityscapes_api", "mmcv.scandir", "mmcv.track_parallel_progress", "pathlib.Path", "ValueError", "str", "str", "poly_files.append", "mmcv.scandir", "str", "filenames.append", "open", "f.writelines", "poly.replace", "str"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_cityscapes.download_cityscapes", "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_cityscapes.install_cityscapes_api"], ["", "@", "click", ".", "command", "(", "help", "=", "\"Initialize Cityscapes dataset.\"", ")", "\n", "@", "click", ".", "argument", "(", "\"download_dir\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--username\"", ",", "default", "=", "USERNAME", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--password\"", ",", "default", "=", "PASSWORD", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--nproc\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "def", "main", "(", "\n", "download_dir", ",", "\n", "username", ",", "\n", "password", ",", "\n", "nproc", ",", "\n", ")", ":", "\n", "\n", "    ", "dataset_dir", "=", "Path", "(", "download_dir", ")", "/", "\"cityscapes\"", "\n", "\n", "if", "username", "is", "None", "or", "password", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"You must indicate your username and password either in the script variables or by passing options --username and --pasword.\"", "\n", ")", "\n", "\n", "", "download_cityscapes", "(", "dataset_dir", ",", "username", ",", "password", ",", "overwrite", "=", "False", ")", "\n", "\n", "install_cityscapes_api", "(", ")", "\n", "\n", "gt_dir", "=", "dataset_dir", "/", "\"gtFine\"", "\n", "\n", "poly_files", "=", "[", "]", "\n", "for", "poly", "in", "mmcv", ".", "scandir", "(", "str", "(", "gt_dir", ")", ",", "\"_polygons.json\"", ",", "recursive", "=", "True", ")", ":", "\n", "        ", "poly_file", "=", "str", "(", "gt_dir", "/", "poly", ")", "\n", "poly_files", ".", "append", "(", "poly_file", ")", "\n", "", "mmcv", ".", "track_parallel_progress", "(", "convert_json_to_label", ",", "poly_files", ",", "nproc", ")", "\n", "\n", "split_names", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", "\n", "\n", "for", "split", "in", "split_names", ":", "\n", "        ", "filenames", "=", "[", "]", "\n", "for", "poly", "in", "mmcv", ".", "scandir", "(", "str", "(", "gt_dir", "/", "split", ")", ",", "\"_polygons.json\"", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "filenames", ".", "append", "(", "poly", ".", "replace", "(", "\"_gtFine_polygons.json\"", ",", "\"\"", ")", ")", "\n", "", "with", "open", "(", "str", "(", "dataset_dir", "/", "f\"{split}.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "f", "+", "\"\\n\"", "for", "f", "in", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_pcontext.download_pcontext": [[13, 55], ["download_dir.mkdir", "segm.utils.download.download", "shutil.move", "str", "pathlib.Path", "tarfile.open", "tar.extractall", "str", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.utils.download.download"], ["def", "download_pcontext", "(", "path", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "_AUG_DOWNLOAD_URLS", "=", "[", "\n", "(", "\n", "\"https://www.dropbox.com/s/wtdibo9lb2fur70/VOCtrainval_03-May-2010.tar?dl=1\"", ",", "\n", "\"VOCtrainval_03-May-2010.tar\"", ",", "\n", "\"bf9985e9f2b064752bf6bd654d89f017c76c395a\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"https://codalabuser.blob.core.windows.net/public/trainval_merged.json\"", ",", "\n", "\"\"", ",", "\n", "\"169325d9f7e9047537fedca7b04de4dddf10b881\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"https://hangzh.s3.amazonaws.com/encoding/data/pcontext/train.pth\"", ",", "\n", "\"\"", ",", "\n", "\"4bfb49e8c1cefe352df876c9b5434e655c9c1d07\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"https://hangzh.s3.amazonaws.com/encoding/data/pcontext/val.pth\"", ",", "\n", "\"\"", ",", "\n", "\"ebedc94247ec616c57b9a2df15091784826a7b0c\"", ",", "\n", ")", ",", "\n", "]", "\n", "download_dir", "=", "path", "/", "\"downloads\"", "\n", "\n", "download_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "url", ",", "filename", ",", "checksum", "in", "_AUG_DOWNLOAD_URLS", ":", "\n", "        ", "filename", "=", "download", "(", "\n", "url", ",", "\n", "path", "=", "str", "(", "download_dir", "/", "filename", ")", ",", "\n", "overwrite", "=", "overwrite", ",", "\n", "sha1_hash", "=", "checksum", ",", "\n", ")", "\n", "# extract", "\n", "if", "Path", "(", "filename", ")", ".", "suffix", "==", "\".tar\"", ":", "\n", "            ", "with", "tarfile", ".", "open", "(", "filename", ")", "as", "tar", ":", "\n", "                ", "tar", ".", "extractall", "(", "path", "=", "str", "(", "path", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "shutil", ".", "move", "(", "\n", "filename", ",", "\n", "str", "(", "path", "/", "\"VOCdevkit\"", "/", "\"VOC2010\"", "/", "Path", "(", "filename", ")", ".", "name", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_pcontext.main": [[58, 101], ["click.command", "click.argument", "prepare_pcontext.download_pcontext", "out_dir.mkdir", "imageset_dir.mkdir", "torch.load", "tqdm.tqdm", "torch.load", "tqdm.tqdm", "pathlib.Path", "str", "torch.load.items", "str", "train_list.append", "label.save", "open", "f.writelines", "str", "torch.load.items", "str", "val_list.append", "label.save", "open", "f.writelines", "str", "str", "str", "str", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.rstrudel_segmenter.scripts.prepare_pcontext.download_pcontext"], ["", "", "", "@", "click", ".", "command", "(", "help", "=", "\"Initialize PASCAL Context dataset.\"", ")", "\n", "@", "click", ".", "argument", "(", "\"download_dir\"", ",", "type", "=", "str", ")", "\n", "def", "main", "(", "download_dir", ")", ":", "\n", "\n", "    ", "dataset_dir", "=", "Path", "(", "download_dir", ")", "/", "\"pcontext\"", "\n", "\n", "download_pcontext", "(", "dataset_dir", ",", "overwrite", "=", "False", ")", "\n", "\n", "devkit_path", "=", "dataset_dir", "/", "\"VOCdevkit\"", "\n", "out_dir", "=", "devkit_path", "/", "\"VOC2010\"", "/", "\"SegmentationClassContext\"", "\n", "imageset_dir", "=", "devkit_path", "/", "\"VOC2010\"", "/", "\"ImageSets\"", "/", "\"SegmentationContext\"", "\n", "\n", "out_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "imageset_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "train_torch_path", "=", "devkit_path", "/", "\"VOC2010\"", "/", "\"train.pth\"", "\n", "val_torch_path", "=", "devkit_path", "/", "\"VOC2010\"", "/", "\"val.pth\"", "\n", "\n", "train_dict", "=", "torch", ".", "load", "(", "str", "(", "train_torch_path", ")", ")", "\n", "\n", "train_list", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "tqdm", "(", "train_dict", ".", "items", "(", ")", ")", ":", "\n", "        ", "idx", "=", "str", "(", "idx", ")", "\n", "new_idx", "=", "idx", "[", ":", "4", "]", "+", "\"_\"", "+", "idx", "[", "4", ":", "]", "\n", "train_list", ".", "append", "(", "new_idx", ")", "\n", "label_path", "=", "out_dir", "/", "f\"{new_idx}.png\"", "\n", "label", ".", "save", "(", "str", "(", "label_path", ")", ")", "\n", "\n", "", "with", "open", "(", "str", "(", "imageset_dir", "/", "\"train.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "line", "+", "\"\\n\"", "for", "line", "in", "sorted", "(", "train_list", ")", ")", "\n", "\n", "", "val_dict", "=", "torch", ".", "load", "(", "str", "(", "val_torch_path", ")", ")", "\n", "\n", "val_list", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "tqdm", "(", "val_dict", ".", "items", "(", ")", ")", ":", "\n", "        ", "idx", "=", "str", "(", "idx", ")", "\n", "new_idx", "=", "idx", "[", ":", "4", "]", "+", "\"_\"", "+", "idx", "[", "4", ":", "]", "\n", "val_list", ".", "append", "(", "new_idx", ")", "\n", "label_path", "=", "out_dir", "/", "f\"{new_idx}.png\"", "\n", "label", ".", "save", "(", "str", "(", "label_path", ")", ")", "\n", "\n", "", "with", "open", "(", "str", "(", "imageset_dir", "/", "\"val.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "line", "+", "\"\\n\"", "for", "line", "in", "sorted", "(", "val_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.__init__": [[19, 45], ["torch.utils.data.Dataset.__init__", "STATS[].copy", "base.BaseMMSeg.normalization.items", "print", "mmcv.utils.Config.fromfile", "base.BaseMMSeg.update_default_config", "mmseg.datasets.build_dataset", "numpy.round", "tuple", "getattr", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.update_default_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_size", ",", "\n", "crop_size", ",", "\n", "split", ",", "\n", "config_path", ",", "\n", "normalization", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "normalization", "=", "STATS", "[", "normalization", "]", ".", "copy", "(", ")", "\n", "self", ".", "ignore_label", "=", "None", "\n", "for", "k", ",", "v", "in", "self", ".", "normalization", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "np", ".", "round", "(", "255", "*", "np", ".", "array", "(", "v", ")", ",", "2", ")", "\n", "self", ".", "normalization", "[", "k", "]", "=", "tuple", "(", "v", ")", "\n", "", "print", "(", "f\"Use normalization: {self.normalization}\"", ")", "\n", "\n", "config", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "\n", "self", ".", "ratio", "=", "config", ".", "max_ratio", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "config", "=", "self", ".", "update_default_config", "(", "config", ")", "\n", "self", ".", "dataset", "=", "build_dataset", "(", "getattr", "(", "self", ".", "config", ".", "data", ",", "f\"{self.split}\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.update_default_config": [[46, 87], ["enumerate", "getattr", "getattr", "ValueError"], "methods", ["None"], ["", "def", "update_default_config", "(", "self", ",", "config", ")", ":", "\n", "\n", "        ", "train_splits", "=", "[", "\"train\"", ",", "\"trainval\"", "]", "\n", "if", "self", ".", "split", "in", "train_splits", ":", "\n", "            ", "config_pipeline", "=", "getattr", "(", "config", ",", "f\"train_pipeline\"", ")", "\n", "", "else", ":", "\n", "            ", "config_pipeline", "=", "getattr", "(", "config", ",", "f\"{self.split}_pipeline\"", ")", "\n", "\n", "", "img_scale", "=", "(", "self", ".", "ratio", "*", "self", ".", "image_size", ",", "self", ".", "image_size", ")", "\n", "if", "self", ".", "split", "not", "in", "train_splits", ":", "\n", "            ", "assert", "config_pipeline", "[", "1", "]", "[", "\"type\"", "]", "==", "\"MultiScaleFlipAug\"", "\n", "config_pipeline", "=", "config_pipeline", "[", "1", "]", "[", "\"transforms\"", "]", "\n", "", "for", "i", ",", "op", "in", "enumerate", "(", "config_pipeline", ")", ":", "\n", "            ", "op_type", "=", "op", "[", "\"type\"", "]", "\n", "if", "op_type", "==", "\"Resize\"", ":", "\n", "                ", "op", "[", "\"img_scale\"", "]", "=", "img_scale", "\n", "", "elif", "op_type", "==", "\"RandomCrop\"", ":", "\n", "                ", "op", "[", "\"crop_size\"", "]", "=", "(", "\n", "self", ".", "crop_size", ",", "\n", "self", ".", "crop_size", ",", "\n", ")", "\n", "", "elif", "op_type", "==", "\"Normalize\"", ":", "\n", "                ", "op", "[", "\"mean\"", "]", "=", "self", ".", "normalization", "[", "\"mean\"", "]", "\n", "op", "[", "\"std\"", "]", "=", "self", ".", "normalization", "[", "\"std\"", "]", "\n", "", "elif", "op_type", "==", "\"Pad\"", ":", "\n", "                ", "op", "[", "\"size\"", "]", "=", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "", "config_pipeline", "[", "i", "]", "=", "op", "\n", "", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "config", ".", "data", ".", "train", ".", "pipeline", "=", "config_pipeline", "\n", "", "elif", "self", ".", "split", "==", "\"trainval\"", ":", "\n", "            ", "config", ".", "data", ".", "trainval", ".", "pipeline", "=", "config_pipeline", "\n", "", "elif", "self", ".", "split", "==", "\"val\"", ":", "\n", "            ", "config", ".", "data", ".", "val", ".", "pipeline", "[", "1", "]", "[", "\"img_scale\"", "]", "=", "img_scale", "\n", "config", ".", "data", ".", "val", ".", "pipeline", "[", "1", "]", "[", "\"transforms\"", "]", "=", "config_pipeline", "\n", "", "elif", "self", ".", "split", "==", "\"test\"", ":", "\n", "            ", "config", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", "[", "\"img_scale\"", "]", "=", "img_scale", "\n", "config", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", "[", "\"transforms\"", "]", "=", "config_pipeline", "\n", "config", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown split: {self.split}\"", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.set_multiscale_mode": [[88, 108], ["mmseg.datasets.build_dataset", "getattr"], "methods", ["None"], ["", "def", "set_multiscale_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "data", ".", "val", ".", "pipeline", "[", "1", "]", "[", "\"img_ratios\"", "]", "=", "[", "\n", "0.5", ",", "\n", "0.75", ",", "\n", "1.0", ",", "\n", "1.25", ",", "\n", "1.5", ",", "\n", "1.75", ",", "\n", "]", "\n", "self", ".", "config", ".", "data", ".", "val", ".", "pipeline", "[", "1", "]", "[", "\"flip\"", "]", "=", "True", "\n", "self", ".", "config", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", "[", "\"img_ratios\"", "]", "=", "[", "\n", "0.5", ",", "\n", "0.75", ",", "\n", "1.0", ",", "\n", "1.25", ",", "\n", "1.5", ",", "\n", "1.75", ",", "\n", "]", "\n", "self", ".", "config", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", "[", "\"flip\"", "]", "=", "True", "\n", "self", ".", "dataset", "=", "build_dataset", "(", "getattr", "(", "self", ".", "config", ".", "data", ",", "f\"{self.split}\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.__getitem__": [[109, 130], ["dict", "data[].data.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "\n", "train_splits", "=", "[", "\"train\"", ",", "\"trainval\"", "]", "\n", "\n", "if", "self", ".", "split", "in", "train_splits", ":", "\n", "            ", "im", "=", "data", "[", "\"img\"", "]", ".", "data", "\n", "seg", "=", "data", "[", "\"gt_semantic_seg\"", "]", ".", "data", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "im", "=", "[", "im", ".", "data", "for", "im", "in", "data", "[", "\"img\"", "]", "]", "\n", "seg", "=", "None", "\n", "\n", "", "out", "=", "dict", "(", "im", "=", "im", ")", "\n", "if", "self", ".", "split", "in", "train_splits", ":", "\n", "            ", "out", "[", "\"segmentation\"", "]", "=", "seg", "\n", "", "else", ":", "\n", "            ", "im_metas", "=", "[", "meta", ".", "data", "for", "meta", "in", "data", "[", "\"img_metas\"", "]", "]", "\n", "out", "[", "\"im_metas\"", "]", "=", "im_metas", "\n", "out", "[", "\"colors\"", "]", "=", "self", ".", "colors", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.get_gt_seg_maps": [[131, 142], ["mmcv.imread", "pathlib.Path"], "methods", ["None"], ["", "def", "get_gt_seg_maps", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "dataset", "\n", "gt_seg_maps", "=", "{", "}", "\n", "for", "img_info", "in", "dataset", ".", "img_infos", ":", "\n", "            ", "seg_map", "=", "Path", "(", "dataset", ".", "ann_dir", ")", "/", "img_info", "[", "\"ann\"", "]", "[", "\"seg_map\"", "]", "\n", "gt_seg_map", "=", "mmcv", ".", "imread", "(", "seg_map", ",", "flag", "=", "\"unchanged\"", ",", "backend", "=", "\"pillow\"", ")", "\n", "gt_seg_map", "[", "gt_seg_map", "==", "self", ".", "ignore_label", "]", "=", "IGNORE_LABEL", "\n", "if", "self", ".", "reduce_zero_label", ":", "\n", "                ", "gt_seg_map", "[", "gt_seg_map", "!=", "IGNORE_LABEL", "]", "-=", "1", "\n", "", "gt_seg_maps", "[", "img_info", "[", "\"filename\"", "]", "]", "=", "gt_seg_map", "\n", "", "return", "gt_seg_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.__len__": [[143, 145], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.unwrapped": [[146, 149], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.set_epoch": [[150, 152], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.get_diagnostics": [[153, 155], ["None"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "logger", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.get_snapshot": [[156, 158], ["None"], "methods", ["None"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.base.BaseMMSeg.end_epoch": [[159, 161], ["None"], "methods", ["None"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.imagenet.ImagenetDataset.__init__": [[15, 51], ["torch.utils.data.Dataset.__init__", "torchvision.datasets.ImageFolder", "pathlib.Path", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root_dir", ",", "\n", "image_size", "=", "224", ",", "\n", "crop_size", "=", "224", ",", "\n", "split", "=", "\"train\"", ",", "\n", "normalization", "=", "\"vit\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "image_size", "[", "0", "]", "==", "image_size", "[", "1", "]", "\n", "\n", "self", ".", "path", "=", "Path", "(", "root_dir", ")", "/", "split", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "normalization", "=", "normalization", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "crop_size", ",", "interpolation", "=", "3", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "image_size", "[", "0", "]", "+", "32", ",", "interpolation", "=", "3", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "self", ".", "base_dataset", "=", "datasets", ".", "ImageFolder", "(", "self", ".", "path", ",", "self", ".", "transform", ")", "\n", "self", ".", "n_cls", "=", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.imagenet.ImagenetDataset.unwrapped": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.imagenet.ImagenetDataset.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.imagenet.ImagenetDataset.__getitem__": [[59, 63], ["segm.data.utils.rgb_normalize", "dict"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.rgb_normalize"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "im", ",", "target", "=", "self", ".", "base_dataset", "[", "idx", "]", "\n", "im", "=", "utils", ".", "rgb_normalize", "(", "im", ",", "self", ".", "normalization", ")", "\n", "return", "dict", "(", "im", "=", "im", ",", "target", "=", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.cityscapes.CityscapesDataset.__init__": [[18, 24], ["segm.data.base.BaseMMSeg.__init__", "segm.data.utils.dataset_cat_description"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.dataset_cat_description"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "crop_size", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "image_size", ",", "crop_size", ",", "split", ",", "CITYSCAPES_CONFIG_PATH", ",", "**", "kwargs", ")", "\n", "self", ".", "names", ",", "self", ".", "colors", "=", "utils", ".", "dataset_cat_description", "(", "CITYSCAPES_CATS_PATH", ")", "\n", "self", ".", "n_cls", "=", "19", "\n", "self", ".", "ignore_label", "=", "255", "\n", "self", ".", "reduce_zero_label", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.cityscapes.CityscapesDataset.update_default_config": [[25, 35], ["segm.config.dataset_dir", "super().update_default_config", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.dataset_dir", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.update_default_config"], ["", "def", "update_default_config", "(", "self", ",", "config", ")", ":", "\n", "\n", "        ", "root_dir", "=", "dataset_dir", "(", ")", "\n", "path", "=", "Path", "(", "root_dir", ")", "/", "\"cityscapes\"", "\n", "config", ".", "data_root", "=", "path", "\n", "\n", "config", ".", "data", "[", "self", ".", "split", "]", "[", "\"data_root\"", "]", "=", "path", "\n", "config", "=", "super", "(", ")", ".", "update_default_config", "(", "config", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.cityscapes.CityscapesDataset.test_post_process": [[36, 42], ["numpy.copy", "numpy.unique"], "methods", ["None"], ["", "def", "test_post_process", "(", "self", ",", "labels", ")", ":", "\n", "        ", "labels_copy", "=", "np", ".", "copy", "(", "labels", ")", "\n", "cats", "=", "np", ".", "unique", "(", "labels_copy", ")", "\n", "for", "cat", "in", "cats", ":", "\n", "            ", "labels_copy", "[", "labels", "==", "cat", "]", "=", "CSLabels", ".", "trainId2label", "[", "cat", "]", ".", "id", "\n", "", "return", "labels_copy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.ade20k.ADE20KSegmentation.__init__": [[13, 25], ["segm.data.base.BaseMMSeg.__init__", "segm.data.utils.dataset_cat_description"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.dataset_cat_description"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "crop_size", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "image_size", ",", "\n", "crop_size", ",", "\n", "split", ",", "\n", "ADE20K_CONFIG_PATH", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "names", ",", "self", ".", "colors", "=", "utils", ".", "dataset_cat_description", "(", "ADE20K_CATS_PATH", ")", "\n", "self", ".", "n_cls", "=", "150", "\n", "self", ".", "ignore_label", "=", "0", "\n", "self", ".", "reduce_zero_label", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.ade20k.ADE20KSegmentation.update_default_config": [[26, 40], ["segm.config.dataset_dir", "super().update_default_config", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.dataset_dir", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.update_default_config"], ["", "def", "update_default_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "root_dir", "=", "dataset_dir", "(", ")", "\n", "path", "=", "Path", "(", "root_dir", ")", "/", "\"ade20k\"", "\n", "config", ".", "data_root", "=", "path", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "config", ".", "data", ".", "train", ".", "data_root", "=", "path", "/", "\"ADEChallengeData2016\"", "\n", "", "elif", "self", ".", "split", "==", "\"trainval\"", ":", "\n", "            ", "config", ".", "data", ".", "trainval", ".", "data_root", "=", "path", "/", "\"ADEChallengeData2016\"", "\n", "", "elif", "self", ".", "split", "==", "\"val\"", ":", "\n", "            ", "config", ".", "data", ".", "val", ".", "data_root", "=", "path", "/", "\"ADEChallengeData2016\"", "\n", "", "elif", "self", ".", "split", "==", "\"test\"", ":", "\n", "            ", "config", ".", "data", ".", "test", ".", "data_root", "=", "path", "/", "\"release_test\"", "\n", "", "config", "=", "super", "(", ")", ".", "update_default_config", "(", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.ade20k.ADE20KSegmentation.test_post_process": [[41, 43], ["None"], "methods", ["None"], ["", "def", "test_post_process", "(", "self", ",", "labels", ")", ":", "\n", "        ", "return", "labels", "+", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.factory.create_dataset": [[10, 38], ["dataset_kwargs.copy.copy", "dataset_kwargs.copy.pop", "dataset_kwargs.copy.pop", "dataset_kwargs.copy.pop", "dataset_kwargs.copy.pop", "segm.data.Loader", "dataset_kwargs.copy.pop", "segm.data.ImagenetDataset", "segm.data.ADE20KSegmentation", "segm.data.PascalContextDataset", "segm.data.CityscapesDataset", "ValueError"], "function", ["None"], ["optimizer", ",", "\n", "opt_args", ".", "poly_step_size", ",", "\n", "opt_args", ".", "iter_warmup", ",", "\n", "opt_args", ".", "iter_max", ",", "\n", "opt_args", ".", "poly_power", ",", "\n", "opt_args", ".", "min_lr", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", ",", "_", "=", "scheduler", ".", "create_scheduler", "(", "opt_args", ",", "optimizer", ")", "\n", "", "return", "lr_scheduler", "\n", "\n", "\n", "", "def", "create_optimizer", "(", "opt_args", ",", "model", ")", ":", "\n", "    ", "return", "optim", ".", "create_optimizer", "(", "opt_args", ",", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.__init__": [[12, 22], ["segm.data.base.BaseMMSeg.__init__", "segm.data.utils.dataset_cat_description"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.dataset_cat_description"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "crop_size", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "image_size", ",", "crop_size", ",", "split", ",", "PASCAL_CONTEXT_CONFIG_PATH", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "names", ",", "self", ".", "colors", "=", "utils", ".", "dataset_cat_description", "(", "\n", "PASCAL_CONTEXT_CATS_PATH", "\n", ")", "\n", "self", ".", "n_cls", "=", "60", "\n", "self", ".", "ignore_label", "=", "255", "\n", "self", ".", "reduce_zero_label", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.update_default_config": [[23, 35], ["segm.config.dataset_dir", "super().update_default_config", "pathlib.Path", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.segm.config.dataset_dir", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.update_default_config"], ["", "def", "update_default_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "root_dir", "=", "dataset_dir", "(", ")", "\n", "path", "=", "Path", "(", "root_dir", ")", "/", "\"pcontext\"", "\n", "config", ".", "data_root", "=", "path", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "config", ".", "data", ".", "train", ".", "data_root", "=", "path", "/", "\"VOCdevkit/VOC2010/\"", "\n", "", "elif", "self", ".", "split", "==", "\"val\"", ":", "\n", "            ", "config", ".", "data", ".", "val", ".", "data_root", "=", "path", "/", "\"VOCdevkit/VOC2010/\"", "\n", "", "elif", "self", ".", "split", "==", "\"test\"", ":", "\n", "            ", "raise", "ValueError", "(", "\"Test split is not valid for Pascal Context dataset\"", ")", "\n", "", "config", "=", "super", "(", ")", ".", "update_default_config", "(", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.pascal_context.PascalContextDataset.test_post_process": [[36, 38], ["None"], "methods", ["None"], ["", "def", "test_post_process", "(", "self", ",", "labels", ")", ":", "\n", "        ", "return", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.seg_to_rgb": [[14, 23], ["torch.zeros().float", "torch.unique", "torch.zeros", "len", "int"], "function", ["None"], ["        ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "\n", "", "", "def", "resize_pos_embed", "(", "posemb", ",", "grid_old_shape", ",", "grid_new_shape", ",", "num_extra_tokens", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.dataset_cat_description": [[25, 37], ["yaml.load", "enumerate", "torch.tensor().float", "open", "names.append", "torch.tensor().float", "torch.tensor", "torch.tensor().float", "torch.tensor", "torch.tensor"], "function", ["None"], ["    ", "posemb_tok", ",", "posemb_grid", "=", "(", "\n", "posemb", "[", ":", ",", ":", "num_extra_tokens", "]", ",", "\n", "posemb", "[", "0", ",", "num_extra_tokens", ":", "]", ",", "\n", ")", "\n", "if", "grid_old_shape", "is", "None", ":", "\n", "        ", "gs_old_h", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "gs_old_w", "=", "gs_old_h", "\n", "", "else", ":", "\n", "        ", "gs_old_h", ",", "gs_old_w", "=", "grid_old_shape", "\n", "\n", "", "gs_h", ",", "gs_w", "=", "grid_new_shape", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old_h", ",", "gs_old_w", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "(", "gs_h", ",", "gs_w", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.rgb_normalize": [[39, 45], ["torchvision.normalize"], "function", ["None"], ["posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n", "\n", "", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.utils.rgb_denormalize": [[47, 57], ["torch.tensor", "torch.tensor", "range"], "function", ["None"], ["# For deit models", "\n", "        ", "state_dict", "=", "state_dict", "[", "\"model\"", "]", "\n", "", "num_extra_tokens", "=", "1", "+", "(", "\"dist_token\"", "in", "state_dict", ".", "keys", "(", ")", ")", "\n", "patch_size", "=", "model", ".", "patch_size", "\n", "image_size", "=", "model", ".", "patch_embed", ".", "image_size", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "\"pos_embed\"", "and", "v", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "            ", "v", "=", "resize_pos_embed", "(", "\n", "v", ",", "\n", "None", ",", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__": [[8, 29], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader.__init__", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__", "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "num_workers", ",", "distributed", ",", "split", ")", ":", "\n", "        ", "if", "distributed", ":", "\n", "            ", "sampler", "=", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "True", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "", "self", ".", "base_dataset", "=", "self", ".", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.unwrapped": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "unwrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.set_epoch": [[34, 37], ["isinstance", "loader.Loader.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.set_epoch"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "sampler", ",", "DistributedSampler", ")", ":", "\n", "            ", "self", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.get_diagnostics": [[38, 40], ["loader.Loader.base_dataset.get_diagnostics"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.get_diagnostics"], ["", "", "def", "get_diagnostics", "(", "self", ",", "logger", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_diagnostics", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.get_snapshot": [[41, 43], ["loader.Loader.base_dataset.get_snapshot"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.get_snapshot"], ["", "def", "get_snapshot", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "get_snapshot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.end_epoch": [[44, 46], ["loader.Loader.base_dataset.end_epoch"], "methods", ["home.repos.pwc.inspect_result.rstrudel_segmenter.data.loader.Loader.end_epoch"], ["", "def", "end_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "end_epoch", "(", "epoch", ")", "\n", "", "", ""]]}