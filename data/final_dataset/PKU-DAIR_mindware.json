{"home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.__init__": [[19, 23], ["int", "feature_key.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feature_key", ")", ":", "\n", "        ", "self", ".", "feature_key", "=", "feature_key", "\n", "self", ".", "feature_set", "=", "[", "int", "(", "feature", ")", "for", "feature", "in", "feature_key", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "performance", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode._get_performance": [[24, 32], ["autocross.get_metric", "model.fit", "get_metric.", "model.predict", "model.predict_proba"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "_get_performance", "(", "self", ",", "metricstr", ",", "train_x", ",", "train_y", ",", "valid_x", ",", "valid_y", ",", "model", ")", ":", "\n", "        ", "metric", "=", "get_metric", "(", "metricstr", ")", "\n", "model", ".", "fit", "(", "train_x", ",", "train_y", ")", "\n", "if", "metricstr", "==", "'auc'", ":", "\n", "            ", "pred", "=", "model", ".", "predict_proba", "(", "valid_x", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "pred", "=", "model", ".", "predict", "(", "valid_x", ")", "\n", "", "return", "metric", "(", "pred", ",", "valid_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.set_performance": [[33, 36], ["autocross.TreeNode._get_performance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_performance"], ["", "def", "set_performance", "(", "self", ",", "metricstr", ",", "model", ",", "train_data", ",", "train_label", ",", "valid_data", ",", "valid_label", ")", ":", "\n", "        ", "self", ".", "performance", "=", "self", ".", "_get_performance", "(", "metricstr", ",", "train_data", ",", "train_label", ",", "\n", "valid_data", ",", "valid_label", ",", "model", "=", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.__lt__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "performance", "<", "other", ".", "performance", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.__le__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "performance", "<=", "other", ".", "performance", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.__gt__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "performance", ">", "other", ".", "performance", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.__ge__": [[46, 48], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "performance", ">=", "other", ".", "performance", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross.__init__": [[57, 80], ["sklearn.linear_model.LogisticRegression", "autocross.get_metric", "dict", "sklearn.preprocessing.KBinsDiscretizer", "sklearn.preprocessing.KBinsDiscretizer", "sklearn.preprocessing.OneHotEncoder"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric"], ["    ", "def", "__init__", "(", "self", ",", "max_iter", ",", "metrics", ",", "model", "=", "LogisticRegression", "(", "multi_class", "=", "'auto'", ",", "solver", "=", "'liblinear'", ")", ")", ":", "\n", "        ", "'''\n\n        :param max_iter: Maximum search iteration\n        :param metrics:\n        :param model:\n        '''", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "metricstr", "=", "metrics", "\n", "self", ".", "metric", "=", "get_metric", "(", "metrics", ")", "\n", "self", ".", "feature_sets", "=", "None", "\n", "self", ".", "feature_cols", "=", "dict", "(", ")", "\n", "self", ".", "train_data", "=", "None", "\n", "self", ".", "valid_data", "=", "None", "\n", "self", ".", "numerical_features", "=", "None", "\n", "self", ".", "init_length", "=", "None", "\n", "self", ".", "kbins_discretizer_5", "=", "KBinsDiscretizer", "(", "n_bins", "=", "5", ",", "strategy", "=", "'uniform'", ")", "\n", "self", ".", "kbins_discretizer_50", "=", "KBinsDiscretizer", "(", "n_bins", "=", "50", ",", "strategy", "=", "'uniform'", ")", "\n", "self", ".", "onehot_encoder", "=", "OneHotEncoder", "(", ")", "\n", "self", ".", "numerical_index", "=", "None", "\n", "self", ".", "categorical_index", "=", "None", "\n", "self", ".", "onehot_index", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val": [[81, 87], ["numpy.ones", "numpy.ones.reshape", "len", "len"], "methods", ["None"], ["", "def", "_get_cross_feature_val", "(", "self", ",", "feature_set", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "feature_set", ")", ">=", "1", "\n", "feature_val", "=", "np", ".", "ones", "(", "len", "(", "x", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "feature_id", "in", "feature_set", ":", "\n", "            ", "feature_val", "*=", "x", "[", ":", ",", "feature_id", "]", "\n", "", "return", "feature_val", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_performance": [[88, 97], ["autocross.get_metric", "model.fit", "get_metric.", "model.predict", "model.predict_proba"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "_get_performance", "(", "self", ",", "train_x", ",", "train_y", ",", "valid_x", ",", "valid_y", ",", "model", ")", ":", "\n", "        ", "metric", "=", "get_metric", "(", "self", ".", "metricstr", ")", "\n", "model", ".", "fit", "(", "train_x", ",", "train_y", ")", "\n", "if", "self", ".", "metricstr", "==", "'auc'", ":", "\n", "            ", "pred", "=", "model", ".", "predict_proba", "(", "valid_x", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "pred", "=", "model", ".", "predict", "(", "valid_x", ")", "\n", "\n", "", "return", "metric", "(", "pred", ",", "valid_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_stratify_sample": [[98, 102], ["sklearn.model_selection.train_test_split", "len", "len", "len"], "methods", ["None"], ["", "def", "_get_stratify_sample", "(", "self", ",", "x", ",", "y", ",", "n_samples", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", "\n", "_", ",", "x_sample", ",", "_", ",", "y_sample", "=", "train_test_split", "(", "x", ",", "y", ",", "test_size", "=", "n_samples", "/", "len", "(", "x", ")", ",", "stratify", "=", "y", ")", "\n", "return", "x_sample", ",", "y_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._hyperband": [[190, 317], ["sklearn.model_selection.train_test_split", "list", "list", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.hstack", "numpy.hstack", "logger.info", "range", "range", "autocross.AutoCross.onehot_encoder.fit", "autocross.AutoCross.onehot_encoder.transform().toarray", "autocross.AutoCross.onehot_encoder.transform().toarray", "autocross.AutoCross.kbins_discretizer_5.fit_transform().toarray", "autocross.AutoCross.kbins_discretizer_5.transform().toarray", "autocross.AutoCross.kbins_discretizer_50.fit_transform().toarray", "autocross.AutoCross.kbins_discretizer_50.transform().toarray", "len", "int", "range", "logger.info", "numpy.savez", "set", "len", "len", "len", "len", "len", "len", "len", "len", "str", "range", "math.log", "set", "int", "max", "logger.info", "autocross.AutoCross.feature_sets.append", "autocross.AutoCross._get_cross_feature_val", "autocross.AutoCross._get_cross_feature_val", "numpy.hstack", "numpy.hstack", "set", "set", "autocross.AutoCross.onehot_encoder.transform", "autocross.AutoCross.onehot_encoder.transform", "autocross.AutoCross.kbins_discretizer_5.fit_transform", "autocross.AutoCross.kbins_discretizer_5.transform", "autocross.AutoCross.kbins_discretizer_50.fit_transform", "autocross.AutoCross.kbins_discretizer_50.transform", "int", "int", "len", "numpy.random.choice", "set1.union", "set.add", "autocross.TreeNode", "nodes.append", "enumerate", "nodes.sort", "math.ceil", "int", "int", "logger.info", "str", "str", "len", "pow", "len", "numpy.hstack", "autocross.AutoCross._get_stratify_sample", "numpy.hstack", "autocross.TreeNode.set_performance", "logger.info", "best_node.feature_key.split", "len", "pow", "str", "print", "print", "str", "autocross.AutoCross._get_cross_feature_val", "autocross.AutoCross._get_cross_feature_val", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_stratify_sample", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.TreeNode.set_performance", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val"], ["", "def", "_hyperband", "(", "self", ",", "x_train", ",", "y_train", ",", "categorical_index", "=", "[", "]", ",", "numerical_index", "=", "[", "]", ",", "eta", "=", "3", ",", "\n", "early_stop_iter", "=", "5", ")", ":", "\n", "        ", "x_train_copy", "=", "x_train", "[", ":", "]", "\n", "x_train", ",", "x_valid", ",", "y_train", ",", "y_valid", "=", "train_test_split", "(", "x_train", ",", "y_train", ",", "test_size", "=", "0.66", ",", "stratify", "=", "y_train", ")", "\n", "\n", "feature_num", "=", "x_train", ".", "shape", "[", "1", "]", "\n", "id_list", "=", "list", "(", "range", "(", "feature_num", ")", ")", "\n", "one_hot_index", "=", "list", "(", "set", "(", "id_list", ")", "-", "set", "(", "categorical_index", ")", "-", "set", "(", "numerical_index", ")", ")", "\n", "self", ".", "onehot_index", "=", "one_hot_index", "\n", "\n", "ori_train_onehot", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_train", ")", ",", "0", ")", ")", "\n", "ori_valid_onehot", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_valid", ")", ",", "0", ")", ")", "\n", "one_hot_train_5", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_train", ")", ",", "0", ")", ")", "\n", "one_hot_valid_5", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_valid", ")", ",", "0", ")", ")", "\n", "one_hot_train_50", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_train", ")", ",", "0", ")", ")", "\n", "one_hot_valid_50", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_valid", ")", ",", "0", ")", ")", "\n", "one_hot_train_cat", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_train", ")", ",", "0", ")", ")", "\n", "one_hot_valid_cat", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x_valid", ")", ",", "0", ")", ")", "\n", "\n", "if", "one_hot_index", ":", "\n", "            ", "ori_train_onehot", "=", "x_train", "[", ":", ",", "one_hot_index", "]", "\n", "ori_valid_onehot", "=", "x_valid", "[", ":", ",", "one_hot_index", "]", "\n", "\n", "", "if", "categorical_index", ":", "\n", "            ", "self", ".", "onehot_encoder", ".", "fit", "(", "x_train_copy", "[", ":", ",", "categorical_index", "]", ")", "\n", "one_hot_train_cat", "=", "self", ".", "onehot_encoder", ".", "transform", "(", "x_train", "[", ":", ",", "categorical_index", "]", ")", ".", "toarray", "(", ")", "\n", "one_hot_valid_cat", "=", "self", ".", "onehot_encoder", ".", "transform", "(", "x_valid", "[", ":", ",", "categorical_index", "]", ")", ".", "toarray", "(", ")", "\n", "\n", "", "if", "numerical_index", ":", "\n", "            ", "one_hot_train_5", "=", "self", ".", "kbins_discretizer_5", ".", "fit_transform", "(", "x_train", "[", ":", ",", "numerical_index", "]", ")", ".", "toarray", "(", ")", "\n", "one_hot_valid_5", "=", "self", ".", "kbins_discretizer_5", ".", "transform", "(", "x_valid", "[", ":", ",", "numerical_index", "]", ")", ".", "toarray", "(", ")", "\n", "\n", "one_hot_train_50", "=", "self", ".", "kbins_discretizer_50", ".", "fit_transform", "(", "x_train", "[", ":", ",", "numerical_index", "]", ")", ".", "toarray", "(", ")", "\n", "one_hot_valid_50", "=", "self", ".", "kbins_discretizer_50", ".", "transform", "(", "x_valid", "[", ":", ",", "numerical_index", "]", ")", ".", "toarray", "(", ")", "\n", "\n", "", "self", ".", "train_data", "=", "np", ".", "hstack", "(", "(", "ori_train_onehot", ",", "one_hot_train_5", ",", "one_hot_train_50", ",", "one_hot_train_cat", ")", ")", "\n", "self", ".", "valid_data", "=", "np", ".", "hstack", "(", "(", "ori_valid_onehot", ",", "one_hot_valid_5", ",", "one_hot_valid_50", ",", "one_hot_valid_cat", ")", ")", "\n", "\n", "self", ".", "init_length", "=", "self", ".", "train_data", ".", "shape", "[", "1", "]", "\n", "logger", ".", "info", "(", "\"Feature num: \"", "+", "str", "(", "self", ".", "init_length", ")", ")", "\n", "self", ".", "feature_sets", "=", "[", "{", "feature_id", "}", "for", "feature_id", "in", "range", "(", "self", ".", "init_length", ")", "]", "\n", "global_best_perf", "=", "-", "1", "\n", "early_stopping_cnt", "=", "0", "\n", "for", "iteration", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "# t0 = time()", "\n", "# start the hyperband process", "\n", "            ", "R", "=", "len", "(", "self", ".", "train_data", ")", "\n", "s_max", "=", "int", "(", "math", ".", "log", "(", "R", ",", "eta", ")", ")", "\n", "# B = (s_max + 1) * R", "\n", "best_node", "=", "None", "\n", "for", "s", "in", "range", "(", "s_max", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "nodes", "=", "[", "]", "\n", "subset_records", "=", "set", "(", ")", "# record the subset", "\n", "# n = math.ceil((B / R) * (pow(eta, s) / (s + 1)))", "\n", "configurations_num", "=", "len", "(", "self", ".", "feature_sets", ")", "*", "(", "len", "(", "self", ".", "feature_sets", ")", "-", "1", ")", "//", "2", "\n", "n", "=", "int", "(", "configurations_num", "/", "GAMMA", "/", "pow", "(", "eta", ",", "s_max", "-", "s", ")", ")", "\n", "r", "=", "int", "(", "R", "*", "pow", "(", "eta", ",", "-", "s", ")", ")", "*", "int", "(", "R", "/", "SAMPLES_PER_PARTITION", ")", "\n", "r", "=", "max", "(", "r", ",", "50", ")", "\n", "if", "n", "<=", "1", "or", "r", ">", "R", ":", "\n", "                    ", "continue", "\n", "# We can't use field-wise LR, so we use random choice instead to reduce the high computational cost", "\n", "", "logger", ".", "info", "(", "n", ")", "\n", "while", "len", "(", "nodes", ")", "<", "n", ":", "\n", "                    ", "p1", ",", "p2", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "feature_sets", ")", ",", "2", ",", "replace", "=", "False", ")", "\n", "set1", "=", "self", ".", "feature_sets", "[", "p1", "]", "\n", "set2", "=", "self", ".", "feature_sets", "[", "p2", "]", "\n", "cross_set", "=", "set1", ".", "union", "(", "set2", ")", "\n", "feature_key", "=", "','", ".", "join", "(", "str", "(", "feature", ")", "for", "feature", "in", "cross_set", ")", "\n", "for", "ele", "in", "set1", ":", "\n", "                        ", "if", "ele", "in", "set2", ":", "\n", "                            ", "print", "(", "set1", ",", "set2", ")", "\n", "print", "(", "feature_key", ")", "\n", "", "", "if", "feature_key", "in", "subset_records", ":", "\n", "                        ", "continue", "\n", "", "subset_records", ".", "add", "(", "feature_key", ")", "\n", "\n", "node", "=", "TreeNode", "(", "feature_key", "=", "feature_key", ")", "\n", "nodes", ".", "append", "(", "node", ")", "\n", "\n", "# start the inner loop", "\n", "", "while", "n", ">", "1", "and", "r", "<=", "R", ":", "\n", "                    ", "for", "i", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "                        ", "train_data", "=", "np", ".", "hstack", "(", "(", "self", ".", "train_data", ",", "\n", "self", ".", "_get_cross_feature_val", "(", "node", ".", "feature_set", ",", "self", ".", "train_data", ")", ")", ")", "\n", "train_data", ",", "train_label", "=", "self", ".", "_get_stratify_sample", "(", "train_data", ",", "y_train", ",", "r", ")", "\n", "valid_data", "=", "np", ".", "hstack", "(", "(", "self", ".", "valid_data", ",", "\n", "self", ".", "_get_cross_feature_val", "(", "node", ".", "feature_set", ",", "self", ".", "valid_data", ")", ")", ")", "\n", "node", ".", "set_performance", "(", "model", "=", "self", ".", "model", ",", "train_data", "=", "train_data", ",", "train_label", "=", "train_label", ",", "\n", "valid_data", "=", "valid_data", ",", "valid_label", "=", "y_valid", ",", "metricstr", "=", "self", ".", "metricstr", ")", "\n", "logger", ".", "info", "(", "\"LR trained: %d/%d with performance %f\"", "%", "(", "i", ",", "len", "(", "nodes", ")", ",", "node", ".", "performance", ")", ")", "\n", "\n", "", "nodes", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "n", "=", "math", ".", "ceil", "(", "n", "/", "eta", ")", "\n", "r", "=", "int", "(", "r", "*", "eta", ")", "\n", "if", "n", ">=", "1", ":", "\n", "                        ", "nodes", "=", "nodes", "[", ":", "n", "]", "\n", "\n", "", "", "if", "best_node", "is", "None", ":", "\n", "                    ", "best_node", "=", "nodes", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "if", "nodes", "[", "0", "]", ".", "performance", ">", "best_node", ".", "performance", ":", "\n", "                        ", "best_node", "=", "nodes", "[", "0", "]", "\n", "\n", "# print(\"outer loop:\", iteration, \"inner loop:\", s, \"performance:\",", "\n", "#       best_node.performance, \" time:\",", "\n", "#       time() - t0, flush=True)", "\n", "\n", "", "", "", "if", "best_node", ".", "performance", ">", "global_best_perf", ":", "\n", "                ", "global_best_perf", "=", "best_node", ".", "performance", "\n", "early_stopping_cnt", "=", "0", "\n", "\n", "# update train_data and valid_data", "\n", "best_feature_list", "=", "{", "int", "(", "feature", ")", "for", "feature", "in", "best_node", ".", "feature_key", ".", "split", "(", "','", ")", "}", "\n", "self", ".", "feature_sets", ".", "append", "(", "best_feature_list", ")", "\n", "new_train_feature", "=", "self", ".", "_get_cross_feature_val", "(", "best_node", ".", "feature_set", ",", "self", ".", "train_data", ")", "\n", "new_valid_feature", "=", "self", ".", "_get_cross_feature_val", "(", "best_node", ".", "feature_set", ",", "self", ".", "valid_data", ")", "\n", "self", ".", "train_data", "=", "np", ".", "hstack", "(", "(", "self", ".", "train_data", ",", "new_train_feature", ")", ")", "\n", "self", ".", "valid_data", "=", "np", ".", "hstack", "(", "(", "self", ".", "valid_data", ",", "new_valid_feature", ")", ")", "\n", "", "else", ":", "\n", "                ", "early_stopping_cnt", "+=", "1", "\n", "if", "early_stopping_cnt", "==", "early_stop_iter", ":", "\n", "                    ", "logger", ".", "info", "(", "\"no improvement for\"", ",", "early_stopping_cnt", ",", "\"iterations..........\"", ")", "\n", "break", "\n", "\n", "", "", "logger", ".", "info", "(", "\"generate feature: \"", "+", "str", "(", "iteration", ")", "+", "\" global performance: \"", "+", "str", "(", "global_best_perf", ")", ")", "\n", "\n", "np", ".", "savez", "(", "\"features_\"", "+", "str", "(", "iteration", ")", ",", "train", "=", "self", ".", "train_data", ",", "valid", "=", "self", ".", "valid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross.fit": [[318, 332], ["autocross.AutoCross._hyperband"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._hyperband"], ["", "", "def", "fit", "(", "self", ",", "x_train", ",", "y_train", ",", "categorical_index", "=", "[", "]", ",", "numerical_index", "=", "[", "]", ")", ":", "\n", "        ", "'''\n\n        :param x_train: features\n        :param y_train: labels\n        :param categorical_index: indices of categorical features\n        :param numerical_index: indices of numerical features\n        :return:\n        '''", "\n", "self", ".", "categorical_index", "=", "categorical_index", "\n", "self", ".", "numerical_index", "=", "numerical_index", "\n", "self", ".", "_hyperband", "(", "x_train", "=", "x_train", ",", "y_train", "=", "y_train", ",", "\n", "categorical_index", "=", "categorical_index", ",", "\n", "numerical_index", "=", "numerical_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross.transform": [[333, 360], ["numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.ndarray", "numpy.hstack", "autocross.AutoCross.kbins_discretizer_5.transform().toarray", "autocross.AutoCross.kbins_discretizer_50.transform().toarray", "autocross.AutoCross.onehot_encoder.transform().toarray", "len", "len", "len", "len", "autocross.AutoCross._get_cross_feature_val", "numpy.hstack", "autocross.AutoCross.kbins_discretizer_5.transform", "autocross.AutoCross.kbins_discretizer_50.transform", "autocross.AutoCross.onehot_encoder.transform", "autocross.AutoCross._get_cross_feature_val"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.AutoCross._get_cross_feature_val"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n\n        :param x: features to be transformed\n        :return: Only the generated features (without original features)\n        '''", "\n", "ori_onehot", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x", ")", ",", "0", ")", ")", "\n", "one_hot_5", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x", ")", ",", "0", ")", ")", "\n", "one_hot_50", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x", ")", ",", "0", ")", ")", "\n", "one_hot_cat", "=", "np", ".", "ndarray", "(", "(", "len", "(", "x", ")", ",", "0", ")", ")", "\n", "if", "self", ".", "onehot_index", ":", "\n", "            ", "ori_onehot", "=", "x", "[", ":", ",", "self", ".", "onehot_index", "]", "\n", "", "if", "self", ".", "numerical_index", ":", "\n", "            ", "one_hot_5", "=", "self", ".", "kbins_discretizer_5", ".", "transform", "(", "x", "[", ":", ",", "self", ".", "numerical_index", "]", ")", ".", "toarray", "(", ")", "\n", "one_hot_50", "=", "self", ".", "kbins_discretizer_50", ".", "transform", "(", "x", "[", ":", ",", "self", ".", "numerical_index", "]", ")", ".", "toarray", "(", ")", "\n", "", "if", "self", ".", "categorical_index", ":", "\n", "            ", "one_hot_cat", "=", "self", ".", "onehot_encoder", ".", "transform", "(", "x", "[", ":", ",", "self", ".", "categorical_index", "]", ")", ".", "toarray", "(", ")", "\n", "\n", "", "pri_data", "=", "np", ".", "hstack", "(", "(", "ori_onehot", ",", "one_hot_5", ",", "one_hot_50", ",", "one_hot_cat", ")", ")", "\n", "generated_features", "=", "None", "\n", "# Collect only new features", "\n", "for", "feature_set", "in", "self", ".", "feature_sets", "[", "self", ".", "init_length", ":", "]", ":", "\n", "            ", "if", "generated_features", "is", "None", ":", "\n", "                ", "generated_features", "=", "self", ".", "_get_cross_feature_val", "(", "feature_set", ",", "pri_data", ")", "\n", "", "else", ":", "\n", "                ", "generated_features", "=", "np", ".", "hstack", "(", "(", "generated_features", ",", "self", ".", "_get_cross_feature_val", "(", "feature_set", ",", "pri_data", ")", ")", ")", "\n", "", "", "return", "generated_features", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.autocross.get_metric": [[362, 400], ["callable", "ValueError"], "function", ["None"], ["", "", "def", "get_metric", "(", "metricstr", ")", ":", "\n", "# Metrics for classification", "\n", "    ", "if", "metricstr", "in", "[", "\"accuracy\"", ",", "\"acc\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "return", "accuracy_score", "\n", "", "elif", "metricstr", "==", "'f1'", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "return", "f1_score", "\n", "", "elif", "metricstr", "==", "'precision'", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "precision_score", "\n", "return", "precision_score", "\n", "", "elif", "metricstr", "==", "'recall'", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "recall_score", "\n", "return", "recall_score", "\n", "", "elif", "metricstr", "==", "\"auc\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "roc_auc_score", "\n", "return", "roc_auc_score", "\n", "\n", "# Metrics for regression", "\n", "", "elif", "metricstr", "in", "[", "\"mean_squared_error\"", ",", "\"mse\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "mean_squared_error", "\n", "return", "mean_squared_error", "\n", "", "elif", "metricstr", "in", "[", "'mean_squared_log_error'", ",", "\"msle\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "mean_squared_log_error", "\n", "return", "mean_squared_log_error", "\n", "", "elif", "metricstr", "==", "\"evs\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "explained_variance_score", "\n", "return", "explained_variance_score", "\n", "", "elif", "metricstr", "==", "\"r2\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "r2_score", "\n", "return", "r2_score", "\n", "", "elif", "metricstr", "in", "[", "\"mean_absolute_error\"", ",", "\"mae\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "mean_absolute_error", "\n", "return", "mean_absolute_error", "\n", "", "elif", "callable", "(", "metricstr", ")", ":", "\n", "        ", "return", "metricstr", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Given\"", ",", "metricstr", ",", "\". Expected valid metric string like 'acc' or callable metric function!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.__init__": [[19, 35], ["str", "str", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lower", "=", "-", "10", ",", "upper", "=", "10", ",", "num_bins", "=", "200", ",", "theta", "=", "0.01", ",", "gamma", "=", "0.8", ")", ":", "# gamma not mentioned in the work", "\n", "        ", "'''\n\n        :param lower: lower bound\n        :param upper: upper bound\n        :param num_bins: number of bins\n        :param theta: threshold for deciding whether a sample is positive\n        :param gamma: threshold for deciding whether to recommend the best transformation. If prediction > threshold, recommend!\n        '''", "\n", "self", ".", "lower", "=", "lower", "\n", "self", ".", "upper", "=", "upper", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "name_prefix", "=", "\"lower_\"", "+", "str", "(", "lower", ")", "+", "\"_upper_\"", "+", "str", "(", "upper", ")", "+", "\"_bins_\"", "+", "str", "(", "num_bins", ")", "+", "\"_theta_\"", "+", "str", "(", "\n", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.generate_samples": [[36, 84], ["os.path.join", "os.path.join", "numpy.array", "numpy.array", "list", "range", "numpy.array", "os.path.exists", "ValueError", "set", "numpy.array", "open", "pickle.dump", "open", "pickle.dump", "len", "numpy.array.append", "lfe.LFE.valid_sample", "numpy.array", "numpy.array.append", "lfe.LFE.valid_sample", "lfe.LFE.generate_qsa", "label_dict[].append", "numpy.array.append", "lfe.LFE.generate_qsa", "label_dict[].append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.valid_sample", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.valid_sample", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.generate_qsa", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.generate_qsa"], ["", "def", "generate_samples", "(", "self", ",", "x", ",", "y", ",", "dataset_name", ",", "save_dir", "=", "'lfe/data'", ")", ":", "# One-vs-rest", "\n", "        ", "'''\n        Given a dataset, generate training samples for LFE\n        :param x: features\n        :param y: labels\n        :param dataset_name: dataset name\n        :return: QSA meta-features, <transformation, label list> dicitonary like {'log':[0,1,0],'sigmoid':[1,1,1]}\n        '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Directory %s not existed!\"", "%", "save_dir", ")", "\n", "", "qsa_save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"qsa_\"", "+", "dataset_name", ")", "\n", "label_save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"label_\"", "+", "dataset_name", ")", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "label_dict", "=", "{", "i", ":", "[", "]", "for", "i", "in", "unary_collection", "}", "\n", "num_features", "=", "x", ".", "shape", "[", "1", "]", "\n", "y_classes", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "qsa_x", "=", "[", "]", "\n", "for", "feature_index", "in", "range", "(", "num_features", ")", ":", "\n", "            ", "if", "len", "(", "y_classes", ")", ">", "2", ":", "\n", "                ", "for", "label", "in", "y_classes", ":", "\n", "                    ", "y_", "=", "[", "]", "\n", "for", "i", "in", "y", ":", "\n", "                        ", "y_", ".", "append", "(", "1", "if", "i", "==", "label", "else", "0", ")", "\n", "", "y_", "=", "np", ".", "array", "(", "y_", ")", "\n", "qsa_x", ".", "append", "(", "self", ".", "generate_qsa", "(", "x", "[", ":", ",", "feature_index", "]", ",", "y_", ")", ")", "\n", "\n", "result_dict", "=", "self", ".", "valid_sample", "(", "x", ",", "y_", ",", "feature_index", ")", "\n", "for", "op", "in", "unary_collection", ":", "\n", "                        ", "label_dict", "[", "op", "]", ".", "append", "(", "result_dict", "[", "op", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "qsa_x", ".", "append", "(", "self", ".", "generate_qsa", "(", "x", "[", ":", ",", "feature_index", "]", ",", "y", ")", ")", "\n", "\n", "result_dict", "=", "self", ".", "valid_sample", "(", "x", ",", "y", ",", "feature_index", ")", "\n", "for", "op", "in", "unary_collection", ":", "\n", "                    ", "label_dict", "[", "op", "]", ".", "append", "(", "result_dict", "[", "op", "]", ")", "\n", "\n", "", "", "", "for", "key", "in", "label_dict", ":", "\n", "            ", "label_dict", "[", "key", "]", "=", "np", ".", "array", "(", "label_dict", "[", "key", "]", ")", "\n", "\n", "", "qsa_x", "=", "np", ".", "array", "(", "qsa_x", ")", "\n", "with", "open", "(", "qsa_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "qsa_x", ",", "f", ")", "\n", "", "with", "open", "(", "label_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "label_dict", ",", "f", ")", "\n", "\n", "", "return", "qsa_x", ",", "label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.generate_qsa": [[85, 110], ["sklearn.preprocessing.MinMaxScaler", "numpy.array", "numpy.array", "numpy.reshape", "sklearn.preprocessing.MinMaxScaler.fit_transform", "numpy.reshape", "numpy.zeros", "qsa.extend", "len", "int", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform"], ["", "def", "generate_qsa", "(", "self", ",", "x", ",", "y", ")", ":", "# Default one-vs-rest", "\n", "        ", "'''\n        Convert a column into Quantile Sketch Array\n        :param x: a column\n        :param y: binary labels\n        :return: Quantile Sketch Array\n        '''", "\n", "scaler", "=", "MinMaxScaler", "(", "feature_range", "=", "(", "self", ".", "lower", ",", "self", ".", "upper", ")", ")", "\n", "qsa", "=", "[", "]", "\n", "for", "i", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "x_", "=", "[", "x", "[", "index", "]", "for", "index", "in", "range", "(", "len", "(", "x", ")", ")", "if", "y", "[", "index", "]", "==", "i", "]", "\n", "x_", "=", "np", ".", "array", "(", "x_", ")", "\n", "x_", "=", "np", ".", "reshape", "(", "x_", ",", "(", "len", "(", "x_", ")", ",", "1", ")", ")", "\n", "x_", "=", "scaler", ".", "fit_transform", "(", "x_", ")", "\n", "x_", "=", "np", ".", "reshape", "(", "x_", ",", "(", "len", "(", "x_", ")", ")", ")", "\n", "x_", "-=", "self", ".", "lower", "\n", "bin_range", "=", "(", "self", ".", "upper", "-", "self", ".", "lower", ")", "/", "self", ".", "num_bins", "\n", "bucketized_col", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_bins", ",", ")", ")", "\n", "for", "element", "in", "x_", ":", "\n", "                ", "index", "=", "int", "(", "element", "/", "bin_range", ")", "\n", "if", "index", "==", "self", ".", "num_bins", ":", "\n", "                    ", "index", "=", "self", ".", "num_bins", "-", "1", "\n", "", "bucketized_col", "[", "index", "]", "+=", "1", "\n", "", "qsa", ".", "extend", "(", "bucketized_col", "/", "len", "(", "x_", ")", ")", "\n", "", "return", "np", ".", "array", "(", "qsa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.fit": [[111, 153], ["lfe.LFE.load_training_data", "os.path.exists", "os.mkdir", "os.path.join", "sklearn.neural_network.MLPClassifier.fit", "print", "sklearn.neural_network.MLPClassifier", "accuracy_score", "open", "pickle.dump", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier.predict", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.load_training_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "fit", "(", "self", ",", "train_ops", ",", "data_dir", "=", "'lfe/data'", ",", "save_dir", "=", "'lfe'", ")", ":", "\n", "        ", "'''\n        :param train_ops: list for train_ops\n        :param data_dir: directory for training data\n        :param save_dir: directory to save models\n        :return:\n        '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "train_x", ",", "train_y", "=", "self", ".", "load_training_data", "(", "data_dir", ")", "\n", "\n", "for", "train_op", "in", "train_ops", ":", "\n", "            ", "save_path", "=", "\"lfe_\"", "+", "self", ".", "name_prefix", "+", "\"_\"", "+", "train_op", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_path", ")", "\n", "if", "train_op", "==", "'log'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'sqrt'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'square'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'freq'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'round'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'tanh'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'sigmoid'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'isoreg'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'zscore'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "elif", "train_op", "==", "'norm'", ":", "\n", "                ", "clf", "=", "MLP", "(", "hidden_layer_sizes", "=", "(", "500", ",", ")", ",", "max_iter", "=", "3000", ",", "verbose", "=", "1", ",", "n_iter_no_change", "=", "20", ",", "tol", "=", "1e-5", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unexpected operation %s\"", "%", "train_op", ")", "\n", "", "clf", ".", "fit", "(", "train_x", ",", "train_y", "[", "train_op", "]", ")", "\n", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "print", "(", "accuracy_score", "(", "clf", ".", "predict", "(", "train_x", ")", ",", "train_y", "[", "train_op", "]", ")", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pkl", ".", "dump", "(", "clf", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.predict": [[154, 170], ["os.path.join", "pickle.load.predict_proba", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "", "", "def", "predict", "(", "self", ",", "pred_op", ",", "x", ",", "save_dir", "=", "'lfe'", ")", ":", "\n", "        ", "'''\n\n        :param pred_op: name of a unary operation, as shown below\n        :param x: Quantile Sketch Array\n        :param save_dir:\n        :return: predictions, indicating the expected performance of each transformation\n        '''", "\n", "\n", "save_path", "=", "\"lfe_\"", "+", "self", ".", "name_prefix", "+", "\"_\"", "+", "pred_op", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_path", ")", "\n", "with", "open", "(", "save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "clf", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "pred", "=", "clf", ".", "predict_proba", "(", "x", ")", "\n", "return", "[", "element", "[", "1", "]", "for", "element", "in", "pred", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.choose": [[171, 203], ["numpy.array", "numpy.array", "range", "lfe.LFE.generate_qsa", "lfe.LFE.predict", "transformation.append", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.generate_qsa", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "choose", "(", "self", ",", "x", ",", "y", ",", "save_dir", "=", "'lfe'", ")", ":", "\n", "        ", "'''\n        Choose transformations for features\n        :param x: features\n        :param y: labels\n        :param save_dir:\n        :return: Operator if prediction > gamma, else None\n        '''", "\n", "transformation", "=", "[", "]", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "num_features", "=", "x", ".", "shape", "[", "1", "]", "\n", "qsa_features", "=", "[", "self", ".", "generate_qsa", "(", "x", "[", ":", ",", "i", "]", ",", "y", ")", "for", "i", "in", "range", "(", "num_features", ")", "]", "\n", "qsa_features", "=", "np", ".", "array", "(", "qsa_features", ")", "\n", "pred_dict", "=", "{", "}", "\n", "for", "pred_op", "in", "unary_collection", ":", "\n", "            ", "pred_dict", "[", "pred_op", "]", "=", "self", ".", "predict", "(", "pred_op", ",", "qsa_features", ",", "save_dir", ")", "\n", "", "for", "i", "in", "range", "(", "num_features", ")", ":", "\n", "            ", "max_performance", "=", "-", "1", "\n", "best_op", "=", "''", "\n", "for", "pred_op", "in", "unary_collection", ":", "\n", "                ", "pred", "=", "pred_dict", "[", "pred_op", "]", "[", "i", "]", "\n", "if", "pred", ">", "max_performance", ":", "\n", "                    ", "max_performance", "=", "pred", "\n", "best_op", "=", "pred_op", "\n", "\n", "", "", "if", "max_performance", ">", "self", ".", "gamma", ":", "\n", "                ", "tran", "=", "best_op", "\n", "", "else", ":", "\n", "                ", "tran", "=", "None", "\n", "", "transformation", ".", "append", "(", "tran", ")", "\n", "\n", "", "return", "transformation", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.valid_sample": [[204, 250], ["numpy.array", "numpy.array", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.mean", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.RandomForestClassifier.fit", "sklearn.ensemble.RandomForestClassifier.predict", "results_org.append", "numpy.mean", "sklearn.metrics.f1_score", "sklearn.ensemble.RandomForestClassifier", "operator.operate", "numpy.reshape", "sklearn.ensemble.RandomForestClassifier.fit", "operator.operate", "numpy.reshape", "sklearn.ensemble.RandomForestClassifier.predict", "results_new[].append", "sklearn.metrics.f1_score", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "valid_sample", "(", "self", ",", "x", ",", "y", ",", "t_id", ")", ":", "\n", "        ", "'''\n        Determine whether the t-th feature in features is a positive training sample\n        :param x: original features\n        :param y: ground truth label\n        :param t_id: index of feature to be transformed\n        :param threshold: threshold of improvement of newly constructed feature\n        :return: dictionary, like {'log':1, 'sigmoid':0} 1 for positive and 0 for not positive\n        '''", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "kfold", "=", "SKFold", "(", "n_splits", "=", "10", ")", "\n", "results_org", "=", "[", "]", "\n", "results_new", "=", "{", "op", ":", "[", "]", "for", "op", "in", "unary_collection", "}", "\n", "\n", "for", "train_index", ",", "test_index", "in", "kfold", ".", "split", "(", "x", ",", "y", ")", ":", "\n", "# Original feature", "\n", "            ", "rfc_org", "=", "RFC", "(", ")", "\n", "rfc_org", ".", "fit", "(", "x", "[", "train_index", ",", "t_id", ":", "t_id", "+", "1", "]", ",", "y", "[", "train_index", "]", ")", "\n", "pred_org", "=", "rfc_org", ".", "predict", "(", "x", "[", "test_index", ",", "t_id", ":", "t_id", "+", "1", "]", ")", "\n", "results_org", ".", "append", "(", "f1_score", "(", "y", "[", "test_index", "]", ",", "pred_org", ")", ")", "\n", "\n", "# Constructed feature", "\n", "for", "op", "in", "unary_collection", ":", "\n", "                ", "operator", "=", "op_dict", "[", "op", "]", "\n", "rfc_new", "=", "RFC", "(", ")", "\n", "new_feature", "=", "operator", ".", "operate", "(", "x", "[", "train_index", ",", "t_id", "]", ")", "\n", "new_feature", "=", "np", ".", "reshape", "(", "new_feature", ",", "(", "len", "(", "new_feature", ")", ",", "1", ")", ")", "\n", "rfc_new", ".", "fit", "(", "new_feature", ",", "y", "[", "train_index", "]", ")", "\n", "# print(op,Counter(list(x[test_index, t_id])))", "\n", "new_feature", "=", "operator", ".", "operate", "(", "x", "[", "test_index", ",", "t_id", "]", ")", "\n", "# print(op,Counter(list(new_feature)))", "\n", "new_feature", "=", "np", ".", "reshape", "(", "new_feature", ",", "(", "len", "(", "new_feature", ")", ",", "1", ")", ")", "\n", "pred_new", "=", "rfc_new", ".", "predict", "(", "new_feature", ")", "\n", "results_new", "[", "op", "]", ".", "append", "(", "f1_score", "(", "y", "[", "test_index", "]", ",", "pred_new", ")", ")", "\n", "\n", "", "", "result_org", "=", "np", ".", "mean", "(", "results_org", ")", "\n", "result_dict", "=", "{", "}", "\n", "for", "key", "in", "results_new", ":", "\n", "            ", "result_new", "=", "np", ".", "mean", "(", "results_new", "[", "key", "]", ")", "\n", "if", "result_new", ">=", "result_org", "*", "(", "1", "+", "self", ".", "theta", ")", ":", "\n", "                ", "result_dict", "[", "key", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "result_dict", "[", "key", "]", "=", "0", "\n", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.LFE.load_training_data": [[251, 282], ["os.walk", "numpy.array", "numpy.array.extend", "numpy.array", "os.path.join", "train_y[].extend", "open", "file.split", "pickle.load", "file.split", "pickle.load", "file.split"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "def", "load_training_data", "(", "self", ",", "data_dir", "=", "'lfe/data'", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", "\n", "dataset", "=", "'_'", ".", "join", "(", "file", ".", "split", "(", "'_'", ")", "[", "1", ":", "]", ")", "\n", "if", "dataset", "in", "exclude_dataset", ":", "\n", "                    ", "continue", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "if", "file", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'qsa'", ":", "\n", "                        ", "qsa", "=", "pkl", ".", "load", "(", "f", ")", "\n", "if", "dataset", "not", "in", "data", ":", "\n", "                            ", "data", "[", "dataset", "]", "=", "{", "'qsa'", ":", "qsa", "}", "\n", "", "else", ":", "\n", "                            ", "data", "[", "dataset", "]", "[", "'qsa'", "]", "=", "qsa", "\n", "", "", "elif", "file", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "'label'", ":", "\n", "                        ", "label_dict", "=", "pkl", ".", "load", "(", "f", ")", "\n", "if", "dataset", "not", "in", "data", ":", "\n", "                            ", "data", "[", "dataset", "]", "=", "{", "'label'", ":", "label_dict", "}", "\n", "", "else", ":", "\n", "                            ", "data", "[", "dataset", "]", "[", "'label'", "]", "=", "label_dict", "\n", "", "", "", "", "", "train_x", "=", "[", "]", "\n", "train_y", "=", "{", "op", ":", "[", "]", "for", "op", "in", "unary_collection", "}", "\n", "for", "key", "in", "data", ":", "\n", "            ", "train_x", ".", "extend", "(", "data", "[", "key", "]", "[", "'qsa'", "]", ")", "\n", "for", "op", "in", "unary_collection", ":", "\n", "                ", "train_y", "[", "op", "]", ".", "extend", "(", "data", "[", "key", "]", "[", "'label'", "]", "[", "op", "]", ")", "\n", "", "", "for", "op", "in", "unary_collection", ":", "\n", "            ", "train_y", "[", "op", "]", "=", "np", ".", "array", "(", "train_y", "[", "op", "]", ")", "\n", "", "train_x", "=", "np", ".", "array", "(", "train_x", ")", "\n", "return", "train_x", ",", "train_y", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.other_methods.lfe.oversample": [[284, 294], ["len", "int", "print", "numpy.random.choice", "numpy.vstack", "list", "list.extend", "list", "numpy.array", "range"], "function", ["None"], ["", "", "def", "oversample", "(", "x", ",", "y", ",", "sample_size", "=", "0.2", ")", ":", "\n", "    ", "num_samples", "=", "len", "(", "x", ")", "\n", "num_oversamples", "=", "int", "(", "sample_size", "*", "num_samples", ")", "\n", "print", "(", "y", ")", "\n", "true_inx", "=", "[", "i", "for", "i", "in", "range", "(", "num_samples", ")", "if", "y", "[", "i", "]", "==", "1", "]", "\n", "oversample_idx", "=", "np", ".", "random", ".", "choice", "(", "true_inx", ",", "num_oversamples", ")", "\n", "_x", "=", "np", ".", "vstack", "(", "(", "x", ",", "x", "[", "oversample_idx", "]", ")", ")", "\n", "_y", "=", "list", "(", "y", "[", ":", "]", ")", "\n", "_y", ".", "extend", "(", "list", "(", "y", "[", "oversample_idx", "]", ")", ")", "\n", "return", "_x", ",", "np", ".", "array", "(", "_y", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp_sys_extremely_small.evaluate_sys": [[41, 97], ["mindware.datasets.utils.load_train_test_data", "time.time", "Regressor.fit", "Regressor.predict", "Regressor._ml_engine.solver.get_eval_dict", "print", "print", "print", "shutil.rmtree", "Classifier", "Regressor", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.mean_squared_error", "open", "pickle.dump", "os.path.join", "Regressor.get_output_dir"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_output_dir"], ["", "def", "evaluate_sys", "(", "run_id", ",", "task_type", ",", "mth", ",", "dataset", ",", "ens_method", ",", "enable_meta", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "_enable_meta", "=", "True", "if", "enable_meta", "==", "'true'", "else", "False", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "from", "mindware", ".", "estimators", "import", "Classifier", "\n", "estimator", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "ens_method", ",", "\n", "enable_meta_algorithm_selection", "=", "_enable_meta", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "include_algorithms", "=", "[", "'random_forest'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_based_selector'", ",", "\n", "'generic_univariate_selector'", ",", "\n", "'liblinear_based_selector'", ",", "\n", "'percentile_selector'", "]", ",", "\n", "n_jobs", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "from", "mindware", ".", "estimators", "import", "Regressor", "\n", "estimator", "=", "Regressor", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "ens_method", ",", "\n", "enable_meta_algorithm_selection", "=", "_enable_meta", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'mse'", ",", "\n", "include_algorithms", "=", "[", "'random_forest'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_based_selector_regression'", ",", "\n", "'generic_univariate_selector'", ",", "\n", "'liblinear_based_selector'", ",", "\n", "'percentile_selector_regression'", "]", ",", "\n", "n_jobs", "=", "1", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "estimator", ".", "fit", "(", "train_data", ",", "opt_strategy", "=", "mth", ",", "dataset_id", "=", "dataset", ")", "\n", "pred", "=", "estimator", ".", "predict", "(", "test_data", ")", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "test_score", "=", "balanced_accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "", "else", ":", "\n", "        ", "test_score", "=", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "", "validation_score", "=", "estimator", ".", "_ml_engine", ".", "solver", ".", "incumbent_perf", "\n", "eval_dict", "=", "estimator", ".", "_ml_engine", ".", "solver", ".", "get_eval_dict", "(", ")", "\n", "print", "(", "'Run ID         : %d'", "%", "run_id", ")", "\n", "print", "(", "'Dataset        : %s'", "%", "dataset", ")", "\n", "print", "(", "'Val/Test score : %f - %f'", "%", "(", "validation_score", ",", "test_score", ")", ")", "\n", "\n", "save_path", "=", "save_folder", "+", "'extremely_small_%s_%s_%s_%s_%d_%d_%d.pkl'", "%", "(", "\n", "task_type", ",", "mth", ",", "dataset", ",", "enable_meta", ",", "time_limit", ",", "(", "ens_method", "is", "None", ")", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", ",", "start_time", ",", "eval_dict", "]", ",", "f", ")", "\n", "\n", "# Delete output dir", "\n", "", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "estimator", ".", "get_output_dir", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp_sys_extremely_small.evaluate_ausk": [[99, 201], ["os.path.exists", "print", "mindware.datasets.utils.load_train_test_data", "time.time", "autosklearn.regression.AutoSklearnRegressor.fit", "autosklearn.regression.AutoSklearnRegressor.predict", "score_func", "autosklearn.regression.AutoSklearnRegressor.show_models", "autosklearn.regression.AutoSklearnRegressor.sprint_statistics", "print", "print", "print", "print", "print", "shutil.rmtree", "shutil.rmtree", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.regression.AutoSklearnRegressor", "autosklearn.regression.AutoSklearnRegressor", "make_scorer", "make_scorer", "X.copy", "y.copy", "numpy.max", "numpy.min", "open", "pickle.dump", "os.path.join", "shutil.rmtree", "shutil.rmtree", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "evaluate_ausk", "(", "run_id", ",", "task_type", ",", "mth", ",", "dataset", ",", "ens_method", ",", "enable_meta", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "tmp_dir", "=", "'data/exp_sys/ausk_tmp_%s_%s_%s_%d_%d'", "%", "(", "task_type", ",", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "output_dir", "=", "'data/exp_sys/ausk_output_%s_%s_%s_%d_%d'", "%", "(", "task_type", ",", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "initial_configs", "=", "25", "if", "enable_meta", "==", "'true'", "else", "0", "\n", "if", "os", ".", "path", ".", "exists", "(", "tmp_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "shutil", ".", "rmtree", "(", "output_dir", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "[", "'random_forest'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_preproc_for_classification'", ",", "\n", "'liblinear_svc_preprocessor'", ",", "\n", "'select_percentile_classification'", ",", "\n", "'select_rates'", "]", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", "if", "ens_method", "is", "None", "else", "50", ",", "\n", "initial_configurations_via_metalearning", "=", "initial_configs", ",", "\n", "tmp_folder", "=", "tmp_dir", ",", "\n", "output_folder", "=", "output_dir", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "regression", ".", "AutoSklearnRegressor", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "[", "'random_forest'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_preproc_for_regression'", ",", "\n", "'select_percentile_regression'", ",", "\n", "'select_rates'", "]", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", "if", "ens_method", "is", "None", "else", "50", ",", "\n", "initial_configurations_via_metalearning", "=", "initial_configs", ",", "\n", "tmp_folder", "=", "tmp_dir", ",", "\n", "output_folder", "=", "output_dir", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "\n", "", "print", "(", "automl", ")", "\n", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "X", ",", "y", "=", "train_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "train_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "make_scorer", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "scorer", "=", "make_scorer", "(", "name", "=", "'balanced_accuracy'", ",", "score_func", "=", "balanced_accuracy_score", ")", "\n", "score_func", "=", "balanced_accuracy_score", "\n", "", "else", ":", "\n", "        ", "scorer", "=", "make_scorer", "(", "name", "=", "'mean_squared_error'", ",", "score_func", "=", "mean_squared_error", ",", "greater_is_better", "=", "False", ")", "\n", "score_func", "=", "mean_squared_error", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "\n", "metric", "=", "scorer", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "", "else", ":", "\n", "        ", "valid_results", "=", "[", "ele", "-", "valid_results", "[", "-", "1", "]", "for", "ele", "in", "valid_results", "[", ":", "-", "1", "]", "]", "\n", "validation_score", "=", "np", ".", "min", "(", "valid_results", ")", "\n", "# automl.refit(X.copy(), y.copy())", "\n", "", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "score_func", "(", "y_test", ",", "predictions", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "result_score", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "result_time", "=", "automl", ".", "cv_results_", "[", "'mean_fit_time'", "]", "\n", "\n", "print", "(", "'='", "*", "10", ")", "\n", "# print(model_desc)", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "'='", "*", "10", ")", "\n", "\n", "print", "(", "'Validation score'", ",", "validation_score", ")", "\n", "print", "(", "'Test score'", ",", "test_score", ")", "\n", "# print(automl.show_models())", "\n", "save_path", "=", "save_folder", "+", "'extremely_small_%s_%s_%s_%s_%d_%d_%d.pkl'", "%", "(", "\n", "task_type", ",", "mth", ",", "dataset", ",", "enable_meta", ",", "time_limit", ",", "(", "ens_method", "is", "None", ")", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", ",", "start_time", ",", "result_score", ",", "result_time", "]", ",", "f", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "output_dir", ")", "\n", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'.auto-sklearn'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.plot_figure.create_point": [[33, 41], ["zip"], "function", ["None"], ["def", "create_point", "(", "x", ",", "data", ")", ":", "\n", "    ", "timestamps", ",", "perfs", "=", "data", "\n", "last_p", "=", "0", "\n", "for", "t", ",", "p", "in", "zip", "(", "timestamps", ",", "perfs", ")", ":", "\n", "        ", "if", "t", ">", "x", ":", "\n", "            ", "break", "\n", "", "last_p", "=", "p", "\n", "", "return", "last_p", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.plot_figure.create_plot_points": [[43, 50], ["numpy.linspace", "list", "enumerate", "plot_figure.create_point", "list.append"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.plot_figure.create_point"], ["", "def", "create_plot_points", "(", "data", ",", "start_time", ",", "end_time", ",", "point_num", "=", "500", ")", ":", "\n", "    ", "x", "=", "np", ".", "linspace", "(", "start_time", ",", "end_time", ",", "num", "=", "point_num", ")", "\n", "result", "=", "list", "(", ")", "\n", "for", "i", ",", "stage", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "perf", "=", "create_point", "(", "stage", ",", "data", ")", "\n", "result", ".", "append", "(", "perf", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp2.evaluate_hmab": [[51, 84], ["time.time", "mindware.datasets.utils.load_train_test_data", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "mindware.estimators.Classifier.refit", "mindware.estimators.Classifier.predict", "sklearn.metrics.balanced_accuracy_score", "mindware.estimators.Classifier.get_val_stats", "numpy.max", "print", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.get_val_stats", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["def", "evaluate_hmab", "(", "algorithms", ",", "run_id", ",", "\n", "time_limit", "=", "600", ",", "\n", "dataset", "=", "'credit'", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "enable_ens", "=", "True", ",", "seed", "=", "1", ")", ":", "\n", "    ", "task_id", "=", "'[hmab][%s-%d-%d]'", "%", "(", "dataset", ",", "len", "(", "algorithms", ")", ",", "time_limit", ")", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "if", "enable_ens", "is", "True", ":", "\n", "        ", "ensemble_method", "=", "'ensemble_selection'", "\n", "", "else", ":", "\n", "        ", "ensemble_method", "=", "None", "\n", "\n", "", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "amount_of_resource", "=", "None", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "n_jobs", "=", "1", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "clf", ".", "refit", "(", ")", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "timestamps", ",", "perfs", "=", "clf", ".", "get_val_stats", "(", ")", "\n", "validation_score", "=", "np", ".", "max", "(", "perfs", ")", "\n", "print", "(", "'Dataset          : %s'", "%", "dataset", ")", "\n", "print", "(", "'Validation/Test score : %f - %f'", "%", "(", "validation_score", ",", "test_score", ")", ")", "\n", "\n", "save_path", "=", "save_dir", "+", "'%s-%d.pkl'", "%", "(", "task_id", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "stats", "=", "[", "timestamps", ",", "perfs", "]", "\n", "pickle", ".", "dump", "(", "[", "validation_score", ",", "test_score", ",", "stats", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp2.evaluate_autosklearn": [[86, 166], ["print", "print", "mindware.datasets.utils.load_train_test_data", "autosklearn.classification.AutoSklearnClassifier.fit", "autosklearn.classification.AutoSklearnClassifier.show_models", "autosklearn.classification.AutoSklearnClassifier.sprint_statistics", "exp2.convert_ausk_to_plot", "numpy.max", "autosklearn.classification.AutoSklearnClassifier.refit", "autosklearn.classification.AutoSklearnClassifier.predict", "sklearn.metrics.balanced_accuracy_score", "print", "print", "print", "print", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.classification.AutoSklearnClassifier", "X.copy", "y.copy", "X.copy", "y.copy", "open", "pickle.dump", "len", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp1.convert_ausk_to_plot", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "", "def", "evaluate_autosklearn", "(", "algorithms", ",", "rep_id", ",", "\n", "dataset", "=", "'credit'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ",", "\n", "enable_ens", "=", "True", ",", "enable_meta_learning", "=", "True", ",", "\n", "eval_type", "=", "'holdout'", ")", ":", "\n", "    ", "print", "(", "'%s\\nDataset: %s, Run_id: %d, Budget: %d.\\n%s'", "%", "(", "'='", "*", "50", ",", "dataset", ",", "rep_id", ",", "time_limit", ",", "'='", "*", "50", ")", ")", "\n", "task_id", "=", "'[ausk%d][%s-%d-%d]'", "%", "(", "enable_ens", ",", "dataset", ",", "len", "(", "algorithms", ")", ",", "time_limit", ")", "\n", "if", "enable_ens", ":", "\n", "        ", "ensemble_size", ",", "ensemble_nbest", "=", "50", ",", "50", "\n", "", "else", ":", "\n", "        ", "ensemble_size", ",", "ensemble_nbest", "=", "1", ",", "1", "\n", "", "if", "enable_meta_learning", ":", "\n", "        ", "init_config_via_metalearning", "=", "25", "\n", "", "else", ":", "\n", "        ", "init_config_via_metalearning", "=", "0", "\n", "\n", "", "include_models", "=", "None", "\n", "\n", "if", "eval_type", "==", "'holdout'", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "include_models", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "ensemble_nbest", "=", "ensemble_nbest", ",", "\n", "initial_configurations_via_metalearning", "=", "init_config_via_metalearning", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "include_models", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "ensemble_nbest", "=", "ensemble_nbest", ",", "\n", "initial_configurations_via_metalearning", "=", "init_config_via_metalearning", ",", "\n", "seed", "=", "seed", ",", "\n", "resampling_strategy", "=", "'cv'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'folds'", ":", "5", "}", "\n", ")", "\n", "\n", "", "print", "(", "automl", ")", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "X", ",", "y", "=", "raw_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_raw_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "raw_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "balanced_accuracy", "as", "balanced_acc", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "metric", "=", "balanced_acc", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "time_records", "=", "automl", ".", "cv_results_", "[", "'mean_fit_time'", "]", "\n", "plot_x", "=", "convert_ausk_to_plot", "(", "time_records", ",", "time_limit", ")", "\n", "\n", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "\n", "# Test performance.", "\n", "automl", ".", "refit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ")", "\n", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "y_test", ",", "predictions", ")", "\n", "\n", "# Print statistics about the auto-sklearn run such as number of", "\n", "# iterations, number of models failed with a time out.", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "model_desc", ")", "\n", "print", "(", "'Validation Accuracy:'", ",", "validation_score", ")", "\n", "print", "(", "\"Test Accuracy      :\"", ",", "test_score", ")", "\n", "\n", "save_path", "=", "save_dir", "+", "'%s-%d.pkl'", "%", "(", "task_id", ",", "rep_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "stats", "=", "[", "plot_x", ",", "valid_results", "]", "\n", "pickle", ".", "dump", "(", "[", "validation_score", ",", "test_score", ",", "stats", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp2.convert_ausk_to_plot": [[168, 182], ["sum", "list", "enumerate", "list.append", "len"], "function", ["None"], ["", "", "def", "convert_ausk_to_plot", "(", "time_array", ",", "total_cost", ")", ":", "\n", "    ", "total_fit_time", "=", "sum", "(", "time_array", ")", "\n", "per_other_time", "=", "(", "total_cost", "-", "total_fit_time", ")", "/", "(", "len", "(", "time_array", ")", "-", "1", ")", "\n", "convert_x", "=", "list", "(", ")", "\n", "prev_t", "=", "0", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "time_array", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "cur_t", "=", "t", "\n", "prev_t", "=", "cur_t", "\n", "", "else", ":", "\n", "            ", "cur_t", "=", "t", "+", "prev_t", "+", "per_other_time", "\n", "prev_t", "=", "cur_t", "\n", "", "convert_x", ".", "append", "(", "cur_t", ")", "\n", "", "return", "convert_x", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp2.check_datasets": [[184, 190], ["mindware.datasets.utils.load_train_test_data", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data"], ["", "def", "check_datasets", "(", "datasets", ")", ":", "\n", "    ", "for", "_dataset", "in", "datasets", ":", "\n", "        ", "try", ":", "\n", "            ", "_", ",", "_", "=", "load_train_test_data", "(", "_dataset", ",", "random_state", "=", "1", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset - %s does not exist!'", "%", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp1.evaluate_hmab": [[53, 91], ["print", "time.time", "mindware.datasets.utils.load_train_test_data", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "mindware.estimators.Classifier.refit", "mindware.estimators.Classifier.predict", "sklearn.metrics.balanced_accuracy_score", "mindware.estimators.Classifier.get_val_stats", "numpy.max", "print", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.get_val_stats", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["def", "evaluate_hmab", "(", "algorithms", ",", "run_id", ",", "\n", "time_limit", "=", "600", ",", "\n", "dataset", "=", "'credit'", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "enable_ens", "=", "True", ",", "seed", "=", "1", ")", ":", "\n", "    ", "print", "(", "'%s\\nDataset: %s, Run_id: %d, Budget: %d.\\n%s'", "%", "(", "'='", "*", "50", ",", "dataset", ",", "run_id", ",", "time_limit", ",", "'='", "*", "50", ")", ")", "\n", "task_id", "=", "'[%s][%s-%d-%d]'", "%", "(", "hmab_id", ",", "dataset", ",", "len", "(", "algorithms", ")", ",", "time_limit", ")", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "if", "enable_ens", "is", "True", ":", "\n", "        ", "ensemble_method", "=", "'ensemble_selection'", "\n", "", "else", ":", "\n", "        ", "ensemble_method", "=", "None", "\n", "\n", "", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "include_algorithms", "=", "algorithms", ",", "\n", "amount_of_resource", "=", "None", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "n_jobs", "=", "1", ")", "\n", "# clf.fit(train_data, meta_datasets=holdout_datasets)", "\n", "# clf.fit(train_data, opt_strategy='combined')", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "clf", ".", "refit", "(", ")", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "timestamps", ",", "perfs", "=", "clf", ".", "get_val_stats", "(", ")", "\n", "validation_score", "=", "np", ".", "max", "(", "perfs", ")", "\n", "print", "(", "'Dataset          : %s'", "%", "dataset", ")", "\n", "print", "(", "'Validation/Test score : %f - %f'", "%", "(", "validation_score", ",", "test_score", ")", ")", "\n", "\n", "save_path", "=", "save_dir", "+", "'%s-%d.pkl'", "%", "(", "task_id", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "stats", "=", "[", "timestamps", ",", "perfs", "]", "\n", "pickle", ".", "dump", "(", "[", "validation_score", ",", "test_score", ",", "stats", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp1.evaluate_autosklearn": [[93, 181], ["print", "print", "mindware.datasets.utils.load_train_test_data", "time.time", "autosklearn.classification.AutoSklearnClassifier.fit", "autosklearn.classification.AutoSklearnClassifier.show_models", "autosklearn.classification.AutoSklearnClassifier.sprint_statistics", "print", "print", "time.time", "print", "print", "print", "exp1.convert_ausk_to_plot", "numpy.max", "autosklearn.classification.AutoSklearnClassifier.refit", "autosklearn.classification.AutoSklearnClassifier.predict", "sklearn.metrics.balanced_accuracy_score", "print", "print", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.classification.AutoSklearnClassifier", "X.copy", "y.copy", "X.copy", "y.copy", "open", "pickle.dump", "len", "len", "sum", "int", "int", "int", "sum"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp1.convert_ausk_to_plot", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "", "def", "evaluate_autosklearn", "(", "algorithms", ",", "rep_id", ",", "\n", "dataset", "=", "'credit'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ",", "\n", "enable_ens", "=", "True", ",", "enable_meta_learning", "=", "True", ",", "\n", "eval_type", "=", "'holdout'", ")", ":", "\n", "    ", "print", "(", "'%s\\nDataset: %s, Run_id: %d, Budget: %d.\\n%s'", "%", "(", "'='", "*", "50", ",", "dataset", ",", "rep_id", ",", "time_limit", ",", "'='", "*", "50", ")", ")", "\n", "task_id", "=", "'[ausk%d][%s-%d-%d]'", "%", "(", "enable_ens", ",", "dataset", ",", "len", "(", "algorithms", ")", ",", "time_limit", ")", "\n", "if", "enable_ens", ":", "\n", "        ", "ensemble_size", ",", "ensemble_nbest", "=", "50", ",", "50", "\n", "", "else", ":", "\n", "        ", "ensemble_size", ",", "ensemble_nbest", "=", "1", ",", "1", "\n", "", "if", "enable_meta_learning", ":", "\n", "        ", "init_config_via_metalearning", "=", "25", "\n", "", "else", ":", "\n", "        ", "init_config_via_metalearning", "=", "0", "\n", "\n", "", "include_models", "=", "algorithms", "\n", "\n", "if", "eval_type", "==", "'holdout'", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "include_models", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "ensemble_nbest", "=", "ensemble_nbest", ",", "\n", "initial_configurations_via_metalearning", "=", "init_config_via_metalearning", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "include_models", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "ensemble_nbest", "=", "ensemble_nbest", ",", "\n", "initial_configurations_via_metalearning", "=", "init_config_via_metalearning", ",", "\n", "seed", "=", "seed", ",", "\n", "resampling_strategy", "=", "'cv'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'folds'", ":", "5", "}", "\n", ")", "\n", "\n", "", "print", "(", "automl", ")", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "X", ",", "y", "=", "raw_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_raw_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "raw_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "balanced_accuracy", "as", "balanced_acc", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "metric", "=", "balanced_acc", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "time_records", "=", "automl", ".", "cv_results_", "[", "'mean_fit_time'", "]", "\n", "print", "(", "time_records", ")", "\n", "print", "(", "'Eval num: %d'", "%", "(", "len", "(", "valid_results", ")", ")", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "=", "end_time", "-", "start_time", "\n", "print", "(", "'Total time: %.2f'", "%", "total_time", ")", "\n", "print", "(", "'Eval time: %.2f'", "%", "sum", "(", "time_records", ")", ")", "\n", "print", "(", "'Eval/Total: %.2f'", "%", "(", "sum", "(", "time_records", ")", "/", "total_time", ")", ")", "\n", "plot_x", "=", "convert_ausk_to_plot", "(", "time_records", ",", "time_limit", ")", "\n", "\n", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "\n", "# Test performance.", "\n", "automl", ".", "refit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ")", "\n", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "y_test", ",", "predictions", ")", "\n", "\n", "# Print statistics about the auto-sklearn run such as number of", "\n", "# iterations, number of models failed with a time out.", "\n", "# print(str_stats)", "\n", "# print(model_desc)", "\n", "print", "(", "'Validation Accuracy:'", ",", "validation_score", ")", "\n", "print", "(", "\"Test Accuracy      :\"", ",", "test_score", ")", "\n", "\n", "save_path", "=", "save_dir", "+", "'%s-%d.pkl'", "%", "(", "task_id", ",", "rep_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "stats", "=", "[", "plot_x", ",", "valid_results", ",", "model_desc", "]", "\n", "pickle", ".", "dump", "(", "[", "validation_score", ",", "test_score", ",", "stats", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp1.convert_ausk_to_plot": [[183, 197], ["sum", "list", "enumerate", "list.append", "len"], "function", ["None"], ["", "", "def", "convert_ausk_to_plot", "(", "time_array", ",", "total_cost", ")", ":", "\n", "    ", "total_fit_time", "=", "sum", "(", "time_array", ")", "\n", "per_other_time", "=", "(", "total_cost", "-", "total_fit_time", ")", "/", "(", "len", "(", "time_array", ")", "-", "1", ")", "\n", "convert_x", "=", "list", "(", ")", "\n", "prev_t", "=", "0", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "time_array", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "cur_t", "=", "t", "\n", "prev_t", "=", "cur_t", "\n", "", "else", ":", "\n", "            ", "cur_t", "=", "t", "+", "prev_t", "+", "per_other_time", "\n", "prev_t", "=", "cur_t", "\n", "", "convert_x", ".", "append", "(", "cur_t", ")", "\n", "", "return", "convert_x", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp1.check_datasets": [[199, 205], ["mindware.datasets.utils.load_train_test_data", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data"], ["", "def", "check_datasets", "(", "datasets", ")", ":", "\n", "    ", "for", "_dataset", "in", "datasets", ":", "\n", "        ", "try", ":", "\n", "            ", "_", ",", "_", "=", "load_train_test_data", "(", "_dataset", ",", "random_state", "=", "1", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset - %s does not exist!'", "%", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp_sys.evaluate_sys": [[42, 95], ["mindware.datasets.utils.load_train_test_data", "time.time", "Regressor.fit", "Regressor.predict", "print", "print", "print", "shutil.rmtree", "Classifier", "Regressor", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.mean_squared_error", "open", "pickle.dump", "os.path.join", "Regressor.get_output_dir"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_output_dir"], ["", "def", "evaluate_sys", "(", "run_id", ",", "task_type", ",", "mth", ",", "dataset", ",", "ens_method", ",", "enable_meta", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ",", "tree_id", "=", "0", ")", ":", "\n", "    ", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "_enable_meta", "=", "True", "if", "enable_meta", "==", "'true'", "else", "False", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "from", "mindware", ".", "estimators", "import", "Classifier", "\n", "estimator", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "30", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "ens_method", ",", "\n", "enable_meta_algorithm_selection", "=", "_enable_meta", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "include_algorithms", "=", "[", "'extra_trees'", ",", "'random_forest'", ",", "\n", "'adaboost'", ",", "'gradient_boosting'", ",", "\n", "'k_nearest_neighbors'", ",", "'liblinear_svc'", ",", "\n", "'libsvm_svc'", ",", "'lightgbm'", ",", "\n", "'logistic_regression'", ",", "'random_forest'", "]", ",", "\n", "n_jobs", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "from", "mindware", ".", "estimators", "import", "Regressor", "\n", "estimator", "=", "Regressor", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "90", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "ens_method", ",", "\n", "enable_meta_algorithm_selection", "=", "_enable_meta", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'mse'", ",", "\n", "# include_preprocessors=['percentile_selector_regression'],", "\n", "# include_algorithms=['random_forest'],", "\n", "n_jobs", "=", "1", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "estimator", ".", "fit", "(", "train_data", ",", "opt_strategy", "=", "mth", ",", "dataset_id", "=", "dataset", ",", "tree_id", "=", "tree_id", ")", "\n", "pred", "=", "estimator", ".", "predict", "(", "test_data", ")", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "test_score", "=", "balanced_accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "", "else", ":", "\n", "        ", "test_score", "=", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "", "validation_score", "=", "estimator", ".", "_ml_engine", ".", "solver", ".", "incumbent_perf", "\n", "# eval_dict = estimator._ml_engine.solver.get_eval_dict()", "\n", "print", "(", "'Run ID         : %d'", "%", "run_id", ")", "\n", "print", "(", "'Dataset        : %s'", "%", "dataset", ")", "\n", "print", "(", "'Val/Test score : %f - %f'", "%", "(", "validation_score", ",", "test_score", ")", ")", "\n", "\n", "save_path", "=", "save_folder", "+", "'%s_%s_%s_%s_%d_%d_%d_%d.pkl'", "%", "(", "\n", "task_type", ",", "mth", ",", "dataset", ",", "enable_meta", ",", "time_limit", ",", "(", "ens_method", "is", "None", ")", ",", "tree_id", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", ",", "start_time", "]", ",", "f", ")", "\n", "\n", "# Delete output dir", "\n", "", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "estimator", ".", "get_output_dir", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp_sys.evaluate_ausk": [[97, 192], ["os.path.exists", "print", "mindware.datasets.utils.load_train_test_data", "time.time", "autosklearn.regression.AutoSklearnRegressor.fit", "autosklearn.regression.AutoSklearnRegressor.predict", "score_func", "autosklearn.regression.AutoSklearnRegressor.show_models", "autosklearn.regression.AutoSklearnRegressor.sprint_statistics", "print", "print", "print", "print", "print", "shutil.rmtree", "shutil.rmtree", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.regression.AutoSklearnRegressor", "autosklearn.regression.AutoSklearnRegressor", "make_scorer", "make_scorer", "X.copy", "y.copy", "numpy.max", "numpy.min", "open", "pickle.dump", "os.path.join", "shutil.rmtree", "shutil.rmtree", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "evaluate_ausk", "(", "run_id", ",", "task_type", ",", "mth", ",", "dataset", ",", "ens_method", ",", "enable_meta", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "tmp_dir", "=", "'data/exp_sys/ausk_tmp_%s_%s_%s_%d_%d'", "%", "(", "task_type", ",", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "output_dir", "=", "'data/exp_sys/ausk_output_%s_%s_%s_%d_%d'", "%", "(", "task_type", ",", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "initial_configs", "=", "25", "if", "enable_meta", "==", "'true'", "else", "0", "\n", "if", "os", ".", "path", ".", "exists", "(", "tmp_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "shutil", ".", "rmtree", "(", "output_dir", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "# include_estimators=[algo],", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", "if", "ens_method", "is", "None", "else", "50", ",", "\n", "initial_configurations_via_metalearning", "=", "initial_configs", ",", "\n", "tmp_folder", "=", "tmp_dir", ",", "\n", "output_folder", "=", "output_dir", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "regression", ".", "AutoSklearnRegressor", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "# include_estimators=[algo],", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", "if", "ens_method", "is", "None", "else", "50", ",", "\n", "initial_configurations_via_metalearning", "=", "initial_configs", ",", "\n", "tmp_folder", "=", "tmp_dir", ",", "\n", "output_folder", "=", "output_dir", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "\n", "", "print", "(", "automl", ")", "\n", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "X", ",", "y", "=", "train_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "train_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "make_scorer", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "scorer", "=", "make_scorer", "(", "name", "=", "'balanced_accuracy'", ",", "score_func", "=", "balanced_accuracy_score", ")", "\n", "score_func", "=", "balanced_accuracy_score", "\n", "", "else", ":", "\n", "        ", "scorer", "=", "make_scorer", "(", "name", "=", "'mean_squared_error'", ",", "score_func", "=", "mean_squared_error", ",", "greater_is_better", "=", "False", ")", "\n", "score_func", "=", "mean_squared_error", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "\n", "metric", "=", "scorer", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "", "else", ":", "\n", "        ", "valid_results", "=", "[", "ele", "-", "valid_results", "[", "-", "1", "]", "for", "ele", "in", "valid_results", "[", ":", "-", "1", "]", "]", "\n", "validation_score", "=", "np", ".", "min", "(", "valid_results", ")", "\n", "# automl.refit(X.copy(), y.copy())", "\n", "", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "score_func", "(", "y_test", ",", "predictions", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "result_score", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "result_time", "=", "automl", ".", "cv_results_", "[", "'mean_fit_time'", "]", "\n", "\n", "print", "(", "'='", "*", "10", ")", "\n", "# print(model_desc)", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "'='", "*", "10", ")", "\n", "\n", "print", "(", "'Validation score'", ",", "validation_score", ")", "\n", "print", "(", "'Test score'", ",", "test_score", ")", "\n", "# print(automl.show_models())", "\n", "save_path", "=", "save_folder", "+", "'%s_%s_%s_%s_%d_%d_%d.pkl'", "%", "(", "\n", "task_type", ",", "mth", ",", "dataset", ",", "enable_meta", ",", "time_limit", ",", "(", "ens_method", "is", "None", ")", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", ",", "start_time", ",", "result_score", ",", "result_time", "]", ",", "f", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "output_dir", ")", "\n", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'.auto-sklearn'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp_sys_small.evaluate_sys": [[41, 97], ["mindware.datasets.utils.load_train_test_data", "time.time", "Regressor.fit", "Regressor.predict", "Regressor._ml_engine.solver.get_eval_dict", "print", "print", "print", "shutil.rmtree", "Classifier", "Regressor", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.mean_squared_error", "open", "pickle.dump", "os.path.join", "Regressor.get_output_dir"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_output_dir"], ["", "def", "evaluate_sys", "(", "run_id", ",", "task_type", ",", "mth", ",", "dataset", ",", "ens_method", ",", "enable_meta", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "_enable_meta", "=", "True", "if", "enable_meta", "==", "'true'", "else", "False", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "from", "mindware", ".", "estimators", "import", "Classifier", "\n", "estimator", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "ens_method", ",", "\n", "enable_meta_algorithm_selection", "=", "_enable_meta", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "include_algorithms", "=", "[", "'liblinear_svc'", ",", "'random_forest'", ",", "'adaboost'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_based_selector'", ",", "\n", "'generic_univariate_selector'", ",", "\n", "'liblinear_based_selector'", ",", "\n", "'percentile_selector'", "]", ",", "\n", "n_jobs", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "from", "mindware", ".", "estimators", "import", "Regressor", "\n", "estimator", "=", "Regressor", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "ens_method", ",", "\n", "enable_meta_algorithm_selection", "=", "_enable_meta", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'mse'", ",", "\n", "include_algorithms", "=", "[", "'liblinear_svr'", ",", "'random_forest'", ",", "'adaboost'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_based_selector_regression'", ",", "\n", "'generic_univariate_selector'", ",", "\n", "'liblinear_based_selector'", ",", "\n", "'percentile_selector_regression'", "]", ",", "\n", "n_jobs", "=", "1", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "estimator", ".", "fit", "(", "train_data", ",", "opt_strategy", "=", "mth", ",", "dataset_id", "=", "dataset", ")", "\n", "pred", "=", "estimator", ".", "predict", "(", "test_data", ")", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "test_score", "=", "balanced_accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "", "else", ":", "\n", "        ", "test_score", "=", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "", "validation_score", "=", "estimator", ".", "_ml_engine", ".", "solver", ".", "incumbent_perf", "\n", "eval_dict", "=", "estimator", ".", "_ml_engine", ".", "solver", ".", "get_eval_dict", "(", ")", "\n", "print", "(", "'Run ID         : %d'", "%", "run_id", ")", "\n", "print", "(", "'Dataset        : %s'", "%", "dataset", ")", "\n", "print", "(", "'Val/Test score : %f - %f'", "%", "(", "validation_score", ",", "test_score", ")", ")", "\n", "\n", "save_path", "=", "save_folder", "+", "'small_%s_%s_%s_%s_%d_%d_%d.pkl'", "%", "(", "\n", "task_type", ",", "mth", ",", "dataset", ",", "enable_meta", ",", "time_limit", ",", "(", "ens_method", "is", "None", ")", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", ",", "start_time", ",", "eval_dict", "]", ",", "f", ")", "\n", "\n", "# Delete output dir", "\n", "", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "estimator", ".", "get_output_dir", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp_sys_small.evaluate_ausk": [[99, 201], ["os.path.exists", "print", "mindware.datasets.utils.load_train_test_data", "time.time", "autosklearn.regression.AutoSklearnRegressor.fit", "autosklearn.regression.AutoSklearnRegressor.predict", "score_func", "autosklearn.regression.AutoSklearnRegressor.show_models", "autosklearn.regression.AutoSklearnRegressor.sprint_statistics", "print", "print", "print", "print", "print", "shutil.rmtree", "shutil.rmtree", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.regression.AutoSklearnRegressor", "autosklearn.regression.AutoSklearnRegressor", "make_scorer", "make_scorer", "X.copy", "y.copy", "numpy.max", "numpy.min", "open", "pickle.dump", "os.path.join", "shutil.rmtree", "shutil.rmtree", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "evaluate_ausk", "(", "run_id", ",", "task_type", ",", "mth", ",", "dataset", ",", "ens_method", ",", "enable_meta", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "tmp_dir", "=", "'data/exp_sys/ausk_tmp_%s_%s_%s_%d_%d'", "%", "(", "task_type", ",", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "output_dir", "=", "'data/exp_sys/ausk_output_%s_%s_%s_%d_%d'", "%", "(", "task_type", ",", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "initial_configs", "=", "25", "if", "enable_meta", "==", "'true'", "else", "0", "\n", "if", "os", ".", "path", ".", "exists", "(", "tmp_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "shutil", ".", "rmtree", "(", "output_dir", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "[", "'liblinear_svc'", ",", "'random_forest'", ",", "'adaboost'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_preproc_for_classification'", ",", "\n", "'liblinear_svc_preprocessor'", ",", "\n", "'select_percentile_classification'", ",", "\n", "'select_rates'", "]", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", "if", "ens_method", "is", "None", "else", "50", ",", "\n", "initial_configurations_via_metalearning", "=", "initial_configs", ",", "\n", "tmp_folder", "=", "tmp_dir", ",", "\n", "output_folder", "=", "output_dir", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "automl", "=", "autosklearn", ".", "regression", ".", "AutoSklearnRegressor", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "[", "'liblinear_svr'", ",", "'random_forest'", ",", "'adaboost'", "]", ",", "\n", "include_preprocessors", "=", "[", "'extra_trees_preproc_for_regression'", ",", "\n", "'select_percentile_regression'", ",", "\n", "'select_rates'", "]", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", "if", "ens_method", "is", "None", "else", "50", ",", "\n", "initial_configurations_via_metalearning", "=", "initial_configs", ",", "\n", "tmp_folder", "=", "tmp_dir", ",", "\n", "output_folder", "=", "output_dir", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "\n", "", "print", "(", "automl", ")", "\n", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "X", ",", "y", "=", "train_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "train_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "make_scorer", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "scorer", "=", "make_scorer", "(", "name", "=", "'balanced_accuracy'", ",", "score_func", "=", "balanced_accuracy_score", ")", "\n", "score_func", "=", "balanced_accuracy_score", "\n", "", "else", ":", "\n", "        ", "scorer", "=", "make_scorer", "(", "name", "=", "'mean_squared_error'", ",", "score_func", "=", "mean_squared_error", ",", "greater_is_better", "=", "False", ")", "\n", "score_func", "=", "mean_squared_error", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "\n", "metric", "=", "scorer", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "", "else", ":", "\n", "        ", "valid_results", "=", "[", "ele", "-", "valid_results", "[", "-", "1", "]", "for", "ele", "in", "valid_results", "[", ":", "-", "1", "]", "]", "\n", "validation_score", "=", "np", ".", "min", "(", "valid_results", ")", "\n", "# automl.refit(X.copy(), y.copy())", "\n", "", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "score_func", "(", "y_test", ",", "predictions", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "result_score", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "result_time", "=", "automl", ".", "cv_results_", "[", "'mean_fit_time'", "]", "\n", "\n", "print", "(", "'='", "*", "10", ")", "\n", "# print(model_desc)", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "'='", "*", "10", ")", "\n", "\n", "print", "(", "'Validation score'", ",", "validation_score", ")", "\n", "print", "(", "'Test score'", ",", "test_score", ")", "\n", "# print(automl.show_models())", "\n", "save_path", "=", "save_folder", "+", "'small_%s_%s_%s_%s_%d_%d_%d.pkl'", "%", "(", "\n", "task_type", ",", "mth", ",", "dataset", ",", "enable_meta", ",", "time_limit", ",", "(", "ens_method", "is", "None", ")", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", ",", "start_time", ",", "result_score", ",", "result_time", "]", ",", "f", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "output_dir", ")", "\n", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "'.auto-sklearn'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp3.evaluate_2rd_hmab": [[36, 65], ["mindware.datasets.utils.load_train_test_data", "Classifier", "Classifier.fit", "Classifier.predict", "sklearn.metrics.balanced_accuracy_score", "Classifier.get_val_stats", "numpy.max", "print", "print", "print", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.get_val_stats", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "evaluate_2rd_hmab", "(", "run_id", ",", "mth", ",", "dataset", ",", "algo", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "task_type", "=", "MULTICLASS_CLS", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "task_type", ")", "\n", "\n", "from", "mindware", ".", "estimators", "import", "Classifier", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "save_folder", ",", "\n", "ensemble_method", "=", "None", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "include_algorithms", "=", "[", "algo", "]", ",", "\n", "n_jobs", "=", "1", ")", "\n", "\n", "clf", ".", "fit", "(", "train_data", ",", "opt_strategy", "=", "mth", ")", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", "\n", "timestamps", ",", "perfs", "=", "clf", ".", "get_val_stats", "(", ")", "\n", "validation_score", "=", "np", ".", "max", "(", "perfs", ")", "\n", "print", "(", "'Evaluation Num : %d'", "%", "len", "(", "perfs", ")", ")", "\n", "print", "(", "'Run ID         : %d'", "%", "run_id", ")", "\n", "print", "(", "'Dataset        : %s'", "%", "dataset", ")", "\n", "print", "(", "'Val/Test score : %f - %f'", "%", "(", "validation_score", ",", "test_score", ")", ")", "\n", "\n", "save_path", "=", "save_folder", "+", "'%s_%s_%d_%d_%s.pkl'", "%", "(", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ",", "algo", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exp_scripts.exp3.evaluate_ausk": [[67, 114], ["autosklearn.classification.AutoSklearnClassifier", "print", "mindware.datasets.utils.load_train_test_data", "autosklearn.classification.AutoSklearnClassifier.fit", "numpy.max", "autosklearn.classification.AutoSklearnClassifier.predict", "sklearn.metrics.balanced_accuracy_score", "autosklearn.classification.AutoSklearnClassifier.show_models", "autosklearn.classification.AutoSklearnClassifier.sprint_statistics", "print", "print", "print", "print", "print", "print", "print", "X.copy", "y.copy", "autosklearn.classification.AutoSklearnClassifier.show_models", "open", "pickle.dump", "int", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "", "def", "evaluate_ausk", "(", "run_id", ",", "mth", ",", "dataset", ",", "algo", ",", "\n", "eval_type", "=", "'holdout'", ",", "time_limit", "=", "1200", ",", "seed", "=", "1", ")", ":", "\n", "    ", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "[", "algo", "]", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "ensemble_size", "=", "1", ",", "\n", "ensemble_nbest", "=", "1", ",", "\n", "initial_configurations_via_metalearning", "=", "0", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "\n", "print", "(", "automl", ")", "\n", "task_type", "=", "MULTICLASS_CLS", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "task_type", ")", "\n", "X", ",", "y", "=", "train_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "train_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "balanced_accuracy", "as", "balanced_acc", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "metric", "=", "balanced_acc", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "# automl.refit(X.copy(), y.copy())", "\n", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "y_test", ",", "predictions", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "\n", "print", "(", "'='", "*", "10", ")", "\n", "print", "(", "model_desc", ")", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "'='", "*", "10", ")", "\n", "\n", "print", "(", "'Validation score'", ",", "validation_score", ")", "\n", "print", "(", "'Test score'", ",", "test_score", ")", "\n", "print", "(", "automl", ".", "show_models", "(", ")", ")", "\n", "save_path", "=", "save_folder", "+", "'%s_%s_%d_%d_%s.pkl'", "%", "(", "mth", ",", "dataset", ",", "time_limit", ",", "run_id", ",", "algo", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "validation_score", ",", "test_score", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.functions.evaluate_limit_function.time_limit": [[7, 17], ["signal.signal", "signal.alarm", "TimeoutError", "signal.alarm"], "function", ["None"], ["@", "contextmanager", "\n", "def", "time_limit", "(", "seconds", ")", ":", "\n", "    ", "def", "signal_handler", "(", "signum", ",", "frame", ")", ":", "\n", "        ", "raise", "TimeoutError", "(", "\"Timed out!\"", ")", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "signal_handler", ")", "\n", "signal", ".", "alarm", "(", "seconds", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "signal", ".", "alarm", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.functions.evaluate_limit_function.long_function_call": [[19, 27], ["range", "print", "print"], "function", ["None"], ["", "", "def", "long_function_call", "(", ")", ":", "\n", "    ", "a", "=", "1", "\n", "for", "_", "in", "range", "(", "10000000", ")", ":", "\n", "        ", "a", "+=", "10", "\n", "if", "a", ">", "10000", ":", "\n", "            ", "a", "=", "1", "\n", "", "print", "(", "a", ")", "\n", "", "print", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.functions.evaluate_limit_function.test_simple_func": [[29, 35], ["evaluate_limit_function.time_limit", "evaluate_limit_function.long_function_call", "print"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.functions.evaluate_limit_function.long_function_call"], ["", "def", "test_simple_func", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "time_limit", "(", "10", ")", ":", "\n", "            ", "long_function_call", "(", ")", "\n", "", "", "except", "TimeoutError", "as", "e", ":", "\n", "        ", "print", "(", "\"Timed out!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.functions.evaluate_limit_function.test": [[37, 43], ["timeout_decorator.timeout", "print", "range", "time.sleep", "print"], "function", ["None"], ["", "", "@", "timeout_decorator", ".", "timeout", "(", "5", ",", "timeout_exception", "=", "TimeoutError", ",", "use_signals", "=", "False", ")", "\n", "def", "test", "(", ")", ":", "\n", "    ", "print", "(", "\"Start\"", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "print", "(", "\"{} seconds have passed\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.bayesian_opt.bo_benchmark.get_configspace": [[34, 42], ["_classifiers[].get_hyperparameter_search_space", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "_classifiers[].get_hyperparameter_search_space.add_hyperparameter"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space"], ["def", "get_configspace", "(", "optimizer", "=", "'smac'", ")", ":", "\n", "    ", "cs", "=", "_classifiers", "[", "algo_name", "]", ".", "get_hyperparameter_search_space", "(", "optimizer", "=", "optimizer", ")", "\n", "if", "optimizer", "==", "'smac'", ":", "\n", "        ", "model", "=", "UnParametrizedHyperparameter", "(", "\"estimator\"", ",", "algo_name", ")", "\n", "cs", ".", "add_hyperparameter", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "cs", "[", "'estimator'", "]", "=", "algo_name", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.bayesian_opt.bo_benchmark.get_estimator": [[44, 57], ["config.copy", "config.copy.pop", "hasattr", "setattr"], "function", ["None"], ["", "def", "get_estimator", "(", "config", ")", ":", "\n", "    ", "from", "mindware", ".", "components", ".", "models", ".", "classification", "import", "_classifiers", ",", "_addons", "\n", "classifier_type", "=", "config", "[", "'estimator'", "]", "\n", "config_", "=", "config", ".", "copy", "(", ")", "\n", "config_", ".", "pop", "(", "'estimator'", ",", "None", ")", "\n", "config_", "[", "'random_state'", "]", "=", "1", "\n", "try", ":", "\n", "        ", "estimator", "=", "_classifiers", "[", "classifier_type", "]", "(", "**", "config_", ")", "\n", "", "except", ":", "\n", "        ", "estimator", "=", "_addons", ".", "components", "[", "classifier_type", "]", "(", "**", "config_", ")", "\n", "", "if", "hasattr", "(", "estimator", ",", "'n_jobs'", ")", ":", "\n", "        ", "setattr", "(", "estimator", ",", "'n_jobs'", ",", "args", ".", "n_jobs", ")", "\n", "", "return", "classifier_type", ",", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.bayesian_opt.bo_benchmark.evaluate": [[59, 139], ["print", "mindware.datasets.utils.load_train_test_data", "bo_benchmark.get_configspace", "mindware.components.metrics.metric.get_metric", "bo_benchmark.get_estimator", "estimator.fit", "mindware.components.metrics.metric.get_metric", "bo_benchmark.get_estimator", "estimator.fit", "mindware.components.transfer_learning.tlbo.bo_optimizer.BO", "TPE_BO.run", "print", "print", "config.get_dictionary", "mindware.components.metrics.metric.get_metric.", "mindware.components.metrics.metric.get_metric.", "TPE_BO.get_incumbent", "mindware.components.transfer_learning.tlbo.bo_optimizer.BO", "TPE_BO.run", "print", "print", "TPE_BO.get_incumbent", "BayesianOptimization", "TPE_BO.run", "print", "print", "TPE_BO.get_incumbent", "Scenario", "SMAC", "SMAC.optimize", "bo_benchmark.evaluate.objective_function"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.bayesian_opt.bo_benchmark.get_configspace", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.optimize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function"], ["", "def", "evaluate", "(", "mth", ",", "dataset", ",", "run_id", ")", ":", "\n", "    ", "print", "(", "mth", ",", "dataset", ",", "run_id", ")", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "test_size", "=", "0.3", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "\n", "def", "objective_function", "(", "config", ")", ":", "\n", "        ", "metric", "=", "get_metric", "(", "'bal_acc'", ")", "\n", "_", ",", "estimator", "=", "get_estimator", "(", "config", ".", "get_dictionary", "(", ")", ")", "\n", "X_train", ",", "y_train", "=", "train_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_data", ".", "data", "\n", "estimator", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "return", "-", "metric", "(", "estimator", ",", "X_test", ",", "y_test", ")", "\n", "\n", "", "def", "tpe_objective_function", "(", "config", ")", ":", "\n", "        ", "metric", "=", "get_metric", "(", "'bal_acc'", ")", "\n", "_", ",", "estimator", "=", "get_estimator", "(", "config", ")", "\n", "X_train", ",", "y_train", "=", "train_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_data", ".", "data", "\n", "estimator", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "return", "-", "metric", "(", "estimator", ",", "X_test", ",", "y_test", ")", "\n", "\n", "", "config_space", "=", "get_configspace", "(", ")", "\n", "\n", "if", "mth", "==", "'gp_bo'", ":", "\n", "        ", "bo", "=", "BO", "(", "objective_function", ",", "config_space", ",", "max_runs", "=", "max_runs", ")", "\n", "bo", ".", "run", "(", ")", "\n", "print", "(", "'new BO result'", ")", "\n", "print", "(", "bo", ".", "get_incumbent", "(", ")", ")", "\n", "perf_bo", "=", "bo", ".", "history_container", ".", "incumbent_value", "\n", "", "elif", "mth", "==", "'rf_bo'", ":", "\n", "        ", "bo", "=", "BO", "(", "objective_function", ",", "config_space", ",", "surrogate_model", "=", "'prob_rf'", ",", "max_runs", "=", "max_runs", ")", "\n", "bo", ".", "run", "(", ")", "\n", "print", "(", "'new BO result'", ")", "\n", "print", "(", "bo", ".", "get_incumbent", "(", ")", ")", "\n", "perf_bo", "=", "bo", ".", "history_container", ".", "incumbent_value", "\n", "", "elif", "mth", "==", "'lite_bo'", ":", "\n", "        ", "from", "litebo", ".", "facade", ".", "bo_facade", "import", "BayesianOptimization", "\n", "bo", "=", "BayesianOptimization", "(", "objective_function", ",", "config_space", ",", "max_runs", "=", "max_runs", ")", "\n", "bo", ".", "run", "(", ")", "\n", "print", "(", "'lite BO result'", ")", "\n", "print", "(", "bo", ".", "get_incumbent", "(", ")", ")", "\n", "perf_bo", "=", "bo", ".", "history_container", ".", "incumbent_value", "\n", "", "elif", "mth", "==", "'smac'", ":", "\n", "        ", "from", "smac", ".", "scenario", ".", "scenario", "import", "Scenario", "\n", "from", "smac", ".", "facade", ".", "smac_facade", "import", "SMAC", "\n", "# Scenario object", "\n", "scenario", "=", "Scenario", "(", "{", "\"run_obj\"", ":", "\"quality\"", ",", "\n", "\"runcount-limit\"", ":", "max_runs", ",", "\n", "\"cs\"", ":", "config_space", ",", "\n", "\"deterministic\"", ":", "\"true\"", "\n", "}", ")", "\n", "smac", "=", "SMAC", "(", "scenario", "=", "scenario", ",", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", ",", "\n", "tae_runner", "=", "objective_function", ")", "\n", "incumbent", "=", "smac", ".", "optimize", "(", ")", "\n", "perf_bo", "=", "objective_function", "(", "incumbent", ")", "\n", "print", "(", "'SMAC BO result'", ")", "\n", "print", "(", "perf_bo", ")", "\n", "", "elif", "mth", "==", "'tpe'", ":", "\n", "        ", "config_space", "=", "get_configspace", "(", "'tpe'", ")", "\n", "from", "hyperopt", "import", "tpe", ",", "fmin", ",", "Trials", "\n", "trials", "=", "Trials", "(", ")", "\n", "fmin", "(", "tpe_objective_function", ",", "config_space", ",", "tpe", ".", "suggest", ",", "max_runs", ",", "trials", "=", "trials", ")", "\n", "perfs", "=", "[", "trial", "[", "'result'", "]", "[", "'loss'", "]", "for", "trial", "in", "trials", ".", "trials", "]", "\n", "perf_bo", "=", "min", "(", "perfs", ")", "\n", "", "elif", "mth", "==", "'tpe_bo'", ":", "\n", "        ", "from", "mindware", ".", "components", ".", "transfer_learning", ".", "tlbo", ".", "tpe_optimizer", "import", "TPE_BO", "\n", "bo", "=", "TPE_BO", "(", "objective_function", ",", "config_space", ",", "max_runs", "=", "max_runs", ")", "\n", "bo", ".", "run", "(", ")", "\n", "print", "(", "'lite BO result'", ")", "\n", "print", "(", "bo", ".", "get_incumbent", "(", ")", ")", "\n", "perf_bo", "=", "bo", ".", "history_container", ".", "incumbent_value", "\n", "", "elif", "mth", "==", "'random_search'", ":", "\n", "        ", "from", "mindware", ".", "components", ".", "transfer_learning", ".", "tlbo", ".", "tpe_optimizer", "import", "TPE_BO", "\n", "bo", "=", "TPE_BO", "(", "objective_function", ",", "config_space", ",", "surrogate_model", "=", "mth", ",", "max_runs", "=", "max_runs", ")", "\n", "bo", ".", "run", "(", ")", "\n", "print", "(", "'lite BO result'", ")", "\n", "print", "(", "bo", ".", "get_incumbent", "(", ")", ")", "\n", "perf_bo", "=", "bo", ".", "history_container", ".", "incumbent_value", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid method.'", ")", "\n", "", "return", "perf_bo", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.bayesian_opt.bo_benchmark.check_datasets": [[141, 147], ["mindware.datasets.utils.load_train_test_data", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data"], ["", "def", "check_datasets", "(", "datasets", ",", "task_type", "=", "MULTICLASS_CLS", ")", ":", "\n", "    ", "for", "_dataset", "in", "datasets", ":", "\n", "        ", "try", ":", "\n", "            ", "_", ",", "_", "=", "load_train_test_data", "(", "_dataset", ",", "random_state", "=", "1", ",", "task_type", "=", "task_type", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset - %s does not exist!'", "%", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_benchmark.average_precision_atN": [[11, 21], ["len", "list", "range", "len", "numpy.sum", "list.append", "len"], "function", ["None"], ["def", "average_precision_atN", "(", "preds", ",", "true_labels", ")", ":", "\n", "    ", "N", "=", "len", "(", "preds", ")", "\n", "precision_", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "N", "+", "1", ")", ":", "\n", "        ", "if", "preds", "[", "i", "-", "1", "]", "in", "true_labels", "[", ":", "i", "]", ":", "\n", "            ", "_pre", "=", "(", "len", "(", "precision_", ")", "+", "1", ")", "/", "i", "\n", "precision_", ".", "append", "(", "_pre", ")", "\n", "", "", "if", "len", "(", "precision_", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "np", ".", "sum", "(", "precision_", ")", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function": [[28, 44], ["lightgbm.LGBMClassifier", "list", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "print", "lgb.LGBMClassifier.fit", "list.append", "numpy.mean", "scorer", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["def", "objective_function", "(", "config", ")", ":", "\n", "    ", "gbm", "=", "lgb", ".", "LGBMClassifier", "(", "**", "config", ")", "\n", "\n", "scores", "=", "list", "(", ")", "\n", "kfold", "=", "StratifiedKFold", "(", "n_splits", "=", "5", ",", "random_state", "=", "1", ",", "shuffle", "=", "True", ")", "\n", "for", "train_idx", ",", "valid_idx", "in", "kfold", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "        ", "train_x", ",", "valid_x", "=", "X", "[", "train_idx", "]", ",", "X", "[", "valid_idx", "]", "\n", "train_y", ",", "valid_y", "=", "y", "[", "train_idx", "]", ",", "y", "[", "valid_idx", "]", "\n", "gbm", ".", "fit", "(", "train_x", ",", "train_y", ")", "\n", "# print(train_y, valid_y)", "\n", "# pred_y = gbm.predict(valid_x)", "\n", "# print(pred_y)", "\n", "# scores.append(accuracy_score(valid_y, pred_y))", "\n", "scores", ".", "append", "(", "scorer", "(", "gbm", ",", "valid_x", ",", "valid_y", ")", ")", "\n", "", "print", "(", "-", "np", ".", "mean", "(", "scores", ")", ")", "\n", "return", "-", "np", ".", "mean", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.build_configspace": [[46, 59], ["litebo.config_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "litebo.config_space.ConfigurationSpace.add_hyperparameters"], "function", ["None"], ["", "def", "build_configspace", "(", ")", ":", "\n", "    ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\"n_estimators\"", ",", "50", ",", "500", ",", "default_value", "=", "250", ")", "\n", "num_leaves", "=", "UniformIntegerHyperparameter", "(", "\"num_leaves\"", ",", "31", ",", "1023", ",", "default_value", "=", "31", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\"learning_rate\"", ",", "0.025", ",", "0.3", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "min_child_weight", "=", "UniformIntegerHyperparameter", "(", "\"min_child_weight\"", ",", "1", ",", "10", ",", "default_value", "=", "1", ")", "\n", "subsample", "=", "UniformFloatHyperparameter", "(", "\"subsample\"", ",", "0.5", ",", "1", ",", "default_value", "=", "1", ")", "\n", "colsample_bytree", "=", "UniformFloatHyperparameter", "(", "\"colsample_bytree\"", ",", "0.5", ",", "1", ",", "default_value", "=", "1", ")", "\n", "reg_alpha", "=", "UniformFloatHyperparameter", "(", "'reg_alpha'", ",", "1e-10", ",", "10", ",", "log", "=", "True", ",", "default_value", "=", "1e-10", ")", "\n", "reg_lambda", "=", "UniformFloatHyperparameter", "(", "\"reg_lambda\"", ",", "1e-10", ",", "10", ",", "log", "=", "True", ",", "default_value", "=", "1e-10", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "num_leaves", ",", "learning_rate", ",", "min_child_weight", ",", "subsample", ",", "\n", "colsample_bytree", ",", "reg_alpha", ",", "reg_lambda", "]", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.tune_meta_learner": [[61, 75], ["meta_learner_tuner.build_configspace", "meta_learner_tuner.objective_function", "print", "litebo.facade.bo_facade.BayesianOptimization", "litebo.facade.bo_facade.BayesianOptimization.run", "litebo.facade.bo_facade.BayesianOptimization.get_incumbent", "print", "build_configspace.get_default_configuration", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.build_configspace", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "tune_meta_learner", "(", ")", ":", "\n", "    ", "cs", "=", "build_configspace", "(", ")", "\n", "def_value", "=", "objective_function", "(", "cs", ".", "get_default_configuration", "(", ")", ")", "\n", "print", "(", "\"Default Value: %.2f\"", "%", "(", "def_value", ")", ")", "\n", "\n", "bo", "=", "BayesianOptimization", "(", "objective_function", ",", "cs", ",", "max_runs", "=", "50", ",", "time_limit_per_trial", "=", "150", ")", "\n", "bo", ".", "run", "(", ")", "\n", "inc_value", "=", "bo", ".", "get_incumbent", "(", ")", "\n", "config", "=", "inc_value", "[", "0", "]", "[", "0", "]", "\n", "\n", "with", "open", "(", "meta_dir", "+", "'meta_learner_%s_%s_%s_config.pkl'", "%", "(", "meta_algo", ",", "metric", ",", "hash_id", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pk", ".", "dump", "(", "config", ",", "f", ")", "\n", "", "print", "(", "'Best hyperparameter config found'", ",", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.build_configspace": [[19, 27], ["litebo.config_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "litebo.config_space.ConfigurationSpace.add_hyperparameters"], "function", ["None"], ["def", "build_configspace", "(", ")", ":", "\n", "    ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "l1_size", "=", "UniformIntegerHyperparameter", "(", "\"layer1_size\"", ",", "16", ",", "128", ",", "default_value", "=", "64", ")", "\n", "l2_size", "=", "UniformIntegerHyperparameter", "(", "\"layer2_size\"", ",", "16", ",", "128", ",", "default_value", "=", "32", ")", "\n", "activation", "=", "CategoricalHyperparameter", "(", "\"activation\"", ",", "choices", "=", "[", "'relu'", ",", "'tanh'", "]", ",", "default_value", "=", "'relu'", ")", "\n", "batch_size", "=", "UniformIntegerHyperparameter", "(", "\"batch_size\"", ",", "16", ",", "256", ",", "default_value", "=", "64", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "l1_size", ",", "l2_size", ",", "activation", ",", "batch_size", "]", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.obj_function": [[29, 51], ["config.get_dictionary.get_dictionary", "range", "len", "list", "list", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor.RankNetAdvisor", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.fit", "numpy.mean", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.fetch_algorithm_set", "list", "mlar_tuner.average_precision_atN", "top1.append", "print", "print", "aps.append", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.fetch_run_results().keys", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.fetch_run_results"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.fetch_algorithm_set", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.average_precision_atN", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.fetch_run_results"], ["", "def", "obj_function", "(", "config", ")", ":", "\n", "    ", "config", "=", "config", ".", "get_dictionary", "(", ")", "\n", "\n", "n_fold", "=", "5", "\n", "fold_size", "=", "len", "(", "total_datasets", ")", "//", "n_fold", "\n", "aps", ",", "top1", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_fold", ")", ":", "\n", "        ", "test_datasets", "=", "total_datasets", "[", "i", "*", "fold_size", ":", "(", "i", "+", "1", ")", "*", "fold_size", "]", "\n", "ranker", "=", "RankNetAdvisor", "(", "task_type", "=", "MULTICLASS_CLS", ",", "exclude_datasets", "=", "test_datasets", ",", "metric", "=", "'bal_acc'", ")", "\n", "# ranker = GBMAdvisor(task_type=MULTICLASS_CLS, exclude_datasets=test_datasets, metric='bal_acc')", "\n", "ranker", ".", "fit", "(", "**", "config", ")", "\n", "\n", "for", "test_dataset", "in", "test_datasets", ":", "\n", "            ", "pred_algos", "=", "ranker", ".", "fetch_algorithm_set", "(", "test_dataset", ")", "\n", "true_ranks", "=", "list", "(", "ranker", ".", "fetch_run_results", "(", "test_dataset", ")", ".", "keys", "(", ")", ")", "\n", "ap", "=", "average_precision_atN", "(", "pred_algos", "[", ":", "5", "]", ",", "true_ranks", "[", ":", "5", "]", ")", "\n", "top1", ".", "append", "(", "1", "if", "true_ranks", "[", "0", "]", "in", "pred_algos", "[", ":", "5", "]", "else", "0", ")", "\n", "print", "(", "'AP@5'", ",", "ap", ")", "\n", "print", "(", "'='", "*", "10", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "", "", "return", "-", "np", ".", "mean", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.average_precision_atN": [[53, 63], ["len", "list", "range", "len", "numpy.sum", "list.append", "len"], "function", ["None"], ["", "def", "average_precision_atN", "(", "preds", ",", "true_labels", ")", ":", "\n", "    ", "N", "=", "len", "(", "preds", ")", "\n", "precision_", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "N", "+", "1", ")", ":", "\n", "        ", "if", "preds", "[", "i", "-", "1", "]", "in", "true_labels", "[", ":", "i", "]", ":", "\n", "            ", "_pre", "=", "(", "len", "(", "precision_", ")", "+", "1", ")", "/", "i", "\n", "precision_", ".", "append", "(", "_pre", ")", "\n", "", "", "if", "len", "(", "precision_", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "np", ".", "sum", "(", "precision_", ")", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.tune_meta_learner": [[65, 77], ["mlar_tuner.build_configspace", "mlar_tuner.obj_function", "print", "litebo.facade.bo_facade.BayesianOptimization", "litebo.facade.bo_facade.BayesianOptimization.run", "litebo.facade.bo_facade.BayesianOptimization.get_incumbent", "print", "build_configspace.get_default_configuration"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.build_configspace", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.mlar_tuner.obj_function", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent"], ["", "def", "tune_meta_learner", "(", ")", ":", "\n", "    ", "cs", "=", "build_configspace", "(", ")", "\n", "def_value", "=", "obj_function", "(", "cs", ".", "get_default_configuration", "(", ")", ")", "\n", "print", "(", "\"Default Value: %.2f\"", "%", "(", "def_value", ")", ")", "\n", "\n", "bo", "=", "BayesianOptimization", "(", "obj_function", ",", "cs", ",", "max_runs", "=", "50", ",", "time_limit_per_trial", "=", "1200", ")", "\n", "bo", ".", "run", "(", ")", "\n", "inc_value", "=", "bo", ".", "get_incumbent", "(", ")", "\n", "config", "=", "inc_value", "[", "0", "]", "[", "0", "]", "\n", "\n", "print", "(", "'Best hyperparameter config found'", ",", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.dataset_scripts.preprocess_dataset.transform_poker": [[5, 23], ["list", "pandas.DataFrame().to_csv", "open", "f.readlines", "[].split", "list.append", "pandas.DataFrame", "item.strip().split", "int", "numpy.asarray", "int", "float", "line.strip", "item.strip"], "function", ["None"], ["def", "transform_poker", "(", ")", ":", "\n", "    ", "data_path", "=", "'data/datasets/poker.txt'", "\n", "saved_path", "=", "'data/datasets/poker.csv'", "\n", "data", "=", "list", "(", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", "[", "1", ":", "10001", "]", ":", "\n", "            ", "sample", "=", "[", "0.", "]", "*", "11", "\n", "fields", "=", "line", ".", "strip", "(", ")", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "for", "item", "in", "fields", ":", "\n", "                ", "idx", ",", "val", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "idx", "=", "int", "(", "idx", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                    ", "sample", "[", "10", "]", "=", "int", "(", "val", ")", "\n", "", "else", ":", "\n", "                    ", "sample", "[", "idx", "-", "1", "]", "=", "float", "(", "val", ")", "\n", "", "", "assert", "sample", "[", "-", "1", "]", "in", "[", "-", "1", ",", "1", "]", "\n", "data", ".", "append", "(", "sample", ")", "\n", "", "", "pd", ".", "DataFrame", "(", "np", ".", "asarray", "(", "data", ")", ")", ".", "to_csv", "(", "saved_path", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformer.evaluate_feature_selectors": [[12, 33], ["mindware.components.feature_engineering.transformation_graph.DataNode", "mindware.components.feature_engineering.transformations.selector.generic_univariate_selector.GenericUnivariateSelector", "print", "mindware.components.feature_engineering.transformations.selector.generic_univariate_selector.GenericUnivariateSelector.operate", "print", "print", "print", "print", "numpy.array", "numpy.array", "dir", "mindware.components.feature_engineering.transformations.selector.generic_univariate_selector.GenericUnivariateSelector.get_attributes"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.get_attributes"], ["def", "evaluate_feature_selectors", "(", ")", ":", "\n", "    ", "data", "=", "(", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "1.2", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "3", ",", "2", ",", "2", "]", ",", "\n", "[", "0", ",", "5", ",", "4", ",", "5", "]", "\n", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ")", "\n", "feature_type", "=", "[", "NUMERICAL", ",", "NUMERICAL", ",", "DISCRETE", ",", "DISCRETE", "]", "\n", "datanode", "=", "DataNode", "(", "data", ",", "feature_type", ")", "\n", "\n", "scaler", "=", "GenericUnivariateSelector", "(", ")", "\n", "print", "(", "dir", "(", "scaler", ")", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "# transformer = VarianceSelector()", "\n", "# transformer = ModelBasedSelector(param='rf')", "\n", "# output_datanode = transformer.operate([datanode])", "\n", "print", "(", "scaler", ".", "get_attributes", "(", ")", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "print", "(", "output_datanode", ".", "feature_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformer.test_selector": [[35, 75], ["mindware.components.feature_engineering.transformation_graph.DataNode", "mindware.components.feature_engineering.transformations.selector.generic_univariate_selector.GenericUnivariateSelector", "VarianceSelector.operate", "print", "print", "PercentileSelector", "VarianceSelector.operate", "print", "print", "ModelBasedSelector", "VarianceSelector.operate", "print", "print", "VarianceSelector", "VarianceSelector.operate", "print", "print", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "test_selector", "(", ")", ":", "\n", "    ", "data", "=", "(", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "1.2", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "3", ",", "2", ",", "2", "]", ",", "\n", "[", "0", ",", "5", ",", "4", ",", "5", "]", "\n", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ")", "\n", "feature_type", "=", "[", "NUMERICAL", ",", "NUMERICAL", ",", "DISCRETE", ",", "DISCRETE", "]", "\n", "datanode", "=", "DataNode", "(", "data", ",", "feature_type", ")", "\n", "\n", "# Test generic univariate selector.", "\n", "scaler", "=", "GenericUnivariateSelector", "(", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test percentile selector.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "selector", ".", "percentile_selector", "import", "PercentileSelector", "\n", "scaler", "=", "PercentileSelector", "(", "percentile", "=", "25", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test model based selector.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "selector", ".", "model_based_selector", "import", "ModelBasedSelector", "\n", "scaler", "=", "ModelBasedSelector", "(", "param", "=", "'et'", ")", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test variance threshold.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "selector", ".", "variance_selector", "import", "VarianceSelector", "\n", "scaler", "=", "VarianceSelector", "(", ")", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformer.test_additional_transformations": [[77, 96], ["mindware.components.feature_engineering.transformation_graph.DataNode", "DiscreteCategorizer", "DiscreteCategorizer.operate", "print", "print", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "test_additional_transformations", "(", ")", ":", "\n", "    ", "data", "=", "(", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "1.2", ",", "2", ",", "1", "]", ",", "\n", "[", "0.01", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "[", "0.02", ",", "3", ",", "2", ",", "2", "]", ",", "\n", "[", "0.015", ",", "5", ",", "4", ",", "5", "]", ",", "\n", "[", "0.12", ",", "3", ",", "2", ",", "2", "]", ",", "\n", "[", "0.16", ",", "5", ",", "4", ",", "5", "]", "\n", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", "]", ")", ")", "\n", "feature_type", "=", "[", "NUMERICAL", ",", "NUMERICAL", ",", "DISCRETE", ",", "DISCRETE", "]", "\n", "datanode", "=", "DataNode", "(", "data", ",", "feature_type", ")", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "discrete_categorizer", "import", "DiscreteCategorizer", "\n", "# trans = ArithmeticTransformation()", "\n", "# trans = LdaDecomposer()", "\n", "# trans = KBinsDiscretizer()", "\n", "trans", "=", "DiscreteCategorizer", "(", ")", "\n", "output_datanode", "=", "trans", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformer.test_generator": [[98, 165], ["mindware.components.feature_engineering.transformation_graph.DataNode", "SvdDecomposer", "RandomTreesEmbeddingTransformation.operate", "print", "print", "FeatureAgglomerationDecomposer", "RandomTreesEmbeddingTransformation.operate", "print", "print", "PcaDecomposer", "RandomTreesEmbeddingTransformation.operate", "print", "print", "KernelPCA", "RandomTreesEmbeddingTransformation.operate", "print", "print", "FastIcaDecomposer", "RandomTreesEmbeddingTransformation.operate", "print", "print", "RandomTreesEmbeddingTransformation", "RandomTreesEmbeddingTransformation.operate", "print", "print", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "test_generator", "(", ")", ":", "\n", "    ", "data", "=", "(", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "1.2", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "3", ",", "2", ",", "2", "]", ",", "\n", "[", "0", ",", "5", ",", "4", ",", "5", "]", "\n", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ")", "\n", "feature_type", "=", "[", "NUMERICAL", ",", "NUMERICAL", ",", "DISCRETE", ",", "DISCRETE", "]", "\n", "datanode", "=", "DataNode", "(", "data", ",", "feature_type", ")", "\n", "\n", "# Test SVD.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "generator", ".", "svd_decomposer", "import", "SvdDecomposer", "\n", "scaler", "=", "SvdDecomposer", "(", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test feature agglomerate.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "generator", ".", "feature_agglomeration_decomposer", "import", "FeatureAgglomerationDecomposer", "\n", "scaler", "=", "FeatureAgglomerationDecomposer", "(", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test PCA.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "generator", ".", "pca_decomposer", "import", "PcaDecomposer", "\n", "scaler", "=", "PcaDecomposer", "(", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test kernel PCA.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "generator", ".", "kernel_pca", "import", "KernelPCA", "\n", "scaler", "=", "KernelPCA", "(", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test fast ICA.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "generator", ".", "fast_ica_decomposer", "import", "FastIcaDecomposer", "\n", "scaler", "=", "FastIcaDecomposer", "(", ")", "\n", "scaler", ".", "concatenate", "=", "False", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n", "# Test LDA.", "\n", "# from components.transformers.generator.lda_decomposer import LdaDecomposer", "\n", "# scaler = LdaDecomposer(frac=0.3)", "\n", "# scaler.concatenate = False", "\n", "# output_datanode = scaler.operate(datanode)", "\n", "# print(output_datanode)", "\n", "# print(output_datanode.data)", "\n", "\n", "# Test random trees embedding.", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "generator", ".", "random_trees_embedding", "import", "RandomTreesEmbeddingTransformation", "\n", "scaler", "=", "RandomTreesEmbeddingTransformation", "(", ")", "\n", "output_datanode", "=", "scaler", ".", "operate", "(", "datanode", ")", "\n", "print", "(", "output_datanode", ")", "\n", "print", "(", "output_datanode", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformer.test_balancer": [[167, 187], ["sys.path.append", "load_train_test_data", "print", "DataBalancer", "DataBalancer.operate", "DataBalancer.operate", "DataBalancer.operate", "print", "test_raw_data.copy_", "print", "os.getcwd", "DataBalancer.operate", "DataBalancer.operate"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "test_balancer", "(", ")", ":", "\n", "    ", "dataset", "=", "'winequality_red'", "\n", "sys", ".", "path", ".", "append", "(", "os", ".", "getcwd", "(", ")", ")", "\n", "from", "mindware", ".", "datasets", ".", "utils", "import", "load_train_test_data", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ")", "\n", "# data = (", "\n", "# np.random.random((10, 4)), np.array([0, 0, 0, 0, 0, 2, 2, 2, 2, 2]))", "\n", "# feature_type = [NUMERICAL, NUMERICAL, DISCRETE, DISCRETE]", "\n", "# datanode = DataNode(data, feature_type)", "\n", "print", "(", "raw_data", ",", "test_raw_data", ")", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "balancer", ".", "data_balancer", "import", "DataBalancer", "\n", "balancer", "=", "DataBalancer", "(", ")", "\n", "a", "=", "balancer", ".", "operate", "(", "raw_data", ")", "\n", "b", "=", "balancer", ".", "operate", "(", "raw_data", ")", "\n", "c", "=", "balancer", ".", "operate", "(", "raw_data", ")", "\n", "assert", "a", "==", "b", "and", "b", "==", "c", "\n", "print", "(", "balancer", ".", "operate", "(", "raw_data", ")", ")", "\n", "test_data", "=", "test_raw_data", ".", "copy_", "(", ")", "\n", "test_data", ".", "data", "[", "1", "]", "=", "None", "\n", "print", "(", "balancer", ".", "operate", "(", "test_data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformation_graph.evaluate_transformation_graph": [[16, 90], ["mindware.components.feature_engineering.transformation_graph.DataNode", "mindware.components.feature_engineering.transformation_graph.TransformationGraph", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_node", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation", "mindware.components.feature_engineering.transformations.merger.Merger.operate", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_node", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_edge", "mindware.components.feature_engineering.transformations.preprocessor.onehot_encoder.OneHotTransformation", "mindware.components.feature_engineering.transformations.merger.Merger.operate", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_node", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_edge", "mindware.components.feature_engineering.transformations.rescaler.scaler.ScaleTransformation", "mindware.components.feature_engineering.transformations.merger.Merger.operate", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_node", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_edge", "print", "print", "mindware.components.feature_engineering.transformations.rescaler.scaler.ScaleTransformation", "mindware.components.feature_engineering.transformations.merger.Merger.operate", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_node", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_edge", "mindware.components.feature_engineering.transformations.merger.Merger", "mindware.components.feature_engineering.transformations.merger.Merger.operate", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_node", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.add_transformation", "print", "print", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.topological_sort", "print", "mindware.components.feature_engineering.transformation_graph.DataNode", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.get_node", "graph.get_node.set_values", "range", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.get_node", "print", "print", "np.array", "np.array", "mindware.components.feature_engineering.transformation_graph.DataNode.node_id", "transformer.operate.node_id", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "np.array", "len", "list", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.get_edge", "graph.get_edge.transformer.operate", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.get_node().set_values", "transformer.operate.get_node_id", "transformer.operate.get_node_id", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.get_node", "list.append", "len", "mindware.components.feature_engineering.transformation_graph.TransformationGraph.get_node"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_edge", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_edge", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_edge", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_edge", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.topological_sort", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.set_values", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.node_id", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.node_id", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_edge", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.set_values", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_node"], ["def", "evaluate_transformation_graph", "(", ")", ":", "\n", "    ", "data", "=", "(", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "nan", ",", "2", ",", "1", "]", ",", "\n", "[", "1", ",", "2", ",", "2", "]", ",", "\n", "[", "3", ",", "4", ",", "2", "]", ",", "\n", "[", "5", ",", "np", ".", "nan", ",", "1", "]", "\n", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ")", "\n", "feature_type", "=", "[", "NUMERICAL", ",", "NUMERICAL", ",", "CATEGORICAL", "]", "\n", "datanode", "=", "DataNode", "(", "data", ",", "feature_type", ")", "\n", "\n", "graph", "=", "TransformationGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "datanode", ")", "\n", "\n", "transformer", "=", "ImputationTransformation", "(", ")", "\n", "output_datanode1", "=", "transformer", ".", "operate", "(", "datanode", ",", "target_fields", "=", "[", "0", ",", "1", "]", ")", "\n", "graph", ".", "add_node", "(", "output_datanode1", ")", "\n", "graph", ".", "add_edge", "(", "datanode", ".", "node_id", "(", ")", ",", "output_datanode1", ".", "node_id", "(", ")", ",", "transformer", ")", "\n", "\n", "transformer", "=", "OneHotTransformation", "(", ")", "\n", "output_datanode2", "=", "transformer", ".", "operate", "(", "output_datanode1", ")", "\n", "graph", ".", "add_node", "(", "output_datanode2", ")", "\n", "graph", ".", "add_edge", "(", "output_datanode1", ".", "get_node_id", "(", ")", ",", "output_datanode2", ".", "get_node_id", "(", ")", ",", "transformer", ")", "\n", "\n", "transformer", "=", "ScaleTransformation", "(", ")", "\n", "transformer", ".", "concatenate", "=", "True", "\n", "output_datanode3", "=", "transformer", ".", "operate", "(", "output_datanode2", ")", "\n", "graph", ".", "add_node", "(", "output_datanode3", ")", "\n", "graph", ".", "add_edge", "(", "output_datanode2", ".", "get_node_id", "(", ")", ",", "output_datanode3", ".", "get_node_id", "(", ")", ",", "transformer", ")", "\n", "\n", "print", "(", "output_datanode3", ")", "\n", "print", "(", "output_datanode3", ".", "data", ")", "\n", "\n", "transformer", "=", "ScaleTransformation", "(", ")", "\n", "transformer", ".", "concatenate", "=", "False", "\n", "output_datanode4", "=", "transformer", ".", "operate", "(", "output_datanode2", ")", "\n", "graph", ".", "add_node", "(", "output_datanode4", ")", "\n", "graph", ".", "add_edge", "(", "output_datanode2", ".", "get_node_id", "(", ")", ",", "output_datanode4", ".", "get_node_id", "(", ")", ",", "transformer", ")", "\n", "\n", "transformer", "=", "Merger", "(", ")", "\n", "output_datanode5", "=", "transformer", ".", "operate", "(", "[", "output_datanode3", ",", "output_datanode4", "]", ")", "\n", "graph", ".", "add_node", "(", "output_datanode5", ")", "\n", "graph", ".", "add_transformation", "(", "[", "output_datanode3", ".", "get_node_id", "(", ")", ",", "output_datanode4", ".", "get_node_id", "(", ")", "]", ",", "output_datanode5", ".", "get_node_id", "(", ")", ",", "transformer", ")", "\n", "\n", "print", "(", "output_datanode5", ")", "\n", "print", "(", "output_datanode5", ".", "data", ")", "\n", "\n", "order_ids", "=", "graph", ".", "topological_sort", "(", ")", "\n", "print", "(", "order_ids", ")", "\n", "test_data", "=", "(", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "nan", ",", "2", ",", "1", "]", ",", "\n", "[", "1", ",", "2", ",", "1", "]", ",", "\n", "[", "3", ",", "2", ",", "1", "]", ",", "\n", "[", "3", ",", "np", ".", "nan", ",", "1", "]", "\n", "]", ")", ",", "None", ")", "\n", "test_node", "=", "DataNode", "(", "test_data", ",", "feature_types", ")", "\n", "\n", "inputnode", "=", "graph", ".", "get_node", "(", "order_ids", "[", "0", "]", ")", "\n", "inputnode", ".", "set_values", "(", "test_node", ")", "\n", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "order_ids", ")", ")", ":", "\n", "        ", "node_id", "=", "order_ids", "[", "idx", "]", "\n", "\n", "input_node_list", "=", "list", "(", ")", "\n", "for", "input_id", "in", "graph", ".", "input_data_dict", "[", "node_id", "]", ":", "\n", "            ", "inputnode", "=", "graph", ".", "get_node", "(", "input_id", ")", "\n", "input_node_list", ".", "append", "(", "inputnode", ")", "\n", "", "inputnode", "=", "input_node_list", "[", "0", "]", "if", "len", "(", "input_node_list", ")", "==", "1", "else", "input_node_list", "\n", "\n", "edge", "=", "graph", ".", "get_edge", "(", "graph", ".", "input_edge_dict", "[", "node_id", "]", ")", "\n", "outputnode", "=", "edge", ".", "transformer", ".", "operate", "(", "inputnode", ",", "edge", ".", "target_fields", ")", "\n", "graph", ".", "get_node", "(", "node_id", ")", ".", "set_values", "(", "outputnode", ")", "\n", "", "output_node", "=", "graph", ".", "get_node", "(", "order_ids", "[", "-", "1", "]", ")", "\n", "print", "(", "output_node", ")", "\n", "print", "(", "output_node", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformation_graph.evaluate_fe_pipeline": [[92, 103], ["DataManager", "DataManager.load_train_csv", "mindware.components.feature_engineering.fe_pipeline.FEPipeline().fit", "FEPipeline().fit.transform", "print", "print", "mindware.components.feature_engineering.fe_pipeline.FEPipeline"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.load_train_csv", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "evaluate_fe_pipeline", "(", ")", ":", "\n", "    ", "from", "mindware", ".", "utils", ".", "data_manager", "import", "DataManager", "\n", "dm", "=", "DataManager", "(", ")", "\n", "# file_path = \"data/proprocess_data.csv\"", "\n", "file_path", "=", "'data/a9a/dataset_183_adult.csv'", "\n", "dm", ".", "load_train_csv", "(", "file_path", ")", "\n", "\n", "pipeline", "=", "FEPipeline", "(", "fe_enabled", "=", "True", ")", ".", "fit", "(", "dm", ")", "\n", "train_data", "=", "pipeline", ".", "transform", "(", "dm", ")", "\n", "print", "(", "train_data", ")", "\n", "print", "(", "train_data", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_transformation_graph.evaluate_data_manager": [[113, 128], ["np.array", "DataManager", "print", "print"], "function", ["None"], ["", "def", "evaluate_data_manager", "(", ")", ":", "\n", "# from data_manager import DataManager", "\n", "# dm = DataManager()", "\n", "# train_df = dm.load_train_csv(\"data/proprocess_data.csv\")", "\n", "# print(train_df)", "\n", "# print(dm.feature_types)", "\n", "# print(dm.missing_flags)", "\n", "\n", "    ", "from", "mindware", ".", "utils", ".", "data_manager", "import", "DataManager", "\n", "import", "numpy", "as", "np", "\n", "X", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "1", ",", "'asfd'", ",", "2", ",", "1.4", "]", "]", ")", "\n", "y", "=", "[", "1", ",", "2", "]", "\n", "dm", "=", "DataManager", "(", "X", ",", "y", ")", "\n", "print", "(", "dm", ".", "feature_types", ")", "\n", "print", "(", "dm", ".", "missing_flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.show_hyperspace.explore_config_nums": [[6, 17], ["set", "len", "configuration_space.sample_configuration", "set.append"], "function", ["None"], ["def", "explore_config_nums", "(", "configuration_space", ":", "ConfigurationSpace", ",", "batch_size", ":", "int", "=", "1000", ")", "->", "int", ":", "\n", "    ", "result", "=", "[", "]", "\n", "cnt", ",", "sample_cnt", "=", "0", ",", "0", "\n", "while", "cnt", "<", "5000", "and", "sample_cnt", "<", "20000", ":", "\n", "        ", "for", "config", "in", "configuration_space", ".", "sample_configuration", "(", "batch_size", ")", ":", "\n", "            ", "sample_cnt", "+=", "1", "\n", "if", "config", "not", "in", "result", ":", "\n", "                ", "result", ".", "append", "(", "config", ")", "\n", "cnt", "+=", "1", "\n", "", "", "", "result", "=", "set", "(", "result", ")", "\n", "return", "len", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.show_hyperspace.show_hpspace": [[19, 27], ["clf_class.get_hyperparameter_search_space", "clf_class.get_hyperparameter_search_space.sample_configuration", "print", "print", "print", "print", "len", "len", "show_hyperspace.explore_config_nums", "set"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.show_hyperspace.explore_config_nums"], ["", "def", "show_hpspace", "(", "classifier_id", "=", "'k_nearest_neighbors'", ")", ":", "\n", "    ", "clf_class", "=", "_classifiers", "[", "classifier_id", "]", "\n", "cs", "=", "clf_class", ".", "get_hyperparameter_search_space", "(", ")", "\n", "configs", "=", "cs", ".", "sample_configuration", "(", "10000", ")", "\n", "print", "(", "classifier_id", ")", "\n", "print", "(", "len", "(", "configs", ")", ",", "len", "(", "set", "(", "configs", ")", ")", ")", "\n", "print", "(", "explore_config_nums", "(", "cs", ")", ")", "\n", "print", "(", "'='", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_meta_learning.get_meta_learning_configs": [[17, 53], ["autosklearn.util.backend.create", "autosklearn.data.xy_data_manager.XYDataManager", "autosklearn.util.pipeline.get_configuration_space", "autosklearn.util.StopWatch", "os.path.basename", "autosklearn.util.StopWatch.start_task", "autosklearn.smbo.AutoMLSMBO", "autosklearn.smbo.AutoMLSMBO.get_metalearning_suggestions"], "function", ["None"], ["def", "get_meta_learning_configs", "(", "X", ",", "y", ",", "task_type", ",", "dataset_name", ",", "metric", "=", "'accuracy'", ",", "num_cfgs", "=", "5", ")", ":", "\n", "    ", "backend", "=", "create", "(", "temporary_directory", "=", "None", ",", "\n", "output_directory", "=", "None", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "shared_mode", "=", "True", ")", "\n", "dm", "=", "XYDataManager", "(", "X", ",", "y", ",", "None", ",", "None", ",", "task_type", ",", "None", ",", "dataset_name", ")", "\n", "\n", "configuration_space", "=", "pipeline", ".", "get_configuration_space", "(", "dm", ".", "info", ",", "\n", "include_estimators", "=", "None", ",", "\n", "exclude_estimators", "=", "None", ",", "\n", "include_preprocessors", "=", "None", ",", "\n", "exclude_preprocessors", "=", "None", ")", "\n", "\n", "watcher", "=", "StopWatch", "(", ")", "\n", "name", "=", "os", ".", "path", ".", "basename", "(", "dm", ".", "name", ")", "\n", "watcher", ".", "start_task", "(", "name", ")", "\n", "\n", "def", "reset_data_manager", "(", "max_mem", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "automlsmbo", "=", "AutoMLSMBO", "(", "config_space", "=", "configuration_space", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "backend", "=", "backend", ",", "\n", "total_walltime_limit", "=", "1e5", ",", "\n", "func_eval_time_limit", "=", "1e5", ",", "\n", "memory_limit", "=", "1e5", ",", "\n", "metric", "=", "metric", ",", "\n", "watcher", "=", "watcher", ",", "\n", "metadata_directory", "=", "'files'", ",", "\n", "num_metalearning_cfgs", "=", "num_cfgs", ")", "\n", "automlsmbo", ".", "reset_data_manager", "=", "reset_data_manager", "\n", "automlsmbo", ".", "task", "=", "task_type", "\n", "automlsmbo", ".", "datamanager", "=", "dm", "\n", "configs", "=", "automlsmbo", ".", "get_metalearning_suggestions", "(", ")", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_openml.load_task": [[5, 18], ["openml.tasks.get_task", "openml.tasks.get_task.get_X_and_y", "print", "openml.tasks.get_task.get_train_test_split_indices", "print"], "function", ["None"], ["def", "load_task", "(", "task_id", ")", ":", "\n", "    ", "\"\"\"Function used for loading data.\"\"\"", "\n", "task", "=", "openml", ".", "tasks", ".", "get_task", "(", "task_id", ")", "\n", "X", ",", "y", "=", "task", ".", "get_X_and_y", "(", ")", "\n", "print", "(", "X", ".", "shape", ",", "y", ".", "shape", ")", "\n", "train_indices", ",", "test_indices", "=", "task", ".", "get_train_test_split_indices", "(", ")", "\n", "X_train", "=", "X", "[", "train_indices", "]", "\n", "y_train", "=", "y", "[", "train_indices", "]", "\n", "X_test", "=", "X", "[", "test_indices", "]", "\n", "y_test", "=", "y", "[", "test_indices", "]", "\n", "print", "(", "X_train", ".", "shape", ",", "X_test", ".", "shape", ")", "\n", "cat", "=", "None", "\n", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "cat", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_package.evaluate_package": [[5, 8], ["mindware.datasets.utils.load_train_test_data", "mindware.estimators.Classifier().fit", "mindware.estimators.Classifier"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["def", "evaluate_package", "(", ")", ":", "\n", "    ", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "'pc4'", ",", "data_dir", "=", "'./'", ")", "\n", "Classifier", "(", ")", ".", "fit", "(", "train_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_tpot.evaluate_tpot": [[32, 103], ["time.time", "tpot.TPOTRegressor.fit", "tpot.TPOTRegressor.predict", "max", "score_func", "print", "print", "print", "tpot.TPOTClassifier", "mindware.datasets.utils.load_train_test_data", "tpot.TPOTRegressor", "mindware.datasets.utils.load_train_test_data", "open", "pickle.dump", "X_train.astype", "y_train.astype", "X_test.astype", "y_test.astype", "X_train.astype", "y_train.astype", "X_test.astype", "y_test.astype", "int", "int", "range", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "evaluate_tpot", "(", "dataset", ",", "task_type", ",", "run_id", ",", "time_limit", ",", "seed", "=", "1", ",", "use_fe", "=", "True", ")", ":", "\n", "    ", "n_job", "=", "args", ".", "n_job", "\n", "# Construct the ML model.", "\n", "if", "not", "use_fe", ":", "\n", "        ", "from", "mindware", ".", "utils", ".", "tpot_config", "import", "classifier_config_dict", "\n", "config", "=", "classifier_config_dict", "\n", "\n", "", "_task_type", "=", "MULTICLASS_CLS", "if", "task_type", "==", "'cls'", "else", "REGRESSION", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "if", "space_type", "==", "'large'", ":", "\n", "            ", "from", "tpot", ".", "config", ".", "classifier", "import", "classifier_config_dict", "\n", "", "elif", "space_type", "==", "'small'", ":", "\n", "            ", "from", "tpot", ".", "config", ".", "classifier_small", "import", "classifier_config_dict", "\n", "", "else", ":", "\n", "            ", "from", "tpot", ".", "config", ".", "classifier_extremely_small", "import", "classifier_config_dict", "\n", "", "config_dict", "=", "classifier_config_dict", "\n", "", "else", ":", "\n", "        ", "if", "space_type", "==", "'large'", ":", "\n", "            ", "from", "tpot", ".", "config", ".", "regressor", "import", "regressor_config_dict", "\n", "", "elif", "space_type", "==", "'small'", ":", "\n", "            ", "from", "tpot", ".", "config", ".", "regressor_small", "import", "regressor_config_dict", "\n", "", "else", ":", "\n", "            ", "from", "tpot", ".", "config", ".", "regressor_extremely_small", "import", "regressor_config_dict", "\n", "", "config_dict", "=", "regressor_config_dict", "\n", "\n", "", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "automl", "=", "TPOTClassifier", "(", "config_dict", "=", "config_dict", ",", "generations", "=", "10000", ",", "population_size", "=", "20", ",", "\n", "verbosity", "=", "2", ",", "n_jobs", "=", "n_job", ",", "cv", "=", "0.2", ",", "\n", "scoring", "=", "'balanced_accuracy'", ",", "\n", "max_eval_time_mins", "=", "max_eval_time", ",", "\n", "max_time_mins", "=", "int", "(", "time_limit", "/", "60", ")", ",", "\n", "random_state", "=", "seed", ")", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "X_train", ",", "y_train", "=", "raw_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_raw_data", ".", "data", "\n", "X_train", ",", "y_train", "=", "X_train", ".", "astype", "(", "'float64'", ")", ",", "y_train", ".", "astype", "(", "'int'", ")", "\n", "X_test", ",", "y_test", "=", "X_test", ".", "astype", "(", "'float64'", ")", ",", "y_test", ".", "astype", "(", "'int'", ")", "\n", "", "else", ":", "\n", "        ", "automl", "=", "TPOTRegressor", "(", "config_dict", "=", "config_dict", ",", "generations", "=", "10000", ",", "population_size", "=", "20", ",", "\n", "verbosity", "=", "2", ",", "n_jobs", "=", "n_job", ",", "cv", "=", "0.2", ",", "\n", "scoring", "=", "'neg_mean_squared_error'", ",", "\n", "max_eval_time_mins", "=", "max_eval_time", ",", "\n", "max_time_mins", "=", "int", "(", "time_limit", "/", "60", ")", ",", "\n", "random_state", "=", "seed", ")", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "_task_type", ")", "\n", "X_train", ",", "y_train", "=", "raw_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_raw_data", ".", "data", "\n", "X_train", ",", "y_train", "=", "X_train", ".", "astype", "(", "'float64'", ")", ",", "y_train", ".", "astype", "(", "'float64'", ")", "\n", "X_test", ",", "y_test", "=", "X_test", ".", "astype", "(", "'float64'", ")", ",", "y_test", ".", "astype", "(", "'float64'", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "automl", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "y_hat", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "pareto_front", "=", "automl", ".", "_pareto_front", "\n", "\n", "if", "task_type", "==", "'cls'", ":", "\n", "        ", "score_func", "=", "balanced_accuracy_score", "\n", "", "else", ":", "\n", "        ", "score_func", "=", "mean_squared_error", "\n", "\n", "", "valid_score", "=", "max", "(", "[", "pareto_front", ".", "keys", "[", "x", "]", ".", "wvalues", "[", "1", "]", "for", "x", "in", "range", "(", "len", "(", "pareto_front", ".", "keys", ")", ")", "]", ")", "\n", "test_score", "=", "score_func", "(", "y_test", ",", "y_hat", ")", "\n", "print", "(", "'Run ID         : %d'", "%", "run_id", ")", "\n", "print", "(", "'Dataset        : %s'", "%", "dataset", ")", "\n", "print", "(", "'Val/Test score : %f - %f'", "%", "(", "valid_score", ",", "test_score", ")", ")", "\n", "scores", "=", "automl", ".", "scores", "\n", "times", "=", "automl", ".", "times", "\n", "_space_type", "=", "'%s_'", "%", "space_type", "if", "space_type", "!=", "'large'", "else", "''", "\n", "save_path", "=", "save_dir", "+", "'%s%s_tpot_%s_false_%d_1_%d.pkl'", "%", "(", "_space_type", ",", "task_type", ",", "dataset", ",", "time_limit", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "valid_score", ",", "test_score", ",", "times", ",", "scores", ",", "start_time", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_fe_hpo_overfitting.get_avg": [[20, 34], ["range", "list", "list", "os.path.exists", "numpy.mean", "numpy.mean", "ValueError", "open", "pickle.load", "val_result.append", "test_result.append"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["def", "get_avg", "(", "dataset", ",", "algo", ",", "arm_type", ")", ":", "\n", "    ", "val_result", ",", "test_result", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "_id", "in", "range", "(", "rep", ")", ":", "\n", "        ", "data_path", "=", "data_dir", "+", "'%s-%s-%s-%d-%d.pkl'", "%", "(", "arm_type", ",", "dataset", ",", "algo", ",", "iter_num", ",", "_id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "            ", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "val_result", ".", "append", "(", "data", "[", "0", "]", ")", "\n", "test_result", ".", "append", "(", "data", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s - does not exist!'", "%", "data_path", ")", "\n", "\n", "", "", "val_result", ",", "test_result", "=", "np", ".", "mean", "(", "val_result", ",", "axis", "=", "0", ")", ",", "np", ".", "mean", "(", "test_result", ",", "axis", "=", "0", ")", "\n", "return", "val_result", ",", "test_result", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_autosklearn_ens.load_hmab_time_costs": [[32, 42], ["list", "range", "len", "open", "list.append", "pickle.load"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["def", "load_hmab_time_costs", "(", "start_id", ",", "rep", ",", "dataset", ",", "n_algo", ",", "trial_num", ")", ":", "\n", "    ", "task_id", "=", "'%s-hmab-%d-%d'", "%", "(", "dataset", ",", "n_algo", ",", "trial_num", ")", "\n", "time_costs", "=", "list", "(", ")", "\n", "for", "run_id", "in", "range", "(", "start_id", ",", "start_id", "+", "rep", ")", ":", "\n", "        ", "save_path", "=", "save_dir", "+", "'%s-%d.pkl'", "%", "(", "task_id", ",", "run_id", ")", "\n", "with", "open", "(", "save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "time_cost", "=", "pickle", ".", "load", "(", "f", ")", "[", "2", "]", "[", "0", "]", "\n", "time_costs", ".", "append", "(", "time_cost", ")", "\n", "", "", "assert", "len", "(", "time_costs", ")", "==", "rep", "\n", "return", "time_costs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.exps.evaluate_autosklearn_ens.evaluate_autosklearn": [[44, 96], ["print", "autosklearn.classification.AutoSklearnClassifier", "print", "mindware.datasets.utils.load_train_test_data", "autosklearn.classification.AutoSklearnClassifier.fit", "autosklearn.classification.AutoSklearnClassifier.show_models", "autosklearn.classification.AutoSklearnClassifier.sprint_statistics", "numpy.max", "autosklearn.classification.AutoSklearnClassifier.predict", "sklearn.metrics.accuracy_score", "print", "print", "print", "print", "X.copy", "y.copy", "open", "pickle.dump", "len", "len", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "evaluate_autosklearn", "(", "algorithms", ",", "rep_id", ",", "trial_num", "=", "100", ",", "dataset", "=", "'credit'", ",", "\n", "time_limit", "=", "1200", ",", "seed", "=", "1", ",", "ensemble_enable", "=", "True", ")", ":", "\n", "    ", "print", "(", "'%s\\nDataset: %s, Run_id: %d, Budget: %d.\\n%s'", "%", "(", "'='", "*", "50", ",", "dataset", ",", "rep_id", ",", "time_limit", ",", "'='", "*", "50", ")", ")", "\n", "mth_id", "=", "'ausk-ens'", "if", "ensemble_enable", "else", "'ausk'", "\n", "task_id", "=", "'%s-%s-%d-%d'", "%", "(", "dataset", ",", "mth_id", ",", "len", "(", "algorithms", ")", ",", "trial_num", ")", "\n", "include_models", "=", "algorithms", "\n", "if", "ensemble_enable", ":", "\n", "        ", "ensemble_size", "=", "50", "\n", "ensem_nbest", "=", "len", "(", "algorithms", ")", "*", "20", "\n", "", "else", ":", "\n", "        ", "ensemble_size", "=", "1", "\n", "ensem_nbest", "=", "1", "\n", "\n", "", "automl", "=", "autosklearn", ".", "classification", ".", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "include_models", ",", "\n", "ensemble_memory_limit", "=", "12288", ",", "\n", "ml_memory_limit", "=", "12288", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "ensemble_nbest", "=", "ensem_nbest", ",", "\n", "initial_configurations_via_metalearning", "=", "0", ",", "\n", "seed", "=", "seed", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.8", "}", "\n", ")", "\n", "print", "(", "automl", ")", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ")", "\n", "X", ",", "y", "=", "raw_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_raw_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "raw_data", ".", "feature_types", "]", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "test_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "time_records", "=", "automl", ".", "cv_results_", "[", "'mean_fit_time'", "]", "\n", "validation_accuracy", "=", "np", ".", "max", "(", "test_results", ")", "\n", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_accuracy", "=", "accuracy_score", "(", "y_test", ",", "predictions", ")", "\n", "# Print statistics about the auto-sklearn run such as number of", "\n", "# iterations, number of models failed with a time out.", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "model_desc", ")", "\n", "print", "(", "'Validation Accuracy'", ",", "validation_accuracy", ")", "\n", "print", "(", "\"Test Accuracy\"", ",", "test_accuracy", ")", "\n", "\n", "save_path", "=", "save_dir", "+", "'%s-%d.pkl'", "%", "(", "task_id", ",", "rep_id", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "stats", "=", "[", "model_desc", ",", "str_stats", ",", "test_results", ",", "time_records", ",", "time_limit", "]", "\n", "pickle", ".", "dump", "(", "[", "validation_accuracy", ",", "test_accuracy", ",", "stats", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.basics.evaluate_sklearn_transform.train_valid_split": [[18, 27], ["sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.StratifiedShuffleSplit.split", "mindware.components.feature_engineering.transformation_graph.DataNode", "mindware.components.feature_engineering.transformation_graph.DataNode", "node.copy_", "node.feature_types.copy", "node.feature_types.copy"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["def", "train_valid_split", "(", "node", ":", "DataNode", ")", ":", "\n", "    ", "X", ",", "y", "=", "node", ".", "copy_", "(", ")", ".", "data", "\n", "sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "0.2", ",", "random_state", "=", "1", ")", "\n", "for", "train_index", ",", "test_index", "in", "sss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "        ", "X_train", ",", "X_val", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_index", "]", "\n", "y_train", ",", "y_val", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "", "train_data", "=", "DataNode", "(", "data", "=", "[", "X_train", ",", "y_train", "]", ",", "feature_type", "=", "node", ".", "feature_types", ".", "copy", "(", ")", ")", "\n", "valid_data", "=", "DataNode", "(", "data", "=", "[", "X_val", ",", "y_val", "]", ",", "feature_type", "=", "node", ".", "feature_types", ".", "copy", "(", ")", ")", "\n", "return", "train_data", ",", "valid_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.basics.evaluate_sklearn_transform.train_valid_split_X": [[29, 35], ["sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.StratifiedShuffleSplit.split"], "function", ["None"], ["", "def", "train_valid_split_X", "(", "X", ",", "y", ")", ":", "\n", "    ", "sss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "0.2", ",", "random_state", "=", "1", ")", "\n", "for", "train_index", ",", "test_index", "in", "sss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "        ", "X_train", ",", "X_val", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_index", "]", "\n", "y_train", ",", "y_val", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "", "return", "X_train", ",", "X_val", ",", "y_train", ",", "y_val", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.drawings.draw_fe_share.plot": [[20, 30], ["print", "print", "print", "print", "print", "open", "pickle.load", "numpy.max"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["def", "plot", "(", "mode", ",", "dataset", ",", "algo_num", ",", "trial_num", ",", "seed", ")", ":", "\n", "    ", "save_path", "=", "project_dir", "+", "'data/shared_hmab_%d_%s_%d_%d_%d.pkl'", "%", "(", "\n", "mode", ",", "dataset", ",", "trial_num", ",", "algo_num", ",", "seed", ")", "\n", "with", "open", "(", "save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "result", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Best validation accuracy: %.4f'", "%", "np", ".", "max", "(", "result", "[", "0", "]", ")", ")", "\n", "print", "(", "'Final Rewards'", ",", "result", "[", "0", "]", ")", "\n", "print", "(", "'Time records'", ",", "result", "[", "1", "]", ")", "\n", "print", "(", "'Action Sequence'", ",", "result", "[", "2", "]", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.drawings.draw_hmab.plot": [[23, 37], ["print", "print", "print", "print", "print", "open", "pickle.load", "numpy.max"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["def", "plot", "(", "mth", ",", "dataset", ",", "algo_num", ",", "trial_num", ",", "seed", ")", ":", "\n", "    ", "if", "mth", "==", "'ours'", ":", "\n", "        ", "save_path", "=", "project_dir", "+", "'data/hmab_%s_%d_%d_%d.pkl'", "%", "(", "dataset", ",", "trial_num", ",", "algo_num", ",", "seed", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "project_dir", "+", "'data/ausk_%s_%d.pkl'", "%", "(", "dataset", ",", "algo_num", ")", "\n", "\n", "", "with", "open", "(", "save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "result", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'Best validation accuracy: %.4f'", "%", "np", ".", "max", "(", "result", "[", "0", "]", ")", ")", "\n", "print", "(", "'Final Rewards'", ",", "result", "[", "0", "]", ")", "\n", "print", "(", "'Time records'", ",", "result", "[", "1", "]", ")", "\n", "print", "(", "'Action Sequence'", ",", "result", "[", "2", "]", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.parallelization.resource_recycle.evaluate_func": [[10, 18], ["range", "range"], "function", ["None"], ["def", "evaluate_func", "(", "a", "=", "None", ",", "data_node", "=", "None", ",", "name", "=", "'fe'", ",", "resource_ratio", "=", "0.1", ")", ":", "\n", "    ", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "100000000", ")", ":", "\n", "        ", "cnt", "+=", "129", "\n", "cnt", "%=", "123200", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "cnt", "+=", "3", "\n", "", "", "return", "2", "*", "data_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.na_selection.baseline.get_model_config_space": [[22, 34], ["clf_class.get_hyperparameter_search_space", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "clf_class.get_hyperparameter_search_space.add_hyperparameter", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space", "clf_class.get_hyperparameter_search_space.add_hyperparameters", "clf_class.get_hyperparameter_search_space.add_conditions", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space.get_hyperparameters", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space.get_conditions"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space"], ["def", "get_model_config_space", "(", "estimator_id", ",", "include_estimator", "=", "True", ",", "include_aug", "=", "True", ")", ":", "\n", "    ", "from", "mindware", ".", "components", ".", "models", ".", "img_classification", "import", "_classifiers", "as", "_img_estimators", ",", "_addons", "as", "_img_addons", "\n", "clf_class", "=", "_img_estimators", "[", "estimator_id", "]", "\n", "default_cs", "=", "clf_class", ".", "get_hyperparameter_search_space", "(", ")", "\n", "model", "=", "UnParametrizedHyperparameter", "(", "\"estimator\"", ",", "estimator_id", ")", "\n", "if", "include_estimator", ":", "\n", "        ", "default_cs", ".", "add_hyperparameter", "(", "model", ")", "\n", "", "if", "include_aug", "is", "True", ":", "\n", "        ", "aug_space", "=", "get_aug_hyperparameter_space", "(", ")", "\n", "default_cs", ".", "add_hyperparameters", "(", "aug_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "default_cs", ".", "add_conditions", "(", "aug_space", ".", "get_conditions", "(", ")", ")", "\n", "", "return", "default_cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.na_selection.baseline.get_pipeline_config_space": [[36, 53], ["ConfigSpace.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space", "ConfigSpace.ConfigurationSpace.add_hyperparameters", "ConfigSpace.ConfigurationSpace.add_conditions", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space.get_hyperparameters", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space.get_conditions", "baseline.get_model_config_space", "ConfigSpace.ConfigurationSpace.add_configuration_space"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.get_model_config_space"], ["", "def", "get_pipeline_config_space", "(", "algorithm_candidates", ")", ":", "\n", "    ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "estimator_choice", "=", "CategoricalHyperparameter", "(", "\"estimator\"", ",", "algorithm_candidates", ",", "\n", "default_value", "=", "algorithm_candidates", "[", "0", "]", ")", "\n", "cs", ".", "add_hyperparameter", "(", "estimator_choice", ")", "\n", "aug_space", "=", "get_aug_hyperparameter_space", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "aug_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "cs", ".", "add_conditions", "(", "aug_space", ".", "get_conditions", "(", ")", ")", "\n", "\n", "for", "estimator_id", "in", "algorithm_candidates", ":", "\n", "        ", "sub_cs", "=", "get_model_config_space", "(", "estimator_id", ",", "include_estimator", "=", "False", ",", "include_aug", "=", "False", ")", "\n", "parent_hyperparameter", "=", "{", "'parent'", ":", "estimator_choice", ",", "\n", "'value'", ":", "estimator_id", "}", "\n", "cs", ".", "add_configuration_space", "(", "estimator_id", ",", "sub_cs", ",", "\n", "parent_hyperparameter", "=", "parent_hyperparameter", ")", "\n", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.examples.cls_exp_user_defined_model.UserDefinedDecisionTree.__init__": [[31, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "criterion", ",", "max_features", ",", "max_depth_factor", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "min_weight_fraction_leaf", ",", "\n", "max_leaf_nodes", ",", "min_impurity_decrease", ",", "class_weight", "=", "None", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_depth_factor", "=", "max_depth_factor", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.examples.cls_exp_user_defined_model.UserDefinedDecisionTree.fit": [[48, 82], ["float", "mindware.components.utils.configspace_utils.check_none", "int", "int", "mindware.components.utils.configspace_utils.check_none", "float", "float", "DecisionTreeClassifier", "cls_exp_user_defined_model.UserDefinedDecisionTree.estimator.fit", "int", "max", "int", "int", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "tree", "import", "DecisionTreeClassifier", "\n", "\n", "self", ".", "max_features", "=", "float", "(", "self", ".", "max_features", ")", "\n", "# Heuristic to set the tree depth", "\n", "if", "check_none", "(", "self", ".", "max_depth_factor", ")", ":", "\n", "            ", "max_depth_factor", "=", "self", ".", "max_depth_factor", "=", "None", "\n", "", "else", ":", "\n", "            ", "num_features", "=", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "max_depth_factor", "=", "int", "(", "self", ".", "max_depth_factor", ")", "\n", "max_depth_factor", "=", "max", "(", "\n", "1", ",", "\n", "int", "(", "np", ".", "round", "(", "self", ".", "max_depth_factor", "*", "num_features", ",", "0", ")", ")", ")", "\n", "", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "\n", "self", ".", "estimator", "=", "DecisionTreeClassifier", "(", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_depth", "=", "max_depth_factor", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.examples.cls_exp_user_defined_model.UserDefinedDecisionTree.predict": [[83, 87], ["cls_exp_user_defined_model.UserDefinedDecisionTree.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.examples.cls_exp_user_defined_model.UserDefinedDecisionTree.predict_proba": [[88, 93], ["cls_exp_user_defined_model.UserDefinedDecisionTree.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "probas", "=", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.examples.cls_exp_user_defined_model.UserDefinedDecisionTree.get_properties": [[94, 105], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'DT'", ",", "\n", "'name'", ":", "'Decision Tree Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.examples.cls_exp_user_defined_model.UserDefinedDecisionTree.get_hyperparameter_search_space": [[106, 128], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"gini\"", ",", "\"entropy\"", "]", ",", "default_value", "=", "\"gini\"", ")", "\n", "max_depth_factor", "=", "UniformFloatHyperparameter", "(", "\n", "'max_depth_factor'", ",", "0.", ",", "2.", ",", "default_value", "=", "0.5", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "Constant", "(", "\"min_weight_fraction_leaf\"", ",", "0.0", ")", "\n", "max_features", "=", "UnParametrizedHyperparameter", "(", "'max_features'", ",", "1.0", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "criterion", ",", "max_features", ",", "max_depth_factor", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "]", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_blending.test_cls": [[11, 42], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'blending'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_blending.test_rgs": [[44, 75], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'blending'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ")", "\n", "\n", "rgs", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_stacking.test_cls": [[11, 42], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'stacking'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "4", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_stacking.test_rgs": [[44, 76], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'stacking'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "4", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ")", "\n", "\n", "rgs", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_workers.test_cls": [[11, 43], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ",", "\n", "n_jobs", "=", "2", ")", "\n", "clf", ".", "fit", "(", "train_data", ",", "tree_id", "=", "2", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_workers.test_rgs": [[45, 77], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "n_jobs", "=", "2", ")", "\n", "\n", "rgs", ".", "fit", "(", "train_data", ",", "tree_id", "=", "2", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.UserDefinedDecisionTree.__init__": [[22, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "criterion", ",", "max_features", ",", "max_depth_factor", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "min_weight_fraction_leaf", ",", "\n", "max_leaf_nodes", ",", "min_impurity_decrease", ",", "class_weight", "=", "None", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_depth_factor", "=", "max_depth_factor", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.UserDefinedDecisionTree.fit": [[39, 73], ["float", "mindware.components.utils.configspace_utils.check_none", "int", "int", "mindware.components.utils.configspace_utils.check_none", "float", "float", "DecisionTreeClassifier", "example_user_defined_cls.UserDefinedDecisionTree.estimator.fit", "int", "max", "int", "int", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "tree", "import", "DecisionTreeClassifier", "\n", "\n", "self", ".", "max_features", "=", "float", "(", "self", ".", "max_features", ")", "\n", "# Heuristic to set the tree depth", "\n", "if", "check_none", "(", "self", ".", "max_depth_factor", ")", ":", "\n", "            ", "max_depth_factor", "=", "self", ".", "max_depth_factor", "=", "None", "\n", "", "else", ":", "\n", "            ", "num_features", "=", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "max_depth_factor", "=", "int", "(", "self", ".", "max_depth_factor", ")", "\n", "max_depth_factor", "=", "max", "(", "\n", "1", ",", "\n", "int", "(", "np", ".", "round", "(", "self", ".", "max_depth_factor", "*", "num_features", ",", "0", ")", ")", ")", "\n", "", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "\n", "self", ".", "estimator", "=", "DecisionTreeClassifier", "(", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_depth", "=", "max_depth_factor", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.UserDefinedDecisionTree.predict": [[74, 78], ["example_user_defined_cls.UserDefinedDecisionTree.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.UserDefinedDecisionTree.predict_proba": [[79, 84], ["example_user_defined_cls.UserDefinedDecisionTree.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "probas", "=", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.UserDefinedDecisionTree.get_properties": [[85, 96], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'DT'", ",", "\n", "'name'", ":", "'Decision Tree Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.UserDefinedDecisionTree.get_hyperparameter_search_space": [[97, 119], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"gini\"", ",", "\"entropy\"", "]", ",", "default_value", "=", "\"gini\"", ")", "\n", "max_depth_factor", "=", "UniformFloatHyperparameter", "(", "\n", "'max_depth_factor'", ",", "0.", ",", "2.", ",", "default_value", "=", "0.5", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "Constant", "(", "\"min_weight_fraction_leaf\"", ",", "0.0", ")", "\n", "max_features", "=", "UnParametrizedHyperparameter", "(", "'max_features'", ",", "1.0", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "criterion", ",", "max_features", ",", "max_depth_factor", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "]", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_user_defined_cls.main": [[121, 152], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.components.models.classification.add_classifier", "mindware.estimators.Classifier", "time.time", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.__init__.add_classifier", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "add_classifier", "(", "UserDefinedDecisionTree", ")", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "include_algorithms", "=", "[", "'UserDefinedDecisionTree'", "]", ",", "\n", "ensemble_method", "=", "None", ",", "\n", "metric", "=", "'acc'", ")", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_es.test_cls": [[14, 45], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_es.test_rgs": [[47, 78], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ")", "\n", "\n", "rgs", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_meta.test_cls": [[11, 42], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "True", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'bal_acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_meta.test_rgs": [[44, 75], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "True", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ")", "\n", "\n", "rgs", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_execution_plan.test_cls": [[11, 44], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "optimizer", "=", "'random_search'", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ",", "\n", "n_jobs", "=", "1", ")", "\n", "clf", ".", "fit", "(", "train_data", ",", "tree_id", "=", "2", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_cv.test_cls": [[11, 43], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.refit", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'cv'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "include_algorithms", "=", "[", "'random_forest'", "]", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "clf", ".", "refit", "(", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_cv.test_cls_without_ensemble": [[45, 77], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.refit", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_cls_without_ensemble", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "None", "\n", "eval_type", "=", "'cv'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "include_algorithms", "=", "[", "'random_forest'", "]", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "clf", ".", "refit", "(", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_cv.test_rgs": [[79, 110], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.refit", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "120", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'cv'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ")", "\n", "rgs", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "rgs", ".", "refit", "(", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_bagging.test_cls": [[11, 44], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'bagging'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "optimizer", "=", "'tpe'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ",", "\n", "n_jobs", "=", "1", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_bagging.test_rgs": [[46, 77], ["print", "sklearn.datasets.load_boston", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Regressor", "mindware.estimators.Regressor.fit", "print", "mindware.estimators.Regressor.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Regressor.summary", "sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "test_rgs", "(", ")", ":", "\n", "    ", "time_limit", "=", "60", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'bagging'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "boston", "=", "load_boston", "(", ")", "\n", "X", ",", "y", "=", "boston", ".", "data", ",", "boston", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "rgs", "=", "Regressor", "(", "metric", "=", "'mse'", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ")", "\n", "\n", "rgs", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "rgs", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "rgs", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "mean_squared_error", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ci_examples.example_partial.test_cls": [[11, 42], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "test_cls", "(", ")", ":", "\n", "    ", "save_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "time_limit", "=", "120", "\n", "print", "(", "'==> Start to evaluate with Budget %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'partial'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.automl_estimators.evaluate_cls_estimators.evaluate": [[26, 48], ["sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "mindware.estimators.Classifier.refit", "mindware.estimators.Classifier.predict", "print", "mindware.estimators.Classifier.score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.score"], ["", "def", "evaluate", "(", ")", ":", "\n", "    ", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ")", "\n", "try", ":", "\n", "        ", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "dataset_name", "=", "'iris'", ",", "\n", "time_limit", "=", "150", ",", "\n", "output_dir", "=", "save_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ")", "\n", "clf", ".", "fit", "(", "train_data", ")", "\n", "clf", ".", "refit", "(", ")", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "'final score'", ",", "clf", ".", "score", "(", "test_data", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.zh_CN.conf.setup": [[86, 95], ["app.add_config_value", "app.add_transform"], "function", ["None"], ["def", "setup", "(", "app", ")", ":", "\n", "    ", "app", ".", "add_config_value", "(", "'recommonmark_config'", ",", "{", "\n", "'url_resolver'", ":", "lambda", "url", ":", "github_doc_root", "+", "url", ",", "\n", "'auto_toc_tree_section'", ":", "'Contents'", ",", "\n", "'enable_math'", ":", "False", ",", "\n", "'enable_inline_math'", ":", "False", ",", "\n", "'enable_eval_rst'", ":", "True", "\n", "}", ",", "True", ")", "\n", "app", ".", "add_transform", "(", "AutoStructify", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.en.conf.setup": [[86, 95], ["app.add_config_value", "app.add_transform"], "function", ["None"], ["def", "setup", "(", "app", ")", ":", "\n", "    ", "app", ".", "add_config_value", "(", "'recommonmark_config'", ",", "{", "\n", "'url_resolver'", ":", "lambda", "url", ":", "github_doc_root", "+", "url", ",", "\n", "'auto_toc_tree_section'", ":", "'Contents'", ",", "\n", "'enable_math'", ":", "False", ",", "\n", "'enable_inline_math'", ":", "False", ",", "\n", "'enable_eval_rst'", ":", "True", "\n", "}", ",", "True", ")", "\n", "app", ".", "add_transform", "(", "AutoStructify", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.scripts.create_algorithm_meta_info.evaluate_ml_algorithm": [[38, 96], ["print", "mindware.datasets.utils.load_train_test_data", "print", "mindware.datasets.utils.load_train_test_data", "autosklearn.classification.AutoSklearnClassifier", "autosklearn.classification.AutoSklearnClassifier.fit", "autosklearn.classification.AutoSklearnClassifier.show_models", "autosklearn.classification.AutoSklearnClassifier.sprint_statistics", "print", "numpy.max", "autosklearn.classification.AutoSklearnClassifier.refit", "autosklearn.classification.AutoSklearnClassifier.predict", "sklearn.metrics.balanced_accuracy_score", "print", "print", "print", "print", "autosklearn.pipeline.components.classification.add_classifier", "set", "X.copy", "y.copy", "X.copy", "y.copy", "open", "pickle.dump", "autosklearn.pipeline.components.classification.add_classifier", "int", "int", "len", "len", "set"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.__init__.add_classifier", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.__init__.add_classifier"], ["def", "evaluate_ml_algorithm", "(", "dataset", ",", "algo", ",", "run_id", ",", "obj_metric", ",", "time_limit", "=", "600", ",", "seed", "=", "1", ",", "task_type", "=", "None", ")", ":", "\n", "    ", "if", "algo", "==", "'lightgbm'", ":", "\n", "        ", "_algo", "=", "[", "'LightGBM'", "]", "\n", "add_classifier", "(", "LightGBM", ")", "\n", "", "elif", "algo", "==", "'logistic_regression'", ":", "\n", "        ", "_algo", "=", "[", "'Logistic_Regression'", "]", "\n", "add_classifier", "(", "Logistic_Regression", ")", "\n", "", "else", ":", "\n", "        ", "_algo", "=", "[", "algo", "]", "\n", "", "print", "(", "'EVALUATE-%s-%s-%s: run_id=%d'", "%", "(", "dataset", ",", "algo", ",", "obj_metric", ",", "run_id", ")", ")", "\n", "train_data", ",", "test_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "task_type", ")", "\n", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "        ", "task_type", "=", "BINARY_CLS", "if", "len", "(", "set", "(", "train_data", ".", "data", "[", "1", "]", ")", ")", "==", "2", "else", "MULTICLASS_CLS", "\n", "", "print", "(", "set", "(", "train_data", ".", "data", "[", "1", "]", ")", ")", "\n", "\n", "raw_data", ",", "test_raw_data", "=", "load_train_test_data", "(", "dataset", ",", "task_type", "=", "MULTICLASS_CLS", ")", "\n", "X", ",", "y", "=", "raw_data", ".", "data", "\n", "X_test", ",", "y_test", "=", "test_raw_data", ".", "data", "\n", "feat_type", "=", "[", "'Categorical'", "if", "_type", "==", "CATEGORICAL", "else", "'Numerical'", "\n", "for", "_type", "in", "raw_data", ".", "feature_types", "]", "\n", "from", "autosklearn", ".", "metrics", "import", "balanced_accuracy", "as", "balanced_acc", "\n", "automl", "=", "AutoSklearnClassifier", "(", "\n", "time_left_for_this_task", "=", "int", "(", "time_limit", ")", ",", "\n", "per_run_time_limit", "=", "180", ",", "\n", "n_jobs", "=", "1", ",", "\n", "include_estimators", "=", "_algo", ",", "\n", "initial_configurations_via_metalearning", "=", "0", ",", "\n", "ensemble_memory_limit", "=", "16384", ",", "\n", "ml_memory_limit", "=", "16384", ",", "\n", "# tmp_folder='/var/folders/0t/mjph32q55hd10x3qr_kdd2vw0000gn/T/autosklearn_tmp',", "\n", "ensemble_size", "=", "1", ",", "\n", "seed", "=", "int", "(", "seed", ")", ",", "\n", "resampling_strategy", "=", "'holdout'", ",", "\n", "resampling_strategy_arguments", "=", "{", "'train_size'", ":", "0.67", "}", "\n", ")", "\n", "automl", ".", "fit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ",", "feat_type", "=", "feat_type", ",", "metric", "=", "balanced_acc", ")", "\n", "model_desc", "=", "automl", ".", "show_models", "(", ")", "\n", "str_stats", "=", "automl", ".", "sprint_statistics", "(", ")", "\n", "valid_results", "=", "automl", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "print", "(", "'Eval num: %d'", "%", "(", "len", "(", "valid_results", ")", ")", ")", "\n", "\n", "validation_score", "=", "np", ".", "max", "(", "valid_results", ")", "\n", "\n", "# Test performance.", "\n", "automl", ".", "refit", "(", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", ")", "\n", "predictions", "=", "automl", ".", "predict", "(", "X_test", ")", "\n", "test_score", "=", "balanced_accuracy_score", "(", "y_test", ",", "predictions", ")", "\n", "\n", "# Print statistics about the auto-sklearn run such as number of", "\n", "# iterations, number of models failed with a time out.", "\n", "print", "(", "str_stats", ")", "\n", "print", "(", "model_desc", ")", "\n", "print", "(", "'Validation Accuracy:'", ",", "validation_score", ")", "\n", "print", "(", "\"Test Accuracy      :\"", ",", "test_score", ")", "\n", "\n", "save_path", "=", "save_dir", "+", "'%s-%s-%s-%d-%d.pkl'", "%", "(", "dataset", ",", "algo", ",", "obj_metric", ",", "run_id", ",", "time_limit", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "[", "dataset", ",", "algo", ",", "validation_score", ",", "test_score", ",", "task_type", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.scripts.create_algorithm_meta_info.check_datasets": [[98, 104], ["mindware.datasets.utils.load_train_test_data", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data"], ["", "", "def", "check_datasets", "(", "datasets", ",", "task_type", "=", "None", ")", ":", "\n", "    ", "for", "_dataset", "in", "datasets", ":", "\n", "        ", "try", ":", "\n", "            ", "_", ",", "_", "=", "load_train_test_data", "(", "_dataset", ",", "random_state", "=", "1", ",", "task_type", "=", "task_type", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset - %s does not exist!'", "%", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.scripts.utils.rename": [[15, 27], ["_filename.startswith", "print", "re.search", "os.rename", "print", "re.search.group", "re.search.group", "re.search.group", "re.search.group", "int"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.scripts.utils.rename"], ["def", "rename", "(", ")", ":", "\n", "    ", "for", "_filename", "in", "filename_list", ":", "\n", "        ", "used_name", "=", "data_folder", "+", "_filename", "\n", "if", "_filename", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "_filename", ")", "\n", "result", "=", "re", ".", "search", "(", "pattern", ",", "_filename", ",", "re", ".", "I", ")", "\n", "dataset", ",", "algo", ",", "run_id", ",", "seed", "=", "result", ".", "group", "(", "1", ")", ",", "result", ".", "group", "(", "2", ")", ",", "result", ".", "group", "(", "3", ")", ",", "result", ".", "group", "(", "4", ")", "\n", "new_name", "=", "data_folder", "+", "\"%s-%s-%s-%d-%d.pkl\"", "%", "(", "dataset", ",", "algo", ",", "'acc'", ",", "int", "(", "run_id", ")", ",", "20", ")", "\n", "os", ".", "rename", "(", "used_name", ",", "new_name", ")", "\n", "print", "(", "\"used_name: %s,new_name: %s\"", "%", "(", "used_name", ",", "new_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.scripts.utils.rename1": [[29, 44], ["print", "os.rename", "print", "_filename.startswith", "_filename.startswith", "_filename.startswith", "len", "_filename.split", "_filename.split", "_filename.split", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.scripts.utils.rename"], ["", "", "def", "rename1", "(", ")", ":", "\n", "    ", "for", "_filename", "in", "filename_list", ":", "\n", "        ", "if", "_filename", ".", "startswith", "(", "'.'", ")", "or", "_filename", ".", "startswith", "(", "'meta'", ")", "or", "_filename", ".", "startswith", "(", "'ranker'", ")", ":", "\n", "            ", "continue", "\n", "", "used_name", "=", "data_folder", "+", "_filename", "\n", "print", "(", "_filename", ")", "\n", "if", "len", "(", "_filename", ".", "split", "(", "'-'", ")", ")", ">", "5", ":", "\n", "            ", "splits", "=", "_filename", ".", "split", "(", "'-'", ")", "\n", "dataset", "=", "'-'", ".", "join", "(", "splits", "[", ":", "len", "(", "splits", ")", "-", "4", "]", ")", "\n", "algo", ",", "metric", ",", "run_id", ",", "resource", "=", "splits", "[", "len", "(", "splits", ")", "-", "4", ":", "]", "\n", "", "else", ":", "\n", "            ", "dataset", ",", "algo", ",", "metric", ",", "run_id", ",", "resource", "=", "_filename", ".", "split", "(", "'-'", ")", "\n", "", "new_name", "=", "data_folder", "+", "\"%s-%s-%s-%d-%d.pkl\"", "%", "(", "dataset", ",", "algo", ",", "'bal_acc'", ",", "int", "(", "run_id", ")", ",", "20", ")", "\n", "os", ".", "rename", "(", "used_name", ",", "new_name", ")", "\n", "print", "(", "\"used_name: %s,new_name: %s\"", "%", "(", "used_name", ",", "new_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.logistic_regression.Logistic_Regression.__init__": [[11, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "penalty", ",", "solver", ",", "tol", ",", "max_iter", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "C", "=", "C", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.logistic_regression.Logistic_Regression.fit": [[21, 36], ["float", "LogisticRegression", "logistic_regression.Logistic_Regression.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "LogisticRegression", "\n", "\n", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "\n", "self", ".", "estimator", "=", "LogisticRegression", "(", "random_state", "=", "self", ".", "random_state", ",", "\n", "solver", "=", "self", ".", "solver", ",", "\n", "penalty", "=", "self", ".", "penalty", ",", "\n", "multi_class", "=", "'ovr'", ",", "\n", "C", "=", "self", ".", "C", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "max_iter", "=", "self", ".", "max_iter", ",", "\n", "n_jobs", "=", "1", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.logistic_regression.Logistic_Regression.predict": [[37, 41], ["logistic_regression.Logistic_Regression.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.logistic_regression.Logistic_Regression.predict_proba": [[42, 46], ["logistic_regression.Logistic_Regression.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.logistic_regression.Logistic_Regression.get_properties": [[47, 58], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Logistic-Regression'", ",", "\n", "'name'", ":", "'Logistic Regression Classification'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.logistic_regression.Logistic_Regression.get_hyperparameter_search_space": [[59, 76], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "C", "=", "UniformFloatHyperparameter", "(", "\"C\"", ",", "0.03125", ",", "10", ",", "log", "=", "True", ",", "\n", "default_value", "=", "1.0", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-6", ",", "1e-2", ",", "default_value", "=", "1e-4", ",", "\n", "log", "=", "True", ")", "\n", "\n", "max_iter", "=", "UnParametrizedHyperparameter", "(", "\"max_iter\"", ",", "3000", ")", "\n", "\n", "penalty", "=", "CategoricalHyperparameter", "(", "name", "=", "\"penalty\"", ",", "\n", "choices", "=", "[", "\"l1\"", ",", "\"l2\"", "]", ",", "\n", "default_value", "=", "\"l2\"", ")", "\n", "solver", "=", "CategoricalHyperparameter", "(", "name", "=", "\"solver\"", ",", "choices", "=", "[", "\"liblinear\"", ",", "\"saga\"", "]", ",", "default_value", "=", "\"liblinear\"", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "C", ",", "penalty", ",", "solver", ",", "tol", ",", "max_iter", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.lightgbm.LightGBM.__init__": [[14, 27], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "learning_rate", ",", "num_leaves", ",", "max_depth", ",", "min_child_samples", ",", "\n", "subsample", ",", "colsample_bytree", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "int", "(", "n_estimators", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "num_leaves", "=", "num_leaves", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "subsample", "=", "subsample", "\n", "self", ".", "min_child_samples", "=", "min_child_samples", "\n", "self", ".", "colsample_bytree", "=", "colsample_bytree", "\n", "\n", "self", ".", "n_jobs", "=", "1", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.lightgbm.LightGBM.fit": [[28, 39], ["lightgbm.LGBMClassifier", "lightgbm.LightGBM.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "self", ".", "estimator", "=", "LGBMClassifier", "(", "num_leaves", "=", "self", ".", "num_leaves", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "min_child_samples", "=", "self", ".", "min_child_samples", ",", "\n", "subsample", "=", "self", ".", "subsample", ",", "\n", "colsample_bytree", "=", "self", ".", "colsample_bytree", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.lightgbm.LightGBM.predict": [[40, 44], ["lightgbm.LightGBM.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.lightgbm.LightGBM.predict_proba": [[45, 49], ["lightgbm.LightGBM.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.lightgbm.LightGBM.get_properties": [[50, 61], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'LightGBM Classifier'", ",", "\n", "'name'", ":", "'LightGBM Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "False", ",", "\n", "'input'", ":", "(", "SPARSE", ",", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ausk_udf_models.lightgbm.LightGBM.get_hyperparameter_search_space": [[62, 75], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformFloatHyperparameter", "(", "\"n_estimators\"", ",", "100", ",", "1000", ",", "default_value", "=", "500", ",", "q", "=", "50", ")", "\n", "num_leaves", "=", "UniformIntegerHyperparameter", "(", "\"num_leaves\"", ",", "31", ",", "2047", ",", "default_value", "=", "128", ")", "\n", "max_depth", "=", "Constant", "(", "'max_depth'", ",", "15", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\"learning_rate\"", ",", "1e-3", ",", "0.3", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "min_child_samples", "=", "UniformIntegerHyperparameter", "(", "\"min_child_samples\"", ",", "5", ",", "30", ",", "default_value", "=", "20", ")", "\n", "subsample", "=", "UniformFloatHyperparameter", "(", "\"subsample\"", ",", "0.7", ",", "1", ",", "default_value", "=", "1", ",", "q", "=", "0.1", ")", "\n", "colsample_bytree", "=", "UniformFloatHyperparameter", "(", "\"colsample_bytree\"", ",", "0.7", ",", "1", ",", "default_value", "=", "1", ",", "q", "=", "0.1", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "num_leaves", ",", "max_depth", ",", "learning_rate", ",", "min_child_samples", ",", "subsample", ",", "\n", "colsample_bytree", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.__init__": [[14, 61], ["os.path.join", "os.path.exists", "os.makedirs", "time.time", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset_name", "=", "'default_name'", ",", "\n", "time_limit", "=", "300", ",", "\n", "amount_of_resource", "=", "None", ",", "\n", "metric", "=", "'acc'", ",", "\n", "include_algorithms", "=", "None", ",", "\n", "include_preprocessors", "=", "None", ",", "\n", "enable_meta_algorithm_selection", "=", "True", ",", "\n", "enable_fe", "=", "True", ",", "\n", "optimizer", "=", "'smac'", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "ensemble_size", "=", "50", ",", "\n", "per_run_time_limit", "=", "150", ",", "\n", "random_state", "=", "1", ",", "\n", "n_jobs", "=", "1", ",", "\n", "evaluation", "=", "'holdout'", ",", "\n", "resampling_params", "=", "None", ",", "\n", "output_dir", "=", "\"/tmp/\"", ",", "\n", "delete_output_dir_after_fit", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "task_type", "=", "None", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "amount_of_resource", "=", "amount_of_resource", "\n", "self", ".", "include_algorithms", "=", "include_algorithms", "\n", "self", ".", "include_preprocessors", "=", "include_preprocessors", "\n", "self", ".", "enable_meta_algorithm_selection", "=", "enable_meta_algorithm_selection", "\n", "self", ".", "enable_fe", "=", "enable_fe", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "ensemble_method", "=", "ensemble_method", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "evaluation", "=", "evaluation", "\n", "self", ".", "resampling_params", "=", "resampling_params", "\n", "self", ".", "_ml_engine", "=", "None", "\n", "# Create output directory.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "output_dir_postfix", "=", "\"mindware-%s\"", "%", "time", ".", "time", "(", ")", "\n", "self", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output_dir_postfix", ")", "\n", "# Create output directory.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "", "self", ".", "delete_output_dir", "=", "delete_output_dir_after_fit", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_output_dir": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_output_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.build_engine": [[65, 88], ["base_estimator.BaseEstimator.get_automl"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_automl"], ["", "def", "build_engine", "(", "self", ")", ":", "\n", "        ", "\"\"\"Build AutoML controller\"\"\"", "\n", "engine", "=", "self", ".", "get_automl", "(", ")", "(", "\n", "dataset_name", "=", "self", ".", "dataset_name", ",", "\n", "task_type", "=", "self", ".", "task_type", ",", "\n", "metric", "=", "self", ".", "metric", ",", "\n", "time_limit", "=", "self", ".", "time_limit", ",", "\n", "amount_of_resource", "=", "self", ".", "amount_of_resource", ",", "\n", "include_algorithms", "=", "self", ".", "include_algorithms", ",", "\n", "include_preprocessors", "=", "self", ".", "include_preprocessors", ",", "\n", "enable_meta_algorithm_selection", "=", "self", ".", "enable_meta_algorithm_selection", ",", "\n", "enable_fe", "=", "self", ".", "enable_fe", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "ensemble_method", "=", "self", ".", "ensemble_method", ",", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "self", ".", "per_run_time_limit", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "evaluation", "=", "self", ".", "evaluation", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ",", "\n", "output_dir", "=", "self", ".", "output_dir", "\n", ")", "\n", "return", "engine", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.initialize": [[89, 93], ["base_estimator.BaseEstimator.build_engine", "base_estimator.BaseEstimator._ml_engine.initialize", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.build_engine", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize"], ["", "def", "initialize", "(", "self", ",", "data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "data", "is", "not", "None", "and", "isinstance", "(", "data", ",", "DataNode", ")", "\n", "self", ".", "_ml_engine", "=", "self", ".", "build_engine", "(", ")", "\n", "self", ".", "_ml_engine", ".", "initialize", "(", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.fit": [[94, 100], ["base_estimator.BaseEstimator._ml_engine.fit", "isinstance", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "data", "is", "not", "None", "and", "isinstance", "(", "data", ",", "DataNode", ")", "\n", "self", ".", "_ml_engine", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "if", "self", ".", "delete_output_dir", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "output_dir", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.predict": [[101, 103], ["base_estimator.BaseEstimator._ml_engine.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ":", "DataNode", ",", "batch_size", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.score": [[104, 106], ["base_estimator.BaseEstimator._ml_engine.score"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.score"], ["", "def", "score", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "score", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.refit": [[107, 109], ["base_estimator.BaseEstimator._ml_engine.refit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit"], ["", "def", "refit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "refit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.predict_proba": [[110, 112], ["base_estimator.BaseEstimator._ml_engine.predict_proba"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ":", "DataNode", ",", "batch_size", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_automl": [[113, 115], ["None"], "methods", ["None"], ["", "def", "get_automl", "(", "self", ")", ":", "\n", "        ", "return", "AutoML", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_evaluator": [[116, 120], ["AttributeError"], "methods", ["None"], ["", "def", "get_evaluator", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_ml_engine", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Please initialize the estimator first!\"", ")", "\n", "", "return", "self", ".", "_ml_engine", ".", "solver", ".", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_config_space": [[121, 125], ["AttributeError"], "methods", ["None"], ["", "def", "get_config_space", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_ml_engine", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Please initialize the estimator first!\"", ")", "\n", "", "return", "self", ".", "_ml_engine", ".", "solver", ".", "joint_cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.show_info": [[126, 128], ["NotImplementedError"], "methods", ["None"], ["", "def", "show_info", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.best_hpo_config": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_hpo_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "best_hpo_config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.best_algo_id": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_algo_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "optimal_algo_id", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.nbest_algo_id": [[137, 140], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nbest_algo_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "nbest_algo_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.best_perf": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_perf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "incumbent_perf", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.best_node": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_node", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "best_data_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.best_fe_config": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_fe_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "best_data_node", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.data_transform": [[153, 155], ["base_estimator.BaseEstimator._ml_engine.solver.fe_optimizer.apply"], "methods", ["None"], ["", "def", "data_transform", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "solver", ".", "fe_optimizer", ".", "apply", "(", "data", ",", "self", ".", "_ml_engine", ".", "solver", ".", "best_data_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.feature_corelation": [[156, 169], ["numpy.zeros", "range", "pandas.DataFrame", "base_estimator.BaseEstimator.data_transformer", "range", "str", "range", "str", "range", "numpy.corrcoef"], "methods", ["None"], ["", "def", "feature_corelation", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "X0", ",", "y0", "=", "data", ".", "data", "\n", "X", ",", "y", "=", "self", ".", "data_transformer", "(", "data", ")", ".", "data", "\n", "i", "=", "X0", ".", "shape", "[", "1", "]", "\n", "j", "=", "X", ".", "shape", "[", "1", "]", "\n", "corre_mat", "=", "np", ".", "zeros", "(", "[", "i", ",", "j", "]", ")", "\n", "for", "it", "in", "range", "(", "i", ")", ":", "\n", "            ", "for", "jt", "in", "range", "(", "j", ")", ":", "\n", "                ", "corre_mat", "[", "it", ",", "jt", "]", "=", "np", ".", "corrcoef", "(", "X0", "[", ":", ",", "it", "]", ",", "X", "[", ":", ",", "jt", "]", ")", "[", "0", ",", "1", "]", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "corre_mat", ")", "\n", "df", ".", "columns", "=", "[", "'origin_feature'", "+", "str", "(", "it", ")", "for", "it", "in", "range", "(", "i", ")", "]", "\n", "df", ".", "index", "=", "[", "'transformed_feature'", "+", "str", "(", "jt", ")", "for", "jt", "in", "range", "(", "j", ")", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.feature_origin": [[170, 208], ["pro_table.append", "pandas.DataFrame", "pro_table.append", "pro_table.append", "pro_table.append", "pro_table.append", "str", "range", "key.find", "key.replace", "str"], "methods", ["None"], ["", "def", "feature_origin", "(", "self", ")", ":", "\n", "        ", "conf", "=", "self", ".", "_ml_engine", ".", "solver", ".", "best_data_node", ".", "config", "\n", "pro_table", "=", "[", "]", "\n", "for", "process", "in", "[", "'preprocessor1'", ",", "'preprocessor2'", ",", "'balancer'", ",", "'rescaler'", ",", "'generator'", ",", "'selector'", "]", ":", "\n", "            ", "if", "(", "conf", "[", "process", "]", "==", "'empty'", ")", ":", "\n", "                ", "pro_hash", "=", "{", "'Processor'", ":", "process", ",", "'Algorithm'", ":", "None", ",", "'File_path'", ":", "None", ",", "'Arguments'", ":", "None", "}", "\n", "pro_table", ".", "append", "(", "pro_hash", ")", "\n", "continue", "\n", "\n", "", "pro_hash", "=", "{", "'Processor'", ":", "process", ",", "'Algorithm'", ":", "conf", "[", "process", "]", "}", "\n", "argstr", "=", "''", "\n", "for", "key", "in", "conf", ":", "\n", "                ", "if", "(", "key", ".", "find", "(", "conf", "[", "process", "]", ")", "!=", "-", "1", ")", ":", "\n", "                    ", "arg", "=", "key", ".", "replace", "(", "conf", "[", "process", "]", "+", "':'", ",", "''", ")", "\n", "argstr", "+=", "(", "arg", "+", "'='", "+", "str", "(", "conf", "[", "key", "]", ")", "+", "'  '", ")", "\n", "", "", "pro_hash", "[", "'Arguments'", "]", "=", "argstr", "\n", "pathstr", "=", "'./mindware/components/feature_engineering/transformations/'", "\n", "if", "(", "process", "==", "'preprocessor1'", ")", ":", "\n", "                ", "pro_hash", "[", "'File_path'", "]", "=", "pathstr", "+", "'continous_discretizer.py'", "\n", "pro_table", ".", "append", "(", "pro_hash", ")", "\n", "continue", "\n", "\n", "", "if", "(", "process", "==", "'preprocessor2'", ")", ":", "\n", "                ", "pro_hash", "[", "'File_path'", "]", "=", "pathstr", "+", "'discrete_categorizer.py'", "\n", "pro_table", ".", "append", "(", "pro_hash", ")", "\n", "continue", "\n", "\n", "", "if", "(", "process", "==", "'balancer'", ")", ":", "\n", "                ", "pro_hash", "[", "'File_path'", "]", "=", "pathstr", "+", "'preprocessor/'", "+", "conf", "[", "process", "]", "+", "'.py'", "\n", "pro_table", ".", "append", "(", "pro_hash", ")", "\n", "continue", "\n", "\n", "", "pro_hash", "[", "'File_path'", "]", "=", "pathstr", "+", "process", "+", "'/'", "+", "conf", "[", "process", "]", "+", "'.py'", "\n", "pro_table", ".", "append", "(", "pro_hash", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "pro_table", ")", "[", "[", "'Processor'", ",", "'Algorithm'", ",", "'File_path'", ",", "'Arguments'", "]", "]", "\n", "df", ".", "index", "=", "[", "'step'", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "1", ",", "7", ")", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_val_stats": [[209, 211], ["base_estimator.BaseEstimator._ml_engine.get_val_stats"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.get_val_stats"], ["", "def", "get_val_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "get_val_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_ens_model_info": [[212, 214], ["base_estimator.BaseEstimator._ml_engine.get_ens_model_info"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_ens_model_info"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "get_ens_model_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.summary": [[215, 217], ["base_estimator.BaseEstimator._ml_engine.summary"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ml_engine", ".", "summary", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.initialize": [[11, 23], ["sklearn.utils.multiclass.type_of_target", "super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize"], ["def", "initialize", "(", "self", ",", "data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "metric", "is", "None", ":", "\n", "            ", "self", ".", "metric", "=", "'acc'", "\n", "\n", "# Check the task type: {binary, multiclass}", "\n", "", "task_type", "=", "type_of_target", "(", "data", ".", "data", "[", "1", "]", ")", "\n", "if", "task_type", "in", "type_dict", ":", "\n", "            ", "task_type", "=", "type_dict", "[", "task_type", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid Task Type: %s!\"", "%", "task_type", ")", "\n", "", "self", ".", "task_type", "=", "task_type", "\n", "super", "(", ")", ".", "initialize", "(", "data", "=", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.fit": [[24, 35], ["super().fit", "estimators.Classifier.initialize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize"], ["", "def", "fit", "(", "self", ",", "data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Fit the classifier to given training data.\n        :param data: instance of DataNode\n        :return: self\n        \"\"\"", "\n", "if", "self", ".", "_ml_engine", "is", "None", ":", "\n", "            ", "self", ".", "initialize", "(", "data", "=", "data", ",", "**", "kwargs", ")", "\n", "", "super", "(", ")", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.predict": [[36, 48], ["super().predict", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ",", "batch_size", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Predict classes for X.\n        :param X: Datanode\n        :param batch_size: int\n        :param n_jobs: int\n        :return: y : array of shape = [n_samples]\n            The predicted classes.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "X", ",", "DataNode", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"X is supposed to be a Data Node, but get %s\"", "%", "type", "(", "X", ")", ")", "\n", "", "return", "super", "(", ")", ".", "predict", "(", "X", ",", "batch_size", "=", "batch_size", ",", "n_jobs", "=", "n_jobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.refit": [[49, 51], ["super().refit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit"], ["", "def", "refit", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "refit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.predict_proba": [[52, 78], ["super().predict_proba", "isinstance", "ValueError", "numpy.allclose", "numpy.sum", "numpy.ones_like", "type"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ",", "batch_size", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Predict probabilities of classes for all samples X.\n        :param X: Datanode\n        :param batch_size: int\n        :param n_jobs: int\n        :return: y : array of shape = [n_samples, n_classes]\n            The predicted class probabilities.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "X", ",", "DataNode", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"X is supposed to be a Data Node, but get %s\"", "%", "type", "(", "X", ")", ")", "\n", "", "pred_proba", "=", "super", "(", ")", ".", "predict_proba", "(", "X", ",", "batch_size", "=", "batch_size", ",", "n_jobs", "=", "n_jobs", ")", "\n", "\n", "if", "self", ".", "task_type", "!=", "MULTILABEL_CLS", ":", "\n", "            ", "assert", "(", "\n", "np", ".", "allclose", "(", "\n", "np", ".", "sum", "(", "pred_proba", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "ones_like", "(", "pred_proba", "[", ":", ",", "0", "]", ")", ")", "\n", ")", ",", "\"Prediction probability does not sum up to 1!\"", "\n", "\n", "# Check that all probability values lie between 0 and 1.", "\n", "", "assert", "(", "\n", "(", "pred_proba", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "pred_proba", "<=", "1", ")", ".", "all", "(", ")", "\n", ")", ",", "\"Found prediction probability value outside of [0, 1]!\"", "\n", "\n", "return", "pred_proba", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.get_tree_importance": [[79, 90], ["LGBMClassifier", "LGBMClassifier.fit", "numpy.array", "pd.DataFrame", "estimators.Classifier.data_transformer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "get_tree_importance", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "from", "lightgbm", "import", "LGBMClassifier", "\n", "import", "pandas", "as", "pd", "\n", "X", ",", "y", "=", "self", ".", "data_transformer", "(", "data", ")", ".", "data", "\n", "lgb", "=", "LGBMClassifier", "(", "random_state", "=", "1", ")", "\n", "lgb", ".", "fit", "(", "X", ",", "y", ")", "\n", "_importance", "=", "lgb", ".", "feature_importances_", "\n", "h", "=", "{", "}", "\n", "h", "[", "'feature_id'", "]", "=", "np", ".", "array", "(", "range", "(", "len", "(", "_importance", ")", ")", ")", "\n", "h", "[", "'feature_importance'", "]", "=", "_importance", "\n", "return", "pd", ".", "DataFrame", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.get_linear_importance": [[91, 106], ["LogisticRegression", "LogisticRegression.fit", "numpy.std", "abs", "numpy.mean", "numpy.array", "pd.DataFrame", "estimators.Classifier.data_transformer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "get_linear_importance", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "LogisticRegression", "\n", "import", "pandas", "as", "pd", "\n", "X", ",", "y", "=", "self", ".", "data_transformer", "(", "data", ")", ".", "data", "\n", "clf", "=", "LogisticRegression", "(", "random_state", "=", "1", ")", "\n", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "_ef", "=", "clf", ".", "coef_", "\n", "std_array", "=", "np", ".", "std", "(", "_ef", ",", "ddof", "=", "1", ",", "axis", "=", "0", ")", "\n", "abs_array", "=", "abs", "(", "_ef", ")", "\n", "mean_array", "=", "np", ".", "mean", "(", "abs_array", ",", "axis", "=", "0", ")", "\n", "_importance", "=", "std_array", "/", "mean_array", "\n", "h", "=", "{", "}", "\n", "h", "[", "'feature_id'", "]", "=", "np", ".", "array", "(", "range", "(", "len", "(", "_importance", ")", ")", ")", "\n", "h", "[", "'feature_importance'", "]", "=", "_importance", "\n", "return", "pd", ".", "DataFrame", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Classifier.get_linear_impact": [[107, 122], ["LogisticRegression", "LogisticRegression.fit", "numpy.array", "pd.DataFrame", "len", "print", "estimators.Classifier.data_transformer", "range", "set", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "get_linear_impact", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "LogisticRegression", "\n", "import", "pandas", "as", "pd", "\n", "if", "(", "len", "(", "set", "(", "data", ".", "data", "[", "1", "]", ")", ")", ")", ">", "2", ":", "\n", "            ", "print", "(", "'ERROR! Only binary classification is supported!'", ")", "\n", "return", "0", "\n", "", "X", ",", "y", "=", "self", ".", "data_transformer", "(", "data", ")", ".", "data", "\n", "clf", "=", "LogisticRegression", "(", "random_state", "=", "1", ")", "\n", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "_ef", "=", "clf", ".", "coef_", "\n", "_impact", "=", "_ef", "[", "0", "]", "\n", "h", "=", "{", "}", "\n", "h", "[", "'feature_id'", "]", "=", "np", ".", "array", "(", "range", "(", "len", "(", "_impact", ")", ")", ")", "\n", "h", "[", "'feature_impact'", "]", "=", "_impact", "\n", "return", "pd", ".", "DataFrame", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Regressor.initialize": [[127, 134], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize"], ["def", "initialize", "(", "self", ",", "data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "metric", "=", "'mse'", "if", "self", ".", "metric", "is", "None", "else", "self", ".", "metric", "\n", "\n", "# Check the task type: {continuous}", "\n", "task_type", "=", "type_dict", "[", "'continuous'", "]", "\n", "self", ".", "task_type", "=", "task_type", "\n", "super", "(", ")", ".", "initialize", "(", "data", "=", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Regressor.fit": [[135, 146], ["super().fit", "estimators.Regressor.initialize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize"], ["", "def", "fit", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Fit the regressor to given training data.\n        :param data: DataNode\n        :return: self\n        \"\"\"", "\n", "if", "self", ".", "_ml_engine", "is", "None", ":", "\n", "            ", "self", ".", "initialize", "(", "data", "=", "data", ",", "**", "kwargs", ")", "\n", "", "super", "(", ")", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Regressor.predict": [[147, 159], ["super().predict", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ",", "batch_size", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Make predictions for X.\n        :param X: DataNode\n        :param batch_size: int\n        :param n_jobs: int\n        :return: y : array of shape = [n_samples] or [n_samples, n_labels]\n            The predicted classes.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "X", ",", "DataNode", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"X is supposed to be a Data Node, but get %s\"", "%", "type", "(", "X", ")", ")", "\n", "", "return", "super", "(", ")", ".", "predict", "(", "X", ",", "batch_size", "=", "batch_size", ",", "n_jobs", "=", "n_jobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Regressor.get_tree_importance": [[160, 171], ["LGBMRegressor", "LGBMRegressor.fit", "numpy.array", "pd.DataFrame", "estimators.Regressor.data_transformer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "get_tree_importance", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "from", "lightgbm", "import", "LGBMRegressor", "\n", "import", "pandas", "as", "pd", "\n", "X", ",", "y", "=", "self", ".", "data_transformer", "(", "data", ")", ".", "data", "\n", "lgb", "=", "LGBMRegressor", "(", "random_state", "=", "1", ")", "\n", "lgb", ".", "fit", "(", "X", ",", "y", ")", "\n", "_importance", "=", "lgb", ".", "feature_importances_", "\n", "h", "=", "{", "}", "\n", "h", "[", "'feature_id'", "]", "=", "np", ".", "array", "(", "range", "(", "len", "(", "_importance", ")", ")", ")", "\n", "h", "[", "'feature_importance'", "]", "=", "_importance", "\n", "return", "pd", ".", "DataFrame", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.estimators.Regressor.get_linear_impact": [[172, 183], ["LinearRegression", "LinearRegression.fit", "numpy.array", "pd.DataFrame", "estimators.Regressor.data_transformer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "get_linear_impact", "(", "self", ",", "data", ":", "DataNode", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "LinearRegression", "\n", "import", "pandas", "as", "pd", "\n", "X", ",", "y", "=", "self", ".", "data_transformer", "(", "data", ")", ".", "data", "\n", "reg", "=", "LinearRegression", "(", ")", "\n", "reg", ".", "fit", "(", "X", ",", "y", ")", "\n", "_impact", "=", "reg", ".", "coef_", "\n", "h", "=", "{", "}", "\n", "h", "[", "'feature_id'", "]", "=", "np", ".", "array", "(", "range", "(", "len", "(", "_impact", ")", ")", ")", "\n", "h", "[", "'feature_impact'", "]", "=", "_impact", "\n", "return", "pd", ".", "DataFrame", "(", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.__init__": [[23, 89], ["mindware.components.metrics.metric.get_metric", "automl.AutoML._get_logger", "time.time", "int", "ValueError", "ValueError", "list", "list", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline._get_logger"], ["    ", "def", "__init__", "(", "self", ",", "time_limit", "=", "300", ",", "\n", "dataset_name", "=", "'default_name'", ",", "\n", "amount_of_resource", "=", "None", ",", "\n", "task_type", "=", "None", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "include_algorithms", "=", "None", ",", "\n", "include_preprocessors", "=", "None", ",", "\n", "optimizer", "=", "'smac'", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "enable_meta_algorithm_selection", "=", "True", ",", "\n", "enable_fe", "=", "True", ",", "\n", "per_run_time_limit", "=", "150", ",", "\n", "ensemble_size", "=", "50", ",", "\n", "evaluation", "=", "'holdout'", ",", "\n", "resampling_params", "=", "None", ",", "\n", "output_dir", "=", "\"logs\"", ",", "\n", "logging_config", "=", "None", ",", "\n", "random_state", "=", "1", ",", "\n", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "metric_id", "=", "metric", "\n", "self", ".", "metric", "=", "get_metric", "(", "self", ".", "metric_id", ")", "\n", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "seed", "=", "random_state", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "logging_config", "=", "logging_config", "\n", "self", ".", "logger", "=", "self", ".", "_get_logger", "(", "self", ".", "dataset_name", ")", "\n", "\n", "self", ".", "evaluation_type", "=", "evaluation", "\n", "self", ".", "resampling_params", "=", "resampling_params", "\n", "self", ".", "include_preprocessors", "=", "include_preprocessors", "\n", "\n", "self", ".", "amount_of_resource", "=", "int", "(", "1e8", ")", "if", "amount_of_resource", "is", "None", "else", "amount_of_resource", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "ensemble_method", "=", "ensemble_method", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "enable_meta_algorithm_selection", "=", "enable_meta_algorithm_selection", "\n", "self", ".", "enable_fe", "=", "enable_fe", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "solver", "=", "None", "\n", "\n", "self", ".", "global_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "eval_time", "=", "None", "\n", "self", ".", "total_time", "=", "None", "\n", "\n", "# Disable meta learning", "\n", "if", "self", ".", "include_preprocessors", "is", "not", "None", ":", "\n", "            ", "self", ".", "enable_meta_algorithm_selection", "=", "False", "\n", "\n", "", "if", "include_algorithms", "is", "not", "None", ":", "\n", "            ", "self", ".", "include_algorithms", "=", "include_algorithms", "\n", "", "else", ":", "\n", "            ", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "                ", "if", "task_type", "in", "[", "IMG_CLS", ",", "TEXT_CLS", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "'Please use AutoDL module, instead of AutoML.'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "include_algorithms", "=", "list", "(", "classification_algorithms", ")", "\n", "", "", "elif", "task_type", "in", "RGS_TASKS", ":", "\n", "                ", "self", ".", "include_algorithms", "=", "list", "(", "regression_algorithms", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown task type %s\"", "%", "task_type", ")", "\n", "", "", "if", "ensemble_method", "is", "not", "None", "and", "ensemble_method", "not", "in", "ensemble_list", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s is not supported for ensemble!\"", "%", "ensemble_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML._get_logger": [[90, 95], ["mindware.utils.logging_utils.setup_logger", "mindware.utils.logging_utils.get_logger", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.setup_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger"], ["", "", "def", "_get_logger", "(", "self", ",", "name", ")", ":", "\n", "        ", "logger_name", "=", "'MindWare-%s(%d)'", "%", "(", "name", ",", "self", ".", "seed", ")", "\n", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s.log'", "%", "str", "(", "logger_name", ")", ")", ",", "\n", "self", ".", "logging_config", ")", "\n", "return", "get_logger", "(", "logger_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize": [[96, 161], ["kwargs.get", "kwargs.get", "mindware.blocks.block_utils.get_execution_tree", "mindware.blocks.block_utils.get_node_type", "time.time", "mindware.blocks.block_utils.get_node_type.", "mindware.utils.functions.is_imbalanced_dataset", "get_fe_cs", "get_cash_cs", "get_fe_cs", "get_cash_cs", "kwargs.get", "automl.AutoML.logger.info", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.fit", "mindware.components.meta_learning.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.fetch_algorithm_set", "list", "automl.AutoML.logger.info", "automl.AutoML.logger.error", "traceback.print_exc", "list.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_execution_tree", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.functions.is_imbalanced_dataset", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_fe_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_cash_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_fe_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_cash_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.fetch_algorithm_set", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "def", "initialize", "(", "self", ",", "train_data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "# Check whether this dataset is balanced or not.", "\n", "# if self.task_type in CLS_TASKS and is_imbalanced_dataset(train_data):", "\n", "#     self.logger.info('Input dataset is imbalanced!')", "\n", "#     train_data = DataBalancer().operate(train_data)", "\n", "\n", "        ", "dataset_id", "=", "kwargs", ".", "get", "(", "'dataset_id'", ",", "None", ")", "\n", "\n", "if", "self", ".", "enable_meta_algorithm_selection", ":", "\n", "            ", "try", ":", "\n", "                ", "n_algo_recommended", "=", "5", "\n", "meta_datasets", "=", "kwargs", ".", "get", "(", "'meta_datasets'", ",", "None", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Executing Meta-Learning based Algorithm Recommendation.'", ")", "\n", "alad", "=", "RankNetAdvisor", "(", "task_type", "=", "self", ".", "task_type", ",", "n_algorithm", "=", "n_algo_recommended", ",", "\n", "metric", "=", "self", ".", "metric_id", ")", "\n", "alad", ".", "fit", "(", ")", "\n", "model_candidates", "=", "alad", ".", "fetch_algorithm_set", "(", "dataset_id", ",", "datanode", "=", "train_data", ")", "\n", "include_models", "=", "list", "(", ")", "\n", "for", "algo", "in", "model_candidates", ":", "\n", "                    ", "if", "algo", "in", "self", ".", "include_algorithms", "and", "len", "(", "include_models", ")", "<", "n_algo_recommended", ":", "\n", "                        ", "include_models", ".", "append", "(", "algo", ")", "\n", "# if 'logistic_regression' in include_models:", "\n", "#     include_models.remove('logistic_regression')", "\n", "# if 'adaboost' not in include_models:", "\n", "#     include_models.append('adaboost')", "\n", "\n", "# include_models = ['extra_trees', 'adaboost', 'liblinear_svc', 'random_forest',", "\n", "#                   'libsvm_svc', 'lightgbm']", "\n", "", "", "self", ".", "include_algorithms", "=", "include_models", "\n", "self", ".", "logger", ".", "info", "(", "'Final Algorithms Recommended: [%s]'", "%", "','", ".", "join", "(", "self", ".", "include_algorithms", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Meta-Learning based Algorithm Recommendation FAILED: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "\n", "", "", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "from", "mindware", ".", "components", ".", "evaluators", ".", "cls_evaluator", "import", "get_fe_cs", ",", "get_cash_cs", "\n", "self", ".", "if_imbal", "=", "is_imbalanced_dataset", "(", "train_data", ")", "\n", "self", ".", "fe_config_space", "=", "get_fe_cs", "(", "self", ".", "task_type", ",", "include_preprocessors", "=", "self", ".", "include_preprocessors", ",", "\n", "if_imbal", "=", "self", ".", "if_imbal", ")", "\n", "self", ".", "cash_config_space", "=", "get_cash_cs", "(", "self", ".", "include_algorithms", ",", "self", ".", "task_type", ")", "\n", "", "else", ":", "\n", "            ", "from", "mindware", ".", "components", ".", "evaluators", ".", "rgs_evaluator", "import", "get_fe_cs", ",", "get_cash_cs", "\n", "self", ".", "fe_config_space", "=", "get_fe_cs", "(", "self", ".", "task_type", ",", "include_preprocessors", "=", "self", ".", "include_preprocessors", ")", "\n", "self", ".", "cash_config_space", "=", "get_cash_cs", "(", "self", ".", "include_algorithms", ",", "self", ".", "task_type", ")", "\n", "\n", "# TODO: Define execution trees flexibly", "\n", "", "tree_id", "=", "kwargs", ".", "get", "(", "\"tree_id\"", ",", "1", ")", "\n", "tree", "=", "get_execution_tree", "(", "tree_id", ")", "\n", "solver_type", "=", "get_node_type", "(", "tree", ",", "0", ")", "\n", "self", ".", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "solver", "=", "solver_type", "(", "tree", ",", "0", ",", "self", ".", "task_type", ",", "self", ".", "timestamp", ",", "\n", "self", ".", "fe_config_space", ",", "self", ".", "cash_config_space", ",", "train_data", ",", "\n", "per_run_time_limit", "=", "self", ".", "per_run_time_limit", ",", "\n", "dataset_name", "=", "self", ".", "dataset_name", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "ensemble_method", "=", "self", ".", "ensemble_method", ",", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", ",", "\n", "metric", "=", "self", ".", "metric", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "time_limit", "=", "self", ".", "time_limit", ",", "\n", "trial_num", "=", "self", ".", "amount_of_resource", ",", "\n", "eval_type", "=", "self", ".", "evaluation_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.fit": [[162, 181], ["range", "automl.AutoML.initialize", "time.time", "automl.AutoML.solver.fit_ensemble", "time.time", "automl.AutoML.solver.iterate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.initialize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.fit_ensemble", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "fit", "(", "self", ",", "train_data", ":", "DataNode", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        This function includes this following two procedures.\n            1. tune each algorithm's hyperparameters.\n            2. engineer each algorithm's features automatically.\n        :param train_data:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "solver", "is", "None", ":", "\n", "            ", "self", ".", "initialize", "(", "train_data", ",", "**", "kwargs", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "amount_of_resource", ")", ":", "\n", "            ", "if", "not", "(", "self", ".", "solver", ".", "early_stop_flag", "or", "self", ".", "solver", ".", "timeout_flag", ")", ":", "\n", "                ", "self", ".", "solver", ".", "iterate", "(", ")", "\n", "", "", "self", ".", "eval_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "timestamp", "\n", "\n", "if", "self", ".", "ensemble_method", "is", "not", "None", "and", "self", ".", "evaluation_type", "in", "[", "'holdout'", ",", "'partial'", "]", ":", "\n", "            ", "self", ".", "solver", ".", "fit_ensemble", "(", ")", "\n", "", "self", ".", "total_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "global_start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.refit": [[182, 184], ["automl.AutoML.solver.refit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit"], ["", "def", "refit", "(", "self", ")", ":", "\n", "        ", "self", ".", "solver", ".", "refit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.predict_proba": [[185, 187], ["automl.AutoML.solver.predict_proba"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "test_data", ":", "DataNode", ")", ":", "\n", "        ", "return", "self", ".", "solver", ".", "predict_proba", "(", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.predict": [[188, 190], ["automl.AutoML.solver.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "test_data", ":", "DataNode", ")", ":", "\n", "        ", "return", "self", ".", "solver", ".", "predict", "(", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.score": [[191, 195], ["metric_func"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "test_data", ":", "DataNode", ",", "metric_func", "=", "None", ")", ":", "\n", "        ", "if", "metric_func", "is", "None", ":", "\n", "            ", "metric_func", "=", "self", ".", "metric", "\n", "", "return", "metric_func", "(", "self", ",", "test_data", ",", "test_data", ".", "data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.get_ens_model_info": [[196, 201], ["automl.AutoML.solver.es.get_ens_model_info"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_ens_model_info"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ensemble_method", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "solver", ".", "es", ".", "get_ens_model_info", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.get_val_stats": [[202, 204], ["automl.AutoML.solver.get_stats"], "methods", ["None"], ["", "", "def", "get_val_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "solver", ".", "get_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary": [[205, 265], ["list", "automl.AutoML.solver.eval_dict.copy", "len", "raw_table.splitlines", "title_line.index", "len", "incumbent.copy().keys", "row.append", "incumbent.get", "isinstance", "row.append", "configs_table.append", "AsciiTable", "raw_table.splitlines.pop", "bar.join", "incumbent.copy", "isinstance", "str", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "from", "terminaltables", "import", "AsciiTable", "\n", "incumbent", "=", "self", ".", "solver", ".", "incumbent", "\n", "if", "not", "incumbent", ":", "\n", "            ", "return", "'No incumbents in history. Please run fit() first.'", "\n", "", "configs_table", "=", "[", "]", "\n", "nil", "=", "\"-\"", "\n", "parameters", "=", "list", "(", "incumbent", ".", "copy", "(", ")", ".", "keys", "(", ")", ")", "\n", "for", "para", "in", "parameters", ":", "\n", "            ", "row", "=", "[", "]", "\n", "row", ".", "append", "(", "para", ")", "\n", "val", "=", "incumbent", ".", "get", "(", "para", ",", "None", ")", "\n", "if", "val", "is", "None", ":", "\n", "                ", "val", "=", "nil", "\n", "", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "\"%.6f\"", "%", "val", "\n", "", "elif", "not", "isinstance", "(", "val", ",", "str", ")", ":", "\n", "                ", "val", "=", "str", "(", "val", ")", "\n", "", "row", ".", "append", "(", "val", ")", "\n", "configs_table", ".", "append", "(", "row", ")", "\n", "", "configs_title", "=", "[", "\"Parameters\"", ",", "\"Optimal Value\"", "]", "\n", "\n", "total_eval_dict", "=", "self", ".", "solver", ".", "eval_dict", ".", "copy", "(", ")", "\n", "num_configs", "=", "len", "(", "self", ".", "solver", ".", "eval_dict", ")", "\n", "failed_configs", "=", "0", "\n", "for", "key", "in", "total_eval_dict", ":", "\n", "            ", "perf", ",", "_", ",", "state", "=", "total_eval_dict", "[", "key", "]", "\n", "if", "state", "!=", "SUCCESS", ":", "\n", "                ", "failed_configs", "+=", "1", "\n", "\n", "", "", "table_data", "=", "(", "[", "configs_title", "]", "+", "\n", "configs_table", "+", "\n", "[", "[", "\"Optimal Validation Performance\"", ",", "self", ".", "solver", ".", "incumbent_perf", "]", "]", "+", "\n", "[", "[", "'Number of Configurations'", ",", "num_configs", "]", "]", "+", "\n", "[", "[", "'Number of Failed Configurations'", ",", "failed_configs", "]", "]", "+", "\n", "[", "[", "'Search Runtime'", ",", "'%.3f sec'", "%", "self", ".", "eval_time", "]", "]", "+", "# TODO: Precise search time.", "\n", "[", "[", "'Total Runtime'", ",", "'%.3f sec'", "%", "self", ".", "total_time", "]", "]", "+", "\n", "[", "[", "'Average Evaluation Time'", ",", "0", "]", "]", "+", "# TODO: Wait for OpenBOX", "\n", "[", "[", "'Maximum Valid Evaluation Time'", ",", "0", "]", "]", "+", "\n", "[", "[", "'Minimum Evaluation Time'", ",", "0", "]", "]", "\n", ")", "\n", "\n", "M", "=", "8", "\n", "raw_table", "=", "AsciiTable", "(", "\n", "table_data", "\n", "# title=\"Result of Optimization\"", "\n", ")", ".", "table", "\n", "lines", "=", "raw_table", ".", "splitlines", "(", ")", "\n", "title_line", "=", "lines", "[", "1", "]", "\n", "st", "=", "title_line", ".", "index", "(", "\"|\"", ",", "1", ")", "\n", "col", "=", "\"Optimal Value\"", "\n", "L", "=", "len", "(", "title_line", ")", "\n", "lines", "[", "0", "]", "=", "\"+\"", "+", "\"-\"", "*", "(", "L", "-", "2", ")", "+", "\"+\"", "\n", "new_title_line", "=", "title_line", "[", ":", "st", "+", "1", "]", "+", "(", "\" \"", "+", "col", "+", "\" \"", "*", "(", "L", "-", "st", "-", "3", "-", "len", "(", "col", ")", ")", ")", "+", "\"|\"", "\n", "lines", "[", "1", "]", "=", "new_title_line", "\n", "bar", "=", "\"\\n\"", "+", "lines", ".", "pop", "(", ")", "+", "\"\\n\"", "\n", "finals", "=", "lines", "[", "-", "M", ":", "]", "\n", "prevs", "=", "lines", "[", ":", "-", "M", "]", "\n", "render_table", "=", "\"\\n\"", ".", "join", "(", "prevs", ")", "+", "bar", "+", "bar", ".", "join", "(", "finals", ")", "+", "bar", "\n", "return", "render_table", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.__main__.main": [[16, 48], ["print", "sklearn.datasets.load_iris", "sklearn.model_selection.train_test_split", "mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.utils.data_manager.DataManager.get_data_node", "mindware.estimators.Classifier", "mindware.estimators.Classifier.fit", "print", "mindware.estimators.Classifier.predict", "print", "shutil.rmtree", "os.path.exists", "os.makedirs", "mindware.estimators.Classifier.summary", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.automl.AutoML.summary"], ["def", "main", "(", ")", ":", "\n", "    ", "tmp_dir", "=", "'./data/eval_exps/soln-ml'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tmp_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tmp_dir", ")", "\n", "\n", "", "time_limit", "=", "60", "\n", "print", "(", "'==> Start new AutoML task with budget - %d'", "%", "time_limit", ")", "\n", "ensemble_method", "=", "'ensemble_selection'", "\n", "eval_type", "=", "'holdout'", "\n", "\n", "iris", "=", "load_iris", "(", ")", "\n", "X", ",", "y", "=", "iris", ".", "data", ",", "iris", ".", "target", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "random_state", "=", "1", ",", "stratify", "=", "y", ")", "\n", "dm", "=", "DataManager", "(", "X_train", ",", "y_train", ")", "\n", "train_data", "=", "dm", ".", "get_data_node", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "dm", ".", "get_data_node", "(", "X_test", ",", "y_test", ")", "\n", "\n", "clf", "=", "Classifier", "(", "time_limit", "=", "time_limit", ",", "\n", "output_dir", "=", "tmp_dir", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "enable_meta_algorithm_selection", "=", "False", ",", "\n", "ensemble_size", "=", "10", ",", "\n", "optimizer", "=", "'random_search'", ",", "\n", "evaluation", "=", "eval_type", ",", "\n", "metric", "=", "'acc'", ",", "\n", "n_jobs", "=", "1", ")", "\n", "clf", ".", "fit", "(", "train_data", ",", "tree_id", "=", "2", ")", "\n", "print", "(", "clf", ".", "summary", "(", ")", ")", "\n", "pred", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "print", "(", "accuracy_score", "(", "test_data", ".", "data", "[", "1", "]", ",", "pred", ")", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "tmp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.__init__": [[35, 38], ["logging_utils._create_logger"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils._create_logger"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "logger", "=", "_create_logger", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.__getstate__": [[39, 49], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method is called when pickle dumps an object.\n\n        Returns\n        -------\n        Dictionary, representing the object state to be pickled. Ignores\n        the self.logger field and only returns the logger name.\n        \"\"\"", "\n", "return", "{", "'name'", ":", "self", ".", "name", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.__setstate__": [[50, 62], ["logging_utils._create_logger"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils._create_logger"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"\n        Method is called when pickle loads an object. Retrieves the name and\n        creates a logger.\n\n        Parameters\n        ----------\n        state - dictionary, containing the logger name.\n\n        \"\"\"", "\n", "self", ".", "name", "=", "state", "[", "'name'", "]", "\n", "self", ".", "logger", "=", "_create_logger", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.debug": [[63, 65], ["logging_utils.PickableLoggerAdapter.logger.debug"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["", "def", "debug", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.info": [[66, 68], ["logging_utils.PickableLoggerAdapter.logger.info"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "info", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.warning": [[69, 71], ["logging_utils.PickableLoggerAdapter.logger.warning"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["", "def", "warning", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "warning", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.error": [[72, 74], ["logging_utils.PickableLoggerAdapter.logger.error"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "def", "error", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "error", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.exception": [[75, 77], ["logging_utils.PickableLoggerAdapter.logger.exception"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.exception"], ["", "def", "exception", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "exception", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.critical": [[78, 80], ["logging_utils.PickableLoggerAdapter.logger.critical"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.critical"], ["", "def", "critical", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "critical", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.log": [[81, 83], ["logging_utils.PickableLoggerAdapter.logger.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "log", "(", "self", ",", "level", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log", "(", "level", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.PickableLoggerAdapter.isEnabledFor": [[84, 86], ["logging_utils.PickableLoggerAdapter.logger.isEnabledFor"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.isEnabledFor"], ["", "def", "isEnabledFor", "(", "self", ",", "level", ")", ":", "\n", "        ", "return", "self", ".", "logger", ".", "isEnabledFor", "(", "level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.setup_logger": [[8, 22], ["logging.config.dictConfig", "logging.config.dictConfig", "logging.config.dictConfig", "logging.config.dictConfig", "open", "yaml.safe_load", "os.path.join", "os.path.dirname"], "function", ["None"], ["def", "setup_logger", "(", "output_file", "=", "None", ",", "logging_config", "=", "None", ")", ":", "\n", "# logging_config must be a dictionary object specifying the configuration", "\n", "# for the loggers to be used in auto-sklearn.", "\n", "    ", "if", "logging_config", "is", "not", "None", ":", "\n", "        ", "if", "output_file", "is", "not", "None", ":", "\n", "            ", "logging_config", "[", "'handlers'", "]", "[", "'file_handler'", "]", "[", "'filename'", "]", "=", "output_file", "\n", "", "logging", ".", "config", ".", "dictConfig", "(", "logging_config", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'logging.yaml'", ")", ",", "\n", "'r'", ")", "as", "fh", ":", "\n", "            ", "logging_config", "=", "yaml", ".", "safe_load", "(", "fh", ")", "\n", "", "if", "output_file", "is", "not", "None", ":", "\n", "            ", "logging_config", "[", "'handlers'", "]", "[", "'file_handler'", "]", "[", "'filename'", "]", "=", "output_file", "\n", "", "logging", ".", "config", ".", "dictConfig", "(", "logging_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils._create_logger": [[24, 26], ["logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "", "def", "_create_logger", "(", "name", ")", ":", "\n", "    ", "return", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger": [[28, 31], ["logging_utils.PickableLoggerAdapter"], "function", ["None"], ["", "def", "get_logger", "(", "name", ")", ":", "\n", "    ", "logger", "=", "PickableLoggerAdapter", "(", "name", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.__init__": [[24, 38], ["numpy.array", "numpy.array", "data_manager.DataManager.set_feat_types", "pandas.DataFrame"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.set_feat_types"], ["def", "__init__", "(", "self", ",", "X", "=", "None", ",", "y", "=", "None", ",", "na_values", "=", "default_missing_values", ",", "feature_types", "=", "None", ",", "feature_names", "=", "None", ")", ":", "\n", "        ", "self", ".", "na_values", "=", "na_values", "\n", "self", ".", "feature_types", "=", "feature_types", "\n", "self", ".", "feature_names", "=", "feature_names", "\n", "self", ".", "missing_flags", "=", "None", "\n", "self", ".", "train_X", ",", "self", ".", "train_y", "=", "None", ",", "None", "\n", "self", ".", "test_X", ",", "self", ".", "test_y", "=", "None", ",", "None", "\n", "self", ".", "label_name", "=", "None", "\n", "\n", "if", "X", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_X", "=", "np", ".", "array", "(", "X", ")", "\n", "self", ".", "train_y", "=", "np", ".", "array", "(", "y", ")", "\n", "if", "feature_types", "is", "None", ":", "\n", "                ", "self", ".", "set_feat_types", "(", "pd", ".", "DataFrame", "(", "self", ".", "train_X", ")", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.set_feat_types": [[39, 72], ["list", "enumerate", "list", "enumerate", "data_manager.DataManager.missing_flags.append", "data_manager.DataManager.feature_types.append", "numpy.array", "mindware.components.utils.utils.detect_abnormal_type", "mindware.components.utils.utils.is_discrete", "numpy.array", "pandas.isnull", "mindware.components.utils.utils.is_discrete", "pandas.isnull"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.detect_abnormal_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.is_discrete", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.is_discrete"], ["", "", "", "def", "set_feat_types", "(", "self", ",", "df", ",", "columns_missed", ")", ":", "\n", "        ", "self", ".", "missing_flags", "=", "list", "(", ")", "\n", "for", "idx", ",", "col_name", "in", "enumerate", "(", "df", ".", "columns", ")", ":", "\n", "            ", "self", ".", "missing_flags", ".", "append", "(", "True", "if", "col_name", "in", "columns_missed", "else", "False", ")", "\n", "\n", "", "self", ".", "feature_types", "=", "list", "(", ")", "\n", "for", "idx", ",", "col_name", "in", "enumerate", "(", "df", ".", "columns", ")", ":", "\n", "            ", "col_vals", "=", "df", "[", "col_name", "]", ".", "values", "\n", "dtype", "=", "df", "[", "col_name", "]", ".", "dtype", "\n", "\n", "# Filter the element with missing value.", "\n", "cleaned_vals", "=", "col_vals", "\n", "if", "col_name", "in", "columns_missed", ":", "\n", "                ", "cleaned_vals", "=", "np", ".", "array", "(", "[", "val", "for", "val", "in", "col_vals", "if", "not", "pd", ".", "isnull", "(", "val", ")", "]", ")", "\n", "\n", "", "if", "dtype", "in", "[", "np", ".", "int", ",", "np", ".", "int16", ",", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "feat_type", "=", "DISCRETE", "\n", "", "elif", "dtype", "in", "[", "np", ".", "float", ",", "np", ".", "float16", ",", "np", ".", "float32", ",", "np", ".", "float64", ",", "np", ".", "double", "]", ":", "\n", "                ", "feat_type", "=", "DISCRETE", "if", "is_discrete", "(", "cleaned_vals", ")", "else", "NUMERICAL", "\n", "", "else", ":", "\n", "                ", "flag", ",", "cand_values", ",", "ab_idx", ",", "is_str", "=", "detect_abnormal_type", "(", "col_vals", ")", "\n", "if", "flag", ":", "\n", "# Set the invalid element to NaN.", "\n", "                    ", "df", ".", "at", "[", "ab_idx", ",", "col_name", "]", "=", "np", ".", "nan", "\n", "# Refresh the cleaned column.", "\n", "cleaned_vals", "=", "np", ".", "array", "(", "[", "val", "for", "val", "in", "df", "[", "col_name", "]", ".", "values", "if", "not", "pd", ".", "isnull", "(", "val", ")", "]", ")", "\n", "if", "is_str", ":", "\n", "                        ", "feat_type", "=", "CATEGORICAL", "\n", "", "else", ":", "\n", "                        ", "feat_type", "=", "DISCRETE", "if", "is_discrete", "(", "cleaned_vals", ")", "else", "NUMERICAL", "\n", "", "", "else", ":", "\n", "                    ", "feat_type", "=", "CATEGORICAL", "\n", "", "", "self", ".", "feature_types", ".", "append", "(", "feat_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.get_data_node": [[73, 77], ["mindware.components.feature_engineering.transformation_graph.DataNode", "ValueError"], "methods", ["None"], ["", "", "def", "get_data_node", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "feature_types", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Feature type missing\"", ")", "\n", "", "return", "DataNode", "(", "[", "X", ",", "y", "]", ",", "self", ".", "feature_types", ",", "feature_names", "=", "self", ".", "feature_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.clean_data_with_nan": [[78, 107], ["df.columns[].tolist", "df.drop", "df.drop", "df.drop", "print", "df.isnull().any", "enumerate", "numpy.isnan", "df.isnull"], "methods", ["None"], ["", "def", "clean_data_with_nan", "(", "self", ",", "df", ",", "label_col", ",", "phase", "=", "'train'", ",", "drop_index", "=", "None", ",", "has_label", "=", "True", ")", ":", "\n", "        ", "columns_missed", "=", "df", ".", "columns", "[", "df", ".", "isnull", "(", ")", ".", "any", "(", ")", "]", ".", "tolist", "(", ")", "\n", "\n", "if", "has_label", ":", "\n", "            ", "if", "self", ".", "label_name", "is", "None", ":", "\n", "                ", "if", "phase", "!=", "'train'", ":", "\n", "                    ", "print", "(", "'Warning: Label is not specified! set label_col=%d by default.'", "%", "label_col", ")", "\n", "", "label_colname", "=", "df", ".", "columns", "[", "label_col", "]", "\n", "", "else", ":", "\n", "                ", "label_colname", "=", "self", ".", "label_name", "\n", "\n", "", "self", ".", "label_name", "=", "label_colname", "\n", "if", "label_colname", "in", "columns_missed", ":", "\n", "                ", "labels", "=", "df", "[", "label_colname", "]", ".", "values", "\n", "row_idx", "=", "[", "idx", "for", "idx", ",", "val", "in", "enumerate", "(", "labels", ")", "if", "np", ".", "isnan", "(", "val", ")", "]", "\n", "# Delete the row with NaN label.", "\n", "df", ".", "drop", "(", "df", ".", "index", "[", "row_idx", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "                ", "self", ".", "train_y", "=", "df", "[", "label_colname", "]", ".", "values", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_y", "=", "df", "[", "label_colname", "]", ".", "values", "\n", "\n", "# Delete the label column.", "\n", "", "df", ".", "drop", "(", "label_colname", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "", "if", "drop_index", ":", "\n", "            ", "drop_col", "=", "[", "df", ".", "columns", "[", "index", "]", "for", "index", "in", "drop_index", "]", "\n", "df", ".", "drop", "(", "drop_col", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.load_train_csv": [[108, 142], ["file_location.endswith", "pandas.read_csv.dropna", "data_manager.DataManager.clean_data_with_nan", "pandas.read_csv.columns[].tolist", "data_manager.DataManager.set_feat_types", "mindware.components.feature_engineering.transformation_graph.DataNode", "set", "list", "pandas.read_csv", "file_location.endswith", "set.add", "pandas.read_csv", "ValueError", "pandas.read_csv.isnull().any", "file_location.split", "pandas.read_csv.isnull"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.clean_data_with_nan", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.set_feat_types", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add"], ["", "", "def", "load_train_csv", "(", "self", ",", "file_location", ",", "label_col", "=", "-", "1", ",", "drop_index", "=", "None", ",", "\n", "keep_default_na", "=", "True", ",", "na_values", "=", "None", ",", "header", "=", "'infer'", ",", "\n", "sep", "=", "','", ")", ":", "\n", "# Set the NA values.", "\n", "        ", "if", "na_values", "is", "not", "None", ":", "\n", "            ", "na_set", "=", "set", "(", "self", ".", "na_values", ")", "\n", "for", "item", "in", "na_values", ":", "\n", "                ", "na_set", ".", "add", "(", "item", ")", "\n", "", "self", ".", "na_values", "=", "list", "(", "na_set", ")", "\n", "\n", "", "if", "file_location", ".", "endswith", "(", "'csv'", ")", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "file_location", ",", "keep_default_na", "=", "keep_default_na", ",", "\n", "na_values", "=", "self", ".", "na_values", ",", "header", "=", "header", ",", "sep", "=", "sep", ")", "\n", "", "elif", "file_location", ".", "endswith", "(", "'xls'", ")", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "file_location", ",", "keep_default_na", "=", "keep_default_na", ",", "\n", "na_values", "=", "self", ".", "na_values", ",", "header", "=", "header", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported file format: %s!'", "%", "file_location", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "\n", "# Drop the row with all NaNs.", "\n", "", "df", ".", "dropna", "(", "how", "=", "'all'", ")", "\n", "\n", "# Clean the data where the label columns have nans.", "\n", "self", ".", "clean_data_with_nan", "(", "df", ",", "label_col", ",", "drop_index", "=", "drop_index", ")", "\n", "\n", "# The columns with missing values.", "\n", "columns_missed", "=", "df", ".", "columns", "[", "df", ".", "isnull", "(", ")", ".", "any", "(", ")", "]", ".", "tolist", "(", ")", "\n", "\n", "# Identify the feature types", "\n", "self", ".", "set_feat_types", "(", "df", ",", "columns_missed", ")", "\n", "\n", "self", ".", "train_X", "=", "df", "\n", "data", "=", "[", "self", ".", "train_X", ",", "self", ".", "train_y", "]", "\n", "return", "DataNode", "(", "data", ",", "self", ".", "feature_types", ",", "feature_names", "=", "self", ".", "train_X", ".", "columns", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.load_test_csv": [[143, 155], ["pandas.read_csv", "pandas.read_csv.dropna", "data_manager.DataManager.clean_data_with_nan", "mindware.components.feature_engineering.transformation_graph.DataNode"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.clean_data_with_nan"], ["", "def", "load_test_csv", "(", "self", ",", "file_location", ",", "has_label", "=", "False", ",", "label_col", "=", "-", "1", ",", "\n", "drop_index", "=", "None", ",", "keep_default_na", "=", "True", ",", "header", "=", "'infer'", ",", "\n", "sep", "=", "','", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "file_location", ",", "keep_default_na", "=", "keep_default_na", ",", "\n", "na_values", "=", "self", ".", "na_values", ",", "header", "=", "header", ",", "sep", "=", "sep", ")", "\n", "# Drop the row with all NaNs.", "\n", "df", ".", "dropna", "(", "how", "=", "'all'", ")", "\n", "self", ".", "clean_data_with_nan", "(", "df", ",", "label_col", ",", "phase", "=", "'test'", ",", "drop_index", "=", "drop_index", ",", "has_label", "=", "has_label", ")", "\n", "self", ".", "test_X", "=", "df", "\n", "\n", "data", "=", "[", "self", ".", "test_X", ",", "self", ".", "test_y", "]", "\n", "return", "DataNode", "(", "data", ",", "self", ".", "feature_types", ",", "feature_names", "=", "self", ".", "test_X", ".", "columns", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.preprocess": [[156, 169], ["data_manager.DataManager.remove_cols_with_same_values", "data_manager.DataManager.remove_uninf_cols", "data_manager.DataManager.impute_cols", "data_manager.DataManager.one_hot", "data_manager.DataManager.encode_label", "print"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.remove_cols_with_same_values", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.remove_uninf_cols", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.impute_cols", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.one_hot", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.encode_label"], ["", "def", "preprocess", "(", "self", ",", "input_node", ",", "task_type", "=", "CLASSIFICATION", ",", "train_phase", "=", "True", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "input_node", "=", "self", ".", "remove_uninf_cols", "(", "input_node", ",", "train_phase", "=", "True", ")", "\n", "input_node", "=", "self", ".", "impute_cols", "(", "input_node", ")", "\n", "input_node", "=", "self", ".", "one_hot", "(", "input_node", ")", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "            ", "print", "(", "'data[0] in input_node should be a DataFrame!'", ")", "\n", "", "input_node", "=", "self", ".", "remove_cols_with_same_values", "(", "input_node", ")", "\n", "# print('=' * 20)", "\n", "if", "self", ".", "task_type", "is", "None", "or", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "# Label encoding.", "\n", "            ", "input_node", "=", "self", ".", "encode_label", "(", "input_node", ")", "\n", "", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.preprocess_fit": [[170, 177], ["data_manager.DataManager.preprocess"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.preprocess"], ["", "def", "preprocess_fit", "(", "self", ",", "input_node", ",", "task_type", "=", "CLASSIFICATION", ")", ":", "\n", "        ", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "variance_selector", "=", "None", "\n", "self", ".", "onehot_encoder", "=", "None", "\n", "self", ".", "label_encoder", "=", "None", "\n", "preprocessed_node", "=", "self", ".", "preprocess", "(", "input_node", ",", "train_phase", "=", "True", ")", "\n", "return", "preprocessed_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.preprocess_transform": [[178, 181], ["data_manager.DataManager.preprocess"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.preprocess"], ["", "def", "preprocess_transform", "(", "self", ",", "input_node", ")", ":", "\n", "        ", "preprocessed_node", "=", "self", ".", "preprocess", "(", "input_node", ",", "train_phase", "=", "False", ")", "\n", "return", "preprocessed_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.remove_uninf_cols": [[182, 205], ["raw_dataframe.drop.drop.drop", "enumerate", "list", "list", "list", "raw_dataframe[].isnull().values.all", "range", "uninformative_columns.append", "uninformative_idx.append", "len", "len", "set", "int", "uninformative_columns.append", "uninformative_idx.append", "raw_dataframe[].isnull"], "methods", ["None"], ["", "def", "remove_uninf_cols", "(", "self", ",", "input_node", ":", "DataNode", ",", "train_phase", "=", "True", ")", ":", "\n", "        ", "raw_dataframe", "=", "input_node", ".", "data", "[", "0", "]", "\n", "types", "=", "input_node", ".", "feature_types", "\n", "if", "train_phase", ":", "\n", "# Remove the uninformative columns.", "\n", "            ", "uninformative_columns", ",", "uninformative_idx", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "idx", ",", "column", "in", "enumerate", "(", "list", "(", "raw_dataframe", ")", ")", ":", "\n", "                ", "if", "raw_dataframe", "[", "column", "]", ".", "isnull", "(", ")", ".", "values", ".", "all", "(", ")", ":", "\n", "                    ", "uninformative_columns", ".", "append", "(", "column", ")", "\n", "uninformative_idx", ".", "append", "(", "idx", ")", "\n", "continue", "\n", "", "if", "types", "[", "idx", "]", "==", "CATEGORICAL", ":", "\n", "                    ", "num_sample", "=", "input_node", ".", "data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "num_unique", "=", "len", "(", "set", "(", "input_node", ".", "data", "[", "0", "]", "[", "column", "]", ")", ")", "\n", "if", "num_unique", ">=", "int", "(", "0.8", "*", "num_sample", ")", ":", "\n", "                        ", "uninformative_columns", ".", "append", "(", "column", ")", "\n", "uninformative_idx", ".", "append", "(", "idx", ")", "\n", "", "", "", "self", ".", "uninformative_columns", ",", "self", ".", "uninformative_idx", "=", "uninformative_columns", ",", "uninformative_idx", "\n", "\n", "", "input_node", ".", "feature_types", "=", "[", "types", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "types", ")", ")", "if", "idx", "not", "in", "self", ".", "uninformative_idx", "]", "\n", "raw_dataframe", "=", "raw_dataframe", ".", "drop", "(", "self", ".", "uninformative_columns", ",", "axis", "=", "1", ")", "\n", "input_node", ".", "data", "[", "0", "]", "=", "raw_dataframe", "\n", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.impute_cols": [[206, 221], ["raw_dataframe.isnull().values.any", "enumerate", "list", "raw_dataframe[].isnull().values.any", "raw_dataframe.isnull", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation.operate", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation.operate", "raw_dataframe[].isnull"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "impute_cols", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "        ", "raw_dataframe", "=", "input_node", ".", "data", "[", "0", "]", "\n", "feat_types", "=", "input_node", ".", "feature_types", "\n", "need_imputation", "=", "raw_dataframe", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")", "\n", "if", "need_imputation", ":", "\n", "            ", "for", "idx", ",", "column", "in", "enumerate", "(", "list", "(", "raw_dataframe", ")", ")", ":", "\n", "                ", "if", "raw_dataframe", "[", "column", "]", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")", ":", "\n", "                    ", "feature_type", "=", "feat_types", "[", "idx", "]", "\n", "if", "feature_type", "in", "[", "CATEGORICAL", ",", "ORDINAL", "]", ":", "\n", "                        ", "imputer", "=", "ImputationTransformation", "(", "'most_frequent'", ")", "\n", "input_node", "=", "imputer", ".", "operate", "(", "input_node", ",", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                        ", "imputer", "=", "ImputationTransformation", "(", "'median'", ")", "\n", "input_node", "=", "imputer", ".", "operate", "(", "input_node", ",", "[", "idx", "]", ")", "\n", "", "", "", "", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.one_hot": [[222, 230], ["len", "data_manager.DataManager.onehot_encoder.operate", "enumerate", "mindware.components.feature_engineering.transformations.preprocessor.onehot_encoder.OneHotTransformation"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "one_hot", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "# One-hot encoding TO categorical features.", "\n", "        ", "categorical_fields", "=", "[", "idx", "for", "idx", ",", "type", "in", "enumerate", "(", "input_node", ".", "feature_types", ")", "if", "type", "==", "CATEGORICAL", "]", "\n", "if", "len", "(", "categorical_fields", ")", ">", "0", ":", "\n", "            ", "if", "self", ".", "onehot_encoder", "is", "None", ":", "\n", "                ", "self", ".", "onehot_encoder", "=", "OneHotTransformation", "(", ")", "\n", "", "input_node", "=", "self", ".", "onehot_encoder", ".", "operate", "(", "input_node", ",", "categorical_fields", ")", "\n", "", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.remove_cols_with_same_values": [[231, 236], ["data_manager.DataManager.variance_selector.operate", "mindware.components.feature_engineering.transformations.selector.variance_selector.VarianceSelector"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "remove_cols_with_same_values", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "        ", "if", "self", ".", "variance_selector", "is", "None", ":", "\n", "            ", "self", ".", "variance_selector", "=", "VarianceSelector", "(", ")", "\n", "", "input_node", "=", "self", ".", "variance_selector", ".", "operate", "(", "input_node", ")", "\n", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.encode_label": [[237, 250], ["isinstance", "data_manager.DataManager.label_encoder.transform", "LabelEncoder", "data_manager.DataManager.label_encoder.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "encode_label", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "from", "sklearn", ".", "preprocessing", "import", "LabelEncoder", "\n", "X", ",", "y", "=", "input_node", ".", "data", "\n", "if", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "X", "=", "X", ".", "values", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "label_encoder", "is", "None", ":", "\n", "                ", "self", ".", "label_encoder", "=", "LabelEncoder", "(", ")", "\n", "self", ".", "label_encoder", ".", "fit", "(", "y", ")", "\n", "", "y", "=", "self", ".", "label_encoder", ".", "transform", "(", "y", ")", "\n", "", "input_node", ".", "data", "=", "(", "X", ",", "y", ")", "\n", "return", "input_node", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.memory_limit": [[7, 17], ["resource.getrlimit", "resource.setrlimit", "platform.system", "print", "decorators.get_memory"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.get_memory"], ["def", "memory_limit", "(", "percentage", ":", "float", ")", ":", "\n", "    ", "\"\"\"\n    this supports the Linux system only!\n    \"\"\"", "\n", "if", "platform", ".", "system", "(", ")", "!=", "\"Linux\"", ":", "\n", "        ", "print", "(", "'Only works on linux!'", ")", "\n", "return", "\n", "", "import", "resource", "\n", "soft", ",", "hard", "=", "resource", ".", "getrlimit", "(", "resource", ".", "RLIMIT_AS", ")", "\n", "resource", ".", "setrlimit", "(", "resource", ".", "RLIMIT_AS", ",", "(", "get_memory", "(", ")", "*", "1024", "*", "percentage", ",", "hard", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.get_memory": [[19, 27], ["open", "i.split", "str", "int"], "function", ["None"], ["", "def", "get_memory", "(", ")", ":", "\n", "    ", "with", "open", "(", "'/proc/meminfo'", ",", "'r'", ")", "as", "mem", ":", "\n", "        ", "free_memory", "=", "0", "\n", "for", "i", "in", "mem", ":", "\n", "            ", "sline", "=", "i", ".", "split", "(", ")", "\n", "if", "str", "(", "sline", "[", "0", "]", ")", "in", "(", "'MemFree:'", ",", "'Buffers:'", ",", "'Cached:'", ")", ":", "\n", "                ", "free_memory", "+=", "int", "(", "sline", "[", "1", "]", ")", "\n", "", "", "", "return", "free_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.memory": [[29, 42], ["decorators.memory_limit", "function", "print", "sys.stderr.write", "sys.exit", "decorators.get_memory"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.memory_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.get_memory"], ["", "def", "memory", "(", "percentage", "=", "0.8", ")", ":", "\n", "    ", "def", "decorator", "(", "function", ")", ":", "\n", "        ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "memory_limit", "(", "percentage", ")", "\n", "try", ":", "\n", "                ", "function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "MemoryError", ":", "\n", "                ", "mem", "=", "get_memory", "(", ")", "/", "1024", "/", "1024", "\n", "print", "(", "'Remain: %.2f GB'", "%", "mem", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "'\\n\\nERROR: Memory Exception\\n'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "", "return", "wrapper", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.decorators.time_limit": [[60, 70], ["signal.signal", "signal.alarm", "decorators.TimeoutException", "signal.alarm"], "function", ["None"], ["@", "contextmanager", "\n", "def", "time_limit", "(", "seconds", ")", ":", "\n", "    ", "def", "signal_handler", "(", "signum", ",", "frame", ")", ":", "\n", "        ", "raise", "TimeoutException", "(", "\"Timed out!\"", ")", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "signal_handler", ")", "\n", "signal", ".", "alarm", "(", "seconds", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "signal", ".", "alarm", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.metalearning.partialclass": [[32, 37], ["functools.partialmethod"], "function", ["None"], ["def", "partialclass", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "class", "NewCls", "(", "cls", ")", ":", "\n", "        ", "__init__", "=", "functools", ".", "partialmethod", "(", "cls", ".", "__init__", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "NewCls", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.metalearning.get_meta_learning_configs": [[39, 77], ["autosklearn.util.backend.create", "autosklearn.data.xy_data_manager.XYDataManager", "autosklearn.util.pipeline.get_configuration_space", "autosklearn.util.StopWatch", "os.path.basename", "autosklearn.util.StopWatch.start_task", "autosklearn.smbo.AutoMLSMBO", "autosklearn.smbo.AutoMLSMBO.get_metalearning_suggestions", "mindware.datasets.utils.load_data"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_data"], ["", "def", "get_meta_learning_configs", "(", "X", ",", "y", ",", "task_type", ",", "dataset_name", "=", "'default'", ",", "metric", "=", "'accuracy'", ",", "num_cfgs", "=", "5", ")", ":", "\n", "    ", "if", "X", "is", "None", "or", "y", "is", "None", ":", "\n", "        ", "X", ",", "y", ",", "_", "=", "load_data", "(", "dataset_name", ")", "\n", "", "backend", "=", "create", "(", "temporary_directory", "=", "None", ",", "\n", "output_directory", "=", "None", ",", "\n", "delete_tmp_folder_after_terminate", "=", "False", ",", "\n", "delete_output_folder_after_terminate", "=", "False", ",", "\n", "shared_mode", "=", "True", ")", "\n", "dm", "=", "XYDataManager", "(", "X", ",", "y", ",", "None", ",", "None", ",", "task_type", ",", "None", ",", "dataset_name", ")", "\n", "\n", "configuration_space", "=", "pipeline", ".", "get_configuration_space", "(", "dm", ".", "info", ",", "\n", "include_estimators", "=", "None", ",", "\n", "exclude_estimators", "=", "None", ",", "\n", "include_preprocessors", "=", "None", ",", "\n", "exclude_preprocessors", "=", "None", ")", "\n", "\n", "watcher", "=", "StopWatch", "(", ")", "\n", "name", "=", "os", ".", "path", ".", "basename", "(", "dm", ".", "name", ")", "\n", "watcher", ".", "start_task", "(", "name", ")", "\n", "\n", "def", "reset_data_manager", "(", "max_mem", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "automlsmbo", "=", "AutoMLSMBO", "(", "config_space", "=", "configuration_space", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "backend", "=", "backend", ",", "\n", "total_walltime_limit", "=", "1e5", ",", "\n", "func_eval_time_limit", "=", "1e5", ",", "\n", "memory_limit", "=", "1e5", ",", "\n", "metric", "=", "metric", ",", "\n", "watcher", "=", "watcher", ",", "\n", "metadata_directory", "=", "'components/meta_learning/meta_resource'", ",", "\n", "num_metalearning_cfgs", "=", "num_cfgs", ")", "\n", "automlsmbo", ".", "reset_data_manager", "=", "reset_data_manager", "\n", "automlsmbo", ".", "task", "=", "task_type", "\n", "automlsmbo", ".", "datamanager", "=", "dm", "\n", "configs", "=", "automlsmbo", ".", "get_metalearning_suggestions", "(", ")", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.metalearning.get_trans_from_str": [[79, 117], ["None"], "function", ["None"], ["", "def", "get_trans_from_str", "(", "str", ")", ":", "\n", "    ", "tran", "=", "Empty", "\n", "if", "str", "==", "'quantile_transformer'", ":", "\n", "        ", "tran", "=", "QuantileTransformation", "\n", "", "elif", "str", "==", "'select_rates'", ":", "\n", "        ", "tran", "=", "GenericUnivariateSelector", "\n", "", "elif", "str", "==", "'select_percentile_classification'", ":", "\n", "        ", "tran", "=", "PercentileSelector", "\n", "", "elif", "str", "==", "'liblinear_svc_preprocessor'", ":", "\n", "        ", "tran", "=", "LibLinearBasedSelector", "\n", "", "elif", "str", "==", "'extra_trees_preproc_for_classification'", ":", "\n", "        ", "tran", "=", "ExtraTreeBasedSelector", "\n", "", "elif", "str", "==", "'kernel_pca'", ":", "\n", "        ", "tran", "=", "ExtraTreeBasedSelector", "\n", "", "elif", "str", "==", "'extra_trees_preproc_for_classification'", ":", "\n", "        ", "tran", "=", "ExtraTreeBasedSelector", "\n", "", "elif", "str", "==", "'kernel_pca'", ":", "\n", "        ", "tran", "=", "KernelPCA", "\n", "", "elif", "str", "==", "'kitchen_sinks'", ":", "\n", "        ", "tran", "=", "KitchenSinks", "\n", "", "elif", "str", "==", "'nystroem_sampler'", ":", "\n", "        ", "tran", "=", "NystronemSampler", "\n", "", "elif", "str", "==", "'random_trees_embedding'", ":", "\n", "        ", "tran", "=", "RandomTreesEmbeddingTransformation", "\n", "", "elif", "str", "==", "'select_percentile_classification'", ":", "\n", "        ", "tran", "=", "PercentileSelector", "\n", "", "elif", "str", "==", "'truncatedSVD'", ":", "\n", "        ", "tran", "=", "SvdDecomposer", "\n", "", "elif", "str", "==", "'feature_agglomeration'", ":", "\n", "        ", "tran", "=", "FeatureAgglomerationDecomposer", "\n", "", "elif", "str", "==", "'fast_ica'", ":", "\n", "        ", "tran", "=", "FastIcaDecomposer", "\n", "", "elif", "str", "==", "'pca'", ":", "\n", "        ", "tran", "=", "PcaDecomposer", "\n", "", "elif", "str", "==", "'polynomial'", ":", "\n", "        ", "tran", "=", "PolynomialTransformation", "\n", "\n", "", "return", "tran", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.__init__": [[32, 34], ["os.cpu_count"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_workers", ":", "int", "=", "None", ")", ":", "\n", "        ", "self", ".", "processes", "=", "max_workers", "or", "os", ".", "cpu_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.map": [[35, 56], ["concurrent.futures.ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor.map"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.map"], ["", "def", "map", "(", "self", ",", "\n", "func", ":", "Callable", ",", "\n", "iterable", ":", "Iterable", ",", "\n", "timeout", ":", "float", "=", "None", ",", "\n", "callback_timeout", ":", "Callable", "=", "None", ",", "\n", "daemon", ":", "bool", "=", "True", "\n", ")", "->", "Iterable", ":", "\n", "        ", "\"\"\"\n        :param func: the function to execute\n        :param iterable: an iterable of function arguments\n        :param timeout: after this time, the process executing the function\n                will be killed if it did not finish\n        :param callback_timeout: this function will be called, if the task\n                times out. It gets the same arguments as the original function\n        :param daemon: define the child process as daemon\n        \"\"\"", "\n", "executor", "=", "ThreadPoolExecutor", "(", "max_workers", "=", "self", ".", "processes", ")", "\n", "params", "=", "(", "{", "'func'", ":", "func", ",", "'fn_args'", ":", "p_args", ",", "\"p_kwargs\"", ":", "{", "}", ",", "\n", "'timeout'", ":", "timeout", ",", "'callback_timeout'", ":", "callback_timeout", ",", "\n", "'daemon'", ":", "daemon", "}", "for", "p_args", "in", "iterable", ")", "\n", "return", "executor", ".", "map", "(", "self", ".", "_submit_unpack_kwargs", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor._submit_unpack_kwargs": [[57, 61], ["thread_executor.ProcessKillingExecutor.submit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.ParallelFetcher.submit"], ["", "def", "_submit_unpack_kwargs", "(", "self", ",", "params", ")", ":", "\n", "        ", "\"\"\" unpack the kwargs and call submit \"\"\"", "\n", "\n", "return", "self", ".", "submit", "(", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.submit": [[62, 102], ["multiprocessing.Queue", "multiprocessing.Process", "multiprocessing.Process.start", "multiprocessing.Process.join", "multiprocessing.Process.is_alive", "isinstance", "multiprocessing.Queue.empty", "multiprocessing.Queue.get", "callback_timeout", "multiprocessing.Process.terminate", "multiprocessing.Process.join"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty"], ["", "def", "submit", "(", "self", ",", "\n", "func", ":", "Callable", ",", "\n", "fn_args", ":", "Any", ",", "\n", "p_kwargs", ":", "Dict", ",", "\n", "timeout", ":", "float", ",", "\n", "callback_timeout", ":", "Callable", "[", "[", "Any", "]", ",", "Any", "]", ",", "\n", "daemon", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Submits a callable to be executed with the given arguments.\n        Schedules the callable to be executed as func(*args, **kwargs) in a new\n         process.\n        :param func: the function to execute\n        :param fn_args: the arguments to pass to the function. Can be one argument\n                or a tuple of multiple args.\n        :param p_kwargs: the kwargs to pass to the function\n        :param timeout: after this time, the process executing the function\n                will be killed if it did not finish\n        :param callback_timeout: this function will be called with the same\n                arguments, if the task times out.\n        :param daemon: run the child process as daemon\n        :return: the result of the function, or None if the process failed or\n                timed out\n        \"\"\"", "\n", "p_args", "=", "fn_args", "if", "isinstance", "(", "fn_args", ",", "tuple", ")", "else", "(", "fn_args", ",", ")", "\n", "queue", "=", "Queue", "(", ")", "\n", "p", "=", "Process", "(", "target", "=", "self", ".", "_process_run", ",", "\n", "args", "=", "(", "queue", ",", "func", ",", "fn_args", ",", ")", ",", "kwargs", "=", "p_kwargs", ")", "\n", "\n", "if", "daemon", ":", "\n", "            ", "p", ".", "deamon", "=", "True", "\n", "\n", "", "p", ".", "start", "(", ")", "\n", "p", ".", "join", "(", "timeout", "=", "timeout", ")", "\n", "if", "not", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "return", "queue", ".", "get", "(", ")", "\n", "", "if", "callback_timeout", ":", "\n", "            ", "callback_timeout", "(", "*", "p_args", ",", "**", "p_kwargs", ")", "\n", "", "if", "p", ".", "is_alive", "(", ")", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor._process_run": [[103, 113], ["queue.put", "func"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_process_run", "(", "queue", ":", "Queue", ",", "func", ":", "Callable", "[", "[", "Any", "]", ",", "Any", "]", "=", "None", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Executes the specified function as func(*args, **kwargs).\n        The result will be stored in the shared dictionary\n        :param func: the function to execute\n        :param queue: a Queue\n        \"\"\"", "\n", "queue", ".", "put", "(", "func", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.functions.get_increasing_sequence": [[4, 15], ["increasing_sequence.append"], "function", ["None"], ["def", "get_increasing_sequence", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n        Return the increasing sequence.\n    :param data:\n    :return:\n    \"\"\"", "\n", "increasing_sequence", "=", "[", "data", "[", "0", "]", "]", "\n", "for", "item", "in", "data", "[", "1", ":", "]", ":", "\n", "        ", "_inc", "=", "increasing_sequence", "[", "-", "1", "]", "if", "item", "<=", "increasing_sequence", "[", "-", "1", "]", "else", "item", "\n", "increasing_sequence", ".", "append", "(", "_inc", ")", "\n", "", "return", "increasing_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.functions.is_imbalanced_dataset": [[17, 31], ["list", "list", "set", "sorted", "sorted.append", "len", "list.count"], "function", ["None"], ["", "def", "is_imbalanced_dataset", "(", "data_node", ":", "DataNode", ")", ":", "\n", "    ", "\"\"\"\n        Identify this dataset is balanced or not.\n    :param data_node:\n    :return: boolean.\n    \"\"\"", "\n", "labels", "=", "list", "(", "data_node", ".", "data", "[", "1", "]", ")", "\n", "cnts", "=", "list", "(", ")", "\n", "for", "val", "in", "set", "(", "labels", ")", ":", "\n", "        ", "cnts", ".", "append", "(", "labels", ".", "count", "(", "val", ")", ")", "\n", "", "cnts", "=", "sorted", "(", "cnts", ")", "\n", "# print('label distribution', cnts)", "\n", "assert", "len", "(", "cnts", ")", ">", "1", "\n", "return", "cnts", "[", "0", "]", "*", "4", "<=", "cnts", "[", "-", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Arithmetic.fit": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "fit", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Arithmetic.transform": [[7, 9], ["NotImplementedError"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Log.transform": [[13, 15], ["numpy.log", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "np", ".", "abs", "(", "array", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Sqrt.transform": [[19, 21], ["numpy.sqrt", "numpy.abs"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "np", ".", "abs", "(", "array", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Square.transform": [[24, 26], ["numpy.square"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "np", ".", "square", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Freq.__init__": [[29, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "hashmap", "=", "[", "]", "\n", "self", ".", "length", "=", "None", "\n", "self", ".", "col_num", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Freq.fit": [[34, 43], ["range", "counters.append", "operations.Freq.hashmap.append", "Counter"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "array", ")", ":", "\n", "        ", "from", "collections", "import", "Counter", "\n", "self", ".", "col_num", "=", "array", ".", "shape", "[", "1", "]", "\n", "self", ".", "length", "=", "array", ".", "shape", "[", "0", "]", "\n", "counters", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "col_num", ")", ":", "\n", "            ", "counters", ".", "append", "(", "Counter", "(", "array", "[", ":", ",", "i", "]", ")", ")", "\n", "", "for", "ct", "in", "counters", ":", "\n", "            ", "self", ".", "hashmap", ".", "append", "(", "{", "x", ":", "ct", "[", "x", "]", "/", "self", ".", "length", "for", "x", "in", "ct", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Freq.transform": [[44, 57], ["range", "numpy.array().transpose", "result.append", "numpy.array", "col_result.append", "col_result.append"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "col_num", "=", "array", ".", "shape", "[", "1", "]", "\n", "assert", "(", "self", ".", "col_num", "==", "col_num", ")", "\n", "for", "i", "in", "range", "(", "col_num", ")", ":", "\n", "            ", "col_result", "=", "[", "]", "\n", "for", "x", "in", "array", "[", ":", ",", "i", "]", ":", "\n", "                ", "if", "x", "in", "self", ".", "hashmap", "[", "i", "]", ":", "\n", "                    ", "col_result", ".", "append", "(", "self", ".", "hashmap", "[", "i", "]", "[", "x", "]", ")", "\n", "", "else", ":", "\n", "                    ", "col_result", ".", "append", "(", "1", "/", "self", ".", "length", ")", "\n", "", "", "result", ".", "append", "(", "col_result", ")", "\n", "", "return", "np", ".", "array", "(", "result", ")", ".", "transpose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Round.transform": [[60, 62], ["numpy.around"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "np", ".", "around", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Tanh.transform": [[65, 67], ["numpy.tanh"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "np", ".", "tanh", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Sigmoid.transform": [[70, 72], ["numpy.exp", "numpy.array"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "np", ".", "array", "(", "array", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.BinaryArithmetic.fit": [[74, 76], ["None"], "methods", ["None"], ["    ", "def", "fit", "(", "self", ",", "array1", ",", "array2", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.BinaryArithmetic.transform": [[77, 79], ["NotImplementedError"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "array1", ",", "array2", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Addition.transform": [[82, 84], ["None"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array1", ",", "array2", ")", ":", "\n", "        ", "return", "array1", "+", "array2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Subtract.transform": [[87, 89], ["None"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array1", ",", "array2", ")", ":", "\n", "        ", "return", "array1", "-", "array2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Multiply.transform": [[92, 94], ["None"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array1", ",", "array2", ")", ":", "\n", "        ", "return", "array1", "*", "array2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.operations.Division.transform": [[97, 99], ["None"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "array1", ",", "array2", ")", ":", "\n", "        ", "return", "array1", "/", "array2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.dl_util.EarlyStop.__init__": [[5, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patience", "=", "20", ",", "mode", "=", "'min'", ")", ":", "\n", "        ", "self", ".", "patience", "=", "patience", "\n", "assert", "mode", "in", "[", "'max'", ",", "'min'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "cur_value", "=", "np", ".", "inf", "\n", "", "else", ":", "\n", "            ", "self", ".", "cur_value", "=", "-", "np", ".", "inf", "\n", "", "self", ".", "cur_patience", "=", "0", "\n", "self", ".", "if_early_stop", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.dl_util.EarlyStop.update": [[16, 25], ["dl_util.EarlyStop._check_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.dl_util.EarlyStop._check_value"], ["", "def", "update", "(", "self", ",", "val_value", ")", ":", "\n", "        ", "if_update", "=", "self", ".", "_check_value", "(", "val_value", ")", "\n", "if", "if_update", ":", "\n", "            ", "self", ".", "cur_value", "=", "val_value", "\n", "self", ".", "cur_patience", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "cur_patience", "+=", "1", "\n", "if", "self", ".", "cur_patience", ">", "self", ".", "patience", ":", "\n", "                ", "self", ".", "if_early_stop", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.dl_util.EarlyStop._check_value": [[26, 35], ["None"], "methods", ["None"], ["", "", "", "def", "_check_value", "(", "self", ",", "val_value", ")", ":", "\n", "        ", "\"\"\"\n        :param val_value:\n        :return: True if val_value is better than the current value\n        \"\"\"", "\n", "if", "self", ".", "mode", "==", "'min'", ":", "\n", "            ", "return", "val_value", "<", "self", ".", "cur_value", "\n", "", "else", ":", "\n", "            ", "return", "val_value", ">", "self", ".", "cur_value", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.sample_configurations": [[5, 29], ["configuration_space.seed", "len", "result.append", "len", "configuration_space.sample_configuration", "configuration_space.get_default_configuration", "result.append"], "function", ["None"], ["def", "sample_configurations", "(", "configuration_space", ":", "ConfigurationSpace", ",", "\n", "sample_size", ":", "int", ",", "historical_configs", ":", "List", "[", "Configuration", "]", ",", "seed", "=", "1", ")", ":", "\n", "    ", "configuration_space", ".", "seed", "(", "seed", ")", "\n", "result", "=", "[", "]", "\n", "sample_cnt", "=", "0", "\n", "if", "len", "(", "historical_configs", ")", "==", "0", ":", "\n", "        ", "result", ".", "append", "(", "configuration_space", ".", "get_default_configuration", "(", ")", ")", "\n", "\n", "", "while", "len", "(", "result", ")", "<", "sample_size", ":", "\n", "        ", "config", "=", "configuration_space", ".", "sample_configuration", "(", "1", ")", "\n", "if", "config", "not", "in", "result", "and", "config", "not", "in", "historical_configs", ":", "\n", "            ", "result", ".", "append", "(", "config", ")", "\n", "", "sample_cnt", "+=", "1", "\n", "if", "sample_cnt", ">", "50", "*", "sample_size", ":", "\n", "            ", "break", "\n", "\n", "# if len(result) == 0:", "\n", "#     hist_num = len(historical_configs)", "\n", "#     if hist_num > sample_size:", "\n", "#         idxs = random.sample(range(len(historical_configs)), sample_size)", "\n", "#         result = [historical_configs[idx] for idx in idxs]", "\n", "#     else:", "\n", "#         result = historical_configs.copy()", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_true": [[31, 35], ["None"], "function", ["None"], ["", "def", "check_true", "(", "p", ")", ":", "\n", "    ", "if", "p", "in", "(", "\"True\"", ",", "\"true\"", ",", "1", ",", "True", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_false": [[37, 41], ["None"], "function", ["None"], ["", "def", "check_false", "(", "p", ")", ":", "\n", "    ", "if", "p", "in", "(", "\"False\"", ",", "\"false\"", ",", "0", ",", "False", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none": [[43, 47], ["None"], "function", ["None"], ["", "def", "check_none", "(", "p", ")", ":", "\n", "    ", "if", "p", "in", "(", "\"None\"", ",", "\"none\"", ",", "None", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool": [[49, 56], ["configspace_utils.check_false", "configspace_utils.check_true", "ValueError", "str"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_false", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_true"], ["", "def", "check_for_bool", "(", "p", ")", ":", "\n", "    ", "if", "check_false", "(", "p", ")", ":", "\n", "        ", "return", "False", "\n", "", "elif", "check_true", "(", "p", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s is not a bool\"", "%", "str", "(", "p", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.image_util.Image2vector.__init__": [[13, 41], ["resnet50", "model.conv1", "model.bn1", "model.relu", "model.maxpool", "model.layer1", "model.layer2", "model.layer3", "model.layer4", "model.avgpool", "torch.flatten", "vgg19", "NotImplementedError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", "=", "'resnet'", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "if", "model", "==", "'resnet'", ":", "\n", "            ", "import", "torch", "\n", "from", "torchvision", ".", "models", "import", "resnet50", "\n", "\n", "def", "embedding", "(", "model", ",", "x", ")", ":", "\n", "                ", "x", "=", "model", ".", "conv1", "(", "x", ")", "\n", "x", "=", "model", ".", "bn1", "(", "x", ")", "\n", "x", "=", "model", ".", "relu", "(", "x", ")", "\n", "x", "=", "model", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "model", ".", "layer1", "(", "x", ")", "\n", "x", "=", "model", ".", "layer2", "(", "x", ")", "\n", "x", "=", "model", ".", "layer3", "(", "x", ")", "\n", "x", "=", "model", ".", "layer4", "(", "x", ")", "\n", "x", "=", "model", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "return", "x", "\n", "\n", "", "self", ".", "model", "=", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "", "elif", "model", "==", "'vgg'", ":", "\n", "            ", "from", "torchvision", ".", "models", "import", "vgg19", "\n", "self", ".", "model", "=", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "self", ".", "device", "=", "'cuda'", "if", "use_gpu", "else", "'cpu'", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.image_util.Image2vector.predict": [[42, 68], ["image_util.Image2vector.model.to", "Tensor().to", "DataLoader", "TensorDataset", "torch.no_grad", "enumerate", "Tensor", "image_util.Image2vector.embedding", "image_util.Image2vector.to().detach().numpy", "numpy.concatenate", "image_util.Image2vector.to().detach", "image_util.Image2vector.to().detach().numpy", "image_util.Image2vector.to", "image_util.Image2vector.to().detach", "image_util.Image2vector.to"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"\n        :param images: numpy array\n        :return: numpy array of shape (n_samples,embedding_size)\n        \"\"\"", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "import", "torch", "\n", "from", "torch", "import", "Tensor", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", ",", "TensorDataset", "\n", "\n", "images", "=", "Tensor", "(", "images", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "image_loader", "=", "DataLoader", "(", "\n", "TensorDataset", "(", "images", ")", ",", "batch_size", "=", "128", ",", "shuffle", "=", "False", ")", "\n", "\n", "embeddings", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "image_loader", ")", ":", "\n", "                ", "batch_x", "=", "data", "[", "0", "]", "\n", "logits", "=", "self", ".", "embedding", "(", "self", ".", "model", ",", "batch_x", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                    ", "embeddings", "=", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "embeddings", "=", "np", ".", "concatenate", "(", "(", "embeddings", ",", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "\n", "", "", "", "return", "embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.__init__": [[45, 48], ["collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_class", ")", ":", "\n", "        ", "self", ".", "base_class", "=", "base_class", "\n", "self", ".", "components", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component": [[49, 73], ["set", "inspect.isclass", "TypeError", "classifier.get_properties", "ValueError", "ValueError", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_properties"], ["", "def", "add_component", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "inspect", ".", "isclass", "(", "obj", ")", "and", "self", ".", "base_class", "in", "obj", ".", "__bases__", ":", "\n", "            ", "name", "=", "obj", ".", "__name__", "\n", "classifier", "=", "obj", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'add_component works only with a subclass of %s'", "%", "\n", "str", "(", "self", ".", "base_class", ")", ")", "\n", "\n", "", "properties", "=", "set", "(", "classifier", ".", "get_properties", "(", ")", ")", "\n", "should_be_there", "=", "{", "'shortname'", ",", "'name'", ",", "'handles_regression'", ",", "\n", "'handles_classification'", ",", "'handles_multiclass'", ",", "\n", "'handles_multilabel'", ",", "'is_deterministic'", ",", "\n", "'input'", ",", "'output'", "}", "\n", "for", "property", "in", "properties", ":", "\n", "            ", "if", "property", "not", "in", "should_be_there", ":", "\n", "                ", "raise", "ValueError", "(", "'Property %s must not be specified for '", "\n", "'algorithm %s. Only the following properties '", "\n", "'can be specified: %s'", "%", "\n", "(", "property", ",", "name", ",", "str", "(", "should_be_there", ")", ")", ")", "\n", "", "", "for", "property", "in", "should_be_there", ":", "\n", "            ", "if", "property", "not", "in", "properties", ":", "\n", "                ", "raise", "ValueError", "(", "'Property %s not specified for algorithm %s'", ")", "\n", "\n", "", "", "self", ".", "components", "[", "name", "]", "=", "classifier", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates": [[8, 12], ["builtin_candidates.copy", "builtin_candidates.copy.update"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["def", "get_combined_candidtates", "(", "builtin_candidates", ",", "thirdparty_candidates", ")", ":", "\n", "    ", "candidates", "=", "builtin_candidates", ".", "copy", "(", ")", "\n", "candidates", ".", "update", "(", "thirdparty_candidates", ".", "components", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates": [[14, 23], ["builtin_candidates.copy", "builtin_candidates.copy.update", "tran_types.append"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["", "def", "get_combined_fe_candidtates", "(", "builtin_candidates", ",", "thirdparty_candidates", ",", "tran_types", "=", "None", ")", ":", "\n", "    ", "candidates", "=", "builtin_candidates", ".", "copy", "(", ")", "\n", "candidates", ".", "update", "(", "thirdparty_candidates", ".", "components", ")", "\n", "if", "tran_types", ":", "\n", "        ", "for", "key", "in", "thirdparty_candidates", ".", "components", ":", "\n", "            ", "tran_types", ".", "append", "(", "thirdparty_candidates", ".", "components", "[", "key", "]", ".", "type", ")", "\n", "", "return", "candidates", ",", "tran_types", "\n", "", "else", ":", "\n", "        ", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.find_components": [[25, 42], ["collections.OrderedDict", "pkgutil.iter_modules", "importlib.import_module", "inspect.getmembers", "inspect.isclass", "issubclass"], "function", ["None"], ["", "", "def", "find_components", "(", "package", ",", "directory", ",", "base_class", ")", ":", "\n", "    ", "components", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "module_loader", ",", "module_name", ",", "ispkg", "in", "pkgutil", ".", "iter_modules", "(", "[", "directory", "]", ")", ":", "\n", "        ", "full_module_name", "=", "\"%s.%s\"", "%", "(", "package", ",", "module_name", ")", "\n", "if", "full_module_name", "not", "in", "sys", ".", "modules", "and", "not", "ispkg", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "full_module_name", ")", "\n", "\n", "for", "member_name", ",", "obj", "in", "inspect", ".", "getmembers", "(", "module", ")", ":", "\n", "                ", "if", "inspect", ".", "isclass", "(", "obj", ")", "and", "issubclass", "(", "obj", ",", "base_class", ")", "and", "obj", "!=", "base_class", ":", "\n", "# Keep in mind that this only instantiates the ensemble_wrapper,", "\n", "# but not the real target classifier", "\n", "                    ", "classifier", "=", "obj", "\n", "components", "[", "module_name", "]", "=", "classifier", "\n", "\n", "", "", "", "", "return", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.BaseTopKModelSaver.__init__": [[14, 20], ["os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "model_dir", ",", "identifier", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "identifier", "=", "identifier", "\n", "self", ".", "sorted_list_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'%s_topk_config.pkl'", "%", "identifier", ")", "\n", "self", ".", "sorted_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.BaseTopKModelSaver.get_topk_config": [[21, 28], ["os.path.exists", "dict", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "@", "staticmethod", "\n", "def", "get_topk_config", "(", "config_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "            ", "return", "dict", "(", ")", "\n", "", "with", "open", "(", "config_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "content", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.BaseTopKModelSaver.save_topk_config": [[29, 32], ["open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "save_topk_config", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "sorted_list_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "self", ".", "sorted_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_configuration_id": [[35, 47], ["sorted", "dict", "sorted", "hashlib.sha1", "hashlib.sha1.hexdigest", "config.items", "dict.items", "isinstance", "data_list.append", "data_id.encode", "round", "str"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_configuration_id", "(", "config", ":", "dict", ")", ":", "\n", "        ", "_config", "=", "sorted", "(", "config", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "data_dict", "=", "dict", "(", "_config", ")", "\n", "data_list", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "sorted", "(", "data_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "                ", "value", "=", "round", "(", "value", ",", "5", ")", "\n", "", "data_list", ".", "append", "(", "'%s-%s'", "%", "(", "key", ",", "str", "(", "value", ")", ")", ")", "\n", "", "data_id", "=", "'_'", ".", "join", "(", "data_list", ")", "\n", "sha", "=", "hashlib", ".", "sha1", "(", "data_id", ".", "encode", "(", "'utf8'", ")", ")", "\n", "return", "sha", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config": [[48, 51], ["os.path.join", "topk_saver.CombinedTopKModelSaver.get_configuration_id"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_configuration_id"], ["", "@", "staticmethod", "\n", "def", "get_path_by_config", "(", "output_dir", ",", "config", ",", "identifier", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'%s_%s.pkl'", "%", "(", "identifier", ",", "CombinedTopKModelSaver", ".", "get_configuration_id", "(", "config", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.add": [[52, 105], ["dict.copy", "dict", "topk_saver.CombinedTopKModelSaver.get_path_by_config", "topk_saver.CombinedTopKModelSaver.get_topk_config", "topk_saver.CombinedTopKModelSaver.sorted_dict.get", "sorted", "list", "len", "topk_saver.CombinedTopKModelSaver.append", "enumerate", "len", "dict.copy.items", "topk_saver.CombinedTopKModelSaver.remove", "enumerate", "topk_saver.CombinedTopKModelSaver.insert", "topk_saver.CombinedTopKModelSaver.append", "len", "topk_saver.CombinedTopKModelSaver.insert", "topk_saver.CombinedTopKModelSaver.append", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.BaseTopKModelSaver.get_topk_config"], ["", "def", "add", "(", "self", ",", "config", ",", "perf", ",", "estimator_id", ")", ":", "\n", "        ", "\"\"\"\n            perf: the larger, the better.\n        :param estimator_id:\n        :param config:\n        :param perf:\n        :return:\n        \"\"\"", "\n", "_config", "=", "config", ".", "copy", "(", ")", "\n", "config", "=", "dict", "(", "sorted", "(", "_config", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n", "model_path_id", "=", "self", ".", "get_path_by_config", "(", "self", ".", "model_dir", ",", "config", ",", "self", ".", "identifier", ")", "\n", "model_path_removed", "=", "None", "\n", "save_flag", ",", "delete_flag", "=", "False", ",", "False", "\n", "self", ".", "sorted_dict", "=", "self", ".", "get_topk_config", "(", "self", ".", "sorted_list_path", ")", "\n", "sorted_list", "=", "self", ".", "sorted_dict", ".", "get", "(", "estimator_id", ",", "list", "(", ")", ")", "\n", "\n", "# Update existed configs", "\n", "for", "sorted_element", "in", "sorted_list", ":", "\n", "            ", "if", "config", "==", "sorted_element", "[", "0", "]", ":", "\n", "                ", "if", "perf", ">", "sorted_element", "[", "1", "]", ":", "\n", "                    ", "sorted_list", ".", "remove", "(", "sorted_element", ")", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "sorted_list", ")", ":", "\n", "                        ", "if", "perf", ">", "item", "[", "1", "]", ":", "\n", "                            ", "sorted_list", ".", "insert", "(", "idx", ",", "(", "config", ",", "perf", ",", "model_path_id", ")", ")", "\n", "break", "\n", "", "if", "idx", "==", "len", "(", "sorted_list", ")", "-", "1", ":", "\n", "                            ", "sorted_list", ".", "append", "(", "(", "config", ",", "perf", ",", "model_path_id", ")", ")", "\n", "break", "\n", "", "", "self", ".", "sorted_dict", "[", "estimator_id", "]", "=", "sorted_list", "\n", "", "return", "True", ",", "model_path_id", ",", "False", ",", "model_path_removed", "\n", "\n", "", "", "if", "len", "(", "sorted_list", ")", "==", "0", ":", "\n", "            ", "sorted_list", ".", "append", "(", "(", "config", ",", "perf", ",", "model_path_id", ")", ")", "\n", "", "else", ":", "\n", "# Sorted list is in a descending order.", "\n", "            ", "for", "idx", ",", "item", "in", "enumerate", "(", "sorted_list", ")", ":", "\n", "                ", "if", "perf", ">", "item", "[", "1", "]", ":", "\n", "                    ", "sorted_list", ".", "insert", "(", "idx", ",", "(", "config", ",", "perf", ",", "model_path_id", ")", ")", "\n", "break", "\n", "", "if", "idx", "==", "len", "(", "sorted_list", ")", "-", "1", ":", "\n", "                    ", "sorted_list", ".", "append", "(", "(", "config", ",", "perf", ",", "model_path_id", ")", ")", "\n", "break", "\n", "\n", "", "", "", "if", "len", "(", "sorted_list", ")", ">", "self", ".", "k", ":", "\n", "            ", "model_path_removed", "=", "sorted_list", "[", "-", "1", "]", "[", "2", "]", "\n", "delete_flag", "=", "True", "\n", "sorted_list", "=", "sorted_list", "[", ":", "-", "1", "]", "\n", "", "if", "model_path_id", "in", "[", "item", "[", "2", "]", "for", "item", "in", "sorted_list", "]", ":", "\n", "            ", "save_flag", "=", "True", "\n", "\n", "", "self", ".", "sorted_dict", "[", "estimator_id", "]", "=", "sorted_list", "\n", "\n", "return", "save_flag", ",", "model_path_id", ",", "delete_flag", ",", "model_path_removed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.load_combined_transformer_estimator": [[6, 11], ["os.path.join", "open", "pickle.load", "topk_saver.CombinedTopKModelSaver.get_configuration_id"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_configuration_id"], ["def", "load_combined_transformer_estimator", "(", "model_dir", ",", "config", ",", "timestamp", ")", ":", "\n", "    ", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'%s_%s.pkl'", "%", "(", "timestamp", ",", "CombinedTopKModelSaver", ".", "get_configuration_id", "(", "config", ")", ")", ")", "\n", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "return", "op_list", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.__init__": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.read_key_values_from_file": [[23, 36], ["dict", "config_parser.ConfigParser.logger.info", "open", "list", "map", "line.split", "x.strip"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.map"], ["", "def", "read_key_values_from_file", "(", "self", ",", "filename", ",", "delimiter", "=", "' '", ")", ":", "\n", "        ", "key_values", "=", "dict", "(", ")", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Config file %s not found!\"", "%", "filename", ")", "\n", "return", "key_values", "\n", "\n", "# open the config file", "\n", "", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "configfile", ":", "\n", "            ", "for", "line", "in", "configfile", ":", "\n", "                ", "elements", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "line", ".", "split", "(", "delimiter", ")", ")", ")", "\n", "key_values", "[", "(", "elements", "[", "0", "]", ",", "elements", "[", "1", "]", ")", "]", "=", "elements", "[", "2", ":", "]", "\n", "", "", "return", "key_values", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.read": [[37, 94], ["dict", "key_values_dict.items", "config_parser.ConfigParser.read_key_values_from_file", "config_parser.ConfigParser.logger.info", "hp_space_dict[].add_hyperparameter", "ConfigSpace.ConfigurationSpace", "config_parser.parse_set", "hp_type", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "config_parser.parse_list", "len", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.Constant", "ValueError", "int", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.Constant", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.read_key_values_from_file", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.parse_set", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.parse_list"], ["", "def", "read", "(", "self", ",", "filename", ",", "key_values_dict", "=", "None", ")", ":", "\n", "        ", "key_values_dict", "=", "key_values_dict", "if", "key_values_dict", "else", "self", ".", "read_key_values_from_file", "(", "filename", ")", "\n", "\n", "if", "key_values_dict", "is", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Nothing to parse for ConfigParser!'", ")", "\n", "\n", "", "hp_space_dict", "=", "dict", "(", ")", "\n", "for", "(", "estimator_id", ",", "hp_name", ")", ",", "values", "in", "key_values_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "estimator_id", "not", "in", "hp_space_dict", ":", "\n", "                ", "hp_space_dict", "[", "estimator_id", "]", "=", "ConfigurationSpace", "(", ")", "\n", "", "range", "=", "values", "[", "0", "]", "\n", "\n", "# Categorical", "\n", "if", "range", "[", "0", "]", "==", "'{'", ":", "\n", "                ", "hp_type", "=", "values", "[", "1", "]", "\n", "if", "hp_type", "==", "'int'", ":", "\n", "                    ", "hp_type", "=", "int", "\n", "", "elif", "hp_type", "==", "'float'", ":", "\n", "                    ", "hp_type", "=", "float", "\n", "", "else", ":", "\n", "                    ", "hp_type", "=", "str", "\n", "", "choices", "=", "parse_set", "(", "range", ",", "hp_type", ")", "\n", "default_value", "=", "hp_type", "(", "values", "[", "2", "]", ")", "\n", "hp", "=", "CategoricalHyperparameter", "(", "hp_name", ",", "choices", ",", "default_value", "=", "default_value", ")", "\n", "# Uniform", "\n", "", "elif", "range", "[", "0", "]", "==", "'['", ":", "\n", "                ", "hp_type", "=", "values", "[", "1", "]", "\n", "if", "hp_type", "==", "'int'", ":", "\n", "                    ", "hp_type", "=", "int", "\n", "", "elif", "hp_type", "==", "'float'", ":", "\n", "                    ", "hp_type", "=", "float", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid type %s for uniform hyperparameter!\"", "%", "hp_type", ")", "\n", "", "bounds", "=", "parse_list", "(", "range", ",", "hp_type", ")", "\n", "default_value", "=", "values", "[", "2", "]", "\n", "if", "len", "(", "values", ")", ">", "3", ":", "\n", "                    ", "if_log", "=", "values", "[", "3", "]", "\n", "", "else", ":", "\n", "                    ", "if_log", "=", "False", "\n", "", "if", "hp_type", "==", "'int'", ":", "\n", "                    ", "hp", "=", "UniformIntegerHyperparameter", "(", "hp_name", ",", "lower", "=", "bounds", "[", "0", "]", ",", "upper", "=", "bounds", "[", "1", "]", ",", "\n", "default_value", "=", "default_value", ",", "log", "=", "if_log", ")", "\n", "", "else", ":", "\n", "                    ", "hp", "=", "UniformFloatHyperparameter", "(", "hp_name", ",", "lower", "=", "bounds", "[", "0", "]", ",", "upper", "=", "bounds", "[", "1", "]", ",", "\n", "default_value", "=", "default_value", ",", "log", "=", "if_log", ")", "\n", "# Constant", "\n", "", "", "else", ":", "\n", "                ", "hp_type", "=", "values", "[", "1", "]", "\n", "if", "hp_type", "==", "'int'", ":", "\n", "                    ", "hp", "=", "Constant", "(", "hp_name", ",", "int", "(", "range", ")", ")", "\n", "", "elif", "hp_type", "==", "'float'", ":", "\n", "                    ", "hp", "=", "Constant", "(", "hp_name", ",", "float", "(", "range", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hp", "=", "Constant", "(", "hp_name", ",", "range", ")", "\n", "", "", "hp_space_dict", "[", "estimator_id", "]", ".", "add_hyperparameter", "(", "hp", ")", "\n", "\n", "", "return", "hp_space_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.parse_set": [[6, 9], ["list", "map", "string[].split", "hp_type"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.map"], ["def", "parse_set", "(", "string", ",", "hp_type", ")", ":", "\n", "    ", "choices", "=", "list", "(", "map", "(", "lambda", "x", ":", "hp_type", "(", "x", ")", ",", "string", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", ")", ")", "\n", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.parse_list": [[11, 17], ["string[].split", "list", "len", "ValueError", "map", "hp_type"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.map"], ["", "def", "parse_list", "(", "string", ",", "hp_type", ")", ":", "\n", "    ", "bounds", "=", "string", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "bounds", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid bound for uniform hyperparameter\"", ")", "\n", "", "bounds", "=", "list", "(", "map", "(", "lambda", "x", ":", "hp_type", "(", "x", ")", ",", "bounds", ")", ")", "\n", "return", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax": [[4, 21], ["len", "numpy.isnan().any", "numpy.transpose", "numpy.exp", "numpy.array", "numpy.array", "numpy.max().reshape", "numpy.sum().reshape", "numpy.isnan", "len", "numpy.exp", "numpy.max", "numpy.sum"], "function", ["None"], ["def", "softmax", "(", "df", ")", ":", "\n", "    ", "if", "len", "(", "df", ".", "shape", ")", "==", "1", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "df", ")", ".", "any", "(", ")", ":", "\n", "            ", "ppositive", "=", "np", ".", "array", "(", "[", "0.5", "]", "*", "len", "(", "df", ")", ")", "\n", "", "else", ":", "\n", "            ", "df", "[", "df", ">", "20", "]", "=", "20", "\n", "df", "[", "df", "<", "-", "20", "]", "=", "-", "20", "\n", "ppositive", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "df", ")", ")", "\n", "ppositive", "[", "ppositive", ">", "0.999999", "]", "=", "1", "\n", "ppositive", "[", "ppositive", "<", "0.0000001", "]", "=", "0", "\n", "", "return", "np", ".", "transpose", "(", "np", ".", "array", "(", "(", "1", "-", "ppositive", ",", "ppositive", ")", ")", ")", "\n", "", "else", ":", "\n", "# Compute the Softmax like it is described here:", "\n", "# http://www.iro.umontreal.ca/~bengioy/dlbook/numerical.html", "\n", "        ", "tmp", "=", "df", "-", "np", ".", "max", "(", "df", ",", "axis", "=", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "tmp", "=", "np", ".", "exp", "(", "tmp", ")", "\n", "return", "tmp", "/", "np", ".", "sum", "(", "tmp", ",", "axis", "=", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.convert_multioutput_multiclass_to_multilabel": [[23, 41], ["isinstance", "isinstance", "ValueError", "numpy.ndarray", "enumerate", "len", "len", "ValueError"], "function", ["None"], ["", "", "def", "convert_multioutput_multiclass_to_multilabel", "(", "probas", ")", ":", "\n", "    ", "if", "isinstance", "(", "probas", ",", "np", ".", "ndarray", ")", "and", "len", "(", "probas", ".", "shape", ")", ">", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'New unsupported sklearn output!'", ")", "\n", "", "if", "isinstance", "(", "probas", ",", "list", ")", ":", "\n", "        ", "multioutput_probas", "=", "np", ".", "ndarray", "(", "(", "probas", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "len", "(", "probas", ")", ")", ")", "\n", "for", "i", ",", "output", "in", "enumerate", "(", "probas", ")", ":", "\n", "            ", "if", "output", ".", "shape", "[", "1", "]", ">", "2", ":", "\n", "                ", "raise", "ValueError", "(", "'Multioutput-Multiclass supported by '", "\n", "'scikit-learn, but not by auto-sklearn!'", ")", "\n", "# Only copy the probability of something having class 1", "\n", "", "elif", "output", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "                ", "multioutput_probas", "[", ":", ",", "i", "]", "=", "output", "[", ":", ",", "1", "]", "\n", "# This label was never observed positive in the training data,", "\n", "# therefore it is only the probability for the label being False", "\n", "", "else", ":", "\n", "                ", "multioutput_probas", "[", ":", ",", "i", "]", "=", "0", "\n", "", "", "probas", "=", "multioutput_probas", "\n", "", "return", "probas", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields": [[9, 13], ["isinstance", "enumerate"], "function", ["None"], ["'gradient_boosting'", ",", "'adaboost'", "]", "\n", "algo_str", "=", "'|'", ".", "join", "(", "algorithms", ")", "\n", "pattern", "=", "'(.*)_(%s)_(\\d+)_(\\d+)_20.pkl'", "%", "algo_str", "\n", "print", "(", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.find_components": [[15, 33], ["collections.OrderedDict", "pkgutil.iter_modules", "importlib.import_module", "inspect.getmembers", "inspect.isclass", "issubclass"], "function", ["None"], ["def", "rename", "(", ")", ":", "\n", "    ", "for", "_filename", "in", "filename_list", ":", "\n", "        ", "used_name", "=", "data_folder", "+", "_filename", "\n", "if", "_filename", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "_filename", ")", "\n", "result", "=", "re", ".", "search", "(", "pattern", ",", "_filename", ",", "re", ".", "I", ")", "\n", "dataset", ",", "algo", ",", "run_id", ",", "seed", "=", "result", ".", "group", "(", "1", ")", ",", "result", ".", "group", "(", "2", ")", ",", "result", ".", "group", "(", "3", ")", ",", "result", ".", "group", "(", "4", ")", "\n", "new_name", "=", "data_folder", "+", "\"%s-%s-%s-%d-%d.pkl\"", "%", "(", "dataset", ",", "algo", ",", "'acc'", ",", "int", "(", "run_id", ")", ",", "20", ")", "\n", "os", ".", "rename", "(", "used_name", ",", "new_name", ")", "\n", "print", "(", "\"used_name: %s,new_name: %s\"", "%", "(", "used_name", ",", "new_name", ")", ")", "\n", "\n", "\n", "", "", "def", "rename1", "(", ")", ":", "\n", "    ", "for", "_filename", "in", "filename_list", ":", "\n", "        ", "if", "_filename", ".", "startswith", "(", "'.'", ")", "or", "_filename", ".", "startswith", "(", "'meta'", ")", "or", "_filename", ".", "startswith", "(", "'ranker'", ")", ":", "\n", "            ", "continue", "\n", "", "used_name", "=", "data_folder", "+", "_filename", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_infos": [[35, 60], ["dict", "dict", "transformer_dict.keys", "list", "list", "params_infos[].extend", "isinstance", "type_infos[].append"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["if", "len", "(", "_filename", ".", "split", "(", "'-'", ")", ")", ">", "5", ":", "\n", "            ", "splits", "=", "_filename", ".", "split", "(", "'-'", ")", "\n", "dataset", "=", "'-'", ".", "join", "(", "splits", "[", ":", "len", "(", "splits", ")", "-", "4", "]", ")", "\n", "algo", ",", "metric", ",", "run_id", ",", "resource", "=", "splits", "[", "len", "(", "splits", ")", "-", "4", ":", "]", "\n", "", "else", ":", "\n", "            ", "dataset", ",", "algo", ",", "metric", ",", "run_id", ",", "resource", "=", "_filename", ".", "split", "(", "'-'", ")", "\n", "", "new_name", "=", "data_folder", "+", "\"%s-%s-%s-%d-%d.pkl\"", "%", "(", "dataset", ",", "algo", ",", "'bal_acc'", ",", "int", "(", "run_id", ")", ",", "20", ")", "\n", "os", ".", "rename", "(", "used_name", ",", "new_name", ")", "\n", "print", "(", "\"used_name: %s,new_name: %s\"", "%", "(", "used_name", ",", "new_name", ")", ")", "\n", "\n", "\n", "", "", "rename1", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.is_numeric": [[62, 70], ["float"], "function", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.is_discrete": [[72, 82], ["values.astype", "values.astype"], "function", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.detect_categorical_type": [[84, 88], ["len", "len", "bool", "set"], "function", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.detect_abnormal_type": [[90, 124], ["len", "enumerate", "list", "list", "str", "utils.is_numeric", "numeric_idx.append", "str_idx.append", "print"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.is_numeric"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.get_weights": [[5, 70], ["numpy.unique", "numpy.ones", "enumerate", "numpy.unique", "enumerate", "len", "numpy.sum", "len", "numpy.mean", "range", "numpy.sum"], "function", ["None"], ["def", "get_weights", "(", "Y", ",", "classifier", ",", "preprocessor", ",", "init_params", ",", "fit_params", ")", ":", "\n", "    ", "if", "init_params", "is", "None", ":", "\n", "        ", "init_params", "=", "{", "}", "\n", "\n", "", "if", "fit_params", "is", "None", ":", "\n", "        ", "fit_params", "=", "{", "}", "\n", "\n", "# Classifiers which require sample weights:", "\n", "# We can have adaboost in here, because in the fit method,", "\n", "# the sample weights are normalized:", "\n", "# https://github.com/scikit-learn/scikit-learn/blob/0.15.X/sklearn/ensemble/weight_boosting.py#L121", "\n", "# Have RF and ET in here because they emit a warning if class_weights", "\n", "#  are used together with warmstarts", "\n", "", "clf_", "=", "[", "'adaboost'", ",", "'random_forest'", ",", "'extra_trees'", ",", "'sgd'", ",", "'passive_aggressive'", "]", "\n", "pre_", "=", "[", "]", "\n", "if", "classifier", "in", "clf_", "or", "preprocessor", "in", "pre_", ":", "\n", "        ", "if", "len", "(", "Y", ".", "shape", ")", ">", "1", ":", "\n", "            ", "offsets", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "Y", ".", "shape", "[", "1", "]", ")", "]", "\n", "Y_", "=", "np", ".", "sum", "(", "Y", "*", "offsets", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "Y_", "=", "Y", "\n", "\n", "", "unique", ",", "counts", "=", "np", ".", "unique", "(", "Y_", ",", "return_counts", "=", "True", ")", "\n", "# This will result in an average weight of 1!", "\n", "cw", "=", "1", "/", "(", "counts", "/", "np", ".", "sum", "(", "counts", ")", ")", "/", "2", "\n", "if", "len", "(", "Y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "cw", "/=", "Y", ".", "shape", "[", "1", "]", "\n", "\n", "", "sample_weights", "=", "np", ".", "ones", "(", "Y_", ".", "shape", ")", "\n", "\n", "for", "i", ",", "ue", "in", "enumerate", "(", "unique", ")", ":", "\n", "            ", "mask", "=", "Y_", "==", "ue", "\n", "sample_weights", "[", "mask", "]", "*=", "cw", "[", "i", "]", "\n", "\n", "", "if", "classifier", "in", "clf_", ":", "\n", "            ", "fit_params", "[", "'sample_weight'", "]", "=", "sample_weights", "\n", "", "if", "preprocessor", "in", "pre_", ":", "\n", "            ", "fit_params", "[", "'sample_weight'", "]", "=", "sample_weights", "\n", "\n", "# Classifiers which can adjust sample weights themselves via the", "\n", "# argument `class_weight`", "\n", "", "", "clf_", "=", "[", "'decision_tree'", ",", "'liblinear_svc'", ",", "\n", "'libsvm_svc'", "]", "\n", "pre_", "=", "[", "'liblinear_svc_preprocessor'", ",", "\n", "'extra_trees_preproc_for_classification'", "]", "\n", "if", "classifier", "in", "clf_", ":", "\n", "        ", "init_params", "[", "'class_weight'", "]", "=", "'balanced'", "\n", "", "if", "preprocessor", "in", "pre_", ":", "\n", "        ", "init_params", "[", "'class_weight'", "]", "=", "'balanced'", "\n", "\n", "", "clf_", "=", "[", "'ridge'", "]", "\n", "if", "classifier", "in", "clf_", ":", "\n", "        ", "class_weights", "=", "{", "}", "\n", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "Y", ",", "return_counts", "=", "True", ")", "\n", "cw", "=", "1.", "/", "counts", "\n", "cw", "=", "cw", "/", "np", ".", "mean", "(", "cw", ")", "\n", "\n", "for", "i", ",", "ue", "in", "enumerate", "(", "unique", ")", ":", "\n", "            ", "class_weights", "[", "ue", "]", "=", "cw", "[", "i", "]", "\n", "\n", "", "if", "classifier", "in", "clf_", ":", "\n", "            ", "init_params", "[", "'class_weight'", "]", "=", "class_weights", "\n", "\n", "", "", "return", "init_params", ",", "fit_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.get_data": [[72, 110], ["enumerate", "list", "numpy.median", "X.copy", "collections.Counter().values", "numpy.min", "numpy.max", "numpy.random.seed", "int", "print", "print", "label_idx_dict[].append", "X.copy", "y.copy", "X.copy", "y.copy", "collections.Counter", "len", "collections.Counter", "collections.Counter", "y.copy", "int", "range", "numpy.random.choice", "numpy.vstack", "numpy.hstack", "np.hstack.copy", "y.copy", "numpy.vstack", "numpy.hstack", "copy_X[].copy", "copy_y[].copy", "copy_X[].copy", "copy_y[].copy"], "function", ["None"], ["", "def", "get_data", "(", "X", ",", "y", ",", "threshold", "=", "0.6", ",", "random_state", "=", "1", ")", ":", "\n", "    ", "if", "y", "is", "None", ":", "\n", "        ", "return", "X", ".", "copy", "(", ")", ",", "None", "\n", "", "else", ":", "\n", "        ", "label_idx_dict", "=", "{", "}", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "y", ")", ":", "\n", "            ", "if", "label", "not", "in", "label_idx_dict", ":", "\n", "                ", "label_idx_dict", "[", "label", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "label_idx_dict", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "counts", "=", "list", "(", "Counter", "(", "y", ".", "copy", "(", ")", ")", ".", "values", "(", ")", ")", "\n", "median", "=", "np", ".", "median", "(", "counts", ")", "\n", "min_cnt", ",", "max_cnt", "=", "np", ".", "min", "(", "counts", ")", ",", "np", ".", "max", "(", "counts", ")", "\n", "\n", "if", "min_cnt", ">=", "threshold", "*", "median", ":", "\n", "            ", "return", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "random_state", ")", "\n", "resample_num", "=", "int", "(", "median", "*", "threshold", ")", "\n", "copy_X", ",", "copy_y", "=", "X", ".", "copy", "(", ")", ",", "y", ".", "copy", "(", ")", "\n", "print", "(", "'Before balancing'", ",", "Counter", "(", "y", ".", "copy", "(", ")", ")", ")", "\n", "for", "key", "in", "label_idx_dict", ":", "\n", "                ", "length", "=", "len", "(", "label_idx_dict", "[", "key", "]", ")", "\n", "if", "length", "<", "resample_num", ":", "\n", "                    ", "copy", "=", "int", "(", "resample_num", "/", "length", ")", "\n", "left", "=", "resample_num", "-", "copy", "*", "length", "\n", "copy", "-=", "1", "\n", "for", "_", "in", "range", "(", "copy", ")", ":", "\n", "                        ", "copy_X", "=", "np", ".", "vstack", "(", "(", "copy_X", ",", "copy_X", "[", "label_idx_dict", "[", "key", "]", "]", ".", "copy", "(", ")", ")", ")", "\n", "copy_y", "=", "np", ".", "hstack", "(", "(", "copy_y", ",", "copy_y", "[", "label_idx_dict", "[", "key", "]", "]", ".", "copy", "(", ")", ")", ")", "\n", "", "left_idx_list", "=", "np", ".", "random", ".", "choice", "(", "label_idx_dict", "[", "key", "]", ",", "left", ",", "replace", "=", "False", ")", "\n", "copy_X", "=", "np", ".", "vstack", "(", "(", "copy_X", ",", "copy_X", "[", "left_idx_list", "]", ".", "copy", "(", ")", ")", ")", "\n", "copy_y", "=", "np", ".", "hstack", "(", "(", "copy_y", ",", "copy_y", "[", "left_idx_list", "]", ".", "copy", "(", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'After balancing'", ",", "Counter", "(", "copy_y", ".", "copy", "(", ")", ")", ")", "\n", "\n", "return", "copy_X", ",", "copy_y", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.smote": [[112, 130], ["list", "list", "set", "sorted", "SMOTETomek.fit_resample", "sorted.append", "SMOTE", "SMOTETomek", "SMOTETomek", "list.count"], "function", ["None"], ["", "", "", "def", "smote", "(", "X", ",", "y", ",", "random_state", "=", "1", ")", ":", "\n", "    ", "from", "imblearn", ".", "combine", "import", "SMOTETomek", "\n", "from", "imblearn", ".", "over_sampling", "import", "SMOTE", "\n", "\n", "labels", "=", "list", "(", "y", ")", "\n", "cnts", "=", "list", "(", ")", "\n", "for", "val", "in", "set", "(", "labels", ")", ":", "\n", "        ", "cnts", ".", "append", "(", "labels", ".", "count", "(", "val", ")", ")", "\n", "", "cnts", "=", "sorted", "(", "cnts", ")", "\n", "if", "cnts", "[", "0", "]", "<", "6", ":", "\n", "        ", "sm", "=", "SMOTE", "(", "random_state", "=", "random_state", ",", "k_neighbors", "=", "cnts", "[", "0", "]", "-", "1", ")", "\n", "model", "=", "SMOTETomek", "(", "random_state", "=", "random_state", ",", "smote", "=", "sm", ")", "\n", "", "else", ":", "\n", "# The default value of k_neighbors in SMOTETomek is 5", "\n", "        ", "model", "=", "SMOTETomek", "(", "random_state", "=", "random_state", ")", "\n", "\n", "", "X_res", ",", "y_res", "=", "model", ".", "fit_resample", "(", "X", ",", "y", ")", "\n", "return", "X_res", ",", "y_res", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.text_to_word_sequence": [[4, 16], ["dict", "str.maketrans", "text.lower.translate", "text.lower.split", "text.lower.lower"], "function", ["None"], ["def", "text_to_word_sequence", "(", "text", ",", "\n", "filters", "=", "'!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n'", ",", "\n", "lower", "=", "True", ",", "split", "=", "\" \"", ")", ":", "\n", "    ", "if", "lower", ":", "\n", "        ", "text", "=", "text", ".", "lower", "(", ")", "\n", "\n", "", "translate_dict", "=", "dict", "(", "(", "c", ",", "split", ")", "for", "c", "in", "filters", ")", "\n", "translate_map", "=", "str", ".", "maketrans", "(", "translate_dict", ")", "\n", "text", "=", "text", ".", "translate", "(", "translate_map", ")", "\n", "\n", "seq", "=", "text", ".", "split", "(", "split", ")", "\n", "return", "[", "i", "for", "i", "in", "seq", "if", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.build_embeddings_index": [[18, 28], ["dict", "open", "open.close", "line.split", "numpy.asarray"], "function", ["None"], ["", "def", "build_embeddings_index", "(", "glove_path", "=", "'./glove_data/glove.6B.50d.txt'", ")", ":", "\n", "    ", "embeddings_index", "=", "dict", "(", ")", "\n", "f", "=", "open", "(", "glove_path", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "values", "=", "line", ".", "split", "(", ")", "\n", "word", "=", "values", "[", "0", "]", "\n", "coefs", "=", "np", ".", "asarray", "(", "values", "[", "1", ":", "]", ",", "dtype", "=", "'float32'", ")", "\n", "embeddings_index", "[", "word", "]", "=", "coefs", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "embeddings_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.load_embedding_matrix": [[30, 44], ["numpy.stack", "len", "numpy.random.normal", "word_index.items", "embedding_index.values", "embedding_index.get", "np.stack.mean", "np.stack.std"], "function", ["None"], ["", "def", "load_embedding_matrix", "(", "word_index", ",", "embedding_index", ",", "if_normalize", "=", "True", ")", ":", "\n", "    ", "all_embs", "=", "np", ".", "stack", "(", "embedding_index", ".", "values", "(", ")", ")", "\n", "if", "if_normalize", ":", "\n", "        ", "emb_mean", ",", "emb_std", "=", "all_embs", ".", "mean", "(", ")", ",", "all_embs", ".", "std", "(", ")", "\n", "", "else", ":", "\n", "        ", "emb_mean", ",", "emb_std", "=", "0", ",", "1", "\n", "", "embed_size", "=", "all_embs", ".", "shape", "[", "1", "]", "\n", "nb_words", "=", "len", "(", "word_index", ")", "\n", "embedding_matrix", "=", "np", ".", "random", ".", "normal", "(", "emb_mean", ",", "emb_std", ",", "(", "nb_words", ",", "embed_size", ")", ")", "\n", "for", "word", ",", "i", "in", "word_index", ".", "items", "(", ")", ":", "\n", "        ", "embedding_vector", "=", "embedding_index", ".", "get", "(", "word", ")", "\n", "if", "embedding_vector", "is", "not", "None", ":", "\n", "            ", "embedding_matrix", "[", "i", "-", "1", "]", "=", "embedding_vector", "\n", "", "", "return", "embedding_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.load_text_embeddings": [[46, 77], ["Tokenizer", "Tokenizer.fit_on_texts", "text_util.load_embedding_matrix", "Tokenizer.texts_to_sequences", "numpy.array", "np.array.append", "numpy.array", "TruncatedSVD", "TruncatedSVD.fit", "embedding.append", "numpy.average", "Counter", "np.array.append", "embedding.append", "numpy.average", "np.array.dot", "pc.transpose", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.load_embedding_matrix", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "load_text_embeddings", "(", "texts", ",", "embedding_index", ",", "method", "=", "'average'", ",", "alpha", "=", "1e-3", ")", ":", "\n", "    ", "from", "keras", ".", "preprocessing", ".", "text", "import", "Tokenizer", "\n", "tok", "=", "Tokenizer", "(", ")", "\n", "tok", ".", "fit_on_texts", "(", "texts", ")", "\n", "word_index", "=", "tok", ".", "word_index", "\n", "embedding_matrix", "=", "load_embedding_matrix", "(", "word_index", ",", "embedding_index", ",", "if_normalize", "=", "False", ")", "\n", "index_sequences", "=", "tok", ".", "texts_to_sequences", "(", "texts", ")", "\n", "text_embeddings", "=", "[", "]", "\n", "if", "method", "==", "'average'", ":", "\n", "        ", "for", "seq", "in", "index_sequences", ":", "\n", "            ", "embedding", "=", "[", "]", "\n", "for", "i", "in", "seq", ":", "\n", "                ", "embedding", ".", "append", "(", "embedding_matrix", "[", "i", "-", "1", "]", ")", "\n", "", "text_embeddings", ".", "append", "(", "np", ".", "average", "(", "embedding", ",", "axis", "=", "0", ")", ")", "\n", "", "text_embeddings", "=", "np", ".", "array", "(", "text_embeddings", ")", "\n", "", "elif", "method", "==", "'weighted'", ":", "\n", "        ", "from", "collections", "import", "Counter", "\n", "for", "seq", "in", "index_sequences", ":", "\n", "            ", "counter", "=", "Counter", "(", "seq", ")", "\n", "embedding", "=", "[", "]", "\n", "for", "i", "in", "counter", ":", "\n", "                ", "embedding", ".", "append", "(", "embedding_matrix", "[", "i", "-", "1", "]", "*", "alpha", "/", "(", "alpha", "+", "counter", "[", "i", "]", "/", "len", "(", "seq", ")", ")", ")", "\n", "", "text_embeddings", ".", "append", "(", "np", ".", "average", "(", "embedding", ",", "axis", "=", "0", ")", ")", "\n", "", "text_embeddings", "=", "np", ".", "array", "(", "text_embeddings", ")", "\n", "\n", "from", "sklearn", ".", "decomposition", "import", "TruncatedSVD", "\n", "svd", "=", "TruncatedSVD", "(", "n_components", "=", "1", ",", "n_iter", "=", "7", ",", "random_state", "=", "0", ")", "\n", "svd", ".", "fit", "(", "text_embeddings", ")", "\n", "pc", "=", "svd", ".", "components_", "\n", "test_embeddings", "=", "text_embeddings", "-", "text_embeddings", ".", "dot", "(", "pc", ".", "transpose", "(", ")", ")", "*", "pc", "\n", "", "return", "text_embeddings", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.__init__": [[5, 8], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.__getstate__": [[9, 18], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method is called when pickle dumps an object.\n        Returns\n        -------\n        Dictionary, representing the object state to be pickled. Ignores\n        the self.logger field and only returns the logger name.\n        \"\"\"", "\n", "return", "{", "'name'", ":", "self", ".", "name", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.__setstate__": [[19, 29], ["logging.getLogger"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"\n        Method is called when pickle loads an object. Retrieves the name and\n        creates a logger.\n        Parameters\n        ----------\n        state - dictionary, containing the logger name.\n        \"\"\"", "\n", "self", ".", "name", "=", "state", "[", "'name'", "]", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug": [[30, 32], ["logging.PickableLoggerAdapter.logger.debug"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["", "def", "debug", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info": [[33, 35], ["logging.PickableLoggerAdapter.logger.info"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "info", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning": [[36, 38], ["logging.PickableLoggerAdapter.logger.warning"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["", "def", "warning", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "warning", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error": [[39, 41], ["logging.PickableLoggerAdapter.logger.error"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "def", "error", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "error", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.exception": [[42, 44], ["logging.PickableLoggerAdapter.logger.exception"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.exception"], ["", "def", "exception", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "exception", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.critical": [[45, 47], ["logging.PickableLoggerAdapter.logger.critical"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.critical"], ["", "def", "critical", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "critical", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log": [[48, 50], ["logging.PickableLoggerAdapter.logger.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "log", "(", "self", ",", "level", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log", "(", "level", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.isEnabledFor": [[51, 53], ["logging.PickableLoggerAdapter.logger.isEnabledFor"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.isEnabledFor"], ["", "def", "isEnabledFor", "(", "self", ",", "level", ")", ":", "\n", "        ", "return", "self", ".", "logger", ".", "isEnabledFor", "(", "level", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.normalization.zero_one_normalization": [[4, 14], ["numpy.true_divide", "numpy.min", "numpy.max"], "function", ["None"], ["def", "zero_one_normalization", "(", "X", ",", "lower", "=", "None", ",", "upper", "=", "None", ")", ":", "\n", "\n", "    ", "if", "lower", "is", "None", ":", "\n", "        ", "lower", "=", "np", ".", "min", "(", "X", ",", "axis", "=", "0", ")", "\n", "", "if", "upper", "is", "None", ":", "\n", "        ", "upper", "=", "np", ".", "max", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "", "X_normalized", "=", "np", ".", "true_divide", "(", "(", "X", "-", "lower", ")", ",", "(", "upper", "-", "lower", ")", ")", "\n", "\n", "return", "X_normalized", ",", "lower", ",", "upper", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.normalization.zero_one_unnormalization": [[16, 18], ["None"], "function", ["None"], ["", "def", "zero_one_unnormalization", "(", "X_normalized", ",", "lower", ",", "upper", ")", ":", "\n", "    ", "return", "lower", "+", "(", "upper", "-", "lower", ")", "*", "X_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.normalization.zero_mean_unit_var_normalization": [[20, 29], ["numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "zero_mean_unit_var_normalization", "(", "X", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "    ", "if", "mean", "is", "None", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "        ", "std", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "", "X_normalized", "=", "(", "X", "-", "mean", ")", "/", "std", "\n", "\n", "return", "X_normalized", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.normalization.zero_mean_unit_var_unnormalization": [[31, 33], ["None"], "function", ["None"], ["", "def", "zero_mean_unit_var_unnormalization", "(", "X_normalized", ",", "mean", ",", "std", ")", ":", "\n", "    ", "return", "X_normalized", "*", "std", "+", "mean", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.get_platform": [[7, 18], ["ValueError"], "function", ["None"], ["", "def", "get_platform", "(", ")", ":", "\n", "    ", "platforms", "=", "{", "\n", "'linux1'", ":", "'Linux'", ",", "\n", "'linux2'", ":", "'Linux'", ",", "\n", "'darwin'", ":", "'OS X'", ",", "\n", "'win32'", ":", "'Windows'", "\n", "}", "\n", "if", "sys", ".", "platform", "not", "in", "platforms", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported OS: %s'", "%", "sys", ".", "platform", ")", "\n", "\n", "", "return", "platforms", "[", "sys", ".", "platform", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit": [[29, 43], ["limit.TimeoutException", "signal.signal", "signal.alarm", "signal.alarm"], "function", ["None"], ["@", "contextmanager", "\n", "def", "time_limit", "(", "seconds", ")", ":", "\n", "    ", "skip_flag", "=", "False", "if", "sys", ".", "platform", "==", "'win32'", "else", "True", "\n", "\n", "def", "signal_handler", "(", "signum", ",", "frame", ")", ":", "\n", "        ", "raise", "TimeoutException", "(", "\"Timed out!\"", ")", "\n", "", "if", "skip_flag", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "signal_handler", ")", "\n", "signal", ".", "alarm", "(", "seconds", ")", "\n", "", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "if", "skip_flag", ":", "\n", "            ", "signal", ".", "alarm", "(", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_types": [[11, 76], ["numpy.zeros", "enumerate", "numpy.array", "numpy.array", "len", "config_space.get_hyperparameters", "config_space.get_parents_of", "isinstance", "numpy.hstack", "config_space.get_hyperparameters", "len", "len", "isinstance", "int", "len", "isinstance", "numpy.zeros", "len", "isinstance", "int", "isinstance", "int", "isinstance", "TypeError", "type"], "function", ["None"], ["def", "get_types", "(", "config_space", ",", "instance_features", "=", "None", ")", ":", "\n", "    ", "\"\"\"TODO\"\"\"", "\n", "# Extract types vector for rf from config space and the bounds", "\n", "types", "=", "np", ".", "zeros", "(", "len", "(", "config_space", ".", "get_hyperparameters", "(", ")", ")", ",", "\n", "dtype", "=", "np", ".", "uint", ")", "\n", "bounds", "=", "[", "(", "np", ".", "nan", ",", "np", ".", "nan", ")", "]", "*", "types", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "config_space", ".", "get_hyperparameters", "(", ")", ")", ":", "\n", "        ", "parents", "=", "config_space", ".", "get_parents_of", "(", "param", ".", "name", ")", "\n", "if", "len", "(", "parents", ")", "==", "0", ":", "\n", "            ", "can_be_inactive", "=", "False", "\n", "", "else", ":", "\n", "            ", "can_be_inactive", "=", "True", "\n", "\n", "", "if", "isinstance", "(", "param", ",", "(", "CategoricalHyperparameter", ")", ")", ":", "\n", "            ", "n_cats", "=", "len", "(", "param", ".", "choices", ")", "\n", "if", "can_be_inactive", ":", "\n", "                ", "n_cats", "=", "len", "(", "param", ".", "choices", ")", "+", "1", "\n", "", "types", "[", "i", "]", "=", "n_cats", "\n", "bounds", "[", "i", "]", "=", "(", "int", "(", "n_cats", ")", ",", "np", ".", "nan", ")", "\n", "\n", "", "elif", "isinstance", "(", "param", ",", "(", "OrdinalHyperparameter", ")", ")", ":", "\n", "            ", "n_cats", "=", "len", "(", "param", ".", "sequence", ")", "\n", "types", "[", "i", "]", "=", "0", "\n", "if", "can_be_inactive", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "0", ",", "int", "(", "n_cats", ")", ")", "\n", "", "else", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "0", ",", "int", "(", "n_cats", ")", "-", "1", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "param", ",", "Constant", ")", ":", "\n", "# for constants we simply set types to 0 which makes it a numerical", "\n", "# parameter", "\n", "            ", "if", "can_be_inactive", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "2", ",", "np", ".", "nan", ")", "\n", "types", "[", "i", "]", "=", "2", "\n", "", "else", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "0", ",", "np", ".", "nan", ")", "\n", "types", "[", "i", "]", "=", "0", "\n", "# and we leave the bounds to be 0 for now", "\n", "", "", "elif", "isinstance", "(", "param", ",", "UniformFloatHyperparameter", ")", ":", "\n", "# Are sampled on the unit hypercube thus the bounds", "\n", "# are always 0.0, 1.0", "\n", "            ", "if", "can_be_inactive", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "-", "1.0", ",", "1.0", ")", "\n", "", "else", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "0", ",", "1.0", ")", "\n", "", "", "elif", "isinstance", "(", "param", ",", "UniformIntegerHyperparameter", ")", ":", "\n", "            ", "if", "can_be_inactive", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "-", "1.0", ",", "1.0", ")", "\n", "", "else", ":", "\n", "                ", "bounds", "[", "i", "]", "=", "(", "0", ",", "1.0", ")", "\n", "", "", "elif", "not", "isinstance", "(", "param", ",", "(", "UniformFloatHyperparameter", ",", "\n", "UniformIntegerHyperparameter", ",", "\n", "OrdinalHyperparameter", ",", "\n", "CategoricalHyperparameter", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unknown hyperparameter type %s\"", "%", "type", "(", "param", ")", ")", "\n", "\n", "", "", "if", "instance_features", "is", "not", "None", ":", "\n", "        ", "types", "=", "np", ".", "hstack", "(", "\n", "(", "types", ",", "np", ".", "zeros", "(", "(", "instance_features", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", ")", "\n", "\n", "", "types", "=", "np", ".", "array", "(", "types", ",", "dtype", "=", "np", ".", "uint", ")", "\n", "bounds", "=", "np", ".", "array", "(", "bounds", ",", "dtype", "=", "object", ")", "\n", "return", "types", ",", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng": [[78, 137], ["logging.getLogger", "TypeError", "TypeError", "logging.getLogger.debug", "numpy.random.RandomState", "np.random.RandomState.randint", "isinstance", "isinstance", "isinstance", "logging.getLogger.debug", "numpy.random.RandomState", "isinstance", "str", "str", "numpy.random.RandomState", "isinstance", "type", "type", "ValueError", "np.random.RandomState.randint", "type", "type"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["", "def", "get_rng", "(", "\n", "rng", ":", "typing", ".", "Optional", "[", "typing", ".", "Union", "[", "int", ",", "np", ".", "random", ".", "RandomState", "]", "]", "=", "None", ",", "\n", "run_id", ":", "typing", ".", "Optional", "[", "int", "]", "=", "None", ",", "\n", "logger", ":", "typing", ".", "Optional", "[", "logging", ".", "Logger", "]", "=", "None", ",", "\n", ")", "->", "typing", ".", "Tuple", "[", "int", ",", "np", ".", "random", ".", "RandomState", "]", ":", "\n", "    ", "\"\"\"\n    Initialize random number generator and set run_id\n\n    * If rng and run_id are None, initialize a new generator and sample a run_id\n    * If rng is None and a run_id is given, use the run_id to initialize the rng\n    * If rng is an int, a RandomState object is created from that.\n    * If rng is RandomState, return it\n    * If only run_id is None, a run_id is sampled from the random state.\n\n    Parameters\n    ----------\n    rng : np.random.RandomState|int|None\n    run_id : int, optional\n    logger: logging.Logger, optional\n\n    Returns\n    -------\n    int\n    np.random.RandomState\n\n    \"\"\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "'GetRNG'", ")", "\n", "# initialize random number generator", "\n", "", "if", "rng", "is", "not", "None", "and", "not", "isinstance", "(", "rng", ",", "(", "int", ",", "np", ".", "random", ".", "RandomState", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Argument rng accepts only arguments of type None, int or np.random.RandomState, '", "\n", "'you provided %s.'", "%", "str", "(", "type", "(", "rng", ")", ")", ")", "\n", "", "if", "run_id", "is", "not", "None", "and", "not", "isinstance", "(", "run_id", ",", "int", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Argument run_id accepts only arguments of type None, int or np.random.RandomState, '", "\n", "'you provided %s.'", "%", "str", "(", "type", "(", "run_id", ")", ")", ")", "\n", "\n", "", "if", "rng", "is", "None", "and", "run_id", "is", "None", ":", "\n", "# Case that both are None", "\n", "        ", "logger", ".", "debug", "(", "'No rng and no run_id given: using a random value to initialize run_id.'", ")", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "run_id", "=", "rng", ".", "randint", "(", "MAXINT", ")", "\n", "", "elif", "rng", "is", "None", "and", "isinstance", "(", "run_id", ",", "int", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'No rng and no run_id given: using run_id %d as seed.'", ",", "run_id", ")", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "run_id", ")", "\n", "", "elif", "isinstance", "(", "rng", ",", "int", ")", ":", "\n", "        ", "if", "run_id", "is", "None", ":", "\n", "            ", "run_id", "=", "rng", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "rng", ")", "\n", "", "elif", "isinstance", "(", "rng", ",", "np", ".", "random", ".", "RandomState", ")", ":", "\n", "        ", "if", "run_id", "is", "None", ":", "\n", "            ", "run_id", "=", "rng", ".", "randint", "(", "MAXINT", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'This should not happen! Please contact the developers! Arguments: rng=%s of type %s and '", "\n", "'run_id=% of type %s'", "%", "(", "rng", ",", "type", "(", "rng", ")", ",", "run_id", ",", "type", "(", "run_id", ")", ")", ")", "\n", "", "return", "run_id", ",", "rng", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.__init__": [[11, 17], ["collections.OrderedDict", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "task_id", "=", "task_id", "\n", "self", ".", "data", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "config_counter", "=", "0", "\n", "self", ".", "incumbent_value", "=", "MAXINT", "\n", "self", ".", "incumbents", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add": [[18, 35], ["len", "history_container.HistoryContainer.incumbents.append", "history_container.HistoryContainer.incumbents.clear", "history_container.HistoryContainer.incumbents.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.clear"], ["", "def", "add", "(", "self", ",", "config", ":", "Configuration", ",", "perf", ":", "Perf", ")", ":", "\n", "        ", "if", "config", "in", "self", ".", "data", ":", "\n", "# raise ValueError('Repeated configuration detected!')", "\n", "            ", "return", "\n", "\n", "", "self", ".", "data", "[", "config", "]", "=", "perf", "\n", "self", ".", "config_counter", "+=", "1", "\n", "\n", "if", "len", "(", "self", ".", "incumbents", ")", ">", "0", ":", "\n", "            ", "if", "perf", "<", "self", ".", "incumbent_value", ":", "\n", "                ", "self", ".", "incumbents", ".", "clear", "(", ")", "\n", "", "if", "perf", "<=", "self", ".", "incumbent_value", ":", "\n", "                ", "self", ".", "incumbents", ".", "append", "(", "(", "config", ",", "perf", ")", ")", "\n", "self", ".", "incumbent_value", "=", "perf", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "incumbent_value", "=", "perf", "\n", "self", ".", "incumbents", ".", "append", "(", "(", "config", ",", "perf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_perf": [[36, 38], ["None"], "methods", ["None"], ["", "", "def", "get_perf", "(", "self", ",", "config", ":", "Configuration", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "config", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_all_configs": [[39, 41], ["list", "history_container.HistoryContainer.data.keys"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "get_all_configs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty": [[42, 44], ["None"], "methods", ["None"], ["", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config_counter", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_incumbents", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "incumbents", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.__init__": [[17, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "bootstrap", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", ",", "random_state", "=", "None", ",", "n_jobs", "=", "1", ",", "\n", "class_weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.iterative_fit": [[37, 92], ["default_random_forest.DefaultRandomForest.estimator.fit", "int", "autosklearn.util.common.check_none", "int", "int", "float", "autosklearn.util.common.check_for_bool", "autosklearn.util.common.check_none", "float", "RandomForestClassifier", "min", "int", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none"], ["", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "RandomForestClassifier", "\n", "\n", "if", "refit", ":", "\n", "            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "\n", "", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "\n", "if", "self", ".", "max_features", "not", "in", "(", "\"sqrt\"", ",", "\"log2\"", ",", "\"auto\"", ")", ":", "\n", "                ", "max_features", "=", "int", "(", "X", ".", "shape", "[", "1", "]", "**", "float", "(", "self", ".", "max_features", ")", ")", "\n", "", "else", ":", "\n", "                ", "max_features", "=", "self", ".", "max_features", "\n", "\n", "", "self", ".", "bootstrap", "=", "check_for_bool", "(", "self", ".", "bootstrap", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "\n", "", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "\n", "# initial fit of only increment trees", "\n", "self", ".", "estimator", "=", "RandomForestClassifier", "(", "\n", "n_estimators", "=", "n_iter", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "warm_start", "=", "True", ")", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.configuration_fully_fitted": [[93, 98], ["len"], "methods", ["None"], ["", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.predict": [[99, 103], ["default_random_forest.DefaultRandomForest.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.predict_proba": [[104, 110], ["default_random_forest.DefaultRandomForest.estimator.predict_proba", "autosklearn.pipeline.implementations.util.convert_multioutput_multiclass_to_multilabel", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.convert_multioutput_multiclass_to_multilabel"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "probas", "=", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "probas", "=", "convert_multioutput_multiclass_to_multilabel", "(", "probas", ")", "\n", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.get_properties": [[111, 122], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'DRF'", ",", "\n", "'name'", ":", "'Default Random Forest Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.get_hyperparameter_search_space": [[123, 145], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "n_estimators", "=", "Constant", "(", "\"n_estimators\"", ",", "100", ")", "\n", "criterion", "=", "UnParametrizedHyperparameter", "(", "\"criterion\"", ",", "\"gini\"", ")", "\n", "max_features", "=", "UnParametrizedHyperparameter", "(", "\"max_features\"", ",", "\"0.5\"", ")", "\n", "\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "\"max_depth\"", ",", "\"None\"", ")", "\n", "min_samples_split", "=", "UnParametrizedHyperparameter", "(", "\"min_samples_split\"", ",", "2", ")", "\n", "min_samples_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_samples_leaf\"", ",", "1", ")", "\n", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_weight_fraction_leaf\"", ",", "0.", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "bootstrap", "=", "UnParametrizedHyperparameter", "(", "\"bootstrap\"", ",", "\"True\"", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "bootstrap", ",", "min_impurity_decrease", "]", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.default_random_forest.DefaultRandomForest.score": [[146, 150], ["default_random_forest.DefaultRandomForest.estimator.predict", "accuracy_score"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "score", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "y_pred", "=", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "return", "accuracy_score", "(", "y", ",", "y_pred", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.__init__": [[14, 88], ["super().__init__", "kde.TPE.configspace.get_hyperparameters", "numpy.array", "dict", "dict", "dict", "dict", "mindware.utils.logging_utils.get_logger", "hasattr", "hasattr", "len", "len", "len", "RuntimeError", "kde.TPE.configspace.get_hyperparameters", "kde.TPE.configspace.get_hyperparameters", "kde.TPE.configspace.get_hyperparameters", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger"], ["    ", "def", "__init__", "(", "self", ",", "configspace", ",", "min_points_in_model", "=", "None", ",", "\n", "top_n_percent", "=", "15", ",", "num_samples", "=", "64", ",", "random_fraction", "=", "1", "/", "3", ",", "\n", "bandwidth_factor", "=", "3", ",", "min_bandwidth", "=", "1e-3", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n            Fits for each given budget a kernel density estimator on the best N percent of the\n            evaluated configurations on this budget.\n\n\n            Parameters:\n            -----------\n            configspace: ConfigSpace\n                Configuration space object\n            top_n_percent: int\n                Determines the percentile of configurations that will be used as training data\n                for the kernel density estimator, e.g if set to 10 the 10% best configurations will be considered\n                for training.\n            min_points_in_model: int\n                minimum number of datapoints needed to fit a model\n            num_samples: int\n                number of samples drawn to optimize EI via sampling\n            random_fraction: float\n                fraction of random configurations returned\n            bandwidth_factor: float\n                widens the bandwidth for contiuous parameters for proposed points to optimize EI\n            min_bandwidth: float\n                to keep diversity, even when all (good) samples have the same value for one of the parameters,\n                a minimum bandwidth (Default: 1e-3) is used instead of zero.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "top_n_percent", "=", "top_n_percent", "\n", "self", ".", "configspace", "=", "configspace", "\n", "self", ".", "bw_factor", "=", "bandwidth_factor", "\n", "self", ".", "min_bandwidth", "=", "min_bandwidth", "\n", "\n", "self", ".", "min_points_in_model", "=", "min_points_in_model", "\n", "if", "min_points_in_model", "is", "None", ":", "\n", "            ", "self", ".", "min_points_in_model", "=", "len", "(", "self", ".", "configspace", ".", "get_hyperparameters", "(", ")", ")", "+", "1", "\n", "\n", "", "if", "self", ".", "min_points_in_model", "<", "len", "(", "self", ".", "configspace", ".", "get_hyperparameters", "(", ")", ")", "+", "1", ":", "\n", "            ", "self", ".", "min_points_in_model", "=", "len", "(", "self", ".", "configspace", ".", "get_hyperparameters", "(", ")", ")", "+", "1", "\n", "\n", "", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "random_fraction", "=", "random_fraction", "\n", "\n", "hps", "=", "self", ".", "configspace", ".", "get_hyperparameters", "(", ")", "\n", "\n", "self", ".", "kde_vartypes", "=", "\"\"", "\n", "self", ".", "vartypes", "=", "[", "]", "\n", "\n", "for", "h", "in", "hps", ":", "\n", "            ", "if", "hasattr", "(", "h", ",", "'sequence'", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'This version on BOHB does not support ordinal hyperparameters. Please encode %s as an integer parameter!'", "%", "(", "\n", "h", ".", "name", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "h", ",", "'choices'", ")", ":", "\n", "                ", "self", ".", "kde_vartypes", "+=", "'u'", "\n", "self", ".", "vartypes", "+=", "[", "len", "(", "h", ".", "choices", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "kde_vartypes", "+=", "'c'", "\n", "self", ".", "vartypes", "+=", "[", "0", "]", "\n", "\n", "", "", "self", ".", "vartypes", "=", "np", ".", "array", "(", "self", ".", "vartypes", ",", "dtype", "=", "int", ")", "\n", "\n", "# store precomputed probs for the categorical parameters", "\n", "self", ".", "cat_probs", "=", "[", "]", "\n", "\n", "self", ".", "configs", "=", "dict", "(", ")", "\n", "self", ".", "losses", "=", "dict", "(", ")", "\n", "self", ".", "good_config_rankings", "=", "dict", "(", ")", "\n", "self", ".", "kde_models", "=", "dict", "(", ")", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.largest_budget_with_model": [[89, 93], ["max", "len", "kde.TPE.kde_models.keys", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "largest_budget_with_model", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "kde_models", ")", "==", "0", ":", "\n", "            ", "return", "-", "float", "(", "'inf'", ")", "\n", "", "return", "max", "(", "self", ".", "kde_models", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.get_config": [[94, 223], ["kde.TPE.logger.debug", "kde.TPE.logger.debug", "kde.TPE.configspace.sample_configuration", "len", "numpy.random.rand", "max", "range", "kde.TPE.kde_models.keys", "kde.TPE.kde_models.keys", "numpy.random.randint", "zip", "minimize_me", "kde.TPE.logger.debug", "kde.TPE.configspace.sample_configuration().get_dictionary", "kde.TPE.logger.debug", "enumerate", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "ConfigSpace.Configuration().get_dictionary", "kde.TPE.logger.warning", "kde.TPE.configspace.sample_configuration", "max", "max", "len", "max", "numpy.isfinite", "kde.TPE.logger.warning", "kde.TPE.logger.warning", "kde.TPE.logger.warning", "kde.TPE.logger.warning", "kde.TPE.logger.warning", "numpy.isfinite", "isinstance", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "ConfigSpace.util.deactivate_inactive_hyperparameters", "g", "l", "l", "kde.TPE.configspace.sample_configuration", "l", "g", "kde.TPE.configspace.get_hyperparameter", "int", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "kde.TPE.logger.warning", "vector.append", "numpy.random.rand", "vector.append", "vector.append", "l", "g", "kde.TPE.configspace.get_hyperparameter_by_idx", "numpy.rint", "traceback.format_exc", "scipy.truncnorm.rvs", "kde.TPE.logger.warning", "kde.TPE.logger.warning", "int", "numpy.random.randint", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            Function to sample a new configuration\n\n            This function is called inside Hyperband to query a new configuration\n\n\n            Parameters:\n            -----------\n            budget: float\n                the budget for which this configuration is scheduled\n\n            returns: config\n                should return a valid configuration\n\n        \"\"\"", "\n", "\n", "self", ".", "logger", ".", "debug", "(", "'start sampling a new configuration.'", ")", "\n", "\n", "sample", "=", "None", "\n", "info_dict", "=", "{", "}", "\n", "\n", "# If no model is available, sample from prior", "\n", "# also mix in a fraction of random configs", "\n", "if", "len", "(", "self", ".", "kde_models", ".", "keys", "(", ")", ")", "==", "0", "or", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "random_fraction", ":", "\n", "            ", "sample", "=", "self", ".", "configspace", ".", "sample_configuration", "(", ")", "\n", "info_dict", "[", "'model_based_pick'", "]", "=", "False", "\n", "\n", "", "best", "=", "np", ".", "inf", "\n", "best_vector", "=", "None", "\n", "\n", "if", "sample", "is", "None", ":", "\n", "            ", "try", ":", "\n", "\n", "# sample from largest budget", "\n", "                ", "budget", "=", "max", "(", "self", ".", "kde_models", ".", "keys", "(", ")", ")", "\n", "\n", "l", "=", "self", ".", "kde_models", "[", "budget", "]", "[", "'good'", "]", ".", "pdf", "\n", "g", "=", "self", ".", "kde_models", "[", "budget", "]", "[", "'bad'", "]", ".", "pdf", "\n", "\n", "minimize_me", "=", "lambda", "x", ":", "max", "(", "1e-32", ",", "g", "(", "x", ")", ")", "/", "max", "(", "l", "(", "x", ")", ",", "1e-32", ")", "\n", "\n", "kde_good", "=", "self", ".", "kde_models", "[", "budget", "]", "[", "'good'", "]", "\n", "kde_bad", "=", "self", ".", "kde_models", "[", "budget", "]", "[", "'bad'", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "                    ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "kde_good", ".", "data", ")", ")", "\n", "datum", "=", "kde_good", ".", "data", "[", "idx", "]", "\n", "vector", "=", "[", "]", "\n", "\n", "for", "m", ",", "bw", ",", "t", "in", "zip", "(", "datum", ",", "kde_good", ".", "bw", ",", "self", ".", "vartypes", ")", ":", "\n", "\n", "                        ", "bw", "=", "max", "(", "bw", ",", "self", ".", "min_bandwidth", ")", "\n", "if", "t", "==", "0", ":", "\n", "                            ", "bw", "=", "self", ".", "bw_factor", "*", "bw", "\n", "try", ":", "\n", "                                ", "vector", ".", "append", "(", "sps", ".", "truncnorm", ".", "rvs", "(", "-", "m", "/", "bw", ",", "(", "1", "-", "m", ")", "/", "bw", ",", "loc", "=", "m", ",", "scale", "=", "bw", ")", ")", "\n", "", "except", ":", "\n", "                                ", "self", ".", "logger", ".", "warning", "(", "\n", "\"Truncated Normal failed for:\\ndatum=%s\\nbandwidth=%s\\nfor entry with value %s\"", "%", "(", "\n", "datum", ",", "kde_good", ".", "bw", ",", "m", ")", ")", "\n", "self", ".", "logger", ".", "warning", "(", "\"data in the KDE:\\n%s\"", "%", "kde_good", ".", "data", ")", "\n", "", "", "else", ":", "\n", "\n", "                            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "(", "1", "-", "bw", ")", ":", "\n", "                                ", "vector", ".", "append", "(", "int", "(", "m", ")", ")", "\n", "", "else", ":", "\n", "                                ", "vector", ".", "append", "(", "np", ".", "random", ".", "randint", "(", "t", ")", ")", "\n", "", "", "", "val", "=", "minimize_me", "(", "vector", ")", "\n", "\n", "if", "not", "np", ".", "isfinite", "(", "val", ")", ":", "\n", "                        ", "self", ".", "logger", ".", "warning", "(", "'sampled vector: %s has EI value %s'", "%", "(", "vector", ",", "val", ")", ")", "\n", "self", ".", "logger", ".", "warning", "(", "\"data in the KDEs:\\n%s\\n%s\"", "%", "(", "kde_good", ".", "data", ",", "kde_bad", ".", "data", ")", ")", "\n", "self", ".", "logger", ".", "warning", "(", "\"bandwidth of the KDEs:\\n%s\\n%s\"", "%", "(", "kde_good", ".", "bw", ",", "kde_bad", ".", "bw", ")", ")", "\n", "self", ".", "logger", ".", "warning", "(", "\"l(x) = %s\"", "%", "(", "l", "(", "vector", ")", ")", ")", "\n", "self", ".", "logger", ".", "warning", "(", "\"g(x) = %s\"", "%", "(", "g", "(", "vector", ")", ")", ")", "\n", "\n", "# right now, this happens because a KDE does not contain all values for a categorical parameter", "\n", "# this cannot be fixed with the statsmodels KDE, so for now, we are just going to evaluate this one", "\n", "# if the good_kde has a finite value, i.e. there is no config with that value in the bad kde, so it shouldn't be terrible.", "\n", "if", "np", ".", "isfinite", "(", "l", "(", "vector", ")", ")", ":", "\n", "                            ", "best_vector", "=", "vector", "\n", "break", "\n", "\n", "", "", "if", "val", "<", "best", ":", "\n", "                        ", "best", "=", "val", "\n", "best_vector", "=", "vector", "\n", "\n", "", "", "if", "best_vector", "is", "None", ":", "\n", "                    ", "self", ".", "logger", ".", "debug", "(", "\n", "\"Sampling based optimization with %i samples failed -> using random configuration\"", "%", "self", ".", "num_samples", ")", "\n", "sample", "=", "self", ".", "configspace", ".", "sample_configuration", "(", ")", ".", "get_dictionary", "(", ")", "\n", "info_dict", "[", "'model_based_pick'", "]", "=", "False", "\n", "", "else", ":", "\n", "                    ", "self", ".", "logger", ".", "debug", "(", "\n", "'best_vector: {}, {}, {}, {}'", ".", "format", "(", "best_vector", ",", "best", ",", "l", "(", "best_vector", ")", ",", "g", "(", "best_vector", ")", ")", ")", "\n", "for", "i", ",", "hp_value", "in", "enumerate", "(", "best_vector", ")", ":", "\n", "                        ", "if", "isinstance", "(", "\n", "self", ".", "configspace", ".", "get_hyperparameter", "(", "\n", "self", ".", "configspace", ".", "get_hyperparameter_by_idx", "(", "i", ")", "\n", ")", ",", "\n", "ConfigSpace", ".", "hyperparameters", ".", "CategoricalHyperparameter", "\n", ")", ":", "\n", "                            ", "best_vector", "[", "i", "]", "=", "int", "(", "np", ".", "rint", "(", "best_vector", "[", "i", "]", ")", ")", "\n", "", "", "sample", "=", "ConfigSpace", ".", "Configuration", "(", "self", ".", "configspace", ",", "vector", "=", "best_vector", ")", ".", "get_dictionary", "(", ")", "\n", "\n", "try", ":", "\n", "                        ", "sample", "=", "ConfigSpace", ".", "util", ".", "deactivate_inactive_hyperparameters", "(", "\n", "configuration_space", "=", "self", ".", "configspace", ",", "\n", "configuration", "=", "sample", "\n", ")", "\n", "info_dict", "[", "'model_based_pick'", "]", "=", "True", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "self", ".", "logger", ".", "warning", "(", "(", "\"=\"", "*", "50", "+", "\"\\n\"", ")", "*", "3", "+", "\"Error converting configuration:\\n%s\"", "%", "sample", "+", "\"\\n here is a traceback:\"", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "raise", "e", "\n", "\n", "", "", "", "except", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\n", "\"Sampling based optimization with %i samples failed\\n %s \\nUsing random configuration\"", "%", "(", "\n", "self", ".", "num_samples", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "sample", "=", "self", ".", "configspace", ".", "sample_configuration", "(", ")", "\n", "info_dict", "[", "'model_based_pick'", "]", "=", "False", "\n", "\n", "", "", "self", ".", "logger", ".", "debug", "(", "'done sampling a new configuration.'", ")", "\n", "return", "sample", ",", "info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.impute_conditional_data": [[224, 252], ["numpy.empty_like", "range", "numpy.copy", "numpy.argwhere().flatten", "numpy.any", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "numpy.argwhere", "len", "numpy.random.choice", "numpy.isnan", "numpy.argwhere", "numpy.random.rand", "numpy.random.randint", "numpy.argwhere", "numpy.isfinite", "numpy.isnan"], "methods", ["None"], ["", "def", "impute_conditional_data", "(", "self", ",", "array", ")", ":", "\n", "\n", "        ", "return_array", "=", "np", ".", "empty_like", "(", "array", ")", "\n", "\n", "for", "i", "in", "range", "(", "array", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "datum", "=", "np", ".", "copy", "(", "array", "[", "i", "]", ")", "\n", "nan_indices", "=", "np", ".", "argwhere", "(", "np", ".", "isnan", "(", "datum", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "while", "np", ".", "any", "(", "nan_indices", ")", ":", "\n", "                ", "nan_idx", "=", "nan_indices", "[", "0", "]", "\n", "valid_indices", "=", "np", ".", "argwhere", "(", "np", ".", "isfinite", "(", "array", "[", ":", ",", "nan_idx", "]", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "if", "len", "(", "valid_indices", ")", ">", "0", ":", "\n", "# pick one of them at random and overwrite all NaN values", "\n", "                    ", "row_idx", "=", "np", ".", "random", ".", "choice", "(", "valid_indices", ")", "\n", "datum", "[", "nan_indices", "]", "=", "array", "[", "row_idx", ",", "nan_indices", "]", "\n", "\n", "", "else", ":", "\n", "# no good point in the data has this value activated, so fill it with a valid but random value", "\n", "                    ", "t", "=", "self", ".", "vartypes", "[", "nan_idx", "]", "\n", "if", "t", "==", "0", ":", "\n", "                        ", "datum", "[", "nan_idx", "]", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "", "else", ":", "\n", "                        ", "datum", "[", "nan_idx", "]", "=", "np", ".", "random", ".", "randint", "(", "t", ")", "\n", "\n", "", "", "nan_indices", "=", "np", ".", "argwhere", "(", "np", ".", "isnan", "(", "datum", ")", ")", ".", "flatten", "(", ")", "\n", "", "return_array", "[", "i", ",", ":", "]", "=", "datum", "\n", "", "return", "return_array", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.new_result": [[253, 319], ["ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "ConfigSpace.Configuration", "kde.TPE.configs[].append", "kde.TPE.losses[].append", "numpy.array", "numpy.array", "max", "max", "numpy.argsort", "kde.TPE.impute_conditional_data", "kde.TPE.impute_conditional_data", "statsmodels.nonparametric.KDEMultivariate", "statsmodels.nonparametric.KDEMultivariate", "numpy.clip", "numpy.clip", "kde.TPE.logger.debug", "kde.TPE.configs.keys", "max", "ConfigSpace.Configuration.get_array", "ConfigSpace.Configuration.get_array", "ConfigSpace.Configuration.get_array", "len", "kde.TPE.logger.debug", "list", "numpy.min", "kde.TPE.kde_models.keys", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.impute_conditional_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.impute_conditional_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "new_result", "(", "self", ",", "config", ",", "loss", ",", "budget", ",", "update_model", "=", "True", ")", ":", "\n", "# loss is acc here, negative is RIGHT!", "\n", "\n", "        ", "if", "budget", "not", "in", "self", ".", "configs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "configs", "[", "budget", "]", "=", "[", "]", "\n", "self", ".", "losses", "[", "budget", "]", "=", "[", "]", "\n", "\n", "# skip model building if we already have a bigger model", "\n", "", "if", "max", "(", "list", "(", "self", ".", "kde_models", ".", "keys", "(", ")", ")", "+", "[", "-", "np", ".", "inf", "]", ")", ">", "budget", ":", "\n", "            ", "return", "\n", "\n", "# We want to get a numerical representation of the configuration in the original space", "\n", "", "conf", "=", "ConfigSpace", ".", "Configuration", "(", "self", ".", "configspace", ",", "config", ")", "\n", "self", ".", "configs", "[", "budget", "]", ".", "append", "(", "conf", ".", "get_array", "(", ")", ")", "\n", "self", ".", "losses", "[", "budget", "]", ".", "append", "(", "loss", ")", "\n", "\n", "# skip model building:", "\n", "#\t\ta) if not enough points are available", "\n", "if", "len", "(", "self", ".", "configs", "[", "budget", "]", ")", "<=", "self", ".", "min_points_in_model", "-", "1", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "\"Only %i run(s) for budget %f available, need more than %s -> can't build model!\"", "%", "(", "\n", "len", "(", "self", ".", "configs", "[", "budget", "]", ")", ",", "budget", ",", "self", ".", "min_points_in_model", "+", "1", ")", ")", "\n", "return", "\n", "\n", "#\t\tb) during warnm starting when we feed previous results in and only update once", "\n", "", "if", "not", "update_model", ":", "\n", "            ", "return", "\n", "\n", "", "train_configs", "=", "np", ".", "array", "(", "self", ".", "configs", "[", "budget", "]", ")", "\n", "train_losses", "=", "np", ".", "array", "(", "self", ".", "losses", "[", "budget", "]", ")", "\n", "\n", "n_good", "=", "max", "(", "self", ".", "min_points_in_model", ",", "(", "self", ".", "top_n_percent", "*", "train_configs", ".", "shape", "[", "0", "]", ")", "//", "100", ")", "\n", "# n_bad = min(max(self.min_points_in_model, ((100-self.top_n_percent)*train_configs.shape[0])//100), 10)", "\n", "n_bad", "=", "max", "(", "self", ".", "min_points_in_model", ",", "(", "(", "100", "-", "self", ".", "top_n_percent", ")", "*", "train_configs", ".", "shape", "[", "0", "]", ")", "//", "100", ")", "\n", "\n", "# Refit KDE for the current budget", "\n", "idx", "=", "np", ".", "argsort", "(", "train_losses", ")", "\n", "\n", "train_data_good", "=", "self", ".", "impute_conditional_data", "(", "train_configs", "[", "idx", "[", ":", "n_good", "]", "]", ")", "\n", "train_data_bad", "=", "self", ".", "impute_conditional_data", "(", "train_configs", "[", "idx", "[", "n_good", ":", "n_good", "+", "n_bad", "]", "]", ")", "\n", "\n", "if", "train_data_good", ".", "shape", "[", "0", "]", "<=", "train_data_good", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "\n", "", "if", "train_data_bad", ".", "shape", "[", "0", "]", "<=", "train_data_bad", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "\n", "\n", "# more expensive crossvalidation method", "\n", "# bw_estimation = 'cv_ls'", "\n", "\n", "# quick rule of thumb", "\n", "", "bw_estimation", "=", "'normal_reference'", "\n", "\n", "bad_kde", "=", "sm", ".", "nonparametric", ".", "KDEMultivariate", "(", "data", "=", "train_data_bad", ",", "var_type", "=", "self", ".", "kde_vartypes", ",", "bw", "=", "bw_estimation", ")", "\n", "good_kde", "=", "sm", ".", "nonparametric", ".", "KDEMultivariate", "(", "data", "=", "train_data_good", ",", "var_type", "=", "self", ".", "kde_vartypes", ",", "bw", "=", "bw_estimation", ")", "\n", "\n", "bad_kde", ".", "bw", "=", "np", ".", "clip", "(", "bad_kde", ".", "bw", ",", "self", ".", "min_bandwidth", ",", "None", ")", "\n", "good_kde", ".", "bw", "=", "np", ".", "clip", "(", "good_kde", ".", "bw", ",", "self", ".", "min_bandwidth", ",", "None", ")", "\n", "\n", "self", ".", "kde_models", "[", "budget", "]", "=", "{", "\n", "'good'", ":", "good_kde", ",", "\n", "'bad'", ":", "bad_kde", "\n", "}", "\n", "\n", "# update probs for the categorical parameters for later sampling", "\n", "self", ".", "logger", ".", "debug", "(", "\n", "'done building a new model for budget %f based on %i/%i split\\nBest loss for this budget:%f\\n\\n\\n\\n\\n'", "%", "(", "\n", "budget", ",", "n_good", ",", "n_bad", ",", "np", ".", "min", "(", "train_losses", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble.__init__": [[98, 124], ["utils.util_funcs.get_rng", "utils.util_funcs.get_types", "models.base_model.BaseModel.__init__", "list", "gp_ensemble.GaussianProcessEnsemble._init"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.get_types", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble._init"], ["def", "__init__", "(", "\n", "self", ",", "\n", "configspace", ":", "ConfigurationSpace", ",", "\n", "gp_models", ":", "typing", ".", "List", ",", "\n", "gp_fusion", ":", "str", "=", "'indp-aspt'", ",", "\n", "surrogate_model", ":", "str", "=", "'prob_rf'", ",", "\n", "n_steps_update", ":", "int", "=", "2", ",", "\n", "seed", ":", "int", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "_", ",", "rng", "=", "get_rng", "(", "seed", ")", "\n", "types", ",", "bounds", "=", "get_types", "(", "configspace", ",", "instance_features", "=", "None", ")", "\n", "self", ".", "surrogate_model", "=", "surrogate_model", "\n", "self", ".", "gp_fusion", "=", "gp_fusion", "\n", "self", ".", "n_steps_update", "=", "n_steps_update", "\n", "assert", "self", ".", "gp_fusion", "in", "[", "'indp-aspt'", ",", "'gpoe'", ",", "'no-unct'", "]", "\n", "super", "(", ")", ".", "__init__", "(", "configspace", "=", "configspace", ",", "types", "=", "types", ",", "bounds", "=", "bounds", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_init_configs", "=", "list", "(", ")", "\n", "self", ".", "target_model", "=", "None", "\n", "self", ".", "model_weights", "=", "None", "\n", "self", ".", "ignore_flag", "=", "None", "\n", "self", ".", "gp_models", "=", "gp_models", "\n", "assert", "self", ".", "gp_models", "is", "not", "None", "\n", "self", ".", "weight_update_id", "=", "0", "\n", "self", ".", "_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble.create_basic_model": [[125, 133], ["gp_ensemble.create_gp_model", "models.rf_with_instances.RandomForestWithInstances", "gp_ensemble.GaussianProcessEnsemble.rng.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.create_gp_model"], ["", "def", "create_basic_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "surrogate_model", "==", "'gp'", ":", "\n", "            ", "_model", "=", "create_gp_model", "(", "self", ".", "configspace", ")", "\n", "", "else", ":", "\n", "            ", "_model", "=", "RandomForestWithInstances", "(", "self", ".", "configspace", ",", "\n", "normalize_y", "=", "True", ",", "\n", "seed", "=", "self", ".", "rng", ".", "randint", "(", "MAXINT", ")", ")", "\n", "", "return", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble._init": [[134, 139], ["len", "numpy.array"], "methods", ["None"], ["", "def", "_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_runhistory", "=", "len", "(", "self", ".", "gp_models", ")", "\n", "self", ".", "ignore_flag", "=", "[", "False", "]", "*", "self", ".", "n_runhistory", "\n", "# Set initial weights.", "\n", "self", ".", "model_weights", "=", "np", ".", "array", "(", "[", "1", "]", "*", "self", ".", "n_runhistory", "+", "[", "0", "]", ")", "/", "self", ".", "n_runhistory", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble._update_weights": [[140, 222], ["time.time", "list", "range", "print", "numpy.array", "range", "print", "print", "list", "list", "_model.predict", "predictive_mu.append", "predictive_std.append", "range", "predictive_mu.append", "predictive_std.append", "list", "range", "list.append", "numpy.array.append", "numpy.argmin", "numpy.array", "sorted", "numpy.sqrt", "list", "list", "list", "gp_ensemble.GaussianProcessEnsemble.create_basic_model", "gp_ensemble.GaussianProcessEnsemble.train", "gp_ensemble.GaussianProcessEnsemble.predict", "target_mu.extend", "target_std.extend", "numpy.random.normal", "range", "list.append", "numpy.random.normal", "range", "int", "sorted", "range", "_mu.flatten", "numpy.sqrt().flatten", "len", "range", "len", "range", "len", "len", "int", "time.time", "len", "len", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble.create_basic_model", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "_update_weights", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "n_instance", "=", "X", ".", "shape", "[", "0", "]", "\n", "n_fold", "=", "5", "\n", "predictive_mu", ",", "predictive_std", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "for", "_model", "in", "self", ".", "gp_models", ":", "\n", "            ", "_mu", ",", "_var", "=", "_model", ".", "predict", "(", "X", ")", "\n", "predictive_mu", ".", "append", "(", "_mu", ")", "\n", "predictive_std", ".", "append", "(", "np", ".", "sqrt", "(", "_var", ")", ")", "\n", "\n", "", "skip_target_model", "=", "True", "if", "n_instance", "<", "n_fold", "else", "False", "\n", "\n", "if", "not", "skip_target_model", ":", "\n", "            ", "fold_num", "=", "n_instance", "//", "n_fold", "\n", "target_mu", ",", "target_std", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "n_fold", ")", ":", "\n", "                ", "instance_indexs", "=", "list", "(", "range", "(", "n_instance", ")", ")", "\n", "bound", "=", "(", "n_instance", "-", "i", "*", "fold_num", ")", "if", "i", "==", "(", "n_fold", "-", "1", ")", "else", "fold_num", "\n", "start_id", "=", "i", "*", "fold_num", "\n", "del", "instance_indexs", "[", "start_id", ":", "start_id", "+", "bound", "]", "\n", "_target_model", "=", "self", ".", "create_basic_model", "(", ")", "\n", "_target_model", ".", "train", "(", "X", "[", "instance_indexs", ",", ":", "]", ",", "y", "[", "instance_indexs", "]", ")", "\n", "_mu", ",", "_var", "=", "_target_model", ".", "predict", "(", "X", "[", "start_id", ":", "start_id", "+", "bound", "]", ")", "\n", "target_mu", ".", "extend", "(", "_mu", ".", "flatten", "(", ")", ")", "\n", "target_std", ".", "extend", "(", "np", ".", "sqrt", "(", "_var", ")", ".", "flatten", "(", ")", ")", "\n", "# target_mu.append(_mu)", "\n", "# target_std.append(np.sqrt(_var))", "\n", "\n", "", "predictive_mu", ".", "append", "(", "target_mu", ")", "\n", "predictive_std", ".", "append", "(", "target_std", ")", "\n", "\n", "", "n_sampling", "=", "100", "\n", "argmin_cnt", "=", "[", "0", "]", "*", "(", "self", ".", "n_runhistory", "+", "1", ")", "\n", "ranking_loss_hist", "=", "list", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "n_sampling", ")", ":", "\n", "            ", "ranking_loss_list", "=", "list", "(", ")", "\n", "for", "task_id", "in", "range", "(", "self", ".", "n_runhistory", ")", ":", "\n", "                ", "sampled_y", "=", "np", ".", "random", ".", "normal", "(", "predictive_mu", "[", "task_id", "]", ",", "predictive_std", "[", "task_id", "]", ")", "\n", "rank_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "                        ", "if", "(", "y", "[", "i", "]", "<", "y", "[", "j", "]", ")", "^", "(", "sampled_y", "[", "i", "]", "<", "sampled_y", "[", "j", "]", ")", ":", "\n", "                            ", "rank_loss", "+=", "1", "\n", "", "", "", "ranking_loss_list", ".", "append", "(", "rank_loss", ")", "\n", "\n", "# Compute ranking loss for target surrogate.", "\n", "", "rank_loss", "=", "0", "\n", "if", "not", "skip_target_model", ":", "\n", "# fold_num = n_instance // n_fold", "\n", "# for i in range(n_fold):", "\n", "#     sampled_y = np.random.normal(predictive_mu[self.n_runhistory][i], predictive_std[self.n_runhistory][i])", "\n", "#     bound = (n_instance - i * fold_num) if i == (n_fold - 1) else fold_num", "\n", "#     start_id = fold_num*i", "\n", "#     for i in range(start_id, start_id + bound):", "\n", "#         for j in range(n_instance):", "\n", "#             if (y[i] < y[j]) ^ (sampled_y[i] < sampled_y[j]):", "\n", "#                 rank_loss += 1", "\n", "                ", "sampled_y", "=", "np", ".", "random", ".", "normal", "(", "predictive_mu", "[", "self", ".", "n_runhistory", "]", ",", "predictive_std", "[", "self", ".", "n_runhistory", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "                        ", "if", "(", "y", "[", "i", "]", "<", "y", "[", "j", "]", ")", "^", "(", "sampled_y", "[", "i", "]", "<", "sampled_y", "[", "j", "]", ")", ":", "\n", "                            ", "rank_loss", "+=", "1", "\n", "", "", "", "", "else", ":", "\n", "                ", "rank_loss", "=", "len", "(", "y", ")", "*", "len", "(", "y", ")", "\n", "", "ranking_loss_list", ".", "append", "(", "rank_loss", ")", "\n", "ranking_loss_hist", ".", "append", "(", "ranking_loss_list", ")", "\n", "argmin_id", "=", "np", ".", "argmin", "(", "ranking_loss_list", ")", "\n", "argmin_cnt", "[", "argmin_id", "]", "+=", "1", "\n", "\n", "", "self", ".", "model_weights", "=", "np", ".", "array", "(", "argmin_cnt", ")", "/", "n_sampling", "\n", "print", "(", "self", ".", "model_weights", ")", "\n", "\n", "self", ".", "ignore_flag", "=", "[", "False", "]", "*", "self", ".", "n_runhistory", "\n", "ranking_loss_hist", "=", "np", ".", "array", "(", "ranking_loss_hist", ")", "\n", "threshold", "=", "sorted", "(", "ranking_loss_hist", "[", ":", ",", "-", "1", "]", ")", "[", "int", "(", "n_sampling", "*", "0.7", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_runhistory", ")", ":", "\n", "            ", "median", "=", "sorted", "(", "ranking_loss_hist", "[", ":", ",", "i", "]", ")", "[", "int", "(", "n_sampling", "*", "0.5", ")", "]", "\n", "self", ".", "ignore_flag", "[", "i", "]", "=", "median", ">", "threshold", "\n", "", "print", "(", "self", ".", "ignore_flag", ")", "\n", "print", "(", "'Updating weights took %.3f sec.'", "%", "(", "time", ".", "time", "(", ")", "-", "_start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble._train": [[223, 246], ["gp_ensemble.GaussianProcessEnsemble._impute_inactive", "gp_ensemble.GaussianProcessEnsemble.create_basic_model", "gp_ensemble.GaussianProcessEnsemble.target_model.train", "gp_ensemble.GaussianProcessEnsemble._update_weights"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._impute_inactive", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble.create_basic_model", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble._update_weights"], ["", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"\n\n        Parameters\n        ----------\n        X: np.ndarray (N, D)\n            Input data points. The dimensionality of X is (N, D),\n            with N as the number of points and D is the number of features.\n        y: np.ndarray (N,)\n            The corresponding target values.\n        do_optimize: boolean\n            If set to true the hyperparameters are optimized otherwise\n            the default hyperparameters of the kernel are used.\n        \"\"\"", "\n", "\n", "X", "=", "self", ".", "_impute_inactive", "(", "X", ")", "\n", "self", ".", "target_model", "=", "self", ".", "create_basic_model", "(", ")", "\n", "self", ".", "target_model", ".", "train", "(", "X", ",", "y", ")", "\n", "\n", "self", ".", "is_trained", "=", "True", "\n", "if", "self", ".", "weight_update_id", "%", "self", ".", "n_steps_update", "==", "0", ":", "\n", "            ", "self", ".", "_update_weights", "(", "X", ",", "y", ")", "\n", "", "self", ".", "weight_update_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.GaussianProcessEnsemble._predict": [[247, 312], ["numpy.zeros", "numpy.zeros", "gp_ensemble.GaussianProcessEnsemble.target_model.predict", "range", "range", "numpy.isfinite().all", "numpy.isfinite().all", "numpy.power", "numpy.zeros", "numpy.zeros", "mu.flatten", "gp_ensemble.GaussianProcessEnsemble.gp_models[].predict", "numpy.sum", "numpy.sum", "mu.reshape", "var.reshape", "gp_ensemble.GaussianProcessEnsemble.gp_models[].predict", "var.flatten", "mu_t.flatten", "numpy.isfinite", "numpy.isfinite", "var_t.flatten"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "_predict", "(", "self", ",", "X_test", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"\n        Returns the predictive mean and variance of the objective function at\n        the given test points.\n          Predict the given x's objective value (mean, std).\n          The predicting result is influenced by the ensemble surrogate with weights.\n\n        Parameters\n        ----------\n        X_test: np.ndarray (N, D)\n            Input test points\n\n        Returns\n        ----------\n        np.array(N,)\n            predictive mean\n        np.array(N,) or np.array(N, N) if full_cov == True\n            predictive variance\n\n        \"\"\"", "\n", "\n", "n", "=", "X_test", ".", "shape", "[", "0", "]", "\n", "mu", ",", "var", "=", "np", ".", "zeros", "(", "n", ")", ",", "np", ".", "zeros", "(", "n", ")", "\n", "\n", "if", "self", ".", "target_model", "is", "not", "None", ":", "\n", "            ", "mu", ",", "var", "=", "self", ".", "target_model", ".", "predict", "(", "X_test", ")", "\n", "\n", "# Target surrogate predictions with weight.", "\n", "", "if", "self", ".", "gp_fusion", "in", "[", "'indp-aspt'", ",", "'no-unct'", "]", ":", "\n", "            ", "mu", "*=", "self", ".", "model_weights", "[", "-", "1", "]", "\n", "if", "self", ".", "gp_fusion", "==", "'indp-aspt'", ":", "\n", "                ", "var", "*=", "np", ".", "power", "(", "self", ".", "model_weights", "[", "-", "1", "]", ",", "2", ")", "\n", "\n", "# Base surrogate predictions with corresponding weights.", "\n", "", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_runhistory", ")", ":", "\n", "                ", "if", "not", "self", ".", "ignore_flag", "[", "i", "]", ":", "\n", "                    ", "_w", "=", "self", ".", "model_weights", "[", "i", "]", "\n", "_mu", ",", "_var", "=", "self", ".", "gp_models", "[", "i", "]", ".", "predict", "(", "X_test", ")", "\n", "mu", "+=", "_w", "*", "_mu", "\n", "if", "self", ".", "gp_fusion", "==", "'indp-aspt'", ":", "\n", "                        ", "var", "+=", "_w", "*", "_w", "*", "_var", "\n", "", "", "", "return", "mu", ",", "var", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "n_runhistory", "+", "1", "\n", "ep", "=", "1e-8", "\n", "mu_", ",", "var_", "=", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", ",", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", "\n", "\n", "mu_t", ",", "var_t", "=", "mu", ".", "flatten", "(", ")", ",", "var", ".", "flatten", "(", ")", "+", "ep", "\n", "var_", "[", ":", ",", "-", "1", "]", "=", "1.", "/", "var_t", "*", "self", ".", "model_weights", "[", "-", "1", "]", "\n", "mu_", "[", ":", ",", "-", "1", "]", "=", "1.", "/", "var_t", "*", "mu_t", "*", "self", ".", "model_weights", "[", "-", "1", "]", "\n", "\n", "# Predictions from basic surrogates.", "\n", "for", "i", "in", "range", "(", "self", ".", "n_runhistory", ")", ":", "\n", "                ", "mu_t", ",", "var_t", "=", "self", ".", "gp_models", "[", "i", "]", ".", "predict", "(", "X_test", ")", "\n", "mu_t", ",", "var_t", "=", "mu_t", ".", "flatten", "(", ")", ",", "var_t", ".", "flatten", "(", ")", "+", "ep", "\n", "\n", "# compute the gaussian experts.", "\n", "var_", "[", ":", ",", "i", "]", "=", "1.", "/", "var_t", "*", "self", ".", "model_weights", "[", "i", "]", "\n", "mu_", "[", ":", ",", "i", "]", "=", "1.", "/", "var_t", "*", "mu_t", "*", "self", ".", "model_weights", "[", "i", "]", "\n", "\n", "", "var", "=", "1.", "/", "np", ".", "sum", "(", "var_", ",", "axis", "=", "1", ")", "\n", "mu", "=", "np", ".", "sum", "(", "mu_", ",", "axis", "=", "1", ")", "*", "var", "\n", "assert", "np", ".", "isfinite", "(", "var", ")", ".", "all", "(", ")", "\n", "assert", "np", ".", "isfinite", "(", "mu", ")", ".", "all", "(", ")", "\n", "return", "mu", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "var", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.create_gp_model": [[16, 69], ["utils.util_funcs.get_types", "gp_kernels.ConstantKernel", "gp_kernels.WhiteKernel", "rng.randint", "gp.GaussianProcess", "utils.util_funcs.get_rng", "numpy.nonzero", "numpy.nonzero", "len", "gp_kernels.Matern", "len", "gp_kernels.HammingKernel", "gp_base_priors.LognormalPrior", "numpy.ones", "numpy.ones", "gp_base_priors.HorseshoePrior", "len", "len", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "len", "len", "ValueError", "len", "numpy.exp", "numpy.exp", "range", "len", "numpy.exp", "numpy.exp", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.get_types", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng"], ["def", "create_gp_model", "(", "config_space", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n        Construct the Gaussian process model that is capable of dealing with categorical hyperparameters.\n    \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "_", ",", "rng", "=", "get_rng", "(", "rng", ")", "\n", "", "types", ",", "bounds", "=", "get_types", "(", "config_space", ",", "instance_features", "=", "None", ")", "\n", "\n", "cov_amp", "=", "ConstantKernel", "(", "\n", "2.0", ",", "\n", "constant_value_bounds", "=", "(", "np", ".", "exp", "(", "-", "10", ")", ",", "np", ".", "exp", "(", "2", ")", ")", ",", "\n", "prior", "=", "LognormalPrior", "(", "mean", "=", "0.0", ",", "sigma", "=", "1.0", ",", "rng", "=", "rng", ")", ",", "\n", ")", "\n", "\n", "cont_dims", "=", "np", ".", "nonzero", "(", "types", "==", "0", ")", "[", "0", "]", "\n", "cat_dims", "=", "np", ".", "nonzero", "(", "types", "!=", "0", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "cont_dims", ")", ">", "0", ":", "\n", "        ", "exp_kernel", "=", "Matern", "(", "\n", "np", ".", "ones", "(", "[", "len", "(", "cont_dims", ")", "]", ")", ",", "\n", "[", "(", "np", ".", "exp", "(", "-", "6.754111155189306", ")", ",", "np", ".", "exp", "(", "0.0858637988771976", ")", ")", "for", "_", "in", "range", "(", "len", "(", "cont_dims", ")", ")", "]", ",", "\n", "nu", "=", "2.5", ",", "\n", "operate_on", "=", "cont_dims", ",", "\n", ")", "\n", "\n", "", "if", "len", "(", "cat_dims", ")", ">", "0", ":", "\n", "        ", "ham_kernel", "=", "HammingKernel", "(", "\n", "np", ".", "ones", "(", "[", "len", "(", "cat_dims", ")", "]", ")", ",", "\n", "[", "(", "np", ".", "exp", "(", "-", "6.754111155189306", ")", ",", "np", ".", "exp", "(", "0.0858637988771976", ")", ")", "for", "_", "in", "range", "(", "len", "(", "cat_dims", ")", ")", "]", ",", "\n", "operate_on", "=", "cat_dims", ",", "\n", ")", "\n", "\n", "", "noise_kernel", "=", "WhiteKernel", "(", "\n", "noise_level", "=", "1e-8", ",", "\n", "noise_level_bounds", "=", "(", "np", ".", "exp", "(", "-", "25", ")", ",", "np", ".", "exp", "(", "2", ")", ")", ",", "\n", "prior", "=", "HorseshoePrior", "(", "scale", "=", "0.1", ",", "rng", "=", "rng", ")", ",", "\n", ")", "\n", "\n", "if", "len", "(", "cont_dims", ")", ">", "0", "and", "len", "(", "cat_dims", ")", ">", "0", ":", "\n", "# both", "\n", "        ", "kernel", "=", "cov_amp", "*", "(", "exp_kernel", "*", "ham_kernel", ")", "+", "noise_kernel", "\n", "", "elif", "len", "(", "cont_dims", ")", ">", "0", "and", "len", "(", "cat_dims", ")", "==", "0", ":", "\n", "# only cont", "\n", "        ", "kernel", "=", "cov_amp", "*", "exp_kernel", "+", "noise_kernel", "\n", "", "elif", "len", "(", "cont_dims", ")", "==", "0", "and", "len", "(", "cat_dims", ")", ">", "0", ":", "\n", "# only cont", "\n", "        ", "kernel", "=", "cov_amp", "*", "ham_kernel", "+", "noise_kernel", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "seed", "=", "rng", ".", "randint", "(", "0", ",", "2", "**", "20", ")", "\n", "model", "=", "GaussianProcess", "(", "config_space", ",", "types", ",", "bounds", ",", "seed", ",", "kernel", ",", "return_normalized_y", "=", "True", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp.GaussianProcess.__init__": [[53, 77], ["models.base_model.BaseModel.__init__", "gp.GaussianProcess._set_has_conditions"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._set_has_conditions"], ["def", "__init__", "(", "\n", "self", ",", "\n", "configspace", ":", "ConfigurationSpace", ",", "\n", "types", ":", "np", ".", "ndarray", ",", "\n", "bounds", ":", "typing", ".", "List", "[", "typing", ".", "Tuple", "[", "float", ",", "float", "]", "]", ",", "\n", "seed", ":", "int", ",", "\n", "kernel", ":", "Kernel", ",", "\n", "normalize_y", ":", "bool", "=", "True", ",", "\n", "n_opt_restarts", "=", "10", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "configspace", "=", "configspace", ",", "types", "=", "types", ",", "bounds", "=", "bounds", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "gp", "=", "None", "\n", "self", ".", "normalize_y", "=", "normalize_y", "\n", "self", ".", "n_opt_restarts", "=", "n_opt_restarts", "\n", "\n", "self", ".", "hypers", "=", "[", "]", "\n", "self", ".", "is_trained", "=", "False", "\n", "self", ".", "_n_ll_evals", "=", "0", "\n", "\n", "self", ".", "_set_has_conditions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp.GaussianProcess._train": [[78, 132], ["gp.GaussianProcess._impute_inactive", "range", "gp.GaussianProcess._normalize_y", "gp.GaussianProcess._get_all_priors", "gp.GaussianProcess._optimize", "gp.GaussianProcess.gp.fit", "GaussianProcessRegressor", "gp.GaussianProcess.gp.fit", "numpy.exp", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._impute_inactive", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._normalize_y", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._get_all_priors", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer._optimize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ",", "do_optimize", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Computes the Cholesky decomposition of the covariance of X and\n        estimates the GP hyperparameters by optimizing the marginal\n        loglikelihood. The prior mean of the GP is set to the empirical\n        mean of X.\n\n        Parameters\n        ----------\n        X: np.ndarray (N, D)\n            Input data points. The dimensionality of X is (N, D),\n            with N as the number of points and D is the number of features.\n        y: np.ndarray (N,)\n            The corresponding target values.\n        do_optimize: boolean\n            If set to true the hyperparameters are optimized otherwise\n            the default hyperparameters of the kernel are used.\n        \"\"\"", "\n", "\n", "X", "=", "self", ".", "_impute_inactive", "(", "X", ")", "\n", "if", "self", ".", "normalize_y", ":", "\n", "            ", "y", "=", "self", ".", "_normalize_y", "(", "y", ")", "\n", "\n", "", "n_tries", "=", "10", "\n", "for", "i", "in", "range", "(", "n_tries", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "gp", "=", "GaussianProcessRegressor", "(", "\n", "kernel", "=", "self", ".", "kernel", ",", "\n", "normalize_y", "=", "False", ",", "\n", "optimizer", "=", "None", ",", "\n", "n_restarts_optimizer", "=", "-", "1", ",", "# Do not use scikit-learn's optimization routine", "\n", "alpha", "=", "0", ",", "# Governed by the kernel", "\n", "noise", "=", "None", ",", "\n", "random_state", "=", "self", ".", "rng", ",", "\n", ")", "\n", "self", ".", "gp", ".", "fit", "(", "X", ",", "y", ")", "\n", "break", "\n", "", "except", "np", ".", "linalg", ".", "LinAlgError", "as", "e", ":", "\n", "                ", "if", "i", "==", "n_tries", ":", "\n", "                    ", "raise", "e", "\n", "# Assume that the last entry of theta is the noise", "\n", "", "theta", "=", "np", ".", "exp", "(", "self", ".", "kernel", ".", "theta", ")", "\n", "theta", "[", "-", "1", "]", "+=", "1", "\n", "self", ".", "kernel", ".", "theta", "=", "np", ".", "log", "(", "theta", ")", "\n", "\n", "", "", "if", "do_optimize", ":", "\n", "            ", "self", ".", "_all_priors", "=", "self", ".", "_get_all_priors", "(", "add_bound_priors", "=", "False", ")", "\n", "self", ".", "hypers", "=", "self", ".", "_optimize", "(", ")", "\n", "self", ".", "gp", ".", "kernel", ".", "theta", "=", "self", ".", "hypers", "\n", "self", ".", "gp", ".", "fit", "(", "X", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hypers", "=", "self", ".", "gp", ".", "kernel", ".", "theta", "\n", "\n", "", "self", ".", "is_trained", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp.GaussianProcess._nll": [[133, 167], ["enumerate", "gp.GaussianProcess.gp.log_marginal_likelihood", "prior.lnprob", "prior.gradient", "numpy.isfinite().all", "numpy.all", "numpy.zeros", "numpy.zeros", "numpy.isfinite", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.lnprob", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.gradient"], ["", "def", "_nll", "(", "self", ",", "theta", ":", "np", ".", "ndarray", ")", "->", "typing", ".", "Tuple", "[", "float", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Returns the negative marginal log likelihood (+ the prior) for\n        a hyperparameter configuration theta.\n        (negative because we use scipy minimize for optimization)\n\n        Parameters\n        ----------\n        theta : np.ndarray(H)\n            Hyperparameter vector. Note that all hyperparameter are\n            on a log scale.\n\n        Returns\n        ----------\n        float\n            lnlikelihood + prior\n        \"\"\"", "\n", "self", ".", "_n_ll_evals", "+=", "1", "\n", "\n", "try", ":", "\n", "            ", "lml", ",", "grad", "=", "self", ".", "gp", ".", "log_marginal_likelihood", "(", "theta", ",", "eval_gradient", "=", "True", ")", "\n", "", "except", "np", ".", "linalg", ".", "LinAlgError", ":", "\n", "            ", "return", "1e25", ",", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "\n", "", "for", "dim", ",", "priors", "in", "enumerate", "(", "self", ".", "_all_priors", ")", ":", "\n", "            ", "for", "prior", "in", "priors", ":", "\n", "                ", "lml", "+=", "prior", ".", "lnprob", "(", "theta", "[", "dim", "]", ")", "\n", "grad", "[", "dim", "]", "+=", "prior", ".", "gradient", "(", "theta", "[", "dim", "]", ")", "\n", "\n", "# We add a minus here because scipy is minimizing", "\n", "", "", "if", "not", "np", ".", "isfinite", "(", "lml", ")", ".", "all", "(", ")", "or", "not", "np", ".", "all", "(", "np", ".", "isfinite", "(", "grad", ")", ")", ":", "\n", "            ", "return", "1e25", ",", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "-", "lml", ",", "-", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp.GaussianProcess._optimize": [[168, 215], ["enumerate", "enumerate", "list", "scipy.optimize.fmin_l_bfgs_b", "isinstance", "numpy.vstack().transpose", "dim_samples.append", "dim_samples.append", "len", "gp.GaussianProcess.rng.uniform", "gp.GaussianProcess.flatten", "prior.sample_from_prior().flatten", "numpy.vstack", "ValueError", "prior.sample_from_prior"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.sample_from_prior"], ["", "", "def", "_optimize", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Optimizes the marginal log likelihood and returns the best found\n        hyperparameter configuration theta.\n\n        Returns\n        -------\n        theta : np.ndarray(H)\n            Hyperparameter vector that maximizes the marginal log likelihood\n        \"\"\"", "\n", "\n", "log_bounds", "=", "[", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ")", "for", "b", "in", "self", ".", "gp", ".", "kernel", ".", "bounds", "]", "\n", "\n", "# Start optimization from the previous hyperparameter configuration", "\n", "p0", "=", "[", "self", ".", "gp", ".", "kernel", ".", "theta", "]", "\n", "if", "self", ".", "n_opt_restarts", ">", "0", ":", "\n", "            ", "dim_samples", "=", "[", "]", "\n", "for", "dim", ",", "hp_bound", "in", "enumerate", "(", "log_bounds", ")", ":", "\n", "                ", "prior", "=", "self", ".", "_all_priors", "[", "dim", "]", "\n", "# Always sample from the first prior", "\n", "if", "isinstance", "(", "prior", ",", "list", ")", ":", "\n", "                    ", "if", "len", "(", "prior", ")", "==", "0", ":", "\n", "                        ", "prior", "=", "None", "\n", "", "else", ":", "\n", "                        ", "prior", "=", "prior", "[", "0", "]", "\n", "", "", "if", "prior", "is", "None", ":", "\n", "                    ", "try", ":", "\n", "                        ", "sample", "=", "self", ".", "rng", ".", "uniform", "(", "\n", "low", "=", "hp_bound", "[", "0", "]", ",", "\n", "high", "=", "hp_bound", "[", "1", "]", ",", "\n", "size", "=", "(", "self", ".", "n_opt_restarts", ",", ")", ",", "\n", ")", "\n", "", "except", "OverflowError", ":", "\n", "                        ", "raise", "ValueError", "(", "'OverflowError while sampling from (%f, %f)'", "%", "(", "hp_bound", "[", "0", "]", ",", "hp_bound", "[", "1", "]", ")", ")", "\n", "", "dim_samples", ".", "append", "(", "sample", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "dim_samples", ".", "append", "(", "prior", ".", "sample_from_prior", "(", "self", ".", "n_opt_restarts", ")", ".", "flatten", "(", ")", ")", "\n", "", "", "p0", "+=", "list", "(", "np", ".", "vstack", "(", "dim_samples", ")", ".", "transpose", "(", ")", ")", "\n", "\n", "", "theta_star", "=", "None", "\n", "f_opt_star", "=", "np", ".", "inf", "\n", "for", "i", ",", "start_point", "in", "enumerate", "(", "p0", ")", ":", "\n", "            ", "theta", ",", "f_opt", ",", "_", "=", "optimize", ".", "fmin_l_bfgs_b", "(", "self", ".", "_nll", ",", "start_point", ",", "bounds", "=", "log_bounds", ")", "\n", "if", "f_opt", "<", "f_opt_star", ":", "\n", "                ", "f_opt_star", "=", "f_opt", "\n", "theta_star", "=", "theta", "\n", "", "", "return", "theta_star", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp.GaussianProcess._predict": [[216, 254], ["gp.GaussianProcess._impute_inactive", "gp.GaussianProcess.gp.predict", "numpy.diag", "numpy.clip", "Exception", "gp.GaussianProcess._untransform_y"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._impute_inactive", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._untransform_y"], ["", "def", "_predict", "(", "self", ",", "X_test", ":", "np", ".", "ndarray", ",", "full_cov", ":", "bool", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        Returns the predictive mean and variance of the objective function at\n        the given test points.\n\n        Parameters\n        ----------\n        X_test: np.ndarray (N, D)\n            Input test points\n        full_cov: bool\n            If set to true than the whole covariance matrix between the test points is returned\n\n        Returns\n        ----------\n        np.array(N,)\n            predictive mean\n        np.array(N,) or np.array(N, N) if full_cov == True\n            predictive variance\n\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "is_trained", ":", "\n", "            ", "raise", "Exception", "(", "'Model has to be trained first!'", ")", "\n", "\n", "", "X_test", "=", "self", ".", "_impute_inactive", "(", "X_test", ")", "\n", "mu", ",", "var", "=", "self", ".", "gp", ".", "predict", "(", "X_test", ",", "return_cov", "=", "True", ")", "\n", "var", "=", "np", ".", "diag", "(", "var", ")", "\n", "\n", "# Clip negative variances and set them to the smallest", "\n", "# positive float value", "\n", "var", "=", "np", ".", "clip", "(", "var", ",", "VERY_SMALL_NUMBER", ",", "np", ".", "inf", ")", "\n", "if", "self", ".", "return_normalized_y", ":", "\n", "            ", "return", "mu", ",", "var", "\n", "\n", "", "if", "self", ".", "normalize_y", ":", "\n", "            ", "mu", ",", "var", "=", "self", ".", "_untransform_y", "(", "mu", ",", "var", ")", "\n", "\n", "", "return", "mu", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp.GaussianProcess.sample_functions": [[255, 287], ["gp.GaussianProcess._impute_inactive", "gp.GaussianProcess.gp.sample_y", "numpy.squeeze", "Exception", "gp.GaussianProcess._untransform_y", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._impute_inactive", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._untransform_y"], ["", "def", "sample_functions", "(", "self", ",", "X_test", ":", "np", ".", "ndarray", ",", "n_funcs", ":", "int", "=", "1", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Samples F function values from the current posterior at the N\n        specified test points.\n\n        Parameters\n        ----------\n        X_test: np.ndarray (N, D)\n            Input test points\n        n_funcs: int\n            Number of function values that are drawn at each test point.\n\n        Returns\n        ----------\n        function_samples: np.array(F, N)\n            The F function values drawn at the N test points.\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "is_trained", ":", "\n", "            ", "raise", "Exception", "(", "'Model has to be trained first!'", ")", "\n", "\n", "", "X_test", "=", "self", ".", "_impute_inactive", "(", "X_test", ")", "\n", "funcs", "=", "self", ".", "gp", ".", "sample_y", "(", "X_test", ",", "n_samples", "=", "n_funcs", ",", "random_state", "=", "self", ".", "rng", ")", "\n", "funcs", "=", "np", ".", "squeeze", "(", "funcs", ",", "axis", "=", "1", ")", "\n", "\n", "if", "self", ".", "normalize_y", ":", "\n", "            ", "funcs", "=", "self", ".", "_untransform_y", "(", "funcs", ")", "\n", "\n", "", "if", "len", "(", "funcs", ".", "shape", ")", "==", "1", ":", "\n", "            ", "return", "funcs", "[", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "funcs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.__call__": [[32, 65], ["gp_kernels.MagicMixin._call", "gp_kernels.get_conditional_hyperparameters", "gp_kernels.MagicMixin._call", "X[].reshape", "gp_kernels.MagicMixin._call", "X[].reshape", "Y[].reshape", "gp_kernels.get_conditional_hyperparameters", "gp_kernels.get_conditional_hyperparameters", "X[].reshape", "X[].reshape", "Y[].reshape"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.HammingKernel._call", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.get_conditional_hyperparameters", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.HammingKernel._call", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.HammingKernel._call", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.get_conditional_hyperparameters", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.get_conditional_hyperparameters"], ["def", "__call__", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "\n", "        ", "if", "active", "is", "None", "and", "self", ".", "has_conditions", ":", "\n", "            ", "if", "self", ".", "operate_on", "is", "None", ":", "\n", "                ", "active", "=", "get_conditional_hyperparameters", "(", "X", ",", "Y", ")", "\n", "", "else", ":", "\n", "                ", "if", "Y", "is", "None", ":", "\n", "                    ", "active", "=", "get_conditional_hyperparameters", "(", "X", "[", ":", ",", "self", ".", "operate_on", "]", ",", "None", ")", "\n", "", "else", ":", "\n", "                    ", "active", "=", "get_conditional_hyperparameters", "(", "X", "[", ":", ",", "self", ".", "operate_on", "]", ",", "Y", "[", ":", ",", "self", ".", "operate_on", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "operate_on", "is", "None", ":", "\n", "            ", "rval", "=", "self", ".", "_call", "(", "X", ",", "Y", ",", "eval_gradient", ",", "active", ")", "\n", "", "else", ":", "\n", "            ", "if", "Y", "is", "None", ":", "\n", "                ", "rval", "=", "self", ".", "_call", "(", "\n", "X", "=", "X", "[", ":", ",", "self", ".", "operate_on", "]", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "len_active", "]", ")", ",", "\n", "Y", "=", "None", ",", "\n", "eval_gradient", "=", "eval_gradient", ",", "\n", "active", "=", "active", ",", "\n", ")", "\n", "X", "=", "X", "[", ":", ",", "self", ".", "operate_on", "]", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "len_active", ")", ")", "\n", "", "else", ":", "\n", "                ", "rval", "=", "self", ".", "_call", "(", "\n", "X", "=", "X", "[", ":", ",", "self", ".", "operate_on", "]", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "len_active", "]", ")", ",", "\n", "Y", "=", "Y", "[", ":", ",", "self", ".", "operate_on", "]", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "len_active", "]", ")", ",", "\n", "eval_gradient", "=", "eval_gradient", ",", "\n", "active", "=", "active", ",", "\n", ")", "\n", "X", "=", "X", "[", ":", ",", "self", ".", "operate_on", "]", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "len_active", ")", ")", "\n", "Y", "=", "Y", "[", ":", ",", "self", ".", "operate_on", "]", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "len_active", ")", ")", "\n", "\n", "", "", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.__add__": [[66, 70], ["gp_kernels.Sum", "isinstance", "gp_kernels.Sum", "gp_kernels.ConstantKernel"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "b", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "b", ",", "kernels", ".", "Kernel", ")", ":", "\n", "            ", "return", "Sum", "(", "self", ",", "ConstantKernel", "(", "b", ")", ")", "\n", "", "return", "Sum", "(", "self", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.__radd__": [[71, 75], ["gp_kernels.Sum", "isinstance", "gp_kernels.Sum", "gp_kernels.ConstantKernel"], "methods", ["None"], ["", "def", "__radd__", "(", "self", ",", "b", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "b", ",", "kernels", ".", "Kernel", ")", ":", "\n", "            ", "return", "Sum", "(", "ConstantKernel", "(", "b", ")", ",", "self", ")", "\n", "", "return", "Sum", "(", "b", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.__mul__": [[76, 80], ["gp_kernels.Product", "isinstance", "gp_kernels.Product", "gp_kernels.ConstantKernel"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "b", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "b", ",", "kernels", ".", "Kernel", ")", ":", "\n", "            ", "return", "Product", "(", "self", ",", "ConstantKernel", "(", "b", ")", ")", "\n", "", "return", "Product", "(", "self", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.__rmul__": [[81, 85], ["gp_kernels.Product", "isinstance", "gp_kernels.Product", "gp_kernels.ConstantKernel"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "b", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "b", ",", "kernels", ".", "Kernel", ")", ":", "\n", "            ", "return", "Product", "(", "ConstantKernel", "(", "b", ")", ",", "self", ")", "\n", "", "return", "Product", "(", "b", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin._signature": [[86, 96], ["gp_kernels.MagicMixin._signature_cache.get", "inspect.signature", "dict"], "methods", ["None"], ["", "def", "_signature", "(", "self", ",", "func", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sig", "=", "self", ".", "_signature_cache", ".", "get", "(", "func", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "self", ".", "_signature_cache", "=", "dict", "(", ")", "\n", "sig", "=", "None", "\n", "", "if", "sig", "is", "None", ":", "\n", "            ", "sig", "=", "signature", "(", "func", ")", "\n", "self", ".", "_signature_cache", "[", "func", "]", "=", "sig", "\n", "", "return", "sig", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.get_params": [[97, 127], ["dict", "getattr", "super().get_params", "list", "super().get_params.keys", "list.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.get_params", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "get_params", "(", "self", ",", "deep", "=", "True", ")", ":", "\n", "        ", "\"\"\"Get parameters of this kernel.\n\n        Parameters\n        ----------\n        deep : boolean, optional\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.\n\n        Returns\n        -------\n        params : mapping of string to any\n            Parameter names mapped to their values.\n        \"\"\"", "\n", "params", "=", "dict", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "args", "=", "self", ".", "_args_cache", "\n", "", "except", "AttributeError", ":", "\n", "            ", "tmp", "=", "super", "(", ")", ".", "get_params", "(", "deep", ")", "\n", "args", "=", "list", "(", "tmp", ".", "keys", "(", ")", ")", "\n", "# Sum and Product do not clone the 'has_conditions' attribute by default. Instead of changing their", "\n", "# get_params() method, we simply add the attribute here!", "\n", "if", "'has_conditions'", "not", "in", "args", ":", "\n", "                ", "args", ".", "append", "(", "'has_conditions'", ")", "\n", "", "self", ".", "_args_cache", "=", "args", "\n", "\n", "", "for", "arg", "in", "args", ":", "\n", "            ", "params", "[", "arg", "]", "=", "getattr", "(", "self", ",", "arg", ",", "None", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.hyperparameters": [[128, 140], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hyperparameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of all hyperparameter specifications.\"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_hyperparameters_cache", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "\n", "", "r", "=", "super", "(", ")", ".", "hyperparameters", "\n", "self", ".", "_hyperparameters_cache", "=", "r", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.n_dims": [[141, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_dims", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of non-fixed hyperparameters of the kernel.\"\"\"", "\n", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_n_dims_cache", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "_n_dims_cache", "=", "super", "(", ")", ".", "n_dims", "\n", "return", "self", ".", "_n_dims_cache", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.clone_with_theta": [[153, 163], ["None"], "methods", ["None"], ["", "def", "clone_with_theta", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"Returns a clone of self with given hyperparameters theta.\n\n        Parameters\n        ----------\n        theta : array, shape (n_dims,)\n            The hyperparameters\n        \"\"\"", "\n", "self", ".", "theta", "=", "theta", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims": [[164, 181], ["len", "type", "isinstance", "TypeError", "ValueError", "type"], "methods", ["None"], ["", "def", "set_active_dims", "(", "self", ",", "operate_on", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets dimensions this kernel should work on\n\n        Parameters\n        ----------\n        operate_on : None, list or array, shape (n_dims,)\n        \"\"\"", "\n", "if", "operate_on", "is", "not", "None", "and", "type", "(", "operate_on", ")", "in", "(", "list", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "operate_on", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'argument operate_on needs to be of type np.ndarray, but is %s'", "%", "type", "(", "operate_on", ")", ")", "\n", "", "if", "operate_on", ".", "dtype", "!=", "np", ".", "int", ":", "\n", "                ", "raise", "ValueError", "(", "'dtype of argument operate_on needs to be np.int, but is %s'", "%", "operate_on", ".", "dtype", ")", "\n", "", "self", ".", "operate_on", "=", "operate_on", "\n", "self", ".", "len_active", "=", "len", "(", "operate_on", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "operate_on", "=", "None", "\n", "self", ".", "len_active", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.Sum.__init__": [[185, 189], ["super().__init__", "gp_kernels.Sum.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "self", ",", "k1", ",", "k2", ",", "operate_on", "=", "None", ",", "has_conditions", "=", "False", ")", ":", "\n", "        ", "super", "(", "Sum", ",", "self", ")", ".", "__init__", "(", "k1", "=", "k1", ",", "k2", "=", "k2", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.Sum._call": [[190, 225], ["gp_kernels.Sum.k1", "gp_kernels.Sum.k2", "numpy.dstack", "gp_kernels.Sum.k1", "gp_kernels.Sum.k2"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n\n        Parameters\n        ----------\n        X : array, shape (n_samples_X, n_features)\n            Left argument of the returned kernel k(X, Y)\n\n        Y : array, shape (n_samples_Y, n_features), (optional, default=None)\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n\n        eval_gradient : bool (optional, default=False)\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined.\n\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n\n        Returns\n        -------\n        K : array, shape (n_samples_X, n_samples_Y)\n            Kernel k(X, Y)\n\n        K_gradient : array (opt.), shape (n_samples_X, n_samples_X, n_dims)\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n        \"\"\"", "\n", "if", "eval_gradient", ":", "\n", "            ", "K1", ",", "K1_gradient", "=", "self", ".", "k1", "(", "X", ",", "Y", ",", "eval_gradient", "=", "True", ",", "active", "=", "active", ")", "\n", "K2", ",", "K2_gradient", "=", "self", ".", "k2", "(", "X", ",", "Y", ",", "eval_gradient", "=", "True", ",", "active", "=", "active", ")", "\n", "return", "K1", "+", "K2", ",", "np", ".", "dstack", "(", "(", "K1_gradient", ",", "K2_gradient", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "k1", "(", "X", ",", "Y", ",", "active", "=", "active", ")", "+", "self", ".", "k2", "(", "X", ",", "Y", ",", "active", "=", "active", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.Product.__init__": [[229, 233], ["super().__init__", "gp_kernels.Product.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "self", ",", "k1", ",", "k2", ",", "operate_on", "=", "None", ",", "has_conditions", "=", "False", ")", ":", "\n", "        ", "super", "(", "Product", ",", "self", ")", ".", "__init__", "(", "k1", "=", "k1", ",", "k2", "=", "k2", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.Product._call": [[234, 270], ["gp_kernels.Product.k1", "gp_kernels.Product.k2", "numpy.dstack", "gp_kernels.Product.k1", "gp_kernels.Product.k2"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n\n        Parameters\n        ----------\n        X : array, shape (n_samples_X, n_features)\n            Left argument of the returned kernel k(X, Y)\n\n        Y : array, shape (n_samples_Y, n_features), (optional, default=None)\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n\n        eval_gradient : bool (optional, default=False)\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined.\n\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n\n        Returns\n        -------\n        K : array, shape (n_samples_X, n_samples_Y)\n            Kernel k(X, Y)\n\n        K_gradient : array (opt.), shape (n_samples_X, n_samples_X, n_dims)\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n        \"\"\"", "\n", "if", "eval_gradient", ":", "\n", "            ", "K1", ",", "K1_gradient", "=", "self", ".", "k1", "(", "X", ",", "Y", ",", "eval_gradient", "=", "True", ",", "active", "=", "active", ")", "\n", "K2", ",", "K2_gradient", "=", "self", ".", "k2", "(", "X", ",", "Y", ",", "eval_gradient", "=", "True", ",", "active", "=", "active", ")", "\n", "return", "K1", "*", "K2", ",", "np", ".", "dstack", "(", "(", "K1_gradient", "*", "K2", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "K2_gradient", "*", "K1", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "k1", "(", "X", ",", "Y", ",", "active", "=", "active", ")", "*", "self", ".", "k2", "(", "X", ",", "Y", ",", "active", "=", "active", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.ConstantKernel.__init__": [[274, 286], ["super().__init__", "gp_kernels.ConstantKernel.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "constant_value", "=", "1.0", ",", "\n", "constant_value_bounds", "=", "(", "1e-5", ",", "1e5", ")", ",", "\n", "operate_on", "=", "None", ",", "\n", "prior", "=", "None", ",", "\n", "has_conditions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ConstantKernel", ",", "self", ")", ".", "__init__", "(", "constant_value", "=", "constant_value", ",", "constant_value_bounds", "=", "constant_value_bounds", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.ConstantKernel._call": [[287, 333], ["numpy.atleast_2d", "numpy.full", "ValueError", "numpy.array", "numpy.full", "numpy.empty", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n\n        Parameters\n        ----------\n        X : array, shape (n_samples_X, n_features)\n            Left argument of the returned kernel k(X, Y)\n\n        Y : array, shape (n_samples_Y, n_features), (optional, default=None)\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n\n        eval_gradient : bool (optional, default=False)\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined. Only supported when Y is None.\n\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n\n        Returns\n        -------\n        K : array, shape (n_samples_X, n_samples_Y)\n            Kernel k(X, Y)\n\n        K_gradient : array (opt.), shape (n_samples_X, n_samples_X, n_dims)\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n        \"\"\"", "\n", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "if", "Y", "is", "None", ":", "\n", "            ", "Y", "=", "X", "\n", "", "elif", "eval_gradient", ":", "\n", "            ", "raise", "ValueError", "(", "\"Gradient can only be evaluated when Y is None.\"", ")", "\n", "\n", "", "K", "=", "np", ".", "full", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "Y", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "constant_value", ",", "\n", "dtype", "=", "np", ".", "array", "(", "self", ".", "constant_value", ")", ".", "dtype", ")", "\n", "if", "eval_gradient", ":", "\n", "            ", "if", "not", "self", ".", "hyperparameter_constant_value", ".", "fixed", ":", "\n", "                ", "return", "(", "K", ",", "np", ".", "full", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "\n", "self", ".", "constant_value", ",", "\n", "dtype", "=", "np", ".", "array", "(", "self", ".", "constant_value", ")", ".", "dtype", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "K", ",", "np", ".", "empty", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "0", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.Matern.__init__": [[337, 350], ["super().__init__", "gp_kernels.Matern.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "length_scale", "=", "1.0", ",", "\n", "length_scale_bounds", "=", "(", "1e-5", ",", "1e5", ")", ",", "\n", "nu", "=", "1.5", ",", "\n", "operate_on", "=", "None", ",", "\n", "prior", "=", "None", ",", "\n", "has_conditions", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "Matern", ",", "self", ")", ".", "__init__", "(", "length_scale", "=", "length_scale", ",", "length_scale_bounds", "=", "length_scale_bounds", ",", "nu", "=", "nu", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.Matern._call": [[351, 441], ["numpy.atleast_2d", "sklearn.gaussian_process.kernels._check_length_scale", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "numpy.exp", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "numpy.fill_diagonal", "ValueError", "numpy.empty", "math.sqrt", "numpy.exp", "scipy.spatial.distance.squareform.fill", "scipy.spatial.distance.squareform.fill", "scipy.spatial.distance.squareform.fill", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.special.kv", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "math.sqrt", "numpy.exp", "numpy.finfo", "math.sqrt", "numpy.sqrt", "ValueError", "K_gradient[].sum", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma", "D.sum", "numpy.isfinite", "numpy.exp", "numpy.sqrt", "numpy.exp", "numpy.sqrt", "D.sum", "D.sum"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n        Parameters\n        ----------\n        X : array, shape (n_samples_X, n_features)\n            Left argument of the returned kernel k(X, Y)\n        Y : array, shape (n_samples_Y, n_features), (optional, default=None)\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n        eval_gradient : bool (optional, default=False)\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined. Only supported when Y is None.\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n        Returns\n        -------\n        K : array, shape (n_samples_X, n_samples_Y)\n            Kernel k(X, Y)\n        K_gradient : array (opt.), shape (n_samples_X, n_samples_X, n_dims)\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n        \"\"\"", "\n", "\n", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "length_scale", "=", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "_check_length_scale", "(", "X", ",", "self", ".", "length_scale", ")", "\n", "\n", "if", "Y", "is", "None", ":", "\n", "            ", "dists", "=", "scipy", ".", "spatial", ".", "distance", ".", "pdist", "(", "X", "/", "length_scale", ",", "metric", "=", "'euclidean'", ")", "\n", "", "else", ":", "\n", "            ", "if", "eval_gradient", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Gradient can only be evaluated when Y is None.\"", ")", "\n", "", "dists", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "X", "/", "length_scale", ",", "Y", "/", "length_scale", ",", "metric", "=", "'euclidean'", ")", "\n", "\n", "", "if", "self", ".", "nu", "==", "0.5", ":", "\n", "            ", "K", "=", "np", ".", "exp", "(", "-", "dists", ")", "\n", "", "elif", "self", ".", "nu", "==", "1.5", ":", "\n", "            ", "K", "=", "dists", "*", "math", ".", "sqrt", "(", "3", ")", "\n", "K", "=", "(", "1.", "+", "K", ")", "*", "np", ".", "exp", "(", "-", "K", ")", "\n", "", "elif", "self", ".", "nu", "==", "2.5", ":", "\n", "            ", "K", "=", "dists", "*", "math", ".", "sqrt", "(", "5", ")", "\n", "K", "=", "(", "1.", "+", "K", "+", "K", "**", "2", "/", "3.0", ")", "*", "np", ".", "exp", "(", "-", "K", ")", "\n", "", "else", ":", "# general case; expensive to evaluate", "\n", "            ", "K", "=", "dists", "\n", "K", "[", "K", "==", "0.0", "]", "+=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "# strict zeros result in nan", "\n", "tmp", "=", "(", "math", ".", "sqrt", "(", "2", "*", "self", ".", "nu", ")", "*", "K", ")", "\n", "K", ".", "fill", "(", "(", "2", "**", "(", "1.", "-", "self", ".", "nu", ")", ")", "/", "scipy", ".", "special", ".", "gamma", "(", "self", ".", "nu", ")", ")", "\n", "K", "*=", "tmp", "**", "self", ".", "nu", "\n", "K", "*=", "scipy", ".", "special", ".", "kv", "(", "self", ".", "nu", ",", "tmp", ")", "\n", "\n", "", "if", "Y", "is", "None", ":", "\n", "# convert from upper-triangular matrix to square matrix", "\n", "            ", "K", "=", "scipy", ".", "spatial", ".", "distance", ".", "squareform", "(", "K", ")", "\n", "np", ".", "fill_diagonal", "(", "K", ",", "1", ")", "\n", "\n", "", "if", "active", "is", "not", "None", ":", "\n", "            ", "K", "=", "K", "*", "active", "\n", "\n", "", "if", "eval_gradient", ":", "\n", "            ", "if", "self", ".", "hyperparameter_length_scale", ".", "fixed", ":", "\n", "# Hyperparameter l kept fixed", "\n", "                ", "K_gradient", "=", "np", ".", "empty", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "0", ")", ")", "\n", "return", "K", ",", "K_gradient", "\n", "\n", "# We need to recompute the pairwise dimension-wise distances", "\n", "", "if", "self", ".", "anisotropic", ":", "\n", "                ", "D", "=", "(", "X", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "-", "X", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "**", "2", "/", "(", "length_scale", "**", "2", ")", "\n", "", "else", ":", "\n", "                ", "D", "=", "scipy", ".", "spatial", ".", "distance", ".", "squareform", "(", "dists", "**", "2", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "if", "self", ".", "nu", "==", "0.5", ":", "\n", "                ", "K_gradient", "=", "K", "[", "...", ",", "np", ".", "newaxis", "]", "*", "D", "/", "np", ".", "sqrt", "(", "D", ".", "sum", "(", "2", ")", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "K_gradient", "[", "~", "np", ".", "isfinite", "(", "K_gradient", ")", "]", "=", "0", "\n", "", "elif", "self", ".", "nu", "==", "1.5", ":", "\n", "                ", "K_gradient", "=", "3", "*", "D", "*", "np", ".", "exp", "(", "-", "np", ".", "sqrt", "(", "3", "*", "D", ".", "sum", "(", "-", "1", ")", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "", "elif", "self", ".", "nu", "==", "2.5", ":", "\n", "                ", "tmp", "=", "np", ".", "sqrt", "(", "5", "*", "D", ".", "sum", "(", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "K_gradient", "=", "5.0", "/", "3.0", "*", "D", "*", "(", "tmp", "+", "1", ")", "*", "np", ".", "exp", "(", "-", "tmp", ")", "\n", "", "else", ":", "\n", "# original sklearn code would approximate gradient numerically, but this would violate our assumption", "\n", "# that the kernel hyperparameters are not changed within __call__", "\n", "                ", "raise", "ValueError", "(", "self", ".", "nu", ")", "\n", "\n", "", "if", "not", "self", ".", "anisotropic", ":", "\n", "                ", "return", "K", ",", "K_gradient", "[", ":", ",", ":", "]", ".", "sum", "(", "-", "1", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "                ", "return", "K", ",", "K_gradient", "\n", "", "", "else", ":", "\n", "            ", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.RBF.__init__": [[445, 457], ["super().__init__", "gp_kernels.RBF.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "length_scale", "=", "1.0", ",", "\n", "length_scale_bounds", "=", "(", "1e-5", ",", "1e5", ")", ",", "\n", "operate_on", "=", "None", ",", "\n", "prior", "=", "None", ",", "\n", "has_conditions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RBF", ",", "self", ")", ".", "__init__", "(", "length_scale", "=", "length_scale", ",", "length_scale_bounds", "=", "length_scale_bounds", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.RBF._call": [[458, 516], ["numpy.atleast_2d", "sklearn.gaussian_process.kernels._check_length_scale", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "numpy.exp", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "numpy.fill_diagonal", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "numpy.exp", "ValueError", "numpy.empty", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n        Parameters\n        ----------\n        X : array, shape (n_samples_X, n_features)\n            Left argument of the returned kernel k(X, Y)\n        Y : array, shape (n_samples_Y, n_features), (optional, default=None)\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n        eval_gradient : bool (optional, default=False)\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined. Only supported when Y is None.\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n        Returns\n        -------\n        K : array, shape (n_samples_X, n_samples_Y)\n            Kernel k(X, Y)\n        K_gradient : array (opt.), shape (n_samples_X, n_samples_X, n_dims)\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n        \"\"\"", "\n", "\n", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "length_scale", "=", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "_check_length_scale", "(", "X", ",", "self", ".", "length_scale", ")", "\n", "\n", "if", "Y", "is", "None", ":", "\n", "            ", "dists", "=", "scipy", ".", "spatial", ".", "distance", ".", "pdist", "(", "X", "/", "length_scale", ",", "metric", "=", "'sqeuclidean'", ")", "\n", "K", "=", "np", ".", "exp", "(", "-", ".5", "*", "dists", ")", "\n", "# convert from upper-triangular matrix to square matrix", "\n", "K", "=", "scipy", ".", "spatial", ".", "distance", ".", "squareform", "(", "K", ")", "\n", "np", ".", "fill_diagonal", "(", "K", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "eval_gradient", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Gradient can only be evaluated when Y is None.\"", ")", "\n", "", "dists", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "X", "/", "length_scale", ",", "Y", "/", "length_scale", ",", "metric", "=", "'sqeuclidean'", ")", "\n", "K", "=", "np", ".", "exp", "(", "-", ".5", "*", "dists", ")", "\n", "\n", "", "if", "active", "is", "not", "None", ":", "\n", "            ", "K", "=", "K", "*", "active", "\n", "\n", "", "if", "eval_gradient", ":", "\n", "            ", "if", "self", ".", "hyperparameter_length_scale", ".", "fixed", ":", "\n", "# Hyperparameter l kept fixed", "\n", "                ", "return", "K", ",", "np", ".", "empty", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "0", ")", ")", "\n", "", "elif", "not", "self", ".", "anisotropic", "or", "length_scale", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "K_gradient", "=", "(", "K", "*", "scipy", ".", "spatial", ".", "distance", ".", "squareform", "(", "dists", ")", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "K", ",", "K_gradient", "\n", "", "elif", "self", ".", "anisotropic", ":", "\n", "# We need to recompute the pairwise dimension-wise distances", "\n", "                ", "K_gradient", "=", "(", "X", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "-", "X", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", "**", "2", "/", "(", "length_scale", "**", "2", ")", "\n", "K_gradient", "*=", "K", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "K", ",", "K_gradient", "\n", "", "", "else", ":", "\n", "            ", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.WhiteKernel.__init__": [[520, 532], ["super().__init__", "gp_kernels.WhiteKernel.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "noise_level", "=", "1.0", ",", "\n", "noise_level_bounds", "=", "(", "1e-5", ",", "1e5", ")", ",", "\n", "operate_on", "=", "None", ",", "\n", "prior", "=", "None", ",", "\n", "has_conditions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "WhiteKernel", ",", "self", ")", ".", "__init__", "(", "noise_level", "=", "noise_level", ",", "noise_level_bounds", "=", "noise_level_bounds", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.WhiteKernel._call": [[533, 578], ["numpy.atleast_2d", "ValueError", "numpy.zeros", "numpy.eye", "numpy.empty", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n        Parameters\n        ----------\n        X : array, shape (n_samples_X, n_features)\n            Left argument of the returned kernel k(X, Y)\n        Y : array, shape (n_samples_Y, n_features), (optional, default=None)\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n        eval_gradient : bool (optional, default=False)\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined. Only supported when Y is None.\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n        Returns\n        -------\n        K : array, shape (n_samples_X, n_samples_Y)\n            Kernel k(X, Y)\n        K_gradient : array (opt.), shape (n_samples_X, n_samples_X, n_dims)\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n        \"\"\"", "\n", "\n", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "\n", "if", "Y", "is", "not", "None", "and", "eval_gradient", ":", "\n", "            ", "raise", "ValueError", "(", "\"Gradient can only be evaluated when Y is None.\"", ")", "\n", "\n", "", "if", "Y", "is", "None", ":", "\n", "            ", "K", "=", "self", ".", "noise_level", "*", "np", ".", "eye", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "active", "is", "not", "None", ":", "\n", "                ", "K", "=", "K", "*", "active", "\n", "\n", "", "if", "eval_gradient", ":", "\n", "                ", "if", "not", "self", ".", "hyperparameter_noise_level", ".", "fixed", ":", "\n", "                    ", "return", "(", "K", ",", "self", ".", "noise_level", "\n", "*", "np", ".", "eye", "(", "X", ".", "shape", "[", "0", "]", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "", "else", ":", "\n", "                    ", "return", "K", ",", "np", ".", "empty", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "0", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "K", "\n", "", "", "else", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "Y", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.HammingKernel.__init__": [[582, 594], ["super().__init__", "gp_kernels.HammingKernel.set_active_dims"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.MagicMixin.set_active_dims"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "length_scale", "=", "1.0", ",", "\n", "length_scale_bounds", "=", "(", "1e-5", ",", "1e5", ")", ",", "\n", "operate_on", "=", "None", ",", "\n", "prior", "=", "None", ",", "\n", "has_conditions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "HammingKernel", ",", "self", ")", ".", "__init__", "(", "length_scale", "=", "length_scale", ",", "length_scale_bounds", "=", "length_scale_bounds", ")", "\n", "self", ".", "set_active_dims", "(", "operate_on", ")", "\n", "self", ".", "prior", "=", "prior", "\n", "self", ".", "has_conditions", "=", "has_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.HammingKernel._call": [[595, 659], ["numpy.atleast_2d", "sklearn.gaussian_process.kernels._check_length_scale", "numpy.exp", "numpy.expand_dims", "ValueError", "numpy.atleast_2d", "numpy.iterable", "numpy.expand_dims", "numpy.expand_dims", "numpy.array", "numpy.sum"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "X", ",", "Y", "=", "None", ",", "eval_gradient", "=", "False", ",", "active", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return the kernel k(X, Y) and optionally its gradient.\n\n        Parameters\n        ----------\n        X : [array-like, shape=(n_samples_X, n_features)]\n            Left argument of the returned kernel k(X, Y)\n        Y : [array-like, shape=(n_samples_Y, n_features) or None(default)]\n            Right argument of the returned kernel k(X, Y). If None, k(X, X)\n            if evaluated instead.\n        eval_gradient : [bool, False(default)]\n            Determines whether the gradient with respect to the kernel\n            hyperparameter is determined. Only supported when Y is None.\n        active : np.ndarray (n_samples_X, n_features) (optional)\n            Boolean array specifying which hyperparameters are active.\n\n        Returns\n        -------\n        K : [array-like, shape=(n_samples_X, n_samples_Y)]\n            Kernel k(X, Y)\n\n        K_gradient : [array-like, shape=(n_samples_X, n_samples_X, n_dims)]\n            The gradient of the kernel k(X, X) with respect to the\n            hyperparameter of the kernel. Only returned when eval_gradient\n            is True.\n\n        Note\n        ----\n        Code partially copied from skopt (https://github.com/scikit-optimize).\n        Made small changes to only compute necessary values and use scikit-learn helper functions.\n        \"\"\"", "\n", "\n", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "length_scale", "=", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "_check_length_scale", "(", "X", ",", "self", ".", "length_scale", ")", "\n", "\n", "if", "Y", "is", "None", ":", "\n", "            ", "Y", "=", "X", "\n", "", "elif", "eval_gradient", ":", "\n", "            ", "raise", "ValueError", "(", "\"gradient can be evaluated only when Y != X\"", ")", "\n", "", "else", ":", "\n", "            ", "Y", "=", "np", ".", "atleast_2d", "(", "Y", ")", "\n", "\n", "", "indicator", "=", "np", ".", "expand_dims", "(", "X", ",", "axis", "=", "1", ")", "!=", "Y", "\n", "K", "=", "(", "-", "1", "/", "(", "2", "*", "length_scale", "**", "2", ")", "*", "indicator", ")", ".", "sum", "(", "axis", "=", "2", ")", "\n", "K", "=", "np", ".", "exp", "(", "K", ")", "\n", "\n", "if", "active", "is", "not", "None", ":", "\n", "            ", "K", "=", "K", "*", "active", "\n", "\n", "", "if", "eval_gradient", ":", "\n", "# dK / d theta = (dK / dl) * (dl / d theta)", "\n", "# theta = log(l) => dl / d (theta) = e^theta = l", "\n", "# dK / d theta = l * dK / dl", "\n", "\n", "# dK / dL computation", "\n", "            ", "if", "np", ".", "iterable", "(", "length_scale", ")", "and", "length_scale", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "grad", "=", "(", "np", ".", "expand_dims", "(", "K", ",", "axis", "=", "-", "1", ")", "*", "np", ".", "array", "(", "indicator", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "                ", "grad", "=", "np", ".", "expand_dims", "(", "K", "*", "np", ".", "sum", "(", "indicator", ",", "axis", "=", "2", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "grad", "*=", "(", "1", "/", "length_scale", "**", "3", ")", "\n", "\n", "return", "K", ",", "grad", "\n", "", "return", "K", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_kernels.get_conditional_hyperparameters": [[17, 26], ["numpy.expand_dims"], "function", ["None"], ["def", "get_conditional_hyperparameters", "(", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "Optional", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "# Taking care of conditional hyperparameters according to Levesque et al.", "\n", "    ", "X_cond", "=", "X", "<=", "-", "1", "\n", "if", "Y", "is", "not", "None", ":", "\n", "        ", "Y_cond", "=", "Y", "<=", "-", "1", "\n", "", "else", ":", "\n", "        ", "Y_cond", "=", "X", "<=", "-", "1", "\n", "", "active", "=", "~", "(", "(", "np", ".", "expand_dims", "(", "X_cond", ",", "axis", "=", "1", ")", "!=", "Y_cond", ")", ".", "any", "(", "axis", "=", "2", ")", ")", "\n", "return", "active", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.rf_with_instances.RandomForestWithInstances.__init__": [[33, 115], ["utils.util_funcs.get_types", "abstract_model.AbstractModel.__init__", "pyrfr.regression.default_random_engine", "pyrfr.regression.forest_opts", "logging.getLogger", "max", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.get_types", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "config_space", ",", "\n", "normalize_y", ":", "bool", "=", "True", ",", "\n", "log_y", ":", "bool", "=", "False", ",", "\n", "num_trees", ":", "int", "=", "N_TREES", ",", "\n", "do_bootstrapping", ":", "bool", "=", "True", ",", "\n", "n_points_per_tree", ":", "int", "=", "-", "1", ",", "\n", "ratio_features", ":", "float", "=", "5.", "/", "6.", ",", "\n", "min_samples_split", ":", "int", "=", "3", ",", "\n", "min_samples_leaf", ":", "int", "=", "3", ",", "\n", "max_depth", ":", "int", "=", "2", "**", "20", ",", "\n", "eps_purity", ":", "float", "=", "1e-8", ",", "\n", "max_num_nodes", ":", "int", "=", "2", "**", "20", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        types : np.ndarray (D)\n            Specifies the number of categorical values of an input dimension where\n            the i-th entry corresponds to the i-th input dimension. Let's say we\n            have 2 dimension where the first dimension consists of 3 different\n            categorical choices and the second dimension is continuous than we\n            have to pass np.array([2, 0]). Note that we count starting from 0.\n        bounds : list\n            Specifies the bounds for continuous features.\n        log_y: bool\n            y values (passed to this RF) are expected to be log(y) transformed;\n            this will be considered during predicting\n        num_trees : int\n            The number of trees in the random forest.\n        do_bootstrapping : bool\n            Turns on / off bootstrapping in the random forest.\n        n_points_per_tree : int\n            Number of points per tree. If <= 0 X.shape[0] will be used\n            in _train(X, y) instead\n        ratio_features : float\n            The ratio of features that are considered for splitting.\n        min_samples_split : int\n            The minimum number of data points to perform a split.\n        min_samples_leaf : int\n            The minimum number of data points in a leaf.\n        max_depth : int\n            The maximum depth of a single tree.\n        eps_purity : float\n            The minimum difference between two target values to be considered\n            different\n        max_num_nodes : int\n            The maxmimum total number of nodes in a tree\n        seed : int\n            The seed that is passed to the random_forest_run library.\n        \"\"\"", "\n", "types", ",", "bounds", "=", "get_types", "(", "config_space", ",", "instance_features", "=", "None", ")", "\n", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "types", ",", "bounds", ",", "seed", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "normalize_y", "=", "normalize_y", "\n", "self", ".", "log_y", "=", "log_y", "\n", "self", ".", "rng", "=", "regression", ".", "default_random_engine", "(", "seed", ")", "\n", "\n", "self", ".", "rf_opts", "=", "regression", ".", "forest_opts", "(", ")", "\n", "self", ".", "rf_opts", ".", "num_trees", "=", "num_trees", "\n", "self", ".", "rf_opts", ".", "do_bootstrapping", "=", "do_bootstrapping", "\n", "max_features", "=", "0", "if", "ratio_features", ">", "1.0", "else", "max", "(", "1", ",", "int", "(", "types", ".", "shape", "[", "0", "]", "*", "ratio_features", ")", ")", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "max_features", "=", "max_features", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "min_samples_to_split", "=", "min_samples_split", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "min_samples_in_leaf", "=", "min_samples_leaf", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "epsilon_purity", "=", "eps_purity", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "max_num_nodes", "=", "max_num_nodes", "\n", "self", ".", "rf_opts", ".", "compute_law_of_total_variance", "=", "False", "\n", "\n", "self", ".", "n_points_per_tree", "=", "n_points_per_tree", "\n", "self", ".", "rf", "=", "None", "# type: regression.binary_rss_forest", "\n", "\n", "# This list well be read out by save_iteration() in the solver", "\n", "self", ".", "hypers", "=", "[", "num_trees", ",", "max_num_nodes", ",", "do_bootstrapping", ",", "\n", "n_points_per_tree", ",", "ratio_features", ",", "min_samples_split", ",", "\n", "min_samples_leaf", ",", "max_depth", ",", "eps_purity", ",", "seed", "]", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__module__", "+", "\".\"", "+", "\n", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.rf_with_instances.RandomForestWithInstances._train": [[116, 145], ["y.flatten", "pyrfr.regression.binary_rss_forest", "rf_with_instances.RandomForestWithInstances._init_data_container", "rf_with_instances.RandomForestWithInstances.rf.fit", "rf_with_instances.RandomForestWithInstances._normalize_y"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.rf_with_instances.RandomForestWithInstances._init_data_container", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._normalize_y"], ["", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Trains the random forest on X and y.\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features (config + instance features)]\n            Input data points.\n        Y : np.ndarray [n_samples, ]\n            The corresponding target values.\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", ".", "flatten", "(", ")", "\n", "if", "self", ".", "normalize_y", ":", "\n", "            ", "self", ".", "y", "=", "self", ".", "_normalize_y", "(", "self", ".", "y", ")", "\n", "\n", "", "if", "self", ".", "n_points_per_tree", "<=", "0", ":", "\n", "            ", "self", ".", "rf_opts", ".", "num_data_points_per_tree", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "rf_opts", ".", "num_data_points_per_tree", "=", "self", ".", "n_points_per_tree", "\n", "", "self", ".", "rf", "=", "regression", ".", "binary_rss_forest", "(", ")", "\n", "self", ".", "rf", ".", "options", "=", "self", ".", "rf_opts", "\n", "data", "=", "self", ".", "_init_data_container", "(", "self", ".", "X", ",", "self", ".", "y", ")", "\n", "self", ".", "rf", ".", "fit", "(", "data", ",", "rng", "=", "self", ".", "rng", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.rf_with_instances.RandomForestWithInstances._init_data_container": [[146, 174], ["pyrfr.regression.default_data_container", "enumerate", "zip", "numpy.isnan", "pyrfr.regression.default_data_container.add_data_point", "pyrfr.regression.default_data_container.set_type_of_feature", "pyrfr.regression.default_data_container.set_bounds_of_feature"], "methods", ["None"], ["", "def", "_init_data_container", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Fills a pyrfr default data container, s.t. the forest knows\n        categoricals and bounds for continous data\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features]\n            Input data points\n        y : np.ndarray [n_samples, ]\n            Corresponding target values\n\n        Returns\n        -------\n        data : regression.default_data_container\n            The filled data container that pyrfr can interpret\n        \"\"\"", "\n", "# retrieve the types and the bounds from the ConfigSpace", "\n", "data", "=", "regression", ".", "default_data_container", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", ",", "(", "mn", ",", "mx", ")", "in", "enumerate", "(", "self", ".", "bounds", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "mx", ")", ":", "\n", "                ", "data", ".", "set_type_of_feature", "(", "i", ",", "mn", ")", "\n", "", "else", ":", "\n", "                ", "data", ".", "set_bounds_of_feature", "(", "i", ",", "mn", ",", "mx", ")", "\n", "\n", "", "", "for", "row_X", ",", "row_y", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "            ", "data", ".", "add_data_point", "(", "row_X", ",", "row_y", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.rf_with_instances.RandomForestWithInstances._predict": [[175, 215], ["numpy.array", "numpy.array", "len", "ValueError", "ValueError", "numpy.array.append", "numpy.array.append", "numpy.array.reshape", "numpy.array.reshape", "rf_with_instances.RandomForestWithInstances.rf.all_leaf_values", "numpy.mean", "numpy.var", "rf_with_instances.RandomForestWithInstances.rf.predict_mean_var", "len", "means_per_tree.append", "numpy.log", "numpy.mean", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", "->", "typing", ".", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Predict means and variances for given X.\n\n        Parameters\n        ----------\n        X : np.ndarray of shape = [n_samples,\n                                   n_features (config + instance features)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, 1]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, 1]\n            Predictive variance\n        \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "self", ".", "types", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "(", "self", ".", "types", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "means", ",", "vars_", "=", "[", "]", ",", "[", "]", "\n", "for", "row_X", "in", "X", ":", "\n", "            ", "if", "self", ".", "log_y", ":", "\n", "                ", "preds_per_tree", "=", "self", ".", "rf", ".", "all_leaf_values", "(", "row_X", ")", "\n", "means_per_tree", "=", "[", "]", "\n", "for", "preds", "in", "preds_per_tree", ":", "\n", "# within one tree, we want to use the", "\n", "# arithmetic mean and not the geometric mean", "\n", "                    ", "means_per_tree", ".", "append", "(", "np", ".", "log", "(", "np", ".", "mean", "(", "np", ".", "exp", "(", "preds", ")", ")", ")", ")", "\n", "", "mean", "=", "np", ".", "mean", "(", "means_per_tree", ")", "\n", "var", "=", "np", ".", "var", "(", "means_per_tree", ")", "# variance over trees as uncertainty estimate", "\n", "", "else", ":", "\n", "                ", "mean", ",", "var", "=", "self", ".", "rf", ".", "predict_mean_var", "(", "row_X", ")", "\n", "", "means", ".", "append", "(", "mean", ")", "\n", "vars_", ".", "append", "(", "var", ")", "\n", "", "means", "=", "np", ".", "array", "(", "means", ")", "\n", "vars_", "=", "np", ".", "array", "(", "vars_", ")", "\n", "\n", "return", "means", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "vars_", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.rf_with_instances.RandomForestWithInstances.predict_marginalized_over_instances": [[216, 295], ["numpy.zeros", "numpy.zeros", "enumerate", "rf_with_instances.RandomForestWithInstances.predict", "len", "ValueError", "ValueError", "range", "numpy.mean", "numpy.var", "len", "mean.reshape.reshape.reshape", "len", "var.reshape.reshape.reshape", "len", "numpy.concatenate", "rf_with_instances.RandomForestWithInstances.rf.all_leaf_values", "enumerate", "numpy.isnan", "len", "range", "numpy.log", "numpy.mean", "numpy.mean", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "predict_marginalized_over_instances", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Predict mean and variance marginalized over all instances.\n\n        Returns the predictive mean and variance marginalised over all\n        instances for a set of configurations.\n\n        Note\n        ----\n        This method overwrites the same method of ~smac.epm.base_epm.AbstractEPM;\n        the following method is random forest specific\n        and follows the SMAC2 implementation;\n        it requires no distribution assumption\n        to marginalize the uncertainty estimates\n\n        Parameters\n        ----------\n        X : np.ndarray\n            [n_samples, n_features (config)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, 1]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, 1]\n            Predictive variance\n        \"\"\"", "\n", "\n", "if", "self", ".", "instance_features", "is", "None", "or", "len", "(", "self", ".", "instance_features", ")", "==", "0", ":", "\n", "            ", "mean", ",", "var", "=", "self", ".", "predict", "(", "X", ")", "\n", "var", "[", "var", "<", "self", ".", "var_threshold", "]", "=", "self", ".", "var_threshold", "\n", "var", "[", "np", ".", "isnan", "(", "var", ")", "]", "=", "self", ".", "var_threshold", "\n", "return", "mean", ",", "var", "\n", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "self", ".", "bounds", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "\n", "(", "self", ".", "bounds", ".", "shape", "[", "0", "]", ",", "\n", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mean", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "var", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "\n", "# marginalize over instances", "\n", "# 1. get all leaf values for each tree", "\n", "            ", "preds_trees", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "rf_opts", ".", "num_trees", ")", "]", "\n", "\n", "for", "feat", "in", "self", ".", "instance_features", ":", "\n", "                ", "x_", "=", "np", ".", "concatenate", "(", "[", "x", ",", "feat", "]", ")", "\n", "preds_per_tree", "=", "self", ".", "rf", ".", "all_leaf_values", "(", "x_", ")", "\n", "for", "tree_id", ",", "preds", "in", "enumerate", "(", "preds_per_tree", ")", ":", "\n", "                    ", "preds_trees", "[", "tree_id", "]", "+=", "preds", "\n", "\n", "# 2. average in each tree", "\n", "", "", "for", "tree_id", "in", "range", "(", "self", ".", "rf_opts", ".", "num_trees", ")", ":", "\n", "                ", "if", "self", ".", "log_y", ":", "\n", "                    ", "preds_trees", "[", "tree_id", "]", "=", "np", ".", "log", "(", "np", ".", "mean", "(", "np", ".", "exp", "(", "preds_trees", "[", "tree_id", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "preds_trees", "[", "tree_id", "]", "=", "np", ".", "mean", "(", "preds_trees", "[", "tree_id", "]", ")", "\n", "\n", "# 3. compute statistics across trees", "\n", "", "", "mean_x", "=", "np", ".", "mean", "(", "preds_trees", ")", "\n", "var_x", "=", "np", ".", "var", "(", "preds_trees", ")", "\n", "if", "var_x", "<", "self", ".", "var_threshold", ":", "\n", "                ", "var_x", "=", "self", ".", "var_threshold", "\n", "\n", "", "var", "[", "i", "]", "=", "var_x", "\n", "mean", "[", "i", "]", "=", "mean_x", "\n", "\n", "", "if", "len", "(", "mean", ".", "shape", ")", "==", "1", ":", "\n", "            ", "mean", "=", "mean", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "if", "len", "(", "var", ".", "shape", ")", "==", "1", ":", "\n", "            ", "var", "=", "var", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "return", "mean", ",", "var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel.__init__": [[9, 16], ["abstract_model.AbstractModel.__init__", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configspace", ",", "types", ",", "bounds", ",", "seed", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Abstract base class for all Gaussian process models.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "configspace", "=", "configspace", ",", "types", "=", "types", ",", "bounds", "=", "bounds", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._get_all_priors": [[17, 55], ["to_visit.append", "to_visit.append", "len", "to_visit.pop", "isinstance", "to_visit.insert", "to_visit.insert", "isinstance", "range", "len", "all_priors.append", "priors_for_hp.append", "priors_for_hp.append", "priors_for_hp.append", "gp_base_priors.SoftTopHatPrior", "gp_base_priors.TophatPrior"], "methods", ["None"], ["", "def", "_get_all_priors", "(", "\n", "self", ",", "\n", "add_bound_priors", ":", "bool", "=", "True", ",", "\n", "add_soft_bounds", ":", "bool", "=", "False", ",", "\n", ")", "->", "List", "[", "List", "[", "Prior", "]", "]", ":", "\n", "# Obtain a list of all priors for each tunable hyperparameter of the kernel", "\n", "        ", "all_priors", "=", "[", "]", "\n", "to_visit", "=", "[", "]", "\n", "to_visit", ".", "append", "(", "self", ".", "gp", ".", "kernel", ".", "k1", ")", "\n", "to_visit", ".", "append", "(", "self", ".", "gp", ".", "kernel", ".", "k2", ")", "\n", "while", "len", "(", "to_visit", ")", ">", "0", ":", "\n", "            ", "current_param", "=", "to_visit", ".", "pop", "(", "0", ")", "\n", "if", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "KernelOperator", ")", ":", "\n", "                ", "to_visit", ".", "insert", "(", "0", ",", "current_param", ".", "k1", ")", "\n", "to_visit", ".", "insert", "(", "1", ",", "current_param", ".", "k2", ")", "\n", "continue", "\n", "", "elif", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "Kernel", ")", ":", "\n", "                ", "hps", "=", "current_param", ".", "hyperparameters", "\n", "assert", "len", "(", "hps", ")", "==", "1", "\n", "hp", "=", "hps", "[", "0", "]", "\n", "if", "hp", ".", "fixed", ":", "\n", "                    ", "continue", "\n", "", "bounds", "=", "hps", "[", "0", "]", ".", "bounds", "\n", "for", "i", "in", "range", "(", "hps", "[", "0", "]", ".", "n_elements", ")", ":", "\n", "                    ", "priors_for_hp", "=", "[", "]", "\n", "if", "current_param", ".", "prior", "is", "not", "None", ":", "\n", "                        ", "priors_for_hp", ".", "append", "(", "current_param", ".", "prior", ")", "\n", "", "if", "add_bound_priors", ":", "\n", "                        ", "if", "add_soft_bounds", ":", "\n", "                            ", "priors_for_hp", ".", "append", "(", "SoftTopHatPrior", "(", "\n", "lower_bound", "=", "bounds", "[", "i", "]", "[", "0", "]", ",", "upper_bound", "=", "bounds", "[", "i", "]", "[", "1", "]", ",", "rng", "=", "self", ".", "rng", ",", "\n", ")", ")", "\n", "", "else", ":", "\n", "                            ", "priors_for_hp", ".", "append", "(", "TophatPrior", "(", "\n", "lower_bound", "=", "bounds", "[", "i", "]", "[", "0", "]", ",", "upper_bound", "=", "bounds", "[", "i", "]", "[", "1", "]", ",", "rng", "=", "self", ".", "rng", ",", "\n", ")", ")", "\n", "", "", "all_priors", ".", "append", "(", "priors_for_hp", ")", "\n", "", "", "", "return", "all_priors", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._set_has_conditions": [[56, 70], ["to_visit.append", "len", "len", "to_visit.pop", "isinstance", "base_model.BaseModel.configspace.get_conditions", "to_visit.insert", "to_visit.insert", "isinstance", "ValueError"], "methods", ["None"], ["", "def", "_set_has_conditions", "(", "self", ")", ":", "\n", "        ", "has_conditions", "=", "len", "(", "self", ".", "configspace", ".", "get_conditions", "(", ")", ")", ">", "0", "\n", "to_visit", "=", "[", "]", "\n", "to_visit", ".", "append", "(", "self", ".", "kernel", ")", "\n", "while", "len", "(", "to_visit", ")", ">", "0", ":", "\n", "            ", "current_param", "=", "to_visit", ".", "pop", "(", "0", ")", "\n", "if", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "KernelOperator", ")", ":", "\n", "                ", "to_visit", ".", "insert", "(", "0", ",", "current_param", ".", "k1", ")", "\n", "to_visit", ".", "insert", "(", "1", ",", "current_param", ".", "k2", ")", "\n", "current_param", ".", "has_conditions", "=", "has_conditions", "\n", "", "elif", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "Kernel", ")", ":", "\n", "                ", "current_param", ".", "has_conditions", "=", "has_conditions", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "current_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel._impute_inactive": [[71, 75], ["X.copy.copy.copy", "numpy.isfinite"], "methods", ["None"], ["", "", "", "def", "_impute_inactive", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "X", "=", "X", ".", "copy", "(", ")", "\n", "X", "[", "~", "np", ".", "isfinite", "(", "X", ")", "]", "=", "-", "1", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel.__init__": [[44, 105], ["types.copy", "utils.logging.PickableLoggerAdapter", "sklearn.decomposition.PCA", "sklearn.preprocessing.MinMaxScaler"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "configspace", ":", "ConfigurationSpace", ",", "\n", "types", ":", "np", ".", "ndarray", ",", "\n", "bounds", ":", "typing", ".", "List", "[", "typing", ".", "Tuple", "[", "float", ",", "float", "]", "]", ",", "\n", "seed", ":", "int", ",", "\n", "instance_features", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "pca_components", ":", "float", "=", "None", ",", "\n", "return_normalized_y", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        configspace : ConfigurationSpace\n            Configuration space to tune for.\n        types : np.ndarray (D)\n            Specifies the number of categorical values of an input dimension where\n            the i-th entry corresponds to the i-th input dimension. Let's say we\n            have 2 dimension where the first dimension consists of 3 different\n            categorical choices and the second dimension is continuous than we\n            have to pass np.array([3, 0]). Note that we count starting from 0.\n        bounds : list\n            bounds of input dimensions: (lower, uppper) for continuous dims; (n_cat, np.nan) for categorical dims\n        seed : int\n            The seed that is passed to the model library.\n        instance_features : np.ndarray (I, K)\n            Contains the K dimensional instance features\n            of the I different instances\n        pca_components : float\n            Number of components to keep when using PCA to reduce\n            dimensionality of instance features. Requires to\n            set n_feats (> pca_dims).\n        \"\"\"", "\n", "self", ".", "configspace", "=", "configspace", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "instance_features", "=", "instance_features", "\n", "self", ".", "pca_components", "=", "pca_components", "\n", "self", ".", "return_normalized_y", "=", "return_normalized_y", "\n", "\n", "if", "instance_features", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_feats", "=", "instance_features", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_feats", "=", "0", "\n", "\n", "", "self", ".", "n_params", "=", "None", "# will be updated on train()", "\n", "\n", "self", ".", "pca", "=", "None", "\n", "self", ".", "scaler", "=", "None", "\n", "if", "self", ".", "pca_components", "and", "self", ".", "n_feats", ">", "self", ".", "pca_components", ":", "\n", "            ", "self", ".", "pca", "=", "PCA", "(", "n_components", "=", "self", ".", "pca_components", ")", "\n", "self", ".", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "\n", "# Never use a lower variance than this", "\n", "", "self", ".", "var_threshold", "=", "VERY_SMALL_NUMBER", "\n", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "types", "=", "types", "\n", "# Initial types array which is used to reset the type array at every call to train()", "\n", "self", ".", "_initial_types", "=", "types", ".", "copy", "(", ")", "\n", "\n", "self", ".", "logger", "=", "PickableLoggerAdapter", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel.train": [[106, 151], ["abstract_model.AbstractModel._initial_types.copy", "abstract_model.AbstractModel._train", "len", "ValueError", "len", "ValueError", "ValueError", "abstract_model.AbstractModel.scaler.fit_transform", "numpy.nan_to_num", "abstract_model.AbstractModel.pca.fit_transform", "numpy.hstack", "hasattr", "numpy.array", "len", "numpy.hstack", "len", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances._train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform"], ["", "def", "train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", "->", "'AbstractModel'", ":", "\n", "        ", "\"\"\"Trains the EPM on X and Y.\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features (config + instance features)]\n            Input data points.\n        Y : np.ndarray [n_samples, n_objectives]\n            The corresponding target values. n_objectives must match the\n            number of target names specified in the constructor.\n\n        Returns\n        -------\n        self : AbstractEPM\n        \"\"\"", "\n", "self", ".", "types", "=", "self", ".", "_initial_types", ".", "copy", "(", ")", "\n", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "len", "(", "self", ".", "types", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Feature mismatch: X should have %d features, but has %d'", "%", "(", "len", "(", "self", ".", "types", ")", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "0", "]", "!=", "Y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'X.shape[0] (%s) != y.shape[0] (%s)'", "%", "(", "X", ".", "shape", "[", "0", "]", ",", "Y", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "n_params", "=", "X", ".", "shape", "[", "1", "]", "-", "self", ".", "n_feats", "\n", "\n", "# reduce dimensionality of features of larger than PCA_DIM", "\n", "if", "self", ".", "pca", "and", "X", ".", "shape", "[", "0", "]", ">", "self", ".", "pca", ".", "n_components", ":", "\n", "            ", "X_feats", "=", "X", "[", ":", ",", "-", "self", ".", "n_feats", ":", "]", "\n", "# scale features", "\n", "X_feats", "=", "self", ".", "scaler", ".", "fit_transform", "(", "X_feats", ")", "\n", "X_feats", "=", "np", ".", "nan_to_num", "(", "X_feats", ")", "# if features with max == min", "\n", "# PCA", "\n", "X_feats", "=", "self", ".", "pca", ".", "fit_transform", "(", "X_feats", ")", "\n", "X", "=", "np", ".", "hstack", "(", "(", "X", "[", ":", ",", ":", "self", ".", "n_params", "]", ",", "X_feats", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "\"types\"", ")", ":", "\n", "# for RF, adapt types list", "\n", "# if X_feats.shape[0] < self.pca, X_feats.shape[1] ==", "\n", "# X_feats.shape[0]", "\n", "                ", "self", ".", "types", "=", "np", ".", "array", "(", "\n", "np", ".", "hstack", "(", "(", "self", ".", "types", "[", ":", "self", ".", "n_params", "]", ",", "np", ".", "zeros", "(", "(", "X_feats", ".", "shape", "[", "1", "]", ")", ")", ")", ")", ",", "\n", "dtype", "=", "np", ".", "uint", ",", "\n", ")", "\n", "\n", "", "", "return", "self", ".", "_train", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._train": [[152, 168], ["None"], "methods", ["None"], ["", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", "->", "'AbstractModel'", ":", "\n", "        ", "\"\"\"Trains the random forest on X and y.\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features (config + instance features)]\n            Input data points.\n        Y : np.ndarray [n_samples, n_objectives]\n            The corresponding target values. n_objectives must match the\n            number of target names specified in the constructor.\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel.predict": [[169, 210], ["abstract_model.AbstractModel._predict", "len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "mean.reshape.reshape.reshape", "len", "var.reshape.reshape.reshape", "abstract_model.AbstractModel.scaler.transform", "abstract_model.AbstractModel.pca.transform", "numpy.hstack", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", "->", "typing", ".", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Predict means and variances for given X.\n\n        Parameters\n        ----------\n        X : np.ndarray of shape = [n_samples, n_features (config + instance features)]\n            Training samples\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, n_objectives]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, n_objectives]\n            Predictive variance\n        \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "len", "(", "self", ".", "_initial_types", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "(", "len", "(", "self", ".", "_initial_types", ")", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "pca", ":", "\n", "            ", "try", ":", "\n", "                ", "X_feats", "=", "X", "[", ":", ",", "-", "self", ".", "n_feats", ":", "]", "\n", "X_feats", "=", "self", ".", "scaler", ".", "transform", "(", "X_feats", ")", "\n", "X_feats", "=", "self", ".", "pca", ".", "transform", "(", "X_feats", ")", "\n", "X", "=", "np", ".", "hstack", "(", "(", "X", "[", ":", ",", ":", "self", ".", "n_params", "]", ",", "X_feats", ")", ")", "\n", "", "except", "NotFittedError", ":", "\n", "                ", "pass", "# PCA not fitted if only one training sample", "\n", "\n", "", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "len", "(", "self", ".", "types", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "(", "len", "(", "self", ".", "types", ")", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mean", ",", "var", "=", "self", ".", "_predict", "(", "X", ")", "\n", "\n", "if", "len", "(", "mean", ".", "shape", ")", "==", "1", ":", "\n", "            ", "mean", "=", "mean", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "if", "len", "(", "var", ".", "shape", ")", "==", "1", ":", "\n", "            ", "var", "=", "var", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "return", "mean", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._predict": [[211, 228], ["NotImplementedError"], "methods", ["None"], ["", "def", "_predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", "->", "typing", ".", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Predict means and variances for given X.\n\n        Parameters\n        ----------\n        X : np.ndarray\n            [n_samples, n_features (config + instance features)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, n_objectives]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, n_objectives]\n            Predictive variance\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel.predict_marginalized_over_instances": [[229, 286], ["numpy.zeros", "numpy.zeros", "enumerate", "len", "ValueError", "ValueError", "abstract_model.AbstractModel.predict", "len", "numpy.hstack", "abstract_model.AbstractModel.predict", "numpy.mean", "len", "mean.reshape.reshape.reshape", "len", "var.reshape.reshape.reshape", "len", "numpy.sum", "len", "numpy.isnan", "numpy.tile", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict_marginalized_over_instances", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", "->", "typing", ".", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Predict mean and variance marginalized over all instances.\n\n        Returns the predictive mean and variance marginalised over all\n        instances for a set of configurations.\n\n        Parameters\n        ----------\n        X : np.ndarray\n            [n_samples, n_features (config)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, 1]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, 1]\n            Predictive variance\n        \"\"\"", "\n", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "self", ".", "bounds", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "\n", "(", "self", ".", "bounds", ".", "shape", "[", "0", "]", ",", "\n", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "instance_features", "is", "None", "or", "len", "(", "self", ".", "instance_features", ")", "==", "0", ":", "\n", "            ", "mean", ",", "var", "=", "self", ".", "predict", "(", "X", ")", "\n", "var", "[", "var", "<", "self", ".", "var_threshold", "]", "=", "self", ".", "var_threshold", "\n", "var", "[", "np", ".", "isnan", "(", "var", ")", "]", "=", "self", ".", "var_threshold", "\n", "return", "mean", ",", "var", "\n", "", "else", ":", "\n", "            ", "n_instances", "=", "len", "(", "self", ".", "instance_features", ")", "\n", "\n", "", "mean", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "var", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "            ", "X_", "=", "np", ".", "hstack", "(", "\n", "(", "np", ".", "tile", "(", "x", ",", "(", "n_instances", ",", "1", ")", ")", ",", "self", ".", "instance_features", ")", ")", "\n", "means", ",", "vars", "=", "self", ".", "predict", "(", "X_", ")", "\n", "# VAR[1/n (X_1 + ... + X_n)] =", "\n", "# 1/n^2 * ( VAR(X_1) + ... + VAR(X_n))", "\n", "# for independent X_1 ... X_n", "\n", "var_x", "=", "np", ".", "sum", "(", "vars", ")", "/", "(", "len", "(", "vars", ")", "**", "2", ")", "\n", "if", "var_x", "<", "self", ".", "var_threshold", ":", "\n", "                ", "var_x", "=", "self", ".", "var_threshold", "\n", "\n", "", "var", "[", "i", "]", "=", "var_x", "\n", "mean", "[", "i", "]", "=", "np", ".", "mean", "(", "means", ")", "\n", "\n", "", "if", "len", "(", "mean", ".", "shape", ")", "==", "1", ":", "\n", "            ", "mean", "=", "mean", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "if", "len", "(", "var", ".", "shape", ")", "==", "1", ":", "\n", "            ", "var", "=", "var", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "return", "mean", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._normalize_y": [[287, 304], ["numpy.mean", "numpy.std"], "methods", ["None"], ["", "def", "_normalize_y", "(", "self", ",", "y", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Normalize data to zero mean unit standard deviation.\n\n        Parameters\n        ----------\n        y : np.ndarray\n            Targets for the Gaussian process\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "self", ".", "mean_y_", "=", "np", ".", "mean", "(", "y", ")", "\n", "self", ".", "std_y_", "=", "np", ".", "std", "(", "y", ")", "\n", "if", "self", ".", "std_y_", "==", "0", ":", "\n", "            ", "self", ".", "std_y_", "=", "1", "\n", "", "return", "(", "y", "-", "self", ".", "mean_y_", ")", "/", "self", ".", "std_y_", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.abstract_model.AbstractModel._untransform_y": [[305, 330], ["None"], "methods", ["None"], ["", "def", "_untransform_y", "(", "\n", "self", ",", "\n", "y", ":", "np", ".", "ndarray", ",", "\n", "var", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"Transform zeromean unit standard deviation data into the regular space.\n\n        This function should be used after a prediction with the Gaussian process which was trained on normalized data.\n\n        Parameters\n        ----------\n        y : np.ndarray\n            Normalized data.\n        var : np.ndarray (optional)\n            Normalized variance\n\n        Returns\n        -------\n        np.ndarray on Tuple[np.ndarray, np.ndarray]\n        \"\"\"", "\n", "y", "=", "y", "*", "self", ".", "std_y_", "+", "self", ".", "mean_y_", "\n", "if", "var", "is", "not", "None", ":", "\n", "            ", "var", "=", "var", "*", "self", ".", "std_y_", "**", "2", "\n", "return", "y", ",", "var", "\n", "", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior.__init__": [[12, 35], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rng", ":", "np", ".", "random", ".", "RandomState", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Abstract base class to define the interface for priors\n        of GP hyperparameter.\n\n        This class is adapted from RoBO:\n\n        Klein, A. and Falkner, S. and Mansur, N. and Hutter, F.\n        RoBO: A Flexible and Robust Bayesian Optimization Framework in Python\n        In: NIPS 2017 Bayesian Optimization Workshop\n\n        [16.04.2019]: Whenever lnprob or the gradient is computed for a scalar input, we use math.* rather than np.*\n\n        Parameters\n        ----------\n        rng: np.random.RandomState\n            Random number generator\n\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior.lnprob": [[36, 53], ["gp_base_priors.Prior._lnprob", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior._lnprob"], ["", "", "def", "lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Return the log probability of theta.\n\n        Theta must be on a log scale! This method exponentiates theta and calls ``self._lnprob``.\n\n        Parameters\n        ----------\n        theta : float\n            Hyperparameter configuration in log space.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "return", "self", ".", "_lnprob", "(", "np", ".", "exp", "(", "theta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior._lnprob": [[54, 71], ["NotImplementedError"], "methods", ["None"], ["", "def", "_lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Return the log probability of theta.\n\n        Theta must be on the original scale.\n\n        Parameters\n        ----------\n        theta : float\n            Hyperparameter configuration on the original scale.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior.sample_from_prior": [[72, 100], ["numpy.log", "numpy.any", "numpy.ndim", "ValueError", "ValueError", "gp_base_priors.Prior._sample_from_prior", "ValueError", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior._sample_from_prior"], ["", "def", "sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns ``n_samples`` from the prior.\n\n        All samples are on a log scale. This method calls ``self._sample_from_prior`` and applies a log transformation\n        to the obtained values.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "\n", "if", "np", ".", "ndim", "(", "n_samples", ")", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'argument n_samples needs to be a scalar (is %s)'", "%", "n_samples", ")", "\n", "", "if", "n_samples", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'argument n_samples needs to be positive (is %d)'", "%", "n_samples", ")", "\n", "\n", "", "sample", "=", "np", ".", "log", "(", "self", ".", "_sample_from_prior", "(", "n_samples", "=", "n_samples", ")", ")", "\n", "\n", "if", "np", ".", "any", "(", "~", "np", ".", "isfinite", "(", "sample", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Sample %s from prior %s contains infinite values!'", "%", "(", "sample", ",", "self", ")", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior._sample_from_prior": [[101, 117], ["NotImplementedError"], "methods", ["None"], ["", "def", "_sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns ``n_samples`` from the prior.\n\n        All samples are on a original scale.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior.gradient": [[118, 135], ["gp_base_priors.Prior._gradient", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior._gradient"], ["", "def", "gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with respect to theta.\n\n        Theta must be on the original scale.\n\n        Parameters\n        ----------\n        theta : float\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        float\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "return", "self", ".", "_gradient", "(", "np", ".", "exp", "(", "theta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.Prior._gradient": [[136, 151], ["NotImplementedError"], "methods", ["None"], ["", "def", "_gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with respect to theta.\n\n        Parameters\n        ----------\n        theta : float\n            Hyperparameter configuration in the original space space\n\n        Returns\n        -------\n        float\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.TophatPrior.__init__": [[155, 184], ["numpy.log", "numpy.log", "numpy.random.RandomState", "Exception", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "__init__", "(", "self", ",", "lower_bound", ":", "float", ",", "upper_bound", ":", "float", ",", "rng", ":", "np", ".", "random", ".", "RandomState", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Tophat prior as it used in the original spearmint code.\n\n        This class is adapted from RoBO:\n\n        Klein, A. and Falkner, S. and Mansur, N. and Hutter, F.\n        RoBO: A Flexible and Robust Bayesian Optimization Framework in Python\n        In: NIPS 2017 Bayesian Optimization Workshop\n\n        Parameters\n        ----------\n        lower_bound : float\n            Lower bound of the prior. In original scale.\n        upper_bound : float\n            Upper bound of the prior. In original scale.\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "", "self", ".", "min", "=", "lower_bound", "\n", "self", ".", "_log_min", "=", "np", ".", "log", "(", "lower_bound", ")", "\n", "self", ".", "max", "=", "upper_bound", "\n", "self", ".", "_log_max", "=", "np", ".", "log", "(", "upper_bound", ")", "\n", "if", "not", "(", "self", ".", "max", ">", "self", ".", "min", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Upper bound of Tophat prior must be greater than the lower bound!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.TophatPrior._lnprob": [[185, 202], ["None"], "methods", ["None"], ["", "", "def", "_lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Return the log probability of theta.\n\n        Parameters\n        ----------\n        theta : float\n            A hyperparameter configuration\n\n        Returns\n        -------\n        float\n        \"\"\"", "\n", "if", "theta", "<", "self", ".", "min", "or", "theta", ">", "self", ".", "max", ":", "\n", "            ", "return", "-", "np", ".", "inf", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.TophatPrior._sample_from_prior": [[203, 224], ["numpy.exp", "numpy.ndim", "ValueError", "ValueError", "gp_base_priors.TophatPrior.rng.uniform"], "methods", ["None"], ["", "", "def", "_sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Return ``n_samples`` from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "\n", "if", "np", ".", "ndim", "(", "n_samples", ")", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'argument n_samples needs to be a scalar (is %s)'", "%", "n_samples", ")", "\n", "", "if", "n_samples", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'argument n_samples needs to be positive (is %d)'", "%", "n_samples", ")", "\n", "\n", "", "p0", "=", "np", ".", "exp", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "self", ".", "_log_min", ",", "high", "=", "self", ".", "_log_max", ",", "size", "=", "(", "n_samples", ",", ")", ")", ")", "\n", "return", "p0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.TophatPrior.gradient": [[225, 241], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with respect to theta.\n\n        Parameters\n        ----------\n        theta : float\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.HorseshoePrior.__init__": [[245, 268], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", ":", "float", "=", "0.1", ",", "rng", ":", "np", ".", "random", ".", "RandomState", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Horseshoe Prior as it is used in spearmint\n\n        This class is adapted from RoBO:\n\n        Klein, A. and Falkner, S. and Mansur, N. and Hutter, F.\n        RoBO: A Flexible and Robust Bayesian Optimization Framework in Python\n        In: NIPS 2017 Bayesian Optimization Workshop\n\n        Parameters\n        ----------\n        scale: float\n            Scaling parameter. See below how it is influencing the distribution.\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "", "self", ".", "scale", "=", "scale", "\n", "self", ".", "scale_square", "=", "scale", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.HorseshoePrior._lnprob": [[269, 294], ["math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Return the log probability of theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            A hyperparameter configuration\n\n        Returns\n        -------\n        float\n        \"\"\"", "\n", "# We computed it exactly as in the original spearmint code, they basically say that there's no analytical form", "\n", "# of the horseshoe prior, but that the multiplier is bounded between 2 and 4 and that they used the middle", "\n", "# See \"The horseshoe estimator for sparse signals\" by Carvalho, Poloson and Scott (2010), Equation 1.", "\n", "# https://www.jstor.org/stable/25734098", "\n", "# Compared to the paper by Carvalho, there's a constant multiplicator missing", "\n", "# Compared to Spearmint we first have to undo the log space transformation of the theta", "\n", "# Note: \"undo log space transformation\" is done in parent class", "\n", "if", "theta", "==", "0", ":", "\n", "            ", "return", "np", ".", "inf", "# POSITIVE infinity (this is the \"spike\")", "\n", "", "else", ":", "\n", "            ", "a", "=", "math", ".", "log", "(", "1", "+", "3.0", "*", "(", "self", ".", "scale_square", "/", "theta", "**", "2", ")", ")", "\n", "return", "math", ".", "log", "(", "a", "+", "VERY_SMALL_NUMBER", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.HorseshoePrior._sample_from_prior": [[295, 313], ["numpy.abs", "numpy.abs", "gp_base_priors.HorseshoePrior.rng.standard_cauchy", "gp_base_priors.HorseshoePrior.rng.randn"], "methods", ["None"], ["", "", "def", "_sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "\n", "# This is copied from RoBO - scale is most likely the tau parameter", "\n", "lamda", "=", "np", ".", "abs", "(", "self", ".", "rng", ".", "standard_cauchy", "(", "size", "=", "n_samples", ")", ")", "\n", "p0", "=", "np", ".", "abs", "(", "self", ".", "rng", ".", "randn", "(", ")", "*", "lamda", "*", "self", ".", "scale", ")", "\n", "return", "p0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.HorseshoePrior._gradient": [[314, 337], ["math.log", "max"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration\n\n        Returns\n        -------\n        (D) np.array\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "if", "theta", "==", "0", ":", "\n", "            ", "return", "np", ".", "inf", "# POSITIVE infinity (this is the \"spike\")", "\n", "", "else", ":", "\n", "            ", "a", "=", "-", "(", "6", "*", "self", ".", "scale_square", ")", "\n", "b", "=", "3", "*", "self", ".", "scale_square", "+", "theta", "**", "2", "\n", "b", "*=", "math", ".", "log", "(", "3", "*", "self", ".", "scale_square", "*", "theta", "**", "(", "-", "2", ")", "+", "1", ")", "\n", "b", "=", "max", "(", "b", ",", "1e-14", ")", "\n", "return", "a", "/", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.LognormalPrior.__init__": [[341, 373], ["numpy.sqrt", "numpy.random.RandomState", "NotImplementedError", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", ":", "float", ",", "mean", ":", "float", "=", "0", ",", "rng", ":", "np", ".", "random", ".", "RandomState", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Log normal prior\n\n        This class is adapted from RoBO:\n\n        Klein, A. and Falkner, S. and Mansur, N. and Hutter, F.\n        RoBO: A Flexible and Robust Bayesian Optimization Framework in Python\n        In: NIPS 2017 Bayesian Optimization Workshop\n\n        Parameters\n        ----------\n        sigma: float\n            Specifies the standard deviation of the normal\n            distribution.\n        mean: float\n            Specifies the mean of the normal distribution\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n", "", "if", "mean", "!=", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "mean", ")", "\n", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "sigma_square", "=", "sigma", "**", "2", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sqrt_2_pi", "=", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.LognormalPrior._lnprob": [[374, 395], ["math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Return the log probability of theta\n\n        Parameters\n        ----------\n        theta : float\n            A hyperparameter configuration\n\n        Returns\n        -------\n        float\n        \"\"\"", "\n", "if", "theta", "<=", "self", ".", "mean", ":", "\n", "            ", "return", "-", "1e25", "\n", "", "else", ":", "\n", "            ", "rval", "=", "(", "\n", "-", "(", "math", ".", "log", "(", "theta", ")", "-", "self", ".", "mean", ")", "**", "2", "/", "(", "2", "*", "self", ".", "sigma_square", ")", "\n", "-", "math", ".", "log", "(", "self", ".", "sqrt_2_pi", "*", "self", ".", "sigma", "*", "theta", ")", "\n", ")", "\n", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.LognormalPrior._sample_from_prior": [[396, 411], ["gp_base_priors.LognormalPrior.rng.lognormal"], "methods", ["None"], ["", "", "def", "_sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "\n", "return", "self", ".", "rng", ".", "lognormal", "(", "mean", "=", "self", ".", "mean", ",", "sigma", "=", "self", ".", "sigma", ",", "size", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.LognormalPrior._gradient": [[412, 433], ["math.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "if", "theta", "<=", "0", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "# derivative of log(1 / (x * s^2 * sqrt(2 pi)) * exp( - 0.5 * (log(x ) / s^2))^2))", "\n", "# This is without the mean!!!", "\n", "            ", "return", "-", "(", "self", ".", "sigma_square", "+", "math", ".", "log", "(", "theta", ")", ")", "/", "(", "self", ".", "sigma_square", "*", "(", "theta", ")", ")", "*", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.SoftTopHatPrior.__init__": [[436, 461], ["gp_base_priors.Prior.__init__", "warnings.catch_warnings", "warnings.simplefilter", "ValueError", "numpy.log", "numpy.log", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "__init__", "(", "self", ",", "lower_bound", "=", "-", "10", ",", "upper_bound", "=", "10", ",", "exponent", "=", "2", ",", "rng", ":", "np", ".", "random", ".", "RandomState", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "rng", "=", "rng", ")", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "'error'", ")", "\n", "self", ".", "lower_bound", "=", "lower_bound", "\n", "try", ":", "\n", "                ", "self", ".", "_log_lower_bound", "=", "np", ".", "log", "(", "lower_bound", ")", "\n", "", "except", "RuntimeWarning", "as", "w", ":", "\n", "                ", "if", "'invalid value encountered in log'", "in", "w", ".", "args", "[", "0", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "'Invalid lower bound %f (cannot compute log)'", "%", "lower_bound", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "w", "\n", "", "", "self", ".", "upper_bound", "=", "upper_bound", "\n", "try", ":", "\n", "                ", "self", ".", "_log_upper_bound", "=", "np", ".", "log", "(", "upper_bound", ")", "\n", "", "except", "RuntimeWarning", "as", "w", ":", "\n", "                ", "if", "'invalid value encountered in log'", "in", "w", ".", "args", "[", "0", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "'Invalid lower bound %f (cannot compute log)'", "%", "lower_bound", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "w", "\n", "\n", "", "", "", "if", "exponent", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Exponent cannot be less or equal than zero (but is %f)'", "%", "exponent", ")", "\n", "", "self", ".", "exponent", "=", "exponent", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.SoftTopHatPrior.lnprob": [[462, 474], ["NotImplementedError", "numpy.ndim", "numpy.ndim", "len"], "methods", ["None"], ["", "def", "lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "# We need to use lnprob here instead of _lnprob to have the squared function work in the logarithmic space,", "\n", "# too.", "\n", "        ", "if", "np", ".", "ndim", "(", "theta", ")", "==", "0", "or", "(", "np", ".", "ndim", "(", "theta", ")", "==", "1", "and", "len", "(", "theta", ")", "==", "1", ")", ":", "\n", "            ", "if", "theta", "<", "self", ".", "_log_lower_bound", ":", "\n", "                ", "return", "-", "(", "(", "theta", "-", "self", ".", "_log_lower_bound", ")", "**", "self", ".", "exponent", ")", "\n", "", "elif", "theta", ">", "self", ".", "_log_upper_bound", ":", "\n", "                ", "return", "-", "(", "self", ".", "_log_upper_bound", "-", "theta", ")", "**", "self", ".", "exponent", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.SoftTopHatPrior._sample_from_prior": [[475, 490], ["numpy.exp", "gp_base_priors.SoftTopHatPrior.rng.uniform"], "methods", ["None"], ["", "", "def", "_sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "\n", "return", "np", ".", "exp", "(", "self", ".", "rng", ".", "uniform", "(", "self", ".", "_log_lower_bound", ",", "self", ".", "_log_upper_bound", ",", "size", "=", "(", "n_samples", ",", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.SoftTopHatPrior.gradient": [[491, 501], ["NotImplementedError", "numpy.ndim", "numpy.ndim", "len"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "if", "np", ".", "ndim", "(", "theta", ")", "==", "0", "or", "(", "np", ".", "ndim", "(", "theta", ")", "==", "1", "and", "len", "(", "theta", ")", "==", "1", ")", ":", "\n", "            ", "if", "theta", "<", "self", ".", "_log_lower_bound", ":", "\n", "                ", "return", "-", "self", ".", "exponent", "*", "(", "theta", "-", "self", ".", "_log_lower_bound", ")", "\n", "", "elif", "theta", ">", "self", ".", "_log_upper_bound", ":", "\n", "                ", "return", "self", ".", "exponent", "*", "(", "self", ".", "_log_upper_bound", "-", "theta", ")", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.SoftTopHatPrior.__repr__": [[502, 504], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'SoftTopHatPrior(lower_bound=%f, upper_bound=%f)'", "%", "(", "self", ".", "lower_bound", ",", "self", ".", "upper_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior.__init__": [[508, 530], ["gp_base_priors.Prior.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "a", ":", "float", ",", "scale", ":", "float", ",", "loc", ":", "float", "=", "0", ",", "rng", ":", "np", ".", "random", ".", "RandomState", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Gamma prior\n\n        f(x) = (x-loc)**(a-1) * e**(-(x-loc)) * (1/scale)**a / gamma(a)\n\n        Parameters\n        ----------\n        a: float > 0\n            shape parameter\n        scale: float > 0\n            scale parameter (1/scale corresponds to parameter p in canonical form)\n        loc: float\n            mean parameter for the distribution\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "rng", "=", "rng", ")", "\n", "\n", "self", ".", "a", "=", "a", "\n", "self", ".", "loc", "=", "loc", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior._lnprob": [[531, 547], ["scipy.gamma.logpdf", "numpy.ndim", "NotImplementedError"], "methods", ["None"], ["", "def", "_lnprob", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Returns the logpdf of theta.\n\n        Parameters\n        ----------\n        theta : float\n            Hyperparameter configuration\n\n        Returns\n        -------\n        float\n        \"\"\"", "\n", "if", "np", ".", "ndim", "(", "theta", ")", "!=", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "sps", ".", "gamma", ".", "logpdf", "(", "theta", ",", "a", "=", "self", ".", "a", ",", "scale", "=", "self", ".", "scale", ",", "loc", "=", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior._sample_from_prior": [[548, 563], ["gp_base_priors.GammaPrior.rng.gamma"], "methods", ["None"], ["", "def", "_sample_from_prior", "(", "self", ",", "n_samples", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        np.ndarray\n        \"\"\"", "\n", "\n", "return", "self", ".", "rng", ".", "gamma", "(", "shape", "=", "self", ".", "a", ",", "scale", "=", "self", ".", "scale", ",", "size", "=", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_base_priors.GammaPrior._gradient": [[564, 582], ["numpy.ndim", "NotImplementedError"], "methods", ["None"], ["", "def", "_gradient", "(", "self", ",", "theta", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        As computed by Wolfram Alpha\n\n        Parameters\n        ----------\n        theta: float\n            A hyperparameter configuration\n\n        Returns\n        -------\n        float\n        \"\"\"", "\n", "if", "np", ".", "ndim", "(", "theta", ")", "==", "0", ":", "\n", "# Multiply by theta because of the chain rule...", "\n", "            ", "return", "(", "(", "self", ".", "a", "-", "1", ")", "/", "theta", "-", "(", "1", "/", "self", ".", "scale", ")", ")", "*", "theta", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseNeuralNetwork.__init__": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "early_stop_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseNeuralNetwork.get_properties": [[24, 31], ["NotImplementedError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", ")", ":", "\n", "        ", "\"\"\"\n        Get the properties of the underlying algorithm.\n        :return: algorithm_properties : dict, optional (default=None)\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseNeuralNetwork.fit": [[32, 39], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        The fit function calls the fit function of the underlying model and returns `self`.\n        :param dataset: torch.utils.data.Dataset\n        :return: self, an instance of self.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseNeuralNetwork.set_hyperparameters": [[40, 61], ["params.items", "setattr", "init_params.items", "hasattr", "ValueError", "setattr", "hasattr", "ValueError", "str", "str"], "methods", ["None"], ["", "def", "set_hyperparameters", "(", "self", ",", "params", ",", "init_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        The function set the class members according to params\n        :param params: dictionary, parameters\n        :param init_params: dictionary\n        :return:\n        \"\"\"", "\n", "for", "param", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "param", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set hyperparameter %s for %s because '", "\n", "'the hyperparameter does not exist.'", "%", "(", "param", ",", "str", "(", "self", ")", ")", ")", "\n", "", "setattr", "(", "self", ",", "param", ",", "value", ")", "\n", "\n", "", "if", "init_params", "is", "not", "None", ":", "\n", "            ", "for", "param", ",", "value", "in", "init_params", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "param", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'Cannot set init param %s for %s because '", "\n", "'the init param does not exist.'", "%", "\n", "(", "param", ",", "str", "(", "self", ")", ")", ")", "\n", "", "setattr", "(", "self", ",", "param", ",", "value", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseNeuralNetwork.set_empty_model": [[62, 64], ["None"], "methods", ["None"], ["", "def", "set_empty_model", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseNeuralNetwork.get_hyperparameter_search_space": [[65, 101], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "optimizer", "=", "CategoricalHyperparameter", "(", "'optimizer'", ",", "[", "'SGD'", "]", ",", "default_value", "=", "'SGD'", ")", "\n", "sgd_learning_rate", "=", "CategoricalHyperparameter", "(", "\n", "\"sgd_learning_rate\"", ",", "[", "1e-3", ",", "3e-3", ",", "7e-3", ",", "1e-2", ",", "3e-2", ",", "7e-2", ",", "1e-1", "]", ",", "\n", "default_value", "=", "1e-1", ")", "\n", "sgd_momentum", "=", "UniformFloatHyperparameter", "(", "\n", "\"sgd_momentum\"", ",", "lower", "=", "0.5", ",", "upper", "=", "0.99", ",", "default_value", "=", "0.9", ",", "log", "=", "False", ")", "\n", "nesterov", "=", "CategoricalHyperparameter", "(", "'nesterov'", ",", "[", "'True'", ",", "'False'", "]", ",", "default_value", "=", "'True'", ")", "\n", "\n", "batch_size", "=", "CategoricalHyperparameter", "(", "\n", "\"batch_size\"", ",", "[", "32", ",", "64", ",", "128", "]", ",", "default_value", "=", "32", ")", "\n", "lr_decay", "=", "CategoricalHyperparameter", "(", "\"lr_decay\"", ",", "[", "1e-2", ",", "5e-2", ",", "1e-1", ",", "2e-1", "]", ",", "default_value", "=", "1e-1", ")", "\n", "weight_decay", "=", "CategoricalHyperparameter", "(", "\"weight_decay\"", ",", "[", "1e-5", ",", "3e-5", ",", "1e-4", ",", "3e-4", ",", "1e-3", ",", "3e-3", "]", ",", "\n", "default_value", "=", "1e-4", ")", "\n", "epoch_num", "=", "UnParametrizedHyperparameter", "(", "\"epoch_num\"", ",", "150", ")", "\n", "cs", ".", "add_hyperparameters", "(", "\n", "[", "optimizer", ",", "sgd_learning_rate", ",", "sgd_momentum", ",", "batch_size", ",", "epoch_num", ",", "\n", "lr_decay", ",", "weight_decay", ",", "nesterov", "]", ")", "\n", "# optimizer = CategoricalHyperparameter('optimizer', ['SGD', 'Adam'], default_value='SGD')", "\n", "# adam_learning_rate = UniformFloatHyperparameter(", "\n", "#     \"adam_learning_rate\", lower=1e-4, upper=1e-2, default_value=2e-3, log=True)", "\n", "# beta1 = UniformFloatHyperparameter(", "\n", "#     \"beta1\", lower=0.5, upper=0.999, default_value=0.9, log=False)", "\n", "# batch_size = CategoricalHyperparameter(", "\n", "#     \"batch_size\", [16, 32, 64, 128], default_value=32)", "\n", "# sgd_lr_depends_on_sgd = EqualsCondition(sgd_learning_rate, optimizer, \"SGD\")", "\n", "# adam_lr_depends_on_adam = EqualsCondition(adam_learning_rate, optimizer, \"Adam\")", "\n", "# beta_depends_on_adam = EqualsCondition(beta1, optimizer, \"Adam\")", "\n", "# sgd_momentum_depends_on_sgd = EqualsCondition(sgd_momentum, optimizer, \"SGD\")", "\n", "# nesterov_depends_on_sgd = EqualsCondition(nesterov, optimizer, 'SGD')", "\n", "# cs.add_conditions(", "\n", "#     [sgd_lr_depends_on_sgd, sgd_momentum_depends_on_sgd,", "\n", "#      nesterov_depends_on_sgd])", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseImgClassificationNeuralNetwork.__init__": [[104, 131], ["base_nn.BaseNeuralNetwork.__init__", "mindware.components.utils.configspace_utils.check_for_bool", "torch.device"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "batch_size", ",", "epoch_num", ",", "lr_decay", ",", "weight_decay", ",", "\n", "sgd_learning_rate", "=", "None", ",", "sgd_momentum", "=", "None", ",", "nesterov", "=", "None", ",", "\n", "adam_learning_rate", "=", "None", ",", "beta1", "=", "None", ",", "random_state", "=", "None", ",", "\n", "grayscale", "=", "False", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseImgClassificationNeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_epoch", "=", "epoch_num", "\n", "self", ".", "epoch_num", "=", "epoch_num", "\n", "self", ".", "lr_decay", "=", "lr_decay", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "sgd_learning_rate", "=", "sgd_learning_rate", "\n", "self", ".", "sgd_momentum", "=", "sgd_momentum", "\n", "self", ".", "nesterov", "=", "check_for_bool", "(", "nesterov", ")", "\n", "self", ".", "adam_learning_rate", "=", "adam_learning_rate", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "grayscale", "=", "grayscale", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "time_limit", "=", "None", "\n", "self", ".", "load_path", "=", "None", "\n", "\n", "self", ".", "optimizer_", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "self", ".", "early_stop", "=", "None", "\n", "self", ".", "cur_epoch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseImgClassificationNeuralNetwork.fit": [[132, 280], ["base_nn.BaseImgClassificationNeuralNetwork.model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.nn.CrossEntropyLoss", "mindware.components.utils.dl_util.EarlyStop", "kwargs.get", "kwargs.get", "range", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.load", "base_nn.BaseImgClassificationNeuralNetwork.model.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "base_nn.BaseImgClassificationNeuralNetwork.model.train", "int", "base_nn.BaseImgClassificationNeuralNetwork.model.train", "enumerate", "print", "torch.optim.lr_scheduler.MultiStepLR.step", "int", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "ValueError", "print", "range", "range", "int", "int", "len", "base_nn.BaseImgClassificationNeuralNetwork.model", "torch.nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "numpy.argmax", "base_nn.BaseImgClassificationNeuralNetwork.model.eval", "int", "int", "int", "int", "int", "enumerate", "int", "enumerate", "batch_x.float().to", "batch_y.to", "nn.CrossEntropyLoss.to().detach", "len", "base_nn.BaseImgClassificationNeuralNetwork.to().detach().numpy", "accuracy_score", "len", "torch.no_grad", "enumerate", "print", "base_nn.BaseImgClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "torch.nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "base_nn.BaseImgClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "torch.nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "batch_y.to().detach().numpy", "base_nn.BaseImgClassificationNeuralNetwork.model", "torch.nn.CrossEntropyLoss.", "len", "numpy.argmax", "mindware.components.utils.dl_util.EarlyStop.update", "batch_x.float().to", "batch_y.to", "batch_x.float().to", "batch_y.to", "batch_x.float", "nn.CrossEntropyLoss.to", "base_nn.BaseImgClassificationNeuralNetwork.to().detach", "batch_x.float().to", "batch_y.to", "nn.CrossEntropyLoss.to().detach", "len", "base_nn.BaseImgClassificationNeuralNetwork.to().detach().numpy", "accuracy_score", "len", "print", "batch_y.to().detach", "batch_y.to().detach().numpy", "batch_x.float", "batch_x.float", "base_nn.BaseImgClassificationNeuralNetwork.to", "batch_x.float", "nn.CrossEntropyLoss.to", "base_nn.BaseImgClassificationNeuralNetwork.to().detach", "batch_y.to", "batch_y.to().detach", "base_nn.BaseImgClassificationNeuralNetwork.to", "batch_y.to"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["", "def", "fit", "(", "self", ",", "dataset", ":", "DLDataset", ",", "mode", "=", "'fit'", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "\n", "assert", "self", ".", "model", "is", "not", "None", "\n", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "val_loader", "=", "None", "\n", "if", "'refit'", "in", "mode", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "if", "mode", "==", "'refit_test'", ":", "\n", "                ", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "dataset", ".", "subset_sampler_used", ":", "\n", "                ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "else", ":", "\n", "                ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "sampler", "=", "dataset", ".", "train_sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_for_val_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "sampler", "=", "dataset", ".", "val_sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "\n", "", "", "if", "self", ".", "optimizer", "==", "'SGD'", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "sgd_learning_rate", ",", "momentum", "=", "self", ".", "sgd_momentum", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "nesterov", "=", "self", ".", "nesterov", ")", "\n", "", "elif", "self", ".", "optimizer", "==", "'Adam'", ":", "\n", "            ", "optimizer", "=", "Adam", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "adam_learning_rate", ",", "betas", "=", "(", "self", ".", "beta1", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "return", "ValueError", "(", "\"Optimizer %s not supported!\"", "%", "self", ".", "optimizer", ")", "\n", "\n", "", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "self", ".", "max_epoch", "*", "0.5", ")", ",", "int", "(", "self", ".", "max_epoch", "*", "0.75", ")", "]", ",", "\n", "gamma", "=", "self", ".", "lr_decay", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stop", "=", "EarlyStop", "(", "patience", "=", "100", ",", "mode", "=", "'min'", ")", "\n", "\n", "if", "self", ".", "load_path", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "load_path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "self", ".", "cur_epoch_num", "=", "checkpoint", "[", "'epoch_num'", "]", "\n", "early_stop", "=", "checkpoint", "[", "'early_stop'", "]", "\n", "if", "early_stop", ".", "if_early_stop", ":", "\n", "                ", "print", "(", "\"Early stop!\"", ")", "\n", "self", ".", "optimizer_", "=", "optimizer", "\n", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "epoch_num", ")", "+", "int", "(", "self", ".", "cur_epoch_num", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "early_stop", "=", "early_stop", "\n", "return", "self", "\n", "\n", "", "", "profile_iter", "=", "kwargs", ".", "get", "(", "'profile_iter'", ",", "None", ")", "\n", "profile_epoch", "=", "kwargs", ".", "get", "(", "'profile_epoch'", ",", "None", ")", "\n", "assert", "not", "(", "profile_iter", "and", "profile_epoch", ")", "\n", "\n", "if", "profile_epoch", "or", "profile_iter", ":", "# Profile mode", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "profile_epoch", ":", "\n", "                ", "for", "epoch", "in", "range", "(", "int", "(", "profile_epoch", ")", ")", ":", "\n", "                    ", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "num_iter", "=", "0", "\n", "stop_flag", "=", "False", "\n", "for", "epoch", "in", "range", "(", "int", "(", "self", ".", "epoch_num", ")", ")", ":", "\n", "                    ", "if", "stop_flag", ":", "\n", "                        ", "break", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "num_iter", "+=", "1", "\n", "if", "num_iter", ">", "profile_iter", ":", "\n", "                            ", "stop_flag", "=", "True", "\n", "break", "\n", "", "", "", "", "return", "self", "\n", "\n", "", "for", "epoch", "in", "range", "(", "int", "(", "self", ".", "cur_epoch_num", ")", ",", "int", "(", "self", ".", "cur_epoch_num", ")", "+", "int", "(", "self", ".", "epoch_num", ")", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "# print('Current learning rate: %.5f' % optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "epoch_avg_loss", "=", "0", "\n", "epoch_avg_acc", "=", "0", "\n", "val_avg_loss", "=", "0", "\n", "val_avg_acc", "=", "0", "\n", "num_train_samples", "=", "0", "\n", "num_val_samples", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "num_train_samples", "+=", "len", "(", "batch_x", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_avg_loss", "+=", "loss", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", "*", "len", "(", "batch_x", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "epoch_avg_acc", "+=", "accuracy_score", "(", "prediction", ",", "batch_y", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "*", "len", "(", "batch_x", ")", "\n", "\n", "", "epoch_avg_loss", "/=", "num_train_samples", "\n", "epoch_avg_acc", "/=", "num_train_samples", "\n", "# TODO: logger", "\n", "print", "(", "'Epoch %d: Train loss %.4f, train acc %.4f'", "%", "(", "epoch", ",", "epoch_avg_loss", ",", "epoch_avg_acc", ")", ")", "\n", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                        ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "val_loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "num_val_samples", "+=", "len", "(", "batch_x", ")", "\n", "val_avg_loss", "+=", "val_loss", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", "*", "len", "(", "batch_x", ")", "\n", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "val_avg_acc", "+=", "accuracy_score", "(", "prediction", ",", "batch_y", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "*", "len", "(", "batch_x", ")", "\n", "\n", "", "val_avg_loss", "/=", "num_val_samples", "\n", "val_avg_acc", "/=", "num_val_samples", "\n", "print", "(", "'Epoch %d: Val loss %.4f, val acc %.4f'", "%", "(", "epoch", ",", "val_avg_loss", ",", "val_avg_acc", ")", ")", "\n", "\n", "# Early stop", "\n", "if", "'refit'", "not", "in", "mode", ":", "\n", "                        ", "early_stop", ".", "update", "(", "val_avg_loss", ")", "\n", "if", "early_stop", ".", "if_early_stop", ":", "\n", "                            ", "self", ".", "early_stop_flag", "=", "True", "\n", "print", "(", "\"Early stop!\"", ")", "\n", "break", "\n", "\n", "", "", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "optimizer_", "=", "optimizer", "\n", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "epoch_num", ")", "+", "int", "(", "self", ".", "cur_epoch_num", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "early_stop", "=", "early_stop", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseImgClassificationNeuralNetwork.predict_proba": [[281, 301], ["torch.utils.data.DataLoader", "base_nn.BaseImgClassificationNeuralNetwork.model.to", "base_nn.BaseImgClassificationNeuralNetwork.model.eval", "ValueError", "torch.no_grad", "enumerate", "base_nn.BaseImgClassificationNeuralNetwork.model", "torch.nn.functional.softmax", "batch_x.float().to", "torch.nn.functional.softmax.to().detach().numpy", "numpy.concatenate", "batch_x.float", "torch.nn.functional.softmax.to().detach", "torch.nn.functional.softmax.to().detach().numpy", "torch.nn.functional.softmax.to", "torch.nn.functional.softmax.to().detach", "torch.nn.functional.softmax.to"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax"], ["", "def", "predict_proba", "(", "self", ",", "dataset", ":", "Dataset", ",", "sampler", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "prediction", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "pred", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "if", "prediction", "is", "None", ":", "\n", "                    ", "prediction", "=", "pred", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "np", ".", "concatenate", "(", "(", "prediction", ",", "pred", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "\n", "", "", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseImgClassificationNeuralNetwork.predict": [[302, 320], ["torch.utils.data.DataLoader", "base_nn.BaseImgClassificationNeuralNetwork.model.to", "base_nn.BaseImgClassificationNeuralNetwork.model.eval", "numpy.argmax", "ValueError", "torch.no_grad", "enumerate", "base_nn.BaseImgClassificationNeuralNetwork.model", "batch_x.float().to", "base_nn.BaseImgClassificationNeuralNetwork.to().detach().numpy", "numpy.concatenate", "batch_x.float", "base_nn.BaseImgClassificationNeuralNetwork.to().detach", "base_nn.BaseImgClassificationNeuralNetwork.to().detach().numpy", "base_nn.BaseImgClassificationNeuralNetwork.to", "base_nn.BaseImgClassificationNeuralNetwork.to().detach", "base_nn.BaseImgClassificationNeuralNetwork.to"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "dataset", ":", "Dataset", ",", "sampler", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "prediction", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "if", "prediction", "is", "None", ":", "\n", "                    ", "prediction", "=", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "np", ".", "concatenate", "(", "(", "prediction", ",", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "return", "np", ".", "argmax", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseImgClassificationNeuralNetwork.score": [[321, 347], ["isinstance", "base_nn.BaseImgClassificationNeuralNetwork.model.to", "base_nn.BaseImgClassificationNeuralNetwork.model.eval", "ValueError", "torch.utils.data.DataLoader", "torch.no_grad", "enumerate", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "base_nn.BaseImgClassificationNeuralNetwork.model().to", "numpy.argmax", "len", "base_nn.BaseImgClassificationNeuralNetwork.detach().numpy", "metric", "len", "base_nn.BaseImgClassificationNeuralNetwork.model", "batch_y.detach().numpy", "batch_x.float().to", "base_nn.BaseImgClassificationNeuralNetwork.detach", "batch_y.detach", "batch_x.float"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "dataset", ",", "metric", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "dataset", ".", "subset_sampler_used", ":", "\n", "                ", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "else", ":", "\n", "                ", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_for_val_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "dataset", ".", "val_sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "\n", "", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_len", "=", "0", "\n", "score", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "score", "+=", "metric", "(", "prediction", ",", "batch_y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "*", "len", "(", "prediction", ")", "\n", "total_len", "+=", "len", "(", "prediction", ")", "\n", "", "score", "/=", "total_len", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseTextClassificationNeuralNetwork.__init__": [[350, 376], ["base_nn.BaseNeuralNetwork.__init__", "torch.device"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "batch_size", ",", "epoch_num", ",", "lr_decay", ",", "step_decay", ",", "weight_decay", ",", "\n", "sgd_learning_rate", "=", "None", ",", "sgd_momentum", "=", "None", ",", "nesterov", "=", "None", ",", "adam_learning_rate", "=", "None", ",", "\n", "beta1", "=", "None", ",", "random_state", "=", "None", ",", "device", "=", "'cpu'", ",", "\n", "config", "=", "'./mindware/components/models/text_classification/nn_utils/bert-base-uncased'", ")", ":", "\n", "        ", "super", "(", "BaseTextClassificationNeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_epoch", "=", "epoch_num", "\n", "self", ".", "epoch_num", "=", "epoch_num", "\n", "self", ".", "lr_decay", "=", "lr_decay", "\n", "self", ".", "step_decay", "=", "step_decay", "\n", "self", ".", "sgd_learning_rate", "=", "sgd_learning_rate", "\n", "self", ".", "sgd_momentum", "=", "sgd_momentum", "\n", "self", ".", "adam_learning_rate", "=", "adam_learning_rate", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "time_limit", "=", "None", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "load_path", "=", "None", "\n", "\n", "self", ".", "optimizer_", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "self", ".", "early_stop", "=", "None", "\n", "self", ".", "cur_epoch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseTextClassificationNeuralNetwork.fit": [[377, 527], ["base_nn.BaseTextClassificationNeuralNetwork.model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.nn.CrossEntropyLoss", "mindware.components.utils.dl_util.EarlyStop", "kwargs.get", "kwargs.get", "range", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.load", "base_nn.BaseTextClassificationNeuralNetwork.model.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "base_nn.BaseTextClassificationNeuralNetwork.model.train", "int", "base_nn.BaseTextClassificationNeuralNetwork.model.train", "enumerate", "print", "int", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "ValueError", "print", "range", "range", "int", "int", "len", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model", "torch.nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "numpy.argmax", "base_nn.BaseTextClassificationNeuralNetwork.model.eval", "int", "int", "int", "int", "int", "enumerate", "int", "enumerate", "numpy.array", "batch_x.long().to", "torch.Tensor.to", "batch_y.to", "nn.CrossEntropyLoss.to().detach", "len", "base_nn.BaseTextClassificationNeuralNetwork.to().detach().numpy", "accuracy_score", "len", "torch.no_grad", "enumerate", "print", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "torch.nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "torch.nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "batch_y.to().detach().numpy", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model", "torch.nn.CrossEntropyLoss.", "len", "numpy.argmax", "mindware.components.utils.dl_util.EarlyStop.update", "numpy.array", "batch_x.long().to", "torch.Tensor.to", "batch_y.to", "numpy.array", "batch_x.long().to", "torch.Tensor.to", "batch_y.to", "batch_x.long", "nn.CrossEntropyLoss.to", "base_nn.BaseTextClassificationNeuralNetwork.to().detach", "numpy.array", "batch_x.long().to", "torch.Tensor.to", "batch_y.to", "nn.CrossEntropyLoss.to().detach", "len", "base_nn.BaseTextClassificationNeuralNetwork.to().detach().numpy", "accuracy_score", "len", "print", "float", "batch_y.to().detach", "batch_y.to().detach().numpy", "batch_x.long", "batch_x.long", "base_nn.BaseTextClassificationNeuralNetwork.to", "batch_x.long", "nn.CrossEntropyLoss.to", "base_nn.BaseTextClassificationNeuralNetwork.to().detach", "float", "float", "batch_y.to", "float", "batch_y.to().detach", "base_nn.BaseTextClassificationNeuralNetwork.to", "batch_y.to"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["", "def", "fit", "(", "self", ",", "dataset", ",", "mode", "=", "'fit'", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "\n", "assert", "self", ".", "model", "is", "not", "None", "\n", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "val_loader", "=", "None", "\n", "if", "'refit'", "in", "mode", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "if", "mode", "==", "'refit_test'", ":", "\n", "                ", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "dataset", ".", "subset_sampler_used", ":", "\n", "                ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "else", ":", "\n", "                ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "sampler", "=", "dataset", ".", "train_sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_for_val_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "sampler", "=", "dataset", ".", "val_sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "\n", "", "", "if", "self", ".", "optimizer", "==", "'SGD'", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "sgd_learning_rate", ",", "momentum", "=", "self", ".", "sgd_momentum", ")", "\n", "", "elif", "self", ".", "optimizer", "==", "'Adam'", ":", "\n", "            ", "optimizer", "=", "Adam", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "adam_learning_rate", ",", "betas", "=", "(", "self", ".", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "ValueError", "(", "\"Optimizer %s not supported!\"", "%", "self", ".", "optimizer", ")", "\n", "\n", "", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "self", ".", "max_epoch", "*", "0.5", ")", ",", "int", "(", "self", ".", "max_epoch", "*", "0.75", ")", "]", ",", "\n", "gamma", "=", "self", ".", "lr_decay", ")", "\n", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "early_stop", "=", "EarlyStop", "(", "patience", "=", "5", ",", "mode", "=", "'min'", ")", "\n", "\n", "if", "self", ".", "load_path", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "load_path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "self", ".", "cur_epoch_num", "=", "checkpoint", "[", "'epoch_num'", "]", "\n", "early_stop", "=", "checkpoint", "[", "'early_stop'", "]", "\n", "if", "early_stop", ".", "if_early_stop", ":", "\n", "                ", "print", "(", "\"Early stop!\"", ")", "\n", "self", ".", "optimizer_", "=", "optimizer", "\n", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "epoch_num", ")", "+", "int", "(", "self", ".", "cur_epoch_num", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "early_stop", "=", "early_stop", "\n", "return", "self", "\n", "\n", "", "", "profile_iter", "=", "kwargs", ".", "get", "(", "'profile_iter'", ",", "None", ")", "\n", "profile_epoch", "=", "kwargs", ".", "get", "(", "'profile_epoch'", ",", "None", ")", "\n", "assert", "not", "(", "profile_iter", "and", "profile_epoch", ")", "\n", "\n", "if", "profile_epoch", "or", "profile_iter", ":", "# Profile mode", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "profile_epoch", ":", "\n", "                ", "for", "epoch", "in", "range", "(", "int", "(", "profile_epoch", ")", ")", ":", "\n", "                    ", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "num_iter", "=", "0", "\n", "stop_flag", "=", "False", "\n", "for", "epoch", "in", "range", "(", "int", "(", "self", ".", "epoch_num", ")", ")", ":", "\n", "                    ", "if", "stop_flag", ":", "\n", "                        ", "break", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "num_iter", "+=", "1", "\n", "if", "num_iter", ">", "profile_iter", ":", "\n", "                            ", "stop_flag", "=", "True", "\n", "break", "\n", "", "", "", "", "return", "self", "\n", "\n", "", "for", "epoch", "in", "range", "(", "int", "(", "self", ".", "cur_epoch_num", ")", ",", "int", "(", "self", ".", "cur_epoch_num", ")", "+", "int", "(", "self", ".", "epoch_num", ")", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "# print('Current learning rate: %.5f' % optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "epoch_avg_loss", "=", "0", "\n", "epoch_avg_acc", "=", "0", "\n", "val_avg_loss", "=", "0", "\n", "val_avg_acc", "=", "0", "\n", "num_train_samples", "=", "0", "\n", "num_val_samples", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "num_train_samples", "+=", "len", "(", "batch_x", ")", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_avg_loss", "+=", "loss", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", "*", "len", "(", "batch_x", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "epoch_avg_acc", "+=", "accuracy_score", "(", "prediction", ",", "batch_y", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "*", "len", "(", "batch_x", ")", "\n", "\n", "", "epoch_avg_loss", "/=", "num_train_samples", "\n", "epoch_avg_acc", "/=", "num_train_samples", "\n", "# TODO: logger", "\n", "print", "(", "'Epoch %d: Train loss %.4f, train acc %.4f'", "%", "(", "epoch", ",", "epoch_avg_loss", ",", "epoch_avg_acc", ")", ")", "\n", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                        ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "val_loss", "=", "loss_func", "(", "logits", ",", "batch_y", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "num_val_samples", "+=", "len", "(", "batch_x", ")", "\n", "val_avg_loss", "+=", "val_loss", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", "*", "len", "(", "batch_x", ")", "\n", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "val_avg_acc", "+=", "accuracy_score", "(", "prediction", ",", "batch_y", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "*", "len", "(", "batch_x", ")", "\n", "\n", "", "val_avg_loss", "/=", "num_val_samples", "\n", "val_avg_acc", "/=", "num_val_samples", "\n", "print", "(", "'Epoch %d: Val loss %.4f, val acc %.4f'", "%", "(", "epoch", ",", "val_avg_loss", ",", "val_avg_acc", ")", ")", "\n", "\n", "# Early stop", "\n", "if", "'refit'", "not", "in", "mode", ":", "\n", "                        ", "early_stop", ".", "update", "(", "val_avg_loss", ")", "\n", "if", "early_stop", ".", "if_early_stop", ":", "\n", "                            ", "self", ".", "early_stop_flag", "=", "True", "\n", "print", "(", "\"Early stop!\"", ")", "\n", "break", "\n", "\n", "", "", "", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "self", ".", "optimizer_", "=", "optimizer", "\n", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "epoch_num", ")", "+", "int", "(", "self", ".", "cur_epoch_num", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseTextClassificationNeuralNetwork.predict_proba": [[528, 548], ["torch.utils.data.DataLoader", "base_nn.BaseTextClassificationNeuralNetwork.model.to", "base_nn.BaseTextClassificationNeuralNetwork.model.eval", "ValueError", "torch.no_grad", "enumerate", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model", "torch.nn.functional.softmax", "numpy.array", "batch_x.long().to", "torch.Tensor.to", "torch.nn.functional.softmax.to().detach().numpy", "numpy.concatenate", "batch_x.long", "torch.nn.functional.softmax.to().detach", "torch.nn.functional.softmax.to().detach().numpy", "float", "torch.nn.functional.softmax.to", "torch.nn.functional.softmax.to().detach", "torch.nn.functional.softmax.to"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax"], ["", "def", "predict_proba", "(", "self", ",", "dataset", ":", "Dataset", ",", "sampler", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "prediction", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "pred", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "if", "prediction", "is", "None", ":", "\n", "                    ", "prediction", "=", "pred", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "np", ".", "concatenate", "(", "(", "prediction", ",", "pred", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseTextClassificationNeuralNetwork.predict": [[549, 569], ["torch.utils.data.DataLoader", "base_nn.BaseTextClassificationNeuralNetwork.model.to", "base_nn.BaseTextClassificationNeuralNetwork.model.eval", "numpy.argmax", "ValueError", "torch.no_grad", "enumerate", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model", "numpy.array", "batch_x.long().to", "torch.Tensor.to", "base_nn.BaseTextClassificationNeuralNetwork.to().detach().numpy", "numpy.concatenate", "batch_x.long", "base_nn.BaseTextClassificationNeuralNetwork.to().detach", "base_nn.BaseTextClassificationNeuralNetwork.to().detach().numpy", "float", "base_nn.BaseTextClassificationNeuralNetwork.to", "base_nn.BaseTextClassificationNeuralNetwork.to().detach", "base_nn.BaseTextClassificationNeuralNetwork.to"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "dataset", ":", "Dataset", ",", "sampler", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "assert", "sampler", "is", "None", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "None", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "prediction", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "if", "prediction", "is", "None", ":", "\n", "                    ", "prediction", "=", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "np", ".", "concatenate", "(", "(", "prediction", ",", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "return", "np", ".", "argmax", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseTextClassificationNeuralNetwork.score": [[570, 595], ["isinstance", "base_nn.BaseTextClassificationNeuralNetwork.model.eval", "ValueError", "torch.utils.data.DataLoader", "torch.no_grad", "enumerate", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Tensor", "base_nn.BaseTextClassificationNeuralNetwork.model().to", "numpy.argmax", "len", "numpy.array", "base_nn.BaseTextClassificationNeuralNetwork.detach().numpy", "metric", "len", "base_nn.BaseTextClassificationNeuralNetwork.model", "batch_y.detach().numpy", "batch_x.long().to", "torch.Tensor.to", "base_nn.BaseTextClassificationNeuralNetwork.detach", "float", "batch_y.detach", "batch_x.long"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "dataset", ",", "metric", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "dataset", ".", "subset_sampler_used", ":", "\n", "                ", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "else", ":", "\n", "                ", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_for_val_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "dataset", ".", "val_sampler", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_len", "=", "0", "\n", "score", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "masks", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "float", "(", "i", "!=", "0", ")", "for", "i", "in", "sample", "]", "for", "sample", "in", "batch_x", "]", ")", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ")", ".", "to", "(", "'cpu'", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "score", "+=", "metric", "(", "prediction", ",", "batch_y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "*", "len", "(", "prediction", ")", "\n", "total_len", "+=", "len", "(", "prediction", ")", "\n", "", "", "score", "/=", "total_len", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseODClassificationNeuralNetwork.__init__": [[598, 625], ["base_nn.BaseNeuralNetwork.__init__", "mindware.components.utils.configspace_utils.check_for_bool", "torch.device"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "batch_size", ",", "epoch_num", ",", "lr_decay", ",", "weight_decay", ",", "\n", "sgd_learning_rate", "=", "None", ",", "sgd_momentum", "=", "None", ",", "nesterov", "=", "None", ",", "\n", "adam_learning_rate", "=", "None", ",", "beta1", "=", "None", ",", "random_state", "=", "None", ",", "\n", "grayscale", "=", "False", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseODClassificationNeuralNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_epoch", "=", "epoch_num", "\n", "self", ".", "epoch_num", "=", "epoch_num", "\n", "self", ".", "lr_decay", "=", "lr_decay", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "sgd_learning_rate", "=", "sgd_learning_rate", "\n", "self", ".", "sgd_momentum", "=", "sgd_momentum", "\n", "self", ".", "nesterov", "=", "check_for_bool", "(", "nesterov", ")", "\n", "self", ".", "adam_learning_rate", "=", "adam_learning_rate", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "grayscale", "=", "grayscale", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "time_limit", "=", "None", "\n", "self", ".", "load_path", "=", "None", "\n", "\n", "self", ".", "optimizer_", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "self", ".", "early_stop", "=", "None", "\n", "self", ".", "cur_epoch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseODClassificationNeuralNetwork.fit": [[626, 752], ["base_nn.BaseODClassificationNeuralNetwork.model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "mindware.components.utils.dl_util.EarlyStop", "kwargs.get", "kwargs.get", "range", "base_nn.BaseODClassificationNeuralNetwork.model.load_state_dict", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.load", "base_nn.BaseODClassificationNeuralNetwork.model.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "base_nn.BaseODClassificationNeuralNetwork.model.train", "int", "base_nn.BaseODClassificationNeuralNetwork.model.train", "enumerate", "print", "torch.optim.lr_scheduler.MultiStepLR.step", "int", "int", "torch.load", "torch.utils.data.DataLoader", "torch.optim.Adam", "ValueError", "print", "range", "range", "int", "int", "base_nn.BaseODClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "len", "loss.backward", "torch.optim.Adam.step", "base_nn.BaseODClassificationNeuralNetwork.model.eval", "int", "int", "int", "int", "int", "enumerate", "int", "enumerate", "batch_x.float().to", "batch_y.float().to", "loss.to().detach", "len", "torch.no_grad", "enumerate", "print", "base_nn.BaseODClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "base_nn.BaseODClassificationNeuralNetwork.model", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "base_nn.BaseODClassificationNeuralNetwork.model", "len", "mindware.components.utils.dl_util.EarlyStop.update", "batch_x.float().to", "batch_y.float().to", "batch_x.float().to", "batch_y.float().to", "batch_x.float", "batch_y.float", "loss.to", "batch_x.float().to", "batch_y.float().to", "loss.to().detach", "len", "print", "batch_x.float", "batch_y.float", "batch_x.float", "batch_y.float", "batch_x.float", "batch_y.float", "loss.to"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["", "def", "fit", "(", "self", ",", "dataset", ":", "DLDataset", ",", "mode", "=", "'fit'", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "model", "is", "not", "None", "\n", "\n", "if", "self", ".", "load_path", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "load_path", ")", ")", "\n", "\n", "", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "\n", "val_loader", "=", "None", "\n", "if", "'refit'", "in", "mode", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "NUM_WORKERS", ",", "collate_fn", "=", "dataset", ".", "train_dataset", ".", "collate_fn", ")", "\n", "if", "mode", "==", "'refit_test'", ":", "\n", "                ", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "NUM_WORKERS", ",", "collate_fn", "=", "dataset", ".", "test_dataset", ".", "collate_fn", ")", "\n", "", "", "else", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "NUM_WORKERS", ",", "collate_fn", "=", "dataset", ".", "train_dataset", ".", "collate_fn", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "NUM_WORKERS", ",", "collate_fn", "=", "dataset", ".", "val_dataset", ".", "collate_fn", ")", "\n", "# else:", "\n", "#     train_loader = DataLoader(dataset=dataset.train_dataset, batch_size=self.batch_size,", "\n", "#                               sampler=dataset.train_sampler, num_workers=4,", "\n", "#                               collate_fn=dataset.train_dataset.collate_fn)", "\n", "#     val_loader = DataLoader(dataset=dataset.train_dataset, batch_size=self.batch_size,", "\n", "#                             sampler=dataset.val_sampler, num_workers=4,", "\n", "#                             collate_fn=dataset.train_dataset.collate_fn)", "\n", "\n", "", "if", "self", ".", "optimizer", "==", "'SGD'", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "sgd_learning_rate", ",", "momentum", "=", "self", ".", "sgd_momentum", ")", "\n", "", "elif", "self", ".", "optimizer", "==", "'Adam'", ":", "\n", "            ", "optimizer", "=", "Adam", "(", "params", "=", "params", ",", "lr", "=", "self", ".", "adam_learning_rate", ",", "betas", "=", "(", "self", ".", "beta1", ",", "0.999", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "ValueError", "(", "\"Optimizer %s not supported!\"", "%", "self", ".", "optimizer", ")", "\n", "\n", "", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "self", ".", "max_epoch", "*", "0.5", ")", ",", "int", "(", "self", ".", "max_epoch", "*", "0.75", ")", "]", ",", "\n", "gamma", "=", "self", ".", "lr_decay", ")", "\n", "early_stop", "=", "EarlyStop", "(", "patience", "=", "5", ",", "mode", "=", "'min'", ")", "\n", "\n", "if", "self", ".", "load_path", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "load_path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "self", ".", "cur_epoch_num", "=", "checkpoint", "[", "'epoch_num'", "]", "\n", "early_stop", "=", "checkpoint", "[", "'early_stop'", "]", "\n", "if", "early_stop", ".", "if_early_stop", ":", "\n", "                ", "print", "(", "\"Early stop!\"", ")", "\n", "self", ".", "optimizer_", "=", "optimizer", "\n", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "epoch_num", ")", "+", "int", "(", "self", ".", "cur_epoch_num", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "early_stop", "=", "early_stop", "\n", "return", "self", "\n", "\n", "", "", "profile_iter", "=", "kwargs", ".", "get", "(", "'profile_iter'", ",", "None", ")", "\n", "profile_epoch", "=", "kwargs", ".", "get", "(", "'profile_epoch'", ",", "None", ")", "\n", "assert", "not", "(", "profile_iter", "and", "profile_epoch", ")", "\n", "\n", "if", "profile_epoch", "or", "profile_iter", ":", "# Profile mode", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "profile_epoch", ":", "\n", "                ", "for", "epoch", "in", "range", "(", "int", "(", "profile_epoch", ")", ")", ":", "\n", "                    ", "for", "i", ",", "(", "_", ",", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "loss", ",", "outputs", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "batch_y", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "num_iter", "=", "0", "\n", "stop_flag", "=", "False", "\n", "for", "epoch", "in", "range", "(", "int", "(", "self", ".", "epoch_num", ")", ")", ":", "\n", "                    ", "if", "stop_flag", ":", "\n", "                        ", "break", "\n", "", "for", "i", ",", "(", "_", ",", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "loss", ",", "outputs", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "batch_y", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "num_iter", "+=", "1", "\n", "if", "num_iter", ">", "profile_iter", ":", "\n", "                            ", "stop_flag", "=", "True", "\n", "break", "\n", "", "", "", "", "return", "self", "\n", "\n", "", "for", "epoch", "in", "range", "(", "int", "(", "self", ".", "cur_epoch_num", ")", ",", "int", "(", "self", ".", "cur_epoch_num", ")", "+", "int", "(", "self", ".", "epoch_num", ")", ")", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "# print('Current learning rate: %.5f' % optimizer.state_dict()['param_groups'][0]['lr'])", "\n", "epoch_avg_loss", "=", "0", "\n", "val_avg_loss", "=", "0", "\n", "num_train_samples", "=", "0", "\n", "num_val_samples", "=", "0", "\n", "for", "i", ",", "(", "_", ",", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "loss", ",", "outputs", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "batch_y", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "epoch_avg_loss", "+=", "loss", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", "*", "len", "(", "batch_x", ")", "\n", "num_train_samples", "+=", "len", "(", "batch_x", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "epoch_avg_loss", "/=", "num_train_samples", "\n", "print", "(", "'Epoch %d: Train loss %.4f'", "%", "(", "epoch", ",", "epoch_avg_loss", ")", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", ",", "(", "_", ",", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                        ", "loss", ",", "outputs", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ",", "batch_y", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "val_avg_loss", "+=", "loss", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", "*", "len", "(", "batch_x", ")", "\n", "num_val_samples", "+=", "len", "(", "batch_x", ")", "\n", "\n", "", "val_avg_loss", "/=", "num_val_samples", "\n", "print", "(", "'Epoch %d: Val loss %.4f'", "%", "(", "epoch", ",", "val_avg_loss", ")", ")", "\n", "\n", "# Early stop", "\n", "if", "'refit'", "not", "in", "mode", ":", "\n", "                        ", "early_stop", ".", "update", "(", "val_avg_loss", ")", "\n", "if", "early_stop", ".", "if_early_stop", ":", "\n", "                            ", "self", ".", "early_stop_flag", "=", "True", "\n", "print", "(", "\"Early stop!\"", ")", "\n", "break", "\n", "\n", "", "", "", "", "", "self", ".", "optimizer_", "=", "optimizer", "\n", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "epoch_num", ")", "+", "int", "(", "self", ".", "cur_epoch_num", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseODClassificationNeuralNetwork.predict": [[753, 772], ["torch.utils.data.DataLoader", "base_nn.BaseODClassificationNeuralNetwork.model.to", "base_nn.BaseODClassificationNeuralNetwork.model.eval", "numpy.argmax", "ValueError", "torch.no_grad", "enumerate", "base_nn.BaseODClassificationNeuralNetwork.model", "batch_x.float().to", "base_nn.BaseODClassificationNeuralNetwork.to().detach().numpy", "numpy.concatenate", "batch_x.float", "base_nn.BaseODClassificationNeuralNetwork.to().detach", "base_nn.BaseODClassificationNeuralNetwork.to().detach().numpy", "base_nn.BaseODClassificationNeuralNetwork.to", "base_nn.BaseODClassificationNeuralNetwork.to().detach", "base_nn.BaseODClassificationNeuralNetwork.to"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "dataset", ":", "Dataset", ",", "sampler", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model not fitted!\"", ")", "\n", "", "batch_size", "=", "self", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "NUM_WORKERS", ",", "collate_fn", "=", "dataset", ".", "collate_fn", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "prediction", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "logits", "=", "self", ".", "model", "(", "batch_x", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "if", "prediction", "is", "None", ":", "\n", "                    ", "prediction", "=", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "np", ".", "concatenate", "(", "(", "prediction", ",", "logits", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "return", "np", ".", "argmax", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_nn.BaseODClassificationNeuralNetwork.score": [[774, 776], ["None"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "dataset", ",", "metric", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel.get_properties": [[5, 12], ["NotImplementedError"], "methods", ["None"], ["from", ".", "abstract_model", "import", "AbstractModel", "\n", "\n", "\n", "class", "BaseModel", "(", "AbstractModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "configspace", ",", "types", ",", "bounds", ",", "seed", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Abstract base class for all Gaussian process models.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel.get_hyperparameter_search_space": [[13, 21], ["NotImplementedError"], "methods", ["None"], ["super", "(", ")", ".", "__init__", "(", "configspace", "=", "configspace", ",", "types", "=", "types", ",", "bounds", "=", "bounds", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "", "def", "_get_all_priors", "(", "\n", "self", ",", "\n", "add_bound_priors", ":", "bool", "=", "True", ",", "\n", "add_soft_bounds", ":", "bool", "=", "False", ",", "\n", ")", "->", "List", "[", "List", "[", "Prior", "]", "]", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel.fit": [[22, 30], ["NotImplementedError"], "methods", ["None"], ["# Obtain a list of all priors for each tunable hyperparameter of the kernel", "\n", "        ", "all_priors", "=", "[", "]", "\n", "to_visit", "=", "[", "]", "\n", "to_visit", ".", "append", "(", "self", ".", "gp", ".", "kernel", ".", "k1", ")", "\n", "to_visit", ".", "append", "(", "self", ".", "gp", ".", "kernel", ".", "k2", ")", "\n", "while", "len", "(", "to_visit", ")", ">", "0", ":", "\n", "            ", "current_param", "=", "to_visit", ".", "pop", "(", "0", ")", "\n", "if", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "KernelOperator", ")", ":", "\n", "                ", "to_visit", ".", "insert", "(", "0", ",", "current_param", ".", "k1", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseModel.set_hyperparameters": [[31, 52], ["params.items", "setattr", "init_params.items", "hasattr", "ValueError", "setattr", "hasattr", "ValueError", "str", "str"], "methods", ["None"], ["to_visit", ".", "insert", "(", "1", ",", "current_param", ".", "k2", ")", "\n", "continue", "\n", "", "elif", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "Kernel", ")", ":", "\n", "                ", "hps", "=", "current_param", ".", "hyperparameters", "\n", "assert", "len", "(", "hps", ")", "==", "1", "\n", "hp", "=", "hps", "[", "0", "]", "\n", "if", "hp", ".", "fixed", ":", "\n", "                    ", "continue", "\n", "", "bounds", "=", "hps", "[", "0", "]", ".", "bounds", "\n", "for", "i", "in", "range", "(", "hps", "[", "0", "]", ".", "n_elements", ")", ":", "\n", "                    ", "priors_for_hp", "=", "[", "]", "\n", "if", "current_param", ".", "prior", "is", "not", "None", ":", "\n", "                        ", "priors_for_hp", ".", "append", "(", "current_param", ".", "prior", ")", "\n", "", "if", "add_bound_priors", ":", "\n", "                        ", "if", "add_soft_bounds", ":", "\n", "                            ", "priors_for_hp", ".", "append", "(", "SoftTopHatPrior", "(", "\n", "lower_bound", "=", "bounds", "[", "i", "]", "[", "0", "]", ",", "upper_bound", "=", "bounds", "[", "i", "]", "[", "1", "]", ",", "rng", "=", "self", ".", "rng", ",", "\n", ")", ")", "\n", "", "else", ":", "\n", "                            ", "priors_for_hp", ".", "append", "(", "TophatPrior", "(", "\n", "lower_bound", "=", "bounds", "[", "i", "]", "[", "0", "]", ",", "upper_bound", "=", "bounds", "[", "i", "]", "[", "1", "]", ",", "rng", "=", "self", ".", "rng", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseClassificationModel.__init__": [[55, 58], ["None"], "methods", ["None"], ["\n", "", "def", "_set_has_conditions", "(", "self", ")", ":", "\n", "        ", "has_conditions", "=", "len", "(", "self", ".", "configspace", ".", "get_conditions", "(", ")", ")", ">", "0", "\n", "to_visit", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseClassificationModel.predict": [[59, 67], ["NotImplementedError"], "methods", ["None"], ["to_visit", ".", "append", "(", "self", ".", "kernel", ")", "\n", "while", "len", "(", "to_visit", ")", ">", "0", ":", "\n", "            ", "current_param", "=", "to_visit", ".", "pop", "(", "0", ")", "\n", "if", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "KernelOperator", ")", ":", "\n", "                ", "to_visit", ".", "insert", "(", "0", ",", "current_param", ".", "k1", ")", "\n", "to_visit", ".", "insert", "(", "1", ",", "current_param", ".", "k2", ")", "\n", "current_param", ".", "has_conditions", "=", "has_conditions", "\n", "", "elif", "isinstance", "(", "current_param", ",", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "Kernel", ")", ":", "\n", "                ", "current_param", ".", "has_conditions", "=", "has_conditions", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseClassificationModel.predict_proba": [[68, 75], ["NotImplementedError"], "methods", ["None"], ["", "else", ":", "\n", "                ", "raise", "ValueError", "(", "current_param", ")", "\n", "\n", "", "", "", "def", "_impute_inactive", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "X", "=", "X", ".", "copy", "(", ")", "\n", "X", "[", "~", "np", ".", "isfinite", "(", "X", ")", "]", "=", "-", "1", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseClassificationModel.get_estimator": [[76, 82], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseRegressionModel.__init__": [[85, 88], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseRegressionModel.predict": [[89, 97], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.BaseRegressionModel.get_estimator": [[98, 104], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.IterativeComponentWithSampleWeight.fit": [[107, 117], ["base_model.IterativeComponentWithSampleWeight.iterative_fit", "base_model.IterativeComponentWithSampleWeight.configuration_fully_fitted", "int", "base_model.IterativeComponentWithSampleWeight.iterative_fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.iterative_fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.configuration_fully_fitted", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.iterative_fit"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.IterativeComponentWithSampleWeight.get_max_iter": [[118, 121], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.IterativeComponentWithSampleWeight.get_current_iter": [[122, 124], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.IterativeComponent.fit": [[136, 144], ["base_model.IterativeComponent.iterative_fit", "base_model.IterativeComponent.configuration_fully_fitted", "int", "base_model.IterativeComponent.iterative_fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.iterative_fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.configuration_fully_fitted", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.iterative_fit"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.IterativeComponent.get_max_iter": [[145, 148], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.base_model.IterativeComponent.get_current_iter": [[149, 151], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.proc_thread.proc_func.kill_proc_tree": [[4, 10], ["psutil.Process", "psutil.Process.children", "child.kill", "psutil.Process.kill"], "function", ["None"], ["def", "kill_proc_tree", "(", "pid", ",", "including_parent", "=", "True", ")", ":", "\n", "    ", "parent", "=", "psutil", ".", "Process", "(", "pid", ")", "\n", "for", "child", "in", "parent", ".", "children", "(", "recursive", "=", "True", ")", ":", "\n", "        ", "child", ".", "kill", "(", ")", "\n", "", "if", "including_parent", ":", "\n", "        ", "parent", ".", "kill", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space.set_stage": [[18, 41], ["print", "print", "print", "ValueError", "len", "warnings.warn"], "function", ["None"], ["def", "set_stage", "(", "udf_stage_list", ",", "stage_candidates_dict", ")", ":", "\n", "    ", "'''\n    :param udf_stage_list: List, a list for stage_name like ['my_stage','selector']\n    :param stage_candidates_dict: Dictionary, <key, value>.\n        Key is stage_name, and value is a list of operators in this stage.\n        Each operator must be a Transformer.\n    :return:\n    '''", "\n", "global", "stage_list", "\n", "stage_list", "=", "udf_stage_list", "\n", "print", "(", "\"Current Stage: %s\"", "%", "', '", ".", "join", "(", "stage_list", ")", ")", "\n", "for", "stage", "in", "udf_stage_list", ":", "\n", "        ", "if", "stage", "in", "builtin_stage", ":", "\n", "            ", "print", "(", "\"Built-in stage '%s' found!\"", "%", "stage", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"User-defined stage '%s' found!\"", "%", "stage", ")", "\n", "if", "stage", "not", "in", "stage_candidates_dict", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected stage name '%s' in stage_candidates_dict.\"", "%", "stage", ")", "\n", "", "if", "len", "(", "stage_candidates_dict", "[", "stage", "]", ")", "==", "0", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Candidate list for stage '%s' is empty! EmptyTransformer will be used instead\uff01\"", "%", "stage", ")", "\n", "stage_candidates_dict", "[", "stage", "]", "=", "[", "EmptyTransformer", "]", "\n", "", "thirdparty_candidates_dict", "[", "stage", "]", "=", "{", "candidate", ".", "__name__", ":", "candidate", "for", "candidate", "in", "\n", "stage_candidates_dict", "[", "stage", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space.get_task_hyperparameter_space": [[43, 123], ["mindware.components.utils.class_loader.get_combined_fe_candidtates", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "dict", "dict", "task_space._build_hierachical_configspace", "TRANS_CANDIDATES[].copy", "TRANS_CANDIDATES[].copy", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "task_space._get_configuration_space", "task_space._get_configuration_space", "TRANS_CANDIDATES[].copy.append", "task_space._get_configuration_space", "ValueError", "task_space._get_configuration_space", "TRANS_CANDIDATES[].copy.extend", "task_space._get_configuration_space", "task_space._get_configuration_space", "_preprocessor_candidates.keys", "thirdparty_candidates_dict[].items"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._build_hierachical_configspace", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "", "", "def", "get_task_hyperparameter_space", "(", "task_type", ",", "include_preprocessors", "=", "None", ",", "\n", "include_text", "=", "False", ",", "include_image", "=", "False", ",", "if_imbal", "=", "False", ",", "\n", "optimizer", "=", "'smac'", ")", ":", "\n", "    ", "\"\"\"\n        Fetch the underlying hyperparameter space for feature engineering.\n        Pipeline Space:\n            1. balancer: weight_balancer,\n                         data_balancer.\n            2. scaler: normalizer, scaler, quantile.\n            3. preprocessor\n    :return: hyper space.\n    \"\"\"", "\n", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "        ", "trans_types", "=", "TRANS_CANDIDATES", "[", "'classification'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "trans_types", "=", "TRANS_CANDIDATES", "[", "'regression'", "]", ".", "copy", "(", ")", "\n", "\n", "", "_preprocessor_candidates", ",", "trans_types", "=", "get_combined_fe_candidtates", "(", "_preprocessor", ",", "_gen_addons", ",", "trans_types", ")", "\n", "_preprocessor_candidates", ",", "trans_types", "=", "get_combined_fe_candidtates", "(", "_preprocessor_candidates", ",", "_sel_addons", ",", "\n", "trans_types", ")", "\n", "_rescaler_candidates", ",", "trans_types", "=", "get_combined_fe_candidtates", "(", "_rescaler", ",", "_res_addons", ",", "trans_types", ")", "\n", "\n", "if", "not", "if_imbal", ":", "\n", "        ", "_balancer_candadates", ",", "trans_types", "=", "get_combined_fe_candidtates", "(", "_bal_balancer", ",", "_bal_addons", ",", "trans_types", ")", "\n", "", "else", ":", "\n", "        ", "_balancer_candadates", ",", "trans_types", "=", "get_combined_fe_candidtates", "(", "_imb_balancer", ",", "_bal_addons", ",", "trans_types", ")", "\n", "\n", "# TODO: Avoid transformations, which would take too long", "\n", "# feature_learning = [\"kitchen_sinks\", \"kernel_pca\", \"nystroem_sampler\"]", "\n", "# if task_type in CLS_TASKS:", "\n", "#     classifier_set = [\"adaboost\", \"decision_tree\", \"extra_trees\",", "\n", "#                       \"gradient_boosting\", \"k_nearest_neighbors\",", "\n", "#                       \"libsvm_svc\", \"random_forest\", \"gaussian_nb\",", "\n", "#                       \"decision_tree\", \"lightgbm\"]", "\n", "#", "\n", "#     if estimator_id in classifier_set:", "\n", "#         for tran_id in [12, 13, 15]:", "\n", "#             if tran_id in trans_types:", "\n", "#                 trans_types.remove(tran_id)", "\n", "\n", "", "preprocessor", "=", "dict", "(", ")", "\n", "if", "include_preprocessors", ":", "\n", "        ", "for", "key", "in", "include_preprocessors", ":", "\n", "            ", "if", "key", "not", "in", "_preprocessor_candidates", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Preprocessor %s not in built-in preprocessors! Only the following preprocessors are supported: %s.\"", "%", "(", "\n", "key", ",", "','", ".", "join", "(", "_preprocessor_candidates", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "preprocessor", "[", "key", "]", "=", "_preprocessor_candidates", "[", "key", "]", "\n", "trans_types", ".", "append", "(", "_preprocessor_candidates", "[", "key", "]", ".", "type", ")", "\n", "", "", "else", ":", "\n", "        ", "preprocessor", "=", "_preprocessor_candidates", "\n", "\n", "", "configs", "=", "dict", "(", ")", "\n", "\n", "if", "include_image", ":", "\n", "        ", "image_preprocessor_dict", "=", "_get_configuration_space", "(", "_image_preprocessor", ",", "optimizer", "=", "optimizer", ")", "\n", "configs", "[", "'image_preprocessor'", "]", "=", "image_preprocessor_dict", "\n", "", "if", "include_text", ":", "\n", "        ", "text_preprocessor_dict", "=", "_get_configuration_space", "(", "_text_preprocessor", ",", "optimizer", "=", "optimizer", ")", "\n", "configs", "[", "'text_preprocessor'", "]", "=", "text_preprocessor_dict", "\n", "\n", "", "for", "stage", "in", "stage_list", ":", "\n", "        ", "if", "stage", "==", "'preprocessor'", ":", "\n", "            ", "stage_dict", "=", "_get_configuration_space", "(", "preprocessor", ",", "trans_types", ",", "optimizer", "=", "optimizer", ")", "\n", "", "elif", "stage", "==", "'rescaler'", ":", "\n", "            ", "stage_dict", "=", "_get_configuration_space", "(", "_rescaler_candidates", ",", "trans_types", ",", "optimizer", "=", "optimizer", ")", "\n", "", "elif", "stage", "==", "'balancer'", ":", "\n", "            ", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "                ", "stage_dict", "=", "_get_configuration_space", "(", "_balancer_candadates", ",", "optimizer", "=", "optimizer", ")", "\n", "", "else", ":", "\n", "                ", "stage_dict", "=", "None", "\n", "", "", "else", ":", "\n", "# Third party stage", "\n", "            ", "trans_types", ".", "extend", "(", "[", "candidate", ".", "type", "for", "_", ",", "candidate", "in", "thirdparty_candidates_dict", "[", "stage", "]", ".", "items", "(", ")", "]", ")", "\n", "stage_dict", "=", "_get_configuration_space", "(", "thirdparty_candidates_dict", "[", "stage", "]", ",", "trans_types", ",", "optimizer", "=", "optimizer", ")", "\n", "", "configs", "[", "stage", "]", "=", "stage_dict", "\n", "\n", "", "cs", "=", "_build_hierachical_configspace", "(", "configs", ",", "optimizer", "=", "optimizer", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._get_configuration_space": [[125, 141], ["dict", "builtin_transformers[].get_hyperparameter_search_space", "ConfigSpace.ConfigurationSpace", "mindware.components.feature_engineering.transformations._image_preprocessor", "mindware.components.feature_engineering.transformations._text_preprocessor"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space"], ["", "def", "_get_configuration_space", "(", "builtin_transformers", ",", "trans_type", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "    ", "config_dict", "=", "dict", "(", ")", "\n", "for", "tran_key", "in", "builtin_transformers", ":", "\n", "        ", "tran", "=", "builtin_transformers", "[", "tran_key", "]", "\n", "tran_id", "=", "tran", ".", "type", "\n", "if", "trans_type", "is", "None", "or", "tran_id", "in", "trans_type", ":", "\n", "            ", "try", ":", "\n", "                ", "sub_configuration_space", "=", "builtin_transformers", "[", "tran_key", "]", ".", "get_hyperparameter_search_space", "(", "\n", "optimizer", "=", "optimizer", ")", "\n", "config_dict", "[", "tran_key", "]", "=", "sub_configuration_space", "\n", "", "except", ":", "\n", "                ", "if", "optimizer", "==", "'smac'", ":", "\n", "                    ", "config_dict", "[", "tran_key", "]", "=", "ConfigurationSpace", "(", ")", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "                    ", "config_dict", "[", "tran_key", "]", "=", "{", "}", "\n", "", "", "", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._add_hierachical_configspace": [[143, 154], ["list", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "cs.add_hyperparameter", "config.keys", "cs.add_configuration_space"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "_add_hierachical_configspace", "(", "cs", ",", "config", ",", "parent_name", ")", ":", "\n", "    ", "config_cand", "=", "list", "(", "config", ".", "keys", "(", ")", ")", "\n", "config_option", "=", "CategoricalHyperparameter", "(", "parent_name", ",", "config_cand", ",", "\n", "default_value", "=", "config_cand", "[", "0", "]", ")", "\n", "cs", ".", "add_hyperparameter", "(", "config_option", ")", "\n", "for", "config_item", "in", "config_cand", ":", "\n", "        ", "sub_configuration_space", "=", "config", "[", "config_item", "]", "\n", "parent_hyperparameter", "=", "{", "'parent'", ":", "config_option", ",", "\n", "'value'", ":", "config_item", "}", "\n", "cs", ".", "add_configuration_space", "(", "config_item", ",", "sub_configuration_space", ",", "\n", "parent_hyperparameter", "=", "parent_hyperparameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._build_hierachical_configspace": [[156, 178], ["ConfigSpace.ConfigurationSpace", "task_space._add_hierachical_configspace", "list", "list.append", "hp.choice", "task_space._build_hierachical_configspace.dict2hi"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space._add_hierachical_configspace"], ["", "", "def", "_build_hierachical_configspace", "(", "configs", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "    ", "if", "optimizer", "==", "'smac'", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "for", "config_key", "in", "configs", ":", "\n", "            ", "if", "configs", "[", "config_key", "]", "is", "not", "None", ":", "\n", "                ", "_add_hierachical_configspace", "(", "cs", ",", "configs", "[", "config_key", "]", ",", "config_key", ")", "\n", "", "", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "        ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "}", "\n", "\n", "def", "dict2hi", "(", "dictionary", ")", ":", "\n", "            ", "hi_list", "=", "list", "(", ")", "\n", "for", "key", "in", "dictionary", ":", "\n", "                ", "hi_list", ".", "append", "(", "(", "key", ",", "dictionary", "[", "key", "]", ")", ")", "\n", "", "return", "hi_list", "\n", "\n", "", "for", "config_key", "in", "configs", ":", "\n", "            ", "if", "configs", "[", "config_key", "]", "is", "not", "None", ":", "\n", "                ", "space", "[", "config_key", "]", "=", "hp", ".", "choice", "(", "config_key", ",", "dict2hi", "(", "configs", "[", "config_key", "]", ")", ")", "\n", "\n", "", "", "return", "space", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config": [[8, 87], ["mindware.components.utils.class_loader.get_combined_fe_candidtates", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "config.copy", "config.copy.get", "config.copy.get", "data_node.copy_", "dict", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "mindware.components.utils.class_loader.get_combined_fe_candidtates", "config.copy.pop", "config.copy.pop", "tran.operate", "parse.parse_config.tran_operate"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_fe_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["def", "parse_config", "(", "data_node", ":", "DataNode", ",", "config", ":", "dict", ",", "record", "=", "False", ",", "skip_balance", "=", "False", ",", "if_imbal", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        Transform the data node based on the pipeline specified by configuration.\n    :param data_node:\n    :param config:\n    :param record:\n    :return: the resulting data node.\n    \"\"\"", "\n", "_preprocessor_candidates", "=", "get_combined_fe_candidtates", "(", "_preprocessor", ",", "_gen_addons", ")", "\n", "_preprocessor_candidates", "=", "get_combined_fe_candidtates", "(", "_preprocessor_candidates", ",", "_sel_addons", ")", "\n", "_rescaler_candidates", "=", "get_combined_fe_candidtates", "(", "_rescaler", ",", "_res_addons", ")", "\n", "\n", "if", "not", "if_imbal", ":", "\n", "        ", "_balancer_candidates", "=", "get_combined_fe_candidtates", "(", "_bal_balancer", ",", "_bal_addons", ")", "\n", "", "else", ":", "\n", "        ", "_balancer_candidates", "=", "get_combined_fe_candidtates", "(", "_imb_balancer", ",", "_bal_addons", ")", "\n", "\n", "# Remove the indicator in config_dict.", "\n", "", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "\n", "image_pre_id", "=", "config_dict", ".", "get", "(", "'image_preprocessor'", ",", "None", ")", "\n", "if", "image_pre_id", ":", "\n", "        ", "config_dict", ".", "pop", "(", "'image_preprocessor'", ")", "\n", "", "text_pre_id", "=", "config_dict", ".", "get", "(", "'text_preprocessor'", ",", "None", ")", "\n", "if", "text_pre_id", ":", "\n", "        ", "config_dict", ".", "pop", "(", "'text_preprocessor'", ")", "\n", "\n", "", "def", "tran_operate", "(", "id", ",", "tran_set", ",", "config", ",", "node", ")", ":", "\n", "        ", "_config", "=", "{", "}", "\n", "for", "key", "in", "config", ":", "\n", "            ", "if", "id", "in", "key", ":", "\n", "                ", "config_name", "=", "key", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "_config", "[", "config_name", "]", "=", "config", "[", "key", "]", "\n", "", "", "tran", "=", "tran_set", "[", "id", "]", "(", "**", "_config", ")", "\n", "output_node", "=", "tran", ".", "operate", "(", "node", ")", "\n", "return", "output_node", ",", "tran", "\n", "\n", "", "_node", "=", "data_node", ".", "copy_", "(", ")", "\n", "tran_dict", "=", "dict", "(", ")", "\n", "\n", "# Image preprocessor", "\n", "if", "image_pre_id", ":", "\n", "        ", "_node", ",", "image_tran", "=", "tran_operate", "(", "image_pre_id", ",", "_image_preprocessor", ",", "config_dict", ",", "_node", ")", "\n", "tran_dict", "[", "'image_preprocessor'", "]", "=", "image_tran", "\n", "\n", "# Text preprocessor", "\n", "", "if", "text_pre_id", ":", "\n", "        ", "_node", ",", "text_tran", "=", "tran_operate", "(", "text_pre_id", ",", "_text_preprocessor", ",", "config_dict", ",", "_node", ")", "\n", "tran_dict", "[", "'text_preprocessor'", "]", "=", "text_tran", "\n", "\n", "", "for", "stage", "in", "stage_list", ":", "\n", "        ", "if", "stage", "==", "'balancer'", ":", "\n", "            ", "if", "skip_balance", ":", "\n", "                ", "op_id", "=", "'empty'", "\n", "", "else", ":", "\n", "                ", "if", "stage", "in", "config_dict", ":", "\n", "                    ", "op_id", "=", "config_dict", "[", "stage", "]", "\n", "config_dict", ".", "pop", "(", "stage", ")", "\n", "", "else", ":", "\n", "                    ", "op_id", "=", "'empty'", "\n", "", "", "", "else", ":", "\n", "            ", "op_id", "=", "config_dict", "[", "stage", "]", "\n", "config_dict", ".", "pop", "(", "stage", ")", "\n", "", "if", "stage", "==", "'preprocessor'", ":", "\n", "            ", "_node", ",", "tran", "=", "tran_operate", "(", "op_id", ",", "_preprocessor_candidates", ",", "config_dict", ",", "_node", ")", "\n", "", "elif", "stage", "==", "'rescaler'", ":", "\n", "            ", "_node", ",", "tran", "=", "tran_operate", "(", "op_id", ",", "_rescaler_candidates", ",", "config_dict", ",", "_node", ")", "\n", "", "elif", "stage", "==", "'balancer'", ":", "\n", "            ", "_node", ",", "tran", "=", "tran_operate", "(", "op_id", ",", "_balancer_candidates", ",", "config_dict", ",", "_node", ")", "\n", "", "else", ":", "\n", "# Third party stage", "\n", "            ", "_node", ",", "tran", "=", "tran_operate", "(", "op_id", ",", "thirdparty_candidates_dict", "[", "stage", "]", ",", "config_dict", ",", "_node", ")", "\n", "\n", "", "tran_dict", "[", "stage", "]", "=", "tran", "\n", "\n", "", "_node", ".", "config", "=", "config", "\n", "if", "record", ":", "\n", "        ", "return", "_node", ",", "tran_dict", "\n", "", "return", "_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node": [[89, 101], ["tran_dict[].operate", "tran_dict[].operate", "tran_dict[].operate"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "construct_node", "(", "data_node", ":", "DataNode", ",", "tran_dict", ",", "mode", "=", "'test'", ")", ":", "\n", "    ", "if", "'image_preprocessor'", "in", "tran_dict", ":", "\n", "        ", "data_node", "=", "tran_dict", "[", "'image_preprocessor'", "]", ".", "operate", "(", "data_node", ")", "\n", "\n", "", "if", "'text_preprocessor'", "in", "tran_dict", ":", "\n", "        ", "data_node", "=", "tran_dict", "[", "'text_preprocessor'", "]", ".", "operate", "(", "data_node", ")", "\n", "\n", "", "for", "stage", "in", "stage_list", ":", "\n", "        ", "if", "stage_list", "==", "'balancer'", "and", "mode", "==", "'test'", ":", "\n", "            ", "continue", "\n", "", "data_node", "=", "tran_dict", "[", "stage", "]", ".", "operate", "(", "data_node", ")", "\n", "", "return", "data_node", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.__init__": [[18, 57], ["mindware.components.metrics.metric.get_metric", "fe_pipeline.FEPipeline._get_logger", "os.path.exists", "os.makedirs", "list", "list"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline._get_logger"], ["def", "__init__", "(", "self", ",", "task_type", "=", "CLASSIFICATION", ",", "\n", "optimizer_type", "=", "'eval_base'", ",", "\n", "metric", "=", "'acc'", ",", "\n", "trans_set", "=", "None", ",", "\n", "time_budget", "=", "None", ",", "\n", "maximum_evaluation_num", "=", "None", ",", "\n", "time_limit_per_trans", "=", "600", ",", "\n", "mem_limit_per_trans", "=", "1024", ",", "\n", "fe_enabled", "=", "True", ",", "evaluator", "=", "None", ",", "debug", "=", "False", ",", "seed", "=", "1", ",", "\n", "tmp_directory", "=", "'logs'", ",", "logging_config", "=", "None", ",", "model_id", "=", "None", ",", "\n", "task_id", "=", "'Default'", ")", ":", "\n", "        ", "self", ".", "fe_enabled", "=", "fe_enabled", "\n", "self", ".", "trans_set", "=", "trans_set", "\n", "self", ".", "maximum_evaluation_num", "=", "maximum_evaluation_num", "\n", "self", ".", "time_budget", "=", "time_budget", "\n", "self", ".", "time_limit_per_trans", "=", "time_limit_per_trans", "\n", "self", ".", "mem_limit_per_trans", "=", "mem_limit_per_trans", "\n", "self", ".", "optimizer_type", "=", "optimizer_type", "\n", "self", ".", "evaluator", "=", "evaluator", "\n", "self", ".", "optimizer", "=", "None", "\n", "\n", "self", ".", "metric", "=", "get_metric", "(", "metric", ")", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "task_id", "=", "task_id", "\n", "self", ".", "model_id", "=", "model_id", "\n", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "tmp_directory", "=", "tmp_directory", "\n", "self", ".", "logging_config", "=", "logging_config", "\n", "self", ".", "_logger", "=", "self", ".", "_get_logger", "(", "task_id", ")", "\n", "\n", "# Set up backend.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "tmp_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "tmp_directory", ")", "\n", "\n", "# For data preprocessing.", "\n", "", "self", ".", "uninformative_columns", ",", "self", ".", "uninformative_idx", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "self", ".", "variance_selector", "=", "None", "\n", "self", ".", "onehot_encoder", "=", "None", "\n", "self", ".", "label_encoder", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.remove_uninf_cols": [[58, 81], ["raw_dataframe.drop.drop.drop", "enumerate", "list", "list", "list", "raw_dataframe[].isnull().values.all", "range", "uninformative_columns.append", "uninformative_idx.append", "len", "len", "set", "int", "uninformative_columns.append", "uninformative_idx.append", "raw_dataframe[].isnull"], "methods", ["None"], ["", "def", "remove_uninf_cols", "(", "self", ",", "input_node", ":", "DataNode", ",", "train_phase", "=", "True", ")", ":", "\n", "        ", "raw_dataframe", "=", "input_node", ".", "data", "[", "0", "]", "\n", "types", "=", "input_node", ".", "feature_types", "\n", "if", "train_phase", ":", "\n", "# Remove the uninformative columns.", "\n", "            ", "uninformative_columns", ",", "uninformative_idx", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "idx", ",", "column", "in", "enumerate", "(", "list", "(", "raw_dataframe", ")", ")", ":", "\n", "                ", "if", "raw_dataframe", "[", "column", "]", ".", "isnull", "(", ")", ".", "values", ".", "all", "(", ")", ":", "\n", "                    ", "uninformative_columns", ".", "append", "(", "column", ")", "\n", "uninformative_idx", ".", "append", "(", "idx", ")", "\n", "continue", "\n", "", "if", "types", "[", "idx", "]", "==", "CATEGORICAL", ":", "\n", "                    ", "num_sample", "=", "input_node", ".", "data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "num_unique", "=", "len", "(", "set", "(", "input_node", ".", "data", "[", "0", "]", "[", "column", "]", ")", ")", "\n", "if", "num_unique", ">=", "int", "(", "0.8", "*", "num_sample", ")", ":", "\n", "                        ", "uninformative_columns", ".", "append", "(", "column", ")", "\n", "uninformative_idx", ".", "append", "(", "idx", ")", "\n", "", "", "", "self", ".", "uninformative_columns", ",", "self", ".", "uninformative_idx", "=", "uninformative_columns", ",", "uninformative_idx", "\n", "\n", "", "input_node", ".", "feature_types", "=", "[", "types", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "types", ")", ")", "if", "idx", "not", "in", "self", ".", "uninformative_idx", "]", "\n", "raw_dataframe", "=", "raw_dataframe", ".", "drop", "(", "self", ".", "uninformative_columns", ",", "axis", "=", "1", ")", "\n", "input_node", ".", "data", "[", "0", "]", "=", "raw_dataframe", "\n", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.impute_cols": [[82, 97], ["raw_dataframe.isnull().values.any", "enumerate", "list", "raw_dataframe[].isnull().values.any", "raw_dataframe.isnull", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation.operate", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation", "mindware.components.feature_engineering.transformations.preprocessor.imputer.ImputationTransformation.operate", "raw_dataframe[].isnull"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "impute_cols", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "        ", "raw_dataframe", "=", "input_node", ".", "data", "[", "0", "]", "\n", "feat_types", "=", "input_node", ".", "feature_types", "\n", "need_imputation", "=", "raw_dataframe", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")", "\n", "if", "need_imputation", ":", "\n", "            ", "for", "idx", ",", "column", "in", "enumerate", "(", "list", "(", "raw_dataframe", ")", ")", ":", "\n", "                ", "if", "raw_dataframe", "[", "column", "]", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")", ":", "\n", "                    ", "feature_type", "=", "feat_types", "[", "idx", "]", "\n", "if", "feature_type", "in", "[", "CATEGORICAL", ",", "ORDINAL", "]", ":", "\n", "                        ", "imputer", "=", "ImputationTransformation", "(", "'most_frequent'", ")", "\n", "input_node", "=", "imputer", ".", "operate", "(", "input_node", ",", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                        ", "imputer", "=", "ImputationTransformation", "(", "'median'", ")", "\n", "input_node", "=", "imputer", ".", "operate", "(", "input_node", ",", "[", "idx", "]", ")", "\n", "", "", "", "", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.one_hot": [[98, 106], ["len", "fe_pipeline.FEPipeline.onehot_encoder.operate", "enumerate", "mindware.components.feature_engineering.transformations.preprocessor.onehot_encoder.OneHotTransformation"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "one_hot", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "# One-hot encoding TO categorical features.", "\n", "        ", "categorical_fields", "=", "[", "idx", "for", "idx", ",", "type", "in", "enumerate", "(", "input_node", ".", "feature_types", ")", "if", "type", "==", "CATEGORICAL", "]", "\n", "if", "len", "(", "categorical_fields", ")", ">", "0", ":", "\n", "            ", "if", "self", ".", "onehot_encoder", "is", "None", ":", "\n", "                ", "self", ".", "onehot_encoder", "=", "OneHotTransformation", "(", ")", "\n", "", "input_node", "=", "self", ".", "onehot_encoder", ".", "operate", "(", "input_node", ",", "categorical_fields", ")", "\n", "", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.remove_cols_with_same_values": [[107, 112], ["fe_pipeline.FEPipeline.variance_selector.operate", "mindware.components.feature_engineering.transformations.selector.variance_selector.VarianceSelector"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate"], ["", "def", "remove_cols_with_same_values", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "        ", "if", "self", ".", "variance_selector", "is", "None", ":", "\n", "            ", "self", ".", "variance_selector", "=", "VarianceSelector", "(", ")", "\n", "", "input_node", "=", "self", ".", "variance_selector", ".", "operate", "(", "input_node", ")", "\n", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.encode_label": [[113, 126], ["isinstance", "fe_pipeline.FEPipeline.label_encoder.transform", "LabelEncoder", "fe_pipeline.FEPipeline.label_encoder.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "encode_label", "(", "self", ",", "input_node", ":", "DataNode", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "from", "sklearn", ".", "preprocessing", "import", "LabelEncoder", "\n", "X", ",", "y", "=", "input_node", ".", "data", "\n", "if", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "X", "=", "X", ".", "values", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "label_encoder", "is", "None", ":", "\n", "                ", "self", ".", "label_encoder", "=", "LabelEncoder", "(", ")", "\n", "self", ".", "label_encoder", ".", "fit", "(", "y", ")", "\n", "", "y", "=", "self", ".", "label_encoder", ".", "transform", "(", "y", ")", "\n", "", "input_node", ".", "data", "=", "(", "X", ",", "y", ")", "\n", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.preprocess": [[127, 142], ["fe_pipeline.FEPipeline.remove_cols_with_same_values", "fe_pipeline.FEPipeline.remove_uninf_cols", "fe_pipeline.FEPipeline.impute_cols", "fe_pipeline.FEPipeline.one_hot", "fe_pipeline.FEPipeline.encode_label", "print"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.remove_cols_with_same_values", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.remove_uninf_cols", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.impute_cols", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.one_hot", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.encode_label"], ["", "def", "preprocess", "(", "self", ",", "input_node", ":", "DataNode", ",", "train_phase", "=", "True", ")", ":", "\n", "# print('=' * 20)", "\n", "# print(input_node.shape)", "\n", "        ", "try", ":", "\n", "            ", "input_node", "=", "self", ".", "remove_uninf_cols", "(", "input_node", ",", "train_phase", ")", "\n", "input_node", "=", "self", ".", "impute_cols", "(", "input_node", ")", "\n", "input_node", "=", "self", ".", "one_hot", "(", "input_node", ")", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "            ", "print", "(", "'data[0] in input_node should be a DataFrame!'", ")", "\n", "", "input_node", "=", "self", ".", "remove_cols_with_same_values", "(", "input_node", ")", "\n", "# print('=' * 20)", "\n", "if", "self", ".", "task_type", "is", "None", "or", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "# Label encoding.", "\n", "            ", "input_node", "=", "self", ".", "encode_label", "(", "input_node", ")", "\n", "", "return", "input_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.fit_transform": [[143, 150], ["fe_pipeline.FEPipeline.preprocess", "fe_pipeline.FEPipeline.fit", "fe_pipeline.FEPipeline.optimizer.get_incumbent"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.preprocess", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent"], ["", "def", "fit_transform", "(", "self", ",", "data_node", ":", "DataNode", ")", ":", "\n", "        ", "if", "not", "self", ".", "fe_enabled", ":", "\n", "            ", "preprocessed_node", "=", "self", ".", "preprocess", "(", "data_node", ",", "train_phase", "=", "True", ")", "\n", "return", "preprocessed_node", "\n", "", "else", ":", "\n", "            ", "self", ".", "fit", "(", "data_node", ")", "\n", "return", "self", ".", "optimizer", ".", "get_incumbent", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.fit": [[151, 169], ["fe_pipeline.FEPipeline.preprocess", "print", "fe_pipeline.FEPipeline.optimizer.optimize", "EvaluationBasedOptimizer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.preprocess", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.optimize"], ["", "", "def", "fit", "(", "self", ",", "data_node", ":", "DataNode", ")", ":", "\n", "        ", "preprocessed_node", "=", "self", ".", "preprocess", "(", "data_node", ",", "train_phase", "=", "True", ")", "\n", "print", "(", "'After pre-processing, the shape is'", ",", "preprocessed_node", ".", "shape", ")", "\n", "\n", "# TODO: dtype is object.", "\n", "if", "self", ".", "fe_enabled", ":", "\n", "            ", "if", "self", ".", "optimizer_type", "==", "'eval_base'", ":", "\n", "                ", "self", ".", "optimizer", "=", "EvaluationBasedOptimizer", "(", "\n", "self", ".", "task_type", ",", "preprocessed_node", ",", "self", ".", "evaluator", ",", "\n", "self", ".", "model_id", ",", "self", ".", "time_limit_per_trans", ",", "\n", "self", ".", "mem_limit_per_trans", ",", "self", ".", "_seed", ",", "trans_set", "=", "self", ".", "trans_set", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'invalid optimizer type!'", ")", "\n", "", "self", ".", "optimizer", ".", "time_budget", "=", "self", ".", "time_budget", "\n", "self", ".", "optimizer", ".", "maximum_evaluation_num", "=", "self", ".", "maximum_evaluation_num", "\n", "self", ".", "optimizer", ".", "optimize", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.transform": [[170, 176], ["fe_pipeline.FEPipeline.preprocess", "fe_pipeline.FEPipeline.optimizer.apply"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.preprocess"], ["", "def", "transform", "(", "self", ",", "test_data", ":", "DataNode", ")", ":", "\n", "        ", "preprocessed_node", "=", "self", ".", "preprocess", "(", "test_data", ",", "train_phase", "=", "False", ")", "\n", "# print('After pre-processing, the shape is', preprocessed_node.shape)", "\n", "if", "not", "self", ".", "fe_enabled", ":", "\n", "            ", "return", "preprocessed_node", "\n", "", "return", "self", ".", "optimizer", ".", "apply", "(", "preprocessed_node", ",", "self", ".", "optimizer", ".", "incumbent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline.iterate": [[178, 180], ["NotImplementedError"], "methods", ["None"], ["", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'ooops!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.fe_pipeline.FEPipeline._get_logger": [[181, 188], ["mindware.utils.logging_utils.setup_logger", "mindware.utils.logging_utils.get_logger", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.setup_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger"], ["", "def", "_get_logger", "(", "self", ",", "name", ")", ":", "\n", "        ", "import", "os", "\n", "logger_name", "=", "'mindware-%s-%d:%s'", "%", "(", "self", ".", "task_id", ",", "self", ".", "_seed", ",", "name", ")", "\n", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tmp_directory", ",", "'%s.log'", "%", "str", "(", "logger_name", ")", ")", ",", "\n", "self", ".", "logging_config", ",", "\n", ")", "\n", "return", "get_logger", "(", "logger_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.__init__": [[6, 18], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", "=", "None", ",", "feature_type", "=", "None", ",", "task_type", "=", "None", ",", "feature_names", "=", "None", ")", ":", "\n", "        ", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "feature_types", "=", "feature_type", "\n", "self", ".", "feature_names", "=", "feature_names", "\n", "self", ".", "_node_id", "=", "-", "1", "\n", "self", ".", "depth", "=", "None", "\n", "self", ".", "score", "=", "None", "\n", "self", ".", "trans_hist", "=", "list", "(", ")", "\n", "self", ".", "enable_balance", "=", "0", "\n", "self", ".", "data_balance", "=", "0", "\n", "self", ".", "config", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.__eq__": [[19, 31], ["isinstance", "transformation_graph.DataNode.data[].astype", "node.data[].astype", "numpy.isclose().all", "numpy.isclose().all", "numpy.isclose", "numpy.isclose"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "node", ")", ":", "\n", "        ", "\"\"\"Overrides the default implementation\"\"\"", "\n", "if", "isinstance", "(", "node", ",", "DataNode", ")", ":", "\n", "            ", "if", "self", ".", "shape", "!=", "node", ".", "shape", ":", "\n", "                ", "return", "False", "\n", "", "X1", "=", "self", ".", "data", "[", "0", "]", ".", "astype", "(", "\"float64\"", ")", "\n", "X2", "=", "node", ".", "data", "[", "0", "]", ".", "astype", "(", "\"float64\"", ")", "\n", "X_flag", "=", "np", ".", "isclose", "(", "X1", ",", "X2", ")", ".", "all", "(", ")", "\n", "y_flag", "=", "np", ".", "isclose", "(", "self", ".", "data", "[", "1", "]", ",", "node", ".", "data", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "if", "X_flag", "and", "y_flag", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.__add__": [[32, 39], ["transformation_graph.DataNode.feature_types.copy", "numpy.vstack", "numpy.vstack", "transformation_graph.DataNode", "transformation_graph.DataNode.copy_", "other.copy_"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "X1", ",", "y1", "=", "self", ".", "copy_", "(", ")", ".", "data", "\n", "X2", ",", "y2", "=", "other", ".", "copy_", "(", ")", ".", "data", "\n", "feat_types", "=", "self", ".", "feature_types", ".", "copy", "(", ")", "\n", "X", "=", "np", ".", "vstack", "(", "(", "X1", ",", "X2", ")", ")", "\n", "y", "=", "np", ".", "vstack", "(", "(", "y1", ",", "y2", ")", ")", "\n", "return", "DataNode", "(", "data", "=", "[", "X", ",", "y", "]", ",", "feature_type", "=", "feat_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_": [[40, 51], ["list", "list.append", "transformation_graph.DataNode", "transformation_graph.DataNode.trans_hist.copy", "transformation_graph.DataNode.feature_types.copy", "transformation_graph.DataNode.data[].copy", "transformation_graph.DataNode.data[].copy", "transformation_graph.DataNode.feature_names.copy"], "methods", ["None"], ["", "def", "copy_", "(", "self", ")", ":", "\n", "        ", "new_data", "=", "list", "(", "[", "self", ".", "data", "[", "0", "]", ".", "copy", "(", ")", "]", ")", "\n", "new_data", ".", "append", "(", "None", "if", "self", ".", "data", "[", "1", "]", "is", "None", "else", "self", ".", "data", "[", "1", "]", ".", "copy", "(", ")", ")", "\n", "new_node", "=", "DataNode", "(", "new_data", ",", "self", ".", "feature_types", ".", "copy", "(", ")", ",", "self", ".", "task_type", ",", "\n", "self", ".", "feature_names", ".", "copy", "(", ")", "if", "self", ".", "feature_names", "is", "not", "None", "else", "None", ")", "\n", "new_node", ".", "trans_hist", "=", "self", ".", "trans_hist", ".", "copy", "(", ")", "\n", "new_node", ".", "depth", "=", "self", ".", "depth", "\n", "new_node", ".", "enable_balance", "=", "self", ".", "enable_balance", "\n", "new_node", ".", "data_balance", "=", "self", ".", "data_balance", "\n", "new_node", ".", "config", "=", "self", ".", "config", "\n", "return", "new_node", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.set_values": [[52, 66], ["node.feature_types.copy", "transformation_graph.DataNode.data.append", "val.copy"], "methods", ["None"], ["", "def", "set_values", "(", "self", ",", "node", ")", ":", "\n", "        ", "\"\"\" Assign node's content to current node.\n\n        Assign the variables \"data, feature_types, and task_type\" of node to the current node.\n        This function does NOT assign the node id.\n\n        :param node: the data node is copied.\n        :return: None.\n        \"\"\"", "\n", "self", ".", "data", "=", "[", "]", "\n", "for", "val", "in", "node", ".", "data", "[", ":", "2", "]", ":", "\n", "            ", "self", ".", "data", ".", "append", "(", "val", ".", "copy", "(", ")", "if", "val", "is", "not", "None", "else", "None", ")", "\n", "", "self", ".", "feature_types", "=", "node", ".", "feature_types", ".", "copy", "(", ")", "\n", "self", ".", "task_type", "=", "node", ".", "task_type", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.node_id": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "node_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_node_id", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.cat_num": [[71, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cat_num", "(", "self", ")", ":", "\n", "        ", "cnt", "=", "0", "\n", "for", "feature_type", "in", "self", ".", "feature_types", ":", "\n", "            ", "cnt", "+=", "1", "if", "feature_type", "==", "CATEGORICAL", "else", "0", "\n", "", "return", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.shape": [[78, 82], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "data", "[", "0", "]", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "feature_types", ")", "\n", "return", "self", ".", "data", "[", "0", "]", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.__str__": [[83, 104], ["list", "list.append", "list.append", "list.append", "list.append", "tabulate", "len", "list.append", "len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "from", "tabulate", "import", "tabulate", "\n", "tabular_data", "=", "list", "(", ")", "\n", "if", "len", "(", "self", ".", "feature_types", ")", ">", "8", ":", "\n", "            ", "types_summary", "=", "','", ".", "join", "(", "self", ".", "feature_types", "[", ":", "4", "]", ")", "\n", "types_summary", "+=", "',...,'", "+", "','", ".", "join", "(", "self", ".", "feature_types", "[", "-", "4", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "types_summary", "=", "','", ".", "join", "(", "self", ".", "feature_types", ")", "\n", "\n", "", "if", "self", ".", "feature_names", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "self", ".", "feature_names", ")", ">", "8", ":", "\n", "                ", "names_summary", "=", "','", ".", "join", "(", "self", ".", "feature_names", "[", ":", "4", "]", ")", "\n", "names_summary", "+=", "',...,'", "+", "','", ".", "join", "(", "self", ".", "feature_names", "[", "-", "4", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "names_summary", "=", "','", ".", "join", "(", "self", ".", "feature_names", ")", "\n", "", "tabular_data", ".", "append", "(", "[", "'feature names'", ",", "names_summary", "]", ")", "\n", "", "tabular_data", ".", "append", "(", "[", "'feature types'", ",", "types_summary", "]", ")", "\n", "tabular_data", ".", "append", "(", "[", "'data shape'", ",", "'%d, %d'", "%", "self", ".", "shape", "]", ")", "\n", "tabular_data", ".", "append", "(", "[", "'#Cat-feature'", ",", "self", ".", "cat_num", "]", ")", "\n", "tabular_data", ".", "append", "(", "[", "'#NonCat-feature'", ",", "self", ".", "shape", "[", "1", "]", "-", "self", ".", "cat_num", "]", ")", "\n", "return", "tabulate", "(", "tabular_data", ",", "tablefmt", "=", "\"github\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationEdge.__init__": [[107, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input", ",", "output", ",", "transformer", ",", "fields", ")", ":", "\n", "        ", "self", ".", "id", "=", "-", "1", "\n", "self", ".", "input_id", "=", "input", "\n", "self", ".", "output_id", "=", "output", "\n", "self", ".", "target_fields", "=", "fields", "\n", "self", ".", "transformer", "=", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.__init__": [[116, 126], ["list", "list", "dict", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Store the data nodes.", "\n", "        ", "self", ".", "nodes", "=", "list", "(", ")", "\n", "# Store the edge information.", "\n", "self", ".", "edges", "=", "list", "(", ")", "\n", "self", ".", "node_size", "=", "0", "\n", "self", ".", "edge_size", "=", "0", "\n", "self", ".", "input_data_dict", "=", "dict", "(", ")", "\n", "self", ".", "input_edge_dict", "=", "dict", "(", ")", "\n", "self", ".", "adjacent_list", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_edge": [[127, 143], ["transformation_graph.TransformationEdge", "transformation_graph.TransformationGraph.edges.append", "transformation_graph.TransformationGraph.input_data_dict[].append", "transformation_graph.TransformationGraph.adjacent_list[].append", "list", "list"], "methods", ["None"], ["", "def", "add_edge", "(", "self", ",", "input", ",", "output", ",", "transformer", ")", ":", "\n", "        ", "fields", "=", "transformer", ".", "target_fields", "\n", "edge", "=", "TransformationEdge", "(", "input", ",", "output", ",", "transformer", ",", "fields", ")", "\n", "edge", ".", "id", "=", "self", ".", "edge_size", "\n", "self", ".", "edges", ".", "append", "(", "edge", ")", "\n", "self", ".", "edge_size", "+=", "1", "\n", "if", "output", "not", "in", "self", ".", "input_data_dict", ":", "\n", "            ", "self", ".", "input_data_dict", "[", "output", "]", "=", "list", "(", ")", "\n", "", "self", ".", "input_data_dict", "[", "output", "]", ".", "append", "(", "input", ")", "\n", "\n", "if", "input", "not", "in", "self", ".", "adjacent_list", ":", "\n", "            ", "self", ".", "adjacent_list", "[", "input", "]", "=", "list", "(", ")", "\n", "", "self", ".", "adjacent_list", "[", "input", "]", ".", "append", "(", "output", ")", "\n", "\n", "if", "output", "not", "in", "self", ".", "input_edge_dict", ":", "\n", "            ", "self", ".", "input_edge_dict", "[", "output", "]", "=", "edge", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_trans_in_graph": [[144, 152], ["type", "transformation_graph.TransformationGraph.add_edge"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_edge"], ["", "", "def", "add_trans_in_graph", "(", "self", ",", "input_datanode", ",", "output_datanode", ",", "transformer", ")", ":", "\n", "        ", "if", "type", "(", "input_datanode", ")", "is", "not", "list", ":", "\n", "            ", "input_ids", "=", "[", "input_datanode", ".", "node_id", "]", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "[", "node", ".", "node_id", "for", "node", "in", "input_datanode", "]", "\n", "\n", "", "for", "input_id", "in", "input_ids", ":", "\n", "            ", "self", ".", "add_edge", "(", "input_id", ",", "output_datanode", ".", "node_id", ",", "transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.add_node": [[153, 167], ["data_node.copy_", "transformation_graph.TransformationGraph.nodes.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["", "", "def", "add_node", "(", "self", ",", "data_node", ":", "DataNode", ")", ":", "\n", "# Avoid adding the same node into the graph multiple times.", "\n", "        ", "if", "data_node", ".", "node_id", "!=", "-", "1", ":", "\n", "            ", "return", "data_node", ".", "node_id", "\n", "\n", "", "node_id", "=", "self", ".", "node_size", "\n", "data_node", ".", "_node_id", "=", "node_id", "\n", "image_node", "=", "data_node", ".", "copy_", "(", ")", "\n", "# Image node does not store the data in the graph.", "\n", "image_node", ".", "data", "=", "None", "\n", "image_node", ".", "_node_id", "=", "node_id", "\n", "self", ".", "nodes", ".", "append", "(", "image_node", ")", "\n", "self", ".", "node_size", "+=", "1", "\n", "return", "node_id", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_node": [[168, 170], ["None"], "methods", ["None"], ["", "def", "get_node", "(", "self", ",", "node_id", ")", ":", "\n", "        ", "return", "self", ".", "nodes", "[", "node_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_edge": [[171, 173], ["None"], "methods", ["None"], ["", "def", "get_edge", "(", "self", ",", "edge_id", ")", ":", "\n", "        ", "return", "self", ".", "edges", "[", "edge_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.topological_sort": [[174, 194], ["range", "range", "stack.insert", "list", "transformation_graph.TransformationGraph.topological_sort.dfs"], "methods", ["None"], ["", "def", "topological_sort", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "node_size", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "adjacent_list", ":", "\n", "                ", "self", ".", "adjacent_list", "[", "i", "]", "=", "list", "(", ")", "\n", "\n", "", "", "is_visited", "=", "[", "False", "]", "*", "self", ".", "node_size", "\n", "result", "=", "[", "]", "\n", "\n", "def", "dfs", "(", "v", ",", "visited", ",", "stack", ")", ":", "\n", "            ", "visited", "[", "v", "]", "=", "True", "\n", "for", "i", "in", "self", ".", "adjacent_list", "[", "v", "]", ":", "\n", "                ", "if", "not", "visited", "[", "i", "]", ":", "\n", "                    ", "dfs", "(", "i", ",", "visited", ",", "stack", ")", "\n", "", "", "stack", ".", "insert", "(", "0", ",", "v", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "node_size", ")", ":", "\n", "            ", "if", "not", "is_visited", "[", "i", "]", ":", "\n", "                ", "dfs", "(", "i", ",", "is_visited", ",", "result", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.get_path_nodes": [[195, 212], ["set", "transformation_graph.TransformationGraph.get_path_nodes.traverse"], "methods", ["None"], ["", "def", "get_path_nodes", "(", "self", ",", "node", ":", "DataNode", ")", ":", "\n", "        ", "result", "=", "set", "(", ")", "\n", "\n", "def", "traverse", "(", "node_id", ")", ":", "\n", "            ", "result", ".", "add", "(", "node_id", ")", "\n", "if", "node_id", "in", "self", ".", "input_data_dict", ":", "\n", "                ", "for", "parent_id", "in", "self", ".", "input_data_dict", "[", "node_id", "]", ":", "\n", "                    ", "traverse", "(", "parent_id", ")", "\n", "\n", "", "", "", "traverse", "(", "node", ".", "node_id", ")", "\n", "orders", "=", "self", ".", "topological_sort", "(", ")", "\n", "\n", "path_ids", "=", "list", "(", ")", "\n", "for", "node_id", "in", "orders", ":", "\n", "            ", "if", "node_id", "in", "result", ":", "\n", "                ", "path_ids", ".", "append", "(", "node_id", ")", "\n", "", "", "return", "path_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.TransformationGraph.sort_nodes_by_score": [[213, 216], ["sorted"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sort_nodes_by_score", "(", "nodes", ":", "DataNode", ")", ":", "\n", "        ", "return", "sorted", "(", "nodes", ",", "key", "=", "lambda", "node", ":", "-", "node", ".", "score", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.empty_transformer.EmptyTransformer.__init__": [[8, 12], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"empty_transformer\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'concatenate'", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.empty_transformer.EmptyTransformer.operate": [[13, 17], ["numpy.zeros"], "methods", ["None"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "_", "=", "input_datanode", ".", "data", "\n", "return", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "0", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.continous_discretizer.KBinsDiscretizer.__init__": [[9, 16], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_bins", "=", "3", ",", "strategy", "=", "'uniform'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"discretizer\"", ")", "\n", "self", ".", "input_type", "=", "NUMERICAL", "\n", "self", ".", "output_type", "=", "DISCRETE", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "n_bins", "=", "n_bins", "\n", "self", ".", "strategy", "=", "strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.continous_discretizer.KBinsDiscretizer.operate": [[17, 32], ["continous_discretizer.KBinsDiscretizer.model.transform", "collect_fields", "continous_discretizer.KBinsDiscretizer", "continous_discretizer.KBinsDiscretizer.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ":", "DataNode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "KBinsDiscretizer", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "input_datanode", ".", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", "=", "KBinsDiscretizer", "(", "\n", "n_bins", "=", "self", ".", "n_bins", ",", "encode", "=", "'ordinal'", ",", "strategy", "=", "self", ".", "strategy", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.continous_discretizer.KBinsDiscretizer.get_hyperparameter_search_space": [[33, 44], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_bins", "=", "UniformIntegerHyperparameter", "(", "'n_bins'", ",", "2", ",", "20", ",", "default_value", "=", "5", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_bins", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_bins'", ":", "hp", ".", "randint", "(", "'p1_n_bins'", ",", "19", ")", "+", "2", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.merger.Merger.__init__": [[7, 9], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"merger\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.merger.Merger.operate": [[10, 26], ["X.copy", "input_datanodes[].feature_types.copy", "DataNode", "type", "np.hstack", "input_datanodes[].feature_types.copy.extend"], "methods", ["None"], ["", "def", "operate", "(", "self", ",", "input_datanodes", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "input_datanodes", ")", "is", "not", "list", ":", "\n", "            ", "return", "input_datanodes", "\n", "\n", "", "X", ",", "y", "=", "input_datanodes", "[", "0", "]", ".", "data", "\n", "self", ".", "target_fields", "=", "target_fields", "\n", "\n", "new_X", "=", "X", ".", "copy", "(", ")", "\n", "new_feature_types", "=", "input_datanodes", "[", "0", "]", ".", "feature_types", ".", "copy", "(", ")", "\n", "\n", "for", "data_node", "in", "input_datanodes", "[", "1", ":", "]", ":", "\n", "            ", "new_X", "=", "np", ".", "hstack", "(", "(", "new_X", ",", "data_node", ".", "data", "[", "0", "]", ")", ")", "\n", "new_feature_types", ".", "extend", "(", "data_node", ".", "feature_types", ")", "\n", "", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanodes", "[", "0", "]", ".", "task_type", ")", "\n", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.discrete_categorizer.DiscreteCategorizer.__init__": [[7, 13], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "max_unique", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"discrete_categorizer\"", ")", "\n", "self", ".", "input_type", "=", "[", "DISCRETE", "]", "\n", "self", ".", "output_type", "=", "CATEGORICAL", "\n", "self", ".", "max_unique", "=", "max_unique", "\n", "self", ".", "target_fields", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.discrete_categorizer.DiscreteCategorizer.operate": [[14, 52], ["discrete_categorizer.DiscreteCategorizer.model.transform().toarray", "X.copy", "np.delete", "np.hstack", "input_datanode.feature_types.copy", "list", "list.extend", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields", "len", "input_datanode.copy_", "OneHotEncoder", "discrete_categorizer.DiscreteCategorizer.model.fit", "np.delete", "len", "input_datanode.copy_", "discrete_categorizer.DiscreteCategorizer.model.transform", "len", "set"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "from", "sklearn", ".", "preprocessing", "import", "OneHotEncoder", "\n", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "input_datanode", ".", "feature_types", ",", "self", ".", "input_type", ")", "\n", "if", "len", "(", "target_fields", ")", "==", "0", ":", "\n", "                ", "return", "input_datanode", ".", "copy_", "(", ")", "\n", "\n", "", "", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "self", ".", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "[", "idx", "for", "idx", "in", "target_fields", "if", "len", "(", "set", "(", "X", "[", ":", ",", "idx", "]", ")", ")", "<=", "self", ".", "max_unique", "]", "\n", "# Fetch the fields to transform.", "\n", "self", ".", "target_fields", "=", "target_fields", "\n", "\n", "", "if", "len", "(", "self", ".", "target_fields", ")", "==", "0", ":", "\n", "            ", "return", "input_datanode", ".", "copy_", "(", ")", "\n", "\n", "", "X_input", "=", "X", "[", ":", ",", "self", ".", "target_fields", "]", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "OneHotEncoder", "(", "handle_unknown", "=", "'ignore'", ")", "# Ignore values out of range", "\n", "self", ".", "model", ".", "fit", "(", "X_input", ")", "\n", "\n", "", "new_X", "=", "self", ".", "model", ".", "transform", "(", "X_input", ")", ".", "toarray", "(", ")", "\n", "X_output", "=", "X", ".", "copy", "(", ")", "\n", "\n", "# Delete the original columns.", "\n", "X_output", "=", "np", ".", "delete", "(", "X_output", ",", "np", ".", "s_", "[", "self", ".", "target_fields", "]", ",", "axis", "=", "1", ")", "\n", "X_output", "=", "np", ".", "hstack", "(", "(", "X_output", ",", "new_X", ")", ")", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", ".", "copy", "(", ")", "\n", "feature_types", "=", "list", "(", "np", ".", "delete", "(", "feature_types", ",", "self", ".", "target_fields", ")", ")", "\n", "feature_types", ".", "extend", "(", "[", "CATEGORICAL", "]", "*", "new_X", ".", "shape", "[", "1", "]", ")", "\n", "output_datanode", "=", "DataNode", "(", "(", "X_output", ",", "y", ")", ",", "feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input_datanode", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input_datanode", ".", "data_balance", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.__init__": [[55, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "params", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "_input_type", "=", "None", "\n", "self", ".", "output_type", "=", "None", "\n", "self", ".", "optional_params", "=", "None", "\n", "self", ".", "target_fields", "=", "None", "\n", "self", ".", "_compound_mode", "=", "'only_new'", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "sample_size", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.compound_mode": [[71, 76], ["ValueError"], "methods", ["None"], ["", "@", "compound_mode", ".", "setter", "\n", "def", "compound_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "[", "'only_new'", ",", "'concatenate'", ",", "'in_place'", ",", "'replace'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid compound mode: %s!'", "%", "mode", ")", "\n", "", "self", ".", "_compound_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.input_type": [[81, 90], ["isinstance", "ValueError"], "methods", ["None"], ["", "@", "input_type", ".", "setter", "\n", "def", "input_type", "(", "self", ",", "input_type", ":", "typing", ".", "List", "[", "str", "]", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "input_type", ",", "list", ")", ":", "\n", "            ", "input_type", "=", "[", "input_type", "]", "\n", "\n", "", "for", "type_", "in", "input_type", ":", "\n", "            ", "if", "type_", "not", "in", "FEATURE_TYPES", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid feature type: %s!'", "%", "type_", ")", "\n", "", "", "self", ".", "_input_type", "=", "input_type", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.__eq__": [[91, 99], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Overrides the default implementation\"\"\"", "\n", "if", "isinstance", "(", "other", ",", "Transformer", ")", ":", "\n", "            ", "if", "self", ".", "name", "==", "other", ".", "name", "and", "self", ".", "type", "==", "other", ".", "type", "and", "self", ".", "input_type", "==", "other", ".", "input_type", "and", "self", ".", "output_type", "==", "other", ".", "output_type", "and", "self", ".", "params", "==", "other", ".", "params", "and", "self", ".", "model", "==", "other", ".", "model", "and", "self", ".", "compound_mode", "==", "other", ".", "compound_mode", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.operate": [[100, 104], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "operate", "(", "self", ",", "data_nodes", ":", "DataNode", "or", "typing", ".", "List", "[", "DataNode", "]", ",", "\n", "target_fields", ":", "None", "or", "typing", ".", "List", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.get_attributes": [[105, 114], ["dict", "dir", "getattr", "attr.startswith", "attr.startswith", "type"], "methods", ["None"], ["", "def", "get_attributes", "(", "self", ")", ":", "\n", "        ", "attributes", "=", "dict", "(", ")", "\n", "for", "attr", "in", "dir", "(", "self", ")", ":", "\n", "            ", "if", "attr", ".", "startswith", "(", "'_abc_'", ")", "or", "attr", ".", "startswith", "(", "'__'", ")", ":", "\n", "                ", "continue", "\n", "", "attr_val", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "if", "type", "(", "attr_val", ")", "in", "[", "None", ",", "str", ",", "float", ",", "int", "]", ":", "\n", "                ", "attributes", "[", "attr", "]", "=", "attr_val", "\n", "", "", "return", "attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.Transformer.get_properties": [[115, 126], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Base tran'", ",", "\n", "'name'", ":", "'Base Transformer'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "INPUT", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.base_transformer.ease_trans": [[128, 188], ["isinstance", "func", "isinstance", "mindware.components.feature_engineering.transformation_graph.DataNode", "input.trans_hist.copy", "mindware.components.feature_engineering.transformation_graph.DataNode.trans_hist.append", "len", "collect_fields", "len", "input.copy_", "len", "ValueError", "np.hstack", "input.feature_types.copy", "input.feature_types.copy.extend", "type", "len", "np.hstack", "input.feature_types.copy", "input.feature_types.copy.extend", "np.delete", "np.array", "list", "X.copy", "new_X.astype.astype", "input.feature_types.copy", "len", "np.delete", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["", "", "def", "ease_trans", "(", "func", ")", ":", "\n", "    ", "def", "dec", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "param_name", "=", "'target_fields'", "\n", "target_fields", "=", "None", "\n", "if", "len", "(", "args", ")", "==", "3", ":", "\n", "            ", "trans", ",", "input", ",", "target_fields", "=", "args", "\n", "if", "type", "(", "target_fields", ")", "is", "list", "and", "len", "(", "target_fields", ")", "==", "0", ":", "\n", "                ", "target_fields", "=", "None", "\n", "", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "            ", "trans", ",", "input", "=", "args", "\n", "if", "param_name", "in", "kwargs", "and", "len", "(", "kwargs", "[", "param_name", "]", ")", ">", "0", ":", "\n", "                ", "target_fields", "=", "kwargs", "[", "param_name", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The number of input is wrong!'", ")", "\n", "\n", "", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "input", ".", "feature_types", ",", "trans", ".", "input_type", ")", "\n", "", "if", "len", "(", "target_fields", ")", "==", "0", ":", "\n", "            ", "return", "input", ".", "copy_", "(", ")", "\n", "\n", "", "X", ",", "y", "=", "input", ".", "data", "\n", "if", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "X", "=", "X", ".", "values", "\n", "\n", "", "args", "=", "(", "trans", ",", "input", ",", "target_fields", ")", "\n", "_X", "=", "func", "(", "*", "args", ")", "\n", "if", "isinstance", "(", "trans", ".", "output_type", ",", "list", ")", ":", "\n", "            ", "trans", ".", "output_type", "=", "trans", ".", "output_type", "[", "0", "]", "\n", "", "_types", "=", "[", "trans", ".", "output_type", "]", "*", "_X", ".", "shape", "[", "1", "]", "\n", "\n", "if", "trans", ".", "compound_mode", "==", "'only_new'", ":", "\n", "            ", "new_X", "=", "_X", "\n", "new_types", "=", "_types", "\n", "", "elif", "trans", ".", "compound_mode", "==", "'concatenate'", ":", "\n", "            ", "new_X", "=", "np", ".", "hstack", "(", "(", "X", ",", "_X", ")", ")", "\n", "new_types", "=", "input", ".", "feature_types", ".", "copy", "(", ")", "\n", "new_types", ".", "extend", "(", "_types", ")", "\n", "", "elif", "trans", ".", "compound_mode", "==", "'replace'", ":", "\n", "            ", "new_X", "=", "np", ".", "hstack", "(", "(", "X", ",", "_X", ")", ")", "\n", "new_types", "=", "input", ".", "feature_types", ".", "copy", "(", ")", "\n", "new_types", ".", "extend", "(", "_types", ")", "\n", "new_X", "=", "np", ".", "delete", "(", "new_X", ",", "target_fields", ",", "axis", "=", "1", ")", "\n", "temp_array", "=", "np", ".", "array", "(", "new_types", ")", "\n", "new_types", "=", "list", "(", "np", ".", "delete", "(", "temp_array", ",", "target_fields", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "_X", ".", "shape", "[", "1", "]", "==", "len", "(", "target_fields", ")", "\n", "new_X", "=", "X", ".", "copy", "(", ")", "\n", "new_X", "=", "new_X", ".", "astype", "(", "float", ")", "\n", "new_X", "[", ":", ",", "target_fields", "]", "=", "_X", "\n", "new_types", "=", "input", ".", "feature_types", ".", "copy", "(", ")", "\n", "\n", "", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_types", ",", "input", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "trans", ".", "type", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input", ".", "data_balance", "\n", "trans", ".", "target_fields", "=", "target_fields", "\n", "return", "output_datanode", "\n", "\n", "", "return", "dec", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer.__init__": [[103, 112], ["int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._dense_fit": [[113, 141], ["numpy.transpose", "numpy.maximum.accumulate", "warnings.warn", "utils.QuantileTransformer.quantiles_.append", "random_state.choice", "col.take.take.take", "numpy.nanpercentile"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._sparse_fit": [[142, 188], ["range", "numpy.transpose", "numpy.maximum.accumulate", "len", "random_state.choice", "utils.QuantileTransformer.quantiles_.append", "utils.QuantileTransformer.quantiles_.append", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.nanpercentile", "len", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer.fit": [[189, 239], ["utils.QuantileTransformer._check_inputs", "max", "sklearn.utils.validation.check_random_state", "numpy.linspace", "scipy.sparse.issparse", "ValueError", "ValueError", "ValueError", "warnings.warn", "min", "utils.QuantileTransformer._sparse_fit", "utils.QuantileTransformer._dense_fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_inputs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._sparse_fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._dense_fit"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._transform_col": [[240, 308], ["numpy.errstate", "numpy.isnan", "numpy.interp", "numpy.errstate", "numpy.errstate", "scipy.stats.norm.cdf", "numpy.interp", "numpy.interp", "scipy.stats.norm.ppf", "scipy.stats.norm.ppf", "scipy.stats.norm.ppf", "numpy.clip", "numpy.spacing", "numpy.spacing"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_inputs": [[309, 329], ["sklearn.utils.check_array", "numpy.errstate", "ValueError", "ValueError", "scipy.sparse.issparse", "numpy.any"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_is_fitted": [[330, 339], ["sklearn.utils.validation.check_is_fitted", "ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._transform": [[340, 369], ["scipy.sparse.issparse", "range", "range", "slice", "utils.QuantileTransformer._transform_col", "utils.QuantileTransformer._transform_col"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._transform_col", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._transform_col"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer.transform": [[370, 388], ["utils.QuantileTransformer._check_inputs", "utils.QuantileTransformer._check_is_fitted", "utils.QuantileTransformer._transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_inputs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_is_fitted", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._transform"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer.inverse_transform": [[389, 407], ["utils.QuantileTransformer._check_inputs", "utils.QuantileTransformer._check_is_fitted", "utils.QuantileTransformer._transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_inputs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._check_is_fitted", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._transform"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.QuantileTransformer._more_tags": [[408, 410], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.__init__": [[509, 532], ["ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._pairwise": [[533, 536], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._get_kernel": [[537, 547], ["callable", "sklearn.metrics.pairwise.pairwise_kernels"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._fit_transform": [[548, 618], ["utils.KernelPCA._centerer.fit_transform", "utils._check_psd_eigenvalues", "sklearn.utils.extmath.svd_flip", "min", "scipy.linalg.eigh", "utils.KernelPCA.lambdas_.argsort", "sklearn.utils.validation.check_random_state", "sklearn.utils.validation.check_random_state.uniform", "scipy.sparse.linalg.eigsh", "numpy.empty_like"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils._check_psd_eigenvalues"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._fit_inverse_transform": [[619, 629], ["hasattr", "utils.KernelPCA._get_kernel", "scipy.linalg.solve", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._get_kernel"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit": [[630, 655], ["sklearn.utils.check_array", "sklearn.preprocessing.KernelCenterer", "utils.KernelPCA._get_kernel", "utils.KernelPCA._fit_transform", "utils.KernelPCA._fit_inverse_transform", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._get_kernel", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._fit_inverse_transform"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform": [[656, 676], ["utils.KernelPCA.fit", "numpy.sqrt", "utils.KernelPCA._fit_inverse_transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._fit_inverse_transform"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.transform": [[677, 699], ["sklearn.utils.validation.check_is_fitted", "utils.KernelPCA._centerer.transform", "numpy.flatnonzero", "numpy.zeros_like", "numpy.dot", "utils.KernelPCA._get_kernel", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._get_kernel"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.inverse_transform": [[700, 720], ["utils.KernelPCA._get_kernel", "numpy.dot", "sklearn.exceptions.NotFittedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA._get_kernel"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils._check_psd_eigenvalues": [[722, 883], ["numpy.array", "numpy.real", "np.real.max", "too_small_lambdas.any", "numpy.isreal().all", "numpy.abs().max", "numpy.abs().max", "ValueError", "np.real.min", "ValueError", "warnings.warn", "ValueError", "warnings.warn", "numpy.isreal", "numpy.abs", "numpy.abs", "numpy.imag", "numpy.real", "warnings.warn"], "function", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.imputer.ImputationTransformation.__init__": [[7, 10], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "param", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"imputer\"", ")", "\n", "self", ".", "params", "=", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.imputer.ImputationTransformation.operate": [[11, 35], ["isinstance", "imputer.ImputationTransformation.model.transform().reshape", "X.copy", "input_datanode.feature_types.copy", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "SimpleImputer", "imputer.ImputationTransformation.model.fit", "imputer.ImputationTransformation.model.transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "impute", "import", "SimpleImputer", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "self", ".", "target_fields", "=", "target_fields", "\n", "\n", "# Fetch the related fields.", "\n", "import", "pandas", "as", "pd", "\n", "if", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "X", "=", "X", ".", "values", "\n", "", "X_input", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "# Different imputation strategies applied for columns.", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "SimpleImputer", "(", "strategy", "=", "self", ".", "params", ",", "copy", "=", "False", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_input", ")", "\n", "", "new_X", "=", "self", ".", "model", ".", "transform", "(", "X_input", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X_output", "=", "X", ".", "copy", "(", ")", "\n", "X_output", "[", ":", ",", "target_fields", "]", "=", "new_X", "\n", "new_feature_types", "=", "input_datanode", ".", "feature_types", ".", "copy", "(", ")", "\n", "output_datanode", "=", "DataNode", "(", "(", "X_output", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2bertvector.Text2BertVectorTransformation.__init__": [[11, 19], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "padding_size", "=", "256", ",", "config_dir", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"text2bertvector\"", ")", "\n", "self", ".", "input_type", "=", "[", "TEXT", "]", "\n", "self", ".", "output_type", "=", "[", "TEXT_EMBEDDING", "]", "\n", "self", ".", "compound_mode", "=", "'replace'", "\n", "\n", "self", ".", "padding_size", "=", "padding_size", "\n", "self", ".", "config_dir", "=", "config_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2bertvector.Text2BertVectorTransformation.padding": [[20, 23], ["len"], "methods", ["None"], ["", "def", "padding", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "=", "sample", "+", "[", "0", "]", "*", "(", "self", ".", "padding_size", "-", "len", "(", "sample", ")", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2bertvector.Text2BertVectorTransformation.operate": [[24, 52], ["BertTokenizer.from_pretrained", "BertModel.from_pretrained", "range", "list", "torch.LongTensor", "BertModel.from_pretrained.forward", "emb_output.detach().numpy.detach().numpy.detach().numpy", "list.append", "emb_output.detach().numpy.detach().numpy.copy", "np.hstack", "text2bertvector.Text2BertVectorTransformation.padding", "emb_output.detach().numpy.detach().numpy.detach", "BertTokenizer.from_pretrained.encode"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNet.forward", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2bertvector.Text2BertVectorTransformation.padding"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "transformers", "import", "BertTokenizer", ",", "BertModel", "\n", "import", "torch", "\n", "\n", "if", "self", ".", "config_dir", "is", "None", ":", "\n", "            ", "self", ".", "config_dir", "=", "'./bert-base'", "\n", "\n", "", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "self", ".", "config_dir", ")", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "self", ".", "config_dir", ")", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "_X", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "X_new", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "tokens", "=", "list", "(", ")", "\n", "for", "str4token", "in", "X_new", "[", ":", ",", "i", "]", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "padding", "(", "tokenizer", ".", "encode", "(", "str4token", ")", ")", ")", "\n", "", "tensor", "=", "torch", ".", "LongTensor", "(", "tokens", ")", "\n", "_", ",", "emb_output", "=", "model", ".", "forward", "(", "tensor", ")", "\n", "emb_output", "=", "emb_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "_X", "is", "None", ":", "\n", "                ", "_X", "=", "emb_output", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "emb_output", ")", ")", "\n", "\n", "", "", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2bertvector.Text2BertVectorTransformation.get_hyperparameter_search_space": [[53, 57], ["ConfigSpace.configuration_space.ConfigurationSpace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'tpe'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2vector.Text2VectorTransformation.__init__": [[13, 21], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "'weighted'", ",", "alpha", "=", "1e-4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"text2vector\"", ")", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "input_type", "=", "[", "TEXT", "]", "\n", "self", ".", "output_type", "=", "[", "TEXT_EMBEDDING", "]", "\n", "self", ".", "compound_mode", "=", "'replace'", "\n", "self", ".", "embedding_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2vector.Text2VectorTransformation.operate": [[22, 36], ["range", "mindware.components.utils.text_util.build_embeddings_index", "mindware.components.utils.text_util.load_text_embeddings", "mindware.components.utils.text_util.load_text_embeddings.copy", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.build_embeddings_index", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.text_util.load_text_embeddings"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "if", "not", "self", ".", "embedding_dict", ":", "\n", "            ", "self", ".", "embedding_dict", "=", "build_embeddings_index", "(", ")", "\n", "", "_X", "=", "None", "\n", "for", "i", "in", "range", "(", "X_new", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "emb_output", "=", "load_text_embeddings", "(", "X_new", "[", ":", ",", "i", "]", ",", "self", ".", "embedding_dict", ",", "method", "=", "self", ".", "method", ",", "alpha", "=", "self", ".", "alpha", ")", "\n", "if", "_X", "is", "None", ":", "\n", "                ", "_X", "=", "emb_output", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "emb_output", ")", ")", "\n", "", "", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.text2vector.Text2VectorTransformation.get_hyperparameter_search_space": [[37, 49], ["ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.conditions.EqualsCondition", "ConfigSpace.configuration_space.ConfigurationSpace.add_conditions"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'tpe'", ")", ":", "\n", "        ", "method", "=", "CategoricalHyperparameter", "(", "\"method\"", ",", "[", "'average'", ",", "'weighted'", "]", ",", "default_value", "=", "'weighted'", ")", "\n", "alpha", "=", "UniformFloatHyperparameter", "(", "\"alpha\"", ",", "1e-5", ",", "1e-3", ",", "log", "=", "True", ",", "default_value", "=", "1e-4", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "method", ",", "alpha", "]", ")", "\n", "\n", "alpha_cond", "=", "EqualsCondition", "(", "alpha", ",", "method", ",", "'weighted'", ")", "\n", "cs", ".", "add_conditions", "(", "[", "alpha_cond", "]", ")", "\n", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.onehot_encoder.OneHotTransformation.__init__": [[7, 10], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"onehot_encoder\"", ")", "\n", "self", ".", "input_type", "=", "CATEGORICAL", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.onehot_encoder.OneHotTransformation.operate": [[11, 43], ["isinstance", "onehot_encoder.OneHotTransformation.model.transform().toarray", "X.copy", "np.delete", "np.hstack", "input_datanode.feature_types.copy", "list", "list.extend", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields", "OneHotEncoder", "onehot_encoder.OneHotTransformation.model.fit", "np.delete", "onehot_encoder.OneHotTransformation.model.transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "operate", "(", "self", ",", "input_datanode", ":", "DataNode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "import", "numpy", "as", "np", "\n", "from", "sklearn", ".", "preprocessing", "import", "OneHotEncoder", "\n", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "input_datanode", ".", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "# Fetch the fields to transform.", "\n", "self", ".", "target_fields", "=", "target_fields", "\n", "\n", "if", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "X", "=", "X", ".", "values", "\n", "", "X_input", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "OneHotEncoder", "(", "handle_unknown", "=", "'ignore'", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_input", ")", "\n", "", "new_X", "=", "self", ".", "model", ".", "transform", "(", "X_input", ")", ".", "toarray", "(", ")", "\n", "X_output", "=", "X", ".", "copy", "(", ")", "\n", "\n", "# Delete the original columns.", "\n", "X_output", "=", "np", ".", "delete", "(", "X_output", ",", "np", ".", "s_", "[", "target_fields", "]", ",", "axis", "=", "1", ")", "\n", "X_output", "=", "np", ".", "hstack", "(", "(", "X_output", ",", "new_X", ")", ")", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", ".", "copy", "(", ")", "\n", "feature_types", "=", "list", "(", "np", ".", "delete", "(", "feature_types", ",", "target_fields", ")", ")", "\n", "feature_types", ".", "extend", "(", "[", "CATEGORICAL", "]", "*", "new_X", ".", "shape", "[", "1", "]", ")", "\n", "output_datanode", "=", "DataNode", "(", "(", "X_output", ",", "y", ")", ",", "feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.image2vector.Image2VectorTransformation.__init__": [[12, 19], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "'resnet'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"image2vector\"", ")", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "input_type", "=", "[", "IMAGE", "]", "\n", "self", ".", "output_type", "=", "[", "IMAGE_EMBEDDING", "]", "\n", "self", ".", "compound_mode", "=", "'replace'", "\n", "self", ".", "pretrained_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.image2vector.Image2VectorTransformation.operate": [[20, 35], ["range", "mindware.components.utils.image_util.Image2vector", "numpy.array", "image2vector.Image2VectorTransformation.pretrained_model.predict", "image2vector.Image2VectorTransformation.copy", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "if", "not", "self", ".", "pretrained_model", ":", "\n", "            ", "self", ".", "pretrained_model", "=", "Image2vector", "(", "model", "=", "self", ".", "method", ")", "\n", "", "_X", "=", "None", "\n", "for", "i", "in", "range", "(", "X_new", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "images", "=", "np", ".", "array", "(", "[", "image", "for", "image", "in", "X_new", "[", ":", ",", "i", "]", "]", ")", "\n", "emb_output", "=", "self", ".", "pretrained_model", ".", "predict", "(", "images", ")", "\n", "if", "_X", "is", "None", ":", "\n", "                ", "_X", "=", "emb_output", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "emb_output", ")", ")", "\n", "", "", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.preprocessor.image2vector.Image2VectorTransformation.get_hyperparameter_search_space": [[36, 44], ["ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "method", "=", "CategoricalHyperparameter", "(", "\"method\"", ",", "[", "'resnet'", ",", "'vgg'", "]", ",", "default_value", "=", "'resnet'", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "method", "]", ")", "\n", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.extra_trees_based_selector_regression.ExtraTreeBasedSelectorRegression.__init__": [[12, 38], ["Transformer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_estimators", "=", "100", ",", "criterion", "=", "'mse'", ",", "min_samples_leaf", "=", "1", ",", "\n", "min_samples_split", "=", "2", ",", "max_features", "=", "1.", ",", "bootstrap", "=", "'False'", ",", "max_leaf_nodes", "=", "'None'", ",", "\n", "max_depth", "=", "'15'", ",", "min_weight_fraction_leaf", "=", "0.", ",", "\n", "oob_score", "=", "False", ",", "n_jobs", "=", "-", "1", ",", "random_state", "=", "1", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"extra_trees_based_selector_regression\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "\n", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "estimator_increment", "=", "10", "\n", "if", "criterion", "not", "in", "(", "\"mse\"", ",", "\"friedman_mse\"", ",", "\"mae\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"'criterion' is not in ('mse', 'friedman_mse', \"", "\n", "\"'mae'): %s\"", "%", "criterion", ")", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "\n", "self", ".", "oob_score", "=", "oob_score", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.extra_trees_based_selector_regression.ExtraTreeBasedSelectorRegression.operate": [[39, 111], ["len", "list", "extra_trees_based_selector_regression.ExtraTreeBasedSelectorRegression.model.transform", "extra_trees_based_selector_regression.ExtraTreeBasedSelectorRegression.model.get_support", "selected_types.extend", "np.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "int", "int", "int", "float", "mindware.components.utils.configspace_utils.check_for_bool", "int", "int", "mindware.components.utils.configspace_utils.check_none", "mindware.components.utils.configspace_utils.check_none", "float", "int", "max", "ExtraTreesRegressor", "ExtraTreesRegressor.fit", "SelectFromModel", "int", "int", "min", "float", "int", "np.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "SelectFromModel", "\n", "from", "sklearn", ".", "ensemble", "import", "ExtraTreesRegressor", "\n", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "max_features", "=", "float", "(", "self", ".", "max_features", ")", "\n", "self", ".", "bootstrap", "=", "check_for_bool", "(", "self", ".", "bootstrap", ")", "\n", "self", ".", "n_jobs", "=", "int", "(", "self", ".", "n_jobs", ")", "\n", "self", ".", "verbose", "=", "int", "(", "self", ".", "verbose", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "\n", "", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "\n", "", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "\n", "num_features", "=", "X", ".", "shape", "[", "1", "]", "\n", "max_features", "=", "int", "(", "\n", "float", "(", "self", ".", "max_features", ")", "*", "(", "np", ".", "log", "(", "num_features", ")", "+", "1", ")", ")", "\n", "# Use at most half of the features", "\n", "max_features", "=", "max", "(", "1", ",", "min", "(", "int", "(", "X", ".", "shape", "[", "1", "]", "/", "2", ")", ",", "max_features", ")", ")", "\n", "\n", "estimator", "=", "ExtraTreesRegressor", "(", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "oob_score", "=", "self", ".", "oob_score", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "estimator", ".", "fit", "(", "X_new", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "self", ".", "model", "=", "SelectFromModel", "(", "estimator", "=", "estimator", ",", "threshold", "=", "'mean'", ",", "prefit", "=", "True", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.extra_trees_based_selector_regression.ExtraTreeBasedSelectorRegression.get_hyperparameter_search_space": [[112, 153], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.uniform", "hp.choice", "hp.randint", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "n_estimators", "=", "Constant", "(", "\"n_estimators\"", ",", "100", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\"criterion\"", ",", "\n", "[", "\"mse\"", ",", "\"friedman_mse\"", "]", ")", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.1", ",", "1.0", ",", "default_value", "=", "1.0", ",", "q", "=", "0.05", ")", "\n", "\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "name", "=", "\"max_depth\"", ",", "value", "=", "\"15\"", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "Constant", "(", "'min_weight_fraction_leaf'", ",", "0.", ")", "\n", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "criterion", ",", "max_features", ",", "max_depth", ",", "\n", "max_leaf_nodes", ",", "min_samples_split", ",", "\n", "min_samples_leaf", ",", "min_weight_fraction_leaf", ",", "\n", "bootstrap", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "100", ",", "\n", "'criterion'", ":", "hp", ".", "choice", "(", "'etsreg_criterion'", ",", "[", "'gini'", ",", "'entropy'", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'etsreg_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'max_depth'", ":", "\"15\"", ",", "\n", "'max_leaf_nodes'", ":", "\"None\"", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'etsreg_samples_leaf'", ",", "20", ")", "+", "1", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'etsreg_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_impurity_decrease'", ":", "0.", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'etsreg_bootstrap'", ",", "[", "'True'", ",", "'False'", "]", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.generic_univariate_selector.GenericUnivariateSelector.__init__": [[10, 26], ["Transformer.__init__", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "score_func", "=", "'chi2'", ",", "alpha", "=", "0.5", ",", "mode", "=", "'fpr'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"generic_univariate_selector\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "\n", "self", ".", "score_func", "=", "score_func", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "score_func", "==", "'chi2'", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "chi2", "\n", "self", ".", "call_func", "=", "chi2", "\n", "", "elif", "score_func", "==", "'f_classif'", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "f_classif", "\n", "self", ".", "call_func", "=", "f_classif", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown score function %s!\"", "%", "str", "(", "score_func", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.generic_univariate_selector.GenericUnivariateSelector.operate": [[27, 68], ["len", "list", "generic_univariate_selector.GenericUnivariateSelector.model.transform", "generic_univariate_selector.GenericUnivariateSelector.model.get_support", "selected_types.extend", "np.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "GenericUnivariateSelect", "generic_univariate_selector.GenericUnivariateSelector.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "feature_selection", "import", "GenericUnivariateSelect", "\n", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "# Because the pipeline guarantees that each feature is positive,", "\n", "# clip all values below zero to zero", "\n", "", "if", "self", ".", "score_func", "==", "'chi2'", ":", "\n", "            ", "X_new", "[", "X_new", "<", "0", "]", "=", "0.0", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "GenericUnivariateSelect", "(", "\n", "score_func", "=", "self", ".", "call_func", ",", "param", "=", "self", ".", "alpha", ",", "mode", "=", "self", ".", "mode", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ",", "y", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input_datanode", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input_datanode", ".", "data_balance", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.generic_univariate_selector.GenericUnivariateSelector.get_hyperparameter_search_space": [[69, 99], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter", "ConfigSpace.hyperparameters.Constant", "hp.uniform", "hp.choice", "hp.choice"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "alpha", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"alpha\"", ",", "lower", "=", "0.01", ",", "upper", "=", "0.5", ",", "default_value", "=", "0.1", ")", "\n", "\n", "score_func", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"score_func\"", ",", "\n", "choices", "=", "[", "\"chi2\"", ",", "\"f_classif\"", "]", ",", "\n", "default_value", "=", "\"chi2\"", ")", "\n", "if", "dataset_properties", "is", "not", "None", ":", "\n", "# Chi2 can handle sparse data, so we respect this", "\n", "                ", "if", "'sparse'", "in", "dataset_properties", "and", "dataset_properties", "[", "'sparse'", "]", ":", "\n", "                    ", "score_func", "=", "Constant", "(", "\n", "name", "=", "\"score_func\"", ",", "value", "=", "\"chi2\"", ")", "\n", "\n", "", "", "mode", "=", "CategoricalHyperparameter", "(", "'mode'", ",", "[", "'fpr'", ",", "'fdr'", ",", "'fwe'", "]", ",", "'fpr'", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameter", "(", "alpha", ")", "\n", "cs", ".", "add_hyperparameter", "(", "score_func", ")", "\n", "cs", ".", "add_hyperparameter", "(", "mode", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'alpha'", ":", "hp", ".", "uniform", "(", "'gus_alpha'", ",", "0.01", ",", "0.5", ")", ",", "\n", "'score_func'", ":", "hp", ".", "choice", "(", "'gus_score_func'", ",", "[", "'chi2'", ",", "'f_classif'", ",", "'mutual_info'", "]", ")", ",", "\n", "'mode'", ":", "hp", ".", "choice", "(", "'gus_mode'", ",", "[", "'fpr'", ",", "'fdr'", ",", "'fwe'", "]", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector.PercentileSelector.__init__": [[9, 15], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "percentile", "=", "50", ",", "score_func", "=", "'chi2'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"percentile_selector\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "score_func", "=", "score_func", "\n", "self", ".", "percentile", "=", "percentile", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector.PercentileSelector.get_score_func": [[16, 29], ["ValueError", "str"], "methods", ["None"], ["", "def", "get_score_func", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "score_func", "==", "'chi2'", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "chi2", "\n", "call_func", "=", "chi2", "\n", "", "elif", "self", ".", "score_func", "==", "'f_classif'", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "f_classif", "\n", "call_func", "=", "f_classif", "\n", "", "elif", "self", ".", "score_func", "==", "'mutual_info'", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "mutual_info_classif", "\n", "call_func", "=", "mutual_info_classif", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown score function %s!\"", "%", "str", "(", "self", ".", "score_func", ")", ")", "\n", "", "return", "call_func", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector.PercentileSelector.operate": [[30, 69], ["len", "list", "percentile_selector.PercentileSelector.model.transform", "percentile_selector.PercentileSelector.model.get_support", "selected_types.extend", "np.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "SelectPercentile", "percentile_selector.PercentileSelector.model.fit", "percentile_selector.PercentileSelector.get_score_func"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector.PercentileSelector.get_score_func"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "# Because the pipeline guarantees that each feature is positive,", "\n", "# clip all values below zero to zero", "\n", "", "if", "self", ".", "score_func", "==", "'chi2'", ":", "\n", "            ", "X_new", "[", "X_new", "<", "0", "]", "=", "0.0", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "SelectPercentile", "\n", "self", ".", "model", "=", "SelectPercentile", "(", "self", ".", "get_score_func", "(", ")", ",", "percentile", "=", "self", ".", "percentile", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ",", "y", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input_datanode", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input_datanode", ".", "data_balance", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector.PercentileSelector.get_hyperparameter_search_space": [[70, 96], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.hyperparameters.Constant", "hp.uniform", "hp.choice"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "percentile", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"percentile\"", ",", "lower", "=", "5", ",", "upper", "=", "99", ",", "default_value", "=", "50", ")", "\n", "\n", "score_func", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"score_func\"", ",", "\n", "choices", "=", "[", "\"chi2\"", ",", "\"f_classif\"", ",", "\"mutual_info\"", "]", ",", "\n", "default_value", "=", "\"chi2\"", "\n", ")", "\n", "if", "dataset_properties", "is", "not", "None", ":", "\n", "# Chi2 can handle sparse data, so we respect this", "\n", "                ", "if", "'sparse'", "in", "dataset_properties", "and", "dataset_properties", "[", "'sparse'", "]", ":", "\n", "                    ", "score_func", "=", "Constant", "(", "\n", "name", "=", "\"score_func\"", ",", "value", "=", "\"chi2\"", ")", "\n", "\n", "", "", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "percentile", ",", "score_func", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'percentile'", ":", "hp", ".", "uniform", "(", "'percentile_percentile'", ",", "5", ",", "99", ")", ",", "\n", "'score_func'", ":", "hp", ".", "choice", "(", "'percentile_score_func'", ",", "[", "'chi2'", ",", "'f_classif'", ",", "'mutual_info'", "]", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector_regression.PercentileSelectorRegression.__init__": [[8, 22], ["Transformer.__init__", "int", "float", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "percentile", "=", "10", ",", "score_func", "=", "'f_regression'", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"percentile_selector_reg\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "\n", "import", "sklearn", ".", "feature_selection", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "percentile", "=", "int", "(", "float", "(", "percentile", ")", ")", "\n", "if", "score_func", "==", "\"f_regression\"", ":", "\n", "            ", "self", ".", "score_func", "=", "sklearn", ".", "feature_selection", ".", "f_regression", "\n", "", "elif", "score_func", "==", "\"mutual_info\"", ":", "\n", "            ", "self", ".", "score_func", "=", "sklearn", ".", "feature_selection", ".", "mutual_info_regression", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Don't know this scoring function: %s\"", "%", "score_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector_regression.PercentileSelectorRegression.operate": [[23, 54], ["len", "list", "percentile_selector_regression.PercentileSelectorRegression.model.transform", "percentile_selector_regression.PercentileSelectorRegression.model.get_support", "selected_types.extend", "np.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "SelectPercentile", "percentile_selector_regression.PercentileSelectorRegression.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "feature_selection", "import", "SelectPercentile", "\n", "self", ".", "model", "=", "SelectPercentile", "(", "self", ".", "score_func", ",", "percentile", "=", "self", ".", "percentile", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ",", "y", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.percentile_selector_regression.PercentileSelectorRegression.get_hyperparameter_search_space": [[55, 73], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "percentile", "=", "UniformFloatHyperparameter", "(", "\n", "\"percentile\"", ",", "lower", "=", "5", ",", "upper", "=", "60", ",", "default_value", "=", "10", ",", "q", "=", "5", ")", "\n", "\n", "# score_func = CategoricalHyperparameter(", "\n", "#     name=\"score_func\", choices=[\"f_regression\", \"mutual_info\"], default_value='f_regression')", "\n", "score_func", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"score_func\"", ",", "choices", "=", "[", "\"f_regression\"", "]", ",", "default_value", "=", "'f_regression'", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "percentile", ",", "score_func", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'percentile'", ":", "hp", ".", "uniform", "(", "'percentilereg_percentile'", ",", "5", ",", "60", ")", ",", "\n", "'score_func'", ":", "'f_regression'", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.liblinear_based_selector.LibLinearBasedSelector.__init__": [[14, 31], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "penalty", "=", "'l1'", ",", "loss", "=", "'squared_hinge'", ",", "dual", "=", "'False'", ",", "tol", "=", "1e-4", ",", "C", "=", "1.0", ",", "multi_class", "=", "'ovr'", ",", "\n", "fit_intercept", "=", "'True'", ",", "intercept_scaling", "=", "1", ",", "class_weight", "=", "None", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"liblinear_based_selector\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "\n", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "dual", "=", "dual", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "multi_class", "=", "multi_class", "\n", "self", ".", "fit_intercept", "=", "fit_intercept", "\n", "self", ".", "intercept_scaling", "=", "intercept_scaling", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "preprocessor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.liblinear_based_selector.LibLinearBasedSelector.operate": [[32, 83], ["len", "list", "liblinear_based_selector.LibLinearBasedSelector.model.transform", "liblinear_based_selector.LibLinearBasedSelector.model.get_support", "selected_types.extend", "numpy.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "float", "float", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_for_bool", "float", "mindware.components.utils.configspace_utils.check_none", "LinearSVC", "LinearSVC.fit", "SelectFromModel"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "feature_selection", "import", "SelectFromModel", "\n", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "svm", "import", "LinearSVC", "\n", "\n", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "self", ".", "tol", "=", "float", "(", "self", ".", "tol", ")", "\n", "self", ".", "dual", "=", "check_for_bool", "(", "self", ".", "dual", ")", "\n", "self", ".", "fit_intercept", "=", "check_for_bool", "(", "self", ".", "fit_intercept", ")", "\n", "self", ".", "intercept_scaling", "=", "float", "(", "self", ".", "intercept_scaling", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "class_weight", ")", ":", "\n", "                ", "self", ".", "class_weight", "=", "None", "\n", "\n", "", "estimator", "=", "LinearSVC", "(", "penalty", "=", "self", ".", "penalty", ",", "loss", "=", "self", ".", "loss", ",", "dual", "=", "self", ".", "dual", ",", "\n", "tol", "=", "self", ".", "tol", ",", "C", "=", "self", ".", "C", ",", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "fit_intercept", "=", "self", ".", "fit_intercept", ",", "intercept_scaling", "=", "self", ".", "intercept_scaling", ",", "\n", "multi_class", "=", "self", ".", "multi_class", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "estimator", ".", "fit", "(", "X_new", ",", "y", ")", "\n", "self", ".", "model", "=", "SelectFromModel", "(", "estimator", ",", "prefit", "=", "True", ",", "threshold", "=", "'mean'", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input_datanode", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input_datanode", ".", "data_balance", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.liblinear_based_selector.LibLinearBasedSelector.get_hyperparameter_search_space": [[84, 122], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.forbidden.ForbiddenAndConjunction", "ConfigSpace.configuration_space.ConfigurationSpace.add_forbidden_clause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "hp.loguniform", "hp.loguniform", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "penalty", "=", "Constant", "(", "\"penalty\"", ",", "\"l1\"", ")", "\n", "loss", "=", "CategoricalHyperparameter", "(", "\n", "\"loss\"", ",", "[", "\"hinge\"", ",", "\"squared_hinge\"", "]", ",", "default_value", "=", "\"squared_hinge\"", ")", "\n", "dual", "=", "Constant", "(", "\"dual\"", ",", "\"False\"", ")", "\n", "# This is set ad-hoc", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-5", ",", "1e-1", ",", "default_value", "=", "1e-4", ",", "log", "=", "True", ")", "\n", "C", "=", "UniformFloatHyperparameter", "(", "\"C\"", ",", "0.03125", ",", "32768", ",", "log", "=", "True", ",", "default_value", "=", "1.0", ")", "\n", "multi_class", "=", "Constant", "(", "\"multi_class\"", ",", "\"ovr\"", ")", "\n", "# These are set ad-hoc", "\n", "fit_intercept", "=", "Constant", "(", "\"fit_intercept\"", ",", "\"True\"", ")", "\n", "intercept_scaling", "=", "Constant", "(", "\"intercept_scaling\"", ",", "1", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "penalty", ",", "loss", ",", "dual", ",", "tol", ",", "C", ",", "multi_class", ",", "\n", "fit_intercept", ",", "intercept_scaling", "]", ")", "\n", "\n", "penalty_and_loss", "=", "ForbiddenAndConjunction", "(", "\n", "ForbiddenEqualsClause", "(", "penalty", ",", "\"l1\"", ")", ",", "\n", "ForbiddenEqualsClause", "(", "loss", ",", "\"hinge\"", ")", "\n", ")", "\n", "cs", ".", "add_forbidden_clause", "(", "penalty_and_loss", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'tol'", ":", "hp", ".", "loguniform", "(", "'lbs_tol'", ",", "np", ".", "log", "(", "1e-5", ")", ",", "np", ".", "log", "(", "1e-1", ")", ")", ",", "\n", "'C'", ":", "hp", ".", "loguniform", "(", "'lbs_C'", ",", "np", ".", "log", "(", "0.03125", ")", ",", "np", ".", "log", "(", "32768", ")", ")", ",", "\n", "'loss'", ":", "'squared_hinge'", ",", "\n", "'multi_class'", ":", "'ovr'", ",", "\n", "'dual'", ":", "'False'", ",", "\n", "'fit_intercept'", ":", "'True'", ",", "\n", "'intercept_scaling'", ":", "1", ",", "\n", "'penalty'", ":", "'L1'", "\n", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.__init__.add_selector": [[17, 19], ["_addons.add_component"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.variance_selector.VarianceSelector.__init__": [[8, 13], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "threshold", "=", "1e-7", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"variance_selector\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.variance_selector.VarianceSelector.operate": [[14, 66], ["len", "list", "enumerate", "selected_types.extend", "variance_selector.VarianceSelector.model.transform", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "X.copy", "range", "list.remove", "len", "VarianceThreshold", "variance_selector.VarianceSelector.model.fit", "len", "np.hstack", "np.hstack", "variance_selector.VarianceSelector.model.get_support", "variance_selector.VarianceSelector.model.get_support"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "feature_selection", "import", "VarianceThreshold", "\n", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "X_new", "=", "X", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "", "is_selected", "=", "[", "True", "]", "*", "len", "(", "target_fields", ")", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "VarianceThreshold", "(", "threshold", "=", "self", ".", "threshold", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "for", "idx", ",", "var", "in", "enumerate", "(", "self", ".", "model", ".", "variances_", ")", ":", "\n", "            ", "is_selected", "[", "idx", "]", "=", "True", "if", "var", ">", "self", ".", "threshold", "else", "False", "\n", "\n", "", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "if", "len", "(", "irrevalent_fields", ")", ">", "0", ":", "\n", "            ", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "if", "input_datanode", ".", "feature_names", "is", "not", "None", ":", "\n", "                ", "feature_names", "=", "np", ".", "hstack", "(", "(", "[", "input_datanode", ".", "feature_names", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", ",", "\n", "[", "input_datanode", ".", "feature_names", "[", "idx", "]", "for", "idx", "in", "self", ".", "model", ".", "get_support", "(", "True", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "feature_names", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "new_X", "=", "_X", "\n", "if", "input_datanode", ".", "feature_names", "is", "not", "None", ":", "\n", "                ", "feature_names", "=", "[", "input_datanode", ".", "feature_names", "[", "idx", "]", "for", "idx", "in", "self", ".", "model", ".", "get_support", "(", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "feature_names", "=", "None", "\n", "", "", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ",", "feature_names", "=", "feature_names", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input_datanode", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input_datanode", ".", "data_balance", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.variance_selector.VarianceSelector.get_hyperparameter_search_space": [[67, 76], ["ConfigSpace.configuration_space.ConfigurationSpace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.extra_trees_based_selector.ExtraTreeBasedSelector.__init__": [[12, 41], ["Transformer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_estimators", "=", "100", ",", "criterion", "=", "'gini'", ",", "min_samples_leaf", "=", "1", ",", "\n", "min_samples_split", "=", "2", ",", "max_features", "=", "0.5", ",", "bootstrap", "=", "'False'", ",", "max_leaf_nodes", "=", "'None'", ",", "\n", "max_depth", "=", "'None'", ",", "min_weight_fraction_leaf", "=", "0.", ",", "min_impurity_decrease", "=", "0.", ",", "\n", "oob_score", "=", "False", ",", "n_jobs", "=", "-", "1", ",", "random_state", "=", "1", ",", "verbose", "=", "0", ",", "\n", "class_weight", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"extra_trees_based_selector\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "\n", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "estimator_increment", "=", "10", "\n", "if", "criterion", "not", "in", "(", "\"gini\"", ",", "\"entropy\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"'criterion' is not in ('gini', 'entropy'): \"", "\n", "\"%s\"", "%", "criterion", ")", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "\n", "self", ".", "oob_score", "=", "oob_score", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.extra_trees_based_selector.ExtraTreeBasedSelector.operate": [[42, 112], ["len", "list", "extra_trees_based_selector.ExtraTreeBasedSelector.model.transform", "extra_trees_based_selector.ExtraTreeBasedSelector.model.get_support", "selected_types.extend", "np.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "mindware.components.utils.configspace_utils.check_none", "mindware.components.utils.configspace_utils.check_none", "mindware.components.utils.configspace_utils.check_for_bool", "int", "float", "int", "int", "int", "int", "ExtraTreesClassifier", "ExtraTreesClassifier.fit", "SelectFromModel", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "feature_selection", "import", "SelectFromModel", "\n", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "ensemble", "import", "ExtraTreesClassifier", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "\n", "", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "\n", "", "self", ".", "bootstrap", "=", "check_for_bool", "(", "self", ".", "bootstrap", ")", "\n", "self", ".", "n_jobs", "=", "int", "(", "self", ".", "n_jobs", ")", "\n", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "self", ".", "max_features", "=", "self", ".", "max_features", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "verbose", "=", "int", "(", "self", ".", "verbose", ")", "\n", "\n", "max_features", "=", "int", "(", "X_new", ".", "shape", "[", "1", "]", "**", "float", "(", "self", ".", "max_features", ")", ")", "\n", "estimator", "=", "ExtraTreesClassifier", "(", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "oob_score", "=", "self", ".", "oob_score", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ")", "\n", "estimator", ".", "fit", "(", "X_new", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "self", ".", "model", "=", "SelectFromModel", "(", "estimator", "=", "estimator", ",", "threshold", "=", "'mean'", ",", "prefit", "=", "True", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "output_datanode", ".", "enable_balance", "=", "input_datanode", ".", "enable_balance", "\n", "output_datanode", ".", "data_balance", "=", "input_datanode", ".", "data_balance", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.extra_trees_based_selector.ExtraTreeBasedSelector.get_hyperparameter_search_space": [[113, 156], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.uniform", "hp.choice", "hp.randint", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "Constant", "(", "\"n_estimators\"", ",", "100", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"gini\"", ",", "\"entropy\"", "]", ",", "default_value", "=", "\"gini\"", ")", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\"max_features\"", ",", "0", ",", "1", ",", "\n", "default_value", "=", "0.5", ",", "q", "=", "0.05", ")", "\n", "\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "name", "=", "\"max_depth\"", ",", "value", "=", "\"None\"", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\n", "'min_weight_fraction_leaf'", ",", "0.", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "\n", "'min_impurity_decrease'", ",", "0.", ")", "\n", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "max_leaf_nodes", ",", "min_samples_split", ",", "\n", "min_samples_leaf", ",", "min_weight_fraction_leaf", ",", "\n", "min_impurity_decrease", ",", "bootstrap", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "100", ",", "\n", "'criterion'", ":", "hp", ".", "choice", "(", "'ets_criterion'", ",", "[", "'gini'", ",", "'entropy'", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'ets_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'max_depth'", ":", "\"None\"", ",", "\n", "'max_leaf_nodes'", ":", "\"None\"", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'ets_samples_leaf'", ",", "20", ")", "+", "1", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'ets_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_weight_fraction_leaf'", ":", "0.", ",", "\n", "'min_impurity_decrease'", ":", "0.", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'ets_bootstrap'", ",", "[", "'True'", ",", "'False'", "]", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.rfe_selector.RecursiveFeatureEliminationSelector.__init__": [[8, 14], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "param", "=", "'lr'", ",", "min_features", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"rfe_selector\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "params", "=", "param", "\n", "self", ".", "min_features", "=", "min_features", "\n", "self", ".", "optional_params", "=", "[", "'lr'", ",", "'rf'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.selector.rfe_selector.RecursiveFeatureEliminationSelector.operate": [[15, 58], ["len", "list", "max", "rfe_selector.RecursiveFeatureEliminationSelector.model.transform", "rfe_selector.RecursiveFeatureEliminationSelector.model.get_support", "selected_types.extend", "np.hstack", "DataNode", "input_datanode.trans_hist.copy", "DataNode.trans_hist.append", "collect_fields.copy", "collect_fields", "range", "list.remove", "RFECV", "rfe_selector.RecursiveFeatureEliminationSelector.model.fit", "LogisticRegression", "ExtraTreesClassifier", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "operate", "(", "self", ",", "input_datanode", ":", "DataNode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "feature_selection", "import", "RFECV", "\n", "\n", "feature_types", "=", "input_datanode", ".", "feature_types", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "n_fields", "=", "len", "(", "feature_types", ")", "\n", "irrevalent_fields", "=", "list", "(", "range", "(", "n_fields", ")", ")", "\n", "for", "field_id", "in", "target_fields", ":", "\n", "            ", "irrevalent_fields", ".", "remove", "(", "field_id", ")", "\n", "\n", "", "self", ".", "min_features", "=", "max", "(", "self", ".", "min_features", ",", "n_fields", "//", "20", ")", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "if", "self", ".", "params", "==", "'lr'", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", "import", "LogisticRegression", "\n", "base_model", "=", "LogisticRegression", "(", "solver", "=", "'lbfgs'", ")", "\n", "", "elif", "self", ".", "params", "==", "'rf'", ":", "\n", "                ", "from", "sklearn", ".", "ensemble", "import", "ExtraTreesClassifier", "\n", "base_model", "=", "ExtraTreesClassifier", "(", "n_estimators", "=", "100", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid base model!'", ")", "\n", "\n", "", "self", ".", "model", "=", "RFECV", "(", "base_model", ",", "cv", "=", "3", ",", "min_features_to_select", "=", "self", ".", "min_features", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ",", "y", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "is_selected", "=", "self", ".", "model", ".", "get_support", "(", ")", "\n", "\n", "irrevalent_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "irrevalent_fields", "]", "\n", "selected_types", "=", "[", "feature_types", "[", "idx", "]", "for", "idx", "in", "target_fields", "if", "is_selected", "[", "idx", "]", "]", "\n", "selected_types", ".", "extend", "(", "irrevalent_types", ")", "\n", "\n", "new_X", "=", "np", ".", "hstack", "(", "(", "_X", ",", "X", "[", ":", ",", "irrevalent_fields", "]", ")", ")", "\n", "new_feature_types", "=", "selected_types", "\n", "output_datanode", "=", "DataNode", "(", "(", "new_X", ",", "y", ")", ",", "new_feature_types", ",", "input_datanode", ".", "task_type", ")", "\n", "output_datanode", ".", "trans_hist", "=", "input_datanode", ".", "trans_hist", ".", "copy", "(", ")", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "self", ".", "target_fields", "=", "target_fields", ".", "copy", "(", ")", "\n", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.minmax.MinmaxScaler.__init__": [[7, 12], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"minmax_scaler\"", ")", "\n", "self", ".", "input_type", "=", "[", "DISCRETE", ",", "NUMERICAL", "]", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.minmax.MinmaxScaler.operate": [[13, 26], ["minmax.MinmaxScaler.model.transform", "MinMaxScaler", "minmax.MinmaxScaler.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_data", ",", "target_fields", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "MinMaxScaler", "\n", "X", ",", "y", "=", "input_data", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", "=", "MinMaxScaler", "(", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.normalizer.NormalizeTransformation.__init__": [[7, 13], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"normalizer\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", "]", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "params", "=", "{", "'norm'", ":", "'l2'", "}", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.normalizer.NormalizeTransformation.operate": [[14, 28], ["normalizer.NormalizeTransformation.model.transform", "Normalizer", "normalizer.NormalizeTransformation.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "Normalizer", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", "=", "Normalizer", "(", "norm", "=", "self", ".", "params", "[", "'norm'", "]", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.robust.RobustScaler.__init__": [[9, 17], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "q_min", "=", "0.25", ",", "q_max", "=", "0.75", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"robust_scaler\"", ")", "\n", "self", ".", "input_type", "=", "[", "DISCRETE", ",", "NUMERICAL", "]", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "q_min", "=", "q_min", "\n", "self", ".", "q_max", "=", "q_max", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.robust.RobustScaler.operate": [[18, 31], ["robust.RobustScaler.model.transform", "robust.RobustScaler", "robust.RobustScaler.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_data", ",", "target_fields", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "RobustScaler", "\n", "X", ",", "y", "=", "input_data", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", "=", "RobustScaler", "(", "quantile_range", "=", "(", "self", ".", "q_min", ",", "self", ".", "q_max", ")", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.robust.RobustScaler.get_hyperparameter_search_space": [[32, 43], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "q_min", "=", "UniformFloatHyperparameter", "(", "\n", "'q_min'", ",", "0.001", ",", "0.3", ",", "default_value", "=", "0.25", "\n", ")", "\n", "q_max", "=", "UniformFloatHyperparameter", "(", "\n", "'q_max'", ",", "0.7", ",", "0.999", ",", "default_value", "=", "0.75", "\n", ")", "\n", "cs", ".", "add_hyperparameters", "(", "(", "q_min", ",", "q_max", ")", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.__init__.add_rescaler": [[17, 19], ["_addons.add_component"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.standard.StandardScaler.__init__": [[7, 12], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"standard_scaler\"", ")", "\n", "self", ".", "input_type", "=", "[", "DISCRETE", ",", "NUMERICAL", "]", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.standard.StandardScaler.operate": [[13, 26], ["standard.StandardScaler.model.transform", "standard.StandardScaler", "standard.StandardScaler.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_data", ",", "target_fields", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "StandardScaler", "\n", "X", ",", "y", "=", "input_data", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", "=", "StandardScaler", "(", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.quantile_transformer.QuantileTransformation.__init__": [[10, 19], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_quantiles", "=", "1000", ",", "output_distribution", "=", "'uniform'", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"quantile_transformer\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", "]", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "output_distribution", "=", "output_distribution", "\n", "self", ".", "n_quantiles", "=", "n_quantiles", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.quantile_transformer.QuantileTransformation.operate": [[20, 37], ["quantile_transformer.QuantileTransformation.model.transform", "QuantileTransformer", "quantile_transformer.QuantileTransformation.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "utils", "import", "QuantileTransformer", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", "=", "QuantileTransformer", "(", "output_distribution", "=", "self", ".", "output_distribution", ",", "\n", "n_quantiles", "=", "self", ".", "n_quantiles", ",", "copy", "=", "False", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.rescaler.quantile_transformer.QuantileTransformation.get_hyperparameter_search_space": [[38, 56], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "# TODO parametrize like the Random Forest as n_quantiles = n_features^param", "\n", "n_quantiles", "=", "UniformIntegerHyperparameter", "(", "\n", "'n_quantiles'", ",", "lower", "=", "10", ",", "upper", "=", "2000", ",", "default_value", "=", "1000", "\n", ")", "\n", "output_distribution", "=", "CategoricalHyperparameter", "(", "\n", "'output_distribution'", ",", "[", "'uniform'", ",", "'normal'", "]", ",", "default_value", "=", "\"uniform\"", "\n", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_quantiles", ",", "output_distribution", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_quantiles'", ":", "hp", ".", "randint", "(", "'quantile_n_quantiles'", ",", "1990", ")", "+", "10", ",", "\n", "'output_distribution'", ":", "hp", ".", "choice", "(", "'quantile_output_distribution'", ",", "[", "'uniform'", ",", "'normal'", "]", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.smote_balancer.DataBalancer.__init__": [[8, 10], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"smote_balancer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.smote_balancer.DataBalancer.operate": [[11, 18], ["input_datanode.copy_", "input_datanode.copy_.trans_hist.append", "mindware.utils.functions.is_imbalanced_dataset"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.functions.is_imbalanced_dataset"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "output_datanode", "=", "input_datanode", ".", "copy_", "(", ")", "\n", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "if", "is_imbalanced_dataset", "(", "input_datanode", ")", ":", "\n", "            ", "output_datanode", ".", "data_balance", "=", "1", "\n", "", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.weight_balancer.WeightBalancer.__init__": [[7, 10], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"weight_balancer\"", ")", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.weight_balancer.WeightBalancer.operate": [[11, 17], ["input_datanode.copy_", "input_datanode.copy_.trans_hist.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["", "def", "operate", "(", "self", ",", "input_datanode", ":", "DataNode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "output_datanode", "=", "input_datanode", ".", "copy_", "(", ")", "\n", "if", "output_datanode", ".", "data_balance", "!=", "1", ":", "\n", "            ", "output_datanode", ".", "enable_balance", "=", "1", "\n", "", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.__init__.add_balancer": [[30, 32], ["_addons.add_component"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.data_balancer.DataBalancer.__init__": [[7, 9], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"data_balancer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.balancer.data_balancer.DataBalancer.operate": [[10, 16], ["input_datanode.copy_", "input_datanode.copy_.trans_hist.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "output_datanode", "=", "input_datanode", ".", "copy_", "(", ")", "\n", "output_datanode", ".", "data_balance", "=", "1", "\n", "output_datanode", ".", "trans_hist", ".", "append", "(", "self", ".", "type", ")", "\n", "\n", "return", "output_datanode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.pca_decomposer.PcaDecomposer.__init__": [[11, 20], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "keep_variance", "=", "0.9999", ",", "whiten", "=", "'False'", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"pca\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "keep_variance", "=", "keep_variance", "\n", "self", ".", "whiten", "=", "whiten", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.pca_decomposer.PcaDecomposer.operate": [[21, 40], ["pca_decomposer.PcaDecomposer.model.transform", "float", "mindware.components.utils.configspace_utils.check_for_bool", "sklearn.decomposition.PCA", "pca_decomposer.PcaDecomposer.model.fit", "np.isfinite().all", "ValueError", "np.isfinite"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "import", "sklearn", ".", "decomposition", "\n", "n_components", "=", "float", "(", "self", ".", "keep_variance", ")", "\n", "self", ".", "whiten", "=", "check_for_bool", "(", "self", ".", "whiten", ")", "\n", "self", ".", "model", "=", "sklearn", ".", "decomposition", ".", "PCA", "(", "n_components", "=", "n_components", ",", "\n", "whiten", "=", "self", ".", "whiten", ",", "\n", "copy", "=", "True", ")", "\n", "self", ".", "model", ".", "fit", "(", "X", ")", "\n", "\n", "if", "not", "np", ".", "isfinite", "(", "self", ".", "model", ".", "components_", ")", ".", "all", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"PCA found non-finite components.\"", ")", "\n", "\n", "", "", "X_new", "=", "self", ".", "model", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.pca_decomposer.PcaDecomposer.get_hyperparameter_search_space": [[41, 50], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "keep_variance", "=", "UniformFloatHyperparameter", "(", "\n", "\"keep_variance\"", ",", "0.5", ",", "0.9999", ",", "default_value", "=", "0.9999", ")", "\n", "whiten", "=", "CategoricalHyperparameter", "(", "\n", "\"whiten\"", ",", "[", "\"False\"", ",", "\"True\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "keep_variance", ",", "whiten", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.fast_ica_decomposer.FastIcaDecomposer.__init__": [[13, 28], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "algorithm", "=", "'parallel'", ",", "whiten", "=", "'False'", ",", "fun", "=", "'logcosh'", ",", "n_components", "=", "100", ",", "\n", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"fast_ica\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "algorithm", "=", "algorithm", "\n", "self", ".", "whiten", "=", "whiten", "\n", "self", ".", "fun", "=", "fun", "\n", "self", ".", "n_components", "=", "n_components", "\n", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "skip_flag", "=", "False", "\n", "self", ".", "pre_trained", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.fast_ica_decomposer.FastIcaDecomposer.operate": [[29, 70], ["fast_ica_decomposer.FastIcaDecomposer.model.transform", "X.copy", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_none", "FastICA", "int", "min", "warnings.catch_warnings", "warnings.filterwarnings", "fast_ica_decomposer.FastIcaDecomposer.model.fit", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "# Skip heavy computation in fast ica.", "\n", "if", "X", ".", "shape", "[", "0", "]", ">", "10000", "or", "X", ".", "shape", "[", "1", "]", ">", "200", ":", "\n", "            ", "if", "not", "self", ".", "pre_trained", ":", "\n", "                ", "pass", "\n", "# self.skip_flag = True", "\n", "", "", "self", ".", "pre_trained", "=", "True", "\n", "if", "self", ".", "skip_flag", ":", "\n", "            ", "return", "X", ".", "copy", "(", ")", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "decomposition", "import", "FastICA", "\n", "\n", "self", ".", "whiten", "=", "check_for_bool", "(", "self", ".", "whiten", ")", "\n", "if", "check_none", "(", "self", ".", "n_components", ")", ":", "\n", "                ", "self", ".", "n_components", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "n_components", "=", "int", "(", "self", ".", "n_components", ")", "\n", "\n", "", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "                ", "self", ".", "n_components", "=", "min", "(", "self", ".", "n_components", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "model", "=", "FastICA", "(", "\n", "n_components", "=", "self", ".", "n_components", ",", "algorithm", "=", "self", ".", "algorithm", ",", "\n", "fun", "=", "self", ".", "fun", ",", "whiten", "=", "self", ".", "whiten", ",", "random_state", "=", "self", ".", "random_state", "\n", ")", "\n", "# Make the RuntimeWarning an Exception!", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"error\"", ",", "message", "=", "'array must not contain infs or NaNs'", ")", "\n", "try", ":", "\n", "                    ", "self", ".", "model", ".", "fit", "(", "X", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                    ", "if", "'array must not contain infs or NaNs'", "in", "e", ".", "args", "[", "0", "]", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Bug in scikit-learn: https://github.com/scikit-learn/scikit-learn/pull/2738\"", ")", "\n", "", "raise", "e", "\n", "\n", "", "", "", "X_new", "=", "self", ".", "model", ".", "transform", "(", "X", ")", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.fast_ica_decomposer.FastIcaDecomposer.get_hyperparameter_search_space": [[71, 93], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.configuration_space.ConfigurationSpace.add_condition", "ConfigSpace.conditions.EqualsCondition", "hp.choice", "hp.choice", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'samc'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_components", "=", "UniformIntegerHyperparameter", "(", "\n", "\"n_components\"", ",", "10", ",", "2000", ",", "default_value", "=", "100", ")", "\n", "algorithm", "=", "CategoricalHyperparameter", "(", "'algorithm'", ",", "\n", "[", "'parallel'", ",", "'deflation'", "]", ",", "'parallel'", ")", "\n", "whiten", "=", "CategoricalHyperparameter", "(", "'whiten'", ",", "\n", "[", "'False'", ",", "'True'", "]", ",", "'False'", ")", "\n", "fun", "=", "CategoricalHyperparameter", "(", "\n", "'fun'", ",", "[", "'logcosh'", ",", "'exp'", ",", "'cube'", "]", ",", "'logcosh'", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_components", ",", "algorithm", ",", "whiten", ",", "fun", "]", ")", "\n", "cs", ".", "add_condition", "(", "EqualsCondition", "(", "n_components", ",", "whiten", ",", "\"True\"", ")", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_components'", ":", "hp", ".", "randint", "(", "'ica_n_components'", ",", "1990", ")", "+", "10", ",", "\n", "'algorithm'", ":", "hp", ".", "choice", "(", "'ica_algorithm'", ",", "[", "'parallel'", ",", "'deflation'", "]", ")", ",", "\n", "'whiten'", ":", "'False'", ",", "\n", "'fun'", ":", "hp", ".", "choice", "(", "'ica_fun'", ",", "[", "'logcosh'", ",", "'exo'", ",", "'cube'", "]", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.svd_decomposer.SvdDecomposer.__init__": [[9, 17], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "target_dim", "=", "128", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"svd\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "target_dim", "=", "target_dim", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.svd_decomposer.SvdDecomposer.operate": [[18, 38], ["svd_decomposer.SvdDecomposer.model.transform", "int", "min", "TruncatedSVD", "svd_decomposer.SvdDecomposer.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "from", "sklearn", ".", "decomposition", "import", "TruncatedSVD", "\n", "\n", "self", ".", "target_dim", "=", "int", "(", "self", ".", "target_dim", ")", "\n", "target_dim", "=", "min", "(", "self", ".", "target_dim", ",", "X", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "self", ".", "model", "=", "TruncatedSVD", "(", "\n", "target_dim", ",", "algorithm", "=", "'randomized'", ")", "\n", "# TODO: remove when migrating to sklearn 0.16", "\n", "# Circumvents a bug in sklearn", "\n", "# https://github.com/scikit-learn/scikit-learn/commit/f08b8c8e52663167819f242f605db39f3b5a6d0c", "\n", "# X = X.astype(np.float64)", "\n", "self", ".", "model", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n", "", "X_new", "=", "self", ".", "model", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.svd_decomposer.SvdDecomposer.get_hyperparameter_search_space": [[39, 46], ["ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "target_dim", "=", "UniformIntegerHyperparameter", "(", "\n", "\"target_dim\"", ",", "10", ",", "256", ",", "default_value", "=", "128", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameter", "(", "target_dim", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.polynomial_generator_regression.PolynomialTransformation.__init__": [[12, 29], ["Transformer.__init__", "list", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_for_bool"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool"], ["def", "__init__", "(", "self", ",", "degree", "=", "2", ",", "interaction_only", "=", "'True'", ",", "include_bias", "=", "'False'", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"polynomial_regression\"", ")", "\n", "self", ".", "input_type", "=", "[", "DISCRETE", ",", "NUMERICAL", "]", "\n", "self", ".", "compound_mode", "=", "'concatenate'", "\n", "self", ".", "best_idxs", "=", "list", "(", ")", "\n", "if", "degree", "==", "2", ":", "\n", "            ", "self", ".", "bestn", "=", "25", "\n", "", "elif", "degree", "==", "3", ":", "\n", "            ", "self", ".", "bestn", "=", "10", "\n", "", "elif", "degree", "==", "4", ":", "\n", "            ", "self", ".", "bestn", "=", "6", "\n", "\n", "", "self", ".", "output_type", "=", "NUMERICAL", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "interaction_only", "=", "check_for_bool", "(", "interaction_only", ")", "\n", "self", ".", "include_bias", "=", "check_for_bool", "(", "include_bias", ")", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.polynomial_generator_regression.PolynomialTransformation.operate": [[30, 59], ["polynomial_generator_regression.PolynomialTransformation.model.transform", "LGBMRegressor", "LGBMRegressor.fit", "numpy.argsort", "int", "PolynomialFeatures", "polynomial_generator_regression.PolynomialTransformation.model.fit", "len", "len", "polynomial_generator_regression.PolynomialTransformation.best_idxs.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "PolynomialFeatures", "\n", "from", "lightgbm", "import", "LGBMRegressor", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "if", "not", "self", ".", "best_idxs", ":", "\n", "            ", "lgb", "=", "LGBMRegressor", "(", "random_state", "=", "1", ")", "\n", "lgb", ".", "fit", "(", "X", ",", "y", ")", "\n", "_importance", "=", "lgb", ".", "feature_importances_", "\n", "idx_importance", "=", "np", ".", "argsort", "(", "-", "_importance", ")", "\n", "cur_idx", "=", "0", "\n", "while", "len", "(", "self", ".", "best_idxs", ")", "<", "self", ".", "bestn", "and", "cur_idx", "<", "len", "(", "_importance", ")", ":", "\n", "                ", "if", "idx_importance", "[", "cur_idx", "]", "in", "target_fields", ":", "\n", "                    ", "self", ".", "best_idxs", ".", "append", "(", "idx_importance", "[", "cur_idx", "]", ")", "\n", "", "cur_idx", "+=", "1", "\n", "\n", "", "", "X_new", "=", "X", "[", ":", ",", "self", ".", "best_idxs", "]", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "degree", "=", "int", "(", "self", ".", "degree", ")", "\n", "\n", "self", ".", "model", "=", "PolynomialFeatures", "(", "\n", "degree", "=", "self", ".", "degree", ",", "interaction_only", "=", "self", ".", "interaction_only", ",", "\n", "include_bias", "=", "self", ".", "include_bias", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "_X", "=", "_X", "[", ":", ",", "X_new", ".", "shape", "[", "1", "]", ":", "]", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.polynomial_generator_regression.PolynomialTransformation.get_hyperparameter_search_space": [[60, 70], ["ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "degree", "=", "UniformIntegerHyperparameter", "(", "\"degree\"", ",", "lower", "=", "2", ",", "upper", "=", "3", ",", "default_value", "=", "2", ")", "\n", "interaction_only", "=", "CategoricalHyperparameter", "(", "\"interaction_only\"", ",", "\n", "[", "\"False\"", ",", "\"True\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "include_bias", "=", "UnParametrizedHyperparameter", "(", "\"include_bias\"", ",", "\"False\"", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "degree", ",", "interaction_only", ",", "include_bias", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.lda_decomposer.LdaDecomposer.__init__": [[13, 20], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "shrinkage", "=", "\"None\"", ",", "n_components", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"lda_decomposer\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "shrinkage", "=", "shrinkage", "\n", "self", ".", "n_components", "=", "n_components", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.lda_decomposer.LdaDecomposer.operate": [[21, 39], ["lda_decomposer.LdaDecomposer.model.transform", "mindware.components.utils.configspace_utils.check_none", "LinearDiscriminantAnalysis", "lda_decomposer.LdaDecomposer.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "discriminant_analysis", "import", "LinearDiscriminantAnalysis", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "if", "check_none", "(", "self", ".", "shrinkage", ")", ":", "\n", "                ", "self", ".", "shrinkage", "=", "None", "\n", "\n", "", "self", ".", "model", "=", "LinearDiscriminantAnalysis", "(", "\n", "n_components", "=", "self", ".", "n_components", ",", "\n", "shrinkage", "=", "self", ".", "shrinkage", "\n", ")", "\n", "self", ".", "model", ".", "fit", "(", "X", ",", "y", ")", "\n", "", "X_new", "=", "self", ".", "model", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.lda_decomposer.LdaDecomposer.get_hyperparameter_search_space": [[40, 49], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "shrinkage", "=", "CategoricalHyperparameter", "(", "\n", "\"shrinkage\"", ",", "[", "\"None\"", ",", "\"auto\"", "]", ",", "default_value", "=", "\"None\"", ")", "\n", "# n_components = UniformIntegerHyperparameter('n_components', 1, 250, default_value=10)", "\n", "# cs.add_hyperparameters([shrinkage, n_components])", "\n", "cs", ".", "add_hyperparameter", "(", "shrinkage", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.cross_feature.CrossFeatureTransformation.__init__": [[9, 18], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"cross_features\"", ")", "\n", "self", ".", "input_type", "=", "[", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'concatenate'", "\n", "self", ".", "output_type", "=", "CATEGORICAL", "\n", "self", ".", "features_ids", "=", "None", "\n", "self", ".", "_model", "=", "None", "\n", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.cross_feature.CrossFeatureTransformation.operate": [[19, 43], ["cross_feature.CrossFeatureTransformation.model.transform", "cross_feature.CrossFeatureTransformation._model.transform", "np.arange", "np.random.seed", "np.random.shuffle", "PolynomialFeatures", "cross_feature.CrossFeatureTransformation.model.fit", "VarianceThreshold", "cross_feature.CrossFeatureTransformation._model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", ")", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "from", "sklearn", ".", "preprocessing", "import", "PolynomialFeatures", "\n", "from", "sklearn", ".", "feature_selection", "import", "VarianceThreshold", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "idxs", "=", "np", ".", "arange", "(", "X_new", ".", "shape", "[", "1", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "random_state", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idxs", ")", "\n", "self", ".", "features_ids", "=", "idxs", "[", ":", "200", "]", "\n", "\n", "self", ".", "model", "=", "PolynomialFeatures", "(", "degree", "=", "2", ",", "interaction_only", "=", "True", ",", "include_bias", "=", "False", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", "[", ":", ",", "self", ".", "features_ids", "]", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", "[", ":", ",", "self", ".", "features_ids", "]", ")", "\n", "if", "not", "self", ".", "_model", ":", "\n", "            ", "self", ".", "_model", "=", "VarianceThreshold", "(", ")", "\n", "self", ".", "_model", ".", "fit", "(", "_X", ")", "\n", "", "_X", "=", "self", ".", "_model", ".", "transform", "(", "_X", ")", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.cross_feature.CrossFeatureTransformation.get_hyperparameter_search_space": [[44, 50], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "random_state", "=", "UniformIntegerHyperparameter", "(", "\"random_state\"", ",", "1", ",", "100000", ",", "default_value", "=", "1", ")", "\n", "cs", ".", "add_hyperparameter", "(", "random_state", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.arithmetic_transformer.ArithmeticTransformation.__init__": [[11, 17], ["mindware.components.feature_engineering.transformations.base_transformer.Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "func", "=", "'sqrt'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"arithmetic_transformer\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", "]", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "self", ".", "compound_mode", "=", "'in_place'", "\n", "self", ".", "func", "=", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.arithmetic_transformer.ArithmeticTransformation.operate": [[18, 30], ["np.array", "arithmetic_transformer.ArithmeticTransformation.model.transform", "np.array.tolist", "arithmetic_transformer.ArithmeticTransformation.get_model", "arithmetic_transformer.ArithmeticTransformation.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.binary_transformer.BinaryTransformation.get_model", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "X_new", "=", "np", ".", "array", "(", "X_new", ".", "tolist", "(", ")", ")", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "get_model", "(", "self", ".", "func", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.arithmetic_transformer.ArithmeticTransformation.get_model": [[31, 48], ["Log", "Sqrt", "Square", "Freq", "Round", "Sigmoid", "Tanh", "ValueError", "str"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "param", ")", ":", "\n", "        ", "if", "param", "==", "'log'", ":", "\n", "            ", "self", ".", "model", "=", "Log", "(", ")", "\n", "", "elif", "param", "==", "'sqrt'", ":", "\n", "            ", "self", ".", "model", "=", "Sqrt", "(", ")", "\n", "", "elif", "param", "==", "'square'", ":", "\n", "            ", "self", ".", "model", "=", "Square", "(", ")", "\n", "", "elif", "param", "==", "'freq'", ":", "\n", "            ", "self", ".", "model", "=", "Freq", "(", ")", "\n", "", "elif", "param", "==", "'round'", ":", "\n", "            ", "self", ".", "model", "=", "Round", "(", ")", "\n", "", "elif", "param", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "model", "=", "Sigmoid", "(", ")", "\n", "", "elif", "param", "==", "'tanh'", ":", "\n", "            ", "self", ".", "model", "=", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown param name %s!\"", "%", "str", "(", "param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.arithmetic_transformer.ArithmeticTransformation.get_hyperparameter_search_space": [[49, 61], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter", "hp.choice"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "optional_funcs", "=", "[", "'log'", ",", "'sqrt'", ",", "'square'", ",", "'freq'", ",", "'round'", ",", "'sigmoid'", ",", "'tanh'", "]", "\n", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "scaler", "=", "CategoricalHyperparameter", "(", "'func'", ",", "optional_funcs", ",", "default_value", "=", "'sqrt'", ")", "\n", "cs", ".", "add_hyperparameter", "(", "scaler", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'func'", ":", "hp", ".", "choice", "(", "'arithmetic_func'", ",", "optional_funcs", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.random_trees_embedding.RandomTreesEmbeddingTransformation.__init__": [[11, 29], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_estimators", "=", "10", ",", "max_depth", "=", "5", ",", "min_samples_split", "=", "2", ",", "\n", "min_samples_leaf", "=", "1", ",", "min_weight_fraction_leaf", "=", "1.0", ",", "max_leaf_nodes", "=", "'None'", ",", "\n", "sparse_output", "=", "True", ",", "bootstrap", "=", "'False'", ",", "n_jobs", "=", "-", "1", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"random_trees_embedding\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "CATEGORICAL", "\n", "\n", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "sparse_output", "=", "sparse_output", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.random_trees_embedding.RandomTreesEmbeddingTransformation.operate": [[30, 74], ["random_trees_embedding.RandomTreesEmbeddingTransformation.model.transform().toarray", "collect_fields", "int", "mindware.components.utils.configspace_utils.check_none", "int", "int", "mindware.components.utils.configspace_utils.check_none", "float", "mindware.components.utils.configspace_utils.check_for_bool", "RandomTreesEmbedding", "random_trees_embedding.RandomTreesEmbeddingTransformation.model.fit", "int", "min", "int", "random_trees_embedding.RandomTreesEmbeddingTransformation.model.transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ":", "DataNode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "RandomTreesEmbedding", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "input_datanode", ".", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "\n", "# Skip heavy computation. max depth is set to 6.", "\n", "", "if", "X", ".", "shape", "[", "0", "]", ">", "5000", ":", "\n", "                ", "self", ".", "max_depth", "=", "min", "(", "6", ",", "self", ".", "max_depth", ")", "\n", "\n", "", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "self", ".", "bootstrap", "=", "check_for_bool", "(", "self", ".", "bootstrap", ")", "\n", "\n", "self", ".", "model", "=", "RandomTreesEmbedding", "(", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "sparse_output", "=", "self", ".", "sparse_output", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "random_state", "=", "self", ".", "random_state", "\n", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", ".", "toarray", "(", ")", "\n", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.random_trees_embedding.RandomTreesEmbeddingTransformation.get_hyperparameter_search_space": [[75, 98], ["ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "name", "=", "\"n_estimators\"", ",", "\n", "lower", "=", "10", ",", "upper", "=", "100", ",", "\n", "default_value", "=", "10", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "name", "=", "\"max_depth\"", ",", "\n", "lower", "=", "2", ",", "upper", "=", "10", ",", "\n", "default_value", "=", "5", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "name", "=", "\"min_samples_split\"", ",", "\n", "lower", "=", "2", ",", "upper", "=", "20", ",", "\n", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "name", "=", "\"min_samples_leaf\"", ",", "\n", "lower", "=", "1", ",", "upper", "=", "20", ",", "\n", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "Constant", "(", "'min_weight_fraction_leaf'", ",", "1.0", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "name", "=", "\"max_leaf_nodes\"", ",", "\n", "value", "=", "\"None\"", ")", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "'bootstrap'", ",", "[", "'True'", ",", "'False'", "]", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "max_depth", ",", "min_samples_split", ",", "\n", "min_samples_leaf", ",", "min_weight_fraction_leaf", ",", "\n", "max_leaf_nodes", ",", "bootstrap", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.kernel_pca.KernelPCA.__init__": [[13, 40], ["Transformer.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_components", "=", "100", ",", "kernel", "=", "'rbf'", ",", "degree", "=", "3", ",", "gamma", "=", "0.25", ",", "coef0", "=", "0.0", ",", "\n", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"kernel_pca\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "coef0", "=", "coef0", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "skip_flag", "=", "False", "\n", "self", ".", "pre_trained", "=", "False", "\n", "\n", "if", "isinstance", "(", "self", ".", "kernel", ",", "tuple", ")", ":", "\n", "            ", "nested_kernel", "=", "self", ".", "kernel", "\n", "self", ".", "kernel", "=", "nested_kernel", "[", "0", "]", "\n", "if", "self", ".", "kernel", "==", "'poly'", ":", "\n", "                ", "self", ".", "degree", "=", "nested_kernel", "[", "1", "]", "[", "'degree'", "]", "\n", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "self", ".", "gamma", "=", "nested_kernel", "[", "1", "]", "[", "'gamma'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'rbf'", ":", "\n", "                ", "self", ".", "gamma", "=", "nested_kernel", "[", "1", "]", "[", "'gamma'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.kernel_pca.KernelPCA.operate": [[41, 80], ["kernel_pca.KernelPCA.model.transform", "X.astype.astype.copy", "int", "int", "float", "float", "kernel_pca.KernelPCA", "scipy.sparse.issparse", "X.astype.astype.astype", "warnings.catch_warnings", "warnings.filterwarnings", "kernel_pca.KernelPCA.model.fit", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "", "", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "# Skip large matrix computation in obtaining the kernel matrix.", "\n", "if", "X", ".", "shape", "[", "0", "]", ">", "10000", ":", "\n", "            ", "if", "not", "self", ".", "pre_trained", ":", "\n", "                ", "pass", "\n", "# self.skip_flag = True", "\n", "\n", "", "", "self", ".", "pre_trained", "=", "True", "\n", "if", "self", ".", "skip_flag", ":", "\n", "            ", "return", "X", ".", "copy", "(", ")", "\n", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "import", "scipy", ".", "sparse", "\n", "from", "mindware", ".", "components", ".", "feature_engineering", ".", "transformations", ".", "utils", "import", "KernelPCA", "\n", "\n", "self", ".", "n_components", "=", "int", "(", "self", ".", "n_components", ")", "\n", "self", ".", "degree", "=", "int", "(", "self", ".", "degree", ")", "\n", "self", ".", "gamma", "=", "float", "(", "self", ".", "gamma", ")", "\n", "self", ".", "coef0", "=", "float", "(", "self", ".", "coef0", ")", "\n", "\n", "self", ".", "model", "=", "KernelPCA", "(", "\n", "n_components", "=", "self", ".", "n_components", ",", "kernel", "=", "self", ".", "kernel", ",", "\n", "degree", "=", "self", ".", "degree", ",", "gamma", "=", "self", ".", "gamma", ",", "coef0", "=", "self", ".", "coef0", ",", "\n", "remove_zero_eig", "=", "True", ",", "random_state", "=", "self", ".", "random_state", ",", "n_jobs", "=", "-", "1", ")", "\n", "if", "scipy", ".", "sparse", ".", "issparse", "(", "X", ")", ":", "\n", "                ", "X", "=", "X", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"error\"", ")", "\n", "self", ".", "model", ".", "fit", "(", "X", ")", "\n", "# Raise an informative error message, equation is based ~line 249 in", "\n", "# kernel_pca.py in scikit-learn", "\n", "", "if", "len", "(", "self", ".", "model", ".", "alphas_", "/", "self", ".", "model", ".", "lambdas_", ")", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'KernelPCA removed all features!'", ")", "\n", "", "", "X_new", "=", "self", ".", "model", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.kernel_pca.KernelPCA.get_hyperparameter_search_space": [[81, 99], ["ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.conditions.EqualsCondition", "ConfigSpace.conditions.InCondition", "ConfigSpace.conditions.InCondition", "ConfigSpace.configuration_space.ConfigurationSpace.add_conditions"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "n_components", "=", "UniformIntegerHyperparameter", "(", "\n", "\"n_components\"", ",", "10", ",", "2000", ",", "default_value", "=", "100", ")", "\n", "kernel", "=", "CategoricalHyperparameter", "(", "'kernel'", ",", "\n", "[", "'poly'", ",", "'rbf'", ",", "'sigmoid'", ",", "'cosine'", "]", ",", "'rbf'", ")", "\n", "gamma", "=", "UniformFloatHyperparameter", "(", "\"gamma\"", ",", "3.0517578125e-05", ",", "8", ",", "\n", "log", "=", "True", ",", "default_value", "=", "1.0", ")", "\n", "degree", "=", "UniformIntegerHyperparameter", "(", "'degree'", ",", "2", ",", "5", ",", "3", ")", "\n", "coef0", "=", "UniformFloatHyperparameter", "(", "\"coef0\"", ",", "-", "1", ",", "1", ",", "default_value", "=", "0", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_components", ",", "kernel", ",", "degree", ",", "gamma", ",", "coef0", "]", ")", "\n", "\n", "degree_depends_on_poly", "=", "EqualsCondition", "(", "degree", ",", "kernel", ",", "\"poly\"", ")", "\n", "coef0_condition", "=", "InCondition", "(", "coef0", ",", "kernel", ",", "[", "\"poly\"", ",", "\"sigmoid\"", "]", ")", "\n", "gamma_condition", "=", "InCondition", "(", "gamma", ",", "kernel", ",", "[", "\"poly\"", ",", "\"rbf\"", "]", ")", "\n", "cs", ".", "add_conditions", "(", "[", "degree_depends_on_poly", ",", "coef0_condition", ",", "gamma_condition", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.feature_agglomeration_decomposer.FeatureAgglomerationDecomposer.__init__": [[12, 26], ["Transformer.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "n_clusters", "=", "2", ",", "affinity", "=", "'euclidean'", ",", "linkage", "=", "'ward'", ",", "pooling_func", "=", "'mean'", ",", "\n", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"feature_agglomeration_decomposer\"", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "n_clusters", "=", "n_clusters", "\n", "self", ".", "affinity", "=", "affinity", "\n", "self", ".", "linkage", "=", "linkage", "\n", "self", ".", "pooling_func", "=", "pooling_func", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n", "self", ".", "pooling_func_mapping", "=", "dict", "(", "mean", "=", "np", ".", "mean", ",", "median", "=", "np", ".", "median", ",", "max", "=", "np", ".", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.feature_agglomeration_decomposer.FeatureAgglomerationDecomposer.operate": [[27, 48], ["feature_agglomeration_decomposer.FeatureAgglomerationDecomposer.model.transform", "int", "min", "FeatureAgglomeration", "feature_agglomeration_decomposer.FeatureAgglomerationDecomposer.model.fit", "callable"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "cluster", "import", "FeatureAgglomeration", "\n", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "n_clusters", "=", "int", "(", "self", ".", "n_clusters", ")", "\n", "\n", "n_clusters", "=", "min", "(", "self", ".", "n_clusters", ",", "X", ".", "shape", "[", "1", "]", ")", "\n", "if", "not", "callable", "(", "self", ".", "pooling_func", ")", ":", "\n", "                ", "self", ".", "pooling_func", "=", "self", ".", "pooling_func_mapping", "[", "self", ".", "pooling_func", "]", "\n", "\n", "", "self", ".", "model", "=", "FeatureAgglomeration", "(", "\n", "n_clusters", "=", "n_clusters", ",", "affinity", "=", "self", ".", "affinity", ",", "\n", "linkage", "=", "self", ".", "linkage", ",", "pooling_func", "=", "self", ".", "pooling_func", ")", "\n", "self", ".", "model", ".", "fit", "(", "X", ")", "\n", "\n", "", "X_new", "=", "self", ".", "model", ".", "transform", "(", "X", ")", "\n", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.feature_agglomeration_decomposer.FeatureAgglomerationDecomposer.get_hyperparameter_search_space": [[49, 67], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.forbidden.ForbiddenAndConjunction", "ConfigSpace.configuration_space.ConfigurationSpace.add_forbidden_clause", "ConfigSpace.forbidden.ForbiddenInClause", "ConfigSpace.forbidden.ForbiddenEqualsClause"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_clusters", "=", "UniformIntegerHyperparameter", "(", "\"n_clusters\"", ",", "2", ",", "400", ",", "default_value", "=", "25", ")", "\n", "affinity", "=", "CategoricalHyperparameter", "(", "\n", "\"affinity\"", ",", "[", "\"euclidean\"", ",", "\"manhattan\"", ",", "\"cosine\"", "]", ",", "default_value", "=", "\"euclidean\"", ")", "\n", "linkage", "=", "CategoricalHyperparameter", "(", "\n", "\"linkage\"", ",", "[", "\"ward\"", ",", "\"complete\"", ",", "\"average\"", "]", ",", "default_value", "=", "\"ward\"", ")", "\n", "pooling_func", "=", "CategoricalHyperparameter", "(", "\n", "\"pooling_func\"", ",", "[", "\"mean\"", ",", "\"median\"", ",", "\"max\"", "]", ",", "default_value", "=", "\"mean\"", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_clusters", ",", "affinity", ",", "linkage", ",", "pooling_func", "]", ")", "\n", "\n", "affinity_and_linkage", "=", "ForbiddenAndConjunction", "(", "\n", "ForbiddenInClause", "(", "affinity", ",", "[", "\"manhattan\"", ",", "\"cosine\"", "]", ")", ",", "\n", "ForbiddenEqualsClause", "(", "linkage", ",", "\"ward\"", ")", ")", "\n", "cs", ".", "add_forbidden_clause", "(", "affinity_and_linkage", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.polynomial_generator.PolynomialTransformation.__init__": [[12, 29], ["Transformer.__init__", "list", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_for_bool"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool"], ["def", "__init__", "(", "self", ",", "degree", "=", "2", ",", "interaction_only", "=", "'True'", ",", "include_bias", "=", "'False'", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"polynomial\"", ")", "\n", "self", ".", "input_type", "=", "[", "DISCRETE", ",", "NUMERICAL", "]", "\n", "self", ".", "compound_mode", "=", "'concatenate'", "\n", "self", ".", "best_idxs", "=", "list", "(", ")", "\n", "if", "degree", "==", "2", ":", "\n", "            ", "self", ".", "bestn", "=", "25", "\n", "", "elif", "degree", "==", "3", ":", "\n", "            ", "self", ".", "bestn", "=", "10", "\n", "", "elif", "degree", "==", "4", ":", "\n", "            ", "self", ".", "bestn", "=", "6", "\n", "\n", "", "self", ".", "output_type", "=", "NUMERICAL", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "interaction_only", "=", "check_for_bool", "(", "interaction_only", ")", "\n", "self", ".", "include_bias", "=", "check_for_bool", "(", "include_bias", ")", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.polynomial_generator.PolynomialTransformation.operate": [[30, 59], ["polynomial_generator.PolynomialTransformation.model.transform", "LGBMClassifier", "LGBMClassifier.fit", "numpy.argsort", "int", "PolynomialFeatures", "polynomial_generator.PolynomialTransformation.model.fit", "len", "len", "polynomial_generator.PolynomialTransformation.best_idxs.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", ")", ":", "\n", "        ", "from", "sklearn", ".", "preprocessing", "import", "PolynomialFeatures", "\n", "from", "lightgbm", "import", "LGBMClassifier", "\n", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "\n", "if", "not", "self", ".", "best_idxs", ":", "\n", "            ", "lgb", "=", "LGBMClassifier", "(", "random_state", "=", "1", ",", "n_jobs", "=", "4", ")", "\n", "lgb", ".", "fit", "(", "X", ",", "y", ")", "\n", "_importance", "=", "lgb", ".", "feature_importances_", "\n", "idx_importance", "=", "np", ".", "argsort", "(", "-", "_importance", ")", "\n", "cur_idx", "=", "0", "\n", "while", "len", "(", "self", ".", "best_idxs", ")", "<", "self", ".", "bestn", "and", "cur_idx", "<", "len", "(", "_importance", ")", ":", "\n", "                ", "if", "idx_importance", "[", "cur_idx", "]", "in", "target_fields", ":", "\n", "                    ", "self", ".", "best_idxs", ".", "append", "(", "idx_importance", "[", "cur_idx", "]", ")", "\n", "", "cur_idx", "+=", "1", "\n", "\n", "", "", "X_new", "=", "X", "[", ":", ",", "self", ".", "best_idxs", "]", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "degree", "=", "int", "(", "self", ".", "degree", ")", "\n", "\n", "self", ".", "model", "=", "PolynomialFeatures", "(", "\n", "degree", "=", "self", ".", "degree", ",", "interaction_only", "=", "self", ".", "interaction_only", ",", "\n", "include_bias", "=", "self", ".", "include_bias", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "_X", "=", "_X", "[", ":", ",", "X_new", ".", "shape", "[", "1", "]", ":", "]", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.polynomial_generator.PolynomialTransformation.get_hyperparameter_search_space": [[60, 70], ["ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "degree", "=", "UniformIntegerHyperparameter", "(", "\"degree\"", ",", "lower", "=", "2", ",", "upper", "=", "3", ",", "default_value", "=", "2", ")", "\n", "interaction_only", "=", "CategoricalHyperparameter", "(", "\"interaction_only\"", ",", "\n", "[", "\"False\"", ",", "\"True\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "include_bias", "=", "UnParametrizedHyperparameter", "(", "\"include_bias\"", ",", "\"False\"", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "degree", ",", "interaction_only", ",", "include_bias", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.kitchen_sinks.KitchenSinks.__init__": [[11, 20], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "gamma", "=", "1.0", ",", "n_components", "=", "100", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"kitchen_sinks\"", ",", "random_state", "=", "random_state", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.kitchen_sinks.KitchenSinks.operate": [[21, 35], ["kitchen_sinks.KitchenSinks.model.transform", "sklearn.kernel_approximation.RBFSampler", "kitchen_sinks.KitchenSinks.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "import", "sklearn", ".", "kernel_approximation", "\n", "self", ".", "model", "=", "sklearn", ".", "kernel_approximation", ".", "RBFSampler", "(", "\n", "gamma", "=", "self", ".", "gamma", ",", "n_components", "=", "self", ".", "n_components", ",", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.kitchen_sinks.KitchenSinks.get_hyperparameter_search_space": [[36, 45], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "gamma", "=", "UniformFloatHyperparameter", "(", "\n", "\"gamma\"", ",", "3.0517578125e-05", ",", "8", ",", "default_value", "=", "1.0", ",", "log", "=", "True", ")", "\n", "n_components", "=", "UniformIntegerHyperparameter", "(", "\n", "\"n_components\"", ",", "50", ",", "5000", ",", "default_value", "=", "100", ",", "log", "=", "True", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "gamma", ",", "n_components", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.binary_transformer.BinaryTransformation.__init__": [[10, 17], ["Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "func", "=", "'add'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"binary_transformer\"", ")", "\n", "self", ".", "input_type", "=", "NUMERICAL", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "self", ".", "compound_mode", "=", "'concatenate'", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "optional_params", "=", "[", "'add'", ",", "'sub'", ",", "'mul'", ",", "'div'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.binary_transformer.BinaryTransformation.operate": [[19, 34], ["binary_transformer.BinaryTransformation.model.transform", "collect_fields", "binary_transformer.BinaryTransformation.get_model", "binary_transformer.BinaryTransformation.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.utils.collect_fields", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.binary_transformer.BinaryTransformation.get_model", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ":", "DataNode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "if", "target_fields", "is", "None", ":", "\n", "            ", "target_fields", "=", "collect_fields", "(", "input_datanode", ".", "feature_types", ",", "self", ".", "input_type", ")", "\n", "", "X1", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "X2", "=", "X", "[", ":", ",", "target_fields", "]", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "self", ".", "get_model", "(", "self", ".", "func", ")", "\n", "self", ".", "model", ".", "fit", "(", "X1", ",", "X2", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X1", ",", "X2", ")", "\n", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.binary_transformer.BinaryTransformation.get_model": [[35, 46], ["Addition", "Subtract", "Multiply", "Division", "ValueError", "str"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "param", ")", ":", "\n", "        ", "if", "param", "==", "'add'", ":", "\n", "            ", "self", ".", "model", "=", "Addition", "(", ")", "\n", "", "elif", "param", "==", "'sub'", ":", "\n", "            ", "self", ".", "model", "=", "Subtract", "(", ")", "\n", "", "elif", "param", "==", "'mul'", ":", "\n", "            ", "self", ".", "model", "=", "Multiply", "(", ")", "\n", "", "elif", "param", "==", "'div'", ":", "\n", "            ", "self", ".", "model", "=", "Division", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown param name %s!\"", "%", "str", "(", "param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.binary_transformer.BinaryTransformation.get_hyperparameter_search_space": [[47, 59], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter", "hp.choice"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "optional_funcs", "=", "[", "'add'", ",", "'sub'", ",", "'mul'", ",", "'div'", "]", "\n", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "func", "=", "CategoricalHyperparameter", "(", "'func'", ",", "optional_funcs", ",", "default_value", "=", "'mul'", ")", "\n", "cs", ".", "add_hyperparameter", "(", "func", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'func'", ":", "hp", ".", "choice", "(", "'binary_func'", ",", "optional_funcs", ")", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.__init__.add_generator": [[17, 19], ["_addons.add_component"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.__init__": [[13, 41], ["Transformer.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "kernel", "=", "'rbf'", ",", "n_components", "=", "100", ",", "gamma", "=", "1.0", ",", "degree", "=", "3", ",", "\n", "coef0", "=", "1", ",", "random_state", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"nystronem_sampler\"", ",", "random_state", "=", "random_state", ")", "\n", "self", ".", "input_type", "=", "[", "NUMERICAL", ",", "DISCRETE", ",", "CATEGORICAL", "]", "\n", "self", ".", "compound_mode", "=", "'only_new'", "\n", "self", ".", "output_type", "=", "NUMERICAL", "\n", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "coef0", "=", "coef0", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n", "if", "isinstance", "(", "self", ".", "kernel", ",", "tuple", ")", ":", "\n", "            ", "nested_kernel", "=", "self", ".", "kernel", "\n", "self", ".", "kernel", "=", "nested_kernel", "[", "0", "]", "\n", "if", "self", ".", "kernel", "==", "'poly'", ":", "\n", "                ", "self", ".", "degree", "=", "nested_kernel", "[", "1", "]", "[", "'degree'", "]", "\n", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "self", ".", "gamma", "=", "nested_kernel", "[", "1", "]", "[", "'gamma'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "self", ".", "gamma", "=", "nested_kernel", "[", "1", "]", "[", "'gamma'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'rbf'", ":", "\n", "                ", "self", ".", "gamma", "=", "nested_kernel", "[", "1", "]", "[", "'gamma'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'chi'", ":", "\n", "                ", "self", ".", "gamma", "=", "nested_kernel", "[", "1", "]", "[", "'gamma'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.operate": [[42, 72], ["X[].astype", "nystronem_sampler.NystronemSampler.model.transform", "scipy.sparse.issparse", "min", "float", "int", "float", "sklearn.kernel_approximation.Nystroem", "nystronem_sampler.NystronemSampler.model.fit", "X[].astype.astype"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "", "", "@", "ease_trans", "\n", "def", "operate", "(", "self", ",", "input_datanode", ",", "target_fields", "=", "None", ")", ":", "\n", "        ", "X", ",", "y", "=", "input_datanode", ".", "data", "\n", "X_new", "=", "X", "[", ":", ",", "target_fields", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "# Because the pipeline guarantees that each feature is positive,", "\n", "# clip all values below zero to zero", "\n", "if", "self", ".", "kernel", "==", "'chi2'", ":", "\n", "            ", "if", "scipy", ".", "sparse", ".", "issparse", "(", "X_new", ")", ":", "\n", "                ", "X_new", ".", "data", "[", "X_new", ".", "data", "<", "0", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "X_new", "[", "X_new", "<", "0", "]", "=", "0.0", "\n", "\n", "", "", "if", "not", "self", ".", "model", ":", "\n", "            ", "n_components", "=", "min", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_components", ")", "\n", "\n", "self", ".", "gamma", "=", "float", "(", "self", ".", "gamma", ")", "\n", "self", ".", "degree", "=", "int", "(", "self", ".", "degree", ")", "\n", "self", ".", "coef0", "=", "float", "(", "self", ".", "coef0", ")", "\n", "\n", "self", ".", "model", "=", "Nystroem", "(", "\n", "kernel", "=", "self", ".", "kernel", ",", "n_components", "=", "n_components", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "degree", "=", "self", ".", "degree", ",", "coef0", "=", "self", ".", "coef0", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "X_new", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "", "_X", "=", "self", ".", "model", ".", "transform", "(", "X_new", ")", "\n", "\n", "return", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.generator.nystronem_sampler.NystronemSampler.get_hyperparameter_search_space": [[73, 105], ["ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.conditions.EqualsCondition", "ConfigSpace.conditions.InCondition", "ConfigSpace.conditions.InCondition", "ConfigSpace.configuration_space.ConfigurationSpace.add_conditions", "possible_kernels.append", "gamma_kernels.append", "dataset_properties.get", "dataset_properties.get"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "dataset_properties", "is", "not", "None", "and", "(", "dataset_properties", ".", "get", "(", "\"sparse\"", ")", "is", "True", "or", "\n", "dataset_properties", ".", "get", "(", "\"signed\"", ")", "is", "False", ")", ":", "\n", "            ", "allow_chi2", "=", "False", "\n", "", "else", ":", "\n", "            ", "allow_chi2", "=", "True", "\n", "\n", "", "possible_kernels", "=", "[", "'poly'", ",", "'rbf'", ",", "'sigmoid'", ",", "'cosine'", "]", "\n", "if", "allow_chi2", ":", "\n", "            ", "possible_kernels", ".", "append", "(", "\"chi2\"", ")", "\n", "", "kernel", "=", "CategoricalHyperparameter", "(", "'kernel'", ",", "possible_kernels", ",", "'rbf'", ")", "\n", "n_components", "=", "UniformIntegerHyperparameter", "(", "\n", "\"n_components\"", ",", "50", ",", "5000", ",", "default_value", "=", "100", ",", "log", "=", "True", ")", "\n", "gamma", "=", "UniformFloatHyperparameter", "(", "\"gamma\"", ",", "3.0517578125e-05", ",", "8", ",", "\n", "log", "=", "True", ",", "default_value", "=", "0.1", ")", "\n", "degree", "=", "UniformIntegerHyperparameter", "(", "'degree'", ",", "2", ",", "5", ",", "3", ")", "\n", "coef0", "=", "UniformFloatHyperparameter", "(", "\"coef0\"", ",", "-", "1", ",", "1", ",", "default_value", "=", "0", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "kernel", ",", "degree", ",", "gamma", ",", "coef0", ",", "n_components", "]", ")", "\n", "\n", "degree_depends_on_poly", "=", "EqualsCondition", "(", "degree", ",", "kernel", ",", "\"poly\"", ")", "\n", "coef0_condition", "=", "InCondition", "(", "coef0", ",", "kernel", ",", "[", "\"poly\"", ",", "\"sigmoid\"", "]", ")", "\n", "\n", "gamma_kernels", "=", "[", "\"poly\"", ",", "\"rbf\"", ",", "\"sigmoid\"", "]", "\n", "if", "allow_chi2", ":", "\n", "            ", "gamma_kernels", ".", "append", "(", "\"chi2\"", ")", "\n", "", "gamma_condition", "=", "InCondition", "(", "gamma", ",", "kernel", ",", "gamma_kernels", ")", "\n", "cs", ".", "add_conditions", "(", "[", "degree_depends_on_poly", ",", "coef0_condition", ",", "gamma_condition", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.UnnamedEnsemble.__init__": [[105, 118], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "random_state", ":", "np", ".", "random", ".", "RandomState", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "base_model_mask", "=", "None", "\n", "self", ".", "weights_", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.UnnamedEnsemble.fit": [[119, 132], ["choose_base_models", "unnamed_ensemble.calculate_weights"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.calculate_weights"], ["", "def", "fit", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n\n        :param predictions: proba_predictions for cls. Shape: (num_models,num_samples,num_class) for cls\n        :param labels: Shape: (num_samples,)\n        :return: self\n        \"\"\"", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "# If classification", "\n", "            ", "self", ".", "base_model_mask", "=", "choose_base_models", "(", "predictions", ",", "labels", ",", "self", ".", "ensemble_size", ")", "\n", "self", ".", "weights_", "=", "calculate_weights", "(", "predictions", ",", "labels", ",", "self", ".", "base_model_mask", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.UnnamedEnsemble.predict": [[133, 150], ["numpy.asarray", "len", "numpy.average", "numpy.count_nonzero", "numpy.average", "ValueError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "predictions", "=", "np", ".", "asarray", "(", "predictions", ")", "\n", "\n", "# if predictions.shape[0] == len(self.weights_),", "\n", "# predictions include those of zero-weight models.", "\n", "if", "predictions", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "return", "np", ".", "average", "(", "predictions", ",", "axis", "=", "0", ",", "weights", "=", "self", ".", "weights_", ")", "\n", "\n", "# if prediction model.shape[0] == len(non_null_weights),", "\n", "# predictions do not include those of zero-weight models.", "\n", "", "elif", "predictions", ".", "shape", "[", "0", "]", "==", "np", ".", "count_nonzero", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "non_null_weights", "=", "[", "w", "for", "w", "in", "self", ".", "weights_", "if", "w", ">", "0", "]", "\n", "return", "np", ".", "average", "(", "predictions", ",", "axis", "=", "0", ",", "weights", "=", "non_null_weights", ")", "\n", "\n", "# If none of the above applies, then something must have gone wrong.", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"The dimensions of ensemble predictions\"", "\n", "\" and ensemble weights do not match!\"", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.choose_base_models_regression": [[10, 23], ["scipy.spatial.distance.cdist", "numpy.sum", "len", "np.sum.argsort"], "function", ["None"], ["def", "choose_base_models_regression", "(", "predictions", ",", "labels", ",", "num_model", ")", ":", "\n", "    ", "base_mask", "=", "[", "0", "]", "*", "len", "(", "predictions", ")", "\n", "dif", "=", "predictions", "-", "labels", "\n", "dif", "[", "dif", ">", "0", "]", "=", "1", "\n", "dif", "[", "dif", "<", "0", "]", "=", "-", "1", "\n", "'''Calculate the distance between each model'''", "\n", "dist", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "dif", ",", "dif", ")", "\n", "total_dist", "=", "np", ".", "sum", "(", "dist", ",", "1", ")", "\n", "'''Select the model which has large distance to other models'''", "\n", "selected_models", "=", "total_dist", ".", "argsort", "(", ")", "[", "-", "num_model", ":", "]", "\n", "for", "model", "in", "selected_models", ":", "\n", "        ", "base_mask", "[", "model", "]", "=", "1", "\n", "", "return", "base_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.choose_base_models_classification": [[25, 73], ["numpy.array", "sklearn.cluster.AgglomerativeClustering", "sklearn.cluster.AgglomerativeClustering.fit", "range", "len", "numpy.arange", "range", "np.array.append", "numpy.zeros", "range", "numpy.sqrt", "np.sqrt.argmin", "pandas.cut", "pd.cut.value_counts", "list", "numpy.sum", "group.value_counts.sum", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "choose_base_models_classification", "(", "predictions", ",", "num_model", ",", "interval", "=", "20", ")", ":", "\n", "    ", "num_class", "=", "predictions", ".", "shape", "[", "2", "]", "\n", "num_total_models", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "base_mask", "=", "[", "0", "]", "*", "len", "(", "predictions", ")", "\n", "bucket", "=", "np", ".", "arange", "(", "interval", "+", "1", ")", "/", "interval", "\n", "bucket", "[", "0", "]", "-=", "1e-8", "\n", "bucket", "[", "-", "1", "]", "+=", "1e-8", "\n", "distribution", "=", "[", "]", "\n", "for", "prediction", "in", "predictions", ":", "\n", "        ", "freq_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "class_i", "=", "prediction", "[", ":", ",", "i", "]", "\n", "group", "=", "pd", ".", "cut", "(", "class_i", ",", "bucket", ",", "right", "=", "False", ")", "\n", "counts", "=", "group", ".", "value_counts", "(", ")", "\n", "freq", "=", "list", "(", "counts", "/", "counts", ".", "sum", "(", ")", ")", "\n", "freq_array", "+=", "freq", "\n", "\n", "# TODO: Debug inf output", "\n", "# print(prediction)", "\n", "# print(freq_array)", "\n", "", "distribution", ".", "append", "(", "freq_array", ")", "# Shape: (num_total_models,20*num_class)", "\n", "\n", "", "distribution", "=", "np", ".", "array", "(", "distribution", ")", "\n", "\n", "# Apply the clustering algorithm", "\n", "model", "=", "AgglomerativeClustering", "(", "n_clusters", "=", "num_model", ",", "linkage", "=", "\"complete\"", ")", "\n", "cluster", "=", "model", ".", "fit", "(", "distribution", ")", "\n", "\"\"\"\n    Select models which are the most nearest to the clustering center\n    selected_models = []\n    \"\"\"", "\n", "for", "cluster_label", "in", "range", "(", "num_model", ")", ":", "\n", "        ", "cluster_center", "=", "np", ".", "zeros", "(", "distribution", ".", "shape", "[", "1", "]", ")", "\n", "count", "=", "0", "\n", "\"\"\"\n         Averaging the distribution which belong the same clustering class\n          and then get the corresponding distribution center\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "num_total_models", ")", ":", "\n", "            ", "if", "cluster", ".", "labels_", "[", "i", "]", "==", "cluster_label", ":", "\n", "                ", "count", "+=", "1", "\n", "cluster_center", "+=", "distribution", "[", "i", "]", "\n", "", "", "cluster_center", "=", "cluster_center", "/", "count", "\n", "distances", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "asarray", "(", "cluster_center", "-", "distribution", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "selected_model", "=", "distances", ".", "argmin", "(", ")", "\n", "base_mask", "[", "selected_model", "]", "=", "1", "\n", "\n", "", "return", "base_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.calculate_weights": [[75, 90], ["numpy.zeros", "range", "numpy.argmax", "sklearn.metrics.accuracy_score", "model_weight.reshape.reshape", "numpy.log", "numpy.sum", "numpy.exp", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "calculate_weights", "(", "predictions", ",", "labels", ",", "base_mask", ")", ":", "\n", "    ", "num_total_models", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "num_samples", "=", "predictions", ".", "shape", "[", "1", "]", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "num_total_models", ")", ")", "\n", "for", "i", "in", "range", "(", "num_total_models", ")", ":", "\n", "        ", "if", "base_mask", "[", "i", "]", "!=", "0", ":", "\n", "            ", "predicted_labels", "=", "np", ".", "argmax", "(", "predictions", "[", "i", "]", ",", "1", ")", "\n", "acc", "=", "accuracy_score", "(", "predicted_labels", ",", "labels", ")", "\n", "model_weight", "=", "0.5", "*", "np", ".", "log", "(", "acc", "/", "(", "1", "-", "acc", ")", ")", "# a concrete value", "\n", "shannon_ent", "=", "-", "1.0", "*", "np", ".", "sum", "(", "predictions", "[", "i", "]", "*", "np", ".", "log2", "(", "predictions", "[", "i", "]", ")", ",", "1", ")", "# shape: (1, num_samples)", "\n", "confidence", "=", "1", "/", "np", ".", "exp", "(", "shannon_ent", ")", "\n", "model_weight", "=", "model_weight", "*", "confidence", "# The weight of current model to all samples", "\n", "model_weight", "=", "model_weight", ".", "reshape", "(", "num_samples", ",", "1", ")", "\n", "weights", "[", ":", ",", "i", "]", "=", "model_weight", "\n", "", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.calculate_weights_simple": [[92, 102], ["range", "numpy.argmax", "sklearn.metrics.accuracy_score", "numpy.log"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "calculate_weights_simple", "(", "predictions", ",", "labels", ",", "base_mask", ")", ":", "\n", "    ", "num_total_models", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "weights", "=", "[", "0", "]", "*", "num_total_models", "\n", "for", "i", "in", "range", "(", "num_total_models", ")", ":", "\n", "        ", "if", "base_mask", "[", "i", "]", "!=", "0", ":", "\n", "            ", "predicted_labels", "=", "np", ".", "argmax", "(", "predictions", "[", "i", "]", ",", "1", ")", "\n", "acc", "=", "accuracy_score", "(", "predicted_labels", ",", "labels", ")", "\n", "model_weight", "=", "0.5", "*", "np", ".", "log", "(", "acc", "/", "(", "1", "-", "acc", ")", ")", "# a concrete value", "\n", "weights", "[", "i", "]", "=", "model_weight", "\n", "", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.bagging.Bagging.__init__": [[13, 25], ["mindware.components.ensemble.base_ensemble.BaseEnsembleModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stats", ",", "data_node", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "output_dir", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_method", "=", "'bagging'", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.bagging.Bagging.fit": [[26, 28], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "datanode", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.bagging.Bagging.predict": [[29, 57], ["range", "numpy.array", "enumerate", "len", "final_pred.append", "data.copy_", "mindware.components.feature_engineering.parse.construct_node", "functools.reduce", "len", "open", "pickle.load", "model_pred_list.append", "model_pred_list.append", "model.predict_proba", "model.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "model_pred_list", "=", "[", "]", "\n", "final_pred", "=", "[", "]", "\n", "# Get predictions from each model", "\n", "model_cnt", "=", "0", "\n", "for", "algo_id", "in", "self", ".", "stats", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "_", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "data", ".", "copy_", "(", ")", "\n", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "\n", "if", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                        ", "model_pred_list", ".", "append", "(", "model", ".", "predict_proba", "(", "_node", ".", "data", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "model_pred_list", ".", "append", "(", "model", ".", "predict", "(", "_node", ".", "data", "[", "0", "]", ")", ")", "\n", "", "", "model_cnt", "+=", "1", "\n", "\n", "# Calculate the average of predictions", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "data", ".", "data", "[", "0", "]", ")", ")", ":", "\n", "            ", "sample_pred_list", "=", "[", "model_pred", "[", "i", "]", "for", "model_pred", "in", "model_pred_list", "]", "\n", "pred_average", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "sample_pred_list", ")", "/", "len", "(", "sample_pred_list", ")", "\n", "final_pred", ".", "append", "(", "pred_average", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "final_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.bagging.Bagging.get_ens_model_info": [[58, 71], ["enumerate", "ens_config.append", "hasattr"], "methods", ["None"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "model_cnt", "=", "0", "\n", "ens_info", "=", "{", "}", "\n", "ens_config", "=", "[", "]", "\n", "for", "algo_id", "in", "self", ".", "stats", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "'base_model_mask'", ")", "or", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "ens_config", ".", "append", "(", "(", "algo_id", ",", "config", ",", "path", ")", ")", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "ens_info", "[", "'ensemble_method'", "]", "=", "'bagging'", "\n", "ens_info", "[", "'config'", "]", "=", "ens_config", "\n", "return", "ens_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_bulider.EnsembleBuilder.__init__": [[12, 49], ["mindware.components.ensemble.bagging.Bagging", "mindware.components.ensemble.blending.Blending", "mindware.components.ensemble.stacking.Stacking", "mindware.components.ensemble.ensemble_selection.EnsembleSelection", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stats", ",", "data_node", ",", "\n", "ensemble_method", ":", "str", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "output_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "if", "ensemble_method", "==", "'bagging'", ":", "\n", "            ", "self", ".", "model", "=", "Bagging", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "", "elif", "ensemble_method", "==", "'blending'", ":", "\n", "            ", "self", ".", "model", "=", "Blending", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "", "elif", "ensemble_method", "==", "'stacking'", ":", "\n", "            ", "self", ".", "model", "=", "Stacking", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "", "elif", "ensemble_method", "==", "'ensemble_selection'", ":", "\n", "            ", "self", ".", "model", "=", "EnsembleSelection", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s is not supported for ensemble!\"", "%", "ensemble_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_bulider.EnsembleBuilder.fit": [[50, 52], ["ensemble_bulider.EnsembleBuilder.model.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "fit", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_bulider.EnsembleBuilder.predict": [[53, 55], ["ensemble_bulider.EnsembleBuilder.model.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "predict", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_bulider.EnsembleBuilder.refit": [[56, 58], ["ensemble_bulider.EnsembleBuilder.model.refit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit"], ["", "def", "refit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "refit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_bulider.EnsembleBuilder.get_ens_model_info": [[59, 61], ["ensemble_bulider.EnsembleBuilder.model.get_ens_model_info"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_ens_model_info"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "get_ens_model_info", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.blending.Blending.__init__": [[15, 53], ["mindware.components.ensemble.base_ensemble.BaseEnsembleModel.__init__", "warnings.warn", "LogisticRegression", "LinearRegression", "GradientBoostingClassifier", "LGBMRegressor", "LGBMClassifier"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stats", ",", "data_node", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "output_dir", "=", "None", ",", "\n", "meta_learner", "=", "'lightgbm'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_method", "=", "'blending'", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "try", ":", "\n", "            ", "from", "lightgbm", "import", "LGBMClassifier", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Lightgbm is not imported! Blending will use linear model instead!\"", ")", "\n", "meta_learner", "=", "'linear'", "\n", "", "self", ".", "meta_method", "=", "meta_learner", "\n", "# We use Xgboost as default meta-learner", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "if", "meta_learner", "==", "'linear'", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", ".", "logistic", "import", "LogisticRegression", "\n", "self", ".", "meta_learner", "=", "LogisticRegression", "(", "max_iter", "=", "1000", ")", "\n", "", "elif", "meta_learner", "==", "'gb'", ":", "\n", "                ", "from", "sklearn", ".", "ensemble", ".", "gradient_boosting", "import", "GradientBoostingClassifier", "\n", "self", ".", "meta_learner", "=", "GradientBoostingClassifier", "(", "learning_rate", "=", "0.05", ",", "subsample", "=", "0.7", ",", "max_depth", "=", "4", ",", "\n", "n_estimators", "=", "250", ")", "\n", "", "elif", "meta_learner", "==", "'lightgbm'", ":", "\n", "                ", "from", "lightgbm", "import", "LGBMClassifier", "\n", "self", ".", "meta_learner", "=", "LGBMClassifier", "(", "max_depth", "=", "4", ",", "learning_rate", "=", "0.05", ",", "n_estimators", "=", "150", ",", "n_jobs", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "meta_learner", "==", "'linear'", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", "import", "LinearRegression", "\n", "self", ".", "meta_learner", "=", "LinearRegression", "(", ")", "\n", "", "elif", "meta_learner", "==", "'lightgbm'", ":", "\n", "                ", "from", "lightgbm", "import", "LGBMRegressor", "\n", "self", ".", "meta_learner", "=", "LGBMRegressor", "(", "max_depth", "=", "4", ",", "learning_rate", "=", "0.05", ",", "n_estimators", "=", "70", ",", "n_jobs", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.blending.Blending.fit": [[54, 113], ["blending.Blending.stats.keys", "blending.Blending.meta_learner.fit", "enumerate", "data.copy_", "mindware.components.feature_engineering.parse.construct_node", "open", "pickle.load", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator", "open", "pickle.dump", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator.predict_proba", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator.predict().reshape", "os.path.join", "len", "numpy.zeros", "len", "numpy.zeros", "numpy.array", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator.fetch_predict_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "", "", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "# Split training data for phase 1 and phase 2", "\n", "        ", "test_size", "=", "0.2", "\n", "\n", "# Train basic models using a part of training data", "\n", "model_cnt", "=", "0", "\n", "suc_cnt", "=", "0", "\n", "feature_p2", "=", "None", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "data", ".", "copy_", "(", ")", "\n", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ",", "mode", "=", "'train'", ")", "\n", "\n", "X", ",", "y", "=", "_node", ".", "data", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                    ", "x_p1", ",", "x_p2", ",", "y_p1", ",", "y_p2", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "test_size", ",", "\n", "stratify", "=", "data", ".", "data", "[", "1", "]", ",", "random_state", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "x_p1", ",", "x_p2", ",", "y_p1", ",", "y_p2", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "test_size", ",", "\n", "random_state", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "estimator", "=", "fetch_predict_estimator", "(", "self", ".", "task_type", ",", "algo_id", ",", "config", ",", "x_p1", ",", "y_p1", ",", "\n", "weight_balance", "=", "_node", ".", "enable_balance", ",", "\n", "data_balance", "=", "_node", ".", "data_balance", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s-blending-model%d'", "%", "(", "self", ".", "timestamp", ",", "model_cnt", ")", ")", ",", "\n", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pkl", ".", "dump", "(", "estimator", ",", "f", ")", "\n", "", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                        ", "pred", "=", "estimator", ".", "predict_proba", "(", "x_p2", ")", "\n", "n_dim", "=", "np", ".", "array", "(", "pred", ")", ".", "shape", "[", "1", "]", "\n", "if", "n_dim", "==", "2", ":", "\n", "# Binary classificaion", "\n", "                            ", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "", "if", "feature_p2", "is", "None", ":", "\n", "                            ", "num_samples", "=", "len", "(", "x_p2", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "", "if", "n_dim", "==", "1", ":", "\n", "                            ", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "[", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "                            ", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "\n", "", "", "else", ":", "\n", "                        ", "pred", "=", "estimator", ".", "predict", "(", "x_p2", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "if", "feature_p2", "is", "None", ":", "\n", "                            ", "num_samples", "=", "len", "(", "x_p2", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "\n", "", "suc_cnt", "+=", "1", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "self", ".", "meta_learner", ".", "fit", "(", "feature_p2", ",", "y_p2", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.blending.Blending.get_feature": [[114, 158], ["blending.Blending.stats.keys", "enumerate", "data.copy_", "mindware.components.feature_engineering.parse.construct_node", "open", "pickle.load", "open", "pickle.load", "pickle.load.predict_proba", "pickle.load.predict().reshape", "os.path.join", "len", "numpy.zeros", "len", "numpy.zeros", "numpy.array", "pickle.load.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "get_feature", "(", "self", ",", "data", ")", ":", "\n", "# Predict the labels via blending", "\n", "        ", "feature_p2", "=", "None", "\n", "model_cnt", "=", "0", "\n", "suc_cnt", "=", "0", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "data", ".", "copy_", "(", ")", "\n", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "\n", "if", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s-blending-model%d'", "%", "(", "self", ".", "timestamp", ",", "model_cnt", ")", ")", ",", "\n", "'rb'", ")", "as", "f", ":", "\n", "                        ", "estimator", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                        ", "pred", "=", "estimator", ".", "predict_proba", "(", "_node", ".", "data", "[", "0", "]", ")", "\n", "n_dim", "=", "np", ".", "array", "(", "pred", ")", ".", "shape", "[", "1", "]", "\n", "if", "n_dim", "==", "2", ":", "\n", "# Binary classificaion", "\n", "                            ", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "", "if", "feature_p2", "is", "None", ":", "\n", "                            ", "num_samples", "=", "len", "(", "data", ".", "data", "[", "0", "]", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "", "if", "n_dim", "==", "1", ":", "\n", "                            ", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "[", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "                            ", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "\n", "", "", "else", ":", "\n", "                        ", "pred", "=", "estimator", ".", "predict", "(", "_node", ".", "data", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "if", "feature_p2", "is", "None", ":", "\n", "                            ", "num_samples", "=", "len", "(", "data", ".", "data", "[", "0", "]", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "\n", "", "suc_cnt", "+=", "1", "\n", "", "model_cnt", "+=", "1", "\n", "\n", "", "", "return", "feature_p2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.blending.Blending.predict": [[159, 167], ["blending.Blending.get_feature", "blending.Blending.meta_learner.predict_proba", "blending.Blending.meta_learner.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.get_feature", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "feature_p2", "=", "self", ".", "get_feature", "(", "data", ")", "\n", "# Get predictions from meta-learner", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "final_pred", "=", "self", ".", "meta_learner", ".", "predict_proba", "(", "feature_p2", ")", "\n", "", "else", ":", "\n", "            ", "final_pred", "=", "self", ".", "meta_learner", ".", "predict", "(", "feature_p2", ")", "\n", "", "return", "final_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.blending.Blending.get_ens_model_info": [[168, 183], ["enumerate", "os.path.join", "ens_config.append", "hasattr"], "methods", ["None"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "model_cnt", "=", "0", "\n", "ens_info", "=", "{", "}", "\n", "ens_config", "=", "[", "]", "\n", "for", "algo_id", "in", "self", ".", "stats", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "_", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "'base_model_mask'", ")", "or", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s-blending-model%d'", "%", "(", "self", ".", "timestamp", ",", "model_cnt", ")", ")", "\n", "ens_config", ".", "append", "(", "(", "algo_id", ",", "config", ",", "model_path", ")", ")", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "ens_info", "[", "'ensemble_method'", "]", "=", "'blending'", "\n", "ens_info", "[", "'config'", "]", "=", "ens_config", "\n", "ens_info", "[", "'meta_learner'", "]", "=", "self", ".", "meta_method", "\n", "return", "ens_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.__init__": [[13, 35], ["mindware.components.ensemble.base_ensemble.BaseEnsembleModel.__init__", "list", "sklearn.preprocessing.OneHotEncoder", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "stats", ",", "data_node", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "output_dir", "=", "None", ",", "\n", "sorted_initialization", ":", "bool", "=", "False", ",", "\n", "mode", ":", "str", "=", "'fast'", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "self", ".", "model_idx", "=", "list", "(", ")", "\n", "self", ".", "sorted_initialization", "=", "sorted_initialization", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "encoder", "=", "OneHotEncoder", "(", ")", "\n", "self", ".", "shape", "=", "self", ".", "predictions", "[", "0", "]", ".", "shape", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.calculate_score": [[36, 44], ["isinstance", "ensemble_selection.EnsembleSelection.metric._score_func", "len", "ensemble_selection.EnsembleSelection.encoder.transform().toarray", "isinstance", "numpy.argmax", "ensemble_selection.EnsembleSelection.encoder.transform", "numpy.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "calculate_score", "(", "self", ",", "pred", ",", "y_true", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "metric", ",", "_ThresholdScorer", ")", ":", "\n", "            ", "if", "len", "(", "y_true", ".", "shape", ")", "==", "1", ":", "\n", "                ", "y_true", "=", "self", ".", "encoder", ".", "transform", "(", "np", ".", "reshape", "(", "y_true", ",", "(", "len", "(", "y_true", ")", ",", "1", ")", ")", ")", ".", "toarray", "(", ")", "\n", "", "", "elif", "self", ".", "task_type", "in", "CLS_TASKS", "and", "isinstance", "(", "self", ".", "metric", ",", "_PredictScorer", ")", ":", "\n", "            ", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "-", "1", ")", "\n", "", "score", "=", "self", ".", "metric", ".", "_score_func", "(", "y_true", ",", "pred", ")", "*", "self", ".", "metric", ".", "_sign", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.fit": [[45, 72], ["int", "ensemble_selection.EnsembleSelection._fit", "ensemble_selection.EnsembleSelection._calculate_weights", "ensemble_selection.EnsembleSelection.stats.keys", "numpy.reshape", "ensemble_selection.EnsembleSelection.encoder.fit", "ValueError", "ValueError", "isinstance", "ValueError", "ValueError", "enumerate", "len", "len", "ensemble_selection.EnsembleSelection.model_idx.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._calculate_weights", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "train_labels", ".", "shape", ")", "==", "1", "and", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "reshape_y", "=", "np", ".", "reshape", "(", "self", ".", "train_labels", ",", "(", "len", "(", "self", ".", "train_labels", ")", ",", "1", ")", ")", "\n", "self", ".", "encoder", ".", "fit", "(", "reshape_y", ")", "\n", "", "self", ".", "ensemble_size", "=", "int", "(", "self", ".", "ensemble_size", ")", "\n", "if", "self", ".", "ensemble_size", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Ensemble size cannot be less than one!'", ")", "\n", "", "if", "not", "self", ".", "task_type", "in", "TASK_TYPES", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown task type %s.'", "%", "self", ".", "task_type", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "metric", ",", "_BaseScorer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Metric must be of type scorer'", ")", "\n", "", "if", "self", ".", "mode", "not", "in", "(", "'fast'", ",", "'slow'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode %s'", "%", "self", ".", "mode", ")", "\n", "\n", "", "self", ".", "_fit", "(", "self", ".", "predictions", ",", "self", ".", "train_labels", ")", "\n", "self", ".", "_calculate_weights", "(", ")", "\n", "self", ".", "identifiers_", "=", "None", "\n", "\n", "model_cnt", "=", "0", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "_", ",", "_", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "if", "self", ".", "weights_", "[", "model_cnt", "]", "!=", "0", ":", "\n", "                    ", "self", ".", "model_idx", ".", "append", "(", "model_cnt", ")", "\n", "", "model_cnt", "+=", "1", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection._fit": [[73, 79], ["ensemble_selection.EnsembleSelection._fast", "ensemble_selection.EnsembleSelection._slow"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._fast", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._slow"], ["", "def", "_fit", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'fast'", ":", "\n", "            ", "self", ".", "_fast", "(", "predictions", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slow", "(", "predictions", ",", "labels", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection._fast": [[80, 141], ["len", "range", "ensemble_selection.EnsembleSelection._sorted_initialization", "numpy.zeros", "len", "numpy.zeros", "enumerate", "numpy.argwhere().flatten", "ensemble_selection.EnsembleSelection.random_state.choice", "ensemble.append", "trajectory.append", "order.append", "ensemble.append", "order.append", "numpy.array().mean", "ensemble_selection.EnsembleSelection.calculate_score", "trajectory.append", "len", "numpy.zeros", "numpy.zeros", "len", "ensemble_selection.EnsembleSelection.calculate_score", "numpy.argwhere", "numpy.array", "float", "numpy.nanmin", "float", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._sorted_initialization", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score"], ["", "def", "_fast", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Fast version of Rich Caruana's ensemble selection method.\"\"\"", "\n", "self", ".", "num_input_models_", "=", "len", "(", "predictions", ")", "\n", "\n", "ensemble", "=", "[", "]", "\n", "trajectory", "=", "[", "]", "\n", "order", "=", "[", "]", "\n", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", "\n", "\n", "if", "self", ".", "sorted_initialization", ":", "\n", "            ", "n_best", "=", "20", "\n", "indices", "=", "self", ".", "_sorted_initialization", "(", "predictions", ",", "labels", ",", "n_best", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "ensemble", ".", "append", "(", "predictions", "[", "idx", "]", ")", "\n", "order", ".", "append", "(", "idx", ")", "\n", "ensemble_", "=", "np", ".", "array", "(", "ensemble", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "ensemble_performance", "=", "self", ".", "calculate_score", "(", "pred", "=", "ensemble_", ",", "y_true", "=", "labels", ")", "\n", "trajectory", ".", "append", "(", "ensemble_performance", ")", "\n", "", "ensemble_size", "-=", "n_best", "\n", "\n", "", "for", "i", "in", "range", "(", "ensemble_size", ")", ":", "\n", "            ", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "predictions", ")", ")", ")", "\n", "s", "=", "len", "(", "ensemble", ")", "\n", "if", "s", "==", "0", ":", "\n", "                ", "weighted_ensemble_prediction", "=", "np", ".", "zeros", "(", "predictions", "[", "0", "]", ".", "shape", ")", "\n", "", "else", ":", "\n", "# Memory-efficient averaging!", "\n", "                ", "ensemble_prediction", "=", "np", ".", "zeros", "(", "ensemble", "[", "0", "]", ".", "shape", ")", "\n", "for", "pred", "in", "ensemble", ":", "\n", "                    ", "ensemble_prediction", "+=", "pred", "\n", "", "ensemble_prediction", "/=", "s", "\n", "\n", "weighted_ensemble_prediction", "=", "(", "s", "/", "float", "(", "s", "+", "1", ")", ")", "*", "ensemble_prediction", "\n", "", "fant_ensemble_prediction", "=", "np", ".", "zeros", "(", "weighted_ensemble_prediction", ".", "shape", ")", "\n", "for", "j", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "# TODO: this could potentially be vectorized! - let's profile", "\n", "# the script first!", "\n", "                ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                    ", "fant_ensemble_prediction", "[", ":", ",", ":", "]", "=", "weighted_ensemble_prediction", "+", "(", "1.", "/", "float", "(", "s", "+", "1", ")", ")", "*", "pred", "\n", "", "else", ":", "\n", "                    ", "fant_ensemble_prediction", "[", ":", "]", "=", "weighted_ensemble_prediction", "+", "(", "1.", "/", "float", "(", "s", "+", "1", ")", ")", "*", "pred", "\n", "\n", "", "scores", "[", "j", "]", "=", "-", "self", ".", "calculate_score", "(", "pred", "=", "fant_ensemble_prediction", ",", "y_true", "=", "labels", ")", "\n", "\n", "", "all_best", "=", "np", ".", "argwhere", "(", "scores", "==", "np", ".", "nanmin", "(", "scores", ")", ")", ".", "flatten", "(", ")", "\n", "best", "=", "self", ".", "random_state", ".", "choice", "(", "all_best", ")", "\n", "ensemble", ".", "append", "(", "predictions", "[", "best", "]", ")", "\n", "trajectory", ".", "append", "(", "scores", "[", "best", "]", ")", "\n", "order", ".", "append", "(", "best", ")", "\n", "\n", "# Handle special case", "\n", "if", "len", "(", "predictions", ")", "==", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "indices_", "=", "order", "\n", "self", ".", "trajectory_", "=", "trajectory", "\n", "self", ".", "train_score_", "=", "trajectory", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection._slow": [[142, 182], ["len", "range", "numpy.array", "numpy.array", "ensemble_selection.EnsembleSelection._sorted_initialization", "numpy.zeros", "enumerate", "numpy.nanargmin", "ensemble.append", "trajectory.append", "order.append", "ensemble.append", "order.append", "numpy.array().mean", "ensemble_selection.EnsembleSelection.calculate_score", "trajectory.append", "ensemble.append", "numpy.mean", "ensemble.pop", "len", "numpy.array", "ensemble_selection.EnsembleSelection.calculate_score", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._sorted_initialization", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score"], ["", "def", "_slow", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Rich Caruana's ensemble selection method.\"\"\"", "\n", "self", ".", "num_input_models_", "=", "len", "(", "predictions", ")", "\n", "\n", "ensemble", "=", "[", "]", "\n", "trajectory", "=", "[", "]", "\n", "order", "=", "[", "]", "\n", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", "\n", "\n", "if", "self", ".", "sorted_initialization", ":", "\n", "            ", "n_best", "=", "20", "\n", "indices", "=", "self", ".", "_sorted_initialization", "(", "predictions", ",", "labels", ",", "n_best", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "ensemble", ".", "append", "(", "predictions", "[", "idx", "]", ")", "\n", "order", ".", "append", "(", "idx", ")", "\n", "ensemble_", "=", "np", ".", "array", "(", "ensemble", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "ensemble_performance", "=", "self", ".", "calculate_score", "(", "pred", "=", "ensemble_", ",", "y_true", "=", "labels", ")", "\n", "trajectory", ".", "append", "(", "ensemble_performance", ")", "\n", "", "ensemble_size", "-=", "n_best", "\n", "\n", "", "for", "i", "in", "range", "(", "ensemble_size", ")", ":", "\n", "            ", "scores", "=", "np", ".", "zeros", "(", "[", "predictions", ".", "shape", "[", "0", "]", "]", ")", "\n", "for", "j", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "                ", "ensemble", ".", "append", "(", "pred", ")", "\n", "ensemble_prediction", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "ensemble", ")", ",", "axis", "=", "0", ")", "\n", "scores", "[", "j", "]", "=", "-", "self", ".", "calculate_score", "(", "pred", "=", "ensemble_prediction", ",", "y_true", "=", "labels", ")", "\n", "ensemble", ".", "pop", "(", ")", "\n", "", "best", "=", "np", ".", "nanargmin", "(", "scores", ")", "\n", "ensemble", ".", "append", "(", "predictions", "[", "best", "]", ")", "\n", "trajectory", ".", "append", "(", "scores", "[", "best", "]", ")", "\n", "order", ".", "append", "(", "best", ")", "\n", "\n", "# Handle special case", "\n", "if", "len", "(", "predictions", ")", "==", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "indices_", "=", "np", ".", "array", "(", "order", ")", "\n", "self", ".", "trajectory_", "=", "np", ".", "array", "(", "trajectory", ")", "\n", "self", ".", "train_score_", "=", "trajectory", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection._calculate_weights": [[183, 194], ["collections.Counter().most_common", "numpy.zeros", "numpy.sum", "collections.Counter", "float", "numpy.sum"], "methods", ["None"], ["", "def", "_calculate_weights", "(", "self", ")", ":", "\n", "        ", "ensemble_members", "=", "Counter", "(", "self", ".", "indices_", ")", ".", "most_common", "(", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_input_models_", ",", ")", ",", "dtype", "=", "float", ")", "\n", "for", "ensemble_member", "in", "ensemble_members", ":", "\n", "            ", "weight", "=", "float", "(", "ensemble_member", "[", "1", "]", ")", "/", "self", ".", "ensemble_size", "\n", "weights", "[", "ensemble_member", "[", "0", "]", "]", "=", "weight", "\n", "\n", "", "if", "np", ".", "sum", "(", "weights", ")", "<", "1", ":", "\n", "            ", "weights", "=", "weights", "/", "np", ".", "sum", "(", "weights", ")", "\n", "\n", "", "self", ".", "weights_", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection._sorted_initialization": [[195, 203], ["numpy.zeros", "enumerate", "ensemble_selection.EnsembleSelection.calculate_score", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score"], ["", "def", "_sorted_initialization", "(", "self", ",", "predictions", ",", "labels", ",", "n_best", ")", ":", "\n", "        ", "perf", "=", "np", ".", "zeros", "(", "[", "predictions", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "for", "idx", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "perf", "[", "idx", "]", "=", "self", ".", "calculate_score", "(", "pred", "=", "predictions", ",", "y_true", "=", "labels", ")", "\n", "\n", "", "indices", "=", "np", ".", "argsort", "(", "perf", ")", "[", "perf", ".", "shape", "[", "0", "]", "-", "n_best", ":", "]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.predict": [[204, 244], ["ensemble_selection.EnsembleSelection.stats.keys", "numpy.asarray", "enumerate", "len", "numpy.average", "data.copy_", "mindware.components.feature_engineering.parse.construct_node", "numpy.count_nonzero", "numpy.average", "ValueError", "open", "pickle.load", "numpy.asarray.append", "numpy.asarray.append", "len", "numpy.asarray.append", "numpy.asarray.append", "estimator.predict_proba", "estimator.predict", "numpy.zeros", "numpy.zeros", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "cur_idx", "=", "0", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "_", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "estimator", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "data", ".", "copy_", "(", ")", "\n", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "\n", "X_test", "=", "_node", ".", "data", "[", "0", "]", "\n", "if", "cur_idx", "in", "self", ".", "model_idx", ":", "\n", "                    ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                        ", "predictions", ".", "append", "(", "estimator", ".", "predict_proba", "(", "X_test", ")", ")", "\n", "", "else", ":", "\n", "                        ", "predictions", ".", "append", "(", "estimator", ".", "predict", "(", "X_test", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "len", "(", "self", ".", "shape", ")", "==", "1", ":", "\n", "                        ", "predictions", ".", "append", "(", "np", ".", "zeros", "(", "len", "(", "_node", ".", "data", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "predictions", ".", "append", "(", "np", ".", "zeros", "(", "(", "len", "(", "_node", ".", "data", "[", "0", "]", ")", ",", "self", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "", "", "cur_idx", "+=", "1", "\n", "", "", "predictions", "=", "np", ".", "asarray", "(", "predictions", ")", "\n", "\n", "# if predictions.shape[0] == len(self.weights_),", "\n", "# predictions include those of zero-weight models.", "\n", "if", "predictions", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "return", "np", ".", "average", "(", "predictions", ",", "axis", "=", "0", ",", "weights", "=", "self", ".", "weights_", ")", "\n", "\n", "# if prediction model.shape[0] == len(non_null_weights),", "\n", "# predictions do not include those of zero-weight models.", "\n", "", "elif", "predictions", ".", "shape", "[", "0", "]", "==", "np", ".", "count_nonzero", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "non_null_weights", "=", "[", "w", "for", "w", "in", "self", ".", "weights_", "if", "w", ">", "0", "]", "\n", "return", "np", ".", "average", "(", "predictions", ",", "axis", "=", "0", ",", "weights", "=", "non_null_weights", ")", "\n", "\n", "# If none of the above applies, then something must have gone wrong.", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"The dimensions of ensemble predictions\"", "\n", "\" and ensemble weights do not match!\"", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.__str__": [[246, 255], ["str", "enumerate", "enumerate"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Ensemble Selection:\\n\\tTrajectory: %s\\n\\tMembers: %s'", "'\\n\\tWeights: %s\\n\\tIdentifiers: %s'", "%", "(", "' '", ".", "join", "(", "[", "'%d: %5f'", "%", "(", "idx", ",", "performance", ")", "\n", "for", "idx", ",", "performance", "in", "enumerate", "(", "self", ".", "trajectory_", ")", "]", ")", ",", "\n", "self", ".", "indices_", ",", "self", ".", "weights_", ",", "\n", "' '", ".", "join", "(", "[", "str", "(", "identifier", ")", "for", "idx", ",", "identifier", "in", "\n", "enumerate", "(", "self", ".", "identifiers_", ")", "\n", "if", "self", ".", "weights_", "[", "idx", "]", ">", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.refit": [[256, 272], ["None"], "methods", ["None"], ["", "def", "refit", "(", "self", ")", ":", "\n", "# Refit models on whole training data", "\n", "# model_cnt = 0", "\n", "# for algo_id in self.stats:", "\n", "#     model_to_eval = self.stats[algo_id]", "\n", "#     for idx, (config, _, model_path) in enumerate(model_to_eval):", "\n", "#         X, y = node.data", "\n", "#         if self.weights_[model_cnt] != 0:", "\n", "#             self.logger.info(\"Refit model %d\" % model_cnt)", "\n", "#             estimator = fetch_predict_estimator(self.task_type, config, X, y,", "\n", "#                                                 weight_balance=node.enable_balance,", "\n", "#                                                 data_balance=node.data_balance)", "\n", "#             with open(model_path, 'wb') as f:", "\n", "#                 pkl.dump(estimator, f)", "\n", "#         model_cnt += 1", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.get_models_with_weights": [[273, 285], ["enumerate", "output.sort", "output.append"], "methods", ["None"], ["", "def", "get_models_with_weights", "(", "self", ",", "models", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "identifier", "=", "self", ".", "identifiers_", "[", "i", "]", "\n", "model", "=", "models", "[", "identifier", "]", "\n", "if", "weight", ">", "0.0", ":", "\n", "                ", "output", ".", "append", "(", "(", "weight", ",", "model", ")", ")", "\n", "\n", "", "", "output", ".", "sort", "(", "reverse", "=", "True", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.get_selected_model_identifiers": [[286, 295], ["enumerate", "output.append"], "methods", ["None"], ["", "def", "get_selected_model_identifiers", "(", "self", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "identifier", "=", "self", ".", "identifiers_", "[", "i", "]", "\n", "if", "weight", ">", "0.0", ":", "\n", "                ", "output", ".", "append", "(", "identifier", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.get_validation_performance": [[296, 298], ["None"], "methods", ["None"], ["", "def", "get_validation_performance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trajectory_", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.ensemble_selection.EnsembleSelection.get_ens_model_info": [[299, 313], ["enumerate", "ens_config.append", "hasattr"], "methods", ["None"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "model_cnt", "=", "0", "\n", "ens_info", "=", "{", "}", "\n", "ens_config", "=", "[", "]", "\n", "for", "algo_id", "in", "self", ".", "stats", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "model_path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "'base_model_mask'", ")", "or", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "ens_config", ".", "append", "(", "(", "algo_id", ",", "config", ",", "model_path", ")", ")", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "ens_info", "[", "'ensemble_method'", "]", "=", "'ensemble_selection'", "\n", "ens_info", "[", "'config'", "]", "=", "ens_config", "\n", "ens_info", "[", "'ensemble_weights'", "]", "=", "self", ".", "weights_", "\n", "return", "ens_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.base_ensemble.BaseEnsembleModel.__init__": [[17, 82], ["str", "mindware.utils.logging_utils.get_logger", "base_ensemble.BaseEnsembleModel.stats.keys", "sum", "time.time", "enumerate", "len", "len", "mindware.components.ensemble.unnamed_ensemble.choose_base_models_classification", "mindware.components.ensemble.unnamed_ensemble.choose_base_models_regression", "base_ensemble.BaseEnsembleModel.node.copy_", "mindware.components.feature_engineering.parse.construct_node", "sklearn.model_selection.ShuffleSplit.split", "base_ensemble.BaseEnsembleModel.predictions.append", "numpy.array", "numpy.array", "numpy.array", "open", "pickle.load", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.ShuffleSplit", "model.predict_proba", "model.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.choose_base_models_classification", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.unnamed_ensemble.choose_base_models_regression", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["def", "__init__", "(", "self", ",", "stats", ",", "ensemble_method", ":", "str", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "data_node", ",", "\n", "output_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "stats", "=", "stats", "\n", "self", ".", "ensemble_method", "=", "ensemble_method", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "node", "=", "data_node", "\n", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "None", "\n", "self", ".", "timestamp", "=", "str", "(", "time", ".", "time", "(", ")", ")", "\n", "logger_name", "=", "'EnsembleBuilder'", "\n", "self", ".", "logger", "=", "get_logger", "(", "logger_name", ")", "\n", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "_", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "self", ".", "node", ".", "copy_", "(", ")", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "\n", "# TODO: Test size", "\n", "test_size", "=", "0.33", "\n", "X", ",", "y", "=", "_node", ".", "data", "\n", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                    ", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "1", ")", "\n", "\n", "", "for", "train_index", ",", "val_index", "in", "ss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "                    ", "X_valid", "=", "X", "[", "val_index", "]", "\n", "y_valid", "=", "y", "[", "val_index", "]", "\n", "\n", "", "if", "self", ".", "train_labels", "is", "not", "None", ":", "\n", "                    ", "assert", "(", "self", ".", "train_labels", "==", "y_valid", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "train_labels", "=", "y_valid", "\n", "\n", "", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                    ", "y_valid_pred", "=", "model", ".", "predict_proba", "(", "X_valid", ")", "\n", "", "else", ":", "\n", "                    ", "y_valid_pred", "=", "model", ".", "predict", "(", "X_valid", ")", "\n", "", "self", ".", "predictions", ".", "append", "(", "y_valid_pred", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "predictions", ")", "<", "self", ".", "ensemble_size", ":", "\n", "            ", "self", ".", "ensemble_size", "=", "len", "(", "self", ".", "predictions", ")", "\n", "\n", "", "if", "ensemble_method", "==", "'ensemble_selection'", ":", "\n", "            ", "return", "\n", "\n", "", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "self", ".", "base_model_mask", "=", "choose_base_models_classification", "(", "np", ".", "array", "(", "self", ".", "predictions", ")", ",", "\n", "self", ".", "ensemble_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_model_mask", "=", "choose_base_models_regression", "(", "np", ".", "array", "(", "self", ".", "predictions", ")", ",", "np", ".", "array", "(", "y_valid", ")", ",", "\n", "self", ".", "ensemble_size", ")", "\n", "", "self", ".", "ensemble_size", "=", "sum", "(", "self", ".", "base_model_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.base_ensemble.BaseEnsembleModel.fit": [[83, 85], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.base_ensemble.BaseEnsembleModel.predict": [[86, 88], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.base_ensemble.BaseEnsembleModel.get_ens_model_info": [[89, 91], ["None"], "methods", ["None"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.base_ensemble.BaseEnsembleModel.refit": [[93, 95], ["None"], "methods", ["None"], ["", "def", "refit", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.__init__": [[15, 58], ["mindware.components.ensemble.base_ensemble.BaseEnsembleModel.__init__", "warnings.warn", "LogisticRegression", "LinearRegression", "GradientBoostingClassifier", "LGBMRegressor", "LGBMClassifier"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stats", ",", "data_node", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "output_dir", "=", "None", ",", "\n", "meta_learner", "=", "'lightgbm'", ",", "\n", "kfold", "=", "5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "data_node", ",", "\n", "ensemble_method", "=", "'stacking'", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "task_type", "=", "task_type", ",", "\n", "metric", "=", "metric", ",", "\n", "output_dir", "=", "output_dir", ")", "\n", "\n", "self", ".", "kfold", "=", "kfold", "\n", "try", ":", "\n", "            ", "from", "lightgbm", "import", "LGBMClassifier", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Lightgbm is not imported! Stacking will use linear model instead!\"", ")", "\n", "meta_learner", "=", "'linear'", "\n", "\n", "", "self", ".", "meta_method", "=", "meta_learner", "\n", "\n", "# We use Xgboost as default meta-learner", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "if", "meta_learner", "==", "'linear'", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", ".", "logistic", "import", "LogisticRegression", "\n", "self", ".", "meta_learner", "=", "LogisticRegression", "(", "max_iter", "=", "1000", ")", "\n", "", "elif", "meta_learner", "==", "'gb'", ":", "\n", "                ", "from", "sklearn", ".", "ensemble", ".", "gradient_boosting", "import", "GradientBoostingClassifier", "\n", "self", ".", "meta_learner", "=", "GradientBoostingClassifier", "(", "learning_rate", "=", "0.05", ",", "subsample", "=", "0.7", ",", "max_depth", "=", "4", ",", "\n", "n_estimators", "=", "250", ")", "\n", "", "elif", "meta_learner", "==", "'lightgbm'", ":", "\n", "                ", "from", "lightgbm", "import", "LGBMClassifier", "\n", "self", ".", "meta_learner", "=", "LGBMClassifier", "(", "max_depth", "=", "4", ",", "learning_rate", "=", "0.05", ",", "n_estimators", "=", "150", ",", "n_jobs", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "meta_learner", "==", "'linear'", ":", "\n", "                ", "from", "sklearn", ".", "linear_model", "import", "LinearRegression", "\n", "self", ".", "meta_learner", "=", "LinearRegression", "(", ")", "\n", "", "elif", "meta_learner", "==", "'lightgbm'", ":", "\n", "                ", "from", "lightgbm", "import", "LGBMRegressor", "\n", "self", ".", "meta_learner", "=", "LGBMRegressor", "(", "max_depth", "=", "4", ",", "learning_rate", "=", "0.05", ",", "n_estimators", "=", "70", ",", "n_jobs", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.fit": [[59, 117], ["stacking.Stacking.stats.keys", "stacking.Stacking.meta_learner.fit", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "enumerate", "data.copy_", "mindware.components.feature_engineering.parse.construct_node", "open", "pickle.load", "enumerate", "sklearn.model_selection.KFold.split", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator", "open", "pickle.dump", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator.predict_proba", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator.predict().reshape", "os.path.join", "numpy.zeros", "numpy.zeros", "numpy.array", "len", "len", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator.predict", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator.fetch_predict_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "", "", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "# Split training data for phase 1 and phase 2", "\n", "        ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "kf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "kfold", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "KFold", "(", "n_splits", "=", "self", ".", "kfold", ")", "\n", "\n", "# Train basic models using a part of training data", "\n", "", "model_cnt", "=", "0", "\n", "suc_cnt", "=", "0", "\n", "feature_p2", "=", "None", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "data", ".", "copy_", "(", ")", "\n", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ",", "mode", "=", "'train'", ")", "\n", "\n", "X", ",", "y", "=", "_node", ".", "data", "\n", "if", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "for", "j", ",", "(", "train", ",", "test", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "X", ",", "y", ")", ")", ":", "\n", "                        ", "x_p1", ",", "x_p2", ",", "y_p1", ",", "_", "=", "X", "[", "train", "]", ",", "X", "[", "test", "]", ",", "y", "[", "train", "]", ",", "y", "[", "test", "]", "\n", "estimator", "=", "fetch_predict_estimator", "(", "self", ".", "task_type", ",", "algo_id", ",", "config", ",", "x_p1", ",", "y_p1", ",", "\n", "weight_balance", "=", "data", ".", "enable_balance", ",", "\n", "data_balance", "=", "data", ".", "data_balance", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s-model%d_part%d'", "%", "(", "self", ".", "timestamp", ",", "model_cnt", ",", "j", ")", ")", ",", "\n", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pkl", ".", "dump", "(", "estimator", ",", "f", ")", "\n", "", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                            ", "pred", "=", "estimator", ".", "predict_proba", "(", "x_p2", ")", "\n", "n_dim", "=", "np", ".", "array", "(", "pred", ")", ".", "shape", "[", "1", "]", "\n", "if", "n_dim", "==", "2", ":", "\n", "# Binary classificaion", "\n", "                                ", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "", "if", "feature_p2", "is", "None", ":", "\n", "                                ", "num_samples", "=", "len", "(", "train", ")", "+", "len", "(", "test", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "", "if", "n_dim", "==", "1", ":", "\n", "                                ", "feature_p2", "[", "test", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "[", ":", ",", "1", ":", "2", "]", "\n", "", "else", ":", "\n", "                                ", "feature_p2", "[", "test", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "\n", "", "", "else", ":", "\n", "                            ", "pred", "=", "estimator", ".", "predict", "(", "x_p2", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "if", "feature_p2", "is", "None", ":", "\n", "                                ", "num_samples", "=", "len", "(", "train", ")", "+", "len", "(", "test", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "", "feature_p2", "[", "test", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "pred", "\n", "", "", "suc_cnt", "+=", "1", "\n", "", "model_cnt", "+=", "1", "\n", "# Train model for stacking using the other part of training data", "\n", "", "", "self", ".", "meta_learner", ".", "fit", "(", "feature_p2", ",", "y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.get_feature": [[118, 167], ["stacking.Stacking.stats.keys", "enumerate", "data.copy_", "mindware.components.feature_engineering.parse.construct_node", "open", "pickle.load", "range", "open", "pickle.load", "pickle.load.predict_proba", "pickle.load.predict().reshape", "os.path.join", "len", "numpy.zeros", "len", "numpy.zeros", "numpy.array", "pickle.load.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "get_feature", "(", "self", ",", "data", ")", ":", "\n", "# Predict the labels via stacking", "\n", "        ", "feature_p2", "=", "None", "\n", "model_cnt", "=", "0", "\n", "suc_cnt", "=", "0", "\n", "for", "algo_id", "in", "self", ".", "stats", ".", "keys", "(", ")", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "_node", "=", "data", ".", "copy_", "(", ")", "\n", "\n", "_node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "\n", "if", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "kfold", ")", ":", "\n", "                        ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s-model%d_part%d'", "%", "(", "self", ".", "timestamp", ",", "model_cnt", ",", "j", ")", ")", ",", "\n", "'rb'", ")", "as", "f", ":", "\n", "                            ", "estimator", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                            ", "pred", "=", "estimator", ".", "predict_proba", "(", "_node", ".", "data", "[", "0", "]", ")", "\n", "n_dim", "=", "np", ".", "array", "(", "pred", ")", ".", "shape", "[", "1", "]", "\n", "if", "n_dim", "==", "2", ":", "\n", "                                ", "n_dim", "=", "1", "\n", "", "if", "feature_p2", "is", "None", ":", "\n", "                                ", "num_samples", "=", "len", "(", "_node", ".", "data", "[", "0", "]", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "# Get average predictions", "\n", "", "if", "n_dim", "==", "1", ":", "\n", "                                ", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "+", "pred", "[", ":", ",", "\n", "1", ":", "2", "]", "/", "self", ".", "kfold", "\n", "", "else", ":", "\n", "                                ", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "+", "pred", "/", "self", ".", "kfold", "\n", "", "", "else", ":", "\n", "                            ", "pred", "=", "estimator", ".", "predict", "(", "_node", ".", "data", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "n_dim", "=", "1", "\n", "# Initialize training matrix for phase 2", "\n", "if", "feature_p2", "is", "None", ":", "\n", "                                ", "num_samples", "=", "len", "(", "_node", ".", "data", "[", "0", "]", ")", "\n", "feature_p2", "=", "np", ".", "zeros", "(", "(", "num_samples", ",", "self", ".", "ensemble_size", "*", "n_dim", ")", ")", "\n", "# Get average predictions", "\n", "", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "=", "feature_p2", "[", ":", ",", "suc_cnt", "*", "n_dim", ":", "(", "suc_cnt", "+", "1", ")", "*", "n_dim", "]", "+", "pred", "/", "self", ".", "kfold", "\n", "", "", "suc_cnt", "+=", "1", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "return", "feature_p2", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.predict": [[168, 176], ["stacking.Stacking.get_feature", "stacking.Stacking.meta_learner.predict_proba", "stacking.Stacking.meta_learner.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.get_feature", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "feature_p2", "=", "self", ".", "get_feature", "(", "data", ")", "\n", "# Get predictions from meta-learner", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "final_pred", "=", "self", ".", "meta_learner", ".", "predict_proba", "(", "feature_p2", ")", "\n", "", "else", ":", "\n", "            ", "final_pred", "=", "self", ".", "meta_learner", ".", "predict", "(", "feature_p2", ")", "\n", "", "return", "final_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.ensemble.stacking.Stacking.get_ens_model_info": [[177, 192], ["enumerate", "os.path.join", "ens_config.append", "hasattr"], "methods", ["None"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "model_cnt", "=", "0", "\n", "ens_info", "=", "{", "}", "\n", "ens_config", "=", "[", "]", "\n", "for", "algo_id", "in", "self", ".", "stats", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "_", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "'base_model_mask'", ")", "or", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s-stacking-model%d'", "%", "(", "self", ".", "timestamp", ",", "model_cnt", ")", ")", "\n", "ens_config", ".", "append", "(", "(", "algo_id", ",", "config", ",", "model_path", ")", ")", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "ens_info", "[", "'ensemble_method'", "]", "=", "'stacking'", "\n", "ens_info", "[", "'config'", "]", "=", "ens_config", "\n", "ens_info", "[", "'meta_learner'", "]", "=", "self", ".", "meta_method", "\n", "return", "ens_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.__init__": [[58, 77], ["list", "list", "list", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metadata_dir", ",", "builtin_algorithms", ",", "builtin_datasets", ",", "metric", ",", "resource_n", ",", "\n", "task_type", "=", "None", ",", "rep", "=", "3", ")", ":", "\n", "        ", "self", ".", "task_type", "=", "task_type", "\n", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "self", ".", "task_prefix", "=", "'cls'", "\n", "", "elif", "task_type", "in", "RGS_TASKS", ":", "\n", "            ", "self", ".", "task_prefix", "=", "'rgs'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid task type %s!'", "%", "self", ".", "task_type", ")", "\n", "", "self", ".", "rep_num", "=", "rep", "\n", "self", ".", "metadata_dir", "=", "metadata_dir", "\n", "self", ".", "builtin_algorithms", "=", "builtin_algorithms", "\n", "self", ".", "builtin_datasets", "=", "builtin_datasets", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "resource_n", "=", "resource_n", "\n", "\n", "self", ".", "_task_ids", "=", "list", "(", ")", "\n", "self", ".", "_dataset_embedding", "=", "list", "(", ")", "\n", "self", ".", "_dataset_perf4algo", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.fetch_meta_runs": [[78, 89], ["os.path.join", "os.path.join", "os.path.exists", "data2[].index", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "def", "fetch_meta_runs", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "meta_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_dir", ",", "'meta_dataset_vec'", ")", "\n", "save_path2", "=", "os", ".", "path", ".", "join", "(", "meta_dataset_dir", ",", "'%s_meta_dataset_algo2perf.pkl'", "%", "self", ".", "task_prefix", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "save_path2", ")", "\n", "\n", "with", "open", "(", "save_path2", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data2", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "task_id", "=", "'init_%s'", "%", "dataset", "\n", "idx", "=", "data2", "[", "'task_ids'", "]", ".", "index", "(", "task_id", ")", "\n", "return", "data2", "[", "'perf4algo'", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.load_meta_data": [[90, 147], ["os.path.join", "os.path.join", "os.path.join", "list", "list", "list", "os.path.exists", "os.path.exists", "list", "numpy.asarray", "numpy.asarray", "numpy.asarray", "open", "pickle.load", "open", "pickle.load", "data1[].index", "list.append", "print", "sorted", "X.append", "task_ids.append", "metadata_manager.fetch_algorithm_runs", "perf4algo.append", "open", "dict", "pickle.dump", "open", "dict", "pickle.dump", "mindware.datasets.utils.calculate_metafeatures", "mindware.datasets.utils.calculate_metafeatures.keys"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.fetch_algorithm_runs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.calculate_metafeatures", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "load_meta_data", "(", "self", ")", ":", "\n", "        ", "X", ",", "perf4algo", ",", "task_ids", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "meta_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "metadata_dir", ",", "'meta_dataset_vec'", ")", "\n", "save_path1", "=", "os", ".", "path", ".", "join", "(", "meta_dataset_dir", ",", "'%s_meta_dataset_embedding.pkl'", "%", "self", ".", "task_prefix", ")", "\n", "save_path2", "=", "os", ".", "path", ".", "join", "(", "meta_dataset_dir", ",", "'%s_meta_dataset_algo2perf.pkl'", "%", "self", ".", "task_prefix", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path1", ")", "and", "os", ".", "path", ".", "exists", "(", "save_path2", ")", ":", "\n", "            ", "with", "open", "(", "save_path1", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data1", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "save_path2", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data2", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "_X", "=", "list", "(", ")", "\n", "for", "task_id", "in", "data2", "[", "'task_ids'", "]", ":", "\n", "                ", "idx", "=", "data1", "[", "'task_ids'", "]", ".", "index", "(", "task_id", ")", "\n", "_X", ".", "append", "(", "data1", "[", "'dataset_embedding'", "]", "[", "idx", "]", ")", "\n", "\n", "", "self", ".", "_dataset_embedding", "=", "np", ".", "asarray", "(", "_X", ")", "\n", "self", ".", "_task_ids", "=", "data2", "[", "'task_ids'", "]", "\n", "self", ".", "_dataset_perf4algo", "=", "data2", "[", "'perf4algo'", "]", "\n", "", "else", ":", "\n", "            ", "for", "_dataset", "in", "self", ".", "builtin_datasets", ":", "\n", "                ", "print", "(", "'Creating embedding for dataset - %s.'", "%", "_dataset", ")", "\n", "# Calculate metafeature for datasets.", "\n", "try", ":", "\n", "                    ", "feature_dict", "=", "calculate_metafeatures", "(", "_dataset", ",", "task_type", "=", "self", ".", "task_type", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "continue", "\n", "", "sorted_keys", "=", "sorted", "(", "feature_dict", ".", "keys", "(", ")", ")", "\n", "meta_instance", "=", "[", "feature_dict", "[", "key", "]", "for", "key", "in", "sorted_keys", "]", "\n", "\n", "X", ".", "append", "(", "meta_instance", ")", "\n", "\n", "task_ids", ".", "append", "(", "'init_%s'", "%", "_dataset", ")", "\n", "# Extract the performance for each algorithm on this dataset.", "\n", "scores", "=", "fetch_algorithm_runs", "(", "self", ".", "metadata_dir", ",", "_dataset", ",", "self", ".", "metric", ",", "\n", "self", ".", "resource_n", ",", "self", ".", "rep_num", ",", "self", ".", "builtin_algorithms", ")", "\n", "perf4algo", ".", "append", "(", "scores", ")", "\n", "\n", "", "self", ".", "_dataset_embedding", "=", "np", ".", "asarray", "(", "X", ")", "\n", "self", ".", "_dataset_perf4algo", "=", "np", ".", "asarray", "(", "perf4algo", ")", "\n", "\n", "self", ".", "_task_ids", "=", "task_ids", "\n", "\n", "with", "open", "(", "save_path1", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'task_ids'", "]", "=", "self", ".", "_task_ids", "\n", "data", "[", "'dataset_embedding'", "]", "=", "self", ".", "_dataset_embedding", "\n", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "save_path2", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'task_ids'", "]", "=", "self", ".", "_task_ids", "\n", "data", "[", "'algorithms_included'", "]", "=", "self", ".", "builtin_algorithms", "\n", "data", "[", "'perf4algo'", "]", "=", "self", ".", "_dataset_perf4algo", "\n", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n", "", "", "return", "self", ".", "_dataset_embedding", ",", "self", ".", "_dataset_perf4algo", ",", "self", ".", "_task_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.add_meta_runs": [[148, 150], ["None"], "methods", ["None"], ["", "def", "add_meta_runs", "(", "self", ",", "task_id", ",", "dataset_vec", ",", "algo_perf", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.update2file": [[151, 153], ["None"], "methods", ["None"], ["", "def", "update2file", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.get_feature_vector": [[8, 32], ["os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "open", "pickle.load", "data1[].index", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["def", "get_feature_vector", "(", "dataset", ",", "task_type", "=", "None", ")", ":", "\n", "    ", "meta_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "meta_dir", "=", "os", ".", "path", ".", "join", "(", "meta_dir", ",", "'..'", ")", "\n", "meta_dir", "=", "os", ".", "path", ".", "join", "(", "meta_dir", ",", "'meta_resource'", ")", "\n", "meta_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "meta_dir", ",", "'meta_dataset_vec'", ")", "\n", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "        ", "task_prefix", "=", "'cls'", "\n", "", "elif", "task_type", "in", "RGS_TASKS", ":", "\n", "        ", "task_prefix", "=", "'rgs'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid task type %s!'", "%", "task_type", ")", "\n", "", "save_path1", "=", "os", ".", "path", ".", "join", "(", "meta_dataset_dir", ",", "'%s_meta_dataset_embedding.pkl'", "%", "task_prefix", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "save_path1", ")", "\n", "with", "open", "(", "save_path1", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data1", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "task_id", "=", "'init_%s'", "%", "dataset", "\n", "\n", "if", "task_id", "in", "data1", "[", "'task_ids'", "]", ":", "\n", "        ", "idx", "=", "data1", "[", "'task_ids'", "]", ".", "index", "(", "task_id", ")", "\n", "return", "data1", "[", "'dataset_embedding'", "]", "[", "idx", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.fetch_algorithm_runs": [[34, 55], ["list", "list", "range", "os.path.join", "os.path.join", "os.path.join", "len", "list.append", "list.append", "os.path.exists", "open", "pickle.load", "list.append", "numpy.median"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "", "def", "fetch_algorithm_runs", "(", "meta_dir", ",", "dataset", ",", "metric", ",", "total_resource", ",", "rep", ",", "buildin_algorithms", ")", ":", "\n", "    ", "median_score", "=", "list", "(", ")", "\n", "for", "algo", "in", "buildin_algorithms", ":", "\n", "        ", "scores", "=", "list", "(", ")", "\n", "for", "run_id", "in", "range", "(", "rep", ")", ":", "\n", "            ", "meta_folder", "=", "os", ".", "path", ".", "join", "(", "meta_dir", ",", "'meta_runs'", ")", "\n", "meta_folder", "=", "os", ".", "path", ".", "join", "(", "meta_folder", ",", "metric", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "meta_folder", ",", "'%s-%s-%s-%d-%d.pkl'", "%", "(", "\n", "dataset", ",", "algo", ",", "metric", ",", "run_id", ",", "total_resource", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "with", "open", "(", "save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "res", "=", "pickle", ".", "load", "(", "f", ")", "\n", "scores", ".", "append", "(", "res", "[", "2", "]", ")", "\n", "\n", "", "", "if", "len", "(", "scores", ")", ">=", "1", ":", "\n", "            ", "median_score", ".", "append", "(", "np", ".", "median", "(", "scores", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_score", ".", "append", "(", "-", "np", ".", "inf", ")", "\n", "", "", "return", "median_score", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.__init__": [[19, 83], ["mindware.utils.logging_utils.get_logger", "len", "os.path.dirname", "os.path.join", "os.path.join", "set", "os.path.join", "os.path.join", "sorted", "mindware.components.meta_learning.algorithm_recomendation.metadata_manager.MetaDataManager", "len", "list", "hashlib.md5", "hashlib.md5.update", "hashlib.md5.hexdigest", "open", "pickle.load", "list", "base_advisor.BaseAdvisor.logger.info", "len", "ValueError", "set", "sorted", "exclude_str.encode", "base_advisor.BaseAdvisor.logger.info", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["    ", "def", "__init__", "(", "self", ",", "n_algorithm", "=", "3", ",", "\n", "task_type", "=", "None", ",", "\n", "metric", "=", "'bal_acc'", ",", "\n", "rep", "=", "3", ",", "\n", "total_resource", "=", "1200", ",", "\n", "meta_algorithm", "=", "'lightgbm'", ",", "\n", "exclude_datasets", "=", "None", ",", "\n", "meta_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "n_algorithm", "=", "n_algorithm", "\n", "self", ".", "n_algo_candidates", "=", "len", "(", "_cls_builtin_algorithms", ")", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "meta_algo", "=", "meta_algorithm", "\n", "self", ".", "rep", "=", "rep", "\n", "self", ".", "metric", "=", "metric", "\n", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "self", ".", "algorithms", "=", "_cls_builtin_algorithms", "\n", "self", ".", "n_algo_candidates", "=", "len", "(", "_cls_builtin_algorithms", ")", "\n", "if", "metric", "not", "in", "[", "'acc'", ",", "'bal_acc'", "]", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Meta information about metric-%s does not exist, use accuracy instead.'", "%", "str", "(", "metric", ")", ")", "\n", "metric", "=", "'acc'", "\n", "", "", "elif", "task_type", "in", "RGS_TASKS", ":", "\n", "            ", "self", ".", "algorithms", "=", "_rgs_builtin_algorithms", "\n", "self", ".", "n_algo_candidates", "=", "len", "(", "_rgs_builtin_algorithms", ")", "\n", "if", "metric", "not", "in", "[", "'mse'", "]", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Meta information about metric-%s does not exist, use accuracy instead.'", "%", "str", "(", "metric", ")", ")", "\n", "metric", "=", "'mse'", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid metric: %s.'", "%", "metric", ")", "\n", "\n", "", "self", ".", "total_resource", "=", "total_resource", "\n", "self", ".", "exclude_datasets", "=", "exclude_datasets", "\n", "\n", "builtin_loc", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "builtin_loc", "=", "os", ".", "path", ".", "join", "(", "builtin_loc", ",", "'..'", ")", "\n", "builtin_loc", "=", "os", ".", "path", ".", "join", "(", "builtin_loc", ",", "'meta_resource'", ")", "\n", "self", ".", "meta_dir", "=", "meta_dir", "if", "meta_dir", "is", "not", "None", "else", "builtin_loc", "\n", "\n", "if", "self", ".", "exclude_datasets", "is", "None", ":", "\n", "            ", "self", ".", "hash_id", "=", "'none'", "\n", "", "else", ":", "\n", "            ", "self", ".", "exclude_datasets", "=", "list", "(", "set", "(", "exclude_datasets", ")", ")", "\n", "exclude_str", "=", "','", ".", "join", "(", "sorted", "(", "self", ".", "exclude_datasets", ")", ")", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "exclude_str", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "self", ".", "hash_id", "=", "md5", ".", "hexdigest", "(", ")", "\n", "", "meta_datasets", "=", "set", "(", ")", "\n", "_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta_dir", ",", "'meta_dataset_vec'", ")", "\n", "\n", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "task_prefix", "=", "'cls'", "\n", "", "else", ":", "\n", "            ", "task_prefix", "=", "'rgs'", "\n", "\n", "", "embedding_path", "=", "os", ".", "path", ".", "join", "(", "_folder", ",", "'%s_meta_dataset_embedding.pkl'", "%", "task_prefix", ")", "\n", "with", "open", "(", "embedding_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "d", "=", "pkl", ".", "load", "(", "f", ")", "\n", "meta_datasets", "=", "d", "[", "'task_ids'", "]", "\n", "\n", "", "self", ".", "_builtin_datasets", "=", "sorted", "(", "list", "(", "meta_datasets", ")", ")", "\n", "\n", "self", ".", "metadata_manager", "=", "MetaDataManager", "(", "self", ".", "meta_dir", ",", "self", ".", "algorithms", ",", "self", ".", "_builtin_datasets", ",", "\n", "metric", ",", "total_resource", ",", "task_type", "=", "task_type", ",", "rep", "=", "rep", ")", "\n", "self", ".", "meta_learner", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.fetch_algorithm_set": [[84, 93], ["mindware.components.meta_learning.algorithm_recomendation.metadata_manager.get_feature_vector", "base_advisor.BaseAdvisor.predict", "numpy.argsort", "mindware.datasets.utils.calculate_metafeatures", "sorted", "mindware.datasets.utils.calculate_metafeatures.keys"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.get_feature_vector", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.calculate_metafeatures", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "fetch_algorithm_set", "(", "self", ",", "dataset", ",", "datanode", "=", "None", ")", ":", "\n", "        ", "input_vector", "=", "get_feature_vector", "(", "dataset", ",", "task_type", "=", "self", ".", "task_type", ")", "\n", "if", "input_vector", "is", "None", ":", "\n", "            ", "input_dict", "=", "calculate_metafeatures", "(", "dataset", "=", "datanode", ",", "task_type", "=", "self", ".", "task_type", ")", "\n", "sorted_keys", "=", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", "\n", "input_vector", "=", "[", "input_dict", "[", "key", "]", "for", "key", "in", "sorted_keys", "]", "\n", "", "preds", "=", "self", ".", "predict", "(", "input_vector", ")", "\n", "idxs", "=", "np", ".", "argsort", "(", "-", "preds", ")", "\n", "return", "[", "self", ".", "algorithms", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.fetch_run_results": [[94, 100], ["base_advisor.BaseAdvisor.metadata_manager.fetch_meta_runs", "numpy.argsort", "collections.OrderedDict", "zip"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.fetch_meta_runs"], ["", "def", "fetch_run_results", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "scores", "=", "self", ".", "metadata_manager", ".", "fetch_meta_runs", "(", "dataset", ")", "\n", "idxs", "=", "np", ".", "argsort", "(", "-", "scores", ")", "\n", "sorted_algos", "=", "[", "self", ".", "algorithms", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "sorted_scores", "=", "[", "scores", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "return", "OrderedDict", "(", "zip", "(", "sorted_algos", ",", "sorted_scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.fit": [[101, 103], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.base_advisor.BaseAdvisor.predict": [[104, 106], ["NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.gbm_advisor.GBMAdvisor.__init__": [[8, 16], ["mindware.utils.logging_utils.get_logger", "mindware.components.meta_learning.algorithm_recomendation.base_advisor.BaseAdvisor.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_algorithm", "=", "3", ",", "\n", "task_type", "=", "None", ",", "\n", "metric", "=", "'acc'", ",", "\n", "exclude_datasets", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "super", "(", ")", ".", "__init__", "(", "n_algorithm", ",", "task_type", ",", "metric", "=", "metric", ",", "\n", "meta_algorithm", "=", "'lightgbm'", ",", "exclude_datasets", "=", "exclude_datasets", ")", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.gbm_advisor.GBMAdvisor.create_pairwise_data": [[17, 52], ["zip", "list", "list", "numpy.isnan().any", "range", "numpy.asarray", "numpy.asarray", "range", "numpy.isnan", "list", "list.extend", "list.extend", "list", "list.extend", "list.extend", "X1.append", "labels.append", "X1.append", "labels.append", "numpy.zeros", "numpy.zeros", "meta_vec.copy", "vector_i.copy", "vector_j.copy", "meta_vec.copy", "vector_j.copy", "vector_i.copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_pairwise_data", "(", "X", ",", "y", ")", ":", "\n", "        ", "n_algo", "=", "y", ".", "shape", "[", "1", "]", "\n", "X1", ",", "labels", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "_instance_num", "=", "0", "\n", "\n", "for", "_X", ",", "_y", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "_X", ")", ".", "any", "(", ")", ":", "\n", "                ", "continue", "\n", "", "meta_vec", "=", "_X", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n_algo", ")", ":", "\n", "                    ", "if", "(", "_y", "[", "i", "]", "==", "-", "1", ")", "or", "(", "_y", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "vector_i", ",", "vector_j", "=", "np", ".", "zeros", "(", "n_algo", ")", ",", "np", ".", "zeros", "(", "n_algo", ")", "\n", "vector_i", "[", "i", "]", "=", "1", "\n", "vector_j", "[", "j", "]", "=", "1", "\n", "\n", "meta_x1", "=", "list", "(", "meta_vec", ".", "copy", "(", ")", ")", "\n", "meta_x1", ".", "extend", "(", "vector_i", ".", "copy", "(", ")", ")", "\n", "meta_x1", ".", "extend", "(", "vector_j", ".", "copy", "(", ")", ")", "\n", "\n", "meta_x2", "=", "list", "(", "meta_vec", ".", "copy", "(", ")", ")", "\n", "meta_x2", ".", "extend", "(", "vector_j", ".", "copy", "(", ")", ")", "\n", "meta_x2", ".", "extend", "(", "vector_i", ".", "copy", "(", ")", ")", "\n", "\n", "meta_label1", "=", "1", "if", "_y", "[", "i", "]", ">", "_y", "[", "j", "]", "else", "0", "\n", "meta_label2", "=", "1", "-", "meta_label1", "\n", "X1", ".", "append", "(", "meta_x1", ")", "\n", "labels", ".", "append", "(", "meta_label1", ")", "\n", "X1", ".", "append", "(", "meta_x2", ")", "\n", "labels", ".", "append", "(", "meta_label2", ")", "\n", "_instance_num", "+=", "1", "\n", "", "", "", "return", "np", ".", "asarray", "(", "X1", ")", ",", "np", ".", "asarray", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.gbm_advisor.GBMAdvisor.fit": [[53, 69], ["gbm_advisor.GBMAdvisor.metadata_manager.load_meta_data", "gbm_advisor.GBMAdvisor.create_pairwise_data", "lightgbm.LGBMClassifier", "print", "print", "gbm_advisor.GBMAdvisor.model.fit", "print"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.load_meta_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.create_pairwise_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "**", "meta_learner_config", ")", ":", "\n", "        ", "_X", ",", "_y", ",", "_", "=", "self", ".", "metadata_manager", ".", "load_meta_data", "(", ")", "\n", "# print(_X.shape, _y.shape)", "\n", "X", ",", "y", "=", "self", ".", "create_pairwise_data", "(", "_X", ",", "_y", ")", "\n", "\n", "# meta_learner_config_filename = self.meta_dir + 'meta_learner_%s_%s_%s_config.pkl' % (", "\n", "#     self.meta_algo, self.metric, 'none')", "\n", "# if os.path.exists(meta_learner_config_filename):", "\n", "#     with open(meta_learner_config_filename, 'rb') as f:", "\n", "#         meta_learner_config = pk.load(f)", "\n", "# print(meta_learner_config)", "\n", "self", ".", "model", "=", "lgb", ".", "LGBMClassifier", "(", "**", "meta_learner_config", ")", "\n", "print", "(", "X", ".", "shape", ",", "y", ".", "shape", ")", "\n", "print", "(", "'Start to fit LGB Model.'", ")", "\n", "self", ".", "model", ".", "fit", "(", "X", ",", "y", ")", "\n", "print", "(", "'Fitting LGB Model finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.gbm_advisor.GBMAdvisor.predict": [[70, 96], ["list", "range", "gbm_advisor.GBMAdvisor.model.predict", "numpy.zeros", "range", "range", "range", "numpy.array", "numpy.sum", "meta_feature.copy", "meta_feature.copy.extend", "meta_feature.copy.extend", "list.append", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "meta_feature", ")", ":", "\n", "        ", "n_algo", "=", "self", ".", "n_algo_candidates", "\n", "_X", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n_algo", ")", ":", "\n", "                ", "vector_i", ",", "vector_j", "=", "np", ".", "zeros", "(", "n_algo", ")", ",", "np", ".", "zeros", "(", "n_algo", ")", "\n", "vector_i", "[", "i", "]", "=", "1", "\n", "vector_j", "[", "j", "]", "=", "1", "\n", "\n", "meta_x", "=", "meta_feature", ".", "copy", "(", ")", "\n", "meta_x", ".", "extend", "(", "vector_i", ")", "\n", "meta_x", ".", "extend", "(", "vector_j", ")", "\n", "_X", ".", "append", "(", "meta_x", ")", "\n", "\n", "", "", "preds", "=", "self", ".", "model", ".", "predict", "(", "_X", ")", "\n", "\n", "instance_idx", "=", "0", "\n", "scores", "=", "np", ".", "zeros", "(", "n_algo", ")", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n_algo", ")", ":", "\n", "                ", "if", "preds", "[", "instance_idx", "]", "==", "1", ":", "\n", "                    ", "scores", "[", "i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "scores", "[", "j", "]", "+=", "1", "\n", "", "instance_idx", "+=", "1", "\n", "", "", "return", "np", ".", "array", "(", "scores", ")", "/", "np", ".", "sum", "(", "scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.__init__": [[14, 26], ["mindware.utils.logging_utils.get_logger", "mindware.components.meta_learning.algorithm_recomendation.base_advisor.BaseAdvisor.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "rep", "=", "3", ",", "\n", "metric", "=", "'acc'", ",", "\n", "n_algorithm", "=", "3", ",", "\n", "task_type", "=", "None", ",", "\n", "total_resource", "=", "1200", ",", "\n", "exclude_datasets", "=", "None", ",", "\n", "meta_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "super", "(", ")", ".", "__init__", "(", "n_algorithm", ",", "task_type", ",", "metric", ",", "rep", ",", "total_resource", ",", "\n", "'ranknet'", ",", "exclude_datasets", ",", "meta_dir", ")", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.create_pairwise_data": [[27, 59], ["zip", "list", "list", "list", "numpy.isnan().any", "range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "numpy.isnan", "list", "list.extend", "list", "list.extend", "X1.append", "X1.append", "X2.append", "X2.append", "labels.append", "labels.append", "numpy.zeros", "numpy.zeros", "meta_vec.copy", "vector_i.copy", "meta_vec.copy", "vector_j.copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_pairwise_data", "(", "X", ",", "y", ")", ":", "\n", "        ", "X1", ",", "X2", ",", "labels", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "n_algo", "=", "y", ".", "shape", "[", "1", "]", "\n", "\n", "for", "_X", ",", "_y", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "_X", ")", ".", "any", "(", ")", ":", "\n", "                ", "continue", "\n", "", "meta_vec", "=", "_X", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n_algo", ")", ":", "\n", "                    ", "if", "(", "_y", "[", "i", "]", "==", "-", "1", ")", "or", "(", "_y", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "vector_i", ",", "vector_j", "=", "np", ".", "zeros", "(", "n_algo", ")", ",", "np", ".", "zeros", "(", "n_algo", ")", "\n", "vector_i", "[", "i", "]", "=", "1", "\n", "vector_j", "[", "j", "]", "=", "1", "\n", "\n", "meta_x1", "=", "list", "(", "meta_vec", ".", "copy", "(", ")", ")", "\n", "meta_x1", ".", "extend", "(", "vector_i", ".", "copy", "(", ")", ")", "\n", "\n", "meta_x2", "=", "list", "(", "meta_vec", ".", "copy", "(", ")", ")", "\n", "meta_x2", ".", "extend", "(", "vector_j", ".", "copy", "(", ")", ")", "\n", "\n", "X1", ".", "append", "(", "meta_x1", ")", "\n", "X1", ".", "append", "(", "meta_x2", ")", "\n", "X2", ".", "append", "(", "meta_x2", ")", "\n", "X2", ".", "append", "(", "meta_x1", ")", "\n", "_label", "=", "1", "if", "_y", "[", "i", "]", ">", "_y", "[", "j", "]", "else", "0", "\n", "labels", ".", "append", "(", "_label", ")", "\n", "labels", ".", "append", "(", "1", "-", "_label", ")", "\n", "", "", "", "return", "np", ".", "asarray", "(", "X1", ")", ",", "np", ".", "asarray", "(", "X2", ")", ",", "np", ".", "asarray", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.create_model": [[60, 93], ["list", "list.append", "range", "keras.layers.Dense", "keras.layers.Input", "keras.layers.Input", "range", "keras.layers.Dense.", "keras.layers.Dense.", "keras.models.Model", "keras.models.Model.compile", "keras.layers.BatchNormalization", "len", "list.append", "len", "keras.layers.Subtract", "keras.layers.Activation", "keras.layers.Dense", "str", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_model", "(", "input_shape", ",", "hidden_layer_sizes", ",", "activation", ",", "solver", ")", ":", "\n", "        ", "\"\"\"\n        Build Keras Ranker NN model (Ranknet / LambdaRank NN).\n        \"\"\"", "\n", "# Neural network structure", "\n", "hidden_layers", "=", "list", "(", ")", "\n", "hidden_layers", ".", "append", "(", "BatchNormalization", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hidden_layer_sizes", ")", ")", ":", "\n", "            ", "hidden_layers", ".", "append", "(", "\n", "Dense", "(", "hidden_layer_sizes", "[", "i", "]", ",", "activation", "=", "activation", "[", "i", "]", ",", "name", "=", "str", "(", "activation", "[", "i", "]", ")", "+", "'_layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "", "h0", "=", "Dense", "(", "1", ",", "activation", "=", "'linear'", ",", "name", "=", "'Identity_layer'", ")", "\n", "input1", "=", "Input", "(", "shape", "=", "(", "input_shape", ",", ")", ",", "name", "=", "'Input_layer1'", ")", "\n", "input2", "=", "Input", "(", "shape", "=", "(", "input_shape", ",", ")", ",", "name", "=", "'Input_layer2'", ")", "\n", "x1", "=", "input1", "\n", "x2", "=", "input2", "\n", "for", "i", "in", "range", "(", "len", "(", "hidden_layer_sizes", ")", ")", ":", "\n", "            ", "x1", "=", "hidden_layers", "[", "i", "]", "(", "x1", ")", "\n", "x2", "=", "hidden_layers", "[", "i", "]", "(", "x2", ")", "\n", "", "x1", "=", "h0", "(", "x1", ")", "\n", "x2", "=", "h0", "(", "x2", ")", "\n", "# Subtract layer", "\n", "subtracted", "=", "Subtract", "(", "name", "=", "'Subtract_layer'", ")", "(", "[", "x1", ",", "x2", "]", ")", "\n", "# sigmoid", "\n", "out", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'Activation_layer'", ")", "(", "subtracted", ")", "\n", "# build model", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "input1", ",", "input2", "]", ",", "outputs", "=", "out", ")", "\n", "\n", "# categorical_hinge, binary_crossentropy", "\n", "# sgd = SGD(lr=0.3, momentum=0.9, decay=0.001, nesterov=False)", "\n", "model", ".", "compile", "(", "optimizer", "=", "solver", ",", "loss", "=", "\"categorical_hinge\"", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.fit": [[94, 117], ["ranknet_advisor.RankNetAdvisor.metadata_manager.load_meta_data", "ranknet_advisor.RankNetAdvisor.create_pairwise_data", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "os.path.join", "os.path.exists", "keras.models.load_model", "ranknet_advisor.RankNetAdvisor.create_model", "ranknet_advisor.RankNetAdvisor.model.fit", "ranknet_advisor.RankNetAdvisor.model.save"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.load_meta_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.create_pairwise_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.create_model", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "_X", ",", "_y", ",", "_", "=", "self", ".", "metadata_manager", ".", "load_meta_data", "(", ")", "\n", "X1", ",", "X2", ",", "y", "=", "self", ".", "create_pairwise_data", "(", "_X", ",", "_y", ")", "\n", "\n", "l1_size", "=", "kwargs", ".", "get", "(", "'layer1_size'", ",", "256", ")", "\n", "l2_size", "=", "kwargs", ".", "get", "(", "'layer2_size'", ",", "128", ")", "\n", "act_func", "=", "kwargs", ".", "get", "(", "'activation'", ",", "'tanh'", ")", "\n", "batch_size", "=", "kwargs", ".", "get", "(", "'batch_size'", ",", "128", ")", "\n", "\n", "meta_learner_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta_dir", ",", "\"meta_learner\"", ",", "'ranknet_model_%s_%s_%s.h5'", "%", "(", "\n", "self", ".", "meta_algo", ",", "self", ".", "metric", ",", "self", ".", "hash_id", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "meta_learner_filename", ")", ":", "\n", "# print(\"load model...\")", "\n", "            ", "self", ".", "model", "=", "load_model", "(", "meta_learner_filename", ")", "\n", "", "else", ":", "\n", "# print(\"fit model..\")", "\n", "            ", "self", ".", "model", "=", "self", ".", "create_model", "(", "X1", ".", "shape", "[", "1", "]", ",", "hidden_layer_sizes", "=", "(", "l1_size", ",", "l2_size", ",", ")", ",", "\n", "activation", "=", "(", "act_func", ",", "act_func", ",", ")", ",", "\n", "solver", "=", "'adam'", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "[", "X1", ",", "X2", "]", ",", "y", ",", "epochs", "=", "200", ",", "batch_size", "=", "batch_size", ")", "\n", "# print(\"save model...\")", "\n", "self", ".", "model", ".", "save", "(", "meta_learner_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor.RankNetAdvisor.predict": [[118, 129], ["list", "range", "numpy.asarray", "keras.backend.function", "[].ravel", "numpy.zeros", "list.append", "list", "list", "ranknet_advisor.RankNetAdvisor.model.layers[].get_output_at", "dataset_meta_feat.copy", "keras.backend.function."], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "dataset_meta_feat", ")", ":", "\n", "        ", "n_algo", "=", "self", ".", "n_algo_candidates", "\n", "_X", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "            ", "vector_i", "=", "np", ".", "zeros", "(", "n_algo", ")", "\n", "vector_i", "[", "i", "]", "=", "1", "\n", "item", "=", "list", "(", "dataset_meta_feat", ".", "copy", "(", ")", ")", "+", "list", "(", "vector_i", ")", "\n", "_X", ".", "append", "(", "item", ")", "\n", "", "X", "=", "np", ".", "asarray", "(", "_X", ")", "\n", "ranker_output", "=", "K", ".", "function", "(", "[", "self", ".", "model", ".", "layers", "[", "0", "]", ".", "input", "]", ",", "[", "self", ".", "model", ".", "layers", "[", "-", "3", "]", ".", "get_output_at", "(", "0", ")", "]", ")", "\n", "return", "ranker_output", "(", "[", "X", "]", ")", "[", "0", "]", ".", "ravel", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.CategoricalHingeLoss.forward": [[14, 18], ["torch.sum", "len", "torch.max", "torch.zeros_like"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "pos", "=", "(", "1.", "-", "target", ")", "*", "(", "1.", "-", "input", ")", "+", "target", "*", "input", "\n", "neg", "=", "target", "*", "(", "1.", "-", "input", ")", "+", "(", "1.", "-", "target", ")", "*", "input", "\n", "return", "torch", ".", "sum", "(", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "neg", "-", "pos", "+", "1.", ")", ",", "neg", "-", "pos", "+", "1.", ")", ")", "/", "len", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.PairwiseDataset.__init__": [[21, 23], ["y.reshape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X1", ",", "X2", ",", "y", ")", ":", "\n", "        ", "self", ".", "X1_array", ",", "self", ".", "X2_array", ",", "self", ".", "y_array", "=", "X1", ",", "X2", ",", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.PairwiseDataset.__getitem__": [[24, 29], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data1", "=", "from_numpy", "(", "self", ".", "X1_array", "[", "index", "]", ")", ".", "float", "(", ")", "\n", "data2", "=", "from_numpy", "(", "self", ".", "X2_array", "[", "index", "]", ")", ".", "float", "(", ")", "\n", "y_true", "=", "from_numpy", "(", "self", ".", "y_array", "[", "index", "]", ")", ".", "float", "(", ")", "\n", "return", "data1", ",", "data2", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.PairwiseDataset.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "X1_array", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNet.__init__": [[35, 50], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sigmoid", "ranknet_advisor_torch.RankNet.model.add_module", "ranknet_advisor_torch.RankNet.model.add_module", "ranknet_advisor_torch.RankNet.model.add_module", "range", "ranknet_advisor_torch.RankNet.model.add_module", "torch.nn.ReLU", "torch.nn.Tanh", "torch.nn.BatchNorm1d", "torch.nn.Linear", "len", "ranknet_advisor_torch.RankNet.model.add_module", "ranknet_advisor_torch.RankNet.model.add_module", "torch.nn.Linear", "str", "str", "torch.nn.Linear", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "hidden_layer_sizes", ",", "activation", ")", ":", "\n", "        ", "super", "(", "RankNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "output_sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "act_func_dict", "=", "{", "'relu'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "'tanh'", ":", "nn", ".", "Tanh", "(", ")", "}", "\n", "self", ".", "model", ".", "add_module", "(", "'BatchNorm'", ",", "nn", ".", "BatchNorm1d", "(", "input_shape", ")", ")", "\n", "self", ".", "model", ".", "add_module", "(", "'linear_'", "+", "str", "(", "hidden_layer_sizes", "[", "0", "]", ")", ",", "nn", ".", "Linear", "(", "input_shape", ",", "hidden_layer_sizes", "[", "0", "]", ")", ")", "\n", "self", ".", "model", ".", "add_module", "(", "'act_func_'", "+", "str", "(", "0", ")", ",", "self", ".", "act_func_dict", "[", "activation", "[", "0", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_layer_sizes", ")", ")", ":", "\n", "            ", "self", ".", "model", ".", "add_module", "(", "'linear_'", "+", "str", "(", "hidden_layer_sizes", "[", "i", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_layer_sizes", "[", "i", "-", "1", "]", ",", "hidden_layer_sizes", "[", "i", "]", ")", ")", "\n", "self", ".", "model", ".", "add_module", "(", "'act_func_'", "+", "str", "(", "i", ")", ",", "\n", "self", ".", "act_func_dict", "[", "activation", "[", "i", "]", "]", ")", "\n", "", "self", ".", "model", ".", "add_module", "(", "'output'", ",", "nn", ".", "Linear", "(", "hidden_layer_sizes", "[", "-", "1", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNet.forward": [[51, 55], ["ranknet_advisor_torch.RankNet.model", "ranknet_advisor_torch.RankNet.model", "ranknet_advisor_torch.RankNet.output_sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "s1", "=", "self", ".", "model", "(", "input1", ")", "\n", "s2", "=", "self", ".", "model", "(", "input2", ")", "\n", "return", "self", ".", "output_sigmoid", "(", "s1", "-", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNet.predict": [[56, 58], ["ranknet_advisor_torch.RankNet.model().detach", "ranknet_advisor_torch.RankNet.model"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.__init__": [[61, 73], ["mindware.utils.logging_utils.get_logger", "mindware.components.meta_learning.algorithm_recomendation.base_advisor.BaseAdvisor.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "rep", "=", "3", ",", "\n", "metric", "=", "'acc'", ",", "\n", "n_algorithm", "=", "3", ",", "\n", "task_type", "=", "None", ",", "\n", "total_resource", "=", "1200", ",", "\n", "exclude_datasets", "=", "None", ",", "\n", "meta_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "super", "(", ")", ".", "__init__", "(", "n_algorithm", ",", "task_type", ",", "metric", ",", "rep", ",", "total_resource", ",", "\n", "'ranknet'", ",", "exclude_datasets", ",", "meta_dir", ")", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.create_pairwise_data": [[74, 106], ["zip", "list", "list", "list", "numpy.isnan().any", "range", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "numpy.isnan", "list", "list.extend", "list", "list.extend", "X1.append", "X1.append", "X2.append", "X2.append", "labels.append", "labels.append", "numpy.zeros", "numpy.zeros", "meta_vec.copy", "vector_i.copy", "meta_vec.copy", "vector_j.copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_pairwise_data", "(", "X", ",", "y", ")", ":", "\n", "        ", "X1", ",", "X2", ",", "labels", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "n_algo", "=", "y", ".", "shape", "[", "1", "]", "\n", "\n", "for", "_X", ",", "_y", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "_X", ")", ".", "any", "(", ")", ":", "\n", "                ", "continue", "\n", "", "meta_vec", "=", "_X", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n_algo", ")", ":", "\n", "                    ", "if", "(", "_y", "[", "i", "]", "==", "-", "1", ")", "or", "(", "_y", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "vector_i", ",", "vector_j", "=", "np", ".", "zeros", "(", "n_algo", ")", ",", "np", ".", "zeros", "(", "n_algo", ")", "\n", "vector_i", "[", "i", "]", "=", "1", "\n", "vector_j", "[", "j", "]", "=", "1", "\n", "\n", "meta_x1", "=", "list", "(", "meta_vec", ".", "copy", "(", ")", ")", "\n", "meta_x1", ".", "extend", "(", "vector_i", ".", "copy", "(", ")", ")", "\n", "\n", "meta_x2", "=", "list", "(", "meta_vec", ".", "copy", "(", ")", ")", "\n", "meta_x2", ".", "extend", "(", "vector_j", ".", "copy", "(", ")", ")", "\n", "\n", "X1", ".", "append", "(", "meta_x1", ")", "\n", "X1", ".", "append", "(", "meta_x2", ")", "\n", "X2", ".", "append", "(", "meta_x2", ")", "\n", "X2", ".", "append", "(", "meta_x1", ")", "\n", "_label", "=", "1", "if", "_y", "[", "i", "]", ">", "_y", "[", "j", "]", "else", "0", "\n", "labels", ".", "append", "(", "_label", ")", "\n", "labels", ".", "append", "(", "1", "-", "_label", ")", "\n", "", "", "", "return", "np", ".", "asarray", "(", "X1", ")", ",", "np", ".", "asarray", "(", "X2", ")", ",", "np", ".", "asarray", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.create_model": [[107, 110], ["ranknet_advisor_torch.RankNet"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_model", "(", "input_shape", ",", "hidden_layer_sizes", ",", "activation", ")", ":", "\n", "        ", "return", "RankNet", "(", "input_shape", ",", "hidden_layer_sizes", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.weights_init": [[111, 115], ["isinstance", "torch.nn.init.xavier_uniform_", "model.bias.data.zero_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "model", ".", "weight", ".", "data", ")", "# use xavier instead of default he_normal", "\n", "model", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.fit": [[116, 168], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "ranknet_advisor_torch.RankNetAdvisor.metadata_manager.load_meta_data", "ranknet_advisor_torch.RankNetAdvisor.create_pairwise_data", "ranknet_advisor_torch.PairwiseDataset", "torch.utils.data.DataLoader", "os.path.join", "os.path.exists", "torch.load", "ranknet_advisor_torch.RankNet", "ranknet_advisor_torch.RankNetAdvisor.model.apply", "torch.optim.Adam", "ranknet_advisor_torch.CategoricalHingeLoss", "ranknet_advisor_torch.RankNetAdvisor.model.train", "range", "torch.save", "ranknet_advisor_torch.RankNetAdvisor.model.parameters", "enumerate", "print", "torch.optim.Adam.zero_grad", "ranknet_advisor_torch.RankNetAdvisor.model", "CategoricalHingeLoss.", "CategoricalHingeLoss.backward", "torch.optim.Adam.step", "len", "sum", "CategoricalHingeLoss.item", "len", "ranknet_advisor_torch.RankNetAdvisor.detach().numpy().round", "y_true.detach().numpy", "len", "len", "ranknet_advisor_torch.RankNetAdvisor.detach().numpy", "y_true.detach", "ranknet_advisor_torch.RankNetAdvisor.detach"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.metadata_manager.MetaDataManager.load_meta_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.create_pairwise_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train"], ["", "", "def", "fit", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "l1_size", "=", "kwargs", ".", "get", "(", "'layer1_size'", ",", "256", ")", "\n", "l2_size", "=", "kwargs", ".", "get", "(", "'layer2_size'", ",", "128", ")", "\n", "act_func", "=", "kwargs", ".", "get", "(", "'activation'", ",", "'tanh'", ")", "\n", "batch_size", "=", "kwargs", ".", "get", "(", "'batch_size'", ",", "128", ")", "\n", "epochs", "=", "200", "\n", "\n", "_X", ",", "_y", ",", "_", "=", "self", ".", "metadata_manager", ".", "load_meta_data", "(", ")", "\n", "X1", ",", "X2", ",", "y", "=", "self", ".", "create_pairwise_data", "(", "_X", ",", "_y", ")", "\n", "\n", "train_data", "=", "PairwiseDataset", "(", "X1", ",", "X2", ",", "y", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "2", "\n", ")", "\n", "self", ".", "input_shape", "=", "X1", ".", "shape", "[", "1", "]", "\n", "\n", "meta_learner_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta_dir", ",", "\"meta_learner\"", ",", "'ranknet_model_%s_%s_%s.pth'", "%", "(", "\n", "self", ".", "meta_algo", ",", "self", ".", "metric", ",", "self", ".", "hash_id", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "meta_learner_filename", ")", ":", "\n", "# print(\"load model...\")", "\n", "            ", "self", ".", "model", "=", "torch", ".", "load", "(", "meta_learner_filename", ")", "\n", "", "else", ":", "\n", "# print(\"fit model...\")", "\n", "            ", "self", ".", "model", "=", "RankNet", "(", "X1", ".", "shape", "[", "1", "]", ",", "(", "l1_size", ",", "l2_size", ",", ")", ",", "(", "act_func", ",", "act_func", ",", ")", ")", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "loss_fun", "=", "CategoricalHingeLoss", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "                ", "train_loss", "=", "0", "\n", "train_samples", "=", "0", "\n", "train_acc", "=", "0", "\n", "for", "i", ",", "(", "data1", ",", "data2", ",", "y_true", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "y_pred", "=", "self", ".", "model", "(", "data1", ",", "data2", ")", "\n", "loss", "=", "loss_fun", "(", "y_pred", ",", "y_true", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "len", "(", "data1", ")", "\n", "train_samples", "+=", "len", "(", "data1", ")", "\n", "train_acc", "+=", "sum", "(", "y_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "round", "(", ")", "==", "y_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "print", "(", "'Epoch{}, loss : {}, acc : {}'", ".", "format", "(", "epoch", ",", "train_loss", "/", "len", "(", "train_data", ")", ",", "\n", "train_acc", "/", "len", "(", "train_data", ")", ")", ")", "\n", "\n", "# print(\"save model...\")", "\n", "", "torch", ".", "save", "(", "self", ".", "model", ",", "meta_learner_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.algorithm_recomendation.ranknet_advisor_torch.RankNetAdvisor.predict": [[169, 181], ["list", "range", "numpy.asarray", "torch.from_numpy().float", "ranknet_advisor_torch.RankNetAdvisor.model.eval", "ranknet_advisor_torch.RankNetAdvisor.model.predict().numpy", "ranknet_advisor_torch.RankNetAdvisor.ravel", "numpy.zeros", "list.append", "torch.from_numpy", "ranknet_advisor_torch.RankNetAdvisor.model.predict", "list", "list", "dataset_meta_feat.copy"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "", "def", "predict", "(", "self", ",", "dataset_meta_feat", ")", ":", "\n", "        ", "n_algo", "=", "self", ".", "n_algo_candidates", "\n", "_X", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "n_algo", ")", ":", "\n", "            ", "vector_i", "=", "np", ".", "zeros", "(", "n_algo", ")", "\n", "vector_i", "[", "i", "]", "=", "1", "\n", "_X", ".", "append", "(", "list", "(", "dataset_meta_feat", ".", "copy", "(", ")", ")", "+", "list", "(", "vector_i", ")", ")", "\n", "", "X", "=", "np", ".", "asarray", "(", "_X", ")", "\n", "X", "=", "from_numpy", "(", "X", ")", ".", "float", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "self", ".", "model", ".", "predict", "(", "X", ")", ".", "numpy", "(", ")", "\n", "return", "pred", ".", "ravel", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.AbstractMetaFeature.__init__": [[15, 18], ["mindware.utils.logging_utils.get_logger"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger"], ["@", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "=", "get_logger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.AbstractMetaFeature._calculate": [[19, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_calculate", "(", "cls", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.AbstractMetaFeature.__call__": [[23, 41], ["time.time", "time.time", "meta_feature.MetaFeatureValue", "scipy.sparse.issparse", "hasattr", "meta_feature.AbstractMetaFeature._calculate_sparse", "meta_feature.AbstractMetaFeature._calculate", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCA._calculate_sparse", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCASkewnessFirstPC._calculate"], ["", "def", "__call__", "(", "self", ",", "X", ",", "y", ",", "categorical", "=", "None", ")", ":", "\n", "        ", "if", "categorical", "is", "None", ":", "\n", "            ", "categorical", "=", "[", "False", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", "]", "\n", "", "starttime", "=", "time", ".", "time", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "scipy", ".", "sparse", ".", "issparse", "(", "X", ")", "and", "hasattr", "(", "self", ",", "\"_calculate_sparse\"", ")", ":", "\n", "                ", "value", "=", "self", ".", "_calculate_sparse", "(", "X", ",", "y", ",", "categorical", ")", "\n", "", "else", ":", "\n", "                ", "value", "=", "self", ".", "_calculate", "(", "X", ",", "y", ",", "categorical", ")", "\n", "", "comment", "=", "\"\"", "\n", "", "except", "MemoryError", "as", "e", ":", "\n", "            ", "value", "=", "None", "\n", "comment", "=", "\"Memory Error\"", "\n", "\n", "", "endtime", "=", "time", ".", "time", "(", ")", "\n", "return", "MetaFeatureValue", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "type_", ",", "\n", "0", ",", "0", ",", "value", ",", "endtime", "-", "starttime", ",", "comment", "=", "comment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeature.__init__": [[44, 47], ["meta_feature.AbstractMetaFeature.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MetaFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "type_", "=", "\"METAFEATURE\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.HelperFunction.__init__": [[50, 53], ["meta_feature.AbstractMetaFeature.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HelperFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "type_", "=", "\"HELPERFUNCTION\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.__init__": [[56, 64], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "type_", ",", "fold", ",", "repeat", ",", "value", ",", "time", ",", "comment", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "type_", "=", "type_", "\n", "self", ".", "fold", "=", "fold", "\n", "self", ".", "repeat", "=", "repeat", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "time", "=", "time", "\n", "self", ".", "comment", "=", "comment", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.to_arff_row": [[65, 73], ["None"], "methods", ["None"], ["", "def", "to_arff_row", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "type_", "==", "\"METAFEATURE\"", ":", "\n", "            ", "value", "=", "self", ".", "value", "\n", "", "else", ":", "\n", "            ", "value", "=", "\"?\"", "\n", "\n", "", "return", "[", "self", ".", "name", ",", "self", ".", "type_", ",", "self", ".", "fold", ",", "\n", "self", ".", "repeat", ",", "value", ",", "self", ".", "time", ",", "self", ".", "comment", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.__repr__": [[74, 81], ["tuple", "meta_feature.MetaFeatureValue.to_arff_row", "meta_feature.MetaFeatureValue.to_arff_row", "str", "meta_feature.MetaFeatureValue.to_arff_row"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.to_arff_row", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.to_arff_row", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.to_arff_row"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr", "=", "\"%s (type: %s, fold: %d, repeat: %d, value: %s, time: %3.3f, \"", "\"comment: %s)\"", "\n", "repr", "=", "repr", "%", "tuple", "(", "self", ".", "to_arff_row", "(", ")", "[", ":", "4", "]", "+", "\n", "[", "str", "(", "self", ".", "to_arff_row", "(", ")", "[", "4", "]", ")", "]", "+", "\n", "self", ".", "to_arff_row", "(", ")", "[", "5", ":", "]", ")", "\n", "return", "repr", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.__init__": [[84, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "metafeature_values", ",", "task_type", ")", ":", "\n", "        ", "assert", "task_type", "in", "TASK_TYPES", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "metafeature_values", "=", "metafeature_values", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures._get_arff": [[90, 106], ["dict", "sorted", "output[].append", "meta_feature.DatasetMetafeatures.metafeature_values[].to_arff_row"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.MetaFeatureValue.to_arff_row"], ["", "def", "_get_arff", "(", "self", ")", ":", "\n", "        ", "output", "=", "dict", "(", ")", "\n", "output", "[", "'relation'", "]", "=", "\"metafeatures_%s\"", "%", "(", "self", ".", "dataset_name", ")", "\n", "output", "[", "'description'", "]", "=", "\"\"", "\n", "output", "[", "'attributes'", "]", "=", "[", "(", "'name'", ",", "'STRING'", ")", ",", "\n", "(", "'type'", ",", "'STRING'", ")", ",", "\n", "(", "'fold'", ",", "'NUMERIC'", ")", ",", "\n", "(", "'repeat'", ",", "'NUMERIC'", ")", ",", "\n", "(", "'value'", ",", "'NUMERIC'", ")", ",", "\n", "(", "'time'", ",", "'NUMERIC'", ")", ",", "\n", "(", "'comment'", ",", "'STRING'", ")", "]", "\n", "output", "[", "'data'", "]", "=", "[", "]", "\n", "\n", "for", "key", "in", "sorted", "(", "self", ".", "metafeature_values", ")", ":", "\n", "            ", "output", "[", "'data'", "]", ".", "append", "(", "self", ".", "metafeature_values", "[", "key", "]", ".", "to_arff_row", "(", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dumps": [[107, 109], ["meta_feature.DatasetMetafeatures._get_arff"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures._get_arff"], ["", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_arff", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump": [[110, 118], ["meta_feature.DatasetMetafeatures._get_arff", "isinstance", "arff.dump", "open", "arff.dump"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures._get_arff", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "dump", "(", "self", ",", "path_or_filehandle", ")", ":", "\n", "        ", "output", "=", "self", ".", "_get_arff", "(", ")", "\n", "\n", "if", "isinstance", "(", "path_or_filehandle", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "path_or_filehandle", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "arff", ".", "dump", "(", "output", ",", "fh", ")", "\n", "", "", "else", ":", "\n", "            ", "arff", ".", "dump", "(", "output", ",", "path_or_filehandle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load": [[119, 135], ["isinstance", "input[].replace", "cls", "arff.load", "meta_feature.MetaFeatureValue", "metafeature_values.append", "open", "arff.load"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path_or_filehandle", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "path_or_filehandle", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "path_or_filehandle", ")", "as", "fh", ":", "\n", "                ", "input", "=", "arff", ".", "load", "(", "fh", ")", "\n", "", "", "else", ":", "\n", "            ", "input", "=", "arff", ".", "load", "(", "path_or_filehandle", ")", "\n", "\n", "", "dataset_name", "=", "input", "[", "'relation'", "]", ".", "replace", "(", "'metafeatures_'", ",", "''", ")", "\n", "metafeature_values", "=", "[", "]", "\n", "for", "item", "in", "input", "[", "'data'", "]", ":", "\n", "            ", "mf", "=", "MetaFeatureValue", "(", "*", "item", ")", "\n", "metafeature_values", ".", "append", "(", "mf", ")", "\n", "\n", "", "return", "cls", "(", "dataset_name", ",", "metafeature_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.__repr__": [[136, 156], ["io.StringIO", "io.StringIO.write", "io.StringIO.getvalue", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ",", "verbosity", "=", "0", ")", ":", "\n", "        ", "repr", "=", "StringIO", "(", ")", "\n", "repr", ".", "write", "(", "\"Metafeatures for dataset %s\\n\"", "%", "self", ".", "dataset_name", ")", "\n", "for", "name", "in", "self", ".", "metafeature_values", ":", "\n", "            ", "if", "verbosity", "==", "0", "and", "self", ".", "metafeature_values", "[", "name", "]", ".", "type_", "!=", "\"METAFEATURE\"", ":", "\n", "                ", "continue", "\n", "", "if", "verbosity", "==", "0", ":", "\n", "                ", "repr", ".", "write", "(", "\"  %s: %s\\n\"", "%", "\n", "(", "str", "(", "name", ")", ",", "str", "(", "self", ".", "metafeature_values", "[", "name", "]", ".", "value", ")", ")", ")", "\n", "", "elif", "verbosity", ">=", "1", ":", "\n", "                ", "repr", ".", "write", "(", "\"  %s: %10s  (%10fs)\\n\"", "%", "\n", "(", "str", "(", "name", ")", ",", "str", "(", "self", ".", "metafeature_values", "[", "\n", "name", "]", ".", "value", ")", "[", ":", "10", "]", ",", "\n", "self", ".", "metafeature_values", "[", "name", "]", ".", "time", ")", ")", "\n", "\n", "# Add the reason for a crash if one happened!", "\n", "", "if", "verbosity", ">", "1", "and", "self", ".", "metafeature_values", "[", "name", "]", ".", "comment", ":", "\n", "                ", "repr", ".", "write", "(", "\"    %s\\n\"", "%", "self", ".", "metafeature_values", "[", "name", "]", ".", "comment", ")", "\n", "\n", "", "", "return", "repr", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys": [[157, 159], ["meta_feature.DatasetMetafeatures.metafeature_values.keys"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metafeature_values", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load_values": [[160, 168], ["None"], "methods", ["None"], ["", "def", "load_values", "(", "self", ")", ":", "\n", "        ", "value_dict", "=", "{", "}", "\n", "for", "name", "in", "self", ".", "metafeature_values", ":", "\n", "            ", "if", "self", ".", "metafeature_values", "[", "name", "]", ".", "type_", "!=", "\"METAFEATURE\"", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "value_dict", "[", "name", "]", "=", "self", ".", "metafeature_values", "[", "name", "]", ".", "value", "\n", "", "", "return", "value_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.__getitem__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "metafeature_values", "[", "item", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.__init__": [[21, 24], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "functions", "=", "OrderedDict", "(", ")", "\n", "self", ".", "values", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.clear": [[25, 28], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "OrderedDict", "(", ")", "\n", "self", ".", "computation_time", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.__iter__": [[29, 31], ["meta_features.HelperFunctions.functions.__iter__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.ChallengerList.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.__getitem__": [[32, 34], ["meta_features.HelperFunctions.functions.__getitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__getitem__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.__setitem__": [[35, 37], ["meta_features.HelperFunctions.functions.__setitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.__delitem__": [[38, 40], ["meta_features.HelperFunctions.functions.__delitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__delitem__"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__delitem__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.__contains__": [[41, 43], ["meta_features.HelperFunctions.functions.__contains__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__contains__"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__contains__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.is_calculated": [[44, 49], ["None"], "methods", ["None"], ["", "def", "is_calculated", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Return if a helper function has already been executed.\n        Necessary as get_value() can return None if the helper function hasn't\n        been executed or if it returned None.\"\"\"", "\n", "return", "key", "in", "self", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.get_value": [[50, 52], ["meta_features.HelperFunctions.values.get"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "values", ".", "get", "(", "key", ")", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.set_value": [[53, 55], ["None"], "methods", ["None"], ["", "def", "set_value", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "self", ".", "values", "[", "key", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.HelperFunctions.define": [[56, 67], ["metafeature_class", "meta_features.HelperFunctions.__setitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__setitem__"], ["", "def", "define", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Decorator for adding helper functions to a \"dictionary\".\n        This behaves like a function decorating a function,\n        not a class decorating a function\"\"\"", "\n", "\n", "def", "wrapper", "(", "metafeature_class", ")", ":", "\n", "            ", "instance", "=", "metafeature_class", "(", ")", "\n", "self", ".", "__setitem__", "(", "name", ",", "instance", ")", "\n", "return", "instance", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__init__": [[70, 74], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "functions", "=", "OrderedDict", "(", ")", "\n", "self", ".", "dependencies", "=", "OrderedDict", "(", ")", "\n", "self", ".", "values", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.clear": [[75, 77], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__iter__": [[78, 80], ["meta_features.MetafeatureFunctions.functions.__iter__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.ChallengerList.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__getitem__": [[81, 83], ["meta_features.MetafeatureFunctions.functions.__getitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__getitem__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__setitem__": [[84, 86], ["meta_features.MetafeatureFunctions.functions.__setitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__delitem__": [[87, 89], ["meta_features.MetafeatureFunctions.functions.__delitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__delitem__"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__delitem__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__contains__": [[90, 92], ["meta_features.MetafeatureFunctions.functions.__contains__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__contains__"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "functions", ".", "__contains__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "values", "[", "key", "]", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.set_value": [[96, 98], ["None"], "methods", ["None"], ["", "def", "set_value", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "self", ".", "values", "[", "key", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.is_calculated": [[99, 104], ["None"], "methods", ["None"], ["", "def", "is_calculated", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Return if a helper function has already been executed.\n        Necessary as get_value() can return None if the helper function hasn't\n        been executed or if it returned None.\"\"\"", "\n", "return", "key", "in", "self", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_dependency": [[105, 109], ["meta_features.MetafeatureFunctions.dependencies.get"], "methods", ["None"], ["", "def", "get_dependency", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Return the dependency of metafeature \"name\".\n        \"\"\"", "\n", "return", "self", ".", "dependencies", ".", "get", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.define": [[110, 122], ["metafeature_class", "meta_features.MetafeatureFunctions.__setitem__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.__setitem__"], ["", "def", "define", "(", "self", ",", "name", ",", "dependency", "=", "None", ")", ":", "\n", "        ", "\"\"\"Decorator for adding metafeature functions to a \"dictionary\" of\n        metafeatures. This behaves like a function decorating a function,\n        not a class decorating a function\"\"\"", "\n", "\n", "def", "wrapper", "(", "metafeature_class", ")", ":", "\n", "            ", "instance", "=", "metafeature_class", "(", ")", "\n", "self", ".", "__setitem__", "(", "name", ",", "instance", ")", "\n", "self", ".", "dependencies", "[", "name", "]", "=", "dependency", "\n", "return", "instance", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfInstances._calculate": [[132, 134], ["float"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LogNumberOfInstances._calculate": [[139, 141], ["numpy.log", "metafeatures.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "metafeatures", ".", "get_value", "(", "\"NumberOfInstances\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfClasses._calculate": [[151, 156], ["len", "numpy.mean", "float", "len", "len", "numpy.unique", "numpy.unique", "range"], "methods", ["None"], ["def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "if", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "np", ".", "mean", "(", "[", "len", "(", "np", ".", "unique", "(", "y", "[", ":", ",", "i", "]", ")", ")", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "float", "(", "len", "(", "np", ".", "unique", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfFeatures._calculate": [[160, 162], ["float"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LogNumberOfFeatures._calculate": [[167, 169], ["numpy.log", "metafeatures.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "metafeatures", ".", "get_value", "(", "\"NumberOfFeatures\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MissingValues._calculate": [[173, 176], ["numpy.isfinite"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "missing", "=", "~", "np", ".", "isfinite", "(", "X", ")", "\n", "return", "missing", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MissingValues._calculate_sparse": [[177, 182], ["X.__class__", "numpy.isfinite"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "data", "=", "[", "True", "if", "not", "np", ".", "isfinite", "(", "x", ")", "else", "False", "for", "x", "in", "X", ".", "data", "]", "\n", "missing", "=", "X", ".", "__class__", "(", "(", "data", ",", "X", ".", "indices", ",", "X", ".", "indptr", ")", ",", "shape", "=", "X", ".", "shape", ",", "\n", "dtype", "=", "np", ".", "bool", ")", "\n", "return", "missing", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfInstancesWithMissingValues._calculate": [[187, 191], ["helper_functions.get_value", "helper_functions.get_value.sum", "float", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "missing", "=", "helper_functions", ".", "get_value", "(", "\"MissingValues\"", ")", "\n", "num_missing", "=", "missing", ".", "sum", "(", "axis", "=", "1", ")", "\n", "return", "float", "(", "np", ".", "sum", "(", "[", "1", "if", "num", ">", "0", "else", "0", "for", "num", "in", "num_missing", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfInstancesWithMissingValues._calculate_sparse": [[192, 200], ["helper_functions.get_value", "helper_functions.get_value.tocsr", "float", "numpy.sum", "numpy.sum", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "missing", "=", "helper_functions", ".", "get_value", "(", "\"MissingValues\"", ")", "\n", "new_missing", "=", "missing", ".", "tocsr", "(", ")", "\n", "num_missing", "=", "[", "\n", "np", ".", "sum", "(", "new_missing", ".", "data", "[", "new_missing", ".", "indptr", "[", "i", "]", ":", "new_missing", ".", "indptr", "[", "i", "+", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "new_missing", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "return", "float", "(", "np", ".", "sum", "(", "[", "1", "if", "num", ">", "0", "else", "0", "for", "num", "in", "num_missing", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PercentageOfInstancesWithMissingValues._calculate": [[205, 208], ["float", "metafeatures.get_value", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "metafeatures", ".", "get_value", "(", "\"NumberOfInstancesWithMissingValues\"", ")", "\n", "/", "float", "(", "metafeatures", "[", "\"NumberOfInstances\"", "]", "(", "X", ",", "y", ")", ".", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfFeaturesWithMissingValues._calculate": [[213, 217], ["helper_functions.get_value", "helper_functions.get_value.sum", "float", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "missing", "=", "helper_functions", ".", "get_value", "(", "\"MissingValues\"", ")", "\n", "num_missing", "=", "missing", ".", "sum", "(", "axis", "=", "0", ")", "\n", "return", "float", "(", "np", ".", "sum", "(", "[", "1", "if", "num", ">", "0", "else", "0", "for", "num", "in", "num_missing", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfFeaturesWithMissingValues._calculate_sparse": [[218, 226], ["helper_functions.get_value", "helper_functions.get_value.tocsc", "float", "numpy.sum", "numpy.sum", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "missing", "=", "helper_functions", ".", "get_value", "(", "\"MissingValues\"", ")", "\n", "new_missing", "=", "missing", ".", "tocsc", "(", ")", "\n", "num_missing", "=", "[", "np", ".", "sum", "(", "\n", "new_missing", ".", "data", "[", "new_missing", ".", "indptr", "[", "i", "]", ":", "new_missing", ".", "indptr", "[", "i", "+", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "missing", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n", "return", "float", "(", "np", ".", "sum", "(", "[", "1", "if", "num", ">", "0", "else", "0", "for", "num", "in", "num_missing", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PercentageOfFeaturesWithMissingValues._calculate": [[231, 234], ["float", "metafeatures.get_value", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "metafeatures", ".", "get_value", "(", "\"NumberOfFeaturesWithMissingValues\"", ")", "/", "float", "(", "metafeatures", "[", "\"NumberOfFeatures\"", "]", "(", "X", ",", "y", ")", ".", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfMissingValues._calculate": [[238, 240], ["float", "helper_functions.get_value().sum", "helper_functions.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "helper_functions", ".", "get_value", "(", "\"MissingValues\"", ")", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PercentageOfMissingValues._calculate": [[245, 248], ["float", "float", "metafeatures.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "metafeatures", ".", "get_value", "(", "\"NumberOfMissingValues\"", ")", ")", "/", "float", "(", "X", ".", "shape", "[", "0", "]", "*", "X", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfNumericFeatures._calculate": [[253, 255], ["len", "numpy.sum"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "len", "(", "categorical", ")", "-", "np", ".", "sum", "(", "categorical", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumberOfCategoricalFeatures._calculate": [[259, 261], ["numpy.sum"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "categorical", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.RatioNumericalToNominal._calculate": [[265, 273], ["float", "float"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "num_categorical", "=", "float", "(", "metafeatures", "[", "\n", "\"NumberOfCategoricalFeatures\"", "]", "(", "X", ",", "y", ",", "categorical", ")", ".", "value", ")", "\n", "num_numerical", "=", "float", "(", "metafeatures", "[", "\n", "\"NumberOfNumericFeatures\"", "]", "(", "X", ",", "y", ",", "categorical", ")", ".", "value", ")", "\n", "if", "num_categorical", "==", "0.0", ":", "\n", "            ", "return", "0.", "\n", "", "return", "num_numerical", "/", "num_categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.RatioNominalToNumerical._calculate": [[277, 286], ["float", "float"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "num_categorical", "=", "float", "(", "metafeatures", "[", "\n", "\"NumberOfCategoricalFeatures\"", "]", "(", "X", ",", "y", ",", "categorical", ")", ".", "value", ")", "\n", "num_numerical", "=", "float", "(", "metafeatures", "[", "\n", "\"NumberOfNumericFeatures\"", "]", "(", "X", ",", "y", ",", "categorical", ")", ".", "value", ")", "\n", "if", "num_numerical", "==", "0.0", ":", "\n", "            ", "return", "0.", "\n", "", "else", ":", "\n", "            ", "return", "num_categorical", "/", "num_numerical", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.DatasetRatio._calculate": [[291, 294], ["float", "float"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "metafeatures", "[", "\"NumberOfFeatures\"", "]", "(", "X", ",", "y", ")", ".", "value", ")", "/", "float", "(", "metafeatures", "[", "\"NumberOfInstances\"", "]", "(", "X", ",", "y", ")", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LogDatasetRatio._calculate": [[298, 300], ["numpy.log", "metafeatures.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "metafeatures", ".", "get_value", "(", "\"DatasetRatio\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.InverseDatasetRatio._calculate": [[304, 307], ["float", "float"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "float", "(", "metafeatures", "[", "\"NumberOfInstances\"", "]", "(", "X", ",", "y", ")", ".", "value", ")", "/", "float", "(", "metafeatures", "[", "\"NumberOfFeatures\"", "]", "(", "X", ",", "y", ")", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LogInverseDatasetRatio._calculate": [[312, 314], ["numpy.log", "metafeatures.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "metafeatures", ".", "get_value", "(", "\"InverseDatasetRatio\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.ClassOccurences._calculate": [[318, 329], ["len", "range", "collections.defaultdict", "occurences.append", "meta_features.ClassOccurences._calculate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCASkewnessFirstPC._calculate"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "if", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "occurences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "occurences", ".", "append", "(", "self", ".", "_calculate", "(", "X", ",", "y", "[", ":", ",", "i", "]", ",", "categorical", ")", ")", "\n", "", "return", "occurences", "\n", "", "else", ":", "\n", "            ", "occurence_dict", "=", "defaultdict", "(", "float", ")", "\n", "for", "value", "in", "y", ":", "\n", "                ", "occurence_dict", "[", "value", "]", "+=", "1", "\n", "", "return", "occurence_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.ClassProbabilityMin._calculate": [[333, 347], ["helper_functions.get_value", "numpy.iinfo", "len", "range", "helper_functions.get_value.values", "float", "float", "occurences[].values"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "occurences", "=", "helper_functions", ".", "get_value", "(", "\"ClassOccurences\"", ")", "\n", "\n", "min_value", "=", "np", ".", "iinfo", "(", "np", ".", "int64", ")", ".", "max", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "num_occurences", "in", "occurences", "[", "i", "]", ".", "values", "(", ")", ":", "\n", "                    ", "if", "num_occurences", "<", "min_value", ":", "\n", "                        ", "min_value", "=", "num_occurences", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "num_occurences", "in", "occurences", ".", "values", "(", ")", ":", "\n", "                ", "if", "num_occurences", "<", "min_value", ":", "\n", "                    ", "min_value", "=", "num_occurences", "\n", "", "", "", "return", "float", "(", "min_value", ")", "/", "float", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.ClassProbabilityMax._calculate": [[352, 366], ["helper_functions.get_value", "len", "range", "helper_functions.get_value.values", "float", "float", "occurences[].values"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "occurences", "=", "helper_functions", ".", "get_value", "(", "\"ClassOccurences\"", ")", "\n", "max_value", "=", "-", "1", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "num_occurences", "in", "occurences", "[", "i", "]", ".", "values", "(", ")", ":", "\n", "                    ", "if", "num_occurences", ">", "max_value", ":", "\n", "                        ", "max_value", "=", "num_occurences", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "num_occurences", "in", "occurences", ".", "values", "(", ")", ":", "\n", "                ", "if", "num_occurences", ">", "max_value", ":", "\n", "                    ", "max_value", "=", "num_occurences", "\n", "", "", "", "return", "float", "(", "max_value", ")", "/", "float", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.ClassProbabilityMean._calculate": [[370, 384], ["helper_functions.get_value", "len", "range", "numpy.array", "numpy.array", "numpy.array.extend", "helper_functions.get_value.values", "occurence_dict[].values"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "occurence_dict", "=", "helper_functions", ".", "get_value", "(", "\"ClassOccurences\"", ")", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "occurences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "occurences", ".", "extend", "(", "\n", "[", "occurrence", "for", "occurrence", "in", "occurence_dict", "[", "\n", "i", "]", ".", "values", "(", ")", "]", ")", "\n", "", "occurences", "=", "np", ".", "array", "(", "occurences", ")", "\n", "", "else", ":", "\n", "            ", "occurences", "=", "np", ".", "array", "(", "[", "occurrence", "for", "occurrence", "in", "occurence_dict", ".", "values", "(", ")", "]", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "", "return", "(", "occurences", "/", "y", ".", "shape", "[", "0", "]", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.ClassProbabilitySTD._calculate": [[388, 405], ["helper_functions.get_value", "len", "range", "numpy.mean", "numpy.array", "numpy.array", "stds.append", "helper_functions.get_value.values", "occurence_dict[].values"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "occurence_dict", "=", "helper_functions", ".", "get_value", "(", "\"ClassOccurences\"", ")", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "stds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "std", "=", "np", ".", "array", "(", "\n", "[", "occurrence", "for", "occurrence", "in", "occurence_dict", "[", "\n", "i", "]", ".", "values", "(", ")", "]", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "std", "=", "(", "std", "/", "y", ".", "shape", "[", "0", "]", ")", ".", "std", "(", ")", "\n", "stds", ".", "append", "(", "std", ")", "\n", "", "return", "np", ".", "mean", "(", "stds", ")", "\n", "", "else", ":", "\n", "            ", "occurences", "=", "np", ".", "array", "(", "[", "occurrence", "for", "occurrence", "in", "occurence_dict", ".", "values", "(", ")", "]", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "return", "(", "occurences", "/", "y", ".", "shape", "[", "0", "]", ")", ".", "std", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumSymbols._calculate": [[413, 421], ["enumerate", "numpy.unique", "numpy.sum", "symbols_per_column.append", "numpy.isfinite"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "symbols_per_column", "=", "[", "]", "\n", "for", "i", ",", "column", "in", "enumerate", "(", "X", ".", "T", ")", ":", "\n", "            ", "if", "categorical", "[", "i", "]", ":", "\n", "                ", "unique_values", "=", "np", ".", "unique", "(", "column", ")", "\n", "num_unique", "=", "np", ".", "sum", "(", "np", ".", "isfinite", "(", "unique_values", ")", ")", "\n", "symbols_per_column", ".", "append", "(", "num_unique", ")", "\n", "", "", "return", "symbols_per_column", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.NumSymbols._calculate_sparse": [[422, 431], ["X.tocsc", "range", "numpy.unique", "numpy.sum", "symbols_per_column.append", "numpy.isfinite", "X.tocsc.getcol"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "symbols_per_column", "=", "[", "]", "\n", "new_X", "=", "X", ".", "tocsc", "(", ")", "\n", "for", "i", "in", "range", "(", "new_X", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "categorical", "[", "i", "]", ":", "\n", "                ", "unique_values", "=", "np", ".", "unique", "(", "new_X", ".", "getcol", "(", "i", ")", ".", "data", ")", "\n", "num_unique", "=", "np", ".", "sum", "(", "np", ".", "isfinite", "(", "unique_values", ")", ")", "\n", "symbols_per_column", ".", "append", "(", "num_unique", ")", "\n", "", "", "return", "symbols_per_column", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SymbolsMin._calculate": [[435, 444], ["helper_functions.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "# The minimum can only be zero if there are no nominal features,", "\n", "# otherwise it is at least one", "\n", "# TODO: shouldn't this rather be two?", "\n", "        ", "minimum", "=", "None", "\n", "for", "unique", "in", "helper_functions", ".", "get_value", "(", "\"NumSymbols\"", ")", ":", "\n", "            ", "if", "unique", ">", "0", "and", "(", "minimum", "is", "None", "or", "unique", "<", "minimum", ")", ":", "\n", "                ", "minimum", "=", "unique", "\n", "", "", "return", "minimum", "if", "minimum", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SymbolsMax._calculate": [[448, 453], ["helper_functions.get_value", "max", "len", "max"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "values", "=", "helper_functions", ".", "get_value", "(", "\"NumSymbols\"", ")", "\n", "if", "len", "(", "values", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "max", "(", "max", "(", "values", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SymbolsMean._calculate": [[457, 463], ["numpy.nanmean", "numpy.isfinite", "helper_functions.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "# TODO: categorical attributes without a symbol don't count towards this", "\n", "# measure", "\n", "        ", "values", "=", "[", "val", "for", "val", "in", "helper_functions", ".", "get_value", "(", "\"NumSymbols\"", ")", "if", "val", ">", "0", "]", "\n", "mean", "=", "np", ".", "nanmean", "(", "values", ")", "\n", "return", "mean", "if", "np", ".", "isfinite", "(", "mean", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SymbolsSTD._calculate": [[467, 471], ["numpy.nanstd", "numpy.isfinite", "helper_functions.get_value"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "values", "=", "[", "val", "for", "val", "in", "helper_functions", ".", "get_value", "(", "\"NumSymbols\"", ")", "if", "val", ">", "0", "]", "\n", "std", "=", "np", ".", "nanstd", "(", "values", ")", "\n", "return", "std", "if", "np", ".", "isfinite", "(", "std", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SymbolsSum._calculate": [[475, 478], ["numpy.nansum", "helper_functions.get_value", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "sum", "=", "np", ".", "nansum", "(", "helper_functions", ".", "get_value", "(", "\"NumSymbols\"", ")", ")", "\n", "return", "sum", "if", "np", ".", "isfinite", "(", "sum", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.Kurtosisses._calculate": [[488, 494], ["range", "kurts.append", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "kurts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "categorical", "[", "i", "]", ":", "\n", "                ", "kurts", ".", "append", "(", "scipy", ".", "stats", ".", "kurtosis", "(", "X", "[", ":", ",", "i", "]", ")", ")", "\n", "", "", "return", "kurts", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.Kurtosisses._calculate_sparse": [[495, 504], ["X.tocsc", "range", "kurts.append", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "kurts", "=", "[", "]", "\n", "X_new", "=", "X", ".", "tocsc", "(", ")", "\n", "for", "i", "in", "range", "(", "X_new", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "categorical", "[", "i", "]", ":", "\n", "                ", "start", "=", "X_new", ".", "indptr", "[", "i", "]", "\n", "stop", "=", "X_new", ".", "indptr", "[", "i", "+", "1", "]", "\n", "kurts", ".", "append", "(", "scipy", ".", "stats", ".", "kurtosis", "(", "X_new", ".", "data", "[", "start", ":", "stop", "]", ")", ")", "\n", "", "", "return", "kurts", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.KurtosisMin._calculate": [[508, 512], ["helper_functions.get_value", "numpy.nanmin", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "kurts", "=", "helper_functions", ".", "get_value", "(", "\"Kurtosisses\"", ")", "\n", "minimum", "=", "np", ".", "nanmin", "(", "kurts", ")", "if", "len", "(", "kurts", ")", ">", "0", "else", "0", "\n", "return", "minimum", "if", "np", ".", "isfinite", "(", "minimum", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.KurtosisMax._calculate": [[516, 520], ["helper_functions.get_value", "numpy.nanmax", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "kurts", "=", "helper_functions", ".", "get_value", "(", "\"Kurtosisses\"", ")", "\n", "maximum", "=", "np", ".", "nanmax", "(", "kurts", ")", "if", "len", "(", "kurts", ")", ">", "0", "else", "0", "\n", "return", "maximum", "if", "np", ".", "isfinite", "(", "maximum", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.KurtosisMean._calculate": [[524, 528], ["helper_functions.get_value", "numpy.nanmean", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "kurts", "=", "helper_functions", ".", "get_value", "(", "\"Kurtosisses\"", ")", "\n", "mean", "=", "np", ".", "nanmean", "(", "kurts", ")", "if", "len", "(", "kurts", ")", ">", "0", "else", "0", "\n", "return", "mean", "if", "np", ".", "isfinite", "(", "mean", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.KurtosisSTD._calculate": [[532, 536], ["helper_functions.get_value", "numpy.nanstd", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "kurts", "=", "helper_functions", ".", "get_value", "(", "\"Kurtosisses\"", ")", "\n", "std", "=", "np", ".", "nanstd", "(", "kurts", ")", "if", "len", "(", "kurts", ")", ">", "0", "else", "0", "\n", "return", "std", "if", "np", ".", "isfinite", "(", "std", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.Skewnesses._calculate": [[540, 546], ["range", "skews.append", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "skews", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "categorical", "[", "i", "]", ":", "\n", "                ", "skews", ".", "append", "(", "scipy", ".", "stats", ".", "skew", "(", "X", "[", ":", ",", "i", "]", ")", ")", "\n", "", "", "return", "skews", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.Skewnesses._calculate_sparse": [[547, 556], ["X.tocsc", "range", "skews.append", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "skews", "=", "[", "]", "\n", "X_new", "=", "X", ".", "tocsc", "(", ")", "\n", "for", "i", "in", "range", "(", "X_new", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "categorical", "[", "i", "]", ":", "\n", "                ", "start", "=", "X_new", ".", "indptr", "[", "i", "]", "\n", "stop", "=", "X_new", ".", "indptr", "[", "i", "+", "1", "]", "\n", "skews", ".", "append", "(", "scipy", ".", "stats", ".", "skew", "(", "X_new", ".", "data", "[", "start", ":", "stop", "]", ")", ")", "\n", "", "", "return", "skews", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SkewnessMin._calculate": [[560, 564], ["helper_functions.get_value", "numpy.nanmin", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "skews", "=", "helper_functions", ".", "get_value", "(", "\"Skewnesses\"", ")", "\n", "minimum", "=", "np", ".", "nanmin", "(", "skews", ")", "if", "len", "(", "skews", ")", ">", "0", "else", "0", "\n", "return", "minimum", "if", "np", ".", "isfinite", "(", "minimum", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SkewnessMax._calculate": [[568, 572], ["helper_functions.get_value", "numpy.nanmax", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "skews", "=", "helper_functions", ".", "get_value", "(", "\"Skewnesses\"", ")", "\n", "maximum", "=", "np", ".", "nanmax", "(", "skews", ")", "if", "len", "(", "skews", ")", ">", "0", "else", "0", "\n", "return", "maximum", "if", "np", ".", "isfinite", "(", "maximum", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SkewnessMean._calculate": [[576, 580], ["helper_functions.get_value", "numpy.nanmean", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "skews", "=", "helper_functions", ".", "get_value", "(", "\"Skewnesses\"", ")", "\n", "mean", "=", "np", ".", "nanmean", "(", "skews", ")", "if", "len", "(", "skews", ")", ">", "0", "else", "0", "\n", "return", "mean", "if", "np", ".", "isfinite", "(", "mean", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.SkewnessSTD._calculate": [[584, 588], ["helper_functions.get_value", "numpy.nanstd", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "skews", "=", "helper_functions", ".", "get_value", "(", "\"Skewnesses\"", ")", "\n", "std", "=", "np", ".", "nanstd", "(", "skews", ")", "if", "len", "(", "skews", ")", ">", "0", "else", "0", "\n", "return", "std", "if", "np", ".", "isfinite", "(", "std", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.ClassEntropy._calculate": [[602, 616], ["range", "numpy.mean", "y.reshape.reshape.reshape", "collections.defaultdict", "entropies.append", "len", "scipy.stats.entropy", "scipy.stats.entropy", "scipy.stats.entropy", "scipy.stats.entropy"], "methods", ["None"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "labels", "=", "1", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "else", "y", ".", "shape", "[", "1", "]", "\n", "if", "labels", "==", "1", ":", "\n", "            ", "y", "=", "y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "entropies", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "labels", ")", ":", "\n", "            ", "occurence_dict", "=", "defaultdict", "(", "float", ")", "\n", "for", "value", "in", "y", "[", ":", ",", "i", "]", ":", "\n", "                ", "occurence_dict", "[", "value", "]", "+=", "1", "\n", "", "entropies", ".", "append", "(", "scipy", ".", "stats", ".", "entropy", "(", "[", "occurence_dict", "[", "key", "]", "for", "key", "in", "\n", "occurence_dict", "]", ",", "base", "=", "2", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "entropies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkLDA._calculate": [[647, 674], ["sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "len", "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "sklearn.multiclass.OneVsRestClassifier.predict", "sklearn.metrics.accuracy_score", "meta_features.LandmarkLDA.logger.warning", "meta_features.LandmarkLDA.logger.warning", "sklearn.multiclass.OneVsRestClassifier.fit", "sklearn.multiclass.OneVsRestClassifier", "sklearn.multiclass.OneVsRestClassifier.fit", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "discriminant_analysis", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "StratifiedKFold", "(", "n_splits", "=", "5", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "", "accuracy", "=", "0.", "\n", "try", ":", "\n", "            ", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "                ", "lda", "=", "sklearn", ".", "discriminant_analysis", ".", "LinearDiscriminantAnalysis", "(", ")", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                    ", "lda", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lda", "=", "OneVsRestClassifier", "(", "lda", ")", "\n", "lda", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "\n", "", "predictions", "=", "lda", ".", "predict", "(", "X", "[", "test", "]", ")", "\n", "accuracy", "+=", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "predictions", ",", "y", "[", "test", "]", ")", "\n", "", "return", "accuracy", "/", "10", "\n", "", "except", "scipy", ".", "linalg", ".", "LinAlgError", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"LDA failed: %s Returned 0 instead!\"", "%", "e", ")", "\n", "return", "np", ".", "NaN", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"LDA failed: %s Returned 0 instead!\"", "%", "e", ")", "\n", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkLDA._calculate_sparse": [[675, 677], ["None"], "methods", ["None"], ["", "", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkNaiveBayes._calculate": [[682, 703], ["sklearn.model_selection.KFold.split", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "sklearn.naive_bayes.GaussianNB", "sklearn.multiclass.OneVsRestClassifier.predict", "sklearn.metrics.accuracy_score", "len", "sklearn.multiclass.OneVsRestClassifier.fit", "sklearn.multiclass.OneVsRestClassifier", "sklearn.multiclass.OneVsRestClassifier.fit", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "naive_bayes", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "StratifiedKFold", "(", "n_splits", "=", "5", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "", "accuracy", "=", "0.", "\n", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "nb", "=", "sklearn", ".", "naive_bayes", ".", "GaussianNB", "(", ")", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "nb", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "else", ":", "\n", "                ", "nb", "=", "OneVsRestClassifier", "(", "nb", ")", "\n", "nb", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "\n", "", "predictions", "=", "nb", ".", "predict", "(", "X", "[", "test", "]", ")", "\n", "accuracy", "+=", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "predictions", ",", "y", "[", "test", "]", ")", "\n", "", "return", "accuracy", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkNaiveBayes._calculate_sparse": [[704, 706], ["None"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkDecisionTree._calculate": [[711, 733], ["sklearn.model_selection.KFold.split", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "sklearn.utils.check_random_state", "sklearn.tree.DecisionTreeClassifier", "sklearn.multiclass.OneVsRestClassifier.predict", "sklearn.metrics.accuracy_score", "len", "sklearn.multiclass.OneVsRestClassifier.fit", "sklearn.multiclass.OneVsRestClassifier", "sklearn.multiclass.OneVsRestClassifier.fit", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "tree", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "StratifiedKFold", "(", "n_splits", "=", "5", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "", "accuracy", "=", "0.", "\n", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "random_state", "=", "sklearn", ".", "utils", ".", "check_random_state", "(", "42", ")", "\n", "tree", "=", "sklearn", ".", "tree", ".", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "tree", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "else", ":", "\n", "                ", "tree", "=", "OneVsRestClassifier", "(", "tree", ")", "\n", "tree", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "\n", "", "predictions", "=", "tree", ".", "predict", "(", "X", "[", "test", "]", ")", "\n", "accuracy", "+=", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "predictions", ",", "y", "[", "test", "]", ")", "\n", "", "return", "accuracy", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkDecisionTree._calculate_sparse": [[734, 736], ["None"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkDecisionNodeLearner._calculate": [[747, 769], ["sklearn.model_selection.KFold.split", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "sklearn.utils.check_random_state", "sklearn.tree.DecisionTreeClassifier", "sklearn.multiclass.OneVsRestClassifier.predict", "sklearn.metrics.accuracy_score", "len", "sklearn.multiclass.OneVsRestClassifier.fit", "sklearn.multiclass.OneVsRestClassifier", "sklearn.multiclass.OneVsRestClassifier.fit", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "tree", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "StratifiedKFold", "(", "n_splits", "=", "5", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "5", ")", "\n", "\n", "", "accuracy", "=", "0.", "\n", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "random_state", "=", "sklearn", ".", "utils", ".", "check_random_state", "(", "42", ")", "\n", "node", "=", "sklearn", ".", "tree", ".", "DecisionTreeClassifier", "(", "\n", "criterion", "=", "\"entropy\"", ",", "max_depth", "=", "1", ",", "random_state", "=", "random_state", ",", "\n", "min_samples_split", "=", "2", ",", "min_samples_leaf", "=", "1", ",", "max_features", "=", "None", ")", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "node", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "else", ":", "\n", "                ", "node", "=", "OneVsRestClassifier", "(", "node", ")", "\n", "node", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "predictions", "=", "node", ".", "predict", "(", "X", "[", "test", "]", ")", "\n", "accuracy", "+=", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "predictions", ",", "y", "[", "test", "]", ")", "\n", "", "return", "accuracy", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkDecisionNodeLearner._calculate_sparse": [[770, 772], ["None"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkRandomNodeLearner._calculate": [[776, 794], ["sklearn.model_selection.KFold.split", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "sklearn.utils.check_random_state", "sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier.fit", "sklearn.tree.DecisionTreeClassifier.predict", "sklearn.metrics.accuracy_score", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "tree", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "StratifiedKFold", "(", "n_splits", "=", "5", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "5", ")", "\n", "", "accuracy", "=", "0.", "\n", "\n", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "random_state", "=", "sklearn", ".", "utils", ".", "check_random_state", "(", "42", ")", "\n", "node", "=", "sklearn", ".", "tree", ".", "DecisionTreeClassifier", "(", "\n", "criterion", "=", "\"entropy\"", ",", "max_depth", "=", "1", ",", "random_state", "=", "random_state", ",", "\n", "min_samples_split", "=", "2", ",", "min_samples_leaf", "=", "1", ",", "max_features", "=", "1", ")", "\n", "node", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "predictions", "=", "node", ".", "predict", "(", "X", "[", "test", "]", ")", "\n", "accuracy", "+=", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "predictions", ",", "y", "[", "test", "]", ")", "\n", "", "return", "accuracy", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.LandmarkRandomNodeLearner._calculate_sparse": [[795, 797], ["None"], "methods", ["None"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.Landmark1NN._calculate": [[828, 847], ["sklearn.model_selection.KFold.split", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "sklearn.neighbors.KNeighborsClassifier", "sklearn.multiclass.OneVsRestClassifier.predict", "sklearn.metrics.accuracy_score", "len", "sklearn.multiclass.OneVsRestClassifier.fit", "sklearn.multiclass.OneVsRestClassifier", "sklearn.multiclass.OneVsRestClassifier.fit", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "neighbors", "\n", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "StratifiedKFold", "(", "n_splits", "=", "5", ",", "random_state", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "kf", "=", "sklearn", ".", "model_selection", ".", "KFold", "(", "n_splits", "=", "5", ",", "random_state", "=", "1", ")", "\n", "\n", "", "accuracy", "=", "0.", "\n", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "kNN", "=", "sklearn", ".", "neighbors", ".", "KNeighborsClassifier", "(", "n_neighbors", "=", "1", ")", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", "or", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "kNN", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "else", ":", "\n", "                ", "kNN", "=", "OneVsRestClassifier", "(", "kNN", ")", "\n", "kNN", ".", "fit", "(", "X", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "", "predictions", "=", "kNN", ".", "predict", "(", "X", "[", "test", "]", ")", "\n", "accuracy", "+=", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "predictions", ",", "y", "[", "test", "]", ")", "\n", "", "return", "accuracy", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCA._calculate": [[861, 875], ["sklearn.decomposition.PCA", "numpy.random.RandomState", "numpy.arange", "range", "meta_features.PCA.logger.warning", "numpy.random.RandomState.shuffle", "sklearn.decomposition.PCA.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "decomposition", "\n", "pca", "=", "sklearn", ".", "decomposition", ".", "PCA", "(", "copy", "=", "True", ")", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", "indices", "=", "np", ".", "arange", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "rs", ".", "shuffle", "(", "indices", ")", "\n", "pca", ".", "fit", "(", "X", "[", "indices", "]", ")", "\n", "return", "pca", "\n", "", "except", "LinAlgError", "as", "e", ":", "\n", "                ", "pass", "\n", "", "", "self", ".", "logger", ".", "warning", "(", "\"Failed to compute a Principle Component Analysis\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCA._calculate_sparse": [[876, 894], ["numpy.random.RandomState", "numpy.arange", "X.astype", "range", "meta_features.PCA.logger.warning", "numpy.random.RandomState.shuffle", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "_calculate_sparse", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "import", "sklearn", ".", "decomposition", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", "indices", "=", "np", ".", "arange", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "# This is expensive, but necessary with scikit-learn 0.15", "\n", "Xt", "=", "X", ".", "astype", "(", "np", ".", "float64", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "rs", ".", "shuffle", "(", "indices", ")", "\n", "truncated_svd", "=", "sklearn", ".", "decomposition", ".", "TruncatedSVD", "(", "\n", "n_components", "=", "X", ".", "shape", "[", "1", "]", "-", "1", ",", "random_state", "=", "i", ",", "\n", "algorithm", "=", "\"randomized\"", ")", "\n", "truncated_svd", ".", "fit", "(", "Xt", "[", "indices", "]", ")", "\n", "return", "truncated_svd", "\n", "", "except", "LinAlgError", "as", "e", ":", "\n", "                ", "pass", "\n", "", "", "self", ".", "logger", ".", "warning", "(", "\"Failed to compute a Truncated SVD\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCAFractionOfComponentsFor95PercentVariance._calculate": [[899, 909], ["helper_functions.get_value", "float", "float", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "pca_", "=", "helper_functions", ".", "get_value", "(", "\"PCA\"", ")", "\n", "if", "pca_", "is", "None", ":", "\n", "            ", "return", "np", ".", "NaN", "\n", "", "sum_", "=", "0.", "\n", "idx", "=", "0", "\n", "while", "sum_", "<", "0.95", "and", "idx", "<", "len", "(", "pca_", ".", "explained_variance_ratio_", ")", ":", "\n", "            ", "sum_", "+=", "pca_", ".", "explained_variance_ratio_", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "return", "float", "(", "idx", ")", "/", "float", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCAKurtosisFirstPC._calculate": [[914, 925], ["helper_functions.get_value", "helper_functions.get_value.transform", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis", "scipy.stats.kurtosis"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "pca_", "=", "helper_functions", ".", "get_value", "(", "\"PCA\"", ")", "\n", "if", "pca_", "is", "None", ":", "\n", "            ", "return", "np", ".", "NaN", "\n", "", "components", "=", "pca_", ".", "components_", "\n", "pca_", ".", "components_", "=", "components", "[", ":", "1", "]", "\n", "transformed", "=", "pca_", ".", "transform", "(", "X", ")", "\n", "pca_", ".", "components_", "=", "components", "\n", "\n", "kurtosis", "=", "scipy", ".", "stats", ".", "kurtosis", "(", "transformed", ")", "\n", "return", "kurtosis", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.PCASkewnessFirstPC._calculate": [[930, 941], ["helper_functions.get_value", "helper_functions.get_value.transform", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew", "scipy.stats.skew"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_value", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["    ", "def", "_calculate", "(", "self", ",", "X", ",", "y", ",", "categorical", ")", ":", "\n", "        ", "pca_", "=", "helper_functions", ".", "get_value", "(", "\"PCA\"", ")", "\n", "if", "pca_", "is", "None", ":", "\n", "            ", "return", "np", ".", "NaN", "\n", "", "components", "=", "pca_", ".", "components_", "\n", "pca_", ".", "components_", "=", "components", "[", ":", "1", "]", "\n", "transformed", "=", "pca_", ".", "transform", "(", "X", ")", "\n", "pca_", ".", "components_", "=", "components", "\n", "\n", "skewness", "=", "scipy", ".", "stats", ".", "skew", "(", "transformed", ")", "\n", "return", "skewness", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.calculate_all_metafeatures_encoded_labels": [[943, 954], ["set", "set.update", "meta_features.calculate_all_metafeatures"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.calculate_all_metafeatures"], ["", "", "def", "calculate_all_metafeatures_encoded_labels", "(", "X", ",", "y", ",", "categorical", ",", "dataset_name", ",", "\n", "calculate", "=", "None", ",", "dont_calculate", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate only metafeatures for which a 1HotEncoded feature matrix is\n    necessery.\"\"\"", "\n", "\n", "calculate", "=", "set", "(", ")", "\n", "calculate", ".", "update", "(", "npy_metafeatures", ")", "\n", "\n", "return", "calculate_all_metafeatures", "(", "X", ",", "y", ",", "categorical", ",", "dataset_name", ",", "\n", "calculate", "=", "calculate", ",", "\n", "dont_calculate", "=", "dont_calculate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.calculate_all_metafeatures_with_labels": [[956, 966], ["copy.deepcopy.update", "meta_features.calculate_all_metafeatures", "set", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.calculate_all_metafeatures"], ["", "def", "calculate_all_metafeatures_with_labels", "(", "X", ",", "y", ",", "categorical", ",", "dataset_name", ",", "\n", "calculate", "=", "None", ",", "dont_calculate", "=", "None", ")", ":", "\n", "    ", "if", "dont_calculate", "is", "None", ":", "\n", "        ", "dont_calculate", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "        ", "dont_calculate", "=", "copy", ".", "deepcopy", "(", "dont_calculate", ")", "\n", "", "dont_calculate", ".", "update", "(", "npy_metafeatures", ")", "\n", "return", "calculate_all_metafeatures", "(", "X", ",", "y", ",", "categorical", ",", "dataset_name", ",", "\n", "calculate", "=", "calculate", ",", "\n", "dont_calculate", "=", "dont_calculate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.calculate_all_metafeatures": [[968, 1081], ["mindware.utils.logging_utils.get_logger", "helper_functions.clear", "metafeatures.clear", "dict", "set", "collections.deque", "collections.deque.extend", "mindware.components.meta_learning.meta_feature.meta_feature.DatasetMetafeatures", "len", "collections.deque.pop", "metafeatures.get_dependency", "mindware.utils.logging_utils.get_logger.debug", "metafeatures.set_value", "set.add", "scipy.sparse.issparse", "scipy.sparse.issparse", "sklearn.impute.SimpleImputer", "sklearn.impute.SimpleImputer.fit_transform", "any", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit_transform", "sklearn.utils.check_array", "numpy.random.RandomState", "numpy.arange", "np.random.RandomState.shuffle", "NotImplementedError", "X.copy", "sklearn.compose.ColumnTransformer", "sklearn.compose.ColumnTransformer.fit_transform", "scipy.sparse.isspmatrix", "scipy.sparse.isspmatrix", "scipy.sparse.issparse", "scipy.sparse.issparse", "ValueError", "X_transformed.todense.todense", "collections.deque.appendleft", "enumerate", "metafeatures.is_calculated", "mindware.utils.logging_utils.get_logger.debug", "helper_functions.set_value", "sklearn.preprocessing.OneHotEncoder", "helper_functions.is_calculated"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.clear", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.clear", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.get_dependency", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.set_value", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.is_calculated", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.set_value", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.MetafeatureFunctions.is_calculated"], ["", "def", "calculate_all_metafeatures", "(", "X", ",", "y", ",", "categorical", ",", "dataset_name", ",", "task_type", ",", "\n", "calculate", "=", "None", ",", "dont_calculate", "=", "None", ",", "densify_threshold", "=", "1000", ")", ":", "\n", "    ", "logger", "=", "get_logger", "(", "__name__", ")", "\n", "\n", "\"\"\"Calculate all metafeatures.\"\"\"", "\n", "helper_functions", ".", "clear", "(", ")", "\n", "metafeatures", ".", "clear", "(", ")", "\n", "mf_", "=", "dict", "(", ")", "\n", "\n", "visited", "=", "set", "(", ")", "\n", "to_visit", "=", "deque", "(", ")", "\n", "to_visit", ".", "extend", "(", "metafeatures", ")", "\n", "\n", "X_transformed", "=", "None", "\n", "y_transformed", "=", "None", "\n", "\n", "func_cls", "=", "[", "'NumberOfClasses'", ",", "'LogNumberOfFeatures'", ",", "\n", "'ClassProbabilityMin'", ",", "'ClassProbabilityMax'", ",", "\n", "'ClassProbabilityMean'", ",", "\"ClassProbabilitySTD\"", ",", "\n", "'ClassEntropy'", ",", "'LandmarkLDA'", ",", "\n", "'LandmarkNaiveBayes'", ",", "'LandmarkDecisionTree'", ",", "\n", "'LandmarkDecisionNodeLearner'", ",", "'LandmarkRandomNodeLearner'", ",", "\n", "'LandmarkWorstNodeLearner'", ",", "'Landmark1NN'", "]", "\n", "\n", "# TODO calculate the numpy metafeatures after all others to consume less", "\n", "# memory", "\n", "while", "len", "(", "to_visit", ")", ">", "0", ":", "\n", "        ", "name", "=", "to_visit", ".", "pop", "(", ")", "\n", "if", "calculate", "is", "not", "None", "and", "name", "not", "in", "calculate", ":", "\n", "            ", "continue", "\n", "", "if", "dont_calculate", "is", "not", "None", "and", "name", "in", "dont_calculate", ":", "\n", "            ", "continue", "\n", "", "if", "name", "in", "func_cls", "and", "task_type", "not", "in", "CLS_TASKS", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "name", "in", "npy_metafeatures", ":", "\n", "            ", "if", "X_transformed", "is", "None", ":", "\n", "# TODO make sure this is done as efficient as possible (no copy for", "\n", "# sparse matrices because of wrong sparse format)", "\n", "                ", "sparse", "=", "scipy", ".", "sparse", ".", "issparse", "(", "X", ")", "\n", "\n", "imputer", "=", "SimpleImputer", "(", "strategy", "=", "'most_frequent'", ",", "copy", "=", "False", ")", "\n", "X_transformed", "=", "imputer", ".", "fit_transform", "(", "X", ".", "copy", "(", ")", ")", "\n", "if", "any", "(", "categorical", ")", ":", "\n", "                    ", "categorical_idx", "=", "[", "idx", "for", "idx", ",", "i", "in", "enumerate", "(", "categorical", ")", "if", "i", "]", "\n", "ohe", "=", "ColumnTransformer", "(", "[", "(", "'one-hot'", ",", "OneHotEncoder", "(", ")", ",", "categorical_idx", ")", "]", ",", "remainder", "=", "\"passthrough\"", ")", "\n", "X_transformed", "=", "ohe", ".", "fit_transform", "(", "X_transformed", ")", "\n", "\n", "", "center", "=", "not", "scipy", ".", "sparse", ".", "isspmatrix", "(", "X_transformed", ")", "\n", "standard_scaler", "=", "StandardScaler", "(", "copy", "=", "False", ",", "with_mean", "=", "center", ")", "\n", "X_transformed", "=", "standard_scaler", ".", "fit_transform", "(", "X_transformed", ")", "\n", "categorical_transformed", "=", "[", "False", "]", "*", "X_transformed", ".", "shape", "[", "1", "]", "\n", "\n", "# Densify the transformed matrix", "\n", "if", "not", "sparse", "and", "scipy", ".", "sparse", ".", "issparse", "(", "X_transformed", ")", ":", "\n", "                    ", "bytes_per_float", "=", "X_transformed", ".", "dtype", ".", "itemsize", "\n", "num_elements", "=", "X_transformed", ".", "shape", "[", "0", "]", "*", "X_transformed", ".", "shape", "[", "1", "]", "\n", "megabytes_required", "=", "num_elements", "*", "bytes_per_float", "/", "1000", "/", "1000", "\n", "if", "megabytes_required", "<", "densify_threshold", ":", "\n", "                        ", "X_transformed", "=", "X_transformed", ".", "todense", "(", ")", "\n", "\n", "# This is not only important for datasets which are somehow", "\n", "# sorted in a strange way, but also prevents lda from failing in", "\n", "# some cases.", "\n", "# Because this is advanced indexing, a copy of the data is returned!!!", "\n", "", "", "X_transformed", "=", "check_array", "(", "X_transformed", ",", "\n", "force_all_finite", "=", "True", ",", "\n", "accept_sparse", "=", "'csr'", ")", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", "indices", "=", "np", ".", "arange", "(", "X_transformed", ".", "shape", "[", "0", "]", ")", "\n", "rs", ".", "shuffle", "(", "indices", ")", "\n", "# TODO Shuffle inplace", "\n", "X_transformed", "=", "X_transformed", "[", "indices", "]", "\n", "y_transformed", "=", "y", "[", "indices", "]", "\n", "\n", "", "X_", "=", "X_transformed", "\n", "y_", "=", "y_transformed", "\n", "categorical_", "=", "categorical_transformed", "\n", "", "else", ":", "\n", "            ", "X_", "=", "X", "\n", "y_", "=", "y", "\n", "categorical_", "=", "categorical", "\n", "\n", "", "dependency", "=", "metafeatures", ".", "get_dependency", "(", "name", ")", "\n", "if", "dependency", "is", "not", "None", ":", "\n", "            ", "is_metafeature", "=", "dependency", "in", "metafeatures", "\n", "is_helper_function", "=", "dependency", "in", "helper_functions", "\n", "\n", "if", "is_metafeature", "and", "is_helper_function", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "elif", "not", "is_metafeature", "and", "not", "is_helper_function", ":", "\n", "                ", "raise", "ValueError", "(", "dependency", ")", "\n", "", "elif", "is_metafeature", "and", "not", "metafeatures", ".", "is_calculated", "(", "dependency", ")", ":", "\n", "                ", "to_visit", ".", "appendleft", "(", "name", ")", "\n", "continue", "\n", "", "elif", "is_helper_function", "and", "not", "helper_functions", ".", "is_calculated", "(", "\n", "dependency", ")", ":", "\n", "                ", "logger", ".", "debug", "(", "\"%s: Going to calculate: %s\"", ",", "dataset_name", ",", "\n", "dependency", ")", "\n", "value", "=", "helper_functions", "[", "dependency", "]", "(", "X_", ",", "y_", ",", "categorical_", ")", "\n", "helper_functions", ".", "set_value", "(", "dependency", ",", "value", ")", "\n", "mf_", "[", "dependency", "]", "=", "value", "\n", "\n", "", "", "logger", ".", "debug", "(", "\"%s: Going to calculate: %s\"", ",", "dataset_name", ",", "\n", "name", ")", "\n", "\n", "value", "=", "metafeatures", "[", "name", "]", "(", "X_", ",", "y_", ",", "categorical_", ")", "\n", "metafeatures", ".", "set_value", "(", "name", ",", "value", ")", "\n", "mf_", "[", "name", "]", "=", "value", "\n", "visited", ".", "add", "(", "name", ")", "\n", "\n", "", "mf_", "=", "DatasetMetafeatures", "(", "dataset_name", ",", "mf_", ",", "task_type", "=", "task_type", ")", "\n", "return", "mf_", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.TLBO.__init__": [[108, 167], ["bo_optimizer.BaseFacade.__init__", "list", "list", "list", "rng.randint", "tlbo_optimizer.get_pretrain_surrogate_models", "acquisition_function.acquisition.EI", "optimizer.ei_optimization.InterleavedLocalAndRandomSearch", "optimizer.ei_optimization.RandomSearch", "optimizer.random_configuration_chooser.ChooserProb", "tlbo_optimizer.TLBO.get_initial_configs", "utils.util_funcs.get_rng", "models.rf_with_instances.RandomForestWithInstances", "models.gp_ensemble.GaussianProcessEnsemble", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.get_pretrain_surrogate_models", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.get_initial_configs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "\n", "config_space", ",", "\n", "metric", ":", "str", ",", "\n", "gp_fusion", ":", "str", "=", "'gpoe'", ",", "\n", "dataset_metafeature", "=", "None", ",", "\n", "meta_warmstart", ":", "bool", "=", "False", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "max_runs", "=", "200", ",", "\n", "initial_runs", "=", "5", ",", "\n", "task_id", "=", "None", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "task_id", ")", "\n", "self", ".", "gp_fusion", "=", "gp_fusion", "\n", "self", ".", "meta_warmstart", "=", "meta_warmstart", "\n", "self", ".", "meta_feature_scaler", "=", "None", "\n", "self", ".", "dataset_metafeature", "=", "dataset_metafeature", "\n", "self", ".", "init_num", "=", "initial_runs", "\n", "self", ".", "max_iterations", "=", "max_runs", "\n", "\n", "self", ".", "iteration_id", "=", "0", "\n", "self", ".", "sls_max_steps", "=", "1000", "\n", "self", ".", "sls_n_steps_plateau_walk", "=", "10", "\n", "self", ".", "time_limit_per_trial", "=", "time_limit_per_trial", "\n", "self", ".", "default_obj_value", "=", "MAXINT", "\n", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "_", ",", "rng", "=", "get_rng", "(", ")", "\n", "", "self", ".", "rng", "=", "rng", "\n", "\n", "self", ".", "configurations", "=", "list", "(", ")", "\n", "self", ".", "failed_configurations", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "\n", "# Initialize the basic component in BO.", "\n", "self", ".", "objective_function", "=", "objective_function", "\n", "seed", "=", "rng", ".", "randint", "(", "MAXINT", ")", "\n", "\n", "gp_models", "=", "get_pretrain_surrogate_models", "(", "self", ".", "config_space", ",", "metric", ")", "\n", "if", "gp_models", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "RandomForestWithInstances", "(", "config_space", ",", "seed", "=", "seed", ",", "normalize_y", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "GaussianProcessEnsemble", "(", "config_space", ",", "\n", "gp_models", ",", "\n", "gp_fusion", "=", "gp_fusion", ",", "\n", "seed", "=", "seed", ")", "\n", "", "self", ".", "acquisition_function", "=", "EI", "(", "self", ".", "model", ")", "\n", "self", ".", "optimizer", "=", "InterleavedLocalAndRandomSearch", "(", "\n", "acquisition_function", "=", "self", ".", "acquisition_function", ",", "\n", "config_space", "=", "self", ".", "config_space", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", ",", "\n", "max_steps", "=", "self", ".", "sls_max_steps", ",", "\n", "n_steps_plateau_walk", "=", "self", ".", "sls_n_steps_plateau_walk", ",", "\n", "n_sls_iterations", "=", "3", "\n", ")", "\n", "self", ".", "_random_search", "=", "RandomSearch", "(", "\n", "self", ".", "acquisition_function", ",", "self", ".", "config_space", ",", "rng", "\n", ")", "\n", "self", ".", "random_configuration_chooser", "=", "ChooserProb", "(", "prob", "=", "0.3", ",", "rng", "=", "rng", ")", "\n", "self", ".", "initial_configurations", "=", "self", ".", "get_initial_configs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.TLBO.get_initial_configs": [[168, 213], ["list", "numpy.array", "MinMaxScaler", "tlbo_optimizer.TLBO.meta_feature_scaler.fit_transform", "list", "tlbo_optimizer.TLBO.append", "tlbo_optimizer.TLBO.config_space.get_default_configuration", "tlbo_optimizer.TLBO.meta_feature_scaler.transform", "list", "numpy.arange", "numpy.random.shuffle", "list.append", "set", "len", "list.append", "tlbo_optimizer.TLBO.config_space.get_default_configuration", "len", "tlbo_optimizer.TLBO.dataset_metafeature.reshape", "list.append", "numpy.argsort", "len", "numpy.argsort", "tlbo_optimizer.TLBO._random_search.maximize", "tlbo_optimizer.TLBO._random_search.maximize", "list.append", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize"], ["", "def", "get_initial_configs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            runhistory format:\n                row: [ dataset_metafeature, list([[configuration, perf],[]]) ]\n        \"\"\"", "\n", "if", "self", ".", "meta_warmstart", "is", "False", ":", "\n", "            ", "init_configs", "=", "[", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "]", "\n", "while", "len", "(", "init_configs", ")", "<", "self", ".", "init_num", ":", "\n", "                ", "_config", "=", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "if", "_config", "not", "in", "init_configs", ":", "\n", "                    ", "init_configs", ".", "append", "(", "_config", ")", "\n", "", "", "return", "init_configs", "\n", "\n", "", "from", "sklearn", ".", "preprocessing", "import", "MinMaxScaler", "\n", "meta_features", "=", "list", "(", ")", "\n", "for", "_runhistory", "in", "self", ".", "past_runhistory", ":", "\n", "            ", "meta_features", ".", "append", "(", "_runhistory", "[", "0", "]", ")", "\n", "", "meta_features", "=", "np", ".", "array", "(", "meta_features", ")", "\n", "self", ".", "meta_feature_scaler", "=", "MinMaxScaler", "(", ")", "\n", "meta_features", "=", "self", ".", "meta_feature_scaler", ".", "fit_transform", "(", "meta_features", ")", "\n", "\n", "init_configs", "=", "[", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "]", "\n", "n_init_configs", "=", "self", ".", "init_num", "-", "1", "\n", "if", "self", ".", "dataset_metafeature", "is", "not", "None", ":", "\n", "            ", "dataset_metafeature", "=", "self", ".", "meta_feature_scaler", ".", "transform", "(", "self", ".", "dataset_metafeature", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "euclidean_distance", "=", "list", "(", ")", "\n", "for", "_metafeeature", "in", "meta_features", ":", "\n", "                ", "euclidean_distance", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "dataset_metafeature", "-", "_metafeeature", ")", ")", "\n", "", "history_idxs", "=", "np", ".", "argsort", "(", "euclidean_distance", ")", "[", ":", "n_init_configs", "]", "\n", "", "else", ":", "\n", "            ", "idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "past_runhistory", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idxs", ")", "\n", "history_idxs", "=", "idxs", "[", ":", "n_init_configs", "]", "\n", "\n", "", "for", "_idx", "in", "history_idxs", ":", "\n", "            ", "config_perf_pairs", "=", "self", ".", "past_runhistory", "[", "_idx", "]", "[", "1", "]", "\n", "perfs", "=", "[", "row", "[", "1", "]", "for", "row", "in", "config_perf_pairs", "]", "\n", "optimum_idx", "=", "np", ".", "argsort", "(", "perfs", ")", "[", "0", "]", "\n", "init_configs", ".", "append", "(", "config_perf_pairs", "[", "optimum_idx", "]", "[", "0", "]", ")", "\n", "\n", "", "init_configs", "=", "list", "(", "set", "(", "init_configs", ")", ")", "\n", "while", "len", "(", "init_configs", ")", "<", "self", ".", "init_num", ":", "\n", "            ", "random_config", "=", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "init_configs", ".", "append", "(", "random_config", ")", "\n", "", "return", "init_configs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.TLBO.run": [[214, 217], ["tlbo_optimizer.TLBO.iterate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "iteration_id", "<", "self", ".", "max_iterations", ":", "\n", "            ", "self", ".", "iterate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.TLBO.iterate": [[218, 260], ["numpy.array", "tlbo_optimizer.TLBO.choose_next", "print", "tlbo_optimizer.TLBO.logger.debug", "len", "numpy.array", "config_space.util.convert_configurations_to_array", "tlbo_optimizer.TLBO.logger.debug", "len", "tlbo_optimizer.TLBO.configurations.append", "tlbo_optimizer.TLBO.perfs.append", "tlbo_optimizer.TLBO.history_container.add", "tlbo_optimizer.TLBO.failed_configurations.append", "tlbo_optimizer.TLBO.configurations.index", "utils.limit.time_limit", "tlbo_optimizer.TLBO.objective_function", "str", "max", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.choose_next", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function"], ["", "", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "convert_configurations_to_array", "(", "self", ".", "configurations", ")", "\n", "", "Y", "=", "np", ".", "array", "(", "self", ".", "perfs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "config", "=", "self", ".", "choose_next", "(", "X", ",", "Y", ")", "\n", "\n", "trial_state", "=", "SUCCESS", "\n", "trial_info", "=", "None", "\n", "\n", "if", "config", "not", "in", "(", "self", ".", "configurations", "+", "self", ".", "failed_configurations", ")", ":", "\n", "# Evaluate this configuration.", "\n", "            ", "try", ":", "\n", "                ", "with", "time_limit", "(", "self", ".", "time_limit_per_trial", ")", ":", "\n", "                    ", "perf", "=", "self", ".", "objective_function", "(", "config", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "perf", "=", "MAXINT", "\n", "trial_info", "=", "str", "(", "e", ")", "\n", "trial_state", "=", "FAILDED", "if", "not", "isinstance", "(", "e", ",", "TimeoutException", ")", "else", "TIMEOUT", "\n", "\n", "", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "                ", "self", ".", "default_obj_value", "=", "perf", "\n", "\n", "", "if", "trial_state", "==", "SUCCESS", "and", "perf", "<", "MAXINT", ":", "\n", "                ", "self", ".", "configurations", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "perf", ")", "\n", "self", ".", "history_container", ".", "add", "(", "config", ",", "perf", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "failed_configurations", ".", "append", "(", "config", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'This configuration has been evaluated! Skip it.'", ")", "\n", "if", "config", "in", "self", ".", "configurations", ":", "\n", "                ", "config_idx", "=", "self", ".", "configurations", ".", "index", "(", "config", ")", "\n", "trial_state", ",", "perf", "=", "SUCCESS", ",", "self", ".", "perfs", "[", "config_idx", "]", "\n", "", "else", ":", "\n", "                ", "trial_state", ",", "perf", "=", "FAILDED", ",", "MAXINT", "\n", "\n", "", "", "self", ".", "iteration_id", "+=", "1", "\n", "print", "(", "self", ".", "iteration_id", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'Iteration-%d, objective improvement: %.4f'", "%", "(", "self", ".", "iteration_id", ",", "max", "(", "0", ",", "self", ".", "default_obj_value", "-", "perf", ")", ")", ")", "\n", "return", "config", ",", "trial_state", ",", "perf", ",", "trial_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.TLBO.choose_next": [[261, 285], ["tlbo_optimizer.TLBO.model.train", "tlbo_optimizer.TLBO.acquisition_function.update", "tlbo_optimizer.TLBO.optimizer.maximize", "list", "tlbo_optimizer.TLBO.history_container.get_incumbents", "len", "tlbo_optimizer.TLBO.config_space.get_default_configuration", "tlbo_optimizer.TLBO._random_search.maximize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize"], ["", "def", "choose_next", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "_config_num", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "_config_num", "<", "self", ".", "init_num", ":", "\n", "            ", "if", "self", ".", "initial_configurations", "is", "None", ":", "\n", "                ", "if", "_config_num", "==", "0", ":", "\n", "                    ", "return", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "initial_configurations", "[", "_config_num", "]", "\n", "\n", "", "", "self", ".", "model", ".", "train", "(", "X", ",", "Y", ")", "\n", "\n", "incumbent_value", "=", "self", ".", "history_container", ".", "get_incumbents", "(", ")", "[", "0", "]", "[", "1", "]", "\n", "\n", "self", ".", "acquisition_function", ".", "update", "(", "model", "=", "self", ".", "model", ",", "eta", "=", "incumbent_value", ",", "\n", "num_data", "=", "len", "(", "self", ".", "history_container", ".", "data", ")", ")", "\n", "\n", "challengers", "=", "self", ".", "optimizer", ".", "maximize", "(", "\n", "runhistory", "=", "self", ".", "history_container", ",", "\n", "num_points", "=", "1000", ",", "\n", "random_configuration_chooser", "=", "self", ".", "random_configuration_chooser", "\n", ")", "\n", "return", "list", "(", "challengers", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.get_metafeature_vector": [[20, 23], ["sorted", "numpy.array", "metafeature_dict.keys"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["def", "get_metafeature_vector", "(", "metafeature_dict", ")", ":", "\n", "    ", "sorted_keys", "=", "sorted", "(", "metafeature_dict", ".", "keys", "(", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "metafeature_dict", "[", "key", "]", "for", "key", "in", "sorted_keys", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.get_datasets": [[25, 33], ["list", "os.listdir", "re.search", "list.append", "re.search.group"], "function", ["None"], ["", "def", "get_datasets", "(", "runhistory_dir", ",", "estimator_id", ",", "metric", ",", "task_id", "=", "'hpo'", ")", ":", "\n", "    ", "_datasets", "=", "list", "(", ")", "\n", "pattern", "=", "r'(.*)-%s-%s-%s.pkl'", "%", "(", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "runhistory_dir", ")", ":", "\n", "        ", "result", "=", "re", ".", "search", "(", "pattern", ",", "filename", ",", "re", ".", "M", "|", "re", ".", "I", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "            ", "_datasets", ".", "append", "(", "result", ".", "group", "(", "1", ")", ")", "\n", "", "", "return", "_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.load_runhistory": [[35, 56], ["os.path.dirname", "pk.load.keys", "list", "open", "pickle.load", "tlbo_optimizer.get_metafeature_vector", "list.append", "open", "pickle.load", "list", "pk.load.items"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_metafeature_vector", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "def", "load_runhistory", "(", "runhistory_dir", ",", "dataset_names", ",", "estimator_id", ",", "metric", ",", "task_id", ")", ":", "\n", "    ", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "metafeature_file", "=", "'%s%srunhistory%smetafeature.pkl'", "%", "(", "cur_dir", ",", "os_sep", ",", "os_sep", ")", "\n", "with", "open", "(", "metafeature_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "metafeature_dict", "=", "pk", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "dataset", "in", "metafeature_dict", ".", "keys", "(", ")", ":", "\n", "        ", "vec", "=", "get_metafeature_vector", "(", "metafeature_dict", "[", "dataset", "]", ")", "\n", "metafeature_dict", "[", "dataset", "]", "=", "vec", "\n", "\n", "", "runhistory", "=", "list", "(", ")", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "        ", "_filename", "=", "'%s-%s-%s-%s.pkl'", "%", "(", "dataset", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "with", "open", "(", "runhistory_dir", "+", "_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pk", ".", "load", "(", "f", ")", "\n", "", "if", "dataset", "not", "in", "metafeature_dict", ":", "\n", "            ", "meta_vec", "=", "None", "\n", "", "else", ":", "\n", "            ", "meta_vec", "=", "metafeature_dict", "[", "dataset", "]", "\n", "", "runhistory", ".", "append", "(", "(", "meta_vec", ",", "list", "(", "data", ".", "items", "(", ")", ")", ")", ")", "\n", "", "return", "runhistory", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.has_runhistory": [[58, 65], ["os.path.dirname", "tlbo_optimizer.get_datasets", "config_space.get_default_configuration", "len"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_datasets"], ["", "def", "has_runhistory", "(", "config_space", ",", "task_id", "=", "'hpo'", ")", ":", "\n", "    ", "estimator_id", "=", "config_space", ".", "get_default_configuration", "(", ")", "[", "'estimator'", "]", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "dir_template", "=", "'%s'", "+", "os_sep", "+", "'runhistory'", "+", "os_sep", "+", "'hpo'", "+", "os_sep", "+", "'%s_%s'", "+", "os_sep", "\n", "runhistory_dir", "=", "dir_template", "%", "(", "cur_dir", ",", "task_id", ",", "estimator_id", ")", "\n", "datasets", "=", "get_datasets", "(", "runhistory_dir", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "return", "True", "if", "len", "(", "datasets", ")", ">", "0", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_optimizer.get_pretrain_surrogate_models": [[67, 105], ["os.path.dirname", "os.path.join", "os.path.exists", "config_space.get_default_configuration", "tlbo_optimizer.get_datasets", "open", "pickle.load", "len", "print", "tlbo_optimizer.load_runhistory", "list", "zip", "utils.util_funcs.get_rng", "models.rf_with_instances.RandomForestWithInstances", "list", "numpy.array", "models.rf_with_instances.RandomForestWithInstances.train", "list.append", "print", "np.array.append", "numpy.array().reshape", "rng.randint", "config_space.util.convert_configurations_to_array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_datasets", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.load_runhistory", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array"], ["", "def", "get_pretrain_surrogate_models", "(", "config_space", ",", "metric", ",", "task_id", "=", "'hpo'", ")", ":", "\n", "    ", "max_runs", "=", "None", "\n", "estimator_id", "=", "config_space", ".", "get_default_configuration", "(", ")", "[", "'estimator'", "]", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "file_id", "=", "'surrogate_models_%s_%s_%s.pk'", "%", "(", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "surrogate_models_file", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "file_id", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "surrogate_models_file", ")", ":", "\n", "        ", "with", "open", "(", "surrogate_models_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "return", "pk", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "dir_template", "=", "'%s'", "+", "os_sep", "+", "'runhistory'", "+", "os_sep", "+", "'hpo'", "+", "os_sep", "+", "'%s_%s_%s'", "+", "os_sep", "\n", "runhistory_dir", "=", "dir_template", "%", "(", "cur_dir", ",", "task_id", ",", "metric", ",", "estimator_id", ")", "\n", "dataset_names", "=", "get_datasets", "(", "runhistory_dir", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "if", "len", "(", "dataset_names", ")", "==", "0", ":", "\n", "            ", "print", "(", "'No related knowledge transferred: [%s][%s][%s]'", "%", "(", "estimator_id", ",", "metric", ",", "task_id", ")", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "runhistory", "=", "load_runhistory", "(", "runhistory_dir", ",", "dataset_names", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "surrogate_models", "=", "list", "(", ")", "\n", "for", "dataset", ",", "hist", "in", "zip", "(", "dataset_names", ",", "runhistory", ")", ":", "\n", "                ", "_", ",", "rng", "=", "get_rng", "(", "1", ")", "\n", "_model", "=", "RandomForestWithInstances", "(", "config_space", ",", "seed", "=", "rng", ".", "randint", "(", "MAXINT", ")", ",", "normalize_y", "=", "True", ")", "\n", "X", "=", "list", "(", ")", "\n", "for", "row", "in", "hist", "[", "1", "]", ":", "\n", "                    ", "conf_vector", "=", "convert_configurations_to_array", "(", "[", "row", "[", "0", "]", "]", ")", "[", "0", "]", "\n", "X", ".", "append", "(", "conf_vector", ")", "\n", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "# Turning it to a minimization problem.", "\n", "y", "=", "-", "np", ".", "array", "(", "[", "row", "[", "1", "]", "for", "row", "in", "hist", "[", "1", "]", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X", ",", "y", "=", "X", "[", ":", "max_runs", "]", ",", "y", "[", ":", "max_runs", "]", "\n", "_model", ".", "train", "(", "X", ",", "y", ")", "\n", "surrogate_models", ".", "append", "(", "_model", ")", "\n", "print", "(", "'%s: training basic surrogate model finished.'", "%", "dataset", ")", "\n", "# TODO: bugs reported, TypeError: can't pickle SwigPyObject objects.", "\n", "# with open(surrogate_models_file, 'wb') as f:", "\n", "#     pk.dump(surrogate_models, f)", "\n", "", "return", "surrogate_models", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tpe_optimizer.TPE_BO.__init__": [[13, 48], ["bo_optimizer.BaseFacade.__init__", "list", "list", "list", "utils.util_funcs.get_rng", "len", "mindware.components.transfer_learning.tlbo.models.kde.TPE", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "config_space", ",", "\n", "surrogate_model", "=", "'tpe'", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "max_runs", "=", "200", ",", "\n", "initial_configurations", "=", "None", ",", "\n", "initial_runs", "=", "3", ",", "\n", "task_id", "=", "None", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "task_id", ")", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "run_id", ",", "rng", "=", "get_rng", "(", ")", "\n", "\n", "", "self", ".", "surrogate_model", "=", "surrogate_model", "\n", "self", ".", "initial_configurations", "=", "initial_configurations", "\n", "self", ".", "init_num", "=", "initial_runs", "\n", "if", "initial_configurations", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_num", "=", "len", "(", "initial_configurations", ")", "\n", "\n", "", "self", ".", "max_iterations", "=", "max_runs", "\n", "self", ".", "iteration_id", "=", "0", "\n", "self", ".", "time_limit_per_trial", "=", "time_limit_per_trial", "\n", "self", ".", "default_obj_value", "=", "MAXINT", "\n", "\n", "self", ".", "configurations", "=", "list", "(", ")", "\n", "self", ".", "failed_configurations", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "\n", "# Initialize the basic component in BO.", "\n", "self", ".", "objective_function", "=", "objective_function", "\n", "if", "self", ".", "surrogate_model", "==", "'tpe'", ":", "\n", "            ", "self", ".", "model", "=", "TPE", "(", "configspace", "=", "config_space", ")", "\n", "", "elif", "self", ".", "surrogate_model", "==", "'random_search'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported surrogate model - %s!'", "%", "self", ".", "surrogate_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tpe_optimizer.TPE_BO.run": [[49, 52], ["tpe_optimizer.TPE_BO.iterate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "iteration_id", "<", "self", ".", "max_iterations", ":", "\n", "            ", "self", ".", "iterate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tpe_optimizer.TPE_BO.iterate": [[53, 97], ["numpy.array", "tpe_optimizer.TPE_BO.choose_next", "tpe_optimizer.TPE_BO.logger.debug", "len", "numpy.array", "config_space.util.convert_configurations_to_array", "tpe_optimizer.TPE_BO.logger.debug", "len", "tpe_optimizer.TPE_BO.configurations.append", "tpe_optimizer.TPE_BO.perfs.append", "tpe_optimizer.TPE_BO.history_container.add", "tpe_optimizer.TPE_BO.failed_configurations.append", "tpe_optimizer.TPE_BO.configurations.index", "utils.limit.time_limit", "tpe_optimizer.TPE_BO.objective_function", "str", "print", "tpe_optimizer.TPE_BO.model.new_result", "max", "str", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.choose_next", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.new_result"], ["", "", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "convert_configurations_to_array", "(", "self", ".", "configurations", ")", "\n", "", "Y", "=", "np", ".", "array", "(", "self", ".", "perfs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "config", "=", "self", ".", "choose_next", "(", "X", ",", "Y", ")", "\n", "trial_state", "=", "SUCCESS", "\n", "trial_info", "=", "None", "\n", "\n", "if", "config", "not", "in", "(", "self", ".", "configurations", "+", "self", ".", "failed_configurations", ")", ":", "\n", "# Evaluate this configuration.", "\n", "            ", "try", ":", "\n", "                ", "with", "time_limit", "(", "self", ".", "time_limit_per_trial", ")", ":", "\n", "                    ", "perf", "=", "self", ".", "objective_function", "(", "config", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "perf", "=", "MAXINT", "\n", "trial_info", "=", "str", "(", "e", ")", "\n", "trial_state", "=", "FAILDED", "if", "not", "isinstance", "(", "e", ",", "TimeoutException", ")", "else", "TIMEOUT", "\n", "print", "(", "self", ".", "iteration_id", ",", "str", "(", "e", ")", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "                ", "self", ".", "default_obj_value", "=", "perf", "\n", "\n", "", "if", "trial_state", "==", "SUCCESS", "and", "perf", "<", "MAXINT", ":", "\n", "                ", "self", ".", "configurations", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "perf", ")", "\n", "# Update KDE model.", "\n", "if", "self", ".", "surrogate_model", "==", "'tpe'", ":", "\n", "                    ", "self", ".", "model", ".", "new_result", "(", "config", ",", "perf", ",", "1", ")", "\n", "", "self", ".", "history_container", ".", "add", "(", "config", ",", "perf", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "failed_configurations", ".", "append", "(", "config", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'This configuration has been evaluated! Skip it.'", ")", "\n", "if", "config", "in", "self", ".", "configurations", ":", "\n", "                ", "config_idx", "=", "self", ".", "configurations", ".", "index", "(", "config", ")", "\n", "trial_state", ",", "perf", "=", "SUCCESS", ",", "self", ".", "perfs", "[", "config_idx", "]", "\n", "", "else", ":", "\n", "                ", "trial_state", ",", "perf", "=", "FAILDED", ",", "MAXINT", "\n", "\n", "", "", "self", ".", "iteration_id", "+=", "1", "\n", "self", ".", "logger", ".", "debug", "(", "'Iteration-%d, objective improvement: %.4f'", "%", "(", "self", ".", "iteration_id", ",", "max", "(", "0", ",", "self", ".", "default_obj_value", "-", "perf", ")", ")", ")", "\n", "return", "config", ",", "trial_state", ",", "perf", ",", "trial_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tpe_optimizer.TPE_BO.choose_next": [[98, 116], ["tpe_optimizer.TPE_BO.model.get_config", "tpe_optimizer.TPE_BO.config_space.get_default_configuration", "ValueError", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "mindware.components.optimizers.base.config_space_utils.sample_configurations"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.get_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations"], ["", "def", "choose_next", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "_config_num", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "_config_num", "<", "self", ".", "init_num", ":", "\n", "            ", "if", "self", ".", "initial_configurations", "is", "None", ":", "\n", "                ", "if", "_config_num", "==", "0", ":", "\n", "                    ", "return", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "", "else", ":", "\n", "                    ", "return", "sample_configurations", "(", "self", ".", "config_space", ",", "1", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "initial_configurations", "[", "_config_num", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "surrogate_model", "==", "'tpe'", ":", "\n", "                ", "config", ",", "_", "=", "self", ".", "model", ".", "get_config", "(", ")", "\n", "", "elif", "self", ".", "surrogate_model", "==", "'random_search'", ":", "\n", "                ", "config", "=", "sample_configurations", "(", "self", ".", "config_space", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                 ", "raise", "ValueError", "(", "'Invalid surrogate model - %s.'", "%", "self", ".", "surrogate_model", ")", "\n", "", "return", "config", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.__init__": [[42, 99], ["bo_optimizer.BaseFacade.__init__", "tlbo_taff_optimizer.TLBO_AF.rng.randint", "tlbo_taff_optimizer.pretrain_bo_models", "list", "list", "list", "models.rf_with_instances.RandomForestWithInstances", "models.gp_ensemble.GaussianProcessEnsemble", "acquisition_function.ta_acquisition.TAQ_EI", "optimizer.ei_optimization.InterleavedLocalAndRandomSearch", "optimizer.ei_optimization.RandomSearch", "optimizer.random_configuration_chooser.ChooserProb", "tlbo_taff_optimizer.TLBO_AF.get_initial_configs", "utils.util_funcs.get_rng", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.pretrain_bo_models", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.get_initial_configs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "\n", "config_space", ",", "\n", "past_runhistory", ",", "\n", "acq_method", "=", "'taff'", ",", "\n", "dataset_metafeature", "=", "None", ",", "\n", "meta_warmstart", ":", "bool", "=", "False", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "max_runs", "=", "200", ",", "\n", "initial_runs", "=", "5", ",", "\n", "task_id", "=", "None", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "task_id", ")", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "_", ",", "rng", "=", "get_rng", "(", ")", "\n", "", "self", ".", "rng", "=", "rng", "\n", "seed", "=", "self", ".", "rng", ".", "randint", "(", "MAXINT", ")", "\n", "self", ".", "acq_method", "=", "acq_method", "\n", "self", ".", "meta_warmstart", "=", "meta_warmstart", "\n", "self", ".", "past_runhistory", "=", "past_runhistory", "\n", "self", ".", "source_models", ",", "self", ".", "etas", "=", "pretrain_bo_models", "(", "config_space", ",", "past_runhistory", ",", "seed", "=", "seed", ",", "max_runs", "=", "50", ")", "\n", "\n", "self", ".", "meta_feature_scaler", "=", "None", "\n", "self", ".", "dataset_metafeature", "=", "dataset_metafeature", "\n", "self", ".", "init_num", "=", "initial_runs", "\n", "self", ".", "max_iterations", "=", "max_runs", "\n", "\n", "self", ".", "iteration_id", "=", "0", "\n", "self", ".", "sls_max_steps", "=", "1000", "\n", "self", ".", "sls_n_steps_plateau_walk", "=", "10", "\n", "self", ".", "time_limit_per_trial", "=", "time_limit_per_trial", "\n", "self", ".", "default_obj_value", "=", "MAXINT", "\n", "\n", "self", ".", "configurations", "=", "list", "(", ")", "\n", "self", ".", "failed_configurations", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "\n", "# Initialize the basic component in BO.", "\n", "self", ".", "objective_function", "=", "objective_function", "\n", "self", ".", "model", "=", "RandomForestWithInstances", "(", "config_space", ",", "seed", "=", "seed", ",", "normalize_y", "=", "True", ")", "\n", "self", ".", "weight_model", "=", "GaussianProcessEnsemble", "(", "config_space", ",", "past_runhistory", ",", "\n", "gp_models", "=", "self", ".", "source_models", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "self", ".", "acquisition_function", "=", "TAQ_EI", "(", "self", ".", "model", ",", "aggregate_method", "=", "acq_method", ",", "source_models", "=", "self", ".", "source_models", ")", "\n", "self", ".", "optimizer", "=", "InterleavedLocalAndRandomSearch", "(", "\n", "acquisition_function", "=", "self", ".", "acquisition_function", ",", "\n", "config_space", "=", "self", ".", "config_space", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", ",", "\n", "max_steps", "=", "self", ".", "sls_max_steps", ",", "\n", "n_steps_plateau_walk", "=", "self", ".", "sls_n_steps_plateau_walk", ",", "\n", "n_sls_iterations", "=", "3", "\n", ")", "\n", "self", ".", "_random_search", "=", "RandomSearch", "(", "\n", "self", ".", "acquisition_function", ",", "self", ".", "config_space", ",", "rng", "\n", ")", "\n", "self", ".", "random_configuration_chooser", "=", "ChooserProb", "(", "prob", "=", "0.3", ",", "rng", "=", "rng", ")", "\n", "self", ".", "initial_configurations", "=", "self", ".", "get_initial_configs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.get_initial_configs": [[100, 145], ["list", "numpy.array", "MinMaxScaler", "tlbo_taff_optimizer.TLBO_AF.meta_feature_scaler.fit_transform", "list", "tlbo_taff_optimizer.TLBO_AF.append", "tlbo_taff_optimizer.TLBO_AF.config_space.get_default_configuration", "tlbo_taff_optimizer.TLBO_AF.meta_feature_scaler.transform", "list", "numpy.arange", "numpy.random.shuffle", "list.append", "set", "len", "list.append", "tlbo_taff_optimizer.TLBO_AF.config_space.get_default_configuration", "len", "tlbo_taff_optimizer.TLBO_AF.dataset_metafeature.reshape", "list.append", "numpy.argsort", "len", "numpy.argsort", "tlbo_taff_optimizer.TLBO_AF._random_search.maximize", "tlbo_taff_optimizer.TLBO_AF._random_search.maximize", "list.append", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize"], ["", "def", "get_initial_configs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            runhistory format:\n                row: [ dataset_metafeature, list([[configuration, perf],[]]) ]\n        \"\"\"", "\n", "if", "self", ".", "meta_warmstart", "is", "False", ":", "\n", "            ", "init_configs", "=", "[", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "]", "\n", "while", "len", "(", "init_configs", ")", "<", "self", ".", "init_num", ":", "\n", "                ", "_config", "=", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "if", "_config", "not", "in", "init_configs", ":", "\n", "                    ", "init_configs", ".", "append", "(", "_config", ")", "\n", "", "", "return", "init_configs", "\n", "\n", "", "from", "sklearn", ".", "preprocessing", "import", "MinMaxScaler", "\n", "meta_features", "=", "list", "(", ")", "\n", "for", "_runhistory", "in", "self", ".", "past_runhistory", ":", "\n", "            ", "meta_features", ".", "append", "(", "_runhistory", "[", "0", "]", ")", "\n", "", "meta_features", "=", "np", ".", "array", "(", "meta_features", ")", "\n", "self", ".", "meta_feature_scaler", "=", "MinMaxScaler", "(", ")", "\n", "meta_features", "=", "self", ".", "meta_feature_scaler", ".", "fit_transform", "(", "meta_features", ")", "\n", "\n", "init_configs", "=", "[", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "]", "\n", "n_init_configs", "=", "self", ".", "init_num", "-", "1", "\n", "if", "self", ".", "dataset_metafeature", "is", "not", "None", ":", "\n", "            ", "dataset_metafeature", "=", "self", ".", "meta_feature_scaler", ".", "transform", "(", "self", ".", "dataset_metafeature", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "euclidean_distance", "=", "list", "(", ")", "\n", "for", "_metafeeature", "in", "meta_features", ":", "\n", "                ", "euclidean_distance", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "dataset_metafeature", "-", "_metafeeature", ")", ")", "\n", "", "history_idxs", "=", "np", ".", "argsort", "(", "euclidean_distance", ")", "[", ":", "n_init_configs", "]", "\n", "", "else", ":", "\n", "            ", "idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "past_runhistory", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idxs", ")", "\n", "history_idxs", "=", "idxs", "[", ":", "n_init_configs", "]", "\n", "\n", "", "for", "_idx", "in", "history_idxs", ":", "\n", "            ", "config_perf_pairs", "=", "self", ".", "past_runhistory", "[", "_idx", "]", "[", "1", "]", "\n", "perfs", "=", "[", "row", "[", "1", "]", "for", "row", "in", "config_perf_pairs", "]", "\n", "optimum_idx", "=", "np", ".", "argsort", "(", "perfs", ")", "[", "0", "]", "\n", "init_configs", ".", "append", "(", "config_perf_pairs", "[", "optimum_idx", "]", "[", "0", "]", ")", "\n", "\n", "", "init_configs", "=", "list", "(", "set", "(", "init_configs", ")", ")", "\n", "while", "len", "(", "init_configs", ")", "<", "self", ".", "init_num", ":", "\n", "            ", "random_config", "=", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "init_configs", ".", "append", "(", "random_config", ")", "\n", "", "return", "init_configs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.run": [[146, 149], ["tlbo_taff_optimizer.TLBO_AF.iterate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "iteration_id", "<", "self", ".", "max_iterations", ":", "\n", "            ", "self", ".", "iterate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.iterate": [[150, 192], ["numpy.array", "tlbo_taff_optimizer.TLBO_AF.choose_next", "print", "tlbo_taff_optimizer.TLBO_AF.logger.debug", "len", "numpy.array", "config_space.util.convert_configurations_to_array", "tlbo_taff_optimizer.TLBO_AF.logger.debug", "len", "tlbo_taff_optimizer.TLBO_AF.configurations.append", "tlbo_taff_optimizer.TLBO_AF.perfs.append", "tlbo_taff_optimizer.TLBO_AF.history_container.add", "tlbo_taff_optimizer.TLBO_AF.failed_configurations.append", "tlbo_taff_optimizer.TLBO_AF.configurations.index", "utils.limit.time_limit", "tlbo_taff_optimizer.TLBO_AF.objective_function", "str", "max", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.choose_next", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function"], ["", "", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "convert_configurations_to_array", "(", "self", ".", "configurations", ")", "\n", "", "Y", "=", "np", ".", "array", "(", "self", ".", "perfs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "config", "=", "self", ".", "choose_next", "(", "X", ",", "Y", ")", "\n", "\n", "trial_state", "=", "SUCCESS", "\n", "trial_info", "=", "None", "\n", "\n", "if", "config", "not", "in", "(", "self", ".", "configurations", "+", "self", ".", "failed_configurations", ")", ":", "\n", "# Evaluate this configuration.", "\n", "            ", "try", ":", "\n", "                ", "with", "time_limit", "(", "self", ".", "time_limit_per_trial", ")", ":", "\n", "                    ", "perf", "=", "self", ".", "objective_function", "(", "config", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "perf", "=", "MAXINT", "\n", "trial_info", "=", "str", "(", "e", ")", "\n", "trial_state", "=", "FAILDED", "if", "not", "isinstance", "(", "e", ",", "TimeoutException", ")", "else", "TIMEOUT", "\n", "\n", "", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "                ", "self", ".", "default_obj_value", "=", "perf", "\n", "\n", "", "if", "trial_state", "==", "SUCCESS", "and", "perf", "<", "MAXINT", ":", "\n", "                ", "self", ".", "configurations", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "perf", ")", "\n", "self", ".", "history_container", ".", "add", "(", "config", ",", "perf", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "failed_configurations", ".", "append", "(", "config", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'This configuration has been evaluated! Skip it.'", ")", "\n", "if", "config", "in", "self", ".", "configurations", ":", "\n", "                ", "config_idx", "=", "self", ".", "configurations", ".", "index", "(", "config", ")", "\n", "trial_state", ",", "perf", "=", "SUCCESS", ",", "self", ".", "perfs", "[", "config_idx", "]", "\n", "", "else", ":", "\n", "                ", "trial_state", ",", "perf", "=", "FAILDED", ",", "MAXINT", "\n", "\n", "", "", "self", ".", "iteration_id", "+=", "1", "\n", "print", "(", "self", ".", "iteration_id", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'Iteration-%d, objective improvement: %.4f'", "%", "(", "self", ".", "iteration_id", ",", "max", "(", "0", ",", "self", ".", "default_obj_value", "-", "perf", ")", ")", ")", "\n", "return", "config", ",", "trial_state", ",", "perf", ",", "trial_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.TLBO_AF.choose_next": [[193, 224], ["tlbo_taff_optimizer.TLBO_AF.model.train", "tlbo_taff_optimizer.TLBO_AF.weight_model.train", "numpy.min", "tlbo_taff_optimizer.TLBO_AF.acquisition_function.update_target_model", "tlbo_taff_optimizer.TLBO_AF.optimizer.maximize", "tlbo_taff_optimizer.normalize", "list", "len", "tlbo_taff_optimizer.TLBO_AF.config_space.get_default_configuration", "tlbo_taff_optimizer.TLBO_AF._random_search.maximize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.ta_acquisition.TAQ_EI.update_target_model", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.normalize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize"], ["", "def", "choose_next", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "_config_num", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "_config_num", "<", "self", ".", "init_num", ":", "\n", "            ", "if", "self", ".", "initial_configurations", "is", "None", ":", "\n", "                ", "if", "_config_num", "==", "0", ":", "\n", "                    ", "return", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "initial_configurations", "[", "_config_num", "]", "\n", "\n", "", "", "self", ".", "model", ".", "train", "(", "X", ",", "Y", ")", "\n", "# Update model weights.", "\n", "self", ".", "weight_model", ".", "train", "(", "X", ",", "Y", ")", "\n", "model_weights", "=", "self", ".", "weight_model", ".", "model_weights", "\n", "\n", "# incumbent_value = self.history_container.get_incumbents()[0][1]", "\n", "# Set inc to the normalized eta.", "\n", "incumbent_value", "=", "np", ".", "min", "(", "normalize", "(", "Y", ")", ")", "\n", "\n", "self", ".", "acquisition_function", ".", "update_target_model", "(", "\n", "model", "=", "self", ".", "model", ",", "eta", "=", "incumbent_value", ",", "\n", "num_data", "=", "len", "(", "self", ".", "history_container", ".", "data", ")", ",", "\n", "source_etas", "=", "self", ".", "etas", ",", "model_weights", "=", "model_weights", ")", "\n", "\n", "challengers", "=", "self", ".", "optimizer", ".", "maximize", "(", "\n", "runhistory", "=", "self", ".", "history_container", ",", "\n", "num_points", "=", "1000", ",", "\n", "random_configuration_chooser", "=", "self", ".", "random_configuration_chooser", "\n", ")", "\n", "return", "list", "(", "challengers", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.normalize": [[15, 21], ["numpy.mean", "numpy.std"], "function", ["None"], ["def", "normalize", "(", "y", ")", ":", "\n", "    ", "mean_y_", "=", "np", ".", "mean", "(", "y", ")", "\n", "std_y_", "=", "np", ".", "std", "(", "y", ")", "\n", "if", "std_y_", "==", "0", ":", "\n", "        ", "std_y_", "=", "1", "\n", "", "return", "(", "y", "-", "mean_y_", ")", "/", "std_y_", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.pretrain_bo_models": [[23, 39], ["list", "list", "models.rf_with_instances.RandomForestWithInstances", "list", "numpy.array", "models.rf_with_instances.RandomForestWithInstances.train", "bo_models.append", "etas.append", "np.array.append", "numpy.array().reshape", "numpy.min", "config_space.util.convert_configurations_to_array", "tlbo_taff_optimizer.normalize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.tlbo_taff_optimizer.normalize"], ["", "def", "pretrain_bo_models", "(", "config_space", ",", "runhistory", ",", "seed", ",", "max_runs", "=", "None", ")", ":", "\n", "        ", "bo_models", ",", "etas", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "hist", "in", "runhistory", ":", "\n", "            ", "_model", "=", "RandomForestWithInstances", "(", "config_space", ",", "seed", "=", "seed", ",", "normalize_y", "=", "True", ")", "\n", "X", "=", "list", "(", ")", "\n", "for", "row", "in", "hist", "[", "1", "]", ":", "\n", "                ", "conf_vector", "=", "convert_configurations_to_array", "(", "[", "row", "[", "0", "]", "]", ")", "[", "0", "]", "\n", "X", ".", "append", "(", "conf_vector", ")", "\n", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "# Turning it to a minimization problem.", "\n", "y", "=", "-", "np", ".", "array", "(", "[", "row", "[", "1", "]", "for", "row", "in", "hist", "[", "1", "]", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X", ",", "y", "=", "X", "[", ":", "max_runs", "]", ",", "y", "[", ":", "max_runs", "]", "\n", "_model", ".", "train", "(", "X", ",", "y", ")", "\n", "bo_models", ".", "append", "(", "_model", ")", "\n", "etas", ".", "append", "(", "np", ".", "min", "(", "normalize", "(", "y", ")", ")", ")", "\n", "", "return", "bo_models", ",", "etas", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.__init__": [[18, 22], ["logging.getLogger", "utils.history_container.HistoryContainer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config_space", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "history_container", "=", "HistoryContainer", "(", "task_id", ")", "\n", "self", ".", "config_space", "=", "config_space", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.run": [[23, 26], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.iterate": [[27, 30], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_history": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_history", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "history_container", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_incumbent": [[34, 36], ["bo_optimizer.BaseFacade.history_container.get_incumbents"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents"], ["", "def", "get_incumbent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "history_container", ".", "get_incumbents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.__init__": [[39, 90], ["bo_optimizer.BaseFacade.__init__", "list", "list", "list", "acquisition_function.acquisition.EI", "optimizer.ei_optimization.InterleavedLocalAndRandomSearch", "optimizer.ei_optimization.RandomSearch", "optimizer.random_configuration_chooser.ChooserProb", "utils.util_funcs.get_rng", "len", "models.gp_ensemble.create_gp_model", "models.rf_with_instances.RandomForestWithInstances", "ValueError", "numpy.random.RandomState", "rng.randint", "rng.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.util_funcs.get_rng", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.gp_ensemble.create_gp_model"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "config_space", ",", "\n", "surrogate_model", "=", "'gp'", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "max_runs", "=", "200", ",", "\n", "initial_configurations", "=", "None", ",", "\n", "initial_runs", "=", "3", ",", "\n", "task_id", "=", "None", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "task_id", ")", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "run_id", ",", "rng", "=", "get_rng", "(", ")", "\n", "\n", "", "self", ".", "surrogate_model", "=", "surrogate_model", "\n", "self", ".", "initial_configurations", "=", "initial_configurations", "\n", "self", ".", "init_num", "=", "initial_runs", "\n", "if", "initial_configurations", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_num", "=", "len", "(", "initial_configurations", ")", "\n", "\n", "", "self", ".", "max_iterations", "=", "max_runs", "\n", "self", ".", "iteration_id", "=", "0", "\n", "self", ".", "sls_max_steps", "=", "None", "\n", "self", ".", "sls_n_steps_plateau_walk", "=", "10", "\n", "self", ".", "time_limit_per_trial", "=", "time_limit_per_trial", "\n", "self", ".", "default_obj_value", "=", "MAXINT", "\n", "\n", "self", ".", "configurations", "=", "list", "(", ")", "\n", "self", ".", "failed_configurations", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "\n", "# Initialize the basic component in BO.", "\n", "self", ".", "objective_function", "=", "objective_function", "\n", "if", "self", ".", "surrogate_model", "==", "'gp'", ":", "\n", "            ", "self", ".", "model", "=", "create_gp_model", "(", "config_space", ",", "rng", ")", "\n", "", "elif", "self", ".", "surrogate_model", "==", "'prob_rf'", ":", "\n", "            ", "self", ".", "model", "=", "RandomForestWithInstances", "(", "config_space", ",", "seed", "=", "rng", ".", "randint", "(", "MAXINT", ")", ",", "normalize_y", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported surrogate model - %s!'", "%", "self", ".", "surrogate_model", ")", "\n", "\n", "", "self", ".", "acquisition_function", "=", "EI", "(", "self", ".", "model", ")", "\n", "self", ".", "optimizer", "=", "InterleavedLocalAndRandomSearch", "(", "\n", "acquisition_function", "=", "self", ".", "acquisition_function", ",", "\n", "config_space", "=", "self", ".", "config_space", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "rng", ".", "randint", "(", "MAXINT", ")", ")", ",", "\n", "max_steps", "=", "self", ".", "sls_max_steps", ",", "\n", "n_steps_plateau_walk", "=", "self", ".", "sls_n_steps_plateau_walk", "\n", ")", "\n", "self", ".", "_random_search", "=", "RandomSearch", "(", "\n", "self", ".", "acquisition_function", ",", "self", ".", "config_space", ",", "rng", "\n", ")", "\n", "# Disable random configuration.", "\n", "self", ".", "random_configuration_chooser", "=", "ChooserProb", "(", "prob", "=", "0.5", ",", "rng", "=", "rng", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.run": [[91, 94], ["bo_optimizer.BO.iterate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "iteration_id", "<", "self", ".", "max_iterations", ":", "\n", "            ", "self", ".", "iterate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.iterate": [[95, 137], ["numpy.array", "bo_optimizer.BO.choose_next", "print", "bo_optimizer.BO.logger.debug", "len", "numpy.array", "config_space.util.convert_configurations_to_array", "bo_optimizer.BO.logger.debug", "len", "bo_optimizer.BO.configurations.append", "bo_optimizer.BO.perfs.append", "bo_optimizer.BO.history_container.add", "bo_optimizer.BO.failed_configurations.append", "bo_optimizer.BO.configurations.index", "utils.limit.time_limit", "bo_optimizer.BO.objective_function", "str", "print", "max", "str", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.choose_next", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_learning.meta_learner_tuner.objective_function"], ["", "", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "convert_configurations_to_array", "(", "self", ".", "configurations", ")", "\n", "", "Y", "=", "np", ".", "array", "(", "self", ".", "perfs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "config", "=", "self", ".", "choose_next", "(", "X", ",", "Y", ")", "\n", "trial_state", "=", "SUCCESS", "\n", "trial_info", "=", "None", "\n", "\n", "if", "config", "not", "in", "(", "self", ".", "configurations", "+", "self", ".", "failed_configurations", ")", ":", "\n", "# Evaluate this configuration.", "\n", "            ", "try", ":", "\n", "                ", "with", "time_limit", "(", "self", ".", "time_limit_per_trial", ")", ":", "\n", "                    ", "perf", "=", "self", ".", "objective_function", "(", "config", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "perf", "=", "MAXINT", "\n", "trial_info", "=", "str", "(", "e", ")", "\n", "trial_state", "=", "FAILDED", "if", "not", "isinstance", "(", "e", ",", "TimeoutException", ")", "else", "TIMEOUT", "\n", "print", "(", "self", ".", "iteration_id", ",", "str", "(", "e", ")", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "                ", "self", ".", "default_obj_value", "=", "perf", "\n", "\n", "", "if", "trial_state", "==", "SUCCESS", "and", "perf", "<", "MAXINT", ":", "\n", "                ", "self", ".", "configurations", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "perf", ")", "\n", "self", ".", "history_container", ".", "add", "(", "config", ",", "perf", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "failed_configurations", ".", "append", "(", "config", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'This configuration has been evaluated! Skip it.'", ")", "\n", "if", "config", "in", "self", ".", "configurations", ":", "\n", "                ", "config_idx", "=", "self", ".", "configurations", ".", "index", "(", "config", ")", "\n", "trial_state", ",", "perf", "=", "SUCCESS", ",", "self", ".", "perfs", "[", "config_idx", "]", "\n", "", "else", ":", "\n", "                ", "trial_state", ",", "perf", "=", "FAILDED", ",", "MAXINT", "\n", "\n", "", "", "self", ".", "iteration_id", "+=", "1", "\n", "print", "(", "self", ".", "iteration_id", ",", "trial_state", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'Iteration-%d, objective improvement: %.4f'", "%", "(", "self", ".", "iteration_id", ",", "max", "(", "0", ",", "self", ".", "default_obj_value", "-", "perf", ")", ")", ")", "\n", "return", "config", ",", "trial_state", ",", "perf", ",", "trial_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BO.choose_next": [[138, 163], ["bo_optimizer.BO.model.train", "bo_optimizer.BO.acquisition_function.update", "bo_optimizer.BO.optimizer.maximize", "list", "bo_optimizer.BO.history_container.get_incumbents", "len", "bo_optimizer.BO.config_space.get_default_configuration", "bo_optimizer.BO._random_search.maximize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize"], ["", "def", "choose_next", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "_config_num", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "_config_num", "<", "self", ".", "init_num", ":", "\n", "            ", "if", "self", ".", "initial_configurations", "is", "None", ":", "\n", "                ", "if", "_config_num", "==", "0", ":", "\n", "                    ", "return", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "_random_search", ".", "maximize", "(", "runhistory", "=", "self", ".", "history_container", ",", "num_points", "=", "1", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "initial_configurations", "[", "_config_num", "]", "\n", "\n", "", "", "self", ".", "model", ".", "train", "(", "X", ",", "Y", ")", "\n", "\n", "incumbent_value", "=", "self", ".", "history_container", ".", "get_incumbents", "(", ")", "[", "0", "]", "[", "1", "]", "\n", "\n", "self", ".", "acquisition_function", ".", "update", "(", "model", "=", "self", ".", "model", ",", "eta", "=", "incumbent_value", ",", "num_data", "=", "len", "(", "self", ".", "history_container", ".", "data", ")", ")", "\n", "\n", "challengers", "=", "self", ".", "optimizer", ".", "maximize", "(", "\n", "runhistory", "=", "self", ".", "history_container", ",", "\n", "num_points", "=", "1000", ",", "\n", "random_configuration_chooser", "=", "self", ".", "random_configuration_chooser", "\n", ")", "\n", "config", "=", "list", "(", "challengers", ")", "[", "0", "]", "\n", "# assert config.origin != 'Random Search'", "\n", "return", "config", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.default_priors.DefaultPrior.__init__": [[9, 26], ["base_prior.TophatPrior", "base_prior.LognormalPrior", "base_prior.HorseshoePrior", "numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_dims", ",", "rng", "=", "None", ")", ":", "\n", "        ", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n", "# The number of hyperparameters", "\n", "", "self", ".", "n_dims", "=", "n_dims", "\n", "\n", "# Prior for the Matern52 lengthscales", "\n", "self", ".", "tophat", "=", "TophatPrior", "(", "-", "10", ",", "2", ",", "rng", "=", "self", ".", "rng", ")", "\n", "\n", "# Prior for the covariance amplitude", "\n", "self", ".", "ln_prior", "=", "LognormalPrior", "(", "mean", "=", "0.0", ",", "sigma", "=", "1.0", ",", "rng", "=", "self", ".", "rng", ")", "\n", "\n", "# Prior for the noise", "\n", "self", ".", "horseshoe", "=", "HorseshoePrior", "(", "scale", "=", "0.1", ",", "rng", "=", "self", ".", "rng", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.default_priors.DefaultPrior.lnprob": [[27, 37], ["default_priors.DefaultPrior.ln_prior.lnprob", "default_priors.DefaultPrior.tophat.lnprob", "default_priors.DefaultPrior.horseshoe.lnprob"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.lnprob", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.lnprob", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.lnprob"], ["", "def", "lnprob", "(", "self", ",", "theta", ")", ":", "\n", "        ", "lp", "=", "0", "\n", "# Covariance amplitude", "\n", "lp", "+=", "self", ".", "ln_prior", ".", "lnprob", "(", "theta", "[", "0", "]", ")", "\n", "# Lengthscales", "\n", "lp", "+=", "self", ".", "tophat", ".", "lnprob", "(", "theta", "[", "1", ":", "-", "1", "]", ")", "\n", "# Noise", "\n", "lp", "+=", "self", ".", "horseshoe", ".", "lnprob", "(", "theta", "[", "-", "1", "]", ")", "\n", "\n", "return", "lp", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.default_priors.DefaultPrior.sample_from_prior": [[38, 49], ["numpy.zeros", "default_priors.DefaultPrior.ln_prior.sample_from_prior", "numpy.array", "default_priors.DefaultPrior.horseshoe.sample_from_prior", "default_priors.DefaultPrior.tophat.sample_from_prior", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.sample_from_prior", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.sample_from_prior", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.sample_from_prior"], ["", "def", "sample_from_prior", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "p0", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "self", ".", "n_dims", "]", ")", "\n", "# Covariance amplitude", "\n", "p0", "[", ":", ",", "0", "]", "=", "self", ".", "ln_prior", ".", "sample_from_prior", "(", "n_samples", ")", "[", ":", ",", "0", "]", "\n", "# Lengthscales", "\n", "ls_sample", "=", "np", ".", "array", "(", "[", "self", ".", "tophat", ".", "sample_from_prior", "(", "n_samples", ")", "[", ":", ",", "0", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "(", "self", ".", "n_dims", "-", "1", ")", ")", "]", ")", ".", "T", "\n", "p0", "[", ":", ",", "1", ":", "(", "self", ".", "n_dims", "-", "1", ")", "]", "=", "ls_sample", "\n", "# Noise", "\n", "p0", "[", ":", ",", "-", "1", "]", "=", "self", ".", "horseshoe", ".", "sample_from_prior", "(", "n_samples", ")", "[", ":", ",", "0", "]", "\n", "return", "p0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.default_priors.DefaultPrior.gradient": [[50, 53], ["numpy.zeros"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ")", ":", "\n", "# TODO: Implement real gradient here", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "theta", ".", "shape", "[", "0", "]", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.BasePrior.__init__": [[7, 22], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Abstract base class to define the interface for priors\n        of GP hyperparameter.\n\n        Parameters\n        ----------\n        rng: np.random.RandomState\n            Random number generator\n\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.BasePrior.lnprob": [[23, 39], ["None"], "methods", ["None"], ["", "", "def", "lnprob", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Returns the log probability of theta. Note: theta should\n        be on a log scale.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            A hyperparameter configuration in log space.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.BasePrior.sample_from_prior": [[40, 55], ["None"], "methods", ["None"], ["", "def", "sample_from_prior", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        (N, D) np.array\n            The samples from the prior.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.BasePrior.gradient": [[56, 72], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.TophatPrior.__init__": [[76, 98], ["numpy.random.RandomState", "Exception", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l_bound", ",", "u_bound", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Tophat prior as it used in the original spearmint code.\n\n        Parameters\n        ----------\n        l_bound : float\n            Lower bound of the prior. Note the log scale.\n        u_bound : float\n            Upper bound of the prior. Note the log scale.\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "", "self", ".", "min", "=", "l_bound", "\n", "self", ".", "max", "=", "u_bound", "\n", "if", "not", "(", "self", ".", "max", ">", "self", ".", "min", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Upper bound of Tophat prior must be greater \\\n            than the lower bound!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.TophatPrior.lnprob": [[99, 119], ["numpy.any", "numpy.any"], "methods", ["None"], ["", "", "def", "lnprob", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Returns the log probability of theta. Note: theta should\n        be on a log scale.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            A hyperparameter configuration in log space.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "\n", "if", "np", ".", "any", "(", "theta", "<", "self", ".", "min", ")", "or", "np", ".", "any", "(", "theta", ">", "self", ".", "max", ")", ":", "\n", "            ", "return", "-", "np", ".", "inf", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.TophatPrior.sample_from_prior": [[120, 137], ["base_prior.TophatPrior.rng.rand"], "methods", ["None"], ["", "", "def", "sample_from_prior", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        (N, D) np.array\n            The samples from the prior.\n        \"\"\"", "\n", "\n", "p0", "=", "self", ".", "min", "+", "self", ".", "rng", ".", "rand", "(", "n_samples", ")", "*", "(", "self", ".", "max", "-", "self", ".", "min", ")", "\n", "return", "p0", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.TophatPrior.gradient": [[138, 155], ["numpy.zeros"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "return", "np", ".", "zeros", "(", "[", "theta", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.HorseshoePrior.__init__": [[159, 176], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "0.1", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Horseshoe Prior as it is used in spearmint\n\n        Parameters\n        ----------\n        scale: float\n            Scaling parameter. See below how it is influenced\n            the distribution.\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.HorseshoePrior.lnprob": [[177, 196], ["numpy.any", "numpy.log", "numpy.log", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "lnprob", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Returns the log probability of theta. Note: theta should\n        be on a log scale.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            A hyperparameter configuration in log space.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "# We computed it exactly as in the original spearmint code", "\n", "if", "np", ".", "any", "(", "theta", "==", "0.0", ")", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "", "return", "np", ".", "log", "(", "np", ".", "log", "(", "1", "+", "3.0", "*", "(", "self", ".", "scale", "/", "np", ".", "exp", "(", "theta", ")", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.HorseshoePrior.sample_from_prior": [[197, 216], ["numpy.abs", "numpy.log", "base_prior.HorseshoePrior.rng.standard_cauchy", "numpy.abs", "base_prior.HorseshoePrior.rng.randn"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "sample_from_prior", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        (N, D) np.array\n            The samples from the prior.\n        \"\"\"", "\n", "\n", "lamda", "=", "np", ".", "abs", "(", "self", ".", "rng", ".", "standard_cauchy", "(", "size", "=", "n_samples", ")", ")", "\n", "\n", "p0", "=", "np", ".", "log", "(", "np", ".", "abs", "(", "self", ".", "rng", ".", "randn", "(", ")", "*", "lamda", "*", "self", ".", "scale", ")", ")", "\n", "return", "p0", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.HorseshoePrior.gradient": [[217, 236], ["numpy.log", "numpy.exp", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "gradient", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "a", "=", "-", "(", "6", "*", "self", ".", "scale", "**", "2", ")", "\n", "b", "=", "(", "3", "*", "self", ".", "scale", "**", "2", "+", "np", ".", "exp", "(", "2", "*", "theta", ")", ")", "\n", "b", "*=", "np", ".", "log", "(", "3", "*", "self", ".", "scale", "**", "2", "*", "np", ".", "exp", "(", "-", "2", "*", "theta", ")", "+", "1", ")", "\n", "return", "a", "/", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.LognormalPrior.__init__": [[239, 260], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", ",", "mean", "=", "0", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Log normal prior\n\n        Parameters\n        ----------\n        sigma: float\n            Specifies the standard deviation of the normal\n            distribution.\n        mean: float\n            Specifies the mean of the normal distribution\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.LognormalPrior.lnprob": [[261, 278], ["scipy.lognorm.logpdf"], "methods", ["None"], ["", "def", "lnprob", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Returns the log probability of theta. Note: theta should\n        be on a log scale.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            A hyperparameter configuration in log space.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "\n", "return", "sps", ".", "lognorm", ".", "logpdf", "(", "theta", ",", "self", ".", "sigma", ",", "loc", "=", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.LognormalPrior.sample_from_prior": [[279, 298], ["base_prior.LognormalPrior.rng.lognormal"], "methods", ["None"], ["", "def", "sample_from_prior", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        (N, D) np.array\n            The samples from the prior.\n        \"\"\"", "\n", "\n", "p0", "=", "self", ".", "rng", ".", "lognormal", "(", "mean", "=", "self", ".", "mean", ",", "\n", "sigma", "=", "self", ".", "sigma", ",", "\n", "size", "=", "n_samples", ")", "\n", "return", "p0", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.LognormalPrior.gradient": [[299, 315], ["None"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.__init__": [[318, 339], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", ",", "mean", "=", "0", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Normal prior\n\n        Parameters\n        ----------\n        sigma: float\n            Specifies the standard deviation of the normal\n            distribution.\n        mean: float\n            Specifies the mean of the normal distribution\n        rng: np.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.lnprob": [[340, 357], ["scipy.norm.pdf"], "methods", ["None"], ["", "def", "lnprob", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Returns the pdf of theta. Note: theta should\n        be on a log scale.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            A hyperparameter configuration in log space.\n\n        Returns\n        -------\n        float\n            The log probability of theta\n        \"\"\"", "\n", "\n", "return", "sps", ".", "norm", ".", "pdf", "(", "theta", ",", "scale", "=", "self", ".", "sigma", ",", "loc", "=", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.sample_from_prior": [[358, 377], ["base_prior.NormalPrior.rng.normal"], "methods", ["None"], ["", "def", "sample_from_prior", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns N samples from the prior.\n\n        Parameters\n        ----------\n        n_samples : int\n            The number of samples that will be drawn.\n\n        Returns\n        -------\n        (N, D) np.array\n            The samples from the prior.\n        \"\"\"", "\n", "\n", "p0", "=", "self", ".", "rng", ".", "normal", "(", "loc", "=", "self", ".", "mean", ",", "\n", "scale", "=", "self", ".", "sigma", ",", "\n", "size", "=", "n_samples", ")", "\n", "return", "p0", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.priors.base_prior.NormalPrior.gradient": [[378, 395], ["numpy.exp", "numpy.sqrt"], "methods", ["None"], ["", "def", "gradient", "(", "self", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the prior with\n        respect to theta.\n\n        Parameters\n        ----------\n        theta : (D,) numpy array\n            Hyperparameter configuration in log space\n\n        Returns\n        -------\n        (D) np.array\n            The gradient of the prior at theta.\n        \"\"\"", "\n", "return", "(", "1", "/", "(", "self", ".", "sigma", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", ")", "*", "(", "-", "theta", "/", "(", "self", ".", "sigma", "**", "2", ")", "*", "np", ".", "exp", "(", "-", "(", "theta", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.config_space.util.convert_configurations_to_array": [[8, 28], ["numpy.array", "util.impute_default_values", "config.get_array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.impute_default_values"], ["def", "convert_configurations_to_array", "(", "configs", ":", "List", "[", "Configuration", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Impute inactive hyperparameters in configurations with their default.\n\n    Necessary to apply an EPM to the data.\n\n    Parameters\n    ----------\n    configs : List[Configuration]\n        List of configuration objects.\n\n    Returns\n    -------\n    np.ndarray\n        Array with configuration hyperparameters. Inactive values are imputed\n        with their default value.\n    \"\"\"", "\n", "configs_array", "=", "np", ".", "array", "(", "[", "config", ".", "get_array", "(", ")", "for", "config", "in", "configs", "]", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "configuration_space", "=", "configs", "[", "0", "]", ".", "configuration_space", "\n", "return", "impute_default_values", "(", "configuration_space", ",", "configs_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.config_space.util.impute_default_values": [[30, 58], ["configuration_space.get_hyperparameters", "configuration_space.get_idx_by_hyperparameter_name", "numpy.isfinite"], "function", ["None"], ["", "def", "impute_default_values", "(", "\n", "configuration_space", ":", "ConfigurationSpace", ",", "\n", "configs_array", ":", "np", ".", "ndarray", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Impute inactive hyperparameters in configuration array with their default.\n\n    Necessary to apply an EPM to the data.\n\n    Parameters\n    ----------\n    configuration_space : ConfigurationSpace\n    \n    configs_array : np.ndarray\n        Array of configurations.\n\n    Returns\n    -------\n    np.ndarray\n        Array with configuration hyperparameters. Inactive values are imputed\n        with their default value.\n    \"\"\"", "\n", "for", "hp", "in", "configuration_space", ".", "get_hyperparameters", "(", ")", ":", "\n", "        ", "default", "=", "hp", ".", "normalized_default_value", "\n", "idx", "=", "configuration_space", ".", "get_idx_by_hyperparameter_name", "(", "hp", ".", "name", ")", "\n", "nonfinite_mask", "=", "~", "np", ".", "isfinite", "(", "configs_array", "[", ":", ",", "idx", "]", ")", "\n", "configs_array", "[", "nonfinite_mask", ",", "idx", "]", "=", "default", "\n", "\n", "", "return", "configs_array", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.AcquisitionFunctionMaximizer.__init__": [[30, 47], ["logging.getLogger", "ei_optimization.AcquisitionFunctionMaximizer.logger.debug", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["def", "__init__", "(", "\n", "self", ",", "\n", "acquisition_function", ":", "AbstractAcquisitionFunction", ",", "\n", "config_space", ":", "ConfigurationSpace", ",", "\n", "rng", ":", "Union", "[", "bool", ",", "np", ".", "random", ".", "RandomState", "]", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\n", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", "\n", ")", "\n", "self", ".", "acquisition_function", "=", "acquisition_function", "\n", "self", ".", "config_space", "=", "config_space", "\n", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'no rng given, using default seed of 1'", ")", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.AcquisitionFunctionMaximizer.maximize": [[49, 73], ["ei_optimization.AcquisitionFunctionMaximizer._maximize"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.InterleavedLocalAndRandomSearch._maximize"], ["", "", "def", "maximize", "(", "\n", "self", ",", "\n", "runhistory", ":", "HistoryContainer", ",", "\n", "num_points", ":", "int", ",", "\n", "**", "kwargs", "\n", ")", "->", "Iterable", "[", "Configuration", "]", ":", "\n", "        ", "\"\"\"Maximize acquisition function using ``_maximize``.\n\n        Parameters\n        ----------\n        runhistory: ~openbox.utils.history_container.HistoryContainer\n            runhistory object\n        stats: ~openbox.stats.stats.Stats\n            current stats object\n        num_points: int\n            number of points to be sampled\n        **kwargs\n\n        Returns\n        -------\n        iterable\n            An iterable consisting of :class:`openbox.config_space.Configuration`.\n        \"\"\"", "\n", "return", "[", "t", "[", "1", "]", "for", "t", "in", "self", ".", "_maximize", "(", "runhistory", ",", "num_points", ",", "**", "kwargs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.AcquisitionFunctionMaximizer._maximize": [[74, 104], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_maximize", "(", "\n", "self", ",", "\n", "runhistory", ":", "HistoryContainer", ",", "\n", "num_points", ":", "int", ",", "\n", "**", "kwargs", "\n", ")", "->", "Iterable", "[", "Tuple", "[", "float", ",", "Configuration", "]", "]", ":", "\n", "        ", "\"\"\"Implements acquisition function maximization.\n\n        In contrast to ``maximize``, this method returns an iterable of tuples,\n        consisting of the acquisition function value and the configuration. This\n        allows to plug together different acquisition function maximizers.\n\n        Parameters\n        ----------\n        runhistory: ~openbox.utils.history_container.HistoryContainer\n            runhistory object\n        stats: ~openbox.stats.stats.Stats\n            current stats object\n        num_points: int\n            number of points to be sampled\n        **kwargs\n\n        Returns\n        -------\n        iterable\n            An iterable consistng of\n            tuple(acqusition_value, :class:`openbox.config_space.Configuration`).\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.AcquisitionFunctionMaximizer._sort_configs_by_acq_value": [[105, 132], ["ei_optimization.AcquisitionFunctionMaximizer.acquisition_function", "ei_optimization.AcquisitionFunctionMaximizer.rng.rand", "numpy.lexsort", "len", "ei_optimization.AcquisitionFunctionMaximizer.flatten", "ei_optimization.AcquisitionFunctionMaximizer.flatten"], "methods", ["None"], ["", "def", "_sort_configs_by_acq_value", "(", "\n", "self", ",", "\n", "configs", ":", "List", "[", "Configuration", "]", "\n", ")", "->", "List", "[", "Tuple", "[", "float", ",", "Configuration", "]", "]", ":", "\n", "        ", "\"\"\"Sort the given configurations by acquisition value\n\n        Parameters\n        ----------\n        configs : list(Configuration)\n\n        Returns\n        -------\n        list: (acquisition value, Candidate solutions),\n                ordered by their acquisition function value\n        \"\"\"", "\n", "\n", "acq_values", "=", "self", ".", "acquisition_function", "(", "configs", ")", "\n", "\n", "# From here", "\n", "# http://stackoverflow.com/questions/20197990/how-to-make-argsort-result-to-be-random-between-equal-values", "\n", "random", "=", "self", ".", "rng", ".", "rand", "(", "len", "(", "acq_values", ")", ")", "\n", "# Last column is primary sort key!", "\n", "indices", "=", "np", ".", "lexsort", "(", "(", "random", ".", "flatten", "(", ")", ",", "acq_values", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "# Cannot use zip here because the indices array cannot index the", "\n", "# rand_configs list, because the second is a pure python list", "\n", "return", "[", "(", "acq_values", "[", "ind", "]", "[", "0", "]", ",", "configs", "[", "ind", "]", ")", "for", "ind", "in", "indices", "[", ":", ":", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.LocalSearch.__init__": [[154, 165], ["ei_optimization.AcquisitionFunctionMaximizer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "acquisition_function", ":", "AbstractAcquisitionFunction", ",", "\n", "config_space", ":", "ConfigurationSpace", ",", "\n", "rng", ":", "Union", "[", "bool", ",", "np", ".", "random", ".", "RandomState", "]", "=", "None", ",", "\n", "max_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "n_steps_plateau_walk", ":", "int", "=", "10", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "acquisition_function", ",", "config_space", ",", "rng", ")", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "n_steps_plateau_walk", "=", "n_steps_plateau_walk", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.LocalSearch._maximize": [[166, 216], ["ei_optimization.LocalSearch._get_initial_points", "ei_optimization.LocalSearch.rng.shuffle", "configs_acq.sort", "ei_optimization.LocalSearch._one_iter", "configs_acq.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.LocalSearch._get_initial_points", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.LocalSearch._one_iter"], ["", "def", "_maximize", "(", "\n", "self", ",", "\n", "runhistory", ":", "HistoryContainer", ",", "\n", "num_points", ":", "int", ",", "\n", "**", "kwargs", "\n", ")", "->", "List", "[", "Tuple", "[", "float", ",", "Configuration", "]", "]", ":", "\n", "        ", "\"\"\"Starts a local search from the given startpoint and quits\n        if either the max number of steps is reached or no neighbor\n        with an higher improvement was found.\n\n        Parameters\n        ----------\n        runhistory: ~openbox.utils.history_container.HistoryContainer\n            runhistory object\n        stats: ~openbox.stats.stats.Stats\n            current stats object\n        num_points: int\n            number of points to be sampled\n        ***kwargs:\n            Additional parameters that will be passed to the\n            acquisition function\n\n        Returns\n        -------\n        incumbent: np.array(1, D)\n            The best found configuration\n        acq_val_incumbent: np.array(1,1)\n            The acquisition value of the incumbent\n\n        \"\"\"", "\n", "\n", "init_points", "=", "self", ".", "_get_initial_points", "(", "\n", "num_points", ",", "runhistory", ")", "\n", "\n", "configs_acq", "=", "[", "]", "\n", "# Start N local search from different random start points", "\n", "for", "start_point", "in", "init_points", ":", "\n", "            ", "acq_val", ",", "configuration", "=", "self", ".", "_one_iter", "(", "\n", "start_point", ",", "**", "kwargs", ")", "\n", "\n", "configuration", ".", "origin", "=", "\"Local Search\"", "\n", "configs_acq", ".", "append", "(", "(", "acq_val", ",", "configuration", ")", ")", "\n", "\n", "# shuffle for random tie-break", "\n", "", "self", ".", "rng", ".", "shuffle", "(", "configs_acq", ")", "\n", "\n", "# sort according to acq value", "\n", "configs_acq", ".", "sort", "(", "reverse", "=", "True", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "return", "configs_acq", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.LocalSearch._get_initial_points": [[217, 237], ["runhistory.empty", "ei_optimization.LocalSearch.config_space.sample_configuration", "runhistory.get_all_configs", "ei_optimization.LocalSearch._sort_configs_by_acq_value", "int", "list", "min", "map", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.empty", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_all_configs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.AcquisitionFunctionMaximizer._sort_configs_by_acq_value", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.thread_executor.ProcessKillingExecutor.map"], ["", "def", "_get_initial_points", "(", "self", ",", "num_points", ",", "runhistory", ")", ":", "\n", "\n", "        ", "if", "runhistory", ".", "empty", "(", ")", ":", "\n", "            ", "init_points", "=", "self", ".", "config_space", ".", "sample_configuration", "(", "\n", "size", "=", "num_points", ")", "\n", "", "else", ":", "\n", "# initiate local search with best configurations from previous runs", "\n", "            ", "configs_previous_runs", "=", "runhistory", ".", "get_all_configs", "(", ")", "\n", "configs_previous_runs_sorted", "=", "self", ".", "_sort_configs_by_acq_value", "(", "\n", "configs_previous_runs", ")", "\n", "num_configs_local_search", "=", "int", "(", "min", "(", "\n", "len", "(", "configs_previous_runs_sorted", ")", ",", "\n", "num_points", ")", "\n", ")", "\n", "init_points", "=", "list", "(", "\n", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", "configs_previous_runs_sorted", "[", ":", "num_configs_local_search", "]", ")", "\n", ")", "\n", "\n", "", "return", "init_points", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.LocalSearch._one_iter": [[238, 307], ["ei_optimization.LocalSearch.acquisition_function", "config_space.get_one_exchange_neighbourhood", "ei_optimization.LocalSearch.logger.warning", "time.time", "ei_optimization.LocalSearch.acquisition_function", "time_n.append", "ei_optimization.LocalSearch.logger.debug", "ei_optimization.LocalSearch.rng.seed", "neighbors.append", "ei_optimization.LocalSearch.logger.debug", "len", "numpy.mean", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["", "def", "_one_iter", "(", "\n", "self", ",", "\n", "start_point", ":", "Configuration", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "float", ",", "Configuration", "]", ":", "\n", "\n", "        ", "incumbent", "=", "start_point", "\n", "# Compute the acquisition value of the incumbent", "\n", "acq_val_incumbent", "=", "self", ".", "acquisition_function", "(", "[", "incumbent", "]", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "\n", "local_search_steps", "=", "0", "\n", "neighbors_looked_at", "=", "0", "\n", "n_no_improvements", "=", "0", "\n", "time_n", "=", "[", "]", "\n", "while", "True", ":", "\n", "\n", "            ", "local_search_steps", "+=", "1", "\n", "if", "local_search_steps", "%", "1000", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\n", "\"Local search took already %d iterations. Is it maybe \"", "\n", "\"stuck in a infinite loop?\"", ",", "local_search_steps", "\n", ")", "\n", "\n", "# Get neighborhood of the current incumbent", "\n", "# by randomly drawing configurations", "\n", "", "changed_inc", "=", "False", "\n", "\n", "# Get one exchange neighborhood returns an iterator (in contrast of", "\n", "# the previously returned list).", "\n", "all_neighbors", "=", "get_one_exchange_neighbourhood", "(", "\n", "incumbent", ",", "seed", "=", "self", ".", "rng", ".", "seed", "(", ")", ")", "\n", "\n", "neighbors", "=", "[", "]", "\n", "for", "neighbor", "in", "all_neighbors", ":", "\n", "                ", "s_time", "=", "time", ".", "time", "(", ")", "\n", "acq_val", "=", "self", ".", "acquisition_function", "(", "[", "neighbor", "]", ",", "**", "kwargs", ")", "\n", "neighbors_looked_at", "+=", "1", "\n", "time_n", ".", "append", "(", "time", ".", "time", "(", ")", "-", "s_time", ")", "\n", "\n", "if", "acq_val", "==", "acq_val_incumbent", ":", "\n", "                    ", "neighbors", ".", "append", "(", "neighbor", ")", "\n", "", "if", "acq_val", ">", "acq_val_incumbent", ":", "\n", "                    ", "self", ".", "logger", ".", "debug", "(", "\"Switch to one of the neighbors\"", ")", "\n", "incumbent", "=", "neighbor", "\n", "acq_val_incumbent", "=", "acq_val", "\n", "changed_inc", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "(", "\n", "not", "changed_inc", "\n", "and", "n_no_improvements", "<", "self", ".", "n_steps_plateau_walk", "\n", "and", "len", "(", "neighbors", ")", ">", "0", "\n", ")", ":", "\n", "                ", "n_no_improvements", "+=", "1", "\n", "incumbent", "=", "neighbors", "[", "0", "]", "\n", "changed_inc", "=", "True", "\n", "\n", "", "if", "(", "not", "changed_inc", ")", "or", "(", "self", ".", "max_steps", "is", "not", "None", "and", "\n", "local_search_steps", "==", "self", ".", "max_steps", ")", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "\"Local search took %d steps and looked at %d \"", "\n", "\"configurations. Computing the acquisition \"", "\n", "\"value for one configuration took %f seconds\"", "\n", "\" on average.\"", ",", "\n", "local_search_steps", ",", "neighbors_looked_at", ",", "\n", "np", ".", "mean", "(", "time_n", ")", ")", "\n", "break", "\n", "\n", "", "", "return", "acq_val_incumbent", ",", "incumbent", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.RandomSearch._maximize": [[321, 361], ["ei_optimization.RandomSearch.config_space.sample_configuration", "range", "ei_optimization.RandomSearch._sort_configs_by_acq_value", "range", "ei_optimization.RandomSearch.config_space.sample_configuration", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.AcquisitionFunctionMaximizer._sort_configs_by_acq_value"], ["def", "_maximize", "(", "\n", "self", ",", "\n", "runhistory", ":", "HistoryContainer", ",", "\n", "num_points", ":", "int", ",", "\n", "_sorted", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", "->", "List", "[", "Tuple", "[", "float", ",", "Configuration", "]", "]", ":", "\n", "        ", "\"\"\"Randomly sampled configurations\n\n        Parameters\n        ----------\n        runhistory: ~openbox.utils.history_container.HistoryContainer\n            runhistory object\n        num_points: int\n            number of points to be sampled\n        _sorted: bool\n            whether random configurations are sorted according to acquisition function\n        **kwargs\n            not used\n\n        Returns\n        -------\n        iterable\n            An iterable consistng of\n            tuple(acqusition_value, :class:`openbox.config_space.Configuration`).\n        \"\"\"", "\n", "\n", "if", "num_points", ">", "1", ":", "\n", "            ", "rand_configs", "=", "self", ".", "config_space", ".", "sample_configuration", "(", "\n", "size", "=", "num_points", ")", "\n", "", "else", ":", "\n", "            ", "rand_configs", "=", "[", "self", ".", "config_space", ".", "sample_configuration", "(", "size", "=", "1", ")", "]", "\n", "", "if", "_sorted", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "rand_configs", ")", ")", ":", "\n", "                ", "rand_configs", "[", "i", "]", ".", "origin", "=", "'Random Search (sorted)'", "\n", "", "return", "self", ".", "_sort_configs_by_acq_value", "(", "rand_configs", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "rand_configs", ")", ")", ":", "\n", "                ", "rand_configs", "[", "i", "]", ".", "origin", "=", "'Random Search'", "\n", "", "return", "[", "(", "0", ",", "rand_configs", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "rand_configs", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.InterleavedLocalAndRandomSearch.__init__": [[389, 413], ["ei_optimization.AcquisitionFunctionMaximizer.__init__", "ei_optimization.RandomSearch", "ei_optimization.LocalSearch"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "acquisition_function", ":", "AbstractAcquisitionFunction", ",", "\n", "config_space", ":", "ConfigurationSpace", ",", "\n", "rng", ":", "Union", "[", "bool", ",", "np", ".", "random", ".", "RandomState", "]", "=", "None", ",", "\n", "max_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "n_steps_plateau_walk", ":", "int", "=", "10", ",", "\n", "n_sls_iterations", ":", "int", "=", "10", "\n", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "acquisition_function", ",", "config_space", ",", "rng", ")", "\n", "self", ".", "random_search", "=", "RandomSearch", "(", "\n", "acquisition_function", "=", "acquisition_function", ",", "\n", "config_space", "=", "config_space", ",", "\n", "rng", "=", "rng", "\n", ")", "\n", "self", ".", "local_search", "=", "LocalSearch", "(", "\n", "acquisition_function", "=", "acquisition_function", ",", "\n", "config_space", "=", "config_space", ",", "\n", "rng", "=", "rng", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "n_steps_plateau_walk", "=", "n_steps_plateau_walk", "\n", ")", "\n", "self", ".", "n_sls_iterations", "=", "n_sls_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.InterleavedLocalAndRandomSearch.maximize": [[422, 485], ["ei_optimization.InterleavedLocalAndRandomSearch.local_search._maximize", "ei_optimization.InterleavedLocalAndRandomSearch.random_search._maximize", "next_configs_by_acq_value.sort", "ei_optimization.InterleavedLocalAndRandomSearch.logger.debug", "ei_optimization.ChallengerList", "random_configuration_chooser.next_smbo_iteration", "str", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.InterleavedLocalAndRandomSearch._maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.InterleavedLocalAndRandomSearch._maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserCosineAnnealing.next_smbo_iteration"], ["", "def", "maximize", "(", "\n", "self", ",", "\n", "runhistory", ":", "HistoryContainer", ",", "\n", "num_points", ":", "int", ",", "\n", "random_configuration_chooser", ",", "\n", "**", "kwargs", "\n", ")", "->", "Iterable", "[", "Configuration", "]", ":", "\n", "        ", "\"\"\"Maximize acquisition function using ``_maximize``.\n\n        Parameters\n        ----------\n        runhistory: ~openbox.utils.history_container.HistoryContainer\n            runhistory object\n        num_points: int\n            number of points to be sampled\n        random_configuration_chooser: ~openbox.optimizer.random_configuration_chooser.RandomConfigurationChooser\n            part of the returned ChallengerList such\n            that we can interleave random configurations\n            by a scheme defined by the random_configuration_chooser;\n            random_configuration_chooser.next_smbo_iteration()\n            is called at the end of this function\n        **kwargs\n            passed to acquisition function\n\n        Returns\n        -------\n        Iterable[Configuration]\n            to be concrete: ~openbox.ei_optimization.ChallengerList\n        \"\"\"", "\n", "\n", "next_configs_by_local_search", "=", "self", ".", "local_search", ".", "_maximize", "(", "\n", "runhistory", ",", "self", ".", "n_sls_iterations", ",", "**", "kwargs", "\n", ")", "\n", "\n", "# Get configurations sorted by EI", "\n", "next_configs_by_random_search_sorted", "=", "self", ".", "random_search", ".", "_maximize", "(", "\n", "runhistory", ",", "\n", "num_points", "-", "len", "(", "next_configs_by_local_search", ")", ",", "\n", "_sorted", "=", "True", ",", "\n", ")", "\n", "\n", "# Having the configurations from random search, sorted by their", "\n", "# acquisition function value is important for the first few iterations", "\n", "# of openbox. As long as the random forest predicts constant value, we", "\n", "# want to use only random configurations. Having them at the begging of", "\n", "# the list ensures this (even after adding the configurations by local", "\n", "# search, and then sorting them)", "\n", "next_configs_by_acq_value", "=", "(", "\n", "next_configs_by_random_search_sorted", "\n", "+", "next_configs_by_local_search", "\n", ")", "\n", "next_configs_by_acq_value", ".", "sort", "(", "reverse", "=", "True", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "logger", ".", "debug", "(", "\n", "\"First 10 acq func (origin) values of selected configurations: %s\"", ",", "\n", "str", "(", "[", "[", "_", "[", "0", "]", ",", "_", "[", "1", "]", ".", "origin", "]", "for", "_", "in", "next_configs_by_acq_value", "[", ":", "10", "]", "]", ")", "\n", ")", "\n", "next_configs_by_acq_value", "=", "[", "_", "[", "1", "]", "for", "_", "in", "next_configs_by_acq_value", "]", "\n", "\n", "challengers", "=", "ChallengerList", "(", "next_configs_by_acq_value", ",", "\n", "self", ".", "config_space", ",", "\n", "random_configuration_chooser", ")", "\n", "random_configuration_chooser", ".", "next_smbo_iteration", "(", ")", "\n", "return", "challengers", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.InterleavedLocalAndRandomSearch._maximize": [[486, 493], ["NotImplementedError"], "methods", ["None"], ["", "def", "_maximize", "(", "\n", "self", ",", "\n", "runhistory", ":", "HistoryContainer", ",", "\n", "num_points", ":", "int", ",", "\n", "**", "kwargs", "\n", ")", "->", "Iterable", "[", "Tuple", "[", "float", ",", "Configuration", "]", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.ChallengerList.__init__": [[512, 518], ["optimizer.random_configuration_chooser.ChooserNoCoolDown"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "challengers", ",", "configuration_space", ",", "random_configuration_chooser", "=", "ChooserNoCoolDown", "(", "2.0", ")", ")", ":", "\n", "        ", "self", ".", "challengers", "=", "challengers", "\n", "self", ".", "configuration_space", "=", "configuration_space", "\n", "self", ".", "_index", "=", "0", "\n", "self", ".", "_iteration", "=", "1", "# 1-based to prevent from starting with a random configuration", "\n", "self", ".", "random_configuration_chooser", "=", "random_configuration_chooser", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.ChallengerList.__iter__": [[519, 521], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.ei_optimization.ChallengerList.__next__": [[522, 534], ["len", "ei_optimization.ChallengerList.random_configuration_chooser.check", "ei_optimization.ChallengerList.configuration_space.sample_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserCosineAnnealing.check"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_index", "==", "len", "(", "self", ".", "challengers", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "random_configuration_chooser", ".", "check", "(", "self", ".", "_iteration", ")", ":", "\n", "                ", "config", "=", "self", ".", "configuration_space", ".", "sample_configuration", "(", ")", "\n", "config", ".", "origin", "=", "'Random Search'", "\n", "", "else", ":", "\n", "                ", "config", "=", "self", ".", "challengers", "[", "self", ".", "_index", "]", "\n", "self", ".", "_index", "+=", "1", "\n", "", "self", ".", "_iteration", "+=", "1", "\n", "return", "config", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.RandomConfigurationChooser.next_smbo_iteration": [[13, 17], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "next_smbo_iteration", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Indicate beginning of next SMBO iteration\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.RandomConfigurationChooser.check": [[18, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "check", "(", "self", ",", "iteration", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Check if the next configuration should be at random\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserNoCoolDown.__init__": [[34, 40], ["logging.getLogger", "random_configuration_chooser.ChooserNoCoolDown.logger.warning"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["def", "__init__", "(", "self", ",", "modulus", ":", "float", "=", "2.0", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "if", "modulus", "<=", "1.0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Using SMAC with random configurations only.\"", "\n", "\"ROAR is the better choice for this.\"", ")", "\n", "", "self", ".", "modulus", "=", "modulus", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserNoCoolDown.next_smbo_iteration": [[41, 43], ["None"], "methods", ["None"], ["", "def", "next_smbo_iteration", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserNoCoolDown.check": [[44, 46], ["None"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "iteration", ")", "->", "bool", ":", "\n", "        ", "return", "iteration", "%", "self", ".", "modulus", "<", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserLinearCoolDown.__init__": [[50, 71], ["logging.getLogger", "random_configuration_chooser.ChooserLinearCoolDown.logger.warning"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["    ", "def", "__init__", "(", "self", ",", "start_modulus", ":", "float", "=", "2.0", ",", "modulus_increment", ":", "float", "=", "0.3", ",", "end_modulus", ":", "float", "=", "np", ".", "inf", ")", ":", "\n", "        ", "\"\"\"Interleave a random configuration, decreasing the fraction of random configurations over time.\n\n        Parameters\n        ----------\n        start_modulus : float\n            Initially, every modulus-th configuration will be at random\n        modulus_increment : float\n            Increase modulus by this amount in every iteration\n        end_modulus : float\n            Highest modulus used in the chooser. If the value is reached before the optimization is over, it is not\n            further increased. If it is not reached before the optimization is over, there will be no adjustment to make\n            sure that the ``end_modulus`` is reached.\n        \"\"\"", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "if", "start_modulus", "<=", "1.0", "and", "modulus_increment", "<=", "0.0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Using SMAC with random configurations only. ROAR is the better choice for this.\"", ")", "\n", "", "self", ".", "modulus", "=", "start_modulus", "\n", "self", ".", "modulus_increment", "=", "modulus_increment", "\n", "self", ".", "end_modulus", "=", "end_modulus", "\n", "self", ".", "last_iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserLinearCoolDown.next_smbo_iteration": [[72, 76], ["min"], "methods", ["None"], ["", "def", "next_smbo_iteration", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "modulus", "+=", "self", ".", "modulus_increment", "\n", "self", ".", "modulus", "=", "min", "(", "self", ".", "modulus", ",", "self", ".", "end_modulus", ")", "\n", "self", ".", "last_iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserLinearCoolDown.check": [[77, 83], ["None"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "iteration", ":", "int", ")", "->", "bool", ":", "\n", "        ", "if", "(", "iteration", "-", "self", ".", "last_iteration", ")", "%", "self", ".", "modulus", "<", "1", ":", "\n", "            ", "self", ".", "last_iteration", "=", "iteration", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserProb.__init__": [[87, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ":", "float", ",", "rng", ":", "np", ".", "random", ".", "RandomState", ")", ":", "\n", "        ", "\"\"\"Interleave a random configuration according to a given probability.\n\n        Parameters\n        ----------\n        prob : float\n            Probility of a random configuration\n        rng : np.random.RandomState\n            Random state\n        \"\"\"", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserProb.next_smbo_iteration": [[100, 102], ["None"], "methods", ["None"], ["", "def", "next_smbo_iteration", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserProb.check": [[103, 108], ["random_configuration_chooser.ChooserProb.rng.rand"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "iteration", ":", "int", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "rng", ".", "rand", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserProbCoolDown.__init__": [[112, 127], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ":", "float", ",", "cool_down_fac", ":", "float", ",", "rng", ":", "np", ".", "random", ".", "RandomState", ")", ":", "\n", "        ", "\"\"\"Interleave a random configuration according to a given probability which is decreased over time.\n\n        Parameters\n        ----------\n        prob : float\n            Probility of a random configuration\n        cool_down_fac : float\n            Multiply the ``prob`` by ``cool_down_fac`` in each iteration\n        rng : np.random.RandomState\n            Random state\n        \"\"\"", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "rng", "=", "rng", "\n", "self", ".", "cool_down_fac", "=", "cool_down_fac", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserProbCoolDown.next_smbo_iteration": [[128, 130], ["None"], "methods", ["None"], ["", "def", "next_smbo_iteration", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "prob", "*=", "self", ".", "cool_down_fac", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserProbCoolDown.check": [[131, 136], ["random_configuration_chooser.ChooserProbCoolDown.rng.rand"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "iteration", ":", "int", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "rng", ".", "rand", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserCosineAnnealing.__init__": [[154, 169], ["logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "prob_max", ":", "float", ",", "\n", "prob_min", ":", "float", ",", "\n", "restart_iteration", ":", "int", ",", "\n", "rng", ":", "np", ".", "random", ".", "RandomState", ",", "\n", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\n", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "prob_max", "=", "prob_max", "\n", "self", ".", "prob_min", "=", "prob_min", "\n", "self", ".", "restart_iteration", "=", "restart_iteration", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "prob", "=", "prob_max", "\n", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserCosineAnnealing.next_smbo_iteration": [[170, 180], ["random_configuration_chooser.ChooserCosineAnnealing.logger.error", "random_configuration_chooser.ChooserCosineAnnealing.logger.error", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "def", "next_smbo_iteration", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "prob", "=", "(", "\n", "self", ".", "prob_min", "\n", "+", "(", "0.5", "*", "(", "self", ".", "prob_max", "-", "self", ".", "prob_min", ")", "*", "(", "1", "+", "np", ".", "cos", "(", "self", ".", "iteration", "*", "np", ".", "pi", "/", "self", ".", "restart_iteration", ")", ")", ")", "\n", ")", "\n", "self", ".", "logger", ".", "error", "(", "\"Probability for random configs: %f\"", "%", "(", "self", ".", "prob", ")", ")", "\n", "self", ".", "iteration", "+=", "1", "\n", "if", "self", ".", "iteration", ">", "self", ".", "restart_iteration", ":", "\n", "            ", "self", ".", "iteration", "=", "0", "\n", "self", ".", "logger", ".", "error", "(", "\"Perform restart in next iteration!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizer.random_configuration_chooser.ChooserCosineAnnealing.check": [[181, 188], ["random_configuration_chooser.ChooserCosineAnnealing.rng.rand", "random_configuration_chooser.ChooserCosineAnnealing.logger.error", "random_configuration_chooser.ChooserCosineAnnealing.logger.error"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "", "def", "check", "(", "self", ",", "iteration", ":", "int", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "rng", ".", "rand", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "\"Random Config\"", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "\"Acq Config\"", ")", "\n", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.ta_acquisition.TAQ_EI.__init__": [[10, 40], ["acquisition.AbstractAcquisitionFunction.__init__", "acquisition.EI", "list", "range", "len", "ta_acquisition.TAQ_EI.pi_list.append", "acquisition.PI"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "source_models", ",", "\n", "aggregate_method", "=", "'taff'", ",", "\n", "par", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            A model that implements at least\n                 - predict_marginalized_over_instances(X)\n        par : float, default=0.0\n            Controls the balance between exploration and exploitation of the\n            acquisition function.\n        \"\"\"", "\n", "\n", "super", "(", "TAQ_EI", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "long_name", "=", "'TAQF Expected Improvement'", "\n", "self", ".", "par", "=", "par", "\n", "self", ".", "eta", "=", "None", "\n", "self", ".", "ei_acq", "=", "EI", "(", "model", ",", "par", "=", "par", ")", "\n", "self", ".", "source_models", "=", "source_models", "\n", "self", ".", "source_etas", "=", "None", "\n", "self", ".", "model_weights", "=", "None", "\n", "self", ".", "aggregate_method", "=", "aggregate_method", "\n", "if", "self", ".", "aggregate_method", "==", "'taff2'", ":", "\n", "            ", "self", ".", "pi_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "source_models", ")", ")", ":", "\n", "                ", "self", ".", "pi_list", ".", "append", "(", "PI", "(", "self", ".", "source_models", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.ta_acquisition.TAQ_EI.update_target_model": [[41, 49], ["ta_acquisition.TAQ_EI.ei_acq.update", "range", "len", "ta_acquisition.TAQ_EI.pi_list[].update"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["", "", "", "def", "update_target_model", "(", "self", ",", "model", ",", "eta", ",", "num_data", ",", "source_etas", ",", "model_weights", ")", ":", "\n", "        ", "self", ".", "ei_acq", ".", "update", "(", "model", "=", "model", ",", "eta", "=", "eta", ",", "num_data", "=", "num_data", ")", "\n", "self", ".", "source_etas", "=", "source_etas", "\n", "self", ".", "model_weights", "=", "model_weights", "\n", "\n", "if", "self", ".", "aggregate_method", "==", "'taff2'", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "source_models", ")", ")", ":", "\n", "                ", "self", ".", "pi_list", "[", "i", "]", ".", "update", "(", "eta", "=", "self", ".", "source_etas", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.ta_acquisition.TAQ_EI._compute": [[50, 87], ["len", "range", "len", "ValueError", "len", "ta_acquisition.TAQ_EI.ei_acq._compute", "ta_acquisition.TAQ_EI.source_models[].predict_marginalized_over_instances", "numpy.sqrt", "numpy.random.normal", "numpy.max", "m.flatten", "numpy.sqrt.flatten", "numpy.max.reshape", "ValueError", "ta_acquisition.TAQ_EI.pi_list[]._compute"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI._compute", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI._compute"], ["", "", "", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the EI value and its derivatives.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D), The input points where the acquisition function\n            should be evaluated. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "if", "self", ".", "model_weights", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'No model weights specified.'", ")", "\n", "\n", "", "n_source_tasks", "=", "len", "(", "self", ".", "source_models", ")", "\n", "assert", "n_source_tasks", "+", "1", "==", "len", "(", "self", ".", "model_weights", ")", "\n", "acq_values", "=", "self", ".", "model_weights", "[", "-", "1", "]", "*", "self", ".", "ei_acq", ".", "_compute", "(", "X", ")", "\n", "for", "i", "in", "range", "(", "n_source_tasks", ")", ":", "\n", "            ", "if", "self", ".", "aggregate_method", "==", "'taff'", ":", "\n", "                ", "m", ",", "v", "=", "self", ".", "source_models", "[", "i", "]", ".", "predict_marginalized_over_instances", "(", "X", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "v", ")", "\n", "eta_", "=", "self", ".", "source_etas", "[", "i", "]", "\n", "y_", "=", "np", ".", "random", ".", "normal", "(", "m", ".", "flatten", "(", ")", ",", "s", ".", "flatten", "(", ")", ")", "\n", "par_acq", "=", "np", ".", "max", "(", "eta_", "-", "y_", ",", "0", ")", "\n", "acq_values", "+=", "self", ".", "model_weights", "[", "i", "]", "*", "par_acq", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "aggregate_method", "==", "'taff2'", ":", "\n", "                ", "acq_values", "+=", "self", ".", "model_weights", "[", "i", "]", "*", "self", ".", "pi_list", "[", "i", "]", ".", "_compute", "(", "X", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid method!'", ")", "\n", "", "", "return", "acq_values", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.AbstractAcquisitionFunction.__str__": [[24, 26], ["type"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", ".", "__name__", "+", "\" (\"", "+", "self", ".", "long_name", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.AbstractAcquisitionFunction.__init__": [[27, 37], ["utils.logging.PickableLoggerAdapter"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "model", ":", "AbstractModel", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            Models the objective function.\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "logger", "=", "PickableLoggerAdapter", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.AbstractAcquisitionFunction.update": [[38, 54], ["setattr"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Update the acquisition functions values.\n\n        This method will be called if the model is updated. E.g.\n        entropy search uses it to update its approximation of P(x=x_min),\n        EI uses it to update the current fmin.\n\n        The default implementation takes all keyword arguments and sets the\n        respective attributes for the acquisition function object.\n\n        Parameters\n        ----------\n        kwargs\n        \"\"\"", "\n", "for", "key", "in", "kwargs", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.AbstractAcquisitionFunction.__call__": [[55, 78], ["config_space.util.convert_configurations_to_array", "acquisition.AbstractAcquisitionFunction._compute", "numpy.any", "len", "numpy.isnan", "numpy.where", "numpy.isnan", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI._compute"], ["", "", "def", "__call__", "(", "self", ",", "configurations", ":", "List", "[", "Configuration", "]", ")", ":", "\n", "        ", "\"\"\"Computes the acquisition value for a given X\n\n        Parameters\n        ----------\n        configurations : list\n            The configurations where the acquisition function\n            should be evaluated.\n\n        Returns\n        -------\n        np.ndarray(N, 1)\n            acquisition values for X\n        \"\"\"", "\n", "X", "=", "convert_configurations_to_array", "(", "configurations", ")", "\n", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "acq", "=", "self", ".", "_compute", "(", "X", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "acq", ")", ")", ":", "\n", "            ", "idx", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "acq", ")", ")", "[", "0", "]", "\n", "acq", "[", "idx", ",", ":", "]", "=", "-", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "\n", "", "return", "acq", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.AbstractAcquisitionFunction._compute": [[79, 98], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Computes the acquisition value for a given point X. This function has\n        to be overwritten in a derived class.\n\n        Parameters\n        ----------\n        X : np.ndarray\n            The input points where the acquisition function\n            should be evaluated. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Acquisition function values wrt X\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.IntegratedAcquisitionFunction.__init__": [[109, 126], ["acquisition.AbstractAcquisitionFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "AbstractModel", ",", "acquisition_function", ":", "AbstractAcquisitionFunction", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            The model needs to implement an additional attribute ``models`` which contains the different models to\n            integrate over.\n        kwargs\n            Additional keyword arguments\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "model", ",", "**", "kwargs", ")", "\n", "self", ".", "long_name", "=", "'Integrated Acquisition Function (%s)'", "%", "acquisition_function", ".", "long_name", "\n", "self", ".", "acq", "=", "acquisition_function", "\n", "self", ".", "_functions", "=", "None", "\n", "self", ".", "eta", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.IntegratedAcquisitionFunction.update": [[127, 149], ["zip", "ValueError", "func.update", "hasattr", "len", "len", "len", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update"], ["", "def", "update", "(", "self", ",", "model", ":", "AbstractModel", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Update the acquisition functions values.\n\n        This method will be called if the model is updated. E.g. entropy search uses it to update its approximation\n        of P(x=x_min), EI uses it to update the current fmin.\n\n        This implementation creates an acquisition function object for each model to integrate over and sets the\n        respective attributes for each acquisition function object.\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            The model needs to implement an additional attribute ``models`` which contains the different models to\n            integrate over.\n        kwargs\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "model", ",", "'models'", ")", "or", "len", "(", "model", ".", "models", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'IntegratedAcquisitionFunction requires at least one model to integrate!'", ")", "\n", "", "if", "self", ".", "_functions", "is", "None", "or", "len", "(", "self", ".", "_functions", ")", "!=", "len", "(", "model", ".", "models", ")", ":", "\n", "            ", "self", ".", "_functions", "=", "[", "copy", ".", "deepcopy", "(", "self", ".", "acq", ")", "for", "_", "in", "model", ".", "models", "]", "\n", "", "for", "model", ",", "func", "in", "zip", "(", "model", ".", "models", ",", "self", ".", "_functions", ")", ":", "\n", "            ", "func", ".", "update", "(", "model", "=", "model", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.IntegratedAcquisitionFunction._compute": [[150, 168], ["numpy.array().mean", "ValueError", "numpy.array", "func._compute"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI._compute"], ["", "", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the EI value and its derivatives.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D), The input points where the acquisition function\n            should be evaluated. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "self", ".", "_functions", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Need to call update first!'", ")", "\n", "", "return", "np", ".", "array", "(", "[", "func", ".", "_compute", "(", "X", ")", "for", "func", "in", "self", ".", "_functions", "]", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.EI.__init__": [[179, 198], ["acquisition.AbstractAcquisitionFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "par", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            A model that implements at least\n                 - predict_marginalized_over_instances(X)\n        par : float, default=0.0\n            Controls the balance between exploration and exploitation of the\n            acquisition function.\n        \"\"\"", "\n", "\n", "super", "(", "EI", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "long_name", "=", "'Expected Improvement'", "\n", "self", ".", "par", "=", "par", "\n", "self", ".", "eta", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.EI._compute": [[199, 247], ["acquisition.EI.model.predict_marginalized_over_instances", "numpy.sqrt", "numpy.any", "len", "ValueError", "acquisition.EI.logger.warning", "numpy.copy", "acquisition.EI._compute.calculate_f"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the EI value and its derivatives.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D), The input points where the acquisition function\n            should be evaluated. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "m", ",", "v", "=", "self", ".", "model", ".", "predict_marginalized_over_instances", "(", "X", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "v", ")", "\n", "\n", "if", "self", ".", "eta", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'No current best specified. Call update('", "\n", "'eta=<int>) to inform the acquisition function '", "\n", "'about the current best value.'", ")", "\n", "\n", "", "def", "calculate_f", "(", ")", ":", "\n", "            ", "z", "=", "(", "self", ".", "eta", "-", "m", "-", "self", ".", "par", ")", "/", "s", "\n", "return", "(", "self", ".", "eta", "-", "m", "-", "self", ".", "par", ")", "*", "norm", ".", "cdf", "(", "z", ")", "+", "s", "*", "norm", ".", "pdf", "(", "z", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "s", "==", "0.0", ")", ":", "\n", "# if std is zero, we have observed x on all instances", "\n", "# using a RF, std should be never exactly 0.0", "\n", "# Avoid zero division by setting all zeros in s to one.", "\n", "# Consider the corresponding results in f to be zero.", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Predicted std is 0.0 for at least one sample.\"", ")", "\n", "s_copy", "=", "np", ".", "copy", "(", "s", ")", "\n", "s", "[", "s_copy", "==", "0.0", "]", "=", "1.0", "\n", "f", "=", "calculate_f", "(", ")", "\n", "f", "[", "s_copy", "==", "0.0", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "f", "=", "calculate_f", "(", ")", "\n", "", "if", "(", "f", "<", "0", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected Improvement is smaller than 0 for at least one \"", "\n", "\"sample.\"", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.EIPS.__init__": [[250, 270], ["acquisition.EI.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "par", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "r\"\"\"Computes for a given x the expected improvement as\n        acquisition value.\n        :math:`EI(X) := \\frac{\\mathbb{E}\\left[ \\max\\{0, f(\\mathbf{X^+}) - f_{t+1}(\\mathbf{X}) - \\xi\\right] \\} ]} {np.log(r(x))}`,\n        with :math:`f(X^+)` as the incumbent and :math:`r(x)` as runtime.\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            A model that implements at least\n                 - predict_marginalized_over_instances(X) returning a tuples of\n                   predicted cost and running time\n        par : float, default=0.0\n            Controls the balance between exploration and exploitation of the\n            acquisition function.\n        \"\"\"", "\n", "super", "(", "EIPS", ",", "self", ")", ".", "__init__", "(", "model", ",", "par", "=", "par", ")", "\n", "self", ".", "long_name", "=", "'Expected Improvement per Second'", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.EIPS._compute": [[271, 331], ["acquisition.EIPS.model.predict_marginalized_over_instances", "numpy.sqrt", "numpy.any", "calculate_f.reshape", "len", "ValueError", "ValueError", "ValueError", "acquisition.EIPS.logger.warning", "numpy.copy", "acquisition.EIPS._compute.calculate_f"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the EIPS value.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D), The input point where the acquisition function\n            should be evaluate. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement per Second of X\n        \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "m", ",", "v", "=", "self", ".", "model", ".", "predict_marginalized_over_instances", "(", "X", ")", "\n", "if", "m", ".", "shape", "[", "1", "]", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"m has wrong shape: %s != (-1, 2)\"", "%", "str", "(", "m", ".", "shape", ")", ")", "\n", "", "if", "v", ".", "shape", "[", "1", "]", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"v has wrong shape: %s != (-1, 2)\"", "%", "str", "(", "v", ".", "shape", ")", ")", "\n", "\n", "", "m_cost", "=", "m", "[", ":", ",", "0", "]", "\n", "v_cost", "=", "v", "[", ":", ",", "0", "]", "\n", "# The model already predicts log(runtime)", "\n", "m_runtime", "=", "m", "[", ":", ",", "1", "]", "\n", "s", "=", "np", ".", "sqrt", "(", "v_cost", ")", "\n", "\n", "if", "self", ".", "eta", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'No current best specified. Call update('", "\n", "'eta=<int>) to inform the acquisition function '", "\n", "'about the current best value.'", ")", "\n", "\n", "", "def", "calculate_f", "(", ")", ":", "\n", "            ", "z", "=", "(", "self", ".", "eta", "-", "m_cost", "-", "self", ".", "par", ")", "/", "s", "\n", "f", "=", "(", "self", ".", "eta", "-", "m_cost", "-", "self", ".", "par", ")", "*", "norm", ".", "cdf", "(", "z", ")", "+", "s", "*", "norm", ".", "pdf", "(", "z", ")", "\n", "f", "=", "f", "/", "m_runtime", "\n", "return", "f", "\n", "\n", "", "if", "np", ".", "any", "(", "s", "==", "0.0", ")", ":", "\n", "# if std is zero, we have observed x on all instances", "\n", "# using a RF, std should be never exactly 0.0", "\n", "# Avoid zero division by setting all zeros in s to one.", "\n", "# Consider the corresponding results in f to be zero.", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Predicted std is 0.0 for at least one sample.\"", ")", "\n", "s_copy", "=", "np", ".", "copy", "(", "s", ")", "\n", "s", "[", "s_copy", "==", "0.0", "]", "=", "1.0", "\n", "f", "=", "calculate_f", "(", ")", "\n", "f", "[", "s_copy", "==", "0.0", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "f", "=", "calculate_f", "(", ")", "\n", "\n", "", "if", "(", "f", "<", "0", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected Improvement per Second is smaller than 0 \"", "\n", "\"for at least one sample.\"", ")", "\n", "\n", "", "return", "f", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.LogEI.__init__": [[335, 354], ["acquisition.AbstractAcquisitionFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "par", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "r\"\"\"Computes for a given x the logarithm expected improvement as\n        acquisition value.\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            A model that implements at least\n                 - predict_marginalized_over_instances(X)\n        par : float, default=0.0\n            Controls the balance between exploration and exploitation of the\n            acquisition function.\n        \"\"\"", "\n", "super", "(", "LogEI", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "long_name", "=", "'Expected Improvement'", "\n", "self", ".", "par", "=", "par", "\n", "self", ".", "eta", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.LogEI._compute": [[355, 406], ["acquisition.LogEI.model.predict_marginalized_over_instances", "numpy.sqrt", "numpy.any", "calculate_log_ei.reshape", "ValueError", "len", "acquisition.LogEI.logger.warning", "numpy.copy", "acquisition.LogEI._compute.calculate_log_ei"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the EI value and its derivatives.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D), The input points where the acquisition function\n            should be evaluated. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "self", ".", "eta", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'No current best specified. Call update('", "\n", "'eta=<int>) to inform the acquisition function '", "\n", "'about the current best value.'", ")", "\n", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "m", ",", "var_", "=", "self", ".", "model", ".", "predict_marginalized_over_instances", "(", "X", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "var_", ")", "\n", "\n", "def", "calculate_log_ei", "(", ")", ":", "\n", "# we expect that f_min is in log-space", "\n", "            ", "f_min", "=", "self", ".", "eta", "-", "self", ".", "par", "\n", "v", "=", "(", "f_min", "-", "m", ")", "/", "std", "\n", "return", "(", "np", ".", "exp", "(", "f_min", ")", "*", "norm", ".", "cdf", "(", "v", ")", ")", "-", "(", "np", ".", "exp", "(", "0.5", "*", "var_", "+", "m", ")", "*", "norm", ".", "cdf", "(", "v", "-", "std", ")", ")", "\n", "\n", "", "if", "np", ".", "any", "(", "std", "==", "0.0", ")", ":", "\n", "# if std is zero, we have observed x on all instances", "\n", "# using a RF, std should be never exactly 0.0", "\n", "# Avoid zero division by setting all zeros in s to one.", "\n", "# Consider the corresponding results in f to be zero.", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Predicted std is 0.0 for at least one sample.\"", ")", "\n", "std_copy", "=", "np", ".", "copy", "(", "std", ")", "\n", "std", "[", "std_copy", "==", "0.0", "]", "=", "1.0", "\n", "log_ei", "=", "calculate_log_ei", "(", ")", "\n", "log_ei", "[", "std_copy", "==", "0.0", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "log_ei", "=", "calculate_log_ei", "(", ")", "\n", "\n", "", "if", "(", "log_ei", "<", "0", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected Improvement is smaller than 0 for at least one sample.\"", ")", "\n", "\n", "", "return", "log_ei", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.PI.__init__": [[409, 433], ["acquisition.AbstractAcquisitionFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "par", ":", "float", "=", "0.0", ")", ":", "\n", "\n", "        ", "\"\"\"Computes the probability of improvement for a given x over the best so far value as\n        acquisition value.\n\n        :math:`P(f_{t+1}(\\mathbf{X})\\geq f(\\mathbf{X^+})) :=\n        \\Phi(\\frac{\\mu(\\mathbf{X}) - f(\\mathbf{X^+})}{\\sigma(\\mathbf{X})})`,\n        with :math:`f(X^+)` as the incumbent and :math:`\\Phi` the cdf of the standard normal\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            A model that implements at least\n                 - predict_marginalized_over_instances(X)\n        par : float, default=0.0\n            Controls the balance between exploration and exploitation of the\n            acquisition function.\n        \"\"\"", "\n", "super", "(", "PI", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "long_name", "=", "'Probability of Improvement'", "\n", "self", ".", "par", "=", "par", "\n", "self", ".", "eta", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.PI._compute": [[434, 457], ["acquisition.PI.model.predict_marginalized_over_instances", "numpy.sqrt", "scipy.stats.norm.cdf", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances"], ["", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Computes the PI value.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D)\n           Points to evaluate PI. N is the number of points and D the dimension for the points\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "self", ".", "eta", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'No current best specified. Call update('", "\n", "'eta=<float>) to inform the acquisition function '", "\n", "'about the current best value.'", ")", "\n", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "m", ",", "var_", "=", "self", ".", "model", ".", "predict_marginalized_over_instances", "(", "X", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "var_", ")", "\n", "return", "norm", ".", "cdf", "(", "(", "self", ".", "eta", "-", "m", "-", "self", ".", "par", ")", "/", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.LCB.__init__": [[460, 485], ["acquisition.AbstractAcquisitionFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "par", ":", "float", "=", "1.0", ")", ":", "\n", "\n", "        ", "\"\"\"Computes the lower confidence bound for a given x over the best so far value as\n        acquisition value.\n\n        :math:`LCB(X) = \\mu(\\mathbf{X}) - \\sqrt(\\beta_t)\\sigma(\\mathbf{X})`\n\n        Returns -LCB(X) as the acquisition_function optimizer maximizes the acquisition value.\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            A model that implements at least\n                 - predict_marginalized_over_instances(X)\n        par : float, default=0.0\n            Controls the balance between exploration and exploitation of the\n            acquisition function.\n        \"\"\"", "\n", "super", "(", "LCB", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "long_name", "=", "'Lower Confidence Bound'", "\n", "self", ".", "par", "=", "par", "\n", "self", ".", "eta", "=", "None", "# to be compatible with the existing update calls in SMBO", "\n", "self", ".", "num_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.acquisition_function.acquisition.LCB._compute": [[486, 509], ["acquisition.LCB.model.predict_marginalized_over_instances", "numpy.sqrt", "ValueError", "len", "numpy.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Computes the LCB value.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D)\n           Points to evaluate LCB. N is the number of points and D the dimension for the points\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "self", ".", "num_data", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'No current number of Datapoints specified. Call update('", "\n", "'num_data=<int>) to inform the acquisition function '", "\n", "'about the number of datapoints.'", ")", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "m", ",", "var_", "=", "self", ".", "model", ".", "predict_marginalized_over_instances", "(", "X", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "var_", ")", "\n", "beta", "=", "2", "*", "np", ".", "log", "(", "(", "X", ".", "shape", "[", "1", "]", "*", "self", ".", "num_data", "**", "2", ")", "/", "self", ".", "par", ")", "\n", "return", "-", "(", "m", "-", "np", ".", "sqrt", "(", "beta", ")", "*", "std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_process.ParallelProcessEvaluator.__init__": [[22, 27], ["multiprocessing.Manager().Lock", "multiprocessing.Manager"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "n_worker", "=", "1", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "evaluator", "\n", "self", ".", "n_worker", "=", "n_worker", "\n", "self", ".", "process_pool", "=", "None", "\n", "self", ".", "rwlock", "=", "Manager", "(", ")", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_process.ParallelProcessEvaluator.update_evaluator": [[28, 30], ["None"], "methods", ["None"], ["", "def", "update_evaluator", "(", "self", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_process.ParallelProcessEvaluator.parallel_execute": [[31, 48], ["list", "list", "list.append", "res.wait", "list.append", "parallel_process.ParallelProcessEvaluator.process_pool.apply_async", "res.get"], "methods", ["None"], ["", "def", "parallel_execute", "(", "self", ",", "param_list", ",", "resource_ratio", "=", "1.", ",", "eta", "=", "3", ",", "first_iter", "=", "False", ")", ":", "\n", "        ", "evaluation_result", "=", "list", "(", ")", "\n", "apply_results", "=", "list", "(", ")", "\n", "\n", "for", "_param", "in", "param_list", ":", "\n", "            ", "apply_results", ".", "append", "(", "self", ".", "process_pool", ".", "apply_async", "(", "execute_func", ",", "\n", "(", "self", ".", "evaluator", ",", "_param", ",", "resource_ratio", ",", "eta", ",", "\n", "first_iter", ",", "self", ".", "rwlock", ")", ")", ")", "\n", "", "for", "res", "in", "apply_results", ":", "\n", "            ", "res", ".", "wait", "(", ")", "\n", "perf", "=", "res", ".", "get", "(", ")", "[", "0", "]", "\n", "evaluation_result", ".", "append", "(", "perf", ")", "\n", "\n", "# return_dict=res.get()[0]", "\n", "# evaluation_result.append(return_dict)", "\n", "\n", "", "return", "evaluation_result", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_process.ParallelProcessEvaluator.__enter__": [[52, 55], ["base.nondaemonic_processpool.ProcessPool"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "process_pool", "=", "ProcessPool", "(", "processes", "=", "self", ".", "n_worker", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_process.ParallelProcessEvaluator.__exit__": [[56, 58], ["parallel_process.ParallelProcessEvaluator.process_pool.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "process_pool", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_process.execute_func": [[8, 19], ["time.time", "evaluator", "time.time", "print"], "function", ["None"], ["def", "execute_func", "(", "evaluator", ",", "config", ",", "resource_ratio", ",", "eta", ",", "first_iter", ",", "rw_lock", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "        ", "score", "=", "evaluator", "(", "config", ",", "name", "=", "'hpo'", ",", "resource_ratio", "=", "resource_ratio", ",", "eta", "=", "eta", ",", "first_iter", "=", "first_iter", ",", "\n", "rw_lock", "=", "rw_lock", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "score", "=", "np", ".", "inf", "\n", "\n", "", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "score", ",", "time_taken", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.__init__": [[23, 27], ["concurrent.futures.ThreadPoolExecutor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "n_worker", "=", "1", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "evaluator", "\n", "self", ".", "n_worker", "=", "n_worker", "\n", "self", ".", "thread_pool", "=", "ThreadPoolExecutor", "(", "max_workers", "=", "n_worker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.update_evaluator": [[28, 30], ["None"], "methods", ["None"], ["", "def", "update_evaluator", "(", "self", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.wait_tasks_finish": [[31, 40], ["trial.done", "time.sleep"], "methods", ["None"], ["", "def", "wait_tasks_finish", "(", "self", ",", "trial_stats", ")", ":", "\n", "        ", "all_completed", "=", "False", "\n", "while", "not", "all_completed", ":", "\n", "            ", "all_completed", "=", "True", "\n", "for", "trial", "in", "trial_stats", ":", "\n", "                ", "if", "not", "trial", ".", "done", "(", ")", ":", "\n", "                    ", "all_completed", "=", "False", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.parallel_execute": [[41, 61], ["len", "list", "range", "list", "parallel_evaluator.ParallelEvaluator.wait_tasks_finish", "list.append", "trial.done", "list.append", "parallel_evaluator.ParallelEvaluator.thread_pool.submit", "trial.result"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.wait_tasks_finish", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.ParallelFetcher.submit"], ["", "", "", "", "def", "parallel_execute", "(", "self", ",", "param_list", ",", "resource_ratio", "=", "1.", ")", ":", "\n", "        ", "n_configuration", "=", "len", "(", "param_list", ")", "\n", "batch_size", "=", "self", ".", "n_worker", "\n", "n_batch", "=", "n_configuration", "//", "batch_size", "+", "(", "1", "if", "n_configuration", "%", "batch_size", "!=", "0", "else", "0", ")", "\n", "evaluation_result", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_batch", ")", ":", "\n", "            ", "execution_stats", "=", "list", "(", ")", "\n", "for", "_param", "in", "param_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ":", "\n", "                ", "execution_stats", ".", "append", "(", "self", ".", "thread_pool", ".", "submit", "(", "execute_func", ",", "\n", "(", "self", ".", "evaluator", ",", "_param", ",", "resource_ratio", ")", ")", ")", "\n", "# wait a batch of trials finish", "\n", "", "self", ".", "wait_tasks_finish", "(", "execution_stats", ")", "\n", "\n", "# get the evaluation statistics", "\n", "for", "trial", "in", "execution_stats", ":", "\n", "                ", "assert", "(", "trial", ".", "done", "(", ")", ")", "\n", "perf", "=", "trial", ".", "result", "(", ")", "[", "0", "]", "\n", "evaluation_result", ".", "append", "(", "perf", ")", "\n", "", "", "return", "evaluation_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.execute_func": [[7, 20], ["time.time", "isinstance", "time.time", "evaluator", "evaluator"], "function", ["None"], ["def", "execute_func", "(", "params", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "evaluator", ",", "config", ",", "subsample_ratio", "=", "params", "\n", "try", ":", "\n", "        ", "if", "isinstance", "(", "config", ",", "Configuration", ")", ":", "\n", "            ", "score", "=", "evaluator", "(", "config", ",", "name", "=", "'hpo'", ",", "resource_ratio", "=", "subsample_ratio", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "evaluator", "(", "None", ",", "data_node", "=", "config", ",", "name", "=", "'fe'", ",", "resource_ratio", "=", "subsample_ratio", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "score", "=", "np", ".", "inf", "\n", "\n", "", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "return", "score", ",", "time_taken", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.ParallelFetcher.__init__": [[13, 18], ["concurrent.futures.ThreadPoolExecutor", "list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_worker", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_worker", "=", "n_worker", "\n", "self", ".", "thread_pool", "=", "ThreadPoolExecutor", "(", "max_workers", "=", "n_worker", ")", "\n", "self", ".", "execution_stats", "=", "list", "(", ")", "\n", "self", ".", "estimators", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.ParallelFetcher.wait_tasks_finish": [[19, 33], ["trial.done", "trial.result", "parallel_fetcher.ParallelFetcher.estimators.append", "trial.done", "time.sleep"], "methods", ["None"], ["", "def", "wait_tasks_finish", "(", "self", ")", ":", "\n", "        ", "all_completed", "=", "False", "\n", "while", "not", "all_completed", ":", "\n", "            ", "all_completed", "=", "True", "\n", "for", "trial", "in", "self", ".", "execution_stats", ":", "\n", "                ", "if", "not", "trial", ".", "done", "(", ")", ":", "\n", "                    ", "all_completed", "=", "False", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "break", "\n", "", "", "", "for", "trial", "in", "self", ".", "execution_stats", ":", "\n", "            ", "assert", "(", "trial", ".", "done", "(", ")", ")", "\n", "estimator", "=", "trial", ".", "result", "(", ")", "\n", "self", ".", "estimators", ".", "append", "(", "estimator", ")", "\n", "", "return", "self", ".", "estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.ParallelFetcher.submit": [[34, 38], ["parallel_fetcher.ParallelFetcher.execution_stats.append", "parallel_fetcher.ParallelFetcher.thread_pool.submit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.ParallelFetcher.submit"], ["", "def", "submit", "(", "self", ",", "task_type", ",", "config", ",", "X_train", ",", "y_train", ",", "weight_balance", ",", "data_balance", ",", "combined", "=", "False", ")", ":", "\n", "        ", "self", ".", "execution_stats", ".", "append", "(", "self", ".", "thread_pool", ".", "submit", "(", "execute_func", ",", "\n", "(", "task_type", ",", "config", ",", "X_train", ",", "y_train", ",", "weight_balance", ",", "\n", "data_balance", ",", "combined", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_fetcher.execute_func": [[7, 10], ["mindware.components.evaluators.base_evaluator.fetch_predict_estimator"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator.fetch_predict_estimator"], ["def", "execute_func", "(", "params", ")", ":", "\n", "    ", "estimator", "=", "fetch_predict_estimator", "(", "*", "params", ")", "\n", "return", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.nondaemonic_processpool.NoDaemonProcess.daemon": [[9, 12], ["None"], "methods", ["None"], ["", "@", "daemon", ".", "setter", "\n", "def", "daemon", "(", "self", ",", "value", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.nondaemonic_processpool.ProcessPool.__init__": [[21, 24], ["nondaemonic_processpool.NoDaemonContext", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'context'", "]", "=", "NoDaemonContext", "(", ")", "\n", "super", "(", "ProcessPool", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.mfsebase.MfseBase.__init__": [[14, 58], ["list", "list", "float", "mfsebase.MfseBase.config_space.get_default_configuration", "list", "list", "dict", "list", "list", "time.time", "mindware.utils.logging_utils.get_logger", "int", "list", "dict", "dict", "dict", "enumerate", "openbox.core.mf_batch_advisor.MFBatchAdvisor", "dict", "mfsebase.MfseBase.logeta", "reversed", "numpy.logspace", "int", "mfsebase.MfseBase.iterate_r.append", "list", "list", "math.log", "math.log", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "__init__", "(", "self", ",", "eval_func", ",", "config_space", ",", "per_run_time_limit", "=", "600", ",", "\n", "seed", "=", "1", ",", "R", "=", "81", ",", "eta", "=", "3", ",", "n_jobs", "=", "1", ",", "output_dir", "=", "'./'", ")", ":", "\n", "        ", "self", ".", "eval_func", "=", "eval_func", "\n", "self", ".", "config_space", "=", "config_space", "\n", "self", ".", "n_workers", "=", "n_jobs", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "\n", "self", ".", "trial_cnt", "=", "0", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "self", ".", "incumbent_configs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perfs", "=", "list", "(", ")", "\n", "self", ".", "evaluation_stats", "=", "dict", "(", ")", "\n", "self", ".", "evaluation_stats", "[", "'timestamps'", "]", "=", "list", "(", ")", "\n", "self", ".", "evaluation_stats", "[", "'val_scores'", "]", "=", "list", "(", ")", "\n", "self", ".", "global_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "# Parameters in Hyperband framework.", "\n", "self", ".", "restart_needed", "=", "True", "\n", "self", ".", "R", "=", "R", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "logeta", "=", "lambda", "x", ":", "log", "(", "x", ")", "/", "log", "(", "self", ".", "eta", ")", "\n", "self", ".", "s_max", "=", "int", "(", "self", ".", "logeta", "(", "self", ".", "R", ")", ")", "\n", "self", ".", "B", "=", "(", "self", ".", "s_max", "+", "1", ")", "*", "self", ".", "R", "\n", "self", ".", "s_values", "=", "list", "(", "reversed", "(", "range", "(", "self", ".", "s_max", "+", "1", ")", ")", ")", "\n", "self", ".", "inner_iter_id", "=", "0", "\n", "\n", "# Parameters in MFSE-HB.", "\n", "self", ".", "iterate_r", "=", "[", "]", "\n", "self", ".", "target_x", "=", "dict", "(", ")", "\n", "self", ".", "target_y", "=", "dict", "(", ")", "\n", "self", ".", "exp_output", "=", "dict", "(", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "np", ".", "logspace", "(", "0", ",", "self", ".", "s_max", ",", "self", ".", "s_max", "+", "1", ",", "base", "=", "self", ".", "eta", ")", ")", ":", "\n", "            ", "r", "=", "int", "(", "item", ")", "\n", "self", ".", "iterate_r", ".", "append", "(", "r", ")", "\n", "self", ".", "target_x", "[", "r", "]", "=", "list", "(", ")", "\n", "self", ".", "target_y", "[", "r", "]", "=", "list", "(", ")", "\n", "\n", "", "self", ".", "mf_advisor", "=", "MFBatchAdvisor", "(", "config_space", ",", "output_dir", "=", "output_dir", ")", "\n", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.mfsebase.MfseBase._iterate": [[59, 145], ["int", "int", "time.time", "mfsebase.MfseBase.mf_advisor.get_suggestions", "mfsebase.MfseBase.logger.info", "list", "list", "math.ceil", "time.time", "mindware.components.computation.parallel_process.ParallelProcessEvaluator", "range", "len", "list", "mfsebase.MfseBase.mf_advisor.update_mf_observations", "mfsebase.MfseBase.logger.info", "numpy.argsort", "collections.OrderedDict", "enumerate", "list.append", "int", "time.time", "executor.parallel_execute", "enumerate", "list", "int", "int", "mfsebase.MfseBase.incumbent_configs.extend", "mfsebase.MfseBase.incumbent_perfs.extend", "list.extend", "list.extend", "len", "int", "numpy.isfinite", "list.append", "numpy.isfinite", "time.time", "int", "float", "mfsebase.MfseBase.target_x[].append", "mfsebase.MfseBase.target_y[].append", "mfsebase.MfseBase.evaluation_stats[].append", "mfsebase.MfseBase.evaluation_stats[].append", "mfsebase.MfseBase.logger.warning", "mfsebase.MfseBase.target_x[].append", "mfsebase.MfseBase.target_y[].append", "mfsebase.MfseBase.evaluation_stats[].append", "mfsebase.MfseBase.evaluation_stats[].append", "time.time", "mindware.utils.decorators.time_limit", "mfsebase.MfseBase.eval_func", "time.time", "time.time", "float", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.parallel_execute", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit"], ["", "def", "_iterate", "(", "self", ",", "s", ",", "budget", "=", "MAX_INT", ",", "skip_last", "=", "0", ")", ":", "\n", "# Set initial number of configurations", "\n", "        ", "n", "=", "int", "(", "ceil", "(", "self", ".", "B", "/", "self", ".", "R", "/", "(", "s", "+", "1", ")", "*", "self", ".", "eta", "**", "s", ")", ")", "\n", "# initial number of iterations per config", "\n", "r", "=", "int", "(", "self", ".", "R", "*", "self", ".", "eta", "**", "(", "-", "s", ")", ")", "\n", "\n", "# Choose a batch of configurations in different mechanisms.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "T", "=", "self", ".", "mf_advisor", ".", "get_suggestions", "(", "n_suggestions", "=", "n", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "logger", ".", "info", "(", "\"Choosing next batch of configurations took %.2f sec.\"", "%", "time_elapsed", ")", "\n", "\n", "full_config_list", "=", "list", "(", ")", "\n", "full_perf_list", "=", "list", "(", ")", "\n", "with", "ParallelProcessEvaluator", "(", "self", ".", "eval_func", ",", "n_worker", "=", "self", ".", "n_workers", ")", "as", "executor", ":", "\n", "            ", "for", "i", "in", "range", "(", "(", "s", "+", "1", ")", "-", "int", "(", "skip_last", ")", ")", ":", "# changed from s + 1", "\n", "                ", "if", "time", ".", "time", "(", ")", ">", "budget", "+", "start_time", ":", "\n", "                    ", "break", "\n", "\n", "# Run each of the n configs for <iterations>", "\n", "# and keep best (n_configs / eta) configurations", "\n", "", "n_configs", "=", "n", "*", "self", ".", "eta", "**", "(", "-", "i", ")", "\n", "n_resource", "=", "r", "*", "self", ".", "eta", "**", "i", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"MFSE: %d configurations x size %d / %d each\"", "%", "\n", "(", "int", "(", "n_configs", ")", ",", "n_resource", ",", "self", ".", "R", ")", ")", "\n", "\n", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "# TODO: Time limit control", "\n", "                    ", "val_losses", "=", "executor", ".", "parallel_execute", "(", "T", ",", "resource_ratio", "=", "float", "(", "n_resource", "/", "self", ".", "R", ")", ",", "\n", "eta", "=", "self", ".", "eta", ",", "\n", "first_iter", "=", "(", "i", "==", "0", ")", ")", "\n", "for", "_id", ",", "_val_loss", "in", "enumerate", "(", "val_losses", ")", ":", "\n", "                        ", "if", "np", ".", "isfinite", "(", "_val_loss", ")", ":", "\n", "                            ", "self", ".", "target_x", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "T", "[", "_id", "]", ")", "\n", "self", ".", "target_y", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "_val_loss", ")", "\n", "self", ".", "evaluation_stats", "[", "'timestamps'", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "global_start_time", ")", "\n", "self", ".", "evaluation_stats", "[", "'val_scores'", "]", ".", "append", "(", "_val_loss", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "val_losses", "=", "list", "(", ")", "\n", "for", "config", "in", "T", ":", "\n", "                        ", "if", "time", ".", "time", "(", ")", "-", "start_time", ">", "budget", ":", "\n", "                            ", "self", ".", "logger", ".", "warning", "(", "'Time limit exceeded!'", ")", "\n", "break", "\n", "", "try", ":", "\n", "                            ", "with", "time_limit", "(", "self", ".", "per_run_time_limit", ")", ":", "\n", "                                ", "val_loss", "=", "self", ".", "eval_func", "(", "config", ",", "resource_ratio", "=", "float", "(", "n_resource", "/", "self", ".", "R", ")", ",", "\n", "eta", "=", "self", ".", "eta", ",", "first_iter", "=", "(", "i", "==", "0", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "# TODO: Distinguish error type", "\n", "                            ", "val_loss", "=", "np", ".", "inf", "\n", "", "val_losses", ".", "append", "(", "val_loss", ")", "\n", "if", "np", ".", "isfinite", "(", "val_loss", ")", ":", "\n", "                            ", "self", ".", "target_x", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "config", ")", "\n", "self", ".", "target_y", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "val_loss", ")", "\n", "self", ".", "evaluation_stats", "[", "'timestamps'", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "global_start_time", ")", "\n", "self", ".", "evaluation_stats", "[", "'val_scores'", "]", ".", "append", "(", "val_loss", ")", "\n", "\n", "", "", "", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "int", "(", "n_resource", ")", ",", "T", ",", "val_losses", ")", "\n", "\n", "if", "int", "(", "n_resource", ")", "==", "self", ".", "R", ":", "\n", "                    ", "self", ".", "incumbent_configs", ".", "extend", "(", "T", ")", "\n", "self", ".", "incumbent_perfs", ".", "extend", "(", "val_losses", ")", "\n", "full_config_list", ".", "extend", "(", "T", ")", "\n", "full_perf_list", ".", "extend", "(", "val_losses", ")", "\n", "\n", "# Select a number of best configurations for the next loop.", "\n", "# Filter out early stops, if any.", "\n", "", "indices", "=", "np", ".", "argsort", "(", "val_losses", ")", "\n", "if", "len", "(", "T", ")", ">=", "self", ".", "eta", ":", "\n", "                    ", "T", "=", "[", "T", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "reduced_num", "=", "int", "(", "n_configs", "/", "self", ".", "eta", ")", "\n", "T", "=", "T", "[", "0", ":", "reduced_num", "]", "\n", "", "else", ":", "\n", "                    ", "T", "=", "[", "T", "[", "indices", "[", "0", "]", "]", "]", "\n", "\n", "", "", "", "if", "len", "(", "self", ".", "target_y", "[", "self", ".", "iterate_r", "[", "-", "1", "]", "]", ")", "!=", "0", ":", "\n", "            ", "observations", "=", "list", "(", ")", "\n", "for", "item", "in", "self", ".", "target_x", ":", "\n", "                ", "config_dict", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "config", "in", "enumerate", "(", "self", ".", "target_x", "[", "item", "]", ")", ":", "\n", "                    ", "config_dict", "[", "config", "]", "=", "self", ".", "target_y", "[", "item", "]", "[", "i", "]", "\n", "", "observations", ".", "append", "(", "config_dict", ")", "\n", "", "self", ".", "mf_advisor", ".", "update_mf_observations", "(", "observations", ")", "\n", "\n", "", "return", "full_config_list", ",", "full_perf_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array": [[10, 30], ["numpy.array", "config_space_utils.impute_default_values", "config.get_array"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.impute_default_values"], ["def", "convert_configurations_to_array", "(", "configs", ":", "List", "[", "Configuration", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Impute inactive hyperparameters in configurations with their default.\n\n    Necessary to apply an EPM to the data.\n\n    Parameters\n    ----------\n    configs : List[Configuration]\n        List of configuration objects.\n\n    Returns\n    -------\n    np.ndarray\n        Array with configuration hyperparameters. Inactive values are imputed\n        with their default value.\n    \"\"\"", "\n", "configs_array", "=", "np", ".", "array", "(", "[", "config", ".", "get_array", "(", ")", "for", "config", "in", "configs", "]", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "configuration_space", "=", "configs", "[", "0", "]", ".", "configuration_space", "\n", "return", "impute_default_values", "(", "configuration_space", ",", "configs_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.impute_default_values": [[32, 60], ["configuration_space.get_hyperparameters", "configuration_space.get_idx_by_hyperparameter_name", "numpy.isfinite"], "function", ["None"], ["", "def", "impute_default_values", "(", "\n", "configuration_space", ":", "ConfigurationSpace", ",", "\n", "configs_array", ":", "np", ".", "ndarray", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Impute inactive hyperparameters in configuration array with their default.\n\n    Necessary to apply an EPM to the data.\n\n    Parameters\n    ----------\n    configuration_space : ConfigurationSpace\n\n    configs_array : np.ndarray\n        Array of configurations.\n\n    Returns\n    -------\n    np.ndarray\n        Array with configuration hyperparameters. Inactive values are imputed\n        with their default value.\n    \"\"\"", "\n", "for", "hp", "in", "configuration_space", ".", "get_hyperparameters", "(", ")", ":", "\n", "        ", "default", "=", "hp", ".", "normalized_default_value", "\n", "idx", "=", "configuration_space", ".", "get_idx_by_hyperparameter_name", "(", "hp", ".", "name", ")", "\n", "nonfinite_mask", "=", "~", "np", ".", "isfinite", "(", "configs_array", "[", ":", ",", "idx", "]", ")", "\n", "configs_array", "[", "nonfinite_mask", ",", "idx", "]", "=", "default", "\n", "\n", "", "return", "configs_array", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_hp_neighbors": [[63, 117], ["random.seed", "isinstance", "hp._inverse_transform", "hp.get_neighbors", "isinstance", "isinstance", "value_list.append", "value_list.append", "len", "value_list.append", "value_list.append", "numpy.random.RandomState", "hp.get_neighbors.append", "abs", "abs", "abs", "abs", "hp._inverse_transform"], "function", ["None"], ["", "def", "get_hp_neighbors", "(", "hp", ",", "data_dict", ",", "num", ",", "transform", "=", "True", ",", "seed", "=", "123", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "if", "isinstance", "(", "hp", ",", "CategoricalHyperparameter", ")", ":", "\n", "        ", "trans_data", "=", "hp", ".", "_inverse_transform", "(", "data_dict", "[", "hp", ".", "name", "]", ")", "\n", "neighbors", "=", "hp", ".", "get_neighbors", "(", "trans_data", ",", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ",", "num", ",", "transform", ")", "\n", "return", "neighbors", "\n", "\n", "", "lower", ",", "upper", ",", "q", ",", "name", "=", "hp", ".", "lower", ",", "hp", ".", "upper", ",", "hp", ".", "q", ",", "hp", ".", "name", "\n", "if", "q", "is", "None", ":", "\n", "        ", "if", "isinstance", "(", "hp", ",", "IntegerHyperparameter", ")", ":", "\n", "            ", "q", "=", "1", "\n", "", "if", "isinstance", "(", "hp", ",", "FloatHyperparameter", ")", ":", "\n", "            ", "q", "=", "1e-3", "\n", "\n", "", "", "current_value", "=", "data_dict", "[", "name", "]", "\n", "left_value", ",", "right_value", "=", "0", ",", "0", "\n", "value_list", "=", "[", "]", "\n", "l_cnt", ",", "r_cnt", "=", "1", ",", "1", "\n", "l_num", "=", "num", "//", "2", "\n", "r_num", "=", "num", "-", "l_num", "\n", "while", "l_cnt", "<=", "l_num", "and", "r_cnt", "<=", "r_num", ":", "\n", "        ", "left_value", "=", "current_value", "-", "l_cnt", "*", "q", "\n", "right_value", "=", "current_value", "+", "r_cnt", "*", "q", "\n", "if", "left_value", "<", "lower", "and", "abs", "(", "left_value", "-", "lower", ")", ">=", "q", "/", "2", ":", "\n", "            ", "break", "\n", "", "if", "right_value", ">", "upper", "and", "abs", "(", "right_value", "-", "upper", ")", ">=", "q", "/", "2", ":", "\n", "            ", "break", "\n", "", "value_list", ".", "append", "(", "left_value", ")", "\n", "value_list", ".", "append", "(", "right_value", ")", "\n", "l_cnt", "+=", "1", "\n", "r_cnt", "+=", "1", "\n", "\n", "", "num_missed", "=", "num", "-", "len", "(", "value_list", ")", "\n", "while", "l_cnt", "<=", "l_num", "+", "num_missed", ":", "\n", "        ", "left_value", "=", "current_value", "-", "l_cnt", "*", "q", "\n", "if", "left_value", "<", "lower", "and", "abs", "(", "left_value", "-", "lower", ")", ">=", "q", "/", "2", ":", "\n", "            ", "break", "\n", "\n", "", "value_list", ".", "append", "(", "left_value", ")", "\n", "l_cnt", "+=", "1", "\n", "\n", "", "while", "r_cnt", "<=", "r_num", "+", "num_missed", ":", "\n", "        ", "right_value", "=", "current_value", "+", "r_cnt", "*", "q", "\n", "if", "right_value", ">", "upper", "and", "abs", "(", "right_value", "-", "upper", ")", ">=", "q", "/", "2", ":", "\n", "            ", "break", "\n", "", "value_list", ".", "append", "(", "right_value", ")", "\n", "r_cnt", "+=", "1", "\n", "\n", "", "if", "not", "transform", ":", "\n", "        ", "neighbors", "=", "[", "]", "\n", "for", "item", "in", "value_list", ":", "\n", "            ", "neighbors", ".", "append", "(", "hp", ".", "_inverse_transform", "(", "item", ")", ")", "\n", "", "return", "neighbors", "[", ":", "num", "]", "\n", "", "return", "value_list", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_hp": [[119, 126], ["random.seed", "reversed", "zip", "random.choice", "list", "candidates.extend", "range", "len"], "function", ["None"], ["", "def", "sample_hp", "(", "neighbors", ",", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "candidates", "=", "[", "]", "\n", "importance_weight", "=", "reversed", "(", "list", "(", "range", "(", "1", ",", "len", "(", "neighbors", ")", "+", "1", ")", ")", ")", "\n", "for", "item", ",", "weight", "in", "zip", "(", "neighbors", ",", "importance_weight", ")", ":", "\n", "        ", "candidates", ".", "extend", "(", "[", "item", "]", "*", "weight", ")", "\n", "", "return", "random", ".", "choice", "(", "candidates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_random_neighborhood": [[129, 166], ["configuration.get_dictionary", "configuration.get_array", "dict", "configuration.get_dictionary.items", "configuration.configuration_space.get_hyperparameters", "config_space_utils.get_hp_neighbors", "neighbor_dict[].extend", "configuration.get_array.copy", "configuration.get_dictionary.keys", "len", "random.choice", "ConfigSpace.Configuration", "ConfigSpace.Configuration.is_valid_configuration", "neighborhood.append"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_hp_neighbors", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "get_random_neighborhood", "(", "configuration", ":", "Configuration", ",", "num", ":", "int", ",", "seed", ":", "int", ")", "->", "List", "[", "Configuration", "]", ":", "\n", "    ", "configuration_space", "=", "configuration", ".", "configuration_space", "\n", "conf_dict_data", "=", "configuration", ".", "get_dictionary", "(", ")", "\n", "array_data", "=", "configuration", ".", "get_array", "(", ")", "\n", "neighbor_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "conf_dict_data", ".", "items", "(", ")", ":", "\n", "        ", "neighbor_dict", "[", "key", "]", "=", "[", "array_data", "[", "configuration_space", ".", "_hyperparameter_idx", "[", "key", "]", "]", "]", "\n", "\n", "", "for", "hp", "in", "configuration", ".", "configuration_space", ".", "get_hyperparameters", "(", ")", ":", "\n", "# trans_data = hp._inverse_transform(conf_dict_data[hp.name])", "\n", "# neighbors = hp.get_neighbors(trans_data, np.random.RandomState(seed), num, False)", "\n", "# neighbor_dict[hp.name].extend(neighbors)", "\n", "        ", "if", "hp", ".", "name", "not", "in", "conf_dict_data", ":", "\n", "            ", "continue", "\n", "", "neighbors", "=", "get_hp_neighbors", "(", "hp", ",", "conf_dict_data", ",", "num", ",", "transform", "=", "False", ",", "seed", "=", "seed", ")", "\n", "neighbor_dict", "[", "hp", ".", "name", "]", ".", "extend", "(", "neighbors", ")", "\n", "\n", "", "neighborhood", "=", "[", "]", "\n", "conf_num", "=", "0", "\n", "cnt", "=", "0", "\n", "while", "conf_num", "<", "num", "and", "cnt", "<", "5", "*", "num", ":", "\n", "        ", "cnt", "+=", "1", "\n", "data", "=", "array_data", ".", "copy", "(", ")", "\n", "# TODO: one exchange neighborhood", "\n", "for", "key", "in", "conf_dict_data", ".", "keys", "(", ")", ":", "\n", "            ", "data", "[", "configuration_space", ".", "_hyperparameter_idx", "[", "key", "]", "]", "=", "random", ".", "choice", "(", "neighbor_dict", "[", "key", "]", ")", "\n", "# data[configuration_space._hyperparameter_idx[key]] = sample_hp(neighbor_dict[key], seed)", "\n", "", "try", ":", "\n", "            ", "config", "=", "Configuration", "(", "configuration_space", ",", "vector", "=", "data", ")", "\n", "config", ".", "is_valid_configuration", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "", "if", "config", "not", "in", "neighborhood", ":", "\n", "            ", "neighborhood", ".", "append", "(", "config", ")", "\n", "conf_num", "+=", "1", "\n", "", "", "assert", "(", "len", "(", "neighborhood", ")", ">=", "1", ")", "\n", "return", "neighborhood", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations": [[169, 178], ["configuration_space.sample_configuration", "result.append"], "function", ["None"], ["", "def", "sample_configurations", "(", "configuration_space", ":", "ConfigurationSpace", ",", "num", ":", "int", ")", "->", "List", "[", "Configuration", "]", ":", "\n", "    ", "result", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "while", "cnt", "<", "num", ":", "\n", "        ", "config", "=", "configuration_space", ".", "sample_configuration", "(", "1", ")", "\n", "if", "config", "not", "in", "result", ":", "\n", "            ", "result", ".", "append", "(", "config", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.expand_configurations": [[180, 190], ["len", "configuration_space.sample_configuration", "configs.append"], "function", ["None"], ["", "def", "expand_configurations", "(", "configs", ":", "List", "[", "Configuration", "]", ",", "configuration_space", ":", "ConfigurationSpace", ",", "num", ":", "int", ")", ":", "\n", "    ", "num_config", "=", "len", "(", "configs", ")", "\n", "num_needed", "=", "num", "-", "num_config", "\n", "config_cnt", "=", "0", "\n", "while", "config_cnt", "<", "num_needed", ":", "\n", "        ", "config", "=", "configuration_space", ".", "sample_configuration", "(", "1", ")", "\n", "if", "config", "not", "in", "configs", ":", "\n", "            ", "configs", ".", "append", "(", "config", ")", "\n", "config_cnt", "+=", "1", "\n", "", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_configuration_id": [[192, 199], ["sorted", "data_dict.items", "isinstance", "data_list.append", "round", "str"], "function", ["None"], ["", "def", "get_configuration_id", "(", "data_dict", ")", ":", "\n", "    ", "data_list", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "sorted", "(", "data_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "            ", "value", "=", "round", "(", "value", ",", "5", ")", "\n", "", "data_list", ".", "append", "(", "'%s-%s'", "%", "(", "key", ",", "str", "(", "value", ")", ")", ")", "\n", "", "return", "'_'", ".", "join", "(", "data_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.BaseOptimizer.__init__": [[10, 28], ["numpy.random.RandomState", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "config_space", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Interface for optimizers that maximizing the\n        acquisition function.\n\n        Parameters\n        ----------\n        objective_function: acquisition function\n            The acquisition function which will be maximized\n        rng: numpy.random.RandomState\n            Random number generator\n        \"\"\"", "\n", "self", ".", "config_space", "=", "config_space", "\n", "self", ".", "objective_func", "=", "objective_function", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "10000", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.BaseOptimizer.maximize": [[29, 31], ["None"], "methods", ["None"], ["", "", "def", "maximize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.__init__": [[35, 52], ["acq_optimizer.BaseOptimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "config_space", ",", "n_samples", "=", "500", ",", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Samples candidates uniformly at random and returns the point with the highest objective value.\n\n        Parameters\n        ----------\n        objective_function: acquisition function\n            The acquisition function which will be maximized\n        lower: np.ndarray (D)\n            Lower bounds of the input space\n        upper: np.ndarray (D)\n            Upper bounds of the input space\n        n_samples: int\n            Number of candidates that are samples\n        \"\"\"", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "super", "(", "RandomSampling", ",", "self", ")", ".", "__init__", "(", "objective_function", ",", "config_space", ",", "rng", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize": [[53, 86], ["list", "list", "mindware.components.optimizers.base.config_space_utils.convert_configurations_to_array", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "mindware.components.optimizers.base.config_space_utils.convert_configurations_to_array", "list.extend", "numpy.concatenate", "acq_optimizer.RandomSampling.objective_func().flatten", "list", "ConfigSpace.util.get_one_exchange_neighbourhood", "acq_optimizer.RandomSampling.objective_func", "numpy.argsort", "acq_optimizer.RandomSampling.rng.randint", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array"], ["", "def", "maximize", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Maximizes the given acquisition function.\n\n        Parameters\n        ----------\n        batch_size: number of maximizer returned.\n\n        Returns\n        -------\n        np.ndarray(N,D)\n            Point with highest acquisition value.\n        \"\"\"", "\n", "\n", "incs_configs", "=", "list", "(", "\n", "get_one_exchange_neighbourhood", "(", "self", ".", "objective_func", ".", "eta", "[", "'config'", "]", ",", "seed", "=", "self", ".", "rng", ".", "randint", "(", "int", "(", "1e6", ")", ")", ")", ")", "\n", "\n", "configs_list", "=", "list", "(", "incs_configs", ")", "\n", "rand_incs", "=", "convert_configurations_to_array", "(", "configs_list", ")", "\n", "\n", "# Sample random points uniformly over the whole space", "\n", "rand_configs", "=", "sample_configurations", "(", "self", ".", "config_space", ",", "self", ".", "n_samples", "-", "rand_incs", ".", "shape", "[", "0", "]", ")", "\n", "rand", "=", "convert_configurations_to_array", "(", "rand_configs", ")", "\n", "\n", "configs_list", ".", "extend", "(", "rand_configs", ")", "\n", "\n", "X", "=", "np", ".", "concatenate", "(", "(", "rand_incs", ",", "rand", ")", ",", "axis", "=", "0", ")", "\n", "y", "=", "self", ".", "objective_func", "(", "X", ")", ".", "flatten", "(", ")", "\n", "candidate_idxs", "=", "list", "(", "np", ".", "argsort", "(", "-", "y", ")", "[", ":", "batch_size", "]", ")", "\n", "# print(candidate_idxs)", "\n", "# print(type(candidate_idxs))", "\n", "# print(configs_list[:5])", "\n", "return", "[", "configs_list", "[", "idx", "]", "for", "idx", "in", "candidate_idxs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.__init__": [[18, 73], ["list", "list", "float", "bohbbase.BohbBase.config_space.get_default_configuration", "list", "list", "time.time", "list", "mindware.utils.logging_utils.get_logger", "int", "list", "list", "dict", "dict", "dict", "enumerate", "mindware.components.optimizers.base.funcs.get_types", "len", "mindware.components.optimizers.base.prob_rf.RandomForestWithInstances", "mindware.components.optimizers.base.acquisition.EI", "mindware.components.optimizers.base.acq_optimizer.RandomSampling", "mindware.components.transfer_learning.tlbo.models.kde.TPE", "dict", "bohbbase.BohbBase.logeta", "reversed", "numpy.logspace", "int", "bohbbase.BohbBase.iterate_r.append", "list", "list", "math.log", "math.log", "range", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.get_types", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "__init__", "(", "self", ",", "eval_func", ",", "config_space", ",", "config_generator", "=", "'tpe'", ",", "\n", "seed", "=", "1", ",", "R", "=", "27", ",", "eta", "=", "3", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "eval_func", "=", "eval_func", "\n", "self", ".", "config_space", "=", "config_space", "\n", "self", ".", "config_generator", "=", "config_generator", "\n", "self", ".", "n_workers", "=", "n_jobs", "\n", "\n", "self", ".", "trial_cnt", "=", "0", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "self", ".", "incumbent_configs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perfs", "=", "list", "(", ")", "\n", "self", ".", "global_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_ticks", "=", "list", "(", ")", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "# Parameters in Hyperband framework.", "\n", "self", ".", "restart_needed", "=", "True", "\n", "self", ".", "R", "=", "R", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "logeta", "=", "lambda", "x", ":", "log", "(", "x", ")", "/", "log", "(", "self", ".", "eta", ")", "\n", "self", ".", "s_max", "=", "int", "(", "self", ".", "logeta", "(", "self", ".", "R", ")", ")", "\n", "self", ".", "B", "=", "(", "self", ".", "s_max", "+", "1", ")", "*", "self", ".", "R", "\n", "self", ".", "s_values", "=", "list", "(", "reversed", "(", "range", "(", "self", ".", "s_max", "+", "1", ")", ")", ")", "\n", "self", ".", "inner_iter_id", "=", "0", "\n", "\n", "# Parameters in BOHB.", "\n", "self", ".", "iterate_r", "=", "list", "(", ")", "\n", "self", ".", "target_x", "=", "dict", "(", ")", "\n", "self", ".", "target_y", "=", "dict", "(", ")", "\n", "self", ".", "exp_output", "=", "dict", "(", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "np", ".", "logspace", "(", "0", ",", "self", ".", "s_max", ",", "self", ".", "s_max", "+", "1", ",", "base", "=", "self", ".", "eta", ")", ")", ":", "\n", "            ", "r", "=", "int", "(", "item", ")", "\n", "self", ".", "iterate_r", ".", "append", "(", "r", ")", "\n", "self", ".", "target_x", "[", "r", "]", "=", "list", "(", ")", "\n", "self", ".", "target_y", "[", "r", "]", "=", "list", "(", ")", "\n", "\n", "", "types", ",", "bounds", "=", "get_types", "(", "self", ".", "config_space", ")", "\n", "self", ".", "num_config", "=", "len", "(", "bounds", ")", "\n", "self", ".", "surrogate", "=", "RandomForestWithInstances", "(", "types", ",", "bounds", ")", "\n", "\n", "# self.executor = ParallelEvaluator(self.eval_func, n_worker=n_jobs)", "\n", "# self.executor = ParallelProcessEvaluator(self.eval_func, n_worker=n_jobs)", "\n", "self", ".", "acquisition_func", "=", "EI", "(", "model", "=", "self", ".", "surrogate", ")", "\n", "self", ".", "acq_optimizer", "=", "RandomSampling", "(", "self", ".", "acquisition_func", ",", "\n", "self", ".", "config_space", ",", "\n", "n_samples", "=", "2000", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ")", "\n", "\n", "self", ".", "config_gen", "=", "TPE", "(", "config_space", ")", "\n", "\n", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase._iterate": [[74, 138], ["int", "int", "time.time", "bohbbase.BohbBase.get_candidate_configurations", "bohbbase.BohbBase.logger.info", "math.ceil", "time.time", "mindware.components.computation.parallel_process.ParallelProcessEvaluator", "range", "len", "bohbbase.BohbBase.logger.info", "executor.parallel_execute", "enumerate", "numpy.argsort", "mindware.components.optimizers.base.funcs.std_normalization", "bohbbase.BohbBase.surrogate.train", "int", "time.time", "numpy.isfinite", "int", "int", "bohbbase.BohbBase.incumbent_configs.extend", "bohbbase.BohbBase.incumbent_perfs.extend", "bohbbase.BohbBase.time_ticks.extend", "len", "int", "mindware.components.optimizers.base.config_space_utils.convert_configurations_to_array", "numpy.array", "float", "bohbbase.BohbBase.target_x[].append", "bohbbase.BohbBase.target_y[].append", "time.time", "enumerate", "int", "len", "numpy.isfinite", "bohbbase.BohbBase.config_gen.new_result", "time.time", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.get_candidate_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.parallel_execute", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.std_normalization", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.new_result"], ["", "def", "_iterate", "(", "self", ",", "s", ",", "budget", "=", "MAX_INT", ",", "skip_last", "=", "0", ")", ":", "\n", "# Set initial number of configurations", "\n", "        ", "n", "=", "int", "(", "ceil", "(", "self", ".", "B", "/", "self", ".", "R", "/", "(", "s", "+", "1", ")", "*", "self", ".", "eta", "**", "s", ")", ")", "\n", "# initial number of iterations per config", "\n", "r", "=", "int", "(", "self", ".", "R", "*", "self", ".", "eta", "**", "(", "-", "s", ")", ")", "\n", "\n", "# Choose a batch of configurations in different mechanisms.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "T", "=", "self", ".", "get_candidate_configurations", "(", "n", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "logger", ".", "info", "(", "\"Choosing next batch of configurations took %.2f sec.\"", "%", "time_elapsed", ")", "\n", "\n", "with", "ParallelProcessEvaluator", "(", "self", ".", "eval_func", ",", "n_worker", "=", "self", ".", "n_workers", ")", "as", "executor", ":", "\n", "            ", "for", "i", "in", "range", "(", "(", "s", "+", "1", ")", "-", "int", "(", "skip_last", ")", ")", ":", "# changed from s + 1", "\n", "                ", "if", "time", ".", "time", "(", ")", ">=", "budget", "+", "start_time", ":", "\n", "                    ", "break", "\n", "\n", "# Run each of the n configs for <iterations>", "\n", "# and keep best (n_configs / eta) configurations", "\n", "\n", "", "n_configs", "=", "n", "*", "self", ".", "eta", "**", "(", "-", "i", ")", "\n", "n_resource", "=", "r", "*", "self", ".", "eta", "**", "i", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"BOHB: %d configurations x size %d / %d each\"", "%", "\n", "(", "int", "(", "n_configs", ")", ",", "n_resource", ",", "self", ".", "R", ")", ")", "\n", "\n", "val_losses", "=", "executor", ".", "parallel_execute", "(", "T", ",", "resource_ratio", "=", "float", "(", "n_resource", "/", "self", ".", "R", ")", ",", "\n", "eta", "=", "self", ".", "eta", ",", "\n", "first_iter", "=", "(", "i", "==", "0", ")", ")", "\n", "for", "_id", ",", "_val_loss", "in", "enumerate", "(", "val_losses", ")", ":", "\n", "                    ", "if", "np", ".", "isfinite", "(", "_val_loss", ")", ":", "\n", "                        ", "self", ".", "target_x", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "T", "[", "_id", "]", ")", "\n", "self", ".", "target_y", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "_val_loss", ")", "\n", "\n", "", "", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "int", "(", "n_resource", ")", ",", "T", ",", "val_losses", ")", "\n", "\n", "if", "int", "(", "n_resource", ")", "==", "self", ".", "R", ":", "\n", "                    ", "self", ".", "incumbent_configs", ".", "extend", "(", "T", ")", "\n", "self", ".", "incumbent_perfs", ".", "extend", "(", "val_losses", ")", "\n", "self", ".", "time_ticks", ".", "extend", "(", "[", "time", ".", "time", "(", ")", "-", "self", ".", "global_start_time", "]", "*", "len", "(", "T", ")", ")", "\n", "\n", "# Only update results using maximal resources", "\n", "if", "self", ".", "config_generator", "!=", "'smac'", ":", "\n", "                        ", "for", "_id", ",", "_val_loss", "in", "enumerate", "(", "val_losses", ")", ":", "\n", "                            ", "if", "np", ".", "isfinite", "(", "_val_loss", ")", ":", "\n", "                                ", "self", ".", "config_gen", ".", "new_result", "(", "T", "[", "_id", "]", ",", "_val_loss", ")", "\n", "\n", "# Select a number of best configurations for the next loop.", "\n", "# Filter out early stops, if any.", "\n", "", "", "", "", "indices", "=", "np", ".", "argsort", "(", "val_losses", ")", "\n", "if", "len", "(", "T", ")", ">=", "self", ".", "eta", ":", "\n", "                    ", "T", "=", "[", "T", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "reduced_num", "=", "int", "(", "n_configs", "/", "self", ".", "eta", ")", "\n", "T", "=", "T", "[", "0", ":", "reduced_num", "]", "\n", "", "else", ":", "\n", "                    ", "T", "=", "[", "T", "[", "indices", "[", "0", "]", "]", "]", "\n", "\n", "# Refit the surrogate model.", "\n", "", "", "", "resource_val", "=", "self", ".", "iterate_r", "[", "-", "1", "]", "\n", "if", "len", "(", "self", ".", "target_y", "[", "resource_val", "]", ")", ">", "1", ":", "\n", "            ", "if", "self", ".", "config_generator", "==", "'smac'", ":", "\n", "                ", "normalized_y", "=", "std_normalization", "(", "self", ".", "target_y", "[", "resource_val", "]", ")", "\n", "self", ".", "surrogate", ".", "train", "(", "convert_configurations_to_array", "(", "self", ".", "target_x", "[", "resource_val", "]", ")", ",", "\n", "np", ".", "array", "(", "normalized_y", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.smac_get_candidate_configurations": [[139, 162], ["dict", "numpy.argmin", "bohbbase.BohbBase.acquisition_func.update", "bohbbase.BohbBase.acq_optimizer.maximize", "list", "range", "len", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "list.append", "random.random", "len", "mindware.components.optimizers.base.config_space_utils.sample_configurations"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations"], ["", "", "", "def", "smac_get_candidate_configurations", "(", "self", ",", "num_config", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "target_y", "[", "self", ".", "iterate_r", "[", "-", "1", "]", "]", ")", "<=", "3", ":", "\n", "            ", "return", "sample_configurations", "(", "self", ".", "config_space", ",", "num_config", ")", "\n", "\n", "", "incumbent", "=", "dict", "(", ")", "\n", "max_r", "=", "self", ".", "iterate_r", "[", "-", "1", "]", "\n", "best_index", "=", "np", ".", "argmin", "(", "self", ".", "target_y", "[", "max_r", "]", ")", "\n", "incumbent", "[", "'config'", "]", "=", "self", ".", "target_x", "[", "max_r", "]", "[", "best_index", "]", "\n", "incumbent", "[", "'obj'", "]", "=", "self", ".", "target_y", "[", "max_r", "]", "[", "best_index", "]", "\n", "self", ".", "acquisition_func", ".", "update", "(", "model", "=", "self", ".", "surrogate", ",", "eta", "=", "incumbent", ")", "\n", "\n", "config_candidates", "=", "self", ".", "acq_optimizer", ".", "maximize", "(", "batch_size", "=", "num_config", ")", "\n", "p_threshold", "=", "0.3", "\n", "candidates", "=", "list", "(", ")", "\n", "idx_acq", "=", "0", "\n", "for", "_id", "in", "range", "(", "num_config", ")", ":", "\n", "            ", "if", "rd", ".", "random", "(", ")", "<", "p_threshold", "or", "_id", ">=", "len", "(", "config_candidates", ")", ":", "\n", "                ", "config", "=", "sample_configurations", "(", "self", ".", "config_space", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "config", "=", "config_candidates", "[", "idx_acq", "]", "\n", "idx_acq", "+=", "1", "\n", "", "candidates", ".", "append", "(", "config", ")", "\n", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.baseline_get_candidate_configurations": [[163, 185], ["list", "list", "range", "list.append", "list.append", "bohbbase.BohbBase.config_gen.get_config", "random.random", "mindware.components.optimizers.base.config_space_utils.sample_configurations"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.get_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations"], ["", "def", "baseline_get_candidate_configurations", "(", "self", ",", "num_config", ")", ":", "\n", "        ", "config_candidates", "=", "list", "(", ")", "\n", "\n", "config_left", "=", "num_config", "\n", "while", "config_left", ":", "\n", "            ", "config", "=", "self", ".", "config_gen", ".", "get_config", "(", ")", "[", "0", "]", "\n", "if", "config", "in", "config_candidates", ":", "\n", "                ", "continue", "\n", "", "config_candidates", ".", "append", "(", "config", ")", "\n", "config_left", "-=", "1", "\n", "\n", "", "p_threshold", "=", "0.3", "\n", "candidates", "=", "list", "(", ")", "\n", "idx_acq", "=", "0", "\n", "for", "_id", "in", "range", "(", "num_config", ")", ":", "\n", "            ", "if", "rd", ".", "random", "(", ")", "<", "p_threshold", ":", "\n", "                ", "config", "=", "sample_configurations", "(", "self", ".", "config_space", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "config", "=", "config_candidates", "[", "idx_acq", "]", "\n", "idx_acq", "+=", "1", "\n", "", "candidates", ".", "append", "(", "config", ")", "\n", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.get_candidate_configurations": [[186, 191], ["bohbbase.BohbBase.smac_get_candidate_configurations", "bohbbase.BohbBase.baseline_get_candidate_configurations"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.smac_get_candidate_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.bohbbase.BohbBase.baseline_get_candidate_configurations"], ["", "def", "get_candidate_configurations", "(", "self", ",", "num_config", ")", ":", "\n", "        ", "if", "self", ".", "config_generator", "==", "'smac'", ":", "\n", "            ", "return", "self", ".", "smac_get_candidate_configurations", "(", "num_config", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "baseline_get_candidate_configurations", "(", "num_config", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.get_types": [[8, 50], ["numpy.zeros", "enumerate", "numpy.array", "numpy.array", "len", "config_space.get_hyperparameters", "isinstance", "numpy.hstack", "config_space.get_hyperparameters", "len", "isinstance", "int", "len", "isinstance", "numpy.zeros", "isinstance", "int", "isinstance", "isinstance", "TypeError", "type"], "function", ["None"], ["def", "get_types", "(", "config_space", ",", "instance_features", "=", "None", ")", ":", "\n", "    ", "\"\"\"TODO\"\"\"", "\n", "# Extract types vector for rf from config space and the bounds", "\n", "types", "=", "np", ".", "zeros", "(", "len", "(", "config_space", ".", "get_hyperparameters", "(", ")", ")", ",", "\n", "dtype", "=", "np", ".", "uint", ")", "\n", "bounds", "=", "[", "(", "np", ".", "nan", ",", "np", ".", "nan", ")", "]", "*", "types", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "config_space", ".", "get_hyperparameters", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "param", ",", "(", "CategoricalHyperparameter", ")", ")", ":", "\n", "            ", "n_cats", "=", "len", "(", "param", ".", "choices", ")", "\n", "types", "[", "i", "]", "=", "n_cats", "\n", "bounds", "[", "i", "]", "=", "(", "int", "(", "n_cats", ")", ",", "np", ".", "nan", ")", "\n", "\n", "", "elif", "isinstance", "(", "param", ",", "(", "OrdinalHyperparameter", ")", ")", ":", "\n", "            ", "n_cats", "=", "len", "(", "param", ".", "sequence", ")", "\n", "types", "[", "i", "]", "=", "0", "\n", "bounds", "[", "i", "]", "=", "(", "0", ",", "int", "(", "n_cats", ")", "-", "1", ")", "\n", "\n", "", "elif", "isinstance", "(", "param", ",", "Constant", ")", ":", "\n", "# for constants we simply set types to 0", "\n", "# which makes it a numerical parameter", "\n", "            ", "types", "[", "i", "]", "=", "0", "\n", "bounds", "[", "i", "]", "=", "(", "0", ",", "np", ".", "nan", ")", "\n", "# and we leave the bounds to be 0 for now", "\n", "", "elif", "isinstance", "(", "param", ",", "UniformFloatHyperparameter", ")", ":", "# Are sampled on the unit hypercube thus the bounds", "\n", "# bounds[i] = (float(param.lower), float(param.upper))  # are always 0.0, 1.0", "\n", "            ", "bounds", "[", "i", "]", "=", "(", "0.0", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "param", ",", "UniformIntegerHyperparameter", ")", ":", "\n", "# bounds[i] = (int(param.lower), int(param.upper))", "\n", "            ", "bounds", "[", "i", "]", "=", "(", "0.0", ",", "1.0", ")", "\n", "", "elif", "not", "isinstance", "(", "param", ",", "(", "UniformFloatHyperparameter", ",", "\n", "UniformIntegerHyperparameter", ",", "\n", "OrdinalHyperparameter", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unknown hyperparameter type %s\"", "%", "type", "(", "param", ")", ")", "\n", "\n", "", "", "if", "instance_features", "is", "not", "None", ":", "\n", "        ", "types", "=", "np", ".", "hstack", "(", "\n", "(", "types", ",", "np", ".", "zeros", "(", "(", "instance_features", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "\n", "", "types", "=", "np", ".", "array", "(", "types", ",", "dtype", "=", "np", ".", "uint", ")", "\n", "bounds", "=", "np", ".", "array", "(", "bounds", ",", "dtype", "=", "object", ")", "\n", "return", "types", ",", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.minmax_normalization": [[74, 80], ["min", "max", "min", "len", "float", "float"], "function", ["None"], ["", "def", "minmax_normalization", "(", "x", ")", ":", "\n", "    ", "min_value", "=", "min", "(", "x", ")", "\n", "delta", "=", "max", "(", "x", ")", "-", "min", "(", "x", ")", "\n", "if", "delta", "==", "0", ":", "\n", "        ", "return", "[", "1.0", "]", "*", "len", "(", "x", ")", "\n", "", "return", "[", "(", "float", "(", "item", ")", "-", "min_value", ")", "/", "float", "(", "delta", ")", "for", "item", "in", "x", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.std_normalization": [[60, 66], ["numpy.mean", "numpy.std", "numpy.array", "numpy.array", "len"], "function", ["None"], ["", "def", "std_normalization", "(", "x", ")", ":", "\n", "    ", "_mean", "=", "np", ".", "mean", "(", "x", ")", "\n", "_std", "=", "np", ".", "std", "(", "x", ")", "\n", "if", "_std", "==", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "0.", "]", "*", "len", "(", "x", ")", ")", "\n", "", "return", "(", "np", ".", "array", "(", "x", ")", "-", "_mean", ")", "/", "_std", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.norm2_normalization": [[68, 72], ["numpy.array", "numpy.linalg.norm"], "function", ["None"], ["", "def", "norm2_normalization", "(", "x", ")", ":", "\n", "    ", "z", "=", "np", ".", "array", "(", "x", ")", "\n", "normalized_z", "=", "z", "/", "np", ".", "linalg", ".", "norm", "(", "z", ")", "\n", "return", "normalized_z", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.__str__": [[19, 21], ["type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.__init__": [[22, 33], ["logging.getLogger"], "methods", ["None"], ["\n", "\n", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", ".", "__name__", "+", "\" (\"", "+", "self", ".", "long_name", "+", "\")\"", "\n", "\n", "", "def", "__init__", "(", "self", ",", "model", ":", "AbstractModel", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update": [[34, 50], ["setattr"], "methods", ["None"], ["\n", "self", ".", "model", "=", "model", "\n", "self", ".", "logger", "=", "PickableLoggerAdapter", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.__call__": [[51, 74], ["acquisition.AbstractAcquisitionFunction._compute", "numpy.any", "len", "numpy.isnan", "numpy.where", "numpy.isnan", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI._compute"], ["\n", "for", "key", "in", "kwargs", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "\n", "", "", "def", "__call__", "(", "self", ",", "configurations", ":", "List", "[", "Configuration", "]", ")", ":", "\n", "        ", "\"\"\"Computes the acquisition value for a given X\n\n        Parameters\n        ----------\n        configurations : list\n            The configurations where the acquisition function\n            should be evaluated.\n\n        Returns\n        -------\n        np.ndarray(N, 1)\n            acquisition values for X\n        \"\"\"", "\n", "X", "=", "convert_configurations_to_array", "(", "configurations", ")", "\n", "if", "len", "(", "X", ".", "shape", ")", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "acq", "=", "self", ".", "_compute", "(", "X", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "acq", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction._compute": [[75, 94], ["NotImplementedError"], "methods", ["None"], ["            ", "idx", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "acq", ")", ")", "[", "0", "]", "\n", "acq", "[", "idx", ",", ":", "]", "=", "-", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "\n", "", "return", "acq", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI.__init__": [[105, 125], ["acquisition.AbstractAcquisitionFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "model", ":", "AbstractModel", ",", "acquisition_function", ":", "AbstractAcquisitionFunction", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            The model needs to implement an additional attribute ``models`` which contains the different models to\n            integrate over.\n        kwargs\n            Additional keyword arguments\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "model", ",", "**", "kwargs", ")", "\n", "self", ".", "long_name", "=", "'Integrated Acquisition Function (%s)'", "%", "acquisition_function", ".", "long_name", "\n", "self", ".", "acq", "=", "acquisition_function", "\n", "self", ".", "_functions", "=", "None", "\n", "self", ".", "eta", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.EI._compute": [[126, 167], ["acquisition.EI.model.predict_marginalized_over_instances", "numpy.sqrt", "numpy.any", "len", "ValueError", "acquisition.EI.logger.warn", "ValueError", "scipy.stats.norm.cdf", "scipy.stats.norm.pdf"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances"], ["\n", "", "def", "update", "(", "self", ",", "model", ":", "AbstractModel", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Update the acquisition functions values.\n\n        This method will be called if the model is updated. E.g. entropy search uses it to update its approximation\n        of P(x=x_min), EI uses it to update the current fmin.\n\n        This implementation creates an acquisition function object for each model to integrate over and sets the\n        respective attributes for each acquisition function object.\n\n        Parameters\n        ----------\n        model : AbstractEPM\n            The model needs to implement an additional attribute ``models`` which contains the different models to\n            integrate over.\n        kwargs\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "model", ",", "'models'", ")", "or", "len", "(", "model", ".", "models", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'IntegratedAcquisitionFunction requires at least one model to integrate!'", ")", "\n", "", "if", "self", ".", "_functions", "is", "None", "or", "len", "(", "self", ".", "_functions", ")", "!=", "len", "(", "model", ".", "models", ")", ":", "\n", "            ", "self", ".", "_functions", "=", "[", "copy", ".", "deepcopy", "(", "self", ".", "acq", ")", "for", "_", "in", "model", ".", "models", "]", "\n", "", "for", "model", ",", "func", "in", "zip", "(", "model", ".", "models", ",", "self", ".", "_functions", ")", ":", "\n", "            ", "func", ".", "update", "(", "model", "=", "model", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "_compute", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the EI value and its derivatives.\n\n        Parameters\n        ----------\n        X: np.ndarray(N, D), The input points where the acquisition function\n            should be evaluated. The dimensionality of X is (N, D), with N as\n            the number of points to evaluate at and D is the number of\n            dimensions of one X.\n\n        Returns\n        -------\n        np.ndarray(N,1)\n            Expected Improvement of X\n        \"\"\"", "\n", "if", "self", ".", "_functions", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Need to call update first!'", ")", "\n", "", "return", "np", ".", "array", "(", "[", "func", ".", "_compute", "(", "X", ")", "for", "func", "in", "self", ".", "_functions", "]", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.hyperband.HyperbandBase.__init__": [[12, 50], ["list", "list", "float", "hyperband.HyperbandBase.config_space.get_default_configuration", "mindware.utils.logging_utils.get_logger", "int", "list", "list", "dict", "dict", "dict", "enumerate", "dict", "hyperband.HyperbandBase.logeta", "reversed", "numpy.logspace", "int", "hyperband.HyperbandBase.iterate_r.append", "list", "list", "math.log", "math.log", "range"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "__init__", "(", "self", ",", "eval_func", ",", "config_space", ",", "\n", "seed", "=", "1", ",", "R", "=", "81", ",", "eta", "=", "3", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "eval_func", "=", "eval_func", "\n", "self", ".", "config_space", "=", "config_space", "\n", "self", ".", "n_workers", "=", "n_jobs", "\n", "\n", "self", ".", "trial_cnt", "=", "0", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "self", ".", "incumbent_configs", "=", "[", "]", "\n", "self", ".", "incumbent_perfs", "=", "[", "]", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "# Parameters in Hyperband framework.", "\n", "self", ".", "restart_needed", "=", "True", "\n", "self", ".", "R", "=", "R", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "logeta", "=", "lambda", "x", ":", "log", "(", "x", ")", "/", "log", "(", "self", ".", "eta", ")", "\n", "self", ".", "s_max", "=", "int", "(", "self", ".", "logeta", "(", "self", ".", "R", ")", ")", "\n", "self", ".", "B", "=", "(", "self", ".", "s_max", "+", "1", ")", "*", "self", ".", "R", "\n", "self", ".", "s_values", "=", "list", "(", "reversed", "(", "range", "(", "self", ".", "s_max", "+", "1", ")", ")", ")", "\n", "self", ".", "inner_iter_id", "=", "0", "\n", "\n", "# Parameters in Hyperband.", "\n", "self", ".", "iterate_r", "=", "list", "(", ")", "\n", "self", ".", "target_x", "=", "dict", "(", ")", "\n", "self", ".", "target_y", "=", "dict", "(", ")", "\n", "self", ".", "exp_output", "=", "dict", "(", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "np", ".", "logspace", "(", "0", ",", "self", ".", "s_max", ",", "self", ".", "s_max", "+", "1", ",", "base", "=", "self", ".", "eta", ")", ")", ":", "\n", "            ", "r", "=", "int", "(", "item", ")", "\n", "self", ".", "iterate_r", ".", "append", "(", "r", ")", "\n", "self", ".", "target_x", "[", "r", "]", "=", "list", "(", ")", "\n", "self", ".", "target_y", "[", "r", "]", "=", "list", "(", ")", "\n", "\n", "", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.hyperband.HyperbandBase._iterate": [[51, 101], ["int", "int", "time.time", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "hyperband.HyperbandBase.logger.info", "math.ceil", "time.time", "mindware.components.computation.parallel_process.ParallelProcessEvaluator", "range", "hyperband.HyperbandBase.logger.info", "executor.parallel_execute", "enumerate", "numpy.argsort", "int", "time.time", "numpy.isfinite", "int", "int", "hyperband.HyperbandBase.incumbent_configs.extend", "hyperband.HyperbandBase.incumbent_perfs.extend", "len", "int", "float", "hyperband.HyperbandBase.target_x[].append", "hyperband.HyperbandBase.target_y[].append", "time.time", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.parallel_execute"], ["", "def", "_iterate", "(", "self", ",", "s", ",", "budget", "=", "MAX_INT", ",", "skip_last", "=", "0", ")", ":", "\n", "\n", "# Set initial number of configurations", "\n", "        ", "n", "=", "int", "(", "ceil", "(", "self", ".", "B", "/", "self", ".", "R", "/", "(", "s", "+", "1", ")", "*", "self", ".", "eta", "**", "s", ")", ")", "\n", "# initial number of iterations per config", "\n", "r", "=", "int", "(", "self", ".", "R", "*", "self", ".", "eta", "**", "(", "-", "s", ")", ")", "\n", "\n", "# Choose a batch of configurations in different mechanisms.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "T", "=", "sample_configurations", "(", "self", ".", "config_space", ",", "n", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "logger", ".", "info", "(", "\"Choosing next batch of configurations took %.2f sec.\"", "%", "time_elapsed", ")", "\n", "\n", "with", "ParallelProcessEvaluator", "(", "self", ".", "eval_func", ",", "n_worker", "=", "self", ".", "n_workers", ")", "as", "executor", ":", "\n", "            ", "for", "i", "in", "range", "(", "(", "s", "+", "1", ")", "-", "int", "(", "skip_last", ")", ")", ":", "# changed from s + 1", "\n", "                ", "if", "time", ".", "time", "(", ")", ">=", "budget", "+", "start_time", ":", "\n", "                    ", "break", "\n", "\n", "# Run each of the n configs for <iterations>", "\n", "# and keep best (n_configs / eta) configurations", "\n", "\n", "", "n_configs", "=", "n", "*", "self", ".", "eta", "**", "(", "-", "i", ")", "\n", "n_resource", "=", "r", "*", "self", ".", "eta", "**", "i", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"MFSE: %d configurations x size %d / %d each\"", "%", "\n", "(", "int", "(", "n_configs", ")", ",", "n_resource", ",", "self", ".", "R", ")", ")", "\n", "\n", "val_losses", "=", "executor", ".", "parallel_execute", "(", "T", ",", "resource_ratio", "=", "float", "(", "n_resource", "/", "self", ".", "R", ")", ",", "\n", "eta", "=", "self", ".", "eta", ",", "\n", "first_iter", "=", "(", "i", "==", "0", ")", ")", "\n", "for", "_id", ",", "_val_loss", "in", "enumerate", "(", "val_losses", ")", ":", "\n", "                    ", "if", "np", ".", "isfinite", "(", "_val_loss", ")", ":", "\n", "                        ", "self", ".", "target_x", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "T", "[", "_id", "]", ")", "\n", "self", ".", "target_y", "[", "int", "(", "n_resource", ")", "]", ".", "append", "(", "_val_loss", ")", "\n", "\n", "", "", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "int", "(", "n_resource", ")", ",", "T", ",", "val_losses", ")", "\n", "\n", "if", "int", "(", "n_resource", ")", "==", "self", ".", "R", ":", "\n", "                    ", "self", ".", "incumbent_configs", ".", "extend", "(", "T", ")", "\n", "self", ".", "incumbent_perfs", ".", "extend", "(", "val_losses", ")", "\n", "\n", "# Select a number of best configurations for the next loop.", "\n", "# Filter out early stops, if any.", "\n", "", "indices", "=", "np", ".", "argsort", "(", "val_losses", ")", "\n", "if", "len", "(", "T", ")", ">=", "self", ".", "eta", ":", "\n", "                    ", "T", "=", "[", "T", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "reduced_num", "=", "int", "(", "n_configs", "/", "self", ".", "eta", ")", "\n", "T", "=", "T", "[", "0", ":", "reduced_num", "]", "\n", "", "else", ":", "\n", "                    ", "T", "=", "[", "T", "[", "indices", "[", "0", "]", "]", "]", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.__init__": [[38, 70], ["sklearn.decomposition.PCA", "sklearn.preprocessing.MinMaxScaler"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "instance_features", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "pca_components", ":", "float", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        instance_features : np.ndarray (I, K)\n            Contains the K dimensional instance features\n            of the I different instances\n        pca_components : float\n            Number of components to keep when using PCA to reduce\n            dimensionality of instance features. Requires to\n            set n_feats (> pca_dims).\n        \"\"\"", "\n", "self", ".", "instance_features", "=", "instance_features", "\n", "self", ".", "pca_components", "=", "pca_components", "\n", "if", "instance_features", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_feats", "=", "instance_features", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_feats", "=", "0", "\n", "\n", "", "self", ".", "n_params", "=", "None", "# will be updated on train()", "\n", "\n", "self", ".", "pca", "=", "None", "\n", "self", ".", "scaler", "=", "None", "\n", "if", "self", ".", "pca_components", "and", "self", ".", "n_feats", ">", "self", ".", "pca_components", ":", "\n", "            ", "self", ".", "pca", "=", "PCA", "(", "n_components", "=", "self", ".", "pca_components", ")", "\n", "self", ".", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "\n", "# Never use a lower variance than this", "\n", "", "self", ".", "var_threshold", "=", "10", "**", "-", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train": [[71, 106], ["base_epm.AbstractEPM._train", "base_epm.AbstractEPM.scaler.fit_transform", "numpy.nan_to_num", "base_epm.AbstractEPM.pca.fit_transform", "numpy.hstack", "hasattr", "numpy.array", "numpy.hstack", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances._train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform"], ["", "def", "train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Trains the EPM on X and Y.\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features (config + instance features)]\n            Input data points.\n        Y : np.ndarray [n_samples, n_objectives]\n            The corresponding target values. n_objectives must match the\n            number of target names specified in the constructor.\n\n        Returns\n        -------\n        self : AbstractEPM\n        \"\"\"", "\n", "\n", "self", ".", "n_params", "=", "X", ".", "shape", "[", "1", "]", "-", "self", ".", "n_feats", "\n", "\n", "# reduce dimensionality of features of larger than PCA_DIM", "\n", "if", "self", ".", "pca", "and", "X", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "X_feats", "=", "X", "[", ":", ",", "-", "self", ".", "n_feats", ":", "]", "\n", "# scale features", "\n", "X_feats", "=", "self", ".", "scaler", ".", "fit_transform", "(", "X_feats", ")", "\n", "X_feats", "=", "np", ".", "nan_to_num", "(", "X_feats", ")", "# if features with max == min", "\n", "# PCA", "\n", "X_feats", "=", "self", ".", "pca", ".", "fit_transform", "(", "X_feats", ")", "\n", "X", "=", "np", ".", "hstack", "(", "(", "X", "[", ":", ",", ":", "self", ".", "n_params", "]", ",", "X_feats", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "\"types\"", ")", ":", "\n", "# for RF, adapt types list", "\n", "# if X_feats.shape[0] < self.pca, X_feats.shape[1] ==", "\n", "# X_feats.shape[0]", "\n", "                ", "self", ".", "types", "=", "np", ".", "array", "(", "np", ".", "hstack", "(", "(", "self", ".", "types", "[", ":", "self", ".", "n_params", "]", ",", "np", ".", "zeros", "(", "(", "X_feats", ".", "shape", "[", "1", "]", ")", ")", ")", ")", ",", "\n", "dtype", "=", "np", ".", "uint", ")", "\n", "# TODO: REMINDER --> special change for weighted rf.", "\n", "", "", "return", "self", ".", "_train", "(", "X", ",", "Y", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM._train": [[107, 123], ["None"], "methods", ["None"], ["", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Trains the random forest on X and y.\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features (config + instance features)]\n            Input data points.\n        Y : np.ndarray [n_samples, n_objectives]\n            The corresponding target values. n_objectives must match the\n            number of target names specified in the constructor.\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict": [[124, 150], ["base_epm.AbstractEPM._predict", "base_epm.AbstractEPM.scaler.transform", "base_epm.AbstractEPM.pca.transform", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"\n        Predict means and variances for given X.\n\n        Parameters\n        ----------\n        X : np.ndarray of shape = [n_samples, n_features (config + instance features)]\n            Training samples\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, n_objectives]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, n_objectives]\n            Predictive variance\n        \"\"\"", "\n", "if", "self", ".", "pca", ":", "\n", "            ", "try", ":", "\n", "                ", "X_feats", "=", "X", "[", ":", ",", "-", "self", ".", "n_feats", ":", "]", "\n", "X_feats", "=", "self", ".", "scaler", ".", "transform", "(", "X_feats", ")", "\n", "X_feats", "=", "self", ".", "pca", ".", "transform", "(", "X_feats", ")", "\n", "X", "=", "np", ".", "hstack", "(", "(", "X", "[", ":", ",", ":", "self", ".", "n_params", "]", ",", "X_feats", ")", ")", "\n", "", "except", "NotFittedError", ":", "\n", "                ", "pass", "# PCA not fitted if only one training sample", "\n", "\n", "", "", "return", "self", ".", "_predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM._predict": [[151, 168], ["NotImplementedError"], "methods", ["None"], ["", "def", "_predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"\n        Predict means and variances for given X.\n\n        Parameters\n        ----------\n        X : np.ndarray\n            [n_samples, n_features (config + instance features)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, n_objectives]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, n_objectives]\n            Predictive variance\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.predict_marginalized_over_instances": [[169, 226], ["numpy.zeros", "numpy.zeros", "enumerate", "base_epm.AbstractEPM.predict", "len", "len", "ValueError", "ValueError", "numpy.hstack", "base_epm.AbstractEPM.predict", "numpy.mean", "numpy.mean", "len", "mean.reshape.reshape.reshape", "len", "var.reshape.reshape.reshape", "len", "numpy.isnan", "len", "numpy.tile"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict_marginalized_over_instances", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Predict mean and variance marginalized over all instances.\n\n        Returns the predictive mean and variance marginalised over all\n        instances for a set of configurations.\n\n        Parameters\n        ----------\n        X : np.ndarray\n            [n_samples, n_features (config)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, 1]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, 1]\n            Predictive variance\n        \"\"\"", "\n", "\n", "if", "self", ".", "instance_features", "is", "None", "or", "len", "(", "self", ".", "instance_features", ")", "==", "0", ":", "\n", "            ", "mean", ",", "var", "=", "self", ".", "predict", "(", "X", ")", "\n", "var", "[", "var", "<", "self", ".", "var_threshold", "]", "=", "self", ".", "var_threshold", "\n", "var", "[", "np", ".", "isnan", "(", "var", ")", "]", "=", "self", ".", "var_threshold", "\n", "return", "mean", ",", "var", "\n", "", "else", ":", "\n", "            ", "n_instances", "=", "len", "(", "self", ".", "instance_features", ")", "\n", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "self", ".", "bounds", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "\n", "(", "self", ".", "bounds", ".", "shape", "[", "0", "]", ",", "\n", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "mean", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "var", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "            ", "X_", "=", "np", ".", "hstack", "(", "\n", "(", "np", ".", "tile", "(", "x", ",", "(", "n_instances", ",", "1", ")", ")", ",", "self", ".", "instance_features", ")", ")", "\n", "means", ",", "vars", "=", "self", ".", "predict", "(", "X_", ")", "\n", "# use only mean of variance and not the variance of the mean here", "\n", "# since we don't want to reason about the instance hardness distribution", "\n", "var_x", "=", "np", ".", "mean", "(", "vars", ")", "# + np.var(means)", "\n", "if", "var_x", "<", "self", ".", "var_threshold", ":", "\n", "                ", "var_x", "=", "self", ".", "var_threshold", "\n", "\n", "", "var", "[", "i", "]", "=", "var_x", "\n", "mean", "[", "i", "]", "=", "np", ".", "mean", "(", "means", ")", "\n", "\n", "", "if", "len", "(", "mean", ".", "shape", ")", "==", "1", ":", "\n", "            ", "mean", "=", "mean", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "if", "len", "(", "var", ".", "shape", ")", "==", "1", ":", "\n", "            ", "var", "=", "var", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "return", "mean", ",", "var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf_cluster.WeightedRandomForestCluster.__init__": [[7, 25], ["mindware.components.optimizers.base.base_epm.AbstractEPM.__init__", "dict", "dict", "list", "enumerate", "numpy.logspace", "int", "prob_rf_cluster.WeightedRandomForestCluster.surrogate_r.append", "mindware.components.optimizers.base.prob_rf.RandomForestWithInstances"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "types", ":", "np", ".", "ndarray", ",", "\n", "bounds", ":", "np", ".", "ndarray", ",", "s_max", ",", "eta", ",", "weight_list", ",", "fusion_method", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "types", "=", "types", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "s_max", "=", "s_max", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "fusion", "=", "fusion_method", "\n", "self", ".", "surrogate_weight", "=", "dict", "(", ")", "\n", "self", ".", "surrogate_container", "=", "dict", "(", ")", "\n", "self", ".", "surrogate_r", "=", "list", "(", ")", "\n", "self", ".", "weight_list", "=", "weight_list", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "np", ".", "logspace", "(", "0", ",", "self", ".", "s_max", ",", "self", ".", "s_max", "+", "1", ",", "base", "=", "self", ".", "eta", ")", ")", ":", "\n", "            ", "r", "=", "int", "(", "item", ")", "\n", "self", ".", "surrogate_r", ".", "append", "(", "r", ")", "\n", "self", ".", "surrogate_weight", "[", "r", "]", "=", "self", ".", "weight_list", "[", "self", ".", "s_max", "-", "index", "]", "\n", "self", ".", "surrogate_container", "[", "r", "]", "=", "RandomForestWithInstances", "(", "types", "=", "types", ",", "bounds", "=", "bounds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf_cluster.WeightedRandomForestCluster._train": [[26, 30], ["prob_rf_cluster.WeightedRandomForestCluster.surrogate_container[].train"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train"], ["", "", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "(", "'r'", "in", "kwargs", ")", "\n", "r", "=", "kwargs", "[", "'r'", "]", "\n", "self", ".", "surrogate_container", "[", "r", "]", ".", "train", "(", "X", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf_cluster.WeightedRandomForestCluster._predict": [[31, 71], ["len", "ValueError", "ValueError", "numpy.zeros", "numpy.zeros", "prob_rf_cluster.WeightedRandomForestCluster.surrogate_container[].predict", "means.reshape", "vars.reshape", "len", "numpy.zeros", "numpy.zeros", "prob_rf_cluster.WeightedRandomForestCluster.surrogate_container[].predict", "means.reshape", "vars.reshape", "len", "numpy.zeros", "numpy.zeros", "enumerate", "ValueError", "prob_rf_cluster.WeightedRandomForestCluster.surrogate_container[].predict", "mu_t.flatten.flatten.flatten", "numpy.sum", "numpy.sum", "mu.reshape", "var.reshape", "var_t.flatten"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "_predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "self", ".", "types", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "\n", "(", "self", ".", "types", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "if", "self", ".", "fusion", "==", "'idp'", ":", "\n", "            ", "means", ",", "vars", "=", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "r", "in", "self", ".", "surrogate_r", ":", "\n", "                ", "mean", ",", "var", "=", "self", ".", "surrogate_container", "[", "r", "]", ".", "predict", "(", "X", ")", "\n", "means", "+=", "self", ".", "surrogate_weight", "[", "r", "]", "*", "mean", "\n", "vars", "+=", "self", ".", "surrogate_weight", "[", "r", "]", "*", "self", ".", "surrogate_weight", "[", "r", "]", "*", "var", "\n", "", "return", "means", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "vars", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "fusion", "==", "'unct_ignore'", ":", "\n", "            ", "means", ",", "vars", "=", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "r", "in", "self", ".", "surrogate_r", ":", "\n", "                ", "mean", ",", "var", "=", "self", ".", "surrogate_container", "[", "r", "]", ".", "predict", "(", "X", ")", "\n", "means", "+=", "self", ".", "surrogate_weight", "[", "r", "]", "*", "mean", "\n", "if", "r", "==", "self", ".", "surrogate_r", "[", "-", "1", "]", ":", "\n", "                    ", "vars", "=", "var", "\n", "", "", "return", "means", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "vars", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "fusion", "==", "'gpoe'", ":", "\n", "            ", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "m", "=", "len", "(", "self", ".", "surrogate_r", ")", "\n", "var_buf", "=", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", "\n", "mu_buf", "=", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", "\n", "# Predictions from base surrogates.", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "self", ".", "surrogate_r", ")", ":", "\n", "                ", "mu_t", ",", "var_t", "=", "self", ".", "surrogate_container", "[", "r", "]", ".", "predict", "(", "X", ")", "\n", "mu_t", "=", "mu_t", ".", "flatten", "(", ")", "\n", "var_t", "=", "var_t", ".", "flatten", "(", ")", "+", "1e-8", "\n", "# compute the gaussian experts.", "\n", "var_buf", "[", ":", ",", "i", "]", "=", "1.", "/", "var_t", "*", "self", ".", "surrogate_weight", "[", "r", "]", "\n", "mu_buf", "[", ":", ",", "i", "]", "=", "1.", "/", "var_t", "*", "mu_t", "*", "self", ".", "surrogate_weight", "[", "r", "]", "\n", "", "var", "=", "1.", "/", "np", ".", "sum", "(", "var_buf", ",", "axis", "=", "1", ")", "\n", "mu", "=", "np", ".", "sum", "(", "mu_buf", ",", "axis", "=", "1", ")", "*", "var", "\n", "return", "mu", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "var", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Undefined Fusion Method!'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances.__init__": [[29, 106], ["mindware.components.optimizers.base.base_epm.AbstractEPM.__init__", "pyrfr.regression.default_random_engine", "pyrfr.regression.forest_opts", "logging.getLogger", "max", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["def", "__init__", "(", "self", ",", "types", ":", "np", ".", "ndarray", ",", "\n", "bounds", ":", "np", ".", "ndarray", ",", "\n", "num_trees", ":", "int", "=", "10", ",", "\n", "do_bootstrapping", ":", "bool", "=", "True", ",", "\n", "n_points_per_tree", ":", "int", "=", "-", "1", ",", "\n", "ratio_features", ":", "float", "=", "5.", "/", "6.", ",", "\n", "min_samples_split", ":", "int", "=", "3", ",", "\n", "min_samples_leaf", ":", "int", "=", "3", ",", "\n", "max_depth", ":", "int", "=", "20", ",", "\n", "eps_purity", ":", "int", "=", "1e-8", ",", "\n", "max_num_nodes", ":", "int", "=", "2", "**", "20", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructor\n\n        Parameters\n        ----------\n        types : np.ndarray (D)\n            Specifies the number of categorical values of an input dimension where\n            the i-th entry corresponds to the i-th input dimension. Let's say we\n            have 2 dimension where the first dimension consists of 3 different\n            categorical choices and the second dimension is continuous than we\n            have to pass np.array([2, 0]). Note that we count starting from 0.\n        bounds : np.ndarray (D, 2)\n            Specifies the bounds for continuous features.\n        num_trees : int\n            The number of trees in the random forest.\n        do_bootstrapping : bool\n            Turns on / off bootstrapping in the random forest.\n        n_points_per_tree : int\n            Number of points per tree. If <= 0 X.shape[0] will be used\n            in _train(X, y) instead\n        ratio_features : float\n            The ratio of features that are considered for splitting.\n        min_samples_split : int\n            The minimum number of data points to perform a split.\n        min_samples_leaf : int\n            The minimum number of data points in a leaf.\n        max_depth : int\n            The maximum depth of a single tree.\n        eps_purity : float\n            The minimum difference between two target values to be considered\n            different\n        max_num_nodes : int\n            The maxmimum total number of nodes in a tree\n        seed : int\n            The seed that is passed to the random_forest_run library.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "types", "=", "types", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "rng", "=", "regression", ".", "default_random_engine", "(", "seed", ")", "\n", "\n", "self", ".", "rf_opts", "=", "regression", ".", "forest_opts", "(", ")", "\n", "self", ".", "rf_opts", ".", "num_trees", "=", "num_trees", "\n", "self", ".", "rf_opts", ".", "do_bootstrapping", "=", "do_bootstrapping", "\n", "max_features", "=", "0", "if", "ratio_features", ">", "1.0", "else", "max", "(", "1", ",", "int", "(", "types", ".", "shape", "[", "0", "]", "*", "ratio_features", ")", ")", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "max_features", "=", "max_features", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "min_samples_to_split", "=", "min_samples_split", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "min_samples_in_leaf", "=", "min_samples_leaf", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "epsilon_purity", "=", "eps_purity", "\n", "self", ".", "rf_opts", ".", "tree_opts", ".", "max_num_nodes", "=", "max_num_nodes", "\n", "\n", "self", ".", "n_points_per_tree", "=", "n_points_per_tree", "\n", "self", ".", "rf", "=", "None", "# type: regression.binary_rss_forest", "\n", "\n", "# This list well be read out by save_iteration() in the solver", "\n", "self", ".", "hypers", "=", "[", "num_trees", ",", "max_num_nodes", ",", "do_bootstrapping", ",", "\n", "n_points_per_tree", ",", "ratio_features", ",", "min_samples_split", ",", "\n", "min_samples_leaf", ",", "max_depth", ",", "eps_purity", ",", "seed", "]", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__module__", "+", "\".\"", "+", "\n", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances._train": [[107, 134], ["y.flatten", "pyrfr.regression.binary_rss_forest", "prob_rf.RandomForestWithInstances.__init_data_container", "prob_rf.RandomForestWithInstances.rf.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances.__init_data_container", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "_train", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Trains the random forest on X and y.\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features (config + instance features)]\n            Input data points.\n        Y : np.ndarray [n_samples, ]\n            The corresponding target values.\n\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", ".", "flatten", "(", ")", "\n", "\n", "if", "self", ".", "n_points_per_tree", "<=", "0", ":", "\n", "            ", "self", ".", "rf_opts", ".", "num_data_points_per_tree", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "rf_opts", ".", "num_data_points_per_tree", "=", "self", ".", "n_points_per_tree", "\n", "", "self", ".", "rf", "=", "regression", ".", "binary_rss_forest", "(", ")", "\n", "self", ".", "rf", ".", "options", "=", "self", ".", "rf_opts", "\n", "data", "=", "self", ".", "__init_data_container", "(", "self", ".", "X", ",", "self", ".", "y", ")", "\n", "self", ".", "rf", ".", "fit", "(", "data", ",", "rng", "=", "self", ".", "rng", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances.__init_data_container": [[135, 163], ["pyrfr.regression.default_data_container", "enumerate", "zip", "numpy.isnan", "pyrfr.regression.default_data_container.add_data_point", "pyrfr.regression.default_data_container.set_type_of_feature", "pyrfr.regression.default_data_container.set_bounds_of_feature"], "methods", ["None"], ["", "def", "__init_data_container", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Fills a pyrfr default data container, s.t. the forest knows\n        categoricals and bounds for continous data\n\n        Parameters\n        ----------\n        X : np.ndarray [n_samples, n_features]\n            Input data points\n        y : np.ndarray [n_samples, ]\n            Corresponding target values\n\n        Returns\n        -------\n        data : regression.default_data_container\n            The filled data container that pyrfr can interpret\n        \"\"\"", "\n", "# retrieve the types and the bounds from the ConfigSpace", "\n", "data", "=", "regression", ".", "default_data_container", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", ",", "(", "mn", ",", "mx", ")", "in", "enumerate", "(", "self", ".", "bounds", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "mx", ")", ":", "\n", "                ", "data", ".", "set_type_of_feature", "(", "i", ",", "mn", ")", "\n", "", "else", ":", "\n", "                ", "data", ".", "set_bounds_of_feature", "(", "i", ",", "mn", ",", "mx", ")", "\n", "\n", "", "", "for", "row_X", ",", "row_y", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "            ", "data", ".", "add_data_point", "(", "row_X", ",", "row_y", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.prob_rf.RandomForestWithInstances._predict": [[164, 195], ["numpy.array", "numpy.array", "len", "ValueError", "ValueError", "prob_rf.RandomForestWithInstances.rf.predict_mean_var", "numpy.array.append", "numpy.array.append", "numpy.array.reshape", "numpy.array.reshape", "len"], "methods", ["None"], ["", "def", "_predict", "(", "self", ",", "X", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Predict means and variances for given X.\n\n        Parameters\n        ----------\n        X : np.ndarray of shape = [n_samples,\n                                   n_features (config + instance features)]\n\n        Returns\n        -------\n        means : np.ndarray of shape = [n_samples, 1]\n            Predictive mean\n        vars : np.ndarray  of shape = [n_samples, 1]\n            Predictive variance\n        \"\"\"", "\n", "if", "len", "(", "X", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 2d array, got %dd array!'", "%", "len", "(", "X", ".", "shape", ")", ")", "\n", "", "if", "X", ".", "shape", "[", "1", "]", "!=", "self", ".", "types", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Rows in X should have %d entries but have %d!'", "%", "\n", "(", "self", ".", "types", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "means", ",", "vars_", "=", "[", "]", ",", "[", "]", "\n", "for", "row_X", "in", "X", ":", "\n", "            ", "mean", ",", "var", "=", "self", ".", "rf", ".", "predict_mean_var", "(", "row_X", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "vars_", ".", "append", "(", "var", ")", "\n", "", "means", "=", "np", ".", "array", "(", "means", ")", "\n", "vars_", "=", "np", ".", "array", "(", "vars_", ")", "\n", "\n", "return", "means", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "vars_", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.bohb_optimizer.BohbOptimizer.__init__": [[9, 22], ["mindware.components.optimizers.base_optimizer.BaseOptimizer.__init__", "mindware.components.optimizers.base.bohbbase.BohbBase.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", ",", "time_limit", "=", "None", ",", "evaluation_limit", "=", "None", ",", "\n", "per_run_time_limit", "=", "600", ",", "per_run_mem_limit", "=", "1024", ",", "output_dir", "=", "'./'", ",", "timestamp", "=", "None", ",", "\n", "inner_iter_num_per_iter", "=", "1", ",", "seed", "=", "1", ",", "\n", "R", "=", "27", ",", "eta", "=", "3", ",", "mode", "=", "'smac'", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "BaseOptimizer", ".", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", "=", "eval_type", ",", "timestamp", "=", "timestamp", ",", "\n", "output_dir", "=", "output_dir", ",", "seed", "=", "seed", ")", "\n", "BohbBase", ".", "__init__", "(", "self", ",", "eval_func", "=", "self", ".", "evaluator", ",", "config_generator", "=", "mode", ",", "config_space", "=", "self", ".", "config_space", ",", "\n", "seed", "=", "seed", ",", "R", "=", "R", ",", "eta", "=", "eta", ",", "n_jobs", "=", "n_jobs", ")", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "evaluation_num_limit", "=", "evaluation_limit", "\n", "self", ".", "inner_iter_num_per_iter", "=", "inner_iter_num_per_iter", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "per_run_mem_limit", "=", "per_run_mem_limit", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.bohb_optimizer.BohbOptimizer.iterate": [[23, 71], ["time.time", "range", "numpy.argmin", "range", "bohb_optimizer.BohbOptimizer._iterate", "numpy.array", "len", "time.time", "time.time", "os.listdir", "hasattr", "hasattr", "time.time", "time.time", "os.path.join", "os.remove"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer._iterate"], ["", "def", "iterate", "(", "self", ",", "budget", "=", "MAX_INT", ")", ":", "\n", "        ", "'''\n            Iterate a SH procedure (inner loop) in Hyperband.\n        :return:\n        '''", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "inner_iter_num_per_iter", ")", ":", "\n", "            ", "_time_elapsed", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "if", "_time_elapsed", ">=", "budget", ":", "\n", "                ", "break", "\n", "", "budget_left", "=", "budget", "-", "_time_elapsed", "\n", "self", ".", "_iterate", "(", "self", ".", "s_values", "[", "self", ".", "inner_iter_id", "]", ",", "budget", "=", "budget_left", ")", "\n", "self", ".", "inner_iter_id", "=", "(", "self", ".", "inner_iter_id", "+", "1", ")", "%", "(", "self", ".", "s_max", "+", "1", ")", "\n", "\n", "# Remove tmp model", "\n", "if", "self", ".", "evaluator", ".", "continue_training", ":", "\n", "                ", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "evaluator", ".", "model_dir", ")", ":", "\n", "# Temporary model", "\n", "                    ", "if", "'tmp_%s'", "%", "self", ".", "evaluator", ".", "timestamp", "in", "filename", ":", "\n", "                        ", "try", ":", "\n", "                            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "evaluator", ".", "model_dir", ",", "filename", ")", "\n", "os", ".", "remove", "(", "filepath", ")", "\n", "", "except", ":", "\n", "                            ", "pass", "\n", "\n", "", "", "", "", "", "inc_idx", "=", "np", ".", "argmin", "(", "np", ".", "array", "(", "self", ".", "incumbent_perfs", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "incumbent_perfs", ")", ")", ":", "\n", "            ", "if", "self", ".", "name", "==", "'hpo'", ":", "\n", "                ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'fe_config'", ")", ":", "\n", "                    ", "fe_config", "=", "self", ".", "evaluator", ".", "fe_config", "\n", "", "else", ":", "\n", "                    ", "fe_config", "=", "None", "\n", "", "self", ".", "eval_dict", "[", "(", "fe_config", ",", "self", ".", "incumbent_configs", "[", "idx", "]", ")", "]", "=", "[", "-", "self", ".", "incumbent_perfs", "[", "idx", "]", ",", "time", ".", "time", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'hpo_config'", ")", ":", "\n", "                    ", "hpo_config", "=", "self", ".", "evaluator", ".", "hpo_config", "\n", "", "else", ":", "\n", "                    ", "hpo_config", "=", "None", "\n", "", "self", ".", "eval_dict", "[", "(", "self", ".", "incumbent_configs", "[", "idx", "]", ",", "hpo_config", ")", "]", "=", "[", "-", "self", ".", "incumbent_perfs", "[", "idx", "]", ",", "\n", "time", ".", "time", "(", ")", "]", "\n", "\n", "", "", "self", ".", "perfs", "=", "self", ".", "incumbent_perfs", "\n", "self", ".", "configs", "=", "self", ".", "incumbent_configs", "\n", "self", ".", "incumbent_perf", "=", "-", "self", ".", "incumbent_perfs", "[", "inc_idx", "]", "\n", "self", ".", "incumbent_config", "=", "self", ".", "incumbent_configs", "[", "inc_idx", "]", "\n", "# Incumbent performance: the large, the better", "\n", "iteration_cost", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "return", "self", ".", "incumbent_perf", ",", "iteration_cost", ",", "self", ".", "incumbent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.bohb_optimizer.BohbOptimizer.get_runtime_history": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_runtime_history", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "incumbent_perfs", ",", "self", ".", "time_ticks", ",", "self", ".", "incumbent_perf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.TlboOptimizer.__init__": [[17, 62], ["solnml.components.optimizers.base_optimizer.BaseOptimizer.__init__", "hasattr", "tlbo_optimizer.get_datasets", "tlbo_optimizer.load_runhistory", "openbox.optimizer.smbo.SMBO", "list", "list", "dict", "float", "tlbo_optimizer.TlboOptimizer.config_space.get_default_configuration", "len", "tlbo_optimizer.TlboOptimizer.logger.debug", "min", "os.path.join", "tlbo_optimizer.TlboOptimizer.config_space.get_hyperparameters", "int", "int", "len", "set", "tlbo_optimizer.TlboOptimizer.config_space.sample_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_datasets", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.load_runhistory", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["os_sep", "=", "os", ".", "sep", "\n", "\n", "\n", "def", "get_metafeature_vector", "(", "metafeature_dict", ")", ":", "\n", "    ", "sorted_keys", "=", "sorted", "(", "metafeature_dict", ".", "keys", "(", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "metafeature_dict", "[", "key", "]", "for", "key", "in", "sorted_keys", "]", ")", "\n", "\n", "\n", "", "def", "get_datasets", "(", "runhistory_dir", ",", "estimator_id", ",", "metric", ",", "task_id", "=", "'hpo'", ")", ":", "\n", "    ", "_datasets", "=", "list", "(", ")", "\n", "pattern", "=", "r'(.*)-%s-%s-%s.pkl'", "%", "(", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "runhistory_dir", ")", ":", "\n", "        ", "result", "=", "re", ".", "search", "(", "pattern", ",", "filename", ",", "re", ".", "M", "|", "re", ".", "I", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "            ", "_datasets", ".", "append", "(", "result", ".", "group", "(", "1", ")", ")", "\n", "", "", "return", "_datasets", "\n", "\n", "\n", "", "def", "load_runhistory", "(", "runhistory_dir", ",", "dataset_names", ",", "estimator_id", ",", "metric", ",", "task_id", ")", ":", "\n", "    ", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "metafeature_file", "=", "'%s%srunhistory%smetafeature.pkl'", "%", "(", "cur_dir", ",", "os_sep", ",", "os_sep", ")", "\n", "with", "open", "(", "metafeature_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "metafeature_dict", "=", "pk", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "dataset", "in", "metafeature_dict", ".", "keys", "(", ")", ":", "\n", "        ", "vec", "=", "get_metafeature_vector", "(", "metafeature_dict", "[", "dataset", "]", ")", "\n", "metafeature_dict", "[", "dataset", "]", "=", "vec", "\n", "\n", "", "runhistory", "=", "list", "(", ")", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "        ", "_filename", "=", "'%s-%s-%s-%s.pkl'", "%", "(", "dataset", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "with", "open", "(", "runhistory_dir", "+", "_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pk", ".", "load", "(", "f", ")", "\n", "", "if", "dataset", "not", "in", "metafeature_dict", ":", "\n", "            ", "meta_vec", "=", "None", "\n", "", "else", ":", "\n", "            ", "meta_vec", "=", "metafeature_dict", "[", "dataset", "]", "\n", "", "runhistory", ".", "append", "(", "(", "meta_vec", ",", "list", "(", "data", ".", "items", "(", ")", ")", ")", ")", "\n", "", "return", "runhistory", "\n", "\n", "\n", "", "def", "has_runhistory", "(", "config_space", ",", "task_id", "=", "'hpo'", ")", ":", "\n", "    ", "estimator_id", "=", "config_space", ".", "get_default_configuration", "(", ")", "[", "'estimator'", "]", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "dir_template", "=", "'%s'", "+", "os_sep", "+", "'runhistory'", "+", "os_sep", "+", "'hpo'", "+", "os_sep", "+", "'%s_%s'", "+", "os_sep", "\n", "runhistory_dir", "=", "dir_template", "%", "(", "cur_dir", ",", "task_id", ",", "estimator_id", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.TlboOptimizer.run": [[63, 72], ["numpy.max", "len", "tlbo_optimizer.TlboOptimizer.iterate", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["datasets", "=", "get_datasets", "(", "runhistory_dir", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "return", "True", "if", "len", "(", "datasets", ")", ">", "0", "else", "False", "\n", "\n", "\n", "", "def", "get_pretrain_surrogate_models", "(", "config_space", ",", "metric", ",", "task_id", "=", "'hpo'", ")", ":", "\n", "    ", "max_runs", "=", "None", "\n", "estimator_id", "=", "config_space", ".", "get_default_configuration", "(", ")", "[", "'estimator'", "]", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "file_id", "=", "'surrogate_models_%s_%s_%s.pk'", "%", "(", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "surrogate_models_file", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "file_id", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.TlboOptimizer.iterate": [[73, 111], ["time.time", "range", "tlbo_optimizer.TlboOptimizer.optimizer.get_history", "tlbo_optimizer.TlboOptimizer.optimizer.iterate", "hasattr", "hasattr", "tlbo_optimizer.TlboOptimizer.get_incumbents", "time.time", "len", "tlbo_optimizer.TlboOptimizer.logger.warning", "tlbo_optimizer.TlboOptimizer.logger.warning", "tlbo_optimizer.TlboOptimizer.configs.append", "tlbo_optimizer.TlboOptimizer.perfs.append", "time.time", "time.time", "tlbo_optimizer.TlboOptimizer.data.items", "time.time", "tlbo_optimizer.TlboOptimizer.data.items", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_history", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["\n", "if", "os", ".", "path", ".", "exists", "(", "surrogate_models_file", ")", ":", "\n", "        ", "with", "open", "(", "surrogate_models_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "return", "pk", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "dir_template", "=", "'%s'", "+", "os_sep", "+", "'runhistory'", "+", "os_sep", "+", "'hpo'", "+", "os_sep", "+", "'%s_%s_%s'", "+", "os_sep", "\n", "runhistory_dir", "=", "dir_template", "%", "(", "cur_dir", ",", "task_id", ",", "metric", ",", "estimator_id", ")", "\n", "dataset_names", "=", "get_datasets", "(", "runhistory_dir", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "if", "len", "(", "dataset_names", ")", "==", "0", ":", "\n", "            ", "print", "(", "'No related knowledge transferred: [%s][%s][%s]'", "%", "(", "estimator_id", ",", "metric", ",", "task_id", ")", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "runhistory", "=", "load_runhistory", "(", "runhistory_dir", ",", "dataset_names", ",", "estimator_id", ",", "metric", ",", "task_id", ")", "\n", "surrogate_models", "=", "list", "(", ")", "\n", "for", "dataset", ",", "hist", "in", "zip", "(", "dataset_names", ",", "runhistory", ")", ":", "\n", "                ", "_", ",", "rng", "=", "get_rng", "(", "1", ")", "\n", "_model", "=", "RandomForestWithInstances", "(", "config_space", ",", "seed", "=", "rng", ".", "randint", "(", "MAXINT", ")", ",", "normalize_y", "=", "True", ")", "\n", "X", "=", "list", "(", ")", "\n", "for", "row", "in", "hist", "[", "1", "]", ":", "\n", "                    ", "conf_vector", "=", "convert_configurations_to_array", "(", "[", "row", "[", "0", "]", "]", ")", "[", "0", "]", "\n", "X", ".", "append", "(", "conf_vector", ")", "\n", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "# Turning it to a minimization problem.", "\n", "y", "=", "-", "np", ".", "array", "(", "[", "row", "[", "1", "]", "for", "row", "in", "hist", "[", "1", "]", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X", ",", "y", "=", "X", "[", ":", "max_runs", "]", ",", "y", "[", ":", "max_runs", "]", "\n", "_model", ".", "train", "(", "X", ",", "y", ")", "\n", "surrogate_models", ".", "append", "(", "_model", ")", "\n", "print", "(", "'%s: training basic surrogate model finished.'", "%", "dataset", ")", "\n", "# TODO: bugs reported, TypeError: can't pickle SwigPyObject objects.", "\n", "# with open(surrogate_models_file, 'wb') as f:", "\n", "#     pk.dump(surrogate_models, f)", "\n", "", "return", "surrogate_models", "\n", "\n", "\n", "", "", "", "class", "TLBO", "(", "BaseFacade", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "\n", "config_space", ",", "\n", "metric", ":", "str", ",", "\n", "gp_fusion", ":", "str", "=", "'gpoe'", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_metafeature_vector": [[113, 116], ["sorted", "numpy.array", "metafeature_dict.keys"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["meta_warmstart", ":", "bool", "=", "False", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "max_runs", "=", "200", ",", "\n", "initial_runs", "=", "5", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_datasets": [[118, 126], ["list", "os.listdir", "re.search", "list.append", "re.search.group"], "function", ["None"], ["rng", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "task_id", ")", "\n", "self", ".", "gp_fusion", "=", "gp_fusion", "\n", "self", ".", "meta_warmstart", "=", "meta_warmstart", "\n", "self", ".", "meta_feature_scaler", "=", "None", "\n", "self", ".", "dataset_metafeature", "=", "dataset_metafeature", "\n", "self", ".", "init_num", "=", "initial_runs", "\n", "self", ".", "max_iterations", "=", "max_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.load_runhistory": [[128, 144], ["os.path.join", "pkl.load.keys", "list", "open", "pickle.load", "tlbo_optimizer.get_metafeature_vector", "list.append", "open", "pickle.load", "collections.OrderedDict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tlbo_optimizer.get_metafeature_vector", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["self", ".", "sls_max_steps", "=", "1000", "\n", "self", ".", "sls_n_steps_plateau_walk", "=", "10", "\n", "self", ".", "time_limit_per_trial", "=", "time_limit_per_trial", "\n", "self", ".", "default_obj_value", "=", "MAXINT", "\n", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "_", ",", "rng", "=", "get_rng", "(", ")", "\n", "", "self", ".", "rng", "=", "rng", "\n", "\n", "self", ".", "configurations", "=", "list", "(", ")", "\n", "self", ".", "failed_configurations", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "\n", "# Initialize the basic component in BO.", "\n", "self", ".", "objective_function", "=", "objective_function", "\n", "seed", "=", "rng", ".", "randint", "(", "MAXINT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.smac_optimizer.SMACOptimizer.__init__": [[10, 59], ["mindware.components.optimizers.base_optimizer.BaseOptimizer.__init__", "list", "list", "dict", "float", "smac_optimizer.SMACOptimizer.config_space.get_default_configuration", "len", "smac_optimizer.SMACOptimizer.logger.debug", "min", "openbox.optimizer.generic_smbo.SMBO", "openbox.optimizer.parallel_smbo.pSMBO", "smac_optimizer.SMACOptimizer.config_space.get_hyperparameters", "int", "len", "int", "int", "set", "smac_optimizer.SMACOptimizer.config_space.sample_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", ",", "time_limit", "=", "None", ",", "evaluation_limit", "=", "None", ",", "\n", "per_run_time_limit", "=", "300", ",", "per_run_mem_limit", "=", "1024", ",", "output_dir", "=", "'./'", ",", "timestamp", "=", "None", ",", "\n", "inner_iter_num_per_iter", "=", "1", ",", "seed", "=", "1", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", "=", "eval_type", ",", "timestamp", "=", "timestamp", ",", "output_dir", "=", "output_dir", ",", "\n", "seed", "=", "seed", ")", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "evaluation_num_limit", "=", "evaluation_limit", "\n", "self", ".", "inner_iter_num_per_iter", "=", "inner_iter_num_per_iter", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "per_run_mem_limit", "=", "per_run_mem_limit", "\n", "\n", "if", "n_jobs", "==", "1", ":", "\n", "            ", "self", ".", "optimizer", "=", "BO", "(", "objective_function", "=", "self", ".", "evaluator", ",", "\n", "config_space", "=", "config_space", ",", "\n", "surrogate_type", "=", "'prf'", ",", "\n", "acq_type", "=", "'ei'", ",", "\n", "max_runs", "=", "int", "(", "1e10", ")", ",", "\n", "task_id", "=", "'Default'", ",", "\n", "time_limit_per_trial", "=", "self", ".", "per_run_time_limit", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "", "else", ":", "\n", "# TODO: Potential read-write conflict on history file.", "\n", "            ", "self", ".", "optimizer", "=", "pBO", "(", "objective_function", "=", "self", ".", "evaluator", ",", "\n", "config_space", "=", "config_space", ",", "\n", "batch_size", "=", "n_jobs", ",", "\n", "surrogate_type", "=", "'prf'", ",", "\n", "acq_type", "=", "'ei'", ",", "\n", "max_runs", "=", "int", "(", "1e10", ")", ",", "\n", "task_id", "=", "'Default'", ",", "\n", "time_limit_per_trial", "=", "self", ".", "per_run_time_limit", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "\n", "", "self", ".", "trial_cnt", "=", "0", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "exp_output", "=", "dict", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "# Estimate the size of the hyperparameter space.", "\n", "hp_num", "=", "len", "(", "self", ".", "config_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "if", "hp_num", "==", "0", ":", "\n", "            ", "self", ".", "config_num_threshold", "=", "0", "\n", "", "else", ":", "\n", "            ", "_threshold", "=", "int", "(", "len", "(", "set", "(", "self", ".", "config_space", ".", "sample_configuration", "(", "5000", ")", ")", ")", ")", "\n", "self", ".", "config_num_threshold", "=", "_threshold", "\n", "", "self", ".", "logger", ".", "debug", "(", "'The maximum trial number in HPO is: %d'", "%", "self", ".", "config_num_threshold", ")", "\n", "self", ".", "maximum_config_num", "=", "min", "(", "1500", ",", "self", ".", "config_num_threshold", ")", "\n", "self", ".", "eval_dict", "=", "{", "}", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.smac_optimizer.SMACOptimizer.run": [[60, 69], ["numpy.max", "len", "smac_optimizer.SMACOptimizer.iterate", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "evaluation_num", "=", "len", "(", "self", ".", "perfs", ")", "\n", "if", "self", ".", "evaluation_num_limit", "is", "not", "None", "and", "evaluation_num", ">", "self", ".", "evaluation_num_limit", ":", "\n", "                ", "break", "\n", "", "if", "self", ".", "time_limit", "is", "not", "None", "and", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ">", "self", ".", "time_limit", ":", "\n", "                ", "break", "\n", "", "self", ".", "iterate", "(", ")", "\n", "", "return", "np", ".", "max", "(", "self", ".", "perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.smac_optimizer.SMACOptimizer.iterate": [[70, 134], ["time.time", "smac_optimizer.SMACOptimizer.optimizer.get_history", "print", "range", "hasattr", "hasattr", "len", "time.time", "len", "smac_optimizer.SMACOptimizer.optimizer.iterate", "smac_optimizer.SMACOptimizer.update_saver", "len", "smac_optimizer.SMACOptimizer.logger.warning", "smac_optimizer.SMACOptimizer.get_incumbents", "smac_optimizer.SMACOptimizer.get_incumbents", "len", "smac_optimizer.SMACOptimizer.logger.warning", "smac_optimizer.SMACOptimizer.logger.warning", "smac_optimizer.SMACOptimizer.configs.append", "smac_optimizer.SMACOptimizer.perfs.append", "smac_optimizer.SMACOptimizer.logger.warning", "smac_optimizer.SMACOptimizer.optimizer.async_iterate", "smac_optimizer.SMACOptimizer.update_saver", "enumerate", "time.time", "enumerate", "time.time", "enumerate", "time.time", "time.time", "time.time", "smac_optimizer.SMACOptimizer.configs.append", "smac_optimizer.SMACOptimizer.perfs.append", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_history", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver"], ["", "def", "iterate", "(", "self", ",", "budget", "=", "MAX_INT", ")", ":", "\n", "        ", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "configs", ")", "==", "0", "and", "self", ".", "init_hpo_iter_num", "is", "not", "None", ":", "\n", "            ", "inner_iter_num", "=", "self", ".", "init_hpo_iter_num", "\n", "print", "(", "'initial hpo trial num is set to %d'", "%", "inner_iter_num", ")", "\n", "", "else", ":", "\n", "            ", "inner_iter_num", "=", "self", ".", "inner_iter_num_per_iter", "\n", "\n", "", "if", "self", ".", "n_jobs", "==", "1", ":", "\n", "            ", "for", "_", "in", "range", "(", "inner_iter_num", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "configs", ")", ">=", "self", ".", "maximum_config_num", ":", "\n", "                    ", "self", ".", "early_stopped_flag", "=", "True", "\n", "self", ".", "logger", ".", "warning", "(", "'Already explored 70 percentage of the '", "\n", "'hyperspace or maximum configuration number met: %d!'", "%", "self", ".", "maximum_config_num", ")", "\n", "break", "\n", "", "if", "time", ".", "time", "(", ")", "-", "_start_time", ">", "budget", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "'Time limit exceeded!'", ")", "\n", "break", "\n", "", "_config", ",", "_status", ",", "_", ",", "_perf", "=", "self", ".", "optimizer", ".", "iterate", "(", ")", "\n", "self", ".", "update_saver", "(", "[", "_config", "]", ",", "[", "_perf", "[", "0", "]", "]", ")", "\n", "if", "_status", "==", "SUCCESS", ":", "\n", "                    ", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "_config", ",", "_perf", "[", "0", "]", ")", "\n", "self", ".", "configs", ".", "append", "(", "_config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "-", "_perf", "[", "0", "]", ")", "\n", "", "", "", "else", ":", "\n", "# TODO: Cannot early stop if time elapsed since OpenBox does't support time_limit so far.", "\n", "            ", "if", "len", "(", "self", ".", "configs", ")", ">=", "self", ".", "maximum_config_num", ":", "\n", "                ", "self", ".", "early_stopped_flag", "=", "True", "\n", "self", ".", "logger", ".", "warning", "(", "'Already explored 70 percentage of the '", "\n", "'hyperspace or maximum configuration number met: %d!'", "%", "self", ".", "maximum_config_num", ")", "\n", "", "elif", "time", ".", "time", "(", ")", "-", "_start_time", ">", "budget", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "'Time limit exceeded!'", ")", "\n", "", "else", ":", "\n", "                ", "_config_list", ",", "_status_list", ",", "_", ",", "_perf_list", "=", "self", ".", "optimizer", ".", "async_iterate", "(", "n", "=", "inner_iter_num", ")", "\n", "self", ".", "update_saver", "(", "_config_list", ",", "_perf_list", ")", "\n", "for", "i", ",", "_config", "in", "enumerate", "(", "_config_list", ")", ":", "\n", "                    ", "if", "_status_list", "[", "i", "]", "==", "SUCCESS", ":", "\n", "                        ", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "_config", ",", "_perf_list", "[", "i", "]", ")", "\n", "self", ".", "configs", ".", "append", "(", "_config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "-", "_perf_list", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "runhistory", "=", "self", ".", "optimizer", ".", "get_history", "(", ")", "\n", "if", "self", ".", "name", "==", "'hpo'", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'fe_config'", ")", ":", "\n", "                ", "fe_config", "=", "self", ".", "evaluator", ".", "fe_config", "\n", "", "else", ":", "\n", "                ", "fe_config", "=", "None", "\n", "", "self", ".", "eval_dict", "=", "{", "(", "fe_config", ",", "hpo_config", ")", ":", "[", "-", "runhistory", ".", "perfs", "[", "i", "]", ",", "time", ".", "time", "(", ")", ",", "runhistory", ".", "trial_states", "[", "i", "]", "]", "\n", "for", "i", ",", "hpo_config", "in", "enumerate", "(", "runhistory", ".", "configurations", ")", "}", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'hpo_config'", ")", ":", "\n", "                ", "hpo_config", "=", "self", ".", "evaluator", ".", "hpo_config", "\n", "", "else", ":", "\n", "                ", "hpo_config", "=", "None", "\n", "", "self", ".", "eval_dict", "=", "{", "(", "fe_config", ",", "hpo_config", ")", ":", "[", "-", "runhistory", ".", "perfs", "[", "i", "]", ",", "time", ".", "time", "(", ")", ",", "runhistory", ".", "trial_states", "[", "i", "]", "]", "\n", "for", "i", ",", "fe_config", "in", "enumerate", "(", "runhistory", ".", "configurations", ")", "}", "\n", "\n", "", "if", "len", "(", "runhistory", ".", "get_incumbents", "(", ")", ")", ">", "0", ":", "\n", "            ", "self", ".", "incumbent_config", ",", "self", ".", "incumbent_perf", "=", "runhistory", ".", "get_incumbents", "(", ")", "[", "0", "]", "\n", "self", ".", "incumbent_perf", "=", "-", "self", ".", "incumbent_perf", "\n", "", "iteration_cost", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "# incumbent_perf: the large the better", "\n", "return", "self", ".", "incumbent_perf", ",", "iteration_cost", ",", "self", ".", "incumbent_config", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.mfse_optimizer.MfseOptimizer.__init__": [[11, 26], ["mindware.components.optimizers.base_optimizer.BaseOptimizer.__init__", "mindware.components.optimizers.base.mfsebase.MfseBase.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", ",", "time_limit", "=", "None", ",", "evaluation_limit", "=", "None", ",", "\n", "per_run_time_limit", "=", "600", ",", "per_run_mem_limit", "=", "1024", ",", "output_dir", "=", "'./'", ",", "timestamp", "=", "None", ",", "\n", "inner_iter_num_per_iter", "=", "1", ",", "seed", "=", "1", ",", "R", "=", "27", ",", "eta", "=", "3", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "BaseOptimizer", ".", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", "=", "eval_type", ",", "timestamp", "=", "timestamp", ",", "\n", "output_dir", "=", "output_dir", ",", "seed", "=", "seed", ")", "\n", "MfseBase", ".", "__init__", "(", "self", ",", "eval_func", "=", "self", ".", "evaluator", ",", "config_space", "=", "self", ".", "config_space", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "seed", "=", "seed", ",", "\n", "R", "=", "R", ",", "eta", "=", "eta", ",", "n_jobs", "=", "n_jobs", ",", "output_dir", "=", "output_dir", ")", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "evaluation_num_limit", "=", "evaluation_limit", "\n", "\n", "# TODO: Specify!", "\n", "self", ".", "inner_iter_num_per_iter", "=", "5", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "per_run_mem_limit", "=", "per_run_mem_limit", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.mfse_optimizer.MfseOptimizer.iterate": [[27, 83], ["time.time", "range", "mfse_optimizer.MfseOptimizer._iterate", "mfse_optimizer.MfseOptimizer.update_saver", "len", "numpy.argmin", "range", "time.time", "time.time", "os.listdir", "numpy.array", "len", "hasattr", "hasattr", "time.time", "time.time", "os.path.join", "os.remove", "numpy.isinf", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer._iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver"], ["", "def", "iterate", "(", "self", ",", "budget", "=", "MAX_INT", ")", ":", "\n", "        ", "'''\n            Iterate a SH procedure (inner loop) in Hyperband.\n        :return:\n        '''", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "inner_iter_num_per_iter", ")", ":", "\n", "            ", "_time_elapsed", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "if", "_time_elapsed", ">=", "budget", ":", "\n", "                ", "break", "\n", "", "budget_left", "=", "budget", "-", "_time_elapsed", "\n", "config_list", ",", "perf_list", "=", "self", ".", "_iterate", "(", "self", ".", "s_values", "[", "self", ".", "inner_iter_id", "]", ",", "budget", "=", "budget_left", ")", "\n", "self", ".", "update_saver", "(", "config_list", ",", "perf_list", ")", "\n", "self", ".", "inner_iter_id", "=", "(", "self", ".", "inner_iter_id", "+", "1", ")", "%", "(", "self", ".", "s_max", "+", "1", ")", "\n", "\n", "# Remove tmp model", "\n", "if", "self", ".", "evaluator", ".", "continue_training", ":", "\n", "                ", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "evaluator", ".", "model_dir", ")", ":", "\n", "# Temporary model", "\n", "                    ", "if", "'tmp_%s'", "%", "self", ".", "evaluator", ".", "timestamp", "in", "filename", ":", "\n", "                        ", "try", ":", "\n", "                            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "evaluator", ".", "model_dir", ",", "filename", ")", "\n", "os", ".", "remove", "(", "filepath", ")", "\n", "", "except", "Exception", ":", "\n", "                            ", "pass", "\n", "\n", "", "", "", "", "", "if", "len", "(", "self", ".", "incumbent_perfs", ")", ">", "0", ":", "\n", "            ", "inc_idx", "=", "np", ".", "argmin", "(", "np", ".", "array", "(", "self", ".", "incumbent_perfs", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "incumbent_perfs", ")", ")", ":", "\n", "                ", "if", "self", ".", "name", "==", "'hpo'", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'fe_config'", ")", ":", "\n", "                        ", "fe_config", "=", "self", ".", "evaluator", ".", "fe_config", "\n", "", "else", ":", "\n", "                        ", "fe_config", "=", "None", "\n", "", "self", ".", "eval_dict", "[", "(", "fe_config", ",", "self", ".", "incumbent_configs", "[", "idx", "]", ")", "]", "=", "[", "-", "self", ".", "incumbent_perfs", "[", "idx", "]", ",", "\n", "time", ".", "time", "(", ")", ",", "FAILED", "if", "np", ".", "isinf", "(", "\n", "self", ".", "incumbent_perfs", "[", "idx", "]", ")", "else", "SUCCESS", "]", "\n", "", "else", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'hpo_config'", ")", ":", "\n", "                        ", "hpo_config", "=", "self", ".", "evaluator", ".", "hpo_config", "\n", "", "else", ":", "\n", "                        ", "hpo_config", "=", "None", "\n", "", "self", ".", "eval_dict", "[", "(", "self", ".", "incumbent_configs", "[", "idx", "]", ",", "hpo_config", ")", "]", "=", "[", "-", "self", ".", "incumbent_perfs", "[", "idx", "]", ",", "\n", "time", ".", "time", "(", ")", ",", "FAILED", "if", "np", ".", "isinf", "(", "\n", "self", ".", "incumbent_perfs", "[", "idx", "]", ")", "else", "SUCCESS", "]", "\n", "\n", "", "", "self", ".", "incumbent_perf", "=", "-", "self", ".", "incumbent_perfs", "[", "inc_idx", "]", "\n", "self", ".", "incumbent_config", "=", "self", ".", "incumbent_configs", "[", "inc_idx", "]", "\n", "\n", "", "self", ".", "perfs", "=", "self", ".", "incumbent_perfs", "\n", "self", ".", "configs", "=", "self", ".", "incumbent_configs", "\n", "\n", "# Incumbent performance: the large, the better.", "\n", "iteration_cost", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "return", "self", ".", "incumbent_perf", ",", "iteration_cost", ",", "self", ".", "incumbent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.mfse_optimizer.MfseOptimizer.get_evaluation_stats": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_evaluation_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "evaluation_stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.__init__": [[13, 30], ["time.time", "list", "mindware.utils.logging_utils.get_logger", "mindware.components.utils.topk_saver.CombinedTopKModelSaver", "numpy.random.random_integers"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ":", "_BaseEvaluator", ",", "config_space", ",", "name", ",", "timestamp", ",", "eval_type", ",", "output_dir", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "evaluator", "\n", "self", ".", "config_space", "=", "config_space", "\n", "\n", "assert", "name", "in", "[", "'hpo'", ",", "'fe'", "]", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "seed", "=", "np", ".", "random", ".", "random_integers", "(", "MAX_INT", ")", "if", "seed", "is", "None", "else", "seed", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "timing_list", "=", "list", "(", ")", "\n", "self", ".", "incumbent", "=", "None", "\n", "self", ".", "eval_type", "=", "eval_type", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "init_hpo_iter_num", "=", "None", "\n", "self", ".", "early_stopped_flag", "=", "False", "\n", "self", ".", "timestamp", "=", "timestamp", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "topk_saver", "=", "CombinedTopKModelSaver", "(", "k", "=", "50", ",", "model_dir", "=", "self", ".", "output_dir", ",", "identifier", "=", "self", ".", "timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.run": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.iterate": [[35, 38], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "iterate", "(", "self", ",", "budget", "=", "MAX_INT", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver": [[40, 82], ["enumerate", "base_optimizer.BaseOptimizer.topk_saver.save_topk_config", "numpy.isfinite", "base_optimizer.BaseOptimizer.topk_saver.add", "isinstance", "config_list[].get_dictionary().copy", "config_list[].copy", "config_list[].copy.update", "isinstance", "base_optimizer.BaseOptimizer.evaluator.fixed_config.get_dictionary().copy", "base_optimizer.BaseOptimizer.evaluator.fixed_config.copy", "os.remove", "base_optimizer.BaseOptimizer.logger.info", "config_list[].get_dictionary", "os.remove", "base_optimizer.BaseOptimizer.logger.info", "base_optimizer.BaseOptimizer.evaluator.fixed_config.get_dictionary"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.BaseTopKModelSaver.save_topk_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "update_saver", "(", "self", ",", "config_list", ",", "perf_list", ")", ":", "\n", "# Check if all the configs is valid in case of storing None into the config file", "\n", "        ", "all_invalid", "=", "True", "\n", "\n", "for", "i", ",", "perf", "in", "enumerate", "(", "perf_list", ")", ":", "\n", "            ", "if", "np", ".", "isfinite", "(", "perf", ")", "and", "perf", "!=", "MAX_INT", ":", "\n", "                ", "all_invalid", "=", "False", "\n", "if", "not", "isinstance", "(", "config_list", "[", "i", "]", ",", "dict", ")", ":", "\n", "                    ", "config", "=", "config_list", "[", "i", "]", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "config", "=", "config_list", "[", "i", "]", ".", "copy", "(", ")", "\n", "", "if", "self", ".", "evaluator", ".", "fixed_config", "is", "not", "None", ":", "\n", "                    ", "if", "not", "isinstance", "(", "self", ".", "evaluator", ".", "fixed_config", ",", "dict", ")", ":", "\n", "                        ", "fixed_config", "=", "self", ".", "evaluator", ".", "fixed_config", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                        ", "fixed_config", "=", "self", ".", "evaluator", ".", "fixed_config", ".", "copy", "(", ")", "\n", "", "config", ".", "update", "(", "fixed_config", ")", "\n", "", "classifier_id", "=", "config", "[", "'algorithm'", "]", "\n", "# -perf: The larger, the better.", "\n", "save_flag", ",", "model_path", ",", "delete_flag", ",", "model_path_deleted", "=", "self", ".", "topk_saver", ".", "add", "(", "config", ",", "-", "perf", ",", "\n", "classifier_id", ")", "\n", "# By default, the evaluator has already stored the models.", "\n", "if", "self", ".", "eval_type", "in", "[", "'holdout'", ",", "'partial'", "]", ":", "\n", "                    ", "if", "save_flag", ":", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "os", ".", "remove", "(", "model_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Model deleted from %s\"", "%", "model_path", ")", "\n", "\n", "", "try", ":", "\n", "                        ", "if", "delete_flag", ":", "\n", "                            ", "os", ".", "remove", "(", "model_path_deleted", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Model deleted from %s\"", "%", "model_path_deleted", ")", "\n", "", "else", ":", "\n", "                            ", "pass", "\n", "", "", "except", ":", "\n", "                        ", "pass", "\n", "", "", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "if", "not", "all_invalid", ":", "\n", "            ", "self", ".", "topk_saver", ".", "save_topk_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.get_evaluation_stats": [[83, 85], ["None"], "methods", ["None"], ["", "", "def", "get_evaluation_stats", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.gc": [[86, 88], ["None"], "methods", ["None"], ["", "def", "gc", "(", "self", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.__init__": [[23, 65], ["int", "mindware.utils.logging_utils.get_logger", "dict", "dict", "dict", "dict", "dict", "dict", "cashp_optimizer.CashpOptimizer.logeta", "math.log", "math.log", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["    ", "def", "__init__", "(", "self", ",", "task_type", ",", "architectures", ",", "time_limit", ",", "sampling_strategy", "=", "'uniform'", ",", "\n", "R", "=", "27", ",", "eta", "=", "3", ",", "N", "=", "9", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "architectures", "=", "architectures", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "R", "=", "R", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "logeta", "=", "lambda", "x", ":", "log", "(", "x", ")", "/", "log", "(", "self", ".", "eta", ")", "\n", "self", ".", "s_max", "=", "int", "(", "self", ".", "logeta", "(", "self", ".", "R", ")", ")", "\n", "self", ".", "sampling_strategy", "=", "sampling_strategy", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "from", "mindware", ".", "components", ".", "models", ".", "img_classification", "import", "_classifiers", "as", "_img_estimators", ",", "_addons", "as", "_img_addons", "\n", "from", "mindware", ".", "components", ".", "models", ".", "text_classification", "import", "_classifiers", "as", "_text_estimators", ",", "_addons", "as", "_text_addons", "\n", "from", "mindware", ".", "components", ".", "models", ".", "object_detection", "import", "_classifiers", "as", "_od_estimators", ",", "_addons", "as", "_od_addons", "\n", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "elimination_strategy", "=", "'bandit'", "\n", "# Runtime stats.", "\n", "self", ".", "evaluation_stats", "=", "dict", "(", ")", "\n", "\n", "self", ".", "update_cs", "=", "dict", "(", ")", "\n", "\n", "if", "task_type", "==", "IMG_CLS", ":", "\n", "            ", "self", ".", "_estimators", "=", "_img_estimators", "\n", "self", ".", "_addons", "=", "_img_addons", "\n", "", "elif", "task_type", "==", "TEXT_CLS", ":", "\n", "            ", "self", ".", "_estimators", "=", "_text_estimators", "\n", "self", ".", "_addons", "=", "_text_addons", "\n", "", "elif", "task_type", "==", "OBJECT_DET", ":", "\n", "            ", "self", ".", "_estimators", "=", "_od_estimators", "\n", "self", ".", "_addons", "=", "_od_addons", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown task type %s\"", "%", "task_type", ")", "\n", "", "self", ".", "eval_hist_configs", "=", "dict", "(", ")", "\n", "self", ".", "eval_hist_perfs", "=", "dict", "(", ")", "\n", "\n", "self", ".", "tpe_config_gen", "=", "dict", "(", ")", "\n", "self", ".", "mfse_config_gen", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.get_model_config_space": [[66, 102], ["clf_class.get_hyperparameter_search_space", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "cashp_optimizer.CashpOptimizer.update_cs.get", "cashp_optimizer.CashpOptimizer.get_hyperparameter_names", "cashp_optimizer.CashpOptimizer.update_cs.get", "cashp_optimizer.CashpOptimizer.get_hyperparameter_names", "ConfigSpace.ConfigurationSpace", "clf_class.get_hyperparameter_search_space.get_hyperparameter_names", "clf_class.get_hyperparameter_search_space.get_conditions", "ConfigSpace.ConfigurationSpace.add_conditions", "clf_class.get_hyperparameter_search_space.add_hyperparameter", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space", "clf_class.get_hyperparameter_search_space.add_hyperparameters", "clf_class.get_hyperparameter_search_space.add_conditions", "ConfigSpace.ConfigurationSpace", "ConfigSpace.ConfigurationSpace", "ValueError", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space.get_hyperparameters", "mindware.components.models.img_classification.nn_utils.nn_aug.aug_hp_space.get_aug_hyperparameter_space.get_conditions", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "cashp_optimizer.CashpOptimizer.get_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "cashp_optimizer.CashpOptimizer.get_hyperparameter", "clf_class.get_hyperparameter_search_space.get_hyperparameter"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space"], ["", "def", "get_model_config_space", "(", "self", ",", "estimator_id", ",", "include_estimator", "=", "True", ",", "include_aug", "=", "True", ")", ":", "\n", "        ", "if", "estimator_id", "in", "self", ".", "_estimators", ":", "\n", "            ", "clf_class", "=", "self", ".", "_estimators", "[", "estimator_id", "]", "\n", "", "elif", "estimator_id", "in", "self", ".", "_addons", ".", "components", ":", "\n", "            ", "clf_class", "=", "self", ".", "_addons", ".", "components", "[", "estimator_id", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Algorithm %s not supported!\"", "%", "estimator_id", ")", "\n", "\n", "", "default_cs", "=", "clf_class", ".", "get_hyperparameter_search_space", "(", ")", "\n", "model", "=", "UnParametrizedHyperparameter", "(", "\"estimator\"", ",", "estimator_id", ")", "\n", "if", "include_estimator", ":", "\n", "            ", "default_cs", ".", "add_hyperparameter", "(", "model", ")", "\n", "", "if", "self", ".", "task_type", "==", "IMG_CLS", "and", "include_aug", "is", "True", ":", "\n", "            ", "aug_space", "=", "get_aug_hyperparameter_space", "(", ")", "\n", "default_cs", ".", "add_hyperparameters", "(", "aug_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "default_cs", ".", "add_conditions", "(", "aug_space", ".", "get_conditions", "(", ")", ")", "\n", "\n", "# Update configuration space according to config file", "\n", "", "all_cs", "=", "self", ".", "update_cs", ".", "get", "(", "'all'", ",", "ConfigurationSpace", "(", ")", ")", "\n", "all_hp_names", "=", "all_cs", ".", "get_hyperparameter_names", "(", ")", "\n", "estimator_cs", "=", "self", ".", "update_cs", ".", "get", "(", "estimator_id", ",", "ConfigurationSpace", "(", ")", ")", "\n", "estimator_hp_names", "=", "estimator_cs", ".", "get_hyperparameter_names", "(", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "for", "hp_name", "in", "default_cs", ".", "get_hyperparameter_names", "(", ")", ":", "\n", "            ", "if", "hp_name", "in", "estimator_hp_names", ":", "\n", "                ", "cs", ".", "add_hyperparameter", "(", "estimator_cs", ".", "get_hyperparameter", "(", "hp_name", ")", ")", "\n", "", "elif", "hp_name", "in", "all_hp_names", ":", "\n", "                ", "cs", ".", "add_hyperparameter", "(", "all_cs", ".", "get_hyperparameter", "(", "hp_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "cs", ".", "add_hyperparameter", "(", "default_cs", ".", "get_hyperparameter", "(", "hp_name", ")", ")", "\n", "\n", "", "", "cond", "=", "default_cs", ".", "get_conditions", "(", ")", "\n", "cs", ".", "add_conditions", "(", "cond", ")", "\n", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.sample_configs_for_archs": [[103, 179], ["list", "cashp_optimizer.CashpOptimizer.get_model_config_space", "list.append", "list.extend", "cashp_optimizer.CashpOptimizer.get_default_configuration", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "list", "range", "dict", "numpy.argmin", "[].update", "[].maximize", "range", "mindware.components.transfer_learning.tlbo.models.kde.TPE", "[].maximize.append", "list.append", "mindware.components.optimizers.base.funcs.get_types", "dict", "mindware.components.optimizers.base.prob_rf_cluster.WeightedRandomForestCluster", "mindware.components.optimizers.base.acquisition.EI", "mindware.components.optimizers.base.acq_optimizer.RandomSampling", "list.extend", "[].predict", "candidates.append", "cashp_optimizer.CashpOptimizer.tpe_config_gen[].get_config", "random.random", "len", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "mindware.components.optimizers.base.config_space_utils.convert_configurations_to_array", "random.random", "mindware.components.optimizers.base.config_space_utils.sample_configurations", "numpy.random.RandomState", "mindware.components.optimizers.base.config_space_utils.sample_configurations"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.get_model_config_space", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acq_optimizer.RandomSampling.maximize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.get_types", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.get_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.sample_configurations"], ["", "def", "sample_configs_for_archs", "(", "self", ",", "include_architectures", ",", "N", ",", "sampling_strategy", "=", "'uniform'", ")", ":", "\n", "        ", "configs", "=", "list", "(", ")", "\n", "for", "_arch", "in", "include_architectures", ":", "\n", "            ", "_cs", "=", "self", ".", "get_model_config_space", "(", "_arch", ")", "\n", "if", "sampling_strategy", "==", "'uniform'", ":", "\n", "                ", "configs", ".", "append", "(", "_cs", ".", "get_default_configuration", "(", ")", ")", "\n", "configs", ".", "extend", "(", "sample_configurations", "(", "_cs", ",", "N", "-", "1", ")", ")", "\n", "\n", "", "elif", "sampling_strategy", "==", "'bohb'", ":", "\n", "                ", "if", "_arch", "not", "in", "self", ".", "tpe_config_gen", ":", "\n", "                    ", "self", ".", "tpe_config_gen", "[", "_arch", "]", "=", "TPE", "(", "_cs", ")", "\n", "", "config_candidates", "=", "list", "(", ")", "\n", "\n", "config_left", "=", "N", "\n", "while", "config_left", ":", "\n", "                    ", "config", "=", "self", ".", "tpe_config_gen", "[", "_arch", "]", ".", "get_config", "(", ")", "[", "0", "]", "\n", "if", "config", "in", "config_candidates", ":", "\n", "                        ", "continue", "\n", "", "config_candidates", ".", "append", "(", "config", ")", "\n", "config_left", "-=", "1", "\n", "\n", "", "p_threshold", "=", "0.3", "\n", "idx_acq", "=", "0", "\n", "for", "_id", "in", "range", "(", "N", ")", ":", "\n", "                    ", "if", "rd", ".", "random", "(", ")", "<", "p_threshold", ":", "\n", "                        ", "config", "=", "sample_configurations", "(", "_cs", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "config", "=", "config_candidates", "[", "idx_acq", "]", "\n", "idx_acq", "+=", "1", "\n", "", "configs", ".", "append", "(", "config", ")", "\n", "\n", "", "", "else", ":", "# mfse", "\n", "                ", "if", "_arch", "not", "in", "self", ".", "mfse_config_gen", ":", "\n", "                    ", "types", ",", "bounds", "=", "get_types", "(", "_cs", ")", "\n", "init_weight", "=", "[", "1.", "/", "self", ".", "s_max", "]", "*", "self", ".", "s_max", "+", "[", "0.", "]", "\n", "self", ".", "mfse_config_gen", "[", "_arch", "]", "=", "dict", "(", ")", "\n", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'surrogate'", "]", "=", "WeightedRandomForestCluster", "(", "types", ",", "bounds", ",", "self", ".", "s_max", ",", "\n", "self", ".", "eta", ",", "init_weight", ",", "\n", "'gpoe'", ")", "\n", "acq_func", "=", "EI", "(", "model", "=", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'surrogate'", "]", ")", "\n", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'acq_optimizer'", "]", "=", "RandomSampling", "(", "acq_func", ",", "_cs", ",", "\n", "n_samples", "=", "2000", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "1", ")", ")", "\n", "", "if", "self", ".", "R", "not", "in", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "or", "len", "(", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "[", "self", ".", "R", "]", ")", "==", "0", ":", "\n", "                    ", "configs", ".", "extend", "(", "sample_configurations", "(", "_cs", ",", "N", ")", ")", "\n", "continue", "\n", "\n", "", "incumbent", "=", "dict", "(", ")", "\n", "max_r", "=", "self", ".", "R", "\n", "# The lower, the better.", "\n", "best_index", "=", "np", ".", "argmin", "(", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "[", "max_r", "]", ")", "\n", "incumbent", "[", "'config'", "]", "=", "self", ".", "eval_hist_configs", "[", "_arch", "]", "[", "max_r", "]", "[", "best_index", "]", "\n", "approximate_obj", "=", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'surrogate'", "]", ".", "predict", "(", "\n", "convert_configurations_to_array", "(", "[", "incumbent", "[", "'config'", "]", "]", ")", ")", "[", "0", "]", "\n", "incumbent", "[", "'obj'", "]", "=", "approximate_obj", "\n", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'acq_optimizer'", "]", ".", "update", "(", "model", "=", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'surrogate'", "]", ",", "\n", "eta", "=", "incumbent", ")", "\n", "\n", "config_candidates", "=", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'acq_optimizer'", "]", ".", "maximize", "(", "batch_size", "=", "N", ")", "\n", "p_threshold", "=", "0.3", "\n", "n_acq", "=", "self", ".", "eta", "*", "self", ".", "eta", "\n", "\n", "if", "N", "<=", "n_acq", ":", "\n", "                    ", "return", "config_candidates", "\n", "\n", "", "candidates", "=", "config_candidates", "[", ":", "n_acq", "]", "\n", "idx_acq", "=", "n_acq", "\n", "for", "_id", "in", "range", "(", "N", "-", "n_acq", ")", ":", "\n", "                    ", "if", "rd", ".", "random", "(", ")", "<", "p_threshold", ":", "\n", "                        ", "config", "=", "sample_configurations", "(", "_cs", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "config", "=", "config_candidates", "[", "idx_acq", "]", "\n", "idx_acq", "+=", "1", "\n", "", "candidates", ".", "append", "(", "config", ")", "\n", "", "return", "candidates", "\n", "", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.run": [[187, 300], ["time.time", "cashp_optimizer.CashpOptimizer.architectures.copy", "list", "list", "dict", "dict", "mindware.components.computation.parallel_process.ParallelProcessEvaluator", "cashp_optimizer.CashpOptimizer.sample_configs_for_archs", "print", "print", "print", "cashp_optimizer.CashpOptimizer.logger.info", "cashp_optimizer.CashpOptimizer.logger.info", "cashp_optimizer.CashpOptimizer.logger.info", "time.time", "cashp_optimizer.CashpOptimizer.logger.info", "os.listdir", "list", "executor.parallel_execute", "enumerate", "list", "numpy.argsort", "reduced_archs.append", "len", "list", "list", "numpy.isfinite", "dl_evaluator", "list.append", "numpy.isfinite", "enumerate", "len", "int", "cashp_optimizer.CashpOptimizer.query_performance", "numpy.min", "numpy.argsort", "len", "float", "[].append", "[].append", "cashp_optimizer.CashpOptimizer.evaluation_stats[].append", "cashp_optimizer.CashpOptimizer.evaluation_stats[].append", "[].append", "[].append", "cashp_optimizer.CashpOptimizer.evaluation_stats[].append", "cashp_optimizer.CashpOptimizer.evaluation_stats[].append", "numpy.isfinite", "mindware.components.optimizers.base.funcs.std_normalization", "[].train", "os.path.join", "os.remove", "float", "time.time", "cashp_optimizer.CashpOptimizer.tpe_config_gen[].new_result", "len", "mindware.components.optimizers.base.config_space_utils.convert_configurations_to_array", "numpy.array", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.sample_configs_for_archs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.computation.parallel_evaluator.ParallelEvaluator.parallel_execute", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.query_performance", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.funcs.std_normalization", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.base_epm.AbstractEPM.train", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.models.kde.TPE.new_result", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.convert_configurations_to_array"], ["def", "run", "(", "self", ",", "dl_evaluator", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "inc_config", ",", "inc_perf", "=", "None", ",", "np", ".", "inf", "\n", "architecture_candidates", "=", "self", ".", "architectures", ".", "copy", "(", ")", "\n", "for", "_arch", "in", "architecture_candidates", ":", "\n", "            ", "self", ".", "eval_hist_configs", "[", "_arch", "]", "=", "dict", "(", ")", "\n", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "=", "dict", "(", ")", "\n", "", "self", ".", "evaluation_stats", "[", "'timestamps'", "]", "=", "list", "(", ")", "\n", "self", ".", "evaluation_stats", "[", "'val_scores'", "]", "=", "list", "(", ")", "\n", "\n", "with", "ParallelProcessEvaluator", "(", "dl_evaluator", ",", "n_worker", "=", "self", ".", "n_jobs", ")", "as", "executor", ":", "\n", "            ", "terminate_proc", "=", "False", "\n", "while", "not", "terminate_proc", ":", "\n", "                ", "r", "=", "1", "\n", "C", "=", "self", ".", "sample_configs_for_archs", "(", "architecture_candidates", ",", "self", ".", "N", ",", "\n", "sampling_strategy", "=", "self", ".", "sampling_strategy", ")", "\n", "while", "r", "<", "self", ".", "R", "or", "(", "r", "==", "self", ".", "R", "and", "len", "(", "architecture_candidates", ")", "==", "1", ")", ":", "\n", "                    ", "for", "_arch", "in", "architecture_candidates", ":", "\n", "                        ", "if", "r", "not", "in", "self", ".", "eval_hist_configs", "[", "_arch", "]", ":", "\n", "                            ", "self", ".", "eval_hist_configs", "[", "_arch", "]", "[", "r", "]", "=", "list", "(", ")", "\n", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "[", "r", "]", "=", "list", "(", ")", "\n", "\n", "", "", "self", ".", "logger", ".", "info", "(", "'Evalutions [r=%d]'", "%", "r", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Start to evaluate %d configurations with %d resource'", "%", "(", "len", "(", "C", ")", ",", "r", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'='", "*", "20", ")", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "_start_time", ">=", "start_time", "+", "self", ".", "time_limit", ":", "\n", "                        ", "terminate_proc", "=", "True", "\n", "break", "\n", "\n", "", "if", "self", ".", "n_jobs", ">", "1", ":", "\n", "                        ", "val_losses", "=", "executor", ".", "parallel_execute", "(", "C", ",", "resource_ratio", "=", "float", "(", "r", "/", "self", ".", "R", ")", ",", "\n", "eta", "=", "self", ".", "eta", ",", "first_iter", "=", "(", "r", "==", "1", ")", ")", "\n", "for", "_id", ",", "val_loss", "in", "enumerate", "(", "val_losses", ")", ":", "\n", "                            ", "if", "np", ".", "isfinite", "(", "val_loss", ")", ":", "\n", "                                ", "_arch", "=", "C", "[", "_id", "]", "[", "'estimator'", "]", "\n", "self", ".", "eval_hist_configs", "[", "_arch", "]", "[", "r", "]", ".", "append", "(", "C", "[", "_id", "]", ")", "\n", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "[", "r", "]", ".", "append", "(", "val_loss", ")", "\n", "self", ".", "evaluation_stats", "[", "'timestamps'", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "self", ".", "evaluation_stats", "[", "'val_scores'", "]", ".", "append", "(", "val_loss", ")", "\n", "", "", "", "else", ":", "\n", "                        ", "val_losses", "=", "list", "(", ")", "\n", "for", "config", "in", "C", ":", "\n", "                            ", "val_loss", "=", "dl_evaluator", "(", "config", ",", "resource_ratio", "=", "float", "(", "r", "/", "self", ".", "R", ")", ",", "\n", "eta", "=", "self", ".", "eta", ",", "first_iter", "=", "(", "r", "==", "1", ")", ")", "\n", "val_losses", ".", "append", "(", "val_loss", ")", "\n", "if", "np", ".", "isfinite", "(", "val_loss", ")", ":", "\n", "                                ", "_arch", "=", "config", "[", "'estimator'", "]", "\n", "self", ".", "eval_hist_configs", "[", "_arch", "]", "[", "r", "]", ".", "append", "(", "config", ")", "\n", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "[", "r", "]", ".", "append", "(", "val_loss", ")", "\n", "self", ".", "evaluation_stats", "[", "'timestamps'", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "self", ".", "evaluation_stats", "[", "'val_scores'", "]", ".", "append", "(", "val_loss", ")", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "'Evaluations [R=%d] took %.2f seconds'", "%", "(", "r", ",", "time", ".", "time", "(", ")", "-", "_start_time", ")", ")", "\n", "\n", "# Train surrogate", "\n", "if", "self", ".", "sampling_strategy", "==", "'bohb'", ":", "\n", "                        ", "if", "r", "==", "self", ".", "R", ":", "\n", "                            ", "for", "i", ",", "_config", "in", "enumerate", "(", "C", ")", ":", "\n", "                                ", "if", "np", ".", "isfinite", "(", "val_losses", "[", "i", "]", ")", ":", "\n", "                                    ", "_arch", "=", "_config", "[", "'estimator'", "]", "\n", "self", ".", "tpe_config_gen", "[", "_arch", "]", ".", "new_result", "(", "_config", ",", "val_losses", "[", "i", "]", ",", "r", ")", "\n", "", "", "", "", "elif", "self", ".", "sampling_strategy", "==", "'mfse'", ":", "\n", "                        ", "for", "_arch", "in", "architecture_candidates", ":", "# Only update surrogate in candidates", "\n", "                            ", "normalized_y", "=", "std_normalization", "(", "self", ".", "eval_hist_perfs", "[", "_arch", "]", "[", "r", "]", ")", "\n", "if", "len", "(", "self", ".", "eval_hist_configs", "[", "_arch", "]", "[", "r", "]", ")", "==", "0", ":", "# No configs for this architecture", "\n", "                                ", "continue", "\n", "", "self", ".", "mfse_config_gen", "[", "_arch", "]", "[", "'surrogate'", "]", ".", "train", "(", "\n", "convert_configurations_to_array", "(", "self", ".", "eval_hist_configs", "[", "_arch", "]", "[", "r", "]", ")", ",", "\n", "np", ".", "array", "(", "normalized_y", ",", "dtype", "=", "np", ".", "float64", ")", ",", "r", "=", "r", ")", "\n", "\n", "", "", "if", "self", ".", "elimination_strategy", "==", "'bandit'", ":", "\n", "                        ", "indices", "=", "np", ".", "argsort", "(", "val_losses", ")", "\n", "if", "len", "(", "C", ")", ">=", "self", ".", "eta", ":", "\n", "                            ", "C", "=", "[", "C", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "reduced_num", "=", "int", "(", "len", "(", "C", ")", "/", "self", ".", "eta", ")", "\n", "C", "=", "C", "[", "0", ":", "reduced_num", "]", "\n", "", "else", ":", "\n", "                            ", "C", "=", "[", "C", "[", "indices", "[", "0", "]", "]", "]", "\n", "\n", "", "", "else", ":", "\n", "                        ", "if", "r", ">", "1", ":", "\n", "                            ", "val_losses_previous_iter", "=", "self", ".", "query_performance", "(", "C", ",", "r", "//", "self", ".", "eta", ")", "\n", "previous_inc_loss", "=", "np", ".", "min", "(", "val_losses_previous_iter", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "val_losses", ")", "\n", "C", "=", "[", "C", "[", "idx", "]", "for", "idx", "in", "indices", "if", "val_losses", "[", "idx", "]", "<", "previous_inc_loss", "]", "\n", "\n", "", "", "if", "inc_perf", ">", "val_losses", "[", "indices", "[", "0", "]", "]", ":", "\n", "                        ", "inc_perf", "=", "val_losses", "[", "indices", "[", "0", "]", "]", "\n", "inc_config", "=", "C", "[", "0", "]", "\n", "", "r", "*=", "self", ".", "eta", "\n", "\n", "# Remove tmp model", "\n", "", "if", "dl_evaluator", ".", "continue_training", ":", "\n", "                    ", "for", "filename", "in", "os", ".", "listdir", "(", "dl_evaluator", ".", "model_dir", ")", ":", "\n", "# Temporary model", "\n", "                        ", "if", "'tmp_%s'", "%", "dl_evaluator", ".", "timestamp", "in", "filename", ":", "\n", "                            ", "try", ":", "\n", "                                ", "filepath", "=", "os", ".", "path", ".", "join", "(", "dl_evaluator", ".", "model_dir", ",", "filename", ")", "\n", "os", ".", "remove", "(", "filepath", ")", "\n", "", "except", "Exception", ":", "\n", "                                ", "pass", "\n", "\n", "", "", "", "", "archs", ",", "reduced_archs", "=", "[", "config", "[", "'estimator'", "]", "for", "config", "in", "C", "]", ",", "list", "(", ")", "\n", "# Preserve the partial-relationship order.", "\n", "for", "_arch", "in", "archs", ":", "\n", "                    ", "if", "_arch", "not", "in", "reduced_archs", ":", "\n", "                        ", "reduced_archs", ".", "append", "(", "_arch", ")", "\n", "\n", "", "", "architecture_candidates", "=", "reduced_archs", "\n", "print", "(", "'='", "*", "20", ")", "\n", "print", "(", "'Reduced architectures:'", ",", "architecture_candidates", ")", "\n", "print", "(", "'='", "*", "20", ")", "\n", "", "", "return", "inc_config", ",", "inc_perf", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.query_performance": [[301, 308], ["list", "[].index", "list.append"], "methods", ["None"], ["", "def", "query_performance", "(", "self", ",", "C", ",", "r", ")", ":", "\n", "        ", "perfs", "=", "list", "(", ")", "\n", "for", "config", "in", "C", ":", "\n", "            ", "arch", "=", "config", "[", "'estimator'", "]", "\n", "idx", "=", "self", ".", "eval_hist_configs", "[", "arch", "]", "[", "r", "]", ".", "index", "(", "config", ")", "\n", "perfs", ".", "append", "(", "self", ".", "eval_hist_perfs", "[", "arch", "]", "[", "r", "]", "[", "idx", "]", ")", "\n", "", "return", "perfs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.cashp_optimizer.CashpOptimizer.get_evaluation_stats": [[309, 311], ["None"], "methods", ["None"], ["", "def", "get_evaluation_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "evaluation_stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.random_search_optimizer.RandomSearchOptimizer.__init__": [[12, 57], ["mindware.components.optimizers.base_optimizer.BaseOptimizer.__init__", "list", "list", "dict", "float", "random_search_optimizer.RandomSearchOptimizer.config_space.get_default_configuration", "len", "random_search_optimizer.RandomSearchOptimizer.logger.debug", "min", "openbox.optimizer.generic_smbo.SMBO", "openbox.optimizer.parallel_smbo.pSMBO", "random_search_optimizer.RandomSearchOptimizer.config_space.get_hyperparameters", "int", "len", "set", "random_search_optimizer.RandomSearchOptimizer.config_space.sample_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", ",", "time_limit", "=", "None", ",", "evaluation_limit", "=", "None", ",", "\n", "per_run_time_limit", "=", "300", ",", "output_dir", "=", "'./'", ",", "timestamp", "=", "None", ",", "\n", "inner_iter_num_per_iter", "=", "1", ",", "seed", "=", "1", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "evaluator", ",", "config_space", ",", "name", ",", "eval_type", "=", "eval_type", ",", "timestamp", "=", "timestamp", ",", "output_dir", "=", "output_dir", ",", "\n", "seed", "=", "seed", ")", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "evaluation_num_limit", "=", "evaluation_limit", "\n", "self", ".", "inner_iter_num_per_iter", "=", "inner_iter_num_per_iter", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "# self.per_run_mem_limit= per_run_mem_limit", "\n", "\n", "if", "n_jobs", "==", "1", ":", "\n", "            ", "self", ".", "optimizer", "=", "RandomSearch", "(", "objective_function", "=", "self", ".", "evaluator", ",", "\n", "config_space", "=", "config_space", ",", "\n", "advisor_type", "=", "'random'", ",", "\n", "task_id", "=", "'Default'", ",", "\n", "time_limit_per_trial", "=", "self", ".", "per_run_time_limit", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "pRandomSearch", "(", "objective_function", "=", "self", ".", "evaluator", ",", "\n", "config_space", "=", "config_space", ",", "\n", "sample_strategy", "=", "'random'", ",", "\n", "batch_size", "=", "n_jobs", ",", "\n", "task_id", "=", "'Default'", ",", "\n", "time_limit_per_trial", "=", "self", ".", "per_run_time_limit", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "\n", "", "self", ".", "trial_cnt", "=", "0", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "exp_output", "=", "dict", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "\n", "hp_num", "=", "len", "(", "self", ".", "config_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "if", "hp_num", "==", "0", ":", "\n", "            ", "self", ".", "config_num_threshold", "=", "0", "\n", "", "else", ":", "\n", "            ", "_threshold", "=", "int", "(", "len", "(", "set", "(", "self", ".", "config_space", ".", "sample_configuration", "(", "5000", ")", ")", ")", ")", "\n", "self", ".", "config_num_threshold", "=", "_threshold", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "\"The maximum trial number in HPO is :%d\"", "%", "self", ".", "config_num_threshold", ")", "\n", "self", ".", "maximum_config_num", "=", "min", "(", "1500", ",", "self", ".", "config_num_threshold", ")", "\n", "self", ".", "eval_dict", "=", "{", "}", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.random_search_optimizer.RandomSearchOptimizer.run": [[58, 67], ["numpy.max", "len", "random_search_optimizer.RandomSearchOptimizer.iterate", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "evaluation_num", "=", "len", "(", "self", ".", "perfs", ")", "\n", "if", "self", ".", "evaluation_num_limit", "is", "not", "None", "and", "evaluation_num", ">", "self", ".", "evaluation_num_limit", ":", "\n", "                ", "break", "\n", "", "if", "self", ".", "time_limit", "is", "not", "None", "and", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ">", "self", ".", "time_limit", ":", "\n", "                ", "break", "\n", "", "self", ".", "iterate", "(", ")", "\n", "", "return", "np", ".", "max", "(", "self", ".", "perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.random_search_optimizer.RandomSearchOptimizer.iterate": [[68, 129], ["time.time", "random_search_optimizer.RandomSearchOptimizer.optimizer.get_history", "print", "range", "hasattr", "hasattr", "len", "time.time", "len", "random_search_optimizer.RandomSearchOptimizer.optimizer.iterate", "random_search_optimizer.RandomSearchOptimizer.update_saver", "len", "random_search_optimizer.RandomSearchOptimizer.logger.warning", "random_search_optimizer.RandomSearchOptimizer.get_incumbents", "random_search_optimizer.RandomSearchOptimizer.get_incumbents", "len", "random_search_optimizer.RandomSearchOptimizer.logger.warning", "random_search_optimizer.RandomSearchOptimizer.logger.warning", "random_search_optimizer.RandomSearchOptimizer.configs.append", "random_search_optimizer.RandomSearchOptimizer.perfs.append", "random_search_optimizer.RandomSearchOptimizer.logger.warning", "random_search_optimizer.RandomSearchOptimizer.optimizer.async_iterate", "random_search_optimizer.RandomSearchOptimizer.update_saver", "enumerate", "time.time", "enumerate", "time.time", "enumerate", "time.time", "time.time", "time.time", "random_search_optimizer.RandomSearchOptimizer.configs.append", "random_search_optimizer.RandomSearchOptimizer.perfs.append", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_history", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver"], ["", "def", "iterate", "(", "self", ",", "budget", "=", "MAX_INT", ")", ":", "\n", "        ", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "configs", ")", "==", "0", "and", "self", ".", "init_hpo_iter_num", "is", "not", "None", ":", "\n", "            ", "inner_iter_num", "=", "self", ".", "init_hpo_iter_num", "\n", "print", "(", "'initial hpo trial num is set to %d'", "%", "inner_iter_num", ")", "\n", "", "else", ":", "\n", "            ", "inner_iter_num", "=", "self", ".", "inner_iter_num_per_iter", "\n", "\n", "", "if", "self", ".", "n_jobs", "==", "1", ":", "\n", "            ", "for", "_", "in", "range", "(", "inner_iter_num", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "configs", ")", ">=", "self", ".", "maximum_config_num", ":", "\n", "                    ", "self", ".", "early_stopped_flag", "=", "True", "\n", "self", ".", "logger", ".", "warning", "(", "'Already explored 70 percentage of the '", "\n", "'hyperspace or maximum configuration number met: %d!'", "%", "self", ".", "maximum_config_num", ")", "\n", "break", "\n", "", "if", "time", ".", "time", "(", ")", "-", "_start_time", ">", "budget", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "'Time limit exceeded!'", ")", "\n", "break", "\n", "", "_config", ",", "_status", ",", "_", ",", "_perf", "=", "self", ".", "optimizer", ".", "iterate", "(", ")", "\n", "self", ".", "update_saver", "(", "[", "_config", "]", ",", "[", "_perf", "[", "0", "]", "]", ")", "\n", "if", "_status", "==", "SUCCESS", ":", "\n", "                    ", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "_config", ",", "_perf", "[", "0", "]", ")", "\n", "self", ".", "configs", ".", "append", "(", "_config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "-", "_perf", "[", "0", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "configs", ")", ">=", "self", ".", "maximum_config_num", ":", "\n", "                ", "self", ".", "early_stopped_flag", "=", "True", "\n", "self", ".", "logger", ".", "warning", "(", "'Already explored 70 percentage of the '", "\n", "'hyperspace or maximum configuration number met: %d!'", "%", "self", ".", "maximum_config_num", ")", "\n", "", "elif", "time", ".", "time", "(", ")", "-", "_start_time", ">", "budget", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "'Time limit exceeded!'", ")", "\n", "", "else", ":", "\n", "                ", "_config_list", ",", "_status_list", ",", "_", ",", "_perf_list", "=", "self", ".", "optimizer", ".", "async_iterate", "(", "n", "=", "inner_iter_num", ")", "\n", "self", ".", "update_saver", "(", "_config_list", ",", "_perf_list", ")", "\n", "for", "i", ",", "_config", "in", "enumerate", "(", "_config_list", ")", ":", "\n", "                    ", "if", "_status_list", "[", "i", "]", "==", "SUCCESS", ":", "\n", "                        ", "self", ".", "exp_output", "[", "time", ".", "time", "(", ")", "]", "=", "(", "_config", ",", "_perf_list", "[", "i", "]", ")", "\n", "self", ".", "configs", ".", "append", "(", "_config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "-", "_perf_list", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "run_history", "=", "self", ".", "optimizer", ".", "get_history", "(", ")", "\n", "if", "self", ".", "name", "==", "'hpo'", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'fe_config'", ")", ":", "\n", "                ", "fe_config", "=", "self", ".", "evaluator", ".", "fe_config", "\n", "", "else", ":", "\n", "                ", "fe_config", "=", "None", "\n", "", "self", ".", "eval_dict", "=", "{", "(", "fe_config", ",", "hpo_config", ")", ":", "[", "-", "run_history", ".", "perfs", "[", "i", "]", ",", "time", ".", "time", "(", ")", ",", "run_history", ".", "trial_states", "[", "i", "]", "]", "\n", "for", "i", ",", "hpo_config", "in", "enumerate", "(", "run_history", ".", "configurations", ")", "}", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "evaluator", ",", "'hpo_config'", ")", ":", "\n", "                ", "hpo_config", "=", "self", ".", "evaluator", ".", "hpo_config", "\n", "", "else", ":", "\n", "                ", "hpo_config", "=", "None", "\n", "", "self", ".", "eval_dict", "=", "{", "(", "fe_config", ",", "hpo_config", ")", ":", "[", "-", "run_history", ".", "perfs", "[", "i", "]", ",", "time", ".", "time", "(", ")", ",", "run_history", ".", "trial_states", "[", "i", "]", "]", "\n", "for", "i", ",", "fe_config", "in", "enumerate", "(", "run_history", ".", "configurationsa", ")", "}", "\n", "", "if", "len", "(", "run_history", ".", "get_incumbents", "(", ")", ")", ">", "0", ":", "\n", "            ", "self", ".", "incumbent_config", ",", "self", ".", "incumbent_perf", "=", "run_history", ".", "get_incumbents", "(", ")", "[", "0", "]", "\n", "self", ".", "incumbent_perf", "=", "-", "self", ".", "incumbent_perf", "\n", "", "iteration_cost", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "return", "self", ".", "incumbent_perf", ",", "iteration_cost", ",", "self", ".", "incumbent_config", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.__init__": [[15, 59], ["mindware.components.optimizers.base_optimizer.BaseOptimizer.__init__", "list", "range", "list", "list", "float", "psmac_optimizer.PSMACOptimizer.config_space.get_default_configuration", "len", "psmac_optimizer.PSMACOptimizer.logger.info", "output_dir.endswith", "datetime.datetime.fromtimestamp().strftime", "psmac_optimizer.PSMACOptimizer.optimizer_list.append", "psmac_optimizer.PSMACOptimizer.config_space.get_hyperparameters", "int", "smac.facade.smac_facade.SMAC", "datetime.datetime.fromtimestamp", "len", "time.time", "smac.scenario.scenario.Scenario", "numpy.random.RandomState", "set", "psmac_optimizer.PSMACOptimizer.config_space.sample_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "config_space", ",", "name", ",", "n_jobs", "=", "4", ",", "time_limit", "=", "None", ",", "evaluation_limit", "=", "200", ",", "\n", "per_run_time_limit", "=", "600", ",", "per_run_mem_limit", "=", "1024", ",", "output_dir", "=", "'./'", ",", "trials_per_iter", "=", "1", ",", "seed", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "evaluator", ",", "config_space", ",", "name", ",", "seed", ")", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "evaluation_num_limit", "=", "evaluation_limit", "\n", "self", ".", "trials_per_iter", "=", "trials_per_iter", "\n", "self", ".", "trials_this_run", "=", "trials_per_iter", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "per_run_mem_limit", "=", "per_run_mem_limit", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n", "if", "not", "output_dir", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "output_dir", "+=", "'/'", "\n", "", "self", ".", "output_dir", "=", "output_dir", "\n", "output_dir", "+=", "\"psmac3_output_%s\"", "%", "(", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "\n", "time", ".", "time", "(", ")", ")", ".", "strftime", "(", "'%Y-%m-%d_%H:%M:%S_%f'", ")", ")", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "scenario_dict", "=", "{", "'abort_on_first_run_crash'", ":", "False", ",", "\n", "\"run_obj\"", ":", "\"quality\"", ",", "\n", "\"cs\"", ":", "self", ".", "config_space", ",", "\n", "\"deterministic\"", ":", "\"true\"", ",", "\n", "\"shared-model\"", ":", "True", ",", "# PSMAC Entry", "\n", "\"runcount-limit\"", ":", "self", ".", "evaluation_num_limit", ",", "\n", "\"output_dir\"", ":", "output_dir", ",", "\n", "\"cutoff_time\"", ":", "self", ".", "per_run_time_limit", "\n", "}", "\n", "self", ".", "optimizer_list", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "n_jobs", ")", ":", "\n", "            ", "self", ".", "optimizer_list", ".", "append", "(", "SMAC", "(", "scenario", "=", "Scenario", "(", "self", ".", "scenario_dict", ")", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", ",", "# Different seed for different optimizers", "\n", "tae_runner", "=", "self", ".", "evaluator", ")", ")", "\n", "", "self", ".", "trial_cnt", "=", "0", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "# Estimate the size of the hyperparameter space.", "\n", "hp_num", "=", "len", "(", "self", ".", "config_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "if", "hp_num", "==", "0", ":", "\n", "            ", "self", ".", "config_num_threshold", "=", "0", "\n", "", "else", ":", "\n", "            ", "_threshold", "=", "int", "(", "len", "(", "set", "(", "self", ".", "config_space", ".", "sample_configuration", "(", "12500", ")", ")", ")", "*", "0.8", ")", "\n", "self", ".", "config_num_threshold", "=", "_threshold", "\n", "", "self", ".", "logger", ".", "info", "(", "'HP_THRESHOLD is: %d'", "%", "self", ".", "config_num_threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.run": [[60, 73], ["numpy.max", "psmac_optimizer.PSMACOptimizer.iterate", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "if", "self", ".", "evaluation_num_limit", "is", "not", "None", "and", "self", ".", "trial_cnt", ">", "self", ".", "evaluation_num_limit", ":", "\n", "                ", "break", "\n", "", "if", "self", ".", "time_limit", "is", "not", "None", "and", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ">", "self", ".", "time_limit", ":", "\n", "                ", "break", "\n", "", "if", "self", ".", "evaluation_num_limit", "-", "self", ".", "trial_cnt", ">", "self", ".", "trials_per_iter", ":", "\n", "                ", "self", ".", "trials_this_run", "=", "self", ".", "trials_per_iter", "\n", "", "else", ":", "\n", "                ", "self", ".", "trials_this_run", "=", "self", ".", "evaluation_num_limit", "-", "self", ".", "trial_cnt", "\n", "", "self", ".", "iterate", "(", ")", "\n", "\n", "", "return", "np", ".", "max", "(", "self", ".", "perfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.iterate": [[74, 123], ["multiprocessing.Value", "time.time", "len", "psmac_optimizer.PSMACOptimizer.logger.warning", "multiprocessing.Manager().list", "range", "range", "smac.optimizer.pSMAC.read", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "multiprocessing.Process.join", "list", "time.time", "multiprocessing.Manager", "runhistory.data.keys", "psmac_optimizer.PSMACOptimizer.perfs.append", "psmac_optimizer.PSMACOptimizer.configs.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.read", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "trial_left", "=", "multiprocessing", ".", "Value", "(", "'i'", ",", "self", ".", "trials_this_run", ")", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "_flag", "=", "False", "\n", "if", "len", "(", "self", ".", "configs", ")", ">=", "self", ".", "config_num_threshold", ":", "\n", "            ", "_flag", "=", "True", "\n", "self", ".", "logger", ".", "warning", "(", "'Already explored 70 percentage of the '", "\n", "'hp space: %d!'", "%", "self", ".", "config_num_threshold", ")", "\n", "", "else", ":", "\n", "# for i in range(self.n_jobs):", "\n", "#     self.trial_statistics.append(self.pool.submit(_iterate,", "\n", "#                                                   self.optimizer_list[i], trial_left))", "\n", "# self.wait_tasks_finish()", "\n", "            ", "processes", "=", "[", "]", "\n", "return_hist", "=", "multiprocessing", ".", "Manager", "(", ")", ".", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_jobs", ")", ":", "\n", "                ", "pSMAC", ".", "read", "(", "\n", "run_history", "=", "self", ".", "optimizer_list", "[", "i", "]", ".", "solver", ".", "runhistory", ",", "\n", "output_dirs", "=", "self", ".", "optimizer_list", "[", "i", "]", ".", "solver", ".", "scenario", ".", "output_dir", "+", "'/run_1'", ",", "\n", "configuration_space", "=", "self", ".", "optimizer_list", "[", "i", "]", ".", "solver", ".", "config_space", ",", "\n", "logger", "=", "self", ".", "optimizer_list", "[", "i", "]", ".", "solver", ".", "logger", ",", "\n", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_jobs", ")", ":", "\n", "                ", "p", "=", "multiprocessing", ".", "Process", "(", "\n", "target", "=", "_iterate", ",", "\n", "args", "=", "[", "self", ".", "optimizer_list", "[", "i", "]", ",", "trial_left", ",", "return_hist", "]", "\n", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "\n", "", "for", "runhistory", "in", "return_hist", ":", "\n", "                ", "runkeys", "=", "list", "(", "runhistory", ".", "data", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "runkeys", ":", "\n", "                    ", "_reward", "=", "1.", "-", "runhistory", ".", "data", "[", "key", "]", "[", "0", "]", "\n", "_config", "=", "runhistory", ".", "ids_config", "[", "key", "[", "0", "]", "]", "\n", "if", "_config", "not", "in", "self", ".", "configs", ":", "\n", "                        ", "self", ".", "perfs", ".", "append", "(", "_reward", ")", "\n", "self", ".", "configs", ".", "append", "(", "_config", ")", "\n", "", "if", "_reward", ">", "self", ".", "incumbent_perf", ":", "\n", "                        ", "self", ".", "incumbent_perf", "=", "_reward", "\n", "self", ".", "incumbent_config", "=", "_config", "\n", "", "", "", "self", ".", "trial_cnt", "+=", "self", ".", "trials_per_iter", "\n", "", "if", "not", "_flag", ":", "\n", "            ", "iteration_cost", "=", "time", ".", "time", "(", ")", "-", "_start_time", "\n", "", "else", ":", "\n", "            ", "iteration_cost", "=", "None", "\n", "", "return", "self", ".", "incumbent_perf", ",", "iteration_cost", ",", "self", ".", "incumbent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.optimize": [[124, 155], ["range", "multiprocessing.Manager().list", "range", "psmac_optimizer.PSMACOptimizer._optimize", "psmac_optimizer.PSMACOptimizer.optimizer_list.append", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "multiprocessing.Process.join", "list", "smac.facade.smac_facade.SMAC", "multiprocessing.Manager", "runhistory.data.keys", "psmac_optimizer.PSMACOptimizer.perfs.append", "psmac_optimizer.PSMACOptimizer.configs.append", "smac.scenario.scenario.Scenario", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer._optimize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_jobs", ")", ":", "\n", "            ", "self", ".", "optimizer_list", ".", "append", "(", "SMAC", "(", "scenario", "=", "Scenario", "(", "self", ".", "scenario_dict", ")", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", ",", "# Different seed for different optimizers", "\n", "tae_runner", "=", "self", ".", "evaluator", ")", ")", "\n", "\n", "", "processes", "=", "[", "]", "\n", "return_hist", "=", "multiprocessing", ".", "Manager", "(", ")", ".", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_jobs", ")", ":", "\n", "            ", "p", "=", "multiprocessing", ".", "Process", "(", "\n", "target", "=", "self", ".", "_optimize", ",", "\n", "args", "=", "[", "self", ".", "optimizer_list", "[", "i", "]", ",", "return_hist", "]", "\n", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "", "self", ".", "_optimize", "(", "self", ".", "optimizer_list", "[", "0", "]", ",", "return_hist", ")", "\n", "for", "p", "in", "processes", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "for", "runhistory", "in", "return_hist", ":", "\n", "            ", "runkeys", "=", "list", "(", "runhistory", ".", "data", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "runkeys", ":", "\n", "                ", "_reward", "=", "1.", "-", "runhistory", ".", "data", "[", "key", "]", "[", "0", "]", "\n", "_config", "=", "runhistory", ".", "ids_config", "[", "key", "[", "0", "]", "]", "\n", "if", "_config", "not", "in", "self", ".", "configs", ":", "\n", "                    ", "self", ".", "perfs", ".", "append", "(", "_reward", ")", "\n", "self", ".", "configs", ".", "append", "(", "_config", ")", "\n", "", "if", "_reward", ">", "self", ".", "incumbent_perf", ":", "\n", "                    ", "self", ".", "incumbent_perf", "=", "_reward", "\n", "self", ".", "incumbent_config", "=", "_config", "\n", "", "", "", "return", "self", ".", "incumbent_config", ",", "self", ".", "incumbent_perf", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer._optimize": [[156, 165], ["optimizer.optimize", "smac.optimizer.pSMAC.read", "hist_list.append"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.optimize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.read"], ["", "def", "_optimize", "(", "self", ",", "optimizer", ",", "hist_list", ")", ":", "\n", "        ", "optimizer", ".", "optimize", "(", ")", "\n", "pSMAC", ".", "read", "(", "\n", "run_history", "=", "optimizer", ".", "solver", ".", "runhistory", ",", "\n", "output_dirs", "=", "optimizer", ".", "solver", ".", "scenario", ".", "input_psmac_dirs", ",", "\n", "configuration_space", "=", "optimizer", ".", "solver", ".", "config_space", ",", "\n", "logger", "=", "optimizer", ".", "solver", ".", "logger", ",", "\n", ")", "\n", "hist_list", ".", "append", "(", "optimizer", ".", "solver", ".", "runhistory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer.PSMACOptimizer.wait_tasks_finish": [[166, 175], ["trial.done", "time.sleep"], "methods", ["None"], ["", "def", "wait_tasks_finish", "(", "self", ")", ":", "\n", "        ", "all_completed", "=", "False", "\n", "while", "not", "all_completed", ":", "\n", "            ", "all_completed", "=", "True", "\n", "for", "trial", "in", "self", ".", "trial_statistics", ":", "\n", "                ", "if", "not", "trial", ".", "done", "(", ")", ":", "\n", "                    ", "all_completed", "=", "False", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.psmac_optimizer._iterate": [[177, 189], ["smac.optimizer.pSMAC.read", "return_hist.append", "optimizer.iterate"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.config_parser.ConfigParser.read", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "", "", "", "", "def", "_iterate", "(", "optimizer", ",", "runcount_left", ",", "return_hist", ")", ":", "\n", "    ", "while", "runcount_left", ".", "value", ">", "0", ":", "\n", "        ", "runcount_left", ".", "value", "-=", "1", "\n", "optimizer", ".", "iterate", "(", ")", "\n", "", "pSMAC", ".", "read", "(", "\n", "run_history", "=", "optimizer", ".", "solver", ".", "runhistory", ",", "\n", "output_dirs", "=", "optimizer", ".", "solver", ".", "scenario", ".", "input_psmac_dirs", ",", "\n", "configuration_space", "=", "optimizer", ".", "solver", ".", "config_space", ",", "\n", "logger", "=", "optimizer", ".", "solver", ".", "logger", ",", "\n", ")", "\n", "# print(optimizer.solver.runhistory.data)", "\n", "return_hist", ".", "append", "(", "optimizer", ".", "solver", ".", "runhistory", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.hpo_optimizer_builder.build_hpo_optimizer": [[8, 32], ["optimizer_class", "ValueError"], "function", ["None"], ["def", "build_hpo_optimizer", "(", "eval_type", ",", "evaluator", ",", "config_space", ",", "optimizer", "=", "'smac'", ",", "\n", "per_run_time_limit", "=", "600", ",", "per_run_mem_limit", "=", "1024", ",", "\n", "output_dir", "=", "'./'", ",", "inner_iter_num_per_iter", "=", "1", ",", "\n", "timestamp", "=", "None", ",", "seed", "=", "1", ",", "n_jobs", "=", "1", ")", ":", "\n", "    ", "if", "eval_type", "==", "'partial'", ":", "\n", "        ", "optimizer_class", "=", "MfseOptimizer", "\n", "", "elif", "eval_type", "==", "'partial_bohb'", ":", "\n", "        ", "optimizer_class", "=", "BohbOptimizer", "\n", "", "else", ":", "\n", "# TODO: Support asynchronous BO", "\n", "        ", "if", "optimizer", "==", "'random_search'", ":", "\n", "            ", "optimizer_class", "=", "RandomSearchOptimizer", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "optimizer_class", "=", "TPEOptimizer", "\n", "", "elif", "optimizer", "==", "'smac'", ":", "\n", "            ", "optimizer_class", "=", "SMACOptimizer", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid optimizer %s\"", "%", "optimizer", ")", "\n", "\n", "", "", "return", "optimizer_class", "(", "evaluator", ",", "config_space", ",", "'hpo'", ",", "\n", "eval_type", "=", "eval_type", ",", "output_dir", "=", "output_dir", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "inner_iter_num_per_iter", "=", "inner_iter_num_per_iter", ",", "\n", "timestamp", "=", "timestamp", ",", "seed", "=", "seed", ",", "n_jobs", "=", "n_jobs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tpe_optimizer.TPEOptimizer.__init__": [[9, 48], ["mindware.components.optimizers.base_optimizer.BaseOptimizer.__init__", "list", "list", "dict", "float", "tpe_optimizer.TPEOptimizer.config_space.get_default_configuration", "len", "tpe_optimizer.TPEOptimizer.logger.debug", "min", "openbox.optimizer.generic_smbo.SMBO", "ValueError", "tpe_optimizer.TPEOptimizer.config_space.get_hyperparameters", "int", "len", "set", "tpe_optimizer.TPEOptimizer.config_space.sample_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug"], ["from", "mindware", ".", "components", ".", "optimizers", ".", "base", ".", "config_space_utils", "import", "sample_configurations", "\n", "\n", "\n", "class", "TPE_BO", "(", "BaseFacade", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "config_space", ",", "\n", "surrogate_model", "=", "'tpe'", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "max_runs", "=", "200", ",", "\n", "initial_configurations", "=", "None", ",", "\n", "initial_runs", "=", "3", ",", "\n", "task_id", "=", "None", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config_space", ",", "task_id", ")", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "run_id", ",", "rng", "=", "get_rng", "(", ")", "\n", "\n", "", "self", ".", "surrogate_model", "=", "surrogate_model", "\n", "self", ".", "initial_configurations", "=", "initial_configurations", "\n", "self", ".", "init_num", "=", "initial_runs", "\n", "if", "initial_configurations", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_num", "=", "len", "(", "initial_configurations", ")", "\n", "\n", "", "self", ".", "max_iterations", "=", "max_runs", "\n", "self", ".", "iteration_id", "=", "0", "\n", "self", ".", "time_limit_per_trial", "=", "time_limit_per_trial", "\n", "self", ".", "default_obj_value", "=", "MAXINT", "\n", "\n", "self", ".", "configurations", "=", "list", "(", ")", "\n", "self", ".", "failed_configurations", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "\n", "# Initialize the basic component in BO.", "\n", "self", ".", "objective_function", "=", "objective_function", "\n", "if", "self", ".", "surrogate_model", "==", "'tpe'", ":", "\n", "            ", "self", ".", "model", "=", "TPE", "(", "configspace", "=", "config_space", ")", "\n", "", "elif", "self", ".", "surrogate_model", "==", "'random_search'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported surrogate model - %s!'", "%", "self", ".", "surrogate_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tpe_optimizer.TPEOptimizer.run": [[49, 58], ["numpy.max", "len", "tpe_optimizer.TPEOptimizer.iterate", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "self", ".", "iteration_id", "<", "self", ".", "max_iterations", ":", "\n", "            ", "self", ".", "iterate", "(", ")", "\n", "\n", "", "", "def", "iterate", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "convert_configurations_to_array", "(", "self", ".", "configurations", ")", "\n", "", "Y", "=", "np", ".", "array", "(", "self", ".", "perfs", ",", "dtype", "=", "np", ".", "float64", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.tpe_optimizer.TPEOptimizer.iterate": [[59, 107], ["time.time", "tpe_optimizer.TPEOptimizer.optimizer.get_history", "print", "range", "ValueError", "hasattr", "hasattr", "len", "time.time", "len", "tpe_optimizer.TPEOptimizer.optimizer.iterate", "tpe_optimizer.TPEOptimizer.update_saver", "tpe_optimizer.TPEOptimizer.get_incumbents", "tpe_optimizer.TPEOptimizer.get_incumbents", "len", "tpe_optimizer.TPEOptimizer.logger.warning", "tpe_optimizer.TPEOptimizer.logger.warning", "tpe_optimizer.TPEOptimizer.configs.append", "tpe_optimizer.TPEOptimizer.perfs.append", "time.time", "enumerate", "time.time", "enumerate", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_history", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.base_optimizer.BaseOptimizer.update_saver", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.get_incumbents", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.warning"], ["config", "=", "self", ".", "choose_next", "(", "X", ",", "Y", ")", "\n", "trial_state", "=", "SUCCESS", "\n", "trial_info", "=", "None", "\n", "\n", "if", "config", "not", "in", "(", "self", ".", "configurations", "+", "self", ".", "failed_configurations", ")", ":", "\n", "# Evaluate this configuration.", "\n", "            ", "try", ":", "\n", "                ", "with", "time_limit", "(", "self", ".", "time_limit_per_trial", ")", ":", "\n", "                    ", "perf", "=", "self", ".", "objective_function", "(", "config", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "perf", "=", "MAXINT", "\n", "trial_info", "=", "str", "(", "e", ")", "\n", "trial_state", "=", "FAILDED", "if", "not", "isinstance", "(", "e", ",", "TimeoutException", ")", "else", "TIMEOUT", "\n", "print", "(", "self", ".", "iteration_id", ",", "str", "(", "e", ")", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "configurations", ")", "==", "0", ":", "\n", "                ", "self", ".", "default_obj_value", "=", "perf", "\n", "\n", "", "if", "trial_state", "==", "SUCCESS", "and", "perf", "<", "MAXINT", ":", "\n", "                ", "self", ".", "configurations", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "perf", ")", "\n", "# Update KDE model.", "\n", "if", "self", ".", "surrogate_model", "==", "'tpe'", ":", "\n", "                    ", "self", ".", "model", ".", "new_result", "(", "config", ",", "perf", ",", "1", ")", "\n", "", "self", ".", "history_container", ".", "add", "(", "config", ",", "perf", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "failed_configurations", ".", "append", "(", "config", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'This configuration has been evaluated! Skip it.'", ")", "\n", "if", "config", "in", "self", ".", "configurations", ":", "\n", "                ", "config_idx", "=", "self", ".", "configurations", ".", "index", "(", "config", ")", "\n", "trial_state", ",", "perf", "=", "SUCCESS", ",", "self", ".", "perfs", "[", "config_idx", "]", "\n", "", "else", ":", "\n", "                ", "trial_state", ",", "perf", "=", "FAILDED", ",", "MAXINT", "\n", "\n", "", "", "self", ".", "iteration_id", "+=", "1", "\n", "self", ".", "logger", ".", "debug", "(", "'Iteration-%d, objective improvement: %.4f'", "%", "(", "self", ".", "iteration_id", ",", "max", "(", "0", ",", "self", ".", "default_obj_value", "-", "perf", ")", ")", ")", "\n", "return", "config", ",", "trial_state", ",", "perf", ",", "trial_info", "\n", "\n", "", "def", "choose_next", "(", "self", ",", "X", ":", "np", ".", "ndarray", ",", "Y", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "_config_num", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "_config_num", "<", "self", ".", "init_num", ":", "\n", "            ", "if", "self", ".", "initial_configurations", "is", "None", ":", "\n", "                ", "if", "_config_num", "==", "0", ":", "\n", "                    ", "return", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "", "else", ":", "\n", "                    ", "return", "sample_configurations", "(", "self", ".", "config_space", ",", "1", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "initial_configurations", "[", "_config_num", "]", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_bagging.BalancedBagging.__init__": [[13, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "max_features", ",", "\n", "max_depth", ",", "bootstrap", ",", "bootstrap_features", ",", "\n", "sampling_strategy", ",", "replacement", ",", "random_state", "=", "None", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "bootstrap_features", "=", "bootstrap_features", "\n", "self", ".", "sampling_strategy", "=", "sampling_strategy", "\n", "self", ".", "replacement", "=", "replacement", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_bagging.BalancedBagging.fit": [[28, 47], ["BalancedBaggingClassifier", "BalancedBaggingClassifier.fit", "int", "sklearn.tree.DecisionTreeClassifier"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "import", "sklearn", ".", "tree", "\n", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "self", ".", "estimator", "=", "sklearn", ".", "tree", ".", "DecisionTreeClassifier", "(", "max_depth", "=", "self", ".", "max_depth", ")", "\n", "", "from", "imblearn", ".", "ensemble", "import", "BalancedBaggingClassifier", "\n", "estimator", "=", "BalancedBaggingClassifier", "(", "base_estimator", "=", "self", ".", "estimator", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "max_features", "=", "self", ".", "max_features", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "bootstrap_features", "=", "self", ".", "bootstrap_features", ",", "\n", "sampling_strategy", "=", "self", ".", "sampling_strategy", ",", "\n", "replacement", "=", "self", ".", "replacement", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_bagging.BalancedBagging.predict": [[48, 52], ["balanced_bagging.BalancedBagging.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_bagging.BalancedBagging.predict_proba": [[53, 57], ["balanced_bagging.BalancedBagging.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_bagging.BalancedBagging.get_properties": [[58, 69], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Bal_Bagging'", ",", "\n", "'name'", ":", "'Balanced Bagging Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_bagging.BalancedBagging.get_hyperparameter_search_space": [[70, 111], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.uniform", "hp.choice", "hp.choice", "hp.choice", "hp.choice", "hp.randint", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_estimators\"", ",", "lower", "=", "50", ",", "upper", "=", "500", ",", "default_value", "=", "50", ",", "log", "=", "False", ")", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.", ",", "1.", ",", "default_value", "=", "0.5", ")", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"True\"", ")", "\n", "bootstrap_features", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap_features\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "sampling_strategy", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"sampling_strategy\"", ",", "choices", "=", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ",", "\n", "default_value", "=", "\"not minority\"", ")", "\n", "replacement", "=", "CategoricalHyperparameter", "(", "\n", "\"replacement\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "1", ",", "log", "=", "False", ")", "\n", "cs", ".", "add_hyperparameters", "(", "\n", "[", "n_estimators", ",", "max_features", ",", "bootstrap", ",", "bootstrap_features", ",", "sampling_strategy", ",", "replacement", ",", "\n", "max_depth", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "hp", ".", "randint", "(", "'bal_bagging_n_estimators'", ",", "451", ")", "+", "50", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'bal_bagging_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'bal_bagging_bootstrap'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "'bootstrap_features'", ":", "hp", ".", "choice", "(", "'bal_bagging_bootstrap_features'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "'sampling_strategy'", ":", "hp", ".", "choice", "(", "'bal_bagging_sampling_strategy'", ",", "\n", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ")", ",", "\n", "'replacement'", ":", "hp", ".", "choice", "(", "'bal_bagging_replacement'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "randint", "(", "'bal_bagging_max_depth'", ",", "10", ")", "+", "1", "}", "\n", "init_trial", "=", "{", "'n_estimators'", ":", "10", ",", "\n", "'max_features'", ":", "0.5", ",", "\n", "'bootstrap'", ":", "\"True\"", ",", "\n", "'bootstrap_features'", ":", "\"False\"", ",", "\n", "'sampling_strategy'", ":", "\"not minority\"", ",", "\n", "'replacement'", ":", "\"False\"", ",", "\n", "'max_depth'", ":", "1", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.easy_ensemble.EasyEnsemble.__init__": [[13, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "\n", "sampling_strategy", ",", "\n", "replacement", ",", "\n", "ab_n_estimators", ",", "\n", "ab_max_depth", ",", "\n", "ab_learning_rate", ",", "\n", "ab_algorithm", ",", "\n", "n_jobs", "=", "-", "1", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "sampling_strategy", "=", "sampling_strategy", "\n", "self", ".", "replacement", "=", "replacement", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n", "# Parameters for Adaboost base learner", "\n", "self", ".", "ab_max_depth", "=", "ab_max_depth", "\n", "self", ".", "ab_n_estimators", "=", "ab_n_estimators", "\n", "self", ".", "ab_learning_rate", "=", "ab_learning_rate", "\n", "self", ".", "ab_algorithm", "=", "ab_algorithm", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.easy_ensemble.EasyEnsemble.fit": [[36, 60], ["EasyEnsembleClassifier", "EasyEnsembleClassifier.fit", "int", "sklearn.tree.DecisionTreeClassifier", "sklearn.ensemble.AdaBoostClassifier"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "import", "sklearn", ".", "tree", "\n", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "ab_max_depth", "=", "int", "(", "self", ".", "ab_max_depth", ")", "\n", "base_estimator", "=", "sklearn", ".", "tree", ".", "DecisionTreeClassifier", "(", "max_depth", "=", "self", ".", "ab_max_depth", ")", "\n", "self", ".", "estimator", "=", "sklearn", ".", "ensemble", ".", "AdaBoostClassifier", "(", "\n", "base_estimator", "=", "base_estimator", ",", "\n", "n_estimators", "=", "self", ".", "ab_n_estimators", ",", "\n", "learning_rate", "=", "self", ".", "ab_learning_rate", ",", "\n", "algorithm", "=", "self", ".", "ab_algorithm", ",", "\n", "random_state", "=", "self", ".", "random_state", "\n", ")", "\n", "", "from", "imblearn", ".", "ensemble", "import", "EasyEnsembleClassifier", "\n", "estimator", "=", "EasyEnsembleClassifier", "(", "base_estimator", "=", "self", ".", "estimator", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "sampling_strategy", "=", "self", ".", "sampling_strategy", ",", "\n", "replacement", "=", "self", ".", "replacement", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.easy_ensemble.EasyEnsemble.predict": [[61, 65], ["easy_ensemble.EasyEnsemble.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.easy_ensemble.EasyEnsemble.predict_proba": [[66, 70], ["easy_ensemble.EasyEnsemble.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.easy_ensemble.EasyEnsemble.get_properties": [[71, 82], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Easy_Ensemble'", ",", "\n", "'name'", ":", "'Easy Ensemble Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.easy_ensemble.EasyEnsemble.get_hyperparameter_search_space": [[83, 125], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.choice", "hp.loguniform", "hp.choice", "hp.randint", "hp.randint", "numpy.log", "numpy.log", "hp.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_estimators\"", ",", "lower", "=", "50", ",", "upper", "=", "500", ",", "default_value", "=", "50", ",", "log", "=", "False", ")", "\n", "sampling_strategy", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"sampling_strategy\"", ",", "choices", "=", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ",", "\n", "default_value", "=", "\"not minority\"", ")", "\n", "replacement", "=", "CategoricalHyperparameter", "(", "\n", "\"replacement\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "\n", "ab_n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"ab_n_estimators\"", ",", "lower", "=", "50", ",", "upper", "=", "500", ",", "default_value", "=", "50", ",", "log", "=", "False", ")", "\n", "ab_learning_rate", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"ab_learning_rate\"", ",", "lower", "=", "0.01", ",", "upper", "=", "2", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "ab_algorithm", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"ab_algorithm\"", ",", "choices", "=", "[", "\"SAMME.R\"", ",", "\"SAMME\"", "]", ",", "default_value", "=", "\"SAMME.R\"", ")", "\n", "ab_max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"ab_max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "1", ",", "log", "=", "False", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "sampling_strategy", ",", "replacement", ",", "ab_n_estimators", ",", "\n", "ab_learning_rate", ",", "ab_algorithm", ",", "ab_max_depth", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "hp", ".", "randint", "(", "'easy_ensemble_n_estimators'", ",", "451", ")", "+", "50", ",", "\n", "'sampling_strategy'", ":", "hp", ".", "choice", "(", "'easy_ensemble_sampling_strategy'", ",", "\n", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ")", ",", "\n", "'replacement'", ":", "hp", ".", "choice", "(", "'easy_ensemble_replacement'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "\n", "'ab_n_estimators'", ":", "hp", ".", "randint", "(", "'ab_n_estimators'", ",", "451", ")", "+", "50", ",", "\n", "'ab_learning_rate'", ":", "hp", ".", "loguniform", "(", "'ab_learning_rate'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "2", ")", ")", ",", "\n", "'ab_algorithm'", ":", "hp", ".", "choice", "(", "'ab_algorithm'", ",", "[", "\"SAMME.R\"", ",", "\"SAMME\"", "]", ")", ",", "\n", "'ab_max_depth'", ":", "hp", ".", "randint", "(", "'ab_max_depth'", ",", "10", ")", "+", "1", "}", "\n", "init_trial", "=", "{", "'n_estimators'", ":", "10", ",", "\n", "'sampling_strategy'", ":", "\"not minority\"", ",", "\n", "'replacement'", ":", "\"False\"", ",", "\n", "'ab_n_estimators'", ":", "50", ",", "\n", "'ab_learning_rate'", ":", "0.1", ",", "\n", "'ab_algorithm'", ":", "\"SAMME.R\"", ",", "\n", "'ab_max_depth'", ":", "1", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_random_forest.BalancedRandomForest.__init__": [[15, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "criterion", ",", "max_features", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "bootstrap", ",", "\n", "min_impurity_decrease", ",", "sampling_strategy", ",", "replacement", ",", "\n", "random_state", "=", "None", ",", "n_jobs", "=", "-", "1", ",", "\n", "class_weight", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "sampling_strategy", "=", "sampling_strategy", "\n", "self", ".", "replacement", "=", "replacement", "\n", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_random_forest.BalancedRandomForest.fit": [[38, 59], ["BalancedRandomForestClassifier", "BalancedRandomForestClassifier.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "from", "imblearn", ".", "ensemble", "import", "BalancedRandomForestClassifier", "\n", "estimator", "=", "BalancedRandomForestClassifier", "(", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_features", "=", "self", ".", "max_features", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "sampling_strategy", "=", "self", ".", "sampling_strategy", ",", "\n", "replacement", "=", "self", ".", "replacement", ")", "\n", "\n", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_random_forest.BalancedRandomForest.predict": [[60, 64], ["balanced_random_forest.BalancedRandomForest.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_random_forest.BalancedRandomForest.predict_proba": [[65, 69], ["balanced_random_forest.BalancedRandomForest.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_random_forest.BalancedRandomForest.get_properties": [[70, 81], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Bal_RF'", ",", "\n", "'name'", ":", "'Balanced Random Forest Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.balanced_random_forest.BalancedRandomForest.get_hyperparameter_search_space": [[82, 142], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.choice", "hp.uniform", "hp.choice", "hp.choice", "hp.choice", "hp.choice", "hp.choice", "hp.randint", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "Constant", "(", "\"n_estimators\"", ",", "100", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"gini\"", ",", "\"entropy\"", "]", ",", "default_value", "=", "\"gini\"", ")", "\n", "\n", "# The maximum number of features used in the forest is calculated as m^max_features, where", "\n", "# m is the total number of features, and max_features is the hyperparameter specified below.", "\n", "# The default is 0.5, which yields sqrt(m) features as max_features in the estimator. This", "\n", "# corresponds with Geurts' heuristic.", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.", ",", "1.", ",", "default_value", "=", "0.5", ")", "\n", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_weight_fraction_leaf\"", ",", "0.", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"True\"", ")", "\n", "sampling_strategy", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"sampling_strategy\"", ",", "choices", "=", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ",", "\n", "default_value", "=", "\"not minority\"", ")", "\n", "replacement", "=", "CategoricalHyperparameter", "(", "\n", "\"replacement\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "criterion", ",", "max_features", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "\n", "bootstrap", ",", "min_impurity_decrease", ",", "sampling_strategy", ",", "replacement", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "hp", ".", "choice", "(", "'bal_rf_n_estimators'", ",", "[", "100", "]", ")", ",", "\n", "'criterion'", ":", "hp", ".", "choice", "(", "'bal_rf_criterion'", ",", "[", "\"gini\"", ",", "\"entropy\"", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'bal_rf_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'bal_rf_min_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'bal_rf_min_samples_leaf'", ",", "20", ")", "+", "1", ",", "\n", "'min_weight_fraction_leaf'", ":", "hp", ".", "choice", "(", "'bal_rf_min_weight_fraction_leaf'", ",", "[", "0", "]", ")", ",", "\n", "'min_impurity_decrease'", ":", "hp", ".", "choice", "(", "'bal_rf_min_impurity_decrease'", ",", "[", "0", "]", ")", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'bal_rf_bootstrap'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "'sampling_strategy'", ":", "hp", ".", "choice", "(", "'bal_rf_sampling_strategy'", ",", "\n", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ")", ",", "\n", "'replacement'", ":", "hp", ".", "choice", "(", "'bal_rf_replacement'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "}", "\n", "\n", "init_trial", "=", "{", "'n_estimators'", ":", "100", ",", "\n", "'criterion'", ":", "\"gini\"", ",", "\n", "'max_features'", ":", "0.5", ",", "\n", "'min_samples_split'", ":", "2", ",", "\n", "'min_samples_leaf'", ":", "1", ",", "\n", "'min_weight_fraction_leaf'", ":", "0", ",", "\n", "'min_impurity_decrease'", ":", "0", ",", "\n", "'bootstrap'", ":", "\"False\"", ",", "\n", "'sampling_strategy'", ":", "\"not minority\"", ",", "\n", "'replacement'", ":", "\"False\"", "\n", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.rusboost.RUSBoost.__init__": [[12, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "learning_rate", ",", "\n", "algorithm", ",", "max_depth", ",", "sampling_strategy", ",", "\n", "replacement", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "algorithm", "=", "algorithm", "\n", "self", ".", "sampling_strategy", "=", "sampling_strategy", "\n", "self", ".", "replacement", "=", "replacement", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.rusboost.RUSBoost.fit": [[25, 45], ["int", "float", "int", "sklearn.tree.DecisionTreeClassifier", "RUSBoostClassifier", "RUSBoostClassifier.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "import", "sklearn", ".", "tree", "\n", "\n", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "self", ".", "learning_rate", "=", "float", "(", "self", ".", "learning_rate", ")", "\n", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "base_estimator", "=", "sklearn", ".", "tree", ".", "DecisionTreeClassifier", "(", "max_depth", "=", "self", ".", "max_depth", ")", "\n", "from", "imblearn", ".", "ensemble", "import", "RUSBoostClassifier", "\n", "estimator", "=", "RUSBoostClassifier", "(", "\n", "base_estimator", "=", "base_estimator", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "algorithm", "=", "self", ".", "algorithm", ",", "\n", "random_state", "=", "self", ".", "random_state", "\n", ")", "\n", "\n", "estimator", ".", "fit", "(", "X", ",", "Y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.rusboost.RUSBoost.predict": [[46, 50], ["rusboost.RUSBoost.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.rusboost.RUSBoost.predict_proba": [[51, 55], ["rusboost.RUSBoost.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.rusboost.RUSBoost.get_properties": [[56, 67], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'AB'", ",", "\n", "'name'", ":", "'AdaBoost Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.imbalanced_classification.rusboost.RUSBoost.get_hyperparameter_search_space": [[68, 104], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.loguniform", "hp.choice", "hp.choice", "hp.choice", "hp.randint", "numpy.log", "numpy.log", "hp.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_estimators\"", ",", "lower", "=", "50", ",", "upper", "=", "500", ",", "default_value", "=", "50", ",", "log", "=", "False", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"learning_rate\"", ",", "lower", "=", "0.01", ",", "upper", "=", "2", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "algorithm", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"algorithm\"", ",", "choices", "=", "[", "\"SAMME.R\"", ",", "\"SAMME\"", "]", ",", "default_value", "=", "\"SAMME.R\"", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "1", ",", "log", "=", "False", ")", "\n", "\n", "sampling_strategy", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"sampling_strategy\"", ",", "choices", "=", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ",", "\n", "default_value", "=", "\"not minority\"", ")", "\n", "replacement", "=", "CategoricalHyperparameter", "(", "\n", "\"replacement\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "learning_rate", ",", "algorithm", ",", "max_depth", ",", "sampling_strategy", ",", "replacement", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "hp", ".", "randint", "(", "'rb_n_estimators'", ",", "451", ")", "+", "50", ",", "\n", "'learning_rate'", ":", "hp", ".", "loguniform", "(", "'rb_learning_rate'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "2", ")", ")", ",", "\n", "'algorithm'", ":", "hp", ".", "choice", "(", "'rb_algorithm'", ",", "[", "\"SAMME.R\"", ",", "\"SAMME\"", "]", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "randint", "(", "'rb_max_depth'", ",", "10", ")", "+", "1", ",", "\n", "'sampling_strategy'", ":", "hp", ".", "choice", "(", "'rb_sampling_strategy'", ",", "\n", "[", "\"majority\"", ",", "\"not minority\"", ",", "\"not majority\"", ",", "\"all\"", "]", ")", ",", "\n", "'replacement'", ":", "hp", ".", "choice", "(", "'rb_replacement'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", "\n", "}", "\n", "\n", "init_trial", "=", "{", "'n_estimators'", ":", "50", ",", "'learning_rate'", ":", "0.1", ",", "'algorithm'", ":", "\"SAMME.R\"", ",", "'max_depth'", ":", "1", ",", "\n", "'sampling_strategy'", ":", "\"not minority\"", ",", "\n", "'replacement'", ":", "\"False\"", ",", "\n", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.liblinear_svr.LibLinear_SVR.__init__": [[15, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", ",", "loss", ",", "dual", ",", "tol", ",", "C", ",", "\n", "fit_intercept", ",", "intercept_scaling", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "dual", "=", "dual", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "fit_intercept", "=", "fit_intercept", "\n", "self", ".", "intercept_scaling", "=", "intercept_scaling", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.liblinear_svr.LibLinear_SVR.fit": [[28, 57], ["isinstance", "float", "float", "float", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_for_bool", "float", "LinearSVR", "liblinear_svr.LibLinear_SVR.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "svm", "import", "LinearSVR", "\n", "\n", "# In case of nested loss", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "dict", ")", ":", "\n", "            ", "combination", "=", "self", ".", "loss", "\n", "self", ".", "loss", "=", "combination", "[", "'loss'", "]", "\n", "self", ".", "dual", "=", "combination", "[", "'dual'", "]", "\n", "\n", "", "self", ".", "epsilon", "=", "float", "(", "self", ".", "epsilon", ")", "\n", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "self", ".", "tol", "=", "float", "(", "self", ".", "tol", ")", "\n", "\n", "self", ".", "dual", "=", "check_for_bool", "(", "self", ".", "dual", ")", "\n", "\n", "self", ".", "fit_intercept", "=", "check_for_bool", "(", "self", ".", "fit_intercept", ")", "\n", "\n", "self", ".", "intercept_scaling", "=", "float", "(", "self", ".", "intercept_scaling", ")", "\n", "\n", "self", ".", "estimator", "=", "LinearSVR", "(", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "dual", "=", "self", ".", "dual", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "C", "=", "self", ".", "C", ",", "\n", "fit_intercept", "=", "self", ".", "fit_intercept", ",", "\n", "intercept_scaling", "=", "self", ".", "intercept_scaling", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.liblinear_svr.LibLinear_SVR.predict": [[58, 62], ["liblinear_svr.LibLinear_SVR.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.liblinear_svr.LibLinear_SVR.get_properties": [[63, 74], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Liblinear-SVR'", ",", "\n", "'name'", ":", "'Liblinear Support Vector Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "False", ",", "\n", "'input'", ":", "(", "SPARSE", ",", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.liblinear_svr.LibLinear_SVR.get_hyperparameter_search_space": [[75, 118], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.forbidden.ForbiddenAndConjunction", "ConfigSpace.configuration_space.ConfigurationSpace.add_forbidden_clause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "hp.choice", "hp.loguniform", "hp.loguniform", "hp.choice", "hp.choice", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "epsilon", "=", "CategoricalHyperparameter", "(", "\"epsilon\"", ",", "[", "1e-4", ",", "1e-3", ",", "1e-2", ",", "1e-1", ",", "1", "]", ",", "default_value", "=", "1e-4", ")", "\n", "loss", "=", "CategoricalHyperparameter", "(", "\n", "\"loss\"", ",", "[", "\"epsilon_insensitive\"", ",", "\"squared_epsilon_insensitive\"", "]", ",", "default_value", "=", "\"epsilon_insensitive\"", ")", "\n", "dual", "=", "CategoricalHyperparameter", "(", "\"dual\"", ",", "[", "'True'", ",", "'False'", "]", ",", "default_value", "=", "'True'", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\n", "\"tol\"", ",", "1e-5", ",", "1e-1", ",", "default_value", "=", "1e-4", ",", "log", "=", "True", ")", "\n", "C", "=", "UniformFloatHyperparameter", "(", "\n", "\"C\"", ",", "0.03125", ",", "32768", ",", "log", "=", "True", ",", "default_value", "=", "1.0", ")", "\n", "fit_intercept", "=", "Constant", "(", "\"fit_intercept\"", ",", "\"True\"", ")", "\n", "intercept_scaling", "=", "Constant", "(", "\"intercept_scaling\"", ",", "1", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "epsilon", ",", "loss", ",", "dual", ",", "tol", ",", "C", ",", "\n", "fit_intercept", ",", "intercept_scaling", "]", ")", "\n", "\n", "dual_and_loss", "=", "ForbiddenAndConjunction", "(", "\n", "ForbiddenEqualsClause", "(", "dual", ",", "\"False\"", ")", ",", "\n", "ForbiddenEqualsClause", "(", "loss", ",", "\"epsilon_insensitive\"", ")", "\n", ")", "\n", "cs", ".", "add_forbidden_clause", "(", "dual_and_loss", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'loss'", ":", "hp", ".", "choice", "(", "'liblinear_combination'", ",", "[", "{", "'loss'", ":", "\"epsilon_insensitive\"", ",", "'dual'", ":", "\"True\"", "}", ",", "\n", "{", "'loss'", ":", "\"squared_epsilon_insensitive\"", ",", "\n", "'dual'", ":", "\"True\"", "}", ",", "\n", "{", "'loss'", ":", "\"squared_epsilon_insensitive\"", ",", "\n", "'dual'", ":", "\"False\"", "}", "]", ")", ",", "\n", "'dual'", ":", "None", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'liblinear_tol'", ",", "np", ".", "log", "(", "1e-5", ")", ",", "np", ".", "log", "(", "1e-1", ")", ")", ",", "\n", "'C'", ":", "hp", ".", "loguniform", "(", "'liblinear_C'", ",", "np", ".", "log", "(", "0.03125", ")", ",", "np", ".", "log", "(", "32768", ")", ")", ",", "\n", "'fit_intercept'", ":", "hp", ".", "choice", "(", "'liblinear_fit_intercept'", ",", "[", "\"True\"", "]", ")", ",", "\n", "'intercept_scaling'", ":", "hp", ".", "choice", "(", "'liblinear_intercept_scaling'", ",", "[", "1", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'loss'", ":", "{", "'loss'", ":", "\"epsilon_insensitive\"", ",", "'dual'", ":", "\"True\"", "}", ",", "\n", "'tol'", ":", "1e-4", ",", "\n", "'C'", ":", "1", ",", "\n", "'fit_intercept'", ":", "\"True\"", ",", "\n", "'intercept_scaling'", ":", "1", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.gradient_boosting.GradientBoostingRegressor.__init__": [[15, 38], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loss", ",", "learning_rate", ",", "n_estimators", ",", "subsample", ",", "\n", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_depth", ",", "criterion", ",", "max_features", ",", "\n", "max_leaf_nodes", ",", "min_impurity_decrease", ",", "random_state", "=", "None", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "subsample", "=", "subsample", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "fully_fit_", "=", "False", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.gradient_boosting.GradientBoostingRegressor.iterative_fit": [[39, 96], ["isinstance", "gradient_boosting.GradientBoostingRegressor.estimator.fit", "numpy.ascontiguousarray", "float", "int", "float", "int", "int", "float", "mindware.components.utils.configspace_utils.check_none", "float", "mindware.components.utils.configspace_utils.check_none", "float", "int", "GBR", "min", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none"], ["", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n", "\n", "        ", "from", "sklearn", ".", "ensemble", ".", "gradient_boosting", "import", "GradientBoostingRegressor", "as", "GBR", "\n", "# Special fix for gradient boosting!", "\n", "if", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "X", "=", "np", ".", "ascontiguousarray", "(", "X", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "", "if", "refit", ":", "\n", "            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "learning_rate", "=", "float", "(", "self", ".", "learning_rate", ")", "\n", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "self", ".", "subsample", "=", "float", "(", "self", ".", "subsample", ")", "\n", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "", "self", ".", "max_features", "=", "float", "(", "self", ".", "max_features", ")", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "self", ".", "verbose", "=", "int", "(", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "estimator", "=", "GBR", "(", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "n_estimators", "=", "n_iter", ",", "\n", "subsample", "=", "self", ".", "subsample", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_features", "=", "self", ".", "max_features", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "warm_start", "=", "True", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "\n", "# Apparently this if is necessary", "\n", "if", "self", ".", "estimator", ".", "n_estimators", ">=", "self", ".", "n_estimators", ":", "\n", "            ", "self", ".", "fully_fit_", "=", "True", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.gradient_boosting.GradientBoostingRegressor.configuration_fully_fitted": [[97, 101], ["len"], "methods", ["None"], ["", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.gradient_boosting.GradientBoostingRegressor.predict": [[102, 106], ["gradient_boosting.GradientBoostingRegressor.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.gradient_boosting.GradientBoostingRegressor.get_properties": [[107, 118], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'GB'", ",", "\n", "'name'", ":", "'Gradient Boosting Regressor'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.gradient_boosting.GradientBoostingRegressor.get_hyperparameter_search_space": [[119, 174], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.loguniform", "hp.choice", "hp.choice", "hp.choice", "hp.uniform", "hp.uniform", "hp.choice", "hp.choice", "numpy.log", "numpy.log", "hp.randint", "hp.randint", "hp.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "loss", "=", "CategoricalHyperparameter", "(", "\"loss\"", ",", "[", "'ls'", ",", "'lad'", "]", ",", "default_value", "=", "'ls'", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"learning_rate\"", ",", "lower", "=", "0.01", ",", "upper", "=", "1", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "\"n_estimators\"", ",", "50", ",", "500", ",", "default_value", "=", "200", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "3", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "'criterion'", ",", "[", "'friedman_mse'", ",", "'mse'", ",", "'mae'", "]", ",", "\n", "default_value", "=", "'friedman_mse'", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"min_samples_split\"", ",", "lower", "=", "2", ",", "upper", "=", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"min_samples_leaf\"", ",", "lower", "=", "1", ",", "upper", "=", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_weight_fraction_leaf\"", ",", "0.", ")", "\n", "subsample", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"subsample\"", ",", "lower", "=", "0.1", ",", "upper", "=", "1.0", ",", "default_value", "=", "1.0", ")", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.1", ",", "1.0", ",", "default_value", "=", "1", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\n", "name", "=", "\"max_leaf_nodes\"", ",", "value", "=", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "\n", "name", "=", "'min_impurity_decrease'", ",", "value", "=", "0.0", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "loss", ",", "learning_rate", ",", "n_estimators", ",", "max_depth", ",", "\n", "criterion", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "subsample", ",", "\n", "max_features", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'loss'", ":", "hp", ".", "choice", "(", "'gb_loss'", ",", "[", "\"ls\"", ",", "\"lad\"", "]", ")", ",", "\n", "'learning_rate'", ":", "hp", ".", "loguniform", "(", "'gb_learning_rate'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "1", ")", ")", ",", "\n", "# 'n_estimators': hp.randint('gb_n_estimators', 451) + 50,", "\n", "'n_estimators'", ":", "hp", ".", "choice", "(", "'gb_n_estimators'", ",", "[", "100", "]", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "randint", "(", "'gb_max_depth'", ",", "8", ")", "+", "1", ",", "\n", "'criterion'", ":", "hp", ".", "choice", "(", "'gb_criterion'", ",", "[", "'friedman_mse'", ",", "'mse'", ",", "'mae'", "]", ")", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'gb_min_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'gb_min_samples_leaf'", ",", "20", ")", "+", "1", ",", "\n", "'min_weight_fraction_leaf'", ":", "hp", ".", "choice", "(", "'gb_min_weight_fraction_leaf'", ",", "[", "0", "]", ")", ",", "\n", "'subsample'", ":", "hp", ".", "uniform", "(", "'gb_subsample'", ",", "0.1", ",", "1", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'gb_max_features'", ",", "0.1", ",", "1", ")", ",", "\n", "'max_leaf_nodes'", ":", "hp", ".", "choice", "(", "'gb_max_leaf_nodes'", ",", "[", "None", "]", ")", ",", "\n", "'min_impurity_decrease'", ":", "hp", ".", "choice", "(", "'gb_min_impurity_decrease'", ",", "[", "0", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'loss'", ":", "\"ls\"", ",", "'learning_rate'", ":", "0.1", ",", "'n_estimators'", ":", "100", ",", "'max_depth'", ":", "3", ",", "\n", "'criterion'", ":", "\"friedman_mse\"", ",", "'min_samples_split'", ":", "2", ",", "'min_samples_leaf'", ":", "1", ",", "\n", "'min_weight_fraction_leaf'", ":", "0", ",", "'subsample'", ":", "1", ",", "'max_features'", ":", "1", ",", "\n", "'max_leaf_nodes'", ":", "None", ",", "'min_impurity_decrease'", ":", "0", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lasso_regression.LassoRegressor.__init__": [[10, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "tol", ",", "max_iter", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lasso_regression.LassoRegressor.fit": [[18, 26], ["Lasso", "lasso_regression.LassoRegressor.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "Lasso", "\n", "self", ".", "estimator", "=", "Lasso", "(", "alpha", "=", "self", ".", "alpha", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "max_iter", "=", "self", ".", "max_iter", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lasso_regression.LassoRegressor.predict": [[27, 31], ["lasso_regression.LassoRegressor.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lasso_regression.LassoRegressor.get_properties": [[32, 43], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Lasso-Regression'", ",", "\n", "'name'", ":", "'Lasso Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lasso_regression.LassoRegressor.get_hyperparameter_search_space": [[44, 65], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.loguniform", "hp.loguniform", "hp.uniform", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "alpha", "=", "UniformFloatHyperparameter", "(", "\"alpha\"", ",", "0.01", ",", "32", ",", "log", "=", "True", ",", "default_value", "=", "1.0", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-6", ",", "1e-2", ",", "default_value", "=", "1e-4", ",", "\n", "log", "=", "True", ")", "\n", "\n", "max_iter", "=", "UniformFloatHyperparameter", "(", "\"max_iter\"", ",", "100", ",", "1000", ",", "q", "=", "100", ",", "default_value", "=", "100", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "alpha", ",", "tol", ",", "max_iter", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'alpha'", ":", "hp", ".", "loguniform", "(", "'lasso_alpha'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "32", ")", ")", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'lasso_tol'", ",", "np", ".", "log", "(", "1e-6", ")", ",", "np", ".", "log", "(", "1e-2", ")", ")", ",", "\n", "'max_iter'", ":", "hp", ".", "uniform", "(", "'lasso_max_iter'", ",", "100", ",", "1000", ")", "}", "\n", "\n", "init_trial", "=", "{", "'alpha'", ":", "1", ",", "'tol'", ":", "1e-4", ",", "'max_iter'", ":", "100", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.__init__": [[18, 37], ["random_forest.RandomForest.get_max_iter", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_max_iter"], ["    ", "def", "__init__", "(", "self", ",", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "bootstrap", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", ",", "random_state", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "self", ".", "get_max_iter", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.get_max_iter": [[38, 41], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_max_iter", "(", ")", ":", "\n", "        ", "return", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.get_current_iter": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_current_iter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "estimator", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.iterative_fit": [[45, 99], ["random_forest.RandomForest.estimator.fit", "int", "mindware.components.utils.configspace_utils.check_none", "int", "int", "float", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_none", "float", "RandomForestRegressor", "min", "int", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none"], ["", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "RandomForestRegressor", "\n", "\n", "if", "refit", ":", "\n", "            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "\n", "", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "\n", "if", "self", ".", "max_features", "not", "in", "(", "\"sqrt\"", ",", "\"log2\"", ",", "\"auto\"", ")", ":", "\n", "                ", "max_features", "=", "int", "(", "X", ".", "shape", "[", "1", "]", "**", "float", "(", "self", ".", "max_features", ")", ")", "\n", "", "else", ":", "\n", "                ", "max_features", "=", "self", ".", "max_features", "\n", "\n", "", "self", ".", "bootstrap", "=", "check_for_bool", "(", "self", ".", "bootstrap", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "\n", "", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "\n", "# initial fit of only increment trees", "\n", "self", ".", "estimator", "=", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "n_iter", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "warm_start", "=", "True", ")", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.configuration_fully_fitted": [[100, 105], ["len"], "methods", ["None"], ["", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.predict": [[106, 110], ["random_forest.RandomForest.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.get_properties": [[111, 122], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'RF'", ",", "\n", "'name'", ":", "'Random Forest Regressor'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.random_forest.RandomForest.get_hyperparameter_search_space": [[123, 175], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.uniform", "hp.choice", "hp.choice", "hp.choice", "hp.choice", "hp.choice", "hp.randint", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ",", "default_value", "=", "\"mse\"", ")", "\n", "\n", "# The maximum number of features used in the forest is calculated as m^max_features, where", "\n", "# m is the total number of features, and max_features is the hyperparameter specified below.", "\n", "# The default is 0.5, which yields sqrt(m) features as max_features in the estimator. This", "\n", "# corresponds with Geurts' heuristic.", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.", ",", "1.", ",", "default_value", "=", "0.5", ")", "\n", "\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "\"max_depth\"", ",", "\"None\"", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_weight_fraction_leaf\"", ",", "0.", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"True\"", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "bootstrap", ",", "min_impurity_decrease", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'criterion'", ":", "hp", ".", "choice", "(", "'rf_criterion'", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'rf_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "choice", "(", "'rf_max_depth'", ",", "[", "None", "]", ")", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'rf_min_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'rf_min_samples_leaf'", ",", "20", ")", "+", "1", ",", "\n", "'min_weight_fraction_leaf'", ":", "hp", ".", "choice", "(", "'rf_min_weight_fraction_leaf'", ",", "[", "0", "]", ")", ",", "\n", "'max_leaf_nodes'", ":", "hp", ".", "choice", "(", "'rf_max_leaf_nodes'", ",", "[", "None", "]", ")", ",", "\n", "'min_impurity_decrease'", ":", "hp", ".", "choice", "(", "'rf_min_impurity_decrease'", ",", "[", "0", "]", ")", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'rf_bootstrap'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'criterion'", ":", "\"mse\"", ",", "\n", "'max_features'", ":", "0.5", ",", "\n", "'max_depth'", ":", "None", ",", "\n", "'min_samples_split'", ":", "2", ",", "\n", "'min_samples_leaf'", ":", "1", ",", "\n", "'min_weight_fraction_leaf'", ":", "0", ",", "\n", "'max_leaf_nodes'", ":", "None", ",", "\n", "'min_impurity_decrease'", ":", "0", ",", "\n", "'bootstrap'", ":", "\"False\"", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.ridge_regression.RidgeRegressor.__init__": [[10, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "solver", ",", "tol", ",", "max_iter", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.ridge_regression.RidgeRegressor.fit": [[19, 28], ["Ridge", "ridge_regression.RidgeRegressor.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "Ridge", "\n", "self", ".", "estimator", "=", "Ridge", "(", "alpha", "=", "self", ".", "alpha", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "max_iter", "=", "self", ".", "max_iter", ",", "\n", "solver", "=", "self", ".", "solver", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.ridge_regression.RidgeRegressor.predict": [[29, 33], ["ridge_regression.RidgeRegressor.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.ridge_regression.RidgeRegressor.get_properties": [[34, 45], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Ridge-Regression'", ",", "\n", "'name'", ":", "'Ridge Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.ridge_regression.RidgeRegressor.get_hyperparameter_search_space": [[46, 69], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.loguniform", "hp.loguniform", "hp.uniform", "hp.choice", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "alpha", "=", "UniformFloatHyperparameter", "(", "\"alpha\"", ",", "0.01", ",", "32", ",", "log", "=", "True", ",", "default_value", "=", "1.0", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-6", ",", "1e-2", ",", "default_value", "=", "1e-4", ",", "\n", "log", "=", "True", ")", "\n", "\n", "max_iter", "=", "UniformFloatHyperparameter", "(", "\"max_iter\"", ",", "100", ",", "1000", ",", "q", "=", "100", ",", "default_value", "=", "100", ")", "\n", "solver", "=", "CategoricalHyperparameter", "(", "\"solver\"", ",", "choices", "=", "[", "\"auto\"", ",", "\"saga\"", "]", ",", "default_value", "=", "\"auto\"", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "alpha", ",", "tol", ",", "max_iter", ",", "solver", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'alpha'", ":", "hp", ".", "loguniform", "(", "'ridge_alpha'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "32", ")", ")", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'ridge_tol'", ",", "np", ".", "log", "(", "1e-6", ")", ",", "np", ".", "log", "(", "1e-2", ")", ")", ",", "\n", "'max_iter'", ":", "hp", ".", "uniform", "(", "'ridge_max_iter'", ",", "100", ",", "1000", ")", ",", "\n", "'solver'", ":", "hp", ".", "choice", "(", "'ridge_solver'", ",", "[", "\"auto\"", ",", "\"saga\"", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'alpha'", ":", "1", ",", "'tol'", ":", "1e-4", ",", "'max_iter'", ":", "100", ",", "'solver'", ":", "\"auto\"", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.adaboost.AdaboostRegressor.__init__": [[12, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "learning_rate", ",", "max_depth", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.adaboost.AdaboostRegressor.fit": [[21, 40], ["int", "float", "int", "DecisionTreeRegressor", "ABR", "ABR.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "AdaBoostRegressor", "as", "ABR", "\n", "from", "sklearn", ".", "tree", "import", "DecisionTreeRegressor", "\n", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "self", ".", "learning_rate", "=", "float", "(", "self", ".", "learning_rate", ")", "\n", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "base_estimator", "=", "DecisionTreeRegressor", "(", "max_depth", "=", "self", ".", "max_depth", ")", "\n", "\n", "estimator", "=", "ABR", "(", "\n", "base_estimator", "=", "base_estimator", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "random_state", "=", "self", ".", "random_state", "\n", ")", "\n", "\n", "estimator", ".", "fit", "(", "X", ",", "Y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.adaboost.AdaboostRegressor.predict": [[41, 45], ["adaboost.AdaboostRegressor.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.adaboost.AdaboostRegressor.get_properties": [[46, 57], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'AB'", ",", "\n", "'name'", ":", "'AdaBoost Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.adaboost.AdaboostRegressor.get_hyperparameter_search_space": [[58, 80], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.loguniform", "hp.randint", "numpy.log", "numpy.log", "hp.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_estimators\"", ",", "lower", "=", "50", ",", "upper", "=", "500", ",", "default_value", "=", "50", ",", "log", "=", "False", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"learning_rate\"", ",", "lower", "=", "0.01", ",", "upper", "=", "2", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "1", ",", "log", "=", "False", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "learning_rate", ",", "max_depth", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "hp", ".", "randint", "(", "'ab_n_estimators'", ",", "451", ")", "+", "50", ",", "\n", "'learning_rate'", ":", "hp", ".", "loguniform", "(", "'ab_learning_rate'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "2", ")", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "randint", "(", "'ab_max_depth'", ",", "10", ")", "+", "1", "}", "\n", "\n", "init_trial", "=", "{", "'n_estimators'", ":", "50", ",", "'learning_rate'", ":", "0.1", ",", "'algorithm'", ":", "\"SAMME.R\"", ",", "'max_depth'", ":", "1", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.k_nearest_neighbors.KNearestNeighborsRegressor.__init__": [[11, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_neighbors", ",", "weights", ",", "p", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "1", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.k_nearest_neighbors.KNearestNeighborsRegressor.fit": [[19, 27], ["KNeighborsRegressor", "k_nearest_neighbors.KNearestNeighborsRegressor.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "neighbors", "import", "KNeighborsRegressor", "\n", "self", ".", "estimator", "=", "KNeighborsRegressor", "(", "n_neighbors", "=", "self", ".", "n_neighbors", ",", "\n", "weights", "=", "self", ".", "weights", ",", "\n", "p", "=", "self", ".", "p", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.k_nearest_neighbors.KNearestNeighborsRegressor.predict": [[28, 32], ["k_nearest_neighbors.KNearestNeighborsRegressor.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.k_nearest_neighbors.KNearestNeighborsRegressor.get_properties": [[33, 44], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'KNN'", ",", "\n", "'name'", ":", "'K-Nearest Neighbor Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.k_nearest_neighbors.KNearestNeighborsRegressor.get_hyperparameter_search_space": [[45, 67], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.choice", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "n_neighbors", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_neighbors\"", ",", "lower", "=", "1", ",", "upper", "=", "100", ",", "log", "=", "True", ",", "default_value", "=", "1", ")", "\n", "weights", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"weights\"", ",", "choices", "=", "[", "\"uniform\"", ",", "\"distance\"", "]", ",", "default_value", "=", "\"uniform\"", ")", "\n", "p", "=", "CategoricalHyperparameter", "(", "name", "=", "\"p\"", ",", "choices", "=", "[", "1", ",", "2", "]", ",", "default_value", "=", "2", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_neighbors", ",", "weights", ",", "p", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_neighbors'", ":", "hp", ".", "randint", "(", "'knn_n_neighbors'", ",", "100", ")", "+", "1", ",", "\n", "'weights'", ":", "hp", ".", "choice", "(", "'knn_weights'", ",", "[", "'uniform'", ",", "'distance'", "]", ")", ",", "\n", "'p'", ":", "hp", ".", "choice", "(", "'knn_p'", ",", "[", "1", ",", "2", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'n_neighbors'", ":", "1", ",", "'weights'", ":", "\"uniform\"", ",", "'p'", ":", "2", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.libsvm_svr.LibSVM_SVR.__init__": [[14, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", ",", "C", ",", "kernel", ",", "gamma", ",", "shrinking", ",", "tol", ",", "max_iter", ",", "\n", "degree", "=", "3", ",", "coef0", "=", "0", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "coef0", "=", "coef0", "\n", "self", ".", "shrinking", "=", "shrinking", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.libsvm_svr.LibSVM_SVR.fit": [[28, 71], ["isinstance", "float", "float", "float", "float", "mindware.components.utils.configspace_utils.check_for_bool", "SVR", "libsvm_svr.LibSVM_SVR.estimator.fit", "int", "float", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "svm", "import", "SVR", "\n", "\n", "# Nested kernel", "\n", "if", "isinstance", "(", "self", ".", "kernel", ",", "tuple", ")", ":", "\n", "            ", "nested_kernel", "=", "self", ".", "kernel", "\n", "self", ".", "kernel", "=", "nested_kernel", "[", "0", "]", "\n", "if", "self", ".", "kernel", "==", "'poly'", ":", "\n", "                ", "self", ".", "degree", "=", "nested_kernel", "[", "1", "]", "[", "'degree'", "]", "\n", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "\n", "", "", "self", ".", "epsilon", "=", "float", "(", "self", ".", "epsilon", ")", "\n", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "if", "self", ".", "degree", "is", "None", ":", "\n", "            ", "self", ".", "degree", "=", "3", "\n", "", "else", ":", "\n", "            ", "self", ".", "degree", "=", "int", "(", "self", ".", "degree", ")", "\n", "", "if", "self", ".", "gamma", "is", "None", ":", "\n", "            ", "self", ".", "gamma", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "float", "(", "self", ".", "gamma", ")", "\n", "", "if", "self", ".", "coef0", "is", "None", ":", "\n", "            ", "self", ".", "coef0", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "coef0", "=", "float", "(", "self", ".", "coef0", ")", "\n", "", "self", ".", "tol", "=", "float", "(", "self", ".", "tol", ")", "\n", "self", ".", "max_iter", "=", "float", "(", "self", ".", "max_iter", ")", "\n", "\n", "self", ".", "shrinking", "=", "check_for_bool", "(", "self", ".", "shrinking", ")", "\n", "\n", "self", ".", "estimator", "=", "SVR", "(", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "C", "=", "self", ".", "C", ",", "\n", "kernel", "=", "self", ".", "kernel", ",", "\n", "degree", "=", "self", ".", "degree", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "coef0", "=", "self", ".", "coef0", ",", "\n", "shrinking", "=", "self", ".", "shrinking", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "max_iter", "=", "self", ".", "max_iter", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.libsvm_svr.LibSVM_SVR.predict": [[72, 76], ["libsvm_svr.LibSVM_SVR.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.libsvm_svr.LibSVM_SVR.get_properties": [[77, 88], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'LibSVM-SVR'", ",", "\n", "'name'", ":", "'LibSVM Support Vector Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.libsvm_svr.LibSVM_SVR.get_hyperparameter_search_space": [[89, 142], ["ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.conditions.EqualsCondition", "ConfigSpace.conditions.InCondition", "ConfigSpace.configuration_space.ConfigurationSpace.add_condition", "ConfigSpace.configuration_space.ConfigurationSpace.add_condition", "hp.uniform", "hp.loguniform", "hp.loguniform", "hp.choice", "hp.loguniform", "hp.choice", "hp.choice", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "hp.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "epsilon", "=", "CategoricalHyperparameter", "(", "\"epsilon\"", ",", "[", "1e-4", ",", "1e-3", ",", "1e-2", ",", "1e-1", ",", "1", "]", ",", "default_value", "=", "1e-4", ")", "\n", "C", "=", "UniformFloatHyperparameter", "(", "\"C\"", ",", "0.03125", ",", "32768", ",", "log", "=", "True", ",", "\n", "default_value", "=", "1.0", ")", "\n", "# No linear kernel here, because we have liblinear", "\n", "kernel", "=", "CategoricalHyperparameter", "(", "name", "=", "\"kernel\"", ",", "\n", "choices", "=", "[", "\"rbf\"", ",", "\"poly\"", ",", "\"sigmoid\"", "]", ",", "\n", "default_value", "=", "\"rbf\"", ")", "\n", "degree", "=", "UniformIntegerHyperparameter", "(", "\"degree\"", ",", "2", ",", "5", ",", "default_value", "=", "3", ")", "\n", "gamma", "=", "UniformFloatHyperparameter", "(", "\"gamma\"", ",", "3.0517578125e-05", ",", "8", ",", "\n", "log", "=", "True", ",", "default_value", "=", "0.1", ")", "\n", "coef0", "=", "UniformFloatHyperparameter", "(", "\"coef0\"", ",", "-", "1", ",", "1", ",", "default_value", "=", "0", ")", "\n", "# probability is no hyperparameter, but an argument to the SVM algo", "\n", "shrinking", "=", "CategoricalHyperparameter", "(", "\"shrinking\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "\n", "default_value", "=", "\"True\"", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-5", ",", "1e-1", ",", "default_value", "=", "1e-3", ",", "\n", "log", "=", "True", ")", "\n", "# cache size is not a hyperparameter, but an argument to the program!", "\n", "max_iter", "=", "UnParametrizedHyperparameter", "(", "\"max_iter\"", ",", "2000", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "epsilon", ",", "C", ",", "kernel", ",", "degree", ",", "gamma", ",", "coef0", ",", "\n", "shrinking", ",", "tol", ",", "max_iter", "]", ")", "\n", "\n", "degree_depends_on_poly", "=", "EqualsCondition", "(", "degree", ",", "kernel", ",", "\"poly\"", ")", "\n", "coef0_condition", "=", "InCondition", "(", "coef0", ",", "kernel", ",", "[", "\"poly\"", ",", "\"sigmoid\"", "]", ")", "\n", "cs", ".", "add_condition", "(", "degree_depends_on_poly", ")", "\n", "cs", ".", "add_condition", "(", "coef0_condition", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "coef0", "=", "hp", ".", "uniform", "(", "\"libsvm_coef0\"", ",", "-", "1", ",", "1", ")", "\n", "space", "=", "{", "'C'", ":", "hp", ".", "loguniform", "(", "'libsvm_C'", ",", "np", ".", "log", "(", "0.03125", ")", ",", "np", ".", "log", "(", "32768", ")", ")", ",", "\n", "'gamma'", ":", "hp", ".", "loguniform", "(", "'libsvm_gamma'", ",", "np", ".", "log", "(", "3.0517578125e-5", ")", ",", "np", ".", "log", "(", "8", ")", ")", ",", "\n", "'shrinking'", ":", "hp", ".", "choice", "(", "'libsvm_shrinking'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'libsvm_tol'", ",", "np", ".", "log", "(", "1e-5", ")", ",", "np", ".", "log", "(", "1e-1", ")", ")", ",", "\n", "'max_iter'", ":", "hp", ".", "choice", "(", "'libsvm_max_iter'", ",", "[", "2000", "]", ")", ",", "\n", "'kernel'", ":", "hp", ".", "choice", "(", "'libsvm_kernel'", ",", "\n", "[", "(", "\"poly\"", ",", "{", "'degree'", ":", "hp", ".", "randint", "(", "'libsvm_degree'", ",", "4", ")", "+", "2", ",", "'coef0'", ":", "coef0", "}", ")", ",", "\n", "(", "\"rbf\"", ",", "{", "}", ")", ",", "\n", "(", "\"sigmoid\"", ",", "{", "'coef0'", ":", "coef0", "}", ")", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'C'", ":", "1", ",", "\n", "'gamma'", ":", "0.1", ",", "\n", "'shrinking'", ":", "\"True\"", ",", "\n", "'tol'", ":", "1e-3", ",", "\n", "'max_iter'", ":", "2000", ",", "\n", "'kernel'", ":", "(", "\"rbf\"", ",", "{", "}", ")", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lightgbm.LightGBM.__init__": [[13, 27], ["None"], "methods", ["None"], ["class", "LightGBM", "(", "AutoSklearnClassificationAlgorithm", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "learning_rate", ",", "num_leaves", ",", "max_depth", ",", "min_child_samples", ",", "\n", "subsample", ",", "colsample_bytree", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "int", "(", "n_estimators", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "num_leaves", "=", "num_leaves", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "subsample", "=", "subsample", "\n", "self", ".", "min_child_samples", "=", "min_child_samples", "\n", "self", ".", "colsample_bytree", "=", "colsample_bytree", "\n", "\n", "self", ".", "n_jobs", "=", "1", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lightgbm.LightGBM.fit": [[28, 42], ["LGBMRegressor", "lightgbm.LightGBM.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "self", ".", "estimator", "=", "LGBMClassifier", "(", "num_leaves", "=", "self", ".", "num_leaves", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "min_child_samples", "=", "self", ".", "min_child_samples", ",", "\n", "subsample", "=", "self", ".", "subsample", ",", "\n", "colsample_bytree", "=", "self", ".", "colsample_bytree", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lightgbm.LightGBM.predict": [[43, 47], ["lightgbm.LightGBM.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lightgbm.LightGBM.get_properties": [[48, 59], ["None"], "methods", ["None"], ["", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'LightGBM Classifier'", ",", "\n", "'name'", ":", "'LightGBM Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "False", ",", "\n", "'input'", ":", "(", "SPARSE", ",", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.lightgbm.LightGBM.get_hyperparameter_search_space": [[60, 98], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.loguniform", "hp.uniform", "hp.uniform", "hp.loguniform", "hp.loguniform", "hp.randint", "hp.randint", "numpy.log", "numpy.log", "hp.randint", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformFloatHyperparameter", "(", "\"n_estimators\"", ",", "100", ",", "1000", ",", "default_value", "=", "500", ",", "q", "=", "50", ")", "\n", "num_leaves", "=", "UniformIntegerHyperparameter", "(", "\"num_leaves\"", ",", "31", ",", "2047", ",", "default_value", "=", "128", ")", "\n", "max_depth", "=", "Constant", "(", "'max_depth'", ",", "15", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\"learning_rate\"", ",", "1e-3", ",", "0.3", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "min_child_samples", "=", "UniformIntegerHyperparameter", "(", "\"min_child_samples\"", ",", "5", ",", "30", ",", "default_value", "=", "20", ")", "\n", "subsample", "=", "UniformFloatHyperparameter", "(", "\"subsample\"", ",", "0.7", ",", "1", ",", "default_value", "=", "1", ",", "q", "=", "0.1", ")", "\n", "colsample_bytree", "=", "UniformFloatHyperparameter", "(", "\"colsample_bytree\"", ",", "0.7", ",", "1", ",", "default_value", "=", "1", ",", "q", "=", "0.1", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "num_leaves", ",", "max_depth", ",", "learning_rate", ",", "min_child_samples", ",", "subsample", ",", "\n", "colsample_bytree", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.__init__": [[15, 42], ["extra_trees.ExtraTreesRegressor.get_max_iter", "mindware.components.utils.configspace_utils.check_none", "mindware.components.utils.configspace_utils.check_none", "int", "int", "float", "mindware.components.utils.configspace_utils.check_for_bool", "float", "float", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_max_iter", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool"], ["    ", "def", "__init__", "(", "self", ",", "criterion", ",", "min_samples_leaf", ",", "\n", "min_samples_split", ",", "max_features", ",", "bootstrap", ",", "max_leaf_nodes", ",", "\n", "max_depth", ",", "min_weight_fraction_leaf", ",", "min_impurity_decrease", ",", "\n", "oob_score", "=", "False", ",", "n_jobs", "=", "1", ",", "random_state", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "self", ".", "get_max_iter", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n", "if", "check_none", "(", "max_depth", ")", ":", "\n", "            ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_depth", "=", "int", "(", "max_depth", ")", "\n", "", "if", "check_none", "(", "max_leaf_nodes", ")", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "int", "(", "max_leaf_nodes", ")", "\n", "\n", "", "self", ".", "min_samples_leaf", "=", "int", "(", "min_samples_leaf", ")", "\n", "self", ".", "min_samples_split", "=", "int", "(", "min_samples_split", ")", "\n", "self", ".", "max_features", "=", "float", "(", "max_features", ")", "\n", "self", ".", "bootstrap", "=", "check_for_bool", "(", "bootstrap", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "min_weight_fraction_leaf", ")", "\n", "self", ".", "min_impurity_decrease", "=", "float", "(", "min_impurity_decrease", ")", "\n", "self", ".", "oob_score", "=", "oob_score", "\n", "self", ".", "n_jobs", "=", "int", "(", "n_jobs", ")", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "verbose", "=", "int", "(", "verbose", ")", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.get_max_iter": [[43, 46], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_max_iter", "(", ")", ":", "\n", "        ", "return", "512", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.get_current_iter": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get_current_iter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "estimator", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.iterative_fit": [[50, 81], ["extra_trees.ExtraTreesRegressor.estimator.fit", "int", "ETR", "min", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "ExtraTreesRegressor", "as", "ETR", "\n", "\n", "if", "refit", ":", "\n", "            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "max_features", "=", "int", "(", "X", ".", "shape", "[", "1", "]", "**", "float", "(", "self", ".", "max_features", ")", ")", "\n", "self", ".", "estimator", "=", "ETR", "(", "n_estimators", "=", "n_iter", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "oob_score", "=", "self", ".", "oob_score", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "warm_start", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.configuration_fully_fitted": [[82, 86], ["len"], "methods", ["None"], ["", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.predict": [[87, 91], ["extra_trees.ExtraTreesRegressor.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.get_properties": [[92, 103], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'ET'", ",", "\n", "'name'", ":", "'Extra Trees Regressor'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.extra_trees.ExtraTreesRegressor.get_hyperparameter_search_space": [[104, 147], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.uniform", "hp.choice", "hp.randint", "hp.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ",", "default_value", "=", "\"mse\"", ")", "\n", "\n", "# The maximum number of features used in the forest is calculated as m^max_features, where", "\n", "# m is the total number of features, and max_features is the hyperparameter specified below.", "\n", "# The default is 0.5, which yields sqrt(m) features as max_features in the estimator. This", "\n", "# corresponds with Geurts' heuristic.", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.", ",", "1.", ",", "default_value", "=", "0.5", ")", "\n", "\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "name", "=", "\"max_depth\"", ",", "value", "=", "\"None\"", ")", "\n", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "'min_weight_fraction_leaf'", ",", "0.", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", ",", "bootstrap", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'criterion'", ":", "hp", ".", "choice", "(", "'et_criterion'", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'et_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'et_min_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'et_min_samples_leaf,'", ",", "20", ")", "+", "1", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'et_bootstrap'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'criterion'", ":", "\"mse\"", ",", "'max_features'", ":", "0.5", ",", "\n", "'min_samples_split'", ":", "2", ",", "'min_samples_leaf'", ":", "1", ",", "'bootstrap'", ":", "\"False\"", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.regression.__init__.add_regressor": [[17, 19], ["_addons.add_component"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.libsvm_svc.LibSVM_SVC.__init__": [[15, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "kernel", ",", "gamma", ",", "shrinking", ",", "tol", ",", "max_iter", ",", "\n", "class_weight", "=", "None", ",", "degree", "=", "3", ",", "coef0", "=", "0", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "C", "=", "C", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "coef0", "=", "coef0", "\n", "self", ".", "shrinking", "=", "shrinking", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.libsvm_svc.LibSVM_SVC.fit": [[30, 76], ["isinstance", "float", "float", "float", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_none", "sklearn.svm.SVC", "libsvm_svc.LibSVM_SVC.estimator.fit", "int", "float", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "import", "sklearn", ".", "svm", "\n", "# Nested kernel", "\n", "if", "isinstance", "(", "self", ".", "kernel", ",", "tuple", ")", ":", "\n", "            ", "nested_kernel", "=", "self", ".", "kernel", "\n", "self", ".", "kernel", "=", "nested_kernel", "[", "0", "]", "\n", "if", "self", ".", "kernel", "==", "'poly'", ":", "\n", "                ", "self", ".", "degree", "=", "nested_kernel", "[", "1", "]", "[", "'degree'", "]", "\n", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "", "elif", "self", ".", "kernel", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "coef0", "=", "nested_kernel", "[", "1", "]", "[", "'coef0'", "]", "\n", "\n", "", "", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "if", "self", ".", "degree", "is", "None", ":", "\n", "            ", "self", ".", "degree", "=", "3", "\n", "", "else", ":", "\n", "            ", "self", ".", "degree", "=", "int", "(", "self", ".", "degree", ")", "\n", "", "if", "self", ".", "gamma", "is", "None", ":", "\n", "            ", "self", ".", "gamma", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "float", "(", "self", ".", "gamma", ")", "\n", "", "if", "self", ".", "coef0", "is", "None", ":", "\n", "            ", "self", ".", "coef0", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "coef0", "=", "float", "(", "self", ".", "coef0", ")", "\n", "", "self", ".", "tol", "=", "float", "(", "self", ".", "tol", ")", "\n", "self", ".", "max_iter", "=", "float", "(", "self", ".", "max_iter", ")", "\n", "\n", "self", ".", "shrinking", "=", "check_for_bool", "(", "self", ".", "shrinking", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "class_weight", ")", ":", "\n", "            ", "self", ".", "class_weight", "=", "None", "\n", "\n", "", "self", ".", "estimator", "=", "sklearn", ".", "svm", ".", "SVC", "(", "C", "=", "self", ".", "C", ",", "\n", "kernel", "=", "self", ".", "kernel", ",", "\n", "degree", "=", "self", ".", "degree", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "coef0", "=", "self", ".", "coef0", ",", "\n", "shrinking", "=", "self", ".", "shrinking", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "max_iter", "=", "self", ".", "max_iter", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "decision_function_shape", "=", "'ovr'", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.libsvm_svc.LibSVM_SVC.predict": [[77, 81], ["libsvm_svc.LibSVM_SVC.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.libsvm_svc.LibSVM_SVC.predict_proba": [[82, 87], ["libsvm_svc.LibSVM_SVC.estimator.decision_function", "mindware.components.utils.model_util.softmax", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "decision", "=", "self", ".", "estimator", ".", "decision_function", "(", "X", ")", "\n", "return", "softmax", "(", "decision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.libsvm_svc.LibSVM_SVC.get_properties": [[88, 99], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'LibSVM-SVC'", ",", "\n", "'name'", ":", "'LibSVM Support Vector Classification'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.libsvm_svc.LibSVM_SVC.get_hyperparameter_search_space": [[100, 151], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.conditions.EqualsCondition", "ConfigSpace.conditions.InCondition", "ConfigSpace.configuration_space.ConfigurationSpace.add_condition", "ConfigSpace.configuration_space.ConfigurationSpace.add_condition", "hp.uniform", "hp.loguniform", "hp.loguniform", "hp.choice", "hp.loguniform", "hp.choice", "hp.choice", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "hp.randint"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "C", "=", "UniformFloatHyperparameter", "(", "\"C\"", ",", "0.03125", ",", "32768", ",", "log", "=", "True", ",", "\n", "default_value", "=", "1.0", ")", "\n", "# No linear kernel here, because we have liblinear", "\n", "kernel", "=", "CategoricalHyperparameter", "(", "name", "=", "\"kernel\"", ",", "\n", "choices", "=", "[", "\"rbf\"", ",", "\"poly\"", ",", "\"sigmoid\"", "]", ",", "\n", "default_value", "=", "\"rbf\"", ")", "\n", "degree", "=", "UniformIntegerHyperparameter", "(", "\"degree\"", ",", "2", ",", "5", ",", "default_value", "=", "3", ")", "\n", "gamma", "=", "UniformFloatHyperparameter", "(", "\"gamma\"", ",", "3.0517578125e-05", ",", "8", ",", "\n", "log", "=", "True", ",", "default_value", "=", "0.1", ")", "\n", "coef0", "=", "UniformFloatHyperparameter", "(", "\"coef0\"", ",", "-", "1", ",", "1", ",", "default_value", "=", "0", ")", "\n", "shrinking", "=", "CategoricalHyperparameter", "(", "\"shrinking\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "\n", "default_value", "=", "\"True\"", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-5", ",", "1e-1", ",", "default_value", "=", "1e-3", ",", "\n", "log", "=", "True", ")", "\n", "# cache size is not a hyperparameter, but an argument to the program!", "\n", "max_iter", "=", "UnParametrizedHyperparameter", "(", "\"max_iter\"", ",", "10000", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "C", ",", "kernel", ",", "degree", ",", "gamma", ",", "coef0", ",", "shrinking", ",", "\n", "tol", ",", "max_iter", "]", ")", "\n", "\n", "degree_depends_on_poly", "=", "EqualsCondition", "(", "degree", ",", "kernel", ",", "\"poly\"", ")", "\n", "coef0_condition", "=", "InCondition", "(", "coef0", ",", "kernel", ",", "[", "\"poly\"", ",", "\"sigmoid\"", "]", ")", "\n", "cs", ".", "add_condition", "(", "degree_depends_on_poly", ")", "\n", "cs", ".", "add_condition", "(", "coef0_condition", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "coef0", "=", "hp", ".", "uniform", "(", "\"libsvm_coef0\"", ",", "-", "1", ",", "1", ")", "\n", "space", "=", "{", "'C'", ":", "hp", ".", "loguniform", "(", "'libsvm_C'", ",", "np", ".", "log", "(", "0.03125", ")", ",", "np", ".", "log", "(", "32768", ")", ")", ",", "\n", "'gamma'", ":", "hp", ".", "loguniform", "(", "'libsvm_gamma'", ",", "np", ".", "log", "(", "3.0517578125e-5", ")", ",", "np", ".", "log", "(", "8", ")", ")", ",", "\n", "'shrinking'", ":", "hp", ".", "choice", "(", "'libsvm_shrinking'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'libsvm_tol'", ",", "np", ".", "log", "(", "1e-5", ")", ",", "np", ".", "log", "(", "1e-1", ")", ")", ",", "\n", "'max_iter'", ":", "hp", ".", "choice", "(", "'libsvm_max_iter'", ",", "[", "2000", "]", ")", ",", "\n", "'kernel'", ":", "hp", ".", "choice", "(", "'libsvm_kernel'", ",", "\n", "[", "(", "\"poly\"", ",", "{", "'degree'", ":", "hp", ".", "randint", "(", "'libsvm_degree'", ",", "4", ")", "+", "2", ",", "'coef0'", ":", "coef0", "}", ")", ",", "\n", "(", "\"rbf\"", ",", "{", "}", ")", ",", "\n", "(", "\"sigmoid\"", ",", "{", "'coef0'", ":", "coef0", "}", ")", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'C'", ":", "1", ",", "\n", "'gamma'", ":", "0.1", ",", "\n", "'shrinking'", ":", "\"True\"", ",", "\n", "'tol'", ":", "1e-3", ",", "\n", "'max_iter'", ":", "2000", ",", "\n", "'kernel'", ":", "(", "\"rbf\"", ",", "{", "}", ")", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.liblinear_svc.LibLinear_SVC.__init__": [[16, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "penalty", ",", "loss", ",", "dual", ",", "tol", ",", "C", ",", "multi_class", ",", "\n", "fit_intercept", ",", "intercept_scaling", ",", "class_weight", "=", "None", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "dual", "=", "dual", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "multi_class", "=", "multi_class", "\n", "self", ".", "fit_intercept", "=", "fit_intercept", "\n", "self", ".", "intercept_scaling", "=", "intercept_scaling", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.liblinear_svc.LibLinear_SVC.fit": [[32, 73], ["isinstance", "float", "float", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_for_bool", "float", "mindware.components.utils.configspace_utils.check_none", "sklearn.svm.LinearSVC", "liblinear_svc.LibLinear_SVC.estimator.fit", "sklearn.multiclass.OneVsRestClassifier", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "import", "sklearn", ".", "svm", "\n", "import", "sklearn", ".", "multiclass", "\n", "\n", "# In case of nested penalty", "\n", "if", "isinstance", "(", "self", ".", "penalty", ",", "dict", ")", ":", "\n", "            ", "combination", "=", "self", ".", "penalty", "\n", "self", ".", "penalty", "=", "combination", "[", "'penalty'", "]", "\n", "self", ".", "loss", "=", "combination", "[", "'loss'", "]", "\n", "self", ".", "dual", "=", "combination", "[", "'dual'", "]", "\n", "\n", "", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "self", ".", "tol", "=", "float", "(", "self", ".", "tol", ")", "\n", "\n", "self", ".", "dual", "=", "check_for_bool", "(", "self", ".", "dual", ")", "\n", "\n", "self", ".", "fit_intercept", "=", "check_for_bool", "(", "self", ".", "fit_intercept", ")", "\n", "\n", "self", ".", "intercept_scaling", "=", "float", "(", "self", ".", "intercept_scaling", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "class_weight", ")", ":", "\n", "            ", "self", ".", "class_weight", "=", "None", "\n", "\n", "", "estimator", "=", "sklearn", ".", "svm", ".", "LinearSVC", "(", "penalty", "=", "self", ".", "penalty", ",", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "dual", "=", "self", ".", "dual", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "C", "=", "self", ".", "C", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "\n", "fit_intercept", "=", "self", ".", "fit_intercept", ",", "\n", "intercept_scaling", "=", "self", ".", "intercept_scaling", ",", "\n", "multi_class", "=", "self", ".", "multi_class", ",", "\n", "random_state", "=", "self", ".", "random_state", ")", "\n", "\n", "if", "len", "(", "Y", ".", "shape", ")", "==", "2", "and", "Y", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "            ", "self", ".", "estimator", "=", "sklearn", ".", "multiclass", ".", "OneVsRestClassifier", "(", "estimator", ",", "n_jobs", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", "=", "estimator", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.liblinear_svc.LibLinear_SVC.predict": [[74, 78], ["liblinear_svc.LibLinear_SVC.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.liblinear_svc.LibLinear_SVC.predict_proba": [[79, 85], ["liblinear_svc.LibLinear_SVC.estimator.decision_function", "mindware.components.utils.model_util.softmax", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "df", "=", "self", ".", "estimator", ".", "decision_function", "(", "X", ")", "\n", "return", "softmax", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.liblinear_svc.LibLinear_SVC.get_properties": [[86, 97], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'Liblinear-SVC'", ",", "\n", "'name'", ":", "'Liblinear Support Vector Classification'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "False", ",", "\n", "'input'", ":", "(", "SPARSE", ",", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.liblinear_svc.LibLinear_SVC.get_hyperparameter_search_space": [[98, 160], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.forbidden.ForbiddenAndConjunction", "ConfigSpace.forbidden.ForbiddenAndConjunction", "ConfigSpace.forbidden.ForbiddenAndConjunction", "ConfigSpace.configuration_space.ConfigurationSpace.add_forbidden_clause", "ConfigSpace.configuration_space.ConfigurationSpace.add_forbidden_clause", "ConfigSpace.configuration_space.ConfigurationSpace.add_forbidden_clause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "ConfigSpace.forbidden.ForbiddenEqualsClause", "hp.choice", "hp.loguniform", "hp.loguniform", "hp.choice", "hp.choice", "hp.choice", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "penalty", "=", "CategoricalHyperparameter", "(", "\n", "\"penalty\"", ",", "[", "\"l1\"", ",", "\"l2\"", "]", ",", "default_value", "=", "\"l2\"", ")", "\n", "loss", "=", "CategoricalHyperparameter", "(", "\n", "\"loss\"", ",", "[", "\"hinge\"", ",", "\"squared_hinge\"", "]", ",", "default_value", "=", "\"squared_hinge\"", ")", "\n", "dual", "=", "CategoricalHyperparameter", "(", "\"dual\"", ",", "[", "'True'", ",", "'False'", "]", ",", "default_value", "=", "'True'", ")", "\n", "# This is set ad-hoc", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\n", "\"tol\"", ",", "1e-5", ",", "1e-1", ",", "default_value", "=", "1e-4", ",", "log", "=", "True", ")", "\n", "C", "=", "UniformFloatHyperparameter", "(", "\n", "\"C\"", ",", "0.03125", ",", "32768", ",", "log", "=", "True", ",", "default_value", "=", "1.0", ")", "\n", "multi_class", "=", "Constant", "(", "\"multi_class\"", ",", "\"ovr\"", ")", "\n", "# These are set ad-hoc", "\n", "fit_intercept", "=", "Constant", "(", "\"fit_intercept\"", ",", "\"True\"", ")", "\n", "intercept_scaling", "=", "Constant", "(", "\"intercept_scaling\"", ",", "1", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "penalty", ",", "loss", ",", "dual", ",", "tol", ",", "C", ",", "multi_class", ",", "\n", "fit_intercept", ",", "intercept_scaling", "]", ")", "\n", "\n", "penalty_and_loss", "=", "ForbiddenAndConjunction", "(", "\n", "ForbiddenEqualsClause", "(", "penalty", ",", "\"l1\"", ")", ",", "\n", "ForbiddenEqualsClause", "(", "loss", ",", "\"hinge\"", ")", "\n", ")", "\n", "constant_penalty_and_loss", "=", "ForbiddenAndConjunction", "(", "\n", "ForbiddenEqualsClause", "(", "dual", ",", "\"False\"", ")", ",", "\n", "ForbiddenEqualsClause", "(", "penalty", ",", "\"l2\"", ")", ",", "\n", "ForbiddenEqualsClause", "(", "loss", ",", "\"hinge\"", ")", "\n", ")", "\n", "penalty_and_dual", "=", "ForbiddenAndConjunction", "(", "\n", "ForbiddenEqualsClause", "(", "dual", ",", "\"True\"", ")", ",", "\n", "ForbiddenEqualsClause", "(", "penalty", ",", "\"l1\"", ")", "\n", ")", "\n", "cs", ".", "add_forbidden_clause", "(", "penalty_and_loss", ")", "\n", "cs", ".", "add_forbidden_clause", "(", "constant_penalty_and_loss", ")", "\n", "cs", ".", "add_forbidden_clause", "(", "penalty_and_dual", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'penalty'", ":", "hp", ".", "choice", "(", "'liblinear_combination'", ",", "\n", "[", "{", "'penalty'", ":", "\"l1\"", ",", "'loss'", ":", "\"squared_hinge\"", ",", "'dual'", ":", "\"False\"", "}", ",", "\n", "{", "'penalty'", ":", "\"l2\"", ",", "'loss'", ":", "\"hinge\"", ",", "'dual'", ":", "\"True\"", "}", ",", "\n", "{", "'penalty'", ":", "\"l2\"", ",", "'loss'", ":", "\"squared_hinge\"", ",", "'dual'", ":", "\"True\"", "}", ",", "\n", "{", "'penalty'", ":", "\"l2\"", ",", "'loss'", ":", "\"squared_hinge\"", ",", "'dual'", ":", "\"False\"", "}", "]", ")", ",", "\n", "'loss'", ":", "None", ",", "\n", "'dual'", ":", "None", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'liblinear_tol'", ",", "np", ".", "log", "(", "1e-5", ")", ",", "np", ".", "log", "(", "1e-1", ")", ")", ",", "\n", "'C'", ":", "hp", ".", "loguniform", "(", "'liblinear_C'", ",", "np", ".", "log", "(", "0.03125", ")", ",", "np", ".", "log", "(", "32768", ")", ")", ",", "\n", "'multi_class'", ":", "hp", ".", "choice", "(", "'liblinear_multi_class'", ",", "[", "\"ovr\"", "]", ")", ",", "\n", "'fit_intercept'", ":", "hp", ".", "choice", "(", "'liblinear_fit_intercept'", ",", "[", "\"True\"", "]", ")", ",", "\n", "'intercept_scaling'", ":", "hp", ".", "choice", "(", "'liblinear_intercept_scaling'", ",", "[", "1", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'penalty'", ":", "{", "'penalty'", ":", "\"l2\"", ",", "'loss'", ":", "\"squared_hinge\"", ",", "'dual'", ":", "\"True\"", "}", ",", "\n", "'tol'", ":", "1e-4", ",", "\n", "'C'", ":", "1", ",", "\n", "'multiclass'", ":", "\"ovr\"", ",", "\n", "'fit_intercept'", ":", "\"True\"", ",", "\n", "'intercept_scaling'", ":", "1", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.__init__": [[17, 38], ["None"], "methods", ["None"], ["min_weight_fraction_leaf", ",", "max_depth", ",", "criterion", ",", "max_features", ",", "\n", "max_leaf_nodes", ",", "min_impurity_decrease", ",", "random_state", "=", "None", ",", "\n", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "subsample", "=", "subsample", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "fully_fit_", "=", "False", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.iterative_fit": [[39, 95], ["isinstance", "gradient_boosting.GradientBoostingClassifier.estimator.fit", "numpy.ascontiguousarray", "float", "int", "float", "int", "int", "float", "mindware.components.utils.configspace_utils.check_none", "float", "mindware.components.utils.configspace_utils.check_none", "float", "int", "sklearn.ensemble.GradientBoostingClassifier", "min", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none"], ["", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n", "\n", "        ", "from", "sklearn", ".", "ensemble", ".", "gradient_boosting", "import", "GradientBoostingRegressor", "as", "GBR", "\n", "# Special fix for gradient boosting!", "\n", "if", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "X", "=", "np", ".", "ascontiguousarray", "(", "X", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "", "if", "refit", ":", "\n", "            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "learning_rate", "=", "float", "(", "self", ".", "learning_rate", ")", "\n", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "self", ".", "subsample", "=", "float", "(", "self", ".", "subsample", ")", "\n", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "", "self", ".", "max_features", "=", "float", "(", "self", ".", "max_features", ")", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "self", ".", "verbose", "=", "int", "(", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "estimator", "=", "GBR", "(", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "n_estimators", "=", "n_iter", ",", "\n", "subsample", "=", "self", ".", "subsample", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_features", "=", "self", ".", "max_features", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "warm_start", "=", "True", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "\n", "# Apparently this if is necessary", "\n", "if", "self", ".", "estimator", ".", "n_estimators", ">=", "self", ".", "n_estimators", ":", "\n", "            ", "self", ".", "fully_fit_", "=", "True", "\n", "\n", "", "return", "self", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.configuration_fully_fitted": [[96, 100], ["len"], "methods", ["None"], ["\n", "", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.predict": [[101, 105], ["gradient_boosting.GradientBoostingClassifier.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.predict_proba": [[106, 110], ["gradient_boosting.GradientBoostingClassifier.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["\n", "", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'GB'", ",", "\n", "'name'", ":", "'Gradient Boosting Regressor'", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.get_properties": [[111, 122], ["None"], "methods", ["None"], ["'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.gradient_boosting.GradientBoostingClassifier.get_hyperparameter_search_space": [[123, 157], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["loss", "=", "CategoricalHyperparameter", "(", "\"loss\"", ",", "[", "'ls'", ",", "'lad'", "]", ",", "default_value", "=", "'ls'", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"learning_rate\"", ",", "lower", "=", "0.01", ",", "upper", "=", "1", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "\"n_estimators\"", ",", "50", ",", "500", ",", "default_value", "=", "200", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "3", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "'criterion'", ",", "[", "'friedman_mse'", ",", "'mse'", ",", "'mae'", "]", ",", "\n", "default_value", "=", "'friedman_mse'", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"min_samples_split\"", ",", "lower", "=", "2", ",", "upper", "=", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"min_samples_leaf\"", ",", "lower", "=", "1", ",", "upper", "=", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_weight_fraction_leaf\"", ",", "0.", ")", "\n", "subsample", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"subsample\"", ",", "lower", "=", "0.1", ",", "upper", "=", "1.0", ",", "default_value", "=", "1.0", ")", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.1", ",", "1.0", ",", "default_value", "=", "1", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\n", "name", "=", "\"max_leaf_nodes\"", ",", "value", "=", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "\n", "name", "=", "'min_impurity_decrease'", ",", "value", "=", "0.0", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "loss", ",", "learning_rate", ",", "n_estimators", ",", "max_depth", ",", "\n", "criterion", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "subsample", ",", "\n", "max_features", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'loss'", ":", "hp", ".", "choice", "(", "'gb_loss'", ",", "[", "\"ls\"", ",", "\"lad\"", "]", ")", ",", "\n", "'learning_rate'", ":", "hp", ".", "loguniform", "(", "'gb_learning_rate'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "1", ")", ")", ",", "\n", "# 'n_estimators': hp.randint('gb_n_estimators', 451) + 50,", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lda.LDA.__init__": [[14, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shrinkage", ",", "n_components", ",", "tol", ",", "shrinkage_factor", "=", "0.5", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "shrinkage", "=", "shrinkage", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "shrinkage_factor", "=", "shrinkage_factor", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lda.LDA.fit": [[23, 58], ["isinstance", "mindware.components.utils.configspace_utils.check_none", "int", "float", "LinearDiscriminantAnalysis", "lda.LDA.estimator.fit", "sklearn.multiclass.OneVsRestClassifier", "len", "float", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "import", "sklearn", ".", "multiclass", "\n", "from", "sklearn", ".", "discriminant_analysis", "import", "LinearDiscriminantAnalysis", "\n", "\n", "# In case of nested shrinkage", "\n", "if", "isinstance", "(", "self", ".", "shrinkage", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "shrinkage_factor", "=", "self", ".", "shrinkage", "[", "1", "]", "[", "'shrinkage_factor'", "]", "\n", "self", ".", "shrinkage", "=", "self", ".", "shrinkage", "[", "0", "]", "\n", "\n", "", "if", "check_none", "(", "self", ".", "shrinkage", ")", ":", "\n", "            ", "self", ".", "shrinkage_", "=", "None", "\n", "solver", "=", "'svd'", "\n", "", "elif", "self", ".", "shrinkage", "==", "\"auto\"", ":", "\n", "            ", "self", ".", "shrinkage_", "=", "'auto'", "\n", "solver", "=", "'lsqr'", "\n", "", "elif", "self", ".", "shrinkage", "==", "\"manual\"", ":", "\n", "            ", "self", ".", "shrinkage_", "=", "float", "(", "self", ".", "shrinkage_factor", ")", "\n", "solver", "=", "'lsqr'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "self", ".", "shrinkage", ")", "\n", "\n", "", "self", ".", "n_components", "=", "int", "(", "self", ".", "n_components", ")", "\n", "self", ".", "tol", "=", "float", "(", "self", ".", "tol", ")", "\n", "\n", "estimator", "=", "LinearDiscriminantAnalysis", "(", "\n", "n_components", "=", "self", ".", "n_components", ",", "shrinkage", "=", "self", ".", "shrinkage_", ",", "\n", "tol", "=", "self", ".", "tol", ",", "solver", "=", "solver", ")", "\n", "\n", "if", "len", "(", "Y", ".", "shape", ")", "==", "2", "and", "Y", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "            ", "self", ".", "estimator", "=", "sklearn", ".", "multiclass", ".", "OneVsRestClassifier", "(", "estimator", ",", "n_jobs", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", "=", "estimator", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lda.LDA.predict": [[59, 63], ["lda.LDA.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lda.LDA.predict_proba": [[64, 70], ["lda.LDA.estimator.predict_proba", "mindware.components.utils.model_util.softmax", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "df", "=", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "return", "softmax", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lda.LDA.get_properties": [[71, 82], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'LDA'", ",", "\n", "'name'", ":", "'Linear Discriminant Analysis'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lda.LDA.get_hyperparameter_search_space": [[83, 106], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "ConfigSpace.configuration_space.ConfigurationSpace.add_condition", "ConfigSpace.conditions.EqualsCondition", "hp.loguniform", "hp.choice", "hp.randint", "numpy.log", "numpy.log", "hp.uniform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.log"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "shrinkage", "=", "CategoricalHyperparameter", "(", "\n", "\"shrinkage\"", ",", "[", "\"None\"", ",", "\"auto\"", ",", "\"manual\"", "]", ",", "default_value", "=", "\"None\"", ")", "\n", "shrinkage_factor", "=", "UniformFloatHyperparameter", "(", "\n", "\"shrinkage_factor\"", ",", "0.", ",", "1.", ",", "0.5", ")", "\n", "n_components", "=", "UniformIntegerHyperparameter", "(", "'n_components'", ",", "1", ",", "250", ",", "default_value", "=", "1", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-5", ",", "1e-1", ",", "default_value", "=", "1e-4", ",", "log", "=", "True", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "shrinkage", ",", "shrinkage_factor", ",", "n_components", ",", "tol", "]", ")", "\n", "\n", "cs", ".", "add_condition", "(", "EqualsCondition", "(", "shrinkage_factor", ",", "shrinkage", ",", "\"manual\"", ")", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_components'", ":", "hp", ".", "randint", "(", "'lda_n_components'", ",", "250", ")", "+", "1", ",", "\n", "'tol'", ":", "hp", ".", "loguniform", "(", "'lda_tol'", ",", "np", ".", "log", "(", "1e-5", ")", ",", "np", ".", "log", "(", "1e-1", ")", ")", ",", "\n", "'shrinkage'", ":", "hp", ".", "choice", "(", "'lda_shrinkage'", ",", "[", "\"None\"", ",", "\"auto\"", ",", "(", "\n", "\"manual\"", ",", "{", "'shrinkage_factor'", ":", "hp", ".", "uniform", "(", "'lda_shrinkage_factor'", ",", "0", ",", "1", ")", "}", ")", "]", ")", "\n", "}", "\n", "init_trial", "=", "{", "'n_components'", ":", "10", ",", "'tol'", ":", "1e-4", ",", "'shrinkage'", ":", "\"None\"", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.logistic_regression.Logistic_Regression.__init__": [[11, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "penalty", ",", "solver", ",", "tol", ",", "max_iter", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "C", "=", "C", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n", "", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "linear_model", "import", "LogisticRegression", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.logistic_regression.Logistic_Regression.fit": [[23, 38], ["float", "LogisticRegression", "logistic_regression.Logistic_Regression.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["\n", "self", ".", "C", "=", "float", "(", "self", ".", "C", ")", "\n", "\n", "self", ".", "estimator", "=", "LogisticRegression", "(", "random_state", "=", "self", ".", "random_state", ",", "\n", "solver", "=", "self", ".", "solver", ",", "\n", "penalty", "=", "self", ".", "penalty", ",", "\n", "multi_class", "=", "'ovr'", ",", "\n", "C", "=", "self", ".", "C", ",", "\n", "tol", "=", "self", ".", "tol", ",", "\n", "max_iter", "=", "self", ".", "max_iter", ",", "\n", "n_jobs", "=", "1", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.logistic_regression.Logistic_Regression.predict": [[39, 43], ["logistic_regression.Logistic_Regression.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.logistic_regression.Logistic_Regression.predict_proba": [[44, 48], ["logistic_regression.Logistic_Regression.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.logistic_regression.Logistic_Regression.get_properties": [[49, 60], ["None"], "methods", ["None"], ["        ", "return", "{", "'shortname'", ":", "'Logistic-Regression'", ",", "\n", "'name'", ":", "'Logistic Regression Classification'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.logistic_regression.Logistic_Regression.get_hyperparameter_search_space": [[61, 78], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["        ", "C", "=", "UniformFloatHyperparameter", "(", "\"C\"", ",", "0.03125", ",", "10", ",", "log", "=", "True", ",", "\n", "default_value", "=", "1.0", ")", "\n", "tol", "=", "UniformFloatHyperparameter", "(", "\"tol\"", ",", "1e-6", ",", "1e-2", ",", "default_value", "=", "1e-4", ",", "\n", "log", "=", "True", ")", "\n", "\n", "max_iter", "=", "UnParametrizedHyperparameter", "(", "\"max_iter\"", ",", "3000", ")", "\n", "\n", "penalty", "=", "CategoricalHyperparameter", "(", "name", "=", "\"penalty\"", ",", "\n", "choices", "=", "[", "\"l1\"", ",", "\"l2\"", "]", ",", "\n", "default_value", "=", "\"l2\"", ")", "\n", "solver", "=", "CategoricalHyperparameter", "(", "name", "=", "\"solver\"", ",", "choices", "=", "[", "\"liblinear\"", ",", "\"saga\"", "]", ",", "default_value", "=", "\"liblinear\"", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "C", ",", "penalty", ",", "solver", ",", "tol", ",", "max_iter", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.__init__": [[16, 35], ["random_forest.RandomForest.get_max_iter"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_max_iter"], ["BaseRegressionModel", ",", "\n", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "bootstrap", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", ",", "random_state", "=", "None", ",", "n_jobs", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "self", ".", "get_max_iter", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "min_samples_leaf", "=", "min_samples_leaf", "\n", "self", ".", "min_weight_fraction_leaf", "=", "min_weight_fraction_leaf", "\n", "self", ".", "bootstrap", "=", "bootstrap", "\n", "self", ".", "max_leaf_nodes", "=", "max_leaf_nodes", "\n", "self", ".", "min_impurity_decrease", "=", "min_impurity_decrease", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.get_max_iter": [[36, 39], ["None"], "methods", ["None"], ["self", ".", "time_limit", "=", "None", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_max_iter", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.get_current_iter": [[40, 42], ["None"], "methods", ["None"], ["        ", "return", "100", "\n", "\n", "", "def", "get_current_iter", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.iterative_fit": [[43, 97], ["random_forest.RandomForest.estimator.fit", "int", "mindware.components.utils.configspace_utils.check_none", "int", "int", "float", "mindware.components.utils.configspace_utils.check_for_bool", "mindware.components.utils.configspace_utils.check_none", "float", "RandomForestClassifier", "min", "int", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none"], ["        ", "return", "self", ".", "estimator", ".", "n_estimators", "\n", "\n", "", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "RandomForestRegressor", "\n", "\n", "if", "refit", ":", "\n", "            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "if", "check_none", "(", "self", ".", "max_depth", ")", ":", "\n", "                ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "\n", "", "self", ".", "min_samples_split", "=", "int", "(", "self", ".", "min_samples_split", ")", "\n", "self", ".", "min_samples_leaf", "=", "int", "(", "self", ".", "min_samples_leaf", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "self", ".", "min_weight_fraction_leaf", ")", "\n", "\n", "if", "self", ".", "max_features", "not", "in", "(", "\"sqrt\"", ",", "\"log2\"", ",", "\"auto\"", ")", ":", "\n", "                ", "max_features", "=", "int", "(", "X", ".", "shape", "[", "1", "]", "**", "float", "(", "self", ".", "max_features", ")", ")", "\n", "", "else", ":", "\n", "                ", "max_features", "=", "self", ".", "max_features", "\n", "\n", "", "self", ".", "bootstrap", "=", "check_for_bool", "(", "self", ".", "bootstrap", ")", "\n", "\n", "if", "check_none", "(", "self", ".", "max_leaf_nodes", ")", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_leaf_nodes", "=", "int", "(", "self", ".", "max_leaf_nodes", ")", "\n", "\n", "", "self", ".", "min_impurity_decrease", "=", "float", "(", "self", ".", "min_impurity_decrease", ")", "\n", "\n", "# initial fit of only increment trees", "\n", "self", ".", "estimator", "=", "RandomForestRegressor", "(", "\n", "n_estimators", "=", "n_iter", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "warm_start", "=", "True", ")", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.configuration_fully_fitted": [[98, 103], ["len"], "methods", ["None"], ["return", "self", "\n", "\n", "", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.predict": [[104, 108], ["random_forest.RandomForest.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.predict_proba": [[109, 115], ["random_forest.RandomForest.estimator.predict_proba", "mindware.components.utils.model_util.convert_multioutput_multiclass_to_multilabel", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.convert_multioutput_multiclass_to_multilabel"], ["", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'RF'", ",", "\n", "'name'", ":", "'Random Forest Regressor'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.get_properties": [[116, 128], ["None"], "methods", ["None"], ["'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ",", "default_value", "=", "\"mse\"", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.random_forest.RandomForest.get_hyperparameter_search_space": [[129, 157], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["\n", "# The maximum number of features used in the forest is calculated as m^max_features, where", "\n", "# m is the total number of features, and max_features is the hyperparameter specified below.", "\n", "# The default is 0.5, which yields sqrt(m) features as max_features in the estimator. This", "\n", "# corresponds with Geurts' heuristic.", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.", ",", "1.", ",", "default_value", "=", "0.5", ")", "\n", "\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "\"max_depth\"", ",", "\"None\"", ")", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "\"min_weight_fraction_leaf\"", ",", "0.", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"True\"", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "bootstrap", ",", "min_impurity_decrease", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'criterion'", ":", "hp", ".", "choice", "(", "'rf_criterion'", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'rf_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "choice", "(", "'rf_max_depth'", ",", "[", "None", "]", ")", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'rf_min_samples_split'", ",", "19", ")", "+", "2", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.qda.QDA.__init__": [[12, 20], ["float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reg_param", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "if", "reg_param", "is", "not", "None", ":", "\n", "            ", "self", ".", "reg_param", "=", "float", "(", "reg_param", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reg_param", "=", "None", "\n", "", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "self", ".", "random_state", "=", "random_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.qda.QDA.fit": [[21, 48], ["sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "qda.QDA.estimator.fit", "sklearn.multiclass.OneVsRestClassifier", "numpy.any", "numpy.any", "ValueError", "len", "len", "numpy.any", "problems.append", "numpy.any", "numpy.any", "numpy.any", "numpy.any"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "import", "sklearn", ".", "discriminant_analysis", "\n", "\n", "estimator", "=", "sklearn", ".", "discriminant_analysis", ".", "QuadraticDiscriminantAnalysis", "(", "reg_param", "=", "self", ".", "reg_param", ")", "\n", "\n", "if", "len", "(", "Y", ".", "shape", ")", "==", "2", "and", "Y", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "            ", "self", ".", "estimator", "=", "sklearn", ".", "multiclass", ".", "OneVsRestClassifier", "(", "estimator", ",", "n_jobs", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", "=", "estimator", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "if", "len", "(", "Y", ".", "shape", ")", "==", "2", "and", "Y", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "            ", "problems", "=", "[", "]", "\n", "for", "est", "in", "self", ".", "estimator", ".", "estimators_", ":", "\n", "                ", "problem", "=", "np", ".", "any", "(", "np", ".", "any", "(", "[", "np", ".", "any", "(", "s", "<=", "0.0", ")", "for", "s", "in", "\n", "est", ".", "scalings_", "]", ")", ")", "\n", "problems", ".", "append", "(", "problem", ")", "\n", "", "problem", "=", "np", ".", "any", "(", "problems", ")", "\n", "", "else", ":", "\n", "            ", "problem", "=", "np", ".", "any", "(", "np", ".", "any", "(", "[", "np", ".", "any", "(", "s", "<=", "0.0", ")", "for", "s", "in", "\n", "self", ".", "estimator", ".", "scalings_", "]", ")", ")", "\n", "", "if", "problem", ":", "\n", "            ", "raise", "ValueError", "(", "'Numerical problems in QDA. QDA.scalings_ '", "\n", "'contains values <= 0.0'", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.qda.QDA.predict": [[49, 53], ["qda.QDA.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.qda.QDA.predict_proba": [[54, 60], ["qda.QDA.estimator.predict_proba", "mindware.components.utils.model_util.softmax", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.softmax"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "df", "=", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "return", "softmax", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.qda.QDA.get_properties": [[61, 72], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'QDA'", ",", "\n", "'name'", ":", "'Quadratic Discriminant Analysis'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.qda.QDA.get_hyperparameter_search_space": [[73, 81], ["ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "reg_param", "=", "UniformFloatHyperparameter", "(", "'reg_param'", ",", "0.0", ",", "1.0", ",", "\n", "default_value", "=", "0.0", ")", "\n", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameter", "(", "reg_param", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.adaboost.AdaboostClassifier.__init__": [[12, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "learning_rate", ",", "max_depth", ",", "\n", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "n_estimators", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "estimator", "=", "None", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.adaboost.AdaboostClassifier.fit": [[21, 41], ["int", "float", "int", "sklearn.tree.DecisionTreeClassifier", "sklearn.ensemble.AdaBoostClassifier", "sklearn.ensemble.AdaBoostClassifier.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ",", "sample_weight", "=", "None", ")", ":", "\n", "        ", "from", "sklearn", ".", "ensemble", "import", "AdaBoostRegressor", "as", "ABR", "\n", "from", "sklearn", ".", "tree", "import", "DecisionTreeRegressor", "\n", "self", ".", "n_estimators", "=", "int", "(", "self", ".", "n_estimators", ")", "\n", "self", ".", "learning_rate", "=", "float", "(", "self", ".", "learning_rate", ")", "\n", "self", ".", "max_depth", "=", "int", "(", "self", ".", "max_depth", ")", "\n", "base_estimator", "=", "DecisionTreeRegressor", "(", "max_depth", "=", "self", ".", "max_depth", ")", "\n", "\n", "estimator", "=", "ABR", "(", "\n", "base_estimator", "=", "base_estimator", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "random_state", "=", "self", ".", "random_state", "\n", ")", "\n", "\n", "estimator", ".", "fit", "(", "X", ",", "Y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "\n", "self", ".", "estimator", "=", "estimator", "\n", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.adaboost.AdaboostClassifier.predict": [[42, 46], ["adaboost.AdaboostClassifier.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.adaboost.AdaboostClassifier.predict_proba": [[47, 51], ["adaboost.AdaboostClassifier.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'AB'", ",", "\n", "'name'", ":", "'AdaBoost Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.adaboost.AdaboostClassifier.get_properties": [[52, 64], ["None"], "methods", ["None"], ["'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "n_estimators", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_estimators\"", ",", "lower", "=", "50", ",", "upper", "=", "500", ",", "default_value", "=", "50", ",", "log", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.adaboost.AdaboostClassifier.get_hyperparameter_search_space": [[65, 80], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["learning_rate", "=", "UniformFloatHyperparameter", "(", "\n", "name", "=", "\"learning_rate\"", ",", "lower", "=", "0.01", ",", "upper", "=", "2", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "max_depth", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"max_depth\"", ",", "lower", "=", "1", ",", "upper", "=", "10", ",", "default_value", "=", "1", ",", "log", "=", "False", ")", "\n", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "learning_rate", ",", "max_depth", "]", ")", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_estimators'", ":", "hp", ".", "randint", "(", "'ab_n_estimators'", ",", "451", ")", "+", "50", ",", "\n", "'learning_rate'", ":", "hp", ".", "loguniform", "(", "'ab_learning_rate'", ",", "np", ".", "log", "(", "0.01", ")", ",", "np", ".", "log", "(", "2", ")", ")", ",", "\n", "'max_depth'", ":", "hp", ".", "randint", "(", "'ab_max_depth'", ",", "10", ")", "+", "1", "}", "\n", "\n", "init_trial", "=", "{", "'n_estimators'", ":", "50", ",", "'learning_rate'", ":", "0.1", ",", "'algorithm'", ":", "\"SAMME.R\"", ",", "'max_depth'", ":", "1", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.k_nearest_neighbors.KNearestNeighborsClassifier.__init__": [[11, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_neighbors", ",", "weights", ",", "p", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "n_jobs", "=", "1", "\n", "self", ".", "time_limit", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.k_nearest_neighbors.KNearestNeighborsClassifier.fit": [[19, 34], ["sklearn.neighbors.KNeighborsClassifier", "k_nearest_neighbors.KNearestNeighborsClassifier.estimator.fit", "sklearn.multiclass.OneVsRestClassifier", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "from", "sklearn", ".", "neighbors", "import", "KNeighborsRegressor", "\n", "self", ".", "estimator", "=", "KNeighborsRegressor", "(", "n_neighbors", "=", "self", ".", "n_neighbors", ",", "\n", "weights", "=", "self", ".", "weights", ",", "\n", "p", "=", "self", ".", "p", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.k_nearest_neighbors.KNearestNeighborsClassifier.predict": [[35, 39], ["k_nearest_neighbors.KNearestNeighborsClassifier.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["        ", "return", "{", "'shortname'", ":", "'KNN'", ",", "\n", "'name'", ":", "'K-Nearest Neighbor Regression'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n", "'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.k_nearest_neighbors.KNearestNeighborsClassifier.predict_proba": [[40, 44], ["k_nearest_neighbors.KNearestNeighborsClassifier.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.k_nearest_neighbors.KNearestNeighborsClassifier.get_properties": [[45, 56], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "\n", "n_neighbors", "=", "UniformIntegerHyperparameter", "(", "\n", "name", "=", "\"n_neighbors\"", ",", "lower", "=", "1", ",", "upper", "=", "100", ",", "log", "=", "True", ",", "default_value", "=", "1", ")", "\n", "weights", "=", "CategoricalHyperparameter", "(", "\n", "name", "=", "\"weights\"", ",", "choices", "=", "[", "\"uniform\"", ",", "\"distance\"", "]", ",", "default_value", "=", "\"uniform\"", ")", "\n", "p", "=", "CategoricalHyperparameter", "(", "name", "=", "\"p\"", ",", "choices", "=", "[", "1", ",", "2", "]", ",", "default_value", "=", "2", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_neighbors", ",", "weights", ",", "p", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.k_nearest_neighbors.KNearestNeighborsClassifier.get_hyperparameter_search_space": [[57, 78], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters", "hp.choice", "hp.choice", "hp.randint"], "methods", ["None"], ["return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'n_neighbors'", ":", "hp", ".", "randint", "(", "'knn_n_neighbors'", ",", "100", ")", "+", "1", ",", "\n", "'weights'", ":", "hp", ".", "choice", "(", "'knn_weights'", ",", "[", "'uniform'", ",", "'distance'", "]", ")", ",", "\n", "'p'", ":", "hp", ".", "choice", "(", "'knn_p'", ",", "[", "1", ",", "2", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'n_neighbors'", ":", "1", ",", "'weights'", ":", "\"uniform\"", ",", "'p'", ":", "2", "}", "\n", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lightgbm.LightGBM.__init__": [[14, 27], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ",", "learning_rate", ",", "num_leaves", ",", "max_depth", ",", "min_child_samples", ",", "\n", "subsample", ",", "colsample_bytree", ",", "random_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "int", "(", "n_estimators", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "num_leaves", "=", "num_leaves", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "subsample", "=", "subsample", "\n", "self", ".", "min_child_samples", "=", "min_child_samples", "\n", "self", ".", "colsample_bytree", "=", "colsample_bytree", "\n", "\n", "self", ".", "n_jobs", "=", "1", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "estimator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lightgbm.LightGBM.fit": [[28, 40], ["lightgbm.LGBMClassifier", "lightgbm.LightGBM.estimator.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "self", ".", "estimator", "=", "LGBMClassifier", "(", "num_leaves", "=", "self", ".", "num_leaves", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "learning_rate", "=", "self", ".", "learning_rate", ",", "\n", "n_estimators", "=", "self", ".", "n_estimators", ",", "\n", "min_child_samples", "=", "self", ".", "min_child_samples", ",", "\n", "subsample", "=", "self", ".", "subsample", ",", "\n", "colsample_bytree", "=", "self", ".", "colsample_bytree", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "self", "\n", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lightgbm.LightGBM.predict": [[41, 45], ["lightgbm.LightGBM.estimator.predict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n", "", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lightgbm.LightGBM.predict_proba": [[46, 50], ["lightgbm.LightGBM.estimator.predict_proba", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba"], ["        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "estimator", ".", "predict_proba", "(", "X", ")", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lightgbm.LightGBM.get_properties": [[51, 62], ["None"], "methods", ["None"], ["def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'LightGBM Classifier'", ",", "\n", "'name'", ":", "'LightGBM Classifier'", ",", "\n", "'handles_regression'", ":", "False", ",", "\n", "'handles_classification'", ":", "True", ",", "\n", "'handles_multiclass'", ":", "True", ",", "\n", "'handles_multilabel'", ":", "True", ",", "\n", "'is_deterministic'", ":", "False", ",", "\n", "'input'", ":", "(", "SPARSE", ",", "DENSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.lightgbm.LightGBM.get_hyperparameter_search_space": [[63, 76], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.Constant", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "n_estimators", "=", "UniformFloatHyperparameter", "(", "\"n_estimators\"", ",", "100", ",", "1000", ",", "default_value", "=", "500", ",", "q", "=", "50", ")", "\n", "num_leaves", "=", "UniformIntegerHyperparameter", "(", "\"num_leaves\"", ",", "31", ",", "2047", ",", "default_value", "=", "128", ")", "\n", "max_depth", "=", "Constant", "(", "'max_depth'", ",", "15", ")", "\n", "learning_rate", "=", "UniformFloatHyperparameter", "(", "\"learning_rate\"", ",", "1e-3", ",", "0.3", ",", "default_value", "=", "0.1", ",", "log", "=", "True", ")", "\n", "min_child_samples", "=", "UniformIntegerHyperparameter", "(", "\"min_child_samples\"", ",", "5", ",", "30", ",", "default_value", "=", "20", ")", "\n", "subsample", "=", "UniformFloatHyperparameter", "(", "\"subsample\"", ",", "0.7", ",", "1", ",", "default_value", "=", "1", ",", "q", "=", "0.1", ")", "\n", "colsample_bytree", "=", "UniformFloatHyperparameter", "(", "\"colsample_bytree\"", ",", "0.7", ",", "1", ",", "default_value", "=", "1", ",", "q", "=", "0.1", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "n_estimators", ",", "num_leaves", ",", "max_depth", ",", "learning_rate", ",", "min_child_samples", ",", "subsample", ",", "\n", "colsample_bytree", "]", ")", "\n", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.__init__": [[13, 46], ["extra_trees.ExtraTreesClassifier.get_max_iter", "mindware.components.utils.configspace_utils.check_none", "mindware.components.utils.configspace_utils.check_none", "int", "int", "float", "mindware.components.utils.configspace_utils.check_for_bool", "float", "float", "int", "int", "ValueError", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_max_iter", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_none", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.configspace_utils.check_for_bool"], ["class", "ExtraTreesRegressor", "(", "IterativeComponentWithSampleWeight", ",", "BaseRegressionModel", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "criterion", ",", "min_samples_leaf", ",", "\n", "min_samples_split", ",", "max_features", ",", "bootstrap", ",", "max_leaf_nodes", ",", "\n", "max_depth", ",", "min_weight_fraction_leaf", ",", "min_impurity_decrease", ",", "\n", "oob_score", "=", "False", ",", "n_jobs", "=", "1", ",", "random_state", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "n_estimators", "=", "self", ".", "get_max_iter", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n", "if", "check_none", "(", "max_depth", ")", ":", "\n", "            ", "self", ".", "max_depth", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_depth", "=", "int", "(", "max_depth", ")", "\n", "", "if", "check_none", "(", "max_leaf_nodes", ")", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_leaf_nodes", "=", "int", "(", "max_leaf_nodes", ")", "\n", "\n", "", "self", ".", "min_samples_leaf", "=", "int", "(", "min_samples_leaf", ")", "\n", "self", ".", "min_samples_split", "=", "int", "(", "min_samples_split", ")", "\n", "self", ".", "max_features", "=", "float", "(", "max_features", ")", "\n", "self", ".", "bootstrap", "=", "check_for_bool", "(", "bootstrap", ")", "\n", "self", ".", "min_weight_fraction_leaf", "=", "float", "(", "min_weight_fraction_leaf", ")", "\n", "self", ".", "min_impurity_decrease", "=", "float", "(", "min_impurity_decrease", ")", "\n", "self", ".", "oob_score", "=", "oob_score", "\n", "self", ".", "n_jobs", "=", "int", "(", "n_jobs", ")", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "verbose", "=", "int", "(", "verbose", ")", "\n", "self", ".", "estimator", "=", "None", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_max_iter", "(", ")", ":", "\n", "        ", "return", "512", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_max_iter": [[47, 50], ["None"], "methods", ["None"], ["", "def", "get_current_iter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "estimator", ".", "n_estimators", "\n", "\n", "", "def", "iterative_fit", "(", "self", ",", "X", ",", "y", ",", "sample_weight", "=", "None", ",", "n_iter", "=", "1", ",", "refit", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_current_iter": [[51, 53], ["None"], "methods", ["None"], ["        ", "from", "sklearn", ".", "ensemble", "import", "ExtraTreesRegressor", "as", "ETR", "\n", "\n", "if", "refit", ":", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.iterative_fit": [[54, 86], ["extra_trees.ExtraTreesClassifier.estimator.fit", "int", "ETC", "min", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["            ", "self", ".", "estimator", "=", "None", "\n", "\n", "", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "max_features", "=", "int", "(", "X", ".", "shape", "[", "1", "]", "**", "float", "(", "self", ".", "max_features", ")", ")", "\n", "self", ".", "estimator", "=", "ETR", "(", "n_estimators", "=", "n_iter", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "max_depth", "=", "self", ".", "max_depth", ",", "\n", "min_samples_split", "=", "self", ".", "min_samples_split", ",", "\n", "min_samples_leaf", "=", "self", ".", "min_samples_leaf", ",", "\n", "bootstrap", "=", "self", ".", "bootstrap", ",", "\n", "max_features", "=", "max_features", ",", "\n", "max_leaf_nodes", "=", "self", ".", "max_leaf_nodes", ",", "\n", "min_weight_fraction_leaf", "=", "self", ".", "min_weight_fraction_leaf", ",", "\n", "min_impurity_decrease", "=", "self", ".", "min_impurity_decrease", ",", "\n", "oob_score", "=", "self", ".", "oob_score", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "random_state", "=", "self", ".", "random_state", ",", "\n", "warm_start", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", ".", "n_estimators", "+=", "n_iter", "\n", "self", ".", "estimator", ".", "n_estimators", "=", "min", "(", "self", ".", "estimator", ".", "n_estimators", ",", "\n", "self", ".", "n_estimators", ")", "\n", "\n", "", "self", ".", "estimator", ".", "fit", "(", "X", ",", "y", ",", "sample_weight", "=", "sample_weight", ")", "\n", "return", "self", "\n", "\n", "", "def", "configuration_fully_fitted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "not", "len", "(", "self", ".", "estimator", ".", "estimators_", ")", "<", "self", ".", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.configuration_fully_fitted": [[87, 91], ["len"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "estimator", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "estimator", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.predict": [[92, 96], ["extra_trees.ExtraTreesClassifier.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "@", "staticmethod", "\n", "def", "get_properties", "(", "dataset_properties", "=", "None", ")", ":", "\n", "        ", "return", "{", "'shortname'", ":", "'ET'", ",", "\n", "'name'", ":", "'Extra Trees Regressor'", ",", "\n", "'handles_regression'", ":", "True", ",", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.predict_proba": [[97, 103], ["extra_trees.ExtraTreesClassifier.estimator.predict_proba", "mindware.components.utils.model_util.convert_multioutput_multiclass_to_multilabel", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.model_util.convert_multioutput_multiclass_to_multilabel"], ["'handles_classification'", ":", "False", ",", "\n", "'handles_multiclass'", ":", "False", ",", "\n", "'handles_multilabel'", ":", "False", ",", "\n", "'is_deterministic'", ":", "True", ",", "\n", "'input'", ":", "(", "DENSE", ",", "SPARSE", ",", "UNSIGNED_DATA", ")", ",", "\n", "'output'", ":", "(", "PREDICTIONS", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_properties": [[104, 116], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hyperparameter_search_space", "(", "dataset_properties", "=", "None", ",", "optimizer", "=", "'smac'", ")", ":", "\n", "        ", "if", "optimizer", "==", "'smac'", ":", "\n", "            ", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "criterion", "=", "CategoricalHyperparameter", "(", "\n", "\"criterion\"", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ",", "default_value", "=", "\"mse\"", ")", "\n", "\n", "# The maximum number of features used in the forest is calculated as m^max_features, where", "\n", "# m is the total number of features, and max_features is the hyperparameter specified below.", "\n", "# The default is 0.5, which yields sqrt(m) features as max_features in the estimator. This", "\n", "# corresponds with Geurts' heuristic.", "\n", "max_features", "=", "UniformFloatHyperparameter", "(", "\n", "\"max_features\"", ",", "0.", ",", "1.", ",", "default_value", "=", "0.5", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space": [[117, 149], ["ConfigSpace.configuration_space.ConfigurationSpace", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.hyperparameters.UniformFloatHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UniformIntegerHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.UnParametrizedHyperparameter", "ConfigSpace.hyperparameters.CategoricalHyperparameter", "ConfigSpace.configuration_space.ConfigurationSpace.add_hyperparameters"], "methods", ["None"], ["\n", "max_depth", "=", "UnParametrizedHyperparameter", "(", "name", "=", "\"max_depth\"", ",", "value", "=", "\"None\"", ")", "\n", "\n", "min_samples_split", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_split\"", ",", "2", ",", "20", ",", "default_value", "=", "2", ")", "\n", "min_samples_leaf", "=", "UniformIntegerHyperparameter", "(", "\n", "\"min_samples_leaf\"", ",", "1", ",", "20", ",", "default_value", "=", "1", ")", "\n", "min_weight_fraction_leaf", "=", "UnParametrizedHyperparameter", "(", "'min_weight_fraction_leaf'", ",", "0.", ")", "\n", "max_leaf_nodes", "=", "UnParametrizedHyperparameter", "(", "\"max_leaf_nodes\"", ",", "\"None\"", ")", "\n", "min_impurity_decrease", "=", "UnParametrizedHyperparameter", "(", "'min_impurity_decrease'", ",", "0.0", ")", "\n", "\n", "bootstrap", "=", "CategoricalHyperparameter", "(", "\n", "\"bootstrap\"", ",", "[", "\"True\"", ",", "\"False\"", "]", ",", "default_value", "=", "\"False\"", ")", "\n", "cs", ".", "add_hyperparameters", "(", "[", "criterion", ",", "max_features", ",", "\n", "max_depth", ",", "min_samples_split", ",", "min_samples_leaf", ",", "\n", "min_weight_fraction_leaf", ",", "max_leaf_nodes", ",", "\n", "min_impurity_decrease", ",", "bootstrap", "]", ")", "\n", "\n", "return", "cs", "\n", "", "elif", "optimizer", "==", "'tpe'", ":", "\n", "            ", "from", "hyperopt", "import", "hp", "\n", "space", "=", "{", "'criterion'", ":", "hp", ".", "choice", "(", "'et_criterion'", ",", "[", "\"mse\"", ",", "\"mae\"", "]", ")", ",", "\n", "'max_features'", ":", "hp", ".", "uniform", "(", "'et_max_features'", ",", "0", ",", "1", ")", ",", "\n", "'min_samples_split'", ":", "hp", ".", "randint", "(", "'et_min_samples_split'", ",", "19", ")", "+", "2", ",", "\n", "'min_samples_leaf'", ":", "hp", ".", "randint", "(", "'et_min_samples_leaf,'", ",", "20", ")", "+", "1", ",", "\n", "'bootstrap'", ":", "hp", ".", "choice", "(", "'et_bootstrap'", ",", "[", "\"True\"", ",", "\"False\"", "]", ")", "}", "\n", "\n", "init_trial", "=", "{", "'criterion'", ":", "\"mse\"", ",", "'max_features'", ":", "0.5", ",", "\n", "'min_samples_split'", ":", "2", ",", "'min_samples_leaf'", ":", "1", ",", "'bootstrap'", ":", "\"False\"", "}", "\n", "return", "space", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.__init__.add_classifier": [[17, 19], ["_addons.add_component"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.ThirdPartyComponents.add_component"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.RegressionEvaluator.__init__": [[87, 106], ["mindware.utils.logging_utils.get_logger", "data_node.copy_", "data_node.copy_"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["    ", "def", "__init__", "(", "self", ",", "fixed_config", "=", "None", ",", "scorer", "=", "None", ",", "data_node", "=", "None", ",", "task_type", "=", "REGRESSION", ",", "resampling_strategy", "=", "'cv'", ",", "\n", "resampling_params", "=", "None", ",", "timestamp", "=", "None", ",", "output_dir", "=", "None", ",", "seed", "=", "1", ")", ":", "\n", "        ", "self", ".", "resampling_strategy", "=", "resampling_strategy", "\n", "self", ".", "resampling_params", "=", "resampling_params", "\n", "\n", "self", ".", "fixed_config", "=", "fixed_config", "\n", "self", ".", "scorer", "=", "scorer", "if", "scorer", "is", "not", "None", "else", "balanced_accuracy_scorer", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "data_node", "=", "data_node", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "onehot_encoder", "=", "None", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "continue_training", "=", "False", "\n", "\n", "self", ".", "train_node", "=", "data_node", ".", "copy_", "(", ")", "\n", "self", ".", "val_node", "=", "data_node", ".", "copy_", "(", ")", "\n", "\n", "self", ".", "timestamp", "=", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.RegressionEvaluator.__call__": [[107, 276], ["time.time", "dict", "kwargs.get", "isinstance", "config.copy.copy.get_dictionary().copy", "config.copy.copy.copy", "config.copy.copy.update", "config.copy.copy.copy", "rgs_evaluator.get_estimator", "mindware.components.evaluators.evaluate_func.validation", "numpy.isfinite", "rgs_evaluator.RegressionEvaluator.logger.info", "warnings.catch_warnings", "warnings.filterwarnings", "ShuffleSplit", "ShuffleSplit.split", "mindware.components.feature_engineering.parse.parse_config", "rgs_evaluator.RegressionEvaluator.val_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "rgs_evaluator.RegressionEvaluator.logger.info", "config.copy.copy.get_dictionary", "os.path.exists", "warnings.catch_warnings", "warnings.filterwarnings", "KFold", "list", "KFold.split", "numpy.mean", "config.copy.copy.copy", "rgs_evaluator.get_estimator", "mindware.components.evaluators.evaluate_func.validation", "ValueError", "open", "pickle.dump", "open", "pickle.load", "mindware.components.feature_engineering.parse.parse_config", "rgs_evaluator.RegressionEvaluator.val_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "config.copy.copy.copy", "rgs_evaluator.get_estimator", "mindware.components.evaluators.evaluate_func.validation", "list.append", "warnings.catch_warnings", "warnings.filterwarnings", "ShuffleSplit", "ShuffleSplit.split", "mindware.components.feature_engineering.parse.parse_config", "rgs_evaluator.RegressionEvaluator.val_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "ShuffleSplit", "ShuffleSplit.split", "list", "numpy.isfinite", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "rgs_evaluator.RegressionEvaluator.logger.info", "open", "pickle.dump", "range", "os.path.exists", "time.time", "len", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "__call__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "return_dict", "=", "dict", "(", ")", "\n", "self", ".", "seed", "=", "1", "\n", "downsample_ratio", "=", "kwargs", ".", "get", "(", "'resource_ratio'", ",", "1.0", ")", "\n", "\n", "# Convert Configuration into dictionary", "\n", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "            ", "config", "=", "config", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "config", ".", "copy", "(", ")", "\n", "", "if", "self", ".", "fixed_config", "is", "not", "None", ":", "\n", "            ", "config", ".", "update", "(", "self", ".", "fixed_config", ")", "\n", "", "self", ".", "estimator_id", "=", "config", "[", "'algorithm'", "]", "\n", "\n", "if", "'holdout'", "in", "self", ".", "resampling_strategy", ":", "\n", "# Prepare data node.", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "if", "self", ".", "resampling_params", "is", "None", "or", "'test_size'", "not", "in", "self", ".", "resampling_params", ":", "\n", "                    ", "test_size", "=", "0.33", "\n", "", "else", ":", "\n", "                    ", "test_size", "=", "self", ".", "resampling_params", "[", "'test_size'", "]", "\n", "\n", "", "from", "sklearn", ".", "model_selection", "import", "ShuffleSplit", "\n", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "self", ".", "data_node", ".", "data", "[", "0", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", ")", ":", "\n", "                    ", "_x_train", ",", "_x_val", "=", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "_y_train", ",", "_y_val", "=", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "", "self", ".", "train_node", ".", "data", "=", "[", "_x_train", ",", "_y_train", "]", "\n", "self", ".", "val_node", ".", "data", "=", "[", "_x_val", ",", "_y_val", "]", "\n", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "train_node", ",", "config", ",", "record", "=", "True", ")", "\n", "_val_node", "=", "self", ".", "val_node", ".", "copy_", "(", ")", "\n", "_val_node", "=", "construct_node", "(", "_val_node", ",", "op_list", ")", "\n", "\n", "", "_x_train", ",", "_y_train", "=", "data_node", ".", "data", "\n", "_x_val", ",", "_y_val", "=", "_val_node", ".", "data", "\n", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "# regression gadgets", "\n", "regressor_id", ",", "clf", "=", "get_estimator", "(", "config_dict", ",", "self", ".", "estimator_id", ")", "\n", "\n", "score", "=", "validation", "(", "clf", ",", "self", ".", "scorer", ",", "_x_train", ",", "_y_train", ",", "_x_val", ",", "_y_val", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "\n", "if", "np", ".", "isfinite", "(", "score", ")", ":", "\n", "                ", "model_path", "=", "CombinedTopKModelSaver", ".", "get_path_by_config", "(", "self", ".", "output_dir", ",", "config", ",", "self", ".", "timestamp", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "_", ",", "_", ",", "perf", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "if", "score", ">", "perf", ":", "\n", "                        ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"Model saved to %s\"", "%", "model_path", ")", "\n", "\n", "", "", "elif", "'cv'", "in", "self", ".", "resampling_strategy", ":", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "if", "'cv'", "in", "self", ".", "resampling_strategy", ":", "\n", "                    ", "if", "self", ".", "resampling_params", "is", "None", "or", "'folds'", "not", "in", "self", ".", "resampling_params", ":", "\n", "                        ", "folds", "=", "5", "\n", "", "else", ":", "\n", "                        ", "folds", "=", "self", ".", "resampling_params", "[", "'folds'", "]", "\n", "\n", "", "", "from", "sklearn", ".", "model_selection", "import", "KFold", "\n", "kfold", "=", "KFold", "(", "n_splits", "=", "folds", ",", "random_state", "=", "self", ".", "seed", ",", "shuffle", "=", "False", ")", "\n", "scores", "=", "list", "(", ")", "\n", "\n", "for", "train_index", ",", "test_index", "in", "kfold", ".", "split", "(", "self", ".", "data_node", ".", "data", "[", "0", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", ")", ":", "\n", "                    ", "_x_train", ",", "_x_val", "=", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "_y_train", ",", "_y_val", "=", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "self", ".", "train_node", ".", "data", "=", "[", "_x_train", ",", "_y_train", "]", "\n", "self", ".", "val_node", ".", "data", "=", "[", "_x_val", ",", "_y_val", "]", "\n", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "train_node", ",", "config", ",", "record", "=", "True", ")", "\n", "_val_node", "=", "self", ".", "val_node", ".", "copy_", "(", ")", "\n", "_val_node", "=", "construct_node", "(", "_val_node", ",", "op_list", ")", "\n", "\n", "_x_train", ",", "_y_train", "=", "data_node", ".", "data", "\n", "_x_val", ",", "_y_val", "=", "_val_node", ".", "data", "\n", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "# regressor gadgets", "\n", "regressor_id", ",", "clf", "=", "get_estimator", "(", "config_dict", ",", "self", ".", "estimator_id", ")", "\n", "\n", "_score", "=", "validation", "(", "clf", ",", "self", ".", "scorer", ",", "_x_train", ",", "_y_train", ",", "_x_val", ",", "_y_val", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "scores", ".", "append", "(", "_score", ")", "\n", "", "score", "=", "np", ".", "mean", "(", "scores", ")", "\n", "\n", "", "", "elif", "'partial'", "in", "self", ".", "resampling_strategy", ":", "\n", "# Prepare data node.", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "if", "self", ".", "resampling_params", "is", "None", "or", "'test_size'", "not", "in", "self", ".", "resampling_params", ":", "\n", "                    ", "test_size", "=", "0.33", "\n", "", "else", ":", "\n", "                    ", "test_size", "=", "self", ".", "resampling_params", "[", "'test_size'", "]", "\n", "\n", "", "from", "sklearn", ".", "model_selection", "import", "ShuffleSplit", "\n", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "self", ".", "data_node", ".", "data", "[", "0", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", ")", ":", "\n", "                    ", "_x_train", ",", "_x_val", "=", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "_y_train", ",", "_y_val", "=", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "", "self", ".", "train_node", ".", "data", "=", "[", "_x_train", ",", "_y_train", "]", "\n", "self", ".", "val_node", ".", "data", "=", "[", "_x_val", ",", "_y_val", "]", "\n", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "train_node", ",", "config", ",", "record", "=", "True", ")", "\n", "_val_node", "=", "self", ".", "val_node", ".", "copy_", "(", ")", "\n", "_val_node", "=", "construct_node", "(", "_val_node", ",", "op_list", ")", "\n", "\n", "", "_x_train", ",", "_y_train", "=", "data_node", ".", "data", "\n", "\n", "if", "downsample_ratio", "!=", "1", ":", "\n", "                ", "down_ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "downsample_ratio", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "for", "_", ",", "_val_index", "in", "down_ss", ".", "split", "(", "_x_train", ",", "_y_train", ")", ":", "\n", "                    ", "_act_x_train", ",", "_act_y_train", "=", "_x_train", "[", "_val_index", "]", ",", "_y_train", "[", "_val_index", "]", "\n", "", "", "else", ":", "\n", "                ", "_act_x_train", ",", "_act_y_train", "=", "_x_train", ",", "_y_train", "\n", "_val_index", "=", "list", "(", "range", "(", "len", "(", "_x_train", ")", ")", ")", "\n", "\n", "", "_x_val", ",", "_y_val", "=", "_val_node", ".", "data", "\n", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "# Regressor gadgets", "\n", "regressor_id", ",", "clf", "=", "get_estimator", "(", "config_dict", ",", "self", ".", "estimator_id", ")", "\n", "\n", "score", "=", "validation", "(", "clf", ",", "self", ".", "scorer", ",", "_act_x_train", ",", "_act_y_train", ",", "_x_val", ",", "_y_val", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "\n", "if", "np", ".", "isfinite", "(", "score", ")", "and", "downsample_ratio", "==", "1", ":", "\n", "                ", "model_path", "=", "CombinedTopKModelSaver", ".", "get_path_by_config", "(", "self", ".", "output_dir", ",", "config", ",", "self", ".", "timestamp", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "_", ",", "_", ",", "perf", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "if", "score", ">", "perf", ":", "\n", "                        ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"Model saved to %s\"", "%", "model_path", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid resampling strategy: %s!'", "%", "self", ".", "resampling_strategy", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Evaluation<%s> | Score: %.4f | Time cost: %.2f seconds | Shape: %s'", "%", "\n", "(", "regressor_id", ",", "\n", "self", ".", "scorer", ".", "_sign", "*", "score", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ",", "_x_train", ".", "shape", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# Turn it into a minimization problem.", "\n", "", "return_dict", "[", "'objective_value'", "]", "=", "-", "score", "\n", "return", "-", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.get_estimator": [[20, 36], ["config.copy", "dict", "mindware.components.utils.class_loader.get_combined_candidtates", "hasattr", "setattr", "key.split", "key.split"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates"], ["def", "get_estimator", "(", "config", ",", "estimator_id", ")", ":", "\n", "    ", "regressor_type", "=", "estimator_id", "\n", "config_", "=", "config", ".", "copy", "(", ")", "\n", "config_", "[", "'%s:random_state'", "%", "regressor_type", "]", "=", "1", "\n", "hpo_config", "=", "dict", "(", ")", "\n", "for", "key", "in", "config_", ":", "\n", "        ", "key_name", "=", "key", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "regressor_type", "==", "key_name", ":", "\n", "            ", "act_key", "=", "key", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "hpo_config", "[", "act_key", "]", "=", "config_", "[", "key", "]", "\n", "\n", "", "", "_candidates", "=", "get_combined_candidtates", "(", "_regressors", ",", "_addons", ")", "\n", "estimator", "=", "_candidates", "[", "regressor_type", "]", "(", "**", "hpo_config", ")", "\n", "if", "hasattr", "(", "estimator", ",", "'n_jobs'", ")", ":", "\n", "        ", "setattr", "(", "estimator", ",", "'n_jobs'", ",", "1", ")", "\n", "", "return", "regressor_type", ",", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.get_hpo_cs": [[38, 46], ["mindware.components.utils.class_loader.get_combined_candidtates", "rgs_class.get_hyperparameter_search_space", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space"], ["", "def", "get_hpo_cs", "(", "estimator_id", ",", "task_type", "=", "REGRESSION", ")", ":", "\n", "    ", "_candidates", "=", "get_combined_candidtates", "(", "_regressors", ",", "_addons", ")", "\n", "if", "estimator_id", "in", "_candidates", ":", "\n", "        ", "rgs_class", "=", "_candidates", "[", "estimator_id", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Algorithm %s not supported!\"", "%", "estimator_id", ")", "\n", "", "cs", "=", "rgs_class", ".", "get_hyperparameter_search_space", "(", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.get_cash_cs": [[48, 63], ["mindware.components.utils.class_loader.get_combined_candidtates", "ConfigSpace.ConfigurationSpace", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "set().intersection", "list", "rgs_evaluator.get_hpo_cs", "ConfigSpace.ConfigurationSpace.add_configuration_space", "set", "len", "ValueError", "set", "set().intersection.keys"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_hpo_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "get_cash_cs", "(", "include_algorithms", "=", "None", ",", "task_type", "=", "REGRESSION", ")", ":", "\n", "    ", "_candidates", "=", "get_combined_candidtates", "(", "_regressors", ",", "_addons", ")", "\n", "if", "include_algorithms", "is", "not", "None", ":", "\n", "        ", "_candidates", "=", "set", "(", "include_algorithms", ")", ".", "intersection", "(", "set", "(", "_candidates", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "_candidates", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"No algorithms included! Please check the spelling of the included algorithms!\"", ")", "\n", "", "", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "algo", "=", "CategoricalHyperparameter", "(", "'algorithm'", ",", "list", "(", "_candidates", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "algo", ")", "\n", "for", "estimator_id", "in", "_candidates", ":", "\n", "        ", "estimator_cs", "=", "get_hpo_cs", "(", "estimator_id", ")", "\n", "parent_hyperparameter", "=", "{", "'parent'", ":", "algo", ",", "\n", "'value'", ":", "estimator_id", "}", "\n", "cs", ".", "add_configuration_space", "(", "estimator_id", ",", "estimator_cs", ",", "parent_hyperparameter", "=", "parent_hyperparameter", ")", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.get_fe_cs": [[65, 69], ["mindware.components.feature_engineering.task_space.get_task_hyperparameter_space"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space.get_task_hyperparameter_space"], ["", "def", "get_fe_cs", "(", "task_type", "=", "REGRESSION", ",", "include_image", "=", "False", ",", "include_text", "=", "False", ",", "include_preprocessors", "=", "None", ")", ":", "\n", "    ", "cs", "=", "get_task_hyperparameter_space", "(", "task_type", "=", "task_type", ",", "include_image", "=", "include_image", ",", "include_text", "=", "include_text", ",", "\n", "include_preprocessors", "=", "include_preprocessors", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.rgs_evaluator.get_combined_cs": [[71, 84], ["rgs_evaluator.get_cash_cs", "rgs_evaluator.get_fe_cs", "get_fe_cs.get_hyperparameters", "get_fe_cs.get_conditions", "get_fe_cs.get_forbiddens", "get_cash_cs.add_hyperparameter", "get_cash_cs.add_condition", "get_cash_cs.add_forbidden_clause"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_cash_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_fe_cs"], ["", "def", "get_combined_cs", "(", "task_type", "=", "REGRESSION", ",", "include_image", "=", "False", ",", "include_text", "=", "False", ",", "\n", "include_preprocessors", "=", "None", ")", ":", "\n", "    ", "cash_cs", "=", "get_cash_cs", "(", "task_type", ")", "\n", "fe_cs", "=", "get_fe_cs", "(", "task_type", ",", "\n", "include_image", "=", "include_image", ",", "include_text", "=", "include_text", ",", "\n", "include_preprocessors", "=", "include_preprocessors", ")", "\n", "for", "hp", "in", "fe_cs", ".", "get_hyperparameters", "(", ")", ":", "\n", "        ", "cash_cs", ".", "add_hyperparameter", "(", "hp", ")", "\n", "", "for", "cond", "in", "fe_cs", ".", "get_conditions", "(", ")", ":", "\n", "        ", "cash_cs", ".", "add_condition", "(", "cond", ")", "\n", "", "for", "bid", "in", "fe_cs", ".", "get_forbiddens", "(", ")", ":", "\n", "        ", "cash_cs", ".", "add_forbidden_clause", "(", "bid", ")", "\n", "", "return", "cash_cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.ClassificationEvaluator.__init__": [[89, 109], ["mindware.utils.logging_utils.get_logger", "data_node.copy_", "data_node.copy_"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["    ", "def", "__init__", "(", "self", ",", "fixed_config", "=", "None", ",", "scorer", "=", "None", ",", "data_node", "=", "None", ",", "task_type", "=", "0", ",", "resampling_strategy", "=", "'cv'", ",", "\n", "resampling_params", "=", "None", ",", "timestamp", "=", "None", ",", "output_dir", "=", "None", ",", "seed", "=", "1", ",", "if_imbal", "=", "False", ")", ":", "\n", "        ", "self", ".", "resampling_strategy", "=", "resampling_strategy", "\n", "self", ".", "resampling_params", "=", "resampling_params", "\n", "\n", "self", ".", "fixed_config", "=", "fixed_config", "\n", "self", ".", "scorer", "=", "scorer", "if", "scorer", "is", "not", "None", "else", "balanced_accuracy_scorer", "\n", "self", ".", "if_imbal", "=", "if_imbal", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "data_node", "=", "data_node", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "onehot_encoder", "=", "None", "\n", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "continue_training", "=", "False", "\n", "\n", "self", ".", "train_node", "=", "data_node", ".", "copy_", "(", ")", "\n", "self", ".", "val_node", "=", "data_node", ".", "copy_", "(", ")", "\n", "\n", "self", ".", "timestamp", "=", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.ClassificationEvaluator.get_fit_params": [[110, 115], ["get_weights"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.get_weights"], ["", "def", "get_fit_params", "(", "self", ",", "y", ",", "estimator", ")", ":", "\n", "        ", "from", "mindware", ".", "components", ".", "utils", ".", "balancing", "import", "get_weights", "\n", "_init_params", ",", "_fit_params", "=", "get_weights", "(", "\n", "y", ",", "estimator", ",", "None", ",", "{", "}", ",", "{", "}", ")", "\n", "return", "_init_params", ",", "_fit_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.ClassificationEvaluator.__call__": [[116, 336], ["time.time", "dict", "kwargs.get", "isinstance", "config.copy.copy.get_dictionary().copy", "config.copy.copy.copy", "config.copy.copy.update", "config.copy.copy.copy", "cls_evaluator.get_estimator", "mindware.components.evaluators.evaluate_func.validation", "numpy.isfinite", "cls_evaluator.ClassificationEvaluator.logger.info", "warnings.catch_warnings", "warnings.filterwarnings", "StratifiedShuffleSplit", "StratifiedShuffleSplit.split", "mindware.components.feature_engineering.parse.parse_config", "cls_evaluator.ClassificationEvaluator.val_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "cls_evaluator.ClassificationEvaluator.get_fit_params", "init_params.items", "sklearn.preprocessing.OneHotEncoder", "numpy.reshape", "cls_evaluator.ClassificationEvaluator.onehot_encoder.fit", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "cls_evaluator.ClassificationEvaluator.logger.info", "config.copy.copy.get_dictionary", "os.path.exists", "warnings.catch_warnings", "warnings.filterwarnings", "StratifiedKFold", "list", "StratifiedKFold.split", "numpy.mean", "config.copy.copy.copy", "cls_evaluator.get_estimator", "mindware.components.evaluators.evaluate_func.validation", "ValueError", "len", "isinstance", "open", "pickle.dump", "open", "pickle.load", "mindware.components.feature_engineering.parse.parse_config", "cls_evaluator.ClassificationEvaluator.val_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "config.copy.copy.copy", "cls_evaluator.get_estimator", "mindware.components.evaluators.evaluate_func.validation", "list.append", "warnings.catch_warnings", "warnings.filterwarnings", "StratifiedShuffleSplit", "StratifiedShuffleSplit.split", "mindware.components.feature_engineering.parse.parse_config", "cls_evaluator.ClassificationEvaluator.val_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "StratifiedShuffleSplit", "StratifiedShuffleSplit.split", "list", "cls_evaluator.ClassificationEvaluator.get_fit_params", "init_params.items", "sklearn.preprocessing.OneHotEncoder", "numpy.reshape", "cls_evaluator.ClassificationEvaluator.onehot_encoder.fit", "numpy.isfinite", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "cls_evaluator.ClassificationEvaluator.logger.info", "open", "pickle.dump", "cls_evaluator.ClassificationEvaluator.get_fit_params", "init_params.items", "sklearn.preprocessing.OneHotEncoder", "numpy.reshape", "cls_evaluator.ClassificationEvaluator.onehot_encoder.fit", "range", "os.path.exists", "time.time", "len", "len", "isinstance", "open", "pickle.dump", "open", "pickle.load", "len", "isinstance", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.ClassificationEvaluator.get_fit_params", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.ClassificationEvaluator.get_fit_params", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.ClassificationEvaluator.get_fit_params", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump"], ["", "def", "__call__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "return_dict", "=", "dict", "(", ")", "\n", "self", ".", "seed", "=", "1", "\n", "downsample_ratio", "=", "kwargs", ".", "get", "(", "'resource_ratio'", ",", "1.0", ")", "\n", "\n", "# Convert Configuration into dictionary", "\n", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "            ", "config", "=", "config", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "config", ".", "copy", "(", ")", "\n", "", "if", "self", ".", "fixed_config", "is", "not", "None", ":", "\n", "            ", "config", ".", "update", "(", "self", ".", "fixed_config", ")", "\n", "", "self", ".", "estimator_id", "=", "config", "[", "'algorithm'", "]", "\n", "\n", "if", "'holdout'", "in", "self", ".", "resampling_strategy", ":", "\n", "# Prepare data node.", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "if", "self", ".", "resampling_params", "is", "None", "or", "'test_size'", "not", "in", "self", ".", "resampling_params", ":", "\n", "                    ", "test_size", "=", "0.33", "\n", "", "else", ":", "\n", "                    ", "test_size", "=", "self", ".", "resampling_params", "[", "'test_size'", "]", "\n", "\n", "", "from", "sklearn", ".", "model_selection", "import", "StratifiedShuffleSplit", "\n", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "self", ".", "data_node", ".", "data", "[", "0", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", ")", ":", "\n", "                    ", "_x_train", ",", "_x_val", "=", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "_y_train", ",", "_y_val", "=", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "", "self", ".", "train_node", ".", "data", "=", "[", "_x_train", ",", "_y_train", "]", "\n", "self", ".", "val_node", ".", "data", "=", "[", "_x_val", ",", "_y_val", "]", "\n", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "train_node", ",", "config", ",", "record", "=", "True", ",", "if_imbal", "=", "self", ".", "if_imbal", ")", "\n", "_val_node", "=", "self", ".", "val_node", ".", "copy_", "(", ")", "\n", "_val_node", "=", "construct_node", "(", "_val_node", ",", "op_list", ")", "\n", "\n", "", "_x_train", ",", "_y_train", "=", "data_node", ".", "data", "\n", "_x_val", ",", "_y_val", "=", "_val_node", ".", "data", "\n", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "# Prepare training and initial params for classifier.", "\n", "init_params", ",", "fit_params", "=", "{", "}", ",", "{", "}", "\n", "if", "data_node", ".", "enable_balance", "==", "1", ":", "\n", "                ", "init_params", ",", "fit_params", "=", "self", ".", "get_fit_params", "(", "_y_train", ",", "self", ".", "estimator_id", ")", "\n", "for", "key", ",", "val", "in", "init_params", ".", "items", "(", ")", ":", "\n", "                    ", "config_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "", "if", "data_node", ".", "data_balance", "==", "1", ":", "\n", "                ", "fit_params", "[", "'data_balance'", "]", "=", "True", "\n", "\n", "", "classifier_id", ",", "clf", "=", "get_estimator", "(", "config_dict", ",", "self", ".", "estimator_id", ")", "\n", "\n", "if", "self", ".", "onehot_encoder", "is", "None", ":", "\n", "                ", "self", ".", "onehot_encoder", "=", "OneHotEncoder", "(", "categories", "=", "'auto'", ")", "\n", "y", "=", "np", ".", "reshape", "(", "_y_train", ",", "(", "len", "(", "_y_train", ")", ",", "1", ")", ")", "\n", "self", ".", "onehot_encoder", ".", "fit", "(", "y", ")", "\n", "\n", "", "score", "=", "validation", "(", "clf", ",", "self", ".", "scorer", ",", "_x_train", ",", "_y_train", ",", "_x_val", ",", "_y_val", ",", "\n", "random_state", "=", "self", ".", "seed", ",", "\n", "onehot", "=", "self", ".", "onehot_encoder", "if", "isinstance", "(", "self", ".", "scorer", ",", "\n", "_ThresholdScorer", ")", "else", "None", ",", "\n", "fit_params", "=", "fit_params", ")", "\n", "\n", "if", "np", ".", "isfinite", "(", "score", ")", ":", "\n", "                ", "model_path", "=", "CombinedTopKModelSaver", ".", "get_path_by_config", "(", "self", ".", "output_dir", ",", "config", ",", "self", ".", "timestamp", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "_", ",", "_", ",", "perf", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "if", "score", ">", "perf", ":", "\n", "                        ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"Model saved to %s\"", "%", "model_path", ")", "\n", "\n", "", "", "elif", "'cv'", "in", "self", ".", "resampling_strategy", ":", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "if", "'cv'", "in", "self", ".", "resampling_strategy", ":", "\n", "                    ", "if", "self", ".", "resampling_params", "is", "None", "or", "'folds'", "not", "in", "self", ".", "resampling_params", ":", "\n", "                        ", "folds", "=", "5", "\n", "", "else", ":", "\n", "                        ", "folds", "=", "self", ".", "resampling_params", "[", "'folds'", "]", "\n", "\n", "", "", "from", "sklearn", ".", "model_selection", "import", "StratifiedKFold", "\n", "skfold", "=", "StratifiedKFold", "(", "n_splits", "=", "folds", ",", "random_state", "=", "self", ".", "seed", ",", "shuffle", "=", "False", ")", "\n", "scores", "=", "list", "(", ")", "\n", "\n", "for", "train_index", ",", "test_index", "in", "skfold", ".", "split", "(", "self", ".", "data_node", ".", "data", "[", "0", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", ")", ":", "\n", "                    ", "_x_train", ",", "_x_val", "=", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "_y_train", ",", "_y_val", "=", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "self", ".", "train_node", ".", "data", "=", "[", "_x_train", ",", "_y_train", "]", "\n", "self", ".", "val_node", ".", "data", "=", "[", "_x_val", ",", "_y_val", "]", "\n", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "train_node", ",", "config", ",", "record", "=", "True", ",", "if_imbal", "=", "self", ".", "if_imbal", ")", "\n", "_val_node", "=", "self", ".", "val_node", ".", "copy_", "(", ")", "\n", "_val_node", "=", "construct_node", "(", "_val_node", ",", "op_list", ")", "\n", "\n", "_x_train", ",", "_y_train", "=", "data_node", ".", "data", "\n", "_x_val", ",", "_y_val", "=", "_val_node", ".", "data", "\n", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "# Prepare training and initial params for classifier.", "\n", "init_params", ",", "fit_params", "=", "{", "}", ",", "{", "}", "\n", "if", "data_node", ".", "enable_balance", "==", "1", ":", "\n", "                        ", "init_params", ",", "fit_params", "=", "self", ".", "get_fit_params", "(", "_y_train", ",", "self", ".", "estimator_id", ")", "\n", "for", "key", ",", "val", "in", "init_params", ".", "items", "(", ")", ":", "\n", "                            ", "config_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "", "if", "data_node", ".", "data_balance", "==", "1", ":", "\n", "                        ", "fit_params", "[", "'data_balance'", "]", "=", "True", "\n", "\n", "", "classifier_id", ",", "clf", "=", "get_estimator", "(", "config_dict", ",", "self", ".", "estimator_id", ")", "\n", "\n", "if", "self", ".", "onehot_encoder", "is", "None", ":", "\n", "                        ", "self", ".", "onehot_encoder", "=", "OneHotEncoder", "(", "categories", "=", "'auto'", ")", "\n", "y", "=", "np", ".", "reshape", "(", "_y_train", ",", "(", "len", "(", "_y_train", ")", ",", "1", ")", ")", "\n", "self", ".", "onehot_encoder", ".", "fit", "(", "y", ")", "\n", "\n", "", "_score", "=", "validation", "(", "clf", ",", "self", ".", "scorer", ",", "_x_train", ",", "_y_train", ",", "_x_val", ",", "_y_val", ",", "\n", "random_state", "=", "self", ".", "seed", ",", "\n", "onehot", "=", "self", ".", "onehot_encoder", "if", "isinstance", "(", "self", ".", "scorer", ",", "\n", "_ThresholdScorer", ")", "else", "None", ",", "\n", "fit_params", "=", "fit_params", ")", "\n", "scores", ".", "append", "(", "_score", ")", "\n", "", "score", "=", "np", ".", "mean", "(", "scores", ")", "\n", "\n", "", "", "elif", "'partial'", "in", "self", ".", "resampling_strategy", ":", "\n", "# Prepare data node.", "\n", "            ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "\n", "if", "self", ".", "resampling_params", "is", "None", "or", "'test_size'", "not", "in", "self", ".", "resampling_params", ":", "\n", "                    ", "test_size", "=", "0.33", "\n", "", "else", ":", "\n", "                    ", "test_size", "=", "self", ".", "resampling_params", "[", "'test_size'", "]", "\n", "\n", "", "from", "sklearn", ".", "model_selection", "import", "StratifiedShuffleSplit", "\n", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "self", ".", "data_node", ".", "data", "[", "0", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", ")", ":", "\n", "                    ", "_x_train", ",", "_x_val", "=", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "_y_train", ",", "_y_val", "=", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "train_index", "]", ",", "self", ".", "data_node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "", "self", ".", "train_node", ".", "data", "=", "[", "_x_train", ",", "_y_train", "]", "\n", "self", ".", "val_node", ".", "data", "=", "[", "_x_val", ",", "_y_val", "]", "\n", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "train_node", ",", "config", ",", "record", "=", "True", ",", "if_imbal", "=", "self", ".", "if_imbal", ")", "\n", "_val_node", "=", "self", ".", "val_node", ".", "copy_", "(", ")", "\n", "_val_node", "=", "construct_node", "(", "_val_node", ",", "op_list", ")", "\n", "\n", "", "_x_train", ",", "_y_train", "=", "data_node", ".", "data", "\n", "\n", "if", "downsample_ratio", "!=", "1", ":", "\n", "                ", "down_ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "downsample_ratio", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "for", "_", ",", "_val_index", "in", "down_ss", ".", "split", "(", "_x_train", ",", "_y_train", ")", ":", "\n", "                    ", "_act_x_train", ",", "_act_y_train", "=", "_x_train", "[", "_val_index", "]", ",", "_y_train", "[", "_val_index", "]", "\n", "", "", "else", ":", "\n", "                ", "_act_x_train", ",", "_act_y_train", "=", "_x_train", ",", "_y_train", "\n", "_val_index", "=", "list", "(", "range", "(", "len", "(", "_x_train", ")", ")", ")", "\n", "\n", "", "_x_val", ",", "_y_val", "=", "_val_node", ".", "data", "\n", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "# Prepare training and initial params for classifier.", "\n", "init_params", ",", "fit_params", "=", "{", "}", ",", "{", "}", "\n", "if", "data_node", ".", "enable_balance", "==", "1", ":", "\n", "                ", "init_params", ",", "fit_params", "=", "self", ".", "get_fit_params", "(", "_y_train", ",", "self", ".", "estimator_id", ")", "\n", "for", "key", ",", "val", "in", "init_params", ".", "items", "(", ")", ":", "\n", "                    ", "config_dict", "[", "key", "]", "=", "val", "\n", "", "", "if", "'sample_weight'", "in", "fit_params", ":", "\n", "                ", "fit_params", "[", "'sample_weight'", "]", "=", "fit_params", "[", "'sample_weight'", "]", "[", "_val_index", "]", "\n", "", "if", "data_node", ".", "data_balance", "==", "1", ":", "\n", "                ", "fit_params", "[", "'data_balance'", "]", "=", "True", "\n", "\n", "", "classifier_id", ",", "clf", "=", "get_estimator", "(", "config_dict", ",", "self", ".", "estimator_id", ")", "\n", "\n", "if", "self", ".", "onehot_encoder", "is", "None", ":", "\n", "                ", "self", ".", "onehot_encoder", "=", "OneHotEncoder", "(", "categories", "=", "'auto'", ")", "\n", "y", "=", "np", ".", "reshape", "(", "_y_train", ",", "(", "len", "(", "_y_train", ")", ",", "1", ")", ")", "\n", "self", ".", "onehot_encoder", ".", "fit", "(", "y", ")", "\n", "", "score", "=", "validation", "(", "clf", ",", "self", ".", "scorer", ",", "_act_x_train", ",", "_act_y_train", ",", "_x_val", ",", "_y_val", ",", "\n", "random_state", "=", "self", ".", "seed", ",", "\n", "onehot", "=", "self", ".", "onehot_encoder", "if", "isinstance", "(", "self", ".", "scorer", ",", "\n", "_ThresholdScorer", ")", "else", "None", ",", "\n", "fit_params", "=", "fit_params", ")", "\n", "\n", "if", "np", ".", "isfinite", "(", "score", ")", "and", "downsample_ratio", "==", "1", ":", "\n", "                ", "model_path", "=", "CombinedTopKModelSaver", ".", "get_path_by_config", "(", "self", ".", "output_dir", ",", "config", ",", "self", ".", "timestamp", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "_", ",", "_", ",", "perf", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "if", "score", ">", "perf", ":", "\n", "                        ", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pkl", ".", "dump", "(", "[", "op_list", ",", "clf", ",", "score", "]", ",", "f", ")", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"Model saved to %s\"", "%", "model_path", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid resampling strategy: %s!'", "%", "self", ".", "resampling_strategy", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Evaluation<%s> | Score: %.4f | Time cost: %.2f seconds | Shape: %s'", "%", "\n", "(", "classifier_id", ",", "\n", "self", ".", "scorer", ".", "_sign", "*", "score", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ",", "_x_train", ".", "shape", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# Turn it into a minimization problem.", "\n", "", "return_dict", "[", "'objective'", "]", "=", "-", "score", "\n", "return", "-", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator": [[21, 37], ["config.copy", "dict", "mindware.components.utils.class_loader.get_combined_candidtates", "hasattr", "setattr", "key.split", "key.split"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates"], ["def", "get_estimator", "(", "config", ",", "estimator_id", ")", ":", "\n", "    ", "classifier_type", "=", "estimator_id", "\n", "config_", "=", "config", ".", "copy", "(", ")", "\n", "config_", "[", "'%s:random_state'", "%", "classifier_type", "]", "=", "1", "\n", "hpo_config", "=", "dict", "(", ")", "\n", "for", "key", "in", "config_", ":", "\n", "        ", "key_name", "=", "key", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "if", "classifier_type", "==", "key_name", ":", "\n", "            ", "act_key", "=", "key", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "hpo_config", "[", "act_key", "]", "=", "config_", "[", "key", "]", "\n", "\n", "", "", "_candidates", "=", "get_combined_candidtates", "(", "_classifiers", ",", "_addons", ")", "\n", "estimator", "=", "_candidates", "[", "classifier_type", "]", "(", "**", "hpo_config", ")", "\n", "if", "hasattr", "(", "estimator", ",", "'n_jobs'", ")", ":", "\n", "        ", "setattr", "(", "estimator", ",", "'n_jobs'", ",", "1", ")", "\n", "", "return", "classifier_type", ",", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_hpo_cs": [[39, 47], ["mindware.components.utils.class_loader.get_combined_candidtates", "clf_class.get_hyperparameter_search_space", "ValueError"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.classification.extra_trees.ExtraTreesClassifier.get_hyperparameter_search_space"], ["", "def", "get_hpo_cs", "(", "estimator_id", ",", "task_type", "=", "CLASSIFICATION", ")", ":", "\n", "    ", "_candidates", "=", "get_combined_candidtates", "(", "_classifiers", ",", "_addons", ")", "\n", "if", "estimator_id", "in", "_candidates", ":", "\n", "        ", "clf_class", "=", "_candidates", "[", "estimator_id", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Algorithm %s not supported!\"", "%", "estimator_id", ")", "\n", "", "cs", "=", "clf_class", ".", "get_hyperparameter_search_space", "(", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_cash_cs": [[49, 64], ["mindware.components.utils.class_loader.get_combined_candidtates", "ConfigSpace.ConfigurationSpace", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "set().intersection", "list", "cls_evaluator.get_hpo_cs", "ConfigSpace.ConfigurationSpace.add_configuration_space", "set", "len", "ValueError", "set", "set().intersection.keys"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.class_loader.get_combined_candidtates", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_hpo_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys"], ["", "def", "get_cash_cs", "(", "include_algorithms", "=", "None", ",", "task_type", "=", "CLASSIFICATION", ")", ":", "\n", "    ", "_candidates", "=", "get_combined_candidtates", "(", "_classifiers", ",", "_addons", ")", "\n", "if", "include_algorithms", "is", "not", "None", ":", "\n", "        ", "_candidates", "=", "set", "(", "include_algorithms", ")", ".", "intersection", "(", "set", "(", "_candidates", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "_candidates", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"No algorithms included! Please check the spelling of the included algorithms!\"", ")", "\n", "", "", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "algo", "=", "CategoricalHyperparameter", "(", "'algorithm'", ",", "list", "(", "_candidates", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "algo", ")", "\n", "for", "estimator_id", "in", "_candidates", ":", "\n", "        ", "estimator_cs", "=", "get_hpo_cs", "(", "estimator_id", ")", "\n", "parent_hyperparameter", "=", "{", "'parent'", ":", "algo", ",", "\n", "'value'", ":", "estimator_id", "}", "\n", "cs", ".", "add_configuration_space", "(", "estimator_id", ",", "estimator_cs", ",", "parent_hyperparameter", "=", "parent_hyperparameter", ")", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_fe_cs": [[66, 71], ["mindware.components.feature_engineering.task_space.get_task_hyperparameter_space"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.task_space.get_task_hyperparameter_space"], ["", "def", "get_fe_cs", "(", "task_type", "=", "CLASSIFICATION", ",", "include_image", "=", "False", ",", "\n", "include_text", "=", "False", ",", "include_preprocessors", "=", "None", ",", "if_imbal", "=", "False", ")", ":", "\n", "    ", "cs", "=", "get_task_hyperparameter_space", "(", "task_type", "=", "task_type", ",", "include_image", "=", "include_image", ",", "include_text", "=", "include_text", ",", "\n", "include_preprocessors", "=", "include_preprocessors", ",", "if_imbal", "=", "if_imbal", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_combined_cs": [[73, 86], ["cls_evaluator.get_cash_cs", "cls_evaluator.get_fe_cs", "get_fe_cs.get_hyperparameters", "get_fe_cs.get_conditions", "get_fe_cs.get_forbiddens", "get_cash_cs.add_hyperparameter", "get_cash_cs.add_condition", "get_cash_cs.add_forbidden_clause"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_cash_cs", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_fe_cs"], ["", "def", "get_combined_cs", "(", "task_type", "=", "CLASSIFICATION", ",", "include_image", "=", "False", ",", "\n", "include_text", "=", "False", ",", "include_preprocessors", "=", "None", ",", "if_imbal", "=", "False", ")", ":", "\n", "    ", "cash_cs", "=", "get_cash_cs", "(", "task_type", ")", "\n", "fe_cs", "=", "get_fe_cs", "(", "task_type", ",", "\n", "include_image", "=", "include_image", ",", "include_text", "=", "include_text", ",", "\n", "include_preprocessors", "=", "include_preprocessors", ",", "if_imbal", "=", "if_imbal", ")", "\n", "for", "hp", "in", "fe_cs", ".", "get_hyperparameters", "(", ")", ":", "\n", "        ", "cash_cs", ".", "add_hyperparameter", "(", "hp", ")", "\n", "", "for", "cond", "in", "fe_cs", ".", "get_conditions", "(", ")", ":", "\n", "        ", "cash_cs", ".", "add_condition", "(", "cond", ")", "\n", "", "for", "bid", "in", "fe_cs", ".", "get_forbiddens", "(", ")", ":", "\n", "        ", "cash_cs", ".", "add_forbidden_clause", "(", "bid", ")", "\n", "", "return", "cash_cs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.get_onehot_y": [[8, 11], ["numpy.reshape", "encoder.transform().toarray", "len", "encoder.transform"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["def", "get_onehot_y", "(", "encoder", ",", "y", ")", ":", "\n", "    ", "y_", "=", "np", ".", "reshape", "(", "y", ",", "(", "len", "(", "y", ")", ",", "1", ")", ")", "\n", "return", "encoder", ".", "transform", "(", "y_", ")", ".", "toarray", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.cross_validation": [[13, 37], ["warnings.catch_warnings", "warnings.filterwarnings", "list", "sklearn.model_selection.KFold.split", "numpy.mean", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.KFold", "dict", "estimator.fit", "list.append", "evaluate_func.get_onehot_y", "scorer", "mindware.components.utils.balancing.smote"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.get_onehot_y", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.smote"], ["", "def", "cross_validation", "(", "estimator", ",", "scorer", ",", "X", ",", "y", ",", "n_fold", "=", "5", ",", "shuffle", "=", "True", ",", "fit_params", "=", "None", ",", "if_stratify", "=", "True", ",", "\n", "onehot", "=", "None", ",", "random_state", "=", "1", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "# ignore all caught warnings", "\n", "        ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "if", "if_stratify", ":", "\n", "            ", "kfold", "=", "StratifiedKFold", "(", "n_splits", "=", "n_fold", ",", "random_state", "=", "random_state", ",", "shuffle", "=", "shuffle", ")", "\n", "", "else", ":", "\n", "            ", "kfold", "=", "KFold", "(", "n_splits", "=", "n_fold", ",", "random_state", "=", "random_state", ",", "shuffle", "=", "shuffle", ")", "\n", "", "scores", "=", "list", "(", ")", "\n", "for", "train_idx", ",", "valid_idx", "in", "kfold", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "train_x", ",", "valid_x", "=", "X", "[", "train_idx", "]", ",", "X", "[", "valid_idx", "]", "\n", "train_y", ",", "valid_y", "=", "y", "[", "train_idx", "]", ",", "y", "[", "valid_idx", "]", "\n", "_fit_params", "=", "dict", "(", ")", "\n", "if", "fit_params", ":", "\n", "                ", "if", "'sample_weight'", "in", "fit_params", ":", "\n", "                    ", "_fit_params", "[", "'sample_weight'", "]", "=", "fit_params", "[", "'sample_weight'", "]", "[", "train_idx", "]", "\n", "", "elif", "'data_balance'", "in", "fit_params", ":", "\n", "                    ", "X_train", ",", "y_train", "=", "smote", "(", "X_train", ",", "y_train", ")", "\n", "", "", "estimator", ".", "fit", "(", "train_x", ",", "train_y", ",", "**", "_fit_params", ")", "\n", "if", "onehot", "is", "not", "None", ":", "\n", "                ", "valid_y", "=", "get_onehot_y", "(", "onehot", ",", "valid_y", ")", "\n", "", "scores", ".", "append", "(", "scorer", "(", "estimator", ",", "valid_x", ",", "valid_y", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.holdout_validation": [[39, 61], ["warnings.catch_warnings", "warnings.filterwarnings", "sklearn.model_selection.ShuffleSplit.split", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.ShuffleSplit", "dict", "estimator.fit", "scorer", "evaluate_func.get_onehot_y", "mindware.components.utils.balancing.smote"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.get_onehot_y", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.smote"], ["", "", "def", "holdout_validation", "(", "estimator", ",", "scorer", ",", "X", ",", "y", ",", "test_size", "=", "0.33", ",", "fit_params", "=", "None", ",", "if_stratify", "=", "True", ",", "onehot", "=", "None", ",", "\n", "random_state", "=", "1", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "# ignore all caught warnings", "\n", "        ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "if", "if_stratify", ":", "\n", "            ", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "random_state", ")", "\n", "", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "X_train", ",", "X_test", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "_fit_params", "=", "dict", "(", ")", "\n", "if", "fit_params", ":", "\n", "                ", "if", "'sample_weight'", "in", "fit_params", ":", "\n", "                    ", "_fit_params", "[", "'sample_weight'", "]", "=", "fit_params", "[", "'sample_weight'", "]", "[", "train_index", "]", "\n", "", "elif", "'data_balance'", "in", "fit_params", ":", "\n", "                    ", "X_train", ",", "y_train", "=", "smote", "(", "X_train", ",", "y_train", ")", "\n", "", "", "estimator", ".", "fit", "(", "X_train", ",", "y_train", ",", "**", "_fit_params", ")", "\n", "if", "onehot", "is", "not", "None", ":", "\n", "                ", "y_test", "=", "get_onehot_y", "(", "onehot", ",", "y_test", ")", "\n", "", "return", "scorer", "(", "estimator", ",", "X_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.partial_validation": [[63, 98], ["warnings.catch_warnings", "warnings.filterwarnings", "sklearn.model_selection.ShuffleSplit.split", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.ShuffleSplit", "dict", "estimator.fit", "scorer", "sklearn.model_selection.ShuffleSplit.split", "evaluate_func.get_onehot_y", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.ShuffleSplit", "mindware.components.utils.balancing.smote"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.get_onehot_y", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.smote"], ["", "", "", "def", "partial_validation", "(", "estimator", ",", "scorer", ",", "X", ",", "y", ",", "data_subsample_ratio", ",", "test_size", "=", "0.33", ",", "fit_params", "=", "None", ",", "if_stratify", "=", "True", ",", "\n", "onehot", "=", "None", ",", "random_state", "=", "1", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "# ignore all caught warnings", "\n", "        ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "if", "if_stratify", ":", "\n", "            ", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "random_state", ")", "\n", "", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "X", ",", "y", ")", ":", "\n", "            ", "X_train", ",", "X_test", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "_fit_params", "=", "dict", "(", ")", "\n", "_test_index", "=", "train_index", "\n", "if", "data_subsample_ratio", "==", "1", ":", "\n", "                ", "_X_train", ",", "_y_train", "=", "X_train", ",", "y_train", "\n", "", "else", ":", "\n", "                ", "if", "if_stratify", ":", "\n", "                    ", "down_ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "data_subsample_ratio", ",", "\n", "random_state", "=", "random_state", ")", "\n", "", "else", ":", "\n", "                    ", "down_ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "data_subsample_ratio", ",", "random_state", "=", "random_state", ")", "\n", "", "for", "_", ",", "_test_index", "in", "down_ss", ".", "split", "(", "X_train", ",", "y_train", ")", ":", "\n", "                    ", "_X_train", ",", "_y_train", "=", "X_train", "[", "_test_index", "]", ",", "y_train", "[", "_test_index", "]", "\n", "\n", "", "", "if", "fit_params", ":", "\n", "                ", "if", "'sample_weight'", "in", "fit_params", ":", "\n", "                    ", "_fit_params", "[", "'sample_weight'", "]", "=", "fit_params", "[", "'sample_weight'", "]", "[", "_test_index", "]", "\n", "", "elif", "'data_balance'", "in", "fit_params", ":", "\n", "                    ", "_X_train", ",", "_y_train", "=", "smote", "(", "_X_train", ",", "_y_train", ")", "\n", "\n", "", "", "estimator", ".", "fit", "(", "_X_train", ",", "_y_train", ",", "**", "_fit_params", ")", "\n", "if", "onehot", "is", "not", "None", ":", "\n", "                ", "y_test", "=", "get_onehot_y", "(", "onehot", ",", "y_test", ")", "\n", "", "return", "scorer", "(", "estimator", ",", "X_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.validation": [[100, 115], ["warnings.catch_warnings", "warnings.filterwarnings", "dict", "estimator.fit", "scorer", "evaluate_func.get_onehot_y", "mindware.components.utils.balancing.smote"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.evaluate_func.get_onehot_y", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.smote"], ["", "", "", "def", "validation", "(", "estimator", ",", "scorer", ",", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", ",", "fit_params", "=", "None", ",", "onehot", "=", "None", ",", "\n", "random_state", "=", "1", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "# ignore all caught warnings", "\n", "        ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "_fit_params", "=", "dict", "(", ")", "\n", "if", "fit_params", ":", "\n", "            ", "if", "'sample_weight'", "in", "fit_params", ":", "\n", "                ", "_fit_params", "[", "'sample_weight'", "]", "=", "fit_params", "[", "'sample_weight'", "]", "\n", "", "elif", "'data_balance'", "in", "fit_params", ":", "\n", "                ", "X_train", ",", "y_train", "=", "smote", "(", "X_train", ",", "y_train", ")", "\n", "", "", "estimator", ".", "fit", "(", "X_train", ",", "y_train", ",", "**", "_fit_params", ")", "\n", "if", "onehot", "is", "not", "None", ":", "\n", "            ", "y_val", "=", "get_onehot_y", "(", "onehot", ",", "y_val", ")", "\n", "", "return", "scorer", "(", "estimator", ",", "X_val", ",", "y_val", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator._BaseEvaluator.__init__": [[29, 42], ["mindware.components.metrics.metric.get_metric", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric"], ["    ", "def", "__init__", "(", "self", ",", "estimator", ",", "metric", ",", "task_type", ",", "\n", "evaluation_strategy", ",", "**", "evaluation_params", ")", ":", "\n", "        ", "self", ".", "estimator", "=", "estimator", "\n", "if", "task_type", "not", "in", "TASK_TYPES", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported task type: %s'", "%", "task_type", ")", "\n", "", "self", ".", "metric", "=", "get_metric", "(", "metric", ")", "\n", "self", ".", "metric_name", "=", "metric", "\n", "self", ".", "evaluation_strategy", "=", "evaluation_strategy", "\n", "self", ".", "evaluation_params", "=", "evaluation_params", "\n", "\n", "if", "self", ".", "evaluation_strategy", "==", "'holdout'", ":", "\n", "            ", "if", "'train_size'", "not", "in", "self", ".", "evaluation_params", ":", "\n", "                ", "self", ".", "evaluation_params", "[", "'train_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator._BaseEvaluator.__call__": [[43, 45], ["NotImplementedError"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator.fetch_predict_estimator": [[6, 26], ["config.copy", "get_estimator", "estimator.fit", "get_weights", "_init_params.items", "smote"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.cls_evaluator.get_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.get_weights", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.balancing.smote"], ["def", "fetch_predict_estimator", "(", "task_type", ",", "estimator_id", ",", "config", ",", "X_train", ",", "y_train", ",", "weight_balance", "=", "0", ",", "data_balance", "=", "0", ")", ":", "\n", "# Build the ML estimator.", "\n", "    ", "from", "mindware", ".", "components", ".", "utils", ".", "balancing", "import", "get_weights", ",", "smote", "\n", "_fit_params", "=", "{", "}", "\n", "config_dict", "=", "config", ".", "copy", "(", ")", "\n", "if", "weight_balance", "==", "1", ":", "\n", "        ", "_init_params", ",", "_fit_params", "=", "get_weights", "(", "\n", "y_train", ",", "estimator_id", ",", "None", ",", "{", "}", ",", "{", "}", ")", "\n", "for", "key", ",", "val", "in", "_init_params", ".", "items", "(", ")", ":", "\n", "            ", "config_dict", "[", "key", "]", "=", "val", "\n", "", "", "if", "data_balance", "==", "1", ":", "\n", "        ", "X_train", ",", "y_train", "=", "smote", "(", "X_train", ",", "y_train", ")", "\n", "", "if", "task_type", "in", "CLS_TASKS", ":", "\n", "        ", "from", "mindware", ".", "components", ".", "evaluators", ".", "cls_evaluator", "import", "get_estimator", "\n", "", "elif", "task_type", "in", "RGS_TASKS", ":", "\n", "        ", "from", "mindware", ".", "components", ".", "evaluators", ".", "rgs_evaluator", "import", "get_estimator", "\n", "", "_", ",", "estimator", "=", "get_estimator", "(", "config_dict", ",", "estimator_id", ")", "\n", "\n", "estimator", ".", "fit", "(", "X_train", ",", "y_train", ",", "**", "_fit_params", ")", "\n", "return", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.cls_metrics.balanced_accuracy": [[7, 60], ["sklearn.metrics.classification._check_targets", "numpy.sum", "numpy.sum", "scipy.maximum", "scipy.maximum", "numpy.mean", "ValueError", "numpy.multiply", "numpy.multiply", "numpy.sum", "numpy.sum", "scipy.maximum", "scipy.maximum", "int", "numpy.zeros", "numpy.zeros", "range", "numpy.multiply", "numpy.multiply", "ValueError", "numpy.max", "len", "solution.toarray.toarray", "prediction.toarray.toarray", "NotImplementedError", "len", "len", "numpy.max", "numpy.max", "int", "int"], "function", ["None"], ["def", "balanced_accuracy", "(", "solution", ",", "prediction", ")", ":", "\n", "    ", "y_type", ",", "solution", ",", "prediction", "=", "_check_targets", "(", "solution", ",", "prediction", ")", "\n", "\n", "if", "y_type", "not", "in", "[", "\"binary\"", ",", "\"multiclass\"", ",", "'multilabel-indicator'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"{0} is not supported\"", ".", "format", "(", "y_type", ")", ")", "\n", "\n", "", "if", "y_type", "==", "'binary'", ":", "\n", "# Do not transform into any multiclass representation", "\n", "        ", "pass", "\n", "\n", "", "elif", "y_type", "==", "'multiclass'", ":", "\n", "# Need to create a multiclass solution and a multiclass predictions", "\n", "        ", "max_class", "=", "int", "(", "np", ".", "max", "(", "(", "np", ".", "max", "(", "solution", ")", ",", "np", ".", "max", "(", "prediction", ")", ")", ")", ")", "\n", "solution_binary", "=", "np", ".", "zeros", "(", "(", "len", "(", "solution", ")", ",", "max_class", "+", "1", ")", ")", "\n", "prediction_binary", "=", "np", ".", "zeros", "(", "(", "len", "(", "prediction", ")", ",", "max_class", "+", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "solution", ")", ")", ":", "\n", "            ", "solution_binary", "[", "i", ",", "int", "(", "solution", "[", "i", "]", ")", "]", "=", "1", "\n", "prediction_binary", "[", "i", ",", "int", "(", "prediction", "[", "i", "]", ")", "]", "=", "1", "\n", "", "solution", "=", "solution_binary", "\n", "prediction", "=", "prediction_binary", "\n", "\n", "", "elif", "y_type", "==", "'multilabel-indicator'", ":", "\n", "        ", "solution", "=", "solution", ".", "toarray", "(", ")", "\n", "prediction", "=", "prediction", ".", "toarray", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'bac_metric does not support task type %s'", "\n", "%", "y_type", ")", "\n", "\n", "", "fn", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "solution", ",", "(", "1", "-", "prediction", ")", ")", ",", "axis", "=", "0", ",", "\n", "dtype", "=", "float", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "solution", ",", "prediction", ")", ",", "axis", "=", "0", ",", "dtype", "=", "float", ")", "\n", "# Bounding to avoid division by 0", "\n", "eps", "=", "1e-15", "\n", "tp", "=", "sp", ".", "maximum", "(", "eps", ",", "tp", ")", "\n", "pos_num", "=", "sp", ".", "maximum", "(", "eps", ",", "tp", "+", "fn", ")", "\n", "tpr", "=", "tp", "/", "pos_num", "# true positive rate (sensitivity)", "\n", "\n", "if", "y_type", "in", "(", "'binary'", ",", "'multilabel-indicator'", ")", ":", "\n", "        ", "tn", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "(", "1", "-", "solution", ")", ",", "(", "1", "-", "prediction", ")", ")", ",", "\n", "axis", "=", "0", ",", "dtype", "=", "float", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "(", "1", "-", "solution", ")", ",", "prediction", ")", ",", "axis", "=", "0", ",", "\n", "dtype", "=", "float", ")", "\n", "tn", "=", "sp", ".", "maximum", "(", "eps", ",", "tn", ")", "\n", "neg_num", "=", "sp", ".", "maximum", "(", "eps", ",", "tn", "+", "fp", ")", "\n", "tnr", "=", "tn", "/", "neg_num", "# true negative rate (specificity)", "\n", "bac", "=", "0.5", "*", "(", "tpr", "+", "tnr", ")", "\n", "", "elif", "y_type", "==", "'multiclass'", ":", "\n", "        ", "label_num", "=", "solution", ".", "shape", "[", "1", "]", "\n", "bac", "=", "tpr", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "y_type", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "bac", ")", "# average over all classes", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.cls_metrics.pac_score": [[62, 242], ["sklearn.metrics.classification.type_of_target", "cls_metrics.pac_score.normalize_array"], "function", ["None"], ["", "def", "pac_score", "(", "solution", ",", "prediction", ")", ":", "\n", "    ", "\"\"\"\n    Probabilistic Accuracy based on log_loss metric.\n    We assume the solution is in {0, 1} and prediction in [0, 1].\n    Otherwise, run normalize_array.\n    :param solution:\n    :param prediction:\n    :param task:\n    :return:\n    \"\"\"", "\n", "\n", "def", "normalize_array", "(", "solution", ",", "prediction", ")", ":", "\n", "        ", "\"\"\"\n        Use min and max of solution as scaling factors to normalize prediction,\n        then threshold it to [0, 1].\n        Binarize solution to {0, 1}. This allows applying classification\n        scores to all cases. In principle, this should not do anything to\n        properly formatted classification inputs and outputs.\n        :param solution:\n        :param prediction:\n        :return:\n        \"\"\"", "\n", "# Binarize solution", "\n", "sol", "=", "np", ".", "ravel", "(", "solution", ")", "# convert to 1-d array", "\n", "maxi", "=", "np", ".", "nanmax", "(", "sol", "[", "np", ".", "isfinite", "(", "sol", ")", "]", ")", "\n", "mini", "=", "np", ".", "nanmin", "(", "sol", "[", "np", ".", "isfinite", "(", "sol", ")", "]", ")", "\n", "if", "maxi", "==", "mini", ":", "\n", "            ", "print", "(", "'Warning, cannot normalize'", ")", "\n", "return", "[", "solution", ",", "prediction", "]", "\n", "", "diff", "=", "maxi", "-", "mini", "\n", "mid", "=", "(", "maxi", "+", "mini", ")", "/", "2.", "\n", "\n", "solution", "[", "solution", ">=", "mid", "]", "=", "1", "\n", "solution", "[", "solution", "<", "mid", "]", "=", "0", "\n", "# Normalize and threshold predictions (takes effect only if solution not", "\n", "# in {0, 1})", "\n", "\n", "prediction", "-=", "float", "(", "mini", ")", "\n", "prediction", "/=", "float", "(", "diff", ")", "\n", "\n", "# and if predictions exceed the bounds [0, 1]", "\n", "prediction", "[", "prediction", ">", "1", "]", "=", "1", "\n", "prediction", "[", "prediction", "<", "0", "]", "=", "0", "\n", "# Make probabilities smoother", "\n", "# new_prediction = np.power(new_prediction, (1./10))", "\n", "\n", "return", "[", "solution", ",", "prediction", "]", "\n", "\n", "", "def", "log_loss", "(", "solution", ",", "prediction", ",", "task", ")", ":", "\n", "        ", "\"\"\"Log loss for binary and multiclass.\"\"\"", "\n", "[", "sample_num", ",", "label_num", "]", "=", "solution", ".", "shape", "\n", "# Lower gives problems with float32!", "\n", "eps", "=", "0.00000003", "\n", "\n", "if", "(", "task", "==", "'multiclass'", ")", "and", "(", "label_num", ">", "1", ")", ":", "\n", "# Make sure the lines add up to one for multi-class classification", "\n", "            ", "norma", "=", "np", ".", "sum", "(", "prediction", ",", "axis", "=", "1", ")", "\n", "for", "k", "in", "range", "(", "sample_num", ")", ":", "\n", "                ", "prediction", "[", "k", ",", ":", "]", "/=", "sp", ".", "maximum", "(", "norma", "[", "k", "]", ",", "eps", ")", "\n", "\n", "", "sample_num", "=", "solution", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "sample_num", ")", ":", "\n", "                ", "j", "=", "np", ".", "argmax", "(", "solution", "[", "i", ",", ":", "]", ")", "\n", "solution", "[", "i", ",", ":", "]", "=", "0", "\n", "solution", "[", "i", ",", "j", "]", "=", "1", "\n", "\n", "", "solution", "=", "solution", ".", "astype", "(", "np", ".", "int32", ",", "copy", "=", "False", ")", "\n", "# For the base prediction, this solution is ridiculous in the", "\n", "# multi-label case", "\n", "\n", "# Bounding of predictions to avoid log(0),1/0,...", "\n", "", "prediction", "=", "sp", ".", "minimum", "(", "1", "-", "eps", ",", "sp", ".", "maximum", "(", "eps", ",", "prediction", ")", ")", "\n", "# Compute the log loss", "\n", "pos_class_log_loss", "=", "-", "np", ".", "mean", "(", "solution", "*", "np", ".", "log", "(", "prediction", ")", ",", "axis", "=", "0", ")", "\n", "if", "(", "task", "!=", "'multiclass'", ")", "or", "(", "label_num", "==", "1", ")", ":", "\n", "# The multi-label case is a bunch of binary problems.", "\n", "# The second class is the negative class for each column.", "\n", "            ", "neg_class_log_loss", "=", "-", "np", ".", "mean", "(", "\n", "(", "1", "-", "solution", ")", "*", "np", ".", "log", "(", "1", "-", "prediction", ")", ",", "axis", "=", "0", ")", "\n", "log_loss", "=", "pos_class_log_loss", "+", "neg_class_log_loss", "\n", "# Each column is an independent problem, so we average.", "\n", "# The probabilities in one line do not add up to one.", "\n", "# log_loss = mvmean(log_loss)", "\n", "# print('binary {}'.format(log_loss))", "\n", "# In the multilabel case, the right thing i to AVERAGE not sum", "\n", "# We return all the scores so we can normalize correctly later on", "\n", "", "else", ":", "\n", "# For the multiclass case the probabilities in one line add up one.", "\n", "            ", "log_loss", "=", "pos_class_log_loss", "\n", "# We sum the contributions of the columns.", "\n", "log_loss", "=", "np", ".", "sum", "(", "log_loss", ")", "\n", "# print('multiclass {}'.format(log_loss))", "\n", "", "return", "log_loss", "\n", "\n", "", "def", "prior_log_loss", "(", "frac_pos", ",", "task", ")", ":", "\n", "        ", "\"\"\"Baseline log loss.\n        For multiplr classes ot labels return the volues for each column\n        \"\"\"", "\n", "eps", "=", "1e-15", "\n", "frac_pos_", "=", "sp", ".", "maximum", "(", "eps", ",", "frac_pos", ")", "\n", "if", "task", "!=", "'multiclass'", ":", "# binary case", "\n", "            ", "frac_neg", "=", "1", "-", "frac_pos", "\n", "frac_neg_", "=", "sp", ".", "maximum", "(", "eps", ",", "frac_neg", ")", "\n", "pos_class_log_loss_", "=", "-", "frac_pos", "*", "np", ".", "log", "(", "frac_pos_", ")", "\n", "neg_class_log_loss_", "=", "-", "frac_neg", "*", "np", ".", "log", "(", "frac_neg_", ")", "\n", "base_log_loss", "=", "pos_class_log_loss_", "+", "neg_class_log_loss_", "\n", "# base_log_loss = mvmean(base_log_loss)", "\n", "# print('binary {}'.format(base_log_loss))", "\n", "# In the multilabel case, the right thing i to AVERAGE not sum", "\n", "# We return all the scores so we can normalize correctly later on", "\n", "", "else", ":", "# multiclass case", "\n", "            ", "fp", "=", "frac_pos_", "/", "sum", "(", "\n", "frac_pos_", "\n", ")", "# Need to renormalize the lines in multiclass case", "\n", "# Only ONE label is 1 in the multiclass case active for each line", "\n", "pos_class_log_loss_", "=", "-", "frac_pos", "*", "np", ".", "log", "(", "fp", ")", "\n", "base_log_loss", "=", "np", ".", "sum", "(", "pos_class_log_loss_", ")", "\n", "", "return", "base_log_loss", "\n", "\n", "", "y_type", "=", "type_of_target", "(", "solution", ")", "\n", "\n", "if", "y_type", "==", "'binary'", ":", "\n", "        ", "if", "len", "(", "solution", ".", "shape", ")", "==", "1", ":", "\n", "            ", "solution", "=", "solution", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "if", "len", "(", "prediction", ".", "shape", ")", "==", "1", ":", "\n", "            ", "prediction", "=", "prediction", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "if", "len", "(", "prediction", ".", "shape", ")", "==", "2", ":", "\n", "            ", "if", "prediction", ".", "shape", "[", "1", "]", ">", "2", ":", "\n", "                ", "raise", "ValueError", "(", "'A prediction array with probability values '", "\n", "'for %d classes is not a binary '", "\n", "'classification problem'", "%", "prediction", ".", "shape", "[", "1", "]", ")", "\n", "# Prediction will be copied into a new binary array - no copy", "\n", "", "prediction", "=", "prediction", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid prediction shape %s'", "%", "prediction", ".", "shape", ")", "\n", "\n", "", "", "elif", "y_type", "==", "'multiclass'", ":", "\n", "        ", "if", "len", "(", "solution", ".", "shape", ")", "==", "2", ":", "\n", "            ", "if", "solution", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Solution array must only contain one class '", "\n", "'label, but contains %d'", "%", "solution", ".", "shape", "[", "1", "]", ")", "\n", "", "", "elif", "len", "(", "solution", ".", "shape", ")", "==", "1", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Solution.shape %s'", "%", "solution", ".", "shape", ")", "\n", "\n", "# Need to create a multiclass solution and a multiclass predictions", "\n", "", "max_class", "=", "int", "(", "np", ".", "max", "(", "(", "np", ".", "max", "(", "solution", ")", ",", "np", ".", "max", "(", "prediction", ")", ")", ")", ")", "\n", "solution_binary", "=", "np", ".", "zeros", "(", "(", "len", "(", "solution", ")", ",", "max_class", "+", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "solution", ")", ")", ":", "\n", "            ", "solution_binary", "[", "i", ",", "int", "(", "solution", "[", "i", "]", ")", "]", "=", "1", "\n", "", "solution", "=", "solution_binary", "\n", "\n", "", "elif", "y_type", "==", "'multilabel-indicator'", ":", "\n", "        ", "solution", "=", "solution", ".", "copy", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'pac_score does not support task type %s'", "\n", "%", "y_type", ")", "\n", "\n", "", "solution", ",", "prediction", "=", "normalize_array", "(", "solution", ",", "prediction", ".", "copy", "(", ")", ")", "\n", "\n", "sample_num", ",", "_", "=", "solution", ".", "shape", "\n", "\n", "eps", "=", "1e-7", "\n", "# Compute the base log loss (using the prior probabilities)", "\n", "pos_num", "=", "1.", "*", "np", ".", "sum", "(", "solution", ",", "axis", "=", "0", ",", "dtype", "=", "float", ")", "# float conversion!", "\n", "frac_pos", "=", "pos_num", "/", "sample_num", "# prior proba of positive class", "\n", "the_base_log_loss", "=", "prior_log_loss", "(", "frac_pos", ",", "y_type", ")", "\n", "the_log_loss", "=", "log_loss", "(", "solution", ",", "prediction", ",", "y_type", ")", "\n", "\n", "# Exponentiate to turn into an accuracy-like score.", "\n", "# In the multi-label case, we need to average AFTER taking the exp", "\n", "# because it is an NL operation", "\n", "pac", "=", "np", ".", "mean", "(", "np", ".", "exp", "(", "-", "the_log_loss", ")", ")", "\n", "base_pac", "=", "np", ".", "mean", "(", "np", ".", "exp", "(", "-", "the_base_log_loss", ")", ")", "\n", "# Normalize: 0 for random, 1 for perfect", "\n", "score", "=", "(", "pac", "-", "base_pac", ")", "/", "sp", ".", "maximum", "(", "eps", ",", "(", "1", "-", "base_pac", ")", ")", "\n", "\n", "return", "score", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.rgs_metrics.rmse": [[1, 4], ["mean_squared_error"], "function", ["None"], ["def", "rmse", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "from", "sklearn", ".", "metrics", "import", "mean_squared_error", "\n", "return", "mean_squared_error", "(", "y_true", ",", "y_pred", ")", "**", "0.5", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric": [[5, 62], ["sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "functools.partial", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "sklearn.metrics._scorer.make_scorer", "isinstance", "callable", "warnings.warn", "sklearn.metrics._scorer.make_scorer", "ValueError", "str"], "function", ["None"], ["def", "get_metric", "(", "metric", ")", ":", "\n", "# Metrics for classification", "\n", "    ", "if", "metric", "in", "[", "\"accuracy\"", ",", "\"acc\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "return", "make_scorer", "(", "accuracy_score", ")", "\n", "", "elif", "metric", "in", "[", "\"balanced_accuracy\"", ",", "\"bal_acc\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", ".", "_scorer", "import", "balanced_accuracy_scorer", "\n", "return", "balanced_accuracy_scorer", "\n", "", "elif", "metric", "==", "'f1'", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "f1_score", "\n", "return", "make_scorer", "(", "partial", "(", "f1_score", ",", "average", "=", "'macro'", ")", ")", "\n", "", "elif", "metric", "==", "'precision'", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "precision_score", "\n", "return", "make_scorer", "(", "precision_score", ")", "\n", "", "elif", "metric", "==", "'recall'", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "recall_score", "\n", "return", "make_scorer", "(", "recall_score", ")", "\n", "", "elif", "metric", "==", "\"auc\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "roc_auc_score", "\n", "return", "make_scorer", "(", "roc_auc_score", ",", "needs_threshold", "=", "True", ")", "\n", "", "elif", "metric", "in", "[", "'log_loss'", ",", "'cross_entropy'", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "log_loss", "\n", "return", "make_scorer", "(", "log_loss", ",", "greater_is_better", "=", "False", ",", "needs_proba", "=", "True", ")", "\n", "\n", "# Metrics for regression", "\n", "", "elif", "metric", "in", "[", "\"mean_squared_error\"", ",", "\"mse\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "mean_squared_error", "\n", "return", "make_scorer", "(", "mean_squared_error", ",", "greater_is_better", "=", "False", ")", "\n", "", "elif", "metric", "==", "\"rmse\"", ":", "\n", "        ", "from", ".", "rgs_metrics", "import", "rmse", "\n", "return", "make_scorer", "(", "rmse", ",", "greater_is_better", "=", "False", ")", "\n", "", "elif", "metric", "in", "[", "'mean_squared_log_error'", ",", "\"msle\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "mean_squared_log_error", "\n", "return", "make_scorer", "(", "mean_squared_log_error", ",", "greater_is_better", "=", "False", ")", "\n", "", "elif", "metric", "==", "\"evs\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "explained_variance_score", "\n", "return", "make_scorer", "(", "explained_variance_score", ")", "\n", "", "elif", "metric", "==", "\"r2\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "r2_score", "\n", "return", "make_scorer", "(", "r2_score", ")", "\n", "", "elif", "metric", "==", "\"max_error\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "max_error", "\n", "return", "make_scorer", "(", "max_error", ",", "greater_is_better", "=", "False", ")", "\n", "", "elif", "metric", "in", "[", "\"mean_absolute_error\"", ",", "\"mae\"", "]", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "mean_absolute_error", "\n", "return", "make_scorer", "(", "mean_absolute_error", ",", "greater_is_better", "=", "False", ")", "\n", "", "elif", "metric", "==", "\"median_absolute_error\"", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "median_absolute_error", "\n", "return", "make_scorer", "(", "median_absolute_error", ",", "greater_is_better", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "metric", ",", "_BaseScorer", ")", ":", "\n", "        ", "return", "metric", "\n", "", "elif", "callable", "(", "metric", ")", ":", "\n", "        ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\"metric receives a callable and we consider to maximize it!\"", ")", "\n", "return", "make_scorer", "(", "metric", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Given\"", ",", "str", "(", "metric", ")", ",", "\". Expect a str or a sklearn.Scorer or a callable\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.tabular_dataset.TabularDataset.__init__": [[8, 27], ["base_dl_dataset.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ":", "str", ",", "\n", "is_regression", "=", "False", ",", "\n", "label_column", "=", "-", "1", ",", "\n", "header", "=", "'infer'", ",", "\n", "sep", "=", "','", ",", "\n", "nan_values", "=", "(", "\"n/a\"", ",", "\"na\"", ",", "\"--\"", ",", "\"-\"", ",", "\"?\"", ")", ",", "\n", "train_val_split", ":", "bool", "=", "False", ",", "\n", "val_split_size", ":", "float", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_regression", "=", "is_regression", "\n", "self", ".", "train_val_split", "=", "train_val_split", "\n", "self", ".", "val_split_size", "=", "val_split_size", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "label_column", "=", "label_column", "\n", "self", ".", "header", "=", "header", "\n", "self", ".", "sep", "=", "sep", "\n", "self", ".", "nan_values", "=", "nan_values", "\n", "self", ".", "data_manager", "=", "None", "\n", "self", ".", "_process_pipeline", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.tabular_dataset.TabularDataset.load_tabular_data": [[28, 38], ["mindware.utils.data_manager.DataManager", "tabular_dataset.TabularDataset.data_manager.load_train_csv", "mindware.components.feature_engineering.fe_pipeline.FEPipeline", "tabular_dataset.TabularDataset._process_pipeline.fit_transform", "list"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.load_train_csv", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform"], ["", "def", "load_tabular_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "data_manager", "=", "DataManager", "(", ")", "\n", "train_data_node", "=", "self", ".", "data_manager", ".", "load_train_csv", "(", "data_path", ",", "\n", "label_col", "=", "self", ".", "label_column", ",", "\n", "header", "=", "self", ".", "header", ",", "sep", "=", "self", ".", "sep", ",", "\n", "na_values", "=", "list", "(", "self", ".", "nan_values", ")", ")", "\n", "\n", "task_type", "=", "REGRESSION", "if", "self", ".", "is_regression", "else", "CLASSIFICATION", "\n", "self", ".", "_process_pipeline", "=", "FEPipeline", "(", "fe_enabled", "=", "False", ",", "metric", "=", "'acc'", ",", "task_type", "=", "task_type", ")", "\n", "return", "self", ".", "_process_pipeline", ".", "fit_transform", "(", "train_data_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.tabular_dataset.TabularDataset.load_data": [[39, 41], ["tabular_dataset.TabularDataset.load_tabular_data"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.tabular_dataset.TabularDataset.load_tabular_data"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", "=", "self", ".", "load_tabular_data", "(", "self", ".", "data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.tabular_dataset.TabularDataset.load_test_data": [[42, 49], ["tabular_dataset.TabularDataset.data_manager.load_test_csv", "tabular_dataset.TabularDataset._process_pipeline.transform"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.load_test_csv", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "load_test_data", "(", "self", ")", ":", "\n", "        ", "test_data_node", "=", "self", ".", "data_manager", ".", "load_test_csv", "(", "self", ".", "test_data_path", ",", "\n", "has_label", "=", "False", ",", "\n", "keep_default_na", "=", "True", ",", "\n", "header", "=", "self", ".", "header", ",", "\n", "sep", "=", "self", ".", "sep", ")", "\n", "self", ".", "test_dataset", "=", "self", ".", "_process_pipeline", ".", "transform", "(", "test_data_node", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.base_dataset.BaseDataset.__init__": [[2, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", "=", "None", "\n", "self", ".", "test_dataset", "=", "None", "\n", "self", ".", "val_dataset", "=", "None", "\n", "self", ".", "test_data_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.base_dataset.BaseDataset.load_data": [[8, 10], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.base_dataset.BaseDataset.load_test_data": [[11, 13], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_test_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.base_dataset.BaseDataset.set_test_path": [[14, 16], ["None"], "methods", ["None"], ["", "def", "set_test_path", "(", "self", ",", "test_data_path", ")", ":", "\n", "        ", "self", ".", "test_data_path", "=", "test_data_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.__init__": [[76, 78], ["sklearn.preprocessing._encoders.OrdinalEncoder"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.fit": [[79, 82], ["utils.NanOrdinalEncoder.lbe.fit"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform": [[83, 90], ["utils.NanOrdinalEncoder.lbe.transform", "range", "list().index", "list"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_data": [[12, 56], ["mindware.utils.data_manager.DataManager", "mindware.utils.data_manager.DataManager.load_train_csv", "mindware.components.feature_engineering.fe_pipeline.FEPipeline", "mindware.components.feature_engineering.fe_pipeline.FEPipeline.fit_transform", "ValueError", "str"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.data_manager.DataManager.load_train_csv", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform"], ["print", "(", "pattern", ")", "\n", "\n", "\n", "def", "rename", "(", ")", ":", "\n", "    ", "for", "_filename", "in", "filename_list", ":", "\n", "        ", "used_name", "=", "data_folder", "+", "_filename", "\n", "if", "_filename", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "_filename", ")", "\n", "result", "=", "re", ".", "search", "(", "pattern", ",", "_filename", ",", "re", ".", "I", ")", "\n", "dataset", ",", "algo", ",", "run_id", ",", "seed", "=", "result", ".", "group", "(", "1", ")", ",", "result", ".", "group", "(", "2", ")", ",", "result", ".", "group", "(", "3", ")", ",", "result", ".", "group", "(", "4", ")", "\n", "new_name", "=", "data_folder", "+", "\"%s-%s-%s-%d-%d.pkl\"", "%", "(", "dataset", ",", "algo", ",", "'acc'", ",", "int", "(", "run_id", ")", ",", "20", ")", "\n", "os", ".", "rename", "(", "used_name", ",", "new_name", ")", "\n", "print", "(", "\"used_name: %s,new_name: %s\"", "%", "(", "used_name", ",", "new_name", ")", ")", "\n", "\n", "\n", "", "", "def", "rename1", "(", ")", ":", "\n", "    ", "for", "_filename", "in", "filename_list", ":", "\n", "        ", "if", "_filename", ".", "startswith", "(", "'.'", ")", "or", "_filename", ".", "startswith", "(", "'meta'", ")", "or", "_filename", ".", "startswith", "(", "'ranker'", ")", ":", "\n", "            ", "continue", "\n", "", "used_name", "=", "data_folder", "+", "_filename", "\n", "print", "(", "_filename", ")", "\n", "if", "len", "(", "_filename", ".", "split", "(", "'-'", ")", ")", ">", "5", ":", "\n", "            ", "splits", "=", "_filename", ".", "split", "(", "'-'", ")", "\n", "dataset", "=", "'-'", ".", "join", "(", "splits", "[", ":", "len", "(", "splits", ")", "-", "4", "]", ")", "\n", "algo", ",", "metric", ",", "run_id", ",", "resource", "=", "splits", "[", "len", "(", "splits", ")", "-", "4", ":", "]", "\n", "", "else", ":", "\n", "            ", "dataset", ",", "algo", ",", "metric", ",", "run_id", ",", "resource", "=", "_filename", ".", "split", "(", "'-'", ")", "\n", "", "new_name", "=", "data_folder", "+", "\"%s-%s-%s-%d-%d.pkl\"", "%", "(", "dataset", ",", "algo", ",", "'bal_acc'", ",", "int", "(", "run_id", ")", ",", "20", ")", "\n", "os", ".", "rename", "(", "used_name", ",", "new_name", ")", "\n", "print", "(", "\"used_name: %s,new_name: %s\"", "%", "(", "used_name", ",", "new_name", ")", ")", "\n", "\n", "\n", "", "", "rename1", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_train_test_data": [[58, 70], ["utils.load_data", "mindware.components.feature_engineering.transformation_graph.DataNode", "mindware.components.feature_engineering.transformation_graph.DataNode", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "feature_type.copy", "feature_type.copy"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_data"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.calculate_metafeatures": [[92, 128], ["isinstance", "numpy.array().astype", "numpy.average", "list", "numpy.array", "numpy.array", "list", "sklearn.compose.ColumnTransformer", "sklearn.compose.ColumnTransformer.fit_transform().astype", "categorical_.extend", "mindware.components.meta_learning.meta_feature.meta_features.calculate_all_metafeatures", "mindware.components.meta_learning.meta_feature.meta_features.calculate_all_metafeatures.load_values", "utils.load_data", "isinstance", "set().intersection", "X[].fillna", "len", "pd.DataFrame", "ValueError", "enumerate", "numpy.array", "range", "set", "set", "sklearn.compose.ColumnTransformer.fit_transform", "len", "len", "pd.DataFrame.isnull", "len", "set", "sklearn.preprocessing._encoders.OrdinalEncoder", "utils.NanOrdinalEncoder"], "function", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_features.calculate_all_metafeatures", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load_values", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.load_data", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.transformations.utils.KernelPCA.fit_transform"], []], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.distributed_bo.mqSMBO.__init__": [[14, 93], ["openbox.optimizer.base.BOBase.__init__", "max", "openbox.core.message_queue.master_messager.MasterMessager", "time.time", "list", "list", "float", "distributed_bo.mqSMBO.config_space.get_default_configuration", "dict", "dict", "openbox.core.sync_batch_advisor.SyncBatchAdvisor", "int", "openbox.core.async_batch_advisor.AsyncBatchAdvisor", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "objective_function", ",", "config_space", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "parallel_strategy", "=", "'async'", ",", "\n", "batch_size", "=", "4", ",", "\n", "batch_strategy", "=", "'median_imputation'", ",", "\n", "num_constraints", "=", "0", ",", "\n", "num_objs", "=", "1", ",", "\n", "sample_strategy", ":", "str", "=", "'bo'", ",", "\n", "runtime_limit", "=", "600", ",", "\n", "time_limit_per_trial", "=", "180", ",", "\n", "surrogate_type", "=", "None", ",", "\n", "acq_type", "=", "None", ",", "\n", "acq_optimizer_type", "=", "'local_random'", ",", "\n", "initial_runs", "=", "3", ",", "\n", "init_strategy", "=", "'random_explore_first'", ",", "\n", "initial_configurations", "=", "None", ",", "\n", "ref_point", "=", "None", ",", "\n", "history_bo_data", ":", "List", "[", "OrderedDict", "]", "=", "None", ",", "\n", "logging_dir", "=", "'logs'", ",", "\n", "task_id", "=", "'default'", ",", "\n", "random_state", "=", "1", ",", "\n", "ip", "=", "\"\"", ",", "\n", "port", "=", "13579", ",", "\n", "authkey", "=", "b'abc'", ",", ")", ":", "\n", "\n", "        ", "self", ".", "task_info", "=", "{", "'num_constraints'", ":", "num_constraints", ",", "'num_objs'", ":", "num_objs", "}", "\n", "self", ".", "FAILED_PERF", "=", "[", "MAXINT", "]", "*", "num_objs", "\n", "super", "(", ")", ".", "__init__", "(", "objective_function", ",", "config_space", ",", "task_id", "=", "task_id", ",", "output_dir", "=", "logging_dir", ",", "\n", "random_state", "=", "random_state", ",", "initial_runs", "=", "initial_runs", ",", "max_runs", "=", "int", "(", "1e10", ")", ",", "\n", "runtime_limit", "=", "runtime_limit", ",", "sample_strategy", "=", "sample_strategy", ",", "\n", "time_limit_per_trial", "=", "time_limit_per_trial", ",", "history_bo_data", "=", "history_bo_data", ")", "\n", "if", "parallel_strategy", "==", "'sync'", ":", "\n", "            ", "self", ".", "config_advisor", "=", "SyncBatchAdvisor", "(", "config_space", ",", "self", ".", "task_info", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_strategy", "=", "batch_strategy", ",", "\n", "initial_trials", "=", "initial_runs", ",", "\n", "initial_configurations", "=", "initial_configurations", ",", "\n", "init_strategy", "=", "init_strategy", ",", "\n", "history_bo_data", "=", "history_bo_data", ",", "\n", "optimization_strategy", "=", "sample_strategy", ",", "\n", "surrogate_type", "=", "surrogate_type", ",", "\n", "acq_type", "=", "acq_type", ",", "\n", "acq_optimizer_type", "=", "acq_optimizer_type", ",", "\n", "ref_point", "=", "ref_point", ",", "\n", "task_id", "=", "task_id", ",", "\n", "output_dir", "=", "logging_dir", ",", "\n", "random_state", "=", "random_state", ")", "\n", "", "elif", "parallel_strategy", "==", "'async'", ":", "\n", "            ", "self", ".", "config_advisor", "=", "AsyncBatchAdvisor", "(", "config_space", ",", "self", ".", "task_info", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_strategy", "=", "batch_strategy", ",", "\n", "initial_trials", "=", "initial_runs", ",", "\n", "initial_configurations", "=", "initial_configurations", ",", "\n", "init_strategy", "=", "init_strategy", ",", "\n", "history_bo_data", "=", "history_bo_data", ",", "\n", "optimization_strategy", "=", "sample_strategy", ",", "\n", "surrogate_type", "=", "surrogate_type", ",", "\n", "acq_type", "=", "acq_type", ",", "\n", "acq_optimizer_type", "=", "acq_optimizer_type", ",", "\n", "ref_point", "=", "ref_point", ",", "\n", "task_id", "=", "task_id", ",", "\n", "output_dir", "=", "logging_dir", ",", "\n", "random_state", "=", "random_state", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid parallel strategy - %s.'", "%", "parallel_strategy", ")", "\n", "\n", "", "self", ".", "eval_type", "=", "eval_type", "\n", "self", ".", "parallel_strategy", "=", "parallel_strategy", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "max_queue_len", "=", "max", "(", "100", ",", "3", "*", "batch_size", ")", "\n", "self", ".", "master_messager", "=", "MasterMessager", "(", "ip", ",", "port", ",", "authkey", ",", "max_queue_len", ",", "max_queue_len", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "self", ".", "config_space", ".", "get_default_configuration", "(", ")", "\n", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "self", ".", "workers", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.distributed_bo.mqSMBO.async_run": [[94, 137], ["time.time", "distributed_bo.mqSMBO.config_advisor.get_suggestion", "distributed_bo.mqSMBO.logger.info", "distributed_bo.mqSMBO.master_messager.send_message", "distributed_bo.mqSMBO.master_messager.receive_message", "list", "distributed_bo.mqSMBO.configs.append", "distributed_bo.mqSMBO.perfs.append", "distributed_bo.mqSMBO.config_advisor.update_observation", "distributed_bo.mqSMBO.logger.info", "len", "time.sleep", "distributed_bo.mqSMBO.workers.values", "float", "time.time", "openbox.core.base.Observation", "len", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "async_run", "(", "self", ")", ":", "\n", "        ", "config_num", "=", "0", "\n", "cur_num", "=", "0", "\n", "while", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "<", "self", ".", "runtime_limit", ":", "\n", "# Add jobs to masterQueue.", "\n", "            ", "while", "len", "(", "self", ".", "config_advisor", ".", "running_configs", ")", "<", "self", ".", "batch_size", "and", "config_num", "<", "self", ".", "max_iterations", ":", "\n", "                ", "config_num", "+=", "1", "\n", "config", "=", "self", ".", "config_advisor", ".", "get_suggestion", "(", ")", "\n", "msg", "=", "[", "config", ",", "self", ".", "time_limit_per_trial", "]", "\n", "self", ".", "logger", ".", "info", "(", "\"Master: Add config %d.\"", "%", "config_num", ")", "\n", "self", ".", "master_messager", ".", "send_message", "(", "msg", ")", "\n", "\n", "# Get results from workerQueue.", "\n", "", "while", "True", ":", "\n", "                ", "observation", "=", "self", ".", "master_messager", ".", "receive_message", "(", ")", "\n", "if", "observation", "is", "None", ":", "\n", "# Wait for workers.", "\n", "# self.logger.info(\"Master: wait for worker results. sleep 1s.\")", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "break", "\n", "# Report result.", "\n", "", "cur_num", "+=", "1", "\n", "config", ",", "trial_state", ",", "constraints", ",", "objs", ",", "elapsed_time", ",", "worker_info", ",", "extra_info", "=", "observation", "\n", "\n", "stored_info", "=", "list", "(", "self", ".", "workers", ".", "values", "(", ")", ")", "\n", "if", "worker_info", "not", "in", "stored_info", ":", "\n", "                    ", "self", ".", "workers", "[", "len", "(", "self", ".", "workers", ")", "]", "=", "worker_info", "\n", "\n", "", "_perf", "=", "float", "(", "\"INF\"", ")", "if", "objs", "is", "None", "else", "objs", "[", "0", "]", "\n", "self", ".", "configs", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "_perf", ")", "\n", "self", ".", "eval_dict", "[", "config", "]", "=", "[", "-", "_perf", ",", "time", ".", "time", "(", ")", ",", "trial_state", "]", "\n", "\n", "if", "-", "_perf", ">", "self", ".", "incumbent_perf", ":", "\n", "                    ", "self", ".", "incumbent_perf", "=", "-", "_perf", "\n", "self", ".", "incumbent_config", "=", "config", "\n", "\n", "", "if", "objs", "is", "None", ":", "\n", "                    ", "observation", "=", "Observation", "(", "config", ",", "trial_state", ",", "constraints", ",", "self", ".", "FAILED_PERF", ",", "elapsed_time", ",", "\n", "worker_info", "=", "worker_info", ",", "extra", "=", "extra_info", ")", "\n", "", "self", ".", "config_advisor", ".", "update_observation", "(", "observation", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Master: Get %d observation: %s'", "%", "(", "cur_num", ",", "str", "(", "observation", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.distributed_bo.mqSMBO.sync_run": [[138, 169], ["distributed_bo.mqSMBO.config_advisor.get_suggestions", "distributed_bo.mqSMBO.logger.info", "len", "time.time", "distributed_bo.mqSMBO.master_messager.send_message", "distributed_bo.mqSMBO.master_messager.receive_message", "distributed_bo.mqSMBO.config_advisor.update_observation", "distributed_bo.mqSMBO.logger.info", "time.sleep", "openbox.core.base.Observation", "len", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "", "", "def", "sync_run", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "while", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "<", "self", ".", "runtime_limit", ":", "\n", "            ", "configs", "=", "self", ".", "config_advisor", ".", "get_suggestions", "(", ")", "\n", "# Add batch configs to masterQueue.", "\n", "for", "config", "in", "configs", ":", "\n", "                ", "msg", "=", "[", "config", ",", "self", ".", "time_limit_per_trial", "]", "\n", "self", ".", "master_messager", ".", "send_message", "(", "msg", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'Master: %d-th batch. %d configs sent.'", "%", "(", "batch_id", ",", "len", "(", "configs", ")", ")", ")", "\n", "# Get batch results from workerQueue.", "\n", "result_num", "=", "0", "\n", "result_needed", "=", "len", "(", "configs", ")", "\n", "while", "True", ":", "\n", "                ", "observation", "=", "self", ".", "master_messager", ".", "receive_message", "(", ")", "\n", "if", "observation", "is", "None", ":", "\n", "# Wait for workers.", "\n", "# self.logger.info(\"Master: wait for worker results. sleep 1s.\")", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "continue", "\n", "# Report result.", "\n", "", "result_num", "+=", "1", "\n", "config", ",", "trial_state", ",", "constraints", ",", "objs", ",", "elapsed_time", ",", "worker_info", ",", "extra_info", "=", "observation", "\n", "if", "objs", "is", "None", ":", "\n", "                    ", "observation", "=", "Observation", "(", "config", ",", "trial_state", ",", "constraints", ",", "self", ".", "FAILED_PERF", ",", "elapsed_time", ",", "\n", "worker_info", ",", "extra_info", ")", "\n", "", "self", ".", "config_advisor", ".", "update_observation", "(", "observation", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Master: In the %d-th batch [%d], observation is: %s'", "\n", "%", "(", "batch_id", ",", "result_num", ",", "str", "(", "observation", ")", ")", ")", "\n", "if", "result_num", "==", "result_needed", ":", "\n", "                    ", "break", "\n", "", "", "batch_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.distributed_bo.mqSMBO.run": [[170, 177], ["distributed_bo.mqSMBO.get_history", "distributed_bo.mqSMBO.async_run", "distributed_bo.mqSMBO.sync_run"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.tlbo.bo_optimizer.BaseFacade.get_history", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.distributed_bo.mqSMBO.async_run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.distributed_bo.mqSMBO.sync_run"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "parallel_strategy", "==", "'async'", ":", "\n", "            ", "self", ".", "async_run", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sync_run", "(", ")", "\n", "\n", "", "return", "self", ".", "get_history", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.__init__": [[11, 29], ["list", "sklearn.preprocessing.OneHotEncoder", "numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ensemble_size", ":", "int", ",", "\n", "task_type", ":", "int", ",", "\n", "metric", ":", "_BaseScorer", ",", "\n", "sorted_initialization", ":", "bool", "=", "False", ",", "\n", "mode", ":", "str", "=", "'fast'", "\n", ")", ":", "\n", "        ", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "model_idx", "=", "list", "(", ")", "\n", "self", ".", "sorted_initialization", "=", "sorted_initialization", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "encoder", "=", "OneHotEncoder", "(", ")", "\n", "\n", "self", ".", "shape", "=", "None", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score": [[30, 38], ["isinstance", "ensemble_util.EnsembleSelection.metric._score_func", "len", "ensemble_util.EnsembleSelection.encoder.transform().toarray", "isinstance", "numpy.argmax", "ensemble_util.EnsembleSelection.encoder.transform", "numpy.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.datasets.utils.NanOrdinalEncoder.transform"], ["", "def", "calculate_score", "(", "self", ",", "pred", ",", "y_true", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "metric", ",", "_ThresholdScorer", ")", ":", "\n", "            ", "if", "len", "(", "y_true", ".", "shape", ")", "==", "1", ":", "\n", "                ", "y_true", "=", "self", ".", "encoder", ".", "transform", "(", "np", ".", "reshape", "(", "y_true", ",", "(", "len", "(", "y_true", ")", ",", "1", ")", ")", ")", ".", "toarray", "(", ")", "\n", "", "", "elif", "self", ".", "task_type", "in", "CLS_TASKS", "and", "isinstance", "(", "self", ".", "metric", ",", "_PredictScorer", ")", ":", "\n", "            ", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "-", "1", ")", "\n", "", "score", "=", "self", ".", "metric", ".", "_score_func", "(", "y_true", ",", "pred", ")", "*", "self", ".", "metric", ".", "_sign", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit": [[39, 59], ["int", "ensemble_util.EnsembleSelection._fit", "ensemble_util.EnsembleSelection._calculate_weights", "numpy.reshape", "ensemble_util.EnsembleSelection.encoder.fit", "ValueError", "ValueError", "isinstance", "ValueError", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._calculate_weights", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "fit", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "self", ".", "shape", "=", "predictions", "[", "0", "]", ".", "shape", "\n", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", "and", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "reshape_y", "=", "np", ".", "reshape", "(", "labels", ",", "(", "len", "(", "labels", ")", ",", "1", ")", ")", "\n", "self", ".", "encoder", ".", "fit", "(", "reshape_y", ")", "\n", "", "self", ".", "ensemble_size", "=", "int", "(", "self", ".", "ensemble_size", ")", "\n", "if", "self", ".", "ensemble_size", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Ensemble size cannot be less than one!'", ")", "\n", "", "if", "not", "self", ".", "task_type", "in", "TASK_TYPES", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown task type %s.'", "%", "self", ".", "task_type", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "metric", ",", "_BaseScorer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Metric must be of type scorer'", ")", "\n", "", "if", "self", ".", "mode", "not", "in", "(", "'fast'", ",", "'slow'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode %s'", "%", "self", ".", "mode", ")", "\n", "\n", "", "self", ".", "_fit", "(", "predictions", ",", "labels", ")", "\n", "self", ".", "_calculate_weights", "(", ")", "\n", "self", ".", "identifiers_", "=", "None", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._fit": [[60, 66], ["ensemble_util.EnsembleSelection._fast", "ensemble_util.EnsembleSelection._slow"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._fast", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._slow"], ["", "def", "_fit", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'fast'", ":", "\n", "            ", "self", ".", "_fast", "(", "predictions", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slow", "(", "predictions", ",", "labels", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._fast": [[67, 128], ["len", "range", "ensemble_util.EnsembleSelection._sorted_initialization", "numpy.zeros", "len", "numpy.zeros", "enumerate", "numpy.argwhere().flatten", "ensemble_util.EnsembleSelection.random_state.choice", "ensemble.append", "trajectory.append", "order.append", "ensemble.append", "order.append", "numpy.array().mean", "ensemble_util.EnsembleSelection.calculate_score", "trajectory.append", "len", "numpy.zeros", "numpy.zeros", "len", "ensemble_util.EnsembleSelection.calculate_score", "numpy.argwhere", "numpy.array", "float", "numpy.nanmin", "float", "float"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._sorted_initialization", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score"], ["", "def", "_fast", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Fast version of Rich Caruana's ensemble selection method.\"\"\"", "\n", "self", ".", "num_input_models_", "=", "len", "(", "predictions", ")", "\n", "\n", "ensemble", "=", "[", "]", "\n", "trajectory", "=", "[", "]", "\n", "order", "=", "[", "]", "\n", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", "\n", "\n", "if", "self", ".", "sorted_initialization", ":", "\n", "            ", "n_best", "=", "20", "\n", "indices", "=", "self", ".", "_sorted_initialization", "(", "predictions", ",", "labels", ",", "n_best", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "ensemble", ".", "append", "(", "predictions", "[", "idx", "]", ")", "\n", "order", ".", "append", "(", "idx", ")", "\n", "ensemble_", "=", "np", ".", "array", "(", "ensemble", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "ensemble_performance", "=", "self", ".", "calculate_score", "(", "pred", "=", "ensemble_", ",", "y_true", "=", "labels", ")", "\n", "trajectory", ".", "append", "(", "ensemble_performance", ")", "\n", "", "ensemble_size", "-=", "n_best", "\n", "\n", "", "for", "i", "in", "range", "(", "ensemble_size", ")", ":", "\n", "            ", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "predictions", ")", ")", ")", "\n", "s", "=", "len", "(", "ensemble", ")", "\n", "if", "s", "==", "0", ":", "\n", "                ", "weighted_ensemble_prediction", "=", "np", ".", "zeros", "(", "predictions", "[", "0", "]", ".", "shape", ")", "\n", "", "else", ":", "\n", "# Memory-efficient averaging!", "\n", "                ", "ensemble_prediction", "=", "np", ".", "zeros", "(", "ensemble", "[", "0", "]", ".", "shape", ")", "\n", "for", "pred", "in", "ensemble", ":", "\n", "                    ", "ensemble_prediction", "+=", "pred", "\n", "", "ensemble_prediction", "/=", "s", "\n", "\n", "weighted_ensemble_prediction", "=", "(", "s", "/", "float", "(", "s", "+", "1", ")", ")", "*", "ensemble_prediction", "\n", "", "fant_ensemble_prediction", "=", "np", ".", "zeros", "(", "weighted_ensemble_prediction", ".", "shape", ")", "\n", "for", "j", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "# TODO: this could potentially be vectorized! - let's profile", "\n", "# the script first!", "\n", "                ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                    ", "fant_ensemble_prediction", "[", ":", ",", ":", "]", "=", "weighted_ensemble_prediction", "+", "(", "1.", "/", "float", "(", "s", "+", "1", ")", ")", "*", "pred", "\n", "", "else", ":", "\n", "                    ", "fant_ensemble_prediction", "[", ":", "]", "=", "weighted_ensemble_prediction", "+", "(", "1.", "/", "float", "(", "s", "+", "1", ")", ")", "*", "pred", "\n", "\n", "", "scores", "[", "j", "]", "=", "-", "self", ".", "calculate_score", "(", "pred", "=", "fant_ensemble_prediction", ",", "y_true", "=", "labels", ")", "\n", "\n", "", "all_best", "=", "np", ".", "argwhere", "(", "scores", "==", "np", ".", "nanmin", "(", "scores", ")", ")", ".", "flatten", "(", ")", "\n", "best", "=", "self", ".", "random_state", ".", "choice", "(", "all_best", ")", "\n", "ensemble", ".", "append", "(", "predictions", "[", "best", "]", ")", "\n", "trajectory", ".", "append", "(", "scores", "[", "best", "]", ")", "\n", "order", ".", "append", "(", "best", ")", "\n", "\n", "# Handle special case", "\n", "if", "len", "(", "predictions", ")", "==", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "indices_", "=", "order", "\n", "self", ".", "trajectory_", "=", "trajectory", "\n", "self", ".", "train_score_", "=", "trajectory", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._slow": [[129, 169], ["len", "range", "numpy.array", "numpy.array", "ensemble_util.EnsembleSelection._sorted_initialization", "numpy.zeros", "enumerate", "numpy.nanargmin", "ensemble.append", "trajectory.append", "order.append", "ensemble.append", "order.append", "numpy.array().mean", "ensemble_util.EnsembleSelection.calculate_score", "trajectory.append", "ensemble.append", "numpy.mean", "ensemble.pop", "len", "numpy.array", "ensemble_util.EnsembleSelection.calculate_score", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._sorted_initialization", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score"], ["", "def", "_slow", "(", "self", ",", "predictions", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Rich Caruana's ensemble selection method.\"\"\"", "\n", "self", ".", "num_input_models_", "=", "len", "(", "predictions", ")", "\n", "\n", "ensemble", "=", "[", "]", "\n", "trajectory", "=", "[", "]", "\n", "order", "=", "[", "]", "\n", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", "\n", "\n", "if", "self", ".", "sorted_initialization", ":", "\n", "            ", "n_best", "=", "20", "\n", "indices", "=", "self", ".", "_sorted_initialization", "(", "predictions", ",", "labels", ",", "n_best", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "ensemble", ".", "append", "(", "predictions", "[", "idx", "]", ")", "\n", "order", ".", "append", "(", "idx", ")", "\n", "ensemble_", "=", "np", ".", "array", "(", "ensemble", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "ensemble_performance", "=", "self", ".", "calculate_score", "(", "pred", "=", "ensemble_", ",", "y_true", "=", "labels", ")", "\n", "trajectory", ".", "append", "(", "ensemble_performance", ")", "\n", "", "ensemble_size", "-=", "n_best", "\n", "\n", "", "for", "i", "in", "range", "(", "ensemble_size", ")", ":", "\n", "            ", "scores", "=", "np", ".", "zeros", "(", "[", "predictions", ".", "shape", "[", "0", "]", "]", ")", "\n", "for", "j", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "                ", "ensemble", ".", "append", "(", "pred", ")", "\n", "ensemble_prediction", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "ensemble", ")", ",", "axis", "=", "0", ")", "\n", "scores", "[", "j", "]", "=", "-", "self", ".", "calculate_score", "(", "pred", "=", "ensemble_prediction", ",", "y_true", "=", "labels", ")", "\n", "ensemble", ".", "pop", "(", ")", "\n", "", "best", "=", "np", ".", "nanargmin", "(", "scores", ")", "\n", "ensemble", ".", "append", "(", "predictions", "[", "best", "]", ")", "\n", "trajectory", ".", "append", "(", "scores", "[", "best", "]", ")", "\n", "order", ".", "append", "(", "best", ")", "\n", "\n", "# Handle special case", "\n", "if", "len", "(", "predictions", ")", "==", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "indices_", "=", "np", ".", "array", "(", "order", ")", "\n", "self", ".", "trajectory_", "=", "np", ".", "array", "(", "trajectory", ")", "\n", "self", ".", "train_score_", "=", "trajectory", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._calculate_weights": [[170, 181], ["collections.Counter().most_common", "numpy.zeros", "numpy.sum", "collections.Counter", "float", "numpy.sum"], "methods", ["None"], ["", "def", "_calculate_weights", "(", "self", ")", ":", "\n", "        ", "ensemble_members", "=", "Counter", "(", "self", ".", "indices_", ")", ".", "most_common", "(", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_input_models_", ",", ")", ",", "dtype", "=", "float", ")", "\n", "for", "ensemble_member", "in", "ensemble_members", ":", "\n", "            ", "weight", "=", "float", "(", "ensemble_member", "[", "1", "]", ")", "/", "self", ".", "ensemble_size", "\n", "weights", "[", "ensemble_member", "[", "0", "]", "]", "=", "weight", "\n", "\n", "", "if", "np", ".", "sum", "(", "weights", ")", "<", "1", ":", "\n", "            ", "weights", "=", "weights", "/", "np", ".", "sum", "(", "weights", ")", "\n", "\n", "", "self", ".", "weights_", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection._sorted_initialization": [[182, 190], ["numpy.zeros", "enumerate", "ensemble_util.EnsembleSelection.calculate_score", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.calculate_score"], ["", "def", "_sorted_initialization", "(", "self", ",", "predictions", ",", "labels", ",", "n_best", ")", ":", "\n", "        ", "perf", "=", "np", ".", "zeros", "(", "[", "predictions", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "for", "idx", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "perf", "[", "idx", "]", "=", "self", ".", "calculate_score", "(", "pred", "=", "predictions", ",", "y_true", "=", "labels", ")", "\n", "\n", "", "indices", "=", "np", ".", "argsort", "(", "perf", ")", "[", "perf", ".", "shape", "[", "0", "]", "-", "n_best", ":", "]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.predict": [[191, 208], ["numpy.asarray", "len", "numpy.average", "numpy.count_nonzero", "numpy.average", "ValueError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "predictions", "=", "np", ".", "asarray", "(", "predictions", ")", "\n", "\n", "# if predictions.shape[0] == len(self.weights_),", "\n", "# predictions include those of zero-weight models.", "\n", "if", "predictions", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "return", "np", ".", "average", "(", "predictions", ",", "axis", "=", "0", ",", "weights", "=", "self", ".", "weights_", ")", "\n", "\n", "# if prediction model.shape[0] == len(non_null_weights),", "\n", "# predictions do not include those of zero-weight models.", "\n", "", "elif", "predictions", ".", "shape", "[", "0", "]", "==", "np", ".", "count_nonzero", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "non_null_weights", "=", "[", "w", "for", "w", "in", "self", ".", "weights_", "if", "w", ">", "0", "]", "\n", "return", "np", ".", "average", "(", "predictions", ",", "axis", "=", "0", ",", "weights", "=", "non_null_weights", ")", "\n", "\n", "# If none of the above applies, then something must have gone wrong.", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"The dimensions of ensemble predictions\"", "\n", "\" and ensemble weights do not match!\"", ")", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.__str__": [[210, 219], ["str", "enumerate", "enumerate"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Ensemble Selection:\\n\\tTrajectory: %s\\n\\tMembers: %s'", "'\\n\\tWeights: %s\\n\\tIdentifiers: %s'", "%", "(", "' '", ".", "join", "(", "[", "'%d: %5f'", "%", "(", "idx", ",", "performance", ")", "\n", "for", "idx", ",", "performance", "in", "enumerate", "(", "self", ".", "trajectory_", ")", "]", ")", ",", "\n", "self", ".", "indices_", ",", "self", ".", "weights_", ",", "\n", "' '", ".", "join", "(", "[", "str", "(", "identifier", ")", "for", "idx", ",", "identifier", "in", "\n", "enumerate", "(", "self", ".", "identifiers_", ")", "\n", "if", "self", ".", "weights_", "[", "idx", "]", ">", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.refit": [[220, 236], ["None"], "methods", ["None"], ["", "def", "refit", "(", "self", ")", ":", "\n", "# Refit models on whole training data", "\n", "# model_cnt = 0", "\n", "# for algo_id in self.stats:", "\n", "#     model_to_eval = self.stats[algo_id]", "\n", "#     for idx, (config, _, model_path) in enumerate(model_to_eval):", "\n", "#         X, y = node.data", "\n", "#         if self.weights_[model_cnt] != 0:", "\n", "#             self.logger.info(\"Refit model %d\" % model_cnt)", "\n", "#             estimator = fetch_predict_estimator(self.task_type, config, X, y,", "\n", "#                                                 weight_balance=node.enable_balance,", "\n", "#                                                 data_balance=node.data_balance)", "\n", "#             with open(model_path, 'wb') as f:", "\n", "#                 pkl.dump(estimator, f)", "\n", "#         model_cnt += 1", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_models_with_weights": [[237, 249], ["enumerate", "output.sort", "output.append"], "methods", ["None"], ["", "def", "get_models_with_weights", "(", "self", ",", "models", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "identifier", "=", "self", ".", "identifiers_", "[", "i", "]", "\n", "model", "=", "models", "[", "identifier", "]", "\n", "if", "weight", ">", "0.0", ":", "\n", "                ", "output", ".", "append", "(", "(", "weight", ",", "model", ")", ")", "\n", "\n", "", "", "output", ".", "sort", "(", "reverse", "=", "True", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_selected_model_identifiers": [[250, 259], ["enumerate", "output.append"], "methods", ["None"], ["", "def", "get_selected_model_identifiers", "(", "self", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "weights_", ")", ":", "\n", "            ", "identifier", "=", "self", ".", "identifiers_", "[", "i", "]", "\n", "if", "weight", ">", "0.0", ":", "\n", "                ", "output", ".", "append", "(", "identifier", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_validation_performance": [[260, 262], ["None"], "methods", ["None"], ["", "def", "get_validation_performance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trajectory_", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.get_ens_model_info": [[263, 277], ["enumerate", "ens_config.append", "hasattr"], "methods", ["None"], ["", "def", "get_ens_model_info", "(", "self", ")", ":", "\n", "        ", "model_cnt", "=", "0", "\n", "ens_info", "=", "{", "}", "\n", "ens_config", "=", "[", "]", "\n", "for", "algo_id", "in", "self", ".", "stats", ":", "\n", "            ", "model_to_eval", "=", "self", ".", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "_", ",", "model_path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "'base_model_mask'", ")", "or", "self", ".", "base_model_mask", "[", "model_cnt", "]", "==", "1", ":", "\n", "                    ", "ens_config", ".", "append", "(", "(", "algo_id", ",", "config", ",", "model_path", ")", ")", "\n", "", "model_cnt", "+=", "1", "\n", "", "", "ens_info", "[", "'ensemble_method'", "]", "=", "'ensemble_selection'", "\n", "ens_info", "[", "'config'", "]", "=", "ens_config", "\n", "ens_info", "[", "'ensemble_weights'", "]", "=", "self", ".", "weights_", "\n", "return", "ens_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.worker.BaseWorker.__init__": [[23, 32], ["mindware.utils.logging_utils.get_logger", "estimator.get_evaluator", "openbox.core.message_queue.worker_messager.WorkerMessager", "openbox.core.message_queue.receiver_messager.ReceiverMessager"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "estimator", ",", "master_ip", ",", "master_port", ",", "authkey", ",", "worker_port", ")", ":", "\n", "        ", "self", ".", "logger", "=", "get_logger", "(", "self", ".", "__module__", "+", "\".\"", "+", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "estimator", "=", "estimator", "\n", "self", ".", "evaluator", "=", "estimator", ".", "get_evaluator", "(", ")", "\n", "self", ".", "master_ip", "=", "master_ip", "\n", "self", ".", "master_port", "=", "master_port", "\n", "self", ".", "worker_port", "=", "worker_port", "\n", "self", ".", "worker_messager", "=", "WorkerMessager", "(", "master_ip", ",", "master_port", ",", "authkey", ")", "\n", "self", ".", "receiver_messager", "=", "ReceiverMessager", "(", "ip", "=", "'127.0.0.1'", ",", "port", "=", "worker_port", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.worker.EvaluationWorker.__init__": [[35, 45], ["worker.BaseWorker.__init__", "list", "list", "float", "dict", "list"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "evaluator", ",", "master_ip", "=", "\"127.0.0.1\"", ",", "master_port", "=", "13579", ",", "authkey", "=", "b'abc'", ",", "worker_port", "=", "12345", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "evaluator", ",", "master_ip", ",", "master_port", ",", "authkey", ",", "worker_port", ")", "\n", "\n", "self", ".", "configs", "=", "list", "(", ")", "\n", "self", ".", "perfs", "=", "list", "(", ")", "\n", "self", ".", "incumbent_perf", "=", "float", "(", "\"-INF\"", ")", "\n", "self", ".", "incumbent_config", "=", "None", "\n", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "self", ".", "best_configs", "=", "list", "(", ")", "\n", "self", ".", "worker_port", "=", "worker_port", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.worker.EvaluationWorker.run": [[46, 130], ["worker.EvaluationWorker.eval_dict.items", "sorted", "list", "worker.EvaluationWorker.fetch_ensemble_pred", "worker.EvaluationWorker.receiver_messager.send_message", "worker.EvaluationWorker.logger.info", "time.time", "worker.EvaluationWorker.configs.append", "worker.EvaluationWorker.perfs.append", "openbox.core.base.Observation", "worker.EvaluationWorker.logger.info", "len", "dict", "dict", "dict.keys", "time.sleep", "worker.EvaluationWorker.receiver_messager.receive_message", "worker.EvaluationWorker.worker_messager.receive_message", "time.sleep", "openbox.utils.limit.time_limit", "float", "time.time", "time.time", "worker.EvaluationWorker.worker_messager.send_message", "worker.EvaluationWorker.receiver_messager.receive_message", "worker.EvaluationWorker.logger.error", "worker.EvaluationWorker.logger.error", "dict", "openbox.utils.limit.TimeoutException", "openbox.utils.util_funcs.get_result", "isinstance", "str", "worker.EvaluationWorker.logger.error", "worker.EvaluationWorker.logger.error", "worker.EvaluationWorker.receiver_messager.send_message", "traceback.print_exc", "mindware.distrib.utils.get_host_ip", "int", "str", "str", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.worker.EvaluationWorker.fetch_ensemble_pred", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.utils.get_host_ip"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "msg", "=", "self", ".", "receiver_messager", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Worker receive message error: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "", "if", "msg", "==", "'ready'", ":", "\n", "                ", "break", "\n", "\n", "# Get config", "\n", "", "try", ":", "\n", "                ", "msg", "=", "self", ".", "worker_messager", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Worker receive message error: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "\n", "", "if", "msg", "is", "None", ":", "\n", "# Wait for configs", "\n", "                ", "time", ".", "sleep", "(", "0.3", ")", "\n", "continue", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Worker: get config. start working.\"", ")", "\n", "config", ",", "time_limit_per_trial", "=", "msg", "\n", "\n", "# Start working", "\n", "trial_state", "=", "SUCCESS", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                ", "args", ",", "kwargs", "=", "(", "config", ",", ")", ",", "dict", "(", ")", "\n", "timeout_status", ",", "_result", "=", "time_limit", "(", "self", ".", "evaluator", ",", "\n", "time_limit_per_trial", ",", "\n", "args", "=", "args", ",", "kwargs", "=", "kwargs", ")", "\n", "if", "timeout_status", ":", "\n", "                    ", "raise", "TimeoutException", "(", "\n", "'Timeout: time limit for this evaluation is %.1fs'", "%", "time_limit_per_trial", ")", "\n", "", "else", ":", "\n", "                    ", "objs", ",", "constraints", "=", "get_result", "(", "_result", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "isinstance", "(", "e", ",", "TimeoutException", ")", ":", "\n", "                    ", "trial_state", "=", "TIMEOUT", "\n", "", "else", ":", "\n", "                    ", "traceback", ".", "print_exc", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "trial_state", "=", "FAILED", "\n", "", "objs", "=", "None", "\n", "constraints", "=", "None", "\n", "\n", "", "_perf", "=", "float", "(", "\"INF\"", ")", "if", "objs", "is", "None", "else", "objs", "[", "0", "]", "\n", "self", ".", "configs", ".", "append", "(", "config", ")", "\n", "self", ".", "perfs", ".", "append", "(", "_perf", ")", "\n", "self", ".", "eval_dict", "[", "config", "]", "=", "[", "-", "_perf", ",", "time", ".", "time", "(", ")", ",", "trial_state", "]", "\n", "\n", "if", "-", "_perf", ">", "self", ".", "incumbent_perf", ":", "\n", "                ", "self", ".", "incumbent_perf", "=", "-", "_perf", "\n", "self", ".", "incumbent_config", "=", "config", "\n", "\n", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "observation", "=", "Observation", "(", "config", ",", "trial_state", ",", "constraints", ",", "objs", ",", "elapsed_time", ",", "\n", "worker_info", "=", "{", "'ip'", ":", "get_host_ip", "(", ")", ",", "'port'", ":", "self", ".", "worker_port", "}", ")", "\n", "\n", "# Send result", "\n", "self", ".", "logger", ".", "info", "(", "\"Worker: observation=%s. sending result.\"", "%", "str", "(", "observation", ")", ")", "\n", "try", ":", "\n", "                ", "self", ".", "worker_messager", ".", "send_message", "(", "observation", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Worker send message error: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "\n", "", "", "eval_list", "=", "self", ".", "eval_dict", ".", "items", "(", ")", "\n", "sorted_list", "=", "sorted", "(", "eval_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "if", "len", "(", "sorted_list", ")", ">", "10", ":", "\n", "            ", "ensemble_dict", "=", "dict", "(", "sorted_list", "[", ":", "int", "(", "len", "(", "sorted_list", ")", "/", "10", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "ensemble_dict", "=", "dict", "(", "sorted_list", "[", ":", "1", "]", ")", "\n", "", "self", ".", "best_configs", "=", "list", "(", "ensemble_dict", ".", "keys", "(", ")", ")", "\n", "preds", "=", "self", ".", "fetch_ensemble_pred", "(", ")", "\n", "self", ".", "receiver_messager", ".", "send_message", "(", "preds", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "try", ":", "\n", "                ", "msg", "=", "self", ".", "receiver_messager", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Worker receive message error: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "", "if", "msg", "==", "'over'", ":", "\n", "                ", "break", "\n", "", "elif", "msg", "is", "not", "None", ":", "\n", "                ", "self", ".", "receiver_messager", ".", "send_message", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.worker.EvaluationWorker.fetch_ensemble_pred": [[131, 172], ["list", "numpy.array", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "worker.EvaluationWorker.evaluator.data_node.copy_", "mindware.components.feature_engineering.parse.construct_node", "sklearn.model_selection.ShuffleSplit.split", "numpy.array.append", "isinstance", "config.copy.copy.get_dictionary().copy", "config.copy.copy.copy", "open", "pickle.load", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.ShuffleSplit", "model.predict_proba", "model.predict", "config.copy.copy.get_dictionary"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "", "", "def", "fetch_ensemble_pred", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "evaluator", ".", "resampling_params", "is", "None", "or", "'test_size'", "not", "in", "self", ".", "evaluator", ".", "resampling_params", ":", "\n", "            ", "test_size", "=", "0.33", "\n", "", "else", ":", "\n", "            ", "test_size", "=", "self", ".", "evaluator", ".", "resampling_params", "[", "'test_size'", "]", "\n", "\n", "", "preds", "=", "list", "(", ")", "\n", "\n", "for", "config", "in", "self", ".", "best_configs", ":", "\n", "# Convert Configuration into dictionary", "\n", "            ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "                ", "config", "=", "config", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "config", "=", "config", ".", "copy", "(", ")", "\n", "\n", "", "model_path", "=", "CombinedTopKModelSaver", ".", "get_path_by_config", "(", "output_dir", "=", "self", ".", "evaluator", ".", "output_dir", ",", "\n", "config", "=", "config", ",", "\n", "identifier", "=", "self", ".", "evaluator", ".", "timestamp", ")", "\n", "\n", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "_node", "=", "self", ".", "evaluator", ".", "data_node", ".", "copy_", "(", ")", "\n", "node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "\n", "if", "self", ".", "estimator", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                ", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "evaluator", ".", "seed", ")", "\n", "", "else", ":", "\n", "                ", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "evaluator", ".", "seed", ")", "\n", "\n", "", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "node", ".", "data", "[", "0", "]", ",", "node", ".", "data", "[", "1", "]", ")", ":", "\n", "                ", "_x_val", "=", "node", ".", "data", "[", "0", "]", "[", "test_index", "]", "\n", "\n", "", "if", "self", ".", "estimator", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                ", "pred", "=", "model", ".", "predict_proba", "(", "_x_val", ")", "\n", "", "else", ":", "\n", "                ", "pred", "=", "model", ".", "predict", "(", "_x_val", ")", "\n", "", "preds", ".", "append", "(", "pred", ")", "\n", "\n", "", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.worker.EvaluationWorker.predict": [[173, 221], ["list", "numpy.array", "worker.EvaluationWorker.receiver_messager.send_message", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "datanode.copy_", "mindware.components.feature_engineering.parse.construct_node", "numpy.array.append", "time.sleep", "isinstance", "config.copy.copy.get_dictionary().copy", "config.copy.copy.copy", "open", "pickle.load", "model.predict_proba", "model.predict", "worker.EvaluationWorker.receiver_messager.receive_message", "worker.EvaluationWorker.receiver_messager.receive_message", "worker.EvaluationWorker.logger.error", "worker.EvaluationWorker.logger.error", "worker.EvaluationWorker.receiver_messager.send_message", "config.copy.copy.get_dictionary", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.CombinedTopKModelSaver.get_path_by_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "def", "predict", "(", "self", ",", "datanode", ")", ":", "\n", "        ", "preds", "=", "list", "(", ")", "\n", "\n", "for", "config", "in", "self", ".", "best_configs", ":", "\n", "# Convert Configuration into dictionary", "\n", "            ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "                ", "config", "=", "config", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "config", "=", "config", ".", "copy", "(", ")", "\n", "\n", "", "model_path", "=", "CombinedTopKModelSaver", ".", "get_path_by_config", "(", "output_dir", "=", "self", ".", "evaluator", ".", "output_dir", ",", "\n", "config", "=", "config", ",", "\n", "identifier", "=", "self", ".", "evaluator", ".", "timestamp", ")", "\n", "\n", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "op_list", ",", "model", ",", "_", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "", "_node", "=", "datanode", ".", "copy_", "(", ")", "\n", "node", "=", "construct_node", "(", "_node", ",", "op_list", ")", "\n", "x_test", "=", "node", ".", "data", "[", "0", "]", "\n", "\n", "if", "self", ".", "estimator", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                ", "pred", "=", "model", ".", "predict_proba", "(", "x_test", ")", "\n", "", "else", ":", "\n", "                ", "pred", "=", "model", ".", "predict", "(", "x_test", ")", "\n", "", "preds", ".", "append", "(", "pred", ")", "\n", "\n", "", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "msg", "=", "self", ".", "receiver_messager", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Worker receive message error: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "", "if", "msg", "==", "'ready'", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "receiver_messager", ".", "send_message", "(", "preds", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "try", ":", "\n", "                ", "msg", "=", "self", ".", "receiver_messager", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Worker receive message error: %s.\"", "%", "str", "(", "e", ")", ")", "\n", "", "if", "msg", "==", "'over'", ":", "\n", "                ", "break", "\n", "", "elif", "msg", "is", "not", "None", ":", "\n", "                ", "self", ".", "receiver_messager", ".", "send_message", "(", "msg", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.__init__": [[18, 35], ["master.Master.estimator.get_evaluator", "master.Master.estimator.get_config_space", "mindware.distrib.distributed_bo.mqSMBO", "mindware.distrib.ensemble_util.EnsembleSelection"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_evaluator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.mindware.base_estimator.BaseEstimator.get_config_space"], ["def", "__init__", "(", "self", ",", "estimator", ":", "BaseEstimator", ",", "optimize_method", "=", "'bo'", ",", "ip", "=", "\"127.0.0.1\"", ",", "port", "=", "13579", ",", "authkey", "=", "b'abc'", ")", ":", "\n", "        ", "self", ".", "estimator", "=", "estimator", "\n", "self", ".", "optimize_method", "=", "optimize_method", "\n", "self", ".", "ip", "=", "ip", "\n", "self", ".", "port", "=", "port", "\n", "self", ".", "authkey", "=", "authkey", "\n", "\n", "self", ".", "evaluator", "=", "self", ".", "estimator", ".", "get_evaluator", "(", ")", "\n", "self", ".", "config_space", "=", "self", ".", "estimator", ".", "get_config_space", "(", ")", "\n", "self", ".", "eval_type", "=", "self", ".", "estimator", ".", "evaluation", "\n", "self", ".", "output_dir", "=", "self", ".", "estimator", ".", "output_dir", "\n", "self", ".", "optimizer", "=", "mqSMBO", "(", "self", ".", "evaluator", ",", "self", ".", "config_space", ",", "runtime_limit", "=", "self", ".", "estimator", ".", "time_limit", ",", "\n", "eval_type", "=", "self", ".", "eval_type", ",", "ip", "=", "ip", ",", "port", "=", "port", ",", "authkey", "=", "authkey", ",", "\n", "logging_dir", "=", "self", ".", "output_dir", ")", "\n", "self", ".", "ensemble", "=", "EnsembleSelection", "(", "self", ".", "estimator", ".", "ensemble_size", ",", "\n", "self", ".", "estimator", ".", "task_type", ",", "\n", "self", ".", "evaluator", ".", "scorer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.build_ensemble": [[36, 90], ["list", "numpy.vstack", "master.Master.evaluator.data_node.copy_", "sklearn.model_selection.ShuffleSplit.split", "master.Master.ensemble.fit", "openbox.core.message_queue.sender_messager.SenderMessager", "openbox.core.message_queue.sender_messager.SenderMessager.send_message", "list.append", "len", "enumerate", "time.sleep", "sklearn.model_selection.StratifiedShuffleSplit", "sklearn.model_selection.ShuffleSplit", "_sender.receive_message", "_sender.send_message", "print", "_sender.send_message"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit"], ["", "def", "build_ensemble", "(", "self", ")", ":", "\n", "# Step 1: send message to each worker.", "\n", "        ", "sender_list", "=", "list", "(", ")", "\n", "for", "_worker_id", "in", "self", ".", "optimizer", ".", "workers", ":", "\n", "# TODO:", "\n", "            ", "worker_ip", "=", "self", ".", "optimizer", ".", "workers", "[", "_worker_id", "]", "[", "'ip'", "]", "\n", "worker_port", "=", "self", ".", "optimizer", ".", "workers", "[", "_worker_id", "]", "[", "'port'", "]", "\n", "sender", "=", "SenderMessager", "(", "ip", "=", "'127.0.0.1'", ",", "port", "=", "worker_port", ")", "\n", "sender", ".", "send_message", "(", "'ready'", ")", "\n", "sender_list", ".", "append", "(", "sender", ")", "\n", "\n", "# Step 2: fetch result from each worker.", "\n", "", "results", "=", "[", "None", "]", "*", "len", "(", "sender_list", ")", "\n", "while", "True", ":", "\n", "            ", "for", "idx", ",", "_sender", "in", "enumerate", "(", "sender_list", ")", ":", "\n", "                ", "if", "results", "[", "idx", "]", "is", "not", "None", ":", "\n", "                    ", "continue", "\n", "", "try", ":", "\n", "                    ", "msg", "=", "_sender", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "break", "\n", "", "if", "msg", "==", "'ready'", ":", "\n", "                    ", "_sender", ".", "send_message", "(", "msg", ")", "\n", "", "elif", "msg", "is", "not", "None", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "msg", "\n", "_sender", ".", "send_message", "(", "'over'", ")", "\n", "\n", "", "", "all_ready", "=", "True", "\n", "for", "result", "in", "results", ":", "\n", "                ", "if", "result", "is", "None", ":", "\n", "                    ", "all_ready", "=", "False", "\n", "break", "\n", "", "", "if", "all_ready", ":", "\n", "                ", "break", "\n", "", "time", ".", "sleep", "(", "5", ")", "\n", "\n", "# Calculate parameters in ensemble selection.", "\n", "", "all_preds", "=", "np", ".", "vstack", "(", "results", ")", "\n", "\n", "if", "self", ".", "evaluator", ".", "resampling_params", "is", "None", "or", "'test_size'", "not", "in", "self", ".", "evaluator", ".", "resampling_params", ":", "\n", "            ", "test_size", "=", "0.33", "\n", "", "else", ":", "\n", "            ", "test_size", "=", "self", ".", "evaluator", ".", "resampling_params", "[", "'test_size'", "]", "\n", "\n", "", "if", "self", ".", "estimator", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "ss", "=", "StratifiedShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "evaluator", ".", "seed", ")", "\n", "", "else", ":", "\n", "            ", "ss", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "test_size", ",", "random_state", "=", "self", ".", "evaluator", ".", "seed", ")", "\n", "\n", "", "node", "=", "self", ".", "evaluator", ".", "data_node", ".", "copy_", "(", ")", "\n", "for", "train_index", ",", "test_index", "in", "ss", ".", "split", "(", "node", ".", "data", "[", "0", "]", ",", "node", ".", "data", "[", "1", "]", ")", ":", "\n", "            ", "_y_val", "=", "node", ".", "data", "[", "1", "]", "[", "test_index", "]", "\n", "", "self", ".", "ensemble", ".", "fit", "(", "all_preds", ",", "_y_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run": [[91, 94], ["master.Master.optimizer.run", "master.Master.build_ensemble"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.run", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.build_ensemble"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "run", "(", ")", "\n", "self", ".", "build_ensemble", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master._predict": [[95, 135], ["list", "numpy.vstack", "master.Master.ensemble.predict", "openbox.core.message_queue.sender_messager.SenderMessager", "openbox.core.message_queue.sender_messager.SenderMessager.send_message", "list.append", "len", "time.sleep", "enumerate", "time.sleep", "_sender.receive_message", "_sender.send_message", "_sender.send_message"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "_predict", "(", "self", ")", ":", "\n", "# Step 1: send message to each worker.", "\n", "        ", "sender_list", "=", "list", "(", ")", "\n", "for", "_worker_id", "in", "self", ".", "optimizer", ".", "workers", ":", "\n", "# TODO:", "\n", "            ", "worker_ip", "=", "self", ".", "optimizer", ".", "workers", "[", "_worker_id", "]", "[", "'ip'", "]", "\n", "worker_port", "=", "self", ".", "optimizer", ".", "workers", "[", "_worker_id", "]", "[", "'port'", "]", "\n", "sender", "=", "SenderMessager", "(", "ip", "=", "'127.0.0.1'", ",", "port", "=", "worker_port", ")", "\n", "sender", ".", "send_message", "(", "'ready'", ")", "\n", "sender_list", ".", "append", "(", "sender", ")", "\n", "\n", "# Step 2: fetch result from each worker.", "\n", "", "results", "=", "[", "None", "]", "*", "len", "(", "sender_list", ")", "\n", "while", "True", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "for", "idx", ",", "_sender", "in", "enumerate", "(", "sender_list", ")", ":", "\n", "                ", "if", "results", "[", "idx", "]", "is", "not", "None", ":", "\n", "                    ", "continue", "\n", "", "try", ":", "\n", "                    ", "msg", "=", "_sender", ".", "receive_message", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "break", "\n", "", "if", "msg", "==", "'ready'", ":", "\n", "                    ", "_sender", ".", "send_message", "(", "msg", ")", "\n", "", "elif", "msg", "is", "not", "None", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "msg", "\n", "_sender", ".", "send_message", "(", "'over'", ")", "\n", "\n", "", "", "all_ready", "=", "True", "\n", "for", "result", "in", "results", ":", "\n", "                ", "if", "result", "is", "None", ":", "\n", "                    ", "all_ready", "=", "False", "\n", "break", "\n", "", "", "if", "all_ready", ":", "\n", "                ", "break", "\n", "", "time", ".", "sleep", "(", "5", ")", "\n", "\n", "", "all_preds", "=", "np", ".", "vstack", "(", "results", ")", "\n", "\n", "return", "self", ".", "ensemble", ".", "predict", "(", "all_preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.predict_proba": [[136, 140], ["master.Master._predict", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict"], ["", "def", "predict_proba", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", ".", "task_type", "not", "in", "CLS_TASKS", ":", "\n", "            ", "raise", "AttributeError", "(", "\"predict_proba is not supported in regression\"", ")", "\n", "", "return", "self", ".", "_predict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.master.Master.predict": [[141, 147], ["master.Master._predict", "numpy.argmax", "master.Master._predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimator", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "pred", "=", "self", ".", "_predict", "(", ")", "\n", "return", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_predict", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.utils.get_host_ip": [[4, 13], ["socket.socket", "socket.socket.connect", "socket.socket.close", "socket.socket.getsockname"], "function", ["None"], ["filename_list", "=", "os", ".", "listdir", "(", "data_folder", ")", "\n", "algorithms", "=", "[", "'lightgbm'", ",", "'random_forest'", ",", "\n", "'libsvm_svc'", ",", "'extra_trees'", ",", "\n", "'liblinear_svc'", ",", "'k_nearest_neighbors'", ",", "\n", "'logistic_regression'", ",", "\n", "'gradient_boosting'", ",", "'adaboost'", "]", "\n", "algo_str", "=", "'|'", ".", "join", "(", "algorithms", ")", "\n", "pattern", "=", "'(.*)_(%s)_(\\d+)_(\\d+)_20.pkl'", "%", "algo_str", "\n", "print", "(", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.__init__": [[15, 120], ["mindware.blocks.abstract_block.AbstractBlock.__init__", "dict", "dict", "dict", "dict", "dict", "dict", "list", "list", "mindware.components.utils.topk_saver.CombinedTopKModelSaver", "fe_config_space.get_default_configuration().get_dictionary().copy", "cash_config_space.get_default_configuration().get_dictionary().copy", "fe_config_space.get_default_configuration().get_dictionary().copy", "cash_config_space.get_default_configuration().get_dictionary().copy", "fe_config_space.get_default_configuration().get_dictionary().copy", "cash_config_space.get_default_configuration().get_dictionary().copy", "list", "list", "dict", "dict", "list", "list", "dict", "get_node_type", "get_node_type.", "get_node_type", "get_node_type.", "fe_config_space.get_default_configuration().get_dictionary", "cash_config_space.get_default_configuration().get_dictionary", "fe_config_space.get_default_configuration().get_dictionary", "cash_config_space.get_default_configuration().get_dictionary", "fe_config_space.get_default_configuration().get_dictionary", "cash_config_space.get_default_configuration().get_dictionary", "data.copy_", "data.copy_", "fe_config_space.get_default_configuration", "cash_config_space.get_default_configuration", "fe_config_space.get_default_configuration", "cash_config_space.get_default_configuration", "fe_config_space.get_default_configuration", "cash_config_space.get_default_configuration"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["    ", "def", "__init__", "(", "self", ",", "node_list", ",", "node_index", ",", "\n", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ":", "ConfigurationSpace", ",", "\n", "cash_config_space", ":", "ConfigurationSpace", ",", "\n", "data", ":", "DataNode", ",", "\n", "fixed_config", "=", "None", ",", "\n", "time_limit", "=", "None", ",", "\n", "trial_num", "=", "0", ",", "\n", "metric", "=", "'acc'", ",", "\n", "optimizer", "=", "'smac'", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "ensemble_size", "=", "50", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "\"logs\"", ",", "\n", "dataset_name", "=", "'default_dataset'", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "resampling_params", "=", "None", ",", "\n", "n_jobs", "=", "1", ",", "\n", "seed", "=", "1", ")", ":", "\n", "        ", "super", "(", "AlternatingBlock", ",", "self", ")", ".", "__init__", "(", "node_list", ",", "node_index", ",", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ",", "cash_config_space", ",", "data", ",", "\n", "fixed_config", "=", "fixed_config", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "trial_num", "=", "trial_num", ",", "\n", "metric", "=", "metric", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "eval_type", "=", "eval_type", ",", "\n", "resampling_params", "=", "resampling_params", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "self", ".", "arms", "=", "[", "'hpo'", ",", "'fe'", "]", "\n", "self", ".", "optimal_algo_id", "=", "None", "\n", "self", ".", "first_start", "=", "True", "\n", "self", ".", "sub_bandits", "=", "dict", "(", ")", "\n", "self", ".", "rewards", "=", "dict", "(", ")", "\n", "self", ".", "evaluation_cost", "=", "dict", "(", ")", "\n", "self", ".", "update_flag", "=", "dict", "(", ")", "\n", "\n", "# Global incumbent.", "\n", "self", ".", "init_config", "=", "{", "'fe'", ":", "fe_config_space", ".", "get_default_configuration", "(", ")", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", ",", "\n", "'hpo'", ":", "cash_config_space", ".", "get_default_configuration", "(", ")", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "}", "\n", "self", ".", "inc", "=", "{", "'fe'", ":", "fe_config_space", ".", "get_default_configuration", "(", ")", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", ",", "\n", "'hpo'", ":", "cash_config_space", ".", "get_default_configuration", "(", ")", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "}", "\n", "self", ".", "local_inc", "=", "{", "'fe'", ":", "fe_config_space", ".", "get_default_configuration", "(", ")", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", ",", "\n", "'hpo'", ":", "cash_config_space", ".", "get_default_configuration", "(", ")", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "}", "\n", "self", ".", "local_hist", "=", "{", "'fe'", ":", "[", "]", ",", "'hpo'", ":", "[", "]", "}", "\n", "self", ".", "inc_record", "=", "{", "'fe'", ":", "list", "(", ")", ",", "'hpo'", ":", "list", "(", ")", "}", "\n", "self", ".", "exp_output", "=", "dict", "(", ")", "\n", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "self", ".", "arm_eval_dict", "=", "{", "'fe'", ":", "dict", "(", ")", ",", "'hpo'", ":", "dict", "(", ")", "}", "\n", "for", "arm", "in", "self", ".", "arms", ":", "\n", "            ", "self", ".", "rewards", "[", "arm", "]", "=", "list", "(", ")", "\n", "self", ".", "update_flag", "[", "arm", "]", "=", "False", "\n", "self", ".", "evaluation_cost", "[", "arm", "]", "=", "list", "(", ")", "\n", "self", ".", "exp_output", "[", "arm", "]", "=", "dict", "(", ")", "\n", "", "self", ".", "pull_cnt", "=", "0", "\n", "self", ".", "action_sequence", "=", "list", "(", ")", "\n", "self", ".", "final_rewards", "=", "list", "(", ")", "\n", "\n", "for", "arm", "in", "self", ".", "arms", ":", "\n", "            ", "if", "arm", "==", "'fe'", ":", "\n", "                ", "from", "mindware", ".", "blocks", ".", "block_utils", "import", "get_node_type", "\n", "child_type", "=", "get_node_type", "(", "node_list", ",", "node_index", "+", "1", ")", "\n", "self", ".", "sub_bandits", "[", "arm", "]", "=", "child_type", "(", "\n", "node_list", ",", "node_index", "+", "1", ",", "task_type", ",", "timestamp", ",", "fe_config_space", ",", "None", ",", "data", ".", "copy_", "(", ")", ",", "\n", "fixed_config", "=", "self", ".", "init_config", "[", "'hpo'", "]", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "metric", "=", "metric", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "eval_type", "=", "eval_type", ",", "\n", "resampling_params", "=", "resampling_params", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "seed", "=", "seed", "\n", ")", "\n", "", "else", ":", "\n", "                ", "from", "mindware", ".", "blocks", ".", "block_utils", "import", "get_node_type", "\n", "child_type", "=", "get_node_type", "(", "node_list", ",", "node_index", "+", "2", ")", "\n", "self", ".", "sub_bandits", "[", "arm", "]", "=", "child_type", "(", "\n", "node_list", ",", "node_index", "+", "2", ",", "task_type", ",", "timestamp", ",", "None", ",", "cash_config_space", ",", "data", ".", "copy_", "(", ")", ",", "\n", "fixed_config", "=", "self", ".", "init_config", "[", "'fe'", "]", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "metric", "=", "metric", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "eval_type", "=", "eval_type", ",", "\n", "resampling_params", "=", "resampling_params", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "seed", "=", "seed", "\n", ")", "\n", "\n", "", "", "self", ".", "topk_saver", "=", "CombinedTopKModelSaver", "(", "k", "=", "50", ",", "model_dir", "=", "self", ".", "output_dir", ",", "identifier", "=", "self", ".", "timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.iterate": [[121, 216], ["alternating_block.AlternatingBlock.logger.debug", "time.time", "alternating_block.AlternatingBlock.sub_bandits[].iterate", "alternating_block.AlternatingBlock.action_sequence.append", "alternating_block.AlternatingBlock.arm_eval_dict[].update", "alternating_block.AlternatingBlock.eval_dict.update", "alternating_block.AlternatingBlock.rewards[].append", "alternating_block.AlternatingBlock.evaluation_cost[].append", "list", "numpy.array", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.final_rewards.append", "time.time", "numpy.isfinite", "alternating_block.AlternatingBlock.local_hist[].append", "dict", "dict.update", "dict.update", "dict.copy", "numpy.array.append", "numpy.isfinite", "numpy.isfinite", "alternating_block.AlternatingBlock.inc_record[].append", "alternating_block.AlternatingBlock.inc_record[].append", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.reinitialize", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.evaluate_joint_perf", "str", "str", "str", "str", "len", "alternating_block.AlternatingBlock.reinitialize", "list", "alternating_block.AlternatingBlock.logger.info"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.reinitialize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.evaluate_joint_perf", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.reinitialize", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "iterate", "(", "self", ",", "trial_num", "=", "10", ")", ":", "\n", "# First choose one arm.", "\n", "        ", "arm_to_pull", "=", "self", ".", "arms", "[", "self", ".", "pull_cnt", "%", "2", "]", "\n", "self", ".", "logger", ".", "debug", "(", "'Pulling arm: %s in node %s at %d-th round'", "%", "(", "arm_to_pull", ",", "self", ".", "node_index", ",", "self", ".", "pull_cnt", ")", ")", "\n", "if", "self", ".", "first_start", "is", "True", "and", "arm_to_pull", "==", "'hpo'", ":", "\n", "# trial_budget = 20", "\n", "            ", "trial_budget", "=", "10", "\n", "self", ".", "first_start", "=", "False", "\n", "", "else", ":", "\n", "            ", "trial_budget", "=", "trial_num", "\n", "\n", "", "if", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "early_stop_flag", ":", "\n", "            ", "arm_to_pull", "=", "self", ".", "arms", "[", "(", "self", ".", "pull_cnt", "+", "1", ")", "%", "2", "]", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "reward", "=", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "iterate", "(", "trial_num", "=", "trial_budget", ")", "\n", "iter_cost", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "action_sequence", ".", "append", "(", "arm_to_pull", ")", "\n", "self", ".", "pull_cnt", "+=", "1", "\n", "\n", "# Update results after each iteration", "\n", "pre_inc_perf", "=", "self", ".", "incumbent_perf", "\n", "for", "arm_id", "in", "self", ".", "arms", ":", "\n", "            ", "self", ".", "update_flag", "[", "arm_id", "]", "=", "False", "\n", "", "self", ".", "arm_eval_dict", "[", "arm_to_pull", "]", ".", "update", "(", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "eval_dict", ")", "\n", "self", ".", "eval_dict", ".", "update", "(", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "eval_dict", ")", "\n", "self", ".", "rewards", "[", "arm_to_pull", "]", ".", "append", "(", "reward", ")", "\n", "self", ".", "evaluation_cost", "[", "arm_to_pull", "]", ".", "append", "(", "iter_cost", ")", "\n", "self", ".", "local_inc", "[", "arm_to_pull", "]", "=", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "incumbent", "\n", "\n", "# Update global incumbent from FE and HPO.", "\n", "if", "np", ".", "isfinite", "(", "reward", ")", "and", "reward", ">", "self", ".", "incumbent_perf", ":", "\n", "            ", "cur_inc", "=", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "incumbent", "\n", "self", ".", "inc", "[", "arm_to_pull", "]", "=", "cur_inc", "\n", "self", ".", "local_hist", "[", "arm_to_pull", "]", ".", "append", "(", "cur_inc", ")", "\n", "self", ".", "optimal_algo_id", "=", "arm_to_pull", "\n", "self", ".", "incumbent_perf", "=", "reward", "\n", "\n", "# Alter-HPO strategy: HPO changes if FE changes, FE keeps though HPO changes", "\n", "if", "arm_to_pull", "==", "'fe'", ":", "\n", "                ", "self", ".", "inc", "[", "'hpo'", "]", "=", "self", ".", "init_config", "[", "'hpo'", "]", "\n", "", "_incumbent", "=", "dict", "(", ")", "\n", "_incumbent", ".", "update", "(", "self", ".", "inc", "[", "'fe'", "]", ")", "\n", "_incumbent", ".", "update", "(", "self", ".", "inc", "[", "'hpo'", "]", ")", "\n", "self", ".", "incumbent", "=", "_incumbent", ".", "copy", "(", ")", "\n", "\n", "arm_id", "=", "'fe'", "if", "arm_to_pull", "==", "'hpo'", "else", "'hpo'", "\n", "if", "arm_to_pull", "==", "'fe'", ":", "\n", "                ", "self", ".", "reinitialize", "(", "arm_id", ")", "\n", "", "else", ":", "\n", "# Only reinitialize fe blocks once.", "\n", "                ", "if", "len", "(", "self", ".", "rewards", "[", "arm_to_pull", "]", ")", "==", "1", ":", "\n", "                    ", "self", ".", "reinitialize", "(", "arm_id", ")", "\n", "if", "cur_inc", "!=", "self", ".", "init_config", "[", "'hpo'", "]", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "'Initial hp_config for FE has changed!'", ")", "\n", "", "self", ".", "init_config", "[", "'hpo'", "]", "=", "cur_inc", "\n", "\n", "# Evaluate joint result here", "\n", "# Alter-HPO specific", "\n", "", "", "if", "arm_to_pull", "==", "'fe'", "and", "self", ".", "sub_bandits", "[", "'fe'", "]", ".", "fixed_config", "!=", "self", ".", "local_inc", "[", "'hpo'", "]", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Evaluate joint performance in node %s\"", "%", "self", ".", "node_index", ")", "\n", "self", ".", "evaluate_joint_perf", "(", ")", "\n", "\n", "# Logger output", "\n", "", "", "scores", "=", "list", "(", ")", "\n", "for", "_arm", "in", "self", ".", "arms", ":", "\n", "            ", "scores", ".", "append", "(", "self", ".", "sub_bandits", "[", "_arm", "]", ".", "incumbent_perf", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "self", ".", "logger", ".", "info", "(", "'='", "*", "50", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Node index: %s'", "%", "str", "(", "self", ".", "node_index", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Best_part_perf: %s'", "%", "str", "(", "self", ".", "incumbent_perf", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Best_part: %s'", "%", "str", "(", "self", ".", "optimal_algo_id", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Best val scores: %s'", "%", "str", "(", "list", "(", "scores", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'='", "*", "50", ")", "\n", "\n", "self", ".", "final_rewards", ".", "append", "(", "self", ".", "incumbent_perf", ")", "\n", "post_inc_perf", "=", "self", ".", "incumbent_perf", "\n", "if", "np", ".", "isfinite", "(", "pre_inc_perf", ")", "and", "np", ".", "isfinite", "(", "post_inc_perf", ")", ":", "\n", "            ", "self", ".", "inc_record", "[", "arm_to_pull", "]", ".", "append", "(", "post_inc_perf", "-", "pre_inc_perf", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "inc_record", "[", "arm_to_pull", "]", ".", "append", "(", "0.", ")", "\n", "\n", "# Update stop flag", "\n", "", "self", ".", "early_stop_flag", "=", "True", "\n", "self", ".", "timeout_flag", "=", "False", "\n", "for", "_arm", "in", "self", ".", "arms", ":", "\n", "            ", "if", "not", "self", ".", "sub_bandits", "[", "_arm", "]", ".", "early_stop_flag", ":", "\n", "                ", "self", ".", "early_stop_flag", "=", "False", "\n", "", "", "if", "self", ".", "early_stop_flag", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"Maximum configuration number met for each arm candidate in alternating block %s!\"", "%", "self", ".", "node_index", ")", "\n", "", "for", "_arm", "in", "self", ".", "arms", ":", "\n", "            ", "if", "self", ".", "sub_bandits", "[", "_arm", "]", ".", "timeout_flag", ":", "\n", "                ", "self", ".", "timeout_flag", "=", "True", "\n", "\n", "", "", "return", "self", ".", "incumbent_perf", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.reinitialize": [[217, 266], ["alternating_block.AlternatingBlock.logger.debug", "alternating_block.AlternatingBlock.logger.debug", "alternating_block.AlternatingBlock.logger.debug", "alternating_block.AlternatingBlock.inc[].copy", "get_node_type", "get_node_type.", "alternating_block.AlternatingBlock.inc[].copy", "get_node_type", "get_node_type.", "alternating_block.AlternatingBlock.original_data.copy_", "alternating_block.AlternatingBlock.original_data.copy_"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.debug", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["", "def", "reinitialize", "(", "self", ",", "arm_id", ")", ":", "\n", "        ", "if", "arm_id", "==", "'fe'", ":", "\n", "# Build the Feature Engineering component.", "\n", "            ", "inc_hpo", "=", "self", ".", "inc", "[", "'hpo'", "]", ".", "copy", "(", ")", "\n", "\n", "from", "mindware", ".", "blocks", ".", "block_utils", "import", "get_node_type", "\n", "child_type", "=", "get_node_type", "(", "self", ".", "node_list", ",", "self", ".", "node_index", "+", "1", ")", "\n", "self", ".", "sub_bandits", "[", "arm_id", "]", "=", "child_type", "(", "\n", "self", ".", "node_list", ",", "self", ".", "node_index", "+", "1", ",", "self", ".", "task_type", ",", "\n", "self", ".", "timestamp", ",", "self", ".", "fe_config_space", ",", "None", ",", "self", ".", "original_data", ".", "copy_", "(", ")", ",", "\n", "fixed_config", "=", "inc_hpo", ",", "\n", "time_limit", "=", "self", ".", "time_limit", ",", "\n", "metric", "=", "self", ".", "metric", ",", "\n", "ensemble_method", "=", "self", ".", "ensemble_method", ",", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "self", ".", "per_run_time_limit", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "dataset_name", "=", "self", ".", "dataset_name", ",", "\n", "eval_type", "=", "self", ".", "eval_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "seed", "=", "self", ".", "seed", "\n", ")", "\n", "", "else", ":", "\n", "# trials_per_iter = self.optimizer['fe'].evaluation_num_last_iteration // 2", "\n", "# trials_per_iter = max(20, trials_per_iter)", "\n", "            ", "inc_fe", "=", "self", ".", "inc", "[", "'fe'", "]", ".", "copy", "(", ")", "\n", "from", "mindware", ".", "blocks", ".", "block_utils", "import", "get_node_type", "\n", "child_type", "=", "get_node_type", "(", "self", ".", "node_list", ",", "self", ".", "node_index", "+", "2", ")", "\n", "self", ".", "sub_bandits", "[", "arm_id", "]", "=", "child_type", "(", "\n", "self", ".", "node_list", ",", "self", ".", "node_index", "+", "2", ",", "self", ".", "task_type", ",", "\n", "self", ".", "timestamp", ",", "None", ",", "self", ".", "cash_config_space", ",", "self", ".", "original_data", ".", "copy_", "(", ")", ",", "\n", "fixed_config", "=", "inc_fe", ",", "\n", "time_limit", "=", "self", ".", "time_limit", ",", "\n", "metric", "=", "self", ".", "metric", ",", "\n", "ensemble_method", "=", "self", ".", "ensemble_method", ",", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "self", ".", "per_run_time_limit", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "dataset_name", "=", "self", ".", "dataset_name", ",", "\n", "eval_type", "=", "self", ".", "eval_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ",", "\n", "n_jobs", "=", "self", ".", "n_jobs", ",", "\n", "seed", "=", "self", ".", "seed", "\n", ")", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "'='", "*", "30", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'UPDATE OPTIMIZER: %s'", "%", "arm_id", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'='", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.alternating_block.AlternatingBlock.evaluate_joint_perf": [[268, 342], ["numpy.isfinite", "alternating_block.AlternatingBlock.local_inc[].copy", "alternating_block.AlternatingBlock.update", "alternating_block.AlternatingBlock.topk_saver.add", "alternating_block.AlternatingBlock.topk_saver.save_topk_config", "numpy.isfinite", "dict", "dict.update", "dict.update", "dict.copy", "mindware.utils.decorators.time_limit", "alternating_block.AlternatingBlock.logger.error", "alternating_block.AlternatingBlock.local_inc[].copy", "time.time", "time.time", "ClassificationEvaluator", "RegressionEvaluator", "RegressionEvaluator.", "str", "os.remove", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.local_inc[].copy", "alternating_block.AlternatingBlock.local_inc[].copy", "alternating_block.AlternatingBlock.local_inc[].copy", "os.remove", "alternating_block.AlternatingBlock.logger.info", "alternating_block.AlternatingBlock.local_inc[].copy", "alternating_block.AlternatingBlock.local_inc[].copy", "alternating_block.AlternatingBlock.local_inc[].copy", "alternating_block.AlternatingBlock.local_inc[].copy"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.history_container.HistoryContainer.add", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.BaseTopKModelSaver.save_topk_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.limit.time_limit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "evaluate_joint_perf", "(", "self", ")", ":", "\n", "# Update join incumbent from FE and HPO.", "\n", "        ", "_perf", "=", "None", "\n", "try", ":", "\n", "            ", "with", "time_limit", "(", "self", ".", "per_run_time_limit", ")", ":", "\n", "                ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                    ", "from", "mindware", ".", "components", ".", "evaluators", ".", "cls_evaluator", "import", "ClassificationEvaluator", "\n", "evaluator", "=", "ClassificationEvaluator", "(", "\n", "self", ".", "local_inc", "[", "'fe'", "]", ".", "copy", "(", ")", ",", "\n", "scorer", "=", "self", ".", "metric", ",", "\n", "data_node", "=", "self", ".", "original_data", ",", "\n", "if_imbal", "=", "self", ".", "if_imbal", ",", "\n", "timestamp", "=", "self", ".", "timestamp", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "resampling_strategy", "=", "self", ".", "eval_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ")", "\n", "", "else", ":", "\n", "                    ", "from", "mindware", ".", "components", ".", "evaluators", ".", "rgs_evaluator", "import", "RegressionEvaluator", "\n", "evaluator", "=", "RegressionEvaluator", "(", "\n", "self", ".", "local_inc", "[", "'fe'", "]", ".", "copy", "(", ")", ",", "\n", "scorer", "=", "self", ".", "metric", ",", "\n", "data_node", "=", "self", ".", "original_data", ",", "\n", "timestamp", "=", "self", ".", "timestamp", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "resampling_strategy", "=", "self", ".", "eval_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ")", "\n", "", "_perf", "=", "-", "evaluator", "(", "self", ".", "local_inc", "[", "'hpo'", "]", ".", "copy", "(", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "\n", "", "if", "_perf", "is", "not", "None", "and", "np", ".", "isfinite", "(", "_perf", ")", ":", "\n", "            ", "_config", "=", "self", ".", "local_inc", "[", "'fe'", "]", ".", "copy", "(", ")", "\n", "_config", ".", "update", "(", "self", ".", "local_inc", "[", "'hpo'", "]", ".", "copy", "(", ")", ")", "\n", "\n", "classifier_id", "=", "_config", "[", "'algorithm'", "]", "\n", "# -perf: The larger, the better.", "\n", "save_flag", ",", "model_path", ",", "delete_flag", ",", "model_path_deleted", "=", "self", ".", "topk_saver", ".", "add", "(", "_config", ",", "-", "_perf", ",", "\n", "classifier_id", ")", "\n", "# By default, the evaluator has already stored the models.", "\n", "if", "self", ".", "eval_type", "in", "[", "'holdout'", ",", "'partial'", "]", ":", "\n", "                ", "if", "save_flag", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "os", ".", "remove", "(", "model_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Model deleted from %s\"", "%", "model_path", ")", "\n", "\n", "", "try", ":", "\n", "                    ", "if", "delete_flag", ":", "\n", "                        ", "os", ".", "remove", "(", "model_path_deleted", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Model deleted from %s\"", "%", "model_path_deleted", ")", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "except", ":", "\n", "                    ", "pass", "\n", "", "", "self", ".", "eval_dict", "[", "(", "self", ".", "local_inc", "[", "'fe'", "]", ".", "copy", "(", ")", ",", "self", ".", "local_inc", "[", "'hpo'", "]", ".", "copy", "(", ")", ")", "]", "=", "[", "_perf", ",", "\n", "time", ".", "time", "(", ")", ",", "\n", "SUCCESS", "]", "\n", "self", ".", "topk_saver", ".", "save_topk_config", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval_dict", "[", "(", "self", ".", "local_inc", "[", "'fe'", "]", ".", "copy", "(", ")", ",", "self", ".", "local_inc", "[", "'hpo'", "]", ".", "copy", "(", ")", ")", "]", "=", "[", "_perf", ",", "\n", "time", ".", "time", "(", ")", ",", "\n", "FAILED", "]", "\n", "\n", "# Update INC.", "\n", "", "if", "_perf", "is", "not", "None", "and", "np", ".", "isfinite", "(", "_perf", ")", "and", "_perf", ">", "self", ".", "incumbent_perf", ":", "\n", "            ", "self", ".", "inc", "[", "'hpo'", "]", "=", "self", ".", "local_inc", "[", "'hpo'", "]", "\n", "self", ".", "inc", "[", "'fe'", "]", "=", "self", ".", "local_inc", "[", "'fe'", "]", "\n", "self", ".", "incumbent_perf", "=", "_perf", "\n", "_incumbent", "=", "dict", "(", ")", "\n", "_incumbent", ".", "update", "(", "self", ".", "inc", "[", "'fe'", "]", ")", "\n", "_incumbent", ".", "update", "(", "self", ".", "inc", "[", "'hpo'", "]", ")", "\n", "self", ".", "incumbent", "=", "_incumbent", ".", "copy", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.__init__": [[19, 79], ["time.time", "mindware.utils.logging_utils.get_logger", "data.copy_", "mindware.components.metrics.metric.get_metric", "dict", "float", "mindware.utils.functions.is_imbalanced_dataset"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging_utils.get_logger", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.metrics.metric.get_metric", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.functions.is_imbalanced_dataset"], ["    ", "def", "__init__", "(", "self", ",", "node_list", ",", "node_index", ",", "\n", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ":", "ConfigurationSpace", ",", "\n", "cash_config_space", ":", "ConfigurationSpace", ",", "\n", "data", ":", "DataNode", ",", "\n", "fixed_config", "=", "None", ",", "\n", "trial_num", "=", "0", ",", "\n", "time_limit", "=", "None", ",", "\n", "metric", "=", "'acc'", ",", "\n", "optimizer", "=", "'smac'", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "ensemble_size", "=", "50", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "\"logs\"", ",", "\n", "dataset_name", "=", "'default_dataset'", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "resampling_params", "=", "None", ",", "\n", "n_jobs", "=", "1", ",", "\n", "seed", "=", "1", ")", ":", "\n", "# Tree setting", "\n", "        ", "self", ".", "node_list", "=", "node_list", "\n", "self", ".", "node_index", "=", "node_index", "\n", "\n", "# Set up backend.", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "trial_num", "=", "trial_num", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "per_run_time_limit", "=", "per_run_time_limit", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "logger", "=", "get_logger", "(", "'Soln-ml: %s'", "%", "dataset_name", ")", "\n", "\n", "# Basic settings.", "\n", "self", ".", "eval_type", "=", "eval_type", "\n", "self", ".", "resampling_params", "=", "resampling_params", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "timestamp", "=", "timestamp", "\n", "self", ".", "fe_config_space", "=", "fe_config_space", "\n", "self", ".", "cash_config_space", "=", "cash_config_space", "\n", "self", ".", "fixed_config", "=", "fixed_config", "\n", "self", ".", "original_data", "=", "data", ".", "copy_", "(", ")", "\n", "self", ".", "metric", "=", "get_metric", "(", "metric", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "ensemble_method", "=", "ensemble_method", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "\n", "self", ".", "early_stop_flag", "=", "False", "\n", "self", ".", "timeout_flag", "=", "False", "\n", "self", ".", "incumbent_perf", "=", "-", "float", "(", "\"INF\"", ")", "\n", "self", ".", "incumbent", "=", "None", "\n", "self", ".", "eval_dict", "=", "dict", "(", ")", "\n", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "self", ".", "if_imbal", "=", "is_imbalanced_dataset", "(", "self", ".", "original_data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "if_imbal", "=", "False", "\n", "\n", "", "self", ".", "es", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.refit": [[80, 124], ["abstract_block.AbstractBlock.logger.info", "os.path.join", "pickle.load.keys", "abstract_block.AbstractBlock.fit_ensemble", "abstract_block.AbstractBlock.logger.info", "os.path.join", "abstract_block.AbstractBlock.incumbent.copy", "mindware.components.feature_engineering.parse.parse_config", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator", "os.path.exists", "warnings.warn", "open", "pickle.load", "enumerate", "warnings.warn", "abstract_block.AbstractBlock.original_data.copy_", "open", "pickle.dump", "mindware.components.feature_engineering.parse.parse_config", "mindware.components.evaluators.base_evaluator.fetch_predict_estimator", "abstract_block.AbstractBlock.original_data.copy_", "open", "pickle.dump", "mindware.components.utils.topk_saver.CombinedTopKModelSaver.get_configuration_id"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.keys", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.fit_ensemble", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator.fetch_predict_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.parse_config", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.evaluators.base_evaluator.fetch_predict_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.dump", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.config_space_utils.get_configuration_id"], ["", "def", "refit", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ensemble_method", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Start to refit all the well-performed models!'", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s_topk_config.pkl'", "%", "self", ".", "timestamp", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Config path %s not found! Please check if all the evaluations are failed!\"", "%", "config_path", ")", "\n", "return", "\n", "\n", "", "with", "open", "(", "config_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "stats", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "for", "algo_id", "in", "stats", ".", "keys", "(", ")", ":", "\n", "                ", "model_to_eval", "=", "stats", "[", "algo_id", "]", "\n", "for", "idx", ",", "(", "config", ",", "perf", ",", "path", ")", "in", "enumerate", "(", "model_to_eval", ")", ":", "\n", "                    ", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "original_data", ".", "copy_", "(", ")", ",", "config", ",", "record", "=", "True", ",", "\n", "if_imbal", "=", "self", ".", "if_imbal", ")", "\n", "algo_id", "=", "config", "[", "'algorithm'", "]", "\n", "estimator", "=", "fetch_predict_estimator", "(", "self", ".", "task_type", ",", "algo_id", ",", "config", ",", "\n", "data_node", ".", "data", "[", "0", "]", ",", "data_node", ".", "data", "[", "1", "]", ",", "\n", "weight_balance", "=", "data_node", ".", "enable_balance", ",", "\n", "data_balance", "=", "data_node", ".", "data_balance", ")", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pkl", ".", "dump", "(", "[", "op_list", ",", "estimator", ",", "None", "]", ",", "f", ")", "\n", "\n", "", "", "", "self", ".", "fit_ensemble", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Start to refit the best model!'", ")", "\n", "\n", "if", "self", ".", "incumbent", "is", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"The best config is None! Please check if all the evaluations are failed!\"", ")", "\n", "return", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s_%s.pkl'", "%", "(", "\n", "self", ".", "timestamp", ",", "CombinedTopKModelSaver", ".", "get_configuration_id", "(", "self", ".", "incumbent", ")", ")", ")", "\n", "config", "=", "self", ".", "incumbent", ".", "copy", "(", ")", "\n", "data_node", ",", "op_list", "=", "parse_config", "(", "self", ".", "original_data", ".", "copy_", "(", ")", ",", "config", ",", "record", "=", "True", ",", "\n", "if_imbal", "=", "self", ".", "if_imbal", ")", "\n", "algo_id", "=", "config", "[", "'algorithm'", "]", "\n", "estimator", "=", "fetch_predict_estimator", "(", "self", ".", "task_type", ",", "algo_id", ",", "config", ",", "\n", "data_node", ".", "data", "[", "0", "]", ",", "data_node", ".", "data", "[", "1", "]", ",", "\n", "weight_balance", "=", "data_node", ".", "enable_balance", ",", "\n", "data_balance", "=", "data_node", ".", "data_balance", ")", "\n", "with", "open", "(", "model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pkl", ".", "dump", "(", "[", "op_list", ",", "estimator", ",", "None", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.fit_ensemble": [[125, 140], ["os.path.join", "mindware.components.ensemble.ensemble_bulider.EnsembleBuilder", "abstract_block.AbstractBlock.es.fit", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.distrib.ensemble_util.EnsembleSelection.fit", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.meta_feature.meta_feature.DatasetMetafeatures.load"], ["", "", "", "def", "fit_ensemble", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ensemble_method", "is", "not", "None", ":", "\n", "            ", "config_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'%s_topk_config.pkl'", "%", "self", ".", "timestamp", ")", "\n", "with", "open", "(", "config_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "stats", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "# Ensembling all intermediate/ultimate models found in above optimization process.", "\n", "", "self", ".", "es", "=", "EnsembleBuilder", "(", "stats", "=", "stats", ",", "\n", "data_node", "=", "self", ".", "original_data", ",", "\n", "ensemble_method", "=", "self", ".", "ensemble_method", ",", "\n", "ensemble_size", "=", "self", ".", "ensemble_size", ",", "\n", "task_type", "=", "self", ".", "task_type", ",", "\n", "metric", "=", "self", ".", "metric", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ")", "\n", "self", ".", "es", ".", "fit", "(", "data", "=", "self", ".", "original_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict": [[141, 147], ["abstract_block.AbstractBlock._predict", "numpy.argmax", "abstract_block.AbstractBlock._predict"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict"], ["", "", "def", "predict", "(", "self", ",", "test_data", ":", "DataNode", ")", ":", "\n", "        ", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "pred", "=", "self", ".", "_predict", "(", "test_data", ")", "\n", "return", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_predict", "(", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict": [[148, 171], ["abstract_block.AbstractBlock.es.predict", "test_data.copy_", "mindware.components.feature_engineering.parse.construct_node", "AttributeError", "mindware.components.utils.topk_saver.load_combined_transformer_estimator", "estimator.predict_proba", "estimator.predict", "AttributeError", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.parse.construct_node", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.topk_saver.load_combined_transformer_estimator", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "", "def", "_predict", "(", "self", ",", "test_data", ":", "DataNode", ")", ":", "\n", "        ", "if", "self", ".", "ensemble_method", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "es", "is", "None", "and", "self", ".", "eval_type", "==", "'cv'", ":", "\n", "                ", "raise", "AttributeError", "(", "\"Please call refit() for cross-validation!\"", ")", "\n", "", "elif", "self", ".", "es", "is", "None", ":", "\n", "                ", "raise", "AttributeError", "(", "\"AutoML is not fitted!\"", ")", "\n", "", "return", "self", ".", "es", ".", "predict", "(", "test_data", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "best_op_list", ",", "estimator", "=", "load_combined_transformer_estimator", "(", "self", ".", "output_dir", ",", "self", ".", "incumbent", ",", "\n", "self", ".", "timestamp", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "self", ".", "eval_type", "==", "'cv'", ":", "\n", "                    ", "raise", "AttributeError", "(", "\"Please call refit() for cross-validation!\"", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "e", "\n", "", "", "test_data_node", "=", "test_data", ".", "copy_", "(", ")", "\n", "test_data_node", "=", "construct_node", "(", "test_data_node", ",", "best_op_list", ")", "\n", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "                ", "return", "estimator", ".", "predict_proba", "(", "test_data_node", ".", "data", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "estimator", ".", "predict", "(", "test_data_node", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict_proba": [[172, 176], ["abstract_block.AbstractBlock._predict", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock._predict"], ["", "", "", "def", "predict_proba", "(", "self", ",", "test_data", ":", "DataNode", ")", ":", "\n", "        ", "if", "self", ".", "task_type", "not", "in", "CLS_TASKS", ":", "\n", "            ", "raise", "AttributeError", "(", "\"predict_proba is not supported in regression\"", ")", "\n", "", "return", "self", ".", "_predict", "(", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.score": [[177, 182], ["abstract_block.AbstractBlock.predict", "metric_func", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.predict"], ["", "def", "score", "(", "self", ",", "test_data", ":", "DataNode", ",", "metric_func", "=", "None", ")", ":", "\n", "        ", "if", "metric_func", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'metric_func is not defined!'", ")", "\n", "", "y_pred", "=", "self", ".", "predict", "(", "test_data", ")", "\n", "return", "metric_func", "(", "test_data", ".", "data", "[", "1", "]", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.abstract_block.AbstractBlock.iterate": [[183, 185], ["NotImplementedError"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "trial_num", "=", "10", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.joint_block.JointBlock.__init__": [[11, 93], ["mindware.blocks.abstract_block.AbstractBlock.__init__", "ConfigSpace.ConfigurationSpace", "mindware.components.optimizers.build_hpo_optimizer", "ConfigSpace.ConfigurationSpace.add_hyperparameters", "ConfigSpace.ConfigurationSpace.add_conditions", "ConfigSpace.ConfigurationSpace.add_forbidden_clauses", "ConfigSpace.ConfigurationSpace.add_hyperparameters", "ConfigSpace.ConfigurationSpace.add_conditions", "ConfigSpace.ConfigurationSpace.add_forbidden_clauses", "ClassificationEvaluator", "RegressionEvaluator", "fe_config_space.get_hyperparameters", "fe_config_space.get_conditions", "fe_config_space.get_forbiddens", "cash_config_space.get_hyperparameters", "cash_config_space.get_conditions", "cash_config_space.get_forbiddens"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.optimizers.hpo_optimizer_builder.build_hpo_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "node_list", ",", "node_index", ",", "\n", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ":", "ConfigurationSpace", ",", "\n", "cash_config_space", ":", "ConfigurationSpace", ",", "\n", "data", ":", "DataNode", ",", "\n", "fixed_config", "=", "None", ",", "\n", "time_limit", "=", "None", ",", "\n", "trial_num", "=", "0", ",", "\n", "metric", "=", "'acc'", ",", "\n", "optimizer", "=", "'smac'", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "ensemble_size", "=", "50", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "\"logs\"", ",", "\n", "dataset_name", "=", "'default_dataset'", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "resampling_params", "=", "None", ",", "\n", "n_jobs", "=", "1", ",", "\n", "seed", "=", "1", ")", ":", "\n", "        ", "super", "(", "JointBlock", ",", "self", ")", ".", "__init__", "(", "node_list", ",", "node_index", ",", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ",", "cash_config_space", ",", "data", ",", "\n", "fixed_config", "=", "fixed_config", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "trial_num", "=", "trial_num", ",", "\n", "metric", "=", "metric", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "eval_type", "=", "eval_type", ",", "\n", "resampling_params", "=", "resampling_params", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "self", ".", "fixed_config", "=", "fixed_config", "\n", "\n", "# Combine configuration space", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "if", "fe_config_space", "is", "not", "None", ":", "\n", "            ", "cs", ".", "add_hyperparameters", "(", "fe_config_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "cs", ".", "add_conditions", "(", "fe_config_space", ".", "get_conditions", "(", ")", ")", "\n", "cs", ".", "add_forbidden_clauses", "(", "fe_config_space", ".", "get_forbiddens", "(", ")", ")", "\n", "", "if", "cash_config_space", "is", "not", "None", ":", "\n", "            ", "cs", ".", "add_hyperparameters", "(", "cash_config_space", ".", "get_hyperparameters", "(", ")", ")", "\n", "cs", ".", "add_conditions", "(", "cash_config_space", ".", "get_conditions", "(", ")", ")", "\n", "cs", ".", "add_forbidden_clauses", "(", "cash_config_space", ".", "get_forbiddens", "(", ")", ")", "\n", "", "self", ".", "joint_cs", "=", "cs", "\n", "\n", "# Define evaluator and optimizer", "\n", "if", "self", ".", "task_type", "in", "CLS_TASKS", ":", "\n", "            ", "from", "mindware", ".", "components", ".", "evaluators", ".", "cls_evaluator", "import", "ClassificationEvaluator", "\n", "self", ".", "evaluator", "=", "ClassificationEvaluator", "(", "\n", "fixed_config", "=", "fixed_config", ",", "\n", "scorer", "=", "self", ".", "metric", ",", "\n", "data_node", "=", "self", ".", "original_data", ",", "\n", "if_imbal", "=", "self", ".", "if_imbal", ",", "\n", "timestamp", "=", "self", ".", "timestamp", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "resampling_strategy", "=", "self", ".", "eval_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ")", "\n", "", "else", ":", "\n", "            ", "from", "mindware", ".", "components", ".", "evaluators", ".", "rgs_evaluator", "import", "RegressionEvaluator", "\n", "self", ".", "evaluator", "=", "RegressionEvaluator", "(", "\n", "fixed_config", "=", "fixed_config", ",", "\n", "scorer", "=", "self", ".", "metric", ",", "\n", "data_node", "=", "self", ".", "original_data", ",", "\n", "timestamp", "=", "self", ".", "timestamp", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", "resampling_strategy", "=", "self", ".", "eval_type", ",", "\n", "resampling_params", "=", "self", ".", "resampling_params", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "build_hpo_optimizer", "(", "self", ".", "eval_type", ",", "self", ".", "evaluator", ",", "self", ".", "joint_cs", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "output_dir", "=", "self", ".", "output_dir", ",", "\n", "per_run_time_limit", "=", "self", ".", "per_run_time_limit", ",", "\n", "inner_iter_num_per_iter", "=", "1", ",", "\n", "timestamp", "=", "self", ".", "timestamp", ",", "\n", "seed", "=", "self", ".", "seed", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.joint_block.JointBlock.iterate": [[94, 105], ["joint_block.JointBlock.optimizer.iterate", "joint_block.JointBlock.optimizer.incumbent_config.get_dictionary().copy", "joint_block.JointBlock.logger.info", "time.time", "joint_block.JointBlock.optimizer.incumbent_config.get_dictionary", "time.time"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info"], ["", "def", "iterate", "(", "self", ",", "trial_num", "=", "10", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "inner_iter_num_per_iter", "=", "trial_num", "\n", "self", ".", "optimizer", ".", "iterate", "(", "budget", "=", "self", ".", "time_limit", "+", "self", ".", "timestamp", "-", "time", ".", "time", "(", ")", ")", "\n", "if", "time", ".", "time", "(", ")", "-", "self", ".", "timestamp", ">", "self", ".", "time_limit", ":", "\n", "            ", "self", ".", "timeout_flag", "=", "True", "\n", "self", ".", "logger", ".", "info", "(", "'Time elapsed!'", ")", "\n", "", "self", ".", "early_stop_flag", "=", "self", ".", "optimizer", ".", "early_stopped_flag", "\n", "self", ".", "incumbent_perf", "=", "self", ".", "optimizer", ".", "incumbent_perf", "\n", "self", ".", "incumbent", "=", "self", ".", "optimizer", ".", "incumbent_config", ".", "get_dictionary", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "eval_dict", "=", "self", ".", "optimizer", ".", "eval_dict", "\n", "return", "self", ".", "incumbent_perf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__": [[11, 133], ["mindware.blocks.abstract_block.AbstractBlock.__init__", "list", "dict", "dict", "dict", "dict", "list", "list", "time.time", "list", "len", "conditioning_block.ConditioningBlock.arms.copy", "numpy.zeros", "list", "list", "list", "cash_config_space.get_hyperparameters", "ConfigSpace.ConfigurationSpace", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "cash_config_space.get_conditions", "cash_config_space.get_forbiddens", "get_node_type", "get_node_type.", "cash_config_space.get_hyperparameter", "ConfigSpace.Constant", "copy.deepcopy", "copy.deepcopy", "data.copy_", "ValueError", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_condition", "ConfigSpace.ConfigurationSpace.add_forbidden_clause", "hp.name.split"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.__init__", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.feature_engineering.transformation_graph.DataNode.copy_"], ["    ", "def", "__init__", "(", "self", ",", "node_list", ",", "node_index", ",", "\n", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ":", "ConfigurationSpace", ",", "\n", "cash_config_space", ":", "ConfigurationSpace", ",", "\n", "data", ":", "DataNode", ",", "\n", "fixed_config", "=", "None", ",", "\n", "time_limit", "=", "None", ",", "\n", "trial_num", "=", "0", ",", "\n", "metric", "=", "'acc'", ",", "\n", "optimizer", "=", "'smac'", ",", "\n", "ensemble_method", "=", "'ensemble_selection'", ",", "\n", "ensemble_size", "=", "50", ",", "\n", "per_run_time_limit", "=", "300", ",", "\n", "output_dir", "=", "\"logs\"", ",", "\n", "dataset_name", "=", "'default_dataset'", ",", "\n", "eval_type", "=", "'holdout'", ",", "\n", "resampling_params", "=", "None", ",", "\n", "n_jobs", "=", "1", ",", "\n", "seed", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        :param classifier_ids: subset of {'adaboost','bernoulli_nb','decision_tree','extra_trees','gaussian_nb','gradient_boosting',\n        'gradient_boosting','k_nearest_neighbors','lda','liblinear_svc','libsvm_svc','multinomial_nb','passive_aggressive','qda',\n        'random_forest','sgd'}\n        \"\"\"", "\n", "super", "(", "ConditioningBlock", ",", "self", ")", ".", "__init__", "(", "node_list", ",", "node_index", ",", "task_type", ",", "timestamp", ",", "\n", "fe_config_space", ",", "cash_config_space", ",", "data", ",", "\n", "fixed_config", "=", "fixed_config", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "trial_num", "=", "trial_num", ",", "\n", "metric", "=", "metric", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "eval_type", "=", "eval_type", ",", "\n", "resampling_params", "=", "resampling_params", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "# Best configuration.", "\n", "self", ".", "optimal_arm", "=", "None", "\n", "self", ".", "best_lower_bounds", "=", "None", "\n", "\n", "# Bandit settings.", "\n", "self", ".", "alpha", "=", "4", "\n", "self", ".", "arms", "=", "list", "(", "cash_config_space", ".", "get_hyperparameter", "(", "'algorithm'", ")", ".", "choices", ")", "\n", "self", ".", "rewards", "=", "dict", "(", ")", "\n", "self", ".", "sub_bandits", "=", "dict", "(", ")", "\n", "self", ".", "evaluation_cost", "=", "dict", "(", ")", "\n", "\n", "self", ".", "arm_cost_stats", "=", "dict", "(", ")", "\n", "for", "_arm", "in", "self", ".", "arms", ":", "\n", "            ", "self", ".", "arm_cost_stats", "[", "_arm", "]", "=", "list", "(", ")", "\n", "\n", "", "for", "arm", "in", "self", ".", "arms", ":", "\n", "            ", "self", ".", "rewards", "[", "arm", "]", "=", "list", "(", ")", "\n", "self", ".", "evaluation_cost", "[", "arm", "]", "=", "list", "(", ")", "\n", "\n", "hps", "=", "cash_config_space", ".", "get_hyperparameters", "(", ")", "\n", "cs", "=", "ConfigurationSpace", "(", ")", "\n", "cs", ".", "add_hyperparameter", "(", "Constant", "(", "'algorithm'", ",", "arm", ")", ")", "\n", "for", "hp", "in", "hps", ":", "\n", "                ", "if", "hp", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "==", "arm", ":", "\n", "                    ", "cs", ".", "add_hyperparameter", "(", "hp", ")", "\n", "\n", "# Add active conditions", "\n", "", "", "conds", "=", "cash_config_space", ".", "get_conditions", "(", ")", "\n", "for", "cond", "in", "conds", ":", "\n", "                ", "try", ":", "\n", "                    ", "cs", ".", "add_condition", "(", "cond", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "# Add active forbidden clauses", "\n", "", "", "forbids", "=", "cash_config_space", ".", "get_forbiddens", "(", ")", "\n", "for", "forbid", "in", "forbids", ":", "\n", "                ", "try", ":", "\n", "                    ", "cs", ".", "add_forbidden_clause", "(", "forbid", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "from", "mindware", ".", "blocks", ".", "block_utils", "import", "get_node_type", "\n", "child_type", "=", "get_node_type", "(", "node_list", ",", "node_index", "+", "1", ")", "\n", "self", ".", "sub_bandits", "[", "arm", "]", "=", "child_type", "(", "\n", "node_list", ",", "node_index", "+", "1", ",", "task_type", ",", "timestamp", ",", "\n", "deepcopy", "(", "fe_config_space", ")", ",", "deepcopy", "(", "cs", ")", ",", "data", ".", "copy_", "(", ")", ",", "\n", "fixed_config", "=", "fixed_config", ",", "\n", "time_limit", "=", "time_limit", ",", "\n", "metric", "=", "metric", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ensemble_method", "=", "ensemble_method", ",", "\n", "ensemble_size", "=", "ensemble_size", ",", "\n", "per_run_time_limit", "=", "per_run_time_limit", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "eval_type", "=", "eval_type", ",", "\n", "resampling_params", "=", "resampling_params", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "seed", "=", "seed", "\n", ")", "\n", "\n", "", "self", ".", "action_sequence", "=", "list", "(", ")", "\n", "self", ".", "final_rewards", "=", "list", "(", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_records", "=", "list", "(", ")", "\n", "\n", "# Initialize the parameters.", "\n", "self", ".", "pull_cnt", "=", "0", "\n", "self", ".", "pick_id", "=", "0", "\n", "self", ".", "update_cnt", "=", "0", "\n", "arm_num", "=", "len", "(", "self", ".", "arms", ")", "\n", "self", ".", "optimal_algo_id", "=", "None", "\n", "self", ".", "arm_candidate", "=", "self", ".", "arms", ".", "copy", "(", ")", "\n", "self", ".", "best_lower_bounds", "=", "np", ".", "zeros", "(", "arm_num", ")", "\n", "_iter_id", "=", "0", "\n", "if", "self", ".", "time_limit", "is", "None", ":", "\n", "            ", "if", "arm_num", "*", "self", ".", "alpha", ">", "self", ".", "trial_num", ":", "\n", "                ", "raise", "ValueError", "(", "'Trial number should be larger than %d.'", "%", "(", "arm_num", "*", "self", ".", "alpha", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "trial_num", "=", "MAX_INT", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate": [[134, 235], ["len", "conditioning_block.ConditioningBlock.logger.info", "time.time", "conditioning_block.ConditioningBlock.sub_bandits[].iterate", "conditioning_block.ConditioningBlock.arm_cost_stats[].append", "conditioning_block.ConditioningBlock.eval_dict.update", "conditioning_block.ConditioningBlock.rewards[].append", "conditioning_block.ConditioningBlock.action_sequence.append", "conditioning_block.ConditioningBlock.final_rewards.append", "conditioning_block.ConditioningBlock.time_records.append", "list", "numpy.array", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "len", "conditioning_block.ConditioningBlock.logger.info", "len", "numpy.array.append", "max", "numpy.array().mean", "int", "len", "range", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "conditioning_block.ConditioningBlock.logger.info", "time.time", "time.time", "str", "str", "str", "str", "str", "list", "list", "numpy.min", "upper_bounds.append", "lower_bounds.append", "range", "numpy.sum", "conditioning_block.ConditioningBlock.logger.error", "list", "numpy.array", "str", "enumerate", "time.time", "conditioning_block.ConditioningBlock.arms.index", "numpy.mean", "enumerate"], "methods", ["home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.conditioning_block.ConditioningBlock.iterate", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.base.acquisition.AbstractAcquisitionFunction.update", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.info", "home.repos.pwc.inspect_result.PKU-DAIR_mindware.utils.logging.PickableLoggerAdapter.error"], ["", "", "def", "iterate", "(", "self", ",", "trial_num", "=", "10", ")", ":", "\n", "# Search for an arm that is not early-stopped.", "\n", "        ", "while", "self", ".", "sub_bandits", "[", "self", ".", "arm_candidate", "[", "self", ".", "pick_id", "]", "]", ".", "early_stop_flag", "and", "self", ".", "pick_id", "<", "len", "(", "self", ".", "arm_candidate", ")", ":", "\n", "            ", "self", ".", "pick_id", "+=", "1", "\n", "\n", "", "if", "self", ".", "pick_id", "<", "len", "(", "self", ".", "arm_candidate", ")", ":", "\n", "# Pull the arm.", "\n", "            ", "arm_to_pull", "=", "self", ".", "arm_candidate", "[", "self", ".", "pick_id", "]", "\n", "self", ".", "logger", ".", "info", "(", "'Optimize %s in the %d-th iteration'", "%", "(", "arm_to_pull", ",", "self", ".", "pull_cnt", ")", ")", "\n", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "reward", "=", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "iterate", "(", "trial_num", "=", "trial_num", ")", "\n", "\n", "# Update results after each iteration", "\n", "self", ".", "arm_cost_stats", "[", "arm_to_pull", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "_start_time", ")", "\n", "if", "reward", ">", "self", ".", "incumbent_perf", ":", "\n", "                ", "self", ".", "optimal_algo_id", "=", "arm_to_pull", "\n", "self", ".", "incumbent_perf", "=", "reward", "\n", "self", ".", "incumbent", "=", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "incumbent", "\n", "", "self", ".", "eval_dict", ".", "update", "(", "self", ".", "sub_bandits", "[", "arm_to_pull", "]", ".", "eval_dict", ")", "\n", "self", ".", "rewards", "[", "arm_to_pull", "]", ".", "append", "(", "reward", ")", "\n", "self", ".", "action_sequence", ".", "append", "(", "arm_to_pull", ")", "\n", "self", ".", "final_rewards", ".", "append", "(", "reward", ")", "\n", "self", ".", "time_records", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "# self.logger.info('The best performance found for %s is %.4f' % (arm_to_pull, reward))", "\n", "self", ".", "pull_cnt", "+=", "1", "\n", "self", ".", "pick_id", "+=", "1", "\n", "\n", "# Logger output", "\n", "scores", "=", "list", "(", ")", "\n", "for", "_arm", "in", "self", ".", "arms", ":", "\n", "                ", "scores", ".", "append", "(", "self", ".", "sub_bandits", "[", "_arm", "]", ".", "incumbent_perf", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "self", ".", "logger", ".", "info", "(", "'='", "*", "50", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Node index: %s'", "%", "str", "(", "self", ".", "node_index", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Best_algo_perf:  %s'", "%", "str", "(", "self", ".", "incumbent_perf", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Best_algo_id:    %s'", "%", "str", "(", "self", ".", "optimal_algo_id", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Arm candidates:  %s'", "%", "str", "(", "self", ".", "arms", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Best val scores: %s'", "%", "str", "(", "list", "(", "scores", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'='", "*", "50", ")", "\n", "\n", "# Eliminate arms after pulling each arm a few times.", "\n", "", "if", "self", ".", "pick_id", "==", "len", "(", "self", ".", "arm_candidate", ")", ":", "\n", "            ", "self", ".", "update_cnt", "+=", "1", "\n", "self", ".", "pick_id", "=", "0", "\n", "# Update the arms until pulling each arm for at least alpha times.", "\n", "if", "self", ".", "update_cnt", ">=", "self", ".", "alpha", ":", "\n", "# Update the upper/lower bound estimation.", "\n", "                ", "budget_left", "=", "max", "(", "self", ".", "time_limit", "-", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", ",", "0", ")", "\n", "avg_cost", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "self", ".", "arm_cost_stats", "[", "_arm", "]", ")", "for", "_arm", "in", "self", ".", "arm_candidate", "]", ")", ".", "mean", "(", ")", "\n", "steps", "=", "int", "(", "budget_left", "/", "avg_cost", ")", "\n", "upper_bounds", ",", "lower_bounds", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "for", "_arm", "in", "self", ".", "arm_candidate", ":", "\n", "                    ", "rewards", "=", "self", ".", "rewards", "[", "_arm", "]", "\n", "slope", "=", "(", "rewards", "[", "-", "1", "]", "-", "rewards", "[", "-", "self", ".", "alpha", "]", ")", "/", "self", ".", "alpha", "\n", "if", "self", ".", "time_limit", "is", "None", ":", "\n", "                        ", "steps", "=", "self", ".", "trial_num", "-", "self", ".", "pull_cnt", "\n", "", "upper_bound", "=", "np", ".", "min", "(", "[", "1.0", ",", "rewards", "[", "-", "1", "]", "+", "slope", "*", "steps", "]", ")", "\n", "upper_bounds", ".", "append", "(", "upper_bound", ")", "\n", "lower_bounds", ".", "append", "(", "rewards", "[", "-", "1", "]", ")", "\n", "self", ".", "best_lower_bounds", "[", "self", ".", "arms", ".", "index", "(", "_arm", ")", "]", "=", "rewards", "[", "-", "1", "]", "\n", "\n", "# Reject the sub-optimal arms.", "\n", "", "n", "=", "len", "(", "self", ".", "arm_candidate", ")", "\n", "flags", "=", "[", "False", "]", "*", "n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                        ", "if", "i", "!=", "j", ":", "\n", "                            ", "if", "upper_bounds", "[", "i", "]", "<", "lower_bounds", "[", "j", "]", ":", "\n", "                                ", "flags", "[", "i", "]", "=", "True", "\n", "\n", "", "", "", "", "if", "np", ".", "sum", "(", "flags", ")", "==", "n", ":", "\n", "                    ", "self", ".", "logger", ".", "error", "(", "'Removing all the arms simultaneously!'", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'='", "*", "50", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Node index: %s'", "%", "str", "(", "self", ".", "node_index", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Candidates  : %s'", "%", "','", ".", "join", "(", "self", ".", "arm_candidate", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Upper bound : %s'", "%", "','", ".", "join", "(", "[", "'%.4f'", "%", "val", "for", "val", "in", "upper_bounds", "]", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Lower bound : %s'", "%", "','", ".", "join", "(", "[", "'%.4f'", "%", "val", "for", "val", "in", "lower_bounds", "]", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'Arms removed: %s'", "%", "[", "item", "for", "idx", ",", "item", "in", "enumerate", "(", "self", ".", "arm_candidate", ")", "if", "flags", "[", "idx", "]", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'='", "*", "50", ")", "\n", "\n", "# Update arm_candidates.", "\n", "self", ".", "arm_candidate", "=", "[", "item", "for", "index", ",", "item", "in", "enumerate", "(", "self", ".", "arm_candidate", ")", "if", "not", "flags", "[", "index", "]", "]", "\n", "\n", "# Update stop flag", "\n", "", "", "self", ".", "early_stop_flag", "=", "True", "\n", "self", ".", "timeout_flag", "=", "False", "\n", "for", "_arm", "in", "self", ".", "arm_candidate", ":", "\n", "            ", "if", "not", "self", ".", "sub_bandits", "[", "_arm", "]", ".", "early_stop_flag", ":", "\n", "                ", "self", ".", "early_stop_flag", "=", "False", "\n", "", "", "if", "self", ".", "early_stop_flag", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"Maximum configuration number met for each arm candidate in conditioning block %s!\"", "%", "self", ".", "node_index", ")", "\n", "", "for", "_arm", "in", "self", ".", "arm_candidate", ":", "\n", "            ", "if", "self", ".", "sub_bandits", "[", "_arm", "]", ".", "timeout_flag", ":", "\n", "                ", "self", ".", "timeout_flag", "=", "True", "\n", "\n", "", "", "return", "self", ".", "incumbent_perf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_execution_tree": [[7, 15], ["None"], "function", ["None"], ["def", "get_execution_tree", "(", "execution_id", ")", ":", "\n", "# Each node represents (parent_id, node_type)", "\n", "    ", "trees", "=", "{", "0", ":", "[", "(", "'joint'", ",", "[", "]", ")", "]", ",", "\n", "1", ":", "[", "(", "'condition'", ",", "[", "1", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", "]", ",", "# Default strategy", "\n", "2", ":", "[", "(", "'condition'", ",", "[", "1", "]", ")", ",", "(", "'alternate'", ",", "[", "2", ",", "3", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", "]", ",", "\n", "3", ":", "[", "(", "'alternate'", ",", "[", "1", ",", "2", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", "]", ",", "\n", "4", ":", "[", "(", "'alternate'", ",", "[", "1", ",", "2", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", ",", "(", "'condition'", ",", "[", "3", "]", ")", ",", "(", "'joint'", ",", "[", "]", ")", "]", "}", "\n", "return", "trees", "[", "execution_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-DAIR_mindware.blocks.block_utils.get_node_type": [[17, 26], ["None"], "function", ["None"], ["", "def", "get_node_type", "(", "node_list", ",", "index", ")", ":", "\n", "    ", "if", "node_list", "[", "index", "]", "[", "0", "]", "==", "'joint'", ":", "\n", "        ", "root_class", "=", "JointBlock", "\n", "", "elif", "node_list", "[", "index", "]", "[", "0", "]", "==", "'condition'", ":", "\n", "        ", "root_class", "=", "ConditioningBlock", "\n", "", "else", ":", "\n", "        ", "root_class", "=", "AlternatingBlock", "\n", "\n", "", "return", "root_class", "\n", "", ""]]}