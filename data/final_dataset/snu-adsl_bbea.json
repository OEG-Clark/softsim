{"home.repos.pwc.inspect_result.snu-adsl_bbea.None.hpo_runner.load_search_space": [[33, 54], ["debug", "space_path.endswith", "numpy.load", "hist_f[].tolist", "hist_f[].tolist.keys", "hpv_list.append", "warn", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["def", "load_search_space", "(", "space_path", ",", "max_size", "=", "None", ")", ":", "\n", "    ", "hpv_list", "=", "[", "]", "\n", "if", "not", "'search_space.npz'", "in", "space_path", ":", "\n", "        ", "if", "space_path", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "space_path", "=", "space_path", "+", "'search_space.npz'", "\n", "", "else", ":", "\n", "            ", "space_path", "=", "space_path", "+", "'/search_space.npz'", "\n", "\n", "", "", "try", ":", "\n", "        ", "hist_f", "=", "np", ".", "load", "(", "space_path", ",", "allow_pickle", "=", "True", ")", "\n", "hpv_dict", "=", "hist_f", "[", "'hpv'", "]", ".", "tolist", "(", ")", "# XXX: np.array to python dict", "\n", "for", "k", "in", "hpv_dict", ".", "keys", "(", ")", ":", "\n", "            ", "hpv_list", ".", "append", "(", "hpv_dict", "[", "k", "]", ")", "\n", "if", "max_size", "!=", "None", "and", "len", "(", "hpv_list", ")", ">", "max_size", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "warn", "(", "\"Loading hyperparameters from prior space failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "debug", "(", "\"Number of configurations: {}\"", ".", "format", "(", "len", "(", "hpv_list", ")", ")", ")", "\n", "return", "hpv_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.None.hpo_runner.run": [[56, 142], ["hp_cfg.get_dict", "optimizers.create_emulator.play", "create_search_space", "trainers.create_trainer", "debug", "optimizers.create_runner", "create_space_from_table", "debug", "optimizers.create_emulator", "ValueError", "ValueError", "hpo_runner.load_search_space", "info", "ValueError", "create_space_from_table.save", "info", "trainers.create_verifier", "len", "error", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.play", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_search_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.__init__.create_trainer", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.__init__.create_runner", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_space_from_table", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.__init__.create_emulator", "home.repos.pwc.inspect_result.snu-adsl_bbea.None.hpo_runner.load_search_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.create_verifier", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "run", "(", "args", ",", "save", "=", "True", ")", ":", "\n", "\n", "    ", "run_cfg", "=", "args", "[", "'run_config'", "]", "\n", "space_spec", "=", "run_cfg", "[", "'search_space'", "]", "\n", "hp_cfg", "=", "args", "[", "'hp_config'", "]", "\n", "hp_cfg_dict", "=", "hp_cfg", ".", "get_dict", "(", ")", "\n", "hp_cfg_name", "=", "args", "[", "'hp_cfg_name'", "]", "\n", "s", "=", "None", "\n", "m", "=", "None", "\n", "result", "=", "[", "]", "\n", "\n", "if", "not", "'use_lookup'", "in", "run_cfg", "or", "not", "run_cfg", "[", "'use_lookup'", "]", ":", "\n", "        ", "v", "=", "None", "\n", "surrogate", "=", "None", "\n", "hpv_list", "=", "None", "\n", "dataset", "=", "None", "\n", "if", "'dataset'", "in", "hp_cfg_dict", ":", "\n", "            ", "dataset", "=", "hp_cfg_dict", "[", "'dataset'", "]", "\n", "\n", "", "if", "'config'", "in", "hp_cfg_dict", ":", "\n", "            ", "if", "'surrogate'", "in", "hp_cfg_dict", "[", "'config'", "]", ":", "\n", "                ", "surrogate", "=", "hp_cfg_dict", "[", "'config'", "]", "[", "'surrogate'", "]", "\n", "if", "'verification'", "in", "space_spec", "and", "space_spec", "[", "'verification'", "]", ":", "\n", "                    ", "info", "(", "\"Pre-verification candidates on {}\"", ".", "format", "(", "surrogate", ")", ")", "\n", "v", "=", "create_verifier", "(", "surrogate", ",", "run_cfg", ")", "\n", "\n", "", "", "", "if", "'prior_space'", "in", "space_spec", ":", "\n", "            ", "hpv_list", "=", "load_search_space", "(", "space_spec", "[", "'prior_space'", "]", ")", "\n", "i_start", "=", "0", "\n", "if", "'seed'", "in", "space_spec", ":", "\n", "                ", "i_start", "=", "space_spec", "[", "'seed'", "]", "\n", "\n", "", "if", "'num_samples'", "in", "space_spec", ":", "\n", "                ", "if", "len", "(", "hpv_list", ")", ">", "space_spec", "[", "'num_samples'", "]", "+", "i_start", ":", "\n", "                    ", "i_end", "=", "space_spec", "[", "'num_samples'", "]", "+", "i_start", "\n", "hpv_list", "=", "hpv_list", "[", "i_start", ":", "i_end", "]", "\n", "", "else", ":", "\n", "                    ", "error", "(", "\"Invalid space setting! # of config in the prior space is less than the spec.\"", ")", "\n", "\n", "", "", "info", "(", "\"{} predefined configruations are from {}\"", ".", "format", "(", "len", "(", "hpv_list", ")", ",", "space_spec", "[", "'prior_space'", "]", ")", ")", "\n", "\n", "", "s", "=", "create_search_space", "(", "hp_cfg_dict", ",", "space_spec", ",", "hpv_list", "=", "hpv_list", ",", "verifier", "=", "v", ")", "\n", "t", "=", "create_trainer", "(", "s", ",", "hp_cfg", ",", "run_cfg", ",", "builder", "=", "v", ",", "surrogate", "=", "surrogate", ",", "dataset", "=", "dataset", ")", "\n", "\n", "debug", "(", "\"Search space is created as {}\"", ".", "format", "(", "space_spec", ")", ")", "\n", "m", "=", "create_runner", "(", "s", ",", "t", ",", "\n", "args", "[", "'exp_crt'", "]", ",", "\n", "args", "[", "'exp_goal'", "]", ",", "\n", "args", "[", "'exp_time'", "]", ",", "\n", "goal_metric", "=", "args", "[", "'goal_metric'", "]", ",", "\n", "num_resume", "=", "args", "[", "'rerun'", "]", ",", "\n", "save_internal", "=", "args", "[", "'save_internal'", "]", ",", "\n", "run_config", "=", "run_cfg", ",", "\n", "hp_config", "=", "hp_cfg", "\n", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "create_space_from_table", "(", "hp_cfg_name", ",", "space_spec", ")", "\n", "if", "s", "==", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Loading tabular dataset failed: {}\"", ".", "format", "(", "hp_cfg_name", ")", ")", "\n", "\n", "", "debug", "(", "\"Surrogate space is constructed using pre-evaluated configurations: {}.\"", ".", "format", "(", "hp_cfg_name", ")", ")", "\n", "\n", "m", "=", "create_emulator", "(", "s", ",", "\n", "args", "[", "'exp_crt'", "]", ",", "\n", "args", "[", "'exp_goal'", "]", ",", "\n", "args", "[", "'exp_time'", "]", ",", "\n", "goal_metric", "=", "args", "[", "'goal_metric'", "]", ",", "\n", "num_resume", "=", "args", "[", "'rerun'", "]", ",", "\n", "save_internal", "=", "args", "[", "'save_internal'", "]", ",", "\n", "run_config", "=", "run_cfg", ")", "\n", "\n", "\n", "", "if", "not", "args", "[", "'mode'", "]", "in", "ALL_OPT_MODELS", "+", "[", "'DIV'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'unsupported mode: {}'", ".", "format", "(", "args", "[", "'mode'", "]", ")", ")", "\n", "\n", "", "if", "not", "args", "[", "'spec'", "]", "in", "ACQ_FUNCS", "+", "DIV_SPECS", ":", "\n", "        ", "raise", "ValueError", "(", "'unsupported spec: {}'", ".", "format", "(", "args", "[", "'spec'", "]", ")", ")", "\n", "\n", "", "result", "=", "m", ".", "play", "(", "args", "[", "'mode'", "]", ",", "args", "[", "'spec'", "]", ",", "args", "[", "'num_trials'", "]", ",", "\n", "save", "=", "save", ")", "\n", "#m.print_best(result)", "\n", "\n", "if", "args", "[", "'save_space'", "]", "==", "True", ":", "\n", "        ", "if", "s", "!=", "None", ":", "\n", "# save final search space", "\n", "            ", "s", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.None.bbea_runner.validate_args": [[18, 113], ["hp_cfg_name.endswith", "read_hyperparam_config", "read_config", "vars().items", "xoa.commons.logger.set_log_level", "ValueError", "validate_config", "ValueError", "xoa.commons.logger.info", "vars", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.read_hyperparam_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.read_cfg.read_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_level", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.read_cfg.validate_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["def", "validate_args", "(", "args", ")", ":", "\n", "\n", "    ", "valid", "=", "{", "}", "\n", "\n", "if", "args", ".", "debug_mode", ":", "\n", "        ", "set_log_level", "(", "'debug'", ")", "\n", "\n", "", "hp_cfg_path", "=", "args", ".", "hp_config_dir", "\n", "hp_cfg_name", "=", "args", ".", "hp_config", "\n", "\n", "if", "hp_cfg_name", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "hp_cfg_name", "=", "hp_cfg_name", "[", ":", "-", "5", "]", "\n", "\n", "# hp_config is a json file", "\n", "", "hp_cfg_path", "=", "hp_cfg_path", "+", "hp_cfg_name", "+", "'.json'", "\n", "hp_cfg", "=", "read_hyperparam_config", "(", "hp_cfg_path", ")", "\n", "if", "hp_cfg", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Invaild hyperparameter configuration: {}'", ".", "format", "(", "hp_cfg_path", ")", ")", "\n", "\n", "", "bbea_cfg", "=", "'BBEA'", "\n", "run_cfg", "=", "read_config", "(", "bbea_cfg", ",", "path", "=", "ALG_CONF_PATH", ")", "\n", "if", "not", "validate_config", "(", "run_cfg", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Invaild algorithm configuration: {}'", ".", "format", "(", "bbea_cfg", ")", ")", "\n", "", "else", ":", "\n", "        ", "info", "(", "\"Algorithm configuration: {}\"", ".", "format", "(", "bbea_cfg", ")", ")", "\n", "\n", "", "if", "not", "'title'", "in", "run_cfg", ":", "\n", "        ", "run_cfg", "[", "'title'", "]", "=", "bbea_cfg", "\n", "\n", "", "if", "not", "\"early_term_rule\"", "in", "run_cfg", ":", "\n", "        ", "run_cfg", "[", "\"early_term_rule\"", "]", "=", "args", ".", "early_term_rule", "\n", "\n", "", "if", "args", ".", "num_trials", ">", "1", ":", "\n", "        ", "run_cfg", "[", "'benchmark_mode'", "]", "=", "True", "\n", "run_cfg", "[", "'report_type'", "]", "=", "'validation'", "\n", "", "else", ":", "\n", "        ", "run_cfg", "[", "'benchmark_mode'", "]", "=", "False", "\n", "run_cfg", "[", "'report_type'", "]", "=", "'test'", "\n", "\n", "", "if", "'NAS'", "in", "hp_cfg_name", "or", "'HPO'", "in", "hp_cfg_name", ":", "\n", "        ", "run_cfg", "[", "'use_lookup'", "]", "=", "False", "\n", "", "elif", "hp_cfg_name", "in", "DNN_BENCHMARKS", ":", "\n", "# For use of DNN benchmark tasks", "\n", "        ", "run_cfg", "[", "'use_lookup'", "]", "=", "True", "\n", "run_cfg", "[", "'report_type'", "]", "=", "'test'", "\n", "\n", "", "for", "attr", ",", "value", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "# override argument options ", "\n", "        ", "if", "attr", "in", "run_cfg", ":", "\n", "            ", "valid", "[", "str", "(", "attr", ")", "]", "=", "run_cfg", "[", "str", "(", "attr", ")", "]", "\n", "", "else", ":", "\n", "            ", "valid", "[", "str", "(", "attr", ")", "]", "=", "value", "\n", "\n", "", "", "space_spec", "=", "{", "}", "\n", "if", "'search_space'", "in", "run_cfg", ":", "\n", "        ", "space_spec", "=", "run_cfg", "[", "'search_space'", "]", "\n", "\n", "# Search space initialization", "\n", "", "if", "'NAS101'", "in", "hp_cfg_name", ":", "\n", "        ", "space_spec", "[", "'sample_method'", "]", "=", "'Sobol'", "\n", "space_spec", "[", "'num_samples'", "]", "=", "100000", "\n", "space_spec", "[", "'verification'", "]", "=", "True", "\n", "", "elif", "'NAS201'", "in", "hp_cfg_name", "or", "'MLP'", "in", "hp_cfg_name", ":", "\n", "        ", "space_spec", "[", "'sample_method'", "]", "=", "'cat_grid'", "\n", "\n", "", "if", "not", "'order'", "in", "space_spec", ":", "\n", "        ", "space_spec", "[", "'order'", "]", "=", "None", "\n", "", "if", "not", "'num_samples'", "in", "space_spec", ":", "\n", "        ", "if", "not", "'sample_method'", "in", "space_spec", ":", "\n", "            ", "space_spec", "[", "'num_samples'", "]", "=", "20000", "\n", "", "", "if", "not", "'seed'", "in", "space_spec", ":", "\n", "        ", "space_spec", "[", "'seed'", "]", "=", "1", "\n", "", "if", "not", "'prior_history'", "in", "space_spec", ":", "\n", "        ", "space_spec", "[", "'prior_history'", "]", "=", "None", "\n", "\n", "", "valid", "[", "'search_space'", "]", "=", "space_spec", "\n", "valid", "[", "'hp_cfg_name'", "]", "=", "hp_cfg_name", "\n", "valid", "[", "'hp_config'", "]", "=", "hp_cfg", "\n", "valid", "[", "'run_config'", "]", "=", "run_cfg", "\n", "\n", "valid", "[", "'mode'", "]", "=", "run_cfg", "[", "'mode'", "]", "\n", "valid", "[", "'spec'", "]", "=", "run_cfg", "[", "'spec'", "]", "\n", "valid", "[", "'num_trials'", "]", "=", "args", ".", "num_trials", "\n", "\n", "# Default target settings", "\n", "valid", "[", "'exp_crt'", "]", "=", "'TIME'", "\n", "valid", "[", "'exp_goal'", "]", "=", "0.0", "\n", "valid", "[", "'goal_metric'", "]", "=", "'error'", "\n", "\n", "# Disable internal options", "\n", "valid", "[", "'save_internal'", "]", "=", "False", "\n", "valid", "[", "'save_space'", "]", "=", "False", "\n", "valid", "[", "'rerun'", "]", "=", "0", "\n", "\n", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.None.bbea_runner.main": [[115, 123], ["bbea_runner.validate_args", "hpo_runner.run", "xoa.commons.logger.error", "xoa.commons.logger.error", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.None.bbea_runner.validate_args", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "run_args", "=", "validate_args", "(", "args", ")", "\n", "run", "(", "run_args", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "error", "(", "\"Runtime exception: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "error", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.debug": [[19, 22], ["None"], "function", ["None"], ["def", "debug", "(", "args", ")", ":", "\n", "#print(args)", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.draw_regret_curve": [[24, 196], ["set", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.grid", "matplotlib.font_manager.FontProperties", "matplotlib.font_manager.FontProperties.set_style", "matplotlib.font_manager.FontProperties.set_size", "matplotlib.ylabel", "matplotlib.xlabel", "type", "style_format", "fig.add_subplot.set_yscale", "fig.add_subplot.set_xscale", "time.time", "range", "time.time", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "fig.add_subplot.set_title", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "ValueError", "analysis.get_result", "numpy.array", "analysis.get_total_times", "range", "numpy.median", "numpy.append", "numpy.quantile", "numpy.append", "numpy.quantile", "numpy.append", "numpy.append", "viz.add_quantile_fill_line", "set.remove", "viz.add_quantile_fill_line", "fig.add_subplot.get_legend_handles_labels", "matplotlib.legend", "matplotlib.legend", "matplotlib.text", "matplotlib.axhline", "results.keys", "analysis.get_best_errors", "len", "int", "regrets_by_interval[].append", "max", "int", "int", "print", "ValueError", "max", "max", "regrets_by_interval.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.show", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_quantile_fill_line", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_quantile_fill_line", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "draw_regret_curve", "(", "results", ",", "arms", ",", "repeats", ",", "\n", "title", "=", "None", ",", "x_unit", "=", "\"Second\"", ",", "\n", "alpha_fill", "=", "0.1", ",", "std_div", "=", "4", ",", "xlim", "=", "None", ",", "ylim", "=", "None", ",", "\n", "width", "=", "14", ",", "height", "=", "8", ",", "x_steps", "=", "1", ",", "guidelines", "=", "[", "]", ",", "\n", "save_name", "=", "None", ",", "target_folder", "=", "'./'", ",", "y_scale", "=", "1", ",", "\n", "sub_y_metric", "=", "\"test error\"", ",", "best_err", "=", "0.2153", ",", "\n", "legend", "=", "None", ",", "l_order", "=", "None", ",", "style_format", "=", "None", ",", "max_err", "=", "None", ")", ":", "\n", "\n", "    ", "if", "type", "(", "arms", ")", "is", "not", "list", ":", "\n", "        ", "arms", "=", "[", "arms", "]", "\n", "\n", "", "unlabeled_arms", "=", "set", "(", "arms", ")", "\n", "rcParams", "[", "'mathtext.default'", "]", "=", "'regular'", "\n", "rcParams", "[", "'figure.figsize'", "]", "=", "width", ",", "height", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "subplot", ".", "grid", "(", "alpha", "=", "0.5", ")", "\n", "t_max", "=", "None", "\n", "\n", "its", "=", "FontProperties", "(", ")", "\n", "its", ".", "set_style", "(", "'italic'", ")", "\n", "its", ".", "set_size", "(", "'x-large'", ")", "\n", "\n", "if", "max_err", "!=", "None", "and", "best_err", "!=", "None", ":", "\n", "        ", "max_regret", "=", "max_err", "-", "best_err", "\n", "", "else", ":", "\n", "        ", "max_regret", "=", "1.0", "\n", "\n", "", "for", "arm", "in", "arms", ":", "\n", "        ", "if", "not", "arm", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"results log do not have record for {}\"", ".", "format", "(", "arm", ")", ")", "\n", "", "if", "style_format", "==", "None", ":", "\n", "            ", "style_format", "=", "get_predefined_style", "\n", "\n", "", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "arm", ")", "\n", "\n", "#errors_by_interval = { }", "\n", "regrets_by_interval", "=", "{", "}", "\n", "\n", "subplot", ".", "set_yscale", "(", "'log'", ")", "\n", "subplot", ".", "set_xscale", "(", "'log'", ")", "\n", "\n", "t_max", "=", "None", "\n", "s_t", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "repeats", ")", ":", "\n", "            ", "selected", "=", "get_result", "(", "results", ",", "arm", ",", "i", ")", "\n", "if", "max_err", "==", "None", ":", "\n", "                ", "max_err", "=", "selected", "[", "'error'", "]", "[", "0", "]", "\n", "max_regret", "=", "max_err", "-", "best_err", "\n", "", "y_best_errors", "=", "np", ".", "array", "(", "get_best_errors", "(", "selected", ")", ")", "\n", "\n", "\n", "t_times", "=", "get_total_times", "(", "selected", ",", "x_unit", ")", "\n", "\n", "if", "t_max", "==", "None", ":", "\n", "                ", "t_max", "=", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", "\n", "", "elif", "t_max", ">", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", ":", "\n", "                ", "t_max", "=", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", "\n", "\n", "", "t", "=", "0", "\n", "n_step", "=", "0", "\n", "cur_best_err", "=", "max_err", "\n", "for", "j", "in", "range", "(", "len", "(", "t_times", ")", ")", ":", "\n", "\n", "                ", "cur_time", "=", "t_times", "[", "j", "]", "\n", "\n", "while", "t", "<", "cur_time", ":", "\n", "                    ", "if", "not", "t", "in", "regrets_by_interval", ".", "keys", "(", ")", ":", "\n", "                        ", "regrets_by_interval", "[", "t", "]", "=", "[", "]", "\n", "\n", "#errors_by_interval[t].append(cur_best_err)", "\n", "", "regret", "=", "(", "cur_best_err", "-", "best_err", ")", "*", "y_scale", "\n", "\n", "if", "regret", "<", "0", ":", "\n", "                        ", "print", "(", "\"Invalid reget at {}: cur {}, best {}\"", ".", "format", "(", "t", ",", "cur_best_err", ",", "best_err", ")", ")", "\n", "raise", "ValueError", "(", "\"Invalid best error value!\"", ")", "\n", "\n", "", "regrets_by_interval", "[", "t", "]", ".", "append", "(", "regret", ")", "\n", "t", "+=", "2", "**", "n_step", "\n", "if", "n_step", "<=", "10", ":", "\n", "                        ", "n_step", "+=", "1", "\n", "\n", "", "", "if", "y_best_errors", "[", "j", "]", "<", "cur_best_err", ":", "\n", "                    ", "cur_best_err", "=", "y_best_errors", "[", "j", "]", "\n", "\n", "#print(\"{}: calc regret takes {}\".format(arm, time.time() - s_t))", "\n", "\n", "", "", "", "s_t", "=", "time", ".", "time", "(", ")", "\n", "x", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "q1", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "q3", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "t_max", ")", ":", "\n", "# TODO: move  i in log scale", "\n", "            ", "if", "not", "i", "in", "regrets_by_interval", ":", "\n", "                ", "continue", "\n", "\n", "#errors = errors_by_interval[i]", "\n", "", "regrets", "=", "regrets_by_interval", "[", "i", "]", "\n", "\n", "y_", "=", "np", ".", "median", "(", "regrets", ")", "\n", "#print(\"mean regret: {}\".format(y_))", "\n", "y", "=", "np", ".", "append", "(", "y", ",", "y_", ")", "\n", "\n", "q1_", "=", "np", ".", "quantile", "(", "regrets", ",", "0.25", ")", "\n", "q1", "=", "np", ".", "append", "(", "q1", ",", "q1_", ")", "\n", "q3_", "=", "np", ".", "quantile", "(", "regrets", ",", "0.75", ")", "\n", "q3", "=", "np", ".", "append", "(", "q3", ",", "q3_", ")", "\n", "\n", "x", "=", "np", ".", "append", "(", "x", ",", "i", ")", "\n", "\n", "#print(\"{}: data sampling time {}\".format(arm, time.time() - s_t))        ", "\n", "", "if", "arm", "in", "unlabeled_arms", ":", "\n", "            ", "add_quantile_fill_line", "(", "x", ",", "y", ",", "q1", ",", "q3", ",", "color", ",", "ax", "=", "subplot", ",", "marker", "=", "marker", ",", "y_scale", "=", "y_scale", ",", "\n", "label", "=", "arm", ",", "linestyle", "=", "linestyle", ",", "alpha_fill", "=", "alpha_fill", ")", "\n", "unlabeled_arms", ".", "remove", "(", "arm", ")", "\n", "", "else", ":", "\n", "            ", "add_quantile_fill_line", "(", "x", ",", "y", ",", "q1", ",", "q3", ",", "color", ",", "marker", "=", "marker", ",", "y_scale", "=", "y_scale", ",", "\n", "ax", "=", "subplot", ",", "linestyle", "=", "linestyle", ",", "alpha_fill", "=", "alpha_fill", ")", "\n", "\n", "", "", "if", "title", "!=", "None", ":", "\n", "        ", "subplot", ".", "set_title", "(", "'{}'", ".", "format", "(", "title", ")", ")", "\n", "", "bbox_to_anchor", "=", "None", "\n", "loc", "=", "None", "\n", "borderaxespad", "=", "None", "\n", "\n", "if", "legend", "is", "not", "None", ":", "\n", "        ", "if", "'bbox_to_anchor'", "in", "legend", ":", "\n", "            ", "bbox_to_anchor", "=", "legend", "[", "'bbox_to_anchor'", "]", "\n", "", "if", "'loc'", "in", "legend", ":", "\n", "            ", "loc", "=", "legend", "[", "'loc'", "]", "\n", "", "if", "'borderaxespad'", "in", "legend", ":", "\n", "            ", "borderaxespad", "=", "legend", "[", "'borderaxespad'", "]", "\n", "\n", "", "if", "l_order", "is", "not", "None", ":", "\n", "            ", "handles", ",", "labels", "=", "subplot", ".", "get_legend_handles_labels", "(", ")", "\n", "plt", ".", "legend", "(", "[", "handles", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "[", "labels", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "\n", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "\n", "", "", "x_pos", "=", "50", "\n", "if", "xlim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "xlim", "(", "xlim", ")", "\n", "x_pos", "=", "xlim", "[", "-", "1", "]", "\n", "\n", "", "if", "ylim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "ylim", "(", "ylim", ")", "\n", "\n", "\n", "", "for", "s", "in", "guidelines", ":", "\n", "\n", "        ", "if", "'regret'", "in", "s", ":", "\n", "            ", "pos", "=", "s", "[", "'regret'", "]", "\n", "label", "=", "\"{}\"", ".", "format", "(", "pos", ")", "\n", "if", "'label'", "in", "s", ":", "\n", "                ", "label", "=", "\"{}\"", ".", "format", "(", "s", "[", "'label'", "]", ")", "\n", "", "plt", ".", "text", "(", "x_pos", ",", "pos", ",", "label", ",", "ha", "=", "'right'", ",", "size", "=", "'x-large'", ",", "color", "=", "'black'", ",", "fontproperties", "=", "its", ")", "\n", "plt", ".", "axhline", "(", "y", "=", "pos", ",", "color", "=", "'red'", ",", "linestyle", "=", "':'", ")", "\n", "\n", "", "", "plt", ".", "ylabel", "(", "\"Intermediate regret ({})\"", ".", "format", "(", "sub_y_metric", ")", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "xlabel", "(", "x_unit", ",", "fontsize", "=", "15", ")", "\n", "if", "save_name", "is", "not", "None", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "target_folder", "+", "save_name", "+", "'.png'", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.draw_mean_regret_curve": [[199, 377], ["set", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.grid", "matplotlib.font_manager.FontProperties", "matplotlib.font_manager.FontProperties.set_style", "matplotlib.font_manager.FontProperties.set_size", "matplotlib.ylabel", "matplotlib.xlabel", "type", "style_format", "fig.add_subplot.set_yscale", "fig.add_subplot.set_xscale", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "fig.add_subplot.set_title", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "ValueError", "analysis.get_result", "numpy.array", "range", "numpy.mean", "numpy.append", "numpy.quantile", "numpy.append", "numpy.quantile", "numpy.append", "viz.add_no_fill_line", "set.remove", "viz.add_no_fill_line", "numpy.min", "fig.add_subplot.get_legend_handles_labels", "matplotlib.legend", "matplotlib.legend", "matplotlib.text", "matplotlib.axhline", "results.keys", "analysis.get_best_errors", "analysis.get_total_times", "len", "numpy.append", "analysis.get_total_times", "int", "errors_by_interval[].append", "regrets_by_interval[].append", "numpy.append", "analysis.get_total_times", "analysis.get_total_times", "max", "int", "int", "print", "numpy.append", "numpy.append", "max", "max", "regrets_by_interval.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.show", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_no_fill_line", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_no_fill_line", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "draw_mean_regret_curve", "(", "results", ",", "arms", ",", "repeats", ",", "\n", "title", "=", "None", ",", "x_unit", "=", "\"Hour\"", ",", "\n", "alpha_fill", "=", "0.1", ",", "std_div", "=", "4", ",", "xlim", "=", "None", ",", "ylim", "=", "None", ",", "\n", "width", "=", "14", ",", "height", "=", "8", ",", "x_steps", "=", "'Hour'", ",", "guidelines", "=", "[", "]", ",", "\n", "save_name", "=", "None", ",", "target_folder", "=", "'./'", ",", "y_scale", "=", "1", ",", "\n", "sub_y_metric", "=", "\"error rate\"", ",", "best_err", "=", "0.001", ",", "\n", "legend", "=", "None", ",", "l_order", "=", "None", ",", "style_format", "=", "None", ",", "max_err", "=", "None", ")", ":", "\n", "\n", "    ", "if", "type", "(", "arms", ")", "is", "not", "list", ":", "\n", "        ", "arms", "=", "[", "arms", "]", "\n", "\n", "", "unlabeled_arms", "=", "set", "(", "arms", ")", "\n", "rcParams", "[", "'figure.figsize'", "]", "=", "width", ",", "height", "\n", "rcParams", "[", "'mathtext.default'", "]", "=", "'regular'", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "subplot", ".", "grid", "(", "alpha", "=", "0.5", ")", "\n", "t_max", "=", "None", "\n", "x_pos", "=", "50", "\n", "its", "=", "FontProperties", "(", ")", "\n", "its", ".", "set_style", "(", "'italic'", ")", "\n", "its", ".", "set_size", "(", "'x-large'", ")", "\n", "\n", "if", "max_err", "!=", "None", "and", "best_err", "!=", "None", ":", "\n", "        ", "max_regret", "=", "max_err", "-", "best_err", "\n", "", "else", ":", "\n", "        ", "max_regret", "=", "1.0", "\n", "\n", "", "for", "arm", "in", "arms", ":", "\n", "        ", "if", "not", "arm", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"results log do not have record for {}\"", ".", "format", "(", "arm", ")", ")", "\n", "", "if", "style_format", "==", "None", ":", "\n", "            ", "style_format", "=", "get_predefined_style", "\n", "\n", "", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "arm", ")", "\n", "\n", "errors_by_interval", "=", "{", "}", "\n", "regrets_by_interval", "=", "{", "}", "\n", "\n", "subplot", ".", "set_yscale", "(", "'log'", ")", "\n", "subplot", ".", "set_xscale", "(", "'log'", ")", "\n", "\n", "t_max", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "repeats", ")", ":", "\n", "            ", "selected", "=", "get_result", "(", "results", ",", "arm", ",", "i", ")", "\n", "if", "max_err", "==", "None", ":", "\n", "                ", "max_err", "=", "selected", "[", "'error'", "]", "[", "0", "]", "\n", "max_regret", "=", "max_err", "-", "best_err", "\n", "", "y_best_errors", "=", "np", ".", "array", "(", "get_best_errors", "(", "selected", ")", ")", "\n", "\n", "\n", "if", "x_unit", "==", "'Second'", ":", "\n", "                ", "if", "x_steps", "==", "'Minute'", ":", "\n", "                    ", "t_times", "=", "get_total_times", "(", "selected", ",", "'Minute'", ")", "\n", "", "elif", "x_steps", "==", "'Hour'", ":", "\n", "                    ", "t_times", "=", "get_total_times", "(", "selected", ",", "'Hour'", ")", "\n", "", "else", ":", "\n", "                    ", "t_times", "=", "get_total_times", "(", "selected", ",", "'10min'", ")", "\n", "", "", "else", ":", "\n", "                ", "t_times", "=", "get_total_times", "(", "selected", ",", "x_unit", ")", "\n", "\n", "", "if", "t_max", "==", "None", ":", "\n", "                ", "t_max", "=", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", "\n", "", "elif", "t_max", ">", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", ":", "\n", "                ", "t_max", "=", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", "\n", "\n", "\n", "", "t", "=", "0", "\n", "cur_best_err", "=", "max_err", "\n", "for", "j", "in", "range", "(", "len", "(", "t_times", ")", ")", ":", "\n", "\n", "                ", "cur_time", "=", "t_times", "[", "j", "]", "\n", "\n", "while", "t", "<", "cur_time", ":", "\n", "                    ", "if", "not", "t", "in", "regrets_by_interval", ".", "keys", "(", ")", ":", "\n", "                        ", "errors_by_interval", "[", "t", "]", "=", "[", "]", "\n", "regrets_by_interval", "[", "t", "]", "=", "[", "]", "\n", "", "errors_by_interval", "[", "t", "]", ".", "append", "(", "cur_best_err", ")", "\n", "regret", "=", "(", "cur_best_err", "-", "best_err", ")", "*", "y_scale", "\n", "if", "regret", "<", "0", ":", "\n", "                        ", "print", "(", "\"Invalid reget at {}: cur {}, best {}\"", ".", "format", "(", "t", ",", "cur_best_err", ",", "best_err", ")", ")", "\n", "", "regrets_by_interval", "[", "t", "]", ".", "append", "(", "regret", ")", "\n", "t", "+=", "1", "\n", "\n", "", "if", "y_best_errors", "[", "j", "]", "<", "cur_best_err", ":", "\n", "                    ", "cur_best_err", "=", "y_best_errors", "[", "j", "]", "\n", "\n", "#print(\"{}:{}\".format(arm, regrets_by_interval.keys()))", "\n", "\n", "", "", "", "x", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "q1", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "q3", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "t_max", ")", ":", "\n", "            ", "errors", "=", "errors_by_interval", "[", "i", "]", "\n", "regrets", "=", "regrets_by_interval", "[", "i", "]", "\n", "\n", "y_", "=", "np", ".", "mean", "(", "regrets", ")", "\n", "#print(\"mean regret: {}\".format(y_))", "\n", "y", "=", "np", ".", "append", "(", "y", ",", "y_", ")", "\n", "\n", "q1_", "=", "np", ".", "quantile", "(", "regrets", ",", "0.25", ")", "\n", "q1", "=", "np", ".", "append", "(", "q1", ",", "q1_", ")", "\n", "q3_", "=", "np", ".", "quantile", "(", "regrets", ",", "0.75", ")", "\n", "q3", "=", "np", ".", "append", "(", "q3", ",", "q3_", ")", "\n", "\n", "if", "x_unit", "==", "'Second'", ":", "\n", "                ", "if", "x_steps", "==", "'Minute'", ":", "\n", "                    ", "x", "=", "np", ".", "append", "(", "x", ",", "i", "*", "60", ")", "\n", "", "elif", "x_steps", "==", "'Hour'", ":", "\n", "                    ", "x", "=", "np", ".", "append", "(", "x", ",", "i", "*", "3600", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "np", ".", "append", "(", "x", ",", "i", "*", "6", ")", "\n", "", "", "else", ":", "\n", "                ", "x", "=", "np", ".", "append", "(", "x", ",", "i", ")", "\n", "\n", "#print(\"{}: size of x: {}\".format(arm, len(x)))        ", "\n", "", "", "if", "arm", "in", "unlabeled_arms", ":", "\n", "            ", "add_no_fill_line", "(", "x", ",", "y", ",", "q1", ",", "q3", ",", "color", ",", "ax", "=", "subplot", ",", "marker", "=", "marker", ",", "y_scale", "=", "y_scale", ",", "\n", "label", "=", "arm", ",", "linestyle", "=", "linestyle", ",", "alpha_fill", "=", "alpha_fill", ")", "\n", "unlabeled_arms", ".", "remove", "(", "arm", ")", "\n", "", "else", ":", "\n", "            ", "add_no_fill_line", "(", "x", ",", "y", ",", "q1", ",", "q3", ",", "color", ",", "marker", "=", "marker", ",", "y_scale", "=", "y_scale", ",", "\n", "ax", "=", "subplot", ",", "linestyle", "=", "linestyle", ",", "alpha_fill", "=", "alpha_fill", ")", "\n", "", "x_pos", "=", "np", ".", "min", "(", "x", ")", "+", "50", "\n", "\n", "", "if", "title", "!=", "None", ":", "\n", "        ", "subplot", ".", "set_title", "(", "'{}'", ".", "format", "(", "title", ")", ")", "\n", "", "bbox_to_anchor", "=", "None", "\n", "loc", "=", "None", "\n", "borderaxespad", "=", "None", "\n", "\n", "if", "legend", "is", "not", "None", ":", "\n", "        ", "if", "'bbox_to_anchor'", "in", "legend", ":", "\n", "            ", "bbox_to_anchor", "=", "legend", "[", "'bbox_to_anchor'", "]", "\n", "", "if", "'loc'", "in", "legend", ":", "\n", "            ", "loc", "=", "legend", "[", "'loc'", "]", "\n", "", "if", "'borderaxespad'", "in", "legend", ":", "\n", "            ", "borderaxespad", "=", "legend", "[", "'borderaxespad'", "]", "\n", "\n", "", "if", "l_order", "is", "not", "None", ":", "\n", "            ", "handles", ",", "labels", "=", "subplot", ".", "get_legend_handles_labels", "(", ")", "\n", "plt", ".", "legend", "(", "[", "handles", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "[", "labels", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "\n", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "\n", "\n", "", "", "if", "xlim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "xlim", "(", "xlim", ")", "\n", "x_pos", "=", "xlim", "[", "0", "]", "+", "50", "\n", "\n", "", "if", "ylim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "ylim", "(", "ylim", ")", "\n", "\n", "", "for", "s", "in", "guidelines", ":", "\n", "\n", "        ", "if", "'regret'", "in", "s", ":", "\n", "            ", "pos", "=", "s", "[", "'regret'", "]", "\n", "label", "=", "\"\\n {}\"", ".", "format", "(", "pos", ")", "\n", "if", "'label'", "in", "s", ":", "\n", "                ", "label", "=", "\"\\n {}\"", ".", "format", "(", "s", "[", "'label'", "]", ")", "\n", "", "plt", ".", "text", "(", "x_pos", ",", "pos", ",", "label", ",", "size", "=", "'x-large'", ",", "color", "=", "'black'", ",", "fontproperties", "=", "its", ")", "\n", "plt", ".", "axhline", "(", "y", "=", "pos", ",", "color", "=", "'red'", ",", "linestyle", "=", "':'", ")", "\n", "\n", "", "", "plt", ".", "ylabel", "(", "\"Intermediate regret ({})\"", ".", "format", "(", "sub_y_metric", ")", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "xlabel", "(", "x_unit", ",", "fontsize", "=", "15", ")", "\n", "if", "save_name", "is", "not", "None", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "target_folder", "+", "save_name", "+", "'.png'", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.draw_success_rate_fig": [[379, 581], ["list", "range", "list", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.grid", "numpy.arange", "fig.add_subplot.set_yticks", "fig.add_subplot.grid", "matplotlib.xlabel", "matplotlib.ylabel", "sorted", "len", "sorted", "analysis.debug", "sorted", "style_format", "fig.add_subplot.plot", "range", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_xticks", "fig.add_subplot.set_title", "matplotlib.tight_layout", "matplotlib.savefig", "results.keys", "results[].keys", "results.keys", "numpy.array", "numpy.array", "successes.append", "style_format", "fig.add_subplot.plot", "style_format", "fig.add_subplot.plot", "len", "range", "best_successes.append", "viz_util.get_label", "style_format", "fig.add_subplot.plot", "len", "fig.add_subplot.get_legend_handles_labels", "matplotlib.legend", "matplotlib.legend", "analysis.get_num_iters_over_threshold", "analysis.get_exec_times_over_threshold", "float", "style_format", "numpy.asarray", "min", "viz_util.get_label", "range", "viz_util.get_label", "range", "len", "viz_util.name_map", "viz_util.get_label", "range", "subset_x.append", "viz_util.get_label", "len", "len", "sr.tolist.tolist", "analysis.debug", "fig.add_subplot.plot", "range", "viz_util.name_map", "viz_util.name_map", "viz_util.get_label", "viz_util.name_map", "int", "range", "len", "len", "fig.add_subplot.plot", "viz_util.get_label", "viz_util.get_label", "range", "viz_util.get_label", "len", "len", "viz_util.name_map", "int", "range", "int", "range", "viz_util.get_label", "viz_util.name_map", "viz_util.get_label"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_num_iters_over_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label"], ["", "", "def", "draw_success_rate_fig", "(", "results", ",", "target_goal", ",", "x_max", ",", "\n", "num_runs", "=", "None", ",", "x_unit", "=", "'Hour'", ",", "step_size", "=", "1", ",", "\n", "title", "=", "None", ",", "indi", "=", "None", ",", "div", "=", "None", ",", "ada", "=", "None", ",", "\n", "save_name", "=", "None", ",", "target_folder", "=", "'./'", ",", "\n", "indi_max", "=", "None", ",", "div_max", "=", "None", ",", "ada_max", "=", "None", ",", "\n", "indi_scale", "=", "1", ",", "div_scale", "=", "1", ",", "ada_scale", "=", "1", ",", "name_map", "=", "None", ",", "\n", "avgs", "=", "None", ",", "parallel", "=", "None", ",", "l_order", "=", "None", ",", "\n", "width", "=", "10", ",", "height", "=", "6", ",", "legend", "=", "None", ",", "style_format", "=", "None", ",", "\n", "show_marginal_best", "=", "False", ")", ":", "\n", "    ", "opt_iterations", "=", "{", "}", "\n", "opt_successes", "=", "{", "}", "\n", "opts", "=", "list", "(", "sorted", "(", "results", ".", "keys", "(", ")", ")", ")", "\n", "\n", "x", "=", "range", "(", "0", ",", "x_max", ",", "step_size", ")", "\n", "\n", "if", "name_map", "is", "None", ":", "\n", "        ", "def", "map_names", "(", "name", ")", ":", "\n", "            ", "return", "name", "\n", "", "name_map", "=", "map_names", "\n", "\n", "", "if", "num_runs", "==", "None", ":", "\n", "        ", "num_runs", "=", "len", "(", "results", "[", "opts", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "\n", "\n", "", "if", "style_format", "is", "None", ":", "\n", "        ", "style_format", "=", "get_predefined_style", "\n", "\n", "", "for", "opt", "in", "list", "(", "sorted", "(", "results", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "x_values", "=", "None", "\n", "if", "x_unit", "is", "'Iteration'", ":", "\n", "            ", "x_values", "=", "np", ".", "array", "(", "get_num_iters_over_threshold", "(", "\n", "results", "[", "opt", "]", ",", "num_runs", ",", "target_goal", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_values", "=", "np", ".", "array", "(", "get_exec_times_over_threshold", "(", "\n", "results", "[", "opt", "]", ",", "num_runs", ",", "target_goal", ",", "unit", "=", "x_unit", ")", ")", "\n", "", "debug", "(", "\"x_values: {}\"", ".", "format", "(", "x_values", "[", "0", "]", ")", ")", "\n", "opt_iterations", "[", "opt", "]", "=", "x_values", "\n", "successes", "=", "[", "]", "\n", "for", "i", "in", "x", ":", "\n", "            ", "failure", "=", "(", "x_values", "[", "x_values", ">", "i", "]", ".", "shape", "[", "0", "]", "/", "float", "(", "num_runs", ")", ")", "\n", "success", "=", "1.0", "-", "failure", "\n", "successes", ".", "append", "(", "success", ")", "\n", "\n", "", "opt_successes", "[", "opt", "]", "=", "successes", "\n", "\n", "", "rcParams", "[", "'mathtext.default'", "]", "=", "'regular'", "\n", "rcParams", "[", "'figure.figsize'", "]", "=", "width", ",", "height", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "grid", "(", "alpha", "=", "0.5", ")", "\n", "\n", "if", "parallel", "is", "not", "None", ":", "\n", "        ", "for", "g", "in", "parallel", ":", "\n", "            ", "if", "'opt'", "in", "g", ":", "\n", "                ", "opt", "=", "g", "[", "'opt'", "]", "\n", "name", "=", "opt", "\n", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "get_label", "(", "opt", ")", ")", "\n", "sr", "=", "opt_successes", "[", "opt", "]", "\n", "x_", "=", "x", "\n", "_max", "=", "x_max", "\n", "\n", "_scale", "=", "1", "\n", "if", "'scale'", "in", "g", ":", "\n", "                    ", "_scale", "=", "g", "[", "'scale'", "]", "\n", "# linestyle=':'", "\n", "name", "+=", "' [scaling]'", "\n", "\n", "", "if", "_scale", "*", "_max", ">", "x_max", ":", "\n", "                    ", "_max", "=", "int", "(", "x_max", "/", "_scale", ")", "+", "1", "\n", "\n", "", "x_", "=", "[", "x", "*", "_scale", "for", "x", "in", "range", "(", "0", ",", "_max", ",", "step_size", ")", "]", "\n", "sr", "=", "np", ".", "asarray", "(", "opt_successes", "[", "opt", "]", ")", "\n", "\n", "max_index", "=", "min", "(", "len", "(", "x_", ")", ",", "len", "(", "sr", ")", ")", "\n", "if", "x_unit", "==", "'Hour'", "and", "'max_hour'", "in", "g", ":", "\n", "                    ", "max_index", "=", "g", "[", "'max_hour'", "]", "+", "1", "\n", "\n", "", "if", "sr", ".", "ndim", "==", "1", ":", "\n", "                    ", "if", "x_max", "<", "max_index", ":", "\n", "                        ", "max_index", "=", "x_max", "\n", "", "if", "len", "(", "x_", ")", "<", "max_index", ":", "\n", "                        ", "max_index", "=", "len", "(", "x_", ")", "\n", "", "sr", "=", "sr", ".", "tolist", "(", ")", "\n", "debug", "(", "\"x: {}, y: {}, x_max: {}, max_index: {}\"", ".", "format", "(", "\n", "len", "(", "x_", ")", ",", "len", "(", "sr", ")", ",", "x_max", ",", "max_index", ")", ")", "\n", "\n", "ax", ".", "plot", "(", "x_", "[", ":", "max_index", "]", ",", "sr", "[", ":", "max_index", "]", ",", "\n", "marker", "=", "marker", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "name_map", "(", "get_label", "(", "opt", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "sr", ".", "ndim", ")", ":", "\n", "                        ", "ax", ".", "plot", "(", "x_", "[", ":", "max_index", "]", ",", "sr", "[", ":", "max_index", ",", "j", "]", ",", "\n", "marker", "=", "marker", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "name_map", "(", "get_label", "(", "opt", ")", ")", ")", "\n", "\n", "\n", "", "", "", "", "", "if", "indi", "is", "not", "None", ":", "\n", "        ", "for", "opt", "in", "indi", ":", "\n", "            ", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "get_label", "(", "opt", ")", ")", "\n", "sr", "=", "opt_successes", "[", "opt", "]", "\n", "x_", "=", "x", "\n", "if", "indi_max", "is", "not", "None", ":", "\n", "                ", "x_", "=", "range", "(", "0", ",", "indi_max", ",", "step_size", ")", "\n", "if", "indi_scale", ">", "1", ":", "\n", "                    ", "if", "indi_scale", "*", "indi_max", ">", "x_max", ":", "\n", "                        ", "indi_max", "=", "int", "(", "x_max", "/", "indi_scale", ")", "+", "1", "\n", "", "x_", "=", "[", "x", "*", "indi_scale", "for", "x", "in", "range", "(", "0", ",", "indi_max", ",", "step_size", ")", "]", "\n", "", "sr", "=", "opt_successes", "[", "opt", "]", "[", ":", "indi_max", "]", "\n", "", "ax", ".", "plot", "(", "x_", ",", "sr", ",", "\n", "marker", "=", "marker", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "name_map", "(", "get_label", "(", "opt", ")", ")", ")", "\n", "\n", "", "", "if", "ada", "is", "not", "None", ":", "\n", "        ", "for", "opt", "in", "ada", ":", "\n", "            ", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "get_label", "(", "opt", ")", ")", "\n", "sr", "=", "opt_successes", "[", "opt", "]", "\n", "x_", "=", "x", "\n", "if", "ada_max", "is", "not", "None", ":", "\n", "                ", "x_", "=", "range", "(", "0", ",", "div_max", ",", "step_size", ")", "\n", "sr", "=", "opt_successes", "[", "opt", "]", "[", ":", "div_max", "]", "\n", "\n", "", "ax", ".", "plot", "(", "x_", ",", "sr", ",", "\n", "marker", "=", "marker", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "name_map", "(", "get_label", "(", "opt", ")", ")", ")", "\n", "\n", "", "", "if", "avgs", "is", "not", "None", "and", "show_marginal_best", ":", "\n", "        ", "best_failures", "=", "[", "]", "\n", "opt", "=", "'xN-Div-I'", "\n", "for", "avg", "in", "sorted", "(", "avgs", ")", ":", "\n", "            ", "list_size", "=", "len", "(", "opt_successes", "[", "avg", "]", ")", "\n", "if", "len", "(", "best_failures", ")", "==", "0", ":", "\n", "                ", "best_failures", "=", "[", "1.0", "for", "i", "in", "range", "(", "list_size", ")", "]", "\n", "#print(\"{}:{}\".format(avg, opt_successes[avg]))", "\n", "", "for", "i", "in", "range", "(", "list_size", ")", ":", "\n", "                ", "s", "=", "opt_successes", "[", "avg", "]", "[", "i", "]", "\n", "f", "=", "1.0", "-", "s", "\n", "best_failures", "[", "i", "]", "*=", "f", "\n", "", "", "best_successes", "=", "[", "]", "\n", "for", "bf", "in", "best_failures", ":", "\n", "            ", "best_successes", ".", "append", "(", "1.0", "-", "bf", ")", "\n", "\n", "", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "get_label", "(", "opt", ")", ")", "\n", "ax", ".", "plot", "(", "x", ",", "best_successes", ",", "\n", "marker", "=", "'*'", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "name_map", "(", "get_label", "(", "opt", ")", ")", ")", "\n", "\n", "", "if", "div", "is", "not", "None", ":", "\n", "        ", "for", "opt", "in", "div", ":", "\n", "            ", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "get_label", "(", "opt", ")", ")", "\n", "sr", "=", "opt_successes", "[", "opt", "]", "\n", "x_", "=", "x", "\n", "if", "div_max", "is", "not", "None", ":", "\n", "                ", "x_", "=", "range", "(", "0", ",", "div_max", ",", "step_size", ")", "\n", "if", "div_scale", ">", "1", ":", "\n", "                    ", "if", "div_scale", "*", "div_max", ">", "x_max", ":", "\n", "                        ", "div_max", "=", "int", "(", "x_max", "/", "div_scale", ")", "+", "1", "\n", "", "x_", "=", "[", "x", "*", "div_scale", "for", "x", "in", "range", "(", "0", ",", "div_max", ",", "step_size", ")", "]", "\n", "#linestyle = ':'", "\n", "\n", "", "sr", "=", "opt_successes", "[", "opt", "]", "[", ":", "div_max", "]", "\n", "", "ax", ".", "plot", "(", "x_", ",", "sr", ",", "\n", "marker", "=", "marker", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "name_map", "(", "get_label", "(", "opt", ")", ")", ")", "\n", "\n", "", "", "if", "x_unit", "==", "\"10min\"", ":", "\n", "        ", "subset_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "            ", "if", "i", "%", "6", "==", "0", ":", "\n", "                ", "subset_x", ".", "append", "(", "x", "[", "i", "]", ")", "\n", "", "", "ax", ".", "set_xticks", "(", "subset_x", ")", "\n", "xlabels", "=", "[", "x", "*", "10", "for", "x", "in", "subset_x", "]", "\n", "ax", ".", "set_xticklabels", "(", "xlabels", ")", "\n", "x_unit", "=", "'Minute'", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "x", ")", "\n", "\n", "", "minor_ticks", "=", "np", ".", "arange", "(", "0", ",", "1.1", ",", "0.1", ")", "\n", "ax", ".", "set_yticks", "(", "minor_ticks", ",", "minor", "=", "True", ")", "\n", "ax", ".", "grid", "(", "which", "=", "'minor'", ",", "alpha", "=", "0.3", ")", "\n", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_title", "(", "title", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "\"{}\"", ".", "format", "(", "x_unit", ")", ",", "size", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "\"Success rate\"", ",", "fontsize", "=", "20", ")", "\n", "bbox_to_anchor", "=", "None", "\n", "loc", "=", "None", "\n", "borderaxespad", "=", "None", "\n", "if", "legend", "is", "not", "None", ":", "\n", "        ", "if", "'bbox_to_anchor'", "in", "legend", ":", "\n", "            ", "bbox_to_anchor", "=", "legend", "[", "'bbox_to_anchor'", "]", "\n", "", "if", "'loc'", "in", "legend", ":", "\n", "            ", "loc", "=", "legend", "[", "'loc'", "]", "\n", "", "if", "'borderaxespad'", "in", "legend", ":", "\n", "            ", "borderaxespad", "=", "legend", "[", "'borderaxespad'", "]", "\n", "", "if", "l_order", "is", "not", "None", ":", "\n", "            ", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "plt", ".", "legend", "(", "[", "handles", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "[", "labels", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "\n", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "\n", "", "", "if", "save_name", "is", "not", "None", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "target_folder", "+", "save_name", "+", "'.png'", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "", "else", ":", "\n", "        ", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.draw_trials_curve": [[583, 711], ["analysis.get_result", "analysis.get_total_times", "numpy.array", "numpy.array", "numpy.concatenate", "matplotlib.figure", "plt.figure.add_subplot", "set", "set", "list", "range", "plot_func", "matplotlib.xlabel", "matplotlib.legend", "analysis.get_best_errors", "set", "len", "copy.copy", "sorted", "len", "fig.add_subplot.set_title", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.xlim", "list", "matplotlib.xticks", "matplotlib.text", "matplotlib.axhline", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.show", "len", "viz_util.get_style", "y_errors.append", "y_errors.append", "float", "float", "plot_func", "copy.copy.remove", "plot_func", "range", "max", "viz_util.get_label"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.show", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_style", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label"], ["", "", "def", "draw_trials_curve", "(", "results", ",", "arm", ",", "run_index", ",", "\n", "x_unit", "=", "'Hour'", ",", "guidelines", "=", "[", "]", ",", "g_best_acc", "=", "None", ",", "\n", "xlim", "=", "None", ",", "ylim", "=", "None", ",", "title", "=", "None", ",", "save_name", "=", "None", ",", "max_err", "=", "None", ",", "\n", "loc", "=", "3", ",", "width", "=", "10", ",", "height", "=", "6", ",", "metric", "=", "'Test error'", ")", ":", "\n", "    ", "selected", "=", "get_result", "(", "results", ",", "arm", ",", "run_index", ")", "\n", "x_time", "=", "get_total_times", "(", "selected", ",", "x_unit", ")", "\n", "y_errors", "=", "selected", "[", "'error'", "]", "\n", "if", "max_err", "==", "None", ":", "\n", "        ", "max_err", "=", "y_errors", "[", "0", "]", "\n", "\n", "", "if", "g_best_acc", "!=", "None", ":", "\n", "        ", "g_best_err", "=", "1.0", "-", "g_best_acc", "\n", "y_errors", "=", "[", "]", "\n", "for", "y", "in", "selected", "[", "'error'", "]", ":", "\n", "            ", "if", "y", "!=", "None", ":", "\n", "                ", "y_errors", ".", "append", "(", "y", "-", "g_best_err", ")", "\n", "", "else", ":", "\n", "                ", "y_errors", ".", "append", "(", "max_err", ")", "\n", "\n", "", "", "", "line_best_errors", "=", "np", ".", "array", "(", "get_best_errors", "(", "selected", ")", ")", "\n", "if", "g_best_acc", "!=", "None", ":", "\n", "        ", "line_best_errors", "=", "line_best_errors", "-", "g_best_err", "\n", "max_err", "=", "g_best_acc", "\n", "", "preamble", "=", "np", ".", "array", "(", "[", "max_err", "]", ")", "\n", "line_best_errors", "=", "np", ".", "concatenate", "(", "(", "preamble", ",", "line_best_errors", ")", ")", "\n", "rcParams", "[", "'figure.figsize'", "]", "=", "width", ",", "height", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "plot_func", "=", "subplot", ".", "semilogy", "\n", "if", "g_best_acc", "!=", "None", ":", "\n", "        ", "plot_func", "=", "subplot", ".", "plot", "\n", "\n", "", "available_arms", "=", "set", "(", "[", "arm", "]", ")", "\n", "#marker, color, linestyle = get_style(arm, results.keys())", "\n", "if", "'select_trace'", "in", "selected", ":", "\n", "        ", "available_arms", "=", "set", "(", "selected", "[", "'select_trace'", "]", ")", "\n", "", "unlabeled_arms", "=", "set", "(", "[", "arm", "]", ")", "\n", "if", "len", "(", "available_arms", ")", ">", "0", ":", "\n", "        ", "unlabeled_arms", "=", "copy", ".", "copy", "(", "available_arms", ")", "\n", "", "available_arms", "=", "list", "(", "sorted", "(", "available_arms", ")", ")", "\n", "color", "=", "'black'", "\n", "marker", "=", "'.'", "\n", "opacity", "=", "1.0", "\n", "default_marker_size", "=", "6.0", "\n", "marker_size", "=", "default_marker_size", "*", "opacity", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "x_time", ")", ")", ":", "\n", "        ", "if", "len", "(", "available_arms", ")", ">", "0", ":", "\n", "            ", "if", "'select_trace'", "in", "selected", ":", "\n", "                ", "arm", "=", "selected", "[", "'select_trace'", "]", "[", "i", "]", "\n", "\n", "", "marker", ",", "color", ",", "_", "=", "get_style", "(", "arm", ",", "available_arms", ")", "\n", "if", "'train_epoch'", "in", "selected", ":", "\n", "                ", "opacity", "=", "float", "(", "selected", "[", "'train_epoch'", "]", "[", "i", "]", "/", "max", "(", "selected", "[", "'train_epoch'", "]", ")", ")", "\n", "marker_size", "=", "float", "(", "default_marker_size", "*", "opacity", "*", "1.2", ")", "\n", "marker", "=", "'o'", "# XXX: set same marker", "\n", "\n", "", "if", "'model_index'", "in", "selected", ":", "\n", "                ", "if", "selected", "[", "'model_index'", "]", "[", "i", "]", "<", "0", ":", "\n", "                    ", "color", "=", "'red'", "\n", "\n", "", "", "if", "\"epoch\"", "in", "selected", ":", "\n", "                ", "if", "selected", "[", "'epoch'", "]", "[", "i", "]", "<=", "3", ":", "\n", "                    ", "marker", "=", "'.'", "\n", "", "elif", "selected", "[", "'epoch'", "]", "[", "i", "]", "<", "10", ":", "\n", "                    ", "marker", "=", "'*'", "\n", "", "else", ":", "\n", "                    ", "marker", "=", "'o'", "\n", "# remove None result", "\n", "\n", "", "", "", "x", "=", "x_time", "[", "i", "]", "\n", "y", "=", "y_errors", "[", "i", "]", "\n", "if", "y", "!=", "None", ":", "\n", "            ", "if", "arm", "in", "unlabeled_arms", ":", "\n", "                ", "plot_func", "(", "x", ",", "y", ",", "\n", "color", "=", "color", ",", "linestyle", "=", "''", ",", "alpha", "=", "opacity", ",", "\n", "marker", "=", "marker", ",", "markersize", "=", "marker_size", ",", "\n", "label", "=", "get_label", "(", "arm", ")", ")", "\n", "unlabeled_arms", ".", "remove", "(", "arm", ")", "\n", "", "else", ":", "\n", "                ", "plot_func", "(", "x", ",", "y", ",", "\n", "color", "=", "color", ",", "linestyle", "=", "''", ",", "alpha", "=", "opacity", ",", "\n", "marker", "=", "marker", ",", "markersize", "=", "marker_size", ")", "\n", "\n", "# line plot for best error", "\n", "", "", "", "plot_func", "(", "[", "0", "]", "+", "x_time", ",", "line_best_errors", ",", "color", "=", "'blue'", ",", "\n", "linestyle", "=", "'--'", ",", "label", "=", "'best error'", ")", "\n", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "subplot", ".", "set_title", "(", "title", ")", "\n", "", "if", "ylim", "is", "None", ":", "\n", "        ", "plt", ".", "ylim", "(", "ymax", "=", "max_err", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "ylim", "(", "ylim", ")", "\n", "", "x_range", "=", "[", "0", ",", "0", "]", "\n", "if", "xlim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "xlim", "(", "xlim", ")", "\n", "x_range", "=", "list", "(", "xlim", ")", "\n", "x_ticks", "=", "[", "x", "for", "x", "in", "range", "(", "x_range", "[", "0", "]", ",", "x_range", "[", "-", "1", "]", "+", "1", ")", "]", "\n", "plt", ".", "xticks", "(", "x_ticks", ")", "\n", "\n", "", "for", "s", "in", "guidelines", ":", "\n", "        ", "label", "=", "\"\"", "\n", "pos", "=", "s", "[", "'error'", "]", "\n", "if", "g_best_acc", "!=", "None", "and", "\"regret\"", "in", "s", ":", "\n", "            ", "pos", "=", "s", "[", "'regret'", "]", "\n", "\n", "", "if", "\"rank\"", "in", "s", ":", "\n", "            ", "label", "=", "\"Top-{}\"", ".", "format", "(", "s", "[", "'rank'", "]", ")", "\n", "", "elif", "'difficulty'", "in", "s", ":", "\n", "            ", "label", "=", "\"Top {:.2f}%\"", ".", "format", "(", "s", "[", "'difficulty'", "]", "*", "100", ")", "\n", "\n", "", "plt", ".", "text", "(", "x_range", "[", "-", "1", "]", "+", "0.1", ",", "pos", ",", "label", ",", "size", "=", "12", ")", "\n", "plt", ".", "axhline", "(", "y", "=", "pos", ",", "color", "=", "'gray'", ",", "linestyle", "=", "':'", ")", "\n", "\n", "", "if", "g_best_acc", "!=", "None", ":", "\n", "        ", "plt", ".", "ylabel", "(", "\"Intermidiate regret\"", ",", "fontsize", "=", "15", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "ylabel", "(", "metric", ",", "fontsize", "=", "15", ")", "\n", "", "plt", ".", "xlabel", "(", "x_unit", ",", "size", "=", "15", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "loc", ",", "prop", "=", "{", "'size'", ":", "15", "}", ")", "\n", "\n", "if", "save_name", "is", "not", "None", ":", "\n", "# plt.tight_layout()", "\n", "        ", "target_folder", "=", "'../../../figs/'", "\n", "plt", ".", "savefig", "(", "target_folder", "+", "save_name", "+", "'.png'", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.draw_best_error_curve": [[713, 891], ["set", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.grid", "matplotlib.ylabel", "matplotlib.xlabel", "type", "style_format", "fig.add_subplot.set_title", "fig.add_subplot.get_legend_handles_labels", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlim", "list", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "ValueError", "range", "range", "numpy.array", "numpy.array", "numpy.array", "range", "matplotlib.text", "matplotlib.axhline", "matplotlib.text", "matplotlib.axhline", "results.keys", "analysis.get_result", "analysis.get_total_times", "best_errors.append", "fig.add_subplot.set_yscale", "analysis.get_result", "analysis.get_total_times", "range", "numpy.mean", "numpy.append", "numpy.append", "numpy.append", "viz.add_error_fill_line", "set.remove", "viz.add_error_fill_line", "range", "numpy.array", "fig.add_subplot.set_xscale", "pfunc", "set.remove", "pfunc", "fig.add_subplot.set_yscale", "fig.add_subplot.set_xscale", "numpy.array", "int", "analysis.debug", "analysis.debug", "len", "analysis.debug", "numpy.std", "analysis.get_best_errors", "y_best_errors.tolist", "analysis.get_best_errors", "max", "errors_by_interval[].append", "errors_by_interval.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.show", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_error_fill_line", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_error_fill_line", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "draw_best_error_curve", "(", "results", ",", "arms", ",", "repeats", ",", "\n", "guidelines", "=", "[", "]", ",", "summary", "=", "False", ",", "title", "=", "None", ",", "x_unit", "=", "\"Hour\"", ",", "\n", "xlim", "=", "None", ",", "ylim", "=", "(", ".001", ",", "1", ")", ",", "alpha_fill", "=", "0.1", ",", "std_div", "=", "4", ",", "\n", "width", "=", "14", ",", "height", "=", "8", ",", "x_steps", "=", "1", ",", "plot_func", "=", "'semilogy'", ",", "\n", "save_name", "=", "None", ",", "target_folder", "=", "'.'", ",", "y_scale", "=", "1", ",", "\n", "x_ticks", "=", "None", ",", "y_ticks", "=", "None", ",", "sub_y_metric", "=", "\"test error\"", ",", "\n", "legend", "=", "None", ",", "l_order", "=", "None", ",", "style_format", "=", "None", ",", "max_err", "=", "None", ")", ":", "\n", "\n", "    ", "if", "type", "(", "arms", ")", "is", "not", "list", ":", "\n", "        ", "arms", "=", "[", "arms", "]", "\n", "\n", "", "unlabeled_arms", "=", "set", "(", "arms", ")", "\n", "rcParams", "[", "'figure.figsize'", "]", "=", "width", ",", "height", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "subplot", ".", "grid", "(", "alpha", "=", "0.5", ")", "\n", "t_max", "=", "None", "\n", "\n", "for", "arm", "in", "arms", ":", "\n", "        ", "if", "not", "arm", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"results log do not have record for {}\"", ".", "format", "(", "arm", ")", ")", "\n", "", "if", "style_format", "==", "None", ":", "\n", "            ", "style_format", "=", "get_predefined_style", "\n", "\n", "", "marker", ",", "color", ",", "linestyle", "=", "style_format", "(", "arm", ")", "\n", "if", "summary", "is", "False", ":", "\n", "            ", "best_errors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "repeats", ")", ":", "\n", "                ", "selected", "=", "get_result", "(", "results", ",", "arm", ",", "i", ")", "\n", "if", "max_err", "==", "None", ":", "\n", "                    ", "max_err", "=", "selected", "[", "'error'", "]", "[", "0", "]", "\n", "", "x_time", "=", "get_total_times", "(", "selected", ",", "x_unit", ")", "\n", "y_best_errors", "=", "np", ".", "array", "(", "get_best_errors", "(", "selected", ")", ")", "*", "y_scale", "\n", "best_errors", ".", "append", "(", "{", "'x'", ":", "x_time", ",", "'y'", ":", "y_best_errors", ".", "tolist", "(", ")", "}", ")", "\n", "\n", "", "pfunc", "=", "subplot", ".", "plot", "\n", "if", "plot_func", "==", "'semilogy'", ":", "\n", "                ", "pfunc", "=", "subplot", ".", "semilogy", "\n", "", "elif", "plot_func", "==", "'loglog'", ":", "\n", "                ", "pfunc", "=", "subplot", ".", "loglog", "\n", "subplot", ".", "set_xscale", "(", "'log'", ",", "nonposx", "=", "'clip'", ")", "\n", "\n", "", "for", "best_error", "in", "best_errors", ":", "\n", "                ", "if", "arm", "in", "unlabeled_arms", ":", "\n", "                    ", "pfunc", "(", "[", "0", "]", "+", "best_error", "[", "'x'", "]", ",", "\n", "(", "[", "max_err", "]", "+", "best_error", "[", "'y'", "]", ")", ",", "\n", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "arm", ",", "marker", "=", "marker", ")", "\n", "unlabeled_arms", ".", "remove", "(", "arm", ")", "\n", "", "else", ":", "\n", "                    ", "pfunc", "(", "[", "0", "]", "+", "best_error", "[", "'x'", "]", ",", "(", "[", "max_err", "]", "+", "best_error", "[", "'y'", "]", ")", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "marker", "=", "marker", ")", "\n", "", "", "", "else", ":", "\n", "            ", "errors_by_interval", "=", "{", "}", "\n", "#subplot.set_yscale('log')", "\n", "if", "plot_func", "==", "'semilogy'", ":", "\n", "                ", "subplot", ".", "set_yscale", "(", "'log'", ")", "\n", "", "elif", "plot_func", "==", "'loglog'", ":", "\n", "                ", "subplot", ".", "set_yscale", "(", "'log'", ")", "\n", "subplot", ".", "set_xscale", "(", "'log'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "repeats", ")", ":", "\n", "                ", "selected", "=", "get_result", "(", "results", ",", "arm", ",", "i", ")", "\n", "if", "max_err", "==", "None", ":", "\n", "                    ", "max_err", "=", "selected", "[", "'error'", "]", "[", "0", "]", "\n", "", "y_best_errors", "=", "np", ".", "array", "(", "get_best_errors", "(", "selected", ")", ")", "*", "y_scale", "\n", "t_times", "=", "get_total_times", "(", "selected", ",", "x_unit", ")", "\n", "t_max", "=", "int", "(", "max", "(", "t_times", ")", ")", "+", "1", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "debug", "(", "\"t_times: {}\"", ".", "format", "(", "t_times", "[", "0", "]", ")", ")", "\n", "debug", "(", "\"y_best_errors: {}\"", ".", "format", "(", "y_best_errors", "[", "0", "]", ")", ")", "\n", "\n", "", "t", "=", "0", "\n", "cur_best_err", "=", "max_err", "*", "y_scale", "\n", "for", "j", "in", "range", "(", "len", "(", "t_times", ")", ")", ":", "\n", "\n", "                    ", "cur_time", "=", "t_times", "[", "j", "]", "\n", "\n", "while", "t", "<", "cur_time", ":", "\n", "                        ", "if", "not", "t", "in", "errors_by_interval", ".", "keys", "(", ")", ":", "\n", "                            ", "errors_by_interval", "[", "t", "]", "=", "[", "]", "\n", "", "errors_by_interval", "[", "t", "]", ".", "append", "(", "cur_best_err", ")", "\n", "t", "+=", "1", "\n", "\n", "", "if", "y_best_errors", "[", "j", "]", "<", "cur_best_err", ":", "\n", "                        ", "cur_best_err", "=", "y_best_errors", "[", "j", "]", "\n", "\n", "", "", "if", "i", "==", "0", ":", "\n", "                    ", "debug", "(", "\"errors_by_interval: {}\"", ".", "format", "(", "errors_by_interval", "[", "0", "]", ")", ")", "\n", "\n", "\n", "", "", "x", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "yerr", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "t_max", ")", ":", "\n", "                ", "errors", "=", "errors_by_interval", "[", "i", "]", "\n", "\n", "y_", "=", "np", ".", "mean", "(", "errors", ")", "\n", "y", "=", "np", ".", "append", "(", "y", ",", "y_", ")", "\n", "\n", "sd", "=", "np", ".", "std", "(", "errors", ")", "/", "std_div", "\n", "\n", "yerr", "=", "np", ".", "append", "(", "yerr", ",", "sd", ")", "\n", "x", "=", "np", ".", "append", "(", "x", ",", "i", ")", "\n", "\n", "\n", "", "if", "arm", "in", "unlabeled_arms", ":", "\n", "                ", "add_error_fill_line", "(", "x", ",", "y", ",", "yerr", ",", "color", ",", "ax", "=", "subplot", ",", "marker", "=", "marker", ",", "y_scale", "=", "y_scale", ",", "\n", "label", "=", "arm", ",", "linestyle", "=", "linestyle", ",", "alpha_fill", "=", "alpha_fill", ")", "\n", "unlabeled_arms", ".", "remove", "(", "arm", ")", "\n", "", "else", ":", "\n", "                ", "add_error_fill_line", "(", "x", ",", "y", ",", "yerr", ",", "color", ",", "marker", "=", "marker", ",", "y_scale", "=", "y_scale", ",", "\n", "ax", "=", "subplot", ",", "linestyle", "=", "linestyle", ",", "alpha_fill", "=", "alpha_fill", ")", "\n", "", "", "", "if", "title", "!=", "None", ":", "\n", "        ", "subplot", ".", "set_title", "(", "'{}'", ".", "format", "(", "title", ")", ")", "\n", "", "bbox_to_anchor", "=", "None", "\n", "loc", "=", "None", "\n", "borderaxespad", "=", "None", "\n", "\n", "if", "legend", "is", "not", "None", ":", "\n", "\n", "        ", "if", "'bbox_to_anchor'", "in", "legend", ":", "\n", "            ", "bbox_to_anchor", "=", "legend", "[", "'bbox_to_anchor'", "]", "\n", "", "if", "'loc'", "in", "legend", ":", "\n", "            ", "loc", "=", "legend", "[", "'loc'", "]", "\n", "", "if", "'borderaxespad'", "in", "legend", ":", "\n", "            ", "borderaxespad", "=", "legend", "[", "'borderaxespad'", "]", "\n", "\n", "", "", "if", "l_order", "is", "not", "None", ":", "\n", "        ", "handles", ",", "labels", "=", "subplot", ".", "get_legend_handles_labels", "(", ")", "\n", "plt", ".", "legend", "(", "[", "handles", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "[", "labels", "[", "idx", "]", "for", "idx", "in", "l_order", "]", ",", "\n", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "bbox_to_anchor", ",", "\n", "loc", "=", "loc", ",", "borderaxespad", "=", "borderaxespad", ")", "\n", "", "x_range", "=", "[", "0", ",", "0", "]", "\n", "\n", "if", "x_ticks", "==", "None", "and", "xlim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "xlim", "(", "xlim", ")", "\n", "x_range", "=", "list", "(", "xlim", ")", "\n", "x_ticks", "=", "[", "x", "for", "x", "in", "range", "(", "x_range", "[", "0", "]", ",", "x_range", "[", "-", "1", "]", "+", "1", ",", "x_steps", ")", "]", "\n", "\n", "", "if", "x_ticks", "!=", "None", ":", "\n", "        ", "plt", ".", "xticks", "(", "x_ticks", ")", "\n", "\n", "", "if", "y_ticks", "!=", "None", ":", "\n", "        ", "plt", ".", "yticks", "(", "y_ticks", ")", "\n", "\n", "", "if", "ylim", "is", "not", "None", ":", "\n", "        ", "plt", ".", "ylim", "(", "ylim", ")", "\n", "\n", "", "for", "s", "in", "guidelines", ":", "\n", "        ", "label", "=", "\"\"", "\n", "if", "\"label\"", "in", "s", ":", "\n", "            ", "label", "=", "s", "[", "'label'", "]", "\n", "", "elif", "\"rank\"", "in", "s", ":", "\n", "            ", "label", "=", "\"Top-{}\"", ".", "format", "(", "s", "[", "'rank'", "]", ")", "\n", "", "elif", "'difficulty'", "in", "s", ":", "\n", "            ", "label", "=", "\"Top {:.2f}%\"", ".", "format", "(", "s", "[", "'difficulty'", "]", "*", "100", ")", "\n", "\n", "\n", "", "if", "'perplexity'", "in", "s", ":", "\n", "            ", "plt", ".", "text", "(", "x_range", "[", "0", "]", "+", ".1", ",", "s", "[", "'perplexity'", "]", ",", "label", ")", "\n", "plt", ".", "axhline", "(", "y", "=", "s", "[", "'perplexity'", "]", ",", "color", "=", "'gray'", ",", "linestyle", "=", "':'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "text", "(", "x_range", "[", "0", "]", "+", ".1", ",", "s", "[", "'error'", "]", ",", "label", ")", "\n", "plt", ".", "axhline", "(", "y", "=", "s", "[", "'error'", "]", ",", "color", "=", "'gray'", ",", "linestyle", "=", "':'", ")", "\n", "\n", "", "", "plt", ".", "ylabel", "(", "\"Min Function Value ({})\"", ".", "format", "(", "sub_y_metric", ")", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "xlabel", "(", "x_unit", ",", "fontsize", "=", "15", ")", "\n", "if", "save_name", "is", "not", "None", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "target_folder", "+", "save_name", "+", "'.png'", ",", "format", "=", "'png'", ",", "dpi", "=", "300", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_error_fill_line": [[893, 913], ["ax.semilogy", "ax.fill_between", "ax._get_lines.color_cycle.next", "numpy.isscalar", "numpy.max", "numpy.maximum", "numpy.minimum", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next"], ["", "", "def", "add_error_fill_line", "(", "x", ",", "y", ",", "yerr", ",", "color", "=", "None", ",", "linestyle", "=", "'-'", ",", "\n", "alpha_fill", "=", "0.3", ",", "ax", "=", "None", ",", "label", "=", "None", ",", "marker", "=", "None", ",", "y_scale", "=", "1.0", ")", ":", "\n", "#ax = ax if ax is not None else plt.gca()", "\n", "    ", "if", "color", "is", "None", ":", "\n", "        ", "color", "=", "ax", ".", "_get_lines", ".", "color_cycle", ".", "next", "(", ")", "\n", "", "if", "np", ".", "isscalar", "(", "yerr", ")", "or", "len", "(", "yerr", ")", "==", "len", "(", "y", ")", ":", "\n", "        ", "ymin", "=", "y", "-", "yerr", "\n", "ymax", "=", "y", "+", "yerr", "\n", "", "elif", "len", "(", "yerr", ")", "==", "2", ":", "\n", "        ", "ymin", ",", "ymax", "=", "yerr", "\n", "\n", "", "if", "np", ".", "max", "(", "y", ")", "<", "1.0", ":", "\n", "        ", "ymin", "=", "np", ".", "maximum", "(", "y_scale", "*", "0.001", ",", "ymin", ")", "\n", "ymax", "=", "np", ".", "minimum", "(", "y_scale", "*", "1.0", ",", "ymax", ")", "\n", "\n", "#print(\"ymin: {}\".format(ymin[0]))", "\n", "#print(\"ymax: {}\".format(ymax[-1]))", "\n", "\n", "", "ax", ".", "semilogy", "(", "x", ",", "y", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "label", ",", "marker", "=", "marker", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "ymax", ",", "ymin", ",", "color", "=", "color", ",", "alpha", "=", "alpha_fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_quantile_fill_line": [[915, 923], ["ax.plot", "ax.fill_between", "ax._get_lines.color_cycle.next"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next"], ["", "def", "add_quantile_fill_line", "(", "x", ",", "y", ",", "q1", ",", "q3", ",", "color", "=", "None", ",", "linestyle", "=", "'-'", ",", "\n", "alpha_fill", "=", "0.3", ",", "ax", "=", "None", ",", "label", "=", "None", ",", "marker", "=", "None", ",", "y_scale", "=", "1.0", ")", ":", "\n", "#ax = ax if ax is not None else plt.gca()", "\n", "    ", "if", "color", "is", "None", ":", "\n", "        ", "color", "=", "ax", ".", "_get_lines", ".", "color_cycle", ".", "next", "(", ")", "\n", "\n", "", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "label", ",", "marker", "=", "marker", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "q1", ",", "q3", ",", "color", "=", "color", ",", "alpha", "=", "alpha_fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz.add_no_fill_line": [[925, 932], ["ax.plot", "ax._get_lines.color_cycle.next"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next"], ["", "def", "add_no_fill_line", "(", "x", ",", "y", ",", "q1", ",", "q3", ",", "color", "=", "None", ",", "linestyle", "=", "'-'", ",", "\n", "alpha_fill", "=", "0.3", ",", "ax", "=", "None", ",", "label", "=", "None", ",", "marker", "=", "None", ",", "y_scale", "=", "1.0", ")", ":", "\n", "#ax = ax if ax is not None else plt.gca()", "\n", "    ", "if", "color", "is", "None", ":", "\n", "        ", "color", "=", "ax", ".", "_get_lines", ".", "color_cycle", ".", "next", "(", ")", "\n", "\n", "", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "linestyle", "=", "linestyle", ",", "label", "=", "label", ",", "marker", "=", "marker", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.debug": [[10, 13], ["None"], "function", ["None"], ["def", "debug", "(", "msg", ")", ":", "\n", "#print(msg)", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_num_iters_over_threshold": [[15, 24], ["range", "len", "num_iterations.append", "analysis.get_accuracies_under_threshold", "str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_accuracies_under_threshold"], ["", "def", "get_num_iters_over_threshold", "(", "logs", ",", "num_runs", ",", "threshold", ")", ":", "\n", "    ", "num_iterations", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_runs", ")", ":", "\n", "        ", "opt", "=", "logs", "[", "str", "(", "i", ")", "]", "\n", "current_num_iterations", "=", "len", "(", "get_accuracies_under_threshold", "(", "opt", "[", "'accuracy'", "]", ",", "threshold", ")", ")", "\n", "num_iterations", ".", "append", "(", "current_num_iterations", ")", "\n", "\n", "", "return", "num_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold": [[26, 74], ["range", "len", "type", "len", "range", "float", "float", "cum_exec_time.append", "str", "accs.append", "ValueError", "analysis.get_accuracies_under_threshold", "sum", "sum", "sum", "sum", "cum_exec_time.append", "len", "cum_exec_time.append", "cum_exec_time.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_accuracies_under_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_exec_times_over_threshold", "(", "logs", ",", "num_runs", ",", "threshold", ",", "unit", "=", "'Hour'", ")", ":", "\n", "    ", "cum_exec_time", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_runs", ")", ":", "\n", "        ", "opt", "=", "logs", "[", "str", "(", "i", ")", "]", "\n", "accs", "=", "[", "]", "\n", "if", "'error'", "in", "opt", ":", "\n", "            ", "for", "err", "in", "opt", "[", "'error'", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "acc", "=", "1.0", "-", "err", "\n", "", "except", ":", "\n", "                    ", "acc", "=", "0.0", "\n", "", "accs", ".", "append", "(", "acc", ")", "\n", "", "", "elif", "'accuracy'", "in", "opt", ":", "\n", "            ", "accs", "=", "opt", "[", "'accuracy'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid log!\"", ")", "\n", "\n", "", "index_cum_time", "=", "len", "(", "get_accuracies_under_threshold", "(", "accs", ",", "threshold", ")", ")", "-", "1", "\n", "if", "type", "(", "accs", "[", "0", "]", ")", "is", "not", "list", ":", "\n", "            ", "total_secs", "=", "sum", "(", "opt", "[", "'exec_time'", "]", "[", ":", "index_cum_time", "+", "1", "]", ")", "+", "sum", "(", "opt", "[", "'opt_time'", "]", "[", ":", "index_cum_time", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "# batch result", "\n", "            ", "num_batch", "=", "len", "(", "accs", ")", "\n", "cur_best_acc", "=", "0.0", "\n", "best_index", "=", "0", "\n", "for", "b", "in", "range", "(", "num_batch", ")", ":", "\n", "                ", "single_accs", "=", "accs", "[", "b", "]", "\n", "if", "len", "(", "single_accs", ")", ">", "index_cum_time", ":", "\n", "                    ", "acc", "=", "single_accs", "[", "index_cum_time", "]", "\n", "if", "cur_best_acc", "<", "acc", ":", "\n", "                        ", "cur_best_acc", "=", "acc", "\n", "best_index", "=", "b", "\n", "", "", "", "total_secs", "=", "sum", "(", "opt", "[", "'exec_time'", "]", "[", "best_index", "]", "[", ":", "index_cum_time", "+", "1", "]", ")", "+", "sum", "(", "opt", "[", "'opt_time'", "]", "[", "best_index", "]", "[", ":", "index_cum_time", "+", "1", "]", ")", "\n", "\n", "", "total_mins", "=", "float", "(", "total_secs", ")", "/", "60.0", "\n", "total_hours", "=", "float", "(", "total_mins", ")", "/", "60.0", "\n", "if", "unit", "==", "'Second'", ":", "\n", "            ", "cum_exec_time", ".", "append", "(", "total_secs", ")", "\n", "", "elif", "unit", "==", "'Minute'", ":", "\n", "            ", "cum_exec_time", ".", "append", "(", "total_mins", ")", "\n", "", "elif", "unit", "==", "'10min'", ":", "\n", "            ", "cum_exec_time", ".", "append", "(", "total_mins", "/", "10.0", ")", "\n", "", "else", ":", "\n", "            ", "cum_exec_time", ".", "append", "(", "total_hours", ")", "\n", "\n", "", "", "return", "cum_exec_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_accuracies_under_threshold": [[76, 102], ["range", "len", "len", "range", "type", "range", "len", "len", "len", "marginal_accuracies.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_accuracies_under_threshold", "(", "accuracies", ",", "threshold", ")", ":", "\n", "\n", "    ", "marginal_accuracies", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "accuracies", ")", ")", ":", "\n", "        ", "if", "type", "(", "accuracies", "[", "k", "]", ")", "is", "not", "list", ":", "\n", "            ", "if", "accuracies", "[", "k", "]", ">=", "threshold", ":", "\n", "                ", "return", "accuracies", "[", "0", ":", "k", "+", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "accs", "=", "accuracies", "[", "k", "]", "# each machine's accuracy result", "\n", "#print(\"{}:{}\".format(k, accs))            ", "\n", "for", "i", "in", "range", "(", "len", "(", "accs", ")", ")", ":", "\n", "                ", "acc", "=", "accs", "[", "i", "]", "\n", "if", "len", "(", "marginal_accuracies", ")", "<=", "i", ":", "\n", "                    ", "marginal_accuracies", ".", "append", "(", "acc", ")", "\n", "", "else", ":", "\n", "                    ", "if", "marginal_accuracies", "[", "i", "]", "<", "acc", ":", "\n", "                        ", "marginal_accuracies", "[", "i", "]", "=", "acc", "\n", "\n", "", "", "", "", "", "if", "len", "(", "marginal_accuracies", ")", "==", "0", ":", "\n", "        ", "return", "accuracies", "\n", "", "else", ":", "\n", "        ", "for", "k", "in", "range", "(", "len", "(", "marginal_accuracies", ")", ")", ":", "\n", "            ", "if", "marginal_accuracies", "[", "k", "]", ">=", "threshold", ":", "\n", "                ", "return", "marginal_accuracies", "[", "0", ":", "k", "+", "1", "]", "\n", "\n", "", "", "return", "marginal_accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_percentile": [[104, 121], ["numpy.sort", "numpy.sort", "mean_list.append", "std_list.append", "analysis.get_num_iters_over_threshold", "analysis.get_exec_times_over_threshold", "numpy.mean", "numpy.std", "int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_num_iters_over_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold"], ["", "", "def", "get_percentile", "(", "logs", ",", "threshold", ",", "num_iters", ",", "percentiles", ",", "criteria", "=", "'Hours'", ")", ":", "\n", "\n", "    ", "data_sorted", "=", "None", "\n", "mean_list", "=", "[", "]", "\n", "std_list", "=", "[", "]", "\n", "\n", "if", "criteria", "==", "'Iteration'", ":", "\n", "        ", "data_sorted", "=", "np", ".", "sort", "(", "get_num_iters_over_threshold", "(", "logs", ",", "num_iters", ",", "threshold", ")", ")", "\n", "", "else", ":", "\n", "        ", "data_sorted", "=", "np", ".", "sort", "(", "get_exec_times_over_threshold", "(", "logs", ",", "num_iters", ",", "threshold", ",", "unit", "=", "criteria", ")", ")", "\n", "\n", "", "for", "percentile", "in", "percentiles", ":", "\n", "        ", "data_percentile", "=", "data_sorted", "[", "int", "(", "np", ".", "ceil", "(", "num_iters", "*", "percentile", ")", "-", "1", ")", ":", "]", "\n", "mean_list", ".", "append", "(", "np", ".", "mean", "(", "data_percentile", ")", ")", "\n", "std_list", ".", "append", "(", "np", ".", "std", "(", "data_percentile", ")", ")", "\n", "\n", "", "return", "mean_list", ",", "std_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result": [[123, 130], ["ValueError", "logs.keys", "str", "log.keys", "str"], "function", ["None"], ["", "def", "get_result", "(", "logs", ",", "arm", ",", "run_index", ")", ":", "\n", "    ", "if", "arm", "in", "logs", ".", "keys", "(", ")", ":", "\n", "        ", "log", "=", "logs", "[", "arm", "]", "\n", "if", "str", "(", "run_index", ")", "in", "log", ".", "keys", "(", ")", ":", "\n", "            ", "result", "=", "log", "[", "str", "(", "run_index", ")", "]", "\n", "return", "result", "\n", "", "", "raise", "ValueError", "(", "'invalid key or run_index: {}, {}'", ".", "format", "(", "arm", ",", "run_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times": [[132, 153], ["range", "len", "len", "ValueError", "len", "sum", "sum", "cum_total_time.append", "len", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_total_times", "(", "selected_result", ",", "unit", "=", "'Minute'", ")", ":", "\n", "    ", "cum_total_time", "=", "[", "]", "\n", "if", "len", "(", "selected_result", "[", "'exec_time'", "]", ")", "!=", "len", "(", "selected_result", "[", "'opt_time'", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'time record size mismatch: {}, {}'", ".", "format", "(", "\n", "len", "(", "selected_result", "[", "'exec_time'", "]", ")", ",", "\n", "len", "(", "selected_result", "[", "'opt_time'", "]", ")", ")", ")", "\n", "", "for", "t", "in", "range", "(", "len", "(", "selected_result", "[", "'exec_time'", "]", ")", ")", ":", "\n", "        ", "cet", "=", "sum", "(", "selected_result", "[", "'exec_time'", "]", "[", ":", "t", "+", "1", "]", ")", "\n", "cot", "=", "sum", "(", "selected_result", "[", "'opt_time'", "]", "[", ":", "t", "+", "1", "]", ")", "\n", "total_time", "=", "cet", "+", "cot", "\n", "if", "unit", "==", "'Minute'", ":", "\n", "            ", "total_time", "=", "total_time", "/", "60.0", "\n", "", "elif", "unit", "==", "'10min'", ":", "\n", "            ", "total_time", "=", "total_time", "/", "6.0", "\n", "", "elif", "unit", "==", "'Hour'", ":", "\n", "            ", "total_time", "=", "total_time", "/", "3600.0", "\n", "", "elif", "unit", "!=", "'Second'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid unit: {}\"", ".", "format", "(", "unit", ")", ")", "\n", "", "cum_total_time", ".", "append", "(", "total_time", ")", "\n", "\n", "", "return", "cum_total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors": [[155, 172], ["best_errors.append", "best_errors.append", "best_errors.append", "best_errors.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_best_errors", "(", "selected_result", ",", "max_err", "=", "None", ")", ":", "\n", "    ", "cur_best_error", "=", "max_err", "\n", "best_errors", "=", "[", "]", "\n", "\n", "for", "err", "in", "selected_result", "[", "'error'", "]", ":", "\n", "        ", "if", "cur_best_error", "==", "None", ":", "\n", "            ", "cur_best_error", "=", "err", "\n", "", "if", "err", "==", "None", "and", "cur_best_error", "!=", "None", ":", "\n", "            ", "best_errors", ".", "append", "(", "cur_best_error", ")", "# XXX:None error handling", "\n", "", "elif", "err", "==", "None", "and", "cur_best_error", "==", "None", ":", "\n", "            ", "best_errors", ".", "append", "(", "1.0", ")", "# FIXME:set max error ", "\n", "", "elif", "cur_best_error", ">", "err", ":", "\n", "            ", "best_errors", ".", "append", "(", "err", ")", "\n", "cur_best_error", "=", "err", "\n", "", "else", ":", "\n", "            ", "best_errors", ".", "append", "(", "cur_best_error", ")", "\n", "", "", "return", "best_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.create_no_share_result": [[174, 218], ["range", "set", "open", "json_file.write", "arm.replace.replace", "json.dumps", "str", "arm.replace.replace", "[].append", "[].append", "[].append", "[].append", "[].append", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "create_no_share_result", "(", "results", ",", "mix_type", ",", "num_iters", ",", "max_hours", ")", ":", "\n", "    ", "synth_result", "=", "{", "}", "\n", "for", "iteration", "in", "range", "(", "num_iters", ")", ":", "\n", "        ", "synth_result", "[", "str", "(", "iteration", ")", "]", "=", "{", "\"accuracy\"", ":", "[", "]", ",", "'error'", ":", "[", "]", ",", "\n", "'exec_time'", ":", "[", "]", ",", "\"opt_time\"", ":", "[", "]", ",", "\n", "'select_trace'", ":", "[", "]", "}", "\n", "selected_arms", "=", "results", "[", "mix_type", "]", "[", "str", "(", "iteration", ")", "]", "[", "'select_trace'", "]", "\n", "\n", "cum_exec_time", "=", "0", "\n", "cum_opt_time", "=", "0", "\n", "total_op_time", "=", "0", "\n", "\n", "arm_indexes", "=", "{", "}", "\n", "for", "arm", "in", "set", "(", "selected_arms", ")", ":", "\n", "            ", "arm", "=", "arm", ".", "replace", "(", "'+'", ",", "'_'", ")", "\n", "arm_indexes", "[", "arm", "]", "=", "0", "\n", "\n", "", "while", "total_op_time", "<", "max_hours", "*", "60", "*", "60", ":", "\n", "            ", "for", "arm", "in", "selected_arms", ":", "\n", "                ", "key", "=", "arm", ".", "replace", "(", "'+'", ",", "'_'", ")", "\n", "\n", "cur_index", "=", "arm_indexes", "[", "key", "]", "\n", "acc", "=", "results", "[", "key", "]", "[", "str", "(", "iteration", ")", "]", "[", "'accuracy'", "]", "[", "cur_index", "]", "\n", "synth_result", "[", "str", "(", "iteration", ")", "]", "[", "'accuracy'", "]", ".", "append", "(", "acc", ")", "\n", "synth_result", "[", "str", "(", "iteration", ")", "]", "[", "'error'", "]", ".", "append", "(", "1.0", "-", "acc", ")", "\n", "\n", "opt_time", "=", "results", "[", "key", "]", "[", "str", "(", "iteration", ")", "]", "[", "'opt_time'", "]", "[", "cur_index", "]", "\n", "synth_result", "[", "str", "(", "iteration", ")", "]", "[", "'opt_time'", "]", ".", "append", "(", "opt_time", ")", "\n", "cum_opt_time", "+=", "opt_time", "\n", "\n", "exec_time", "=", "results", "[", "key", "]", "[", "str", "(", "iteration", ")", "]", "[", "'exec_time'", "]", "[", "cur_index", "]", "\n", "synth_result", "[", "str", "(", "iteration", ")", "]", "[", "'exec_time'", "]", ".", "append", "(", "exec_time", ")", "\n", "cum_exec_time", "+=", "exec_time", "\n", "\n", "arm_indexes", "[", "key", "]", "=", "cur_index", "+", "1", "\n", "synth_result", "[", "str", "(", "iteration", ")", "]", "[", "'select_trace'", "]", ".", "append", "(", "arm", ")", "\n", "total_op_time", "=", "cum_exec_time", "+", "cum_opt_time", "\n", "if", "total_op_time", ">", "max_hours", "*", "60", "*", "60", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "", "file_path", "=", "\"{}_NO_SHARE\"", ".", "format", "(", "mix_type", ")", "\n", "\n", "with", "open", "(", "file_path", "+", "'.json'", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "synth_result", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_acc_stats": [[220, 269], ["range", "numpy.mean", "numpy.std", "numpy.sort", "int", "int", "analysis.get_result", "analysis.get_total_times", "analysis.get_best_errors", "range", "numpy.ceil", "numpy.ceil", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "len", "traceback.print_exc", "best_acc_list.append", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_total_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_best_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_best_acc_stats", "(", "results", ",", "arms", ",", "num_iters", ",", "opt_hour", ",", "\n", "ratios", "=", "[", "0.3", ",", "0.4", ",", "0.3", "]", ")", ":", "\n", "    ", "stats", "=", "{", "}", "\n", "stat_key", "=", "'opt_{}hour'", ".", "format", "(", "opt_hour", ")", "\n", "stats", "[", "stat_key", "]", "=", "{", "}", "\n", "for", "selected_arm", "in", "arms", ":", "\n", "        ", "stat", "=", "{", "'total'", ":", "{", "}", "}", "\n", "best_acc_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_iters", ")", ":", "\n", "            ", "r", "=", "get_result", "(", "results", ",", "selected_arm", ",", "i", ")", "\n", "total_hours", "=", "get_total_times", "(", "r", ",", "'hour'", ")", "\n", "best_errs", "=", "get_best_errors", "(", "r", ")", "\n", "\n", "for", "h", "in", "range", "(", "len", "(", "total_hours", ")", ")", ":", "\n", "                ", "if", "total_hours", "[", "h", "]", ">=", "opt_hour", "or", "h", "==", "len", "(", "total_hours", ")", "-", "1", ":", "\n", "                    ", "best_acc", "=", "1.0", "-", "best_errs", "[", "h", "]", "\n", "best_acc_list", ".", "append", "(", "best_acc", ")", "\n", "break", "\n", "\n", "", "", "", "stat", "[", "'total'", "]", "[", "'best_acc'", "]", "=", "best_acc_list", "\n", "\n", "stat", "[", "'total'", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "best_acc_list", ")", "\n", "stat", "[", "'total'", "]", "[", "'std'", "]", "=", "np", ".", "std", "(", "best_acc_list", ")", "\n", "sorted_best_accs", "=", "np", ".", "sort", "(", "best_acc_list", ")", "\n", "\n", "bi", "=", "int", "(", "np", ".", "ceil", "(", "num_iters", "*", "ratios", "[", "0", "]", ")", ")", "\n", "mi", "=", "int", "(", "np", ".", "ceil", "(", "num_iters", "*", "(", "ratios", "[", "0", "]", "+", "ratios", "[", "1", "]", ")", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "stat", "[", "'bottom'", "]", "=", "{", "}", "\n", "\n", "stat", "[", "'bottom'", "]", "[", "'best_acc'", "]", "=", "sorted_best_accs", "[", "0", ":", "bi", "]", "\n", "stat", "[", "'bottom'", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "stat", "[", "'bottom'", "]", "[", "'best_acc'", "]", ")", "\n", "stat", "[", "'bottom'", "]", "[", "'std'", "]", "=", "np", ".", "std", "(", "stat", "[", "'bottom'", "]", "[", "'best_acc'", "]", ")", "\n", "\n", "stat", "[", "'middle'", "]", "=", "{", "}", "\n", "stat", "[", "'middle'", "]", "[", "'best_acc'", "]", "=", "sorted_best_accs", "[", "bi", ":", "mi", "]", "\n", "\n", "stat", "[", "'middle'", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "stat", "[", "'middle'", "]", "[", "'best_acc'", "]", ")", "\n", "stat", "[", "'middle'", "]", "[", "'std'", "]", "=", "np", ".", "std", "(", "stat", "[", "'middle'", "]", "[", "'best_acc'", "]", ")", "\n", "stat", "[", "'top'", "]", "=", "{", "}", "\n", "stat", "[", "'top'", "]", "[", "'best_acc'", "]", "=", "sorted_best_accs", "[", "mi", ":", "]", "\n", "stat", "[", "'top'", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "stat", "[", "'top'", "]", "[", "'best_acc'", "]", ")", "\n", "stat", "[", "'top'", "]", "[", "'std'", "]", "=", "np", ".", "std", "(", "stat", "[", "'top'", "]", "[", "'best_acc'", "]", ")", "\n", "", "except", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "", "stats", "[", "stat_key", "]", "[", "selected_arm", "]", "=", "stat", "\n", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.write_stats_csv": [[271, 289], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "stats.keys", "csv.DictWriter.writerow"], "function", ["None"], ["", "def", "write_stats_csv", "(", "title", ",", "stats_list", ")", ":", "\n", "    ", "stat_csv", "=", "\"stats_{}.csv\"", ".", "format", "(", "title", ")", "\n", "with", "open", "(", "stat_csv", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "fieldnames", "=", "[", "'dataset'", ",", "'opt_time'", ",", "'group'", ",", "'GP_EI'", ",", "'GP_PI'", ",", "'GP_UCB'", ",", "'RF_EI'", ",", "'RF_PI'", ",", "'RF_UCB'", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "\n", "writer", ".", "writeheader", "(", ")", "\n", "hour", "=", "1", "\n", "for", "stats", "in", "stats_list", ":", "\n", "            ", "for", "g", "in", "[", "'top'", ",", "'middle'", ",", "'bottom'", ",", "'total'", "]", ":", "\n", "                ", "d", "=", "{", "'dataset'", ":", "title", "}", "\n", "d", "[", "'opt_time'", "]", "=", "hour", "\n", "d", "[", "'group'", "]", "=", "g", "\n", "for", "key", "in", "stats", ".", "keys", "(", ")", ":", "\n", "                    ", "s", "=", "stats", "[", "key", "]", "\n", "d", "[", "key", "]", "=", "'{:.4f}({:.4f})'", ".", "format", "(", "s", "[", "g", "]", "[", "'mean'", "]", ",", "s", "[", "g", "]", "[", "'std'", "]", ")", "\n", "", "writer", ".", "writerow", "(", "d", ")", "\n", "", "hour", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_opt_successes": [[291, 329], ["sorted", "list", "range", "range", "results.keys", "numpy.array", "numpy.array", "cum_successes.append", "len", "successes.append", "analysis.get_num_iters_over_threshold", "analysis.get_exec_times_over_threshold"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_num_iters_over_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold"], ["", "", "", "def", "get_opt_successes", "(", "results", ",", "target_goal", ",", "\n", "opts", "=", "None", ",", "num_runs", "=", "50", ",", "criteria", "=", "'hours'", ",", "min_hour", "=", "1", ",", "max_hour", "=", "25", ")", ":", "\n", "    ", "opt_successes", "=", "{", "}", "\n", "opt_iterations", "=", "{", "}", "\n", "\n", "if", "opts", "is", "None", ":", "\n", "        ", "opts", "=", "list", "(", "results", ".", "keys", "(", ")", ")", "\n", "\n", "", "for", "opt", "in", "sorted", "(", "opts", ")", ":", "\n", "        ", "x_values", "=", "None", "\n", "if", "criteria", "is", "'iterations'", ":", "\n", "            ", "x_values", "=", "np", ".", "array", "(", "get_num_iters_over_threshold", "(", "\n", "results", "[", "opt", "]", ",", "num_runs", ",", "target_goal", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_values", "=", "np", ".", "array", "(", "get_exec_times_over_threshold", "(", "\n", "results", "[", "opt", "]", ",", "num_runs", ",", "target_goal", ",", "unit", "=", "criteria", ")", ")", "\n", "", "opt_iterations", "[", "opt", "]", "=", "x_values", "\n", "\n", "cum_successes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "min_hour", ",", "max_hour", ",", "1", ")", ":", "\n", "            ", "cum_success", "=", "num_runs", "-", "(", "x_values", "[", "x_values", ">", "i", "]", ".", "shape", "[", "0", "]", ")", "\n", "cum_successes", ".", "append", "(", "cum_success", ")", "\n", "\n", "\n", "", "successes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cum_successes", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "success", "=", "cum_successes", "[", "i", "]", "-", "cum_successes", "[", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "success", "=", "cum_successes", "[", "i", "]", "-", "0", "\n", "", "successes", ".", "append", "(", "success", ")", "\n", "\n", "", "opt_successes", "[", "opt", "]", "=", "{", "\n", "'successes'", ":", "successes", ",", "\n", "'cum_successes'", ":", "cum_successes", "\n", "}", "\n", "\n", "", "return", "opt_successes", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_rank": [[331, 336], ["int", "int", "scipy.stats.rankdata", "scipy.stats.rankdata"], "function", ["None"], ["", "def", "calc_rank", "(", "type", ",", "num_total", ",", "arr", ",", "index", ")", ":", "\n", "    ", "if", "type", "==", "'var'", ":", "\n", "        ", "return", "num_total", "-", "int", "(", "rankdata", "(", "arr", ")", "[", "index", "]", ")", "+", "1", "\n", "", "elif", "type", "==", "'mean'", ":", "\n", "        ", "return", "int", "(", "rankdata", "(", "arr", ")", "[", "index", "]", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.analyze_mean_var_ranks": [[338, 428], ["est_opt.keys", "range", "analysis.debug", "rank_traces[].append", "len", "iter[].append", "int", "opt.find", "sum", "sum", "numpy.argmax", "analysis.debug", "int", "analysis.debug", "len", "analysis.calc_rank", "numpy.amax", "numpy.amin", "analysis.debug", "analysis.calc_rank", "numpy.amax", "numpy.amin", "analysis.debug", "numpy.amax", "numpy.amin", "classifier", "numpy.amax", "numpy.amin", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_rank", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_rank", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "analyze_mean_var_ranks", "(", "opt", ",", "estimates", ",", "results", ",", "start_index", "=", "0", ",", "classifier", "=", "None", ")", ":", "\n", "    ", "est_opt", "=", "estimates", "[", "opt", "]", "\n", "result", "=", "results", "[", "opt", "]", "\n", "\n", "rank_traces", "=", "{", "'opt'", ":", "opt", ",", "'iterations'", ":", "[", "]", "}", "\n", "\n", "for", "it", "in", "est_opt", ".", "keys", "(", ")", ":", "\n", "        ", "num_exploits", "=", "0", "\n", "num_explores", "=", "0", "\n", "\n", "trials", "=", "est_opt", "[", "it", "]", "\n", "iter", "=", "{", "'i'", ":", "int", "(", "it", ")", "+", "start_index", ",", "'trials'", ":", "[", "]", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "trials", ")", ")", ":", "\n", "            ", "trial", "=", "{", "}", "\n", "trial", "[", "'step'", "]", "=", "i", "+", "1", "\n", "\n", "est", "=", "trials", "[", "i", "]", "[", "'estimated_values'", "]", "\n", "arm", "=", "opt", "\n", "if", "opt", ".", "find", "(", "'DIV'", ")", ">=", "0", ":", "\n", "                ", "arm", "=", "result", "[", "it", "]", "[", "'select_trace'", "]", "[", "i", "]", "\n", "", "trial", "[", "'arm'", "]", "=", "arm", "\n", "trial", "[", "'cur_acc'", "]", "=", "result", "[", "it", "]", "[", "'accuracy'", "]", "[", "i", "]", "\n", "trial", "[", "'cum_op_time'", "]", "=", "sum", "(", "result", "[", "it", "]", "[", "'exec_time'", "]", "[", ":", "i", "+", "1", "]", ")", "+", "sum", "(", "result", "[", "it", "]", "[", "'opt_time'", "]", "[", ":", "i", "+", "1", "]", ")", "\n", "if", "est", "is", "None", ":", "\n", "                ", "num_explores", "+=", "1", "\n", "", "else", ":", "\n", "                ", "best_cand", "=", "np", ".", "argmax", "(", "est", "[", "'acq_funcs'", "]", ")", "\n", "\n", "debug", "(", "\"best_cand_index: {}\"", ".", "format", "(", "best_cand", ")", ")", "\n", "next_index", "=", "int", "(", "est", "[", "'candidates'", "]", "[", "best_cand", "]", ")", "\n", "debug", "(", "'next sobol index: {}'", ".", "format", "(", "next_index", ")", ")", "\n", "total_cand", "=", "len", "(", "est", "[", "'candidates'", "]", ")", "\n", "m", "=", "est", "[", "'means'", "]", "[", "best_cand", "]", "\n", "rank_m", "=", "calc_rank", "(", "'mean'", ",", "total_cand", ",", "est", "[", "'means'", "]", ",", "best_cand", ")", "\n", "max_m", "=", "np", ".", "amax", "(", "est", "[", "'means'", "]", ")", "\n", "min_m", "=", "np", ".", "amin", "(", "est", "[", "'means'", "]", ")", "\n", "\n", "debug", "(", "'selected mean: {}, rank: {}, max: {}, min: {}'", ".", "format", "(", "m", ",", "\n", "rank_m", ",", "np", ".", "amax", "(", "est", "[", "'means'", "]", ")", ",", "np", ".", "amin", "(", "est", "[", "'means'", "]", ")", ")", ")", "\n", "\n", "trial", "[", "'mean'", "]", "=", "{", "'estimate'", ":", "m", ",", "'rank'", ":", "rank_m", ",", "\n", "'max'", ":", "max_m", ",", "'min'", ":", "min_m", "}", "\n", "\n", "v", "=", "est", "[", "'vars'", "]", "[", "best_cand", "]", "\n", "rank_v", "=", "calc_rank", "(", "'var'", ",", "total_cand", ",", "est", "[", "'vars'", "]", ",", "best_cand", ")", "\n", "max_v", "=", "np", ".", "amax", "(", "est", "[", "'vars'", "]", ")", "\n", "min_v", "=", "np", ".", "amin", "(", "est", "[", "'vars'", "]", ")", "\n", "trial", "[", "'var'", "]", "=", "{", "'estimate'", ":", "v", ",", "'rank'", ":", "rank_v", ",", "\n", "'max'", ":", "np", ".", "amax", "(", "est", "[", "'vars'", "]", ")", ",", "'min'", ":", "np", ".", "amin", "(", "est", "[", "'vars'", "]", ")", "}", "\n", "\n", "debug", "(", "'selected var: {}, rank: {}, max: {}, min: {}'", ".", "format", "(", "v", ",", "rank_v", ",", "\n", "max_v", ",", "min_v", ")", ")", "\n", "\n", "if", "classifier", "is", "None", ":", "\n", "# if mean rank is higher than variance rank,", "\n", "# count it as exploitation", "\n", "                    ", "if", "rank_m", "<", "rank_v", ":", "\n", "                        ", "trial", "[", "'class'", "]", "=", "1", "\n", "trial", "[", "'comment'", "]", "=", "'exploit'", "\n", "num_exploits", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "trial", "[", "'class'", "]", "=", "0", "\n", "trial", "[", "'comment'", "]", "=", "'explore'", "\n", "num_explores", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "c", "=", "classifier", "(", "m", ",", "rank_m", ",", "max_m", ",", "min_m", ",", "v", ",", "rank_v", ",", "max_v", ",", "min_v", ")", "\n", "trial", "[", "'comment'", "]", "=", "c", "\n", "if", "c", "==", "'explore'", ":", "\n", "                        ", "trial", "[", "'class'", "]", "=", "0", "\n", "num_explores", "+=", "1", "\n", "", "elif", "c", "==", "'exploit'", ":", "\n", "                        ", "trial", "[", "'class'", "]", "=", "1", "\n", "num_exploits", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'invalid class: {}'", ".", "format", "(", "c", ")", ")", "\n", "\n", "", "", "", "iter", "[", "'trials'", "]", ".", "append", "(", "trial", ")", "\n", "\n", "", "iter", "[", "'exploits'", "]", "=", "num_exploits", "\n", "iter", "[", "'explores'", "]", "=", "num_explores", "\n", "\n", "\n", "total_trials", "=", "num_exploits", "+", "num_explores", "\n", "debug", "(", "'iteration {} - explorations: {} ({:.2}%), exploitations: {} ({:.2}%)'", ".", "format", "(", "it", ",", "num_explores", ",", "\n", "num_explores", "*", "100.0", "/", "total_trials", ",", "num_exploits", ",", "num_exploits", "*", "100.0", "/", "total_trials", ")", ")", "\n", "\n", "rank_traces", "[", "'iterations'", "]", ".", "append", "(", "iter", ")", "\n", "\n", "", "return", "rank_traces", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_catastrophic_failures": [[430, 456], ["range", "list", "list", "sorted", "sorted", "results.keys", "results.keys", "numpy.array", "numpy.array", "failures.append", "analysis.get_num_iters_over_threshold", "analysis.get_exec_times_over_threshold", "float"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_num_iters_over_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold"], ["", "def", "calc_catastrophic_failures", "(", "results", ",", "target_goal", ",", "num_trials", ",", "op_hours", ",", "\n", "step", "=", "1", ",", "criteria", "=", "'time'", ")", ":", "\n", "    ", "opt_iterations", "=", "{", "}", "\n", "opt_failures", "=", "{", "}", "\n", "\n", "x_max", "=", "op_hours", "+", "1", "\n", "\n", "x", "=", "range", "(", "0", ",", "x_max", ",", "step", ")", "\n", "opts", "=", "list", "(", "sorted", "(", "results", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "opt", "in", "list", "(", "sorted", "(", "results", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "x_values", "=", "None", "\n", "if", "criteria", "is", "'iteration'", ":", "\n", "            ", "x_values", "=", "np", ".", "array", "(", "get_num_iters_over_threshold", "(", "\n", "results", "[", "opt", "]", ",", "num_trials", ",", "target_goal", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_values", "=", "np", ".", "array", "(", "get_exec_times_over_threshold", "(", "\n", "results", "[", "opt", "]", ",", "num_trials", ",", "target_goal", ",", "unit", "=", "criteria", ")", ")", "\n", "", "opt_iterations", "[", "opt", "]", "=", "x_values", "\n", "\n", "failures", "=", "[", "]", "\n", "for", "i", "in", "x", ":", "\n", "            ", "failure", "=", "(", "x_values", "[", "x_values", ">", "i", "]", ".", "shape", "[", "0", "]", "/", "float", "(", "num_trials", ")", ")", "\n", "failures", ".", "append", "(", "failure", ")", "\n", "", "opt_failures", "[", "opt", "]", "=", "failures", "\n", "", "return", "opt_failures", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_time_to_achieve": [[458, 471], ["list", "sorted", "analysis.get_exec_times_over_threshold", "numpy.mean", "numpy.std", "results.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold"], ["", "def", "calc_time_to_achieve", "(", "results", ",", "target_goal", ",", "num_trials", ")", ":", "\n", "    ", "criteria", "=", "'trials'", "\n", "\n", "op_times", "=", "{", "}", "\n", "\n", "for", "o", "in", "list", "(", "sorted", "(", "results", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "op_times", "[", "o", "]", "=", "{", "}", "\n", "value", "=", "get_exec_times_over_threshold", "(", "results", "[", "o", "]", ",", "num_trials", ",", "target_goal", ")", "\n", "op_times", "[", "o", "]", "[", "'op_times'", "]", "=", "value", "\n", "op_times", "[", "o", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "op_times", "[", "o", "]", "[", "'sd'", "]", "=", "np", ".", "std", "(", "value", ")", "\n", "\n", "", "return", "op_times", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.write_table1_stats": [[473, 496], ["analysis.calc_catastrophic_failures", "calc_catastrophic_failures.keys", "analysis.calc_time_to_achieve", "calc_time_to_achieve.keys", "print", "print", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "analysis.debug", "csv.DictWriter.writerow"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_catastrophic_failures", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.calc_time_to_achieve", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "write_table1_stats", "(", "results", ",", "target_goal", ",", "num_trials", ",", "\n", "optimizers", ",", "stat_csv", ",", "title", ")", ":", "\n", "    ", "op_hours", "=", "24", "\n", "checking_hours", "=", "[", "3", ",", "6", ",", "9", ",", "12", ",", "24", "]", "\n", "fail_summary", "=", "calc_catastrophic_failures", "(", "results", ",", "target_goal", ",", "num_trials", ",", "op_hours", ")", "\n", "for", "key", "in", "fail_summary", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "\"{} failure rates\"", ".", "format", "(", "key", ")", ")", "\n", "for", "h", "in", "checking_hours", ":", "\n", "            ", "debug", "(", "'after {} hours: {:.0f}%'", ".", "format", "(", "h", ",", "fail_summary", "[", "key", "]", "[", "h", "]", "*", "100", ")", ")", "\n", "", "", "times", "=", "calc_time_to_achieve", "(", "results", ",", "target_goal", ",", "num_trials", ")", "\n", "for", "k", "in", "times", ".", "keys", "(", ")", ":", "\n", "        ", "r", "=", "times", "[", "k", "]", "\n", "print", "(", "\"{}: mean {:.2f}, stdev: {:.2f}\"", ".", "format", "(", "k", ",", "r", "[", "'mean'", "]", ",", "r", "[", "'sd'", "]", ")", ")", "\n", "", "with", "open", "(", "stat_csv", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "        ", "fieldnames", "=", "[", "'dataset'", ",", "'algorithm'", ",", "'FR3'", ",", "'FR6'", ",", "'FR9'", ",", "'FR12'", ",", "'FR24'", ",", "'TTA0.05%'", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "opt", "in", "optimizers", ":", "\n", "            ", "d", "=", "{", "'dataset'", ":", "title", ",", "'optimizer'", ":", "opt", "}", "\n", "for", "h", "in", "checking_hours", ":", "\n", "                ", "d", "[", "'FR{}'", ".", "format", "(", "h", ")", "]", "=", "\"{:.0f}%\"", ".", "format", "(", "fail_summary", "[", "opt", "]", "[", "h", "]", "*", "100", ")", "\n", "", "d", "[", "'TTA0.05%'", "]", "=", "\"{:.2f} ({:.2f})\"", ".", "format", "(", "times", "[", "opt", "]", "[", "'mean'", "]", ",", "times", "[", "opt", "]", "[", "'sd'", "]", ")", "\n", "writer", ".", "writerow", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.compare_batch_performance": [[498, 509], ["analysis.get_exec_times_over_threshold", "analysis.get_exec_times_over_threshold", "get_exec_times_over_threshold.sort", "get_exec_times_over_threshold.sort", "int"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.get_exec_times_over_threshold"], ["", "", "", "def", "compare_batch_performance", "(", "results", ",", "base", ",", "compare", ",", "target_acc", ",", "fp", ",", "\n", "num_trials", "=", "50", ",", "unit", "=", "'10 mins'", ")", ":", "\n", "    ", "baseline", "=", "get_exec_times_over_threshold", "(", "results", "[", "base", "]", ",", "num_trials", ",", "target_acc", ",", "unit", "=", "unit", ")", "\n", "compare", "=", "get_exec_times_over_threshold", "(", "results", "[", "compare", "]", ",", "num_trials", ",", "target_acc", ",", "unit", "=", "unit", ")", "\n", "baseline", ".", "sort", "(", ")", "\n", "compare", ".", "sort", "(", ")", "\n", "index", "=", "int", "(", "num_trials", "*", "(", "1.0", "-", "fp", ")", "-", "1", ")", "\n", "c1", "=", "baseline", "[", "index", "]", "\n", "c2", "=", "compare", "[", "index", "]", "\n", "coeff", "=", "c1", "/", "c2", "\n", "return", "coeff", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.flatten_results": [[512, 519], ["range", "analysis.flatten_parallel_trial", "str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.flatten_parallel_trial"], ["", "def", "flatten_results", "(", "num_processes", ",", "results", ",", "opt_name", ",", "num_trials", ")", ":", "\n", "    ", "sr_r", "=", "{", "}", "\n", "sr", "=", "results", "[", "opt_name", "]", "\n", "for", "n", "in", "range", "(", "num_trials", ")", ":", "\n", "        ", "fr", "=", "flatten_parallel_trial", "(", "num_processes", ",", "sr", ",", "n", ")", "\n", "sr_r", "[", "str", "(", "n", ")", "]", "=", "fr", "\n", "", "return", "sr_r", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.flatten_parallel_trial": [[521, 553], ["range", "sorted", "len", "range", "str", "len", "flat_results.append", "itemgetter", "flatted[].append", "r[].append", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "flatten_parallel_trial", "(", "n_p", ",", "sr", ",", "num_trial", ")", ":", "\n", "    ", "t", "=", "sr", "[", "str", "(", "num_trial", ")", "]", "\n", "m_i", "=", "0", "# machine index", "\n", "i", "=", "0", "# iteration index", "\n", "keys", "=", "[", "\"select_trace\"", ",", "\"exec_time\"", ",", "\"opt_time\"", ",", "\"model_idx\"", ",", "\"error\"", ",", "\"accuracy\"", "]", "\n", "flat_results", "=", "[", "]", "\n", "max_i_list", "=", "t", "[", "\"iters\"", "]", "\n", "for", "m_i", "in", "range", "(", "len", "(", "max_i_list", ")", ")", ":", "\n", "        ", "max_i", "=", "max_i_list", "[", "m_i", "]", "\n", "for", "i", "in", "range", "(", "max_i", ")", ":", "\n", "            ", "r", "=", "{", "\"i\"", ":", "i", ",", "\"m\"", ":", "m_i", "}", "\n", "for", "k", "in", "keys", ":", "\n", "                ", "r", "[", "k", "]", "=", "t", "[", "k", "]", "[", "m_i", "]", "[", "i", "]", "\n", "", "r", "[", "'end_time'", "]", "=", "[", "]", "\n", "for", "i", "in", "len", "(", "r", "[", "'opt_time'", "]", ")", ":", "\n", "                ", "et", "=", "sum", "(", "r", "[", "'opt_time'", "]", "[", ":", "i", "+", "1", "]", ")", "+", "sum", "(", "r", "[", "'exec_time'", "]", "[", ":", "i", "+", "1", "]", ")", "\n", "r", "[", "'end_time'", "]", ".", "append", "(", "et", ")", "\n", "\n", "#print(\"{}.{}: {}\".format(m_i, i, r['end_time']))", "\n", "", "flat_results", ".", "append", "(", "r", ")", "\n", "\n", "# sort dict list  by end_time", "\n", "", "", "flatted", "=", "{", "}", "\n", "from", "operator", "import", "itemgetter", "\n", "sorted_list", "=", "sorted", "(", "flat_results", ",", "key", "=", "itemgetter", "(", "'end_time'", ")", ")", "\n", "for", "r", "in", "sorted_list", ":", "\n", "#print(\"{}:{}.{}\".format(r['end_time'], r['m'], r['i']))", "\n", "        ", "for", "k", "in", "keys", ":", "\n", "            ", "if", "not", "k", "in", "flatted", ":", "\n", "                ", "flatted", "[", "k", "]", "=", "[", "]", "\n", "", "flatted", "[", "k", "]", ".", "append", "(", "r", "[", "k", "]", ")", "\n", "", "", "return", "flatted", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.show_stat": [[555, 589], ["range", "print", "print", "print", "opt_times.append", "exec_times.append", "num_iters.append", "min", "min_errs.append", "numpy.mean", "print", "numpy.mean", "numpy.mean", "len", "len", "num_fails.append", "num_fails.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "min", "err_list.append", "train_ep_list.count", "numpy.mean", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "show_stat", "(", "results", ",", "key", ",", "runs", ")", ":", "\n", "\n", "    ", "min_errs", "=", "[", "]", "\n", "num_iters", "=", "[", "]", "\n", "num_fails", "=", "[", "]", "\n", "exec_times", "=", "[", "]", "\n", "opt_times", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "runs", ")", ":", "\n", "        ", "opt_times", ".", "append", "(", "np", ".", "mean", "(", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", "[", "'opt_time'", "]", ")", ")", "\n", "exec_times", ".", "append", "(", "np", ".", "mean", "(", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", "[", "'exec_time'", "]", ")", ")", "\n", "err_list", "=", "[", "]", "\n", "for", "err", "in", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", "[", "'error'", "]", ":", "\n", "            ", "if", "err", "!=", "None", ":", "\n", "                ", "err_list", ".", "append", "(", "err", ")", "\n", "", "", "if", "'model_idx'", "in", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", ":", "\n", "            ", "num_iter", "=", "len", "(", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", "[", "'model_idx'", "]", ")", "\n", "", "else", ":", "\n", "            ", "num_iter", "=", "len", "(", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", "[", "'exec_time'", "]", ")", "\n", "", "num_iters", ".", "append", "(", "num_iter", ")", "\n", "\n", "if", "'train_epoch'", "in", "results", "[", "key", "]", ":", "\n", "            ", "train_ep_list", "=", "results", "[", "key", "]", "[", "str", "(", "i", ")", "]", "[", "'train_epoch'", "]", "\n", "num_fails", ".", "append", "(", "train_ep_list", ".", "count", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "             ", "num_fails", ".", "append", "(", "0", ")", "\n", "\n", "", "min_err", "=", "min", "(", "err_list", ")", "\n", "min_errs", ".", "append", "(", "min_err", ")", "\n", "\n", "", "print", "(", "\" - Avg. {} iterations (stdev: {:.7f})\"", ".", "format", "(", "np", ".", "mean", "(", "num_iters", ")", ",", "np", ".", "std", "(", "num_iters", ")", ")", ")", "\n", "if", "np", ".", "mean", "(", "num_fails", ")", ">", "0", ":", "\n", "        ", "print", "(", "\" - Avg. {} fails\"", ".", "format", "(", "np", ".", "mean", "(", "num_fails", ")", ")", ")", "\n", "", "print", "(", "\" - Avg. time:  {:.7f}/{:.7f} (optimization / evaluation)\"", ".", "format", "(", "np", ".", "mean", "(", "opt_times", ")", ",", "np", ".", "mean", "(", "exec_times", ")", ")", ")", "\n", "print", "(", "\" - Avg. {:.7f} error (stdev: {:.7f}), Best {:.7f}\"", ".", "format", "(", "np", ".", "mean", "(", "min_errs", ")", ",", "np", ".", "std", "(", "min_errs", ")", ",", "min", "(", "min_errs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.analysis.retrieve_final_performances": [[591, 621], ["range", "len", "range", "final_values.append", "ValueError", "len", "len", "ValueError", "str", "min_f_values.append", "wall_times.append", "str", "str", "str", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "retrieve_final_performances", "(", "result_dict", ",", "n_runs", ",", "time_budget", ",", "best_err", "=", "0.0", ")", ":", "\n", "    ", "final_values", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_runs", ")", ":", "\n", "        ", "if", "not", "str", "(", "i", ")", "in", "result_dict", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid run index: {}'", ".", "format", "(", "i", ")", ")", "\n", "", "opt_time", "=", "result_dict", "[", "str", "(", "i", ")", "]", "[", "'opt_time'", "]", "\n", "exec_time", "=", "result_dict", "[", "str", "(", "i", ")", "]", "[", "'exec_time'", "]", "\n", "if", "len", "(", "opt_time", ")", "!=", "len", "(", "exec_time", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid report in run index: {}'", ".", "format", "(", "i", ")", ")", "\n", "", "n_iters", "=", "len", "(", "exec_time", ")", "\n", "err_list", "=", "result_dict", "[", "str", "(", "i", ")", "]", "[", "'error'", "]", "\n", "min_f_values", "=", "[", "]", "\n", "wall_times", "=", "[", "]", "\n", "cur_best", "=", "None", "\n", "for", "j", "in", "range", "(", "n_iters", ")", ":", "\n", "            ", "if", "cur_best", "==", "None", ":", "\n", "                ", "cur_best", "=", "err_list", "[", "j", "]", "\n", "\n", "", "if", "cur_best", ">=", "err_list", "[", "j", "]", ":", "\n", "                ", "cum_time", "=", "sum", "(", "opt_time", "[", ":", "j", "]", ")", "+", "sum", "(", "exec_time", "[", ":", "j", "]", ")", "\n", "min_f_values", ".", "append", "(", "err_list", "[", "j", "]", ")", "\n", "wall_times", ".", "append", "(", "cum_time", ")", "\n", "cur_best", "=", "err_list", "[", "j", "]", "\n", "if", "cum_time", ">=", "time_budget", ":", "\n", "                    ", "break", "\n", "", "", "", "final_val", "=", "cur_best", "-", "best_err", "\n", "final_values", ".", "append", "(", "final_val", ")", "\n", "\n", "", "return", "final_values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.load_json": [[8, 11], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.load_pickle": [[13, 16], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "", "def", "load_pickle", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "pkl", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "pkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.load_lookup_data": [[18, 39], ["path.endswith", "pandas.read_csv", "viz_util.get_best_of_train", "ValueError", "viz_util.get_best_of_train", "viz_util.get_best_of_train", "viz_util.get_best_of_train", "viz_util.get_best_of_train"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_best_of_train", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_best_of_train", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_best_of_train", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_best_of_train", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_best_of_train"], ["", "", "def", "load_lookup_data", "(", "lookup_name", ",", "path", "=", "'./lookup'", ")", ":", "\n", "    ", "if", "not", "path", ".", "endswith", "(", "'/'", ")", ":", "\n", "        ", "path", "=", "path", "+", "'/'", "\n", "", "lookup_path", "=", "\"{}{}.csv\"", ".", "format", "(", "path", ",", "lookup_name", ")", "\n", "try", ":", "\n", "        ", "lookup", "=", "pd", ".", "read_csv", "(", "lookup_path", ")", "\n", "if", "lookup_name", "==", "'PTB-LSTM'", ":", "\n", "            ", "lookup", "[", "'best_perplexity'", "]", "=", "get_best_of_train", "(", "lookup", ",", "metric", "=", "'perplexity'", ")", "\n", "max_perplexity", "=", "1000.0", "\n", "lookup", "[", "'best_acc'", "]", "=", "(", "max_perplexity", "-", "lookup", "[", "'best_perplexity'", "]", ")", "/", "max_perplexity", "\n", "", "elif", "lookup_name", "==", "'CIFAR10-VGG'", ":", "\n", "            ", "lookup", "[", "'best_acc'", "]", "=", "get_best_of_train", "(", "lookup", ",", "start_col", "=", "11", ",", "end_col", "=", "61", ")", "\n", "", "elif", "lookup_name", "==", "'CIFAR100-VGG'", ":", "\n", "            ", "lookup", "[", "'best_acc'", "]", "=", "get_best_of_train", "(", "lookup", ",", "start_col", "=", "11", ",", "end_col", "=", "61", ")", "\n", "", "elif", "lookup_name", "==", "'CIFAR10-ResNet'", ":", "\n", "            ", "lookup", "[", "'best_acc'", "]", "=", "get_best_of_train", "(", "lookup", ",", "start_col", "=", "9", ",", "end_col", "=", "109", ")", "\n", "", "else", ":", "\n", "            ", "lookup", "[", "'best_acc'", "]", "=", "get_best_of_train", "(", "lookup", ")", "\n", "", "return", "lookup", "\n", "", "except", ":", "\n", "        ", "raise", "ValueError", "(", "\"{} is not found.\"", ".", "format", "(", "lookup_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_best_of_train": [[41, 47], ["numpy.max", "viz_util.get_train_curve", "numpy.min", "viz_util.get_train_curve"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_train_curve", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_train_curve"], ["", "", "def", "get_best_of_train", "(", "lookup_table", ",", "start_col", "=", "10", ",", "end_col", "=", "25", ",", "metric", "=", "'acc'", ")", ":", "\n", "    ", "if", "metric", "==", "'acc'", ":", "\n", "        ", "return", "np", ".", "max", "(", "get_train_curve", "(", "lookup_table", ",", "start_col", ",", "end_col", ")", ",", "axis", "=", "1", ")", "\n", "", "elif", "metric", "==", "'perplexity'", ":", "\n", "        ", "best_perp", "=", "np", ".", "min", "(", "get_train_curve", "(", "lookup_table", ",", "start_col", ",", "end_col", ")", ",", "axis", "=", "1", ")", "\n", "return", "best_perp", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_train_curve": [[49, 51], ["None"], "function", ["None"], ["", "", "def", "get_train_curve", "(", "lookup_table", ",", "start_col", ",", "end_col", ")", ":", "\n", "    ", "return", "lookup_table", ".", "iloc", "[", ":", ",", "start_col", ":", "end_col", "]", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_difficulty_stats": [[53, 75], ["len", "max", "len", "numpy.array", "numpy.sort", "int", "float", "int", "stats.append", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_difficulty_stats", "(", "lookup", ",", "difficulties", "=", "[", "]", ")", ":", "\n", "\n", "    ", "num_lookup", "=", "len", "(", "lookup", ")", "\n", "if", "len", "(", "difficulties", ")", "==", "0", ":", "\n", "        ", "difficulties", "=", "np", ".", "array", "(", "[", "float", "(", "100", "/", "num_lookup", ")", ",", "float", "(", "10", "/", "num_lookup", ")", "]", ")", "\n", "\n", "", "stats", "=", "[", "]", "\n", "best_accs", "=", "lookup", "[", "'best_acc'", "]", "\n", "sorted_accs", "=", "np", ".", "sort", "(", "best_accs", ")", "[", ":", ":", "-", "1", "]", "\n", "top_acc", "=", "max", "(", "sorted_accs", ")", "\n", "t_i", "=", "0", "\n", "for", "df", "in", "difficulties", ":", "\n", "        ", "stat", "=", "{", "}", "\n", "th", "=", "int", "(", "df", "*", "num_lookup", ")", "\n", "stat", "[", "'difficulty'", "]", "=", "float", "(", "df", ")", "\n", "stat", "[", "'rank'", "]", "=", "int", "(", "num_lookup", "*", "float", "(", "df", ")", ")", "\n", "stat", "[", "'error'", "]", "=", "1.0", "-", "sorted_accs", "[", "th", "]", "\n", "stat", "[", "'accuracy'", "]", "=", "sorted_accs", "[", "th", "]", "\n", "stat", "[", "'regret'", "]", "=", "top_acc", "-", "sorted_accs", "[", "th", "]", "\n", "stats", ".", "append", "(", "stat", ")", "\n", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.name_map": [[77, 94], ["None"], "function", ["None"], ["", "def", "name_map", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "'SP-GP-EI(6)'", ":", "\n", "        ", "return", "'Synch. GP-EI-MCMC(10)'", "\n", "", "elif", "name", "==", "'P-GP-EI(6)'", ":", "\n", "        ", "return", "'GP-EI-MCMC(10)'", "\n", "", "elif", "name", "==", "'P-GP-EI-MCMC1(6)'", ":", "\n", "        ", "return", "'GP-EI-MCMC(1)'", "\n", "", "elif", "name", "==", "'P-RF-EI(6)'", ":", "\n", "        ", "return", "'RF-EI'", "\n", "", "elif", "name", "==", "'xN-Div-I'", ":", "\n", "        ", "return", "'Theoretical'", "\n", "", "elif", "name", "==", "'P-Div(6)'", ":", "\n", "        ", "return", "'P-Div'", "\n", "", "elif", "name", "==", "'P-Div-P(6)'", ":", "\n", "        ", "return", "'P-Div (in-progress)'", "\n", "", "else", ":", "\n", "        ", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label": [[96, 157], ["arm.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace", "label.replace.replace"], "function", ["None"], ["", "", "def", "get_label", "(", "arm", ")", ":", "\n", "    ", "label", "=", "arm", ".", "replace", "(", "'_'", ",", "'-'", ")", "\n", "postfix", "=", "\"\"", "\n", "\n", "if", "'-NR'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-NR\"", ",", "\"-R\"", ")", "\n", "", "elif", "'-NC'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-NC\"", ",", "\"-N\"", ")", "\n", "", "elif", "'-NP'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-NP\"", ",", "\"-P\"", ")", "\n", "\n", "", "if", "'-LOG-ERR'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-LOG-ERR\"", ",", "\" \"", ")", "\n", "postfix", "=", "\" (log err)\"", "\n", "", "elif", "'-ADALOG3TIME'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-ADALOG3TIME\"", ",", "\"-Div\"", ")", "\n", "#postfix = \" (partial log + early stop)\"", "\n", "", "elif", "'-ADALOG3'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-ADALOG3\"", ",", "\"-Div\"", ")", "\n", "#postfix = \" (partial log)\"", "\n", "", "elif", "'-TIME'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-TIME\"", ",", "\" \"", ")", "\n", "postfix", "=", "\" (early stop)\"", "\n", "", "elif", "'-LOGMIX'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "\"-LOGMIX\"", ",", "\" \"", ")", "\n", "postfix", "=", "\" (pure & adalog)\"", "\n", "\n", "", "if", "'SMAC-'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "'SMAC-'", ",", "'RF-'", ",", ")", "\n", "", "elif", "'-NM'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "'-NM'", ",", "'-MCMC1'", ")", "\n", "\n", "", "if", "'-HLE'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "'-HLE'", ",", "''", ")", "\n", "\n", "", "elif", "'DIVERSIFIED'", "in", "label", ":", "\n", "        ", "if", "'RANDOM'", "in", "label", ":", "\n", "            ", "return", "'R-Div'", "+", "postfix", "\n", "", "elif", "'SEQ'", "in", "label", ":", "\n", "            ", "return", "'S-Div'", "+", "postfix", "\n", "", "elif", "'SKO'", "in", "label", ":", "\n", "            ", "return", "'S-Knockout'", "+", "postfix", "\n", "", "elif", "'HEDGE'", "in", "label", ":", "\n", "            ", "return", "'Hedge'", "+", "postfix", "\n", "", "elif", "'GT-'", "in", "label", ":", "\n", "            ", "return", "u\"\\u03B5\"", "+", "\"-greedy\"", "\n", "", "elif", "'EG-'", "in", "label", ":", "\n", "            ", "return", "'e-greedy'", "+", "postfix", "\n", "\n", "", "", "if", "'BATCH'", "in", "label", ":", "\n", "        ", "label", "=", "label", ".", "replace", "(", "'ASYNC-BATCH'", ",", "'P'", ")", "\n", "label", "=", "label", ".", "replace", "(", "'SYNC-BATCH'", ",", "'SP'", ")", "\n", "\n", "if", "'P-GP+SMAC'", "in", "label", ":", "\n", "            ", "label", "=", "label", ".", "replace", "(", "'P-GP+SMAC'", ",", "'P-Div'", ")", "\n", "\n", "", "return", "label", "+", "postfix", "\n", "", "elif", "'RANDOM'", "in", "label", ":", "\n", "        ", "return", "label", ".", "replace", "(", "\"RANDOM\"", ",", "\"Random\"", ")", "+", "postfix", "\n", "\n", "", "return", "label", "+", "postfix", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_style": [[159, 181], ["arm.replace.replace", "list().index", "list"], "function", ["None"], ["", "def", "get_style", "(", "arm", ",", "all_items", ")", ":", "\n", "    ", "markers", "=", "[", "'o'", ",", "'p'", ",", "'*'", ",", "'^'", ",", "'s'", ",", "'D'", ",", "'x'", ",", "'<'", ",", "'.'", ",", "'v'", ",", "\n", "'>'", ",", "'+'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'P'", ",", "'4'", ",", "'H'", ",", "'8'", ",", "'d'", "]", "\n", "marker_colors", "=", "[", "'xkcd:brown'", ",", "'xkcd:purple'", ",", "'xkcd:violet'", ",", "\n", "'xkcd:green'", ",", "'xkcd:lime green'", ",", "'xkcd:teal'", ",", "\n", "'xkcd:magenta'", ",", "'xkcd:mustard'", ",", "'xkcd:orange'", ",", "\n", "'xkcd:red'", ",", "'xkcd:pink'", ",", "'xkcd:yellow'", ",", "\n", "'xkcd:peach'", ",", "'xkcd:lavender'", ",", "'xkcd:fuchsia'", ",", "\n", "'xkcd:goldenrod'", ",", "'xkcd:light green'", ",", "'xkcd:leaf green'", ",", "\n", "'xkcd:deep purple'", ",", "'xkcd:sage'", "]", "\n", "\n", "if", "'DIV'", "in", "arm", ":", "\n", "        ", "line_style", "=", "'-'", "\n", "", "else", ":", "\n", "        ", "line_style", "=", "'--'", "\n", "arm", "=", "arm", ".", "replace", "(", "'+'", ",", "'_'", ")", "\n", "", "try", ":", "\n", "        ", "index", "=", "list", "(", "all_items", ")", ".", "index", "(", "arm", ")", "\n", "", "except", ":", "\n", "        ", "index", "=", "0", "\n", "\n", "", "return", "markers", "[", "index", "]", ",", "marker_colors", "[", "index", "]", ",", "line_style", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_predefined_style": [[183, 333], ["None"], "function", ["None"], ["", "def", "get_predefined_style", "(", "name", ")", ":", "\n", "    ", "marker", "=", "''", "\n", "color", "=", "'black'", "\n", "palette", "=", "[", "'gray'", ",", "'xkcd:red'", ",", "'xkcd:deep blue'", ",", "'xkcd:periwinkle'", "]", "\n", "line_style", "=", "'-'", "\n", "markers", "=", "[", "''", ",", "'p'", ",", "'^'", ",", "'*'", ",", "'s'", ",", "'v'", ",", "'D'", ",", "'<'", ",", "'>'", ",", "\n", "'1'", ",", "'3'", ",", "'2'", ",", "'4'", ",", "'8'", ",", "\"|\"", ",", "\"_\"", ",", "''", ",", "\",\"", ",", "'H'", ",", "'+'", ",", "'P'", ",", "','", ",", "'h'", ",", "'x'", "]", "\n", "\n", "marker_index", "=", "0", "\n", "\n", "\n", "if", "'DEEP-BO'", "in", "name", ":", "\n", "        ", "line_style", "=", "'-'", "\n", "color", "=", "'xkcd:red'", "\n", "if", "'S-Div'", "in", "name", ":", "\n", "            ", "marker", "=", "'x'", "\n", "", "elif", "'R-Div'", "in", "name", ":", "\n", "            ", "marker", "=", "'o'", "\n", "", "elif", "'P-Div'", "in", "name", ":", "\n", "#line_style = '--'", "\n", "            ", "if", "'-R'", "in", "name", ":", "\n", "                ", "marker", "=", "'*'", "\n", "color", "=", "'gray'", "\n", "", "elif", "'-N'", "in", "name", ":", "\n", "                ", "marker", "=", "'d'", "\n", "color", "=", "'orange'", "\n", "", "elif", "'-P'", "in", "name", ":", "\n", "                ", "line_style", "=", "'-'", "\n", "marker", "=", "'o'", "\n", "color", "=", "'red'", "\n", "", "else", ":", "\n", "                ", "marker", "=", "'x'", "\n", "", "", "elif", "'x6-Div'", "in", "name", ":", "\n", "            ", "marker_index", "+=", "5", "\n", "", "else", ":", "\n", "#color = 'xkcd:violet'", "\n", "#line_style = ':'", "\n", "            ", "if", "'xN-Div'", "in", "name", ":", "\n", "                ", "marker", "=", "'D'", "\n", "", "elif", "'xN-Div-I'", "in", "name", ":", "\n", "                ", "marker", "=", "'*'", "\n", "", "", "", "elif", "'Diversif'", "in", "name", ":", "\n", "        ", "line_style", "=", "'-'", "\n", "color", "=", "'xkcd:red'", "\n", "", "elif", "'Hedge'", "in", "name", ":", "\n", "        ", "line_style", "=", "'-'", "\n", "color", "=", "palette", "[", "2", "]", "\n", "marker", "=", "''", "\n", "if", "\"(k=3)\"", "in", "name", ":", "\n", "            ", "marker", "=", "'^'", "\n", "", "elif", "\"(k=9)\"", "in", "name", ":", "\n", "            ", "marker", "=", "'v'", "\n", "", "", "elif", "'-greedy'", "in", "name", ":", "\n", "        ", "color", "=", "palette", "[", "2", "]", "\n", "marker", "=", "'s'", "\n", "", "elif", "'Random'", "in", "name", ":", "\n", "        ", "color", "=", "'gray'", "\n", "line_style", "=", "'-'", "\n", "", "elif", "'Ind-Avg'", "==", "name", ":", "\n", "        ", "line_style", "=", "':'", "\n", "", "elif", "'Knockout'", "in", "name", ":", "\n", "        ", "line_style", "=", "'--'", "\n", "", "elif", "'BOHB'", "in", "name", ":", "\n", "        ", "color", "=", "palette", "[", "3", "]", "\n", "#marker = 's'", "\n", "\n", "", "if", "'GP-'", "in", "name", "and", "not", "'GP-Hedge'", "in", "name", ":", "\n", "# thin blues", "\n", "        ", "palette", "=", "[", "'xkcd:royal blue'", ",", "'xkcd:bright blue'", ",", "\n", "'xkcd:baby blue'", ",", "'xkcd:sky blue'", "]", "\n", "color", "=", "palette", "[", "0", "]", "\n", "line_style", "=", "'-.'", "\n", "\n", "if", "'-MCMC10'", "in", "name", ":", "\n", "            ", "marker_index", "+=", "1", "\n", "", "elif", "'-MCMC1'", "in", "name", ":", "\n", "            ", "marker_index", "+=", "2", "\n", "", "marker", "=", "markers", "[", "marker_index", "]", "\n", "\n", "", "elif", "'RF-'", "in", "name", ":", "\n", "# thick greens", "\n", "        ", "palette", "=", "[", "'xkcd:forest green'", ",", "\n", "'xkcd:green'", ",", "'xkcd:olive'", ",", "'xkcd:teal'", "]", "\n", "color", "=", "palette", "[", "0", "]", "\n", "line_style", "=", "'--'", "\n", "marker", "=", "markers", "[", "marker_index", "]", "\n", "", "elif", "'TPE'", "in", "name", ":", "\n", "        ", "line_style", "=", "':'", "\n", "\n", "", "if", "'-EI'", "in", "name", ":", "\n", "        ", "color", "=", "palette", "[", "1", "]", "\n", "", "elif", "'-PI'", "in", "name", ":", "\n", "        ", "color", "=", "palette", "[", "2", "]", "\n", "", "elif", "'-UCB'", "in", "name", ":", "\n", "        ", "color", "=", "palette", "[", "3", "]", "\n", "\n", "", "if", "'P-GP-'", "in", "name", "or", "'P-RF-'", "in", "name", "or", "'P-Div-'", "in", "name", ":", "\n", "#marker_index += 3", "\n", "        ", "if", "'SP-'", "in", "name", ":", "\n", "            ", "marker_index", "+=", "3", "\n", "marker", "=", "markers", "[", "marker_index", "]", "\n", "\n", "", "", "if", "'(baseline'", "in", "name", ":", "\n", "        ", "line_style", "=", "':'", "\n", "\n", "", "if", "'(surrogate'", "in", "name", ":", "\n", "        ", "marker", "=", "'8'", "\n", "line_style", "=", "'--'", "\n", "\n", "", "if", "'-LCE'", "in", "name", ":", "\n", "#marker = 'd'", "\n", "        ", "line_style", "=", "'-'", "\n", "\n", "", "if", "'-CR'", "in", "name", ":", "\n", "        ", "line_style", "=", "'-'", "\n", "\n", "", "if", "'-MSR'", "in", "name", ":", "\n", "#marker = 'o'", "\n", "        ", "line_style", "=", "'-'", "\n", "\n", "", "if", "'(naive'", "in", "name", ":", "\n", "        ", "marker", "=", "'^'", "\n", "#color = 'xkcd:royal blue'", "\n", "", "elif", "'(log'", "in", "name", ":", "\n", "        ", "marker", "=", "'*'", "\n", "#color = 'xkcd:royal blue'", "\n", "", "elif", "'(hybrid'", "in", "name", ":", "\n", "        ", "marker", "=", "'o'", "\n", "#color = 'black'", "\n", "", "elif", "'(baseline'", "in", "name", ":", "\n", "        ", "marker", "=", "''", "\n", "#color = 'black'                 ", "\n", "", "if", "'\u03b2=0.1'", "in", "name", ":", "\n", "        ", "color", "=", "'xkcd:orange'", "\n", "marker", "=", "'*'", "\n", "", "elif", "'\u03b2=0.25'", "in", "name", ":", "\n", "        ", "color", "=", "'xkcd:orange'", "\n", "marker", "=", "'d'", "\n", "", "elif", "'\u03b2=0.2'", "in", "name", ":", "\n", "        ", "color", "=", "'xkcd:orange'", "\n", "marker", "=", "'v'", "\n", "", "elif", "'\u03b2=0.05'", "in", "name", ":", "\n", "        ", "color", "=", "'xkcd:orange'", "\n", "marker", "=", "'|'", "\n", "\n", "", "if", "'fantasy'", "in", "name", ":", "\n", "        ", "marker", "=", "'*'", "\n", "line_style", "=", "':'", "\n", "\n", "", "return", "marker", ",", "color", ",", "line_style", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.load_search_history": [[335, 354], ["numpy.load"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "def", "load_search_history", "(", "s_n", ",", "run_index", "=", "0", ")", ":", "\n", "    ", "npz_f", "=", "\"../spaces/{}.npz\"", ".", "format", "(", "s_n", ")", "\n", "hist_f", "=", "np", ".", "load", "(", "npz_f", ")", "\n", "hpv", "=", "hist_f", "[", "'hpv'", "]", "\n", "if", "run_index", "!=", "0", "and", "'hpv{}'", ".", "format", "(", "run_index", ")", "in", "hist_f", ":", "\n", "        ", "hpv", "=", "hist_f", "[", "'hpv{}'", ".", "format", "(", "run_index", ")", "]", "\n", "\n", "", "schemata", "=", "None", "\n", "gen_counts", "=", "None", "\n", "if", "'schemata'", "in", "hist_f", ":", "\n", "        ", "schemata", "=", "hist_f", "[", "'schemata'", "]", "\n", "", "if", "run_index", "!=", "0", "and", "'schemata{}'", ".", "format", "(", "run_index", ")", "in", "hist_f", ":", "\n", "        ", "schemata", "=", "hist_f", "[", "'schemata{}'", ".", "format", "(", "run_index", ")", "]", "\n", "\n", "", "if", "'gen_count'", "in", "hist_f", ":", "\n", "        ", "gen_counts", "=", "hist_f", "[", "'gen_count'", "]", "\n", "", "if", "run_index", "!=", "0", "and", "'gen_count{}'", ".", "format", "(", "run_index", ")", "in", "hist_f", ":", "\n", "        ", "gen_counts", "=", "hist_f", "[", "'gen_count{}'", ".", "format", "(", "run_index", ")", "]", "\n", "", "return", "hpv", ",", "schemata", ",", "gen_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.test_style": [[356, 360], ["viz_util.get_label", "viz_util.get_predefined_style", "print"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_label", "home.repos.pwc.inspect_result.snu-adsl_bbea.results.viz_util.get_predefined_style"], ["", "def", "test_style", "(", ")", ":", "\n", "    ", "name", "=", "get_label", "(", "'P-Div-P(6)'", ")", "\n", "marker", ",", "color", ",", "line_style", "=", "get_predefined_style", "(", "name", ")", "\n", "print", "(", "\"{}, {}, {}, {}\"", ".", "format", "(", "name", ",", "marker", ",", "color", ",", "line_style", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.get_resource": [[17, 20], ["None"], "function", ["None"], ["def", "get_resource", "(", ")", ":", "\n", "    ", "global", "RESOURCE", "\n", "return", "RESOURCE", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.create_master_server": [[24, 45], ["ParallelHPOManager", "WebServiceManager", "WebServiceManager.run_service"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.run_service"], ["", "def", "create_master_server", "(", "hp_cfg", ",", "\n", "debug_mode", "=", "False", ",", "\n", "credential", "=", "None", ",", "\n", "port", "=", "5000", ",", "\n", "threaded", "=", "False", ")", ":", "\n", "    ", "'''Spawn a master daemon which serves parameter space and parallel Bayesian Optimization run.  \n    Arguments:\n        hp_cfg {HyperparameterConfiguration} -- hyperparameter configuration which will be used to create parameter space.\n    Keyword arguments:\n        debug_mode {bool} -- show debug message or not (default False)\n        credential {str} -- credential key for authentication (default None)\n        port {int} -- the port number that is opened for response (default 5000)\n        threaded {bool} -- enable multi-threading (default False)\n    This API blocks the remained procedure unless a terminal signal enters.\n \n    '''", "\n", "global", "JOB_MANAGER", "\n", "global", "API_SERVER", "\n", "JOB_MANAGER", "=", "ParallelHPOManager", "(", "hp_cfg", ")", "\n", "API_SERVER", "=", "WebServiceManager", "(", "JOB_MANAGER", ",", "hp_cfg", ",", "credential", "=", "credential", ")", "\n", "API_SERVER", ".", "run_service", "(", "port", ",", "debug_mode", ",", "threaded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.wait_hpo_request": [[47, 88], ["HPOJobManager", "WebServiceManager", "WebServiceManager.run_service", "warn", "validators.url", "xoa.connectors.register.MasterServerConnector", "xoa.connectors.register.MasterServerConnector.register", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.run_service", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.register", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "wait_hpo_request", "(", "run_cfg", ",", "\n", "hp_cfg", ",", "\n", "debug_mode", "=", "False", ",", "\n", "port", "=", "6000", ",", "\n", "enable_surrogate", "=", "False", ",", "\n", "credential", "=", "None", ",", "\n", "master_node", "=", "None", ",", "\n", "threaded", "=", "False", ")", ":", "\n", "    ", "'''Spawn a worker daemon which serves Bayesian Optimization.  \n    Arguments:\n        run_cfg {dictionary} -- run configuration.\n        hp_cfg {HyperparameterConfiguration} -- hyperparameter configuration which will be used to select hyperparameter vector.\n    Keyword arguments:\n        debug_mode {bool} -- show debug message or not (default False)\n        port {int} -- the port number that is opened for response (default 6000)\n        enable_surrogate {bool} -- whether the use of pre-evaluated lookup table or not (default False)\n        credential {str} -- credential key for authentication (default None)\n        master_node {str} -- the URL to register myself to master node. if None, no register (default None)\n        threaded {bool} -- enable multi-threading (default False)\n    This API blocks the remained procedure unless a terminal signal enters.\n \n    '''", "\n", "global", "JOB_MANAGER", "\n", "global", "API_SERVER", "\n", "\n", "if", "JOB_MANAGER", "==", "None", ":", "\n", "        ", "JOB_MANAGER", "=", "HPOJobManager", "(", "\n", "run_cfg", ",", "hp_cfg", ",", "port", ",", "use_surrogate", "=", "enable_surrogate", ")", "\n", "if", "master_node", "!=", "None", "and", "v", ".", "url", "(", "master_node", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "ns", "=", "MasterServerConnector", "(", "\n", "master_node", ",", "credential", ")", "\n", "ns", ".", "register", "(", "port", ",", "\"BO Node\"", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Registering to master server failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "", "API_SERVER", "=", "WebServiceManager", "(", "JOB_MANAGER", ",", "hp_cfg", ",", "credential", "=", "credential", ")", "\n", "API_SERVER", ".", "run_service", "(", "port", ",", "debug_mode", ",", "threaded", ")", "\n", "", "else", ":", "\n", "        ", "warn", "(", "\"Job manager already initialized.\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.wait_train_request": [[90, 140], ["train_task", "train_task.set_resource", "TrainingJobManager", "WebServiceManager", "WebServiceManager.run_service", "warn", "validators.url", "xoa.connectors.register.MasterServerConnector", "xoa.connectors.register.MasterServerConnector.register", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_resource", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.run_service", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.register", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "wait_train_request", "(", "train_task", ",", "\n", "hp_cfg", ",", "\n", "debug_mode", "=", "False", ",", "\n", "port", "=", "6100", ",", "\n", "device_type", "=", "\"cpu\"", ",", "\n", "device_index", "=", "0", ",", "\n", "retrieve_func", "=", "None", ",", "\n", "enable_surrogate", "=", "False", ",", "\n", "master_node", "=", "None", ",", "\n", "credential", "=", "None", ",", "\n", "processed", "=", "True", "\n", ")", ":", "\n", "    ", "'''Spawn a worker daemon which serves DNN training.  \n    Arguments:\n        train_task {function} -- a target function which is decorated with @eval_task.\n        hp_cfg {HyperparameterConfiguration}-- hyperparameter configuration which will be used to validate hyperparameter vector.\n    Keyword arguments:\n        debug_mode {bool} -- show debug message or not (default False)\n        port {int} -- the port number that is opened for response (default 6100)\n        device_type {str} -- type of processing unit. 'cpu' or 'gpu' (default 'cpu')\n        device_index {int} -- index of processing unit (default 0)\n        enable_surrogate {bool} -- whether the use of pre-evaluated lookup table or not (default False)\n        master_node {str} -- the URL to register myself to master node. if None, no register (default None)\n        credential {str} -- credential key for authentication (default None)\n        processed {bool} -- enable spawning a process for training (default True)\n    This API blocks the remained procedure unless a terminal signal enters.\n \n    '''", "\n", "global", "JOB_MANAGER", "\n", "global", "API_SERVER", "\n", "\n", "if", "JOB_MANAGER", "==", "None", ":", "\n", "        ", "task", "=", "train_task", "(", ")", "\n", "task", ".", "set_resource", "(", "device_type", ",", "device_index", ")", "\n", "JOB_MANAGER", "=", "TrainingJobManager", "(", "task", ",", "\n", "use_surrogate", "=", "enable_surrogate", ",", "\n", "retrieve_func", "=", "retrieve_func", ")", "\n", "if", "master_node", "!=", "None", "and", "v", ".", "url", "(", "master_node", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "ns", "=", "MasterServerConnector", "(", "\n", "master_node", ",", "credential", ")", "\n", "ns", ".", "register", "(", "port", ",", "\"Training Node\"", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Registering myself to name server failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "", "API_SERVER", "=", "WebServiceManager", "(", "JOB_MANAGER", ",", "hp_cfg", ",", "credential", "=", "credential", ")", "\n", "API_SERVER", ".", "run_service", "(", "port", ",", "debug_mode", ",", "with_process", "=", "processed", ")", "\n", "", "else", ":", "\n", "        ", "warn", "(", "\"Job manager already initialized.\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.stop_job_working": [[142, 150], ["JOB_MANAGER.stop_working_job", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.stop_working_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "stop_job_working", "(", ")", ":", "\n", "    ", "''' Send stop request for current job '''", "\n", "global", "JOB_MANAGER", "\n", "\n", "if", "JOB_MANAGER", "!=", "None", ":", "\n", "        ", "JOB_MANAGER", ".", "stop_working_job", "(", ")", "\n", "", "else", ":", "\n", "        ", "warn", "(", "\"Job manager is not ready to serve.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.update_current_loss": [[152, 178], ["JOB_MANAGER.update_result", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.update_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "update_current_loss", "(", "cur_iters", ",", "\n", "cur_loss", ",", "\n", "run_time", ",", "\n", "iter_unit", "=", "'epoch'", ",", "\n", "loss_type", "=", "'test_error_rate'", ")", ":", "\n", "    ", "''' Report the current loss of training task\n    \n    Arguments:\n        cur_iters {int} -- current iteration number \n        cur_loss {float} -- current loss value\n        run_time  {float} -- elapsed time (seconds) of the given task\n\n    Keyword arguments:\n        iter_unit {str} -- the iteration unit. \"step\" or \"epoch\" is valid (default \"epoch\")\n        loss_type {str} -- the type of loss such as 'valid_error', 'test_error', 'valid_error_rate' and 'test_error_rate. \n                           if 'error_rate' in loss_type, accuracy can be introduced by simple transformation. (default 'test_error_rate')\n    \n    '''", "\n", "global", "JOB_MANAGER", "\n", "\n", "if", "JOB_MANAGER", "!=", "None", ":", "\n", "        ", "JOB_MANAGER", ".", "update_result", "(", "cur_iters", ",", "cur_loss", ",", "run_time", ",", "\n", "iter_unit", "=", "iter_unit", ",", "\n", "loss_type", "=", "loss_type", ")", "\n", "", "else", ":", "\n", "        ", "warn", "(", "\"Job manager is not ready to serve.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.objective_function": [[183, 200], ["inspect.getargspec", "TargetFunctionEvaluator", "TargetFunctionEvaluator.set_exec_func", "getattr", "debug"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.set_exec_func", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "objective_function", "(", "eval_func", ")", ":", "\n", "    ", "def", "wrapper_function", "(", ")", ":", "\n", "        ", "from", "xoa", ".", "workers", "import", "TargetFunctionEvaluator", "\n", "\n", "argspec", "=", "inspect", ".", "getargspec", "(", "eval_func", ")", "\n", "fe", "=", "TargetFunctionEvaluator", "(", "\n", "\"{}\"", ".", "format", "(", "eval_func", ".", "__name__", ")", ")", "\n", "defaults", "=", "None", "\n", "try", ":", "\n", "            ", "defaults", "=", "getattr", "(", "argspec", ",", "'defaults'", ")", "\n", "debug", "(", "\"Target function arguments: {}, defaults: {}\"", ".", "format", "(", "argspec", ".", "args", ",", "defaults", ")", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "pass", "\n", "", "fe", ".", "set_exec_func", "(", "eval_func", ",", "argspec", ".", "args", ",", "defaults", ")", "\n", "return", "fe", "\n", "\n", "", "return", "wrapper_function", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.exit": [[202, 213], ["JOB_MANAGER.__del__", "API_SERVER.stop_service"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.__del__", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.stop_service"], ["", "@", "atexit", ".", "register", "\n", "def", "exit", "(", ")", ":", "\n", "    ", "global", "JOB_MANAGER", "\n", "global", "API_SERVER", "\n", "if", "JOB_MANAGER", "!=", "None", ":", "\n", "        ", "JOB_MANAGER", ".", "__del__", "(", ")", "\n", "JOB_MANAGER", "=", "None", "\n", "\n", "", "if", "API_SERVER", "!=", "None", ":", "\n", "        ", "API_SERVER", ".", "stop_service", "(", ")", "\n", "API_SERVER", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.config.Config.__init__": [[11, 15], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "jm", "=", "kwargs", "[", "'job_manager'", "]", "\n", "self", ".", "hp_cfg", "=", "kwargs", "[", "'hp_config'", "]", "\n", "super", "(", "Config", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.config.Config.get": [[16, 26], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "config.Config.jm.get_config", "config.Config.hp_cfg.get_dict", "config.Config.jm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "jm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "", "my_cfg", "=", "{", "}", "\n", "my_cfg", "[", "\"run_config\"", "]", "=", "self", ".", "jm", ".", "get_config", "(", ")", "\n", "my_cfg", "[", "'hp_config'", "]", "=", "self", ".", "hp_cfg", ".", "get_dict", "(", ")", "\n", "return", "my_cfg", ",", "200", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.space.Space.__init__": [[11, 15], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "\n", "super", "(", "Space", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.space.Space.get": [[16, 34], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "space.Space.Space.sm.get_space", "hasattr", "space.Space.Space.get_size", "space.Space.Space.get_hp_config().get_dict", "space.Space.Space.sm.authorize", "space.Space.Space.get_name", "space.Space.Space.get_hp_config"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_size", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_name", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config"], ["", "def", "get", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"{} space is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "space_info", "=", "{", "}", "\n", "if", "hasattr", "(", "space", ",", "'name'", ")", ":", "\n", "            ", "space_info", "[", "\"space_id\"", "]", "=", "space", ".", "get_name", "(", ")", "\n", "", "space_info", "[", "\"num_samples\"", "]", "=", "space", ".", "get_size", "(", ")", "\n", "space_info", "[", "\"hp_config\"", "]", "=", "space", ".", "get_hp_config", "(", ")", ".", "get_dict", "(", ")", "\n", "\n", "return", "space_info", ",", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.space.Space.post": [[35, 54], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "space.Space.Space.sm.get_space", "flask.request.get_json", "space.Space.Space.expand", "space.Space.Space.sm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "post", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "                ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "                ", "return", "\"{} space is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "expand_req", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "# TODO: validate space_req is valid", "\n", "\n", "space", ".", "expand", "(", "expand_req", ")", "\n", "return", "{", "\"space_id\"", ":", "space_id", "}", ",", "201", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "return", "\"Search space expand failed: {}\"", ".", "format", "(", "ex", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.space.Space.put": [[55, 76], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "space.Space.Space.sm.get_space", "space.Space.Space.sm.authorize", "space.Space.Space.sm.set_space_status"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status"], ["", "", "def", "put", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "parser", ".", "add_argument", "(", "\"status\"", ",", "location", "=", "'args'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "is", "None", ":", "\n", "            ", "return", "\"Space {} not found\"", ".", "format", "(", "space_id", ")", ",", "404", "\n", "", "else", ":", "\n", "            ", "if", "\"status\"", "in", "args", ":", "\n", "                ", "result", "=", "self", ".", "sm", ".", "set_space_status", "(", "space_id", ",", "args", "[", "\"status\"", "]", ")", "\n", "if", "result", "is", "True", ":", "\n", "                    ", "return", "space", "[", "\"status\"", "]", ",", "202", "\n", "", "else", ":", "\n", "                    ", "return", "\"Invalid request:{} of {}\"", ".", "format", "(", "args", "[", "\"status\"", "]", ",", "space_id", ")", ",", "400", "\n", "", "", "else", ":", "\n", "                ", "return", "\"Invalid request:{} of {}\"", ".", "format", "(", "args", ",", "space_id", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.space.Space.delete": [[77, 90], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "space.Space.sm.set_space_status", "space.Space.sm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "", "", "def", "delete", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "if", "self", ".", "sm", ".", "set_space_status", "(", "space_id", ",", "\"finished\"", ")", ":", "\n", "            ", "deleted_job", "=", "{", "\"id\"", ":", "space_id", "}", "\n", "return", "deleted_job", ",", "200", "\n", "", "else", ":", "\n", "            ", "return", "\"{} space can not be eliminated\"", ".", "format", "(", "space_id", ")", ",", "404", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.error.ObservedError.__init__": [[12, 16], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "\n", "super", "(", "ObservedError", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.error.ObservedError.get": [[17, 37], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "error.ObservedError.sm.get_space", "int", "error.ObservedError.get_train_epoch", "error.ObservedError.get_errors", "error.ObservedError.get_errors", "error.ObservedError.sm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_train_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "get", "(", "self", ",", "space_id", ",", "sample_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "404", "\n", "\n", "", "sample_id", "=", "int", "(", "sample_id", ")", "\n", "error", "=", "{", "\"id\"", ":", "sample_id", "}", "\n", "error", "[", "'num_epochs'", "]", "=", "space", ".", "get_train_epoch", "(", "sample_id", ")", "\n", "error", "[", "\"valid_error\"", "]", "=", "space", ".", "get_errors", "(", "sample_id", ",", "error_type", "=", "'valid'", ")", "\n", "error", "[", "\"test_error\"", "]", "=", "space", ".", "get_errors", "(", "sample_id", ",", "error_type", "=", "'test'", ")", "\n", "\n", "\n", "return", "error", ",", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.error.ObservedError.put": [[38, 68], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "error.ObservedError.sm.get_space", "error.ObservedError.sm.authorize", "int", "error.ObservedError.update_error", "error.ObservedError.get_errors", "error.ObservedError.sm.set_space_status", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "put", "(", "self", ",", "space_id", ",", "sample_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "parser", ".", "add_argument", "(", "\"value\"", ",", "location", "=", "'args'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"error_type\"", ",", "location", "=", "'args'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"num_epochs\"", ",", "location", "=", "'args'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "is", "None", ":", "\n", "            ", "return", "\"Space {} not found\"", ".", "format", "(", "space_id", ")", ",", "404", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "space_id", "!=", "\"active\"", ":", "\n", "                    ", "self", ".", "sm", ".", "set_space_status", "(", "space_id", ",", "\"active\"", ")", "\n", "", "sample_id", "=", "int", "(", "sample_id", ")", "\n", "space", ".", "update_error", "(", "sample_id", ",", "args", "[", "\"value\"", "]", ",", "args", "[", "\"num_epochs\"", "]", ",", "args", "[", "\"error_type\"", "]", ")", "\n", "error", "=", "{", "\"id\"", ":", "sample_id", "}", "\n", "key", "=", "'{}_error'", ".", "format", "(", "args", "[", "\"error_type\"", "]", ")", "\n", "error", "[", "key", "]", "=", "space", ".", "get_errors", "(", "sample_id", ",", "error_type", "=", "args", "[", "\"error_type\"", "]", ")", "\n", "error", "[", "\"num_epochs\"", "]", "=", "args", "[", "\"num_epochs\"", "]", "\n", "\n", "return", "error", ",", "202", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Error update exception: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "\"Invalid request:{}\"", ".", "format", "(", "ex", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.nodes.Nodes.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "nm", "=", "kwargs", "[", "'node_manager'", "]", "\n", "super", "(", "Nodes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.nodes.Nodes.post": [[15, 33], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "flask.request.get_json", "nodes.Nodes.nm.register", "nodes.Nodes.nm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.register", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "post", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "nm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "                ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "node_req", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "# TODO:validate node_req", "\n", "node_id", ",", "code", "=", "self", ".", "nm", ".", "register", "(", "node_req", ")", "\n", "if", "node_id", "is", "None", ":", "\n", "                ", "return", "\"Invalid node creation request: {}\"", ".", "format", "(", "node_req", ")", ",", "400", "\n", "", "else", ":", "\n", "                ", "return", "{", "\"node_id\"", ":", "node_id", "}", ",", "code", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "return", "\"HPO node creation failed: {}\"", ".", "format", "(", "ex", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.nodes.Nodes.get": [[34, 43], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "nodes.Nodes.nm.authorize", "nodes.Nodes.nm.get_node"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_node"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "# TODO:add argument handling for windowing items", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "nm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "return", "self", ".", "nm", ".", "get_node", "(", "\"all\"", ")", ",", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.spaces.Spaces.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "super", "(", "Spaces", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.spaces.Spaces.post": [[15, 35], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "flask.request.get_json", "debug", "spaces.Spaces.sm.create", "spaces.Spaces.sm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.create", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "post", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "                ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space_req", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "# TODO:check whether 'surrogate', 'hp_cfg' existed", "\n", "debug", "(", "\"Search space creation request accepted.\"", ")", "\n", "space_id", "=", "self", ".", "sm", ".", "create", "(", "space_req", ")", "\n", "\n", "if", "space_id", "is", "None", ":", "\n", "                ", "return", "\"Invalid parameter space creation request: {}\"", ".", "format", "(", "space_req", ")", ",", "400", "\n", "", "else", ":", "\n", "                ", "return", "{", "\"space_id\"", ":", "space_id", "}", ",", "201", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "return", "\"Search space creation failed: {}\"", ".", "format", "(", "ex", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.spaces.Spaces.get": [[36, 45], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "spaces.Spaces.sm.authorize", "spaces.Spaces.sm.get_available_spaces"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_available_spaces"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "# TODO:add argument handling for windowing items", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "return", "self", ".", "sm", ".", "get_available_spaces", "(", ")", ",", "200", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.job.Job.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "jm", "=", "kwargs", "[", "'job_manager'", "]", "\n", "super", "(", "Job", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.job.Job.get": [[15, 36], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "job.Job.Job.jm.sync_result", "job.Job.Job.jm.authorize", "job.Job.Job.jm.get_active_job_id", "job.Job.Job.jm.get_job", "job.Job.Job.jm.get_job"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.sync_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job"], ["", "def", "get", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "jm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "self", ".", "jm", ".", "sync_result", "(", "job_id", ")", "# XXX: A better way may be existed", "\n", "if", "job_id", "==", "'active'", ":", "\n", "            ", "aj", "=", "self", ".", "jm", ".", "get_active_job_id", "(", ")", "\n", "if", "aj", "is", "not", "None", ":", "\n", "                ", "return", "self", ".", "jm", ".", "get_job", "(", "aj", ")", ",", "200", "\n", "", "else", ":", "\n", "                ", "return", "{", "}", ",", "204", "\n", "\n", "", "", "else", ":", "\n", "            ", "job", "=", "self", ".", "jm", ".", "get_job", "(", "job_id", ")", "\n", "if", "job", "is", "None", ":", "\n", "                ", "return", "\"Job {} not found\"", ".", "format", "(", "job_id", ")", ",", "404", "\n", "", "else", ":", "\n", "                ", "return", "job", ",", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.job.Job.put": [[37, 55], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "job.Job.Job.jm.get_job", "job.Job.Job.jm.authorize", "job.Job.Job.jm.control"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.control"], ["", "", "", "def", "put", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "parser", ".", "add_argument", "(", "\"control\"", ",", "location", "=", "'args'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "jm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "job", "=", "self", ".", "jm", ".", "get_job", "(", "job_id", ")", "\n", "if", "job", "is", "None", ":", "\n", "            ", "return", "\"Job {} not found\"", ".", "format", "(", "job_id", ")", ",", "404", "\n", "", "else", ":", "\n", "            ", "result", "=", "self", ".", "jm", ".", "control", "(", "job_id", ",", "args", "[", "\"control\"", "]", ")", "\n", "if", "result", "is", "True", ":", "\n", "                ", "return", "job", ",", "202", "\n", "", "else", ":", "\n", "                ", "return", "\"Invalid request:{} of {}\"", ".", "format", "(", "args", "[", "\"control\"", "]", ",", "job_id", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.job.Job.delete": [[56, 69], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "job.Job.jm.remove", "job.Job.jm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "", "", "def", "delete", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "jm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "if", "self", ".", "jm", ".", "remove", "(", "job_id", ")", ":", "\n", "            ", "deleted_job", "=", "{", "\"job_id\"", ":", "job_id", "}", "\n", "return", "deleted_job", ",", "200", "\n", "", "else", ":", "\n", "            ", "return", "\"Job {} can not be terminated\"", ".", "format", "(", "job_id", ")", ",", "404", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "nm", "=", "kwargs", "[", "'node_manager'", "]", "\n", "super", "(", "Node", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.get": [[15, 28], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "node.Node.Node.nm.get_node", "node.Node.Node.nm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_node", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "get", "(", "self", ",", "node_id", ")", ":", "\n", "# TODO:add argument handling for windowing items", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "nm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "node", "=", "self", ".", "nm", ".", "get_node", "(", "node_id", ")", "\n", "if", "node", "!=", "None", ":", "\n", "           ", "return", "node", ",", "200", "\n", "", "else", ":", "\n", "            ", "return", "\"Node {} not found\"", ".", "format", "(", "node_id", ")", ",", "404", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.put": [[29, 48], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "node.Node.Node.nm.get_node", "node.Node.Node.nm.authorize", "node.Node.Node.nm.control", "node.Node.Node.nm.get_node"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_node", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.control", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_node"], ["", "", "def", "put", "(", "self", ",", "node_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "parser", ".", "add_argument", "(", "\"control\"", ",", "location", "=", "'args'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "nm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "node", "=", "self", ".", "nm", ".", "get_node", "(", "node_id", ")", "\n", "if", "node", "==", "None", ":", "\n", "            ", "return", "\"{} node not found\"", ".", "format", "(", "node_id", ")", ",", "404", "\n", "\n", "", "if", "\"control\"", "in", "args", ":", "\n", "            ", "result", "=", "self", ".", "nm", ".", "control", "(", "args", "[", "\"control\"", "]", ",", "node_id", ")", "\n", "if", "result", "is", "True", ":", "\n", "                ", "return", "self", ".", "nm", ".", "get_node", "(", "\"all\"", ")", ",", "202", "\n", "", "else", ":", "\n", "                ", "return", "\"Failed to control:{}\"", ".", "format", "(", "args", "[", "\"control\"", "]", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete": [[49, 66], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "node.Node.Node.nm.get_node", "node.Node.Node.nm.control", "node.Node.Node.nm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_node", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.control", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "", "", "def", "delete", "(", "self", ",", "node_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "nm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "node", "=", "self", ".", "nm", ".", "get_node", "(", "node_id", ")", "\n", "if", "node", "==", "None", ":", "\n", "            ", "return", "\"{} node not found\"", ".", "format", "(", "node_id", ")", ",", "404", "\n", "\n", "", "result", "=", "self", ".", "nm", ".", "control", "(", "\"stop\"", ",", "node_id", ")", "\n", "if", "result", "is", "True", ":", "\n", "            ", "return", "job", ",", "202", "\n", "", "else", ":", "\n", "                ", "return", "\"Fail to stop node {}\"", ".", "format", "(", "node_id", ")", ",", "400", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.errors.ObservedErrors.__init__": [[13, 17], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "\n", "super", "(", "ObservedErrors", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.errors.ObservedErrors.get": [[18, 43], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "errors.ObservedErrors.sm.get_space", "errors.ObservedErrors.get_completions", "errors.sort", "errors.ObservedErrors.sm.authorize", "int", "errors.ObservedErrors.get_train_epoch", "errors.ObservedErrors.get_errors", "errors.ObservedErrors.get_errors", "errors.ObservedErrors.get_search_order", "errors.append", "operator.itemgetter"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_train_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_search_order", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "404", "\n", "\n", "", "errors", "=", "[", "]", "\n", "for", "c_id", "in", "space", ".", "get_completions", "(", ")", ":", "\n", "            ", "c_id", "=", "int", "(", "c_id", ")", "\n", "err", "=", "{", "\"id\"", ":", "c_id", "}", "\n", "err", "[", "'num_epochs'", "]", "=", "space", ".", "get_train_epoch", "(", "c_id", ")", "\n", "err", "[", "\"valid_error\"", "]", "=", "space", ".", "get_errors", "(", "c_id", ",", "error_type", "=", "'valid'", ")", "\n", "err", "[", "\"test_error\"", "]", "=", "space", ".", "get_errors", "(", "c_id", ",", "error_type", "=", "'test'", ")", "\n", "err", "[", "\"order\"", "]", "=", "space", ".", "get_search_order", "(", "c_id", ")", "\n", "\n", "errors", ".", "append", "(", "err", ")", "\n", "", "errors", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "'test_error'", ")", ")", "\n", "\n", "return", "errors", ",", "200", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.grid.Grid.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "super", "(", "Grid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.grid.Grid.get": [[15, 71], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "grid.Grid.sm.get_space", "grid.Grid.sm.authorize", "range", "grid.Grid.get_size", "grid.Grid.get_param_vectors().tolist", "all_items.append", "grid.Grid.get_candidates", "int", "grid[].append", "grid.Grid.get_param_vectors().tolist", "candidates.append", "grid.Grid.get_completions", "grid.Grid.get_param_vectors", "float", "int", "grid[].append", "grid.Grid.get_param_vectors().tolist", "completions.append", "grid.Grid.get_param_vectors().tolist", "int", "grid.Grid.get_param_vectors", "float", "int", "grid[].append", "int", "grid[].append", "int", "grid.Grid.get_param_vectors", "float", "grid.Grid.get_param_vectors", "float", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_size", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors"], ["", "def", "get", "(", "self", ",", "space_id", ",", "sample_id", ")", ":", "\n", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "if", "sample_id", "==", "'all'", ":", "\n", "            ", "all_items", "=", "[", "]", "\n", "for", "c_id", "in", "range", "(", "space", ".", "get_size", "(", ")", ")", ":", "\n", "                ", "grid", "=", "{", "\"id\"", ":", "int", "(", "c_id", ")", "}", "\n", "grid", "[", "\"values\"", "]", "=", "[", "]", "\n", "for", "v", "in", "space", ".", "get_param_vectors", "(", "int", "(", "c_id", ")", ")", ".", "tolist", "(", ")", ":", "\n", "                    ", "grid", "[", "\"values\"", "]", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "all_items", ".", "append", "(", "grid", ")", "\n", "\n", "", "return", "all_items", ",", "200", "\n", "\n", "", "elif", "sample_id", "==", "'candidates'", ":", "\n", "            ", "candidates", "=", "[", "]", "\n", "for", "c_id", "in", "space", ".", "get_candidates", "(", ")", ":", "\n", "                ", "grid", "=", "{", "\"id\"", ":", "int", "(", "c_id", ")", "}", "\n", "grid", "[", "\"values\"", "]", "=", "[", "]", "\n", "for", "v", "in", "space", ".", "get_param_vectors", "(", "int", "(", "c_id", ")", ")", ".", "tolist", "(", ")", ":", "\n", "                    ", "grid", "[", "\"values\"", "]", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "candidates", ".", "append", "(", "grid", ")", "\n", "\n", "", "return", "candidates", ",", "200", "\n", "\n", "", "elif", "sample_id", "==", "'completions'", ":", "\n", "            ", "completions", "=", "[", "]", "\n", "for", "c_id", "in", "space", ".", "get_completions", "(", ")", ":", "\n", "                ", "grid", "=", "{", "\"id\"", ":", "int", "(", "c_id", ")", "}", "\n", "grid", "[", "\"values\"", "]", "=", "[", "]", "\n", "for", "v", "in", "space", ".", "get_param_vectors", "(", "int", "(", "c_id", ")", ")", ".", "tolist", "(", ")", ":", "\n", "                    ", "grid", "[", "\"values\"", "]", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "completions", ".", "append", "(", "grid", ")", "\n", "\n", "", "return", "completions", ",", "200", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "grid", "=", "{", "\"id\"", ":", "int", "(", "sample_id", ")", "}", "\n", "grid", "[", "\"values\"", "]", "=", "[", "]", "\n", "for", "v", "in", "space", ".", "get_param_vectors", "(", "int", "(", "sample_id", ")", ")", ".", "tolist", "(", ")", ":", "\n", "                    ", "grid", "[", "\"values\"", "]", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "return", "grid", ",", "200", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "return", "\"Getting grid failed: {}\"", ".", "format", "(", "ex", ")", ",", "404", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.completions.Completions.__init__": [[11, 15], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "\n", "super", "(", "Completions", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.completions.Completions.get": [[16, 34], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "completions.Completions.sm.get_space", "completions.Completions.get_completions", "completions.Completions.sm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "get", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "result", "=", "{", "}", "\n", "\n", "# TODO:min_epoch support", "\n", "result", "[", "\"completions\"", "]", "=", "space", ".", "get_completions", "(", ")", "\n", "\n", "return", "result", ",", "200", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.billboard.Billboard.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "rm", "=", "kwargs", "[", "'resource_manager'", "]", "\n", "super", "(", "Billboard", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.billboard.Billboard.get": [[15, 26], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "billboard.Billboard.rm.authorize", "billboard.Billboard.rm.get_spec", "billboard.Billboard.rm.get_urls"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.get_spec", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.get_urls"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "rm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "                ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "return", "{", "\"spec\"", ":", "self", ".", "rm", ".", "get_spec", "(", ")", ",", "\"urls\"", ":", "self", ".", "rm", ".", "get_urls", "(", ")", "}", ",", "200", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "return", "\"Unsupported client type.\"", ",", "405", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.hparams.HyperparamVector.__init__": [[11, 15], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "\n", "super", "(", "HyperparamVector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.hparams.HyperparamVector.get": [[16, 64], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "hparams.HyperparamVector.sm.get_space", "hparams.HyperparamVector.sm.authorize", "range", "hparams.HyperparamVector.get_size", "hparams.HyperparamVector.get_hpv_dict", "all_items.append", "hparams.HyperparamVector.get_candidates", "int", "hparams.HyperparamVector.get_hpv_dict", "candidates.append", "hparams.HyperparamVector.get_completions", "int", "hparams.HyperparamVector.get_hpv_dict", "completions.append", "hparams.HyperparamVector.get_hpv_dict", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_size", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict"], ["", "def", "get", "(", "self", ",", "space_id", ",", "sample_id", ")", ":", "\n", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "parser", ".", "add_argument", "(", "\"\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "if", "sample_id", "==", "'all'", ":", "\n", "            ", "all_items", "=", "[", "]", "\n", "for", "c_id", "in", "range", "(", "space", ".", "get_size", "(", ")", ")", ":", "\n", "                ", "grid", "=", "{", "\"id\"", ":", "c_id", "}", "\n", "grid", "[", "\"hparams\"", "]", "=", "space", ".", "get_hpv_dict", "(", "int", "(", "c_id", ")", ")", "\n", "all_items", ".", "append", "(", "grid", ")", "\n", "\n", "", "return", "all_items", ",", "200", "\n", "\n", "", "elif", "sample_id", "==", "'candidates'", ":", "\n", "            ", "candidates", "=", "[", "]", "\n", "for", "c_id", "in", "space", ".", "get_candidates", "(", ")", ":", "\n", "                ", "hpv", "=", "{", "\"id\"", ":", "c_id", "}", "\n", "hpv", "[", "\"hparams\"", "]", "=", "space", ".", "get_hpv_dict", "(", "int", "(", "c_id", ")", ")", "\n", "candidates", ".", "append", "(", "hpv", ")", "\n", "\n", "", "return", "candidates", ",", "200", "\n", "\n", "", "elif", "sample_id", "==", "'completions'", ":", "\n", "            ", "completions", "=", "[", "]", "\n", "for", "c_id", "in", "space", ".", "get_completions", "(", ")", ":", "\n", "                ", "hpv", "=", "{", "\"id\"", ":", "c_id", "}", "\n", "hpv", "[", "\"hparams\"", "]", "=", "space", ".", "get_hpv_dict", "(", "int", "(", "c_id", ")", ")", "\n", "completions", ".", "append", "(", "hpv", ")", "\n", "\n", "", "return", "completions", ",", "200", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "hpv", "=", "{", "\"id\"", ":", "sample_id", "}", "\n", "hpv", "[", "\"hparams\"", "]", "=", "space", ".", "get_hpv_dict", "(", "int", "(", "sample_id", ")", ")", "\n", "return", "hpv", ",", "200", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "return", "\"Getting vector failed: {}\"", ".", "format", "(", "ex", ")", ",", "404", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.candidates.Candidates.__init__": [[11, 15], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "sm", "=", "kwargs", "[", "'space_manager'", "]", "\n", "\n", "super", "(", "Candidates", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.candidates.Candidates.get": [[16, 33], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "candidates.Candidates.sm.get_space", "candidates.Candidates.get_candidates", "candidates.Candidates.sm.authorize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize"], ["", "def", "get", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "result", "=", "{", "}", "\n", "\n", "result", "[", "\"candidates\"", "]", "=", "space", ".", "get_candidates", "(", ")", "\n", "\n", "return", "result", ",", "200", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.__init__": [[11, 14], ["flask_restful.Resource.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "jm", "=", "kwargs", "[", "'job_manager'", "]", "\n", "super", "(", "Jobs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.post": [[15, 37], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "flask.request.get_json", "jobs.Jobs.jm.add", "jobs.Jobs.jm.authorize", "debug", "debug", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "post", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "jm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "                ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "job_req", "=", "request", ".", "get_json", "(", "force", "=", "True", ")", "\n", "# TODO:check whether 'surrogate', 'hp_cfg' existed", "\n", "\n", "job_id", "=", "self", ".", "jm", ".", "add", "(", "job_req", ")", "\n", "if", "job_id", "==", "None", ":", "\n", "                ", "debug", "(", "\"Job creation failed: {}\"", ".", "format", "(", "job_req", ")", ")", "\n", "return", "\"Job add failed!\"", ",", "400", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"Job creation accepted.\"", ")", "\n", "return", "{", "\"job_id\"", ":", "job_id", "}", ",", "201", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "debug", "(", "\"Job creation failed with {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "\"Job creation failed: {}\"", ".", "format", "(", "ex", ")", ",", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get": [[38, 48], ["flask_restful.reqparse.RequestParser", "flask_restful.reqparse.RequestParser.add_argument", "flask_restful.reqparse.RequestParser.parse_args", "jobs.Jobs.jm.sync_result", "jobs.Jobs.jm.authorize", "jobs.Jobs.jm.get_all_jobs"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.sync_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_all_jobs"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "# TODO:add argument handling for windowing items", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "jm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "self", ".", "jm", ".", "sync_result", "(", ")", "# XXX: A better way may be existed", "\n", "return", "self", ".", "jm", ".", "get_all_jobs", "(", ")", ",", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_hpo.RemoteOptimizerConnector.__init__": [[15, 23], ["xoa.connectors.remote_job.RemoteJobConnector.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ip_addr", ",", "port", ",", "cred", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "ip_addr", "=", "ip_addr", "\n", "self", ".", "port", "=", "port", "\n", "\n", "url", "=", "\"http://{}:{}\"", ".", "format", "(", "ip_addr", ",", "port", ")", "\n", "\n", "super", "(", "RemoteOptimizerConnector", ",", "self", ")", ".", "__init__", "(", "url", ",", "cred", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_hpo.RemoteOptimizerConnector.validate": [[24, 35], ["remote_hpo.RemoteOptimizerConnector.get_profile", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.get_profile", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "profile", "=", "self", ".", "get_profile", "(", ")", "\n", "if", "profile", "and", "\"spec\"", "in", "profile", "and", "\"node_type\"", "in", "profile", "[", "\"spec\"", "]", ":", "\n", "                ", "if", "profile", "[", "\"spec\"", "]", "[", "\"node_type\"", "]", "==", "\"BO Node\"", ":", "\n", "                    ", "return", "True", "\n", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Validation failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.__init__": [[14, 26], ["xoa.commons.connectors.RemoteConnectorPrototype.__init__", "debug", "remote_space.RemoteParameterSpaceConnector.get_status", "remote_space.RemoteParameterSpaceConnector.get_status", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_status"], ["    ", "def", "__init__", "(", "self", ",", "url", ",", "credential", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "RemoteParameterSpaceConnector", ",", "self", ")", ".", "__init__", "(", "url", ",", "credential", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_samples", "=", "None", "\n", "self", ".", "hp_config", "=", "None", "\n", "self", ".", "space_id", "=", "None", "\n", "debug", "(", "\"Getting parameter space status...\"", ")", "\n", "space", "=", "self", ".", "get_status", "(", ")", "\n", "while", "space", "==", "None", ":", "\n", "            ", "space", "=", "self", ".", "get_status", "(", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_status": [[27, 46], ["remote_space.RemoteParameterSpaceConnector.conn.request_get", "json.loads", "xoa.commons.hp_cfg.HyperparameterConfiguration", "ValueError", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "get_status", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "                ", "space", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "self", ".", "num_samples", "=", "space", "[", "'num_samples'", "]", "\n", "self", ".", "hp_config", "=", "HyperparameterConfiguration", "(", "space", "[", "\"hp_config\"", "]", ")", "\n", "self", ".", "space_id", "=", "space", "[", "'space_id'", "]", "\n", "\n", "return", "space", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Connection failed with code {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "debug", "(", "\"Getting remote space: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_space_id": [[47, 53], ["remote_space.RemoteParameterSpaceConnector.get_status", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_status"], ["", "", "def", "get_space_id", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "space_id", "==", "None", ":", "\n", "            ", "while", "self", ".", "get_status", "(", ")", "==", "None", ":", "\n", "                ", "time", ".", "sleep", "(", "3", ")", "\n", "\n", "", "", "return", "self", ".", "space_id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_num_samples": [[54, 60], ["remote_space.RemoteParameterSpaceConnector.get_status", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_status"], ["", "def", "get_num_samples", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_samples", "==", "None", ":", "\n", "            ", "while", "self", ".", "get_status", "(", ")", "==", "None", ":", "\n", "                ", "time", ".", "sleep", "(", "3", ")", "\n", "\n", "", "", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_candidates": [[61, 71], ["remote_space.RemoteParameterSpaceConnector.conn.request_get", "json.loads", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get"], ["", "def", "get_candidates", "(", "self", ")", ":", "\n", "        ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/candidates/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "            ", "result", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "return", "result", "[", "\"candidates\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Connection failed: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_completions": [[72, 82], ["remote_space.RemoteParameterSpaceConnector.conn.request_get", "json.loads", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get"], ["", "", "def", "get_completions", "(", "self", ",", "min_epoch", "=", "0", ")", ":", "\n", "        ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/completions/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "            ", "result", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "return", "result", "[", "\"completions\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Connection failed: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.validate": [[83, 96], ["remote_space.RemoteParameterSpaceConnector.get_candidates", "remote_space.RemoteParameterSpaceConnector.get_completions"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions"], ["", "", "def", "validate", "(", "self", ",", "id", ")", ":", "\n", "        ", "if", "id", "==", "'all'", ":", "\n", "            ", "return", "True", "\n", "", "elif", "id", "==", "'candidates'", ":", "\n", "            ", "return", "True", "\n", "", "elif", "id", "==", "'completions'", ":", "\n", "            ", "return", "True", "\n", "", "elif", "id", "in", "self", ".", "get_candidates", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "elif", "id", "in", "self", ".", "get_completions", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_param_vectors": [[97, 119], ["remote_space.RemoteParameterSpaceConnector.conn.request_get", "remote_space.RemoteParameterSpaceConnector.validate", "ValueError", "json.loads", "ValueError", "type", "returns.append", "returns.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_param_vectors", "(", "self", ",", "id", ",", "min_epoch", "=", "0", ")", ":", "\n", "\n", "# TODO:support min_epoch", "\n", "        ", "if", "self", ".", "validate", "(", "id", ")", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid id: {}\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/grid/{}/\"", ".", "format", "(", "id", ")", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "            ", "grid", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "returns", "=", "[", "]", "\n", "if", "type", "(", "grid", ")", "==", "list", ":", "\n", "                ", "for", "g", "in", "grid", ":", "\n", "                    ", "returns", ".", "append", "(", "g", "[", "'values'", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "returns", ".", "append", "(", "grid", "[", "'values'", "]", ")", "\n", "#debug(\"grid of {}: {}\".format(id, returns))", "\n", "", "return", "returns", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Connection failed: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_hpv_dict": [[120, 140], ["remote_space.RemoteParameterSpaceConnector.conn.request_get", "remote_space.RemoteParameterSpaceConnector.validate", "ValueError", "json.loads", "ValueError", "type", "returns.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_hpv_dict", "(", "self", ",", "id", ")", ":", "\n", "        ", "if", "self", ".", "validate", "(", "id", ")", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid id: {}\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/vectors/{}/\"", ".", "format", "(", "id", ")", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "            ", "vec", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "returns", "=", "[", "]", "\n", "if", "type", "(", "vec", ")", "==", "list", ":", "\n", "                ", "for", "v", "in", "vec", ":", "\n", "                    ", "returns", ".", "append", "(", "v", "[", "'hparams'", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "returns", "=", "vec", "[", "'hparams'", "]", "\n", "#debug(\"vector of {}: {}\".format(id, returns))", "\n", "", "return", "returns", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Connection failed: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_error": [[141, 169], ["remote_space.RemoteParameterSpaceConnector.conn.request_get", "json.loads", "ValueError", "ValueError", "type", "errors.append", "remote_space.RemoteParameterSpaceConnector.get_completions", "errors.append", "orders.append", "orders.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_error", "(", "self", ",", "id", ")", ":", "\n", "        ", "resource", "=", "\"/errors/\"", "\n", "if", "id", "!=", "'completions'", ":", "\n", "            ", "if", "not", "id", "in", "self", ".", "get_completions", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid id: {}\"", ".", "format", "(", "id", ")", ")", "\n", "", "else", ":", "\n", "                ", "resource", "=", "\"/errors/{}/\"", ".", "format", "(", "id", ")", "\n", "\n", "", "", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "resource", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "            ", "err", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "errors", "=", "[", "]", "\n", "orders", "=", "[", "]", "\n", "if", "type", "(", "err", ")", "==", "list", ":", "\n", "                ", "for", "e", "in", "err", ":", "\n", "                    ", "errors", ".", "append", "(", "e", "[", "'test_error'", "]", ")", "\n", "if", "'order'", "in", "e", ":", "\n", "                        ", "orders", ".", "append", "(", "e", "[", "'order'", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "errors", ".", "append", "(", "err", "[", "'test_error'", "]", ")", "\n", "if", "'order'", "in", "e", ":", "\n", "                    ", "orders", ".", "append", "(", "e", "[", "'order'", "]", ")", "\n", "#debug(\"error of {}: {}\".format(id, returns))", "\n", "", "", "return", "errors", ",", "orders", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Connection failed: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.update_error": [[170, 189], ["remote_space.RemoteParameterSpaceConnector.conn.request_put", "remote_space.RemoteParameterSpaceConnector.validate", "ValueError", "json.loads", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_put", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate"], ["", "", "def", "update_error", "(", "self", ",", "id", ",", "error", ",", "num_epochs", "=", "None", ",", "error_type", "=", "'test'", ")", ":", "\n", "\n", "        ", "if", "self", ".", "validate", "(", "id", ")", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid id: {}\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "", "args", "=", "{", "\n", "\"value\"", ":", "error", ",", "\n", "'error_type'", ":", "error_type", ",", "\n", "\"num_epochs\"", ":", "num_epochs", "\n", "}", "\n", "resp", "=", "self", ".", "conn", ".", "request_put", "(", "\"/errors/{}/\"", ".", "format", "(", "id", ")", ",", "args", "=", "args", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'202'", ":", "\n", "            ", "err", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid space status: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.expand": [[190, 206], ["json.dumps", "remote_space.RemoteParameterSpaceConnector.conn.request_post", "remote_space.RemoteParameterSpaceConnector.validate", "ValueError", "json.loads", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate"], ["", "", "def", "expand", "(", "self", ",", "hpv", ")", ":", "\n", "\n", "        ", "if", "self", ".", "validate", "(", "id", ")", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid id: {}\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "", "args", "=", "{", "\"value\"", ":", "error", "}", "\n", "body", "=", "json", ".", "dumps", "(", "hpv", ")", "\n", "resp", "=", "self", ".", "conn", ".", "request_post", "(", "\"/\"", ",", "args", "=", "{", "}", ",", "body", "=", "body", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'202'", ":", "\n", "            ", "err", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "\n", "return", "True", "# FIXME: return index", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid space status: {}\"", ".", "format", "(", "status", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_train.RemoteTrainConnector.__init__": [[15, 18], ["xoa.connectors.remote_job.RemoteJobConnector.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "url", ",", "hp_config", ",", "cred", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RemoteTrainConnector", ",", "self", ")", ".", "__init__", "(", "url", ",", "cred", ",", "**", "kwargs", ")", "\n", "self", ".", "hp_config", "=", "hp_config", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_train.RemoteTrainConnector.validate": [[19, 40], ["remote_train.RemoteTrainConnector.get_profile", "error", "error", "remote_train.RemoteTrainConnector.get_config", "remote_train.RemoteTrainConnector.compare_config", "remote_train.RemoteTrainConnector.hp_config.get_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.get_profile", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_train.RemoteTrainConnector.compare_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "profile", "=", "self", ".", "get_profile", "(", ")", "\n", "if", "profile", "==", "None", ":", "\n", "                ", "error", "(", "\"Getting the profile of node failed\"", ")", "\n", "return", "False", "\n", "", "elif", "\"spec\"", "in", "profile", "and", "\"node_type\"", "in", "profile", "[", "\"spec\"", "]", ":", "\n", "#debug(\"Remote worker profile: {}\".format(profile[\"spec\"]))", "\n", "                ", "if", "profile", "[", "\"spec\"", "]", "[", "\"node_type\"", "]", "==", "\"Training Node\"", ":", "\n", "                    ", "config", "=", "self", ".", "get_config", "(", ")", "\n", "if", "\"run_config\"", "in", "config", "and", "\"target_func\"", "in", "config", "[", "\"run_config\"", "]", ":", "\n", "                        ", "if", "config", "[", "\"run_config\"", "]", "[", "\"target_func\"", "]", "==", "'surrogate'", ":", "\n", "                            ", "return", "True", "# skip parameter validation process", "\n", "", "", "if", "\"hp_config\"", "in", "config", ":", "\n", "                        ", "return", "self", ".", "compare_config", "(", "self", ".", "hp_config", ".", "get_dict", "(", ")", ",", "\n", "config", "[", "\"hp_config\"", "]", ")", "\n", "\n", "", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "error", "(", "\"Validation of remote node failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_train.RemoteTrainConnector.compare_config": [[41, 56], ["hps.keys", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "compare_config", "(", "self", ",", "origin", ",", "target", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "\"hyperparams\"", "in", "origin", "and", "\"hyperparams\"", "in", "target", ":", "\n", "                ", "hps", "=", "origin", "[", "\"hyperparams\"", "]", "\n", "ths", "=", "target", "[", "\"hyperparams\"", "]", "\n", "# XXX:Check hyperparameter name only", "\n", "for", "k", "in", "hps", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "not", "k", "in", "ths", ":", "\n", "                        ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Configuration comparision failed: {}\\n{}\\n{}\"", ".", "format", "(", "ex", ",", "origin", ",", "target", ")", ")", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_train.RemoteTrainConnector.create_job": [[57, 81], ["copy.copy", "hyperparams.keys", "super().create_job", "remote_train.RemoteTrainConnector.hp_config.get_dict", "config.keys", "warn", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.create_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "create_job", "(", "self", ",", "hyperparams", ",", "config", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "#debug(\"RemoteTrainConnector tries to create a training job.\")", "\n", "            ", "job_desc", "=", "copy", ".", "copy", "(", "self", ".", "hp_config", ".", "get_dict", "(", ")", ")", "\n", "# update body by hyperparams", "\n", "for", "hp", "in", "hyperparams", ".", "keys", "(", ")", ":", "\n", "                ", "value", "=", "hyperparams", "[", "hp", "]", "\n", "if", "hp", "in", "job_desc", "[", "'hyperparams'", "]", ":", "\n", "                    ", "job_desc", "[", "'hyperparams'", "]", "[", "hp", "]", "=", "value", "\n", "#debug(\"Type of {}: {}\".format(hp, type(value)))", "\n", "", "else", ":", "\n", "                    ", "warn", "(", "\"{} is not the valid parameter of the given objective function\"", ".", "format", "(", "hp", ")", ")", "\n", "return", "None", "\n", "\n", "", "", "if", "config", "is", "not", "None", ":", "\n", "                ", "for", "key", "in", "config", ".", "keys", "(", ")", ":", "\n", "                    ", "job_desc", "[", "'config'", "]", "[", "key", "]", "=", "config", "[", "key", "]", "\n", "#debug(\"Type of {}: {}\".format(key, type(config[key])))", "\n", "#debug(\"Job description: {}\".format(job_desc))", "\n", "", "", "return", "super", "(", "RemoteTrainConnector", ",", "self", ")", ".", "create_job", "(", "job_desc", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Create job failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.__init__": [[16, 20], ["xoa.connectors.RemoteConnectorPrototype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "url", ",", "credential", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "wait_time", "=", "3", "\n", "\n", "super", "(", "RemoteJobConnector", ",", "self", ")", ".", "__init__", "(", "url", ",", "credential", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.get_profile": [[21, 35], ["remote_job.RemoteJobConnector.conn.request_get", "json.loads", "ValueError", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_profile", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "                ", "profile", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "return", "profile", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Connection failed with {}\"", ".", "format", "(", "resp", "[", "'headers'", "]", ")", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "debug", "(", "\"Getting profile failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.get_config": [[36, 50], ["remote_job.RemoteJobConnector.conn.request_get", "json.loads", "ValueError", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/config/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "                ", "config", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "return", "config", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Connection failed: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Getting configuration failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.get_all_jobs": [[51, 60], ["remote_job.RemoteJobConnector.conn.request_get", "json.loads", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get"], ["", "", "def", "get_all_jobs", "(", "self", ")", ":", "\n", "        ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/jobs/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "            ", "jobs", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "return", "jobs", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Connection error. worker status code: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.get_job": [[61, 81], ["remote_job.RemoteJobConnector.conn.request_get", "json.loads", "ValueError", "ValueError", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "get_job", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "retry_count", "=", "0", "\n", "while", "True", ":", "\n", "            ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/jobs/{}/\"", ".", "format", "(", "job_id", ")", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n", "                ", "job", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "return", "job", "\n", "", "elif", "status", "==", "'204'", ":", "\n", "                ", "return", "None", "# if job_id is active, no active job is available now", "\n", "", "elif", "status", "==", "'500'", ":", "\n", "                ", "retry_count", "+=", "1", "\n", "if", "retry_count", ">", "self", ".", "num_retry", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Connection error to {} job. status code: {}\"", ".", "format", "(", "job_id", ",", "status", ")", ")", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"Connection failed due to server error. retry {}/{}\"", ".", "format", "(", "retry_count", ",", "self", ".", "num_retry", ")", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Connection error to {} job. status code: {}\"", ".", "format", "(", "job_id", ",", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.check_active": [[82, 88], ["remote_job.RemoteJobConnector.get_job"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job"], ["", "", "", "def", "check_active", "(", "self", ")", ":", "\n", "        ", "job", "=", "self", ".", "get_job", "(", "\"active\"", ")", "# job will be None when no job is working", "\n", "if", "job", "==", "None", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.create_job": [[89, 103], ["json.dumps", "remote_job.RemoteJobConnector.conn.request_post", "json.loads", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post"], ["", "", "def", "create_job", "(", "self", ",", "job_desc", ")", ":", "\n", "\n", "        ", "body", "=", "json", ".", "dumps", "(", "job_desc", ")", "\n", "resp", "=", "self", ".", "conn", ".", "request_post", "(", "\"/jobs/\"", ",", "args", "=", "{", "}", ",", "body", "=", "body", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'201'", ":", "\n", "            ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "#debug(\"Job {} is created remotely.\".format(js['job_id']))", "\n", "return", "js", "[", "'job_id'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Job creation error. code: {}, {}\"", ".", "format", "(", "status", ",", "resp", "[", "'body'", "]", ")", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.start": [[104, 149], ["remote_job.RemoteJobConnector.get_job", "warn", "debug", "time.sleep", "remote_job.RemoteJobConnector.stop", "remote_job.RemoteJobConnector.conn.request_put", "warn", "time.sleep", "debug", "json.loads", "ValueError", "warn", "time.sleep", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_put", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "start", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "retry_count", "=", "0", "\n", "try", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "active_job", "=", "self", ".", "get_job", "(", "\"active\"", ")", "\n", "if", "active_job", "!=", "None", ":", "\n", "                    ", "debug", "(", "\"Worker is busy. to start: {}, working: {}\"", ".", "format", "(", "job_id", ",", "active_job", "[", "'job_id'", "]", ")", ")", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "stopped", "=", "self", ".", "stop", "(", "active_job", "[", "'job_id'", "]", ")", "\n", "retry_count", "+=", "1", "\n", "if", "stopped", "==", "True", ":", "\n", "                        ", "continue", "\n", "", "if", "retry_count", ">", "self", ".", "num_retry", ":", "\n", "                        ", "warn", "(", "\"Starting {} job failed.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                        ", "time", ".", "sleep", "(", "self", ".", "wait_time", ")", "\n", "debug", "(", "\"Retry {}/{} after waiting {} sec\"", ".", "format", "(", "retry_count", ",", "self", ".", "num_retry", ",", "self", ".", "wait_time", ")", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "ctrl", "=", "{", "\"control\"", ":", "\"start\"", "}", "\n", "resp", "=", "self", ".", "conn", ".", "request_put", "(", "\"/jobs/{}/\"", ".", "format", "(", "job_id", ")", ",", "args", "=", "ctrl", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'202'", ":", "\n", "                        ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "#if 'hyperparams' in js:", "\n", "#    debug(\"Current training item: {}\".format(js['hyperparams']))", "\n", "#else:", "\n", "#    debug(\"Current HPO item: {}\".format(js))", "\n", "return", "True", "\n", "", "elif", "status", "==", "'500'", ":", "\n", "                        ", "retry_count", "+=", "1", "\n", "if", "retry_count", ">", "self", ".", "num_retry", ":", "\n", "                            ", "warn", "(", "\"Starting {} job failed.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                            ", "time", ".", "sleep", "(", "self", ".", "wait_time", ")", "\n", "debug", "(", "\"Retry {}/{}...\"", ".", "format", "(", "retry_count", ",", "self", ".", "num_retry", ",", "self", ".", "wait_time", ")", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Invalid worker status: {}\"", ".", "format", "(", "status", ")", ")", "\n", "", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Starting job {} is failed\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.pause": [[150, 170], ["remote_job.RemoteJobConnector.get_job", "warn", "remote_job.RemoteJobConnector.conn.request_put", "warn", "json.loads", "debug", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_put", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "pause", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "active_job", "=", "self", ".", "get_job", "(", "\"active\"", ")", "\n", "if", "active_job", "is", "None", ":", "\n", "                ", "warn", "(", "\"Job {} can not be paused.\"", ".", "format", "(", "active_job", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "ctrl", "=", "{", "\"control\"", ":", "\"pause\"", "}", "\n", "resp", "=", "self", ".", "conn", ".", "request_put", "(", "\"/jobs/{}/\"", ".", "format", "(", "job_id", ")", ",", "args", "=", "ctrl", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'202'", ":", "\n", "                    ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "debug", "(", "\"paused job: {}\"", ".", "format", "(", "js", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid worker status: {}\"", ".", "format", "(", "status", ")", ")", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Pausing job {} is failed\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.resume": [[171, 191], ["remote_job.RemoteJobConnector.get_job", "warn", "remote_job.RemoteJobConnector.conn.request_put", "warn", "json.loads", "debug", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_put", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "resume", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "active_job", "=", "self", ".", "get_job", "(", "\"active\"", ")", "\n", "if", "active_job", "is", "not", "None", "and", "active_job", "[", "'job_id'", "]", "!=", "job_id", ":", "\n", "                ", "warn", "(", "\"Job {} can not be resumed.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "ctrl", "=", "{", "\"control\"", ":", "\"resume\"", "}", "\n", "resp", "=", "self", ".", "conn", ".", "request_put", "(", "\"/jobs/{}/\"", ".", "format", "(", "job_id", ")", ",", "args", "=", "ctrl", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'202'", ":", "\n", "                    ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "debug", "(", "\"resumed job: {}\"", ".", "format", "(", "js", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid worker status: {}\"", ".", "format", "(", "status", ")", ")", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Resuming job {} is failed\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.stop": [[192, 224], ["remote_job.RemoteJobConnector.get_job", "warn", "remote_job.RemoteJobConnector.conn.request_delete", "datetime.datetime.now", "warn", "time.sleep", "remote_job.RemoteJobConnector.stop", "json.loads", "debug", "range", "time.sleep", "remote_job.RemoteJobConnector.get_job", "debug", "ValueError", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "stop", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "active_job", "=", "self", ".", "get_job", "(", "\"active\"", ")", "\n", "if", "active_job", "is", "not", "None", "and", "active_job", "[", "'job_id'", "]", "!=", "job_id", ":", "\n", "                ", "warn", "(", "\"Job {} can not be stopped.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "resp", "=", "self", ".", "conn", ".", "request_delete", "(", "\"/jobs/{}/\"", ".", "format", "(", "active_job", "[", "'job_id'", "]", ")", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "now", "=", "dt", ".", "datetime", ".", "now", "(", ")", "\n", "if", "status", "==", "'200'", ":", "\n", "                    ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "debug", "(", "\"Stop request to job {} is accepted at {}.\"", ".", "format", "(", "js", "[", "'job_id'", "]", ",", "now", ")", ")", "\n", "# XXX: waiting until the job finished!", "\n", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "                        ", "time", ".", "sleep", "(", "3", ")", "\n", "job", "=", "self", ".", "get_job", "(", "js", "[", "'job_id'", "]", ")", "\n", "if", "job", "[", "'status'", "]", "==", "'processing'", ":", "\n", "                            ", "debug", "(", "\"Waiting until {} is to be terminated...\"", ")", "\n", "", "else", ":", "\n", "                            ", "break", "\n", "", "", "return", "True", "\n", "", "elif", "status", "==", "'404'", ":", "\n", "                    ", "debug", "(", "\"No job {} found to stop at {}.\"", ".", "format", "(", "job_id", ",", "now", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid worker status: {} at {}\"", ".", "format", "(", "status", ",", "now", ")", ")", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "# FIXME: When stopping fails, system shutdown may be required. ", "\n", "            ", "warn", "(", "\"Stopping job {} is failed\"", ".", "format", "(", "job_id", ")", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "return", "self", ".", "stop", "(", "job_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.register.MasterServerConnector.__init__": [[12, 15], ["xoa.connectors.RemoteConnectorPrototype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_url", ",", "credential", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "outcome_domain", "=", "\"gmail.com\"", "\n", "return", "super", "(", "MasterServerConnector", ",", "self", ")", ".", "__init__", "(", "target_url", ",", "credential", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.register.MasterServerConnector.register": [[16, 42], ["register.MasterServerConnector.get_my_ip_addr", "json.dumps", "register.MasterServerConnector.conn.request_post", "debug", "json.loads", "debug", "json.loads", "debug", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.register.MasterServerConnector.get_my_ip_addr", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "register", "(", "self", ",", "port", ",", "node_type", ")", ":", "\n", "        ", "if", "node_type", "!=", "\"BO Node\"", "and", "node_type", "!=", "\"Training Node\"", ":", "\n", "            ", "debug", "(", "\"Invalid job type: {}\"", ".", "format", "(", "node_type", ")", ")", "\n", "return", "False", "\n", "\n", "", "ip_addr", "=", "self", ".", "get_my_ip_addr", "(", ")", "\n", "register_doc", "=", "{", "\"ip_address\"", ":", "ip_addr", ",", "\n", "\"port_num\"", ":", "port", ",", "\n", "\"node_type\"", ":", "node_type", "\n", "}", "\n", "body", "=", "json", ".", "dumps", "(", "register_doc", ")", "\n", "resp", "=", "self", ".", "conn", ".", "request_post", "(", "\"/nodes/\"", ",", "args", "=", "{", "}", ",", "body", "=", "body", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'201'", ":", "\n", "            ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "debug", "(", "\"Node {} registered properly.\"", ".", "format", "(", "js", "[", "'node_id'", "]", ")", ")", "\n", "return", "js", "[", "'node_id'", "]", "\n", "", "elif", "status", "==", "'200'", ":", "\n", "            ", "js", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n", "debug", "(", "\"Node {} already registered.\"", ".", "format", "(", "js", "[", "'node_id'", "]", ")", ")", "\n", "return", "js", "[", "'node_id'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Registeration error. status code: {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.register.MasterServerConnector.get_my_ip_addr": [[43, 49], ["socket.socket", "socket.socket.connect", "socket.socket.close", "socket.socket.getsockname"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.close"], ["", "def", "get_my_ip_addr", "(", "self", ")", ":", "\n", "        ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_DGRAM", ")", "\n", "s", ".", "connect", "(", "(", "self", ".", "outcome_domain", ",", "80", ")", ")", "\n", "r", "=", "s", ".", "getsockname", "(", ")", "[", "0", "]", "\n", "s", ".", "close", "(", ")", "\n", "return", "r", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.__init__.RemoteConnectorPrototype.__init__": [[12, 32], ["Connection", "base64.b64encode", "__init__.RemoteConnectorPrototype.credential.encode", "base64.b64encode.decode"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.cat_grid.CartesianGridSampler.__init__": [[11, 20], ["proto.SamplerProtype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Cartesian grid sampling'", "\n", "\n", "if", "'verification'", "in", "spec", "and", "spec", "[", "'verification'", "]", "==", "True", "and", "verifier", "!=", "None", ":", "\n", "            ", "self", ".", "set_verification", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_verification", "=", "False", "\n", "\n", "", "super", "(", "CartesianGridSampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "spec", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.cat_grid.CartesianGridSampler.generate": [[21, 69], ["time.time", "random.seed", "cat_grid.CartesianGridSampler.config.get_param_names", "len", "random.shuffle", "len", "debug", "info", "len", "range", "p_values.append", "list", "cat_grid.CartesianGridSampler.config.convert", "len", "range", "numpy.array", "cat_grid.CartesianGridSampler.config.get_range", "float", "p_v.append", "itertools.product", "cat_grid.CartesianGridSampler.config.convert", "len", "info", "time.time", "cat_grid.CartesianGridSampler.verify", "numpy.array.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "param_names", "=", "self", ".", "config", ".", "get_param_names", "(", ")", "\n", "n_dim", "=", "len", "(", "param_names", ")", "\n", "\n", "p_values", "=", "[", "]", "\n", "for", "p", "in", "param_names", ":", "\n", "            ", "n_p", "=", "len", "(", "self", ".", "config", ".", "get_range", "(", "p", ")", ")", "\n", "p_v", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_p", ")", ":", "\n", "                ", "v", "=", "float", "(", "i", "/", "(", "n_p", "-", "1", ")", ")", "\n", "p_v", ".", "append", "(", "v", ")", "\n", "", "p_values", ".", "append", "(", "p_v", ")", "\n", "\n", "", "cat_grid", "=", "[", "list", "(", "e", ")", "for", "e", "in", "product", "(", "*", "p_values", ")", "]", "\n", "\n", "random", ".", "shuffle", "(", "cat_grid", ")", "# shuffle grid order", "\n", "#debug(\"First item: {}\".format(cat_grid[0]))", "\n", "#debug(\"Second item: {}\".format(cat_grid[1]))", "\n", "\n", "self", ".", "num_samples", "=", "len", "(", "cat_grid", ")", "\n", "debug", "(", "\"Normalized value list for catesian product: {}\"", ".", "format", "(", "self", ".", "num_samples", ",", "p_values", ")", ")", "\n", "info", "(", "\"# of candidates generated by catesian product: {} ({:.1f} sec)\"", ".", "format", "(", "self", ".", "num_samples", ",", "time", ".", "time", "(", ")", "-", "s_t", ")", ")", "\n", "\n", "if", "self", ".", "set_verification", "==", "True", ":", "\n", "#debug(\"Original grid: {}\".format(cat_grid))            ", "\n", "            ", "hpv_list", "=", "self", ".", "config", ".", "convert", "(", "'grid'", ",", "'hpv_list'", ",", "cat_grid", ")", "\n", "n_hpvs", "=", "len", "(", "hpv_list", ")", "\n", "v_grid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_hpvs", ")", ":", "\n", "                ", "hpv", "=", "hpv_list", "[", "i", "]", "\n", "g", "=", "cat_grid", "[", "i", "]", "\n", "hpv_dict", "=", "self", ".", "config", ".", "convert", "(", "\"arr\"", ",", "\"dict\"", ",", "hpv", ")", "\n", "if", "self", ".", "verify", "(", "hpv_dict", ")", "==", "True", ":", "\n", "#debug(\"valid cfg #{}: {}\".format(i, g))", "\n", "                    ", "v_grid", ".", "append", "(", "g", ")", "\n", "", "if", "len", "(", "v_grid", ")", ">=", "self", ".", "num_samples", ":", "\n", "                    ", "break", "\n", "", "", "if", "len", "(", "v_grid", ")", "!=", "self", ".", "num_samples", ":", "\n", "                ", "info", "(", "\"Size reduced after verification: {}/{}\"", ".", "format", "(", "len", "(", "v_grid", ")", ",", "self", ".", "num_samples", ")", ")", "\n", "\n", "", "v_grid", "=", "np", ".", "array", "(", "v_grid", ")", "\n", "#debug(\"Verified grid: {}\".format(v_grid))", "\n", "return", "v_grid", "\n", "", "else", ":", "\n", "            ", "return", "cat_grid", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol.SobolSequenceSampler.__init__": [[10, 22], ["proto.SamplerProtype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Sobol sequences'", "\n", "\n", "if", "'num_skips'", "in", "spec", ":", "\n", "            ", "spec", "[", "'seed'", "]", "+=", "spec", "[", "'num_skips'", "]", "\n", "\n", "", "if", "'verification'", "in", "spec", "and", "spec", "[", "'verification'", "]", "==", "True", "and", "verifier", "!=", "None", ":", "\n", "            ", "self", ".", "set_verification", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_verification", "=", "False", "\n", "\n", "", "super", "(", "SobolSequenceSampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "spec", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol.SobolSequenceSampler.generate": [[23, 53], ["numpy.transpose", "int", "sobol_lib.i4_sobol_generate", "sobol.SobolSequenceSampler.config.convert", "len", "range", "numpy.array", "sobol.SobolSequenceSampler.config.convert", "len", "info", "sobol.SobolSequenceSampler.verify", "numpy.array.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_sobol_generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "set_verification", "==", "True", ":", "\n", "            ", "n_s", "=", "int", "(", "self", ".", "num_samples", "*", "1.5", ")", "\n", "", "else", ":", "\n", "            ", "n_s", "=", "self", ".", "num_samples", "\n", "\n", "", "s_grid", "=", "np", ".", "transpose", "(", "i4_sobol_generate", "(", "self", ".", "num_dim", ",", "n_s", ",", "self", ".", "seed", ")", ")", "\n", "\n", "if", "self", ".", "set_verification", "==", "True", ":", "\n", "#debug(\"Original grid: {}\".format(s_grid))            ", "\n", "            ", "hpv_list", "=", "self", ".", "config", ".", "convert", "(", "'grid'", ",", "'hpv_list'", ",", "s_grid", ")", "\n", "n_hpvs", "=", "len", "(", "hpv_list", ")", "\n", "v_grid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_hpvs", ")", ":", "\n", "                ", "hpv", "=", "hpv_list", "[", "i", "]", "\n", "g", "=", "s_grid", "[", "i", "]", "\n", "hpv_dict", "=", "self", ".", "config", ".", "convert", "(", "\"arr\"", ",", "\"dict\"", ",", "hpv", ")", "\n", "if", "self", ".", "verify", "(", "hpv_dict", ")", "==", "True", ":", "\n", "#debug(\"valid cfg #{}: {}\".format(i, g))", "\n", "                    ", "v_grid", ".", "append", "(", "g", ")", "\n", "", "if", "len", "(", "v_grid", ")", ">=", "self", ".", "num_samples", ":", "\n", "                    ", "break", "\n", "", "", "if", "len", "(", "v_grid", ")", "!=", "self", ".", "num_samples", ":", "\n", "                ", "info", "(", "\"Size reduced after verification: {}/{}\"", ".", "format", "(", "len", "(", "v_grid", ")", ",", "self", ".", "num_samples", ")", ")", "\n", "\n", "", "v_grid", "=", "np", ".", "array", "(", "v_grid", ")", "\n", "#debug(\"Verified grid: {}\".format(v_grid))", "\n", "return", "v_grid", "\n", "", "else", ":", "\n", "            ", "return", "s_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.uni_rand.UniformRandomSampler.__init__": [[8, 11], ["proto.SamplerProtype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'uniform random sampling'", "\n", "super", "(", "UniformRandomSampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "spec", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.uni_rand.UniformRandomSampler.generate": [[12, 17], ["numpy.random.seed", "numpy.transpose", "numpy.random.rand"], "methods", ["None"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "random_grid", "=", "np", ".", "transpose", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "num_dim", ",", "self", ".", "num_samples", ")", ")", "# FIXME: [0, 1) to [0, 1]", "\n", "\n", "return", "random_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.p_ls.PartialNeighborSampler.__init__": [[13, 68], ["proto.SamplerProtype.__init__", "p_ls.PartialNeighborSampler.validate", "ValueError", "numpy.zeros", "p_ls.PartialNeighborSampler.config.get_value_type", "ValueError", "p_ls.PartialNeighborSampler.config.is_architectural", "p_ls.PartialNeighborSampler.valid_dims.append", "p_ls.PartialNeighborSampler.valid_dims.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.is_architectural", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Partial local sampling'", "\n", "\n", "super", "(", "PartialNeighborSampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "spec", ",", "verifier", ")", "\n", "\n", "self", ".", "candidate", "=", "self", ".", "validate", "(", "spec", "[", "'female'", "]", ")", "# spec['female'] is list type", "\n", "if", "self", ".", "candidate", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid best candidate!: {}\"", ".", "format", "(", "spec", "[", "'female'", "]", ")", ")", "\n", "\n", "", "if", "'ls_stdev'", "in", "spec", ":", "\n", "            ", "self", ".", "sd", "=", "spec", "[", "'ls_stdev'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "sd", "=", "0.5", "\n", "\n", "", "if", "not", "'schema'", "in", "spec", ":", "\n", "            ", "self", ".", "schema", "=", "np", ".", "zeros", "(", "self", ".", "num_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "schema", "=", "spec", "[", "'schema'", "]", "\n", "\n", "", "if", "'generation'", "in", "spec", ":", "\n", "            ", "self", ".", "generation", "=", "spec", "[", "'generation'", "]", "+", "1", "# inherits from best_candidate", "\n", "", "else", ":", "\n", "            ", "self", ".", "generation", "=", "0", "\n", "\n", "", "if", "'valid_params'", "in", "spec", ":", "\n", "            ", "for", "p", "in", "spec", "[", "'valid_params'", "]", ":", "\n", "                ", "if", "not", "p", "in", "self", ".", "params", ":", "\n", "                    ", "raise", "ValueError", "(", "'Invalid param name: {}'", ".", "format", "(", "p", ")", ")", "\n", "", "", "self", ".", "valid_params", "=", "spec", "[", "'valid_params'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_params", "=", "self", ".", "params", "\n", "\n", "", "if", "'valid_types'", "in", "spec", ":", "\n", "            ", "self", ".", "valid_types", "=", "spec", "[", "'valid_types'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_types", "=", "[", "'discrete'", ",", "'continuous'", ",", "'categorical'", ",", "'preordered'", "]", "# all available value types", "\n", "\n", "", "if", "'arch_type_only'", "in", "spec", ":", "\n", "            ", "self", ".", "arch_type_only", "=", "spec", "[", "'arch_type_only'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "arch_type_only", "=", "False", "\n", "\n", "# select hyperparameter dimensions that are valid", "\n", "", "self", ".", "valid_dims", "=", "[", "]", "\n", "for", "param", "in", "self", ".", "valid_params", ":", "\n", "            ", "vt", "=", "self", ".", "config", ".", "get_value_type", "(", "param", ")", "\n", "if", "vt", "in", "self", ".", "valid_types", ":", "\n", "                ", "if", "self", ".", "arch_type_only", ":", "\n", "                    ", "if", "self", ".", "config", ".", "is_architectural", "(", "param", ")", ":", "\n", "                        ", "self", ".", "valid_dims", ".", "append", "(", "param", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "valid_dims", ".", "append", "(", "param", ")", "\n", "\n", "", "", "", "self", ".", "schemata", "=", "[", "]", "\n", "self", ".", "generations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.p_ls.PartialNeighborSampler.generate": [[69, 87], ["numpy.random.seed", "range", "numpy.array", "copy.copy", "p_ls.PartialNeighborSampler.perturb", "p_ls.PartialNeighborSampler.config.convert", "nc_list.append", "p_ls.PartialNeighborSampler.schemata.append", "p_ls.PartialNeighborSampler.generations.append", "warn", "debug", "len", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "nc_list", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "                ", "schema", "=", "copy", ".", "copy", "(", "self", ".", "schema", ")", "\n", "nc", ",", "n_i", "=", "self", ".", "perturb", "(", "len", "(", "self", ".", "valid_dims", ")", ")", "\n", "schema", "[", "n_i", "]", "=", "1", "\n", "nc2", "=", "self", ".", "config", ".", "convert", "(", "\"dict\"", ",", "\"norm_arr\"", ",", "nc", ")", "\n", "nc_list", ".", "append", "(", "nc2", ")", "\n", "self", ".", "schemata", ".", "append", "(", "schema", ")", "\n", "self", ".", "generations", ".", "append", "(", "self", ".", "generation", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Partial local search sampling failed:{}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "finally", ":", "\n", "            ", "return", "np", ".", "array", "(", "nc_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.p_ls.PartialNeighborSampler.get_schemata": [[88, 90], ["None"], "methods", ["None"], ["", "", "def", "get_schemata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "schemata", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.p_ls.PartialNeighborSampler.get_generations": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_generations", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generations", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.p_ls.PartialNeighborSampler.perturb": [[94, 164], ["p_ls.PartialNeighborSampler.config.get_value_type", "p_ls.PartialNeighborSampler.config.get_type", "p_ls.PartialNeighborSampler.config.get_range", "xoa.commons.converter.OneHotVectorTransformer", "xoa.commons.converter.OneHotVectorTransformer.encode", "copy.copy", "random.randint", "p_ls.PartialNeighborSampler.verify", "p_ls.PartialNeighborSampler.perturb", "numpy.delete", "numpy.random.choice", "random.randint", "xoa.commons.converter.OneHotVectorTransformer.encode.index", "debug", "p_ls.PartialNeighborSampler.perturb", "numpy.delete", "numpy.random.choice", "numpy.random.normal", "xoa.commons.converter.OneHotVectorTransformer.decode", "p_ls.PartialNeighborSampler.index", "debug", "p_ls.PartialNeighborSampler.perturb", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "perturb", "(", "self", ",", "num_dim", ",", "excluded_index", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "num_dim", ">", "1", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "num_dim", "-", "1", ")", "# choose param index", "\n", "\n", "if", "excluded_index", "!=", "None", "and", "excluded_index", "<", "num_dim", "-", "1", ":", "\n", "# choose the other param index", "\n", "                ", "while", "i", "==", "excluded_index", ":", "\n", "                    ", "i", "=", "random", ".", "randint", "(", "0", ",", "num_dim", "-", "1", ")", "\n", "\n", "", "", "", "hp_name", "=", "self", ".", "valid_dims", "[", "i", "]", "\n", "\n", "vt", "=", "self", ".", "config", ".", "get_value_type", "(", "hp_name", ")", "\n", "t", "=", "self", ".", "config", ".", "get_type", "(", "hp_name", ")", "\n", "r", "=", "self", ".", "config", ".", "get_range", "(", "hp_name", ")", "\n", "\n", "p_val", "=", "self", ".", "candidate", "[", "hp_name", "]", "# the value of choosen param", "\n", "np_val", "=", "None", "\n", "\n", "''' returns perturbed value as dictionary type '''", "\n", "ovt", "=", "OneHotVectorTransformer", "(", "self", ".", "config", ")", "\n", "n_val", "=", "ovt", ".", "encode", "(", "vt", ",", "t", ",", "r", ",", "p_val", ")", "\n", "if", "vt", "==", "'categorical'", ":", "\n", "            ", "try", ":", "\n", "# force to choose any others                ", "\n", "                ", "ot_opts", "=", "np", ".", "delete", "(", "r", ",", "n_val", ".", "index", "(", "1.0", ")", ",", "0", ")", "\n", "np_val", "=", "np", ".", "random", ".", "choice", "(", "ot_opts", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "debug", "(", "\"Perturbation failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "self", ".", "perturb", "(", "num_dim", ",", "excluded_index", "=", "i", ")", "\n", "", "", "elif", "vt", "==", "'preordered'", ":", "\n", "            ", "try", ":", "\n", "# force to choose any others                ", "\n", "                ", "ot_opts", "=", "np", ".", "delete", "(", "r", ",", "r", ".", "index", "(", "p_val", ")", ",", "0", ")", "\n", "np_val", "=", "np", ".", "random", ".", "choice", "(", "ot_opts", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "debug", "(", "\"Perturbation failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "self", ".", "perturb", "(", "num_dim", ",", "excluded_index", "=", "i", ")", "\n", "", "", "else", ":", "\n", "            ", "n_retry", "=", "0", "\n", "MAX_RETRY", "=", "100", "\n", "while", "True", ":", "# force to one exchange neighbourhood", "\n", "                ", "r_val", "=", "np", ".", "random", ".", "normal", "(", "n_val", ",", "self", ".", "sd", ")", "# random draw from normal", "\n", "if", "r_val", "<", "0.", ":", "\n", "                    ", "r_val", "=", "0.0", "\n", "", "elif", "r_val", ">", "1.", ":", "\n", "                    ", "r_val", "=", "1.0", "\n", "", "un_val", "=", "ovt", ".", "decode", "(", "vt", ",", "t", ",", "r", ",", "r_val", ")", "\n", "# Value check                        ", "\n", "if", "un_val", "<", "r", "[", "0", "]", "or", "un_val", ">", "r", "[", "-", "1", "]", ":", "\n", "                    ", "warn", "(", "\"{} is not in {}\"", ".", "format", "(", "un_val", ",", "r", ")", ")", "\n", "continue", "\n", "\n", "", "if", "p_val", "!=", "un_val", ":", "# check parameter changed", "\n", "                    ", "np_val", "=", "un_val", "\n", "break", "\n", "", "elif", "n_retry", ">", "MAX_RETRY", ":", "\n", "# exit to avoid too many iteration", "\n", "                    ", "np_val", "=", "un_val", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "n_retry", "+=", "1", "\n", "\n", "", "", "", "nc", "=", "copy", ".", "copy", "(", "self", ".", "candidate", ")", "\n", "nc", "[", "hp_name", "]", "=", "np_val", "\n", "\n", "if", "self", ".", "verify", "(", "nc", ")", "==", "False", ":", "\n", "            ", "return", "self", ".", "perturb", "(", "num_dim", ",", "excluded_index", "=", "i", ")", "\n", "", "else", ":", "\n", "            ", "return", "nc", ",", "i", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.__init__": [[13, 39], ["proto.SamplerProtype.__init__", "ls.NeighborSampler.validate", "ValueError", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Local sampling'", "\n", "\n", "super", "(", "NeighborSampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "spec", ",", "verifier", ")", "\n", "\n", "self", ".", "candidate", "=", "self", ".", "validate", "(", "spec", "[", "'female'", "]", ")", "# spec['female'] is list type", "\n", "if", "self", ".", "candidate", "==", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid best candidate!: {}\"", ".", "format", "(", "spec", "[", "'female'", "]", ")", ")", "\n", "\n", "", "if", "'ls_stdev'", "in", "spec", ":", "\n", "            ", "self", ".", "sd", "=", "spec", "[", "'ls_stdev'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "sd", "=", "0.5", "\n", "\n", "", "if", "not", "'schema'", "in", "spec", ":", "\n", "            ", "self", ".", "schema", "=", "np", ".", "zeros", "(", "self", ".", "num_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "schema", "=", "spec", "[", "'schema'", "]", "\n", "\n", "", "if", "'generation'", "in", "spec", ":", "\n", "            ", "self", ".", "generation", "=", "spec", "[", "'generation'", "]", "+", "1", "# inherits from best_candidate", "\n", "", "else", ":", "\n", "            ", "self", ".", "generation", "=", "0", "\n", "\n", "", "self", ".", "schemata", "=", "[", "]", "\n", "self", ".", "generations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.generate": [[40, 58], ["numpy.random.seed", "range", "numpy.array", "copy.copy", "ls.NeighborSampler.perturb", "ls.NeighborSampler.config.convert", "nc_list.append", "ls.NeighborSampler.schemata.append", "ls.NeighborSampler.generations.append", "warn", "debug", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "nc_list", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "                ", "schema", "=", "copy", ".", "copy", "(", "self", ".", "schema", ")", "\n", "nc", ",", "n_i", "=", "self", ".", "perturb", "(", "self", ".", "num_dim", ")", "\n", "schema", "[", "n_i", "]", "=", "1", "\n", "nc2", "=", "self", ".", "config", ".", "convert", "(", "\"dict\"", ",", "\"norm_arr\"", ",", "nc", ")", "\n", "nc_list", ".", "append", "(", "nc2", ")", "\n", "self", ".", "schemata", ".", "append", "(", "schema", ")", "\n", "self", ".", "generations", ".", "append", "(", "self", ".", "generation", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Local search sampling of {} failed:{}\"", ".", "format", "(", "self", ".", "candidate", ",", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "finally", ":", "\n", "            ", "return", "np", ".", "array", "(", "nc_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.get_schemata": [[59, 61], ["None"], "methods", ["None"], ["", "", "def", "get_schemata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "schemata", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.get_generations": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_generations", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generations", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb": [[65, 133], ["random.randint", "xoa.commons.converter.OneHotVectorTransformer", "ls.NeighborSampler.config.get_value_type", "ls.NeighborSampler.config.get_type", "ls.NeighborSampler.config.get_range", "xoa.commons.converter.OneHotVectorTransformer.encode", "copy.copy", "ls.NeighborSampler.verify", "ls.NeighborSampler.perturb", "random.randint", "numpy.delete", "numpy.random.choice", "xoa.commons.converter.OneHotVectorTransformer.encode.index", "debug", "ls.NeighborSampler.perturb", "numpy.delete", "numpy.random.choice", "numpy.random.normal", "xoa.commons.converter.OneHotVectorTransformer.decode", "ls.NeighborSampler.index", "debug", "ls.NeighborSampler.perturb", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "perturb", "(", "self", ",", "num_dim", ",", "excluded_index", "=", "None", ")", ":", "\n", "\n", "        ", "i", "=", "random", ".", "randint", "(", "0", ",", "num_dim", "-", "1", ")", "# choose param index", "\n", "if", "excluded_index", "!=", "None", ":", "\n", "# choose the other param index", "\n", "            ", "while", "i", "==", "excluded_index", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "num_dim", "-", "1", ")", "\n", "\n", "", "", "''' returns perturbed value as dictionary type '''", "\n", "ovt", "=", "OneHotVectorTransformer", "(", "self", ".", "config", ")", "\n", "hp_name", "=", "self", ".", "params", "[", "i", "]", "# hyperparameter name", "\n", "\n", "vt", "=", "self", ".", "config", ".", "get_value_type", "(", "hp_name", ")", "\n", "t", "=", "self", ".", "config", ".", "get_type", "(", "hp_name", ")", "\n", "r", "=", "self", ".", "config", ".", "get_range", "(", "hp_name", ")", "\n", "\n", "p_val", "=", "self", ".", "candidate", "[", "hp_name", "]", "# the value of choosen param", "\n", "np_val", "=", "None", "\n", "\n", "n_val", "=", "ovt", ".", "encode", "(", "vt", ",", "t", ",", "r", ",", "p_val", ")", "\n", "if", "vt", "==", "'categorical'", ":", "\n", "            ", "try", ":", "\n", "# force to choose any others                ", "\n", "                ", "ot_opts", "=", "np", ".", "delete", "(", "r", ",", "n_val", ".", "index", "(", "1.0", ")", ",", "0", ")", "\n", "np_val", "=", "np", ".", "random", ".", "choice", "(", "ot_opts", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "debug", "(", "\"Perturbation failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "self", ".", "perturb", "(", "num_dim", ",", "excluded_index", "=", "i", ")", "\n", "", "", "elif", "vt", "==", "'preordered'", ":", "\n", "            ", "try", ":", "\n", "# force to choose any others                ", "\n", "                ", "ot_opts", "=", "np", ".", "delete", "(", "r", ",", "r", ".", "index", "(", "p_val", ")", ",", "0", ")", "\n", "np_val", "=", "np", ".", "random", ".", "choice", "(", "ot_opts", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "debug", "(", "\"Perturbation failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "self", ".", "perturb", "(", "num_dim", ",", "excluded_index", "=", "i", ")", "\n", "", "", "else", ":", "\n", "            ", "n_retry", "=", "0", "\n", "MAX_RETRY", "=", "100", "\n", "while", "True", ":", "# force to one exchange neighbourhood", "\n", "                ", "r_val", "=", "np", ".", "random", ".", "normal", "(", "n_val", ",", "self", ".", "sd", ")", "# random draw from normal", "\n", "if", "r_val", "<", "0.", ":", "\n", "                    ", "r_val", "=", "0.0", "\n", "", "elif", "r_val", ">", "1.", ":", "\n", "                    ", "r_val", "=", "1.0", "\n", "", "un_val", "=", "ovt", ".", "decode", "(", "vt", ",", "t", ",", "r", ",", "r_val", ")", "\n", "# Value check                        ", "\n", "if", "un_val", "<", "r", "[", "0", "]", "or", "un_val", ">", "r", "[", "-", "1", "]", ":", "\n", "                    ", "warn", "(", "\"{} is not in {}\"", ".", "format", "(", "un_val", ",", "r", ")", ")", "\n", "continue", "\n", "\n", "", "if", "p_val", "!=", "un_val", ":", "# check parameter changed", "\n", "                    ", "np_val", "=", "un_val", "\n", "break", "\n", "", "elif", "n_retry", ">", "MAX_RETRY", ":", "\n", "# exit to avoid too many iteration", "\n", "                    ", "np_val", "=", "un_val", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "n_retry", "+=", "1", "\n", "\n", "", "", "", "nc", "=", "copy", ".", "copy", "(", "self", ".", "candidate", ")", "\n", "nc", "[", "hp_name", "]", "=", "np_val", "\n", "\n", "if", "self", ".", "verify", "(", "nc", ")", "==", "False", ":", "\n", "            ", "return", "self", ".", "perturb", "(", "num_dim", ",", "excluded_index", "=", "i", ")", "\n", "", "else", ":", "\n", "            ", "return", "nc", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.__init__": [[15, 39], ["proto.SamplerProtype.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "'mutation_ratio'", "in", "spec", ":", "\n", "            ", "self", ".", "m_ratio", "=", ".1", "# default mutation ratio", "\n", "", "else", ":", "\n", "            ", "self", ".", "m_ratio", "=", "spec", "[", "'mutation_ratio'", "]", "\n", "\n", "", "self", ".", "male", "=", "spec", "[", "'male'", "]", "\n", "if", "'gen'", "in", "spec", ":", "\n", "            ", "self", ".", "generation", "=", "spec", "[", "'gen'", "]", "+", "1", "# set offsprings' generation", "\n", "", "else", ":", "\n", "            ", "self", ".", "generation", "=", "0", "\n", "", "if", "'schema'", "in", "spec", ":", "\n", "            ", "self", ".", "m_schema", "=", "[", "int", "(", "f", ")", "for", "f", "in", "spec", "[", "'schema'", "]", "]", "# type forcing", "\n", "", "else", ":", "\n", "            ", "self", ".", "m_schema", "=", "[", "0", "for", "i", "in", "self", ".", "male", "]", "\n", "\n", "", "self", ".", "female", "=", "spec", "[", "'female'", "]", "\n", "\n", "self", ".", "schemata", "=", "[", "]", "\n", "self", ".", "generations", "=", "[", "]", "\n", "self", ".", "name", "=", "'evolutionary sampling'", "\n", "\n", "super", "(", "EvolutionarySampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "spec", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.generate": [[40, 70], ["random.seed", "len", "es.EvolutionarySampler.cross_over_mp", "numpy.array", "len", "es.EvolutionarySampler.config.convert", "evol_grid.append", "es.EvolutionarySampler.schemata.append", "es.EvolutionarySampler.generations.append", "random.sample", "numpy.random.rand", "es.EvolutionarySampler.mutate", "offsprings.append", "offsprings.append", "offsprings.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.cross_over_mp", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.mutate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "evol_grid", "=", "[", "]", "\n", "self", ".", "schemata", "=", "[", "]", "\n", "candidates", "=", "[", "]", "\n", "n_dim", "=", "len", "(", "self", ".", "male", ")", "\n", "\n", "candidates", "=", "self", ".", "cross_over_mp", "(", "self", ".", "num_samples", ")", "\n", "#candidates = self.cross_over_uniform(self.num_samples)", "\n", "#n_remains = self.num_samples - len(candidates)", "\n", "\n", "offsprings", "=", "[", "]", "\n", "while", "len", "(", "offsprings", ")", "<", "self", ".", "num_samples", ":", "\n", "            ", "m", "=", "random", ".", "sample", "(", "candidates", ",", "1", ")", "[", "0", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "m_ratio", ":", "\n", "                ", "m_", "=", "self", ".", "mutate", "(", "m", ")", "\n", "if", "m_", "!=", "False", ":", "\n", "                    ", "offsprings", ".", "append", "(", "m_", ")", "\n", "", "else", ":", "\n", "                    ", "offsprings", ".", "append", "(", "m", ")", "# add normal case", "\n", "", "", "else", ":", "\n", "                ", "offsprings", ".", "append", "(", "m", ")", "\n", "\n", "", "", "for", "o", "in", "offsprings", ":", "\n", "            ", "g", "=", "self", ".", "config", ".", "convert", "(", "'arr'", ",", "'norm_arr'", ",", "o", "[", "'hpv'", "]", ")", "\n", "evol_grid", ".", "append", "(", "g", ")", "\n", "self", ".", "schemata", ".", "append", "(", "o", "[", "'schema'", "]", ")", "\n", "self", ".", "generations", ".", "append", "(", "o", "[", "'gen'", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "evol_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.get_schemata": [[71, 73], ["numpy.array"], "methods", ["None"], ["", "def", "get_schemata", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "schemata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.get_generations": [[74, 76], ["numpy.array"], "methods", ["None"], ["", "def", "get_generations", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "generations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.get_random_mask": [[77, 86], ["list", "numpy.random.randint", "list", "numpy.random.shuffle", "itertools.combinations_with_replacement", "len"], "methods", ["None"], ["", "def", "get_random_mask", "(", "self", ")", ":", "\n", "        ", "schemeta", "=", "[", "]", "\n", "masks", "=", "list", "(", "cwr", "(", "[", "0", ",", "1", "]", ",", "self", ".", "num_dim", ")", ")", "\n", "masks", "=", "masks", "[", "1", ":", "-", "1", "]", "# remove all zero or all one mask", "\n", "s", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "masks", ")", ")", "\n", "schema", "=", "list", "(", "masks", "[", "s", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "schema", ")", "\n", "\n", "return", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.cross_over_uniform": [[87, 114], ["len", "es.EvolutionarySampler.get_random_mask", "range", "len", "es.EvolutionarySampler.validate", "offsprings.append", "debug", "o_hpv.append", "o_hpv.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.get_random_mask", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "cross_over_uniform", "(", "self", ",", "num_child", ")", ":", "\n", "# populate offsprings from parents", "\n", "        ", "offsprings", "=", "[", "]", "\n", "n_invalid", "=", "0", "\n", "n_duplicate", "=", "0", "\n", "\n", "while", "len", "(", "offsprings", ")", "<", "num_child", ":", "\n", "            ", "try", ":", "\n", "                ", "o_schema", "=", "self", ".", "get_random_mask", "(", ")", "\n", "o_hpv", "=", "[", "]", "# child hyperparam vector", "\n", "for", "i", "in", "range", "(", "len", "(", "o_schema", ")", ")", ":", "\n", "                    ", "bit", "=", "o_schema", "[", "i", "]", "\n", "if", "bit", "==", "0", ":", "# inherit from male", "\n", "                        ", "o_hpv", ".", "append", "(", "self", ".", "male", "[", "i", "]", ")", "\n", "", "elif", "bit", "==", "1", ":", "# inherit from female", "\n", "                        ", "o_hpv", ".", "append", "(", "self", ".", "female", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Invalid child schema: {}\"", ".", "format", "(", "o_schema", ")", ")", "\n", "\n", "", "", "if", "self", ".", "validate", "(", "o_hpv", ")", "!=", "False", ":", "\n", "                    ", "child", "=", "{", "\"hpv\"", ":", "o_hpv", ",", "\"schema\"", ":", "o_schema", ",", "\"gen\"", ":", "self", ".", "generation", "}", "\n", "offsprings", ".", "append", "(", "child", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "debug", "(", "\"Cross over failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "", "return", "offsprings", "# list item - {\"hpv\": [], \"schema\": []}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.cross_over_mp": [[115, 161], ["es.EvolutionarySampler.create_schemata", "random.shuffle", "len", "debug", "range", "debug", "debug", "debug", "len", "o_hpv.append", "es.EvolutionarySampler.validate", "warn", "len", "o_hpv.append", "ValueError", "es.EvolutionarySampler.is_duplicated", "offsprings.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.create_schemata", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_duplicated", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "cross_over_mp", "(", "self", ",", "num_child", ")", ":", "\n", "        ", "offsprings", "=", "[", "]", "\n", "o_schemata", "=", "self", ".", "create_schemata", "(", "num_child", "*", "2", ")", "# XXX: to avoid large size issue", "\n", "random", ".", "shuffle", "(", "o_schemata", ")", "\n", "n_offsprings", "=", "len", "(", "o_schemata", ")", "\n", "n_invalid", "=", "0", "\n", "n_duplicate", "=", "0", "\n", "\n", "if", "n_offsprings", "<", "num_child", ":", "\n", "            ", "debug", "(", "\"The # of possible offsprings is less then {}\"", ".", "format", "(", "num_child", ")", ")", "\n", "\n", "", "for", "o_schema", "in", "o_schemata", ":", "\n", "            ", "o_hpv", "=", "[", "]", "# child hyperparam vector", "\n", "for", "i", "in", "range", "(", "len", "(", "o_schema", ")", ")", ":", "\n", "                ", "bit", "=", "o_schema", "[", "i", "]", "\n", "if", "bit", "==", "0", ":", "# inherit from male", "\n", "                    ", "o_hpv", ".", "append", "(", "self", ".", "male", "[", "i", "]", ")", "\n", "", "elif", "bit", "==", "1", ":", "# inherit from female", "\n", "                    ", "o_hpv", ".", "append", "(", "self", ".", "female", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid child schema: {}\"", ".", "format", "(", "o_schema", ")", ")", "\n", "\n", "", "", "try", ":", "\n", "# validate new parameter                ", "\n", "                ", "if", "self", ".", "validate", "(", "o_hpv", ")", "!=", "False", ":", "\n", "# check duplicated", "\n", "                    ", "if", "not", "self", ".", "is_duplicated", "(", "offsprings", ",", "o_hpv", ")", ":", "\n", "                        ", "child", "=", "{", "\"hpv\"", ":", "o_hpv", ",", "\"schema\"", ":", "o_schema", ",", "\"gen\"", ":", "self", ".", "generation", "}", "\n", "offsprings", ".", "append", "(", "child", ")", "\n", "if", "len", "(", "offsprings", ")", "==", "num_child", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "#debug(\"Duplicated configuration: {}\".format(o_hpv))", "\n", "                        ", "n_duplicate", "+=", "1", "\n", "", "", "else", ":", "\n", "#debug(\"Invalid config: {}\".format(o_hpv))", "\n", "                    ", "n_invalid", "+=", "1", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Cross over failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "", "if", "n_invalid", ">", "0", "or", "n_duplicate", ">", "0", ":", "\n", "            ", "debug", "(", "\"P1: {}\"", ".", "format", "(", "self", ".", "male", ")", ")", "\n", "debug", "(", "\"P2: {}\"", ".", "format", "(", "self", ".", "female", ")", ")", "\n", "debug", "(", "\"# of child: {}/{}, invalid: {}, duplicated: {}\"", ".", "format", "(", "len", "(", "offsprings", ")", ",", "num_child", ",", "n_invalid", ",", "n_duplicate", ")", ")", "\n", "", "return", "offsprings", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.create_schemata": [[162, 174], ["len", "range", "es.EvolutionarySampler.create_schema_list", "o_schemata.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.create_schema_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "create_schemata", "(", "self", ",", "num_child", "=", "None", ")", ":", "\n", "        ", "o_schemata", "=", "[", "]", "\n", "# create all possible offsprings' schema", "\n", "n_params", "=", "len", "(", "self", ".", "m_schema", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_params", ")", ":", "\n", "            ", "for", "c", "in", "self", ".", "create_schema_list", "(", "n_params", ",", "i", ")", ":", "\n", "                ", "o_schemata", ".", "append", "(", "c", ")", "\n", "if", "num_child", "!=", "None", "and", "len", "(", "o_schemata", ")", ">=", "num_child", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "return", "o_schemata", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.create_schema_list": [[175, 186], ["itertools.combinations", "random.shuffle", "arr.append", "range", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "create_schema_list", "(", "self", ",", "n_p", ",", "n_on", ")", ":", "\n", "        ", "arr", "=", "[", "]", "\n", "combi", "=", "combinations", "(", "[", "i", "for", "i", "in", "range", "(", "n_p", ")", "]", ",", "n_on", ")", "\n", "for", "c", "in", "combi", ":", "\n", "            ", "a", "=", "[", "0", "for", "i", "in", "range", "(", "n_p", ")", "]", "\n", "for", "i", "in", "c", ":", "\n", "                ", "a", "[", "i", "]", "=", "1", "\n", "", "arr", ".", "append", "(", "a", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "arr", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.mutate": [[187, 217], ["ls.NeighborSampler", "ls.NeighborSampler.perturb", "es.EvolutionarySampler.validate", "debug", "debug", "es.EvolutionarySampler.config.convert"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.ls.NeighborSampler.perturb", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert"], ["", "def", "mutate", "(", "self", ",", "cand", ")", ":", "\n", "\n", "# mutate this candidate", "\n", "        ", "spec", "=", "{", "'num_samples'", ":", "1", "}", "\n", "spec", "[", "'female'", "]", "=", "cand", "[", "'hpv'", "]", "\n", "spec", "[", "'generation'", "]", "=", "self", ".", "generation", "\n", "spec", "[", "'seed'", "]", "=", "self", ".", "seed", "\n", "\n", "lsg", "=", "NeighborSampler", "(", "self", ".", "config", ",", "spec", ")", "\n", "hpv_dict", ",", "n_i", "=", "lsg", ".", "perturb", "(", "self", ".", "num_dim", ")", "# return dict type", "\n", "r_schema", "=", "cand", "[", "'schema'", "]", "\n", "\n", "# XOR operation in n_i", "\n", "if", "r_schema", "[", "n_i", "]", "==", "1", ":", "\n", "            ", "r_schema", "[", "n_i", "]", "=", "0", "\n", "", "elif", "r_schema", "[", "n_i", "]", "==", "0", ":", "\n", "            ", "r_schema", "[", "n_i", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"Invalid schema: {}\"", ".", "format", "(", "r_schema", ")", ")", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "validate", "(", "hpv_dict", ")", "!=", "False", ":", "\n", "            ", "m_cand", "=", "{", "\"hpv\"", ":", "self", ".", "config", ".", "convert", "(", "\"dict\"", ",", "\"arr\"", ",", "hpv_dict", ")", ",", "\n", "\"schema\"", ":", "r_schema", ",", "\n", "\"gen\"", ":", "self", ".", "generation", "\n", "}", "\n", "return", "m_cand", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"Invalid configuration: {}\"", ".", "format", "(", "hpv_dict", ")", ")", "\n", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.__init__": [[7, 27], ["config.get_param_names", "len", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "\n", "        ", "if", "'num_samples'", "in", "spec", ":", "\n", "            ", "self", ".", "num_samples", "=", "spec", "[", "'num_samples'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_samples", "=", "20000", "\n", "\n", "", "if", "'seed'", "in", "spec", ":", "\n", "            ", "seed", "=", "spec", "[", "'seed'", "]", "\n", "if", "spec", "[", "'seed'", "]", "==", "'random'", ":", "\n", "                ", "seed", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_samples", ")", "\n", "", "self", ".", "seed", "=", "seed", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "1", "\n", "\n", "", "self", ".", "config", "=", "config", "\n", "self", ".", "params", "=", "config", ".", "get_param_names", "(", ")", "\n", "self", ".", "num_dim", "=", "len", "(", "self", ".", "params", ")", "\n", "self", ".", "verifier", "=", "verifier", "\n", "self", ".", "verified", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.get_sample_size": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_sample_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.get_name": [[31, 36], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "return", "self", ".", "name", "\n", "", "else", ":", "\n", "            ", "return", "\"Undefined\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.is_verified": [[37, 42], ["None"], "methods", ["None"], ["", "", "def", "is_verified", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "verified", "==", "None", ":", "\n", "            ", "return", "True", "# XXX: No verifier is treated as all of candidate are verified", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "verified", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.validate": [[43, 79], ["type", "proto.SamplerProtype.config.convert", "eval", "eval.", "proto.SamplerProtype.config.get_range", "proto.SamplerProtype.config.get_value_type", "warn", "ValueError", "proto.SamplerProtype.config.get_type", "proto.SamplerProtype.verify", "debug", "proto.SamplerProtype.config.get_param_names", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names"], ["", "", "def", "validate", "(", "self", ",", "candidate", ")", ":", "\n", "\n", "        ", "if", "type", "(", "candidate", ")", "!=", "dict", ":", "\n", "            ", "candidate", "=", "self", ".", "config", ".", "convert", "(", "\"arr\"", ",", "\"dict\"", ",", "candidate", ")", "\n", "\n", "", "cand", "=", "{", "}", "\n", "try", ":", "\n", "# Type forcing", "\n", "            ", "for", "k", "in", "candidate", ":", "\n", "                ", "if", "not", "k", "in", "self", ".", "config", ".", "get_param_names", "(", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"{} is not in {}\"", ".", "format", "(", "k", ",", "self", ".", "params", ")", ")", "\n", "", "v", "=", "candidate", "[", "k", "]", "\n", "t", "=", "eval", "(", "self", ".", "config", ".", "get_type", "(", "k", ")", ")", "\n", "v", "=", "t", "(", "v", ")", "\n", "# Value check", "\n", "r_k", "=", "self", ".", "config", ".", "get_range", "(", "k", ")", "\n", "vt", "=", "self", ".", "config", ".", "get_value_type", "(", "k", ")", "\n", "if", "vt", "==", "'categorical'", "or", "vt", "==", "'preordered'", ":", "\n", "                    ", "if", "not", "v", "in", "r_k", ":", "\n", "                        ", "raise", "ValueError", "(", "\"{} is not in {}\"", ".", "format", "(", "v", ",", "r_k", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "v", "<", "r_k", "[", "0", "]", "or", "v", ">", "r_k", "[", "-", "1", "]", ":", "\n", "                        ", "raise", "ValueError", "(", "\"{} is not in {}\"", ".", "format", "(", "v", ",", "r_k", ")", ")", "\n", "", "", "cand", "[", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "verifier", "!=", "None", ":", "\n", "                ", "self", ".", "verified", "=", "True", "\n", "if", "not", "self", ".", "verify", "(", "cand", ")", ":", "\n", "                    ", "debug", "(", "\"Verification failed: {}\"", ".", "format", "(", "cand", ")", ")", "\n", "return", "False", "\n", "\n", "", "", "return", "cand", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Candidate validation failed:{}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.is_duplicated": [[80, 94], ["proto.SamplerProtype.config.convert", "type", "proto.SamplerProtype.config.convert", "proto.SamplerProtype.config.convert", "numpy.linalg.norm", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert"], ["", "", "def", "is_duplicated", "(", "self", ",", "candidates", ",", "hpv_to_check", ")", ":", "\n", "        ", "if", "type", "(", "hpv_to_check", ")", "==", "dict", ":", "\n", "            ", "hpv_to_check", "=", "self", ".", "config", ".", "convert", "(", "'dict'", ",", "'arr'", ",", "hpv_to_check", ")", "\n", "", "pvc", "=", "self", ".", "config", ".", "convert", "(", "'arr'", ",", "'one_hot'", ",", "hpv_to_check", ")", "\n", "\n", "for", "c", "in", "candidates", ":", "\n", "            ", "hpv", "=", "c", "[", "'hpv'", "]", "\n", "pv", "=", "self", ".", "config", ".", "convert", "(", "'arr'", ",", "'one_hot'", ",", "hpv", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "pv", ")", "-", "np", ".", "array", "(", "pvc", ")", ")", "\n", "if", "dist", "<", "1e-5", ":", "# XXX: ignore very small difference", "\n", "#debug(\"Duplicated configuration: {}\".format(hpv_to_check))", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.verify": [[95, 101], ["proto.SamplerProtype.verifier.verify"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify"], ["", "def", "verify", "(", "self", ",", "cand", ")", ":", "# cand is dict type", "\n", "\n", "        ", "if", "self", ".", "verifier", "!=", "None", ":", "\n", "            ", "return", "self", ".", "verifier", ".", "verify", "(", "cand", ")", "\n", "", "else", ":", "\n", "            ", "return", "True", "# skip verification when no verifier set up", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.get_schemata": [[102, 105], ["numpy.array", "numpy.zeros"], "methods", ["None"], ["", "", "def", "get_schemata", "(", "self", ")", ":", "\n", "        ", "'''return empty schemata'''", "\n", "return", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "self", ".", "num_samples", ",", "self", ".", "num_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.get_generations": [[106, 109], ["numpy.array", "numpy.zeros"], "methods", ["None"], ["", "def", "get_generations", "(", "self", ")", ":", "\n", "        ", "'''return all zeros'''", "\n", "return", "np", ".", "array", "(", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.generate": [[110, 113], ["NotImplementedError"], "methods", ["None"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "''' returns M * N normalized vectors '''", "\n", "raise", "NotImplementedError", "(", "\"This method should return given samples # * parameters # dimensional normalized array.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.latin_hc.LatinHypercubeSampler.__init__": [[11, 14], ["proto.SamplerProtype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "num_samples", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Latin Hypercube sampling'", "\n", "super", "(", "LatinHypercubeSampler", ",", "self", ")", ".", "__init__", "(", "config", ",", "num_samples", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.latin_hc.LatinHypercubeSampler.generate": [[15, 20], ["random.seed", "numpy.array", "pyDOE.lhs"], "methods", ["None"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "hypercube_grid", "=", "np", ".", "array", "(", "lhs", "(", "self", ".", "num_dim", ",", "samples", "=", "self", ".", "num_samples", ")", ")", "\n", "return", "hypercube_grid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_hi1": [[11, 71], ["math.floor", "math.floor"], "function", ["None"], ["", "def", "i4_bit_hi1", "(", "n", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## I4_BIT_HI1 returns the position of the high 1 bit base 2 in an integer.", "\n", "#", "\n", "#  Example:", "\n", "#", "\n", "#       N    Binary     BIT", "\n", "#    ----    --------  ----", "\n", "#       0           0     0", "\n", "#       1           1     1", "\n", "#       2          10     2", "\n", "#       3          11     2 ", "\n", "#       4         100     3", "\n", "#       5         101     3", "\n", "#       6         110     3", "\n", "#       7         111     3", "\n", "#       8        1000     4", "\n", "#       9        1001     4", "\n", "#      10        1010     4", "\n", "#      11        1011     4", "\n", "#      12        1100     4", "\n", "#      13        1101     4", "\n", "#      14        1110     4", "\n", "#      15        1111     4", "\n", "#      16       10000     5", "\n", "#      17       10001     5", "\n", "#    1023  1111111111    10", "\n", "#    1024 10000000000    11", "\n", "#    1025 10000000001    11", "\n", "#", "\n", "#  \tLicensing:", "\n", "#", "\n", "#    \t\tThis code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#  \tModified:", "\n", "#", "\n", "#    \t\t26 Nov 2011", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tOriginal MATLAB version by John Burkardt.", "\n", "#\t\tPYTHON version by Corrado Chisari", "\n", "#               Modified by Jasper Snoek to scale to 1111 dimensions", "\n", "#", "\n", "#  \tParameters:", "\n", "#", "\n", "#    \t\tInput, integer N, the integer to be measured.", "\n", "#    \t\tN should be nonnegative.  If N is nonpositive, the value will always be 0.", "\n", "#", "\n", "#    \t\tOutput, integer BIT, the number of bits base 2.", "\n", "#", "\n", "\t", "i", "=", "math", ".", "floor", "(", "n", ")", "\n", "bit", "=", "0", "\n", "while", "(", "1", ")", ":", "\n", "\t\t", "if", "(", "i", "<=", "0", ")", ":", "\n", "\t\t\t", "break", "\n", "", "bit", "+=", "1", "\n", "i", "=", "math", ".", "floor", "(", "i", "/", "2.", ")", "\n", "", "return", "bit", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_lo0": [[72, 133], ["math.floor", "math.floor"], "function", ["None"], ["", "def", "i4_bit_lo0", "(", "n", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## I4_BIT_LO0 returns the position of the low 0 bit base 2 in an integer.", "\n", "#", "\n", "#  Example:", "\n", "#", "\n", "#       N    Binary     BIT", "\n", "#    ----    --------  ----", "\n", "#       0           0     1", "\n", "#       1           1     2", "\n", "#       2          10     1", "\n", "#       3          11     3 ", "\n", "#       4         100     1", "\n", "#       5         101     2", "\n", "#       6         110     1", "\n", "#       7         111     4", "\n", "#       8        1000     1", "\n", "#       9        1001     2", "\n", "#      10        1010     1", "\n", "#      11        1011     3", "\n", "#      12        1100     1", "\n", "#      13        1101     2", "\n", "#      14        1110     1", "\n", "#      15        1111     5", "\n", "#      16       10000     1", "\n", "#      17       10001     2", "\n", "#    1023  1111111111     1", "\n", "#    1024 10000000000     1", "\n", "#    1025 10000000001     1", "\n", "#", "\n", "#  \tLicensing:", "\n", "#", "\n", "#    This code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#  \tModified:", "\n", "#", "\n", "#    \t\t22 February 2011", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tOriginal MATLAB version by John Burkardt.", "\n", "#\t\tPYTHON version by Corrado Chisari", "\n", "#", "\n", "#  Parameters:", "\n", "#", "\n", "#    \t\tInput, integer N, the integer to be measured.", "\n", "#    \t\tN should be nonnegative.", "\n", "#", "\n", "#    \t\tOutput, integer BIT, the position of the low 1 bit.", "\n", "#", "\n", "\t", "bit", "=", "0", "\n", "i", "=", "math", ".", "floor", "(", "n", ")", "\n", "while", "(", "1", ")", ":", "\n", "\t\t", "bit", "=", "bit", "+", "1", "\n", "i2", "=", "math", ".", "floor", "(", "i", "/", "2.", ")", "\n", "if", "(", "i", "==", "2", "*", "i2", ")", ":", "\n", "\t\t\t", "break", "\n", "\n", "", "i", "=", "i2", "\n", "", "return", "bit", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_sobol_generate": [[134, 167], ["zeros", "xrange", "sobol_lib.i4_sobol"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_sobol"], ["", "def", "i4_sobol_generate", "(", "m", ",", "n", ",", "skip", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## I4_SOBOL_GENERATE generates a Sobol dataset.", "\n", "#", "\n", "#\tLicensing:", "\n", "#", "\n", "#\t\tThis code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#  \tModified:", "\n", "#", "\n", "#    \t\t22 February 2011", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tOriginal MATLAB version by John Burkardt.", "\n", "#\t\tPYTHON version by Corrado Chisari", "\n", "#", "\n", "#\tParameters:", "\n", "#", "\n", "#\t\tInput, integer M, the spatial dimension.", "\n", "#", "\n", "#\t\tInput, integer N, the number of points to generate.", "\n", "#", "\n", "#\t\tInput, integer SKIP, the number of initial points to skip.", "\n", "#", "\n", "#\t\tOutput, real R(M,N), the points.", "\n", "#", "\n", "\t", "r", "=", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "for", "j", "in", "xrange", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "\t\t", "seed", "=", "skip", "+", "j", "-", "2", "\n", "[", "r", "[", "0", ":", "m", ",", "j", "-", "1", "]", ",", "seed", "]", "=", "i4_sobol", "(", "m", ",", "seed", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_sobol": [[168, 13799], ["int", "zeros", "xrange", "zeros", "sobol_lib.i4_bit_hi1", "xrange", "xrange", "zeros", "math.floor", "zeros", "print", "print", "print", "print", "bitwise_xor", "globals().keys", "print", "print", "print", "print", "zeros", "xrange", "xrange", "sobol_lib.i4_bit_lo0", "int", "int", "math.floor", "math.floor", "xrange", "zeros", "xrange", "sobol_lib.i4_bit_lo0", "globals", "int", "int", "sobol_lib.i4_bit_lo0", "xrange", "xrange", "sobol_lib.i4_bit_lo0", "bitwise_xor", "bitwise_xor", "int", "int", "sobol_lib.i4_bit_lo0", "xrange", "int", "int", "int", "int", "bitwise_xor", "int", "int"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_hi1", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_lo0", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_lo0", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_lo0", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_lo0", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_bit_lo0"], ["", "def", "i4_sobol", "(", "dim_num", ",", "seed", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## I4_SOBOL generates a new quasirandom Sobol vector with each call.", "\n", "#", "\n", "#\tDiscussion:", "\n", "#", "\n", "#\t\tThe routine adapts the ideas of Antonov and Saleev.", "\n", "#", "\n", "#\tLicensing:", "\n", "#", "\n", "#\t\tThis code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#\tModified:", "\n", "#", "\n", "#    \t\t26 February 2013", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tOriginal FORTRAN77 version by Bennett Fox.", "\n", "#\t\tMATLAB version by John Burkardt.", "\n", "#\t\tPYTHON version by Corrado Chisari", "\n", "#               PYTHON version modified by Jasper Snoek to scale (Joe & Kuo)", "\n", "#", "\n", "#\tReference:", "\n", "#", "\n", "#\t\tAntonov, Saleev,", "\n", "#\t\tUSSR Computational Mathematics and Mathematical Physics,", "\n", "#\t\tVolume 19, 1980, pages 252 - 256.", "\n", "#", "\n", "#\t\tPaul Bratley, Bennett Fox,", "\n", "#\t\tAlgorithm 659:", "\n", "#\t\tImplementing Sobol's Quasirandom Sequence Generator,", "\n", "#\t\tACM Transactions on Mathematical Software,", "\n", "#\t\tVolume 14, Number 1, pages 88-100, 1988.", "\n", "#", "\n", "#\t\tBennett Fox,", "\n", "#\t\tAlgorithm 647:", "\n", "#\t\tImplementation and Relative Efficiency of Quasirandom ", "\n", "#\t\tSequence Generators,", "\n", "#\t\tACM Transactions on Mathematical Software,", "\n", "#\t\tVolume 12, Number 4, pages 362-376, 1986.", "\n", "#", "\n", "#\t\tIlya Sobol,", "\n", "#\t\tUSSR Computational Mathematics and Mathematical Physics,", "\n", "#\t\tVolume 16, pages 236-242, 1977.", "\n", "#", "\n", "#\t\tIlya Sobol, Levitan, ", "\n", "#\t\tThe Production of Points Uniformly Distributed in a Multidimensional ", "\n", "#\t\tCube (in Russian),", "\n", "#\t\tPreprint IPM Akad. Nauk SSSR, ", "\n", "#\t\tNumber 40, Moscow 1976.", "\n", "#", "\n", "#               Stephen Joe, Frances Kuo,", "\n", "#               Remark on Algorithm 659: Implementing Sobol's Quasirandom Sequence Generator,", "\n", "#               ACM Transactions on Mathematical Software,", "\n", "#               Volume 29, Number 1, March 2003, pages 49-57.", "\n", "#", "\n", "#\tParameters:", "\n", "#", "\n", "#\t\tInput, integer DIM_NUM, the number of spatial dimensions.", "\n", "#\t\tDIM_NUM must satisfy 1 <= DIM_NUM <= 1111.", "\n", "#", "\n", "#\t\tInput/output, integer SEED, the \"seed\" for the sequence.", "\n", "#\t\tThis is essentially the index in the sequence of the quasirandom", "\n", "#\t\tvalue to be generated.\tOn output, SEED has been set to the", "\n", "#\t\tappropriate next value, usually simply SEED+1.", "\n", "#\t\tIf SEED is less than 0 on input, it is treated as though it were 0.", "\n", "#\t\tAn input value of 0 requests the first (0-th) element of the sequence.", "\n", "#", "\n", "#\t\tOutput, real QUASI(DIM_NUM), the next quasirandom vector.", "\n", "#", "\n", "\t", "global", "atmost", "\n", "global", "dim_max", "\n", "global", "dim_num_save", "\n", "global", "initialized", "\n", "global", "lastq", "\n", "global", "log_max", "\n", "global", "maxcol", "\n", "global", "poly", "\n", "global", "recipd", "\n", "global", "seed_save", "\n", "global", "v", "\n", "\n", "if", "(", "not", "'initialized'", "in", "globals", "(", ")", ".", "keys", "(", ")", ")", ":", "\n", "\t\t", "initialized", "=", "0", "\n", "dim_num_save", "=", "-", "1", "\n", "\n", "", "if", "(", "not", "initialized", "or", "dim_num", "!=", "dim_num_save", ")", ":", "\n", "\t\t", "initialized", "=", "1", "\n", "dim_max", "=", "1111", "\n", "dim_num_save", "=", "-", "1", "\n", "log_max", "=", "30", "\n", "seed_save", "=", "-", "1", "\n", "#", "\n", "#\tInitialize (part of) V.", "\n", "#", "\n", "v", "=", "zeros", "(", "(", "dim_max", ",", "log_max", ")", ")", "\n", "v", "[", "0", ",", "0", "]", "=", "1", "\n", "v", "[", "1", ",", "0", "]", "=", "1", "\n", "v", "[", "2", ",", "0", "]", "=", "1", "\n", "v", "[", "3", ",", "0", "]", "=", "1", "\n", "v", "[", "4", ",", "0", "]", "=", "1", "\n", "v", "[", "5", ",", "0", "]", "=", "1", "\n", "v", "[", "6", ",", "0", "]", "=", "1", "\n", "v", "[", "7", ",", "0", "]", "=", "1", "\n", "v", "[", "8", ",", "0", "]", "=", "1", "\n", "v", "[", "9", ",", "0", "]", "=", "1", "\n", "v", "[", "10", ",", "0", "]", "=", "1", "\n", "v", "[", "11", ",", "0", "]", "=", "1", "\n", "v", "[", "12", ",", "0", "]", "=", "1", "\n", "v", "[", "13", ",", "0", "]", "=", "1", "\n", "v", "[", "14", ",", "0", "]", "=", "1", "\n", "v", "[", "15", ",", "0", "]", "=", "1", "\n", "v", "[", "16", ",", "0", "]", "=", "1", "\n", "v", "[", "17", ",", "0", "]", "=", "1", "\n", "v", "[", "18", ",", "0", "]", "=", "1", "\n", "v", "[", "19", ",", "0", "]", "=", "1", "\n", "v", "[", "20", ",", "0", "]", "=", "1", "\n", "v", "[", "21", ",", "0", "]", "=", "1", "\n", "v", "[", "22", ",", "0", "]", "=", "1", "\n", "v", "[", "23", ",", "0", "]", "=", "1", "\n", "v", "[", "24", ",", "0", "]", "=", "1", "\n", "v", "[", "25", ",", "0", "]", "=", "1", "\n", "v", "[", "26", ",", "0", "]", "=", "1", "\n", "v", "[", "27", ",", "0", "]", "=", "1", "\n", "v", "[", "28", ",", "0", "]", "=", "1", "\n", "v", "[", "29", ",", "0", "]", "=", "1", "\n", "v", "[", "30", ",", "0", "]", "=", "1", "\n", "v", "[", "31", ",", "0", "]", "=", "1", "\n", "v", "[", "32", ",", "0", "]", "=", "1", "\n", "v", "[", "33", ",", "0", "]", "=", "1", "\n", "v", "[", "34", ",", "0", "]", "=", "1", "\n", "v", "[", "35", ",", "0", "]", "=", "1", "\n", "v", "[", "36", ",", "0", "]", "=", "1", "\n", "v", "[", "37", ",", "0", "]", "=", "1", "\n", "v", "[", "38", ",", "0", "]", "=", "1", "\n", "v", "[", "39", ",", "0", "]", "=", "1", "\n", "v", "[", "40", ",", "0", "]", "=", "1", "\n", "v", "[", "41", ",", "0", "]", "=", "1", "\n", "v", "[", "42", ",", "0", "]", "=", "1", "\n", "v", "[", "43", ",", "0", "]", "=", "1", "\n", "v", "[", "44", ",", "0", "]", "=", "1", "\n", "v", "[", "45", ",", "0", "]", "=", "1", "\n", "v", "[", "46", ",", "0", "]", "=", "1", "\n", "v", "[", "47", ",", "0", "]", "=", "1", "\n", "v", "[", "48", ",", "0", "]", "=", "1", "\n", "v", "[", "49", ",", "0", "]", "=", "1", "\n", "v", "[", "50", ",", "0", "]", "=", "1", "\n", "v", "[", "51", ",", "0", "]", "=", "1", "\n", "v", "[", "52", ",", "0", "]", "=", "1", "\n", "v", "[", "53", ",", "0", "]", "=", "1", "\n", "v", "[", "54", ",", "0", "]", "=", "1", "\n", "v", "[", "55", ",", "0", "]", "=", "1", "\n", "v", "[", "56", ",", "0", "]", "=", "1", "\n", "v", "[", "57", ",", "0", "]", "=", "1", "\n", "v", "[", "58", ",", "0", "]", "=", "1", "\n", "v", "[", "59", ",", "0", "]", "=", "1", "\n", "v", "[", "60", ",", "0", "]", "=", "1", "\n", "v", "[", "61", ",", "0", "]", "=", "1", "\n", "v", "[", "62", ",", "0", "]", "=", "1", "\n", "v", "[", "63", ",", "0", "]", "=", "1", "\n", "v", "[", "64", ",", "0", "]", "=", "1", "\n", "v", "[", "65", ",", "0", "]", "=", "1", "\n", "v", "[", "66", ",", "0", "]", "=", "1", "\n", "v", "[", "67", ",", "0", "]", "=", "1", "\n", "v", "[", "68", ",", "0", "]", "=", "1", "\n", "v", "[", "69", ",", "0", "]", "=", "1", "\n", "v", "[", "70", ",", "0", "]", "=", "1", "\n", "v", "[", "71", ",", "0", "]", "=", "1", "\n", "v", "[", "72", ",", "0", "]", "=", "1", "\n", "v", "[", "73", ",", "0", "]", "=", "1", "\n", "v", "[", "74", ",", "0", "]", "=", "1", "\n", "v", "[", "75", ",", "0", "]", "=", "1", "\n", "v", "[", "76", ",", "0", "]", "=", "1", "\n", "v", "[", "77", ",", "0", "]", "=", "1", "\n", "v", "[", "78", ",", "0", "]", "=", "1", "\n", "v", "[", "79", ",", "0", "]", "=", "1", "\n", "v", "[", "80", ",", "0", "]", "=", "1", "\n", "v", "[", "81", ",", "0", "]", "=", "1", "\n", "v", "[", "82", ",", "0", "]", "=", "1", "\n", "v", "[", "83", ",", "0", "]", "=", "1", "\n", "v", "[", "84", ",", "0", "]", "=", "1", "\n", "v", "[", "85", ",", "0", "]", "=", "1", "\n", "v", "[", "86", ",", "0", "]", "=", "1", "\n", "v", "[", "87", ",", "0", "]", "=", "1", "\n", "v", "[", "88", ",", "0", "]", "=", "1", "\n", "v", "[", "89", ",", "0", "]", "=", "1", "\n", "v", "[", "90", ",", "0", "]", "=", "1", "\n", "v", "[", "91", ",", "0", "]", "=", "1", "\n", "v", "[", "92", ",", "0", "]", "=", "1", "\n", "v", "[", "93", ",", "0", "]", "=", "1", "\n", "v", "[", "94", ",", "0", "]", "=", "1", "\n", "v", "[", "95", ",", "0", "]", "=", "1", "\n", "v", "[", "96", ",", "0", "]", "=", "1", "\n", "v", "[", "97", ",", "0", "]", "=", "1", "\n", "v", "[", "98", ",", "0", "]", "=", "1", "\n", "v", "[", "99", ",", "0", "]", "=", "1", "\n", "v", "[", "100", ",", "0", "]", "=", "1", "\n", "v", "[", "101", ",", "0", "]", "=", "1", "\n", "v", "[", "102", ",", "0", "]", "=", "1", "\n", "v", "[", "103", ",", "0", "]", "=", "1", "\n", "v", "[", "104", ",", "0", "]", "=", "1", "\n", "v", "[", "105", ",", "0", "]", "=", "1", "\n", "v", "[", "106", ",", "0", "]", "=", "1", "\n", "v", "[", "107", ",", "0", "]", "=", "1", "\n", "v", "[", "108", ",", "0", "]", "=", "1", "\n", "v", "[", "109", ",", "0", "]", "=", "1", "\n", "v", "[", "110", ",", "0", "]", "=", "1", "\n", "v", "[", "111", ",", "0", "]", "=", "1", "\n", "v", "[", "112", ",", "0", "]", "=", "1", "\n", "v", "[", "113", ",", "0", "]", "=", "1", "\n", "v", "[", "114", ",", "0", "]", "=", "1", "\n", "v", "[", "115", ",", "0", "]", "=", "1", "\n", "v", "[", "116", ",", "0", "]", "=", "1", "\n", "v", "[", "117", ",", "0", "]", "=", "1", "\n", "v", "[", "118", ",", "0", "]", "=", "1", "\n", "v", "[", "119", ",", "0", "]", "=", "1", "\n", "v", "[", "120", ",", "0", "]", "=", "1", "\n", "v", "[", "121", ",", "0", "]", "=", "1", "\n", "v", "[", "122", ",", "0", "]", "=", "1", "\n", "v", "[", "123", ",", "0", "]", "=", "1", "\n", "v", "[", "124", ",", "0", "]", "=", "1", "\n", "v", "[", "125", ",", "0", "]", "=", "1", "\n", "v", "[", "126", ",", "0", "]", "=", "1", "\n", "v", "[", "127", ",", "0", "]", "=", "1", "\n", "v", "[", "128", ",", "0", "]", "=", "1", "\n", "v", "[", "129", ",", "0", "]", "=", "1", "\n", "v", "[", "130", ",", "0", "]", "=", "1", "\n", "v", "[", "131", ",", "0", "]", "=", "1", "\n", "v", "[", "132", ",", "0", "]", "=", "1", "\n", "v", "[", "133", ",", "0", "]", "=", "1", "\n", "v", "[", "134", ",", "0", "]", "=", "1", "\n", "v", "[", "135", ",", "0", "]", "=", "1", "\n", "v", "[", "136", ",", "0", "]", "=", "1", "\n", "v", "[", "137", ",", "0", "]", "=", "1", "\n", "v", "[", "138", ",", "0", "]", "=", "1", "\n", "v", "[", "139", ",", "0", "]", "=", "1", "\n", "v", "[", "140", ",", "0", "]", "=", "1", "\n", "v", "[", "141", ",", "0", "]", "=", "1", "\n", "v", "[", "142", ",", "0", "]", "=", "1", "\n", "v", "[", "143", ",", "0", "]", "=", "1", "\n", "v", "[", "144", ",", "0", "]", "=", "1", "\n", "v", "[", "145", ",", "0", "]", "=", "1", "\n", "v", "[", "146", ",", "0", "]", "=", "1", "\n", "v", "[", "147", ",", "0", "]", "=", "1", "\n", "v", "[", "148", ",", "0", "]", "=", "1", "\n", "v", "[", "149", ",", "0", "]", "=", "1", "\n", "v", "[", "150", ",", "0", "]", "=", "1", "\n", "v", "[", "151", ",", "0", "]", "=", "1", "\n", "v", "[", "152", ",", "0", "]", "=", "1", "\n", "v", "[", "153", ",", "0", "]", "=", "1", "\n", "v", "[", "154", ",", "0", "]", "=", "1", "\n", "v", "[", "155", ",", "0", "]", "=", "1", "\n", "v", "[", "156", ",", "0", "]", "=", "1", "\n", "v", "[", "157", ",", "0", "]", "=", "1", "\n", "v", "[", "158", ",", "0", "]", "=", "1", "\n", "v", "[", "159", ",", "0", "]", "=", "1", "\n", "v", "[", "160", ",", "0", "]", "=", "1", "\n", "v", "[", "161", ",", "0", "]", "=", "1", "\n", "v", "[", "162", ",", "0", "]", "=", "1", "\n", "v", "[", "163", ",", "0", "]", "=", "1", "\n", "v", "[", "164", ",", "0", "]", "=", "1", "\n", "v", "[", "165", ",", "0", "]", "=", "1", "\n", "v", "[", "166", ",", "0", "]", "=", "1", "\n", "v", "[", "167", ",", "0", "]", "=", "1", "\n", "v", "[", "168", ",", "0", "]", "=", "1", "\n", "v", "[", "169", ",", "0", "]", "=", "1", "\n", "v", "[", "170", ",", "0", "]", "=", "1", "\n", "v", "[", "171", ",", "0", "]", "=", "1", "\n", "v", "[", "172", ",", "0", "]", "=", "1", "\n", "v", "[", "173", ",", "0", "]", "=", "1", "\n", "v", "[", "174", ",", "0", "]", "=", "1", "\n", "v", "[", "175", ",", "0", "]", "=", "1", "\n", "v", "[", "176", ",", "0", "]", "=", "1", "\n", "v", "[", "177", ",", "0", "]", "=", "1", "\n", "v", "[", "178", ",", "0", "]", "=", "1", "\n", "v", "[", "179", ",", "0", "]", "=", "1", "\n", "v", "[", "180", ",", "0", "]", "=", "1", "\n", "v", "[", "181", ",", "0", "]", "=", "1", "\n", "v", "[", "182", ",", "0", "]", "=", "1", "\n", "v", "[", "183", ",", "0", "]", "=", "1", "\n", "v", "[", "184", ",", "0", "]", "=", "1", "\n", "v", "[", "185", ",", "0", "]", "=", "1", "\n", "v", "[", "186", ",", "0", "]", "=", "1", "\n", "v", "[", "187", ",", "0", "]", "=", "1", "\n", "v", "[", "188", ",", "0", "]", "=", "1", "\n", "v", "[", "189", ",", "0", "]", "=", "1", "\n", "v", "[", "190", ",", "0", "]", "=", "1", "\n", "v", "[", "191", ",", "0", "]", "=", "1", "\n", "v", "[", "192", ",", "0", "]", "=", "1", "\n", "v", "[", "193", ",", "0", "]", "=", "1", "\n", "v", "[", "194", ",", "0", "]", "=", "1", "\n", "v", "[", "195", ",", "0", "]", "=", "1", "\n", "v", "[", "196", ",", "0", "]", "=", "1", "\n", "v", "[", "197", ",", "0", "]", "=", "1", "\n", "v", "[", "198", ",", "0", "]", "=", "1", "\n", "v", "[", "199", ",", "0", "]", "=", "1", "\n", "v", "[", "200", ",", "0", "]", "=", "1", "\n", "v", "[", "201", ",", "0", "]", "=", "1", "\n", "v", "[", "202", ",", "0", "]", "=", "1", "\n", "v", "[", "203", ",", "0", "]", "=", "1", "\n", "v", "[", "204", ",", "0", "]", "=", "1", "\n", "v", "[", "205", ",", "0", "]", "=", "1", "\n", "v", "[", "206", ",", "0", "]", "=", "1", "\n", "v", "[", "207", ",", "0", "]", "=", "1", "\n", "v", "[", "208", ",", "0", "]", "=", "1", "\n", "v", "[", "209", ",", "0", "]", "=", "1", "\n", "v", "[", "210", ",", "0", "]", "=", "1", "\n", "v", "[", "211", ",", "0", "]", "=", "1", "\n", "v", "[", "212", ",", "0", "]", "=", "1", "\n", "v", "[", "213", ",", "0", "]", "=", "1", "\n", "v", "[", "214", ",", "0", "]", "=", "1", "\n", "v", "[", "215", ",", "0", "]", "=", "1", "\n", "v", "[", "216", ",", "0", "]", "=", "1", "\n", "v", "[", "217", ",", "0", "]", "=", "1", "\n", "v", "[", "218", ",", "0", "]", "=", "1", "\n", "v", "[", "219", ",", "0", "]", "=", "1", "\n", "v", "[", "220", ",", "0", "]", "=", "1", "\n", "v", "[", "221", ",", "0", "]", "=", "1", "\n", "v", "[", "222", ",", "0", "]", "=", "1", "\n", "v", "[", "223", ",", "0", "]", "=", "1", "\n", "v", "[", "224", ",", "0", "]", "=", "1", "\n", "v", "[", "225", ",", "0", "]", "=", "1", "\n", "v", "[", "226", ",", "0", "]", "=", "1", "\n", "v", "[", "227", ",", "0", "]", "=", "1", "\n", "v", "[", "228", ",", "0", "]", "=", "1", "\n", "v", "[", "229", ",", "0", "]", "=", "1", "\n", "v", "[", "230", ",", "0", "]", "=", "1", "\n", "v", "[", "231", ",", "0", "]", "=", "1", "\n", "v", "[", "232", ",", "0", "]", "=", "1", "\n", "v", "[", "233", ",", "0", "]", "=", "1", "\n", "v", "[", "234", ",", "0", "]", "=", "1", "\n", "v", "[", "235", ",", "0", "]", "=", "1", "\n", "v", "[", "236", ",", "0", "]", "=", "1", "\n", "v", "[", "237", ",", "0", "]", "=", "1", "\n", "v", "[", "238", ",", "0", "]", "=", "1", "\n", "v", "[", "239", ",", "0", "]", "=", "1", "\n", "v", "[", "240", ",", "0", "]", "=", "1", "\n", "v", "[", "241", ",", "0", "]", "=", "1", "\n", "v", "[", "242", ",", "0", "]", "=", "1", "\n", "v", "[", "243", ",", "0", "]", "=", "1", "\n", "v", "[", "244", ",", "0", "]", "=", "1", "\n", "v", "[", "245", ",", "0", "]", "=", "1", "\n", "v", "[", "246", ",", "0", "]", "=", "1", "\n", "v", "[", "247", ",", "0", "]", "=", "1", "\n", "v", "[", "248", ",", "0", "]", "=", "1", "\n", "v", "[", "249", ",", "0", "]", "=", "1", "\n", "v", "[", "250", ",", "0", "]", "=", "1", "\n", "v", "[", "251", ",", "0", "]", "=", "1", "\n", "v", "[", "252", ",", "0", "]", "=", "1", "\n", "v", "[", "253", ",", "0", "]", "=", "1", "\n", "v", "[", "254", ",", "0", "]", "=", "1", "\n", "v", "[", "255", ",", "0", "]", "=", "1", "\n", "v", "[", "256", ",", "0", "]", "=", "1", "\n", "v", "[", "257", ",", "0", "]", "=", "1", "\n", "v", "[", "258", ",", "0", "]", "=", "1", "\n", "v", "[", "259", ",", "0", "]", "=", "1", "\n", "v", "[", "260", ",", "0", "]", "=", "1", "\n", "v", "[", "261", ",", "0", "]", "=", "1", "\n", "v", "[", "262", ",", "0", "]", "=", "1", "\n", "v", "[", "263", ",", "0", "]", "=", "1", "\n", "v", "[", "264", ",", "0", "]", "=", "1", "\n", "v", "[", "265", ",", "0", "]", "=", "1", "\n", "v", "[", "266", ",", "0", "]", "=", "1", "\n", "v", "[", "267", ",", "0", "]", "=", "1", "\n", "v", "[", "268", ",", "0", "]", "=", "1", "\n", "v", "[", "269", ",", "0", "]", "=", "1", "\n", "v", "[", "270", ",", "0", "]", "=", "1", "\n", "v", "[", "271", ",", "0", "]", "=", "1", "\n", "v", "[", "272", ",", "0", "]", "=", "1", "\n", "v", "[", "273", ",", "0", "]", "=", "1", "\n", "v", "[", "274", ",", "0", "]", "=", "1", "\n", "v", "[", "275", ",", "0", "]", "=", "1", "\n", "v", "[", "276", ",", "0", "]", "=", "1", "\n", "v", "[", "277", ",", "0", "]", "=", "1", "\n", "v", "[", "278", ",", "0", "]", "=", "1", "\n", "v", "[", "279", ",", "0", "]", "=", "1", "\n", "v", "[", "280", ",", "0", "]", "=", "1", "\n", "v", "[", "281", ",", "0", "]", "=", "1", "\n", "v", "[", "282", ",", "0", "]", "=", "1", "\n", "v", "[", "283", ",", "0", "]", "=", "1", "\n", "v", "[", "284", ",", "0", "]", "=", "1", "\n", "v", "[", "285", ",", "0", "]", "=", "1", "\n", "v", "[", "286", ",", "0", "]", "=", "1", "\n", "v", "[", "287", ",", "0", "]", "=", "1", "\n", "v", "[", "288", ",", "0", "]", "=", "1", "\n", "v", "[", "289", ",", "0", "]", "=", "1", "\n", "v", "[", "290", ",", "0", "]", "=", "1", "\n", "v", "[", "291", ",", "0", "]", "=", "1", "\n", "v", "[", "292", ",", "0", "]", "=", "1", "\n", "v", "[", "293", ",", "0", "]", "=", "1", "\n", "v", "[", "294", ",", "0", "]", "=", "1", "\n", "v", "[", "295", ",", "0", "]", "=", "1", "\n", "v", "[", "296", ",", "0", "]", "=", "1", "\n", "v", "[", "297", ",", "0", "]", "=", "1", "\n", "v", "[", "298", ",", "0", "]", "=", "1", "\n", "v", "[", "299", ",", "0", "]", "=", "1", "\n", "v", "[", "300", ",", "0", "]", "=", "1", "\n", "v", "[", "301", ",", "0", "]", "=", "1", "\n", "v", "[", "302", ",", "0", "]", "=", "1", "\n", "v", "[", "303", ",", "0", "]", "=", "1", "\n", "v", "[", "304", ",", "0", "]", "=", "1", "\n", "v", "[", "305", ",", "0", "]", "=", "1", "\n", "v", "[", "306", ",", "0", "]", "=", "1", "\n", "v", "[", "307", ",", "0", "]", "=", "1", "\n", "v", "[", "308", ",", "0", "]", "=", "1", "\n", "v", "[", "309", ",", "0", "]", "=", "1", "\n", "v", "[", "310", ",", "0", "]", "=", "1", "\n", "v", "[", "311", ",", "0", "]", "=", "1", "\n", "v", "[", "312", ",", "0", "]", "=", "1", "\n", "v", "[", "313", ",", "0", "]", "=", "1", "\n", "v", "[", "314", ",", "0", "]", "=", "1", "\n", "v", "[", "315", ",", "0", "]", "=", "1", "\n", "v", "[", "316", ",", "0", "]", "=", "1", "\n", "v", "[", "317", ",", "0", "]", "=", "1", "\n", "v", "[", "318", ",", "0", "]", "=", "1", "\n", "v", "[", "319", ",", "0", "]", "=", "1", "\n", "v", "[", "320", ",", "0", "]", "=", "1", "\n", "v", "[", "321", ",", "0", "]", "=", "1", "\n", "v", "[", "322", ",", "0", "]", "=", "1", "\n", "v", "[", "323", ",", "0", "]", "=", "1", "\n", "v", "[", "324", ",", "0", "]", "=", "1", "\n", "v", "[", "325", ",", "0", "]", "=", "1", "\n", "v", "[", "326", ",", "0", "]", "=", "1", "\n", "v", "[", "327", ",", "0", "]", "=", "1", "\n", "v", "[", "328", ",", "0", "]", "=", "1", "\n", "v", "[", "329", ",", "0", "]", "=", "1", "\n", "v", "[", "330", ",", "0", "]", "=", "1", "\n", "v", "[", "331", ",", "0", "]", "=", "1", "\n", "v", "[", "332", ",", "0", "]", "=", "1", "\n", "v", "[", "333", ",", "0", "]", "=", "1", "\n", "v", "[", "334", ",", "0", "]", "=", "1", "\n", "v", "[", "335", ",", "0", "]", "=", "1", "\n", "v", "[", "336", ",", "0", "]", "=", "1", "\n", "v", "[", "337", ",", "0", "]", "=", "1", "\n", "v", "[", "338", ",", "0", "]", "=", "1", "\n", "v", "[", "339", ",", "0", "]", "=", "1", "\n", "v", "[", "340", ",", "0", "]", "=", "1", "\n", "v", "[", "341", ",", "0", "]", "=", "1", "\n", "v", "[", "342", ",", "0", "]", "=", "1", "\n", "v", "[", "343", ",", "0", "]", "=", "1", "\n", "v", "[", "344", ",", "0", "]", "=", "1", "\n", "v", "[", "345", ",", "0", "]", "=", "1", "\n", "v", "[", "346", ",", "0", "]", "=", "1", "\n", "v", "[", "347", ",", "0", "]", "=", "1", "\n", "v", "[", "348", ",", "0", "]", "=", "1", "\n", "v", "[", "349", ",", "0", "]", "=", "1", "\n", "v", "[", "350", ",", "0", "]", "=", "1", "\n", "v", "[", "351", ",", "0", "]", "=", "1", "\n", "v", "[", "352", ",", "0", "]", "=", "1", "\n", "v", "[", "353", ",", "0", "]", "=", "1", "\n", "v", "[", "354", ",", "0", "]", "=", "1", "\n", "v", "[", "355", ",", "0", "]", "=", "1", "\n", "v", "[", "356", ",", "0", "]", "=", "1", "\n", "v", "[", "357", ",", "0", "]", "=", "1", "\n", "v", "[", "358", ",", "0", "]", "=", "1", "\n", "v", "[", "359", ",", "0", "]", "=", "1", "\n", "v", "[", "360", ",", "0", "]", "=", "1", "\n", "v", "[", "361", ",", "0", "]", "=", "1", "\n", "v", "[", "362", ",", "0", "]", "=", "1", "\n", "v", "[", "363", ",", "0", "]", "=", "1", "\n", "v", "[", "364", ",", "0", "]", "=", "1", "\n", "v", "[", "365", ",", "0", "]", "=", "1", "\n", "v", "[", "366", ",", "0", "]", "=", "1", "\n", "v", "[", "367", ",", "0", "]", "=", "1", "\n", "v", "[", "368", ",", "0", "]", "=", "1", "\n", "v", "[", "369", ",", "0", "]", "=", "1", "\n", "v", "[", "370", ",", "0", "]", "=", "1", "\n", "v", "[", "371", ",", "0", "]", "=", "1", "\n", "v", "[", "372", ",", "0", "]", "=", "1", "\n", "v", "[", "373", ",", "0", "]", "=", "1", "\n", "v", "[", "374", ",", "0", "]", "=", "1", "\n", "v", "[", "375", ",", "0", "]", "=", "1", "\n", "v", "[", "376", ",", "0", "]", "=", "1", "\n", "v", "[", "377", ",", "0", "]", "=", "1", "\n", "v", "[", "378", ",", "0", "]", "=", "1", "\n", "v", "[", "379", ",", "0", "]", "=", "1", "\n", "v", "[", "380", ",", "0", "]", "=", "1", "\n", "v", "[", "381", ",", "0", "]", "=", "1", "\n", "v", "[", "382", ",", "0", "]", "=", "1", "\n", "v", "[", "383", ",", "0", "]", "=", "1", "\n", "v", "[", "384", ",", "0", "]", "=", "1", "\n", "v", "[", "385", ",", "0", "]", "=", "1", "\n", "v", "[", "386", ",", "0", "]", "=", "1", "\n", "v", "[", "387", ",", "0", "]", "=", "1", "\n", "v", "[", "388", ",", "0", "]", "=", "1", "\n", "v", "[", "389", ",", "0", "]", "=", "1", "\n", "v", "[", "390", ",", "0", "]", "=", "1", "\n", "v", "[", "391", ",", "0", "]", "=", "1", "\n", "v", "[", "392", ",", "0", "]", "=", "1", "\n", "v", "[", "393", ",", "0", "]", "=", "1", "\n", "v", "[", "394", ",", "0", "]", "=", "1", "\n", "v", "[", "395", ",", "0", "]", "=", "1", "\n", "v", "[", "396", ",", "0", "]", "=", "1", "\n", "v", "[", "397", ",", "0", "]", "=", "1", "\n", "v", "[", "398", ",", "0", "]", "=", "1", "\n", "v", "[", "399", ",", "0", "]", "=", "1", "\n", "v", "[", "400", ",", "0", "]", "=", "1", "\n", "v", "[", "401", ",", "0", "]", "=", "1", "\n", "v", "[", "402", ",", "0", "]", "=", "1", "\n", "v", "[", "403", ",", "0", "]", "=", "1", "\n", "v", "[", "404", ",", "0", "]", "=", "1", "\n", "v", "[", "405", ",", "0", "]", "=", "1", "\n", "v", "[", "406", ",", "0", "]", "=", "1", "\n", "v", "[", "407", ",", "0", "]", "=", "1", "\n", "v", "[", "408", ",", "0", "]", "=", "1", "\n", "v", "[", "409", ",", "0", "]", "=", "1", "\n", "v", "[", "410", ",", "0", "]", "=", "1", "\n", "v", "[", "411", ",", "0", "]", "=", "1", "\n", "v", "[", "412", ",", "0", "]", "=", "1", "\n", "v", "[", "413", ",", "0", "]", "=", "1", "\n", "v", "[", "414", ",", "0", "]", "=", "1", "\n", "v", "[", "415", ",", "0", "]", "=", "1", "\n", "v", "[", "416", ",", "0", "]", "=", "1", "\n", "v", "[", "417", ",", "0", "]", "=", "1", "\n", "v", "[", "418", ",", "0", "]", "=", "1", "\n", "v", "[", "419", ",", "0", "]", "=", "1", "\n", "v", "[", "420", ",", "0", "]", "=", "1", "\n", "v", "[", "421", ",", "0", "]", "=", "1", "\n", "v", "[", "422", ",", "0", "]", "=", "1", "\n", "v", "[", "423", ",", "0", "]", "=", "1", "\n", "v", "[", "424", ",", "0", "]", "=", "1", "\n", "v", "[", "425", ",", "0", "]", "=", "1", "\n", "v", "[", "426", ",", "0", "]", "=", "1", "\n", "v", "[", "427", ",", "0", "]", "=", "1", "\n", "v", "[", "428", ",", "0", "]", "=", "1", "\n", "v", "[", "429", ",", "0", "]", "=", "1", "\n", "v", "[", "430", ",", "0", "]", "=", "1", "\n", "v", "[", "431", ",", "0", "]", "=", "1", "\n", "v", "[", "432", ",", "0", "]", "=", "1", "\n", "v", "[", "433", ",", "0", "]", "=", "1", "\n", "v", "[", "434", ",", "0", "]", "=", "1", "\n", "v", "[", "435", ",", "0", "]", "=", "1", "\n", "v", "[", "436", ",", "0", "]", "=", "1", "\n", "v", "[", "437", ",", "0", "]", "=", "1", "\n", "v", "[", "438", ",", "0", "]", "=", "1", "\n", "v", "[", "439", ",", "0", "]", "=", "1", "\n", "v", "[", "440", ",", "0", "]", "=", "1", "\n", "v", "[", "441", ",", "0", "]", "=", "1", "\n", "v", "[", "442", ",", "0", "]", "=", "1", "\n", "v", "[", "443", ",", "0", "]", "=", "1", "\n", "v", "[", "444", ",", "0", "]", "=", "1", "\n", "v", "[", "445", ",", "0", "]", "=", "1", "\n", "v", "[", "446", ",", "0", "]", "=", "1", "\n", "v", "[", "447", ",", "0", "]", "=", "1", "\n", "v", "[", "448", ",", "0", "]", "=", "1", "\n", "v", "[", "449", ",", "0", "]", "=", "1", "\n", "v", "[", "450", ",", "0", "]", "=", "1", "\n", "v", "[", "451", ",", "0", "]", "=", "1", "\n", "v", "[", "452", ",", "0", "]", "=", "1", "\n", "v", "[", "453", ",", "0", "]", "=", "1", "\n", "v", "[", "454", ",", "0", "]", "=", "1", "\n", "v", "[", "455", ",", "0", "]", "=", "1", "\n", "v", "[", "456", ",", "0", "]", "=", "1", "\n", "v", "[", "457", ",", "0", "]", "=", "1", "\n", "v", "[", "458", ",", "0", "]", "=", "1", "\n", "v", "[", "459", ",", "0", "]", "=", "1", "\n", "v", "[", "460", ",", "0", "]", "=", "1", "\n", "v", "[", "461", ",", "0", "]", "=", "1", "\n", "v", "[", "462", ",", "0", "]", "=", "1", "\n", "v", "[", "463", ",", "0", "]", "=", "1", "\n", "v", "[", "464", ",", "0", "]", "=", "1", "\n", "v", "[", "465", ",", "0", "]", "=", "1", "\n", "v", "[", "466", ",", "0", "]", "=", "1", "\n", "v", "[", "467", ",", "0", "]", "=", "1", "\n", "v", "[", "468", ",", "0", "]", "=", "1", "\n", "v", "[", "469", ",", "0", "]", "=", "1", "\n", "v", "[", "470", ",", "0", "]", "=", "1", "\n", "v", "[", "471", ",", "0", "]", "=", "1", "\n", "v", "[", "472", ",", "0", "]", "=", "1", "\n", "v", "[", "473", ",", "0", "]", "=", "1", "\n", "v", "[", "474", ",", "0", "]", "=", "1", "\n", "v", "[", "475", ",", "0", "]", "=", "1", "\n", "v", "[", "476", ",", "0", "]", "=", "1", "\n", "v", "[", "477", ",", "0", "]", "=", "1", "\n", "v", "[", "478", ",", "0", "]", "=", "1", "\n", "v", "[", "479", ",", "0", "]", "=", "1", "\n", "v", "[", "480", ",", "0", "]", "=", "1", "\n", "v", "[", "481", ",", "0", "]", "=", "1", "\n", "v", "[", "482", ",", "0", "]", "=", "1", "\n", "v", "[", "483", ",", "0", "]", "=", "1", "\n", "v", "[", "484", ",", "0", "]", "=", "1", "\n", "v", "[", "485", ",", "0", "]", "=", "1", "\n", "v", "[", "486", ",", "0", "]", "=", "1", "\n", "v", "[", "487", ",", "0", "]", "=", "1", "\n", "v", "[", "488", ",", "0", "]", "=", "1", "\n", "v", "[", "489", ",", "0", "]", "=", "1", "\n", "v", "[", "490", ",", "0", "]", "=", "1", "\n", "v", "[", "491", ",", "0", "]", "=", "1", "\n", "v", "[", "492", ",", "0", "]", "=", "1", "\n", "v", "[", "493", ",", "0", "]", "=", "1", "\n", "v", "[", "494", ",", "0", "]", "=", "1", "\n", "v", "[", "495", ",", "0", "]", "=", "1", "\n", "v", "[", "496", ",", "0", "]", "=", "1", "\n", "v", "[", "497", ",", "0", "]", "=", "1", "\n", "v", "[", "498", ",", "0", "]", "=", "1", "\n", "v", "[", "499", ",", "0", "]", "=", "1", "\n", "v", "[", "500", ",", "0", "]", "=", "1", "\n", "v", "[", "501", ",", "0", "]", "=", "1", "\n", "v", "[", "502", ",", "0", "]", "=", "1", "\n", "v", "[", "503", ",", "0", "]", "=", "1", "\n", "v", "[", "504", ",", "0", "]", "=", "1", "\n", "v", "[", "505", ",", "0", "]", "=", "1", "\n", "v", "[", "506", ",", "0", "]", "=", "1", "\n", "v", "[", "507", ",", "0", "]", "=", "1", "\n", "v", "[", "508", ",", "0", "]", "=", "1", "\n", "v", "[", "509", ",", "0", "]", "=", "1", "\n", "v", "[", "510", ",", "0", "]", "=", "1", "\n", "v", "[", "511", ",", "0", "]", "=", "1", "\n", "v", "[", "512", ",", "0", "]", "=", "1", "\n", "v", "[", "513", ",", "0", "]", "=", "1", "\n", "v", "[", "514", ",", "0", "]", "=", "1", "\n", "v", "[", "515", ",", "0", "]", "=", "1", "\n", "v", "[", "516", ",", "0", "]", "=", "1", "\n", "v", "[", "517", ",", "0", "]", "=", "1", "\n", "v", "[", "518", ",", "0", "]", "=", "1", "\n", "v", "[", "519", ",", "0", "]", "=", "1", "\n", "v", "[", "520", ",", "0", "]", "=", "1", "\n", "v", "[", "521", ",", "0", "]", "=", "1", "\n", "v", "[", "522", ",", "0", "]", "=", "1", "\n", "v", "[", "523", ",", "0", "]", "=", "1", "\n", "v", "[", "524", ",", "0", "]", "=", "1", "\n", "v", "[", "525", ",", "0", "]", "=", "1", "\n", "v", "[", "526", ",", "0", "]", "=", "1", "\n", "v", "[", "527", ",", "0", "]", "=", "1", "\n", "v", "[", "528", ",", "0", "]", "=", "1", "\n", "v", "[", "529", ",", "0", "]", "=", "1", "\n", "v", "[", "530", ",", "0", "]", "=", "1", "\n", "v", "[", "531", ",", "0", "]", "=", "1", "\n", "v", "[", "532", ",", "0", "]", "=", "1", "\n", "v", "[", "533", ",", "0", "]", "=", "1", "\n", "v", "[", "534", ",", "0", "]", "=", "1", "\n", "v", "[", "535", ",", "0", "]", "=", "1", "\n", "v", "[", "536", ",", "0", "]", "=", "1", "\n", "v", "[", "537", ",", "0", "]", "=", "1", "\n", "v", "[", "538", ",", "0", "]", "=", "1", "\n", "v", "[", "539", ",", "0", "]", "=", "1", "\n", "v", "[", "540", ",", "0", "]", "=", "1", "\n", "v", "[", "541", ",", "0", "]", "=", "1", "\n", "v", "[", "542", ",", "0", "]", "=", "1", "\n", "v", "[", "543", ",", "0", "]", "=", "1", "\n", "v", "[", "544", ",", "0", "]", "=", "1", "\n", "v", "[", "545", ",", "0", "]", "=", "1", "\n", "v", "[", "546", ",", "0", "]", "=", "1", "\n", "v", "[", "547", ",", "0", "]", "=", "1", "\n", "v", "[", "548", ",", "0", "]", "=", "1", "\n", "v", "[", "549", ",", "0", "]", "=", "1", "\n", "v", "[", "550", ",", "0", "]", "=", "1", "\n", "v", "[", "551", ",", "0", "]", "=", "1", "\n", "v", "[", "552", ",", "0", "]", "=", "1", "\n", "v", "[", "553", ",", "0", "]", "=", "1", "\n", "v", "[", "554", ",", "0", "]", "=", "1", "\n", "v", "[", "555", ",", "0", "]", "=", "1", "\n", "v", "[", "556", ",", "0", "]", "=", "1", "\n", "v", "[", "557", ",", "0", "]", "=", "1", "\n", "v", "[", "558", ",", "0", "]", "=", "1", "\n", "v", "[", "559", ",", "0", "]", "=", "1", "\n", "v", "[", "560", ",", "0", "]", "=", "1", "\n", "v", "[", "561", ",", "0", "]", "=", "1", "\n", "v", "[", "562", ",", "0", "]", "=", "1", "\n", "v", "[", "563", ",", "0", "]", "=", "1", "\n", "v", "[", "564", ",", "0", "]", "=", "1", "\n", "v", "[", "565", ",", "0", "]", "=", "1", "\n", "v", "[", "566", ",", "0", "]", "=", "1", "\n", "v", "[", "567", ",", "0", "]", "=", "1", "\n", "v", "[", "568", ",", "0", "]", "=", "1", "\n", "v", "[", "569", ",", "0", "]", "=", "1", "\n", "v", "[", "570", ",", "0", "]", "=", "1", "\n", "v", "[", "571", ",", "0", "]", "=", "1", "\n", "v", "[", "572", ",", "0", "]", "=", "1", "\n", "v", "[", "573", ",", "0", "]", "=", "1", "\n", "v", "[", "574", ",", "0", "]", "=", "1", "\n", "v", "[", "575", ",", "0", "]", "=", "1", "\n", "v", "[", "576", ",", "0", "]", "=", "1", "\n", "v", "[", "577", ",", "0", "]", "=", "1", "\n", "v", "[", "578", ",", "0", "]", "=", "1", "\n", "v", "[", "579", ",", "0", "]", "=", "1", "\n", "v", "[", "580", ",", "0", "]", "=", "1", "\n", "v", "[", "581", ",", "0", "]", "=", "1", "\n", "v", "[", "582", ",", "0", "]", "=", "1", "\n", "v", "[", "583", ",", "0", "]", "=", "1", "\n", "v", "[", "584", ",", "0", "]", "=", "1", "\n", "v", "[", "585", ",", "0", "]", "=", "1", "\n", "v", "[", "586", ",", "0", "]", "=", "1", "\n", "v", "[", "587", ",", "0", "]", "=", "1", "\n", "v", "[", "588", ",", "0", "]", "=", "1", "\n", "v", "[", "589", ",", "0", "]", "=", "1", "\n", "v", "[", "590", ",", "0", "]", "=", "1", "\n", "v", "[", "591", ",", "0", "]", "=", "1", "\n", "v", "[", "592", ",", "0", "]", "=", "1", "\n", "v", "[", "593", ",", "0", "]", "=", "1", "\n", "v", "[", "594", ",", "0", "]", "=", "1", "\n", "v", "[", "595", ",", "0", "]", "=", "1", "\n", "v", "[", "596", ",", "0", "]", "=", "1", "\n", "v", "[", "597", ",", "0", "]", "=", "1", "\n", "v", "[", "598", ",", "0", "]", "=", "1", "\n", "v", "[", "599", ",", "0", "]", "=", "1", "\n", "v", "[", "600", ",", "0", "]", "=", "1", "\n", "v", "[", "601", ",", "0", "]", "=", "1", "\n", "v", "[", "602", ",", "0", "]", "=", "1", "\n", "v", "[", "603", ",", "0", "]", "=", "1", "\n", "v", "[", "604", ",", "0", "]", "=", "1", "\n", "v", "[", "605", ",", "0", "]", "=", "1", "\n", "v", "[", "606", ",", "0", "]", "=", "1", "\n", "v", "[", "607", ",", "0", "]", "=", "1", "\n", "v", "[", "608", ",", "0", "]", "=", "1", "\n", "v", "[", "609", ",", "0", "]", "=", "1", "\n", "v", "[", "610", ",", "0", "]", "=", "1", "\n", "v", "[", "611", ",", "0", "]", "=", "1", "\n", "v", "[", "612", ",", "0", "]", "=", "1", "\n", "v", "[", "613", ",", "0", "]", "=", "1", "\n", "v", "[", "614", ",", "0", "]", "=", "1", "\n", "v", "[", "615", ",", "0", "]", "=", "1", "\n", "v", "[", "616", ",", "0", "]", "=", "1", "\n", "v", "[", "617", ",", "0", "]", "=", "1", "\n", "v", "[", "618", ",", "0", "]", "=", "1", "\n", "v", "[", "619", ",", "0", "]", "=", "1", "\n", "v", "[", "620", ",", "0", "]", "=", "1", "\n", "v", "[", "621", ",", "0", "]", "=", "1", "\n", "v", "[", "622", ",", "0", "]", "=", "1", "\n", "v", "[", "623", ",", "0", "]", "=", "1", "\n", "v", "[", "624", ",", "0", "]", "=", "1", "\n", "v", "[", "625", ",", "0", "]", "=", "1", "\n", "v", "[", "626", ",", "0", "]", "=", "1", "\n", "v", "[", "627", ",", "0", "]", "=", "1", "\n", "v", "[", "628", ",", "0", "]", "=", "1", "\n", "v", "[", "629", ",", "0", "]", "=", "1", "\n", "v", "[", "630", ",", "0", "]", "=", "1", "\n", "v", "[", "631", ",", "0", "]", "=", "1", "\n", "v", "[", "632", ",", "0", "]", "=", "1", "\n", "v", "[", "633", ",", "0", "]", "=", "1", "\n", "v", "[", "634", ",", "0", "]", "=", "1", "\n", "v", "[", "635", ",", "0", "]", "=", "1", "\n", "v", "[", "636", ",", "0", "]", "=", "1", "\n", "v", "[", "637", ",", "0", "]", "=", "1", "\n", "v", "[", "638", ",", "0", "]", "=", "1", "\n", "v", "[", "639", ",", "0", "]", "=", "1", "\n", "v", "[", "640", ",", "0", "]", "=", "1", "\n", "v", "[", "641", ",", "0", "]", "=", "1", "\n", "v", "[", "642", ",", "0", "]", "=", "1", "\n", "v", "[", "643", ",", "0", "]", "=", "1", "\n", "v", "[", "644", ",", "0", "]", "=", "1", "\n", "v", "[", "645", ",", "0", "]", "=", "1", "\n", "v", "[", "646", ",", "0", "]", "=", "1", "\n", "v", "[", "647", ",", "0", "]", "=", "1", "\n", "v", "[", "648", ",", "0", "]", "=", "1", "\n", "v", "[", "649", ",", "0", "]", "=", "1", "\n", "v", "[", "650", ",", "0", "]", "=", "1", "\n", "v", "[", "651", ",", "0", "]", "=", "1", "\n", "v", "[", "652", ",", "0", "]", "=", "1", "\n", "v", "[", "653", ",", "0", "]", "=", "1", "\n", "v", "[", "654", ",", "0", "]", "=", "1", "\n", "v", "[", "655", ",", "0", "]", "=", "1", "\n", "v", "[", "656", ",", "0", "]", "=", "1", "\n", "v", "[", "657", ",", "0", "]", "=", "1", "\n", "v", "[", "658", ",", "0", "]", "=", "1", "\n", "v", "[", "659", ",", "0", "]", "=", "1", "\n", "v", "[", "660", ",", "0", "]", "=", "1", "\n", "v", "[", "661", ",", "0", "]", "=", "1", "\n", "v", "[", "662", ",", "0", "]", "=", "1", "\n", "v", "[", "663", ",", "0", "]", "=", "1", "\n", "v", "[", "664", ",", "0", "]", "=", "1", "\n", "v", "[", "665", ",", "0", "]", "=", "1", "\n", "v", "[", "666", ",", "0", "]", "=", "1", "\n", "v", "[", "667", ",", "0", "]", "=", "1", "\n", "v", "[", "668", ",", "0", "]", "=", "1", "\n", "v", "[", "669", ",", "0", "]", "=", "1", "\n", "v", "[", "670", ",", "0", "]", "=", "1", "\n", "v", "[", "671", ",", "0", "]", "=", "1", "\n", "v", "[", "672", ",", "0", "]", "=", "1", "\n", "v", "[", "673", ",", "0", "]", "=", "1", "\n", "v", "[", "674", ",", "0", "]", "=", "1", "\n", "v", "[", "675", ",", "0", "]", "=", "1", "\n", "v", "[", "676", ",", "0", "]", "=", "1", "\n", "v", "[", "677", ",", "0", "]", "=", "1", "\n", "v", "[", "678", ",", "0", "]", "=", "1", "\n", "v", "[", "679", ",", "0", "]", "=", "1", "\n", "v", "[", "680", ",", "0", "]", "=", "1", "\n", "v", "[", "681", ",", "0", "]", "=", "1", "\n", "v", "[", "682", ",", "0", "]", "=", "1", "\n", "v", "[", "683", ",", "0", "]", "=", "1", "\n", "v", "[", "684", ",", "0", "]", "=", "1", "\n", "v", "[", "685", ",", "0", "]", "=", "1", "\n", "v", "[", "686", ",", "0", "]", "=", "1", "\n", "v", "[", "687", ",", "0", "]", "=", "1", "\n", "v", "[", "688", ",", "0", "]", "=", "1", "\n", "v", "[", "689", ",", "0", "]", "=", "1", "\n", "v", "[", "690", ",", "0", "]", "=", "1", "\n", "v", "[", "691", ",", "0", "]", "=", "1", "\n", "v", "[", "692", ",", "0", "]", "=", "1", "\n", "v", "[", "693", ",", "0", "]", "=", "1", "\n", "v", "[", "694", ",", "0", "]", "=", "1", "\n", "v", "[", "695", ",", "0", "]", "=", "1", "\n", "v", "[", "696", ",", "0", "]", "=", "1", "\n", "v", "[", "697", ",", "0", "]", "=", "1", "\n", "v", "[", "698", ",", "0", "]", "=", "1", "\n", "v", "[", "699", ",", "0", "]", "=", "1", "\n", "v", "[", "700", ",", "0", "]", "=", "1", "\n", "v", "[", "701", ",", "0", "]", "=", "1", "\n", "v", "[", "702", ",", "0", "]", "=", "1", "\n", "v", "[", "703", ",", "0", "]", "=", "1", "\n", "v", "[", "704", ",", "0", "]", "=", "1", "\n", "v", "[", "705", ",", "0", "]", "=", "1", "\n", "v", "[", "706", ",", "0", "]", "=", "1", "\n", "v", "[", "707", ",", "0", "]", "=", "1", "\n", "v", "[", "708", ",", "0", "]", "=", "1", "\n", "v", "[", "709", ",", "0", "]", "=", "1", "\n", "v", "[", "710", ",", "0", "]", "=", "1", "\n", "v", "[", "711", ",", "0", "]", "=", "1", "\n", "v", "[", "712", ",", "0", "]", "=", "1", "\n", "v", "[", "713", ",", "0", "]", "=", "1", "\n", "v", "[", "714", ",", "0", "]", "=", "1", "\n", "v", "[", "715", ",", "0", "]", "=", "1", "\n", "v", "[", "716", ",", "0", "]", "=", "1", "\n", "v", "[", "717", ",", "0", "]", "=", "1", "\n", "v", "[", "718", ",", "0", "]", "=", "1", "\n", "v", "[", "719", ",", "0", "]", "=", "1", "\n", "v", "[", "720", ",", "0", "]", "=", "1", "\n", "v", "[", "721", ",", "0", "]", "=", "1", "\n", "v", "[", "722", ",", "0", "]", "=", "1", "\n", "v", "[", "723", ",", "0", "]", "=", "1", "\n", "v", "[", "724", ",", "0", "]", "=", "1", "\n", "v", "[", "725", ",", "0", "]", "=", "1", "\n", "v", "[", "726", ",", "0", "]", "=", "1", "\n", "v", "[", "727", ",", "0", "]", "=", "1", "\n", "v", "[", "728", ",", "0", "]", "=", "1", "\n", "v", "[", "729", ",", "0", "]", "=", "1", "\n", "v", "[", "730", ",", "0", "]", "=", "1", "\n", "v", "[", "731", ",", "0", "]", "=", "1", "\n", "v", "[", "732", ",", "0", "]", "=", "1", "\n", "v", "[", "733", ",", "0", "]", "=", "1", "\n", "v", "[", "734", ",", "0", "]", "=", "1", "\n", "v", "[", "735", ",", "0", "]", "=", "1", "\n", "v", "[", "736", ",", "0", "]", "=", "1", "\n", "v", "[", "737", ",", "0", "]", "=", "1", "\n", "v", "[", "738", ",", "0", "]", "=", "1", "\n", "v", "[", "739", ",", "0", "]", "=", "1", "\n", "v", "[", "740", ",", "0", "]", "=", "1", "\n", "v", "[", "741", ",", "0", "]", "=", "1", "\n", "v", "[", "742", ",", "0", "]", "=", "1", "\n", "v", "[", "743", ",", "0", "]", "=", "1", "\n", "v", "[", "744", ",", "0", "]", "=", "1", "\n", "v", "[", "745", ",", "0", "]", "=", "1", "\n", "v", "[", "746", ",", "0", "]", "=", "1", "\n", "v", "[", "747", ",", "0", "]", "=", "1", "\n", "v", "[", "748", ",", "0", "]", "=", "1", "\n", "v", "[", "749", ",", "0", "]", "=", "1", "\n", "v", "[", "750", ",", "0", "]", "=", "1", "\n", "v", "[", "751", ",", "0", "]", "=", "1", "\n", "v", "[", "752", ",", "0", "]", "=", "1", "\n", "v", "[", "753", ",", "0", "]", "=", "1", "\n", "v", "[", "754", ",", "0", "]", "=", "1", "\n", "v", "[", "755", ",", "0", "]", "=", "1", "\n", "v", "[", "756", ",", "0", "]", "=", "1", "\n", "v", "[", "757", ",", "0", "]", "=", "1", "\n", "v", "[", "758", ",", "0", "]", "=", "1", "\n", "v", "[", "759", ",", "0", "]", "=", "1", "\n", "v", "[", "760", ",", "0", "]", "=", "1", "\n", "v", "[", "761", ",", "0", "]", "=", "1", "\n", "v", "[", "762", ",", "0", "]", "=", "1", "\n", "v", "[", "763", ",", "0", "]", "=", "1", "\n", "v", "[", "764", ",", "0", "]", "=", "1", "\n", "v", "[", "765", ",", "0", "]", "=", "1", "\n", "v", "[", "766", ",", "0", "]", "=", "1", "\n", "v", "[", "767", ",", "0", "]", "=", "1", "\n", "v", "[", "768", ",", "0", "]", "=", "1", "\n", "v", "[", "769", ",", "0", "]", "=", "1", "\n", "v", "[", "770", ",", "0", "]", "=", "1", "\n", "v", "[", "771", ",", "0", "]", "=", "1", "\n", "v", "[", "772", ",", "0", "]", "=", "1", "\n", "v", "[", "773", ",", "0", "]", "=", "1", "\n", "v", "[", "774", ",", "0", "]", "=", "1", "\n", "v", "[", "775", ",", "0", "]", "=", "1", "\n", "v", "[", "776", ",", "0", "]", "=", "1", "\n", "v", "[", "777", ",", "0", "]", "=", "1", "\n", "v", "[", "778", ",", "0", "]", "=", "1", "\n", "v", "[", "779", ",", "0", "]", "=", "1", "\n", "v", "[", "780", ",", "0", "]", "=", "1", "\n", "v", "[", "781", ",", "0", "]", "=", "1", "\n", "v", "[", "782", ",", "0", "]", "=", "1", "\n", "v", "[", "783", ",", "0", "]", "=", "1", "\n", "v", "[", "784", ",", "0", "]", "=", "1", "\n", "v", "[", "785", ",", "0", "]", "=", "1", "\n", "v", "[", "786", ",", "0", "]", "=", "1", "\n", "v", "[", "787", ",", "0", "]", "=", "1", "\n", "v", "[", "788", ",", "0", "]", "=", "1", "\n", "v", "[", "789", ",", "0", "]", "=", "1", "\n", "v", "[", "790", ",", "0", "]", "=", "1", "\n", "v", "[", "791", ",", "0", "]", "=", "1", "\n", "v", "[", "792", ",", "0", "]", "=", "1", "\n", "v", "[", "793", ",", "0", "]", "=", "1", "\n", "v", "[", "794", ",", "0", "]", "=", "1", "\n", "v", "[", "795", ",", "0", "]", "=", "1", "\n", "v", "[", "796", ",", "0", "]", "=", "1", "\n", "v", "[", "797", ",", "0", "]", "=", "1", "\n", "v", "[", "798", ",", "0", "]", "=", "1", "\n", "v", "[", "799", ",", "0", "]", "=", "1", "\n", "v", "[", "800", ",", "0", "]", "=", "1", "\n", "v", "[", "801", ",", "0", "]", "=", "1", "\n", "v", "[", "802", ",", "0", "]", "=", "1", "\n", "v", "[", "803", ",", "0", "]", "=", "1", "\n", "v", "[", "804", ",", "0", "]", "=", "1", "\n", "v", "[", "805", ",", "0", "]", "=", "1", "\n", "v", "[", "806", ",", "0", "]", "=", "1", "\n", "v", "[", "807", ",", "0", "]", "=", "1", "\n", "v", "[", "808", ",", "0", "]", "=", "1", "\n", "v", "[", "809", ",", "0", "]", "=", "1", "\n", "v", "[", "810", ",", "0", "]", "=", "1", "\n", "v", "[", "811", ",", "0", "]", "=", "1", "\n", "v", "[", "812", ",", "0", "]", "=", "1", "\n", "v", "[", "813", ",", "0", "]", "=", "1", "\n", "v", "[", "814", ",", "0", "]", "=", "1", "\n", "v", "[", "815", ",", "0", "]", "=", "1", "\n", "v", "[", "816", ",", "0", "]", "=", "1", "\n", "v", "[", "817", ",", "0", "]", "=", "1", "\n", "v", "[", "818", ",", "0", "]", "=", "1", "\n", "v", "[", "819", ",", "0", "]", "=", "1", "\n", "v", "[", "820", ",", "0", "]", "=", "1", "\n", "v", "[", "821", ",", "0", "]", "=", "1", "\n", "v", "[", "822", ",", "0", "]", "=", "1", "\n", "v", "[", "823", ",", "0", "]", "=", "1", "\n", "v", "[", "824", ",", "0", "]", "=", "1", "\n", "v", "[", "825", ",", "0", "]", "=", "1", "\n", "v", "[", "826", ",", "0", "]", "=", "1", "\n", "v", "[", "827", ",", "0", "]", "=", "1", "\n", "v", "[", "828", ",", "0", "]", "=", "1", "\n", "v", "[", "829", ",", "0", "]", "=", "1", "\n", "v", "[", "830", ",", "0", "]", "=", "1", "\n", "v", "[", "831", ",", "0", "]", "=", "1", "\n", "v", "[", "832", ",", "0", "]", "=", "1", "\n", "v", "[", "833", ",", "0", "]", "=", "1", "\n", "v", "[", "834", ",", "0", "]", "=", "1", "\n", "v", "[", "835", ",", "0", "]", "=", "1", "\n", "v", "[", "836", ",", "0", "]", "=", "1", "\n", "v", "[", "837", ",", "0", "]", "=", "1", "\n", "v", "[", "838", ",", "0", "]", "=", "1", "\n", "v", "[", "839", ",", "0", "]", "=", "1", "\n", "v", "[", "840", ",", "0", "]", "=", "1", "\n", "v", "[", "841", ",", "0", "]", "=", "1", "\n", "v", "[", "842", ",", "0", "]", "=", "1", "\n", "v", "[", "843", ",", "0", "]", "=", "1", "\n", "v", "[", "844", ",", "0", "]", "=", "1", "\n", "v", "[", "845", ",", "0", "]", "=", "1", "\n", "v", "[", "846", ",", "0", "]", "=", "1", "\n", "v", "[", "847", ",", "0", "]", "=", "1", "\n", "v", "[", "848", ",", "0", "]", "=", "1", "\n", "v", "[", "849", ",", "0", "]", "=", "1", "\n", "v", "[", "850", ",", "0", "]", "=", "1", "\n", "v", "[", "851", ",", "0", "]", "=", "1", "\n", "v", "[", "852", ",", "0", "]", "=", "1", "\n", "v", "[", "853", ",", "0", "]", "=", "1", "\n", "v", "[", "854", ",", "0", "]", "=", "1", "\n", "v", "[", "855", ",", "0", "]", "=", "1", "\n", "v", "[", "856", ",", "0", "]", "=", "1", "\n", "v", "[", "857", ",", "0", "]", "=", "1", "\n", "v", "[", "858", ",", "0", "]", "=", "1", "\n", "v", "[", "859", ",", "0", "]", "=", "1", "\n", "v", "[", "860", ",", "0", "]", "=", "1", "\n", "v", "[", "861", ",", "0", "]", "=", "1", "\n", "v", "[", "862", ",", "0", "]", "=", "1", "\n", "v", "[", "863", ",", "0", "]", "=", "1", "\n", "v", "[", "864", ",", "0", "]", "=", "1", "\n", "v", "[", "865", ",", "0", "]", "=", "1", "\n", "v", "[", "866", ",", "0", "]", "=", "1", "\n", "v", "[", "867", ",", "0", "]", "=", "1", "\n", "v", "[", "868", ",", "0", "]", "=", "1", "\n", "v", "[", "869", ",", "0", "]", "=", "1", "\n", "v", "[", "870", ",", "0", "]", "=", "1", "\n", "v", "[", "871", ",", "0", "]", "=", "1", "\n", "v", "[", "872", ",", "0", "]", "=", "1", "\n", "v", "[", "873", ",", "0", "]", "=", "1", "\n", "v", "[", "874", ",", "0", "]", "=", "1", "\n", "v", "[", "875", ",", "0", "]", "=", "1", "\n", "v", "[", "876", ",", "0", "]", "=", "1", "\n", "v", "[", "877", ",", "0", "]", "=", "1", "\n", "v", "[", "878", ",", "0", "]", "=", "1", "\n", "v", "[", "879", ",", "0", "]", "=", "1", "\n", "v", "[", "880", ",", "0", "]", "=", "1", "\n", "v", "[", "881", ",", "0", "]", "=", "1", "\n", "v", "[", "882", ",", "0", "]", "=", "1", "\n", "v", "[", "883", ",", "0", "]", "=", "1", "\n", "v", "[", "884", ",", "0", "]", "=", "1", "\n", "v", "[", "885", ",", "0", "]", "=", "1", "\n", "v", "[", "886", ",", "0", "]", "=", "1", "\n", "v", "[", "887", ",", "0", "]", "=", "1", "\n", "v", "[", "888", ",", "0", "]", "=", "1", "\n", "v", "[", "889", ",", "0", "]", "=", "1", "\n", "v", "[", "890", ",", "0", "]", "=", "1", "\n", "v", "[", "891", ",", "0", "]", "=", "1", "\n", "v", "[", "892", ",", "0", "]", "=", "1", "\n", "v", "[", "893", ",", "0", "]", "=", "1", "\n", "v", "[", "894", ",", "0", "]", "=", "1", "\n", "v", "[", "895", ",", "0", "]", "=", "1", "\n", "v", "[", "896", ",", "0", "]", "=", "1", "\n", "v", "[", "897", ",", "0", "]", "=", "1", "\n", "v", "[", "898", ",", "0", "]", "=", "1", "\n", "v", "[", "899", ",", "0", "]", "=", "1", "\n", "v", "[", "900", ",", "0", "]", "=", "1", "\n", "v", "[", "901", ",", "0", "]", "=", "1", "\n", "v", "[", "902", ",", "0", "]", "=", "1", "\n", "v", "[", "903", ",", "0", "]", "=", "1", "\n", "v", "[", "904", ",", "0", "]", "=", "1", "\n", "v", "[", "905", ",", "0", "]", "=", "1", "\n", "v", "[", "906", ",", "0", "]", "=", "1", "\n", "v", "[", "907", ",", "0", "]", "=", "1", "\n", "v", "[", "908", ",", "0", "]", "=", "1", "\n", "v", "[", "909", ",", "0", "]", "=", "1", "\n", "v", "[", "910", ",", "0", "]", "=", "1", "\n", "v", "[", "911", ",", "0", "]", "=", "1", "\n", "v", "[", "912", ",", "0", "]", "=", "1", "\n", "v", "[", "913", ",", "0", "]", "=", "1", "\n", "v", "[", "914", ",", "0", "]", "=", "1", "\n", "v", "[", "915", ",", "0", "]", "=", "1", "\n", "v", "[", "916", ",", "0", "]", "=", "1", "\n", "v", "[", "917", ",", "0", "]", "=", "1", "\n", "v", "[", "918", ",", "0", "]", "=", "1", "\n", "v", "[", "919", ",", "0", "]", "=", "1", "\n", "v", "[", "920", ",", "0", "]", "=", "1", "\n", "v", "[", "921", ",", "0", "]", "=", "1", "\n", "v", "[", "922", ",", "0", "]", "=", "1", "\n", "v", "[", "923", ",", "0", "]", "=", "1", "\n", "v", "[", "924", ",", "0", "]", "=", "1", "\n", "v", "[", "925", ",", "0", "]", "=", "1", "\n", "v", "[", "926", ",", "0", "]", "=", "1", "\n", "v", "[", "927", ",", "0", "]", "=", "1", "\n", "v", "[", "928", ",", "0", "]", "=", "1", "\n", "v", "[", "929", ",", "0", "]", "=", "1", "\n", "v", "[", "930", ",", "0", "]", "=", "1", "\n", "v", "[", "931", ",", "0", "]", "=", "1", "\n", "v", "[", "932", ",", "0", "]", "=", "1", "\n", "v", "[", "933", ",", "0", "]", "=", "1", "\n", "v", "[", "934", ",", "0", "]", "=", "1", "\n", "v", "[", "935", ",", "0", "]", "=", "1", "\n", "v", "[", "936", ",", "0", "]", "=", "1", "\n", "v", "[", "937", ",", "0", "]", "=", "1", "\n", "v", "[", "938", ",", "0", "]", "=", "1", "\n", "v", "[", "939", ",", "0", "]", "=", "1", "\n", "v", "[", "940", ",", "0", "]", "=", "1", "\n", "v", "[", "941", ",", "0", "]", "=", "1", "\n", "v", "[", "942", ",", "0", "]", "=", "1", "\n", "v", "[", "943", ",", "0", "]", "=", "1", "\n", "v", "[", "944", ",", "0", "]", "=", "1", "\n", "v", "[", "945", ",", "0", "]", "=", "1", "\n", "v", "[", "946", ",", "0", "]", "=", "1", "\n", "v", "[", "947", ",", "0", "]", "=", "1", "\n", "v", "[", "948", ",", "0", "]", "=", "1", "\n", "v", "[", "949", ",", "0", "]", "=", "1", "\n", "v", "[", "950", ",", "0", "]", "=", "1", "\n", "v", "[", "951", ",", "0", "]", "=", "1", "\n", "v", "[", "952", ",", "0", "]", "=", "1", "\n", "v", "[", "953", ",", "0", "]", "=", "1", "\n", "v", "[", "954", ",", "0", "]", "=", "1", "\n", "v", "[", "955", ",", "0", "]", "=", "1", "\n", "v", "[", "956", ",", "0", "]", "=", "1", "\n", "v", "[", "957", ",", "0", "]", "=", "1", "\n", "v", "[", "958", ",", "0", "]", "=", "1", "\n", "v", "[", "959", ",", "0", "]", "=", "1", "\n", "v", "[", "960", ",", "0", "]", "=", "1", "\n", "v", "[", "961", ",", "0", "]", "=", "1", "\n", "v", "[", "962", ",", "0", "]", "=", "1", "\n", "v", "[", "963", ",", "0", "]", "=", "1", "\n", "v", "[", "964", ",", "0", "]", "=", "1", "\n", "v", "[", "965", ",", "0", "]", "=", "1", "\n", "v", "[", "966", ",", "0", "]", "=", "1", "\n", "v", "[", "967", ",", "0", "]", "=", "1", "\n", "v", "[", "968", ",", "0", "]", "=", "1", "\n", "v", "[", "969", ",", "0", "]", "=", "1", "\n", "v", "[", "970", ",", "0", "]", "=", "1", "\n", "v", "[", "971", ",", "0", "]", "=", "1", "\n", "v", "[", "972", ",", "0", "]", "=", "1", "\n", "v", "[", "973", ",", "0", "]", "=", "1", "\n", "v", "[", "974", ",", "0", "]", "=", "1", "\n", "v", "[", "975", ",", "0", "]", "=", "1", "\n", "v", "[", "976", ",", "0", "]", "=", "1", "\n", "v", "[", "977", ",", "0", "]", "=", "1", "\n", "v", "[", "978", ",", "0", "]", "=", "1", "\n", "v", "[", "979", ",", "0", "]", "=", "1", "\n", "v", "[", "980", ",", "0", "]", "=", "1", "\n", "v", "[", "981", ",", "0", "]", "=", "1", "\n", "v", "[", "982", ",", "0", "]", "=", "1", "\n", "v", "[", "983", ",", "0", "]", "=", "1", "\n", "v", "[", "984", ",", "0", "]", "=", "1", "\n", "v", "[", "985", ",", "0", "]", "=", "1", "\n", "v", "[", "986", ",", "0", "]", "=", "1", "\n", "v", "[", "987", ",", "0", "]", "=", "1", "\n", "v", "[", "988", ",", "0", "]", "=", "1", "\n", "v", "[", "989", ",", "0", "]", "=", "1", "\n", "v", "[", "990", ",", "0", "]", "=", "1", "\n", "v", "[", "991", ",", "0", "]", "=", "1", "\n", "v", "[", "992", ",", "0", "]", "=", "1", "\n", "v", "[", "993", ",", "0", "]", "=", "1", "\n", "v", "[", "994", ",", "0", "]", "=", "1", "\n", "v", "[", "995", ",", "0", "]", "=", "1", "\n", "v", "[", "996", ",", "0", "]", "=", "1", "\n", "v", "[", "997", ",", "0", "]", "=", "1", "\n", "v", "[", "998", ",", "0", "]", "=", "1", "\n", "v", "[", "999", ",", "0", "]", "=", "1", "\n", "v", "[", "1000", ",", "0", "]", "=", "1", "\n", "v", "[", "1001", ",", "0", "]", "=", "1", "\n", "v", "[", "1002", ",", "0", "]", "=", "1", "\n", "v", "[", "1003", ",", "0", "]", "=", "1", "\n", "v", "[", "1004", ",", "0", "]", "=", "1", "\n", "v", "[", "1005", ",", "0", "]", "=", "1", "\n", "v", "[", "1006", ",", "0", "]", "=", "1", "\n", "v", "[", "1007", ",", "0", "]", "=", "1", "\n", "v", "[", "1008", ",", "0", "]", "=", "1", "\n", "v", "[", "1009", ",", "0", "]", "=", "1", "\n", "v", "[", "1010", ",", "0", "]", "=", "1", "\n", "v", "[", "1011", ",", "0", "]", "=", "1", "\n", "v", "[", "1012", ",", "0", "]", "=", "1", "\n", "v", "[", "1013", ",", "0", "]", "=", "1", "\n", "v", "[", "1014", ",", "0", "]", "=", "1", "\n", "v", "[", "1015", ",", "0", "]", "=", "1", "\n", "v", "[", "1016", ",", "0", "]", "=", "1", "\n", "v", "[", "1017", ",", "0", "]", "=", "1", "\n", "v", "[", "1018", ",", "0", "]", "=", "1", "\n", "v", "[", "1019", ",", "0", "]", "=", "1", "\n", "v", "[", "1020", ",", "0", "]", "=", "1", "\n", "v", "[", "1021", ",", "0", "]", "=", "1", "\n", "v", "[", "1022", ",", "0", "]", "=", "1", "\n", "v", "[", "1023", ",", "0", "]", "=", "1", "\n", "v", "[", "1024", ",", "0", "]", "=", "1", "\n", "v", "[", "1025", ",", "0", "]", "=", "1", "\n", "v", "[", "1026", ",", "0", "]", "=", "1", "\n", "v", "[", "1027", ",", "0", "]", "=", "1", "\n", "v", "[", "1028", ",", "0", "]", "=", "1", "\n", "v", "[", "1029", ",", "0", "]", "=", "1", "\n", "v", "[", "1030", ",", "0", "]", "=", "1", "\n", "v", "[", "1031", ",", "0", "]", "=", "1", "\n", "v", "[", "1032", ",", "0", "]", "=", "1", "\n", "v", "[", "1033", ",", "0", "]", "=", "1", "\n", "v", "[", "1034", ",", "0", "]", "=", "1", "\n", "v", "[", "1035", ",", "0", "]", "=", "1", "\n", "v", "[", "1036", ",", "0", "]", "=", "1", "\n", "v", "[", "1037", ",", "0", "]", "=", "1", "\n", "v", "[", "1038", ",", "0", "]", "=", "1", "\n", "v", "[", "1039", ",", "0", "]", "=", "1", "\n", "v", "[", "1040", ",", "0", "]", "=", "1", "\n", "v", "[", "1041", ",", "0", "]", "=", "1", "\n", "v", "[", "1042", ",", "0", "]", "=", "1", "\n", "v", "[", "1043", ",", "0", "]", "=", "1", "\n", "v", "[", "1044", ",", "0", "]", "=", "1", "\n", "v", "[", "1045", ",", "0", "]", "=", "1", "\n", "v", "[", "1046", ",", "0", "]", "=", "1", "\n", "v", "[", "1047", ",", "0", "]", "=", "1", "\n", "v", "[", "1048", ",", "0", "]", "=", "1", "\n", "v", "[", "1049", ",", "0", "]", "=", "1", "\n", "v", "[", "1050", ",", "0", "]", "=", "1", "\n", "v", "[", "1051", ",", "0", "]", "=", "1", "\n", "v", "[", "1052", ",", "0", "]", "=", "1", "\n", "v", "[", "1053", ",", "0", "]", "=", "1", "\n", "v", "[", "1054", ",", "0", "]", "=", "1", "\n", "v", "[", "1055", ",", "0", "]", "=", "1", "\n", "v", "[", "1056", ",", "0", "]", "=", "1", "\n", "v", "[", "1057", ",", "0", "]", "=", "1", "\n", "v", "[", "1058", ",", "0", "]", "=", "1", "\n", "v", "[", "1059", ",", "0", "]", "=", "1", "\n", "v", "[", "1060", ",", "0", "]", "=", "1", "\n", "v", "[", "1061", ",", "0", "]", "=", "1", "\n", "v", "[", "1062", ",", "0", "]", "=", "1", "\n", "v", "[", "1063", ",", "0", "]", "=", "1", "\n", "v", "[", "1064", ",", "0", "]", "=", "1", "\n", "v", "[", "1065", ",", "0", "]", "=", "1", "\n", "v", "[", "1066", ",", "0", "]", "=", "1", "\n", "v", "[", "1067", ",", "0", "]", "=", "1", "\n", "v", "[", "1068", ",", "0", "]", "=", "1", "\n", "v", "[", "1069", ",", "0", "]", "=", "1", "\n", "v", "[", "1070", ",", "0", "]", "=", "1", "\n", "v", "[", "1071", ",", "0", "]", "=", "1", "\n", "v", "[", "1072", ",", "0", "]", "=", "1", "\n", "v", "[", "1073", ",", "0", "]", "=", "1", "\n", "v", "[", "1074", ",", "0", "]", "=", "1", "\n", "v", "[", "1075", ",", "0", "]", "=", "1", "\n", "v", "[", "1076", ",", "0", "]", "=", "1", "\n", "v", "[", "1077", ",", "0", "]", "=", "1", "\n", "v", "[", "1078", ",", "0", "]", "=", "1", "\n", "v", "[", "1079", ",", "0", "]", "=", "1", "\n", "v", "[", "1080", ",", "0", "]", "=", "1", "\n", "v", "[", "1081", ",", "0", "]", "=", "1", "\n", "v", "[", "1082", ",", "0", "]", "=", "1", "\n", "v", "[", "1083", ",", "0", "]", "=", "1", "\n", "v", "[", "1084", ",", "0", "]", "=", "1", "\n", "v", "[", "1085", ",", "0", "]", "=", "1", "\n", "v", "[", "1086", ",", "0", "]", "=", "1", "\n", "v", "[", "1087", ",", "0", "]", "=", "1", "\n", "v", "[", "1088", ",", "0", "]", "=", "1", "\n", "v", "[", "1089", ",", "0", "]", "=", "1", "\n", "v", "[", "1090", ",", "0", "]", "=", "1", "\n", "v", "[", "1091", ",", "0", "]", "=", "1", "\n", "v", "[", "1092", ",", "0", "]", "=", "1", "\n", "v", "[", "1093", ",", "0", "]", "=", "1", "\n", "v", "[", "1094", ",", "0", "]", "=", "1", "\n", "v", "[", "1095", ",", "0", "]", "=", "1", "\n", "v", "[", "1096", ",", "0", "]", "=", "1", "\n", "v", "[", "1097", ",", "0", "]", "=", "1", "\n", "v", "[", "1098", ",", "0", "]", "=", "1", "\n", "v", "[", "1099", ",", "0", "]", "=", "1", "\n", "v", "[", "1100", ",", "0", "]", "=", "1", "\n", "v", "[", "1101", ",", "0", "]", "=", "1", "\n", "v", "[", "1102", ",", "0", "]", "=", "1", "\n", "v", "[", "1103", ",", "0", "]", "=", "1", "\n", "v", "[", "1104", ",", "0", "]", "=", "1", "\n", "v", "[", "1105", ",", "0", "]", "=", "1", "\n", "v", "[", "1106", ",", "0", "]", "=", "1", "\n", "v", "[", "1107", ",", "0", "]", "=", "1", "\n", "v", "[", "1108", ",", "0", "]", "=", "1", "\n", "v", "[", "1109", ",", "0", "]", "=", "1", "\n", "v", "[", "1110", ",", "0", "]", "=", "1", "\n", "\n", "v", "[", "2", ",", "1", "]", "=", "1", "\n", "v", "[", "3", ",", "1", "]", "=", "3", "\n", "v", "[", "4", ",", "1", "]", "=", "1", "\n", "v", "[", "5", ",", "1", "]", "=", "3", "\n", "v", "[", "6", ",", "1", "]", "=", "1", "\n", "v", "[", "7", ",", "1", "]", "=", "3", "\n", "v", "[", "8", ",", "1", "]", "=", "3", "\n", "v", "[", "9", ",", "1", "]", "=", "1", "\n", "v", "[", "10", ",", "1", "]", "=", "3", "\n", "v", "[", "11", ",", "1", "]", "=", "1", "\n", "v", "[", "12", ",", "1", "]", "=", "3", "\n", "v", "[", "13", ",", "1", "]", "=", "1", "\n", "v", "[", "14", ",", "1", "]", "=", "3", "\n", "v", "[", "15", ",", "1", "]", "=", "1", "\n", "v", "[", "16", ",", "1", "]", "=", "1", "\n", "v", "[", "17", ",", "1", "]", "=", "3", "\n", "v", "[", "18", ",", "1", "]", "=", "1", "\n", "v", "[", "19", ",", "1", "]", "=", "3", "\n", "v", "[", "20", ",", "1", "]", "=", "1", "\n", "v", "[", "21", ",", "1", "]", "=", "3", "\n", "v", "[", "22", ",", "1", "]", "=", "1", "\n", "v", "[", "23", ",", "1", "]", "=", "3", "\n", "v", "[", "24", ",", "1", "]", "=", "3", "\n", "v", "[", "25", ",", "1", "]", "=", "1", "\n", "v", "[", "26", ",", "1", "]", "=", "1", "\n", "v", "[", "27", ",", "1", "]", "=", "1", "\n", "v", "[", "28", ",", "1", "]", "=", "3", "\n", "v", "[", "29", ",", "1", "]", "=", "1", "\n", "v", "[", "30", ",", "1", "]", "=", "3", "\n", "v", "[", "31", ",", "1", "]", "=", "1", "\n", "v", "[", "32", ",", "1", "]", "=", "3", "\n", "v", "[", "33", ",", "1", "]", "=", "3", "\n", "v", "[", "34", ",", "1", "]", "=", "1", "\n", "v", "[", "35", ",", "1", "]", "=", "3", "\n", "v", "[", "36", ",", "1", "]", "=", "1", "\n", "v", "[", "37", ",", "1", "]", "=", "1", "\n", "v", "[", "38", ",", "1", "]", "=", "1", "\n", "v", "[", "39", ",", "1", "]", "=", "3", "\n", "v", "[", "40", ",", "1", "]", "=", "1", "\n", "v", "[", "41", ",", "1", "]", "=", "3", "\n", "v", "[", "42", ",", "1", "]", "=", "1", "\n", "v", "[", "43", ",", "1", "]", "=", "1", "\n", "v", "[", "44", ",", "1", "]", "=", "1", "\n", "v", "[", "45", ",", "1", "]", "=", "3", "\n", "v", "[", "46", ",", "1", "]", "=", "3", "\n", "v", "[", "47", ",", "1", "]", "=", "1", "\n", "v", "[", "48", ",", "1", "]", "=", "3", "\n", "v", "[", "49", ",", "1", "]", "=", "3", "\n", "v", "[", "50", ",", "1", "]", "=", "1", "\n", "v", "[", "51", ",", "1", "]", "=", "1", "\n", "v", "[", "52", ",", "1", "]", "=", "3", "\n", "v", "[", "53", ",", "1", "]", "=", "3", "\n", "v", "[", "54", ",", "1", "]", "=", "1", "\n", "v", "[", "55", ",", "1", "]", "=", "3", "\n", "v", "[", "56", ",", "1", "]", "=", "3", "\n", "v", "[", "57", ",", "1", "]", "=", "3", "\n", "v", "[", "58", ",", "1", "]", "=", "1", "\n", "v", "[", "59", ",", "1", "]", "=", "3", "\n", "v", "[", "60", ",", "1", "]", "=", "1", "\n", "v", "[", "61", ",", "1", "]", "=", "3", "\n", "v", "[", "62", ",", "1", "]", "=", "1", "\n", "v", "[", "63", ",", "1", "]", "=", "1", "\n", "v", "[", "64", ",", "1", "]", "=", "3", "\n", "v", "[", "65", ",", "1", "]", "=", "3", "\n", "v", "[", "66", ",", "1", "]", "=", "1", "\n", "v", "[", "67", ",", "1", "]", "=", "1", "\n", "v", "[", "68", ",", "1", "]", "=", "1", "\n", "v", "[", "69", ",", "1", "]", "=", "1", "\n", "v", "[", "70", ",", "1", "]", "=", "3", "\n", "v", "[", "71", ",", "1", "]", "=", "1", "\n", "v", "[", "72", ",", "1", "]", "=", "1", "\n", "v", "[", "73", ",", "1", "]", "=", "3", "\n", "v", "[", "74", ",", "1", "]", "=", "1", "\n", "v", "[", "75", ",", "1", "]", "=", "1", "\n", "v", "[", "76", ",", "1", "]", "=", "1", "\n", "v", "[", "77", ",", "1", "]", "=", "3", "\n", "v", "[", "78", ",", "1", "]", "=", "3", "\n", "v", "[", "79", ",", "1", "]", "=", "1", "\n", "v", "[", "80", ",", "1", "]", "=", "3", "\n", "v", "[", "81", ",", "1", "]", "=", "3", "\n", "v", "[", "82", ",", "1", "]", "=", "1", "\n", "v", "[", "83", ",", "1", "]", "=", "3", "\n", "v", "[", "84", ",", "1", "]", "=", "3", "\n", "v", "[", "85", ",", "1", "]", "=", "3", "\n", "v", "[", "86", ",", "1", "]", "=", "1", "\n", "v", "[", "87", ",", "1", "]", "=", "3", "\n", "v", "[", "88", ",", "1", "]", "=", "3", "\n", "v", "[", "89", ",", "1", "]", "=", "3", "\n", "v", "[", "90", ",", "1", "]", "=", "1", "\n", "v", "[", "91", ",", "1", "]", "=", "3", "\n", "v", "[", "92", ",", "1", "]", "=", "3", "\n", "v", "[", "93", ",", "1", "]", "=", "1", "\n", "v", "[", "94", ",", "1", "]", "=", "3", "\n", "v", "[", "95", ",", "1", "]", "=", "3", "\n", "v", "[", "96", ",", "1", "]", "=", "3", "\n", "v", "[", "97", ",", "1", "]", "=", "1", "\n", "v", "[", "98", ",", "1", "]", "=", "3", "\n", "v", "[", "99", ",", "1", "]", "=", "1", "\n", "v", "[", "100", ",", "1", "]", "=", "3", "\n", "v", "[", "101", ",", "1", "]", "=", "1", "\n", "v", "[", "102", ",", "1", "]", "=", "1", "\n", "v", "[", "103", ",", "1", "]", "=", "3", "\n", "v", "[", "104", ",", "1", "]", "=", "3", "\n", "v", "[", "105", ",", "1", "]", "=", "1", "\n", "v", "[", "106", ",", "1", "]", "=", "3", "\n", "v", "[", "107", ",", "1", "]", "=", "3", "\n", "v", "[", "108", ",", "1", "]", "=", "1", "\n", "v", "[", "109", ",", "1", "]", "=", "1", "\n", "v", "[", "110", ",", "1", "]", "=", "1", "\n", "v", "[", "111", ",", "1", "]", "=", "3", "\n", "v", "[", "112", ",", "1", "]", "=", "3", "\n", "v", "[", "113", ",", "1", "]", "=", "1", "\n", "v", "[", "114", ",", "1", "]", "=", "3", "\n", "v", "[", "115", ",", "1", "]", "=", "3", "\n", "v", "[", "116", ",", "1", "]", "=", "1", "\n", "v", "[", "117", ",", "1", "]", "=", "3", "\n", "v", "[", "118", ",", "1", "]", "=", "1", "\n", "v", "[", "119", ",", "1", "]", "=", "1", "\n", "v", "[", "120", ",", "1", "]", "=", "3", "\n", "v", "[", "121", ",", "1", "]", "=", "3", "\n", "v", "[", "122", ",", "1", "]", "=", "3", "\n", "v", "[", "123", ",", "1", "]", "=", "1", "\n", "v", "[", "124", ",", "1", "]", "=", "1", "\n", "v", "[", "125", ",", "1", "]", "=", "1", "\n", "v", "[", "126", ",", "1", "]", "=", "3", "\n", "v", "[", "127", ",", "1", "]", "=", "1", "\n", "v", "[", "128", ",", "1", "]", "=", "1", "\n", "v", "[", "129", ",", "1", "]", "=", "3", "\n", "v", "[", "130", ",", "1", "]", "=", "1", "\n", "v", "[", "131", ",", "1", "]", "=", "1", "\n", "v", "[", "132", ",", "1", "]", "=", "3", "\n", "v", "[", "133", ",", "1", "]", "=", "3", "\n", "v", "[", "134", ",", "1", "]", "=", "1", "\n", "v", "[", "135", ",", "1", "]", "=", "3", "\n", "v", "[", "136", ",", "1", "]", "=", "1", "\n", "v", "[", "137", ",", "1", "]", "=", "3", "\n", "v", "[", "138", ",", "1", "]", "=", "3", "\n", "v", "[", "139", ",", "1", "]", "=", "3", "\n", "v", "[", "140", ",", "1", "]", "=", "3", "\n", "v", "[", "141", ",", "1", "]", "=", "1", "\n", "v", "[", "142", ",", "1", "]", "=", "1", "\n", "v", "[", "143", ",", "1", "]", "=", "1", "\n", "v", "[", "144", ",", "1", "]", "=", "3", "\n", "v", "[", "145", ",", "1", "]", "=", "3", "\n", "v", "[", "146", ",", "1", "]", "=", "1", "\n", "v", "[", "147", ",", "1", "]", "=", "1", "\n", "v", "[", "148", ",", "1", "]", "=", "3", "\n", "v", "[", "149", ",", "1", "]", "=", "1", "\n", "v", "[", "150", ",", "1", "]", "=", "1", "\n", "v", "[", "151", ",", "1", "]", "=", "1", "\n", "v", "[", "152", ",", "1", "]", "=", "1", "\n", "v", "[", "153", ",", "1", "]", "=", "1", "\n", "v", "[", "154", ",", "1", "]", "=", "1", "\n", "v", "[", "155", ",", "1", "]", "=", "3", "\n", "v", "[", "156", ",", "1", "]", "=", "1", "\n", "v", "[", "157", ",", "1", "]", "=", "3", "\n", "v", "[", "158", ",", "1", "]", "=", "1", "\n", "v", "[", "159", ",", "1", "]", "=", "1", "\n", "v", "[", "160", ",", "1", "]", "=", "1", "\n", "v", "[", "161", ",", "1", "]", "=", "3", "\n", "v", "[", "162", ",", "1", "]", "=", "1", "\n", "v", "[", "163", ",", "1", "]", "=", "3", "\n", "v", "[", "164", ",", "1", "]", "=", "1", "\n", "v", "[", "165", ",", "1", "]", "=", "3", "\n", "v", "[", "166", ",", "1", "]", "=", "3", "\n", "v", "[", "167", ",", "1", "]", "=", "3", "\n", "v", "[", "168", ",", "1", "]", "=", "1", "\n", "v", "[", "169", ",", "1", "]", "=", "1", "\n", "v", "[", "170", ",", "1", "]", "=", "3", "\n", "v", "[", "171", ",", "1", "]", "=", "3", "\n", "v", "[", "172", ",", "1", "]", "=", "1", "\n", "v", "[", "173", ",", "1", "]", "=", "3", "\n", "v", "[", "174", ",", "1", "]", "=", "1", "\n", "v", "[", "175", ",", "1", "]", "=", "3", "\n", "v", "[", "176", ",", "1", "]", "=", "1", "\n", "v", "[", "177", ",", "1", "]", "=", "1", "\n", "v", "[", "178", ",", "1", "]", "=", "3", "\n", "v", "[", "179", ",", "1", "]", "=", "1", "\n", "v", "[", "180", ",", "1", "]", "=", "3", "\n", "v", "[", "181", ",", "1", "]", "=", "1", "\n", "v", "[", "182", ",", "1", "]", "=", "3", "\n", "v", "[", "183", ",", "1", "]", "=", "1", "\n", "v", "[", "184", ",", "1", "]", "=", "3", "\n", "v", "[", "185", ",", "1", "]", "=", "1", "\n", "v", "[", "186", ",", "1", "]", "=", "1", "\n", "v", "[", "187", ",", "1", "]", "=", "1", "\n", "v", "[", "188", ",", "1", "]", "=", "3", "\n", "v", "[", "189", ",", "1", "]", "=", "3", "\n", "v", "[", "190", ",", "1", "]", "=", "1", "\n", "v", "[", "191", ",", "1", "]", "=", "3", "\n", "v", "[", "192", ",", "1", "]", "=", "3", "\n", "v", "[", "193", ",", "1", "]", "=", "1", "\n", "v", "[", "194", ",", "1", "]", "=", "3", "\n", "v", "[", "195", ",", "1", "]", "=", "1", "\n", "v", "[", "196", ",", "1", "]", "=", "1", "\n", "v", "[", "197", ",", "1", "]", "=", "1", "\n", "v", "[", "198", ",", "1", "]", "=", "3", "\n", "v", "[", "199", ",", "1", "]", "=", "1", "\n", "v", "[", "200", ",", "1", "]", "=", "3", "\n", "v", "[", "201", ",", "1", "]", "=", "1", "\n", "v", "[", "202", ",", "1", "]", "=", "1", "\n", "v", "[", "203", ",", "1", "]", "=", "3", "\n", "v", "[", "204", ",", "1", "]", "=", "1", "\n", "v", "[", "205", ",", "1", "]", "=", "1", "\n", "v", "[", "206", ",", "1", "]", "=", "3", "\n", "v", "[", "207", ",", "1", "]", "=", "3", "\n", "v", "[", "208", ",", "1", "]", "=", "1", "\n", "v", "[", "209", ",", "1", "]", "=", "1", "\n", "v", "[", "210", ",", "1", "]", "=", "3", "\n", "v", "[", "211", ",", "1", "]", "=", "3", "\n", "v", "[", "212", ",", "1", "]", "=", "3", "\n", "v", "[", "213", ",", "1", "]", "=", "1", "\n", "v", "[", "214", ",", "1", "]", "=", "3", "\n", "v", "[", "215", ",", "1", "]", "=", "3", "\n", "v", "[", "216", ",", "1", "]", "=", "3", "\n", "v", "[", "217", ",", "1", "]", "=", "1", "\n", "v", "[", "218", ",", "1", "]", "=", "3", "\n", "v", "[", "219", ",", "1", "]", "=", "1", "\n", "v", "[", "220", ",", "1", "]", "=", "3", "\n", "v", "[", "221", ",", "1", "]", "=", "1", "\n", "v", "[", "222", ",", "1", "]", "=", "1", "\n", "v", "[", "223", ",", "1", "]", "=", "1", "\n", "v", "[", "224", ",", "1", "]", "=", "3", "\n", "v", "[", "225", ",", "1", "]", "=", "1", "\n", "v", "[", "226", ",", "1", "]", "=", "1", "\n", "v", "[", "227", ",", "1", "]", "=", "1", "\n", "v", "[", "228", ",", "1", "]", "=", "3", "\n", "v", "[", "229", ",", "1", "]", "=", "1", "\n", "v", "[", "230", ",", "1", "]", "=", "1", "\n", "v", "[", "231", ",", "1", "]", "=", "1", "\n", "v", "[", "232", ",", "1", "]", "=", "1", "\n", "v", "[", "233", ",", "1", "]", "=", "1", "\n", "v", "[", "234", ",", "1", "]", "=", "3", "\n", "v", "[", "235", ",", "1", "]", "=", "3", "\n", "v", "[", "236", ",", "1", "]", "=", "3", "\n", "v", "[", "237", ",", "1", "]", "=", "1", "\n", "v", "[", "238", ",", "1", "]", "=", "1", "\n", "v", "[", "239", ",", "1", "]", "=", "1", "\n", "v", "[", "240", ",", "1", "]", "=", "1", "\n", "v", "[", "241", ",", "1", "]", "=", "3", "\n", "v", "[", "242", ",", "1", "]", "=", "3", "\n", "v", "[", "243", ",", "1", "]", "=", "3", "\n", "v", "[", "244", ",", "1", "]", "=", "1", "\n", "v", "[", "245", ",", "1", "]", "=", "3", "\n", "v", "[", "246", ",", "1", "]", "=", "3", "\n", "v", "[", "247", ",", "1", "]", "=", "1", "\n", "v", "[", "248", ",", "1", "]", "=", "1", "\n", "v", "[", "249", ",", "1", "]", "=", "1", "\n", "v", "[", "250", ",", "1", "]", "=", "1", "\n", "v", "[", "251", ",", "1", "]", "=", "3", "\n", "v", "[", "252", ",", "1", "]", "=", "1", "\n", "v", "[", "253", ",", "1", "]", "=", "1", "\n", "v", "[", "254", ",", "1", "]", "=", "3", "\n", "v", "[", "255", ",", "1", "]", "=", "1", "\n", "v", "[", "256", ",", "1", "]", "=", "3", "\n", "v", "[", "257", ",", "1", "]", "=", "3", "\n", "v", "[", "258", ",", "1", "]", "=", "1", "\n", "v", "[", "259", ",", "1", "]", "=", "1", "\n", "v", "[", "260", ",", "1", "]", "=", "3", "\n", "v", "[", "261", ",", "1", "]", "=", "3", "\n", "v", "[", "262", ",", "1", "]", "=", "1", "\n", "v", "[", "263", ",", "1", "]", "=", "1", "\n", "v", "[", "264", ",", "1", "]", "=", "1", "\n", "v", "[", "265", ",", "1", "]", "=", "1", "\n", "v", "[", "266", ",", "1", "]", "=", "3", "\n", "v", "[", "267", ",", "1", "]", "=", "1", "\n", "v", "[", "268", ",", "1", "]", "=", "3", "\n", "v", "[", "269", ",", "1", "]", "=", "3", "\n", "v", "[", "270", ",", "1", "]", "=", "1", "\n", "v", "[", "271", ",", "1", "]", "=", "3", "\n", "v", "[", "272", ",", "1", "]", "=", "3", "\n", "v", "[", "273", ",", "1", "]", "=", "1", "\n", "v", "[", "274", ",", "1", "]", "=", "1", "\n", "v", "[", "275", ",", "1", "]", "=", "1", "\n", "v", "[", "276", ",", "1", "]", "=", "3", "\n", "v", "[", "277", ",", "1", "]", "=", "3", "\n", "v", "[", "278", ",", "1", "]", "=", "3", "\n", "v", "[", "279", ",", "1", "]", "=", "1", "\n", "v", "[", "280", ",", "1", "]", "=", "3", "\n", "v", "[", "281", ",", "1", "]", "=", "3", "\n", "v", "[", "282", ",", "1", "]", "=", "1", "\n", "v", "[", "283", ",", "1", "]", "=", "3", "\n", "v", "[", "284", ",", "1", "]", "=", "3", "\n", "v", "[", "285", ",", "1", "]", "=", "1", "\n", "v", "[", "286", ",", "1", "]", "=", "3", "\n", "v", "[", "287", ",", "1", "]", "=", "1", "\n", "v", "[", "288", ",", "1", "]", "=", "3", "\n", "v", "[", "289", ",", "1", "]", "=", "3", "\n", "v", "[", "290", ",", "1", "]", "=", "3", "\n", "v", "[", "291", ",", "1", "]", "=", "1", "\n", "v", "[", "292", ",", "1", "]", "=", "3", "\n", "v", "[", "293", ",", "1", "]", "=", "1", "\n", "v", "[", "294", ",", "1", "]", "=", "1", "\n", "v", "[", "295", ",", "1", "]", "=", "3", "\n", "v", "[", "296", ",", "1", "]", "=", "1", "\n", "v", "[", "297", ",", "1", "]", "=", "3", "\n", "v", "[", "298", ",", "1", "]", "=", "1", "\n", "v", "[", "299", ",", "1", "]", "=", "1", "\n", "v", "[", "300", ",", "1", "]", "=", "1", "\n", "v", "[", "301", ",", "1", "]", "=", "3", "\n", "v", "[", "302", ",", "1", "]", "=", "3", "\n", "v", "[", "303", ",", "1", "]", "=", "3", "\n", "v", "[", "304", ",", "1", "]", "=", "1", "\n", "v", "[", "305", ",", "1", "]", "=", "1", "\n", "v", "[", "306", ",", "1", "]", "=", "3", "\n", "v", "[", "307", ",", "1", "]", "=", "1", "\n", "v", "[", "308", ",", "1", "]", "=", "3", "\n", "v", "[", "309", ",", "1", "]", "=", "1", "\n", "v", "[", "310", ",", "1", "]", "=", "1", "\n", "v", "[", "311", ",", "1", "]", "=", "1", "\n", "v", "[", "312", ",", "1", "]", "=", "1", "\n", "v", "[", "313", ",", "1", "]", "=", "1", "\n", "v", "[", "314", ",", "1", "]", "=", "1", "\n", "v", "[", "315", ",", "1", "]", "=", "3", "\n", "v", "[", "316", ",", "1", "]", "=", "1", "\n", "v", "[", "317", ",", "1", "]", "=", "1", "\n", "v", "[", "318", ",", "1", "]", "=", "3", "\n", "v", "[", "319", ",", "1", "]", "=", "1", "\n", "v", "[", "320", ",", "1", "]", "=", "3", "\n", "v", "[", "321", ",", "1", "]", "=", "3", "\n", "v", "[", "322", ",", "1", "]", "=", "1", "\n", "v", "[", "323", ",", "1", "]", "=", "1", "\n", "v", "[", "324", ",", "1", "]", "=", "1", "\n", "v", "[", "325", ",", "1", "]", "=", "1", "\n", "v", "[", "326", ",", "1", "]", "=", "3", "\n", "v", "[", "327", ",", "1", "]", "=", "1", "\n", "v", "[", "328", ",", "1", "]", "=", "3", "\n", "v", "[", "329", ",", "1", "]", "=", "1", "\n", "v", "[", "330", ",", "1", "]", "=", "3", "\n", "v", "[", "331", ",", "1", "]", "=", "1", "\n", "v", "[", "332", ",", "1", "]", "=", "1", "\n", "v", "[", "333", ",", "1", "]", "=", "1", "\n", "v", "[", "334", ",", "1", "]", "=", "1", "\n", "v", "[", "335", ",", "1", "]", "=", "3", "\n", "v", "[", "336", ",", "1", "]", "=", "3", "\n", "v", "[", "337", ",", "1", "]", "=", "1", "\n", "v", "[", "338", ",", "1", "]", "=", "1", "\n", "v", "[", "339", ",", "1", "]", "=", "1", "\n", "v", "[", "340", ",", "1", "]", "=", "1", "\n", "v", "[", "341", ",", "1", "]", "=", "1", "\n", "v", "[", "342", ",", "1", "]", "=", "3", "\n", "v", "[", "343", ",", "1", "]", "=", "3", "\n", "v", "[", "344", ",", "1", "]", "=", "3", "\n", "v", "[", "345", ",", "1", "]", "=", "1", "\n", "v", "[", "346", ",", "1", "]", "=", "1", "\n", "v", "[", "347", ",", "1", "]", "=", "3", "\n", "v", "[", "348", ",", "1", "]", "=", "3", "\n", "v", "[", "349", ",", "1", "]", "=", "3", "\n", "v", "[", "350", ",", "1", "]", "=", "3", "\n", "v", "[", "351", ",", "1", "]", "=", "3", "\n", "v", "[", "352", ",", "1", "]", "=", "1", "\n", "v", "[", "353", ",", "1", "]", "=", "3", "\n", "v", "[", "354", ",", "1", "]", "=", "3", "\n", "v", "[", "355", ",", "1", "]", "=", "1", "\n", "v", "[", "356", ",", "1", "]", "=", "3", "\n", "v", "[", "357", ",", "1", "]", "=", "3", "\n", "v", "[", "358", ",", "1", "]", "=", "3", "\n", "v", "[", "359", ",", "1", "]", "=", "3", "\n", "v", "[", "360", ",", "1", "]", "=", "1", "\n", "v", "[", "361", ",", "1", "]", "=", "1", "\n", "v", "[", "362", ",", "1", "]", "=", "1", "\n", "v", "[", "363", ",", "1", "]", "=", "1", "\n", "v", "[", "364", ",", "1", "]", "=", "1", "\n", "v", "[", "365", ",", "1", "]", "=", "1", "\n", "v", "[", "366", ",", "1", "]", "=", "3", "\n", "v", "[", "367", ",", "1", "]", "=", "1", "\n", "v", "[", "368", ",", "1", "]", "=", "1", "\n", "v", "[", "369", ",", "1", "]", "=", "3", "\n", "v", "[", "370", ",", "1", "]", "=", "1", "\n", "v", "[", "371", ",", "1", "]", "=", "1", "\n", "v", "[", "372", ",", "1", "]", "=", "1", "\n", "v", "[", "373", ",", "1", "]", "=", "3", "\n", "v", "[", "374", ",", "1", "]", "=", "1", "\n", "v", "[", "375", ",", "1", "]", "=", "1", "\n", "v", "[", "376", ",", "1", "]", "=", "1", "\n", "v", "[", "377", ",", "1", "]", "=", "3", "\n", "v", "[", "378", ",", "1", "]", "=", "3", "\n", "v", "[", "379", ",", "1", "]", "=", "3", "\n", "v", "[", "380", ",", "1", "]", "=", "1", "\n", "v", "[", "381", ",", "1", "]", "=", "3", "\n", "v", "[", "382", ",", "1", "]", "=", "1", "\n", "v", "[", "383", ",", "1", "]", "=", "1", "\n", "v", "[", "384", ",", "1", "]", "=", "3", "\n", "v", "[", "385", ",", "1", "]", "=", "3", "\n", "v", "[", "386", ",", "1", "]", "=", "3", "\n", "v", "[", "387", ",", "1", "]", "=", "1", "\n", "v", "[", "388", ",", "1", "]", "=", "3", "\n", "v", "[", "389", ",", "1", "]", "=", "3", "\n", "v", "[", "390", ",", "1", "]", "=", "1", "\n", "v", "[", "391", ",", "1", "]", "=", "3", "\n", "v", "[", "392", ",", "1", "]", "=", "1", "\n", "v", "[", "393", ",", "1", "]", "=", "3", "\n", "v", "[", "394", ",", "1", "]", "=", "3", "\n", "v", "[", "395", ",", "1", "]", "=", "1", "\n", "v", "[", "396", ",", "1", "]", "=", "3", "\n", "v", "[", "397", ",", "1", "]", "=", "3", "\n", "v", "[", "398", ",", "1", "]", "=", "3", "\n", "v", "[", "399", ",", "1", "]", "=", "1", "\n", "v", "[", "400", ",", "1", "]", "=", "1", "\n", "v", "[", "401", ",", "1", "]", "=", "3", "\n", "v", "[", "402", ",", "1", "]", "=", "3", "\n", "v", "[", "403", ",", "1", "]", "=", "1", "\n", "v", "[", "404", ",", "1", "]", "=", "3", "\n", "v", "[", "405", ",", "1", "]", "=", "1", "\n", "v", "[", "406", ",", "1", "]", "=", "3", "\n", "v", "[", "407", ",", "1", "]", "=", "1", "\n", "v", "[", "408", ",", "1", "]", "=", "1", "\n", "v", "[", "409", ",", "1", "]", "=", "1", "\n", "v", "[", "410", ",", "1", "]", "=", "3", "\n", "v", "[", "411", ",", "1", "]", "=", "3", "\n", "v", "[", "412", ",", "1", "]", "=", "3", "\n", "v", "[", "413", ",", "1", "]", "=", "3", "\n", "v", "[", "414", ",", "1", "]", "=", "1", "\n", "v", "[", "415", ",", "1", "]", "=", "3", "\n", "v", "[", "416", ",", "1", "]", "=", "1", "\n", "v", "[", "417", ",", "1", "]", "=", "1", "\n", "v", "[", "418", ",", "1", "]", "=", "3", "\n", "v", "[", "419", ",", "1", "]", "=", "1", "\n", "v", "[", "420", ",", "1", "]", "=", "3", "\n", "v", "[", "421", ",", "1", "]", "=", "1", "\n", "v", "[", "422", ",", "1", "]", "=", "1", "\n", "v", "[", "423", ",", "1", "]", "=", "1", "\n", "v", "[", "424", ",", "1", "]", "=", "3", "\n", "v", "[", "425", ",", "1", "]", "=", "1", "\n", "v", "[", "426", ",", "1", "]", "=", "3", "\n", "v", "[", "427", ",", "1", "]", "=", "1", "\n", "v", "[", "428", ",", "1", "]", "=", "3", "\n", "v", "[", "429", ",", "1", "]", "=", "1", "\n", "v", "[", "430", ",", "1", "]", "=", "3", "\n", "v", "[", "431", ",", "1", "]", "=", "3", "\n", "v", "[", "432", ",", "1", "]", "=", "3", "\n", "v", "[", "433", ",", "1", "]", "=", "3", "\n", "v", "[", "434", ",", "1", "]", "=", "3", "\n", "v", "[", "435", ",", "1", "]", "=", "3", "\n", "v", "[", "436", ",", "1", "]", "=", "3", "\n", "v", "[", "437", ",", "1", "]", "=", "3", "\n", "v", "[", "438", ",", "1", "]", "=", "1", "\n", "v", "[", "439", ",", "1", "]", "=", "3", "\n", "v", "[", "440", ",", "1", "]", "=", "3", "\n", "v", "[", "441", ",", "1", "]", "=", "3", "\n", "v", "[", "442", ",", "1", "]", "=", "3", "\n", "v", "[", "443", ",", "1", "]", "=", "3", "\n", "v", "[", "444", ",", "1", "]", "=", "1", "\n", "v", "[", "445", ",", "1", "]", "=", "3", "\n", "v", "[", "446", ",", "1", "]", "=", "1", "\n", "v", "[", "447", ",", "1", "]", "=", "3", "\n", "v", "[", "448", ",", "1", "]", "=", "3", "\n", "v", "[", "449", ",", "1", "]", "=", "3", "\n", "v", "[", "450", ",", "1", "]", "=", "1", "\n", "v", "[", "451", ",", "1", "]", "=", "3", "\n", "v", "[", "452", ",", "1", "]", "=", "1", "\n", "v", "[", "453", ",", "1", "]", "=", "3", "\n", "v", "[", "454", ",", "1", "]", "=", "1", "\n", "v", "[", "455", ",", "1", "]", "=", "3", "\n", "v", "[", "456", ",", "1", "]", "=", "3", "\n", "v", "[", "457", ",", "1", "]", "=", "1", "\n", "v", "[", "458", ",", "1", "]", "=", "3", "\n", "v", "[", "459", ",", "1", "]", "=", "3", "\n", "v", "[", "460", ",", "1", "]", "=", "3", "\n", "v", "[", "461", ",", "1", "]", "=", "3", "\n", "v", "[", "462", ",", "1", "]", "=", "3", "\n", "v", "[", "463", ",", "1", "]", "=", "3", "\n", "v", "[", "464", ",", "1", "]", "=", "3", "\n", "v", "[", "465", ",", "1", "]", "=", "3", "\n", "v", "[", "466", ",", "1", "]", "=", "3", "\n", "v", "[", "467", ",", "1", "]", "=", "1", "\n", "v", "[", "468", ",", "1", "]", "=", "1", "\n", "v", "[", "469", ",", "1", "]", "=", "1", "\n", "v", "[", "470", ",", "1", "]", "=", "1", "\n", "v", "[", "471", ",", "1", "]", "=", "1", "\n", "v", "[", "472", ",", "1", "]", "=", "1", "\n", "v", "[", "473", ",", "1", "]", "=", "3", "\n", "v", "[", "474", ",", "1", "]", "=", "3", "\n", "v", "[", "475", ",", "1", "]", "=", "1", "\n", "v", "[", "476", ",", "1", "]", "=", "1", "\n", "v", "[", "477", ",", "1", "]", "=", "3", "\n", "v", "[", "478", ",", "1", "]", "=", "3", "\n", "v", "[", "479", ",", "1", "]", "=", "1", "\n", "v", "[", "480", ",", "1", "]", "=", "1", "\n", "v", "[", "481", ",", "1", "]", "=", "1", "\n", "v", "[", "482", ",", "1", "]", "=", "3", "\n", "v", "[", "483", ",", "1", "]", "=", "3", "\n", "v", "[", "484", ",", "1", "]", "=", "1", "\n", "v", "[", "485", ",", "1", "]", "=", "1", "\n", "v", "[", "486", ",", "1", "]", "=", "3", "\n", "v", "[", "487", ",", "1", "]", "=", "3", "\n", "v", "[", "488", ",", "1", "]", "=", "3", "\n", "v", "[", "489", ",", "1", "]", "=", "3", "\n", "v", "[", "490", ",", "1", "]", "=", "1", "\n", "v", "[", "491", ",", "1", "]", "=", "1", "\n", "v", "[", "492", ",", "1", "]", "=", "3", "\n", "v", "[", "493", ",", "1", "]", "=", "1", "\n", "v", "[", "494", ",", "1", "]", "=", "3", "\n", "v", "[", "495", ",", "1", "]", "=", "3", "\n", "v", "[", "496", ",", "1", "]", "=", "1", "\n", "v", "[", "497", ",", "1", "]", "=", "3", "\n", "v", "[", "498", ",", "1", "]", "=", "3", "\n", "v", "[", "499", ",", "1", "]", "=", "1", "\n", "v", "[", "500", ",", "1", "]", "=", "1", "\n", "v", "[", "501", ",", "1", "]", "=", "1", "\n", "v", "[", "502", ",", "1", "]", "=", "3", "\n", "v", "[", "503", ",", "1", "]", "=", "3", "\n", "v", "[", "504", ",", "1", "]", "=", "3", "\n", "v", "[", "505", ",", "1", "]", "=", "1", "\n", "v", "[", "506", ",", "1", "]", "=", "1", "\n", "v", "[", "507", ",", "1", "]", "=", "3", "\n", "v", "[", "508", ",", "1", "]", "=", "3", "\n", "v", "[", "509", ",", "1", "]", "=", "3", "\n", "v", "[", "510", ",", "1", "]", "=", "3", "\n", "v", "[", "511", ",", "1", "]", "=", "3", "\n", "v", "[", "512", ",", "1", "]", "=", "1", "\n", "v", "[", "513", ",", "1", "]", "=", "1", "\n", "v", "[", "514", ",", "1", "]", "=", "1", "\n", "v", "[", "515", ",", "1", "]", "=", "3", "\n", "v", "[", "516", ",", "1", "]", "=", "1", "\n", "v", "[", "517", ",", "1", "]", "=", "3", "\n", "v", "[", "518", ",", "1", "]", "=", "3", "\n", "v", "[", "519", ",", "1", "]", "=", "1", "\n", "v", "[", "520", ",", "1", "]", "=", "3", "\n", "v", "[", "521", ",", "1", "]", "=", "3", "\n", "v", "[", "522", ",", "1", "]", "=", "3", "\n", "v", "[", "523", ",", "1", "]", "=", "3", "\n", "v", "[", "524", ",", "1", "]", "=", "1", "\n", "v", "[", "525", ",", "1", "]", "=", "1", "\n", "v", "[", "526", ",", "1", "]", "=", "3", "\n", "v", "[", "527", ",", "1", "]", "=", "1", "\n", "v", "[", "528", ",", "1", "]", "=", "1", "\n", "v", "[", "529", ",", "1", "]", "=", "3", "\n", "v", "[", "530", ",", "1", "]", "=", "1", "\n", "v", "[", "531", ",", "1", "]", "=", "3", "\n", "v", "[", "532", ",", "1", "]", "=", "1", "\n", "v", "[", "533", ",", "1", "]", "=", "3", "\n", "v", "[", "534", ",", "1", "]", "=", "1", "\n", "v", "[", "535", ",", "1", "]", "=", "3", "\n", "v", "[", "536", ",", "1", "]", "=", "3", "\n", "v", "[", "537", ",", "1", "]", "=", "1", "\n", "v", "[", "538", ",", "1", "]", "=", "1", "\n", "v", "[", "539", ",", "1", "]", "=", "3", "\n", "v", "[", "540", ",", "1", "]", "=", "3", "\n", "v", "[", "541", ",", "1", "]", "=", "1", "\n", "v", "[", "542", ",", "1", "]", "=", "3", "\n", "v", "[", "543", ",", "1", "]", "=", "3", "\n", "v", "[", "544", ",", "1", "]", "=", "1", "\n", "v", "[", "545", ",", "1", "]", "=", "3", "\n", "v", "[", "546", ",", "1", "]", "=", "3", "\n", "v", "[", "547", ",", "1", "]", "=", "1", "\n", "v", "[", "548", ",", "1", "]", "=", "1", "\n", "v", "[", "549", ",", "1", "]", "=", "3", "\n", "v", "[", "550", ",", "1", "]", "=", "1", "\n", "v", "[", "551", ",", "1", "]", "=", "3", "\n", "v", "[", "552", ",", "1", "]", "=", "3", "\n", "v", "[", "553", ",", "1", "]", "=", "1", "\n", "v", "[", "554", ",", "1", "]", "=", "1", "\n", "v", "[", "555", ",", "1", "]", "=", "3", "\n", "v", "[", "556", ",", "1", "]", "=", "1", "\n", "v", "[", "557", ",", "1", "]", "=", "3", "\n", "v", "[", "558", ",", "1", "]", "=", "1", "\n", "v", "[", "559", ",", "1", "]", "=", "3", "\n", "v", "[", "560", ",", "1", "]", "=", "1", "\n", "v", "[", "561", ",", "1", "]", "=", "1", "\n", "v", "[", "562", ",", "1", "]", "=", "3", "\n", "v", "[", "563", ",", "1", "]", "=", "3", "\n", "v", "[", "564", ",", "1", "]", "=", "1", "\n", "v", "[", "565", ",", "1", "]", "=", "1", "\n", "v", "[", "566", ",", "1", "]", "=", "1", "\n", "v", "[", "567", ",", "1", "]", "=", "3", "\n", "v", "[", "568", ",", "1", "]", "=", "3", "\n", "v", "[", "569", ",", "1", "]", "=", "1", "\n", "v", "[", "570", ",", "1", "]", "=", "3", "\n", "v", "[", "571", ",", "1", "]", "=", "1", "\n", "v", "[", "572", ",", "1", "]", "=", "1", "\n", "v", "[", "573", ",", "1", "]", "=", "3", "\n", "v", "[", "574", ",", "1", "]", "=", "3", "\n", "v", "[", "575", ",", "1", "]", "=", "1", "\n", "v", "[", "576", ",", "1", "]", "=", "1", "\n", "v", "[", "577", ",", "1", "]", "=", "3", "\n", "v", "[", "578", ",", "1", "]", "=", "1", "\n", "v", "[", "579", ",", "1", "]", "=", "3", "\n", "v", "[", "580", ",", "1", "]", "=", "1", "\n", "v", "[", "581", ",", "1", "]", "=", "1", "\n", "v", "[", "582", ",", "1", "]", "=", "1", "\n", "v", "[", "583", ",", "1", "]", "=", "1", "\n", "v", "[", "584", ",", "1", "]", "=", "1", "\n", "v", "[", "585", ",", "1", "]", "=", "3", "\n", "v", "[", "586", ",", "1", "]", "=", "1", "\n", "v", "[", "587", ",", "1", "]", "=", "1", "\n", "v", "[", "588", ",", "1", "]", "=", "1", "\n", "v", "[", "589", ",", "1", "]", "=", "1", "\n", "v", "[", "590", ",", "1", "]", "=", "3", "\n", "v", "[", "591", ",", "1", "]", "=", "1", "\n", "v", "[", "592", ",", "1", "]", "=", "3", "\n", "v", "[", "593", ",", "1", "]", "=", "1", "\n", "v", "[", "594", ",", "1", "]", "=", "1", "\n", "v", "[", "595", ",", "1", "]", "=", "3", "\n", "v", "[", "596", ",", "1", "]", "=", "3", "\n", "v", "[", "597", ",", "1", "]", "=", "1", "\n", "v", "[", "598", ",", "1", "]", "=", "1", "\n", "v", "[", "599", ",", "1", "]", "=", "3", "\n", "v", "[", "600", ",", "1", "]", "=", "1", "\n", "v", "[", "601", ",", "1", "]", "=", "3", "\n", "v", "[", "602", ",", "1", "]", "=", "1", "\n", "v", "[", "603", ",", "1", "]", "=", "3", "\n", "v", "[", "604", ",", "1", "]", "=", "3", "\n", "v", "[", "605", ",", "1", "]", "=", "3", "\n", "v", "[", "606", ",", "1", "]", "=", "1", "\n", "v", "[", "607", ",", "1", "]", "=", "3", "\n", "v", "[", "608", ",", "1", "]", "=", "3", "\n", "v", "[", "609", ",", "1", "]", "=", "3", "\n", "v", "[", "610", ",", "1", "]", "=", "1", "\n", "v", "[", "611", ",", "1", "]", "=", "1", "\n", "v", "[", "612", ",", "1", "]", "=", "3", "\n", "v", "[", "613", ",", "1", "]", "=", "3", "\n", "v", "[", "614", ",", "1", "]", "=", "3", "\n", "v", "[", "615", ",", "1", "]", "=", "1", "\n", "v", "[", "616", ",", "1", "]", "=", "1", "\n", "v", "[", "617", ",", "1", "]", "=", "1", "\n", "v", "[", "618", ",", "1", "]", "=", "1", "\n", "v", "[", "619", ",", "1", "]", "=", "3", "\n", "v", "[", "620", ",", "1", "]", "=", "1", "\n", "v", "[", "621", ",", "1", "]", "=", "3", "\n", "v", "[", "622", ",", "1", "]", "=", "1", "\n", "v", "[", "623", ",", "1", "]", "=", "3", "\n", "v", "[", "624", ",", "1", "]", "=", "1", "\n", "v", "[", "625", ",", "1", "]", "=", "1", "\n", "v", "[", "626", ",", "1", "]", "=", "3", "\n", "v", "[", "627", ",", "1", "]", "=", "3", "\n", "v", "[", "628", ",", "1", "]", "=", "1", "\n", "v", "[", "629", ",", "1", "]", "=", "1", "\n", "v", "[", "630", ",", "1", "]", "=", "1", "\n", "v", "[", "631", ",", "1", "]", "=", "3", "\n", "v", "[", "632", ",", "1", "]", "=", "3", "\n", "v", "[", "633", ",", "1", "]", "=", "1", "\n", "v", "[", "634", ",", "1", "]", "=", "3", "\n", "v", "[", "635", ",", "1", "]", "=", "1", "\n", "v", "[", "636", ",", "1", "]", "=", "3", "\n", "v", "[", "637", ",", "1", "]", "=", "1", "\n", "v", "[", "638", ",", "1", "]", "=", "1", "\n", "v", "[", "639", ",", "1", "]", "=", "1", "\n", "v", "[", "640", ",", "1", "]", "=", "1", "\n", "v", "[", "641", ",", "1", "]", "=", "1", "\n", "v", "[", "642", ",", "1", "]", "=", "1", "\n", "v", "[", "643", ",", "1", "]", "=", "3", "\n", "v", "[", "644", ",", "1", "]", "=", "1", "\n", "v", "[", "645", ",", "1", "]", "=", "3", "\n", "v", "[", "646", ",", "1", "]", "=", "3", "\n", "v", "[", "647", ",", "1", "]", "=", "1", "\n", "v", "[", "648", ",", "1", "]", "=", "3", "\n", "v", "[", "649", ",", "1", "]", "=", "3", "\n", "v", "[", "650", ",", "1", "]", "=", "3", "\n", "v", "[", "651", ",", "1", "]", "=", "1", "\n", "v", "[", "652", ",", "1", "]", "=", "3", "\n", "v", "[", "653", ",", "1", "]", "=", "1", "\n", "v", "[", "654", ",", "1", "]", "=", "1", "\n", "v", "[", "655", ",", "1", "]", "=", "3", "\n", "v", "[", "656", ",", "1", "]", "=", "3", "\n", "v", "[", "657", ",", "1", "]", "=", "1", "\n", "v", "[", "658", ",", "1", "]", "=", "1", "\n", "v", "[", "659", ",", "1", "]", "=", "3", "\n", "v", "[", "660", ",", "1", "]", "=", "3", "\n", "v", "[", "661", ",", "1", "]", "=", "1", "\n", "v", "[", "662", ",", "1", "]", "=", "1", "\n", "v", "[", "663", ",", "1", "]", "=", "1", "\n", "v", "[", "664", ",", "1", "]", "=", "3", "\n", "v", "[", "665", ",", "1", "]", "=", "1", "\n", "v", "[", "666", ",", "1", "]", "=", "3", "\n", "v", "[", "667", ",", "1", "]", "=", "3", "\n", "v", "[", "668", ",", "1", "]", "=", "1", "\n", "v", "[", "669", ",", "1", "]", "=", "1", "\n", "v", "[", "670", ",", "1", "]", "=", "3", "\n", "v", "[", "671", ",", "1", "]", "=", "1", "\n", "v", "[", "672", ",", "1", "]", "=", "1", "\n", "v", "[", "673", ",", "1", "]", "=", "3", "\n", "v", "[", "674", ",", "1", "]", "=", "1", "\n", "v", "[", "675", ",", "1", "]", "=", "3", "\n", "v", "[", "676", ",", "1", "]", "=", "1", "\n", "v", "[", "677", ",", "1", "]", "=", "1", "\n", "v", "[", "678", ",", "1", "]", "=", "1", "\n", "v", "[", "679", ",", "1", "]", "=", "3", "\n", "v", "[", "680", ",", "1", "]", "=", "3", "\n", "v", "[", "681", ",", "1", "]", "=", "3", "\n", "v", "[", "682", ",", "1", "]", "=", "3", "\n", "v", "[", "683", ",", "1", "]", "=", "1", "\n", "v", "[", "684", ",", "1", "]", "=", "1", "\n", "v", "[", "685", ",", "1", "]", "=", "3", "\n", "v", "[", "686", ",", "1", "]", "=", "3", "\n", "v", "[", "687", ",", "1", "]", "=", "1", "\n", "v", "[", "688", ",", "1", "]", "=", "1", "\n", "v", "[", "689", ",", "1", "]", "=", "1", "\n", "v", "[", "690", ",", "1", "]", "=", "1", "\n", "v", "[", "691", ",", "1", "]", "=", "3", "\n", "v", "[", "692", ",", "1", "]", "=", "1", "\n", "v", "[", "693", ",", "1", "]", "=", "1", "\n", "v", "[", "694", ",", "1", "]", "=", "3", "\n", "v", "[", "695", ",", "1", "]", "=", "3", "\n", "v", "[", "696", ",", "1", "]", "=", "3", "\n", "v", "[", "697", ",", "1", "]", "=", "1", "\n", "v", "[", "698", ",", "1", "]", "=", "1", "\n", "v", "[", "699", ",", "1", "]", "=", "3", "\n", "v", "[", "700", ",", "1", "]", "=", "3", "\n", "v", "[", "701", ",", "1", "]", "=", "1", "\n", "v", "[", "702", ",", "1", "]", "=", "3", "\n", "v", "[", "703", ",", "1", "]", "=", "3", "\n", "v", "[", "704", ",", "1", "]", "=", "1", "\n", "v", "[", "705", ",", "1", "]", "=", "1", "\n", "v", "[", "706", ",", "1", "]", "=", "3", "\n", "v", "[", "707", ",", "1", "]", "=", "3", "\n", "v", "[", "708", ",", "1", "]", "=", "3", "\n", "v", "[", "709", ",", "1", "]", "=", "3", "\n", "v", "[", "710", ",", "1", "]", "=", "3", "\n", "v", "[", "711", ",", "1", "]", "=", "3", "\n", "v", "[", "712", ",", "1", "]", "=", "3", "\n", "v", "[", "713", ",", "1", "]", "=", "1", "\n", "v", "[", "714", ",", "1", "]", "=", "3", "\n", "v", "[", "715", ",", "1", "]", "=", "3", "\n", "v", "[", "716", ",", "1", "]", "=", "1", "\n", "v", "[", "717", ",", "1", "]", "=", "3", "\n", "v", "[", "718", ",", "1", "]", "=", "1", "\n", "v", "[", "719", ",", "1", "]", "=", "3", "\n", "v", "[", "720", ",", "1", "]", "=", "1", "\n", "v", "[", "721", ",", "1", "]", "=", "1", "\n", "v", "[", "722", ",", "1", "]", "=", "3", "\n", "v", "[", "723", ",", "1", "]", "=", "3", "\n", "v", "[", "724", ",", "1", "]", "=", "1", "\n", "v", "[", "725", ",", "1", "]", "=", "1", "\n", "v", "[", "726", ",", "1", "]", "=", "1", "\n", "v", "[", "727", ",", "1", "]", "=", "3", "\n", "v", "[", "728", ",", "1", "]", "=", "1", "\n", "v", "[", "729", ",", "1", "]", "=", "3", "\n", "v", "[", "730", ",", "1", "]", "=", "3", "\n", "v", "[", "731", ",", "1", "]", "=", "1", "\n", "v", "[", "732", ",", "1", "]", "=", "3", "\n", "v", "[", "733", ",", "1", "]", "=", "3", "\n", "v", "[", "734", ",", "1", "]", "=", "1", "\n", "v", "[", "735", ",", "1", "]", "=", "3", "\n", "v", "[", "736", ",", "1", "]", "=", "1", "\n", "v", "[", "737", ",", "1", "]", "=", "1", "\n", "v", "[", "738", ",", "1", "]", "=", "3", "\n", "v", "[", "739", ",", "1", "]", "=", "3", "\n", "v", "[", "740", ",", "1", "]", "=", "3", "\n", "v", "[", "741", ",", "1", "]", "=", "1", "\n", "v", "[", "742", ",", "1", "]", "=", "1", "\n", "v", "[", "743", ",", "1", "]", "=", "1", "\n", "v", "[", "744", ",", "1", "]", "=", "3", "\n", "v", "[", "745", ",", "1", "]", "=", "1", "\n", "v", "[", "746", ",", "1", "]", "=", "1", "\n", "v", "[", "747", ",", "1", "]", "=", "1", "\n", "v", "[", "748", ",", "1", "]", "=", "3", "\n", "v", "[", "749", ",", "1", "]", "=", "3", "\n", "v", "[", "750", ",", "1", "]", "=", "3", "\n", "v", "[", "751", ",", "1", "]", "=", "1", "\n", "v", "[", "752", ",", "1", "]", "=", "3", "\n", "v", "[", "753", ",", "1", "]", "=", "3", "\n", "v", "[", "754", ",", "1", "]", "=", "1", "\n", "v", "[", "755", ",", "1", "]", "=", "3", "\n", "v", "[", "756", ",", "1", "]", "=", "1", "\n", "v", "[", "757", ",", "1", "]", "=", "1", "\n", "v", "[", "758", ",", "1", "]", "=", "3", "\n", "v", "[", "759", ",", "1", "]", "=", "3", "\n", "v", "[", "760", ",", "1", "]", "=", "3", "\n", "v", "[", "761", ",", "1", "]", "=", "1", "\n", "v", "[", "762", ",", "1", "]", "=", "3", "\n", "v", "[", "763", ",", "1", "]", "=", "3", "\n", "v", "[", "764", ",", "1", "]", "=", "1", "\n", "v", "[", "765", ",", "1", "]", "=", "1", "\n", "v", "[", "766", ",", "1", "]", "=", "1", "\n", "v", "[", "767", ",", "1", "]", "=", "3", "\n", "v", "[", "768", ",", "1", "]", "=", "1", "\n", "v", "[", "769", ",", "1", "]", "=", "3", "\n", "v", "[", "770", ",", "1", "]", "=", "3", "\n", "v", "[", "771", ",", "1", "]", "=", "3", "\n", "v", "[", "772", ",", "1", "]", "=", "3", "\n", "v", "[", "773", ",", "1", "]", "=", "3", "\n", "v", "[", "774", ",", "1", "]", "=", "3", "\n", "v", "[", "775", ",", "1", "]", "=", "3", "\n", "v", "[", "776", ",", "1", "]", "=", "3", "\n", "v", "[", "777", ",", "1", "]", "=", "1", "\n", "v", "[", "778", ",", "1", "]", "=", "3", "\n", "v", "[", "779", ",", "1", "]", "=", "3", "\n", "v", "[", "780", ",", "1", "]", "=", "1", "\n", "v", "[", "781", ",", "1", "]", "=", "3", "\n", "v", "[", "782", ",", "1", "]", "=", "1", "\n", "v", "[", "783", ",", "1", "]", "=", "1", "\n", "v", "[", "784", ",", "1", "]", "=", "3", "\n", "v", "[", "785", ",", "1", "]", "=", "3", "\n", "v", "[", "786", ",", "1", "]", "=", "3", "\n", "v", "[", "787", ",", "1", "]", "=", "1", "\n", "v", "[", "788", ",", "1", "]", "=", "3", "\n", "v", "[", "789", ",", "1", "]", "=", "3", "\n", "v", "[", "790", ",", "1", "]", "=", "3", "\n", "v", "[", "791", ",", "1", "]", "=", "3", "\n", "v", "[", "792", ",", "1", "]", "=", "3", "\n", "v", "[", "793", ",", "1", "]", "=", "1", "\n", "v", "[", "794", ",", "1", "]", "=", "3", "\n", "v", "[", "795", ",", "1", "]", "=", "3", "\n", "v", "[", "796", ",", "1", "]", "=", "3", "\n", "v", "[", "797", ",", "1", "]", "=", "1", "\n", "v", "[", "798", ",", "1", "]", "=", "1", "\n", "v", "[", "799", ",", "1", "]", "=", "1", "\n", "v", "[", "800", ",", "1", "]", "=", "3", "\n", "v", "[", "801", ",", "1", "]", "=", "3", "\n", "v", "[", "802", ",", "1", "]", "=", "1", "\n", "v", "[", "803", ",", "1", "]", "=", "3", "\n", "v", "[", "804", ",", "1", "]", "=", "3", "\n", "v", "[", "805", ",", "1", "]", "=", "1", "\n", "v", "[", "806", ",", "1", "]", "=", "3", "\n", "v", "[", "807", ",", "1", "]", "=", "1", "\n", "v", "[", "808", ",", "1", "]", "=", "3", "\n", "v", "[", "809", ",", "1", "]", "=", "1", "\n", "v", "[", "810", ",", "1", "]", "=", "3", "\n", "v", "[", "811", ",", "1", "]", "=", "1", "\n", "v", "[", "812", ",", "1", "]", "=", "3", "\n", "v", "[", "813", ",", "1", "]", "=", "3", "\n", "v", "[", "814", ",", "1", "]", "=", "3", "\n", "v", "[", "815", ",", "1", "]", "=", "3", "\n", "v", "[", "816", ",", "1", "]", "=", "3", "\n", "v", "[", "817", ",", "1", "]", "=", "3", "\n", "v", "[", "818", ",", "1", "]", "=", "1", "\n", "v", "[", "819", ",", "1", "]", "=", "1", "\n", "v", "[", "820", ",", "1", "]", "=", "3", "\n", "v", "[", "821", ",", "1", "]", "=", "1", "\n", "v", "[", "822", ",", "1", "]", "=", "3", "\n", "v", "[", "823", ",", "1", "]", "=", "1", "\n", "v", "[", "824", ",", "1", "]", "=", "1", "\n", "v", "[", "825", ",", "1", "]", "=", "1", "\n", "v", "[", "826", ",", "1", "]", "=", "1", "\n", "v", "[", "827", ",", "1", "]", "=", "1", "\n", "v", "[", "828", ",", "1", "]", "=", "3", "\n", "v", "[", "829", ",", "1", "]", "=", "1", "\n", "v", "[", "830", ",", "1", "]", "=", "1", "\n", "v", "[", "831", ",", "1", "]", "=", "1", "\n", "v", "[", "832", ",", "1", "]", "=", "3", "\n", "v", "[", "833", ",", "1", "]", "=", "1", "\n", "v", "[", "834", ",", "1", "]", "=", "3", "\n", "v", "[", "835", ",", "1", "]", "=", "1", "\n", "v", "[", "836", ",", "1", "]", "=", "1", "\n", "v", "[", "837", ",", "1", "]", "=", "3", "\n", "v", "[", "838", ",", "1", "]", "=", "3", "\n", "v", "[", "839", ",", "1", "]", "=", "3", "\n", "v", "[", "840", ",", "1", "]", "=", "1", "\n", "v", "[", "841", ",", "1", "]", "=", "3", "\n", "v", "[", "842", ",", "1", "]", "=", "1", "\n", "v", "[", "843", ",", "1", "]", "=", "3", "\n", "v", "[", "844", ",", "1", "]", "=", "1", "\n", "v", "[", "845", ",", "1", "]", "=", "1", "\n", "v", "[", "846", ",", "1", "]", "=", "3", "\n", "v", "[", "847", ",", "1", "]", "=", "1", "\n", "v", "[", "848", ",", "1", "]", "=", "3", "\n", "v", "[", "849", ",", "1", "]", "=", "3", "\n", "v", "[", "850", ",", "1", "]", "=", "1", "\n", "v", "[", "851", ",", "1", "]", "=", "3", "\n", "v", "[", "852", ",", "1", "]", "=", "1", "\n", "v", "[", "853", ",", "1", "]", "=", "3", "\n", "v", "[", "854", ",", "1", "]", "=", "3", "\n", "v", "[", "855", ",", "1", "]", "=", "1", "\n", "v", "[", "856", ",", "1", "]", "=", "3", "\n", "v", "[", "857", ",", "1", "]", "=", "3", "\n", "v", "[", "858", ",", "1", "]", "=", "1", "\n", "v", "[", "859", ",", "1", "]", "=", "3", "\n", "v", "[", "860", ",", "1", "]", "=", "3", "\n", "v", "[", "861", ",", "1", "]", "=", "3", "\n", "v", "[", "862", ",", "1", "]", "=", "3", "\n", "v", "[", "863", ",", "1", "]", "=", "3", "\n", "v", "[", "864", ",", "1", "]", "=", "3", "\n", "v", "[", "865", ",", "1", "]", "=", "1", "\n", "v", "[", "866", ",", "1", "]", "=", "3", "\n", "v", "[", "867", ",", "1", "]", "=", "1", "\n", "v", "[", "868", ",", "1", "]", "=", "1", "\n", "v", "[", "869", ",", "1", "]", "=", "3", "\n", "v", "[", "870", ",", "1", "]", "=", "3", "\n", "v", "[", "871", ",", "1", "]", "=", "3", "\n", "v", "[", "872", ",", "1", "]", "=", "1", "\n", "v", "[", "873", ",", "1", "]", "=", "1", "\n", "v", "[", "874", ",", "1", "]", "=", "3", "\n", "v", "[", "875", ",", "1", "]", "=", "3", "\n", "v", "[", "876", ",", "1", "]", "=", "3", "\n", "v", "[", "877", ",", "1", "]", "=", "3", "\n", "v", "[", "878", ",", "1", "]", "=", "3", "\n", "v", "[", "879", ",", "1", "]", "=", "3", "\n", "v", "[", "880", ",", "1", "]", "=", "3", "\n", "v", "[", "881", ",", "1", "]", "=", "1", "\n", "v", "[", "882", ",", "1", "]", "=", "3", "\n", "v", "[", "883", ",", "1", "]", "=", "3", "\n", "v", "[", "884", ",", "1", "]", "=", "3", "\n", "v", "[", "885", ",", "1", "]", "=", "3", "\n", "v", "[", "886", ",", "1", "]", "=", "1", "\n", "v", "[", "887", ",", "1", "]", "=", "3", "\n", "v", "[", "888", ",", "1", "]", "=", "1", "\n", "v", "[", "889", ",", "1", "]", "=", "3", "\n", "v", "[", "890", ",", "1", "]", "=", "3", "\n", "v", "[", "891", ",", "1", "]", "=", "3", "\n", "v", "[", "892", ",", "1", "]", "=", "1", "\n", "v", "[", "893", ",", "1", "]", "=", "3", "\n", "v", "[", "894", ",", "1", "]", "=", "1", "\n", "v", "[", "895", ",", "1", "]", "=", "3", "\n", "v", "[", "896", ",", "1", "]", "=", "1", "\n", "v", "[", "897", ",", "1", "]", "=", "1", "\n", "v", "[", "898", ",", "1", "]", "=", "1", "\n", "v", "[", "899", ",", "1", "]", "=", "3", "\n", "v", "[", "900", ",", "1", "]", "=", "3", "\n", "v", "[", "901", ",", "1", "]", "=", "1", "\n", "v", "[", "902", ",", "1", "]", "=", "3", "\n", "v", "[", "903", ",", "1", "]", "=", "1", "\n", "v", "[", "904", ",", "1", "]", "=", "1", "\n", "v", "[", "905", ",", "1", "]", "=", "3", "\n", "v", "[", "906", ",", "1", "]", "=", "3", "\n", "v", "[", "907", ",", "1", "]", "=", "1", "\n", "v", "[", "908", ",", "1", "]", "=", "3", "\n", "v", "[", "909", ",", "1", "]", "=", "1", "\n", "v", "[", "910", ",", "1", "]", "=", "1", "\n", "v", "[", "911", ",", "1", "]", "=", "1", "\n", "v", "[", "912", ",", "1", "]", "=", "1", "\n", "v", "[", "913", ",", "1", "]", "=", "3", "\n", "v", "[", "914", ",", "1", "]", "=", "1", "\n", "v", "[", "915", ",", "1", "]", "=", "3", "\n", "v", "[", "916", ",", "1", "]", "=", "1", "\n", "v", "[", "917", ",", "1", "]", "=", "1", "\n", "v", "[", "918", ",", "1", "]", "=", "3", "\n", "v", "[", "919", ",", "1", "]", "=", "1", "\n", "v", "[", "920", ",", "1", "]", "=", "3", "\n", "v", "[", "921", ",", "1", "]", "=", "1", "\n", "v", "[", "922", ",", "1", "]", "=", "3", "\n", "v", "[", "923", ",", "1", "]", "=", "3", "\n", "v", "[", "924", ",", "1", "]", "=", "3", "\n", "v", "[", "925", ",", "1", "]", "=", "3", "\n", "v", "[", "926", ",", "1", "]", "=", "3", "\n", "v", "[", "927", ",", "1", "]", "=", "3", "\n", "v", "[", "928", ",", "1", "]", "=", "1", "\n", "v", "[", "929", ",", "1", "]", "=", "3", "\n", "v", "[", "930", ",", "1", "]", "=", "3", "\n", "v", "[", "931", ",", "1", "]", "=", "3", "\n", "v", "[", "932", ",", "1", "]", "=", "3", "\n", "v", "[", "933", ",", "1", "]", "=", "1", "\n", "v", "[", "934", ",", "1", "]", "=", "3", "\n", "v", "[", "935", ",", "1", "]", "=", "3", "\n", "v", "[", "936", ",", "1", "]", "=", "1", "\n", "v", "[", "937", ",", "1", "]", "=", "3", "\n", "v", "[", "938", ",", "1", "]", "=", "3", "\n", "v", "[", "939", ",", "1", "]", "=", "3", "\n", "v", "[", "940", ",", "1", "]", "=", "3", "\n", "v", "[", "941", ",", "1", "]", "=", "3", "\n", "v", "[", "942", ",", "1", "]", "=", "1", "\n", "v", "[", "943", ",", "1", "]", "=", "1", "\n", "v", "[", "944", ",", "1", "]", "=", "1", "\n", "v", "[", "945", ",", "1", "]", "=", "1", "\n", "v", "[", "946", ",", "1", "]", "=", "3", "\n", "v", "[", "947", ",", "1", "]", "=", "3", "\n", "v", "[", "948", ",", "1", "]", "=", "3", "\n", "v", "[", "949", ",", "1", "]", "=", "1", "\n", "v", "[", "950", ",", "1", "]", "=", "3", "\n", "v", "[", "951", ",", "1", "]", "=", "3", "\n", "v", "[", "952", ",", "1", "]", "=", "1", "\n", "v", "[", "953", ",", "1", "]", "=", "1", "\n", "v", "[", "954", ",", "1", "]", "=", "3", "\n", "v", "[", "955", ",", "1", "]", "=", "3", "\n", "v", "[", "956", ",", "1", "]", "=", "1", "\n", "v", "[", "957", ",", "1", "]", "=", "1", "\n", "v", "[", "958", ",", "1", "]", "=", "3", "\n", "v", "[", "959", ",", "1", "]", "=", "3", "\n", "v", "[", "960", ",", "1", "]", "=", "1", "\n", "v", "[", "961", ",", "1", "]", "=", "3", "\n", "v", "[", "962", ",", "1", "]", "=", "1", "\n", "v", "[", "963", ",", "1", "]", "=", "1", "\n", "v", "[", "964", ",", "1", "]", "=", "3", "\n", "v", "[", "965", ",", "1", "]", "=", "1", "\n", "v", "[", "966", ",", "1", "]", "=", "3", "\n", "v", "[", "967", ",", "1", "]", "=", "3", "\n", "v", "[", "968", ",", "1", "]", "=", "3", "\n", "v", "[", "969", ",", "1", "]", "=", "3", "\n", "v", "[", "970", ",", "1", "]", "=", "3", "\n", "v", "[", "971", ",", "1", "]", "=", "1", "\n", "v", "[", "972", ",", "1", "]", "=", "3", "\n", "v", "[", "973", ",", "1", "]", "=", "1", "\n", "v", "[", "974", ",", "1", "]", "=", "1", "\n", "v", "[", "975", ",", "1", "]", "=", "3", "\n", "v", "[", "976", ",", "1", "]", "=", "3", "\n", "v", "[", "977", ",", "1", "]", "=", "3", "\n", "v", "[", "978", ",", "1", "]", "=", "3", "\n", "v", "[", "979", ",", "1", "]", "=", "1", "\n", "v", "[", "980", ",", "1", "]", "=", "3", "\n", "v", "[", "981", ",", "1", "]", "=", "1", "\n", "v", "[", "982", ",", "1", "]", "=", "1", "\n", "v", "[", "983", ",", "1", "]", "=", "3", "\n", "v", "[", "984", ",", "1", "]", "=", "3", "\n", "v", "[", "985", ",", "1", "]", "=", "3", "\n", "v", "[", "986", ",", "1", "]", "=", "3", "\n", "v", "[", "987", ",", "1", "]", "=", "3", "\n", "v", "[", "988", ",", "1", "]", "=", "3", "\n", "v", "[", "989", ",", "1", "]", "=", "1", "\n", "v", "[", "990", ",", "1", "]", "=", "1", "\n", "v", "[", "991", ",", "1", "]", "=", "3", "\n", "v", "[", "992", ",", "1", "]", "=", "1", "\n", "v", "[", "993", ",", "1", "]", "=", "3", "\n", "v", "[", "994", ",", "1", "]", "=", "1", "\n", "v", "[", "995", ",", "1", "]", "=", "1", "\n", "v", "[", "996", ",", "1", "]", "=", "3", "\n", "v", "[", "997", ",", "1", "]", "=", "1", "\n", "v", "[", "998", ",", "1", "]", "=", "1", "\n", "v", "[", "999", ",", "1", "]", "=", "1", "\n", "v", "[", "1000", ",", "1", "]", "=", "1", "\n", "v", "[", "1001", ",", "1", "]", "=", "3", "\n", "v", "[", "1002", ",", "1", "]", "=", "3", "\n", "v", "[", "1003", ",", "1", "]", "=", "1", "\n", "v", "[", "1004", ",", "1", "]", "=", "1", "\n", "v", "[", "1005", ",", "1", "]", "=", "3", "\n", "v", "[", "1006", ",", "1", "]", "=", "1", "\n", "v", "[", "1007", ",", "1", "]", "=", "1", "\n", "v", "[", "1008", ",", "1", "]", "=", "1", "\n", "v", "[", "1009", ",", "1", "]", "=", "3", "\n", "v", "[", "1010", ",", "1", "]", "=", "1", "\n", "v", "[", "1011", ",", "1", "]", "=", "3", "\n", "v", "[", "1012", ",", "1", "]", "=", "1", "\n", "v", "[", "1013", ",", "1", "]", "=", "1", "\n", "v", "[", "1014", ",", "1", "]", "=", "3", "\n", "v", "[", "1015", ",", "1", "]", "=", "3", "\n", "v", "[", "1016", ",", "1", "]", "=", "1", "\n", "v", "[", "1017", ",", "1", "]", "=", "3", "\n", "v", "[", "1018", ",", "1", "]", "=", "1", "\n", "v", "[", "1019", ",", "1", "]", "=", "1", "\n", "v", "[", "1020", ",", "1", "]", "=", "3", "\n", "v", "[", "1021", ",", "1", "]", "=", "3", "\n", "v", "[", "1022", ",", "1", "]", "=", "3", "\n", "v", "[", "1023", ",", "1", "]", "=", "3", "\n", "v", "[", "1024", ",", "1", "]", "=", "3", "\n", "v", "[", "1025", ",", "1", "]", "=", "1", "\n", "v", "[", "1026", ",", "1", "]", "=", "3", "\n", "v", "[", "1027", ",", "1", "]", "=", "1", "\n", "v", "[", "1028", ",", "1", "]", "=", "1", "\n", "v", "[", "1029", ",", "1", "]", "=", "1", "\n", "v", "[", "1030", ",", "1", "]", "=", "3", "\n", "v", "[", "1031", ",", "1", "]", "=", "1", "\n", "v", "[", "1032", ",", "1", "]", "=", "1", "\n", "v", "[", "1033", ",", "1", "]", "=", "1", "\n", "v", "[", "1034", ",", "1", "]", "=", "3", "\n", "v", "[", "1035", ",", "1", "]", "=", "1", "\n", "v", "[", "1036", ",", "1", "]", "=", "1", "\n", "v", "[", "1037", ",", "1", "]", "=", "3", "\n", "v", "[", "1038", ",", "1", "]", "=", "1", "\n", "v", "[", "1039", ",", "1", "]", "=", "3", "\n", "v", "[", "1040", ",", "1", "]", "=", "3", "\n", "v", "[", "1041", ",", "1", "]", "=", "3", "\n", "v", "[", "1042", ",", "1", "]", "=", "3", "\n", "v", "[", "1043", ",", "1", "]", "=", "3", "\n", "v", "[", "1044", ",", "1", "]", "=", "1", "\n", "v", "[", "1045", ",", "1", "]", "=", "1", "\n", "v", "[", "1046", ",", "1", "]", "=", "1", "\n", "v", "[", "1047", ",", "1", "]", "=", "3", "\n", "v", "[", "1048", ",", "1", "]", "=", "3", "\n", "v", "[", "1049", ",", "1", "]", "=", "3", "\n", "v", "[", "1050", ",", "1", "]", "=", "3", "\n", "v", "[", "1051", ",", "1", "]", "=", "1", "\n", "v", "[", "1052", ",", "1", "]", "=", "3", "\n", "v", "[", "1053", ",", "1", "]", "=", "3", "\n", "v", "[", "1054", ",", "1", "]", "=", "3", "\n", "v", "[", "1055", ",", "1", "]", "=", "3", "\n", "v", "[", "1056", ",", "1", "]", "=", "1", "\n", "v", "[", "1057", ",", "1", "]", "=", "1", "\n", "v", "[", "1058", ",", "1", "]", "=", "3", "\n", "v", "[", "1059", ",", "1", "]", "=", "3", "\n", "v", "[", "1060", ",", "1", "]", "=", "3", "\n", "v", "[", "1061", ",", "1", "]", "=", "1", "\n", "v", "[", "1062", ",", "1", "]", "=", "3", "\n", "v", "[", "1063", ",", "1", "]", "=", "1", "\n", "v", "[", "1064", ",", "1", "]", "=", "1", "\n", "v", "[", "1065", ",", "1", "]", "=", "3", "\n", "v", "[", "1066", ",", "1", "]", "=", "3", "\n", "v", "[", "1067", ",", "1", "]", "=", "1", "\n", "v", "[", "1068", ",", "1", "]", "=", "3", "\n", "v", "[", "1069", ",", "1", "]", "=", "3", "\n", "v", "[", "1070", ",", "1", "]", "=", "1", "\n", "v", "[", "1071", ",", "1", "]", "=", "1", "\n", "v", "[", "1072", ",", "1", "]", "=", "1", "\n", "v", "[", "1073", ",", "1", "]", "=", "1", "\n", "v", "[", "1074", ",", "1", "]", "=", "1", "\n", "v", "[", "1075", ",", "1", "]", "=", "3", "\n", "v", "[", "1076", ",", "1", "]", "=", "1", "\n", "v", "[", "1077", ",", "1", "]", "=", "1", "\n", "v", "[", "1078", ",", "1", "]", "=", "3", "\n", "v", "[", "1079", ",", "1", "]", "=", "3", "\n", "v", "[", "1080", ",", "1", "]", "=", "1", "\n", "v", "[", "1081", ",", "1", "]", "=", "1", "\n", "v", "[", "1082", ",", "1", "]", "=", "1", "\n", "v", "[", "1083", ",", "1", "]", "=", "3", "\n", "v", "[", "1084", ",", "1", "]", "=", "1", "\n", "v", "[", "1085", ",", "1", "]", "=", "1", "\n", "v", "[", "1086", ",", "1", "]", "=", "3", "\n", "v", "[", "1087", ",", "1", "]", "=", "3", "\n", "v", "[", "1088", ",", "1", "]", "=", "1", "\n", "v", "[", "1089", ",", "1", "]", "=", "3", "\n", "v", "[", "1090", ",", "1", "]", "=", "3", "\n", "v", "[", "1091", ",", "1", "]", "=", "3", "\n", "v", "[", "1092", ",", "1", "]", "=", "3", "\n", "v", "[", "1093", ",", "1", "]", "=", "3", "\n", "v", "[", "1094", ",", "1", "]", "=", "3", "\n", "v", "[", "1095", ",", "1", "]", "=", "3", "\n", "v", "[", "1096", ",", "1", "]", "=", "3", "\n", "v", "[", "1097", ",", "1", "]", "=", "1", "\n", "v", "[", "1098", ",", "1", "]", "=", "1", "\n", "v", "[", "1099", ",", "1", "]", "=", "3", "\n", "v", "[", "1100", ",", "1", "]", "=", "3", "\n", "v", "[", "1101", ",", "1", "]", "=", "1", "\n", "v", "[", "1102", ",", "1", "]", "=", "1", "\n", "v", "[", "1103", ",", "1", "]", "=", "3", "\n", "v", "[", "1104", ",", "1", "]", "=", "1", "\n", "v", "[", "1105", ",", "1", "]", "=", "3", "\n", "v", "[", "1106", ",", "1", "]", "=", "3", "\n", "v", "[", "1107", ",", "1", "]", "=", "3", "\n", "v", "[", "1108", ",", "1", "]", "=", "3", "\n", "v", "[", "1109", ",", "1", "]", "=", "3", "\n", "v", "[", "1110", ",", "1", "]", "=", "1", "\n", "\n", "v", "[", "3", ",", "2", "]", "=", "7", "\n", "v", "[", "4", ",", "2", "]", "=", "5", "\n", "v", "[", "5", ",", "2", "]", "=", "1", "\n", "v", "[", "6", ",", "2", "]", "=", "3", "\n", "v", "[", "7", ",", "2", "]", "=", "3", "\n", "v", "[", "8", ",", "2", "]", "=", "7", "\n", "v", "[", "9", ",", "2", "]", "=", "5", "\n", "v", "[", "10", ",", "2", "]", "=", "5", "\n", "v", "[", "11", ",", "2", "]", "=", "7", "\n", "v", "[", "12", ",", "2", "]", "=", "7", "\n", "v", "[", "13", ",", "2", "]", "=", "1", "\n", "v", "[", "14", ",", "2", "]", "=", "3", "\n", "v", "[", "15", ",", "2", "]", "=", "3", "\n", "v", "[", "16", ",", "2", "]", "=", "7", "\n", "v", "[", "17", ",", "2", "]", "=", "5", "\n", "v", "[", "18", ",", "2", "]", "=", "1", "\n", "v", "[", "19", ",", "2", "]", "=", "1", "\n", "v", "[", "20", ",", "2", "]", "=", "5", "\n", "v", "[", "21", ",", "2", "]", "=", "3", "\n", "v", "[", "22", ",", "2", "]", "=", "7", "\n", "v", "[", "23", ",", "2", "]", "=", "1", "\n", "v", "[", "24", ",", "2", "]", "=", "7", "\n", "v", "[", "25", ",", "2", "]", "=", "5", "\n", "v", "[", "26", ",", "2", "]", "=", "1", "\n", "v", "[", "27", ",", "2", "]", "=", "3", "\n", "v", "[", "28", ",", "2", "]", "=", "7", "\n", "v", "[", "29", ",", "2", "]", "=", "7", "\n", "v", "[", "30", ",", "2", "]", "=", "1", "\n", "v", "[", "31", ",", "2", "]", "=", "1", "\n", "v", "[", "32", ",", "2", "]", "=", "1", "\n", "v", "[", "33", ",", "2", "]", "=", "5", "\n", "v", "[", "34", ",", "2", "]", "=", "7", "\n", "v", "[", "35", ",", "2", "]", "=", "7", "\n", "v", "[", "36", ",", "2", "]", "=", "5", "\n", "v", "[", "37", ",", "2", "]", "=", "1", "\n", "v", "[", "38", ",", "2", "]", "=", "3", "\n", "v", "[", "39", ",", "2", "]", "=", "3", "\n", "v", "[", "40", ",", "2", "]", "=", "7", "\n", "v", "[", "41", ",", "2", "]", "=", "5", "\n", "v", "[", "42", ",", "2", "]", "=", "5", "\n", "v", "[", "43", ",", "2", "]", "=", "5", "\n", "v", "[", "44", ",", "2", "]", "=", "3", "\n", "v", "[", "45", ",", "2", "]", "=", "3", "\n", "v", "[", "46", ",", "2", "]", "=", "3", "\n", "v", "[", "47", ",", "2", "]", "=", "1", "\n", "v", "[", "48", ",", "2", "]", "=", "1", "\n", "v", "[", "49", ",", "2", "]", "=", "5", "\n", "v", "[", "50", ",", "2", "]", "=", "1", "\n", "v", "[", "51", ",", "2", "]", "=", "1", "\n", "v", "[", "52", ",", "2", "]", "=", "5", "\n", "v", "[", "53", ",", "2", "]", "=", "3", "\n", "v", "[", "54", ",", "2", "]", "=", "3", "\n", "v", "[", "55", ",", "2", "]", "=", "3", "\n", "v", "[", "56", ",", "2", "]", "=", "3", "\n", "v", "[", "57", ",", "2", "]", "=", "1", "\n", "v", "[", "58", ",", "2", "]", "=", "3", "\n", "v", "[", "59", ",", "2", "]", "=", "7", "\n", "v", "[", "60", ",", "2", "]", "=", "5", "\n", "v", "[", "61", ",", "2", "]", "=", "7", "\n", "v", "[", "62", ",", "2", "]", "=", "3", "\n", "v", "[", "63", ",", "2", "]", "=", "7", "\n", "v", "[", "64", ",", "2", "]", "=", "1", "\n", "v", "[", "65", ",", "2", "]", "=", "3", "\n", "v", "[", "66", ",", "2", "]", "=", "3", "\n", "v", "[", "67", ",", "2", "]", "=", "5", "\n", "v", "[", "68", ",", "2", "]", "=", "1", "\n", "v", "[", "69", ",", "2", "]", "=", "3", "\n", "v", "[", "70", ",", "2", "]", "=", "5", "\n", "v", "[", "71", ",", "2", "]", "=", "5", "\n", "v", "[", "72", ",", "2", "]", "=", "7", "\n", "v", "[", "73", ",", "2", "]", "=", "7", "\n", "v", "[", "74", ",", "2", "]", "=", "7", "\n", "v", "[", "75", ",", "2", "]", "=", "1", "\n", "v", "[", "76", ",", "2", "]", "=", "1", "\n", "v", "[", "77", ",", "2", "]", "=", "3", "\n", "v", "[", "78", ",", "2", "]", "=", "3", "\n", "v", "[", "79", ",", "2", "]", "=", "1", "\n", "v", "[", "80", ",", "2", "]", "=", "1", "\n", "v", "[", "81", ",", "2", "]", "=", "5", "\n", "v", "[", "82", ",", "2", "]", "=", "1", "\n", "v", "[", "83", ",", "2", "]", "=", "5", "\n", "v", "[", "84", ",", "2", "]", "=", "7", "\n", "v", "[", "85", ",", "2", "]", "=", "5", "\n", "v", "[", "86", ",", "2", "]", "=", "1", "\n", "v", "[", "87", ",", "2", "]", "=", "7", "\n", "v", "[", "88", ",", "2", "]", "=", "5", "\n", "v", "[", "89", ",", "2", "]", "=", "3", "\n", "v", "[", "90", ",", "2", "]", "=", "3", "\n", "v", "[", "91", ",", "2", "]", "=", "1", "\n", "v", "[", "92", ",", "2", "]", "=", "5", "\n", "v", "[", "93", ",", "2", "]", "=", "7", "\n", "v", "[", "94", ",", "2", "]", "=", "1", "\n", "v", "[", "95", ",", "2", "]", "=", "7", "\n", "v", "[", "96", ",", "2", "]", "=", "5", "\n", "v", "[", "97", ",", "2", "]", "=", "1", "\n", "v", "[", "98", ",", "2", "]", "=", "7", "\n", "v", "[", "99", ",", "2", "]", "=", "3", "\n", "v", "[", "100", ",", "2", "]", "=", "1", "\n", "v", "[", "101", ",", "2", "]", "=", "7", "\n", "v", "[", "102", ",", "2", "]", "=", "1", "\n", "v", "[", "103", ",", "2", "]", "=", "7", "\n", "v", "[", "104", ",", "2", "]", "=", "3", "\n", "v", "[", "105", ",", "2", "]", "=", "3", "\n", "v", "[", "106", ",", "2", "]", "=", "5", "\n", "v", "[", "107", ",", "2", "]", "=", "7", "\n", "v", "[", "108", ",", "2", "]", "=", "3", "\n", "v", "[", "109", ",", "2", "]", "=", "3", "\n", "v", "[", "110", ",", "2", "]", "=", "5", "\n", "v", "[", "111", ",", "2", "]", "=", "1", "\n", "v", "[", "112", ",", "2", "]", "=", "3", "\n", "v", "[", "113", ",", "2", "]", "=", "3", "\n", "v", "[", "114", ",", "2", "]", "=", "1", "\n", "v", "[", "115", ",", "2", "]", "=", "3", "\n", "v", "[", "116", ",", "2", "]", "=", "5", "\n", "v", "[", "117", ",", "2", "]", "=", "1", "\n", "v", "[", "118", ",", "2", "]", "=", "3", "\n", "v", "[", "119", ",", "2", "]", "=", "3", "\n", "v", "[", "120", ",", "2", "]", "=", "3", "\n", "v", "[", "121", ",", "2", "]", "=", "7", "\n", "v", "[", "122", ",", "2", "]", "=", "1", "\n", "v", "[", "123", ",", "2", "]", "=", "1", "\n", "v", "[", "124", ",", "2", "]", "=", "7", "\n", "v", "[", "125", ",", "2", "]", "=", "3", "\n", "v", "[", "126", ",", "2", "]", "=", "1", "\n", "v", "[", "127", ",", "2", "]", "=", "3", "\n", "v", "[", "128", ",", "2", "]", "=", "7", "\n", "v", "[", "129", ",", "2", "]", "=", "5", "\n", "v", "[", "130", ",", "2", "]", "=", "5", "\n", "v", "[", "131", ",", "2", "]", "=", "7", "\n", "v", "[", "132", ",", "2", "]", "=", "5", "\n", "v", "[", "133", ",", "2", "]", "=", "5", "\n", "v", "[", "134", ",", "2", "]", "=", "3", "\n", "v", "[", "135", ",", "2", "]", "=", "1", "\n", "v", "[", "136", ",", "2", "]", "=", "3", "\n", "v", "[", "137", ",", "2", "]", "=", "3", "\n", "v", "[", "138", ",", "2", "]", "=", "3", "\n", "v", "[", "139", ",", "2", "]", "=", "1", "\n", "v", "[", "140", ",", "2", "]", "=", "3", "\n", "v", "[", "141", ",", "2", "]", "=", "3", "\n", "v", "[", "142", ",", "2", "]", "=", "7", "\n", "v", "[", "143", ",", "2", "]", "=", "3", "\n", "v", "[", "144", ",", "2", "]", "=", "3", "\n", "v", "[", "145", ",", "2", "]", "=", "1", "\n", "v", "[", "146", ",", "2", "]", "=", "7", "\n", "v", "[", "147", ",", "2", "]", "=", "5", "\n", "v", "[", "148", ",", "2", "]", "=", "1", "\n", "v", "[", "149", ",", "2", "]", "=", "7", "\n", "v", "[", "150", ",", "2", "]", "=", "7", "\n", "v", "[", "151", ",", "2", "]", "=", "5", "\n", "v", "[", "152", ",", "2", "]", "=", "7", "\n", "v", "[", "153", ",", "2", "]", "=", "5", "\n", "v", "[", "154", ",", "2", "]", "=", "1", "\n", "v", "[", "155", ",", "2", "]", "=", "3", "\n", "v", "[", "156", ",", "2", "]", "=", "1", "\n", "v", "[", "157", ",", "2", "]", "=", "7", "\n", "v", "[", "158", ",", "2", "]", "=", "3", "\n", "v", "[", "159", ",", "2", "]", "=", "7", "\n", "v", "[", "160", ",", "2", "]", "=", "3", "\n", "v", "[", "161", ",", "2", "]", "=", "5", "\n", "v", "[", "162", ",", "2", "]", "=", "7", "\n", "v", "[", "163", ",", "2", "]", "=", "3", "\n", "v", "[", "164", ",", "2", "]", "=", "1", "\n", "v", "[", "165", ",", "2", "]", "=", "3", "\n", "v", "[", "166", ",", "2", "]", "=", "3", "\n", "v", "[", "167", ",", "2", "]", "=", "3", "\n", "v", "[", "168", ",", "2", "]", "=", "1", "\n", "v", "[", "169", ",", "2", "]", "=", "5", "\n", "v", "[", "170", ",", "2", "]", "=", "7", "\n", "v", "[", "171", ",", "2", "]", "=", "3", "\n", "v", "[", "172", ",", "2", "]", "=", "3", "\n", "v", "[", "173", ",", "2", "]", "=", "7", "\n", "v", "[", "174", ",", "2", "]", "=", "7", "\n", "v", "[", "175", ",", "2", "]", "=", "7", "\n", "v", "[", "176", ",", "2", "]", "=", "5", "\n", "v", "[", "177", ",", "2", "]", "=", "3", "\n", "v", "[", "178", ",", "2", "]", "=", "1", "\n", "v", "[", "179", ",", "2", "]", "=", "7", "\n", "v", "[", "180", ",", "2", "]", "=", "1", "\n", "v", "[", "181", ",", "2", "]", "=", "3", "\n", "v", "[", "182", ",", "2", "]", "=", "7", "\n", "v", "[", "183", ",", "2", "]", "=", "5", "\n", "v", "[", "184", ",", "2", "]", "=", "3", "\n", "v", "[", "185", ",", "2", "]", "=", "3", "\n", "v", "[", "186", ",", "2", "]", "=", "3", "\n", "v", "[", "187", ",", "2", "]", "=", "7", "\n", "v", "[", "188", ",", "2", "]", "=", "1", "\n", "v", "[", "189", ",", "2", "]", "=", "1", "\n", "v", "[", "190", ",", "2", "]", "=", "3", "\n", "v", "[", "191", ",", "2", "]", "=", "1", "\n", "v", "[", "192", ",", "2", "]", "=", "5", "\n", "v", "[", "193", ",", "2", "]", "=", "7", "\n", "v", "[", "194", ",", "2", "]", "=", "1", "\n", "v", "[", "195", ",", "2", "]", "=", "3", "\n", "v", "[", "196", ",", "2", "]", "=", "5", "\n", "v", "[", "197", ",", "2", "]", "=", "3", "\n", "v", "[", "198", ",", "2", "]", "=", "5", "\n", "v", "[", "199", ",", "2", "]", "=", "3", "\n", "v", "[", "200", ",", "2", "]", "=", "3", "\n", "v", "[", "201", ",", "2", "]", "=", "7", "\n", "v", "[", "202", ",", "2", "]", "=", "5", "\n", "v", "[", "203", ",", "2", "]", "=", "5", "\n", "v", "[", "204", ",", "2", "]", "=", "3", "\n", "v", "[", "205", ",", "2", "]", "=", "3", "\n", "v", "[", "206", ",", "2", "]", "=", "1", "\n", "v", "[", "207", ",", "2", "]", "=", "3", "\n", "v", "[", "208", ",", "2", "]", "=", "7", "\n", "v", "[", "209", ",", "2", "]", "=", "7", "\n", "v", "[", "210", ",", "2", "]", "=", "7", "\n", "v", "[", "211", ",", "2", "]", "=", "1", "\n", "v", "[", "212", ",", "2", "]", "=", "5", "\n", "v", "[", "213", ",", "2", "]", "=", "7", "\n", "v", "[", "214", ",", "2", "]", "=", "1", "\n", "v", "[", "215", ",", "2", "]", "=", "3", "\n", "v", "[", "216", ",", "2", "]", "=", "1", "\n", "v", "[", "217", ",", "2", "]", "=", "1", "\n", "v", "[", "218", ",", "2", "]", "=", "7", "\n", "v", "[", "219", ",", "2", "]", "=", "1", "\n", "v", "[", "220", ",", "2", "]", "=", "3", "\n", "v", "[", "221", ",", "2", "]", "=", "1", "\n", "v", "[", "222", ",", "2", "]", "=", "7", "\n", "v", "[", "223", ",", "2", "]", "=", "1", "\n", "v", "[", "224", ",", "2", "]", "=", "5", "\n", "v", "[", "225", ",", "2", "]", "=", "3", "\n", "v", "[", "226", ",", "2", "]", "=", "5", "\n", "v", "[", "227", ",", "2", "]", "=", "3", "\n", "v", "[", "228", ",", "2", "]", "=", "1", "\n", "v", "[", "229", ",", "2", "]", "=", "1", "\n", "v", "[", "230", ",", "2", "]", "=", "5", "\n", "v", "[", "231", ",", "2", "]", "=", "5", "\n", "v", "[", "232", ",", "2", "]", "=", "3", "\n", "v", "[", "233", ",", "2", "]", "=", "3", "\n", "v", "[", "234", ",", "2", "]", "=", "5", "\n", "v", "[", "235", ",", "2", "]", "=", "7", "\n", "v", "[", "236", ",", "2", "]", "=", "1", "\n", "v", "[", "237", ",", "2", "]", "=", "5", "\n", "v", "[", "238", ",", "2", "]", "=", "3", "\n", "v", "[", "239", ",", "2", "]", "=", "7", "\n", "v", "[", "240", ",", "2", "]", "=", "7", "\n", "v", "[", "241", ",", "2", "]", "=", "3", "\n", "v", "[", "242", ",", "2", "]", "=", "5", "\n", "v", "[", "243", ",", "2", "]", "=", "3", "\n", "v", "[", "244", ",", "2", "]", "=", "3", "\n", "v", "[", "245", ",", "2", "]", "=", "1", "\n", "v", "[", "246", ",", "2", "]", "=", "7", "\n", "v", "[", "247", ",", "2", "]", "=", "3", "\n", "v", "[", "248", ",", "2", "]", "=", "1", "\n", "v", "[", "249", ",", "2", "]", "=", "3", "\n", "v", "[", "250", ",", "2", "]", "=", "5", "\n", "v", "[", "251", ",", "2", "]", "=", "7", "\n", "v", "[", "252", ",", "2", "]", "=", "1", "\n", "v", "[", "253", ",", "2", "]", "=", "3", "\n", "v", "[", "254", ",", "2", "]", "=", "7", "\n", "v", "[", "255", ",", "2", "]", "=", "1", "\n", "v", "[", "256", ",", "2", "]", "=", "5", "\n", "v", "[", "257", ",", "2", "]", "=", "1", "\n", "v", "[", "258", ",", "2", "]", "=", "3", "\n", "v", "[", "259", ",", "2", "]", "=", "1", "\n", "v", "[", "260", ",", "2", "]", "=", "5", "\n", "v", "[", "261", ",", "2", "]", "=", "3", "\n", "v", "[", "262", ",", "2", "]", "=", "1", "\n", "v", "[", "263", ",", "2", "]", "=", "7", "\n", "v", "[", "264", ",", "2", "]", "=", "1", "\n", "v", "[", "265", ",", "2", "]", "=", "5", "\n", "v", "[", "266", ",", "2", "]", "=", "5", "\n", "v", "[", "267", ",", "2", "]", "=", "5", "\n", "v", "[", "268", ",", "2", "]", "=", "3", "\n", "v", "[", "269", ",", "2", "]", "=", "7", "\n", "v", "[", "270", ",", "2", "]", "=", "1", "\n", "v", "[", "271", ",", "2", "]", "=", "1", "\n", "v", "[", "272", ",", "2", "]", "=", "7", "\n", "v", "[", "273", ",", "2", "]", "=", "3", "\n", "v", "[", "274", ",", "2", "]", "=", "1", "\n", "v", "[", "275", ",", "2", "]", "=", "1", "\n", "v", "[", "276", ",", "2", "]", "=", "7", "\n", "v", "[", "277", ",", "2", "]", "=", "5", "\n", "v", "[", "278", ",", "2", "]", "=", "7", "\n", "v", "[", "279", ",", "2", "]", "=", "5", "\n", "v", "[", "280", ",", "2", "]", "=", "7", "\n", "v", "[", "281", ",", "2", "]", "=", "7", "\n", "v", "[", "282", ",", "2", "]", "=", "3", "\n", "v", "[", "283", ",", "2", "]", "=", "7", "\n", "v", "[", "284", ",", "2", "]", "=", "1", "\n", "v", "[", "285", ",", "2", "]", "=", "3", "\n", "v", "[", "286", ",", "2", "]", "=", "7", "\n", "v", "[", "287", ",", "2", "]", "=", "7", "\n", "v", "[", "288", ",", "2", "]", "=", "3", "\n", "v", "[", "289", ",", "2", "]", "=", "5", "\n", "v", "[", "290", ",", "2", "]", "=", "1", "\n", "v", "[", "291", ",", "2", "]", "=", "1", "\n", "v", "[", "292", ",", "2", "]", "=", "7", "\n", "v", "[", "293", ",", "2", "]", "=", "1", "\n", "v", "[", "294", ",", "2", "]", "=", "5", "\n", "v", "[", "295", ",", "2", "]", "=", "5", "\n", "v", "[", "296", ",", "2", "]", "=", "5", "\n", "v", "[", "297", ",", "2", "]", "=", "1", "\n", "v", "[", "298", ",", "2", "]", "=", "5", "\n", "v", "[", "299", ",", "2", "]", "=", "1", "\n", "v", "[", "300", ",", "2", "]", "=", "7", "\n", "v", "[", "301", ",", "2", "]", "=", "5", "\n", "v", "[", "302", ",", "2", "]", "=", "5", "\n", "v", "[", "303", ",", "2", "]", "=", "7", "\n", "v", "[", "304", ",", "2", "]", "=", "1", "\n", "v", "[", "305", ",", "2", "]", "=", "1", "\n", "v", "[", "306", ",", "2", "]", "=", "7", "\n", "v", "[", "307", ",", "2", "]", "=", "1", "\n", "v", "[", "308", ",", "2", "]", "=", "7", "\n", "v", "[", "309", ",", "2", "]", "=", "7", "\n", "v", "[", "310", ",", "2", "]", "=", "1", "\n", "v", "[", "311", ",", "2", "]", "=", "1", "\n", "v", "[", "312", ",", "2", "]", "=", "3", "\n", "v", "[", "313", ",", "2", "]", "=", "3", "\n", "v", "[", "314", ",", "2", "]", "=", "3", "\n", "v", "[", "315", ",", "2", "]", "=", "7", "\n", "v", "[", "316", ",", "2", "]", "=", "7", "\n", "v", "[", "317", ",", "2", "]", "=", "5", "\n", "v", "[", "318", ",", "2", "]", "=", "3", "\n", "v", "[", "319", ",", "2", "]", "=", "7", "\n", "v", "[", "320", ",", "2", "]", "=", "3", "\n", "v", "[", "321", ",", "2", "]", "=", "1", "\n", "v", "[", "322", ",", "2", "]", "=", "3", "\n", "v", "[", "323", ",", "2", "]", "=", "7", "\n", "v", "[", "324", ",", "2", "]", "=", "5", "\n", "v", "[", "325", ",", "2", "]", "=", "3", "\n", "v", "[", "326", ",", "2", "]", "=", "3", "\n", "v", "[", "327", ",", "2", "]", "=", "5", "\n", "v", "[", "328", ",", "2", "]", "=", "7", "\n", "v", "[", "329", ",", "2", "]", "=", "1", "\n", "v", "[", "330", ",", "2", "]", "=", "1", "\n", "v", "[", "331", ",", "2", "]", "=", "5", "\n", "v", "[", "332", ",", "2", "]", "=", "5", "\n", "v", "[", "333", ",", "2", "]", "=", "7", "\n", "v", "[", "334", ",", "2", "]", "=", "7", "\n", "v", "[", "335", ",", "2", "]", "=", "1", "\n", "v", "[", "336", ",", "2", "]", "=", "1", "\n", "v", "[", "337", ",", "2", "]", "=", "1", "\n", "v", "[", "338", ",", "2", "]", "=", "1", "\n", "v", "[", "339", ",", "2", "]", "=", "5", "\n", "v", "[", "340", ",", "2", "]", "=", "5", "\n", "v", "[", "341", ",", "2", "]", "=", "5", "\n", "v", "[", "342", ",", "2", "]", "=", "7", "\n", "v", "[", "343", ",", "2", "]", "=", "5", "\n", "v", "[", "344", ",", "2", "]", "=", "7", "\n", "v", "[", "345", ",", "2", "]", "=", "1", "\n", "v", "[", "346", ",", "2", "]", "=", "1", "\n", "v", "[", "347", ",", "2", "]", "=", "3", "\n", "v", "[", "348", ",", "2", "]", "=", "5", "\n", "v", "[", "349", ",", "2", "]", "=", "1", "\n", "v", "[", "350", ",", "2", "]", "=", "3", "\n", "v", "[", "351", ",", "2", "]", "=", "3", "\n", "v", "[", "352", ",", "2", "]", "=", "7", "\n", "v", "[", "353", ",", "2", "]", "=", "3", "\n", "v", "[", "354", ",", "2", "]", "=", "7", "\n", "v", "[", "355", ",", "2", "]", "=", "5", "\n", "v", "[", "356", ",", "2", "]", "=", "3", "\n", "v", "[", "357", ",", "2", "]", "=", "5", "\n", "v", "[", "358", ",", "2", "]", "=", "3", "\n", "v", "[", "359", ",", "2", "]", "=", "1", "\n", "v", "[", "360", ",", "2", "]", "=", "7", "\n", "v", "[", "361", ",", "2", "]", "=", "1", "\n", "v", "[", "362", ",", "2", "]", "=", "7", "\n", "v", "[", "363", ",", "2", "]", "=", "7", "\n", "v", "[", "364", ",", "2", "]", "=", "1", "\n", "v", "[", "365", ",", "2", "]", "=", "1", "\n", "v", "[", "366", ",", "2", "]", "=", "7", "\n", "v", "[", "367", ",", "2", "]", "=", "7", "\n", "v", "[", "368", ",", "2", "]", "=", "7", "\n", "v", "[", "369", ",", "2", "]", "=", "5", "\n", "v", "[", "370", ",", "2", "]", "=", "5", "\n", "v", "[", "371", ",", "2", "]", "=", "1", "\n", "v", "[", "372", ",", "2", "]", "=", "1", "\n", "v", "[", "373", ",", "2", "]", "=", "7", "\n", "v", "[", "374", ",", "2", "]", "=", "5", "\n", "v", "[", "375", ",", "2", "]", "=", "5", "\n", "v", "[", "376", ",", "2", "]", "=", "7", "\n", "v", "[", "377", ",", "2", "]", "=", "5", "\n", "v", "[", "378", ",", "2", "]", "=", "1", "\n", "v", "[", "379", ",", "2", "]", "=", "1", "\n", "v", "[", "380", ",", "2", "]", "=", "5", "\n", "v", "[", "381", ",", "2", "]", "=", "5", "\n", "v", "[", "382", ",", "2", "]", "=", "5", "\n", "v", "[", "383", ",", "2", "]", "=", "5", "\n", "v", "[", "384", ",", "2", "]", "=", "5", "\n", "v", "[", "385", ",", "2", "]", "=", "5", "\n", "v", "[", "386", ",", "2", "]", "=", "1", "\n", "v", "[", "387", ",", "2", "]", "=", "3", "\n", "v", "[", "388", ",", "2", "]", "=", "1", "\n", "v", "[", "389", ",", "2", "]", "=", "5", "\n", "v", "[", "390", ",", "2", "]", "=", "7", "\n", "v", "[", "391", ",", "2", "]", "=", "3", "\n", "v", "[", "392", ",", "2", "]", "=", "3", "\n", "v", "[", "393", ",", "2", "]", "=", "5", "\n", "v", "[", "394", ",", "2", "]", "=", "7", "\n", "v", "[", "395", ",", "2", "]", "=", "3", "\n", "v", "[", "396", ",", "2", "]", "=", "7", "\n", "v", "[", "397", ",", "2", "]", "=", "1", "\n", "v", "[", "398", ",", "2", "]", "=", "7", "\n", "v", "[", "399", ",", "2", "]", "=", "7", "\n", "v", "[", "400", ",", "2", "]", "=", "1", "\n", "v", "[", "401", ",", "2", "]", "=", "3", "\n", "v", "[", "402", ",", "2", "]", "=", "5", "\n", "v", "[", "403", ",", "2", "]", "=", "1", "\n", "v", "[", "404", ",", "2", "]", "=", "5", "\n", "v", "[", "405", ",", "2", "]", "=", "5", "\n", "v", "[", "406", ",", "2", "]", "=", "3", "\n", "v", "[", "407", ",", "2", "]", "=", "7", "\n", "v", "[", "408", ",", "2", "]", "=", "3", "\n", "v", "[", "409", ",", "2", "]", "=", "7", "\n", "v", "[", "410", ",", "2", "]", "=", "7", "\n", "v", "[", "411", ",", "2", "]", "=", "5", "\n", "v", "[", "412", ",", "2", "]", "=", "7", "\n", "v", "[", "413", ",", "2", "]", "=", "5", "\n", "v", "[", "414", ",", "2", "]", "=", "7", "\n", "v", "[", "415", ",", "2", "]", "=", "1", "\n", "v", "[", "416", ",", "2", "]", "=", "1", "\n", "v", "[", "417", ",", "2", "]", "=", "5", "\n", "v", "[", "418", ",", "2", "]", "=", "3", "\n", "v", "[", "419", ",", "2", "]", "=", "5", "\n", "v", "[", "420", ",", "2", "]", "=", "1", "\n", "v", "[", "421", ",", "2", "]", "=", "5", "\n", "v", "[", "422", ",", "2", "]", "=", "3", "\n", "v", "[", "423", ",", "2", "]", "=", "7", "\n", "v", "[", "424", ",", "2", "]", "=", "1", "\n", "v", "[", "425", ",", "2", "]", "=", "5", "\n", "v", "[", "426", ",", "2", "]", "=", "7", "\n", "v", "[", "427", ",", "2", "]", "=", "7", "\n", "v", "[", "428", ",", "2", "]", "=", "3", "\n", "v", "[", "429", ",", "2", "]", "=", "5", "\n", "v", "[", "430", ",", "2", "]", "=", "1", "\n", "v", "[", "431", ",", "2", "]", "=", "3", "\n", "v", "[", "432", ",", "2", "]", "=", "5", "\n", "v", "[", "433", ",", "2", "]", "=", "1", "\n", "v", "[", "434", ",", "2", "]", "=", "5", "\n", "v", "[", "435", ",", "2", "]", "=", "3", "\n", "v", "[", "436", ",", "2", "]", "=", "3", "\n", "v", "[", "437", ",", "2", "]", "=", "3", "\n", "v", "[", "438", ",", "2", "]", "=", "7", "\n", "v", "[", "439", ",", "2", "]", "=", "3", "\n", "v", "[", "440", ",", "2", "]", "=", "5", "\n", "v", "[", "441", ",", "2", "]", "=", "1", "\n", "v", "[", "442", ",", "2", "]", "=", "3", "\n", "v", "[", "443", ",", "2", "]", "=", "7", "\n", "v", "[", "444", ",", "2", "]", "=", "7", "\n", "v", "[", "445", ",", "2", "]", "=", "3", "\n", "v", "[", "446", ",", "2", "]", "=", "7", "\n", "v", "[", "447", ",", "2", "]", "=", "5", "\n", "v", "[", "448", ",", "2", "]", "=", "3", "\n", "v", "[", "449", ",", "2", "]", "=", "3", "\n", "v", "[", "450", ",", "2", "]", "=", "1", "\n", "v", "[", "451", ",", "2", "]", "=", "7", "\n", "v", "[", "452", ",", "2", "]", "=", "5", "\n", "v", "[", "453", ",", "2", "]", "=", "1", "\n", "v", "[", "454", ",", "2", "]", "=", "1", "\n", "v", "[", "455", ",", "2", "]", "=", "3", "\n", "v", "[", "456", ",", "2", "]", "=", "7", "\n", "v", "[", "457", ",", "2", "]", "=", "1", "\n", "v", "[", "458", ",", "2", "]", "=", "7", "\n", "v", "[", "459", ",", "2", "]", "=", "1", "\n", "v", "[", "460", ",", "2", "]", "=", "7", "\n", "v", "[", "461", ",", "2", "]", "=", "3", "\n", "v", "[", "462", ",", "2", "]", "=", "7", "\n", "v", "[", "463", ",", "2", "]", "=", "3", "\n", "v", "[", "464", ",", "2", "]", "=", "5", "\n", "v", "[", "465", ",", "2", "]", "=", "7", "\n", "v", "[", "466", ",", "2", "]", "=", "3", "\n", "v", "[", "467", ",", "2", "]", "=", "5", "\n", "v", "[", "468", ",", "2", "]", "=", "3", "\n", "v", "[", "469", ",", "2", "]", "=", "1", "\n", "v", "[", "470", ",", "2", "]", "=", "1", "\n", "v", "[", "471", ",", "2", "]", "=", "1", "\n", "v", "[", "472", ",", "2", "]", "=", "5", "\n", "v", "[", "473", ",", "2", "]", "=", "7", "\n", "v", "[", "474", ",", "2", "]", "=", "7", "\n", "v", "[", "475", ",", "2", "]", "=", "3", "\n", "v", "[", "476", ",", "2", "]", "=", "3", "\n", "v", "[", "477", ",", "2", "]", "=", "1", "\n", "v", "[", "478", ",", "2", "]", "=", "1", "\n", "v", "[", "479", ",", "2", "]", "=", "1", "\n", "v", "[", "480", ",", "2", "]", "=", "5", "\n", "v", "[", "481", ",", "2", "]", "=", "5", "\n", "v", "[", "482", ",", "2", "]", "=", "7", "\n", "v", "[", "483", ",", "2", "]", "=", "3", "\n", "v", "[", "484", ",", "2", "]", "=", "1", "\n", "v", "[", "485", ",", "2", "]", "=", "1", "\n", "v", "[", "486", ",", "2", "]", "=", "3", "\n", "v", "[", "487", ",", "2", "]", "=", "3", "\n", "v", "[", "488", ",", "2", "]", "=", "7", "\n", "v", "[", "489", ",", "2", "]", "=", "3", "\n", "v", "[", "490", ",", "2", "]", "=", "3", "\n", "v", "[", "491", ",", "2", "]", "=", "5", "\n", "v", "[", "492", ",", "2", "]", "=", "1", "\n", "v", "[", "493", ",", "2", "]", "=", "3", "\n", "v", "[", "494", ",", "2", "]", "=", "7", "\n", "v", "[", "495", ",", "2", "]", "=", "3", "\n", "v", "[", "496", ",", "2", "]", "=", "3", "\n", "v", "[", "497", ",", "2", "]", "=", "7", "\n", "v", "[", "498", ",", "2", "]", "=", "3", "\n", "v", "[", "499", ",", "2", "]", "=", "5", "\n", "v", "[", "500", ",", "2", "]", "=", "7", "\n", "v", "[", "501", ",", "2", "]", "=", "5", "\n", "v", "[", "502", ",", "2", "]", "=", "7", "\n", "v", "[", "503", ",", "2", "]", "=", "7", "\n", "v", "[", "504", ",", "2", "]", "=", "3", "\n", "v", "[", "505", ",", "2", "]", "=", "3", "\n", "v", "[", "506", ",", "2", "]", "=", "5", "\n", "v", "[", "507", ",", "2", "]", "=", "1", "\n", "v", "[", "508", ",", "2", "]", "=", "3", "\n", "v", "[", "509", ",", "2", "]", "=", "5", "\n", "v", "[", "510", ",", "2", "]", "=", "3", "\n", "v", "[", "511", ",", "2", "]", "=", "1", "\n", "v", "[", "512", ",", "2", "]", "=", "3", "\n", "v", "[", "513", ",", "2", "]", "=", "5", "\n", "v", "[", "514", ",", "2", "]", "=", "1", "\n", "v", "[", "515", ",", "2", "]", "=", "1", "\n", "v", "[", "516", ",", "2", "]", "=", "3", "\n", "v", "[", "517", ",", "2", "]", "=", "7", "\n", "v", "[", "518", ",", "2", "]", "=", "7", "\n", "v", "[", "519", ",", "2", "]", "=", "1", "\n", "v", "[", "520", ",", "2", "]", "=", "5", "\n", "v", "[", "521", ",", "2", "]", "=", "1", "\n", "v", "[", "522", ",", "2", "]", "=", "3", "\n", "v", "[", "523", ",", "2", "]", "=", "7", "\n", "v", "[", "524", ",", "2", "]", "=", "3", "\n", "v", "[", "525", ",", "2", "]", "=", "7", "\n", "v", "[", "526", ",", "2", "]", "=", "3", "\n", "v", "[", "527", ",", "2", "]", "=", "5", "\n", "v", "[", "528", ",", "2", "]", "=", "1", "\n", "v", "[", "529", ",", "2", "]", "=", "7", "\n", "v", "[", "530", ",", "2", "]", "=", "1", "\n", "v", "[", "531", ",", "2", "]", "=", "1", "\n", "v", "[", "532", ",", "2", "]", "=", "3", "\n", "v", "[", "533", ",", "2", "]", "=", "5", "\n", "v", "[", "534", ",", "2", "]", "=", "3", "\n", "v", "[", "535", ",", "2", "]", "=", "7", "\n", "v", "[", "536", ",", "2", "]", "=", "1", "\n", "v", "[", "537", ",", "2", "]", "=", "5", "\n", "v", "[", "538", ",", "2", "]", "=", "5", "\n", "v", "[", "539", ",", "2", "]", "=", "1", "\n", "v", "[", "540", ",", "2", "]", "=", "1", "\n", "v", "[", "541", ",", "2", "]", "=", "3", "\n", "v", "[", "542", ",", "2", "]", "=", "1", "\n", "v", "[", "543", ",", "2", "]", "=", "3", "\n", "v", "[", "544", ",", "2", "]", "=", "3", "\n", "v", "[", "545", ",", "2", "]", "=", "7", "\n", "v", "[", "546", ",", "2", "]", "=", "1", "\n", "v", "[", "547", ",", "2", "]", "=", "7", "\n", "v", "[", "548", ",", "2", "]", "=", "3", "\n", "v", "[", "549", ",", "2", "]", "=", "1", "\n", "v", "[", "550", ",", "2", "]", "=", "7", "\n", "v", "[", "551", ",", "2", "]", "=", "3", "\n", "v", "[", "552", ",", "2", "]", "=", "1", "\n", "v", "[", "553", ",", "2", "]", "=", "7", "\n", "v", "[", "554", ",", "2", "]", "=", "3", "\n", "v", "[", "555", ",", "2", "]", "=", "5", "\n", "v", "[", "556", ",", "2", "]", "=", "3", "\n", "v", "[", "557", ",", "2", "]", "=", "5", "\n", "v", "[", "558", ",", "2", "]", "=", "7", "\n", "v", "[", "559", ",", "2", "]", "=", "3", "\n", "v", "[", "560", ",", "2", "]", "=", "3", "\n", "v", "[", "561", ",", "2", "]", "=", "3", "\n", "v", "[", "562", ",", "2", "]", "=", "5", "\n", "v", "[", "563", ",", "2", "]", "=", "1", "\n", "v", "[", "564", ",", "2", "]", "=", "7", "\n", "v", "[", "565", ",", "2", "]", "=", "7", "\n", "v", "[", "566", ",", "2", "]", "=", "1", "\n", "v", "[", "567", ",", "2", "]", "=", "3", "\n", "v", "[", "568", ",", "2", "]", "=", "1", "\n", "v", "[", "569", ",", "2", "]", "=", "3", "\n", "v", "[", "570", ",", "2", "]", "=", "7", "\n", "v", "[", "571", ",", "2", "]", "=", "7", "\n", "v", "[", "572", ",", "2", "]", "=", "1", "\n", "v", "[", "573", ",", "2", "]", "=", "3", "\n", "v", "[", "574", ",", "2", "]", "=", "7", "\n", "v", "[", "575", ",", "2", "]", "=", "3", "\n", "v", "[", "576", ",", "2", "]", "=", "1", "\n", "v", "[", "577", ",", "2", "]", "=", "5", "\n", "v", "[", "578", ",", "2", "]", "=", "3", "\n", "v", "[", "579", ",", "2", "]", "=", "1", "\n", "v", "[", "580", ",", "2", "]", "=", "1", "\n", "v", "[", "581", ",", "2", "]", "=", "1", "\n", "v", "[", "582", ",", "2", "]", "=", "5", "\n", "v", "[", "583", ",", "2", "]", "=", "3", "\n", "v", "[", "584", ",", "2", "]", "=", "3", "\n", "v", "[", "585", ",", "2", "]", "=", "7", "\n", "v", "[", "586", ",", "2", "]", "=", "1", "\n", "v", "[", "587", ",", "2", "]", "=", "5", "\n", "v", "[", "588", ",", "2", "]", "=", "3", "\n", "v", "[", "589", ",", "2", "]", "=", "5", "\n", "v", "[", "590", ",", "2", "]", "=", "1", "\n", "v", "[", "591", ",", "2", "]", "=", "3", "\n", "v", "[", "592", ",", "2", "]", "=", "1", "\n", "v", "[", "593", ",", "2", "]", "=", "3", "\n", "v", "[", "594", ",", "2", "]", "=", "1", "\n", "v", "[", "595", ",", "2", "]", "=", "5", "\n", "v", "[", "596", ",", "2", "]", "=", "7", "\n", "v", "[", "597", ",", "2", "]", "=", "7", "\n", "v", "[", "598", ",", "2", "]", "=", "1", "\n", "v", "[", "599", ",", "2", "]", "=", "1", "\n", "v", "[", "600", ",", "2", "]", "=", "5", "\n", "v", "[", "601", ",", "2", "]", "=", "3", "\n", "v", "[", "602", ",", "2", "]", "=", "1", "\n", "v", "[", "603", ",", "2", "]", "=", "5", "\n", "v", "[", "604", ",", "2", "]", "=", "1", "\n", "v", "[", "605", ",", "2", "]", "=", "1", "\n", "v", "[", "606", ",", "2", "]", "=", "7", "\n", "v", "[", "607", ",", "2", "]", "=", "7", "\n", "v", "[", "608", ",", "2", "]", "=", "3", "\n", "v", "[", "609", ",", "2", "]", "=", "5", "\n", "v", "[", "610", ",", "2", "]", "=", "5", "\n", "v", "[", "611", ",", "2", "]", "=", "1", "\n", "v", "[", "612", ",", "2", "]", "=", "7", "\n", "v", "[", "613", ",", "2", "]", "=", "1", "\n", "v", "[", "614", ",", "2", "]", "=", "5", "\n", "v", "[", "615", ",", "2", "]", "=", "1", "\n", "v", "[", "616", ",", "2", "]", "=", "1", "\n", "v", "[", "617", ",", "2", "]", "=", "3", "\n", "v", "[", "618", ",", "2", "]", "=", "1", "\n", "v", "[", "619", ",", "2", "]", "=", "5", "\n", "v", "[", "620", ",", "2", "]", "=", "7", "\n", "v", "[", "621", ",", "2", "]", "=", "5", "\n", "v", "[", "622", ",", "2", "]", "=", "7", "\n", "v", "[", "623", ",", "2", "]", "=", "7", "\n", "v", "[", "624", ",", "2", "]", "=", "1", "\n", "v", "[", "625", ",", "2", "]", "=", "5", "\n", "v", "[", "626", ",", "2", "]", "=", "1", "\n", "v", "[", "627", ",", "2", "]", "=", "1", "\n", "v", "[", "628", ",", "2", "]", "=", "3", "\n", "v", "[", "629", ",", "2", "]", "=", "5", "\n", "v", "[", "630", ",", "2", "]", "=", "1", "\n", "v", "[", "631", ",", "2", "]", "=", "5", "\n", "v", "[", "632", ",", "2", "]", "=", "5", "\n", "v", "[", "633", ",", "2", "]", "=", "3", "\n", "v", "[", "634", ",", "2", "]", "=", "1", "\n", "v", "[", "635", ",", "2", "]", "=", "3", "\n", "v", "[", "636", ",", "2", "]", "=", "1", "\n", "v", "[", "637", ",", "2", "]", "=", "5", "\n", "v", "[", "638", ",", "2", "]", "=", "5", "\n", "v", "[", "639", ",", "2", "]", "=", "3", "\n", "v", "[", "640", ",", "2", "]", "=", "3", "\n", "v", "[", "641", ",", "2", "]", "=", "3", "\n", "v", "[", "642", ",", "2", "]", "=", "3", "\n", "v", "[", "643", ",", "2", "]", "=", "1", "\n", "v", "[", "644", ",", "2", "]", "=", "1", "\n", "v", "[", "645", ",", "2", "]", "=", "3", "\n", "v", "[", "646", ",", "2", "]", "=", "1", "\n", "v", "[", "647", ",", "2", "]", "=", "3", "\n", "v", "[", "648", ",", "2", "]", "=", "5", "\n", "v", "[", "649", ",", "2", "]", "=", "5", "\n", "v", "[", "650", ",", "2", "]", "=", "7", "\n", "v", "[", "651", ",", "2", "]", "=", "5", "\n", "v", "[", "652", ",", "2", "]", "=", "5", "\n", "v", "[", "653", ",", "2", "]", "=", "7", "\n", "v", "[", "654", ",", "2", "]", "=", "5", "\n", "v", "[", "655", ",", "2", "]", "=", "7", "\n", "v", "[", "656", ",", "2", "]", "=", "1", "\n", "v", "[", "657", ",", "2", "]", "=", "3", "\n", "v", "[", "658", ",", "2", "]", "=", "7", "\n", "v", "[", "659", ",", "2", "]", "=", "7", "\n", "v", "[", "660", ",", "2", "]", "=", "3", "\n", "v", "[", "661", ",", "2", "]", "=", "5", "\n", "v", "[", "662", ",", "2", "]", "=", "5", "\n", "v", "[", "663", ",", "2", "]", "=", "7", "\n", "v", "[", "664", ",", "2", "]", "=", "5", "\n", "v", "[", "665", ",", "2", "]", "=", "5", "\n", "v", "[", "666", ",", "2", "]", "=", "3", "\n", "v", "[", "667", ",", "2", "]", "=", "3", "\n", "v", "[", "668", ",", "2", "]", "=", "3", "\n", "v", "[", "669", ",", "2", "]", "=", "1", "\n", "v", "[", "670", ",", "2", "]", "=", "7", "\n", "v", "[", "671", ",", "2", "]", "=", "1", "\n", "v", "[", "672", ",", "2", "]", "=", "5", "\n", "v", "[", "673", ",", "2", "]", "=", "5", "\n", "v", "[", "674", ",", "2", "]", "=", "5", "\n", "v", "[", "675", ",", "2", "]", "=", "3", "\n", "v", "[", "676", ",", "2", "]", "=", "3", "\n", "v", "[", "677", ",", "2", "]", "=", "5", "\n", "v", "[", "678", ",", "2", "]", "=", "1", "\n", "v", "[", "679", ",", "2", "]", "=", "3", "\n", "v", "[", "680", ",", "2", "]", "=", "1", "\n", "v", "[", "681", ",", "2", "]", "=", "3", "\n", "v", "[", "682", ",", "2", "]", "=", "3", "\n", "v", "[", "683", ",", "2", "]", "=", "3", "\n", "v", "[", "684", ",", "2", "]", "=", "7", "\n", "v", "[", "685", ",", "2", "]", "=", "1", "\n", "v", "[", "686", ",", "2", "]", "=", "7", "\n", "v", "[", "687", ",", "2", "]", "=", "7", "\n", "v", "[", "688", ",", "2", "]", "=", "3", "\n", "v", "[", "689", ",", "2", "]", "=", "7", "\n", "v", "[", "690", ",", "2", "]", "=", "1", "\n", "v", "[", "691", ",", "2", "]", "=", "1", "\n", "v", "[", "692", ",", "2", "]", "=", "5", "\n", "v", "[", "693", ",", "2", "]", "=", "7", "\n", "v", "[", "694", ",", "2", "]", "=", "1", "\n", "v", "[", "695", ",", "2", "]", "=", "7", "\n", "v", "[", "696", ",", "2", "]", "=", "1", "\n", "v", "[", "697", ",", "2", "]", "=", "7", "\n", "v", "[", "698", ",", "2", "]", "=", "7", "\n", "v", "[", "699", ",", "2", "]", "=", "1", "\n", "v", "[", "700", ",", "2", "]", "=", "3", "\n", "v", "[", "701", ",", "2", "]", "=", "7", "\n", "v", "[", "702", ",", "2", "]", "=", "5", "\n", "v", "[", "703", ",", "2", "]", "=", "1", "\n", "v", "[", "704", ",", "2", "]", "=", "3", "\n", "v", "[", "705", ",", "2", "]", "=", "5", "\n", "v", "[", "706", ",", "2", "]", "=", "5", "\n", "v", "[", "707", ",", "2", "]", "=", "5", "\n", "v", "[", "708", ",", "2", "]", "=", "1", "\n", "v", "[", "709", ",", "2", "]", "=", "1", "\n", "v", "[", "710", ",", "2", "]", "=", "7", "\n", "v", "[", "711", ",", "2", "]", "=", "1", "\n", "v", "[", "712", ",", "2", "]", "=", "7", "\n", "v", "[", "713", ",", "2", "]", "=", "1", "\n", "v", "[", "714", ",", "2", "]", "=", "7", "\n", "v", "[", "715", ",", "2", "]", "=", "7", "\n", "v", "[", "716", ",", "2", "]", "=", "3", "\n", "v", "[", "717", ",", "2", "]", "=", "1", "\n", "v", "[", "718", ",", "2", "]", "=", "1", "\n", "v", "[", "719", ",", "2", "]", "=", "5", "\n", "v", "[", "720", ",", "2", "]", "=", "1", "\n", "v", "[", "721", ",", "2", "]", "=", "5", "\n", "v", "[", "722", ",", "2", "]", "=", "1", "\n", "v", "[", "723", ",", "2", "]", "=", "5", "\n", "v", "[", "724", ",", "2", "]", "=", "3", "\n", "v", "[", "725", ",", "2", "]", "=", "5", "\n", "v", "[", "726", ",", "2", "]", "=", "5", "\n", "v", "[", "727", ",", "2", "]", "=", "5", "\n", "v", "[", "728", ",", "2", "]", "=", "5", "\n", "v", "[", "729", ",", "2", "]", "=", "5", "\n", "v", "[", "730", ",", "2", "]", "=", "3", "\n", "v", "[", "731", ",", "2", "]", "=", "3", "\n", "v", "[", "732", ",", "2", "]", "=", "7", "\n", "v", "[", "733", ",", "2", "]", "=", "3", "\n", "v", "[", "734", ",", "2", "]", "=", "3", "\n", "v", "[", "735", ",", "2", "]", "=", "5", "\n", "v", "[", "736", ",", "2", "]", "=", "5", "\n", "v", "[", "737", ",", "2", "]", "=", "3", "\n", "v", "[", "738", ",", "2", "]", "=", "7", "\n", "v", "[", "739", ",", "2", "]", "=", "1", "\n", "v", "[", "740", ",", "2", "]", "=", "5", "\n", "v", "[", "741", ",", "2", "]", "=", "7", "\n", "v", "[", "742", ",", "2", "]", "=", "5", "\n", "v", "[", "743", ",", "2", "]", "=", "1", "\n", "v", "[", "744", ",", "2", "]", "=", "5", "\n", "v", "[", "745", ",", "2", "]", "=", "5", "\n", "v", "[", "746", ",", "2", "]", "=", "3", "\n", "v", "[", "747", ",", "2", "]", "=", "5", "\n", "v", "[", "748", ",", "2", "]", "=", "5", "\n", "v", "[", "749", ",", "2", "]", "=", "7", "\n", "v", "[", "750", ",", "2", "]", "=", "5", "\n", "v", "[", "751", ",", "2", "]", "=", "3", "\n", "v", "[", "752", ",", "2", "]", "=", "5", "\n", "v", "[", "753", ",", "2", "]", "=", "5", "\n", "v", "[", "754", ",", "2", "]", "=", "5", "\n", "v", "[", "755", ",", "2", "]", "=", "1", "\n", "v", "[", "756", ",", "2", "]", "=", "5", "\n", "v", "[", "757", ",", "2", "]", "=", "5", "\n", "v", "[", "758", ",", "2", "]", "=", "5", "\n", "v", "[", "759", ",", "2", "]", "=", "5", "\n", "v", "[", "760", ",", "2", "]", "=", "1", "\n", "v", "[", "761", ",", "2", "]", "=", "3", "\n", "v", "[", "762", ",", "2", "]", "=", "5", "\n", "v", "[", "763", ",", "2", "]", "=", "3", "\n", "v", "[", "764", ",", "2", "]", "=", "1", "\n", "v", "[", "765", ",", "2", "]", "=", "7", "\n", "v", "[", "766", ",", "2", "]", "=", "5", "\n", "v", "[", "767", ",", "2", "]", "=", "5", "\n", "v", "[", "768", ",", "2", "]", "=", "7", "\n", "v", "[", "769", ",", "2", "]", "=", "1", "\n", "v", "[", "770", ",", "2", "]", "=", "5", "\n", "v", "[", "771", ",", "2", "]", "=", "3", "\n", "v", "[", "772", ",", "2", "]", "=", "3", "\n", "v", "[", "773", ",", "2", "]", "=", "1", "\n", "v", "[", "774", ",", "2", "]", "=", "5", "\n", "v", "[", "775", ",", "2", "]", "=", "3", "\n", "v", "[", "776", ",", "2", "]", "=", "7", "\n", "v", "[", "777", ",", "2", "]", "=", "1", "\n", "v", "[", "778", ",", "2", "]", "=", "7", "\n", "v", "[", "779", ",", "2", "]", "=", "5", "\n", "v", "[", "780", ",", "2", "]", "=", "1", "\n", "v", "[", "781", ",", "2", "]", "=", "1", "\n", "v", "[", "782", ",", "2", "]", "=", "3", "\n", "v", "[", "783", ",", "2", "]", "=", "1", "\n", "v", "[", "784", ",", "2", "]", "=", "1", "\n", "v", "[", "785", ",", "2", "]", "=", "7", "\n", "v", "[", "786", ",", "2", "]", "=", "1", "\n", "v", "[", "787", ",", "2", "]", "=", "5", "\n", "v", "[", "788", ",", "2", "]", "=", "5", "\n", "v", "[", "789", ",", "2", "]", "=", "3", "\n", "v", "[", "790", ",", "2", "]", "=", "7", "\n", "v", "[", "791", ",", "2", "]", "=", "3", "\n", "v", "[", "792", ",", "2", "]", "=", "7", "\n", "v", "[", "793", ",", "2", "]", "=", "5", "\n", "v", "[", "794", ",", "2", "]", "=", "3", "\n", "v", "[", "795", ",", "2", "]", "=", "1", "\n", "v", "[", "796", ",", "2", "]", "=", "1", "\n", "v", "[", "797", ",", "2", "]", "=", "3", "\n", "v", "[", "798", ",", "2", "]", "=", "1", "\n", "v", "[", "799", ",", "2", "]", "=", "3", "\n", "v", "[", "800", ",", "2", "]", "=", "5", "\n", "v", "[", "801", ",", "2", "]", "=", "5", "\n", "v", "[", "802", ",", "2", "]", "=", "7", "\n", "v", "[", "803", ",", "2", "]", "=", "5", "\n", "v", "[", "804", ",", "2", "]", "=", "3", "\n", "v", "[", "805", ",", "2", "]", "=", "7", "\n", "v", "[", "806", ",", "2", "]", "=", "7", "\n", "v", "[", "807", ",", "2", "]", "=", "7", "\n", "v", "[", "808", ",", "2", "]", "=", "3", "\n", "v", "[", "809", ",", "2", "]", "=", "7", "\n", "v", "[", "810", ",", "2", "]", "=", "3", "\n", "v", "[", "811", ",", "2", "]", "=", "7", "\n", "v", "[", "812", ",", "2", "]", "=", "1", "\n", "v", "[", "813", ",", "2", "]", "=", "3", "\n", "v", "[", "814", ",", "2", "]", "=", "1", "\n", "v", "[", "815", ",", "2", "]", "=", "7", "\n", "v", "[", "816", ",", "2", "]", "=", "7", "\n", "v", "[", "817", ",", "2", "]", "=", "1", "\n", "v", "[", "818", ",", "2", "]", "=", "7", "\n", "v", "[", "819", ",", "2", "]", "=", "3", "\n", "v", "[", "820", ",", "2", "]", "=", "7", "\n", "v", "[", "821", ",", "2", "]", "=", "3", "\n", "v", "[", "822", ",", "2", "]", "=", "7", "\n", "v", "[", "823", ",", "2", "]", "=", "3", "\n", "v", "[", "824", ",", "2", "]", "=", "7", "\n", "v", "[", "825", ",", "2", "]", "=", "3", "\n", "v", "[", "826", ",", "2", "]", "=", "5", "\n", "v", "[", "827", ",", "2", "]", "=", "1", "\n", "v", "[", "828", ",", "2", "]", "=", "1", "\n", "v", "[", "829", ",", "2", "]", "=", "7", "\n", "v", "[", "830", ",", "2", "]", "=", "3", "\n", "v", "[", "831", ",", "2", "]", "=", "1", "\n", "v", "[", "832", ",", "2", "]", "=", "5", "\n", "v", "[", "833", ",", "2", "]", "=", "5", "\n", "v", "[", "834", ",", "2", "]", "=", "7", "\n", "v", "[", "835", ",", "2", "]", "=", "1", "\n", "v", "[", "836", ",", "2", "]", "=", "5", "\n", "v", "[", "837", ",", "2", "]", "=", "5", "\n", "v", "[", "838", ",", "2", "]", "=", "5", "\n", "v", "[", "839", ",", "2", "]", "=", "7", "\n", "v", "[", "840", ",", "2", "]", "=", "1", "\n", "v", "[", "841", ",", "2", "]", "=", "5", "\n", "v", "[", "842", ",", "2", "]", "=", "5", "\n", "v", "[", "843", ",", "2", "]", "=", "1", "\n", "v", "[", "844", ",", "2", "]", "=", "5", "\n", "v", "[", "845", ",", "2", "]", "=", "5", "\n", "v", "[", "846", ",", "2", "]", "=", "3", "\n", "v", "[", "847", ",", "2", "]", "=", "1", "\n", "v", "[", "848", ",", "2", "]", "=", "3", "\n", "v", "[", "849", ",", "2", "]", "=", "1", "\n", "v", "[", "850", ",", "2", "]", "=", "7", "\n", "v", "[", "851", ",", "2", "]", "=", "3", "\n", "v", "[", "852", ",", "2", "]", "=", "1", "\n", "v", "[", "853", ",", "2", "]", "=", "3", "\n", "v", "[", "854", ",", "2", "]", "=", "5", "\n", "v", "[", "855", ",", "2", "]", "=", "7", "\n", "v", "[", "856", ",", "2", "]", "=", "7", "\n", "v", "[", "857", ",", "2", "]", "=", "7", "\n", "v", "[", "858", ",", "2", "]", "=", "1", "\n", "v", "[", "859", ",", "2", "]", "=", "1", "\n", "v", "[", "860", ",", "2", "]", "=", "7", "\n", "v", "[", "861", ",", "2", "]", "=", "3", "\n", "v", "[", "862", ",", "2", "]", "=", "1", "\n", "v", "[", "863", ",", "2", "]", "=", "5", "\n", "v", "[", "864", ",", "2", "]", "=", "5", "\n", "v", "[", "865", ",", "2", "]", "=", "5", "\n", "v", "[", "866", ",", "2", "]", "=", "1", "\n", "v", "[", "867", ",", "2", "]", "=", "1", "\n", "v", "[", "868", ",", "2", "]", "=", "1", "\n", "v", "[", "869", ",", "2", "]", "=", "1", "\n", "v", "[", "870", ",", "2", "]", "=", "1", "\n", "v", "[", "871", ",", "2", "]", "=", "5", "\n", "v", "[", "872", ",", "2", "]", "=", "3", "\n", "v", "[", "873", ",", "2", "]", "=", "5", "\n", "v", "[", "874", ",", "2", "]", "=", "1", "\n", "v", "[", "875", ",", "2", "]", "=", "3", "\n", "v", "[", "876", ",", "2", "]", "=", "5", "\n", "v", "[", "877", ",", "2", "]", "=", "3", "\n", "v", "[", "878", ",", "2", "]", "=", "1", "\n", "v", "[", "879", ",", "2", "]", "=", "1", "\n", "v", "[", "880", ",", "2", "]", "=", "1", "\n", "v", "[", "881", ",", "2", "]", "=", "1", "\n", "v", "[", "882", ",", "2", "]", "=", "3", "\n", "v", "[", "883", ",", "2", "]", "=", "7", "\n", "v", "[", "884", ",", "2", "]", "=", "3", "\n", "v", "[", "885", ",", "2", "]", "=", "7", "\n", "v", "[", "886", ",", "2", "]", "=", "5", "\n", "v", "[", "887", ",", "2", "]", "=", "7", "\n", "v", "[", "888", ",", "2", "]", "=", "1", "\n", "v", "[", "889", ",", "2", "]", "=", "5", "\n", "v", "[", "890", ",", "2", "]", "=", "5", "\n", "v", "[", "891", ",", "2", "]", "=", "7", "\n", "v", "[", "892", ",", "2", "]", "=", "5", "\n", "v", "[", "893", ",", "2", "]", "=", "3", "\n", "v", "[", "894", ",", "2", "]", "=", "3", "\n", "v", "[", "895", ",", "2", "]", "=", "7", "\n", "v", "[", "896", ",", "2", "]", "=", "5", "\n", "v", "[", "897", ",", "2", "]", "=", "3", "\n", "v", "[", "898", ",", "2", "]", "=", "1", "\n", "v", "[", "899", ",", "2", "]", "=", "1", "\n", "v", "[", "900", ",", "2", "]", "=", "3", "\n", "v", "[", "901", ",", "2", "]", "=", "1", "\n", "v", "[", "902", ",", "2", "]", "=", "3", "\n", "v", "[", "903", ",", "2", "]", "=", "1", "\n", "v", "[", "904", ",", "2", "]", "=", "1", "\n", "v", "[", "905", ",", "2", "]", "=", "3", "\n", "v", "[", "906", ",", "2", "]", "=", "7", "\n", "v", "[", "907", ",", "2", "]", "=", "1", "\n", "v", "[", "908", ",", "2", "]", "=", "7", "\n", "v", "[", "909", ",", "2", "]", "=", "1", "\n", "v", "[", "910", ",", "2", "]", "=", "1", "\n", "v", "[", "911", ",", "2", "]", "=", "5", "\n", "v", "[", "912", ",", "2", "]", "=", "1", "\n", "v", "[", "913", ",", "2", "]", "=", "7", "\n", "v", "[", "914", ",", "2", "]", "=", "5", "\n", "v", "[", "915", ",", "2", "]", "=", "3", "\n", "v", "[", "916", ",", "2", "]", "=", "7", "\n", "v", "[", "917", ",", "2", "]", "=", "3", "\n", "v", "[", "918", ",", "2", "]", "=", "5", "\n", "v", "[", "919", ",", "2", "]", "=", "3", "\n", "v", "[", "920", ",", "2", "]", "=", "1", "\n", "v", "[", "921", ",", "2", "]", "=", "1", "\n", "v", "[", "922", ",", "2", "]", "=", "5", "\n", "v", "[", "923", ",", "2", "]", "=", "5", "\n", "v", "[", "924", ",", "2", "]", "=", "1", "\n", "v", "[", "925", ",", "2", "]", "=", "7", "\n", "v", "[", "926", ",", "2", "]", "=", "7", "\n", "v", "[", "927", ",", "2", "]", "=", "3", "\n", "v", "[", "928", ",", "2", "]", "=", "7", "\n", "v", "[", "929", ",", "2", "]", "=", "3", "\n", "v", "[", "930", ",", "2", "]", "=", "7", "\n", "v", "[", "931", ",", "2", "]", "=", "1", "\n", "v", "[", "932", ",", "2", "]", "=", "5", "\n", "v", "[", "933", ",", "2", "]", "=", "1", "\n", "v", "[", "934", ",", "2", "]", "=", "5", "\n", "v", "[", "935", ",", "2", "]", "=", "3", "\n", "v", "[", "936", ",", "2", "]", "=", "7", "\n", "v", "[", "937", ",", "2", "]", "=", "3", "\n", "v", "[", "938", ",", "2", "]", "=", "5", "\n", "v", "[", "939", ",", "2", "]", "=", "7", "\n", "v", "[", "940", ",", "2", "]", "=", "7", "\n", "v", "[", "941", ",", "2", "]", "=", "7", "\n", "v", "[", "942", ",", "2", "]", "=", "3", "\n", "v", "[", "943", ",", "2", "]", "=", "3", "\n", "v", "[", "944", ",", "2", "]", "=", "1", "\n", "v", "[", "945", ",", "2", "]", "=", "1", "\n", "v", "[", "946", ",", "2", "]", "=", "5", "\n", "v", "[", "947", ",", "2", "]", "=", "5", "\n", "v", "[", "948", ",", "2", "]", "=", "3", "\n", "v", "[", "949", ",", "2", "]", "=", "7", "\n", "v", "[", "950", ",", "2", "]", "=", "1", "\n", "v", "[", "951", ",", "2", "]", "=", "1", "\n", "v", "[", "952", ",", "2", "]", "=", "1", "\n", "v", "[", "953", ",", "2", "]", "=", "3", "\n", "v", "[", "954", ",", "2", "]", "=", "5", "\n", "v", "[", "955", ",", "2", "]", "=", "3", "\n", "v", "[", "956", ",", "2", "]", "=", "1", "\n", "v", "[", "957", ",", "2", "]", "=", "1", "\n", "v", "[", "958", ",", "2", "]", "=", "3", "\n", "v", "[", "959", ",", "2", "]", "=", "3", "\n", "v", "[", "960", ",", "2", "]", "=", "7", "\n", "v", "[", "961", ",", "2", "]", "=", "5", "\n", "v", "[", "962", ",", "2", "]", "=", "1", "\n", "v", "[", "963", ",", "2", "]", "=", "1", "\n", "v", "[", "964", ",", "2", "]", "=", "3", "\n", "v", "[", "965", ",", "2", "]", "=", "7", "\n", "v", "[", "966", ",", "2", "]", "=", "1", "\n", "v", "[", "967", ",", "2", "]", "=", "5", "\n", "v", "[", "968", ",", "2", "]", "=", "7", "\n", "v", "[", "969", ",", "2", "]", "=", "3", "\n", "v", "[", "970", ",", "2", "]", "=", "7", "\n", "v", "[", "971", ",", "2", "]", "=", "5", "\n", "v", "[", "972", ",", "2", "]", "=", "5", "\n", "v", "[", "973", ",", "2", "]", "=", "7", "\n", "v", "[", "974", ",", "2", "]", "=", "3", "\n", "v", "[", "975", ",", "2", "]", "=", "5", "\n", "v", "[", "976", ",", "2", "]", "=", "3", "\n", "v", "[", "977", ",", "2", "]", "=", "1", "\n", "v", "[", "978", ",", "2", "]", "=", "5", "\n", "v", "[", "979", ",", "2", "]", "=", "3", "\n", "v", "[", "980", ",", "2", "]", "=", "1", "\n", "v", "[", "981", ",", "2", "]", "=", "1", "\n", "v", "[", "982", ",", "2", "]", "=", "7", "\n", "v", "[", "983", ",", "2", "]", "=", "5", "\n", "v", "[", "984", ",", "2", "]", "=", "1", "\n", "v", "[", "985", ",", "2", "]", "=", "7", "\n", "v", "[", "986", ",", "2", "]", "=", "3", "\n", "v", "[", "987", ",", "2", "]", "=", "7", "\n", "v", "[", "988", ",", "2", "]", "=", "5", "\n", "v", "[", "989", ",", "2", "]", "=", "1", "\n", "v", "[", "990", ",", "2", "]", "=", "7", "\n", "v", "[", "991", ",", "2", "]", "=", "1", "\n", "v", "[", "992", ",", "2", "]", "=", "7", "\n", "v", "[", "993", ",", "2", "]", "=", "7", "\n", "v", "[", "994", ",", "2", "]", "=", "1", "\n", "v", "[", "995", ",", "2", "]", "=", "1", "\n", "v", "[", "996", ",", "2", "]", "=", "7", "\n", "v", "[", "997", ",", "2", "]", "=", "1", "\n", "v", "[", "998", ",", "2", "]", "=", "5", "\n", "v", "[", "999", ",", "2", "]", "=", "5", "\n", "v", "[", "1000", ",", "2", "]", "=", "1", "\n", "v", "[", "1001", ",", "2", "]", "=", "1", "\n", "v", "[", "1002", ",", "2", "]", "=", "7", "\n", "v", "[", "1003", ",", "2", "]", "=", "5", "\n", "v", "[", "1004", ",", "2", "]", "=", "7", "\n", "v", "[", "1005", ",", "2", "]", "=", "1", "\n", "v", "[", "1006", ",", "2", "]", "=", "5", "\n", "v", "[", "1007", ",", "2", "]", "=", "3", "\n", "v", "[", "1008", ",", "2", "]", "=", "5", "\n", "v", "[", "1009", ",", "2", "]", "=", "3", "\n", "v", "[", "1010", ",", "2", "]", "=", "3", "\n", "v", "[", "1011", ",", "2", "]", "=", "7", "\n", "v", "[", "1012", ",", "2", "]", "=", "1", "\n", "v", "[", "1013", ",", "2", "]", "=", "5", "\n", "v", "[", "1014", ",", "2", "]", "=", "1", "\n", "v", "[", "1015", ",", "2", "]", "=", "1", "\n", "v", "[", "1016", ",", "2", "]", "=", "5", "\n", "v", "[", "1017", ",", "2", "]", "=", "5", "\n", "v", "[", "1018", ",", "2", "]", "=", "3", "\n", "v", "[", "1019", ",", "2", "]", "=", "3", "\n", "v", "[", "1020", ",", "2", "]", "=", "7", "\n", "v", "[", "1021", ",", "2", "]", "=", "5", "\n", "v", "[", "1022", ",", "2", "]", "=", "5", "\n", "v", "[", "1023", ",", "2", "]", "=", "1", "\n", "v", "[", "1024", ",", "2", "]", "=", "1", "\n", "v", "[", "1025", ",", "2", "]", "=", "1", "\n", "v", "[", "1026", ",", "2", "]", "=", "3", "\n", "v", "[", "1027", ",", "2", "]", "=", "1", "\n", "v", "[", "1028", ",", "2", "]", "=", "5", "\n", "v", "[", "1029", ",", "2", "]", "=", "7", "\n", "v", "[", "1030", ",", "2", "]", "=", "7", "\n", "v", "[", "1031", ",", "2", "]", "=", "1", "\n", "v", "[", "1032", ",", "2", "]", "=", "7", "\n", "v", "[", "1033", ",", "2", "]", "=", "5", "\n", "v", "[", "1034", ",", "2", "]", "=", "7", "\n", "v", "[", "1035", ",", "2", "]", "=", "3", "\n", "v", "[", "1036", ",", "2", "]", "=", "7", "\n", "v", "[", "1037", ",", "2", "]", "=", "3", "\n", "v", "[", "1038", ",", "2", "]", "=", "1", "\n", "v", "[", "1039", ",", "2", "]", "=", "3", "\n", "v", "[", "1040", ",", "2", "]", "=", "7", "\n", "v", "[", "1041", ",", "2", "]", "=", "3", "\n", "v", "[", "1042", ",", "2", "]", "=", "1", "\n", "v", "[", "1043", ",", "2", "]", "=", "5", "\n", "v", "[", "1044", ",", "2", "]", "=", "5", "\n", "v", "[", "1045", ",", "2", "]", "=", "3", "\n", "v", "[", "1046", ",", "2", "]", "=", "5", "\n", "v", "[", "1047", ",", "2", "]", "=", "1", "\n", "v", "[", "1048", ",", "2", "]", "=", "3", "\n", "v", "[", "1049", ",", "2", "]", "=", "5", "\n", "v", "[", "1050", ",", "2", "]", "=", "5", "\n", "v", "[", "1051", ",", "2", "]", "=", "5", "\n", "v", "[", "1052", ",", "2", "]", "=", "1", "\n", "v", "[", "1053", ",", "2", "]", "=", "1", "\n", "v", "[", "1054", ",", "2", "]", "=", "7", "\n", "v", "[", "1055", ",", "2", "]", "=", "7", "\n", "v", "[", "1056", ",", "2", "]", "=", "1", "\n", "v", "[", "1057", ",", "2", "]", "=", "5", "\n", "v", "[", "1058", ",", "2", "]", "=", "5", "\n", "v", "[", "1059", ",", "2", "]", "=", "1", "\n", "v", "[", "1060", ",", "2", "]", "=", "3", "\n", "v", "[", "1061", ",", "2", "]", "=", "5", "\n", "v", "[", "1062", ",", "2", "]", "=", "1", "\n", "v", "[", "1063", ",", "2", "]", "=", "5", "\n", "v", "[", "1064", ",", "2", "]", "=", "3", "\n", "v", "[", "1065", ",", "2", "]", "=", "5", "\n", "v", "[", "1066", ",", "2", "]", "=", "3", "\n", "v", "[", "1067", ",", "2", "]", "=", "3", "\n", "v", "[", "1068", ",", "2", "]", "=", "7", "\n", "v", "[", "1069", ",", "2", "]", "=", "5", "\n", "v", "[", "1070", ",", "2", "]", "=", "7", "\n", "v", "[", "1071", ",", "2", "]", "=", "3", "\n", "v", "[", "1072", ",", "2", "]", "=", "7", "\n", "v", "[", "1073", ",", "2", "]", "=", "3", "\n", "v", "[", "1074", ",", "2", "]", "=", "1", "\n", "v", "[", "1075", ",", "2", "]", "=", "3", "\n", "v", "[", "1076", ",", "2", "]", "=", "7", "\n", "v", "[", "1077", ",", "2", "]", "=", "7", "\n", "v", "[", "1078", ",", "2", "]", "=", "3", "\n", "v", "[", "1079", ",", "2", "]", "=", "3", "\n", "v", "[", "1080", ",", "2", "]", "=", "1", "\n", "v", "[", "1081", ",", "2", "]", "=", "1", "\n", "v", "[", "1082", ",", "2", "]", "=", "3", "\n", "v", "[", "1083", ",", "2", "]", "=", "3", "\n", "v", "[", "1084", ",", "2", "]", "=", "3", "\n", "v", "[", "1085", ",", "2", "]", "=", "3", "\n", "v", "[", "1086", ",", "2", "]", "=", "3", "\n", "v", "[", "1087", ",", "2", "]", "=", "5", "\n", "v", "[", "1088", ",", "2", "]", "=", "5", "\n", "v", "[", "1089", ",", "2", "]", "=", "3", "\n", "v", "[", "1090", ",", "2", "]", "=", "3", "\n", "v", "[", "1091", ",", "2", "]", "=", "3", "\n", "v", "[", "1092", ",", "2", "]", "=", "1", "\n", "v", "[", "1093", ",", "2", "]", "=", "3", "\n", "v", "[", "1094", ",", "2", "]", "=", "5", "\n", "v", "[", "1095", ",", "2", "]", "=", "7", "\n", "v", "[", "1096", ",", "2", "]", "=", "7", "\n", "v", "[", "1097", ",", "2", "]", "=", "1", "\n", "v", "[", "1098", ",", "2", "]", "=", "5", "\n", "v", "[", "1099", ",", "2", "]", "=", "7", "\n", "v", "[", "1100", ",", "2", "]", "=", "3", "\n", "v", "[", "1101", ",", "2", "]", "=", "7", "\n", "v", "[", "1102", ",", "2", "]", "=", "1", "\n", "v", "[", "1103", ",", "2", "]", "=", "1", "\n", "v", "[", "1104", ",", "2", "]", "=", "3", "\n", "v", "[", "1105", ",", "2", "]", "=", "5", "\n", "v", "[", "1106", ",", "2", "]", "=", "7", "\n", "v", "[", "1107", ",", "2", "]", "=", "5", "\n", "v", "[", "1108", ",", "2", "]", "=", "3", "\n", "v", "[", "1109", ",", "2", "]", "=", "3", "\n", "v", "[", "1110", ",", "2", "]", "=", "3", "\n", "\n", "v", "[", "5", ",", "3", "]", "=", "1", "\n", "v", "[", "6", ",", "3", "]", "=", "7", "\n", "v", "[", "7", ",", "3", "]", "=", "9", "\n", "v", "[", "8", ",", "3", "]", "=", "13", "\n", "v", "[", "9", ",", "3", "]", "=", "11", "\n", "v", "[", "10", ",", "3", "]", "=", "1", "\n", "v", "[", "11", ",", "3", "]", "=", "3", "\n", "v", "[", "12", ",", "3", "]", "=", "7", "\n", "v", "[", "13", ",", "3", "]", "=", "9", "\n", "v", "[", "14", ",", "3", "]", "=", "5", "\n", "v", "[", "15", ",", "3", "]", "=", "13", "\n", "v", "[", "16", ",", "3", "]", "=", "13", "\n", "v", "[", "17", ",", "3", "]", "=", "11", "\n", "v", "[", "18", ",", "3", "]", "=", "3", "\n", "v", "[", "19", ",", "3", "]", "=", "15", "\n", "v", "[", "20", ",", "3", "]", "=", "5", "\n", "v", "[", "21", ",", "3", "]", "=", "3", "\n", "v", "[", "22", ",", "3", "]", "=", "15", "\n", "v", "[", "23", ",", "3", "]", "=", "7", "\n", "v", "[", "24", ",", "3", "]", "=", "9", "\n", "v", "[", "25", ",", "3", "]", "=", "13", "\n", "v", "[", "26", ",", "3", "]", "=", "9", "\n", "v", "[", "27", ",", "3", "]", "=", "1", "\n", "v", "[", "28", ",", "3", "]", "=", "11", "\n", "v", "[", "29", ",", "3", "]", "=", "7", "\n", "v", "[", "30", ",", "3", "]", "=", "5", "\n", "v", "[", "31", ",", "3", "]", "=", "15", "\n", "v", "[", "32", ",", "3", "]", "=", "1", "\n", "v", "[", "33", ",", "3", "]", "=", "15", "\n", "v", "[", "34", ",", "3", "]", "=", "11", "\n", "v", "[", "35", ",", "3", "]", "=", "5", "\n", "v", "[", "36", ",", "3", "]", "=", "11", "\n", "v", "[", "37", ",", "3", "]", "=", "1", "\n", "v", "[", "38", ",", "3", "]", "=", "7", "\n", "v", "[", "39", ",", "3", "]", "=", "9", "\n", "v", "[", "40", ",", "3", "]", "=", "7", "\n", "v", "[", "41", ",", "3", "]", "=", "7", "\n", "v", "[", "42", ",", "3", "]", "=", "1", "\n", "v", "[", "43", ",", "3", "]", "=", "15", "\n", "v", "[", "44", ",", "3", "]", "=", "15", "\n", "v", "[", "45", ",", "3", "]", "=", "15", "\n", "v", "[", "46", ",", "3", "]", "=", "13", "\n", "v", "[", "47", ",", "3", "]", "=", "3", "\n", "v", "[", "48", ",", "3", "]", "=", "3", "\n", "v", "[", "49", ",", "3", "]", "=", "15", "\n", "v", "[", "50", ",", "3", "]", "=", "5", "\n", "v", "[", "51", ",", "3", "]", "=", "9", "\n", "v", "[", "52", ",", "3", "]", "=", "7", "\n", "v", "[", "53", ",", "3", "]", "=", "13", "\n", "v", "[", "54", ",", "3", "]", "=", "3", "\n", "v", "[", "55", ",", "3", "]", "=", "7", "\n", "v", "[", "56", ",", "3", "]", "=", "5", "\n", "v", "[", "57", ",", "3", "]", "=", "11", "\n", "v", "[", "58", ",", "3", "]", "=", "9", "\n", "v", "[", "59", ",", "3", "]", "=", "1", "\n", "v", "[", "60", ",", "3", "]", "=", "9", "\n", "v", "[", "61", ",", "3", "]", "=", "1", "\n", "v", "[", "62", ",", "3", "]", "=", "5", "\n", "v", "[", "63", ",", "3", "]", "=", "7", "\n", "v", "[", "64", ",", "3", "]", "=", "13", "\n", "v", "[", "65", ",", "3", "]", "=", "9", "\n", "v", "[", "66", ",", "3", "]", "=", "9", "\n", "v", "[", "67", ",", "3", "]", "=", "1", "\n", "v", "[", "68", ",", "3", "]", "=", "7", "\n", "v", "[", "69", ",", "3", "]", "=", "3", "\n", "v", "[", "70", ",", "3", "]", "=", "5", "\n", "v", "[", "71", ",", "3", "]", "=", "1", "\n", "v", "[", "72", ",", "3", "]", "=", "11", "\n", "v", "[", "73", ",", "3", "]", "=", "11", "\n", "v", "[", "74", ",", "3", "]", "=", "13", "\n", "v", "[", "75", ",", "3", "]", "=", "7", "\n", "v", "[", "76", ",", "3", "]", "=", "7", "\n", "v", "[", "77", ",", "3", "]", "=", "9", "\n", "v", "[", "78", ",", "3", "]", "=", "9", "\n", "v", "[", "79", ",", "3", "]", "=", "1", "\n", "v", "[", "80", ",", "3", "]", "=", "1", "\n", "v", "[", "81", ",", "3", "]", "=", "3", "\n", "v", "[", "82", ",", "3", "]", "=", "9", "\n", "v", "[", "83", ",", "3", "]", "=", "15", "\n", "v", "[", "84", ",", "3", "]", "=", "1", "\n", "v", "[", "85", ",", "3", "]", "=", "5", "\n", "v", "[", "86", ",", "3", "]", "=", "13", "\n", "v", "[", "87", ",", "3", "]", "=", "1", "\n", "v", "[", "88", ",", "3", "]", "=", "9", "\n", "v", "[", "89", ",", "3", "]", "=", "9", "\n", "v", "[", "90", ",", "3", "]", "=", "9", "\n", "v", "[", "91", ",", "3", "]", "=", "9", "\n", "v", "[", "92", ",", "3", "]", "=", "9", "\n", "v", "[", "93", ",", "3", "]", "=", "13", "\n", "v", "[", "94", ",", "3", "]", "=", "11", "\n", "v", "[", "95", ",", "3", "]", "=", "3", "\n", "v", "[", "96", ",", "3", "]", "=", "5", "\n", "v", "[", "97", ",", "3", "]", "=", "11", "\n", "v", "[", "98", ",", "3", "]", "=", "11", "\n", "v", "[", "99", ",", "3", "]", "=", "13", "\n", "v", "[", "100", ",", "3", "]", "=", "5", "\n", "v", "[", "101", ",", "3", "]", "=", "3", "\n", "v", "[", "102", ",", "3", "]", "=", "15", "\n", "v", "[", "103", ",", "3", "]", "=", "1", "\n", "v", "[", "104", ",", "3", "]", "=", "11", "\n", "v", "[", "105", ",", "3", "]", "=", "11", "\n", "v", "[", "106", ",", "3", "]", "=", "7", "\n", "v", "[", "107", ",", "3", "]", "=", "13", "\n", "v", "[", "108", ",", "3", "]", "=", "15", "\n", "v", "[", "109", ",", "3", "]", "=", "11", "\n", "v", "[", "110", ",", "3", "]", "=", "13", "\n", "v", "[", "111", ",", "3", "]", "=", "9", "\n", "v", "[", "112", ",", "3", "]", "=", "11", "\n", "v", "[", "113", ",", "3", "]", "=", "15", "\n", "v", "[", "114", ",", "3", "]", "=", "15", "\n", "v", "[", "115", ",", "3", "]", "=", "13", "\n", "v", "[", "116", ",", "3", "]", "=", "3", "\n", "v", "[", "117", ",", "3", "]", "=", "15", "\n", "v", "[", "118", ",", "3", "]", "=", "7", "\n", "v", "[", "119", ",", "3", "]", "=", "9", "\n", "v", "[", "120", ",", "3", "]", "=", "11", "\n", "v", "[", "121", ",", "3", "]", "=", "13", "\n", "v", "[", "122", ",", "3", "]", "=", "11", "\n", "v", "[", "123", ",", "3", "]", "=", "9", "\n", "v", "[", "124", ",", "3", "]", "=", "9", "\n", "v", "[", "125", ",", "3", "]", "=", "5", "\n", "v", "[", "126", ",", "3", "]", "=", "13", "\n", "v", "[", "127", ",", "3", "]", "=", "9", "\n", "v", "[", "128", ",", "3", "]", "=", "1", "\n", "v", "[", "129", ",", "3", "]", "=", "13", "\n", "v", "[", "130", ",", "3", "]", "=", "7", "\n", "v", "[", "131", ",", "3", "]", "=", "7", "\n", "v", "[", "132", ",", "3", "]", "=", "7", "\n", "v", "[", "133", ",", "3", "]", "=", "7", "\n", "v", "[", "134", ",", "3", "]", "=", "7", "\n", "v", "[", "135", ",", "3", "]", "=", "5", "\n", "v", "[", "136", ",", "3", "]", "=", "9", "\n", "v", "[", "137", ",", "3", "]", "=", "7", "\n", "v", "[", "138", ",", "3", "]", "=", "13", "\n", "v", "[", "139", ",", "3", "]", "=", "11", "\n", "v", "[", "140", ",", "3", "]", "=", "9", "\n", "v", "[", "141", ",", "3", "]", "=", "11", "\n", "v", "[", "142", ",", "3", "]", "=", "15", "\n", "v", "[", "143", ",", "3", "]", "=", "3", "\n", "v", "[", "144", ",", "3", "]", "=", "13", "\n", "v", "[", "145", ",", "3", "]", "=", "11", "\n", "v", "[", "146", ",", "3", "]", "=", "1", "\n", "v", "[", "147", ",", "3", "]", "=", "11", "\n", "v", "[", "148", ",", "3", "]", "=", "3", "\n", "v", "[", "149", ",", "3", "]", "=", "3", "\n", "v", "[", "150", ",", "3", "]", "=", "9", "\n", "v", "[", "151", ",", "3", "]", "=", "11", "\n", "v", "[", "152", ",", "3", "]", "=", "1", "\n", "v", "[", "153", ",", "3", "]", "=", "7", "\n", "v", "[", "154", ",", "3", "]", "=", "1", "\n", "v", "[", "155", ",", "3", "]", "=", "15", "\n", "v", "[", "156", ",", "3", "]", "=", "15", "\n", "v", "[", "157", ",", "3", "]", "=", "3", "\n", "v", "[", "158", ",", "3", "]", "=", "1", "\n", "v", "[", "159", ",", "3", "]", "=", "9", "\n", "v", "[", "160", ",", "3", "]", "=", "1", "\n", "v", "[", "161", ",", "3", "]", "=", "7", "\n", "v", "[", "162", ",", "3", "]", "=", "13", "\n", "v", "[", "163", ",", "3", "]", "=", "11", "\n", "v", "[", "164", ",", "3", "]", "=", "3", "\n", "v", "[", "165", ",", "3", "]", "=", "13", "\n", "v", "[", "166", ",", "3", "]", "=", "11", "\n", "v", "[", "167", ",", "3", "]", "=", "7", "\n", "v", "[", "168", ",", "3", "]", "=", "3", "\n", "v", "[", "169", ",", "3", "]", "=", "3", "\n", "v", "[", "170", ",", "3", "]", "=", "5", "\n", "v", "[", "171", ",", "3", "]", "=", "13", "\n", "v", "[", "172", ",", "3", "]", "=", "11", "\n", "v", "[", "173", ",", "3", "]", "=", "5", "\n", "v", "[", "174", ",", "3", "]", "=", "11", "\n", "v", "[", "175", ",", "3", "]", "=", "1", "\n", "v", "[", "176", ",", "3", "]", "=", "3", "\n", "v", "[", "177", ",", "3", "]", "=", "9", "\n", "v", "[", "178", ",", "3", "]", "=", "7", "\n", "v", "[", "179", ",", "3", "]", "=", "15", "\n", "v", "[", "180", ",", "3", "]", "=", "7", "\n", "v", "[", "181", ",", "3", "]", "=", "5", "\n", "v", "[", "182", ",", "3", "]", "=", "13", "\n", "v", "[", "183", ",", "3", "]", "=", "7", "\n", "v", "[", "184", ",", "3", "]", "=", "9", "\n", "v", "[", "185", ",", "3", "]", "=", "13", "\n", "v", "[", "186", ",", "3", "]", "=", "15", "\n", "v", "[", "187", ",", "3", "]", "=", "13", "\n", "v", "[", "188", ",", "3", "]", "=", "9", "\n", "v", "[", "189", ",", "3", "]", "=", "7", "\n", "v", "[", "190", ",", "3", "]", "=", "15", "\n", "v", "[", "191", ",", "3", "]", "=", "7", "\n", "v", "[", "192", ",", "3", "]", "=", "9", "\n", "v", "[", "193", ",", "3", "]", "=", "5", "\n", "v", "[", "194", ",", "3", "]", "=", "11", "\n", "v", "[", "195", ",", "3", "]", "=", "11", "\n", "v", "[", "196", ",", "3", "]", "=", "13", "\n", "v", "[", "197", ",", "3", "]", "=", "13", "\n", "v", "[", "198", ",", "3", "]", "=", "9", "\n", "v", "[", "199", ",", "3", "]", "=", "3", "\n", "v", "[", "200", ",", "3", "]", "=", "5", "\n", "v", "[", "201", ",", "3", "]", "=", "13", "\n", "v", "[", "202", ",", "3", "]", "=", "9", "\n", "v", "[", "203", ",", "3", "]", "=", "11", "\n", "v", "[", "204", ",", "3", "]", "=", "15", "\n", "v", "[", "205", ",", "3", "]", "=", "11", "\n", "v", "[", "206", ",", "3", "]", "=", "7", "\n", "v", "[", "207", ",", "3", "]", "=", "1", "\n", "v", "[", "208", ",", "3", "]", "=", "7", "\n", "v", "[", "209", ",", "3", "]", "=", "13", "\n", "v", "[", "210", ",", "3", "]", "=", "3", "\n", "v", "[", "211", ",", "3", "]", "=", "13", "\n", "v", "[", "212", ",", "3", "]", "=", "3", "\n", "v", "[", "213", ",", "3", "]", "=", "13", "\n", "v", "[", "214", ",", "3", "]", "=", "9", "\n", "v", "[", "215", ",", "3", "]", "=", "15", "\n", "v", "[", "216", ",", "3", "]", "=", "7", "\n", "v", "[", "217", ",", "3", "]", "=", "13", "\n", "v", "[", "218", ",", "3", "]", "=", "13", "\n", "v", "[", "219", ",", "3", "]", "=", "3", "\n", "v", "[", "220", ",", "3", "]", "=", "13", "\n", "v", "[", "221", ",", "3", "]", "=", "15", "\n", "v", "[", "222", ",", "3", "]", "=", "15", "\n", "v", "[", "223", ",", "3", "]", "=", "11", "\n", "v", "[", "224", ",", "3", "]", "=", "9", "\n", "v", "[", "225", ",", "3", "]", "=", "13", "\n", "v", "[", "226", ",", "3", "]", "=", "9", "\n", "v", "[", "227", ",", "3", "]", "=", "15", "\n", "v", "[", "228", ",", "3", "]", "=", "1", "\n", "v", "[", "229", ",", "3", "]", "=", "1", "\n", "v", "[", "230", ",", "3", "]", "=", "15", "\n", "v", "[", "231", ",", "3", "]", "=", "11", "\n", "v", "[", "232", ",", "3", "]", "=", "11", "\n", "v", "[", "233", ",", "3", "]", "=", "7", "\n", "v", "[", "234", ",", "3", "]", "=", "1", "\n", "v", "[", "235", ",", "3", "]", "=", "11", "\n", "v", "[", "236", ",", "3", "]", "=", "13", "\n", "v", "[", "237", ",", "3", "]", "=", "9", "\n", "v", "[", "238", ",", "3", "]", "=", "13", "\n", "v", "[", "239", ",", "3", "]", "=", "3", "\n", "v", "[", "240", ",", "3", "]", "=", "5", "\n", "v", "[", "241", ",", "3", "]", "=", "11", "\n", "v", "[", "242", ",", "3", "]", "=", "13", "\n", "v", "[", "243", ",", "3", "]", "=", "9", "\n", "v", "[", "244", ",", "3", "]", "=", "9", "\n", "v", "[", "245", ",", "3", "]", "=", "13", "\n", "v", "[", "246", ",", "3", "]", "=", "1", "\n", "v", "[", "247", ",", "3", "]", "=", "11", "\n", "v", "[", "248", ",", "3", "]", "=", "15", "\n", "v", "[", "249", ",", "3", "]", "=", "13", "\n", "v", "[", "250", ",", "3", "]", "=", "3", "\n", "v", "[", "251", ",", "3", "]", "=", "13", "\n", "v", "[", "252", ",", "3", "]", "=", "7", "\n", "v", "[", "253", ",", "3", "]", "=", "15", "\n", "v", "[", "254", ",", "3", "]", "=", "1", "\n", "v", "[", "255", ",", "3", "]", "=", "15", "\n", "v", "[", "256", ",", "3", "]", "=", "3", "\n", "v", "[", "257", ",", "3", "]", "=", "3", "\n", "v", "[", "258", ",", "3", "]", "=", "11", "\n", "v", "[", "259", ",", "3", "]", "=", "7", "\n", "v", "[", "260", ",", "3", "]", "=", "13", "\n", "v", "[", "261", ",", "3", "]", "=", "7", "\n", "v", "[", "262", ",", "3", "]", "=", "7", "\n", "v", "[", "263", ",", "3", "]", "=", "9", "\n", "v", "[", "264", ",", "3", "]", "=", "7", "\n", "v", "[", "265", ",", "3", "]", "=", "5", "\n", "v", "[", "266", ",", "3", "]", "=", "15", "\n", "v", "[", "267", ",", "3", "]", "=", "9", "\n", "v", "[", "268", ",", "3", "]", "=", "5", "\n", "v", "[", "269", ",", "3", "]", "=", "5", "\n", "v", "[", "270", ",", "3", "]", "=", "7", "\n", "v", "[", "271", ",", "3", "]", "=", "15", "\n", "v", "[", "272", ",", "3", "]", "=", "13", "\n", "v", "[", "273", ",", "3", "]", "=", "15", "\n", "v", "[", "274", ",", "3", "]", "=", "5", "\n", "v", "[", "275", ",", "3", "]", "=", "15", "\n", "v", "[", "276", ",", "3", "]", "=", "5", "\n", "v", "[", "277", ",", "3", "]", "=", "3", "\n", "v", "[", "278", ",", "3", "]", "=", "1", "\n", "v", "[", "279", ",", "3", "]", "=", "11", "\n", "v", "[", "280", ",", "3", "]", "=", "7", "\n", "v", "[", "281", ",", "3", "]", "=", "1", "\n", "v", "[", "282", ",", "3", "]", "=", "5", "\n", "v", "[", "283", ",", "3", "]", "=", "7", "\n", "v", "[", "284", ",", "3", "]", "=", "9", "\n", "v", "[", "285", ",", "3", "]", "=", "3", "\n", "v", "[", "286", ",", "3", "]", "=", "11", "\n", "v", "[", "287", ",", "3", "]", "=", "1", "\n", "v", "[", "288", ",", "3", "]", "=", "15", "\n", "v", "[", "289", ",", "3", "]", "=", "1", "\n", "v", "[", "290", ",", "3", "]", "=", "3", "\n", "v", "[", "291", ",", "3", "]", "=", "15", "\n", "v", "[", "292", ",", "3", "]", "=", "11", "\n", "v", "[", "293", ",", "3", "]", "=", "13", "\n", "v", "[", "294", ",", "3", "]", "=", "5", "\n", "v", "[", "295", ",", "3", "]", "=", "13", "\n", "v", "[", "296", ",", "3", "]", "=", "1", "\n", "v", "[", "297", ",", "3", "]", "=", "7", "\n", "v", "[", "298", ",", "3", "]", "=", "1", "\n", "v", "[", "299", ",", "3", "]", "=", "15", "\n", "v", "[", "300", ",", "3", "]", "=", "7", "\n", "v", "[", "301", ",", "3", "]", "=", "5", "\n", "v", "[", "302", ",", "3", "]", "=", "1", "\n", "v", "[", "303", ",", "3", "]", "=", "1", "\n", "v", "[", "304", ",", "3", "]", "=", "15", "\n", "v", "[", "305", ",", "3", "]", "=", "13", "\n", "v", "[", "306", ",", "3", "]", "=", "11", "\n", "v", "[", "307", ",", "3", "]", "=", "11", "\n", "v", "[", "308", ",", "3", "]", "=", "13", "\n", "v", "[", "309", ",", "3", "]", "=", "5", "\n", "v", "[", "310", ",", "3", "]", "=", "11", "\n", "v", "[", "311", ",", "3", "]", "=", "7", "\n", "v", "[", "312", ",", "3", "]", "=", "9", "\n", "v", "[", "313", ",", "3", "]", "=", "7", "\n", "v", "[", "314", ",", "3", "]", "=", "1", "\n", "v", "[", "315", ",", "3", "]", "=", "5", "\n", "v", "[", "316", ",", "3", "]", "=", "3", "\n", "v", "[", "317", ",", "3", "]", "=", "9", "\n", "v", "[", "318", ",", "3", "]", "=", "5", "\n", "v", "[", "319", ",", "3", "]", "=", "5", "\n", "v", "[", "320", ",", "3", "]", "=", "11", "\n", "v", "[", "321", ",", "3", "]", "=", "5", "\n", "v", "[", "322", ",", "3", "]", "=", "1", "\n", "v", "[", "323", ",", "3", "]", "=", "7", "\n", "v", "[", "324", ",", "3", "]", "=", "1", "\n", "v", "[", "325", ",", "3", "]", "=", "11", "\n", "v", "[", "326", ",", "3", "]", "=", "7", "\n", "v", "[", "327", ",", "3", "]", "=", "9", "\n", "v", "[", "328", ",", "3", "]", "=", "13", "\n", "v", "[", "329", ",", "3", "]", "=", "15", "\n", "v", "[", "330", ",", "3", "]", "=", "13", "\n", "v", "[", "331", ",", "3", "]", "=", "3", "\n", "v", "[", "332", ",", "3", "]", "=", "1", "\n", "v", "[", "333", ",", "3", "]", "=", "11", "\n", "v", "[", "334", ",", "3", "]", "=", "13", "\n", "v", "[", "335", ",", "3", "]", "=", "15", "\n", "v", "[", "336", ",", "3", "]", "=", "1", "\n", "v", "[", "337", ",", "3", "]", "=", "1", "\n", "v", "[", "338", ",", "3", "]", "=", "11", "\n", "v", "[", "339", ",", "3", "]", "=", "9", "\n", "v", "[", "340", ",", "3", "]", "=", "13", "\n", "v", "[", "341", ",", "3", "]", "=", "3", "\n", "v", "[", "342", ",", "3", "]", "=", "13", "\n", "v", "[", "343", ",", "3", "]", "=", "11", "\n", "v", "[", "344", ",", "3", "]", "=", "15", "\n", "v", "[", "345", ",", "3", "]", "=", "13", "\n", "v", "[", "346", ",", "3", "]", "=", "9", "\n", "v", "[", "347", ",", "3", "]", "=", "9", "\n", "v", "[", "348", ",", "3", "]", "=", "9", "\n", "v", "[", "349", ",", "3", "]", "=", "5", "\n", "v", "[", "350", ",", "3", "]", "=", "5", "\n", "v", "[", "351", ",", "3", "]", "=", "5", "\n", "v", "[", "352", ",", "3", "]", "=", "5", "\n", "v", "[", "353", ",", "3", "]", "=", "1", "\n", "v", "[", "354", ",", "3", "]", "=", "15", "\n", "v", "[", "355", ",", "3", "]", "=", "5", "\n", "v", "[", "356", ",", "3", "]", "=", "9", "\n", "v", "[", "357", ",", "3", "]", "=", "11", "\n", "v", "[", "358", ",", "3", "]", "=", "7", "\n", "v", "[", "359", ",", "3", "]", "=", "15", "\n", "v", "[", "360", ",", "3", "]", "=", "5", "\n", "v", "[", "361", ",", "3", "]", "=", "3", "\n", "v", "[", "362", ",", "3", "]", "=", "13", "\n", "v", "[", "363", ",", "3", "]", "=", "5", "\n", "v", "[", "364", ",", "3", "]", "=", "3", "\n", "v", "[", "365", ",", "3", "]", "=", "11", "\n", "v", "[", "366", ",", "3", "]", "=", "5", "\n", "v", "[", "367", ",", "3", "]", "=", "1", "\n", "v", "[", "368", ",", "3", "]", "=", "11", "\n", "v", "[", "369", ",", "3", "]", "=", "13", "\n", "v", "[", "370", ",", "3", "]", "=", "9", "\n", "v", "[", "371", ",", "3", "]", "=", "11", "\n", "v", "[", "372", ",", "3", "]", "=", "3", "\n", "v", "[", "373", ",", "3", "]", "=", "7", "\n", "v", "[", "374", ",", "3", "]", "=", "13", "\n", "v", "[", "375", ",", "3", "]", "=", "15", "\n", "v", "[", "376", ",", "3", "]", "=", "1", "\n", "v", "[", "377", ",", "3", "]", "=", "7", "\n", "v", "[", "378", ",", "3", "]", "=", "11", "\n", "v", "[", "379", ",", "3", "]", "=", "1", "\n", "v", "[", "380", ",", "3", "]", "=", "13", "\n", "v", "[", "381", ",", "3", "]", "=", "1", "\n", "v", "[", "382", ",", "3", "]", "=", "15", "\n", "v", "[", "383", ",", "3", "]", "=", "1", "\n", "v", "[", "384", ",", "3", "]", "=", "9", "\n", "v", "[", "385", ",", "3", "]", "=", "7", "\n", "v", "[", "386", ",", "3", "]", "=", "3", "\n", "v", "[", "387", ",", "3", "]", "=", "9", "\n", "v", "[", "388", ",", "3", "]", "=", "11", "\n", "v", "[", "389", ",", "3", "]", "=", "1", "\n", "v", "[", "390", ",", "3", "]", "=", "9", "\n", "v", "[", "391", ",", "3", "]", "=", "13", "\n", "v", "[", "392", ",", "3", "]", "=", "13", "\n", "v", "[", "393", ",", "3", "]", "=", "3", "\n", "v", "[", "394", ",", "3", "]", "=", "11", "\n", "v", "[", "395", ",", "3", "]", "=", "7", "\n", "v", "[", "396", ",", "3", "]", "=", "9", "\n", "v", "[", "397", ",", "3", "]", "=", "1", "\n", "v", "[", "398", ",", "3", "]", "=", "7", "\n", "v", "[", "399", ",", "3", "]", "=", "15", "\n", "v", "[", "400", ",", "3", "]", "=", "9", "\n", "v", "[", "401", ",", "3", "]", "=", "1", "\n", "v", "[", "402", ",", "3", "]", "=", "5", "\n", "v", "[", "403", ",", "3", "]", "=", "13", "\n", "v", "[", "404", ",", "3", "]", "=", "5", "\n", "v", "[", "405", ",", "3", "]", "=", "11", "\n", "v", "[", "406", ",", "3", "]", "=", "3", "\n", "v", "[", "407", ",", "3", "]", "=", "9", "\n", "v", "[", "408", ",", "3", "]", "=", "15", "\n", "v", "[", "409", ",", "3", "]", "=", "11", "\n", "v", "[", "410", ",", "3", "]", "=", "13", "\n", "v", "[", "411", ",", "3", "]", "=", "5", "\n", "v", "[", "412", ",", "3", "]", "=", "1", "\n", "v", "[", "413", ",", "3", "]", "=", "7", "\n", "v", "[", "414", ",", "3", "]", "=", "7", "\n", "v", "[", "415", ",", "3", "]", "=", "5", "\n", "v", "[", "416", ",", "3", "]", "=", "13", "\n", "v", "[", "417", ",", "3", "]", "=", "7", "\n", "v", "[", "418", ",", "3", "]", "=", "7", "\n", "v", "[", "419", ",", "3", "]", "=", "9", "\n", "v", "[", "420", ",", "3", "]", "=", "5", "\n", "v", "[", "421", ",", "3", "]", "=", "11", "\n", "v", "[", "422", ",", "3", "]", "=", "11", "\n", "v", "[", "423", ",", "3", "]", "=", "1", "\n", "v", "[", "424", ",", "3", "]", "=", "1", "\n", "v", "[", "425", ",", "3", "]", "=", "15", "\n", "v", "[", "426", ",", "3", "]", "=", "3", "\n", "v", "[", "427", ",", "3", "]", "=", "13", "\n", "v", "[", "428", ",", "3", "]", "=", "9", "\n", "v", "[", "429", ",", "3", "]", "=", "13", "\n", "v", "[", "430", ",", "3", "]", "=", "9", "\n", "v", "[", "431", ",", "3", "]", "=", "9", "\n", "v", "[", "432", ",", "3", "]", "=", "11", "\n", "v", "[", "433", ",", "3", "]", "=", "5", "\n", "v", "[", "434", ",", "3", "]", "=", "5", "\n", "v", "[", "435", ",", "3", "]", "=", "13", "\n", "v", "[", "436", ",", "3", "]", "=", "15", "\n", "v", "[", "437", ",", "3", "]", "=", "3", "\n", "v", "[", "438", ",", "3", "]", "=", "9", "\n", "v", "[", "439", ",", "3", "]", "=", "15", "\n", "v", "[", "440", ",", "3", "]", "=", "3", "\n", "v", "[", "441", ",", "3", "]", "=", "11", "\n", "v", "[", "442", ",", "3", "]", "=", "11", "\n", "v", "[", "443", ",", "3", "]", "=", "15", "\n", "v", "[", "444", ",", "3", "]", "=", "15", "\n", "v", "[", "445", ",", "3", "]", "=", "3", "\n", "v", "[", "446", ",", "3", "]", "=", "11", "\n", "v", "[", "447", ",", "3", "]", "=", "15", "\n", "v", "[", "448", ",", "3", "]", "=", "15", "\n", "v", "[", "449", ",", "3", "]", "=", "3", "\n", "v", "[", "450", ",", "3", "]", "=", "1", "\n", "v", "[", "451", ",", "3", "]", "=", "3", "\n", "v", "[", "452", ",", "3", "]", "=", "1", "\n", "v", "[", "453", ",", "3", "]", "=", "3", "\n", "v", "[", "454", ",", "3", "]", "=", "3", "\n", "v", "[", "455", ",", "3", "]", "=", "1", "\n", "v", "[", "456", ",", "3", "]", "=", "3", "\n", "v", "[", "457", ",", "3", "]", "=", "13", "\n", "v", "[", "458", ",", "3", "]", "=", "1", "\n", "v", "[", "459", ",", "3", "]", "=", "11", "\n", "v", "[", "460", ",", "3", "]", "=", "5", "\n", "v", "[", "461", ",", "3", "]", "=", "15", "\n", "v", "[", "462", ",", "3", "]", "=", "7", "\n", "v", "[", "463", ",", "3", "]", "=", "15", "\n", "v", "[", "464", ",", "3", "]", "=", "9", "\n", "v", "[", "465", ",", "3", "]", "=", "1", "\n", "v", "[", "466", ",", "3", "]", "=", "7", "\n", "v", "[", "467", ",", "3", "]", "=", "1", "\n", "v", "[", "468", ",", "3", "]", "=", "9", "\n", "v", "[", "469", ",", "3", "]", "=", "11", "\n", "v", "[", "470", ",", "3", "]", "=", "15", "\n", "v", "[", "471", ",", "3", "]", "=", "1", "\n", "v", "[", "472", ",", "3", "]", "=", "13", "\n", "v", "[", "473", ",", "3", "]", "=", "9", "\n", "v", "[", "474", ",", "3", "]", "=", "13", "\n", "v", "[", "475", ",", "3", "]", "=", "11", "\n", "v", "[", "476", ",", "3", "]", "=", "7", "\n", "v", "[", "477", ",", "3", "]", "=", "3", "\n", "v", "[", "478", ",", "3", "]", "=", "7", "\n", "v", "[", "479", ",", "3", "]", "=", "3", "\n", "v", "[", "480", ",", "3", "]", "=", "13", "\n", "v", "[", "481", ",", "3", "]", "=", "7", "\n", "v", "[", "482", ",", "3", "]", "=", "9", "\n", "v", "[", "483", ",", "3", "]", "=", "7", "\n", "v", "[", "484", ",", "3", "]", "=", "7", "\n", "v", "[", "485", ",", "3", "]", "=", "3", "\n", "v", "[", "486", ",", "3", "]", "=", "3", "\n", "v", "[", "487", ",", "3", "]", "=", "9", "\n", "v", "[", "488", ",", "3", "]", "=", "9", "\n", "v", "[", "489", ",", "3", "]", "=", "7", "\n", "v", "[", "490", ",", "3", "]", "=", "5", "\n", "v", "[", "491", ",", "3", "]", "=", "11", "\n", "v", "[", "492", ",", "3", "]", "=", "13", "\n", "v", "[", "493", ",", "3", "]", "=", "13", "\n", "v", "[", "494", ",", "3", "]", "=", "7", "\n", "v", "[", "495", ",", "3", "]", "=", "7", "\n", "v", "[", "496", ",", "3", "]", "=", "15", "\n", "v", "[", "497", ",", "3", "]", "=", "9", "\n", "v", "[", "498", ",", "3", "]", "=", "5", "\n", "v", "[", "499", ",", "3", "]", "=", "5", "\n", "v", "[", "500", ",", "3", "]", "=", "3", "\n", "v", "[", "501", ",", "3", "]", "=", "3", "\n", "v", "[", "502", ",", "3", "]", "=", "13", "\n", "v", "[", "503", ",", "3", "]", "=", "3", "\n", "v", "[", "504", ",", "3", "]", "=", "9", "\n", "v", "[", "505", ",", "3", "]", "=", "3", "\n", "v", "[", "506", ",", "3", "]", "=", "1", "\n", "v", "[", "507", ",", "3", "]", "=", "11", "\n", "v", "[", "508", ",", "3", "]", "=", "1", "\n", "v", "[", "509", ",", "3", "]", "=", "3", "\n", "v", "[", "510", ",", "3", "]", "=", "11", "\n", "v", "[", "511", ",", "3", "]", "=", "15", "\n", "v", "[", "512", ",", "3", "]", "=", "11", "\n", "v", "[", "513", ",", "3", "]", "=", "11", "\n", "v", "[", "514", ",", "3", "]", "=", "11", "\n", "v", "[", "515", ",", "3", "]", "=", "9", "\n", "v", "[", "516", ",", "3", "]", "=", "13", "\n", "v", "[", "517", ",", "3", "]", "=", "7", "\n", "v", "[", "518", ",", "3", "]", "=", "9", "\n", "v", "[", "519", ",", "3", "]", "=", "15", "\n", "v", "[", "520", ",", "3", "]", "=", "9", "\n", "v", "[", "521", ",", "3", "]", "=", "11", "\n", "v", "[", "522", ",", "3", "]", "=", "1", "\n", "v", "[", "523", ",", "3", "]", "=", "3", "\n", "v", "[", "524", ",", "3", "]", "=", "3", "\n", "v", "[", "525", ",", "3", "]", "=", "9", "\n", "v", "[", "526", ",", "3", "]", "=", "7", "\n", "v", "[", "527", ",", "3", "]", "=", "15", "\n", "v", "[", "528", ",", "3", "]", "=", "13", "\n", "v", "[", "529", ",", "3", "]", "=", "13", "\n", "v", "[", "530", ",", "3", "]", "=", "7", "\n", "v", "[", "531", ",", "3", "]", "=", "15", "\n", "v", "[", "532", ",", "3", "]", "=", "9", "\n", "v", "[", "533", ",", "3", "]", "=", "13", "\n", "v", "[", "534", ",", "3", "]", "=", "9", "\n", "v", "[", "535", ",", "3", "]", "=", "15", "\n", "v", "[", "536", ",", "3", "]", "=", "13", "\n", "v", "[", "537", ",", "3", "]", "=", "15", "\n", "v", "[", "538", ",", "3", "]", "=", "9", "\n", "v", "[", "539", ",", "3", "]", "=", "13", "\n", "v", "[", "540", ",", "3", "]", "=", "1", "\n", "v", "[", "541", ",", "3", "]", "=", "11", "\n", "v", "[", "542", ",", "3", "]", "=", "7", "\n", "v", "[", "543", ",", "3", "]", "=", "11", "\n", "v", "[", "544", ",", "3", "]", "=", "3", "\n", "v", "[", "545", ",", "3", "]", "=", "13", "\n", "v", "[", "546", ",", "3", "]", "=", "5", "\n", "v", "[", "547", ",", "3", "]", "=", "1", "\n", "v", "[", "548", ",", "3", "]", "=", "7", "\n", "v", "[", "549", ",", "3", "]", "=", "15", "\n", "v", "[", "550", ",", "3", "]", "=", "3", "\n", "v", "[", "551", ",", "3", "]", "=", "13", "\n", "v", "[", "552", ",", "3", "]", "=", "7", "\n", "v", "[", "553", ",", "3", "]", "=", "13", "\n", "v", "[", "554", ",", "3", "]", "=", "13", "\n", "v", "[", "555", ",", "3", "]", "=", "11", "\n", "v", "[", "556", ",", "3", "]", "=", "3", "\n", "v", "[", "557", ",", "3", "]", "=", "5", "\n", "v", "[", "558", ",", "3", "]", "=", "3", "\n", "v", "[", "559", ",", "3", "]", "=", "13", "\n", "v", "[", "560", ",", "3", "]", "=", "11", "\n", "v", "[", "561", ",", "3", "]", "=", "9", "\n", "v", "[", "562", ",", "3", "]", "=", "9", "\n", "v", "[", "563", ",", "3", "]", "=", "3", "\n", "v", "[", "564", ",", "3", "]", "=", "11", "\n", "v", "[", "565", ",", "3", "]", "=", "11", "\n", "v", "[", "566", ",", "3", "]", "=", "7", "\n", "v", "[", "567", ",", "3", "]", "=", "9", "\n", "v", "[", "568", ",", "3", "]", "=", "13", "\n", "v", "[", "569", ",", "3", "]", "=", "11", "\n", "v", "[", "570", ",", "3", "]", "=", "7", "\n", "v", "[", "571", ",", "3", "]", "=", "15", "\n", "v", "[", "572", ",", "3", "]", "=", "13", "\n", "v", "[", "573", ",", "3", "]", "=", "7", "\n", "v", "[", "574", ",", "3", "]", "=", "5", "\n", "v", "[", "575", ",", "3", "]", "=", "3", "\n", "v", "[", "576", ",", "3", "]", "=", "1", "\n", "v", "[", "577", ",", "3", "]", "=", "5", "\n", "v", "[", "578", ",", "3", "]", "=", "15", "\n", "v", "[", "579", ",", "3", "]", "=", "15", "\n", "v", "[", "580", ",", "3", "]", "=", "3", "\n", "v", "[", "581", ",", "3", "]", "=", "11", "\n", "v", "[", "582", ",", "3", "]", "=", "1", "\n", "v", "[", "583", ",", "3", "]", "=", "7", "\n", "v", "[", "584", ",", "3", "]", "=", "3", "\n", "v", "[", "585", ",", "3", "]", "=", "15", "\n", "v", "[", "586", ",", "3", "]", "=", "11", "\n", "v", "[", "587", ",", "3", "]", "=", "5", "\n", "v", "[", "588", ",", "3", "]", "=", "5", "\n", "v", "[", "589", ",", "3", "]", "=", "3", "\n", "v", "[", "590", ",", "3", "]", "=", "5", "\n", "v", "[", "591", ",", "3", "]", "=", "5", "\n", "v", "[", "592", ",", "3", "]", "=", "1", "\n", "v", "[", "593", ",", "3", "]", "=", "15", "\n", "v", "[", "594", ",", "3", "]", "=", "5", "\n", "v", "[", "595", ",", "3", "]", "=", "1", "\n", "v", "[", "596", ",", "3", "]", "=", "5", "\n", "v", "[", "597", ",", "3", "]", "=", "3", "\n", "v", "[", "598", ",", "3", "]", "=", "7", "\n", "v", "[", "599", ",", "3", "]", "=", "5", "\n", "v", "[", "600", ",", "3", "]", "=", "11", "\n", "v", "[", "601", ",", "3", "]", "=", "3", "\n", "v", "[", "602", ",", "3", "]", "=", "13", "\n", "v", "[", "603", ",", "3", "]", "=", "9", "\n", "v", "[", "604", ",", "3", "]", "=", "13", "\n", "v", "[", "605", ",", "3", "]", "=", "15", "\n", "v", "[", "606", ",", "3", "]", "=", "5", "\n", "v", "[", "607", ",", "3", "]", "=", "3", "\n", "v", "[", "608", ",", "3", "]", "=", "5", "\n", "v", "[", "609", ",", "3", "]", "=", "9", "\n", "v", "[", "610", ",", "3", "]", "=", "5", "\n", "v", "[", "611", ",", "3", "]", "=", "3", "\n", "v", "[", "612", ",", "3", "]", "=", "11", "\n", "v", "[", "613", ",", "3", "]", "=", "1", "\n", "v", "[", "614", ",", "3", "]", "=", "13", "\n", "v", "[", "615", ",", "3", "]", "=", "9", "\n", "v", "[", "616", ",", "3", "]", "=", "15", "\n", "v", "[", "617", ",", "3", "]", "=", "3", "\n", "v", "[", "618", ",", "3", "]", "=", "5", "\n", "v", "[", "619", ",", "3", "]", "=", "11", "\n", "v", "[", "620", ",", "3", "]", "=", "9", "\n", "v", "[", "621", ",", "3", "]", "=", "1", "\n", "v", "[", "622", ",", "3", "]", "=", "3", "\n", "v", "[", "623", ",", "3", "]", "=", "15", "\n", "v", "[", "624", ",", "3", "]", "=", "9", "\n", "v", "[", "625", ",", "3", "]", "=", "9", "\n", "v", "[", "626", ",", "3", "]", "=", "9", "\n", "v", "[", "627", ",", "3", "]", "=", "11", "\n", "v", "[", "628", ",", "3", "]", "=", "7", "\n", "v", "[", "629", ",", "3", "]", "=", "5", "\n", "v", "[", "630", ",", "3", "]", "=", "13", "\n", "v", "[", "631", ",", "3", "]", "=", "1", "\n", "v", "[", "632", ",", "3", "]", "=", "15", "\n", "v", "[", "633", ",", "3", "]", "=", "3", "\n", "v", "[", "634", ",", "3", "]", "=", "13", "\n", "v", "[", "635", ",", "3", "]", "=", "9", "\n", "v", "[", "636", ",", "3", "]", "=", "13", "\n", "v", "[", "637", ",", "3", "]", "=", "5", "\n", "v", "[", "638", ",", "3", "]", "=", "1", "\n", "v", "[", "639", ",", "3", "]", "=", "5", "\n", "v", "[", "640", ",", "3", "]", "=", "1", "\n", "v", "[", "641", ",", "3", "]", "=", "13", "\n", "v", "[", "642", ",", "3", "]", "=", "13", "\n", "v", "[", "643", ",", "3", "]", "=", "7", "\n", "v", "[", "644", ",", "3", "]", "=", "7", "\n", "v", "[", "645", ",", "3", "]", "=", "1", "\n", "v", "[", "646", ",", "3", "]", "=", "9", "\n", "v", "[", "647", ",", "3", "]", "=", "5", "\n", "v", "[", "648", ",", "3", "]", "=", "11", "\n", "v", "[", "649", ",", "3", "]", "=", "9", "\n", "v", "[", "650", ",", "3", "]", "=", "11", "\n", "v", "[", "651", ",", "3", "]", "=", "13", "\n", "v", "[", "652", ",", "3", "]", "=", "3", "\n", "v", "[", "653", ",", "3", "]", "=", "15", "\n", "v", "[", "654", ",", "3", "]", "=", "15", "\n", "v", "[", "655", ",", "3", "]", "=", "13", "\n", "v", "[", "656", ",", "3", "]", "=", "15", "\n", "v", "[", "657", ",", "3", "]", "=", "7", "\n", "v", "[", "658", ",", "3", "]", "=", "5", "\n", "v", "[", "659", ",", "3", "]", "=", "7", "\n", "v", "[", "660", ",", "3", "]", "=", "9", "\n", "v", "[", "661", ",", "3", "]", "=", "7", "\n", "v", "[", "662", ",", "3", "]", "=", "9", "\n", "v", "[", "663", ",", "3", "]", "=", "9", "\n", "v", "[", "664", ",", "3", "]", "=", "9", "\n", "v", "[", "665", ",", "3", "]", "=", "11", "\n", "v", "[", "666", ",", "3", "]", "=", "9", "\n", "v", "[", "667", ",", "3", "]", "=", "3", "\n", "v", "[", "668", ",", "3", "]", "=", "11", "\n", "v", "[", "669", ",", "3", "]", "=", "15", "\n", "v", "[", "670", ",", "3", "]", "=", "13", "\n", "v", "[", "671", ",", "3", "]", "=", "13", "\n", "v", "[", "672", ",", "3", "]", "=", "5", "\n", "v", "[", "673", ",", "3", "]", "=", "9", "\n", "v", "[", "674", ",", "3", "]", "=", "15", "\n", "v", "[", "675", ",", "3", "]", "=", "1", "\n", "v", "[", "676", ",", "3", "]", "=", "1", "\n", "v", "[", "677", ",", "3", "]", "=", "9", "\n", "v", "[", "678", ",", "3", "]", "=", "5", "\n", "v", "[", "679", ",", "3", "]", "=", "13", "\n", "v", "[", "680", ",", "3", "]", "=", "3", "\n", "v", "[", "681", ",", "3", "]", "=", "13", "\n", "v", "[", "682", ",", "3", "]", "=", "15", "\n", "v", "[", "683", ",", "3", "]", "=", "3", "\n", "v", "[", "684", ",", "3", "]", "=", "1", "\n", "v", "[", "685", ",", "3", "]", "=", "3", "\n", "v", "[", "686", ",", "3", "]", "=", "11", "\n", "v", "[", "687", ",", "3", "]", "=", "13", "\n", "v", "[", "688", ",", "3", "]", "=", "1", "\n", "v", "[", "689", ",", "3", "]", "=", "15", "\n", "v", "[", "690", ",", "3", "]", "=", "9", "\n", "v", "[", "691", ",", "3", "]", "=", "9", "\n", "v", "[", "692", ",", "3", "]", "=", "3", "\n", "v", "[", "693", ",", "3", "]", "=", "1", "\n", "v", "[", "694", ",", "3", "]", "=", "9", "\n", "v", "[", "695", ",", "3", "]", "=", "1", "\n", "v", "[", "696", ",", "3", "]", "=", "9", "\n", "v", "[", "697", ",", "3", "]", "=", "1", "\n", "v", "[", "698", ",", "3", "]", "=", "13", "\n", "v", "[", "699", ",", "3", "]", "=", "11", "\n", "v", "[", "700", ",", "3", "]", "=", "15", "\n", "v", "[", "701", ",", "3", "]", "=", "7", "\n", "v", "[", "702", ",", "3", "]", "=", "11", "\n", "v", "[", "703", ",", "3", "]", "=", "15", "\n", "v", "[", "704", ",", "3", "]", "=", "13", "\n", "v", "[", "705", ",", "3", "]", "=", "15", "\n", "v", "[", "706", ",", "3", "]", "=", "1", "\n", "v", "[", "707", ",", "3", "]", "=", "9", "\n", "v", "[", "708", ",", "3", "]", "=", "9", "\n", "v", "[", "709", ",", "3", "]", "=", "7", "\n", "v", "[", "710", ",", "3", "]", "=", "3", "\n", "v", "[", "711", ",", "3", "]", "=", "5", "\n", "v", "[", "712", ",", "3", "]", "=", "11", "\n", "v", "[", "713", ",", "3", "]", "=", "7", "\n", "v", "[", "714", ",", "3", "]", "=", "3", "\n", "v", "[", "715", ",", "3", "]", "=", "9", "\n", "v", "[", "716", ",", "3", "]", "=", "5", "\n", "v", "[", "717", ",", "3", "]", "=", "15", "\n", "v", "[", "718", ",", "3", "]", "=", "7", "\n", "v", "[", "719", ",", "3", "]", "=", "5", "\n", "v", "[", "720", ",", "3", "]", "=", "3", "\n", "v", "[", "721", ",", "3", "]", "=", "13", "\n", "v", "[", "722", ",", "3", "]", "=", "7", "\n", "v", "[", "723", ",", "3", "]", "=", "1", "\n", "v", "[", "724", ",", "3", "]", "=", "1", "\n", "v", "[", "725", ",", "3", "]", "=", "9", "\n", "v", "[", "726", ",", "3", "]", "=", "15", "\n", "v", "[", "727", ",", "3", "]", "=", "15", "\n", "v", "[", "728", ",", "3", "]", "=", "15", "\n", "v", "[", "729", ",", "3", "]", "=", "11", "\n", "v", "[", "730", ",", "3", "]", "=", "3", "\n", "v", "[", "731", ",", "3", "]", "=", "5", "\n", "v", "[", "732", ",", "3", "]", "=", "15", "\n", "v", "[", "733", ",", "3", "]", "=", "13", "\n", "v", "[", "734", ",", "3", "]", "=", "7", "\n", "v", "[", "735", ",", "3", "]", "=", "15", "\n", "v", "[", "736", ",", "3", "]", "=", "15", "\n", "v", "[", "737", ",", "3", "]", "=", "11", "\n", "v", "[", "738", ",", "3", "]", "=", "11", "\n", "v", "[", "739", ",", "3", "]", "=", "9", "\n", "v", "[", "740", ",", "3", "]", "=", "5", "\n", "v", "[", "741", ",", "3", "]", "=", "15", "\n", "v", "[", "742", ",", "3", "]", "=", "9", "\n", "v", "[", "743", ",", "3", "]", "=", "7", "\n", "v", "[", "744", ",", "3", "]", "=", "3", "\n", "v", "[", "745", ",", "3", "]", "=", "13", "\n", "v", "[", "746", ",", "3", "]", "=", "1", "\n", "v", "[", "747", ",", "3", "]", "=", "1", "\n", "v", "[", "748", ",", "3", "]", "=", "5", "\n", "v", "[", "749", ",", "3", "]", "=", "1", "\n", "v", "[", "750", ",", "3", "]", "=", "3", "\n", "v", "[", "751", ",", "3", "]", "=", "1", "\n", "v", "[", "752", ",", "3", "]", "=", "7", "\n", "v", "[", "753", ",", "3", "]", "=", "1", "\n", "v", "[", "754", ",", "3", "]", "=", "1", "\n", "v", "[", "755", ",", "3", "]", "=", "5", "\n", "v", "[", "756", ",", "3", "]", "=", "1", "\n", "v", "[", "757", ",", "3", "]", "=", "11", "\n", "v", "[", "758", ",", "3", "]", "=", "11", "\n", "v", "[", "759", ",", "3", "]", "=", "9", "\n", "v", "[", "760", ",", "3", "]", "=", "9", "\n", "v", "[", "761", ",", "3", "]", "=", "5", "\n", "v", "[", "762", ",", "3", "]", "=", "13", "\n", "v", "[", "763", ",", "3", "]", "=", "7", "\n", "v", "[", "764", ",", "3", "]", "=", "7", "\n", "v", "[", "765", ",", "3", "]", "=", "7", "\n", "v", "[", "766", ",", "3", "]", "=", "1", "\n", "v", "[", "767", ",", "3", "]", "=", "1", "\n", "v", "[", "768", ",", "3", "]", "=", "9", "\n", "v", "[", "769", ",", "3", "]", "=", "9", "\n", "v", "[", "770", ",", "3", "]", "=", "11", "\n", "v", "[", "771", ",", "3", "]", "=", "11", "\n", "v", "[", "772", ",", "3", "]", "=", "15", "\n", "v", "[", "773", ",", "3", "]", "=", "7", "\n", "v", "[", "774", ",", "3", "]", "=", "5", "\n", "v", "[", "775", ",", "3", "]", "=", "5", "\n", "v", "[", "776", ",", "3", "]", "=", "3", "\n", "v", "[", "777", ",", "3", "]", "=", "11", "\n", "v", "[", "778", ",", "3", "]", "=", "1", "\n", "v", "[", "779", ",", "3", "]", "=", "3", "\n", "v", "[", "780", ",", "3", "]", "=", "7", "\n", "v", "[", "781", ",", "3", "]", "=", "13", "\n", "v", "[", "782", ",", "3", "]", "=", "7", "\n", "v", "[", "783", ",", "3", "]", "=", "7", "\n", "v", "[", "784", ",", "3", "]", "=", "7", "\n", "v", "[", "785", ",", "3", "]", "=", "3", "\n", "v", "[", "786", ",", "3", "]", "=", "15", "\n", "v", "[", "787", ",", "3", "]", "=", "15", "\n", "v", "[", "788", ",", "3", "]", "=", "11", "\n", "v", "[", "789", ",", "3", "]", "=", "9", "\n", "v", "[", "790", ",", "3", "]", "=", "3", "\n", "v", "[", "791", ",", "3", "]", "=", "9", "\n", "v", "[", "792", ",", "3", "]", "=", "3", "\n", "v", "[", "793", ",", "3", "]", "=", "15", "\n", "v", "[", "794", ",", "3", "]", "=", "13", "\n", "v", "[", "795", ",", "3", "]", "=", "5", "\n", "v", "[", "796", ",", "3", "]", "=", "3", "\n", "v", "[", "797", ",", "3", "]", "=", "3", "\n", "v", "[", "798", ",", "3", "]", "=", "3", "\n", "v", "[", "799", ",", "3", "]", "=", "5", "\n", "v", "[", "800", ",", "3", "]", "=", "9", "\n", "v", "[", "801", ",", "3", "]", "=", "15", "\n", "v", "[", "802", ",", "3", "]", "=", "9", "\n", "v", "[", "803", ",", "3", "]", "=", "9", "\n", "v", "[", "804", ",", "3", "]", "=", "1", "\n", "v", "[", "805", ",", "3", "]", "=", "5", "\n", "v", "[", "806", ",", "3", "]", "=", "9", "\n", "v", "[", "807", ",", "3", "]", "=", "9", "\n", "v", "[", "808", ",", "3", "]", "=", "15", "\n", "v", "[", "809", ",", "3", "]", "=", "5", "\n", "v", "[", "810", ",", "3", "]", "=", "15", "\n", "v", "[", "811", ",", "3", "]", "=", "7", "\n", "v", "[", "812", ",", "3", "]", "=", "9", "\n", "v", "[", "813", ",", "3", "]", "=", "1", "\n", "v", "[", "814", ",", "3", "]", "=", "9", "\n", "v", "[", "815", ",", "3", "]", "=", "9", "\n", "v", "[", "816", ",", "3", "]", "=", "5", "\n", "v", "[", "817", ",", "3", "]", "=", "11", "\n", "v", "[", "818", ",", "3", "]", "=", "5", "\n", "v", "[", "819", ",", "3", "]", "=", "15", "\n", "v", "[", "820", ",", "3", "]", "=", "15", "\n", "v", "[", "821", ",", "3", "]", "=", "11", "\n", "v", "[", "822", ",", "3", "]", "=", "7", "\n", "v", "[", "823", ",", "3", "]", "=", "7", "\n", "v", "[", "824", ",", "3", "]", "=", "7", "\n", "v", "[", "825", ",", "3", "]", "=", "1", "\n", "v", "[", "826", ",", "3", "]", "=", "1", "\n", "v", "[", "827", ",", "3", "]", "=", "11", "\n", "v", "[", "828", ",", "3", "]", "=", "11", "\n", "v", "[", "829", ",", "3", "]", "=", "13", "\n", "v", "[", "830", ",", "3", "]", "=", "15", "\n", "v", "[", "831", ",", "3", "]", "=", "3", "\n", "v", "[", "832", ",", "3", "]", "=", "13", "\n", "v", "[", "833", ",", "3", "]", "=", "5", "\n", "v", "[", "834", ",", "3", "]", "=", "1", "\n", "v", "[", "835", ",", "3", "]", "=", "7", "\n", "v", "[", "836", ",", "3", "]", "=", "1", "\n", "v", "[", "837", ",", "3", "]", "=", "11", "\n", "v", "[", "838", ",", "3", "]", "=", "3", "\n", "v", "[", "839", ",", "3", "]", "=", "13", "\n", "v", "[", "840", ",", "3", "]", "=", "15", "\n", "v", "[", "841", ",", "3", "]", "=", "3", "\n", "v", "[", "842", ",", "3", "]", "=", "5", "\n", "v", "[", "843", ",", "3", "]", "=", "3", "\n", "v", "[", "844", ",", "3", "]", "=", "5", "\n", "v", "[", "845", ",", "3", "]", "=", "7", "\n", "v", "[", "846", ",", "3", "]", "=", "3", "\n", "v", "[", "847", ",", "3", "]", "=", "9", "\n", "v", "[", "848", ",", "3", "]", "=", "9", "\n", "v", "[", "849", ",", "3", "]", "=", "5", "\n", "v", "[", "850", ",", "3", "]", "=", "1", "\n", "v", "[", "851", ",", "3", "]", "=", "7", "\n", "v", "[", "852", ",", "3", "]", "=", "11", "\n", "v", "[", "853", ",", "3", "]", "=", "9", "\n", "v", "[", "854", ",", "3", "]", "=", "3", "\n", "v", "[", "855", ",", "3", "]", "=", "5", "\n", "v", "[", "856", ",", "3", "]", "=", "11", "\n", "v", "[", "857", ",", "3", "]", "=", "13", "\n", "v", "[", "858", ",", "3", "]", "=", "13", "\n", "v", "[", "859", ",", "3", "]", "=", "13", "\n", "v", "[", "860", ",", "3", "]", "=", "9", "\n", "v", "[", "861", ",", "3", "]", "=", "15", "\n", "v", "[", "862", ",", "3", "]", "=", "5", "\n", "v", "[", "863", ",", "3", "]", "=", "7", "\n", "v", "[", "864", ",", "3", "]", "=", "1", "\n", "v", "[", "865", ",", "3", "]", "=", "15", "\n", "v", "[", "866", ",", "3", "]", "=", "11", "\n", "v", "[", "867", ",", "3", "]", "=", "9", "\n", "v", "[", "868", ",", "3", "]", "=", "15", "\n", "v", "[", "869", ",", "3", "]", "=", "15", "\n", "v", "[", "870", ",", "3", "]", "=", "13", "\n", "v", "[", "871", ",", "3", "]", "=", "13", "\n", "v", "[", "872", ",", "3", "]", "=", "13", "\n", "v", "[", "873", ",", "3", "]", "=", "1", "\n", "v", "[", "874", ",", "3", "]", "=", "11", "\n", "v", "[", "875", ",", "3", "]", "=", "9", "\n", "v", "[", "876", ",", "3", "]", "=", "15", "\n", "v", "[", "877", ",", "3", "]", "=", "9", "\n", "v", "[", "878", ",", "3", "]", "=", "5", "\n", "v", "[", "879", ",", "3", "]", "=", "15", "\n", "v", "[", "880", ",", "3", "]", "=", "5", "\n", "v", "[", "881", ",", "3", "]", "=", "7", "\n", "v", "[", "882", ",", "3", "]", "=", "3", "\n", "v", "[", "883", ",", "3", "]", "=", "11", "\n", "v", "[", "884", ",", "3", "]", "=", "3", "\n", "v", "[", "885", ",", "3", "]", "=", "15", "\n", "v", "[", "886", ",", "3", "]", "=", "7", "\n", "v", "[", "887", ",", "3", "]", "=", "13", "\n", "v", "[", "888", ",", "3", "]", "=", "11", "\n", "v", "[", "889", ",", "3", "]", "=", "7", "\n", "v", "[", "890", ",", "3", "]", "=", "3", "\n", "v", "[", "891", ",", "3", "]", "=", "7", "\n", "v", "[", "892", ",", "3", "]", "=", "13", "\n", "v", "[", "893", ",", "3", "]", "=", "5", "\n", "v", "[", "894", ",", "3", "]", "=", "13", "\n", "v", "[", "895", ",", "3", "]", "=", "15", "\n", "v", "[", "896", ",", "3", "]", "=", "5", "\n", "v", "[", "897", ",", "3", "]", "=", "13", "\n", "v", "[", "898", ",", "3", "]", "=", "9", "\n", "v", "[", "899", ",", "3", "]", "=", "1", "\n", "v", "[", "900", ",", "3", "]", "=", "15", "\n", "v", "[", "901", ",", "3", "]", "=", "11", "\n", "v", "[", "902", ",", "3", "]", "=", "5", "\n", "v", "[", "903", ",", "3", "]", "=", "5", "\n", "v", "[", "904", ",", "3", "]", "=", "1", "\n", "v", "[", "905", ",", "3", "]", "=", "11", "\n", "v", "[", "906", ",", "3", "]", "=", "3", "\n", "v", "[", "907", ",", "3", "]", "=", "3", "\n", "v", "[", "908", ",", "3", "]", "=", "7", "\n", "v", "[", "909", ",", "3", "]", "=", "1", "\n", "v", "[", "910", ",", "3", "]", "=", "9", "\n", "v", "[", "911", ",", "3", "]", "=", "7", "\n", "v", "[", "912", ",", "3", "]", "=", "15", "\n", "v", "[", "913", ",", "3", "]", "=", "9", "\n", "v", "[", "914", ",", "3", "]", "=", "9", "\n", "v", "[", "915", ",", "3", "]", "=", "3", "\n", "v", "[", "916", ",", "3", "]", "=", "11", "\n", "v", "[", "917", ",", "3", "]", "=", "15", "\n", "v", "[", "918", ",", "3", "]", "=", "7", "\n", "v", "[", "919", ",", "3", "]", "=", "1", "\n", "v", "[", "920", ",", "3", "]", "=", "3", "\n", "v", "[", "921", ",", "3", "]", "=", "1", "\n", "v", "[", "922", ",", "3", "]", "=", "1", "\n", "v", "[", "923", ",", "3", "]", "=", "1", "\n", "v", "[", "924", ",", "3", "]", "=", "9", "\n", "v", "[", "925", ",", "3", "]", "=", "1", "\n", "v", "[", "926", ",", "3", "]", "=", "5", "\n", "v", "[", "927", ",", "3", "]", "=", "15", "\n", "v", "[", "928", ",", "3", "]", "=", "15", "\n", "v", "[", "929", ",", "3", "]", "=", "7", "\n", "v", "[", "930", ",", "3", "]", "=", "5", "\n", "v", "[", "931", ",", "3", "]", "=", "5", "\n", "v", "[", "932", ",", "3", "]", "=", "7", "\n", "v", "[", "933", ",", "3", "]", "=", "9", "\n", "v", "[", "934", ",", "3", "]", "=", "7", "\n", "v", "[", "935", ",", "3", "]", "=", "15", "\n", "v", "[", "936", ",", "3", "]", "=", "13", "\n", "v", "[", "937", ",", "3", "]", "=", "13", "\n", "v", "[", "938", ",", "3", "]", "=", "11", "\n", "v", "[", "939", ",", "3", "]", "=", "1", "\n", "v", "[", "940", ",", "3", "]", "=", "9", "\n", "v", "[", "941", ",", "3", "]", "=", "11", "\n", "v", "[", "942", ",", "3", "]", "=", "1", "\n", "v", "[", "943", ",", "3", "]", "=", "13", "\n", "v", "[", "944", ",", "3", "]", "=", "1", "\n", "v", "[", "945", ",", "3", "]", "=", "7", "\n", "v", "[", "946", ",", "3", "]", "=", "15", "\n", "v", "[", "947", ",", "3", "]", "=", "15", "\n", "v", "[", "948", ",", "3", "]", "=", "5", "\n", "v", "[", "949", ",", "3", "]", "=", "5", "\n", "v", "[", "950", ",", "3", "]", "=", "1", "\n", "v", "[", "951", ",", "3", "]", "=", "11", "\n", "v", "[", "952", ",", "3", "]", "=", "3", "\n", "v", "[", "953", ",", "3", "]", "=", "9", "\n", "v", "[", "954", ",", "3", "]", "=", "11", "\n", "v", "[", "955", ",", "3", "]", "=", "9", "\n", "v", "[", "956", ",", "3", "]", "=", "9", "\n", "v", "[", "957", ",", "3", "]", "=", "9", "\n", "v", "[", "958", ",", "3", "]", "=", "1", "\n", "v", "[", "959", ",", "3", "]", "=", "9", "\n", "v", "[", "960", ",", "3", "]", "=", "3", "\n", "v", "[", "961", ",", "3", "]", "=", "5", "\n", "v", "[", "962", ",", "3", "]", "=", "15", "\n", "v", "[", "963", ",", "3", "]", "=", "1", "\n", "v", "[", "964", ",", "3", "]", "=", "1", "\n", "v", "[", "965", ",", "3", "]", "=", "9", "\n", "v", "[", "966", ",", "3", "]", "=", "7", "\n", "v", "[", "967", ",", "3", "]", "=", "3", "\n", "v", "[", "968", ",", "3", "]", "=", "3", "\n", "v", "[", "969", ",", "3", "]", "=", "1", "\n", "v", "[", "970", ",", "3", "]", "=", "9", "\n", "v", "[", "971", ",", "3", "]", "=", "9", "\n", "v", "[", "972", ",", "3", "]", "=", "11", "\n", "v", "[", "973", ",", "3", "]", "=", "9", "\n", "v", "[", "974", ",", "3", "]", "=", "9", "\n", "v", "[", "975", ",", "3", "]", "=", "13", "\n", "v", "[", "976", ",", "3", "]", "=", "13", "\n", "v", "[", "977", ",", "3", "]", "=", "3", "\n", "v", "[", "978", ",", "3", "]", "=", "13", "\n", "v", "[", "979", ",", "3", "]", "=", "11", "\n", "v", "[", "980", ",", "3", "]", "=", "13", "\n", "v", "[", "981", ",", "3", "]", "=", "5", "\n", "v", "[", "982", ",", "3", "]", "=", "1", "\n", "v", "[", "983", ",", "3", "]", "=", "5", "\n", "v", "[", "984", ",", "3", "]", "=", "5", "\n", "v", "[", "985", ",", "3", "]", "=", "9", "\n", "v", "[", "986", ",", "3", "]", "=", "9", "\n", "v", "[", "987", ",", "3", "]", "=", "3", "\n", "v", "[", "988", ",", "3", "]", "=", "13", "\n", "v", "[", "989", ",", "3", "]", "=", "13", "\n", "v", "[", "990", ",", "3", "]", "=", "9", "\n", "v", "[", "991", ",", "3", "]", "=", "15", "\n", "v", "[", "992", ",", "3", "]", "=", "9", "\n", "v", "[", "993", ",", "3", "]", "=", "11", "\n", "v", "[", "994", ",", "3", "]", "=", "7", "\n", "v", "[", "995", ",", "3", "]", "=", "11", "\n", "v", "[", "996", ",", "3", "]", "=", "9", "\n", "v", "[", "997", ",", "3", "]", "=", "13", "\n", "v", "[", "998", ",", "3", "]", "=", "9", "\n", "v", "[", "999", ",", "3", "]", "=", "1", "\n", "v", "[", "1000", ",", "3", "]", "=", "15", "\n", "v", "[", "1001", ",", "3", "]", "=", "9", "\n", "v", "[", "1002", ",", "3", "]", "=", "7", "\n", "v", "[", "1003", ",", "3", "]", "=", "7", "\n", "v", "[", "1004", ",", "3", "]", "=", "1", "\n", "v", "[", "1005", ",", "3", "]", "=", "7", "\n", "v", "[", "1006", ",", "3", "]", "=", "9", "\n", "v", "[", "1007", ",", "3", "]", "=", "9", "\n", "v", "[", "1008", ",", "3", "]", "=", "15", "\n", "v", "[", "1009", ",", "3", "]", "=", "1", "\n", "v", "[", "1010", ",", "3", "]", "=", "11", "\n", "v", "[", "1011", ",", "3", "]", "=", "1", "\n", "v", "[", "1012", ",", "3", "]", "=", "13", "\n", "v", "[", "1013", ",", "3", "]", "=", "13", "\n", "v", "[", "1014", ",", "3", "]", "=", "15", "\n", "v", "[", "1015", ",", "3", "]", "=", "9", "\n", "v", "[", "1016", ",", "3", "]", "=", "13", "\n", "v", "[", "1017", ",", "3", "]", "=", "7", "\n", "v", "[", "1018", ",", "3", "]", "=", "15", "\n", "v", "[", "1019", ",", "3", "]", "=", "3", "\n", "v", "[", "1020", ",", "3", "]", "=", "9", "\n", "v", "[", "1021", ",", "3", "]", "=", "3", "\n", "v", "[", "1022", ",", "3", "]", "=", "1", "\n", "v", "[", "1023", ",", "3", "]", "=", "13", "\n", "v", "[", "1024", ",", "3", "]", "=", "7", "\n", "v", "[", "1025", ",", "3", "]", "=", "5", "\n", "v", "[", "1026", ",", "3", "]", "=", "9", "\n", "v", "[", "1027", ",", "3", "]", "=", "3", "\n", "v", "[", "1028", ",", "3", "]", "=", "1", "\n", "v", "[", "1029", ",", "3", "]", "=", "7", "\n", "v", "[", "1030", ",", "3", "]", "=", "1", "\n", "v", "[", "1031", ",", "3", "]", "=", "1", "\n", "v", "[", "1032", ",", "3", "]", "=", "13", "\n", "v", "[", "1033", ",", "3", "]", "=", "3", "\n", "v", "[", "1034", ",", "3", "]", "=", "3", "\n", "v", "[", "1035", ",", "3", "]", "=", "11", "\n", "v", "[", "1036", ",", "3", "]", "=", "1", "\n", "v", "[", "1037", ",", "3", "]", "=", "7", "\n", "v", "[", "1038", ",", "3", "]", "=", "13", "\n", "v", "[", "1039", ",", "3", "]", "=", "15", "\n", "v", "[", "1040", ",", "3", "]", "=", "15", "\n", "v", "[", "1041", ",", "3", "]", "=", "5", "\n", "v", "[", "1042", ",", "3", "]", "=", "7", "\n", "v", "[", "1043", ",", "3", "]", "=", "13", "\n", "v", "[", "1044", ",", "3", "]", "=", "13", "\n", "v", "[", "1045", ",", "3", "]", "=", "15", "\n", "v", "[", "1046", ",", "3", "]", "=", "11", "\n", "v", "[", "1047", ",", "3", "]", "=", "13", "\n", "v", "[", "1048", ",", "3", "]", "=", "1", "\n", "v", "[", "1049", ",", "3", "]", "=", "13", "\n", "v", "[", "1050", ",", "3", "]", "=", "13", "\n", "v", "[", "1051", ",", "3", "]", "=", "3", "\n", "v", "[", "1052", ",", "3", "]", "=", "9", "\n", "v", "[", "1053", ",", "3", "]", "=", "15", "\n", "v", "[", "1054", ",", "3", "]", "=", "15", "\n", "v", "[", "1055", ",", "3", "]", "=", "11", "\n", "v", "[", "1056", ",", "3", "]", "=", "15", "\n", "v", "[", "1057", ",", "3", "]", "=", "9", "\n", "v", "[", "1058", ",", "3", "]", "=", "15", "\n", "v", "[", "1059", ",", "3", "]", "=", "1", "\n", "v", "[", "1060", ",", "3", "]", "=", "13", "\n", "v", "[", "1061", ",", "3", "]", "=", "15", "\n", "v", "[", "1062", ",", "3", "]", "=", "1", "\n", "v", "[", "1063", ",", "3", "]", "=", "1", "\n", "v", "[", "1064", ",", "3", "]", "=", "5", "\n", "v", "[", "1065", ",", "3", "]", "=", "11", "\n", "v", "[", "1066", ",", "3", "]", "=", "5", "\n", "v", "[", "1067", ",", "3", "]", "=", "1", "\n", "v", "[", "1068", ",", "3", "]", "=", "11", "\n", "v", "[", "1069", ",", "3", "]", "=", "11", "\n", "v", "[", "1070", ",", "3", "]", "=", "5", "\n", "v", "[", "1071", ",", "3", "]", "=", "3", "\n", "v", "[", "1072", ",", "3", "]", "=", "9", "\n", "v", "[", "1073", ",", "3", "]", "=", "1", "\n", "v", "[", "1074", ",", "3", "]", "=", "3", "\n", "v", "[", "1075", ",", "3", "]", "=", "5", "\n", "v", "[", "1076", ",", "3", "]", "=", "13", "\n", "v", "[", "1077", ",", "3", "]", "=", "9", "\n", "v", "[", "1078", ",", "3", "]", "=", "7", "\n", "v", "[", "1079", ",", "3", "]", "=", "7", "\n", "v", "[", "1080", ",", "3", "]", "=", "1", "\n", "v", "[", "1081", ",", "3", "]", "=", "9", "\n", "v", "[", "1082", ",", "3", "]", "=", "9", "\n", "v", "[", "1083", ",", "3", "]", "=", "15", "\n", "v", "[", "1084", ",", "3", "]", "=", "7", "\n", "v", "[", "1085", ",", "3", "]", "=", "5", "\n", "v", "[", "1086", ",", "3", "]", "=", "5", "\n", "v", "[", "1087", ",", "3", "]", "=", "15", "\n", "v", "[", "1088", ",", "3", "]", "=", "13", "\n", "v", "[", "1089", ",", "3", "]", "=", "9", "\n", "v", "[", "1090", ",", "3", "]", "=", "7", "\n", "v", "[", "1091", ",", "3", "]", "=", "13", "\n", "v", "[", "1092", ",", "3", "]", "=", "3", "\n", "v", "[", "1093", ",", "3", "]", "=", "13", "\n", "v", "[", "1094", ",", "3", "]", "=", "11", "\n", "v", "[", "1095", ",", "3", "]", "=", "13", "\n", "v", "[", "1096", ",", "3", "]", "=", "7", "\n", "v", "[", "1097", ",", "3", "]", "=", "9", "\n", "v", "[", "1098", ",", "3", "]", "=", "13", "\n", "v", "[", "1099", ",", "3", "]", "=", "13", "\n", "v", "[", "1100", ",", "3", "]", "=", "13", "\n", "v", "[", "1101", ",", "3", "]", "=", "15", "\n", "v", "[", "1102", ",", "3", "]", "=", "9", "\n", "v", "[", "1103", ",", "3", "]", "=", "5", "\n", "v", "[", "1104", ",", "3", "]", "=", "5", "\n", "v", "[", "1105", ",", "3", "]", "=", "3", "\n", "v", "[", "1106", ",", "3", "]", "=", "3", "\n", "v", "[", "1107", ",", "3", "]", "=", "3", "\n", "v", "[", "1108", ",", "3", "]", "=", "1", "\n", "v", "[", "1109", ",", "3", "]", "=", "3", "\n", "v", "[", "1110", ",", "3", "]", "=", "15", "\n", "\n", "v", "[", "7", ",", "4", "]", "=", "9", "\n", "v", "[", "8", ",", "4", "]", "=", "3", "\n", "v", "[", "9", ",", "4", "]", "=", "27", "\n", "v", "[", "10", ",", "4", "]", "=", "15", "\n", "v", "[", "11", ",", "4", "]", "=", "29", "\n", "v", "[", "12", ",", "4", "]", "=", "21", "\n", "v", "[", "13", ",", "4", "]", "=", "23", "\n", "v", "[", "14", ",", "4", "]", "=", "19", "\n", "v", "[", "15", ",", "4", "]", "=", "11", "\n", "v", "[", "16", ",", "4", "]", "=", "25", "\n", "v", "[", "17", ",", "4", "]", "=", "7", "\n", "v", "[", "18", ",", "4", "]", "=", "13", "\n", "v", "[", "19", ",", "4", "]", "=", "17", "\n", "v", "[", "20", ",", "4", "]", "=", "1", "\n", "v", "[", "21", ",", "4", "]", "=", "25", "\n", "v", "[", "22", ",", "4", "]", "=", "29", "\n", "v", "[", "23", ",", "4", "]", "=", "3", "\n", "v", "[", "24", ",", "4", "]", "=", "31", "\n", "v", "[", "25", ",", "4", "]", "=", "11", "\n", "v", "[", "26", ",", "4", "]", "=", "5", "\n", "v", "[", "27", ",", "4", "]", "=", "23", "\n", "v", "[", "28", ",", "4", "]", "=", "27", "\n", "v", "[", "29", ",", "4", "]", "=", "19", "\n", "v", "[", "30", ",", "4", "]", "=", "21", "\n", "v", "[", "31", ",", "4", "]", "=", "5", "\n", "v", "[", "32", ",", "4", "]", "=", "1", "\n", "v", "[", "33", ",", "4", "]", "=", "17", "\n", "v", "[", "34", ",", "4", "]", "=", "13", "\n", "v", "[", "35", ",", "4", "]", "=", "7", "\n", "v", "[", "36", ",", "4", "]", "=", "15", "\n", "v", "[", "37", ",", "4", "]", "=", "9", "\n", "v", "[", "38", ",", "4", "]", "=", "31", "\n", "v", "[", "39", ",", "4", "]", "=", "25", "\n", "v", "[", "40", ",", "4", "]", "=", "3", "\n", "v", "[", "41", ",", "4", "]", "=", "5", "\n", "v", "[", "42", ",", "4", "]", "=", "23", "\n", "v", "[", "43", ",", "4", "]", "=", "7", "\n", "v", "[", "44", ",", "4", "]", "=", "3", "\n", "v", "[", "45", ",", "4", "]", "=", "17", "\n", "v", "[", "46", ",", "4", "]", "=", "23", "\n", "v", "[", "47", ",", "4", "]", "=", "3", "\n", "v", "[", "48", ",", "4", "]", "=", "3", "\n", "v", "[", "49", ",", "4", "]", "=", "21", "\n", "v", "[", "50", ",", "4", "]", "=", "25", "\n", "v", "[", "51", ",", "4", "]", "=", "25", "\n", "v", "[", "52", ",", "4", "]", "=", "23", "\n", "v", "[", "53", ",", "4", "]", "=", "11", "\n", "v", "[", "54", ",", "4", "]", "=", "19", "\n", "v", "[", "55", ",", "4", "]", "=", "3", "\n", "v", "[", "56", ",", "4", "]", "=", "11", "\n", "v", "[", "57", ",", "4", "]", "=", "31", "\n", "v", "[", "58", ",", "4", "]", "=", "7", "\n", "v", "[", "59", ",", "4", "]", "=", "9", "\n", "v", "[", "60", ",", "4", "]", "=", "5", "\n", "v", "[", "61", ",", "4", "]", "=", "17", "\n", "v", "[", "62", ",", "4", "]", "=", "23", "\n", "v", "[", "63", ",", "4", "]", "=", "17", "\n", "v", "[", "64", ",", "4", "]", "=", "17", "\n", "v", "[", "65", ",", "4", "]", "=", "25", "\n", "v", "[", "66", ",", "4", "]", "=", "13", "\n", "v", "[", "67", ",", "4", "]", "=", "11", "\n", "v", "[", "68", ",", "4", "]", "=", "31", "\n", "v", "[", "69", ",", "4", "]", "=", "27", "\n", "v", "[", "70", ",", "4", "]", "=", "19", "\n", "v", "[", "71", ",", "4", "]", "=", "17", "\n", "v", "[", "72", ",", "4", "]", "=", "23", "\n", "v", "[", "73", ",", "4", "]", "=", "7", "\n", "v", "[", "74", ",", "4", "]", "=", "5", "\n", "v", "[", "75", ",", "4", "]", "=", "11", "\n", "v", "[", "76", ",", "4", "]", "=", "19", "\n", "v", "[", "77", ",", "4", "]", "=", "19", "\n", "v", "[", "78", ",", "4", "]", "=", "7", "\n", "v", "[", "79", ",", "4", "]", "=", "13", "\n", "v", "[", "80", ",", "4", "]", "=", "21", "\n", "v", "[", "81", ",", "4", "]", "=", "21", "\n", "v", "[", "82", ",", "4", "]", "=", "7", "\n", "v", "[", "83", ",", "4", "]", "=", "9", "\n", "v", "[", "84", ",", "4", "]", "=", "11", "\n", "v", "[", "85", ",", "4", "]", "=", "1", "\n", "v", "[", "86", ",", "4", "]", "=", "5", "\n", "v", "[", "87", ",", "4", "]", "=", "21", "\n", "v", "[", "88", ",", "4", "]", "=", "11", "\n", "v", "[", "89", ",", "4", "]", "=", "13", "\n", "v", "[", "90", ",", "4", "]", "=", "25", "\n", "v", "[", "91", ",", "4", "]", "=", "9", "\n", "v", "[", "92", ",", "4", "]", "=", "7", "\n", "v", "[", "93", ",", "4", "]", "=", "7", "\n", "v", "[", "94", ",", "4", "]", "=", "27", "\n", "v", "[", "95", ",", "4", "]", "=", "15", "\n", "v", "[", "96", ",", "4", "]", "=", "25", "\n", "v", "[", "97", ",", "4", "]", "=", "15", "\n", "v", "[", "98", ",", "4", "]", "=", "21", "\n", "v", "[", "99", ",", "4", "]", "=", "17", "\n", "v", "[", "100", ",", "4", "]", "=", "19", "\n", "v", "[", "101", ",", "4", "]", "=", "19", "\n", "v", "[", "102", ",", "4", "]", "=", "21", "\n", "v", "[", "103", ",", "4", "]", "=", "5", "\n", "v", "[", "104", ",", "4", "]", "=", "11", "\n", "v", "[", "105", ",", "4", "]", "=", "3", "\n", "v", "[", "106", ",", "4", "]", "=", "5", "\n", "v", "[", "107", ",", "4", "]", "=", "29", "\n", "v", "[", "108", ",", "4", "]", "=", "31", "\n", "v", "[", "109", ",", "4", "]", "=", "29", "\n", "v", "[", "110", ",", "4", "]", "=", "5", "\n", "v", "[", "111", ",", "4", "]", "=", "5", "\n", "v", "[", "112", ",", "4", "]", "=", "1", "\n", "v", "[", "113", ",", "4", "]", "=", "31", "\n", "v", "[", "114", ",", "4", "]", "=", "27", "\n", "v", "[", "115", ",", "4", "]", "=", "11", "\n", "v", "[", "116", ",", "4", "]", "=", "13", "\n", "v", "[", "117", ",", "4", "]", "=", "1", "\n", "v", "[", "118", ",", "4", "]", "=", "3", "\n", "v", "[", "119", ",", "4", "]", "=", "7", "\n", "v", "[", "120", ",", "4", "]", "=", "11", "\n", "v", "[", "121", ",", "4", "]", "=", "7", "\n", "v", "[", "122", ",", "4", "]", "=", "3", "\n", "v", "[", "123", ",", "4", "]", "=", "23", "\n", "v", "[", "124", ",", "4", "]", "=", "13", "\n", "v", "[", "125", ",", "4", "]", "=", "31", "\n", "v", "[", "126", ",", "4", "]", "=", "17", "\n", "v", "[", "127", ",", "4", "]", "=", "1", "\n", "v", "[", "128", ",", "4", "]", "=", "27", "\n", "v", "[", "129", ",", "4", "]", "=", "11", "\n", "v", "[", "130", ",", "4", "]", "=", "25", "\n", "v", "[", "131", ",", "4", "]", "=", "1", "\n", "v", "[", "132", ",", "4", "]", "=", "23", "\n", "v", "[", "133", ",", "4", "]", "=", "29", "\n", "v", "[", "134", ",", "4", "]", "=", "17", "\n", "v", "[", "135", ",", "4", "]", "=", "25", "\n", "v", "[", "136", ",", "4", "]", "=", "7", "\n", "v", "[", "137", ",", "4", "]", "=", "25", "\n", "v", "[", "138", ",", "4", "]", "=", "27", "\n", "v", "[", "139", ",", "4", "]", "=", "17", "\n", "v", "[", "140", ",", "4", "]", "=", "13", "\n", "v", "[", "141", ",", "4", "]", "=", "17", "\n", "v", "[", "142", ",", "4", "]", "=", "23", "\n", "v", "[", "143", ",", "4", "]", "=", "5", "\n", "v", "[", "144", ",", "4", "]", "=", "17", "\n", "v", "[", "145", ",", "4", "]", "=", "5", "\n", "v", "[", "146", ",", "4", "]", "=", "13", "\n", "v", "[", "147", ",", "4", "]", "=", "11", "\n", "v", "[", "148", ",", "4", "]", "=", "21", "\n", "v", "[", "149", ",", "4", "]", "=", "5", "\n", "v", "[", "150", ",", "4", "]", "=", "11", "\n", "v", "[", "151", ",", "4", "]", "=", "5", "\n", "v", "[", "152", ",", "4", "]", "=", "9", "\n", "v", "[", "153", ",", "4", "]", "=", "31", "\n", "v", "[", "154", ",", "4", "]", "=", "19", "\n", "v", "[", "155", ",", "4", "]", "=", "17", "\n", "v", "[", "156", ",", "4", "]", "=", "9", "\n", "v", "[", "157", ",", "4", "]", "=", "9", "\n", "v", "[", "158", ",", "4", "]", "=", "27", "\n", "v", "[", "159", ",", "4", "]", "=", "21", "\n", "v", "[", "160", ",", "4", "]", "=", "15", "\n", "v", "[", "161", ",", "4", "]", "=", "15", "\n", "v", "[", "162", ",", "4", "]", "=", "1", "\n", "v", "[", "163", ",", "4", "]", "=", "1", "\n", "v", "[", "164", ",", "4", "]", "=", "29", "\n", "v", "[", "165", ",", "4", "]", "=", "5", "\n", "v", "[", "166", ",", "4", "]", "=", "31", "\n", "v", "[", "167", ",", "4", "]", "=", "11", "\n", "v", "[", "168", ",", "4", "]", "=", "17", "\n", "v", "[", "169", ",", "4", "]", "=", "23", "\n", "v", "[", "170", ",", "4", "]", "=", "19", "\n", "v", "[", "171", ",", "4", "]", "=", "21", "\n", "v", "[", "172", ",", "4", "]", "=", "25", "\n", "v", "[", "173", ",", "4", "]", "=", "15", "\n", "v", "[", "174", ",", "4", "]", "=", "11", "\n", "v", "[", "175", ",", "4", "]", "=", "5", "\n", "v", "[", "176", ",", "4", "]", "=", "5", "\n", "v", "[", "177", ",", "4", "]", "=", "1", "\n", "v", "[", "178", ",", "4", "]", "=", "19", "\n", "v", "[", "179", ",", "4", "]", "=", "19", "\n", "v", "[", "180", ",", "4", "]", "=", "19", "\n", "v", "[", "181", ",", "4", "]", "=", "7", "\n", "v", "[", "182", ",", "4", "]", "=", "13", "\n", "v", "[", "183", ",", "4", "]", "=", "21", "\n", "v", "[", "184", ",", "4", "]", "=", "17", "\n", "v", "[", "185", ",", "4", "]", "=", "17", "\n", "v", "[", "186", ",", "4", "]", "=", "25", "\n", "v", "[", "187", ",", "4", "]", "=", "23", "\n", "v", "[", "188", ",", "4", "]", "=", "19", "\n", "v", "[", "189", ",", "4", "]", "=", "23", "\n", "v", "[", "190", ",", "4", "]", "=", "15", "\n", "v", "[", "191", ",", "4", "]", "=", "13", "\n", "v", "[", "192", ",", "4", "]", "=", "5", "\n", "v", "[", "193", ",", "4", "]", "=", "19", "\n", "v", "[", "194", ",", "4", "]", "=", "25", "\n", "v", "[", "195", ",", "4", "]", "=", "9", "\n", "v", "[", "196", ",", "4", "]", "=", "7", "\n", "v", "[", "197", ",", "4", "]", "=", "3", "\n", "v", "[", "198", ",", "4", "]", "=", "21", "\n", "v", "[", "199", ",", "4", "]", "=", "17", "\n", "v", "[", "200", ",", "4", "]", "=", "25", "\n", "v", "[", "201", ",", "4", "]", "=", "1", "\n", "v", "[", "202", ",", "4", "]", "=", "27", "\n", "v", "[", "203", ",", "4", "]", "=", "25", "\n", "v", "[", "204", ",", "4", "]", "=", "27", "\n", "v", "[", "205", ",", "4", "]", "=", "25", "\n", "v", "[", "206", ",", "4", "]", "=", "9", "\n", "v", "[", "207", ",", "4", "]", "=", "13", "\n", "v", "[", "208", ",", "4", "]", "=", "3", "\n", "v", "[", "209", ",", "4", "]", "=", "17", "\n", "v", "[", "210", ",", "4", "]", "=", "25", "\n", "v", "[", "211", ",", "4", "]", "=", "23", "\n", "v", "[", "212", ",", "4", "]", "=", "9", "\n", "v", "[", "213", ",", "4", "]", "=", "25", "\n", "v", "[", "214", ",", "4", "]", "=", "9", "\n", "v", "[", "215", ",", "4", "]", "=", "13", "\n", "v", "[", "216", ",", "4", "]", "=", "17", "\n", "v", "[", "217", ",", "4", "]", "=", "17", "\n", "v", "[", "218", ",", "4", "]", "=", "3", "\n", "v", "[", "219", ",", "4", "]", "=", "15", "\n", "v", "[", "220", ",", "4", "]", "=", "7", "\n", "v", "[", "221", ",", "4", "]", "=", "7", "\n", "v", "[", "222", ",", "4", "]", "=", "29", "\n", "v", "[", "223", ",", "4", "]", "=", "3", "\n", "v", "[", "224", ",", "4", "]", "=", "19", "\n", "v", "[", "225", ",", "4", "]", "=", "29", "\n", "v", "[", "226", ",", "4", "]", "=", "29", "\n", "v", "[", "227", ",", "4", "]", "=", "19", "\n", "v", "[", "228", ",", "4", "]", "=", "29", "\n", "v", "[", "229", ",", "4", "]", "=", "13", "\n", "v", "[", "230", ",", "4", "]", "=", "15", "\n", "v", "[", "231", ",", "4", "]", "=", "25", "\n", "v", "[", "232", ",", "4", "]", "=", "27", "\n", "v", "[", "233", ",", "4", "]", "=", "1", "\n", "v", "[", "234", ",", "4", "]", "=", "3", "\n", "v", "[", "235", ",", "4", "]", "=", "9", "\n", "v", "[", "236", ",", "4", "]", "=", "9", "\n", "v", "[", "237", ",", "4", "]", "=", "13", "\n", "v", "[", "238", ",", "4", "]", "=", "31", "\n", "v", "[", "239", ",", "4", "]", "=", "29", "\n", "v", "[", "240", ",", "4", "]", "=", "31", "\n", "v", "[", "241", ",", "4", "]", "=", "5", "\n", "v", "[", "242", ",", "4", "]", "=", "15", "\n", "v", "[", "243", ",", "4", "]", "=", "29", "\n", "v", "[", "244", ",", "4", "]", "=", "1", "\n", "v", "[", "245", ",", "4", "]", "=", "19", "\n", "v", "[", "246", ",", "4", "]", "=", "5", "\n", "v", "[", "247", ",", "4", "]", "=", "9", "\n", "v", "[", "248", ",", "4", "]", "=", "19", "\n", "v", "[", "249", ",", "4", "]", "=", "5", "\n", "v", "[", "250", ",", "4", "]", "=", "15", "\n", "v", "[", "251", ",", "4", "]", "=", "3", "\n", "v", "[", "252", ",", "4", "]", "=", "5", "\n", "v", "[", "253", ",", "4", "]", "=", "7", "\n", "v", "[", "254", ",", "4", "]", "=", "15", "\n", "v", "[", "255", ",", "4", "]", "=", "17", "\n", "v", "[", "256", ",", "4", "]", "=", "17", "\n", "v", "[", "257", ",", "4", "]", "=", "23", "\n", "v", "[", "258", ",", "4", "]", "=", "11", "\n", "v", "[", "259", ",", "4", "]", "=", "9", "\n", "v", "[", "260", ",", "4", "]", "=", "23", "\n", "v", "[", "261", ",", "4", "]", "=", "19", "\n", "v", "[", "262", ",", "4", "]", "=", "3", "\n", "v", "[", "263", ",", "4", "]", "=", "17", "\n", "v", "[", "264", ",", "4", "]", "=", "1", "\n", "v", "[", "265", ",", "4", "]", "=", "27", "\n", "v", "[", "266", ",", "4", "]", "=", "9", "\n", "v", "[", "267", ",", "4", "]", "=", "9", "\n", "v", "[", "268", ",", "4", "]", "=", "17", "\n", "v", "[", "269", ",", "4", "]", "=", "13", "\n", "v", "[", "270", ",", "4", "]", "=", "25", "\n", "v", "[", "271", ",", "4", "]", "=", "29", "\n", "v", "[", "272", ",", "4", "]", "=", "23", "\n", "v", "[", "273", ",", "4", "]", "=", "29", "\n", "v", "[", "274", ",", "4", "]", "=", "11", "\n", "v", "[", "275", ",", "4", "]", "=", "31", "\n", "v", "[", "276", ",", "4", "]", "=", "25", "\n", "v", "[", "277", ",", "4", "]", "=", "21", "\n", "v", "[", "278", ",", "4", "]", "=", "29", "\n", "v", "[", "279", ",", "4", "]", "=", "19", "\n", "v", "[", "280", ",", "4", "]", "=", "27", "\n", "v", "[", "281", ",", "4", "]", "=", "31", "\n", "v", "[", "282", ",", "4", "]", "=", "3", "\n", "v", "[", "283", ",", "4", "]", "=", "5", "\n", "v", "[", "284", ",", "4", "]", "=", "3", "\n", "v", "[", "285", ",", "4", "]", "=", "3", "\n", "v", "[", "286", ",", "4", "]", "=", "13", "\n", "v", "[", "287", ",", "4", "]", "=", "21", "\n", "v", "[", "288", ",", "4", "]", "=", "9", "\n", "v", "[", "289", ",", "4", "]", "=", "29", "\n", "v", "[", "290", ",", "4", "]", "=", "3", "\n", "v", "[", "291", ",", "4", "]", "=", "17", "\n", "v", "[", "292", ",", "4", "]", "=", "11", "\n", "v", "[", "293", ",", "4", "]", "=", "11", "\n", "v", "[", "294", ",", "4", "]", "=", "9", "\n", "v", "[", "295", ",", "4", "]", "=", "21", "\n", "v", "[", "296", ",", "4", "]", "=", "19", "\n", "v", "[", "297", ",", "4", "]", "=", "7", "\n", "v", "[", "298", ",", "4", "]", "=", "17", "\n", "v", "[", "299", ",", "4", "]", "=", "31", "\n", "v", "[", "300", ",", "4", "]", "=", "25", "\n", "v", "[", "301", ",", "4", "]", "=", "1", "\n", "v", "[", "302", ",", "4", "]", "=", "27", "\n", "v", "[", "303", ",", "4", "]", "=", "5", "\n", "v", "[", "304", ",", "4", "]", "=", "15", "\n", "v", "[", "305", ",", "4", "]", "=", "27", "\n", "v", "[", "306", ",", "4", "]", "=", "29", "\n", "v", "[", "307", ",", "4", "]", "=", "29", "\n", "v", "[", "308", ",", "4", "]", "=", "29", "\n", "v", "[", "309", ",", "4", "]", "=", "25", "\n", "v", "[", "310", ",", "4", "]", "=", "27", "\n", "v", "[", "311", ",", "4", "]", "=", "25", "\n", "v", "[", "312", ",", "4", "]", "=", "3", "\n", "v", "[", "313", ",", "4", "]", "=", "21", "\n", "v", "[", "314", ",", "4", "]", "=", "17", "\n", "v", "[", "315", ",", "4", "]", "=", "25", "\n", "v", "[", "316", ",", "4", "]", "=", "13", "\n", "v", "[", "317", ",", "4", "]", "=", "15", "\n", "v", "[", "318", ",", "4", "]", "=", "17", "\n", "v", "[", "319", ",", "4", "]", "=", "13", "\n", "v", "[", "320", ",", "4", "]", "=", "23", "\n", "v", "[", "321", ",", "4", "]", "=", "9", "\n", "v", "[", "322", ",", "4", "]", "=", "3", "\n", "v", "[", "323", ",", "4", "]", "=", "11", "\n", "v", "[", "324", ",", "4", "]", "=", "7", "\n", "v", "[", "325", ",", "4", "]", "=", "9", "\n", "v", "[", "326", ",", "4", "]", "=", "9", "\n", "v", "[", "327", ",", "4", "]", "=", "7", "\n", "v", "[", "328", ",", "4", "]", "=", "17", "\n", "v", "[", "329", ",", "4", "]", "=", "7", "\n", "v", "[", "330", ",", "4", "]", "=", "1", "\n", "v", "[", "331", ",", "4", "]", "=", "27", "\n", "v", "[", "332", ",", "4", "]", "=", "1", "\n", "v", "[", "333", ",", "4", "]", "=", "9", "\n", "v", "[", "334", ",", "4", "]", "=", "5", "\n", "v", "[", "335", ",", "4", "]", "=", "31", "\n", "v", "[", "336", ",", "4", "]", "=", "21", "\n", "v", "[", "337", ",", "4", "]", "=", "25", "\n", "v", "[", "338", ",", "4", "]", "=", "25", "\n", "v", "[", "339", ",", "4", "]", "=", "21", "\n", "v", "[", "340", ",", "4", "]", "=", "11", "\n", "v", "[", "341", ",", "4", "]", "=", "1", "\n", "v", "[", "342", ",", "4", "]", "=", "23", "\n", "v", "[", "343", ",", "4", "]", "=", "19", "\n", "v", "[", "344", ",", "4", "]", "=", "27", "\n", "v", "[", "345", ",", "4", "]", "=", "15", "\n", "v", "[", "346", ",", "4", "]", "=", "3", "\n", "v", "[", "347", ",", "4", "]", "=", "5", "\n", "v", "[", "348", ",", "4", "]", "=", "23", "\n", "v", "[", "349", ",", "4", "]", "=", "9", "\n", "v", "[", "350", ",", "4", "]", "=", "25", "\n", "v", "[", "351", ",", "4", "]", "=", "7", "\n", "v", "[", "352", ",", "4", "]", "=", "29", "\n", "v", "[", "353", ",", "4", "]", "=", "11", "\n", "v", "[", "354", ",", "4", "]", "=", "9", "\n", "v", "[", "355", ",", "4", "]", "=", "13", "\n", "v", "[", "356", ",", "4", "]", "=", "5", "\n", "v", "[", "357", ",", "4", "]", "=", "11", "\n", "v", "[", "358", ",", "4", "]", "=", "1", "\n", "v", "[", "359", ",", "4", "]", "=", "3", "\n", "v", "[", "360", ",", "4", "]", "=", "31", "\n", "v", "[", "361", ",", "4", "]", "=", "27", "\n", "v", "[", "362", ",", "4", "]", "=", "3", "\n", "v", "[", "363", ",", "4", "]", "=", "17", "\n", "v", "[", "364", ",", "4", "]", "=", "27", "\n", "v", "[", "365", ",", "4", "]", "=", "11", "\n", "v", "[", "366", ",", "4", "]", "=", "13", "\n", "v", "[", "367", ",", "4", "]", "=", "15", "\n", "v", "[", "368", ",", "4", "]", "=", "29", "\n", "v", "[", "369", ",", "4", "]", "=", "15", "\n", "v", "[", "370", ",", "4", "]", "=", "1", "\n", "v", "[", "371", ",", "4", "]", "=", "15", "\n", "v", "[", "372", ",", "4", "]", "=", "23", "\n", "v", "[", "373", ",", "4", "]", "=", "25", "\n", "v", "[", "374", ",", "4", "]", "=", "13", "\n", "v", "[", "375", ",", "4", "]", "=", "21", "\n", "v", "[", "376", ",", "4", "]", "=", "15", "\n", "v", "[", "377", ",", "4", "]", "=", "3", "\n", "v", "[", "378", ",", "4", "]", "=", "29", "\n", "v", "[", "379", ",", "4", "]", "=", "29", "\n", "v", "[", "380", ",", "4", "]", "=", "5", "\n", "v", "[", "381", ",", "4", "]", "=", "25", "\n", "v", "[", "382", ",", "4", "]", "=", "17", "\n", "v", "[", "383", ",", "4", "]", "=", "11", "\n", "v", "[", "384", ",", "4", "]", "=", "7", "\n", "v", "[", "385", ",", "4", "]", "=", "15", "\n", "v", "[", "386", ",", "4", "]", "=", "5", "\n", "v", "[", "387", ",", "4", "]", "=", "21", "\n", "v", "[", "388", ",", "4", "]", "=", "7", "\n", "v", "[", "389", ",", "4", "]", "=", "31", "\n", "v", "[", "390", ",", "4", "]", "=", "13", "\n", "v", "[", "391", ",", "4", "]", "=", "11", "\n", "v", "[", "392", ",", "4", "]", "=", "23", "\n", "v", "[", "393", ",", "4", "]", "=", "5", "\n", "v", "[", "394", ",", "4", "]", "=", "7", "\n", "v", "[", "395", ",", "4", "]", "=", "23", "\n", "v", "[", "396", ",", "4", "]", "=", "27", "\n", "v", "[", "397", ",", "4", "]", "=", "21", "\n", "v", "[", "398", ",", "4", "]", "=", "29", "\n", "v", "[", "399", ",", "4", "]", "=", "15", "\n", "v", "[", "400", ",", "4", "]", "=", "7", "\n", "v", "[", "401", ",", "4", "]", "=", "27", "\n", "v", "[", "402", ",", "4", "]", "=", "27", "\n", "v", "[", "403", ",", "4", "]", "=", "19", "\n", "v", "[", "404", ",", "4", "]", "=", "7", "\n", "v", "[", "405", ",", "4", "]", "=", "15", "\n", "v", "[", "406", ",", "4", "]", "=", "27", "\n", "v", "[", "407", ",", "4", "]", "=", "27", "\n", "v", "[", "408", ",", "4", "]", "=", "19", "\n", "v", "[", "409", ",", "4", "]", "=", "19", "\n", "v", "[", "410", ",", "4", "]", "=", "9", "\n", "v", "[", "411", ",", "4", "]", "=", "15", "\n", "v", "[", "412", ",", "4", "]", "=", "1", "\n", "v", "[", "413", ",", "4", "]", "=", "3", "\n", "v", "[", "414", ",", "4", "]", "=", "29", "\n", "v", "[", "415", ",", "4", "]", "=", "29", "\n", "v", "[", "416", ",", "4", "]", "=", "5", "\n", "v", "[", "417", ",", "4", "]", "=", "27", "\n", "v", "[", "418", ",", "4", "]", "=", "31", "\n", "v", "[", "419", ",", "4", "]", "=", "9", "\n", "v", "[", "420", ",", "4", "]", "=", "1", "\n", "v", "[", "421", ",", "4", "]", "=", "7", "\n", "v", "[", "422", ",", "4", "]", "=", "3", "\n", "v", "[", "423", ",", "4", "]", "=", "19", "\n", "v", "[", "424", ",", "4", "]", "=", "19", "\n", "v", "[", "425", ",", "4", "]", "=", "29", "\n", "v", "[", "426", ",", "4", "]", "=", "9", "\n", "v", "[", "427", ",", "4", "]", "=", "3", "\n", "v", "[", "428", ",", "4", "]", "=", "21", "\n", "v", "[", "429", ",", "4", "]", "=", "31", "\n", "v", "[", "430", ",", "4", "]", "=", "29", "\n", "v", "[", "431", ",", "4", "]", "=", "25", "\n", "v", "[", "432", ",", "4", "]", "=", "1", "\n", "v", "[", "433", ",", "4", "]", "=", "3", "\n", "v", "[", "434", ",", "4", "]", "=", "9", "\n", "v", "[", "435", ",", "4", "]", "=", "27", "\n", "v", "[", "436", ",", "4", "]", "=", "5", "\n", "v", "[", "437", ",", "4", "]", "=", "27", "\n", "v", "[", "438", ",", "4", "]", "=", "25", "\n", "v", "[", "439", ",", "4", "]", "=", "21", "\n", "v", "[", "440", ",", "4", "]", "=", "11", "\n", "v", "[", "441", ",", "4", "]", "=", "29", "\n", "v", "[", "442", ",", "4", "]", "=", "31", "\n", "v", "[", "443", ",", "4", "]", "=", "27", "\n", "v", "[", "444", ",", "4", "]", "=", "21", "\n", "v", "[", "445", ",", "4", "]", "=", "29", "\n", "v", "[", "446", ",", "4", "]", "=", "17", "\n", "v", "[", "447", ",", "4", "]", "=", "9", "\n", "v", "[", "448", ",", "4", "]", "=", "17", "\n", "v", "[", "449", ",", "4", "]", "=", "13", "\n", "v", "[", "450", ",", "4", "]", "=", "11", "\n", "v", "[", "451", ",", "4", "]", "=", "25", "\n", "v", "[", "452", ",", "4", "]", "=", "15", "\n", "v", "[", "453", ",", "4", "]", "=", "21", "\n", "v", "[", "454", ",", "4", "]", "=", "11", "\n", "v", "[", "455", ",", "4", "]", "=", "19", "\n", "v", "[", "456", ",", "4", "]", "=", "31", "\n", "v", "[", "457", ",", "4", "]", "=", "3", "\n", "v", "[", "458", ",", "4", "]", "=", "19", "\n", "v", "[", "459", ",", "4", "]", "=", "5", "\n", "v", "[", "460", ",", "4", "]", "=", "3", "\n", "v", "[", "461", ",", "4", "]", "=", "3", "\n", "v", "[", "462", ",", "4", "]", "=", "9", "\n", "v", "[", "463", ",", "4", "]", "=", "13", "\n", "v", "[", "464", ",", "4", "]", "=", "13", "\n", "v", "[", "465", ",", "4", "]", "=", "3", "\n", "v", "[", "466", ",", "4", "]", "=", "29", "\n", "v", "[", "467", ",", "4", "]", "=", "7", "\n", "v", "[", "468", ",", "4", "]", "=", "5", "\n", "v", "[", "469", ",", "4", "]", "=", "9", "\n", "v", "[", "470", ",", "4", "]", "=", "23", "\n", "v", "[", "471", ",", "4", "]", "=", "13", "\n", "v", "[", "472", ",", "4", "]", "=", "21", "\n", "v", "[", "473", ",", "4", "]", "=", "23", "\n", "v", "[", "474", ",", "4", "]", "=", "21", "\n", "v", "[", "475", ",", "4", "]", "=", "31", "\n", "v", "[", "476", ",", "4", "]", "=", "11", "\n", "v", "[", "477", ",", "4", "]", "=", "7", "\n", "v", "[", "478", ",", "4", "]", "=", "7", "\n", "v", "[", "479", ",", "4", "]", "=", "3", "\n", "v", "[", "480", ",", "4", "]", "=", "23", "\n", "v", "[", "481", ",", "4", "]", "=", "1", "\n", "v", "[", "482", ",", "4", "]", "=", "23", "\n", "v", "[", "483", ",", "4", "]", "=", "5", "\n", "v", "[", "484", ",", "4", "]", "=", "9", "\n", "v", "[", "485", ",", "4", "]", "=", "17", "\n", "v", "[", "486", ",", "4", "]", "=", "21", "\n", "v", "[", "487", ",", "4", "]", "=", "1", "\n", "v", "[", "488", ",", "4", "]", "=", "17", "\n", "v", "[", "489", ",", "4", "]", "=", "29", "\n", "v", "[", "490", ",", "4", "]", "=", "7", "\n", "v", "[", "491", ",", "4", "]", "=", "5", "\n", "v", "[", "492", ",", "4", "]", "=", "17", "\n", "v", "[", "493", ",", "4", "]", "=", "13", "\n", "v", "[", "494", ",", "4", "]", "=", "25", "\n", "v", "[", "495", ",", "4", "]", "=", "17", "\n", "v", "[", "496", ",", "4", "]", "=", "9", "\n", "v", "[", "497", ",", "4", "]", "=", "19", "\n", "v", "[", "498", ",", "4", "]", "=", "9", "\n", "v", "[", "499", ",", "4", "]", "=", "5", "\n", "v", "[", "500", ",", "4", "]", "=", "7", "\n", "v", "[", "501", ",", "4", "]", "=", "21", "\n", "v", "[", "502", ",", "4", "]", "=", "19", "\n", "v", "[", "503", ",", "4", "]", "=", "13", "\n", "v", "[", "504", ",", "4", "]", "=", "9", "\n", "v", "[", "505", ",", "4", "]", "=", "7", "\n", "v", "[", "506", ",", "4", "]", "=", "3", "\n", "v", "[", "507", ",", "4", "]", "=", "9", "\n", "v", "[", "508", ",", "4", "]", "=", "3", "\n", "v", "[", "509", ",", "4", "]", "=", "15", "\n", "v", "[", "510", ",", "4", "]", "=", "31", "\n", "v", "[", "511", ",", "4", "]", "=", "29", "\n", "v", "[", "512", ",", "4", "]", "=", "29", "\n", "v", "[", "513", ",", "4", "]", "=", "25", "\n", "v", "[", "514", ",", "4", "]", "=", "13", "\n", "v", "[", "515", ",", "4", "]", "=", "9", "\n", "v", "[", "516", ",", "4", "]", "=", "21", "\n", "v", "[", "517", ",", "4", "]", "=", "9", "\n", "v", "[", "518", ",", "4", "]", "=", "31", "\n", "v", "[", "519", ",", "4", "]", "=", "7", "\n", "v", "[", "520", ",", "4", "]", "=", "15", "\n", "v", "[", "521", ",", "4", "]", "=", "5", "\n", "v", "[", "522", ",", "4", "]", "=", "31", "\n", "v", "[", "523", ",", "4", "]", "=", "7", "\n", "v", "[", "524", ",", "4", "]", "=", "15", "\n", "v", "[", "525", ",", "4", "]", "=", "27", "\n", "v", "[", "526", ",", "4", "]", "=", "25", "\n", "v", "[", "527", ",", "4", "]", "=", "19", "\n", "v", "[", "528", ",", "4", "]", "=", "9", "\n", "v", "[", "529", ",", "4", "]", "=", "9", "\n", "v", "[", "530", ",", "4", "]", "=", "25", "\n", "v", "[", "531", ",", "4", "]", "=", "25", "\n", "v", "[", "532", ",", "4", "]", "=", "23", "\n", "v", "[", "533", ",", "4", "]", "=", "1", "\n", "v", "[", "534", ",", "4", "]", "=", "9", "\n", "v", "[", "535", ",", "4", "]", "=", "7", "\n", "v", "[", "536", ",", "4", "]", "=", "11", "\n", "v", "[", "537", ",", "4", "]", "=", "15", "\n", "v", "[", "538", ",", "4", "]", "=", "19", "\n", "v", "[", "539", ",", "4", "]", "=", "15", "\n", "v", "[", "540", ",", "4", "]", "=", "27", "\n", "v", "[", "541", ",", "4", "]", "=", "17", "\n", "v", "[", "542", ",", "4", "]", "=", "11", "\n", "v", "[", "543", ",", "4", "]", "=", "11", "\n", "v", "[", "544", ",", "4", "]", "=", "31", "\n", "v", "[", "545", ",", "4", "]", "=", "13", "\n", "v", "[", "546", ",", "4", "]", "=", "25", "\n", "v", "[", "547", ",", "4", "]", "=", "25", "\n", "v", "[", "548", ",", "4", "]", "=", "9", "\n", "v", "[", "549", ",", "4", "]", "=", "7", "\n", "v", "[", "550", ",", "4", "]", "=", "13", "\n", "v", "[", "551", ",", "4", "]", "=", "29", "\n", "v", "[", "552", ",", "4", "]", "=", "19", "\n", "v", "[", "553", ",", "4", "]", "=", "5", "\n", "v", "[", "554", ",", "4", "]", "=", "19", "\n", "v", "[", "555", ",", "4", "]", "=", "31", "\n", "v", "[", "556", ",", "4", "]", "=", "25", "\n", "v", "[", "557", ",", "4", "]", "=", "13", "\n", "v", "[", "558", ",", "4", "]", "=", "25", "\n", "v", "[", "559", ",", "4", "]", "=", "15", "\n", "v", "[", "560", ",", "4", "]", "=", "5", "\n", "v", "[", "561", ",", "4", "]", "=", "9", "\n", "v", "[", "562", ",", "4", "]", "=", "29", "\n", "v", "[", "563", ",", "4", "]", "=", "31", "\n", "v", "[", "564", ",", "4", "]", "=", "9", "\n", "v", "[", "565", ",", "4", "]", "=", "29", "\n", "v", "[", "566", ",", "4", "]", "=", "27", "\n", "v", "[", "567", ",", "4", "]", "=", "25", "\n", "v", "[", "568", ",", "4", "]", "=", "27", "\n", "v", "[", "569", ",", "4", "]", "=", "11", "\n", "v", "[", "570", ",", "4", "]", "=", "17", "\n", "v", "[", "571", ",", "4", "]", "=", "5", "\n", "v", "[", "572", ",", "4", "]", "=", "17", "\n", "v", "[", "573", ",", "4", "]", "=", "3", "\n", "v", "[", "574", ",", "4", "]", "=", "23", "\n", "v", "[", "575", ",", "4", "]", "=", "15", "\n", "v", "[", "576", ",", "4", "]", "=", "9", "\n", "v", "[", "577", ",", "4", "]", "=", "9", "\n", "v", "[", "578", ",", "4", "]", "=", "17", "\n", "v", "[", "579", ",", "4", "]", "=", "17", "\n", "v", "[", "580", ",", "4", "]", "=", "31", "\n", "v", "[", "581", ",", "4", "]", "=", "11", "\n", "v", "[", "582", ",", "4", "]", "=", "19", "\n", "v", "[", "583", ",", "4", "]", "=", "25", "\n", "v", "[", "584", ",", "4", "]", "=", "13", "\n", "v", "[", "585", ",", "4", "]", "=", "23", "\n", "v", "[", "586", ",", "4", "]", "=", "15", "\n", "v", "[", "587", ",", "4", "]", "=", "25", "\n", "v", "[", "588", ",", "4", "]", "=", "21", "\n", "v", "[", "589", ",", "4", "]", "=", "31", "\n", "v", "[", "590", ",", "4", "]", "=", "19", "\n", "v", "[", "591", ",", "4", "]", "=", "3", "\n", "v", "[", "592", ",", "4", "]", "=", "11", "\n", "v", "[", "593", ",", "4", "]", "=", "25", "\n", "v", "[", "594", ",", "4", "]", "=", "7", "\n", "v", "[", "595", ",", "4", "]", "=", "15", "\n", "v", "[", "596", ",", "4", "]", "=", "19", "\n", "v", "[", "597", ",", "4", "]", "=", "7", "\n", "v", "[", "598", ",", "4", "]", "=", "5", "\n", "v", "[", "599", ",", "4", "]", "=", "3", "\n", "v", "[", "600", ",", "4", "]", "=", "13", "\n", "v", "[", "601", ",", "4", "]", "=", "13", "\n", "v", "[", "602", ",", "4", "]", "=", "1", "\n", "v", "[", "603", ",", "4", "]", "=", "23", "\n", "v", "[", "604", ",", "4", "]", "=", "5", "\n", "v", "[", "605", ",", "4", "]", "=", "25", "\n", "v", "[", "606", ",", "4", "]", "=", "11", "\n", "v", "[", "607", ",", "4", "]", "=", "25", "\n", "v", "[", "608", ",", "4", "]", "=", "15", "\n", "v", "[", "609", ",", "4", "]", "=", "13", "\n", "v", "[", "610", ",", "4", "]", "=", "21", "\n", "v", "[", "611", ",", "4", "]", "=", "11", "\n", "v", "[", "612", ",", "4", "]", "=", "23", "\n", "v", "[", "613", ",", "4", "]", "=", "29", "\n", "v", "[", "614", ",", "4", "]", "=", "5", "\n", "v", "[", "615", ",", "4", "]", "=", "17", "\n", "v", "[", "616", ",", "4", "]", "=", "27", "\n", "v", "[", "617", ",", "4", "]", "=", "9", "\n", "v", "[", "618", ",", "4", "]", "=", "19", "\n", "v", "[", "619", ",", "4", "]", "=", "15", "\n", "v", "[", "620", ",", "4", "]", "=", "5", "\n", "v", "[", "621", ",", "4", "]", "=", "29", "\n", "v", "[", "622", ",", "4", "]", "=", "23", "\n", "v", "[", "623", ",", "4", "]", "=", "19", "\n", "v", "[", "624", ",", "4", "]", "=", "1", "\n", "v", "[", "625", ",", "4", "]", "=", "27", "\n", "v", "[", "626", ",", "4", "]", "=", "3", "\n", "v", "[", "627", ",", "4", "]", "=", "23", "\n", "v", "[", "628", ",", "4", "]", "=", "21", "\n", "v", "[", "629", ",", "4", "]", "=", "19", "\n", "v", "[", "630", ",", "4", "]", "=", "27", "\n", "v", "[", "631", ",", "4", "]", "=", "11", "\n", "v", "[", "632", ",", "4", "]", "=", "17", "\n", "v", "[", "633", ",", "4", "]", "=", "13", "\n", "v", "[", "634", ",", "4", "]", "=", "27", "\n", "v", "[", "635", ",", "4", "]", "=", "11", "\n", "v", "[", "636", ",", "4", "]", "=", "31", "\n", "v", "[", "637", ",", "4", "]", "=", "23", "\n", "v", "[", "638", ",", "4", "]", "=", "5", "\n", "v", "[", "639", ",", "4", "]", "=", "9", "\n", "v", "[", "640", ",", "4", "]", "=", "21", "\n", "v", "[", "641", ",", "4", "]", "=", "31", "\n", "v", "[", "642", ",", "4", "]", "=", "29", "\n", "v", "[", "643", ",", "4", "]", "=", "11", "\n", "v", "[", "644", ",", "4", "]", "=", "21", "\n", "v", "[", "645", ",", "4", "]", "=", "17", "\n", "v", "[", "646", ",", "4", "]", "=", "15", "\n", "v", "[", "647", ",", "4", "]", "=", "7", "\n", "v", "[", "648", ",", "4", "]", "=", "15", "\n", "v", "[", "649", ",", "4", "]", "=", "7", "\n", "v", "[", "650", ",", "4", "]", "=", "9", "\n", "v", "[", "651", ",", "4", "]", "=", "21", "\n", "v", "[", "652", ",", "4", "]", "=", "27", "\n", "v", "[", "653", ",", "4", "]", "=", "25", "\n", "v", "[", "654", ",", "4", "]", "=", "29", "\n", "v", "[", "655", ",", "4", "]", "=", "11", "\n", "v", "[", "656", ",", "4", "]", "=", "3", "\n", "v", "[", "657", ",", "4", "]", "=", "21", "\n", "v", "[", "658", ",", "4", "]", "=", "13", "\n", "v", "[", "659", ",", "4", "]", "=", "23", "\n", "v", "[", "660", ",", "4", "]", "=", "19", "\n", "v", "[", "661", ",", "4", "]", "=", "27", "\n", "v", "[", "662", ",", "4", "]", "=", "17", "\n", "v", "[", "663", ",", "4", "]", "=", "29", "\n", "v", "[", "664", ",", "4", "]", "=", "25", "\n", "v", "[", "665", ",", "4", "]", "=", "17", "\n", "v", "[", "666", ",", "4", "]", "=", "9", "\n", "v", "[", "667", ",", "4", "]", "=", "1", "\n", "v", "[", "668", ",", "4", "]", "=", "19", "\n", "v", "[", "669", ",", "4", "]", "=", "23", "\n", "v", "[", "670", ",", "4", "]", "=", "5", "\n", "v", "[", "671", ",", "4", "]", "=", "23", "\n", "v", "[", "672", ",", "4", "]", "=", "1", "\n", "v", "[", "673", ",", "4", "]", "=", "17", "\n", "v", "[", "674", ",", "4", "]", "=", "17", "\n", "v", "[", "675", ",", "4", "]", "=", "13", "\n", "v", "[", "676", ",", "4", "]", "=", "27", "\n", "v", "[", "677", ",", "4", "]", "=", "23", "\n", "v", "[", "678", ",", "4", "]", "=", "7", "\n", "v", "[", "679", ",", "4", "]", "=", "7", "\n", "v", "[", "680", ",", "4", "]", "=", "11", "\n", "v", "[", "681", ",", "4", "]", "=", "13", "\n", "v", "[", "682", ",", "4", "]", "=", "17", "\n", "v", "[", "683", ",", "4", "]", "=", "13", "\n", "v", "[", "684", ",", "4", "]", "=", "11", "\n", "v", "[", "685", ",", "4", "]", "=", "21", "\n", "v", "[", "686", ",", "4", "]", "=", "13", "\n", "v", "[", "687", ",", "4", "]", "=", "23", "\n", "v", "[", "688", ",", "4", "]", "=", "1", "\n", "v", "[", "689", ",", "4", "]", "=", "27", "\n", "v", "[", "690", ",", "4", "]", "=", "13", "\n", "v", "[", "691", ",", "4", "]", "=", "9", "\n", "v", "[", "692", ",", "4", "]", "=", "7", "\n", "v", "[", "693", ",", "4", "]", "=", "1", "\n", "v", "[", "694", ",", "4", "]", "=", "27", "\n", "v", "[", "695", ",", "4", "]", "=", "29", "\n", "v", "[", "696", ",", "4", "]", "=", "5", "\n", "v", "[", "697", ",", "4", "]", "=", "13", "\n", "v", "[", "698", ",", "4", "]", "=", "25", "\n", "v", "[", "699", ",", "4", "]", "=", "21", "\n", "v", "[", "700", ",", "4", "]", "=", "3", "\n", "v", "[", "701", ",", "4", "]", "=", "31", "\n", "v", "[", "702", ",", "4", "]", "=", "15", "\n", "v", "[", "703", ",", "4", "]", "=", "13", "\n", "v", "[", "704", ",", "4", "]", "=", "3", "\n", "v", "[", "705", ",", "4", "]", "=", "19", "\n", "v", "[", "706", ",", "4", "]", "=", "13", "\n", "v", "[", "707", ",", "4", "]", "=", "1", "\n", "v", "[", "708", ",", "4", "]", "=", "27", "\n", "v", "[", "709", ",", "4", "]", "=", "15", "\n", "v", "[", "710", ",", "4", "]", "=", "17", "\n", "v", "[", "711", ",", "4", "]", "=", "1", "\n", "v", "[", "712", ",", "4", "]", "=", "3", "\n", "v", "[", "713", ",", "4", "]", "=", "13", "\n", "v", "[", "714", ",", "4", "]", "=", "13", "\n", "v", "[", "715", ",", "4", "]", "=", "13", "\n", "v", "[", "716", ",", "4", "]", "=", "31", "\n", "v", "[", "717", ",", "4", "]", "=", "29", "\n", "v", "[", "718", ",", "4", "]", "=", "27", "\n", "v", "[", "719", ",", "4", "]", "=", "7", "\n", "v", "[", "720", ",", "4", "]", "=", "7", "\n", "v", "[", "721", ",", "4", "]", "=", "21", "\n", "v", "[", "722", ",", "4", "]", "=", "29", "\n", "v", "[", "723", ",", "4", "]", "=", "15", "\n", "v", "[", "724", ",", "4", "]", "=", "17", "\n", "v", "[", "725", ",", "4", "]", "=", "17", "\n", "v", "[", "726", ",", "4", "]", "=", "21", "\n", "v", "[", "727", ",", "4", "]", "=", "19", "\n", "v", "[", "728", ",", "4", "]", "=", "17", "\n", "v", "[", "729", ",", "4", "]", "=", "3", "\n", "v", "[", "730", ",", "4", "]", "=", "15", "\n", "v", "[", "731", ",", "4", "]", "=", "5", "\n", "v", "[", "732", ",", "4", "]", "=", "27", "\n", "v", "[", "733", ",", "4", "]", "=", "27", "\n", "v", "[", "734", ",", "4", "]", "=", "3", "\n", "v", "[", "735", ",", "4", "]", "=", "31", "\n", "v", "[", "736", ",", "4", "]", "=", "31", "\n", "v", "[", "737", ",", "4", "]", "=", "7", "\n", "v", "[", "738", ",", "4", "]", "=", "21", "\n", "v", "[", "739", ",", "4", "]", "=", "3", "\n", "v", "[", "740", ",", "4", "]", "=", "13", "\n", "v", "[", "741", ",", "4", "]", "=", "11", "\n", "v", "[", "742", ",", "4", "]", "=", "17", "\n", "v", "[", "743", ",", "4", "]", "=", "27", "\n", "v", "[", "744", ",", "4", "]", "=", "25", "\n", "v", "[", "745", ",", "4", "]", "=", "1", "\n", "v", "[", "746", ",", "4", "]", "=", "9", "\n", "v", "[", "747", ",", "4", "]", "=", "7", "\n", "v", "[", "748", ",", "4", "]", "=", "29", "\n", "v", "[", "749", ",", "4", "]", "=", "27", "\n", "v", "[", "750", ",", "4", "]", "=", "21", "\n", "v", "[", "751", ",", "4", "]", "=", "23", "\n", "v", "[", "752", ",", "4", "]", "=", "13", "\n", "v", "[", "753", ",", "4", "]", "=", "25", "\n", "v", "[", "754", ",", "4", "]", "=", "29", "\n", "v", "[", "755", ",", "4", "]", "=", "15", "\n", "v", "[", "756", ",", "4", "]", "=", "17", "\n", "v", "[", "757", ",", "4", "]", "=", "29", "\n", "v", "[", "758", ",", "4", "]", "=", "9", "\n", "v", "[", "759", ",", "4", "]", "=", "15", "\n", "v", "[", "760", ",", "4", "]", "=", "3", "\n", "v", "[", "761", ",", "4", "]", "=", "21", "\n", "v", "[", "762", ",", "4", "]", "=", "15", "\n", "v", "[", "763", ",", "4", "]", "=", "17", "\n", "v", "[", "764", ",", "4", "]", "=", "17", "\n", "v", "[", "765", ",", "4", "]", "=", "31", "\n", "v", "[", "766", ",", "4", "]", "=", "9", "\n", "v", "[", "767", ",", "4", "]", "=", "9", "\n", "v", "[", "768", ",", "4", "]", "=", "23", "\n", "v", "[", "769", ",", "4", "]", "=", "19", "\n", "v", "[", "770", ",", "4", "]", "=", "25", "\n", "v", "[", "771", ",", "4", "]", "=", "3", "\n", "v", "[", "772", ",", "4", "]", "=", "1", "\n", "v", "[", "773", ",", "4", "]", "=", "11", "\n", "v", "[", "774", ",", "4", "]", "=", "27", "\n", "v", "[", "775", ",", "4", "]", "=", "29", "\n", "v", "[", "776", ",", "4", "]", "=", "1", "\n", "v", "[", "777", ",", "4", "]", "=", "31", "\n", "v", "[", "778", ",", "4", "]", "=", "29", "\n", "v", "[", "779", ",", "4", "]", "=", "25", "\n", "v", "[", "780", ",", "4", "]", "=", "29", "\n", "v", "[", "781", ",", "4", "]", "=", "1", "\n", "v", "[", "782", ",", "4", "]", "=", "23", "\n", "v", "[", "783", ",", "4", "]", "=", "29", "\n", "v", "[", "784", ",", "4", "]", "=", "25", "\n", "v", "[", "785", ",", "4", "]", "=", "13", "\n", "v", "[", "786", ",", "4", "]", "=", "3", "\n", "v", "[", "787", ",", "4", "]", "=", "31", "\n", "v", "[", "788", ",", "4", "]", "=", "25", "\n", "v", "[", "789", ",", "4", "]", "=", "5", "\n", "v", "[", "790", ",", "4", "]", "=", "5", "\n", "v", "[", "791", ",", "4", "]", "=", "11", "\n", "v", "[", "792", ",", "4", "]", "=", "3", "\n", "v", "[", "793", ",", "4", "]", "=", "21", "\n", "v", "[", "794", ",", "4", "]", "=", "9", "\n", "v", "[", "795", ",", "4", "]", "=", "23", "\n", "v", "[", "796", ",", "4", "]", "=", "7", "\n", "v", "[", "797", ",", "4", "]", "=", "11", "\n", "v", "[", "798", ",", "4", "]", "=", "23", "\n", "v", "[", "799", ",", "4", "]", "=", "11", "\n", "v", "[", "800", ",", "4", "]", "=", "1", "\n", "v", "[", "801", ",", "4", "]", "=", "1", "\n", "v", "[", "802", ",", "4", "]", "=", "3", "\n", "v", "[", "803", ",", "4", "]", "=", "23", "\n", "v", "[", "804", ",", "4", "]", "=", "25", "\n", "v", "[", "805", ",", "4", "]", "=", "23", "\n", "v", "[", "806", ",", "4", "]", "=", "1", "\n", "v", "[", "807", ",", "4", "]", "=", "23", "\n", "v", "[", "808", ",", "4", "]", "=", "3", "\n", "v", "[", "809", ",", "4", "]", "=", "27", "\n", "v", "[", "810", ",", "4", "]", "=", "9", "\n", "v", "[", "811", ",", "4", "]", "=", "27", "\n", "v", "[", "812", ",", "4", "]", "=", "3", "\n", "v", "[", "813", ",", "4", "]", "=", "23", "\n", "v", "[", "814", ",", "4", "]", "=", "25", "\n", "v", "[", "815", ",", "4", "]", "=", "19", "\n", "v", "[", "816", ",", "4", "]", "=", "29", "\n", "v", "[", "817", ",", "4", "]", "=", "29", "\n", "v", "[", "818", ",", "4", "]", "=", "13", "\n", "v", "[", "819", ",", "4", "]", "=", "27", "\n", "v", "[", "820", ",", "4", "]", "=", "5", "\n", "v", "[", "821", ",", "4", "]", "=", "9", "\n", "v", "[", "822", ",", "4", "]", "=", "29", "\n", "v", "[", "823", ",", "4", "]", "=", "29", "\n", "v", "[", "824", ",", "4", "]", "=", "13", "\n", "v", "[", "825", ",", "4", "]", "=", "17", "\n", "v", "[", "826", ",", "4", "]", "=", "3", "\n", "v", "[", "827", ",", "4", "]", "=", "23", "\n", "v", "[", "828", ",", "4", "]", "=", "19", "\n", "v", "[", "829", ",", "4", "]", "=", "7", "\n", "v", "[", "830", ",", "4", "]", "=", "13", "\n", "v", "[", "831", ",", "4", "]", "=", "3", "\n", "v", "[", "832", ",", "4", "]", "=", "19", "\n", "v", "[", "833", ",", "4", "]", "=", "23", "\n", "v", "[", "834", ",", "4", "]", "=", "5", "\n", "v", "[", "835", ",", "4", "]", "=", "29", "\n", "v", "[", "836", ",", "4", "]", "=", "29", "\n", "v", "[", "837", ",", "4", "]", "=", "13", "\n", "v", "[", "838", ",", "4", "]", "=", "13", "\n", "v", "[", "839", ",", "4", "]", "=", "5", "\n", "v", "[", "840", ",", "4", "]", "=", "19", "\n", "v", "[", "841", ",", "4", "]", "=", "5", "\n", "v", "[", "842", ",", "4", "]", "=", "17", "\n", "v", "[", "843", ",", "4", "]", "=", "9", "\n", "v", "[", "844", ",", "4", "]", "=", "11", "\n", "v", "[", "845", ",", "4", "]", "=", "11", "\n", "v", "[", "846", ",", "4", "]", "=", "29", "\n", "v", "[", "847", ",", "4", "]", "=", "27", "\n", "v", "[", "848", ",", "4", "]", "=", "23", "\n", "v", "[", "849", ",", "4", "]", "=", "19", "\n", "v", "[", "850", ",", "4", "]", "=", "17", "\n", "v", "[", "851", ",", "4", "]", "=", "25", "\n", "v", "[", "852", ",", "4", "]", "=", "13", "\n", "v", "[", "853", ",", "4", "]", "=", "1", "\n", "v", "[", "854", ",", "4", "]", "=", "13", "\n", "v", "[", "855", ",", "4", "]", "=", "3", "\n", "v", "[", "856", ",", "4", "]", "=", "11", "\n", "v", "[", "857", ",", "4", "]", "=", "1", "\n", "v", "[", "858", ",", "4", "]", "=", "17", "\n", "v", "[", "859", ",", "4", "]", "=", "29", "\n", "v", "[", "860", ",", "4", "]", "=", "1", "\n", "v", "[", "861", ",", "4", "]", "=", "13", "\n", "v", "[", "862", ",", "4", "]", "=", "17", "\n", "v", "[", "863", ",", "4", "]", "=", "9", "\n", "v", "[", "864", ",", "4", "]", "=", "17", "\n", "v", "[", "865", ",", "4", "]", "=", "21", "\n", "v", "[", "866", ",", "4", "]", "=", "1", "\n", "v", "[", "867", ",", "4", "]", "=", "11", "\n", "v", "[", "868", ",", "4", "]", "=", "1", "\n", "v", "[", "869", ",", "4", "]", "=", "1", "\n", "v", "[", "870", ",", "4", "]", "=", "25", "\n", "v", "[", "871", ",", "4", "]", "=", "5", "\n", "v", "[", "872", ",", "4", "]", "=", "7", "\n", "v", "[", "873", ",", "4", "]", "=", "29", "\n", "v", "[", "874", ",", "4", "]", "=", "29", "\n", "v", "[", "875", ",", "4", "]", "=", "19", "\n", "v", "[", "876", ",", "4", "]", "=", "19", "\n", "v", "[", "877", ",", "4", "]", "=", "1", "\n", "v", "[", "878", ",", "4", "]", "=", "29", "\n", "v", "[", "879", ",", "4", "]", "=", "13", "\n", "v", "[", "880", ",", "4", "]", "=", "3", "\n", "v", "[", "881", ",", "4", "]", "=", "1", "\n", "v", "[", "882", ",", "4", "]", "=", "31", "\n", "v", "[", "883", ",", "4", "]", "=", "15", "\n", "v", "[", "884", ",", "4", "]", "=", "13", "\n", "v", "[", "885", ",", "4", "]", "=", "3", "\n", "v", "[", "886", ",", "4", "]", "=", "1", "\n", "v", "[", "887", ",", "4", "]", "=", "11", "\n", "v", "[", "888", ",", "4", "]", "=", "19", "\n", "v", "[", "889", ",", "4", "]", "=", "5", "\n", "v", "[", "890", ",", "4", "]", "=", "29", "\n", "v", "[", "891", ",", "4", "]", "=", "13", "\n", "v", "[", "892", ",", "4", "]", "=", "29", "\n", "v", "[", "893", ",", "4", "]", "=", "23", "\n", "v", "[", "894", ",", "4", "]", "=", "3", "\n", "v", "[", "895", ",", "4", "]", "=", "1", "\n", "v", "[", "896", ",", "4", "]", "=", "31", "\n", "v", "[", "897", ",", "4", "]", "=", "13", "\n", "v", "[", "898", ",", "4", "]", "=", "19", "\n", "v", "[", "899", ",", "4", "]", "=", "17", "\n", "v", "[", "900", ",", "4", "]", "=", "5", "\n", "v", "[", "901", ",", "4", "]", "=", "5", "\n", "v", "[", "902", ",", "4", "]", "=", "1", "\n", "v", "[", "903", ",", "4", "]", "=", "29", "\n", "v", "[", "904", ",", "4", "]", "=", "23", "\n", "v", "[", "905", ",", "4", "]", "=", "3", "\n", "v", "[", "906", ",", "4", "]", "=", "19", "\n", "v", "[", "907", ",", "4", "]", "=", "25", "\n", "v", "[", "908", ",", "4", "]", "=", "19", "\n", "v", "[", "909", ",", "4", "]", "=", "27", "\n", "v", "[", "910", ",", "4", "]", "=", "9", "\n", "v", "[", "911", ",", "4", "]", "=", "27", "\n", "v", "[", "912", ",", "4", "]", "=", "13", "\n", "v", "[", "913", ",", "4", "]", "=", "15", "\n", "v", "[", "914", ",", "4", "]", "=", "29", "\n", "v", "[", "915", ",", "4", "]", "=", "23", "\n", "v", "[", "916", ",", "4", "]", "=", "13", "\n", "v", "[", "917", ",", "4", "]", "=", "25", "\n", "v", "[", "918", ",", "4", "]", "=", "25", "\n", "v", "[", "919", ",", "4", "]", "=", "17", "\n", "v", "[", "920", ",", "4", "]", "=", "19", "\n", "v", "[", "921", ",", "4", "]", "=", "17", "\n", "v", "[", "922", ",", "4", "]", "=", "15", "\n", "v", "[", "923", ",", "4", "]", "=", "27", "\n", "v", "[", "924", ",", "4", "]", "=", "3", "\n", "v", "[", "925", ",", "4", "]", "=", "25", "\n", "v", "[", "926", ",", "4", "]", "=", "17", "\n", "v", "[", "927", ",", "4", "]", "=", "27", "\n", "v", "[", "928", ",", "4", "]", "=", "3", "\n", "v", "[", "929", ",", "4", "]", "=", "27", "\n", "v", "[", "930", ",", "4", "]", "=", "31", "\n", "v", "[", "931", ",", "4", "]", "=", "23", "\n", "v", "[", "932", ",", "4", "]", "=", "13", "\n", "v", "[", "933", ",", "4", "]", "=", "31", "\n", "v", "[", "934", ",", "4", "]", "=", "11", "\n", "v", "[", "935", ",", "4", "]", "=", "15", "\n", "v", "[", "936", ",", "4", "]", "=", "7", "\n", "v", "[", "937", ",", "4", "]", "=", "21", "\n", "v", "[", "938", ",", "4", "]", "=", "19", "\n", "v", "[", "939", ",", "4", "]", "=", "27", "\n", "v", "[", "940", ",", "4", "]", "=", "19", "\n", "v", "[", "941", ",", "4", "]", "=", "21", "\n", "v", "[", "942", ",", "4", "]", "=", "29", "\n", "v", "[", "943", ",", "4", "]", "=", "7", "\n", "v", "[", "944", ",", "4", "]", "=", "31", "\n", "v", "[", "945", ",", "4", "]", "=", "13", "\n", "v", "[", "946", ",", "4", "]", "=", "9", "\n", "v", "[", "947", ",", "4", "]", "=", "9", "\n", "v", "[", "948", ",", "4", "]", "=", "7", "\n", "v", "[", "949", ",", "4", "]", "=", "21", "\n", "v", "[", "950", ",", "4", "]", "=", "13", "\n", "v", "[", "951", ",", "4", "]", "=", "11", "\n", "v", "[", "952", ",", "4", "]", "=", "9", "\n", "v", "[", "953", ",", "4", "]", "=", "11", "\n", "v", "[", "954", ",", "4", "]", "=", "29", "\n", "v", "[", "955", ",", "4", "]", "=", "19", "\n", "v", "[", "956", ",", "4", "]", "=", "11", "\n", "v", "[", "957", ",", "4", "]", "=", "19", "\n", "v", "[", "958", ",", "4", "]", "=", "21", "\n", "v", "[", "959", ",", "4", "]", "=", "5", "\n", "v", "[", "960", ",", "4", "]", "=", "29", "\n", "v", "[", "961", ",", "4", "]", "=", "13", "\n", "v", "[", "962", ",", "4", "]", "=", "7", "\n", "v", "[", "963", ",", "4", "]", "=", "19", "\n", "v", "[", "964", ",", "4", "]", "=", "19", "\n", "v", "[", "965", ",", "4", "]", "=", "27", "\n", "v", "[", "966", ",", "4", "]", "=", "23", "\n", "v", "[", "967", ",", "4", "]", "=", "31", "\n", "v", "[", "968", ",", "4", "]", "=", "1", "\n", "v", "[", "969", ",", "4", "]", "=", "27", "\n", "v", "[", "970", ",", "4", "]", "=", "21", "\n", "v", "[", "971", ",", "4", "]", "=", "7", "\n", "v", "[", "972", ",", "4", "]", "=", "3", "\n", "v", "[", "973", ",", "4", "]", "=", "7", "\n", "v", "[", "974", ",", "4", "]", "=", "11", "\n", "v", "[", "975", ",", "4", "]", "=", "23", "\n", "v", "[", "976", ",", "4", "]", "=", "13", "\n", "v", "[", "977", ",", "4", "]", "=", "29", "\n", "v", "[", "978", ",", "4", "]", "=", "11", "\n", "v", "[", "979", ",", "4", "]", "=", "31", "\n", "v", "[", "980", ",", "4", "]", "=", "19", "\n", "v", "[", "981", ",", "4", "]", "=", "1", "\n", "v", "[", "982", ",", "4", "]", "=", "5", "\n", "v", "[", "983", ",", "4", "]", "=", "5", "\n", "v", "[", "984", ",", "4", "]", "=", "11", "\n", "v", "[", "985", ",", "4", "]", "=", "5", "\n", "v", "[", "986", ",", "4", "]", "=", "3", "\n", "v", "[", "987", ",", "4", "]", "=", "27", "\n", "v", "[", "988", ",", "4", "]", "=", "5", "\n", "v", "[", "989", ",", "4", "]", "=", "7", "\n", "v", "[", "990", ",", "4", "]", "=", "11", "\n", "v", "[", "991", ",", "4", "]", "=", "31", "\n", "v", "[", "992", ",", "4", "]", "=", "1", "\n", "v", "[", "993", ",", "4", "]", "=", "27", "\n", "v", "[", "994", ",", "4", "]", "=", "31", "\n", "v", "[", "995", ",", "4", "]", "=", "31", "\n", "v", "[", "996", ",", "4", "]", "=", "23", "\n", "v", "[", "997", ",", "4", "]", "=", "5", "\n", "v", "[", "998", ",", "4", "]", "=", "21", "\n", "v", "[", "999", ",", "4", "]", "=", "27", "\n", "v", "[", "1000", ",", "4", "]", "=", "9", "\n", "v", "[", "1001", ",", "4", "]", "=", "25", "\n", "v", "[", "1002", ",", "4", "]", "=", "3", "\n", "v", "[", "1003", ",", "4", "]", "=", "15", "\n", "v", "[", "1004", ",", "4", "]", "=", "19", "\n", "v", "[", "1005", ",", "4", "]", "=", "1", "\n", "v", "[", "1006", ",", "4", "]", "=", "19", "\n", "v", "[", "1007", ",", "4", "]", "=", "9", "\n", "v", "[", "1008", ",", "4", "]", "=", "5", "\n", "v", "[", "1009", ",", "4", "]", "=", "25", "\n", "v", "[", "1010", ",", "4", "]", "=", "21", "\n", "v", "[", "1011", ",", "4", "]", "=", "15", "\n", "v", "[", "1012", ",", "4", "]", "=", "25", "\n", "v", "[", "1013", ",", "4", "]", "=", "29", "\n", "v", "[", "1014", ",", "4", "]", "=", "15", "\n", "v", "[", "1015", ",", "4", "]", "=", "21", "\n", "v", "[", "1016", ",", "4", "]", "=", "11", "\n", "v", "[", "1017", ",", "4", "]", "=", "19", "\n", "v", "[", "1018", ",", "4", "]", "=", "15", "\n", "v", "[", "1019", ",", "4", "]", "=", "3", "\n", "v", "[", "1020", ",", "4", "]", "=", "7", "\n", "v", "[", "1021", ",", "4", "]", "=", "13", "\n", "v", "[", "1022", ",", "4", "]", "=", "11", "\n", "v", "[", "1023", ",", "4", "]", "=", "25", "\n", "v", "[", "1024", ",", "4", "]", "=", "17", "\n", "v", "[", "1025", ",", "4", "]", "=", "1", "\n", "v", "[", "1026", ",", "4", "]", "=", "5", "\n", "v", "[", "1027", ",", "4", "]", "=", "31", "\n", "v", "[", "1028", ",", "4", "]", "=", "13", "\n", "v", "[", "1029", ",", "4", "]", "=", "29", "\n", "v", "[", "1030", ",", "4", "]", "=", "23", "\n", "v", "[", "1031", ",", "4", "]", "=", "9", "\n", "v", "[", "1032", ",", "4", "]", "=", "5", "\n", "v", "[", "1033", ",", "4", "]", "=", "29", "\n", "v", "[", "1034", ",", "4", "]", "=", "7", "\n", "v", "[", "1035", ",", "4", "]", "=", "17", "\n", "v", "[", "1036", ",", "4", "]", "=", "27", "\n", "v", "[", "1037", ",", "4", "]", "=", "7", "\n", "v", "[", "1038", ",", "4", "]", "=", "17", "\n", "v", "[", "1039", ",", "4", "]", "=", "31", "\n", "v", "[", "1040", ",", "4", "]", "=", "9", "\n", "v", "[", "1041", ",", "4", "]", "=", "31", "\n", "v", "[", "1042", ",", "4", "]", "=", "9", "\n", "v", "[", "1043", ",", "4", "]", "=", "9", "\n", "v", "[", "1044", ",", "4", "]", "=", "7", "\n", "v", "[", "1045", ",", "4", "]", "=", "21", "\n", "v", "[", "1046", ",", "4", "]", "=", "3", "\n", "v", "[", "1047", ",", "4", "]", "=", "3", "\n", "v", "[", "1048", ",", "4", "]", "=", "3", "\n", "v", "[", "1049", ",", "4", "]", "=", "9", "\n", "v", "[", "1050", ",", "4", "]", "=", "11", "\n", "v", "[", "1051", ",", "4", "]", "=", "21", "\n", "v", "[", "1052", ",", "4", "]", "=", "11", "\n", "v", "[", "1053", ",", "4", "]", "=", "31", "\n", "v", "[", "1054", ",", "4", "]", "=", "9", "\n", "v", "[", "1055", ",", "4", "]", "=", "25", "\n", "v", "[", "1056", ",", "4", "]", "=", "5", "\n", "v", "[", "1057", ",", "4", "]", "=", "1", "\n", "v", "[", "1058", ",", "4", "]", "=", "31", "\n", "v", "[", "1059", ",", "4", "]", "=", "13", "\n", "v", "[", "1060", ",", "4", "]", "=", "29", "\n", "v", "[", "1061", ",", "4", "]", "=", "9", "\n", "v", "[", "1062", ",", "4", "]", "=", "29", "\n", "v", "[", "1063", ",", "4", "]", "=", "1", "\n", "v", "[", "1064", ",", "4", "]", "=", "11", "\n", "v", "[", "1065", ",", "4", "]", "=", "19", "\n", "v", "[", "1066", ",", "4", "]", "=", "7", "\n", "v", "[", "1067", ",", "4", "]", "=", "27", "\n", "v", "[", "1068", ",", "4", "]", "=", "13", "\n", "v", "[", "1069", ",", "4", "]", "=", "31", "\n", "v", "[", "1070", ",", "4", "]", "=", "7", "\n", "v", "[", "1071", ",", "4", "]", "=", "31", "\n", "v", "[", "1072", ",", "4", "]", "=", "7", "\n", "v", "[", "1073", ",", "4", "]", "=", "25", "\n", "v", "[", "1074", ",", "4", "]", "=", "23", "\n", "v", "[", "1075", ",", "4", "]", "=", "21", "\n", "v", "[", "1076", ",", "4", "]", "=", "29", "\n", "v", "[", "1077", ",", "4", "]", "=", "11", "\n", "v", "[", "1078", ",", "4", "]", "=", "11", "\n", "v", "[", "1079", ",", "4", "]", "=", "13", "\n", "v", "[", "1080", ",", "4", "]", "=", "11", "\n", "v", "[", "1081", ",", "4", "]", "=", "27", "\n", "v", "[", "1082", ",", "4", "]", "=", "1", "\n", "v", "[", "1083", ",", "4", "]", "=", "23", "\n", "v", "[", "1084", ",", "4", "]", "=", "31", "\n", "v", "[", "1085", ",", "4", "]", "=", "21", "\n", "v", "[", "1086", ",", "4", "]", "=", "23", "\n", "v", "[", "1087", ",", "4", "]", "=", "21", "\n", "v", "[", "1088", ",", "4", "]", "=", "19", "\n", "v", "[", "1089", ",", "4", "]", "=", "31", "\n", "v", "[", "1090", ",", "4", "]", "=", "5", "\n", "v", "[", "1091", ",", "4", "]", "=", "31", "\n", "v", "[", "1092", ",", "4", "]", "=", "25", "\n", "v", "[", "1093", ",", "4", "]", "=", "25", "\n", "v", "[", "1094", ",", "4", "]", "=", "19", "\n", "v", "[", "1095", ",", "4", "]", "=", "17", "\n", "v", "[", "1096", ",", "4", "]", "=", "11", "\n", "v", "[", "1097", ",", "4", "]", "=", "25", "\n", "v", "[", "1098", ",", "4", "]", "=", "7", "\n", "v", "[", "1099", ",", "4", "]", "=", "13", "\n", "v", "[", "1100", ",", "4", "]", "=", "1", "\n", "v", "[", "1101", ",", "4", "]", "=", "29", "\n", "v", "[", "1102", ",", "4", "]", "=", "17", "\n", "v", "[", "1103", ",", "4", "]", "=", "23", "\n", "v", "[", "1104", ",", "4", "]", "=", "15", "\n", "v", "[", "1105", ",", "4", "]", "=", "7", "\n", "v", "[", "1106", ",", "4", "]", "=", "29", "\n", "v", "[", "1107", ",", "4", "]", "=", "17", "\n", "v", "[", "1108", ",", "4", "]", "=", "13", "\n", "v", "[", "1109", ",", "4", "]", "=", "3", "\n", "v", "[", "1110", ",", "4", "]", "=", "17", "\n", "\n", "v", "[", "13", ",", "5", "]", "=", "37", "\n", "v", "[", "14", ",", "5", "]", "=", "33", "\n", "v", "[", "15", ",", "5", "]", "=", "7", "\n", "v", "[", "16", ",", "5", "]", "=", "5", "\n", "v", "[", "17", ",", "5", "]", "=", "11", "\n", "v", "[", "18", ",", "5", "]", "=", "39", "\n", "v", "[", "19", ",", "5", "]", "=", "63", "\n", "v", "[", "20", ",", "5", "]", "=", "59", "\n", "v", "[", "21", ",", "5", "]", "=", "17", "\n", "v", "[", "22", ",", "5", "]", "=", "15", "\n", "v", "[", "23", ",", "5", "]", "=", "23", "\n", "v", "[", "24", ",", "5", "]", "=", "29", "\n", "v", "[", "25", ",", "5", "]", "=", "3", "\n", "v", "[", "26", ",", "5", "]", "=", "21", "\n", "v", "[", "27", ",", "5", "]", "=", "13", "\n", "v", "[", "28", ",", "5", "]", "=", "31", "\n", "v", "[", "29", ",", "5", "]", "=", "25", "\n", "v", "[", "30", ",", "5", "]", "=", "9", "\n", "v", "[", "31", ",", "5", "]", "=", "49", "\n", "v", "[", "32", ",", "5", "]", "=", "33", "\n", "v", "[", "33", ",", "5", "]", "=", "19", "\n", "v", "[", "34", ",", "5", "]", "=", "29", "\n", "v", "[", "35", ",", "5", "]", "=", "11", "\n", "v", "[", "36", ",", "5", "]", "=", "19", "\n", "v", "[", "37", ",", "5", "]", "=", "27", "\n", "v", "[", "38", ",", "5", "]", "=", "15", "\n", "v", "[", "39", ",", "5", "]", "=", "25", "\n", "v", "[", "40", ",", "5", "]", "=", "63", "\n", "v", "[", "41", ",", "5", "]", "=", "55", "\n", "v", "[", "42", ",", "5", "]", "=", "17", "\n", "v", "[", "43", ",", "5", "]", "=", "63", "\n", "v", "[", "44", ",", "5", "]", "=", "49", "\n", "v", "[", "45", ",", "5", "]", "=", "19", "\n", "v", "[", "46", ",", "5", "]", "=", "41", "\n", "v", "[", "47", ",", "5", "]", "=", "59", "\n", "v", "[", "48", ",", "5", "]", "=", "3", "\n", "v", "[", "49", ",", "5", "]", "=", "57", "\n", "v", "[", "50", ",", "5", "]", "=", "33", "\n", "v", "[", "51", ",", "5", "]", "=", "49", "\n", "v", "[", "52", ",", "5", "]", "=", "53", "\n", "v", "[", "53", ",", "5", "]", "=", "57", "\n", "v", "[", "54", ",", "5", "]", "=", "57", "\n", "v", "[", "55", ",", "5", "]", "=", "39", "\n", "v", "[", "56", ",", "5", "]", "=", "21", "\n", "v", "[", "57", ",", "5", "]", "=", "7", "\n", "v", "[", "58", ",", "5", "]", "=", "53", "\n", "v", "[", "59", ",", "5", "]", "=", "9", "\n", "v", "[", "60", ",", "5", "]", "=", "55", "\n", "v", "[", "61", ",", "5", "]", "=", "15", "\n", "v", "[", "62", ",", "5", "]", "=", "59", "\n", "v", "[", "63", ",", "5", "]", "=", "19", "\n", "v", "[", "64", ",", "5", "]", "=", "49", "\n", "v", "[", "65", ",", "5", "]", "=", "31", "\n", "v", "[", "66", ",", "5", "]", "=", "3", "\n", "v", "[", "67", ",", "5", "]", "=", "39", "\n", "v", "[", "68", ",", "5", "]", "=", "5", "\n", "v", "[", "69", ",", "5", "]", "=", "5", "\n", "v", "[", "70", ",", "5", "]", "=", "41", "\n", "v", "[", "71", ",", "5", "]", "=", "9", "\n", "v", "[", "72", ",", "5", "]", "=", "19", "\n", "v", "[", "73", ",", "5", "]", "=", "9", "\n", "v", "[", "74", ",", "5", "]", "=", "57", "\n", "v", "[", "75", ",", "5", "]", "=", "25", "\n", "v", "[", "76", ",", "5", "]", "=", "1", "\n", "v", "[", "77", ",", "5", "]", "=", "15", "\n", "v", "[", "78", ",", "5", "]", "=", "51", "\n", "v", "[", "79", ",", "5", "]", "=", "11", "\n", "v", "[", "80", ",", "5", "]", "=", "19", "\n", "v", "[", "81", ",", "5", "]", "=", "61", "\n", "v", "[", "82", ",", "5", "]", "=", "53", "\n", "v", "[", "83", ",", "5", "]", "=", "29", "\n", "v", "[", "84", ",", "5", "]", "=", "19", "\n", "v", "[", "85", ",", "5", "]", "=", "11", "\n", "v", "[", "86", ",", "5", "]", "=", "9", "\n", "v", "[", "87", ",", "5", "]", "=", "21", "\n", "v", "[", "88", ",", "5", "]", "=", "19", "\n", "v", "[", "89", ",", "5", "]", "=", "43", "\n", "v", "[", "90", ",", "5", "]", "=", "13", "\n", "v", "[", "91", ",", "5", "]", "=", "13", "\n", "v", "[", "92", ",", "5", "]", "=", "41", "\n", "v", "[", "93", ",", "5", "]", "=", "25", "\n", "v", "[", "94", ",", "5", "]", "=", "31", "\n", "v", "[", "95", ",", "5", "]", "=", "9", "\n", "v", "[", "96", ",", "5", "]", "=", "11", "\n", "v", "[", "97", ",", "5", "]", "=", "19", "\n", "v", "[", "98", ",", "5", "]", "=", "5", "\n", "v", "[", "99", ",", "5", "]", "=", "53", "\n", "v", "[", "100", ",", "5", "]", "=", "37", "\n", "v", "[", "101", ",", "5", "]", "=", "7", "\n", "v", "[", "102", ",", "5", "]", "=", "51", "\n", "v", "[", "103", ",", "5", "]", "=", "45", "\n", "v", "[", "104", ",", "5", "]", "=", "7", "\n", "v", "[", "105", ",", "5", "]", "=", "7", "\n", "v", "[", "106", ",", "5", "]", "=", "61", "\n", "v", "[", "107", ",", "5", "]", "=", "23", "\n", "v", "[", "108", ",", "5", "]", "=", "45", "\n", "v", "[", "109", ",", "5", "]", "=", "7", "\n", "v", "[", "110", ",", "5", "]", "=", "59", "\n", "v", "[", "111", ",", "5", "]", "=", "41", "\n", "v", "[", "112", ",", "5", "]", "=", "1", "\n", "v", "[", "113", ",", "5", "]", "=", "29", "\n", "v", "[", "114", ",", "5", "]", "=", "61", "\n", "v", "[", "115", ",", "5", "]", "=", "37", "\n", "v", "[", "116", ",", "5", "]", "=", "27", "\n", "v", "[", "117", ",", "5", "]", "=", "47", "\n", "v", "[", "118", ",", "5", "]", "=", "15", "\n", "v", "[", "119", ",", "5", "]", "=", "31", "\n", "v", "[", "120", ",", "5", "]", "=", "35", "\n", "v", "[", "121", ",", "5", "]", "=", "31", "\n", "v", "[", "122", ",", "5", "]", "=", "17", "\n", "v", "[", "123", ",", "5", "]", "=", "51", "\n", "v", "[", "124", ",", "5", "]", "=", "13", "\n", "v", "[", "125", ",", "5", "]", "=", "25", "\n", "v", "[", "126", ",", "5", "]", "=", "45", "\n", "v", "[", "127", ",", "5", "]", "=", "5", "\n", "v", "[", "128", ",", "5", "]", "=", "5", "\n", "v", "[", "129", ",", "5", "]", "=", "33", "\n", "v", "[", "130", ",", "5", "]", "=", "39", "\n", "v", "[", "131", ",", "5", "]", "=", "5", "\n", "v", "[", "132", ",", "5", "]", "=", "47", "\n", "v", "[", "133", ",", "5", "]", "=", "29", "\n", "v", "[", "134", ",", "5", "]", "=", "35", "\n", "v", "[", "135", ",", "5", "]", "=", "47", "\n", "v", "[", "136", ",", "5", "]", "=", "63", "\n", "v", "[", "137", ",", "5", "]", "=", "45", "\n", "v", "[", "138", ",", "5", "]", "=", "37", "\n", "v", "[", "139", ",", "5", "]", "=", "47", "\n", "v", "[", "140", ",", "5", "]", "=", "59", "\n", "v", "[", "141", ",", "5", "]", "=", "21", "\n", "v", "[", "142", ",", "5", "]", "=", "59", "\n", "v", "[", "143", ",", "5", "]", "=", "33", "\n", "v", "[", "144", ",", "5", "]", "=", "51", "\n", "v", "[", "145", ",", "5", "]", "=", "9", "\n", "v", "[", "146", ",", "5", "]", "=", "27", "\n", "v", "[", "147", ",", "5", "]", "=", "13", "\n", "v", "[", "148", ",", "5", "]", "=", "25", "\n", "v", "[", "149", ",", "5", "]", "=", "43", "\n", "v", "[", "150", ",", "5", "]", "=", "3", "\n", "v", "[", "151", ",", "5", "]", "=", "17", "\n", "v", "[", "152", ",", "5", "]", "=", "21", "\n", "v", "[", "153", ",", "5", "]", "=", "59", "\n", "v", "[", "154", ",", "5", "]", "=", "61", "\n", "v", "[", "155", ",", "5", "]", "=", "27", "\n", "v", "[", "156", ",", "5", "]", "=", "47", "\n", "v", "[", "157", ",", "5", "]", "=", "57", "\n", "v", "[", "158", ",", "5", "]", "=", "11", "\n", "v", "[", "159", ",", "5", "]", "=", "17", "\n", "v", "[", "160", ",", "5", "]", "=", "39", "\n", "v", "[", "161", ",", "5", "]", "=", "1", "\n", "v", "[", "162", ",", "5", "]", "=", "63", "\n", "v", "[", "163", ",", "5", "]", "=", "21", "\n", "v", "[", "164", ",", "5", "]", "=", "59", "\n", "v", "[", "165", ",", "5", "]", "=", "17", "\n", "v", "[", "166", ",", "5", "]", "=", "13", "\n", "v", "[", "167", ",", "5", "]", "=", "31", "\n", "v", "[", "168", ",", "5", "]", "=", "3", "\n", "v", "[", "169", ",", "5", "]", "=", "31", "\n", "v", "[", "170", ",", "5", "]", "=", "7", "\n", "v", "[", "171", ",", "5", "]", "=", "9", "\n", "v", "[", "172", ",", "5", "]", "=", "27", "\n", "v", "[", "173", ",", "5", "]", "=", "37", "\n", "v", "[", "174", ",", "5", "]", "=", "23", "\n", "v", "[", "175", ",", "5", "]", "=", "31", "\n", "v", "[", "176", ",", "5", "]", "=", "9", "\n", "v", "[", "177", ",", "5", "]", "=", "45", "\n", "v", "[", "178", ",", "5", "]", "=", "43", "\n", "v", "[", "179", ",", "5", "]", "=", "31", "\n", "v", "[", "180", ",", "5", "]", "=", "63", "\n", "v", "[", "181", ",", "5", "]", "=", "21", "\n", "v", "[", "182", ",", "5", "]", "=", "39", "\n", "v", "[", "183", ",", "5", "]", "=", "51", "\n", "v", "[", "184", ",", "5", "]", "=", "27", "\n", "v", "[", "185", ",", "5", "]", "=", "7", "\n", "v", "[", "186", ",", "5", "]", "=", "53", "\n", "v", "[", "187", ",", "5", "]", "=", "11", "\n", "v", "[", "188", ",", "5", "]", "=", "1", "\n", "v", "[", "189", ",", "5", "]", "=", "59", "\n", "v", "[", "190", ",", "5", "]", "=", "39", "\n", "v", "[", "191", ",", "5", "]", "=", "23", "\n", "v", "[", "192", ",", "5", "]", "=", "49", "\n", "v", "[", "193", ",", "5", "]", "=", "23", "\n", "v", "[", "194", ",", "5", "]", "=", "7", "\n", "v", "[", "195", ",", "5", "]", "=", "55", "\n", "v", "[", "196", ",", "5", "]", "=", "59", "\n", "v", "[", "197", ",", "5", "]", "=", "3", "\n", "v", "[", "198", ",", "5", "]", "=", "19", "\n", "v", "[", "199", ",", "5", "]", "=", "35", "\n", "v", "[", "200", ",", "5", "]", "=", "13", "\n", "v", "[", "201", ",", "5", "]", "=", "9", "\n", "v", "[", "202", ",", "5", "]", "=", "13", "\n", "v", "[", "203", ",", "5", "]", "=", "15", "\n", "v", "[", "204", ",", "5", "]", "=", "23", "\n", "v", "[", "205", ",", "5", "]", "=", "9", "\n", "v", "[", "206", ",", "5", "]", "=", "7", "\n", "v", "[", "207", ",", "5", "]", "=", "43", "\n", "v", "[", "208", ",", "5", "]", "=", "55", "\n", "v", "[", "209", ",", "5", "]", "=", "3", "\n", "v", "[", "210", ",", "5", "]", "=", "19", "\n", "v", "[", "211", ",", "5", "]", "=", "9", "\n", "v", "[", "212", ",", "5", "]", "=", "27", "\n", "v", "[", "213", ",", "5", "]", "=", "33", "\n", "v", "[", "214", ",", "5", "]", "=", "27", "\n", "v", "[", "215", ",", "5", "]", "=", "49", "\n", "v", "[", "216", ",", "5", "]", "=", "23", "\n", "v", "[", "217", ",", "5", "]", "=", "47", "\n", "v", "[", "218", ",", "5", "]", "=", "19", "\n", "v", "[", "219", ",", "5", "]", "=", "7", "\n", "v", "[", "220", ",", "5", "]", "=", "11", "\n", "v", "[", "221", ",", "5", "]", "=", "55", "\n", "v", "[", "222", ",", "5", "]", "=", "27", "\n", "v", "[", "223", ",", "5", "]", "=", "35", "\n", "v", "[", "224", ",", "5", "]", "=", "5", "\n", "v", "[", "225", ",", "5", "]", "=", "5", "\n", "v", "[", "226", ",", "5", "]", "=", "55", "\n", "v", "[", "227", ",", "5", "]", "=", "35", "\n", "v", "[", "228", ",", "5", "]", "=", "37", "\n", "v", "[", "229", ",", "5", "]", "=", "9", "\n", "v", "[", "230", ",", "5", "]", "=", "33", "\n", "v", "[", "231", ",", "5", "]", "=", "29", "\n", "v", "[", "232", ",", "5", "]", "=", "47", "\n", "v", "[", "233", ",", "5", "]", "=", "25", "\n", "v", "[", "234", ",", "5", "]", "=", "11", "\n", "v", "[", "235", ",", "5", "]", "=", "47", "\n", "v", "[", "236", ",", "5", "]", "=", "53", "\n", "v", "[", "237", ",", "5", "]", "=", "61", "\n", "v", "[", "238", ",", "5", "]", "=", "59", "\n", "v", "[", "239", ",", "5", "]", "=", "3", "\n", "v", "[", "240", ",", "5", "]", "=", "53", "\n", "v", "[", "241", ",", "5", "]", "=", "47", "\n", "v", "[", "242", ",", "5", "]", "=", "5", "\n", "v", "[", "243", ",", "5", "]", "=", "19", "\n", "v", "[", "244", ",", "5", "]", "=", "59", "\n", "v", "[", "245", ",", "5", "]", "=", "5", "\n", "v", "[", "246", ",", "5", "]", "=", "47", "\n", "v", "[", "247", ",", "5", "]", "=", "23", "\n", "v", "[", "248", ",", "5", "]", "=", "45", "\n", "v", "[", "249", ",", "5", "]", "=", "53", "\n", "v", "[", "250", ",", "5", "]", "=", "3", "\n", "v", "[", "251", ",", "5", "]", "=", "49", "\n", "v", "[", "252", ",", "5", "]", "=", "61", "\n", "v", "[", "253", ",", "5", "]", "=", "47", "\n", "v", "[", "254", ",", "5", "]", "=", "39", "\n", "v", "[", "255", ",", "5", "]", "=", "29", "\n", "v", "[", "256", ",", "5", "]", "=", "17", "\n", "v", "[", "257", ",", "5", "]", "=", "57", "\n", "v", "[", "258", ",", "5", "]", "=", "5", "\n", "v", "[", "259", ",", "5", "]", "=", "17", "\n", "v", "[", "260", ",", "5", "]", "=", "31", "\n", "v", "[", "261", ",", "5", "]", "=", "23", "\n", "v", "[", "262", ",", "5", "]", "=", "41", "\n", "v", "[", "263", ",", "5", "]", "=", "39", "\n", "v", "[", "264", ",", "5", "]", "=", "5", "\n", "v", "[", "265", ",", "5", "]", "=", "27", "\n", "v", "[", "266", ",", "5", "]", "=", "7", "\n", "v", "[", "267", ",", "5", "]", "=", "29", "\n", "v", "[", "268", ",", "5", "]", "=", "29", "\n", "v", "[", "269", ",", "5", "]", "=", "33", "\n", "v", "[", "270", ",", "5", "]", "=", "31", "\n", "v", "[", "271", ",", "5", "]", "=", "41", "\n", "v", "[", "272", ",", "5", "]", "=", "31", "\n", "v", "[", "273", ",", "5", "]", "=", "29", "\n", "v", "[", "274", ",", "5", "]", "=", "17", "\n", "v", "[", "275", ",", "5", "]", "=", "29", "\n", "v", "[", "276", ",", "5", "]", "=", "29", "\n", "v", "[", "277", ",", "5", "]", "=", "9", "\n", "v", "[", "278", ",", "5", "]", "=", "9", "\n", "v", "[", "279", ",", "5", "]", "=", "31", "\n", "v", "[", "280", ",", "5", "]", "=", "27", "\n", "v", "[", "281", ",", "5", "]", "=", "53", "\n", "v", "[", "282", ",", "5", "]", "=", "35", "\n", "v", "[", "283", ",", "5", "]", "=", "5", "\n", "v", "[", "284", ",", "5", "]", "=", "61", "\n", "v", "[", "285", ",", "5", "]", "=", "1", "\n", "v", "[", "286", ",", "5", "]", "=", "49", "\n", "v", "[", "287", ",", "5", "]", "=", "13", "\n", "v", "[", "288", ",", "5", "]", "=", "57", "\n", "v", "[", "289", ",", "5", "]", "=", "29", "\n", "v", "[", "290", ",", "5", "]", "=", "5", "\n", "v", "[", "291", ",", "5", "]", "=", "21", "\n", "v", "[", "292", ",", "5", "]", "=", "43", "\n", "v", "[", "293", ",", "5", "]", "=", "25", "\n", "v", "[", "294", ",", "5", "]", "=", "57", "\n", "v", "[", "295", ",", "5", "]", "=", "49", "\n", "v", "[", "296", ",", "5", "]", "=", "37", "\n", "v", "[", "297", ",", "5", "]", "=", "27", "\n", "v", "[", "298", ",", "5", "]", "=", "11", "\n", "v", "[", "299", ",", "5", "]", "=", "61", "\n", "v", "[", "300", ",", "5", "]", "=", "37", "\n", "v", "[", "301", ",", "5", "]", "=", "49", "\n", "v", "[", "302", ",", "5", "]", "=", "5", "\n", "v", "[", "303", ",", "5", "]", "=", "63", "\n", "v", "[", "304", ",", "5", "]", "=", "63", "\n", "v", "[", "305", ",", "5", "]", "=", "3", "\n", "v", "[", "306", ",", "5", "]", "=", "45", "\n", "v", "[", "307", ",", "5", "]", "=", "37", "\n", "v", "[", "308", ",", "5", "]", "=", "63", "\n", "v", "[", "309", ",", "5", "]", "=", "21", "\n", "v", "[", "310", ",", "5", "]", "=", "21", "\n", "v", "[", "311", ",", "5", "]", "=", "19", "\n", "v", "[", "312", ",", "5", "]", "=", "27", "\n", "v", "[", "313", ",", "5", "]", "=", "59", "\n", "v", "[", "314", ",", "5", "]", "=", "21", "\n", "v", "[", "315", ",", "5", "]", "=", "45", "\n", "v", "[", "316", ",", "5", "]", "=", "23", "\n", "v", "[", "317", ",", "5", "]", "=", "13", "\n", "v", "[", "318", ",", "5", "]", "=", "15", "\n", "v", "[", "319", ",", "5", "]", "=", "3", "\n", "v", "[", "320", ",", "5", "]", "=", "43", "\n", "v", "[", "321", ",", "5", "]", "=", "63", "\n", "v", "[", "322", ",", "5", "]", "=", "39", "\n", "v", "[", "323", ",", "5", "]", "=", "19", "\n", "v", "[", "324", ",", "5", "]", "=", "63", "\n", "v", "[", "325", ",", "5", "]", "=", "31", "\n", "v", "[", "326", ",", "5", "]", "=", "41", "\n", "v", "[", "327", ",", "5", "]", "=", "41", "\n", "v", "[", "328", ",", "5", "]", "=", "15", "\n", "v", "[", "329", ",", "5", "]", "=", "43", "\n", "v", "[", "330", ",", "5", "]", "=", "63", "\n", "v", "[", "331", ",", "5", "]", "=", "53", "\n", "v", "[", "332", ",", "5", "]", "=", "1", "\n", "v", "[", "333", ",", "5", "]", "=", "63", "\n", "v", "[", "334", ",", "5", "]", "=", "31", "\n", "v", "[", "335", ",", "5", "]", "=", "7", "\n", "v", "[", "336", ",", "5", "]", "=", "17", "\n", "v", "[", "337", ",", "5", "]", "=", "11", "\n", "v", "[", "338", ",", "5", "]", "=", "61", "\n", "v", "[", "339", ",", "5", "]", "=", "31", "\n", "v", "[", "340", ",", "5", "]", "=", "51", "\n", "v", "[", "341", ",", "5", "]", "=", "37", "\n", "v", "[", "342", ",", "5", "]", "=", "29", "\n", "v", "[", "343", ",", "5", "]", "=", "59", "\n", "v", "[", "344", ",", "5", "]", "=", "25", "\n", "v", "[", "345", ",", "5", "]", "=", "63", "\n", "v", "[", "346", ",", "5", "]", "=", "59", "\n", "v", "[", "347", ",", "5", "]", "=", "47", "\n", "v", "[", "348", ",", "5", "]", "=", "15", "\n", "v", "[", "349", ",", "5", "]", "=", "27", "\n", "v", "[", "350", ",", "5", "]", "=", "19", "\n", "v", "[", "351", ",", "5", "]", "=", "29", "\n", "v", "[", "352", ",", "5", "]", "=", "45", "\n", "v", "[", "353", ",", "5", "]", "=", "35", "\n", "v", "[", "354", ",", "5", "]", "=", "55", "\n", "v", "[", "355", ",", "5", "]", "=", "39", "\n", "v", "[", "356", ",", "5", "]", "=", "19", "\n", "v", "[", "357", ",", "5", "]", "=", "43", "\n", "v", "[", "358", ",", "5", "]", "=", "21", "\n", "v", "[", "359", ",", "5", "]", "=", "19", "\n", "v", "[", "360", ",", "5", "]", "=", "13", "\n", "v", "[", "361", ",", "5", "]", "=", "17", "\n", "v", "[", "362", ",", "5", "]", "=", "51", "\n", "v", "[", "363", ",", "5", "]", "=", "37", "\n", "v", "[", "364", ",", "5", "]", "=", "5", "\n", "v", "[", "365", ",", "5", "]", "=", "33", "\n", "v", "[", "366", ",", "5", "]", "=", "35", "\n", "v", "[", "367", ",", "5", "]", "=", "49", "\n", "v", "[", "368", ",", "5", "]", "=", "25", "\n", "v", "[", "369", ",", "5", "]", "=", "45", "\n", "v", "[", "370", ",", "5", "]", "=", "1", "\n", "v", "[", "371", ",", "5", "]", "=", "63", "\n", "v", "[", "372", ",", "5", "]", "=", "47", "\n", "v", "[", "373", ",", "5", "]", "=", "9", "\n", "v", "[", "374", ",", "5", "]", "=", "63", "\n", "v", "[", "375", ",", "5", "]", "=", "15", "\n", "v", "[", "376", ",", "5", "]", "=", "25", "\n", "v", "[", "377", ",", "5", "]", "=", "25", "\n", "v", "[", "378", ",", "5", "]", "=", "15", "\n", "v", "[", "379", ",", "5", "]", "=", "41", "\n", "v", "[", "380", ",", "5", "]", "=", "13", "\n", "v", "[", "381", ",", "5", "]", "=", "3", "\n", "v", "[", "382", ",", "5", "]", "=", "19", "\n", "v", "[", "383", ",", "5", "]", "=", "51", "\n", "v", "[", "384", ",", "5", "]", "=", "49", "\n", "v", "[", "385", ",", "5", "]", "=", "37", "\n", "v", "[", "386", ",", "5", "]", "=", "25", "\n", "v", "[", "387", ",", "5", "]", "=", "49", "\n", "v", "[", "388", ",", "5", "]", "=", "13", "\n", "v", "[", "389", ",", "5", "]", "=", "53", "\n", "v", "[", "390", ",", "5", "]", "=", "47", "\n", "v", "[", "391", ",", "5", "]", "=", "23", "\n", "v", "[", "392", ",", "5", "]", "=", "35", "\n", "v", "[", "393", ",", "5", "]", "=", "29", "\n", "v", "[", "394", ",", "5", "]", "=", "33", "\n", "v", "[", "395", ",", "5", "]", "=", "21", "\n", "v", "[", "396", ",", "5", "]", "=", "35", "\n", "v", "[", "397", ",", "5", "]", "=", "23", "\n", "v", "[", "398", ",", "5", "]", "=", "3", "\n", "v", "[", "399", ",", "5", "]", "=", "43", "\n", "v", "[", "400", ",", "5", "]", "=", "31", "\n", "v", "[", "401", ",", "5", "]", "=", "63", "\n", "v", "[", "402", ",", "5", "]", "=", "9", "\n", "v", "[", "403", ",", "5", "]", "=", "1", "\n", "v", "[", "404", ",", "5", "]", "=", "61", "\n", "v", "[", "405", ",", "5", "]", "=", "43", "\n", "v", "[", "406", ",", "5", "]", "=", "3", "\n", "v", "[", "407", ",", "5", "]", "=", "11", "\n", "v", "[", "408", ",", "5", "]", "=", "55", "\n", "v", "[", "409", ",", "5", "]", "=", "11", "\n", "v", "[", "410", ",", "5", "]", "=", "35", "\n", "v", "[", "411", ",", "5", "]", "=", "1", "\n", "v", "[", "412", ",", "5", "]", "=", "63", "\n", "v", "[", "413", ",", "5", "]", "=", "35", "\n", "v", "[", "414", ",", "5", "]", "=", "49", "\n", "v", "[", "415", ",", "5", "]", "=", "19", "\n", "v", "[", "416", ",", "5", "]", "=", "45", "\n", "v", "[", "417", ",", "5", "]", "=", "9", "\n", "v", "[", "418", ",", "5", "]", "=", "57", "\n", "v", "[", "419", ",", "5", "]", "=", "51", "\n", "v", "[", "420", ",", "5", "]", "=", "1", "\n", "v", "[", "421", ",", "5", "]", "=", "47", "\n", "v", "[", "422", ",", "5", "]", "=", "41", "\n", "v", "[", "423", ",", "5", "]", "=", "9", "\n", "v", "[", "424", ",", "5", "]", "=", "11", "\n", "v", "[", "425", ",", "5", "]", "=", "37", "\n", "v", "[", "426", ",", "5", "]", "=", "19", "\n", "v", "[", "427", ",", "5", "]", "=", "55", "\n", "v", "[", "428", ",", "5", "]", "=", "23", "\n", "v", "[", "429", ",", "5", "]", "=", "55", "\n", "v", "[", "430", ",", "5", "]", "=", "55", "\n", "v", "[", "431", ",", "5", "]", "=", "13", "\n", "v", "[", "432", ",", "5", "]", "=", "7", "\n", "v", "[", "433", ",", "5", "]", "=", "47", "\n", "v", "[", "434", ",", "5", "]", "=", "37", "\n", "v", "[", "435", ",", "5", "]", "=", "11", "\n", "v", "[", "436", ",", "5", "]", "=", "43", "\n", "v", "[", "437", ",", "5", "]", "=", "17", "\n", "v", "[", "438", ",", "5", "]", "=", "3", "\n", "v", "[", "439", ",", "5", "]", "=", "25", "\n", "v", "[", "440", ",", "5", "]", "=", "19", "\n", "v", "[", "441", ",", "5", "]", "=", "55", "\n", "v", "[", "442", ",", "5", "]", "=", "59", "\n", "v", "[", "443", ",", "5", "]", "=", "37", "\n", "v", "[", "444", ",", "5", "]", "=", "33", "\n", "v", "[", "445", ",", "5", "]", "=", "43", "\n", "v", "[", "446", ",", "5", "]", "=", "1", "\n", "v", "[", "447", ",", "5", "]", "=", "5", "\n", "v", "[", "448", ",", "5", "]", "=", "21", "\n", "v", "[", "449", ",", "5", "]", "=", "5", "\n", "v", "[", "450", ",", "5", "]", "=", "63", "\n", "v", "[", "451", ",", "5", "]", "=", "49", "\n", "v", "[", "452", ",", "5", "]", "=", "61", "\n", "v", "[", "453", ",", "5", "]", "=", "21", "\n", "v", "[", "454", ",", "5", "]", "=", "51", "\n", "v", "[", "455", ",", "5", "]", "=", "15", "\n", "v", "[", "456", ",", "5", "]", "=", "19", "\n", "v", "[", "457", ",", "5", "]", "=", "43", "\n", "v", "[", "458", ",", "5", "]", "=", "47", "\n", "v", "[", "459", ",", "5", "]", "=", "17", "\n", "v", "[", "460", ",", "5", "]", "=", "9", "\n", "v", "[", "461", ",", "5", "]", "=", "53", "\n", "v", "[", "462", ",", "5", "]", "=", "45", "\n", "v", "[", "463", ",", "5", "]", "=", "11", "\n", "v", "[", "464", ",", "5", "]", "=", "51", "\n", "v", "[", "465", ",", "5", "]", "=", "25", "\n", "v", "[", "466", ",", "5", "]", "=", "11", "\n", "v", "[", "467", ",", "5", "]", "=", "25", "\n", "v", "[", "468", ",", "5", "]", "=", "47", "\n", "v", "[", "469", ",", "5", "]", "=", "47", "\n", "v", "[", "470", ",", "5", "]", "=", "1", "\n", "v", "[", "471", ",", "5", "]", "=", "43", "\n", "v", "[", "472", ",", "5", "]", "=", "29", "\n", "v", "[", "473", ",", "5", "]", "=", "17", "\n", "v", "[", "474", ",", "5", "]", "=", "31", "\n", "v", "[", "475", ",", "5", "]", "=", "15", "\n", "v", "[", "476", ",", "5", "]", "=", "59", "\n", "v", "[", "477", ",", "5", "]", "=", "27", "\n", "v", "[", "478", ",", "5", "]", "=", "63", "\n", "v", "[", "479", ",", "5", "]", "=", "11", "\n", "v", "[", "480", ",", "5", "]", "=", "41", "\n", "v", "[", "481", ",", "5", "]", "=", "51", "\n", "v", "[", "482", ",", "5", "]", "=", "29", "\n", "v", "[", "483", ",", "5", "]", "=", "7", "\n", "v", "[", "484", ",", "5", "]", "=", "27", "\n", "v", "[", "485", ",", "5", "]", "=", "63", "\n", "v", "[", "486", ",", "5", "]", "=", "31", "\n", "v", "[", "487", ",", "5", "]", "=", "43", "\n", "v", "[", "488", ",", "5", "]", "=", "3", "\n", "v", "[", "489", ",", "5", "]", "=", "29", "\n", "v", "[", "490", ",", "5", "]", "=", "39", "\n", "v", "[", "491", ",", "5", "]", "=", "3", "\n", "v", "[", "492", ",", "5", "]", "=", "59", "\n", "v", "[", "493", ",", "5", "]", "=", "59", "\n", "v", "[", "494", ",", "5", "]", "=", "1", "\n", "v", "[", "495", ",", "5", "]", "=", "53", "\n", "v", "[", "496", ",", "5", "]", "=", "63", "\n", "v", "[", "497", ",", "5", "]", "=", "23", "\n", "v", "[", "498", ",", "5", "]", "=", "63", "\n", "v", "[", "499", ",", "5", "]", "=", "47", "\n", "v", "[", "500", ",", "5", "]", "=", "51", "\n", "v", "[", "501", ",", "5", "]", "=", "23", "\n", "v", "[", "502", ",", "5", "]", "=", "61", "\n", "v", "[", "503", ",", "5", "]", "=", "39", "\n", "v", "[", "504", ",", "5", "]", "=", "47", "\n", "v", "[", "505", ",", "5", "]", "=", "21", "\n", "v", "[", "506", ",", "5", "]", "=", "39", "\n", "v", "[", "507", ",", "5", "]", "=", "15", "\n", "v", "[", "508", ",", "5", "]", "=", "3", "\n", "v", "[", "509", ",", "5", "]", "=", "9", "\n", "v", "[", "510", ",", "5", "]", "=", "57", "\n", "v", "[", "511", ",", "5", "]", "=", "61", "\n", "v", "[", "512", ",", "5", "]", "=", "39", "\n", "v", "[", "513", ",", "5", "]", "=", "37", "\n", "v", "[", "514", ",", "5", "]", "=", "21", "\n", "v", "[", "515", ",", "5", "]", "=", "51", "\n", "v", "[", "516", ",", "5", "]", "=", "1", "\n", "v", "[", "517", ",", "5", "]", "=", "23", "\n", "v", "[", "518", ",", "5", "]", "=", "43", "\n", "v", "[", "519", ",", "5", "]", "=", "27", "\n", "v", "[", "520", ",", "5", "]", "=", "25", "\n", "v", "[", "521", ",", "5", "]", "=", "11", "\n", "v", "[", "522", ",", "5", "]", "=", "13", "\n", "v", "[", "523", ",", "5", "]", "=", "21", "\n", "v", "[", "524", ",", "5", "]", "=", "43", "\n", "v", "[", "525", ",", "5", "]", "=", "7", "\n", "v", "[", "526", ",", "5", "]", "=", "11", "\n", "v", "[", "527", ",", "5", "]", "=", "33", "\n", "v", "[", "528", ",", "5", "]", "=", "55", "\n", "v", "[", "529", ",", "5", "]", "=", "1", "\n", "v", "[", "530", ",", "5", "]", "=", "37", "\n", "v", "[", "531", ",", "5", "]", "=", "35", "\n", "v", "[", "532", ",", "5", "]", "=", "27", "\n", "v", "[", "533", ",", "5", "]", "=", "61", "\n", "v", "[", "534", ",", "5", "]", "=", "39", "\n", "v", "[", "535", ",", "5", "]", "=", "5", "\n", "v", "[", "536", ",", "5", "]", "=", "19", "\n", "v", "[", "537", ",", "5", "]", "=", "61", "\n", "v", "[", "538", ",", "5", "]", "=", "61", "\n", "v", "[", "539", ",", "5", "]", "=", "57", "\n", "v", "[", "540", ",", "5", "]", "=", "59", "\n", "v", "[", "541", ",", "5", "]", "=", "21", "\n", "v", "[", "542", ",", "5", "]", "=", "59", "\n", "v", "[", "543", ",", "5", "]", "=", "61", "\n", "v", "[", "544", ",", "5", "]", "=", "57", "\n", "v", "[", "545", ",", "5", "]", "=", "25", "\n", "v", "[", "546", ",", "5", "]", "=", "55", "\n", "v", "[", "547", ",", "5", "]", "=", "27", "\n", "v", "[", "548", ",", "5", "]", "=", "31", "\n", "v", "[", "549", ",", "5", "]", "=", "41", "\n", "v", "[", "550", ",", "5", "]", "=", "33", "\n", "v", "[", "551", ",", "5", "]", "=", "63", "\n", "v", "[", "552", ",", "5", "]", "=", "19", "\n", "v", "[", "553", ",", "5", "]", "=", "57", "\n", "v", "[", "554", ",", "5", "]", "=", "35", "\n", "v", "[", "555", ",", "5", "]", "=", "13", "\n", "v", "[", "556", ",", "5", "]", "=", "63", "\n", "v", "[", "557", ",", "5", "]", "=", "35", "\n", "v", "[", "558", ",", "5", "]", "=", "17", "\n", "v", "[", "559", ",", "5", "]", "=", "11", "\n", "v", "[", "560", ",", "5", "]", "=", "11", "\n", "v", "[", "561", ",", "5", "]", "=", "49", "\n", "v", "[", "562", ",", "5", "]", "=", "41", "\n", "v", "[", "563", ",", "5", "]", "=", "55", "\n", "v", "[", "564", ",", "5", "]", "=", "5", "\n", "v", "[", "565", ",", "5", "]", "=", "45", "\n", "v", "[", "566", ",", "5", "]", "=", "17", "\n", "v", "[", "567", ",", "5", "]", "=", "35", "\n", "v", "[", "568", ",", "5", "]", "=", "5", "\n", "v", "[", "569", ",", "5", "]", "=", "31", "\n", "v", "[", "570", ",", "5", "]", "=", "31", "\n", "v", "[", "571", ",", "5", "]", "=", "37", "\n", "v", "[", "572", ",", "5", "]", "=", "17", "\n", "v", "[", "573", ",", "5", "]", "=", "45", "\n", "v", "[", "574", ",", "5", "]", "=", "51", "\n", "v", "[", "575", ",", "5", "]", "=", "1", "\n", "v", "[", "576", ",", "5", "]", "=", "39", "\n", "v", "[", "577", ",", "5", "]", "=", "49", "\n", "v", "[", "578", ",", "5", "]", "=", "55", "\n", "v", "[", "579", ",", "5", "]", "=", "19", "\n", "v", "[", "580", ",", "5", "]", "=", "41", "\n", "v", "[", "581", ",", "5", "]", "=", "13", "\n", "v", "[", "582", ",", "5", "]", "=", "5", "\n", "v", "[", "583", ",", "5", "]", "=", "51", "\n", "v", "[", "584", ",", "5", "]", "=", "5", "\n", "v", "[", "585", ",", "5", "]", "=", "49", "\n", "v", "[", "586", ",", "5", "]", "=", "1", "\n", "v", "[", "587", ",", "5", "]", "=", "21", "\n", "v", "[", "588", ",", "5", "]", "=", "13", "\n", "v", "[", "589", ",", "5", "]", "=", "17", "\n", "v", "[", "590", ",", "5", "]", "=", "59", "\n", "v", "[", "591", ",", "5", "]", "=", "51", "\n", "v", "[", "592", ",", "5", "]", "=", "11", "\n", "v", "[", "593", ",", "5", "]", "=", "3", "\n", "v", "[", "594", ",", "5", "]", "=", "61", "\n", "v", "[", "595", ",", "5", "]", "=", "1", "\n", "v", "[", "596", ",", "5", "]", "=", "33", "\n", "v", "[", "597", ",", "5", "]", "=", "37", "\n", "v", "[", "598", ",", "5", "]", "=", "33", "\n", "v", "[", "599", ",", "5", "]", "=", "61", "\n", "v", "[", "600", ",", "5", "]", "=", "25", "\n", "v", "[", "601", ",", "5", "]", "=", "27", "\n", "v", "[", "602", ",", "5", "]", "=", "59", "\n", "v", "[", "603", ",", "5", "]", "=", "7", "\n", "v", "[", "604", ",", "5", "]", "=", "49", "\n", "v", "[", "605", ",", "5", "]", "=", "13", "\n", "v", "[", "606", ",", "5", "]", "=", "63", "\n", "v", "[", "607", ",", "5", "]", "=", "3", "\n", "v", "[", "608", ",", "5", "]", "=", "33", "\n", "v", "[", "609", ",", "5", "]", "=", "3", "\n", "v", "[", "610", ",", "5", "]", "=", "15", "\n", "v", "[", "611", ",", "5", "]", "=", "9", "\n", "v", "[", "612", ",", "5", "]", "=", "13", "\n", "v", "[", "613", ",", "5", "]", "=", "35", "\n", "v", "[", "614", ",", "5", "]", "=", "39", "\n", "v", "[", "615", ",", "5", "]", "=", "11", "\n", "v", "[", "616", ",", "5", "]", "=", "59", "\n", "v", "[", "617", ",", "5", "]", "=", "59", "\n", "v", "[", "618", ",", "5", "]", "=", "1", "\n", "v", "[", "619", ",", "5", "]", "=", "57", "\n", "v", "[", "620", ",", "5", "]", "=", "11", "\n", "v", "[", "621", ",", "5", "]", "=", "5", "\n", "v", "[", "622", ",", "5", "]", "=", "57", "\n", "v", "[", "623", ",", "5", "]", "=", "13", "\n", "v", "[", "624", ",", "5", "]", "=", "31", "\n", "v", "[", "625", ",", "5", "]", "=", "13", "\n", "v", "[", "626", ",", "5", "]", "=", "11", "\n", "v", "[", "627", ",", "5", "]", "=", "55", "\n", "v", "[", "628", ",", "5", "]", "=", "45", "\n", "v", "[", "629", ",", "5", "]", "=", "9", "\n", "v", "[", "630", ",", "5", "]", "=", "55", "\n", "v", "[", "631", ",", "5", "]", "=", "55", "\n", "v", "[", "632", ",", "5", "]", "=", "19", "\n", "v", "[", "633", ",", "5", "]", "=", "25", "\n", "v", "[", "634", ",", "5", "]", "=", "41", "\n", "v", "[", "635", ",", "5", "]", "=", "23", "\n", "v", "[", "636", ",", "5", "]", "=", "45", "\n", "v", "[", "637", ",", "5", "]", "=", "29", "\n", "v", "[", "638", ",", "5", "]", "=", "63", "\n", "v", "[", "639", ",", "5", "]", "=", "59", "\n", "v", "[", "640", ",", "5", "]", "=", "27", "\n", "v", "[", "641", ",", "5", "]", "=", "39", "\n", "v", "[", "642", ",", "5", "]", "=", "21", "\n", "v", "[", "643", ",", "5", "]", "=", "37", "\n", "v", "[", "644", ",", "5", "]", "=", "7", "\n", "v", "[", "645", ",", "5", "]", "=", "61", "\n", "v", "[", "646", ",", "5", "]", "=", "49", "\n", "v", "[", "647", ",", "5", "]", "=", "35", "\n", "v", "[", "648", ",", "5", "]", "=", "39", "\n", "v", "[", "649", ",", "5", "]", "=", "9", "\n", "v", "[", "650", ",", "5", "]", "=", "29", "\n", "v", "[", "651", ",", "5", "]", "=", "7", "\n", "v", "[", "652", ",", "5", "]", "=", "25", "\n", "v", "[", "653", ",", "5", "]", "=", "23", "\n", "v", "[", "654", ",", "5", "]", "=", "57", "\n", "v", "[", "655", ",", "5", "]", "=", "5", "\n", "v", "[", "656", ",", "5", "]", "=", "19", "\n", "v", "[", "657", ",", "5", "]", "=", "15", "\n", "v", "[", "658", ",", "5", "]", "=", "33", "\n", "v", "[", "659", ",", "5", "]", "=", "49", "\n", "v", "[", "660", ",", "5", "]", "=", "37", "\n", "v", "[", "661", ",", "5", "]", "=", "25", "\n", "v", "[", "662", ",", "5", "]", "=", "17", "\n", "v", "[", "663", ",", "5", "]", "=", "45", "\n", "v", "[", "664", ",", "5", "]", "=", "29", "\n", "v", "[", "665", ",", "5", "]", "=", "15", "\n", "v", "[", "666", ",", "5", "]", "=", "25", "\n", "v", "[", "667", ",", "5", "]", "=", "3", "\n", "v", "[", "668", ",", "5", "]", "=", "3", "\n", "v", "[", "669", ",", "5", "]", "=", "49", "\n", "v", "[", "670", ",", "5", "]", "=", "11", "\n", "v", "[", "671", ",", "5", "]", "=", "39", "\n", "v", "[", "672", ",", "5", "]", "=", "15", "\n", "v", "[", "673", ",", "5", "]", "=", "19", "\n", "v", "[", "674", ",", "5", "]", "=", "57", "\n", "v", "[", "675", ",", "5", "]", "=", "39", "\n", "v", "[", "676", ",", "5", "]", "=", "15", "\n", "v", "[", "677", ",", "5", "]", "=", "11", "\n", "v", "[", "678", ",", "5", "]", "=", "3", "\n", "v", "[", "679", ",", "5", "]", "=", "57", "\n", "v", "[", "680", ",", "5", "]", "=", "31", "\n", "v", "[", "681", ",", "5", "]", "=", "55", "\n", "v", "[", "682", ",", "5", "]", "=", "61", "\n", "v", "[", "683", ",", "5", "]", "=", "19", "\n", "v", "[", "684", ",", "5", "]", "=", "5", "\n", "v", "[", "685", ",", "5", "]", "=", "41", "\n", "v", "[", "686", ",", "5", "]", "=", "35", "\n", "v", "[", "687", ",", "5", "]", "=", "59", "\n", "v", "[", "688", ",", "5", "]", "=", "61", "\n", "v", "[", "689", ",", "5", "]", "=", "39", "\n", "v", "[", "690", ",", "5", "]", "=", "41", "\n", "v", "[", "691", ",", "5", "]", "=", "53", "\n", "v", "[", "692", ",", "5", "]", "=", "53", "\n", "v", "[", "693", ",", "5", "]", "=", "63", "\n", "v", "[", "694", ",", "5", "]", "=", "31", "\n", "v", "[", "695", ",", "5", "]", "=", "9", "\n", "v", "[", "696", ",", "5", "]", "=", "59", "\n", "v", "[", "697", ",", "5", "]", "=", "13", "\n", "v", "[", "698", ",", "5", "]", "=", "35", "\n", "v", "[", "699", ",", "5", "]", "=", "55", "\n", "v", "[", "700", ",", "5", "]", "=", "41", "\n", "v", "[", "701", ",", "5", "]", "=", "49", "\n", "v", "[", "702", ",", "5", "]", "=", "5", "\n", "v", "[", "703", ",", "5", "]", "=", "41", "\n", "v", "[", "704", ",", "5", "]", "=", "25", "\n", "v", "[", "705", ",", "5", "]", "=", "27", "\n", "v", "[", "706", ",", "5", "]", "=", "43", "\n", "v", "[", "707", ",", "5", "]", "=", "5", "\n", "v", "[", "708", ",", "5", "]", "=", "5", "\n", "v", "[", "709", ",", "5", "]", "=", "43", "\n", "v", "[", "710", ",", "5", "]", "=", "5", "\n", "v", "[", "711", ",", "5", "]", "=", "5", "\n", "v", "[", "712", ",", "5", "]", "=", "17", "\n", "v", "[", "713", ",", "5", "]", "=", "5", "\n", "v", "[", "714", ",", "5", "]", "=", "15", "\n", "v", "[", "715", ",", "5", "]", "=", "27", "\n", "v", "[", "716", ",", "5", "]", "=", "29", "\n", "v", "[", "717", ",", "5", "]", "=", "17", "\n", "v", "[", "718", ",", "5", "]", "=", "9", "\n", "v", "[", "719", ",", "5", "]", "=", "3", "\n", "v", "[", "720", ",", "5", "]", "=", "55", "\n", "v", "[", "721", ",", "5", "]", "=", "31", "\n", "v", "[", "722", ",", "5", "]", "=", "1", "\n", "v", "[", "723", ",", "5", "]", "=", "45", "\n", "v", "[", "724", ",", "5", "]", "=", "45", "\n", "v", "[", "725", ",", "5", "]", "=", "13", "\n", "v", "[", "726", ",", "5", "]", "=", "57", "\n", "v", "[", "727", ",", "5", "]", "=", "17", "\n", "v", "[", "728", ",", "5", "]", "=", "3", "\n", "v", "[", "729", ",", "5", "]", "=", "61", "\n", "v", "[", "730", ",", "5", "]", "=", "15", "\n", "v", "[", "731", ",", "5", "]", "=", "49", "\n", "v", "[", "732", ",", "5", "]", "=", "15", "\n", "v", "[", "733", ",", "5", "]", "=", "47", "\n", "v", "[", "734", ",", "5", "]", "=", "9", "\n", "v", "[", "735", ",", "5", "]", "=", "37", "\n", "v", "[", "736", ",", "5", "]", "=", "45", "\n", "v", "[", "737", ",", "5", "]", "=", "9", "\n", "v", "[", "738", ",", "5", "]", "=", "51", "\n", "v", "[", "739", ",", "5", "]", "=", "61", "\n", "v", "[", "740", ",", "5", "]", "=", "21", "\n", "v", "[", "741", ",", "5", "]", "=", "33", "\n", "v", "[", "742", ",", "5", "]", "=", "11", "\n", "v", "[", "743", ",", "5", "]", "=", "21", "\n", "v", "[", "744", ",", "5", "]", "=", "63", "\n", "v", "[", "745", ",", "5", "]", "=", "63", "\n", "v", "[", "746", ",", "5", "]", "=", "47", "\n", "v", "[", "747", ",", "5", "]", "=", "57", "\n", "v", "[", "748", ",", "5", "]", "=", "61", "\n", "v", "[", "749", ",", "5", "]", "=", "49", "\n", "v", "[", "750", ",", "5", "]", "=", "9", "\n", "v", "[", "751", ",", "5", "]", "=", "59", "\n", "v", "[", "752", ",", "5", "]", "=", "19", "\n", "v", "[", "753", ",", "5", "]", "=", "29", "\n", "v", "[", "754", ",", "5", "]", "=", "21", "\n", "v", "[", "755", ",", "5", "]", "=", "23", "\n", "v", "[", "756", ",", "5", "]", "=", "55", "\n", "v", "[", "757", ",", "5", "]", "=", "23", "\n", "v", "[", "758", ",", "5", "]", "=", "43", "\n", "v", "[", "759", ",", "5", "]", "=", "41", "\n", "v", "[", "760", ",", "5", "]", "=", "57", "\n", "v", "[", "761", ",", "5", "]", "=", "9", "\n", "v", "[", "762", ",", "5", "]", "=", "39", "\n", "v", "[", "763", ",", "5", "]", "=", "27", "\n", "v", "[", "764", ",", "5", "]", "=", "41", "\n", "v", "[", "765", ",", "5", "]", "=", "35", "\n", "v", "[", "766", ",", "5", "]", "=", "61", "\n", "v", "[", "767", ",", "5", "]", "=", "29", "\n", "v", "[", "768", ",", "5", "]", "=", "57", "\n", "v", "[", "769", ",", "5", "]", "=", "63", "\n", "v", "[", "770", ",", "5", "]", "=", "21", "\n", "v", "[", "771", ",", "5", "]", "=", "31", "\n", "v", "[", "772", ",", "5", "]", "=", "59", "\n", "v", "[", "773", ",", "5", "]", "=", "35", "\n", "v", "[", "774", ",", "5", "]", "=", "49", "\n", "v", "[", "775", ",", "5", "]", "=", "3", "\n", "v", "[", "776", ",", "5", "]", "=", "49", "\n", "v", "[", "777", ",", "5", "]", "=", "47", "\n", "v", "[", "778", ",", "5", "]", "=", "49", "\n", "v", "[", "779", ",", "5", "]", "=", "33", "\n", "v", "[", "780", ",", "5", "]", "=", "21", "\n", "v", "[", "781", ",", "5", "]", "=", "19", "\n", "v", "[", "782", ",", "5", "]", "=", "21", "\n", "v", "[", "783", ",", "5", "]", "=", "35", "\n", "v", "[", "784", ",", "5", "]", "=", "11", "\n", "v", "[", "785", ",", "5", "]", "=", "17", "\n", "v", "[", "786", ",", "5", "]", "=", "37", "\n", "v", "[", "787", ",", "5", "]", "=", "23", "\n", "v", "[", "788", ",", "5", "]", "=", "59", "\n", "v", "[", "789", ",", "5", "]", "=", "13", "\n", "v", "[", "790", ",", "5", "]", "=", "37", "\n", "v", "[", "791", ",", "5", "]", "=", "35", "\n", "v", "[", "792", ",", "5", "]", "=", "55", "\n", "v", "[", "793", ",", "5", "]", "=", "57", "\n", "v", "[", "794", ",", "5", "]", "=", "1", "\n", "v", "[", "795", ",", "5", "]", "=", "29", "\n", "v", "[", "796", ",", "5", "]", "=", "45", "\n", "v", "[", "797", ",", "5", "]", "=", "11", "\n", "v", "[", "798", ",", "5", "]", "=", "1", "\n", "v", "[", "799", ",", "5", "]", "=", "15", "\n", "v", "[", "800", ",", "5", "]", "=", "9", "\n", "v", "[", "801", ",", "5", "]", "=", "33", "\n", "v", "[", "802", ",", "5", "]", "=", "19", "\n", "v", "[", "803", ",", "5", "]", "=", "53", "\n", "v", "[", "804", ",", "5", "]", "=", "43", "\n", "v", "[", "805", ",", "5", "]", "=", "39", "\n", "v", "[", "806", ",", "5", "]", "=", "23", "\n", "v", "[", "807", ",", "5", "]", "=", "7", "\n", "v", "[", "808", ",", "5", "]", "=", "13", "\n", "v", "[", "809", ",", "5", "]", "=", "13", "\n", "v", "[", "810", ",", "5", "]", "=", "1", "\n", "v", "[", "811", ",", "5", "]", "=", "19", "\n", "v", "[", "812", ",", "5", "]", "=", "41", "\n", "v", "[", "813", ",", "5", "]", "=", "55", "\n", "v", "[", "814", ",", "5", "]", "=", "1", "\n", "v", "[", "815", ",", "5", "]", "=", "13", "\n", "v", "[", "816", ",", "5", "]", "=", "15", "\n", "v", "[", "817", ",", "5", "]", "=", "59", "\n", "v", "[", "818", ",", "5", "]", "=", "55", "\n", "v", "[", "819", ",", "5", "]", "=", "15", "\n", "v", "[", "820", ",", "5", "]", "=", "3", "\n", "v", "[", "821", ",", "5", "]", "=", "57", "\n", "v", "[", "822", ",", "5", "]", "=", "37", "\n", "v", "[", "823", ",", "5", "]", "=", "31", "\n", "v", "[", "824", ",", "5", "]", "=", "17", "\n", "v", "[", "825", ",", "5", "]", "=", "1", "\n", "v", "[", "826", ",", "5", "]", "=", "3", "\n", "v", "[", "827", ",", "5", "]", "=", "21", "\n", "v", "[", "828", ",", "5", "]", "=", "29", "\n", "v", "[", "829", ",", "5", "]", "=", "25", "\n", "v", "[", "830", ",", "5", "]", "=", "55", "\n", "v", "[", "831", ",", "5", "]", "=", "9", "\n", "v", "[", "832", ",", "5", "]", "=", "37", "\n", "v", "[", "833", ",", "5", "]", "=", "33", "\n", "v", "[", "834", ",", "5", "]", "=", "53", "\n", "v", "[", "835", ",", "5", "]", "=", "41", "\n", "v", "[", "836", ",", "5", "]", "=", "51", "\n", "v", "[", "837", ",", "5", "]", "=", "19", "\n", "v", "[", "838", ",", "5", "]", "=", "57", "\n", "v", "[", "839", ",", "5", "]", "=", "13", "\n", "v", "[", "840", ",", "5", "]", "=", "63", "\n", "v", "[", "841", ",", "5", "]", "=", "43", "\n", "v", "[", "842", ",", "5", "]", "=", "19", "\n", "v", "[", "843", ",", "5", "]", "=", "7", "\n", "v", "[", "844", ",", "5", "]", "=", "13", "\n", "v", "[", "845", ",", "5", "]", "=", "37", "\n", "v", "[", "846", ",", "5", "]", "=", "33", "\n", "v", "[", "847", ",", "5", "]", "=", "19", "\n", "v", "[", "848", ",", "5", "]", "=", "15", "\n", "v", "[", "849", ",", "5", "]", "=", "63", "\n", "v", "[", "850", ",", "5", "]", "=", "51", "\n", "v", "[", "851", ",", "5", "]", "=", "11", "\n", "v", "[", "852", ",", "5", "]", "=", "49", "\n", "v", "[", "853", ",", "5", "]", "=", "23", "\n", "v", "[", "854", ",", "5", "]", "=", "57", "\n", "v", "[", "855", ",", "5", "]", "=", "47", "\n", "v", "[", "856", ",", "5", "]", "=", "51", "\n", "v", "[", "857", ",", "5", "]", "=", "15", "\n", "v", "[", "858", ",", "5", "]", "=", "53", "\n", "v", "[", "859", ",", "5", "]", "=", "41", "\n", "v", "[", "860", ",", "5", "]", "=", "1", "\n", "v", "[", "861", ",", "5", "]", "=", "15", "\n", "v", "[", "862", ",", "5", "]", "=", "37", "\n", "v", "[", "863", ",", "5", "]", "=", "61", "\n", "v", "[", "864", ",", "5", "]", "=", "11", "\n", "v", "[", "865", ",", "5", "]", "=", "35", "\n", "v", "[", "866", ",", "5", "]", "=", "29", "\n", "v", "[", "867", ",", "5", "]", "=", "33", "\n", "v", "[", "868", ",", "5", "]", "=", "23", "\n", "v", "[", "869", ",", "5", "]", "=", "55", "\n", "v", "[", "870", ",", "5", "]", "=", "11", "\n", "v", "[", "871", ",", "5", "]", "=", "59", "\n", "v", "[", "872", ",", "5", "]", "=", "19", "\n", "v", "[", "873", ",", "5", "]", "=", "61", "\n", "v", "[", "874", ",", "5", "]", "=", "61", "\n", "v", "[", "875", ",", "5", "]", "=", "45", "\n", "v", "[", "876", ",", "5", "]", "=", "13", "\n", "v", "[", "877", ",", "5", "]", "=", "49", "\n", "v", "[", "878", ",", "5", "]", "=", "13", "\n", "v", "[", "879", ",", "5", "]", "=", "63", "\n", "v", "[", "880", ",", "5", "]", "=", "5", "\n", "v", "[", "881", ",", "5", "]", "=", "61", "\n", "v", "[", "882", ",", "5", "]", "=", "5", "\n", "v", "[", "883", ",", "5", "]", "=", "31", "\n", "v", "[", "884", ",", "5", "]", "=", "17", "\n", "v", "[", "885", ",", "5", "]", "=", "61", "\n", "v", "[", "886", ",", "5", "]", "=", "63", "\n", "v", "[", "887", ",", "5", "]", "=", "13", "\n", "v", "[", "888", ",", "5", "]", "=", "27", "\n", "v", "[", "889", ",", "5", "]", "=", "57", "\n", "v", "[", "890", ",", "5", "]", "=", "1", "\n", "v", "[", "891", ",", "5", "]", "=", "21", "\n", "v", "[", "892", ",", "5", "]", "=", "5", "\n", "v", "[", "893", ",", "5", "]", "=", "11", "\n", "v", "[", "894", ",", "5", "]", "=", "39", "\n", "v", "[", "895", ",", "5", "]", "=", "57", "\n", "v", "[", "896", ",", "5", "]", "=", "51", "\n", "v", "[", "897", ",", "5", "]", "=", "53", "\n", "v", "[", "898", ",", "5", "]", "=", "39", "\n", "v", "[", "899", ",", "5", "]", "=", "25", "\n", "v", "[", "900", ",", "5", "]", "=", "41", "\n", "v", "[", "901", ",", "5", "]", "=", "39", "\n", "v", "[", "902", ",", "5", "]", "=", "37", "\n", "v", "[", "903", ",", "5", "]", "=", "23", "\n", "v", "[", "904", ",", "5", "]", "=", "31", "\n", "v", "[", "905", ",", "5", "]", "=", "25", "\n", "v", "[", "906", ",", "5", "]", "=", "33", "\n", "v", "[", "907", ",", "5", "]", "=", "17", "\n", "v", "[", "908", ",", "5", "]", "=", "57", "\n", "v", "[", "909", ",", "5", "]", "=", "29", "\n", "v", "[", "910", ",", "5", "]", "=", "27", "\n", "v", "[", "911", ",", "5", "]", "=", "23", "\n", "v", "[", "912", ",", "5", "]", "=", "47", "\n", "v", "[", "913", ",", "5", "]", "=", "41", "\n", "v", "[", "914", ",", "5", "]", "=", "29", "\n", "v", "[", "915", ",", "5", "]", "=", "19", "\n", "v", "[", "916", ",", "5", "]", "=", "47", "\n", "v", "[", "917", ",", "5", "]", "=", "41", "\n", "v", "[", "918", ",", "5", "]", "=", "25", "\n", "v", "[", "919", ",", "5", "]", "=", "5", "\n", "v", "[", "920", ",", "5", "]", "=", "51", "\n", "v", "[", "921", ",", "5", "]", "=", "43", "\n", "v", "[", "922", ",", "5", "]", "=", "39", "\n", "v", "[", "923", ",", "5", "]", "=", "29", "\n", "v", "[", "924", ",", "5", "]", "=", "7", "\n", "v", "[", "925", ",", "5", "]", "=", "31", "\n", "v", "[", "926", ",", "5", "]", "=", "45", "\n", "v", "[", "927", ",", "5", "]", "=", "51", "\n", "v", "[", "928", ",", "5", "]", "=", "49", "\n", "v", "[", "929", ",", "5", "]", "=", "55", "\n", "v", "[", "930", ",", "5", "]", "=", "17", "\n", "v", "[", "931", ",", "5", "]", "=", "43", "\n", "v", "[", "932", ",", "5", "]", "=", "49", "\n", "v", "[", "933", ",", "5", "]", "=", "45", "\n", "v", "[", "934", ",", "5", "]", "=", "9", "\n", "v", "[", "935", ",", "5", "]", "=", "29", "\n", "v", "[", "936", ",", "5", "]", "=", "3", "\n", "v", "[", "937", ",", "5", "]", "=", "5", "\n", "v", "[", "938", ",", "5", "]", "=", "47", "\n", "v", "[", "939", ",", "5", "]", "=", "9", "\n", "v", "[", "940", ",", "5", "]", "=", "15", "\n", "v", "[", "941", ",", "5", "]", "=", "19", "\n", "v", "[", "942", ",", "5", "]", "=", "51", "\n", "v", "[", "943", ",", "5", "]", "=", "45", "\n", "v", "[", "944", ",", "5", "]", "=", "57", "\n", "v", "[", "945", ",", "5", "]", "=", "63", "\n", "v", "[", "946", ",", "5", "]", "=", "9", "\n", "v", "[", "947", ",", "5", "]", "=", "21", "\n", "v", "[", "948", ",", "5", "]", "=", "59", "\n", "v", "[", "949", ",", "5", "]", "=", "3", "\n", "v", "[", "950", ",", "5", "]", "=", "9", "\n", "v", "[", "951", ",", "5", "]", "=", "13", "\n", "v", "[", "952", ",", "5", "]", "=", "45", "\n", "v", "[", "953", ",", "5", "]", "=", "23", "\n", "v", "[", "954", ",", "5", "]", "=", "15", "\n", "v", "[", "955", ",", "5", "]", "=", "31", "\n", "v", "[", "956", ",", "5", "]", "=", "21", "\n", "v", "[", "957", ",", "5", "]", "=", "15", "\n", "v", "[", "958", ",", "5", "]", "=", "51", "\n", "v", "[", "959", ",", "5", "]", "=", "35", "\n", "v", "[", "960", ",", "5", "]", "=", "9", "\n", "v", "[", "961", ",", "5", "]", "=", "11", "\n", "v", "[", "962", ",", "5", "]", "=", "61", "\n", "v", "[", "963", ",", "5", "]", "=", "23", "\n", "v", "[", "964", ",", "5", "]", "=", "53", "\n", "v", "[", "965", ",", "5", "]", "=", "29", "\n", "v", "[", "966", ",", "5", "]", "=", "51", "\n", "v", "[", "967", ",", "5", "]", "=", "45", "\n", "v", "[", "968", ",", "5", "]", "=", "31", "\n", "v", "[", "969", ",", "5", "]", "=", "29", "\n", "v", "[", "970", ",", "5", "]", "=", "5", "\n", "v", "[", "971", ",", "5", "]", "=", "35", "\n", "v", "[", "972", ",", "5", "]", "=", "29", "\n", "v", "[", "973", ",", "5", "]", "=", "53", "\n", "v", "[", "974", ",", "5", "]", "=", "35", "\n", "v", "[", "975", ",", "5", "]", "=", "17", "\n", "v", "[", "976", ",", "5", "]", "=", "59", "\n", "v", "[", "977", ",", "5", "]", "=", "55", "\n", "v", "[", "978", ",", "5", "]", "=", "27", "\n", "v", "[", "979", ",", "5", "]", "=", "51", "\n", "v", "[", "980", ",", "5", "]", "=", "59", "\n", "v", "[", "981", ",", "5", "]", "=", "27", "\n", "v", "[", "982", ",", "5", "]", "=", "47", "\n", "v", "[", "983", ",", "5", "]", "=", "15", "\n", "v", "[", "984", ",", "5", "]", "=", "29", "\n", "v", "[", "985", ",", "5", "]", "=", "37", "\n", "v", "[", "986", ",", "5", "]", "=", "7", "\n", "v", "[", "987", ",", "5", "]", "=", "49", "\n", "v", "[", "988", ",", "5", "]", "=", "55", "\n", "v", "[", "989", ",", "5", "]", "=", "5", "\n", "v", "[", "990", ",", "5", "]", "=", "19", "\n", "v", "[", "991", ",", "5", "]", "=", "45", "\n", "v", "[", "992", ",", "5", "]", "=", "29", "\n", "v", "[", "993", ",", "5", "]", "=", "19", "\n", "v", "[", "994", ",", "5", "]", "=", "57", "\n", "v", "[", "995", ",", "5", "]", "=", "33", "\n", "v", "[", "996", ",", "5", "]", "=", "53", "\n", "v", "[", "997", ",", "5", "]", "=", "45", "\n", "v", "[", "998", ",", "5", "]", "=", "21", "\n", "v", "[", "999", ",", "5", "]", "=", "9", "\n", "v", "[", "1000", ",", "5", "]", "=", "3", "\n", "v", "[", "1001", ",", "5", "]", "=", "35", "\n", "v", "[", "1002", ",", "5", "]", "=", "29", "\n", "v", "[", "1003", ",", "5", "]", "=", "43", "\n", "v", "[", "1004", ",", "5", "]", "=", "31", "\n", "v", "[", "1005", ",", "5", "]", "=", "39", "\n", "v", "[", "1006", ",", "5", "]", "=", "3", "\n", "v", "[", "1007", ",", "5", "]", "=", "45", "\n", "v", "[", "1008", ",", "5", "]", "=", "1", "\n", "v", "[", "1009", ",", "5", "]", "=", "41", "\n", "v", "[", "1010", ",", "5", "]", "=", "29", "\n", "v", "[", "1011", ",", "5", "]", "=", "5", "\n", "v", "[", "1012", ",", "5", "]", "=", "59", "\n", "v", "[", "1013", ",", "5", "]", "=", "41", "\n", "v", "[", "1014", ",", "5", "]", "=", "33", "\n", "v", "[", "1015", ",", "5", "]", "=", "35", "\n", "v", "[", "1016", ",", "5", "]", "=", "27", "\n", "v", "[", "1017", ",", "5", "]", "=", "19", "\n", "v", "[", "1018", ",", "5", "]", "=", "13", "\n", "v", "[", "1019", ",", "5", "]", "=", "25", "\n", "v", "[", "1020", ",", "5", "]", "=", "27", "\n", "v", "[", "1021", ",", "5", "]", "=", "43", "\n", "v", "[", "1022", ",", "5", "]", "=", "33", "\n", "v", "[", "1023", ",", "5", "]", "=", "35", "\n", "v", "[", "1024", ",", "5", "]", "=", "17", "\n", "v", "[", "1025", ",", "5", "]", "=", "17", "\n", "v", "[", "1026", ",", "5", "]", "=", "23", "\n", "v", "[", "1027", ",", "5", "]", "=", "7", "\n", "v", "[", "1028", ",", "5", "]", "=", "35", "\n", "v", "[", "1029", ",", "5", "]", "=", "15", "\n", "v", "[", "1030", ",", "5", "]", "=", "61", "\n", "v", "[", "1031", ",", "5", "]", "=", "61", "\n", "v", "[", "1032", ",", "5", "]", "=", "53", "\n", "v", "[", "1033", ",", "5", "]", "=", "5", "\n", "v", "[", "1034", ",", "5", "]", "=", "15", "\n", "v", "[", "1035", ",", "5", "]", "=", "23", "\n", "v", "[", "1036", ",", "5", "]", "=", "11", "\n", "v", "[", "1037", ",", "5", "]", "=", "13", "\n", "v", "[", "1038", ",", "5", "]", "=", "43", "\n", "v", "[", "1039", ",", "5", "]", "=", "55", "\n", "v", "[", "1040", ",", "5", "]", "=", "47", "\n", "v", "[", "1041", ",", "5", "]", "=", "25", "\n", "v", "[", "1042", ",", "5", "]", "=", "43", "\n", "v", "[", "1043", ",", "5", "]", "=", "15", "\n", "v", "[", "1044", ",", "5", "]", "=", "57", "\n", "v", "[", "1045", ",", "5", "]", "=", "45", "\n", "v", "[", "1046", ",", "5", "]", "=", "1", "\n", "v", "[", "1047", ",", "5", "]", "=", "49", "\n", "v", "[", "1048", ",", "5", "]", "=", "63", "\n", "v", "[", "1049", ",", "5", "]", "=", "57", "\n", "v", "[", "1050", ",", "5", "]", "=", "15", "\n", "v", "[", "1051", ",", "5", "]", "=", "31", "\n", "v", "[", "1052", ",", "5", "]", "=", "31", "\n", "v", "[", "1053", ",", "5", "]", "=", "7", "\n", "v", "[", "1054", ",", "5", "]", "=", "53", "\n", "v", "[", "1055", ",", "5", "]", "=", "27", "\n", "v", "[", "1056", ",", "5", "]", "=", "15", "\n", "v", "[", "1057", ",", "5", "]", "=", "47", "\n", "v", "[", "1058", ",", "5", "]", "=", "23", "\n", "v", "[", "1059", ",", "5", "]", "=", "7", "\n", "v", "[", "1060", ",", "5", "]", "=", "29", "\n", "v", "[", "1061", ",", "5", "]", "=", "53", "\n", "v", "[", "1062", ",", "5", "]", "=", "47", "\n", "v", "[", "1063", ",", "5", "]", "=", "9", "\n", "v", "[", "1064", ",", "5", "]", "=", "53", "\n", "v", "[", "1065", ",", "5", "]", "=", "3", "\n", "v", "[", "1066", ",", "5", "]", "=", "25", "\n", "v", "[", "1067", ",", "5", "]", "=", "55", "\n", "v", "[", "1068", ",", "5", "]", "=", "45", "\n", "v", "[", "1069", ",", "5", "]", "=", "63", "\n", "v", "[", "1070", ",", "5", "]", "=", "21", "\n", "v", "[", "1071", ",", "5", "]", "=", "17", "\n", "v", "[", "1072", ",", "5", "]", "=", "23", "\n", "v", "[", "1073", ",", "5", "]", "=", "31", "\n", "v", "[", "1074", ",", "5", "]", "=", "27", "\n", "v", "[", "1075", ",", "5", "]", "=", "27", "\n", "v", "[", "1076", ",", "5", "]", "=", "43", "\n", "v", "[", "1077", ",", "5", "]", "=", "63", "\n", "v", "[", "1078", ",", "5", "]", "=", "55", "\n", "v", "[", "1079", ",", "5", "]", "=", "63", "\n", "v", "[", "1080", ",", "5", "]", "=", "45", "\n", "v", "[", "1081", ",", "5", "]", "=", "51", "\n", "v", "[", "1082", ",", "5", "]", "=", "15", "\n", "v", "[", "1083", ",", "5", "]", "=", "27", "\n", "v", "[", "1084", ",", "5", "]", "=", "5", "\n", "v", "[", "1085", ",", "5", "]", "=", "37", "\n", "v", "[", "1086", ",", "5", "]", "=", "43", "\n", "v", "[", "1087", ",", "5", "]", "=", "11", "\n", "v", "[", "1088", ",", "5", "]", "=", "27", "\n", "v", "[", "1089", ",", "5", "]", "=", "5", "\n", "v", "[", "1090", ",", "5", "]", "=", "27", "\n", "v", "[", "1091", ",", "5", "]", "=", "59", "\n", "v", "[", "1092", ",", "5", "]", "=", "21", "\n", "v", "[", "1093", ",", "5", "]", "=", "7", "\n", "v", "[", "1094", ",", "5", "]", "=", "39", "\n", "v", "[", "1095", ",", "5", "]", "=", "27", "\n", "v", "[", "1096", ",", "5", "]", "=", "63", "\n", "v", "[", "1097", ",", "5", "]", "=", "35", "\n", "v", "[", "1098", ",", "5", "]", "=", "47", "\n", "v", "[", "1099", ",", "5", "]", "=", "55", "\n", "v", "[", "1100", ",", "5", "]", "=", "17", "\n", "v", "[", "1101", ",", "5", "]", "=", "17", "\n", "v", "[", "1102", ",", "5", "]", "=", "17", "\n", "v", "[", "1103", ",", "5", "]", "=", "3", "\n", "v", "[", "1104", ",", "5", "]", "=", "19", "\n", "v", "[", "1105", ",", "5", "]", "=", "21", "\n", "v", "[", "1106", ",", "5", "]", "=", "13", "\n", "v", "[", "1107", ",", "5", "]", "=", "49", "\n", "v", "[", "1108", ",", "5", "]", "=", "61", "\n", "v", "[", "1109", ",", "5", "]", "=", "39", "\n", "v", "[", "1110", ",", "5", "]", "=", "15", "\n", "\n", "v", "[", "19", ",", "6", "]", "=", "13", "\n", "v", "[", "20", ",", "6", "]", "=", "33", "\n", "v", "[", "21", ",", "6", "]", "=", "115", "\n", "v", "[", "22", ",", "6", "]", "=", "41", "\n", "v", "[", "23", ",", "6", "]", "=", "79", "\n", "v", "[", "24", ",", "6", "]", "=", "17", "\n", "v", "[", "25", ",", "6", "]", "=", "29", "\n", "v", "[", "26", ",", "6", "]", "=", "119", "\n", "v", "[", "27", ",", "6", "]", "=", "75", "\n", "v", "[", "28", ",", "6", "]", "=", "73", "\n", "v", "[", "29", ",", "6", "]", "=", "105", "\n", "v", "[", "30", ",", "6", "]", "=", "7", "\n", "v", "[", "31", ",", "6", "]", "=", "59", "\n", "v", "[", "32", ",", "6", "]", "=", "65", "\n", "v", "[", "33", ",", "6", "]", "=", "21", "\n", "v", "[", "34", ",", "6", "]", "=", "3", "\n", "v", "[", "35", ",", "6", "]", "=", "113", "\n", "v", "[", "36", ",", "6", "]", "=", "61", "\n", "v", "[", "37", ",", "6", "]", "=", "89", "\n", "v", "[", "38", ",", "6", "]", "=", "45", "\n", "v", "[", "39", ",", "6", "]", "=", "107", "\n", "v", "[", "40", ",", "6", "]", "=", "21", "\n", "v", "[", "41", ",", "6", "]", "=", "71", "\n", "v", "[", "42", ",", "6", "]", "=", "79", "\n", "v", "[", "43", ",", "6", "]", "=", "19", "\n", "v", "[", "44", ",", "6", "]", "=", "71", "\n", "v", "[", "45", ",", "6", "]", "=", "61", "\n", "v", "[", "46", ",", "6", "]", "=", "41", "\n", "v", "[", "47", ",", "6", "]", "=", "57", "\n", "v", "[", "48", ",", "6", "]", "=", "121", "\n", "v", "[", "49", ",", "6", "]", "=", "87", "\n", "v", "[", "50", ",", "6", "]", "=", "119", "\n", "v", "[", "51", ",", "6", "]", "=", "55", "\n", "v", "[", "52", ",", "6", "]", "=", "85", "\n", "v", "[", "53", ",", "6", "]", "=", "121", "\n", "v", "[", "54", ",", "6", "]", "=", "119", "\n", "v", "[", "55", ",", "6", "]", "=", "11", "\n", "v", "[", "56", ",", "6", "]", "=", "23", "\n", "v", "[", "57", ",", "6", "]", "=", "61", "\n", "v", "[", "58", ",", "6", "]", "=", "11", "\n", "v", "[", "59", ",", "6", "]", "=", "35", "\n", "v", "[", "60", ",", "6", "]", "=", "33", "\n", "v", "[", "61", ",", "6", "]", "=", "43", "\n", "v", "[", "62", ",", "6", "]", "=", "107", "\n", "v", "[", "63", ",", "6", "]", "=", "113", "\n", "v", "[", "64", ",", "6", "]", "=", "101", "\n", "v", "[", "65", ",", "6", "]", "=", "29", "\n", "v", "[", "66", ",", "6", "]", "=", "87", "\n", "v", "[", "67", ",", "6", "]", "=", "119", "\n", "v", "[", "68", ",", "6", "]", "=", "97", "\n", "v", "[", "69", ",", "6", "]", "=", "29", "\n", "v", "[", "70", ",", "6", "]", "=", "17", "\n", "v", "[", "71", ",", "6", "]", "=", "89", "\n", "v", "[", "72", ",", "6", "]", "=", "5", "\n", "v", "[", "73", ",", "6", "]", "=", "127", "\n", "v", "[", "74", ",", "6", "]", "=", "89", "\n", "v", "[", "75", ",", "6", "]", "=", "119", "\n", "v", "[", "76", ",", "6", "]", "=", "117", "\n", "v", "[", "77", ",", "6", "]", "=", "103", "\n", "v", "[", "78", ",", "6", "]", "=", "105", "\n", "v", "[", "79", ",", "6", "]", "=", "41", "\n", "v", "[", "80", ",", "6", "]", "=", "83", "\n", "v", "[", "81", ",", "6", "]", "=", "25", "\n", "v", "[", "82", ",", "6", "]", "=", "41", "\n", "v", "[", "83", ",", "6", "]", "=", "55", "\n", "v", "[", "84", ",", "6", "]", "=", "69", "\n", "v", "[", "85", ",", "6", "]", "=", "117", "\n", "v", "[", "86", ",", "6", "]", "=", "49", "\n", "v", "[", "87", ",", "6", "]", "=", "127", "\n", "v", "[", "88", ",", "6", "]", "=", "29", "\n", "v", "[", "89", ",", "6", "]", "=", "1", "\n", "v", "[", "90", ",", "6", "]", "=", "99", "\n", "v", "[", "91", ",", "6", "]", "=", "53", "\n", "v", "[", "92", ",", "6", "]", "=", "83", "\n", "v", "[", "93", ",", "6", "]", "=", "15", "\n", "v", "[", "94", ",", "6", "]", "=", "31", "\n", "v", "[", "95", ",", "6", "]", "=", "73", "\n", "v", "[", "96", ",", "6", "]", "=", "115", "\n", "v", "[", "97", ",", "6", "]", "=", "35", "\n", "v", "[", "98", ",", "6", "]", "=", "21", "\n", "v", "[", "99", ",", "6", "]", "=", "89", "\n", "v", "[", "100", ",", "6", "]", "=", "5", "\n", "v", "[", "101", ",", "6", "]", "=", "1", "\n", "v", "[", "102", ",", "6", "]", "=", "91", "\n", "v", "[", "103", ",", "6", "]", "=", "53", "\n", "v", "[", "104", ",", "6", "]", "=", "35", "\n", "v", "[", "105", ",", "6", "]", "=", "95", "\n", "v", "[", "106", ",", "6", "]", "=", "83", "\n", "v", "[", "107", ",", "6", "]", "=", "19", "\n", "v", "[", "108", ",", "6", "]", "=", "85", "\n", "v", "[", "109", ",", "6", "]", "=", "55", "\n", "v", "[", "110", ",", "6", "]", "=", "51", "\n", "v", "[", "111", ",", "6", "]", "=", "101", "\n", "v", "[", "112", ",", "6", "]", "=", "33", "\n", "v", "[", "113", ",", "6", "]", "=", "41", "\n", "v", "[", "114", ",", "6", "]", "=", "55", "\n", "v", "[", "115", ",", "6", "]", "=", "45", "\n", "v", "[", "116", ",", "6", "]", "=", "95", "\n", "v", "[", "117", ",", "6", "]", "=", "61", "\n", "v", "[", "118", ",", "6", "]", "=", "27", "\n", "v", "[", "119", ",", "6", "]", "=", "37", "\n", "v", "[", "120", ",", "6", "]", "=", "89", "\n", "v", "[", "121", ",", "6", "]", "=", "75", "\n", "v", "[", "122", ",", "6", "]", "=", "57", "\n", "v", "[", "123", ",", "6", "]", "=", "61", "\n", "v", "[", "124", ",", "6", "]", "=", "15", "\n", "v", "[", "125", ",", "6", "]", "=", "117", "\n", "v", "[", "126", ",", "6", "]", "=", "15", "\n", "v", "[", "127", ",", "6", "]", "=", "21", "\n", "v", "[", "128", ",", "6", "]", "=", "27", "\n", "v", "[", "129", ",", "6", "]", "=", "25", "\n", "v", "[", "130", ",", "6", "]", "=", "27", "\n", "v", "[", "131", ",", "6", "]", "=", "123", "\n", "v", "[", "132", ",", "6", "]", "=", "39", "\n", "v", "[", "133", ",", "6", "]", "=", "109", "\n", "v", "[", "134", ",", "6", "]", "=", "93", "\n", "v", "[", "135", ",", "6", "]", "=", "51", "\n", "v", "[", "136", ",", "6", "]", "=", "21", "\n", "v", "[", "137", ",", "6", "]", "=", "91", "\n", "v", "[", "138", ",", "6", "]", "=", "109", "\n", "v", "[", "139", ",", "6", "]", "=", "107", "\n", "v", "[", "140", ",", "6", "]", "=", "45", "\n", "v", "[", "141", ",", "6", "]", "=", "15", "\n", "v", "[", "142", ",", "6", "]", "=", "93", "\n", "v", "[", "143", ",", "6", "]", "=", "127", "\n", "v", "[", "144", ",", "6", "]", "=", "3", "\n", "v", "[", "145", ",", "6", "]", "=", "53", "\n", "v", "[", "146", ",", "6", "]", "=", "81", "\n", "v", "[", "147", ",", "6", "]", "=", "79", "\n", "v", "[", "148", ",", "6", "]", "=", "107", "\n", "v", "[", "149", ",", "6", "]", "=", "79", "\n", "v", "[", "150", ",", "6", "]", "=", "87", "\n", "v", "[", "151", ",", "6", "]", "=", "35", "\n", "v", "[", "152", ",", "6", "]", "=", "109", "\n", "v", "[", "153", ",", "6", "]", "=", "73", "\n", "v", "[", "154", ",", "6", "]", "=", "35", "\n", "v", "[", "155", ",", "6", "]", "=", "83", "\n", "v", "[", "156", ",", "6", "]", "=", "107", "\n", "v", "[", "157", ",", "6", "]", "=", "1", "\n", "v", "[", "158", ",", "6", "]", "=", "51", "\n", "v", "[", "159", ",", "6", "]", "=", "7", "\n", "v", "[", "160", ",", "6", "]", "=", "59", "\n", "v", "[", "161", ",", "6", "]", "=", "33", "\n", "v", "[", "162", ",", "6", "]", "=", "115", "\n", "v", "[", "163", ",", "6", "]", "=", "43", "\n", "v", "[", "164", ",", "6", "]", "=", "111", "\n", "v", "[", "165", ",", "6", "]", "=", "45", "\n", "v", "[", "166", ",", "6", "]", "=", "121", "\n", "v", "[", "167", ",", "6", "]", "=", "105", "\n", "v", "[", "168", ",", "6", "]", "=", "125", "\n", "v", "[", "169", ",", "6", "]", "=", "87", "\n", "v", "[", "170", ",", "6", "]", "=", "101", "\n", "v", "[", "171", ",", "6", "]", "=", "41", "\n", "v", "[", "172", ",", "6", "]", "=", "95", "\n", "v", "[", "173", ",", "6", "]", "=", "75", "\n", "v", "[", "174", ",", "6", "]", "=", "1", "\n", "v", "[", "175", ",", "6", "]", "=", "57", "\n", "v", "[", "176", ",", "6", "]", "=", "117", "\n", "v", "[", "177", ",", "6", "]", "=", "21", "\n", "v", "[", "178", ",", "6", "]", "=", "27", "\n", "v", "[", "179", ",", "6", "]", "=", "67", "\n", "v", "[", "180", ",", "6", "]", "=", "29", "\n", "v", "[", "181", ",", "6", "]", "=", "53", "\n", "v", "[", "182", ",", "6", "]", "=", "117", "\n", "v", "[", "183", ",", "6", "]", "=", "63", "\n", "v", "[", "184", ",", "6", "]", "=", "1", "\n", "v", "[", "185", ",", "6", "]", "=", "77", "\n", "v", "[", "186", ",", "6", "]", "=", "89", "\n", "v", "[", "187", ",", "6", "]", "=", "115", "\n", "v", "[", "188", ",", "6", "]", "=", "49", "\n", "v", "[", "189", ",", "6", "]", "=", "127", "\n", "v", "[", "190", ",", "6", "]", "=", "15", "\n", "v", "[", "191", ",", "6", "]", "=", "79", "\n", "v", "[", "192", ",", "6", "]", "=", "81", "\n", "v", "[", "193", ",", "6", "]", "=", "29", "\n", "v", "[", "194", ",", "6", "]", "=", "65", "\n", "v", "[", "195", ",", "6", "]", "=", "103", "\n", "v", "[", "196", ",", "6", "]", "=", "33", "\n", "v", "[", "197", ",", "6", "]", "=", "73", "\n", "v", "[", "198", ",", "6", "]", "=", "79", "\n", "v", "[", "199", ",", "6", "]", "=", "29", "\n", "v", "[", "200", ",", "6", "]", "=", "21", "\n", "v", "[", "201", ",", "6", "]", "=", "113", "\n", "v", "[", "202", ",", "6", "]", "=", "31", "\n", "v", "[", "203", ",", "6", "]", "=", "33", "\n", "v", "[", "204", ",", "6", "]", "=", "107", "\n", "v", "[", "205", ",", "6", "]", "=", "95", "\n", "v", "[", "206", ",", "6", "]", "=", "111", "\n", "v", "[", "207", ",", "6", "]", "=", "59", "\n", "v", "[", "208", ",", "6", "]", "=", "99", "\n", "v", "[", "209", ",", "6", "]", "=", "117", "\n", "v", "[", "210", ",", "6", "]", "=", "63", "\n", "v", "[", "211", ",", "6", "]", "=", "63", "\n", "v", "[", "212", ",", "6", "]", "=", "99", "\n", "v", "[", "213", ",", "6", "]", "=", "39", "\n", "v", "[", "214", ",", "6", "]", "=", "9", "\n", "v", "[", "215", ",", "6", "]", "=", "35", "\n", "v", "[", "216", ",", "6", "]", "=", "63", "\n", "v", "[", "217", ",", "6", "]", "=", "125", "\n", "v", "[", "218", ",", "6", "]", "=", "99", "\n", "v", "[", "219", ",", "6", "]", "=", "45", "\n", "v", "[", "220", ",", "6", "]", "=", "93", "\n", "v", "[", "221", ",", "6", "]", "=", "33", "\n", "v", "[", "222", ",", "6", "]", "=", "93", "\n", "v", "[", "223", ",", "6", "]", "=", "9", "\n", "v", "[", "224", ",", "6", "]", "=", "105", "\n", "v", "[", "225", ",", "6", "]", "=", "75", "\n", "v", "[", "226", ",", "6", "]", "=", "51", "\n", "v", "[", "227", ",", "6", "]", "=", "115", "\n", "v", "[", "228", ",", "6", "]", "=", "11", "\n", "v", "[", "229", ",", "6", "]", "=", "37", "\n", "v", "[", "230", ",", "6", "]", "=", "17", "\n", "v", "[", "231", ",", "6", "]", "=", "41", "\n", "v", "[", "232", ",", "6", "]", "=", "21", "\n", "v", "[", "233", ",", "6", "]", "=", "43", "\n", "v", "[", "234", ",", "6", "]", "=", "73", "\n", "v", "[", "235", ",", "6", "]", "=", "19", "\n", "v", "[", "236", ",", "6", "]", "=", "93", "\n", "v", "[", "237", ",", "6", "]", "=", "7", "\n", "v", "[", "238", ",", "6", "]", "=", "95", "\n", "v", "[", "239", ",", "6", "]", "=", "81", "\n", "v", "[", "240", ",", "6", "]", "=", "93", "\n", "v", "[", "241", ",", "6", "]", "=", "79", "\n", "v", "[", "242", ",", "6", "]", "=", "81", "\n", "v", "[", "243", ",", "6", "]", "=", "55", "\n", "v", "[", "244", ",", "6", "]", "=", "9", "\n", "v", "[", "245", ",", "6", "]", "=", "51", "\n", "v", "[", "246", ",", "6", "]", "=", "63", "\n", "v", "[", "247", ",", "6", "]", "=", "45", "\n", "v", "[", "248", ",", "6", "]", "=", "89", "\n", "v", "[", "249", ",", "6", "]", "=", "73", "\n", "v", "[", "250", ",", "6", "]", "=", "19", "\n", "v", "[", "251", ",", "6", "]", "=", "115", "\n", "v", "[", "252", ",", "6", "]", "=", "39", "\n", "v", "[", "253", ",", "6", "]", "=", "47", "\n", "v", "[", "254", ",", "6", "]", "=", "81", "\n", "v", "[", "255", ",", "6", "]", "=", "39", "\n", "v", "[", "256", ",", "6", "]", "=", "5", "\n", "v", "[", "257", ",", "6", "]", "=", "5", "\n", "v", "[", "258", ",", "6", "]", "=", "45", "\n", "v", "[", "259", ",", "6", "]", "=", "53", "\n", "v", "[", "260", ",", "6", "]", "=", "65", "\n", "v", "[", "261", ",", "6", "]", "=", "49", "\n", "v", "[", "262", ",", "6", "]", "=", "17", "\n", "v", "[", "263", ",", "6", "]", "=", "105", "\n", "v", "[", "264", ",", "6", "]", "=", "13", "\n", "v", "[", "265", ",", "6", "]", "=", "107", "\n", "v", "[", "266", ",", "6", "]", "=", "5", "\n", "v", "[", "267", ",", "6", "]", "=", "5", "\n", "v", "[", "268", ",", "6", "]", "=", "19", "\n", "v", "[", "269", ",", "6", "]", "=", "73", "\n", "v", "[", "270", ",", "6", "]", "=", "59", "\n", "v", "[", "271", ",", "6", "]", "=", "43", "\n", "v", "[", "272", ",", "6", "]", "=", "83", "\n", "v", "[", "273", ",", "6", "]", "=", "97", "\n", "v", "[", "274", ",", "6", "]", "=", "115", "\n", "v", "[", "275", ",", "6", "]", "=", "27", "\n", "v", "[", "276", ",", "6", "]", "=", "1", "\n", "v", "[", "277", ",", "6", "]", "=", "69", "\n", "v", "[", "278", ",", "6", "]", "=", "103", "\n", "v", "[", "279", ",", "6", "]", "=", "3", "\n", "v", "[", "280", ",", "6", "]", "=", "99", "\n", "v", "[", "281", ",", "6", "]", "=", "103", "\n", "v", "[", "282", ",", "6", "]", "=", "63", "\n", "v", "[", "283", ",", "6", "]", "=", "67", "\n", "v", "[", "284", ",", "6", "]", "=", "25", "\n", "v", "[", "285", ",", "6", "]", "=", "121", "\n", "v", "[", "286", ",", "6", "]", "=", "97", "\n", "v", "[", "287", ",", "6", "]", "=", "77", "\n", "v", "[", "288", ",", "6", "]", "=", "13", "\n", "v", "[", "289", ",", "6", "]", "=", "83", "\n", "v", "[", "290", ",", "6", "]", "=", "103", "\n", "v", "[", "291", ",", "6", "]", "=", "41", "\n", "v", "[", "292", ",", "6", "]", "=", "11", "\n", "v", "[", "293", ",", "6", "]", "=", "27", "\n", "v", "[", "294", ",", "6", "]", "=", "81", "\n", "v", "[", "295", ",", "6", "]", "=", "37", "\n", "v", "[", "296", ",", "6", "]", "=", "33", "\n", "v", "[", "297", ",", "6", "]", "=", "125", "\n", "v", "[", "298", ",", "6", "]", "=", "71", "\n", "v", "[", "299", ",", "6", "]", "=", "41", "\n", "v", "[", "300", ",", "6", "]", "=", "41", "\n", "v", "[", "301", ",", "6", "]", "=", "59", "\n", "v", "[", "302", ",", "6", "]", "=", "41", "\n", "v", "[", "303", ",", "6", "]", "=", "87", "\n", "v", "[", "304", ",", "6", "]", "=", "123", "\n", "v", "[", "305", ",", "6", "]", "=", "43", "\n", "v", "[", "306", ",", "6", "]", "=", "101", "\n", "v", "[", "307", ",", "6", "]", "=", "63", "\n", "v", "[", "308", ",", "6", "]", "=", "45", "\n", "v", "[", "309", ",", "6", "]", "=", "39", "\n", "v", "[", "310", ",", "6", "]", "=", "21", "\n", "v", "[", "311", ",", "6", "]", "=", "97", "\n", "v", "[", "312", ",", "6", "]", "=", "15", "\n", "v", "[", "313", ",", "6", "]", "=", "97", "\n", "v", "[", "314", ",", "6", "]", "=", "111", "\n", "v", "[", "315", ",", "6", "]", "=", "21", "\n", "v", "[", "316", ",", "6", "]", "=", "49", "\n", "v", "[", "317", ",", "6", "]", "=", "13", "\n", "v", "[", "318", ",", "6", "]", "=", "17", "\n", "v", "[", "319", ",", "6", "]", "=", "79", "\n", "v", "[", "320", ",", "6", "]", "=", "91", "\n", "v", "[", "321", ",", "6", "]", "=", "65", "\n", "v", "[", "322", ",", "6", "]", "=", "105", "\n", "v", "[", "323", ",", "6", "]", "=", "75", "\n", "v", "[", "324", ",", "6", "]", "=", "1", "\n", "v", "[", "325", ",", "6", "]", "=", "45", "\n", "v", "[", "326", ",", "6", "]", "=", "67", "\n", "v", "[", "327", ",", "6", "]", "=", "83", "\n", "v", "[", "328", ",", "6", "]", "=", "107", "\n", "v", "[", "329", ",", "6", "]", "=", "125", "\n", "v", "[", "330", ",", "6", "]", "=", "87", "\n", "v", "[", "331", ",", "6", "]", "=", "15", "\n", "v", "[", "332", ",", "6", "]", "=", "81", "\n", "v", "[", "333", ",", "6", "]", "=", "95", "\n", "v", "[", "334", ",", "6", "]", "=", "105", "\n", "v", "[", "335", ",", "6", "]", "=", "65", "\n", "v", "[", "336", ",", "6", "]", "=", "45", "\n", "v", "[", "337", ",", "6", "]", "=", "59", "\n", "v", "[", "338", ",", "6", "]", "=", "103", "\n", "v", "[", "339", ",", "6", "]", "=", "23", "\n", "v", "[", "340", ",", "6", "]", "=", "103", "\n", "v", "[", "341", ",", "6", "]", "=", "99", "\n", "v", "[", "342", ",", "6", "]", "=", "67", "\n", "v", "[", "343", ",", "6", "]", "=", "99", "\n", "v", "[", "344", ",", "6", "]", "=", "47", "\n", "v", "[", "345", ",", "6", "]", "=", "117", "\n", "v", "[", "346", ",", "6", "]", "=", "71", "\n", "v", "[", "347", ",", "6", "]", "=", "89", "\n", "v", "[", "348", ",", "6", "]", "=", "35", "\n", "v", "[", "349", ",", "6", "]", "=", "53", "\n", "v", "[", "350", ",", "6", "]", "=", "73", "\n", "v", "[", "351", ",", "6", "]", "=", "9", "\n", "v", "[", "352", ",", "6", "]", "=", "115", "\n", "v", "[", "353", ",", "6", "]", "=", "49", "\n", "v", "[", "354", ",", "6", "]", "=", "37", "\n", "v", "[", "355", ",", "6", "]", "=", "1", "\n", "v", "[", "356", ",", "6", "]", "=", "35", "\n", "v", "[", "357", ",", "6", "]", "=", "9", "\n", "v", "[", "358", ",", "6", "]", "=", "45", "\n", "v", "[", "359", ",", "6", "]", "=", "81", "\n", "v", "[", "360", ",", "6", "]", "=", "19", "\n", "v", "[", "361", ",", "6", "]", "=", "127", "\n", "v", "[", "362", ",", "6", "]", "=", "17", "\n", "v", "[", "363", ",", "6", "]", "=", "17", "\n", "v", "[", "364", ",", "6", "]", "=", "105", "\n", "v", "[", "365", ",", "6", "]", "=", "89", "\n", "v", "[", "366", ",", "6", "]", "=", "49", "\n", "v", "[", "367", ",", "6", "]", "=", "101", "\n", "v", "[", "368", ",", "6", "]", "=", "7", "\n", "v", "[", "369", ",", "6", "]", "=", "37", "\n", "v", "[", "370", ",", "6", "]", "=", "33", "\n", "v", "[", "371", ",", "6", "]", "=", "11", "\n", "v", "[", "372", ",", "6", "]", "=", "95", "\n", "v", "[", "373", ",", "6", "]", "=", "95", "\n", "v", "[", "374", ",", "6", "]", "=", "17", "\n", "v", "[", "375", ",", "6", "]", "=", "111", "\n", "v", "[", "376", ",", "6", "]", "=", "105", "\n", "v", "[", "377", ",", "6", "]", "=", "41", "\n", "v", "[", "378", ",", "6", "]", "=", "115", "\n", "v", "[", "379", ",", "6", "]", "=", "5", "\n", "v", "[", "380", ",", "6", "]", "=", "69", "\n", "v", "[", "381", ",", "6", "]", "=", "101", "\n", "v", "[", "382", ",", "6", "]", "=", "27", "\n", "v", "[", "383", ",", "6", "]", "=", "27", "\n", "v", "[", "384", ",", "6", "]", "=", "101", "\n", "v", "[", "385", ",", "6", "]", "=", "103", "\n", "v", "[", "386", ",", "6", "]", "=", "53", "\n", "v", "[", "387", ",", "6", "]", "=", "9", "\n", "v", "[", "388", ",", "6", "]", "=", "21", "\n", "v", "[", "389", ",", "6", "]", "=", "43", "\n", "v", "[", "390", ",", "6", "]", "=", "79", "\n", "v", "[", "391", ",", "6", "]", "=", "91", "\n", "v", "[", "392", ",", "6", "]", "=", "65", "\n", "v", "[", "393", ",", "6", "]", "=", "117", "\n", "v", "[", "394", ",", "6", "]", "=", "87", "\n", "v", "[", "395", ",", "6", "]", "=", "125", "\n", "v", "[", "396", ",", "6", "]", "=", "55", "\n", "v", "[", "397", ",", "6", "]", "=", "45", "\n", "v", "[", "398", ",", "6", "]", "=", "63", "\n", "v", "[", "399", ",", "6", "]", "=", "85", "\n", "v", "[", "400", ",", "6", "]", "=", "83", "\n", "v", "[", "401", ",", "6", "]", "=", "97", "\n", "v", "[", "402", ",", "6", "]", "=", "45", "\n", "v", "[", "403", ",", "6", "]", "=", "83", "\n", "v", "[", "404", ",", "6", "]", "=", "87", "\n", "v", "[", "405", ",", "6", "]", "=", "113", "\n", "v", "[", "406", ",", "6", "]", "=", "93", "\n", "v", "[", "407", ",", "6", "]", "=", "95", "\n", "v", "[", "408", ",", "6", "]", "=", "5", "\n", "v", "[", "409", ",", "6", "]", "=", "17", "\n", "v", "[", "410", ",", "6", "]", "=", "77", "\n", "v", "[", "411", ",", "6", "]", "=", "77", "\n", "v", "[", "412", ",", "6", "]", "=", "127", "\n", "v", "[", "413", ",", "6", "]", "=", "123", "\n", "v", "[", "414", ",", "6", "]", "=", "45", "\n", "v", "[", "415", ",", "6", "]", "=", "81", "\n", "v", "[", "416", ",", "6", "]", "=", "85", "\n", "v", "[", "417", ",", "6", "]", "=", "121", "\n", "v", "[", "418", ",", "6", "]", "=", "119", "\n", "v", "[", "419", ",", "6", "]", "=", "27", "\n", "v", "[", "420", ",", "6", "]", "=", "85", "\n", "v", "[", "421", ",", "6", "]", "=", "41", "\n", "v", "[", "422", ",", "6", "]", "=", "49", "\n", "v", "[", "423", ",", "6", "]", "=", "15", "\n", "v", "[", "424", ",", "6", "]", "=", "107", "\n", "v", "[", "425", ",", "6", "]", "=", "21", "\n", "v", "[", "426", ",", "6", "]", "=", "51", "\n", "v", "[", "427", ",", "6", "]", "=", "119", "\n", "v", "[", "428", ",", "6", "]", "=", "11", "\n", "v", "[", "429", ",", "6", "]", "=", "87", "\n", "v", "[", "430", ",", "6", "]", "=", "101", "\n", "v", "[", "431", ",", "6", "]", "=", "115", "\n", "v", "[", "432", ",", "6", "]", "=", "63", "\n", "v", "[", "433", ",", "6", "]", "=", "63", "\n", "v", "[", "434", ",", "6", "]", "=", "37", "\n", "v", "[", "435", ",", "6", "]", "=", "121", "\n", "v", "[", "436", ",", "6", "]", "=", "109", "\n", "v", "[", "437", ",", "6", "]", "=", "7", "\n", "v", "[", "438", ",", "6", "]", "=", "43", "\n", "v", "[", "439", ",", "6", "]", "=", "69", "\n", "v", "[", "440", ",", "6", "]", "=", "19", "\n", "v", "[", "441", ",", "6", "]", "=", "77", "\n", "v", "[", "442", ",", "6", "]", "=", "49", "\n", "v", "[", "443", ",", "6", "]", "=", "71", "\n", "v", "[", "444", ",", "6", "]", "=", "59", "\n", "v", "[", "445", ",", "6", "]", "=", "35", "\n", "v", "[", "446", ",", "6", "]", "=", "7", "\n", "v", "[", "447", ",", "6", "]", "=", "13", "\n", "v", "[", "448", ",", "6", "]", "=", "55", "\n", "v", "[", "449", ",", "6", "]", "=", "101", "\n", "v", "[", "450", ",", "6", "]", "=", "127", "\n", "v", "[", "451", ",", "6", "]", "=", "103", "\n", "v", "[", "452", ",", "6", "]", "=", "85", "\n", "v", "[", "453", ",", "6", "]", "=", "109", "\n", "v", "[", "454", ",", "6", "]", "=", "29", "\n", "v", "[", "455", ",", "6", "]", "=", "61", "\n", "v", "[", "456", ",", "6", "]", "=", "67", "\n", "v", "[", "457", ",", "6", "]", "=", "21", "\n", "v", "[", "458", ",", "6", "]", "=", "111", "\n", "v", "[", "459", ",", "6", "]", "=", "67", "\n", "v", "[", "460", ",", "6", "]", "=", "23", "\n", "v", "[", "461", ",", "6", "]", "=", "57", "\n", "v", "[", "462", ",", "6", "]", "=", "75", "\n", "v", "[", "463", ",", "6", "]", "=", "71", "\n", "v", "[", "464", ",", "6", "]", "=", "101", "\n", "v", "[", "465", ",", "6", "]", "=", "123", "\n", "v", "[", "466", ",", "6", "]", "=", "41", "\n", "v", "[", "467", ",", "6", "]", "=", "107", "\n", "v", "[", "468", ",", "6", "]", "=", "101", "\n", "v", "[", "469", ",", "6", "]", "=", "107", "\n", "v", "[", "470", ",", "6", "]", "=", "125", "\n", "v", "[", "471", ",", "6", "]", "=", "27", "\n", "v", "[", "472", ",", "6", "]", "=", "47", "\n", "v", "[", "473", ",", "6", "]", "=", "119", "\n", "v", "[", "474", ",", "6", "]", "=", "41", "\n", "v", "[", "475", ",", "6", "]", "=", "19", "\n", "v", "[", "476", ",", "6", "]", "=", "127", "\n", "v", "[", "477", ",", "6", "]", "=", "33", "\n", "v", "[", "478", ",", "6", "]", "=", "31", "\n", "v", "[", "479", ",", "6", "]", "=", "109", "\n", "v", "[", "480", ",", "6", "]", "=", "7", "\n", "v", "[", "481", ",", "6", "]", "=", "91", "\n", "v", "[", "482", ",", "6", "]", "=", "91", "\n", "v", "[", "483", ",", "6", "]", "=", "39", "\n", "v", "[", "484", ",", "6", "]", "=", "125", "\n", "v", "[", "485", ",", "6", "]", "=", "105", "\n", "v", "[", "486", ",", "6", "]", "=", "47", "\n", "v", "[", "487", ",", "6", "]", "=", "125", "\n", "v", "[", "488", ",", "6", "]", "=", "123", "\n", "v", "[", "489", ",", "6", "]", "=", "91", "\n", "v", "[", "490", ",", "6", "]", "=", "9", "\n", "v", "[", "491", ",", "6", "]", "=", "103", "\n", "v", "[", "492", ",", "6", "]", "=", "45", "\n", "v", "[", "493", ",", "6", "]", "=", "23", "\n", "v", "[", "494", ",", "6", "]", "=", "117", "\n", "v", "[", "495", ",", "6", "]", "=", "9", "\n", "v", "[", "496", ",", "6", "]", "=", "125", "\n", "v", "[", "497", ",", "6", "]", "=", "73", "\n", "v", "[", "498", ",", "6", "]", "=", "11", "\n", "v", "[", "499", ",", "6", "]", "=", "37", "\n", "v", "[", "500", ",", "6", "]", "=", "61", "\n", "v", "[", "501", ",", "6", "]", "=", "79", "\n", "v", "[", "502", ",", "6", "]", "=", "21", "\n", "v", "[", "503", ",", "6", "]", "=", "5", "\n", "v", "[", "504", ",", "6", "]", "=", "47", "\n", "v", "[", "505", ",", "6", "]", "=", "117", "\n", "v", "[", "506", ",", "6", "]", "=", "67", "\n", "v", "[", "507", ",", "6", "]", "=", "53", "\n", "v", "[", "508", ",", "6", "]", "=", "85", "\n", "v", "[", "509", ",", "6", "]", "=", "33", "\n", "v", "[", "510", ",", "6", "]", "=", "81", "\n", "v", "[", "511", ",", "6", "]", "=", "121", "\n", "v", "[", "512", ",", "6", "]", "=", "47", "\n", "v", "[", "513", ",", "6", "]", "=", "61", "\n", "v", "[", "514", ",", "6", "]", "=", "51", "\n", "v", "[", "515", ",", "6", "]", "=", "127", "\n", "v", "[", "516", ",", "6", "]", "=", "29", "\n", "v", "[", "517", ",", "6", "]", "=", "65", "\n", "v", "[", "518", ",", "6", "]", "=", "45", "\n", "v", "[", "519", ",", "6", "]", "=", "41", "\n", "v", "[", "520", ",", "6", "]", "=", "95", "\n", "v", "[", "521", ",", "6", "]", "=", "57", "\n", "v", "[", "522", ",", "6", "]", "=", "73", "\n", "v", "[", "523", ",", "6", "]", "=", "33", "\n", "v", "[", "524", ",", "6", "]", "=", "117", "\n", "v", "[", "525", ",", "6", "]", "=", "61", "\n", "v", "[", "526", ",", "6", "]", "=", "111", "\n", "v", "[", "527", ",", "6", "]", "=", "59", "\n", "v", "[", "528", ",", "6", "]", "=", "123", "\n", "v", "[", "529", ",", "6", "]", "=", "65", "\n", "v", "[", "530", ",", "6", "]", "=", "47", "\n", "v", "[", "531", ",", "6", "]", "=", "105", "\n", "v", "[", "532", ",", "6", "]", "=", "23", "\n", "v", "[", "533", ",", "6", "]", "=", "29", "\n", "v", "[", "534", ",", "6", "]", "=", "107", "\n", "v", "[", "535", ",", "6", "]", "=", "37", "\n", "v", "[", "536", ",", "6", "]", "=", "81", "\n", "v", "[", "537", ",", "6", "]", "=", "67", "\n", "v", "[", "538", ",", "6", "]", "=", "29", "\n", "v", "[", "539", ",", "6", "]", "=", "115", "\n", "v", "[", "540", ",", "6", "]", "=", "119", "\n", "v", "[", "541", ",", "6", "]", "=", "75", "\n", "v", "[", "542", ",", "6", "]", "=", "73", "\n", "v", "[", "543", ",", "6", "]", "=", "99", "\n", "v", "[", "544", ",", "6", "]", "=", "103", "\n", "v", "[", "545", ",", "6", "]", "=", "7", "\n", "v", "[", "546", ",", "6", "]", "=", "57", "\n", "v", "[", "547", ",", "6", "]", "=", "45", "\n", "v", "[", "548", ",", "6", "]", "=", "61", "\n", "v", "[", "549", ",", "6", "]", "=", "95", "\n", "v", "[", "550", ",", "6", "]", "=", "49", "\n", "v", "[", "551", ",", "6", "]", "=", "101", "\n", "v", "[", "552", ",", "6", "]", "=", "101", "\n", "v", "[", "553", ",", "6", "]", "=", "35", "\n", "v", "[", "554", ",", "6", "]", "=", "47", "\n", "v", "[", "555", ",", "6", "]", "=", "119", "\n", "v", "[", "556", ",", "6", "]", "=", "39", "\n", "v", "[", "557", ",", "6", "]", "=", "67", "\n", "v", "[", "558", ",", "6", "]", "=", "31", "\n", "v", "[", "559", ",", "6", "]", "=", "103", "\n", "v", "[", "560", ",", "6", "]", "=", "7", "\n", "v", "[", "561", ",", "6", "]", "=", "61", "\n", "v", "[", "562", ",", "6", "]", "=", "127", "\n", "v", "[", "563", ",", "6", "]", "=", "87", "\n", "v", "[", "564", ",", "6", "]", "=", "3", "\n", "v", "[", "565", ",", "6", "]", "=", "35", "\n", "v", "[", "566", ",", "6", "]", "=", "29", "\n", "v", "[", "567", ",", "6", "]", "=", "73", "\n", "v", "[", "568", ",", "6", "]", "=", "95", "\n", "v", "[", "569", ",", "6", "]", "=", "103", "\n", "v", "[", "570", ",", "6", "]", "=", "71", "\n", "v", "[", "571", ",", "6", "]", "=", "75", "\n", "v", "[", "572", ",", "6", "]", "=", "51", "\n", "v", "[", "573", ",", "6", "]", "=", "87", "\n", "v", "[", "574", ",", "6", "]", "=", "57", "\n", "v", "[", "575", ",", "6", "]", "=", "97", "\n", "v", "[", "576", ",", "6", "]", "=", "11", "\n", "v", "[", "577", ",", "6", "]", "=", "105", "\n", "v", "[", "578", ",", "6", "]", "=", "87", "\n", "v", "[", "579", ",", "6", "]", "=", "41", "\n", "v", "[", "580", ",", "6", "]", "=", "73", "\n", "v", "[", "581", ",", "6", "]", "=", "109", "\n", "v", "[", "582", ",", "6", "]", "=", "69", "\n", "v", "[", "583", ",", "6", "]", "=", "35", "\n", "v", "[", "584", ",", "6", "]", "=", "121", "\n", "v", "[", "585", ",", "6", "]", "=", "39", "\n", "v", "[", "586", ",", "6", "]", "=", "111", "\n", "v", "[", "587", ",", "6", "]", "=", "1", "\n", "v", "[", "588", ",", "6", "]", "=", "77", "\n", "v", "[", "589", ",", "6", "]", "=", "39", "\n", "v", "[", "590", ",", "6", "]", "=", "47", "\n", "v", "[", "591", ",", "6", "]", "=", "53", "\n", "v", "[", "592", ",", "6", "]", "=", "91", "\n", "v", "[", "593", ",", "6", "]", "=", "3", "\n", "v", "[", "594", ",", "6", "]", "=", "17", "\n", "v", "[", "595", ",", "6", "]", "=", "51", "\n", "v", "[", "596", ",", "6", "]", "=", "83", "\n", "v", "[", "597", ",", "6", "]", "=", "39", "\n", "v", "[", "598", ",", "6", "]", "=", "125", "\n", "v", "[", "599", ",", "6", "]", "=", "85", "\n", "v", "[", "600", ",", "6", "]", "=", "111", "\n", "v", "[", "601", ",", "6", "]", "=", "21", "\n", "v", "[", "602", ",", "6", "]", "=", "69", "\n", "v", "[", "603", ",", "6", "]", "=", "85", "\n", "v", "[", "604", ",", "6", "]", "=", "29", "\n", "v", "[", "605", ",", "6", "]", "=", "55", "\n", "v", "[", "606", ",", "6", "]", "=", "11", "\n", "v", "[", "607", ",", "6", "]", "=", "117", "\n", "v", "[", "608", ",", "6", "]", "=", "1", "\n", "v", "[", "609", ",", "6", "]", "=", "47", "\n", "v", "[", "610", ",", "6", "]", "=", "17", "\n", "v", "[", "611", ",", "6", "]", "=", "65", "\n", "v", "[", "612", ",", "6", "]", "=", "63", "\n", "v", "[", "613", ",", "6", "]", "=", "47", "\n", "v", "[", "614", ",", "6", "]", "=", "117", "\n", "v", "[", "615", ",", "6", "]", "=", "17", "\n", "v", "[", "616", ",", "6", "]", "=", "115", "\n", "v", "[", "617", ",", "6", "]", "=", "51", "\n", "v", "[", "618", ",", "6", "]", "=", "25", "\n", "v", "[", "619", ",", "6", "]", "=", "33", "\n", "v", "[", "620", ",", "6", "]", "=", "123", "\n", "v", "[", "621", ",", "6", "]", "=", "123", "\n", "v", "[", "622", ",", "6", "]", "=", "83", "\n", "v", "[", "623", ",", "6", "]", "=", "51", "\n", "v", "[", "624", ",", "6", "]", "=", "113", "\n", "v", "[", "625", ",", "6", "]", "=", "95", "\n", "v", "[", "626", ",", "6", "]", "=", "121", "\n", "v", "[", "627", ",", "6", "]", "=", "51", "\n", "v", "[", "628", ",", "6", "]", "=", "91", "\n", "v", "[", "629", ",", "6", "]", "=", "109", "\n", "v", "[", "630", ",", "6", "]", "=", "43", "\n", "v", "[", "631", ",", "6", "]", "=", "55", "\n", "v", "[", "632", ",", "6", "]", "=", "35", "\n", "v", "[", "633", ",", "6", "]", "=", "55", "\n", "v", "[", "634", ",", "6", "]", "=", "87", "\n", "v", "[", "635", ",", "6", "]", "=", "33", "\n", "v", "[", "636", ",", "6", "]", "=", "37", "\n", "v", "[", "637", ",", "6", "]", "=", "5", "\n", "v", "[", "638", ",", "6", "]", "=", "3", "\n", "v", "[", "639", ",", "6", "]", "=", "45", "\n", "v", "[", "640", ",", "6", "]", "=", "21", "\n", "v", "[", "641", ",", "6", "]", "=", "105", "\n", "v", "[", "642", ",", "6", "]", "=", "127", "\n", "v", "[", "643", ",", "6", "]", "=", "35", "\n", "v", "[", "644", ",", "6", "]", "=", "17", "\n", "v", "[", "645", ",", "6", "]", "=", "35", "\n", "v", "[", "646", ",", "6", "]", "=", "37", "\n", "v", "[", "647", ",", "6", "]", "=", "97", "\n", "v", "[", "648", ",", "6", "]", "=", "97", "\n", "v", "[", "649", ",", "6", "]", "=", "21", "\n", "v", "[", "650", ",", "6", "]", "=", "77", "\n", "v", "[", "651", ",", "6", "]", "=", "123", "\n", "v", "[", "652", ",", "6", "]", "=", "17", "\n", "v", "[", "653", ",", "6", "]", "=", "89", "\n", "v", "[", "654", ",", "6", "]", "=", "53", "\n", "v", "[", "655", ",", "6", "]", "=", "105", "\n", "v", "[", "656", ",", "6", "]", "=", "75", "\n", "v", "[", "657", ",", "6", "]", "=", "25", "\n", "v", "[", "658", ",", "6", "]", "=", "125", "\n", "v", "[", "659", ",", "6", "]", "=", "13", "\n", "v", "[", "660", ",", "6", "]", "=", "47", "\n", "v", "[", "661", ",", "6", "]", "=", "21", "\n", "v", "[", "662", ",", "6", "]", "=", "125", "\n", "v", "[", "663", ",", "6", "]", "=", "23", "\n", "v", "[", "664", ",", "6", "]", "=", "55", "\n", "v", "[", "665", ",", "6", "]", "=", "63", "\n", "v", "[", "666", ",", "6", "]", "=", "61", "\n", "v", "[", "667", ",", "6", "]", "=", "5", "\n", "v", "[", "668", ",", "6", "]", "=", "17", "\n", "v", "[", "669", ",", "6", "]", "=", "93", "\n", "v", "[", "670", ",", "6", "]", "=", "57", "\n", "v", "[", "671", ",", "6", "]", "=", "121", "\n", "v", "[", "672", ",", "6", "]", "=", "69", "\n", "v", "[", "673", ",", "6", "]", "=", "73", "\n", "v", "[", "674", ",", "6", "]", "=", "93", "\n", "v", "[", "675", ",", "6", "]", "=", "121", "\n", "v", "[", "676", ",", "6", "]", "=", "105", "\n", "v", "[", "677", ",", "6", "]", "=", "75", "\n", "v", "[", "678", ",", "6", "]", "=", "91", "\n", "v", "[", "679", ",", "6", "]", "=", "67", "\n", "v", "[", "680", ",", "6", "]", "=", "95", "\n", "v", "[", "681", ",", "6", "]", "=", "75", "\n", "v", "[", "682", ",", "6", "]", "=", "9", "\n", "v", "[", "683", ",", "6", "]", "=", "69", "\n", "v", "[", "684", ",", "6", "]", "=", "97", "\n", "v", "[", "685", ",", "6", "]", "=", "99", "\n", "v", "[", "686", ",", "6", "]", "=", "93", "\n", "v", "[", "687", ",", "6", "]", "=", "11", "\n", "v", "[", "688", ",", "6", "]", "=", "53", "\n", "v", "[", "689", ",", "6", "]", "=", "19", "\n", "v", "[", "690", ",", "6", "]", "=", "73", "\n", "v", "[", "691", ",", "6", "]", "=", "5", "\n", "v", "[", "692", ",", "6", "]", "=", "33", "\n", "v", "[", "693", ",", "6", "]", "=", "79", "\n", "v", "[", "694", ",", "6", "]", "=", "107", "\n", "v", "[", "695", ",", "6", "]", "=", "65", "\n", "v", "[", "696", ",", "6", "]", "=", "69", "\n", "v", "[", "697", ",", "6", "]", "=", "79", "\n", "v", "[", "698", ",", "6", "]", "=", "125", "\n", "v", "[", "699", ",", "6", "]", "=", "25", "\n", "v", "[", "700", ",", "6", "]", "=", "93", "\n", "v", "[", "701", ",", "6", "]", "=", "55", "\n", "v", "[", "702", ",", "6", "]", "=", "61", "\n", "v", "[", "703", ",", "6", "]", "=", "17", "\n", "v", "[", "704", ",", "6", "]", "=", "117", "\n", "v", "[", "705", ",", "6", "]", "=", "69", "\n", "v", "[", "706", ",", "6", "]", "=", "97", "\n", "v", "[", "707", ",", "6", "]", "=", "87", "\n", "v", "[", "708", ",", "6", "]", "=", "111", "\n", "v", "[", "709", ",", "6", "]", "=", "37", "\n", "v", "[", "710", ",", "6", "]", "=", "93", "\n", "v", "[", "711", ",", "6", "]", "=", "59", "\n", "v", "[", "712", ",", "6", "]", "=", "79", "\n", "v", "[", "713", ",", "6", "]", "=", "95", "\n", "v", "[", "714", ",", "6", "]", "=", "53", "\n", "v", "[", "715", ",", "6", "]", "=", "115", "\n", "v", "[", "716", ",", "6", "]", "=", "53", "\n", "v", "[", "717", ",", "6", "]", "=", "85", "\n", "v", "[", "718", ",", "6", "]", "=", "85", "\n", "v", "[", "719", ",", "6", "]", "=", "65", "\n", "v", "[", "720", ",", "6", "]", "=", "59", "\n", "v", "[", "721", ",", "6", "]", "=", "23", "\n", "v", "[", "722", ",", "6", "]", "=", "75", "\n", "v", "[", "723", ",", "6", "]", "=", "21", "\n", "v", "[", "724", ",", "6", "]", "=", "67", "\n", "v", "[", "725", ",", "6", "]", "=", "27", "\n", "v", "[", "726", ",", "6", "]", "=", "99", "\n", "v", "[", "727", ",", "6", "]", "=", "79", "\n", "v", "[", "728", ",", "6", "]", "=", "27", "\n", "v", "[", "729", ",", "6", "]", "=", "3", "\n", "v", "[", "730", ",", "6", "]", "=", "95", "\n", "v", "[", "731", ",", "6", "]", "=", "27", "\n", "v", "[", "732", ",", "6", "]", "=", "69", "\n", "v", "[", "733", ",", "6", "]", "=", "19", "\n", "v", "[", "734", ",", "6", "]", "=", "75", "\n", "v", "[", "735", ",", "6", "]", "=", "47", "\n", "v", "[", "736", ",", "6", "]", "=", "59", "\n", "v", "[", "737", ",", "6", "]", "=", "41", "\n", "v", "[", "738", ",", "6", "]", "=", "85", "\n", "v", "[", "739", ",", "6", "]", "=", "77", "\n", "v", "[", "740", ",", "6", "]", "=", "99", "\n", "v", "[", "741", ",", "6", "]", "=", "55", "\n", "v", "[", "742", ",", "6", "]", "=", "49", "\n", "v", "[", "743", ",", "6", "]", "=", "93", "\n", "v", "[", "744", ",", "6", "]", "=", "93", "\n", "v", "[", "745", ",", "6", "]", "=", "119", "\n", "v", "[", "746", ",", "6", "]", "=", "51", "\n", "v", "[", "747", ",", "6", "]", "=", "125", "\n", "v", "[", "748", ",", "6", "]", "=", "63", "\n", "v", "[", "749", ",", "6", "]", "=", "13", "\n", "v", "[", "750", ",", "6", "]", "=", "15", "\n", "v", "[", "751", ",", "6", "]", "=", "45", "\n", "v", "[", "752", ",", "6", "]", "=", "61", "\n", "v", "[", "753", ",", "6", "]", "=", "19", "\n", "v", "[", "754", ",", "6", "]", "=", "105", "\n", "v", "[", "755", ",", "6", "]", "=", "115", "\n", "v", "[", "756", ",", "6", "]", "=", "17", "\n", "v", "[", "757", ",", "6", "]", "=", "83", "\n", "v", "[", "758", ",", "6", "]", "=", "7", "\n", "v", "[", "759", ",", "6", "]", "=", "7", "\n", "v", "[", "760", ",", "6", "]", "=", "11", "\n", "v", "[", "761", ",", "6", "]", "=", "61", "\n", "v", "[", "762", ",", "6", "]", "=", "37", "\n", "v", "[", "763", ",", "6", "]", "=", "63", "\n", "v", "[", "764", ",", "6", "]", "=", "89", "\n", "v", "[", "765", ",", "6", "]", "=", "95", "\n", "v", "[", "766", ",", "6", "]", "=", "119", "\n", "v", "[", "767", ",", "6", "]", "=", "113", "\n", "v", "[", "768", ",", "6", "]", "=", "67", "\n", "v", "[", "769", ",", "6", "]", "=", "123", "\n", "v", "[", "770", ",", "6", "]", "=", "91", "\n", "v", "[", "771", ",", "6", "]", "=", "33", "\n", "v", "[", "772", ",", "6", "]", "=", "37", "\n", "v", "[", "773", ",", "6", "]", "=", "99", "\n", "v", "[", "774", ",", "6", "]", "=", "43", "\n", "v", "[", "775", ",", "6", "]", "=", "11", "\n", "v", "[", "776", ",", "6", "]", "=", "33", "\n", "v", "[", "777", ",", "6", "]", "=", "65", "\n", "v", "[", "778", ",", "6", "]", "=", "81", "\n", "v", "[", "779", ",", "6", "]", "=", "79", "\n", "v", "[", "780", ",", "6", "]", "=", "81", "\n", "v", "[", "781", ",", "6", "]", "=", "107", "\n", "v", "[", "782", ",", "6", "]", "=", "63", "\n", "v", "[", "783", ",", "6", "]", "=", "63", "\n", "v", "[", "784", ",", "6", "]", "=", "55", "\n", "v", "[", "785", ",", "6", "]", "=", "89", "\n", "v", "[", "786", ",", "6", "]", "=", "91", "\n", "v", "[", "787", ",", "6", "]", "=", "25", "\n", "v", "[", "788", ",", "6", "]", "=", "93", "\n", "v", "[", "789", ",", "6", "]", "=", "101", "\n", "v", "[", "790", ",", "6", "]", "=", "27", "\n", "v", "[", "791", ",", "6", "]", "=", "55", "\n", "v", "[", "792", ",", "6", "]", "=", "75", "\n", "v", "[", "793", ",", "6", "]", "=", "121", "\n", "v", "[", "794", ",", "6", "]", "=", "79", "\n", "v", "[", "795", ",", "6", "]", "=", "43", "\n", "v", "[", "796", ",", "6", "]", "=", "125", "\n", "v", "[", "797", ",", "6", "]", "=", "73", "\n", "v", "[", "798", ",", "6", "]", "=", "27", "\n", "v", "[", "799", ",", "6", "]", "=", "109", "\n", "v", "[", "800", ",", "6", "]", "=", "35", "\n", "v", "[", "801", ",", "6", "]", "=", "21", "\n", "v", "[", "802", ",", "6", "]", "=", "71", "\n", "v", "[", "803", ",", "6", "]", "=", "113", "\n", "v", "[", "804", ",", "6", "]", "=", "89", "\n", "v", "[", "805", ",", "6", "]", "=", "59", "\n", "v", "[", "806", ",", "6", "]", "=", "95", "\n", "v", "[", "807", ",", "6", "]", "=", "41", "\n", "v", "[", "808", ",", "6", "]", "=", "45", "\n", "v", "[", "809", ",", "6", "]", "=", "113", "\n", "v", "[", "810", ",", "6", "]", "=", "119", "\n", "v", "[", "811", ",", "6", "]", "=", "113", "\n", "v", "[", "812", ",", "6", "]", "=", "39", "\n", "v", "[", "813", ",", "6", "]", "=", "59", "\n", "v", "[", "814", ",", "6", "]", "=", "73", "\n", "v", "[", "815", ",", "6", "]", "=", "15", "\n", "v", "[", "816", ",", "6", "]", "=", "13", "\n", "v", "[", "817", ",", "6", "]", "=", "59", "\n", "v", "[", "818", ",", "6", "]", "=", "67", "\n", "v", "[", "819", ",", "6", "]", "=", "121", "\n", "v", "[", "820", ",", "6", "]", "=", "27", "\n", "v", "[", "821", ",", "6", "]", "=", "7", "\n", "v", "[", "822", ",", "6", "]", "=", "105", "\n", "v", "[", "823", ",", "6", "]", "=", "15", "\n", "v", "[", "824", ",", "6", "]", "=", "59", "\n", "v", "[", "825", ",", "6", "]", "=", "59", "\n", "v", "[", "826", ",", "6", "]", "=", "35", "\n", "v", "[", "827", ",", "6", "]", "=", "91", "\n", "v", "[", "828", ",", "6", "]", "=", "89", "\n", "v", "[", "829", ",", "6", "]", "=", "23", "\n", "v", "[", "830", ",", "6", "]", "=", "125", "\n", "v", "[", "831", ",", "6", "]", "=", "97", "\n", "v", "[", "832", ",", "6", "]", "=", "53", "\n", "v", "[", "833", ",", "6", "]", "=", "41", "\n", "v", "[", "834", ",", "6", "]", "=", "91", "\n", "v", "[", "835", ",", "6", "]", "=", "111", "\n", "v", "[", "836", ",", "6", "]", "=", "29", "\n", "v", "[", "837", ",", "6", "]", "=", "31", "\n", "v", "[", "838", ",", "6", "]", "=", "3", "\n", "v", "[", "839", ",", "6", "]", "=", "103", "\n", "v", "[", "840", ",", "6", "]", "=", "61", "\n", "v", "[", "841", ",", "6", "]", "=", "71", "\n", "v", "[", "842", ",", "6", "]", "=", "35", "\n", "v", "[", "843", ",", "6", "]", "=", "7", "\n", "v", "[", "844", ",", "6", "]", "=", "119", "\n", "v", "[", "845", ",", "6", "]", "=", "29", "\n", "v", "[", "846", ",", "6", "]", "=", "45", "\n", "v", "[", "847", ",", "6", "]", "=", "49", "\n", "v", "[", "848", ",", "6", "]", "=", "111", "\n", "v", "[", "849", ",", "6", "]", "=", "41", "\n", "v", "[", "850", ",", "6", "]", "=", "109", "\n", "v", "[", "851", ",", "6", "]", "=", "59", "\n", "v", "[", "852", ",", "6", "]", "=", "125", "\n", "v", "[", "853", ",", "6", "]", "=", "13", "\n", "v", "[", "854", ",", "6", "]", "=", "27", "\n", "v", "[", "855", ",", "6", "]", "=", "19", "\n", "v", "[", "856", ",", "6", "]", "=", "79", "\n", "v", "[", "857", ",", "6", "]", "=", "9", "\n", "v", "[", "858", ",", "6", "]", "=", "75", "\n", "v", "[", "859", ",", "6", "]", "=", "83", "\n", "v", "[", "860", ",", "6", "]", "=", "81", "\n", "v", "[", "861", ",", "6", "]", "=", "33", "\n", "v", "[", "862", ",", "6", "]", "=", "91", "\n", "v", "[", "863", ",", "6", "]", "=", "109", "\n", "v", "[", "864", ",", "6", "]", "=", "33", "\n", "v", "[", "865", ",", "6", "]", "=", "29", "\n", "v", "[", "866", ",", "6", "]", "=", "107", "\n", "v", "[", "867", ",", "6", "]", "=", "111", "\n", "v", "[", "868", ",", "6", "]", "=", "101", "\n", "v", "[", "869", ",", "6", "]", "=", "107", "\n", "v", "[", "870", ",", "6", "]", "=", "109", "\n", "v", "[", "871", ",", "6", "]", "=", "65", "\n", "v", "[", "872", ",", "6", "]", "=", "59", "\n", "v", "[", "873", ",", "6", "]", "=", "43", "\n", "v", "[", "874", ",", "6", "]", "=", "37", "\n", "v", "[", "875", ",", "6", "]", "=", "1", "\n", "v", "[", "876", ",", "6", "]", "=", "9", "\n", "v", "[", "877", ",", "6", "]", "=", "15", "\n", "v", "[", "878", ",", "6", "]", "=", "109", "\n", "v", "[", "879", ",", "6", "]", "=", "37", "\n", "v", "[", "880", ",", "6", "]", "=", "111", "\n", "v", "[", "881", ",", "6", "]", "=", "113", "\n", "v", "[", "882", ",", "6", "]", "=", "119", "\n", "v", "[", "883", ",", "6", "]", "=", "79", "\n", "v", "[", "884", ",", "6", "]", "=", "73", "\n", "v", "[", "885", ",", "6", "]", "=", "65", "\n", "v", "[", "886", ",", "6", "]", "=", "71", "\n", "v", "[", "887", ",", "6", "]", "=", "93", "\n", "v", "[", "888", ",", "6", "]", "=", "17", "\n", "v", "[", "889", ",", "6", "]", "=", "101", "\n", "v", "[", "890", ",", "6", "]", "=", "87", "\n", "v", "[", "891", ",", "6", "]", "=", "97", "\n", "v", "[", "892", ",", "6", "]", "=", "43", "\n", "v", "[", "893", ",", "6", "]", "=", "23", "\n", "v", "[", "894", ",", "6", "]", "=", "75", "\n", "v", "[", "895", ",", "6", "]", "=", "109", "\n", "v", "[", "896", ",", "6", "]", "=", "41", "\n", "v", "[", "897", ",", "6", "]", "=", "49", "\n", "v", "[", "898", ",", "6", "]", "=", "53", "\n", "v", "[", "899", ",", "6", "]", "=", "31", "\n", "v", "[", "900", ",", "6", "]", "=", "97", "\n", "v", "[", "901", ",", "6", "]", "=", "105", "\n", "v", "[", "902", ",", "6", "]", "=", "109", "\n", "v", "[", "903", ",", "6", "]", "=", "119", "\n", "v", "[", "904", ",", "6", "]", "=", "51", "\n", "v", "[", "905", ",", "6", "]", "=", "9", "\n", "v", "[", "906", ",", "6", "]", "=", "53", "\n", "v", "[", "907", ",", "6", "]", "=", "113", "\n", "v", "[", "908", ",", "6", "]", "=", "97", "\n", "v", "[", "909", ",", "6", "]", "=", "73", "\n", "v", "[", "910", ",", "6", "]", "=", "89", "\n", "v", "[", "911", ",", "6", "]", "=", "79", "\n", "v", "[", "912", ",", "6", "]", "=", "49", "\n", "v", "[", "913", ",", "6", "]", "=", "61", "\n", "v", "[", "914", ",", "6", "]", "=", "105", "\n", "v", "[", "915", ",", "6", "]", "=", "13", "\n", "v", "[", "916", ",", "6", "]", "=", "99", "\n", "v", "[", "917", ",", "6", "]", "=", "53", "\n", "v", "[", "918", ",", "6", "]", "=", "71", "\n", "v", "[", "919", ",", "6", "]", "=", "7", "\n", "v", "[", "920", ",", "6", "]", "=", "87", "\n", "v", "[", "921", ",", "6", "]", "=", "21", "\n", "v", "[", "922", ",", "6", "]", "=", "101", "\n", "v", "[", "923", ",", "6", "]", "=", "5", "\n", "v", "[", "924", ",", "6", "]", "=", "71", "\n", "v", "[", "925", ",", "6", "]", "=", "31", "\n", "v", "[", "926", ",", "6", "]", "=", "123", "\n", "v", "[", "927", ",", "6", "]", "=", "121", "\n", "v", "[", "928", ",", "6", "]", "=", "121", "\n", "v", "[", "929", ",", "6", "]", "=", "73", "\n", "v", "[", "930", ",", "6", "]", "=", "79", "\n", "v", "[", "931", ",", "6", "]", "=", "115", "\n", "v", "[", "932", ",", "6", "]", "=", "13", "\n", "v", "[", "933", ",", "6", "]", "=", "39", "\n", "v", "[", "934", ",", "6", "]", "=", "101", "\n", "v", "[", "935", ",", "6", "]", "=", "19", "\n", "v", "[", "936", ",", "6", "]", "=", "37", "\n", "v", "[", "937", ",", "6", "]", "=", "51", "\n", "v", "[", "938", ",", "6", "]", "=", "83", "\n", "v", "[", "939", ",", "6", "]", "=", "97", "\n", "v", "[", "940", ",", "6", "]", "=", "55", "\n", "v", "[", "941", ",", "6", "]", "=", "81", "\n", "v", "[", "942", ",", "6", "]", "=", "91", "\n", "v", "[", "943", ",", "6", "]", "=", "127", "\n", "v", "[", "944", ",", "6", "]", "=", "105", "\n", "v", "[", "945", ",", "6", "]", "=", "89", "\n", "v", "[", "946", ",", "6", "]", "=", "63", "\n", "v", "[", "947", ",", "6", "]", "=", "47", "\n", "v", "[", "948", ",", "6", "]", "=", "49", "\n", "v", "[", "949", ",", "6", "]", "=", "75", "\n", "v", "[", "950", ",", "6", "]", "=", "37", "\n", "v", "[", "951", ",", "6", "]", "=", "77", "\n", "v", "[", "952", ",", "6", "]", "=", "15", "\n", "v", "[", "953", ",", "6", "]", "=", "49", "\n", "v", "[", "954", ",", "6", "]", "=", "107", "\n", "v", "[", "955", ",", "6", "]", "=", "23", "\n", "v", "[", "956", ",", "6", "]", "=", "23", "\n", "v", "[", "957", ",", "6", "]", "=", "35", "\n", "v", "[", "958", ",", "6", "]", "=", "19", "\n", "v", "[", "959", ",", "6", "]", "=", "69", "\n", "v", "[", "960", ",", "6", "]", "=", "17", "\n", "v", "[", "961", ",", "6", "]", "=", "59", "\n", "v", "[", "962", ",", "6", "]", "=", "63", "\n", "v", "[", "963", ",", "6", "]", "=", "73", "\n", "v", "[", "964", ",", "6", "]", "=", "29", "\n", "v", "[", "965", ",", "6", "]", "=", "125", "\n", "v", "[", "966", ",", "6", "]", "=", "61", "\n", "v", "[", "967", ",", "6", "]", "=", "65", "\n", "v", "[", "968", ",", "6", "]", "=", "95", "\n", "v", "[", "969", ",", "6", "]", "=", "101", "\n", "v", "[", "970", ",", "6", "]", "=", "81", "\n", "v", "[", "971", ",", "6", "]", "=", "57", "\n", "v", "[", "972", ",", "6", "]", "=", "69", "\n", "v", "[", "973", ",", "6", "]", "=", "83", "\n", "v", "[", "974", ",", "6", "]", "=", "37", "\n", "v", "[", "975", ",", "6", "]", "=", "11", "\n", "v", "[", "976", ",", "6", "]", "=", "37", "\n", "v", "[", "977", ",", "6", "]", "=", "95", "\n", "v", "[", "978", ",", "6", "]", "=", "1", "\n", "v", "[", "979", ",", "6", "]", "=", "73", "\n", "v", "[", "980", ",", "6", "]", "=", "27", "\n", "v", "[", "981", ",", "6", "]", "=", "29", "\n", "v", "[", "982", ",", "6", "]", "=", "57", "\n", "v", "[", "983", ",", "6", "]", "=", "7", "\n", "v", "[", "984", ",", "6", "]", "=", "65", "\n", "v", "[", "985", ",", "6", "]", "=", "83", "\n", "v", "[", "986", ",", "6", "]", "=", "99", "\n", "v", "[", "987", ",", "6", "]", "=", "69", "\n", "v", "[", "988", ",", "6", "]", "=", "19", "\n", "v", "[", "989", ",", "6", "]", "=", "103", "\n", "v", "[", "990", ",", "6", "]", "=", "43", "\n", "v", "[", "991", ",", "6", "]", "=", "95", "\n", "v", "[", "992", ",", "6", "]", "=", "25", "\n", "v", "[", "993", ",", "6", "]", "=", "19", "\n", "v", "[", "994", ",", "6", "]", "=", "103", "\n", "v", "[", "995", ",", "6", "]", "=", "41", "\n", "v", "[", "996", ",", "6", "]", "=", "125", "\n", "v", "[", "997", ",", "6", "]", "=", "97", "\n", "v", "[", "998", ",", "6", "]", "=", "71", "\n", "v", "[", "999", ",", "6", "]", "=", "105", "\n", "v", "[", "1000", ",", "6", "]", "=", "83", "\n", "v", "[", "1001", ",", "6", "]", "=", "83", "\n", "v", "[", "1002", ",", "6", "]", "=", "61", "\n", "v", "[", "1003", ",", "6", "]", "=", "39", "\n", "v", "[", "1004", ",", "6", "]", "=", "9", "\n", "v", "[", "1005", ",", "6", "]", "=", "45", "\n", "v", "[", "1006", ",", "6", "]", "=", "117", "\n", "v", "[", "1007", ",", "6", "]", "=", "63", "\n", "v", "[", "1008", ",", "6", "]", "=", "31", "\n", "v", "[", "1009", ",", "6", "]", "=", "5", "\n", "v", "[", "1010", ",", "6", "]", "=", "117", "\n", "v", "[", "1011", ",", "6", "]", "=", "67", "\n", "v", "[", "1012", ",", "6", "]", "=", "125", "\n", "v", "[", "1013", ",", "6", "]", "=", "41", "\n", "v", "[", "1014", ",", "6", "]", "=", "117", "\n", "v", "[", "1015", ",", "6", "]", "=", "43", "\n", "v", "[", "1016", ",", "6", "]", "=", "77", "\n", "v", "[", "1017", ",", "6", "]", "=", "97", "\n", "v", "[", "1018", ",", "6", "]", "=", "15", "\n", "v", "[", "1019", ",", "6", "]", "=", "29", "\n", "v", "[", "1020", ",", "6", "]", "=", "5", "\n", "v", "[", "1021", ",", "6", "]", "=", "59", "\n", "v", "[", "1022", ",", "6", "]", "=", "25", "\n", "v", "[", "1023", ",", "6", "]", "=", "63", "\n", "v", "[", "1024", ",", "6", "]", "=", "87", "\n", "v", "[", "1025", ",", "6", "]", "=", "39", "\n", "v", "[", "1026", ",", "6", "]", "=", "39", "\n", "v", "[", "1027", ",", "6", "]", "=", "77", "\n", "v", "[", "1028", ",", "6", "]", "=", "85", "\n", "v", "[", "1029", ",", "6", "]", "=", "37", "\n", "v", "[", "1030", ",", "6", "]", "=", "81", "\n", "v", "[", "1031", ",", "6", "]", "=", "73", "\n", "v", "[", "1032", ",", "6", "]", "=", "89", "\n", "v", "[", "1033", ",", "6", "]", "=", "29", "\n", "v", "[", "1034", ",", "6", "]", "=", "125", "\n", "v", "[", "1035", ",", "6", "]", "=", "109", "\n", "v", "[", "1036", ",", "6", "]", "=", "21", "\n", "v", "[", "1037", ",", "6", "]", "=", "23", "\n", "v", "[", "1038", ",", "6", "]", "=", "119", "\n", "v", "[", "1039", ",", "6", "]", "=", "105", "\n", "v", "[", "1040", ",", "6", "]", "=", "43", "\n", "v", "[", "1041", ",", "6", "]", "=", "93", "\n", "v", "[", "1042", ",", "6", "]", "=", "97", "\n", "v", "[", "1043", ",", "6", "]", "=", "15", "\n", "v", "[", "1044", ",", "6", "]", "=", "125", "\n", "v", "[", "1045", ",", "6", "]", "=", "29", "\n", "v", "[", "1046", ",", "6", "]", "=", "51", "\n", "v", "[", "1047", ",", "6", "]", "=", "69", "\n", "v", "[", "1048", ",", "6", "]", "=", "37", "\n", "v", "[", "1049", ",", "6", "]", "=", "45", "\n", "v", "[", "1050", ",", "6", "]", "=", "31", "\n", "v", "[", "1051", ",", "6", "]", "=", "75", "\n", "v", "[", "1052", ",", "6", "]", "=", "109", "\n", "v", "[", "1053", ",", "6", "]", "=", "119", "\n", "v", "[", "1054", ",", "6", "]", "=", "53", "\n", "v", "[", "1055", ",", "6", "]", "=", "5", "\n", "v", "[", "1056", ",", "6", "]", "=", "101", "\n", "v", "[", "1057", ",", "6", "]", "=", "125", "\n", "v", "[", "1058", ",", "6", "]", "=", "121", "\n", "v", "[", "1059", ",", "6", "]", "=", "35", "\n", "v", "[", "1060", ",", "6", "]", "=", "29", "\n", "v", "[", "1061", ",", "6", "]", "=", "7", "\n", "v", "[", "1062", ",", "6", "]", "=", "63", "\n", "v", "[", "1063", ",", "6", "]", "=", "17", "\n", "v", "[", "1064", ",", "6", "]", "=", "63", "\n", "v", "[", "1065", ",", "6", "]", "=", "13", "\n", "v", "[", "1066", ",", "6", "]", "=", "69", "\n", "v", "[", "1067", ",", "6", "]", "=", "15", "\n", "v", "[", "1068", ",", "6", "]", "=", "105", "\n", "v", "[", "1069", ",", "6", "]", "=", "51", "\n", "v", "[", "1070", ",", "6", "]", "=", "127", "\n", "v", "[", "1071", ",", "6", "]", "=", "105", "\n", "v", "[", "1072", ",", "6", "]", "=", "9", "\n", "v", "[", "1073", ",", "6", "]", "=", "57", "\n", "v", "[", "1074", ",", "6", "]", "=", "95", "\n", "v", "[", "1075", ",", "6", "]", "=", "59", "\n", "v", "[", "1076", ",", "6", "]", "=", "109", "\n", "v", "[", "1077", ",", "6", "]", "=", "35", "\n", "v", "[", "1078", ",", "6", "]", "=", "49", "\n", "v", "[", "1079", ",", "6", "]", "=", "23", "\n", "v", "[", "1080", ",", "6", "]", "=", "33", "\n", "v", "[", "1081", ",", "6", "]", "=", "107", "\n", "v", "[", "1082", ",", "6", "]", "=", "55", "\n", "v", "[", "1083", ",", "6", "]", "=", "33", "\n", "v", "[", "1084", ",", "6", "]", "=", "57", "\n", "v", "[", "1085", ",", "6", "]", "=", "79", "\n", "v", "[", "1086", ",", "6", "]", "=", "73", "\n", "v", "[", "1087", ",", "6", "]", "=", "69", "\n", "v", "[", "1088", ",", "6", "]", "=", "59", "\n", "v", "[", "1089", ",", "6", "]", "=", "107", "\n", "v", "[", "1090", ",", "6", "]", "=", "55", "\n", "v", "[", "1091", ",", "6", "]", "=", "11", "\n", "v", "[", "1092", ",", "6", "]", "=", "63", "\n", "v", "[", "1093", ",", "6", "]", "=", "95", "\n", "v", "[", "1094", ",", "6", "]", "=", "103", "\n", "v", "[", "1095", ",", "6", "]", "=", "23", "\n", "v", "[", "1096", ",", "6", "]", "=", "125", "\n", "v", "[", "1097", ",", "6", "]", "=", "91", "\n", "v", "[", "1098", ",", "6", "]", "=", "31", "\n", "v", "[", "1099", ",", "6", "]", "=", "91", "\n", "v", "[", "1100", ",", "6", "]", "=", "51", "\n", "v", "[", "1101", ",", "6", "]", "=", "65", "\n", "v", "[", "1102", ",", "6", "]", "=", "61", "\n", "v", "[", "1103", ",", "6", "]", "=", "75", "\n", "v", "[", "1104", ",", "6", "]", "=", "69", "\n", "v", "[", "1105", ",", "6", "]", "=", "107", "\n", "v", "[", "1106", ",", "6", "]", "=", "65", "\n", "v", "[", "1107", ",", "6", "]", "=", "101", "\n", "v", "[", "1108", ",", "6", "]", "=", "59", "\n", "v", "[", "1109", ",", "6", "]", "=", "35", "\n", "v", "[", "1110", ",", "6", "]", "=", "15", "\n", "\n", "v", "[", "37", ",", "7", "]", "=", "7", "\n", "v", "[", "38", ",", "7", "]", "=", "23", "\n", "v", "[", "39", ",", "7", "]", "=", "39", "\n", "v", "[", "40", ",", "7", "]", "=", "217", "\n", "v", "[", "41", ",", "7", "]", "=", "141", "\n", "v", "[", "42", ",", "7", "]", "=", "27", "\n", "v", "[", "43", ",", "7", "]", "=", "53", "\n", "v", "[", "44", ",", "7", "]", "=", "181", "\n", "v", "[", "45", ",", "7", "]", "=", "169", "\n", "v", "[", "46", ",", "7", "]", "=", "35", "\n", "v", "[", "47", ",", "7", "]", "=", "15", "\n", "v", "[", "48", ",", "7", "]", "=", "207", "\n", "v", "[", "49", ",", "7", "]", "=", "45", "\n", "v", "[", "50", ",", "7", "]", "=", "247", "\n", "v", "[", "51", ",", "7", "]", "=", "185", "\n", "v", "[", "52", ",", "7", "]", "=", "117", "\n", "v", "[", "53", ",", "7", "]", "=", "41", "\n", "v", "[", "54", ",", "7", "]", "=", "81", "\n", "v", "[", "55", ",", "7", "]", "=", "223", "\n", "v", "[", "56", ",", "7", "]", "=", "151", "\n", "v", "[", "57", ",", "7", "]", "=", "81", "\n", "v", "[", "58", ",", "7", "]", "=", "189", "\n", "v", "[", "59", ",", "7", "]", "=", "61", "\n", "v", "[", "60", ",", "7", "]", "=", "95", "\n", "v", "[", "61", ",", "7", "]", "=", "185", "\n", "v", "[", "62", ",", "7", "]", "=", "23", "\n", "v", "[", "63", ",", "7", "]", "=", "73", "\n", "v", "[", "64", ",", "7", "]", "=", "113", "\n", "v", "[", "65", ",", "7", "]", "=", "239", "\n", "v", "[", "66", ",", "7", "]", "=", "85", "\n", "v", "[", "67", ",", "7", "]", "=", "9", "\n", "v", "[", "68", ",", "7", "]", "=", "201", "\n", "v", "[", "69", ",", "7", "]", "=", "83", "\n", "v", "[", "70", ",", "7", "]", "=", "53", "\n", "v", "[", "71", ",", "7", "]", "=", "183", "\n", "v", "[", "72", ",", "7", "]", "=", "203", "\n", "v", "[", "73", ",", "7", "]", "=", "91", "\n", "v", "[", "74", ",", "7", "]", "=", "149", "\n", "v", "[", "75", ",", "7", "]", "=", "101", "\n", "v", "[", "76", ",", "7", "]", "=", "13", "\n", "v", "[", "77", ",", "7", "]", "=", "111", "\n", "v", "[", "78", ",", "7", "]", "=", "239", "\n", "v", "[", "79", ",", "7", "]", "=", "3", "\n", "v", "[", "80", ",", "7", "]", "=", "205", "\n", "v", "[", "81", ",", "7", "]", "=", "253", "\n", "v", "[", "82", ",", "7", "]", "=", "247", "\n", "v", "[", "83", ",", "7", "]", "=", "121", "\n", "v", "[", "84", ",", "7", "]", "=", "189", "\n", "v", "[", "85", ",", "7", "]", "=", "169", "\n", "v", "[", "86", ",", "7", "]", "=", "179", "\n", "v", "[", "87", ",", "7", "]", "=", "197", "\n", "v", "[", "88", ",", "7", "]", "=", "175", "\n", "v", "[", "89", ",", "7", "]", "=", "217", "\n", "v", "[", "90", ",", "7", "]", "=", "249", "\n", "v", "[", "91", ",", "7", "]", "=", "195", "\n", "v", "[", "92", ",", "7", "]", "=", "95", "\n", "v", "[", "93", ",", "7", "]", "=", "63", "\n", "v", "[", "94", ",", "7", "]", "=", "19", "\n", "v", "[", "95", ",", "7", "]", "=", "7", "\n", "v", "[", "96", ",", "7", "]", "=", "5", "\n", "v", "[", "97", ",", "7", "]", "=", "75", "\n", "v", "[", "98", ",", "7", "]", "=", "217", "\n", "v", "[", "99", ",", "7", "]", "=", "245", "\n", "v", "[", "100", ",", "7", "]", "=", "111", "\n", "v", "[", "101", ",", "7", "]", "=", "189", "\n", "v", "[", "102", ",", "7", "]", "=", "165", "\n", "v", "[", "103", ",", "7", "]", "=", "169", "\n", "v", "[", "104", ",", "7", "]", "=", "141", "\n", "v", "[", "105", ",", "7", "]", "=", "221", "\n", "v", "[", "106", ",", "7", "]", "=", "249", "\n", "v", "[", "107", ",", "7", "]", "=", "159", "\n", "v", "[", "108", ",", "7", "]", "=", "253", "\n", "v", "[", "109", ",", "7", "]", "=", "207", "\n", "v", "[", "110", ",", "7", "]", "=", "249", "\n", "v", "[", "111", ",", "7", "]", "=", "219", "\n", "v", "[", "112", ",", "7", "]", "=", "23", "\n", "v", "[", "113", ",", "7", "]", "=", "49", "\n", "v", "[", "114", ",", "7", "]", "=", "127", "\n", "v", "[", "115", ",", "7", "]", "=", "237", "\n", "v", "[", "116", ",", "7", "]", "=", "5", "\n", "v", "[", "117", ",", "7", "]", "=", "25", "\n", "v", "[", "118", ",", "7", "]", "=", "177", "\n", "v", "[", "119", ",", "7", "]", "=", "37", "\n", "v", "[", "120", ",", "7", "]", "=", "103", "\n", "v", "[", "121", ",", "7", "]", "=", "65", "\n", "v", "[", "122", ",", "7", "]", "=", "167", "\n", "v", "[", "123", ",", "7", "]", "=", "81", "\n", "v", "[", "124", ",", "7", "]", "=", "87", "\n", "v", "[", "125", ",", "7", "]", "=", "119", "\n", "v", "[", "126", ",", "7", "]", "=", "45", "\n", "v", "[", "127", ",", "7", "]", "=", "79", "\n", "v", "[", "128", ",", "7", "]", "=", "143", "\n", "v", "[", "129", ",", "7", "]", "=", "57", "\n", "v", "[", "130", ",", "7", "]", "=", "79", "\n", "v", "[", "131", ",", "7", "]", "=", "187", "\n", "v", "[", "132", ",", "7", "]", "=", "143", "\n", "v", "[", "133", ",", "7", "]", "=", "183", "\n", "v", "[", "134", ",", "7", "]", "=", "75", "\n", "v", "[", "135", ",", "7", "]", "=", "97", "\n", "v", "[", "136", ",", "7", "]", "=", "211", "\n", "v", "[", "137", ",", "7", "]", "=", "149", "\n", "v", "[", "138", ",", "7", "]", "=", "175", "\n", "v", "[", "139", ",", "7", "]", "=", "37", "\n", "v", "[", "140", ",", "7", "]", "=", "135", "\n", "v", "[", "141", ",", "7", "]", "=", "189", "\n", "v", "[", "142", ",", "7", "]", "=", "225", "\n", "v", "[", "143", ",", "7", "]", "=", "241", "\n", "v", "[", "144", ",", "7", "]", "=", "63", "\n", "v", "[", "145", ",", "7", "]", "=", "33", "\n", "v", "[", "146", ",", "7", "]", "=", "43", "\n", "v", "[", "147", ",", "7", "]", "=", "13", "\n", "v", "[", "148", ",", "7", "]", "=", "73", "\n", "v", "[", "149", ",", "7", "]", "=", "213", "\n", "v", "[", "150", ",", "7", "]", "=", "57", "\n", "v", "[", "151", ",", "7", "]", "=", "239", "\n", "v", "[", "152", ",", "7", "]", "=", "183", "\n", "v", "[", "153", ",", "7", "]", "=", "117", "\n", "v", "[", "154", ",", "7", "]", "=", "21", "\n", "v", "[", "155", ",", "7", "]", "=", "29", "\n", "v", "[", "156", ",", "7", "]", "=", "115", "\n", "v", "[", "157", ",", "7", "]", "=", "43", "\n", "v", "[", "158", ",", "7", "]", "=", "205", "\n", "v", "[", "159", ",", "7", "]", "=", "223", "\n", "v", "[", "160", ",", "7", "]", "=", "15", "\n", "v", "[", "161", ",", "7", "]", "=", "3", "\n", "v", "[", "162", ",", "7", "]", "=", "159", "\n", "v", "[", "163", ",", "7", "]", "=", "51", "\n", "v", "[", "164", ",", "7", "]", "=", "101", "\n", "v", "[", "165", ",", "7", "]", "=", "127", "\n", "v", "[", "166", ",", "7", "]", "=", "99", "\n", "v", "[", "167", ",", "7", "]", "=", "239", "\n", "v", "[", "168", ",", "7", "]", "=", "171", "\n", "v", "[", "169", ",", "7", "]", "=", "113", "\n", "v", "[", "170", ",", "7", "]", "=", "171", "\n", "v", "[", "171", ",", "7", "]", "=", "119", "\n", "v", "[", "172", ",", "7", "]", "=", "189", "\n", "v", "[", "173", ",", "7", "]", "=", "245", "\n", "v", "[", "174", ",", "7", "]", "=", "201", "\n", "v", "[", "175", ",", "7", "]", "=", "27", "\n", "v", "[", "176", ",", "7", "]", "=", "185", "\n", "v", "[", "177", ",", "7", "]", "=", "229", "\n", "v", "[", "178", ",", "7", "]", "=", "105", "\n", "v", "[", "179", ",", "7", "]", "=", "153", "\n", "v", "[", "180", ",", "7", "]", "=", "189", "\n", "v", "[", "181", ",", "7", "]", "=", "33", "\n", "v", "[", "182", ",", "7", "]", "=", "35", "\n", "v", "[", "183", ",", "7", "]", "=", "137", "\n", "v", "[", "184", ",", "7", "]", "=", "77", "\n", "v", "[", "185", ",", "7", "]", "=", "97", "\n", "v", "[", "186", ",", "7", "]", "=", "17", "\n", "v", "[", "187", ",", "7", "]", "=", "181", "\n", "v", "[", "188", ",", "7", "]", "=", "55", "\n", "v", "[", "189", ",", "7", "]", "=", "197", "\n", "v", "[", "190", ",", "7", "]", "=", "201", "\n", "v", "[", "191", ",", "7", "]", "=", "155", "\n", "v", "[", "192", ",", "7", "]", "=", "37", "\n", "v", "[", "193", ",", "7", "]", "=", "197", "\n", "v", "[", "194", ",", "7", "]", "=", "137", "\n", "v", "[", "195", ",", "7", "]", "=", "223", "\n", "v", "[", "196", ",", "7", "]", "=", "25", "\n", "v", "[", "197", ",", "7", "]", "=", "179", "\n", "v", "[", "198", ",", "7", "]", "=", "91", "\n", "v", "[", "199", ",", "7", "]", "=", "23", "\n", "v", "[", "200", ",", "7", "]", "=", "235", "\n", "v", "[", "201", ",", "7", "]", "=", "53", "\n", "v", "[", "202", ",", "7", "]", "=", "253", "\n", "v", "[", "203", ",", "7", "]", "=", "49", "\n", "v", "[", "204", ",", "7", "]", "=", "181", "\n", "v", "[", "205", ",", "7", "]", "=", "249", "\n", "v", "[", "206", ",", "7", "]", "=", "53", "\n", "v", "[", "207", ",", "7", "]", "=", "173", "\n", "v", "[", "208", ",", "7", "]", "=", "97", "\n", "v", "[", "209", ",", "7", "]", "=", "247", "\n", "v", "[", "210", ",", "7", "]", "=", "67", "\n", "v", "[", "211", ",", "7", "]", "=", "115", "\n", "v", "[", "212", ",", "7", "]", "=", "103", "\n", "v", "[", "213", ",", "7", "]", "=", "159", "\n", "v", "[", "214", ",", "7", "]", "=", "239", "\n", "v", "[", "215", ",", "7", "]", "=", "69", "\n", "v", "[", "216", ",", "7", "]", "=", "173", "\n", "v", "[", "217", ",", "7", "]", "=", "217", "\n", "v", "[", "218", ",", "7", "]", "=", "95", "\n", "v", "[", "219", ",", "7", "]", "=", "221", "\n", "v", "[", "220", ",", "7", "]", "=", "247", "\n", "v", "[", "221", ",", "7", "]", "=", "97", "\n", "v", "[", "222", ",", "7", "]", "=", "91", "\n", "v", "[", "223", ",", "7", "]", "=", "123", "\n", "v", "[", "224", ",", "7", "]", "=", "223", "\n", "v", "[", "225", ",", "7", "]", "=", "213", "\n", "v", "[", "226", ",", "7", "]", "=", "129", "\n", "v", "[", "227", ",", "7", "]", "=", "181", "\n", "v", "[", "228", ",", "7", "]", "=", "87", "\n", "v", "[", "229", ",", "7", "]", "=", "239", "\n", "v", "[", "230", ",", "7", "]", "=", "85", "\n", "v", "[", "231", ",", "7", "]", "=", "89", "\n", "v", "[", "232", ",", "7", "]", "=", "249", "\n", "v", "[", "233", ",", "7", "]", "=", "141", "\n", "v", "[", "234", ",", "7", "]", "=", "39", "\n", "v", "[", "235", ",", "7", "]", "=", "57", "\n", "v", "[", "236", ",", "7", "]", "=", "249", "\n", "v", "[", "237", ",", "7", "]", "=", "71", "\n", "v", "[", "238", ",", "7", "]", "=", "101", "\n", "v", "[", "239", ",", "7", "]", "=", "159", "\n", "v", "[", "240", ",", "7", "]", "=", "33", "\n", "v", "[", "241", ",", "7", "]", "=", "137", "\n", "v", "[", "242", ",", "7", "]", "=", "189", "\n", "v", "[", "243", ",", "7", "]", "=", "71", "\n", "v", "[", "244", ",", "7", "]", "=", "253", "\n", "v", "[", "245", ",", "7", "]", "=", "205", "\n", "v", "[", "246", ",", "7", "]", "=", "171", "\n", "v", "[", "247", ",", "7", "]", "=", "13", "\n", "v", "[", "248", ",", "7", "]", "=", "249", "\n", "v", "[", "249", ",", "7", "]", "=", "109", "\n", "v", "[", "250", ",", "7", "]", "=", "131", "\n", "v", "[", "251", ",", "7", "]", "=", "199", "\n", "v", "[", "252", ",", "7", "]", "=", "189", "\n", "v", "[", "253", ",", "7", "]", "=", "179", "\n", "v", "[", "254", ",", "7", "]", "=", "31", "\n", "v", "[", "255", ",", "7", "]", "=", "99", "\n", "v", "[", "256", ",", "7", "]", "=", "113", "\n", "v", "[", "257", ",", "7", "]", "=", "41", "\n", "v", "[", "258", ",", "7", "]", "=", "173", "\n", "v", "[", "259", ",", "7", "]", "=", "23", "\n", "v", "[", "260", ",", "7", "]", "=", "189", "\n", "v", "[", "261", ",", "7", "]", "=", "197", "\n", "v", "[", "262", ",", "7", "]", "=", "3", "\n", "v", "[", "263", ",", "7", "]", "=", "135", "\n", "v", "[", "264", ",", "7", "]", "=", "9", "\n", "v", "[", "265", ",", "7", "]", "=", "95", "\n", "v", "[", "266", ",", "7", "]", "=", "195", "\n", "v", "[", "267", ",", "7", "]", "=", "27", "\n", "v", "[", "268", ",", "7", "]", "=", "183", "\n", "v", "[", "269", ",", "7", "]", "=", "1", "\n", "v", "[", "270", ",", "7", "]", "=", "123", "\n", "v", "[", "271", ",", "7", "]", "=", "73", "\n", "v", "[", "272", ",", "7", "]", "=", "53", "\n", "v", "[", "273", ",", "7", "]", "=", "99", "\n", "v", "[", "274", ",", "7", "]", "=", "197", "\n", "v", "[", "275", ",", "7", "]", "=", "59", "\n", "v", "[", "276", ",", "7", "]", "=", "27", "\n", "v", "[", "277", ",", "7", "]", "=", "101", "\n", "v", "[", "278", ",", "7", "]", "=", "55", "\n", "v", "[", "279", ",", "7", "]", "=", "193", "\n", "v", "[", "280", ",", "7", "]", "=", "31", "\n", "v", "[", "281", ",", "7", "]", "=", "61", "\n", "v", "[", "282", ",", "7", "]", "=", "119", "\n", "v", "[", "283", ",", "7", "]", "=", "11", "\n", "v", "[", "284", ",", "7", "]", "=", "7", "\n", "v", "[", "285", ",", "7", "]", "=", "255", "\n", "v", "[", "286", ",", "7", "]", "=", "233", "\n", "v", "[", "287", ",", "7", "]", "=", "53", "\n", "v", "[", "288", ",", "7", "]", "=", "157", "\n", "v", "[", "289", ",", "7", "]", "=", "193", "\n", "v", "[", "290", ",", "7", "]", "=", "97", "\n", "v", "[", "291", ",", "7", "]", "=", "83", "\n", "v", "[", "292", ",", "7", "]", "=", "65", "\n", "v", "[", "293", ",", "7", "]", "=", "81", "\n", "v", "[", "294", ",", "7", "]", "=", "239", "\n", "v", "[", "295", ",", "7", "]", "=", "167", "\n", "v", "[", "296", ",", "7", "]", "=", "69", "\n", "v", "[", "297", ",", "7", "]", "=", "71", "\n", "v", "[", "298", ",", "7", "]", "=", "109", "\n", "v", "[", "299", ",", "7", "]", "=", "97", "\n", "v", "[", "300", ",", "7", "]", "=", "137", "\n", "v", "[", "301", ",", "7", "]", "=", "71", "\n", "v", "[", "302", ",", "7", "]", "=", "193", "\n", "v", "[", "303", ",", "7", "]", "=", "189", "\n", "v", "[", "304", ",", "7", "]", "=", "115", "\n", "v", "[", "305", ",", "7", "]", "=", "79", "\n", "v", "[", "306", ",", "7", "]", "=", "205", "\n", "v", "[", "307", ",", "7", "]", "=", "37", "\n", "v", "[", "308", ",", "7", "]", "=", "227", "\n", "v", "[", "309", ",", "7", "]", "=", "53", "\n", "v", "[", "310", ",", "7", "]", "=", "33", "\n", "v", "[", "311", ",", "7", "]", "=", "91", "\n", "v", "[", "312", ",", "7", "]", "=", "229", "\n", "v", "[", "313", ",", "7", "]", "=", "245", "\n", "v", "[", "314", ",", "7", "]", "=", "105", "\n", "v", "[", "315", ",", "7", "]", "=", "77", "\n", "v", "[", "316", ",", "7", "]", "=", "229", "\n", "v", "[", "317", ",", "7", "]", "=", "161", "\n", "v", "[", "318", ",", "7", "]", "=", "103", "\n", "v", "[", "319", ",", "7", "]", "=", "93", "\n", "v", "[", "320", ",", "7", "]", "=", "13", "\n", "v", "[", "321", ",", "7", "]", "=", "161", "\n", "v", "[", "322", ",", "7", "]", "=", "229", "\n", "v", "[", "323", ",", "7", "]", "=", "223", "\n", "v", "[", "324", ",", "7", "]", "=", "69", "\n", "v", "[", "325", ",", "7", "]", "=", "15", "\n", "v", "[", "326", ",", "7", "]", "=", "25", "\n", "v", "[", "327", ",", "7", "]", "=", "23", "\n", "v", "[", "328", ",", "7", "]", "=", "233", "\n", "v", "[", "329", ",", "7", "]", "=", "93", "\n", "v", "[", "330", ",", "7", "]", "=", "25", "\n", "v", "[", "331", ",", "7", "]", "=", "217", "\n", "v", "[", "332", ",", "7", "]", "=", "247", "\n", "v", "[", "333", ",", "7", "]", "=", "61", "\n", "v", "[", "334", ",", "7", "]", "=", "75", "\n", "v", "[", "335", ",", "7", "]", "=", "27", "\n", "v", "[", "336", ",", "7", "]", "=", "9", "\n", "v", "[", "337", ",", "7", "]", "=", "223", "\n", "v", "[", "338", ",", "7", "]", "=", "213", "\n", "v", "[", "339", ",", "7", "]", "=", "55", "\n", "v", "[", "340", ",", "7", "]", "=", "197", "\n", "v", "[", "341", ",", "7", "]", "=", "145", "\n", "v", "[", "342", ",", "7", "]", "=", "89", "\n", "v", "[", "343", ",", "7", "]", "=", "199", "\n", "v", "[", "344", ",", "7", "]", "=", "41", "\n", "v", "[", "345", ",", "7", "]", "=", "201", "\n", "v", "[", "346", ",", "7", "]", "=", "5", "\n", "v", "[", "347", ",", "7", "]", "=", "149", "\n", "v", "[", "348", ",", "7", "]", "=", "35", "\n", "v", "[", "349", ",", "7", "]", "=", "119", "\n", "v", "[", "350", ",", "7", "]", "=", "183", "\n", "v", "[", "351", ",", "7", "]", "=", "53", "\n", "v", "[", "352", ",", "7", "]", "=", "11", "\n", "v", "[", "353", ",", "7", "]", "=", "13", "\n", "v", "[", "354", ",", "7", "]", "=", "3", "\n", "v", "[", "355", ",", "7", "]", "=", "179", "\n", "v", "[", "356", ",", "7", "]", "=", "229", "\n", "v", "[", "357", ",", "7", "]", "=", "43", "\n", "v", "[", "358", ",", "7", "]", "=", "55", "\n", "v", "[", "359", ",", "7", "]", "=", "187", "\n", "v", "[", "360", ",", "7", "]", "=", "233", "\n", "v", "[", "361", ",", "7", "]", "=", "47", "\n", "v", "[", "362", ",", "7", "]", "=", "133", "\n", "v", "[", "363", ",", "7", "]", "=", "91", "\n", "v", "[", "364", ",", "7", "]", "=", "47", "\n", "v", "[", "365", ",", "7", "]", "=", "71", "\n", "v", "[", "366", ",", "7", "]", "=", "93", "\n", "v", "[", "367", ",", "7", "]", "=", "105", "\n", "v", "[", "368", ",", "7", "]", "=", "145", "\n", "v", "[", "369", ",", "7", "]", "=", "45", "\n", "v", "[", "370", ",", "7", "]", "=", "255", "\n", "v", "[", "371", ",", "7", "]", "=", "221", "\n", "v", "[", "372", ",", "7", "]", "=", "115", "\n", "v", "[", "373", ",", "7", "]", "=", "175", "\n", "v", "[", "374", ",", "7", "]", "=", "19", "\n", "v", "[", "375", ",", "7", "]", "=", "129", "\n", "v", "[", "376", ",", "7", "]", "=", "5", "\n", "v", "[", "377", ",", "7", "]", "=", "209", "\n", "v", "[", "378", ",", "7", "]", "=", "197", "\n", "v", "[", "379", ",", "7", "]", "=", "57", "\n", "v", "[", "380", ",", "7", "]", "=", "177", "\n", "v", "[", "381", ",", "7", "]", "=", "115", "\n", "v", "[", "382", ",", "7", "]", "=", "187", "\n", "v", "[", "383", ",", "7", "]", "=", "119", "\n", "v", "[", "384", ",", "7", "]", "=", "77", "\n", "v", "[", "385", ",", "7", "]", "=", "211", "\n", "v", "[", "386", ",", "7", "]", "=", "111", "\n", "v", "[", "387", ",", "7", "]", "=", "33", "\n", "v", "[", "388", ",", "7", "]", "=", "113", "\n", "v", "[", "389", ",", "7", "]", "=", "23", "\n", "v", "[", "390", ",", "7", "]", "=", "87", "\n", "v", "[", "391", ",", "7", "]", "=", "137", "\n", "v", "[", "392", ",", "7", "]", "=", "41", "\n", "v", "[", "393", ",", "7", "]", "=", "7", "\n", "v", "[", "394", ",", "7", "]", "=", "83", "\n", "v", "[", "395", ",", "7", "]", "=", "43", "\n", "v", "[", "396", ",", "7", "]", "=", "121", "\n", "v", "[", "397", ",", "7", "]", "=", "145", "\n", "v", "[", "398", ",", "7", "]", "=", "5", "\n", "v", "[", "399", ",", "7", "]", "=", "219", "\n", "v", "[", "400", ",", "7", "]", "=", "27", "\n", "v", "[", "401", ",", "7", "]", "=", "11", "\n", "v", "[", "402", ",", "7", "]", "=", "111", "\n", "v", "[", "403", ",", "7", "]", "=", "207", "\n", "v", "[", "404", ",", "7", "]", "=", "55", "\n", "v", "[", "405", ",", "7", "]", "=", "97", "\n", "v", "[", "406", ",", "7", "]", "=", "63", "\n", "v", "[", "407", ",", "7", "]", "=", "229", "\n", "v", "[", "408", ",", "7", "]", "=", "53", "\n", "v", "[", "409", ",", "7", "]", "=", "33", "\n", "v", "[", "410", ",", "7", "]", "=", "149", "\n", "v", "[", "411", ",", "7", "]", "=", "23", "\n", "v", "[", "412", ",", "7", "]", "=", "187", "\n", "v", "[", "413", ",", "7", "]", "=", "153", "\n", "v", "[", "414", ",", "7", "]", "=", "91", "\n", "v", "[", "415", ",", "7", "]", "=", "193", "\n", "v", "[", "416", ",", "7", "]", "=", "183", "\n", "v", "[", "417", ",", "7", "]", "=", "59", "\n", "v", "[", "418", ",", "7", "]", "=", "211", "\n", "v", "[", "419", ",", "7", "]", "=", "93", "\n", "v", "[", "420", ",", "7", "]", "=", "139", "\n", "v", "[", "421", ",", "7", "]", "=", "59", "\n", "v", "[", "422", ",", "7", "]", "=", "179", "\n", "v", "[", "423", ",", "7", "]", "=", "163", "\n", "v", "[", "424", ",", "7", "]", "=", "209", "\n", "v", "[", "425", ",", "7", "]", "=", "77", "\n", "v", "[", "426", ",", "7", "]", "=", "39", "\n", "v", "[", "427", ",", "7", "]", "=", "111", "\n", "v", "[", "428", ",", "7", "]", "=", "79", "\n", "v", "[", "429", ",", "7", "]", "=", "229", "\n", "v", "[", "430", ",", "7", "]", "=", "85", "\n", "v", "[", "431", ",", "7", "]", "=", "237", "\n", "v", "[", "432", ",", "7", "]", "=", "199", "\n", "v", "[", "433", ",", "7", "]", "=", "137", "\n", "v", "[", "434", ",", "7", "]", "=", "147", "\n", "v", "[", "435", ",", "7", "]", "=", "25", "\n", "v", "[", "436", ",", "7", "]", "=", "73", "\n", "v", "[", "437", ",", "7", "]", "=", "121", "\n", "v", "[", "438", ",", "7", "]", "=", "129", "\n", "v", "[", "439", ",", "7", "]", "=", "83", "\n", "v", "[", "440", ",", "7", "]", "=", "87", "\n", "v", "[", "441", ",", "7", "]", "=", "93", "\n", "v", "[", "442", ",", "7", "]", "=", "205", "\n", "v", "[", "443", ",", "7", "]", "=", "167", "\n", "v", "[", "444", ",", "7", "]", "=", "53", "\n", "v", "[", "445", ",", "7", "]", "=", "107", "\n", "v", "[", "446", ",", "7", "]", "=", "229", "\n", "v", "[", "447", ",", "7", "]", "=", "213", "\n", "v", "[", "448", ",", "7", "]", "=", "95", "\n", "v", "[", "449", ",", "7", "]", "=", "219", "\n", "v", "[", "450", ",", "7", "]", "=", "109", "\n", "v", "[", "451", ",", "7", "]", "=", "175", "\n", "v", "[", "452", ",", "7", "]", "=", "13", "\n", "v", "[", "453", ",", "7", "]", "=", "209", "\n", "v", "[", "454", ",", "7", "]", "=", "97", "\n", "v", "[", "455", ",", "7", "]", "=", "61", "\n", "v", "[", "456", ",", "7", "]", "=", "147", "\n", "v", "[", "457", ",", "7", "]", "=", "19", "\n", "v", "[", "458", ",", "7", "]", "=", "13", "\n", "v", "[", "459", ",", "7", "]", "=", "123", "\n", "v", "[", "460", ",", "7", "]", "=", "73", "\n", "v", "[", "461", ",", "7", "]", "=", "35", "\n", "v", "[", "462", ",", "7", "]", "=", "141", "\n", "v", "[", "463", ",", "7", "]", "=", "81", "\n", "v", "[", "464", ",", "7", "]", "=", "19", "\n", "v", "[", "465", ",", "7", "]", "=", "171", "\n", "v", "[", "466", ",", "7", "]", "=", "255", "\n", "v", "[", "467", ",", "7", "]", "=", "111", "\n", "v", "[", "468", ",", "7", "]", "=", "107", "\n", "v", "[", "469", ",", "7", "]", "=", "233", "\n", "v", "[", "470", ",", "7", "]", "=", "113", "\n", "v", "[", "471", ",", "7", "]", "=", "133", "\n", "v", "[", "472", ",", "7", "]", "=", "89", "\n", "v", "[", "473", ",", "7", "]", "=", "9", "\n", "v", "[", "474", ",", "7", "]", "=", "231", "\n", "v", "[", "475", ",", "7", "]", "=", "95", "\n", "v", "[", "476", ",", "7", "]", "=", "69", "\n", "v", "[", "477", ",", "7", "]", "=", "33", "\n", "v", "[", "478", ",", "7", "]", "=", "1", "\n", "v", "[", "479", ",", "7", "]", "=", "253", "\n", "v", "[", "480", ",", "7", "]", "=", "219", "\n", "v", "[", "481", ",", "7", "]", "=", "253", "\n", "v", "[", "482", ",", "7", "]", "=", "247", "\n", "v", "[", "483", ",", "7", "]", "=", "129", "\n", "v", "[", "484", ",", "7", "]", "=", "11", "\n", "v", "[", "485", ",", "7", "]", "=", "251", "\n", "v", "[", "486", ",", "7", "]", "=", "221", "\n", "v", "[", "487", ",", "7", "]", "=", "153", "\n", "v", "[", "488", ",", "7", "]", "=", "35", "\n", "v", "[", "489", ",", "7", "]", "=", "103", "\n", "v", "[", "490", ",", "7", "]", "=", "239", "\n", "v", "[", "491", ",", "7", "]", "=", "7", "\n", "v", "[", "492", ",", "7", "]", "=", "27", "\n", "v", "[", "493", ",", "7", "]", "=", "235", "\n", "v", "[", "494", ",", "7", "]", "=", "181", "\n", "v", "[", "495", ",", "7", "]", "=", "5", "\n", "v", "[", "496", ",", "7", "]", "=", "207", "\n", "v", "[", "497", ",", "7", "]", "=", "53", "\n", "v", "[", "498", ",", "7", "]", "=", "149", "\n", "v", "[", "499", ",", "7", "]", "=", "155", "\n", "v", "[", "500", ",", "7", "]", "=", "225", "\n", "v", "[", "501", ",", "7", "]", "=", "165", "\n", "v", "[", "502", ",", "7", "]", "=", "137", "\n", "v", "[", "503", ",", "7", "]", "=", "155", "\n", "v", "[", "504", ",", "7", "]", "=", "201", "\n", "v", "[", "505", ",", "7", "]", "=", "97", "\n", "v", "[", "506", ",", "7", "]", "=", "245", "\n", "v", "[", "507", ",", "7", "]", "=", "203", "\n", "v", "[", "508", ",", "7", "]", "=", "47", "\n", "v", "[", "509", ",", "7", "]", "=", "39", "\n", "v", "[", "510", ",", "7", "]", "=", "35", "\n", "v", "[", "511", ",", "7", "]", "=", "105", "\n", "v", "[", "512", ",", "7", "]", "=", "239", "\n", "v", "[", "513", ",", "7", "]", "=", "49", "\n", "v", "[", "514", ",", "7", "]", "=", "15", "\n", "v", "[", "515", ",", "7", "]", "=", "253", "\n", "v", "[", "516", ",", "7", "]", "=", "7", "\n", "v", "[", "517", ",", "7", "]", "=", "237", "\n", "v", "[", "518", ",", "7", "]", "=", "213", "\n", "v", "[", "519", ",", "7", "]", "=", "55", "\n", "v", "[", "520", ",", "7", "]", "=", "87", "\n", "v", "[", "521", ",", "7", "]", "=", "199", "\n", "v", "[", "522", ",", "7", "]", "=", "27", "\n", "v", "[", "523", ",", "7", "]", "=", "175", "\n", "v", "[", "524", ",", "7", "]", "=", "49", "\n", "v", "[", "525", ",", "7", "]", "=", "41", "\n", "v", "[", "526", ",", "7", "]", "=", "229", "\n", "v", "[", "527", ",", "7", "]", "=", "85", "\n", "v", "[", "528", ",", "7", "]", "=", "3", "\n", "v", "[", "529", ",", "7", "]", "=", "149", "\n", "v", "[", "530", ",", "7", "]", "=", "179", "\n", "v", "[", "531", ",", "7", "]", "=", "129", "\n", "v", "[", "532", ",", "7", "]", "=", "185", "\n", "v", "[", "533", ",", "7", "]", "=", "249", "\n", "v", "[", "534", ",", "7", "]", "=", "197", "\n", "v", "[", "535", ",", "7", "]", "=", "15", "\n", "v", "[", "536", ",", "7", "]", "=", "97", "\n", "v", "[", "537", ",", "7", "]", "=", "197", "\n", "v", "[", "538", ",", "7", "]", "=", "139", "\n", "v", "[", "539", ",", "7", "]", "=", "203", "\n", "v", "[", "540", ",", "7", "]", "=", "63", "\n", "v", "[", "541", ",", "7", "]", "=", "33", "\n", "v", "[", "542", ",", "7", "]", "=", "251", "\n", "v", "[", "543", ",", "7", "]", "=", "217", "\n", "v", "[", "544", ",", "7", "]", "=", "199", "\n", "v", "[", "545", ",", "7", "]", "=", "199", "\n", "v", "[", "546", ",", "7", "]", "=", "99", "\n", "v", "[", "547", ",", "7", "]", "=", "249", "\n", "v", "[", "548", ",", "7", "]", "=", "33", "\n", "v", "[", "549", ",", "7", "]", "=", "229", "\n", "v", "[", "550", ",", "7", "]", "=", "177", "\n", "v", "[", "551", ",", "7", "]", "=", "13", "\n", "v", "[", "552", ",", "7", "]", "=", "209", "\n", "v", "[", "553", ",", "7", "]", "=", "147", "\n", "v", "[", "554", ",", "7", "]", "=", "97", "\n", "v", "[", "555", ",", "7", "]", "=", "31", "\n", "v", "[", "556", ",", "7", "]", "=", "125", "\n", "v", "[", "557", ",", "7", "]", "=", "177", "\n", "v", "[", "558", ",", "7", "]", "=", "137", "\n", "v", "[", "559", ",", "7", "]", "=", "187", "\n", "v", "[", "560", ",", "7", "]", "=", "11", "\n", "v", "[", "561", ",", "7", "]", "=", "91", "\n", "v", "[", "562", ",", "7", "]", "=", "223", "\n", "v", "[", "563", ",", "7", "]", "=", "29", "\n", "v", "[", "564", ",", "7", "]", "=", "169", "\n", "v", "[", "565", ",", "7", "]", "=", "231", "\n", "v", "[", "566", ",", "7", "]", "=", "59", "\n", "v", "[", "567", ",", "7", "]", "=", "31", "\n", "v", "[", "568", ",", "7", "]", "=", "163", "\n", "v", "[", "569", ",", "7", "]", "=", "41", "\n", "v", "[", "570", ",", "7", "]", "=", "57", "\n", "v", "[", "571", ",", "7", "]", "=", "87", "\n", "v", "[", "572", ",", "7", "]", "=", "247", "\n", "v", "[", "573", ",", "7", "]", "=", "25", "\n", "v", "[", "574", ",", "7", "]", "=", "127", "\n", "v", "[", "575", ",", "7", "]", "=", "101", "\n", "v", "[", "576", ",", "7", "]", "=", "207", "\n", "v", "[", "577", ",", "7", "]", "=", "187", "\n", "v", "[", "578", ",", "7", "]", "=", "73", "\n", "v", "[", "579", ",", "7", "]", "=", "61", "\n", "v", "[", "580", ",", "7", "]", "=", "105", "\n", "v", "[", "581", ",", "7", "]", "=", "27", "\n", "v", "[", "582", ",", "7", "]", "=", "91", "\n", "v", "[", "583", ",", "7", "]", "=", "171", "\n", "v", "[", "584", ",", "7", "]", "=", "243", "\n", "v", "[", "585", ",", "7", "]", "=", "33", "\n", "v", "[", "586", ",", "7", "]", "=", "3", "\n", "v", "[", "587", ",", "7", "]", "=", "1", "\n", "v", "[", "588", ",", "7", "]", "=", "21", "\n", "v", "[", "589", ",", "7", "]", "=", "229", "\n", "v", "[", "590", ",", "7", "]", "=", "93", "\n", "v", "[", "591", ",", "7", "]", "=", "71", "\n", "v", "[", "592", ",", "7", "]", "=", "61", "\n", "v", "[", "593", ",", "7", "]", "=", "37", "\n", "v", "[", "594", ",", "7", "]", "=", "183", "\n", "v", "[", "595", ",", "7", "]", "=", "65", "\n", "v", "[", "596", ",", "7", "]", "=", "211", "\n", "v", "[", "597", ",", "7", "]", "=", "53", "\n", "v", "[", "598", ",", "7", "]", "=", "11", "\n", "v", "[", "599", ",", "7", "]", "=", "151", "\n", "v", "[", "600", ",", "7", "]", "=", "165", "\n", "v", "[", "601", ",", "7", "]", "=", "47", "\n", "v", "[", "602", ",", "7", "]", "=", "5", "\n", "v", "[", "603", ",", "7", "]", "=", "129", "\n", "v", "[", "604", ",", "7", "]", "=", "79", "\n", "v", "[", "605", ",", "7", "]", "=", "101", "\n", "v", "[", "606", ",", "7", "]", "=", "147", "\n", "v", "[", "607", ",", "7", "]", "=", "169", "\n", "v", "[", "608", ",", "7", "]", "=", "181", "\n", "v", "[", "609", ",", "7", "]", "=", "19", "\n", "v", "[", "610", ",", "7", "]", "=", "95", "\n", "v", "[", "611", ",", "7", "]", "=", "77", "\n", "v", "[", "612", ",", "7", "]", "=", "139", "\n", "v", "[", "613", ",", "7", "]", "=", "197", "\n", "v", "[", "614", ",", "7", "]", "=", "219", "\n", "v", "[", "615", ",", "7", "]", "=", "97", "\n", "v", "[", "616", ",", "7", "]", "=", "239", "\n", "v", "[", "617", ",", "7", "]", "=", "183", "\n", "v", "[", "618", ",", "7", "]", "=", "143", "\n", "v", "[", "619", ",", "7", "]", "=", "9", "\n", "v", "[", "620", ",", "7", "]", "=", "13", "\n", "v", "[", "621", ",", "7", "]", "=", "209", "\n", "v", "[", "622", ",", "7", "]", "=", "23", "\n", "v", "[", "623", ",", "7", "]", "=", "215", "\n", "v", "[", "624", ",", "7", "]", "=", "53", "\n", "v", "[", "625", ",", "7", "]", "=", "137", "\n", "v", "[", "626", ",", "7", "]", "=", "203", "\n", "v", "[", "627", ",", "7", "]", "=", "19", "\n", "v", "[", "628", ",", "7", "]", "=", "151", "\n", "v", "[", "629", ",", "7", "]", "=", "171", "\n", "v", "[", "630", ",", "7", "]", "=", "133", "\n", "v", "[", "631", ",", "7", "]", "=", "219", "\n", "v", "[", "632", ",", "7", "]", "=", "231", "\n", "v", "[", "633", ",", "7", "]", "=", "3", "\n", "v", "[", "634", ",", "7", "]", "=", "15", "\n", "v", "[", "635", ",", "7", "]", "=", "253", "\n", "v", "[", "636", ",", "7", "]", "=", "225", "\n", "v", "[", "637", ",", "7", "]", "=", "33", "\n", "v", "[", "638", ",", "7", "]", "=", "111", "\n", "v", "[", "639", ",", "7", "]", "=", "183", "\n", "v", "[", "640", ",", "7", "]", "=", "213", "\n", "v", "[", "641", ",", "7", "]", "=", "169", "\n", "v", "[", "642", ",", "7", "]", "=", "119", "\n", "v", "[", "643", ",", "7", "]", "=", "111", "\n", "v", "[", "644", ",", "7", "]", "=", "15", "\n", "v", "[", "645", ",", "7", "]", "=", "201", "\n", "v", "[", "646", ",", "7", "]", "=", "123", "\n", "v", "[", "647", ",", "7", "]", "=", "121", "\n", "v", "[", "648", ",", "7", "]", "=", "225", "\n", "v", "[", "649", ",", "7", "]", "=", "113", "\n", "v", "[", "650", ",", "7", "]", "=", "113", "\n", "v", "[", "651", ",", "7", "]", "=", "225", "\n", "v", "[", "652", ",", "7", "]", "=", "161", "\n", "v", "[", "653", ",", "7", "]", "=", "165", "\n", "v", "[", "654", ",", "7", "]", "=", "1", "\n", "v", "[", "655", ",", "7", "]", "=", "139", "\n", "v", "[", "656", ",", "7", "]", "=", "55", "\n", "v", "[", "657", ",", "7", "]", "=", "3", "\n", "v", "[", "658", ",", "7", "]", "=", "93", "\n", "v", "[", "659", ",", "7", "]", "=", "217", "\n", "v", "[", "660", ",", "7", "]", "=", "193", "\n", "v", "[", "661", ",", "7", "]", "=", "97", "\n", "v", "[", "662", ",", "7", "]", "=", "29", "\n", "v", "[", "663", ",", "7", "]", "=", "69", "\n", "v", "[", "664", ",", "7", "]", "=", "231", "\n", "v", "[", "665", ",", "7", "]", "=", "161", "\n", "v", "[", "666", ",", "7", "]", "=", "93", "\n", "v", "[", "667", ",", "7", "]", "=", "69", "\n", "v", "[", "668", ",", "7", "]", "=", "143", "\n", "v", "[", "669", ",", "7", "]", "=", "137", "\n", "v", "[", "670", ",", "7", "]", "=", "9", "\n", "v", "[", "671", ",", "7", "]", "=", "87", "\n", "v", "[", "672", ",", "7", "]", "=", "183", "\n", "v", "[", "673", ",", "7", "]", "=", "113", "\n", "v", "[", "674", ",", "7", "]", "=", "183", "\n", "v", "[", "675", ",", "7", "]", "=", "73", "\n", "v", "[", "676", ",", "7", "]", "=", "215", "\n", "v", "[", "677", ",", "7", "]", "=", "137", "\n", "v", "[", "678", ",", "7", "]", "=", "89", "\n", "v", "[", "679", ",", "7", "]", "=", "251", "\n", "v", "[", "680", ",", "7", "]", "=", "163", "\n", "v", "[", "681", ",", "7", "]", "=", "41", "\n", "v", "[", "682", ",", "7", "]", "=", "227", "\n", "v", "[", "683", ",", "7", "]", "=", "145", "\n", "v", "[", "684", ",", "7", "]", "=", "57", "\n", "v", "[", "685", ",", "7", "]", "=", "81", "\n", "v", "[", "686", ",", "7", "]", "=", "57", "\n", "v", "[", "687", ",", "7", "]", "=", "11", "\n", "v", "[", "688", ",", "7", "]", "=", "135", "\n", "v", "[", "689", ",", "7", "]", "=", "145", "\n", "v", "[", "690", ",", "7", "]", "=", "161", "\n", "v", "[", "691", ",", "7", "]", "=", "175", "\n", "v", "[", "692", ",", "7", "]", "=", "159", "\n", "v", "[", "693", ",", "7", "]", "=", "25", "\n", "v", "[", "694", ",", "7", "]", "=", "55", "\n", "v", "[", "695", ",", "7", "]", "=", "167", "\n", "v", "[", "696", ",", "7", "]", "=", "157", "\n", "v", "[", "697", ",", "7", "]", "=", "211", "\n", "v", "[", "698", ",", "7", "]", "=", "97", "\n", "v", "[", "699", ",", "7", "]", "=", "247", "\n", "v", "[", "700", ",", "7", "]", "=", "249", "\n", "v", "[", "701", ",", "7", "]", "=", "23", "\n", "v", "[", "702", ",", "7", "]", "=", "129", "\n", "v", "[", "703", ",", "7", "]", "=", "159", "\n", "v", "[", "704", ",", "7", "]", "=", "71", "\n", "v", "[", "705", ",", "7", "]", "=", "197", "\n", "v", "[", "706", ",", "7", "]", "=", "127", "\n", "v", "[", "707", ",", "7", "]", "=", "141", "\n", "v", "[", "708", ",", "7", "]", "=", "219", "\n", "v", "[", "709", ",", "7", "]", "=", "5", "\n", "v", "[", "710", ",", "7", "]", "=", "233", "\n", "v", "[", "711", ",", "7", "]", "=", "131", "\n", "v", "[", "712", ",", "7", "]", "=", "217", "\n", "v", "[", "713", ",", "7", "]", "=", "101", "\n", "v", "[", "714", ",", "7", "]", "=", "131", "\n", "v", "[", "715", ",", "7", "]", "=", "33", "\n", "v", "[", "716", ",", "7", "]", "=", "157", "\n", "v", "[", "717", ",", "7", "]", "=", "173", "\n", "v", "[", "718", ",", "7", "]", "=", "69", "\n", "v", "[", "719", ",", "7", "]", "=", "207", "\n", "v", "[", "720", ",", "7", "]", "=", "239", "\n", "v", "[", "721", ",", "7", "]", "=", "81", "\n", "v", "[", "722", ",", "7", "]", "=", "205", "\n", "v", "[", "723", ",", "7", "]", "=", "11", "\n", "v", "[", "724", ",", "7", "]", "=", "41", "\n", "v", "[", "725", ",", "7", "]", "=", "169", "\n", "v", "[", "726", ",", "7", "]", "=", "65", "\n", "v", "[", "727", ",", "7", "]", "=", "193", "\n", "v", "[", "728", ",", "7", "]", "=", "77", "\n", "v", "[", "729", ",", "7", "]", "=", "201", "\n", "v", "[", "730", ",", "7", "]", "=", "173", "\n", "v", "[", "731", ",", "7", "]", "=", "1", "\n", "v", "[", "732", ",", "7", "]", "=", "221", "\n", "v", "[", "733", ",", "7", "]", "=", "157", "\n", "v", "[", "734", ",", "7", "]", "=", "1", "\n", "v", "[", "735", ",", "7", "]", "=", "15", "\n", "v", "[", "736", ",", "7", "]", "=", "113", "\n", "v", "[", "737", ",", "7", "]", "=", "147", "\n", "v", "[", "738", ",", "7", "]", "=", "137", "\n", "v", "[", "739", ",", "7", "]", "=", "205", "\n", "v", "[", "740", ",", "7", "]", "=", "225", "\n", "v", "[", "741", ",", "7", "]", "=", "73", "\n", "v", "[", "742", ",", "7", "]", "=", "45", "\n", "v", "[", "743", ",", "7", "]", "=", "49", "\n", "v", "[", "744", ",", "7", "]", "=", "149", "\n", "v", "[", "745", ",", "7", "]", "=", "113", "\n", "v", "[", "746", ",", "7", "]", "=", "253", "\n", "v", "[", "747", ",", "7", "]", "=", "99", "\n", "v", "[", "748", ",", "7", "]", "=", "17", "\n", "v", "[", "749", ",", "7", "]", "=", "119", "\n", "v", "[", "750", ",", "7", "]", "=", "105", "\n", "v", "[", "751", ",", "7", "]", "=", "117", "\n", "v", "[", "752", ",", "7", "]", "=", "129", "\n", "v", "[", "753", ",", "7", "]", "=", "243", "\n", "v", "[", "754", ",", "7", "]", "=", "75", "\n", "v", "[", "755", ",", "7", "]", "=", "203", "\n", "v", "[", "756", ",", "7", "]", "=", "53", "\n", "v", "[", "757", ",", "7", "]", "=", "29", "\n", "v", "[", "758", ",", "7", "]", "=", "247", "\n", "v", "[", "759", ",", "7", "]", "=", "35", "\n", "v", "[", "760", ",", "7", "]", "=", "247", "\n", "v", "[", "761", ",", "7", "]", "=", "171", "\n", "v", "[", "762", ",", "7", "]", "=", "31", "\n", "v", "[", "763", ",", "7", "]", "=", "199", "\n", "v", "[", "764", ",", "7", "]", "=", "213", "\n", "v", "[", "765", ",", "7", "]", "=", "29", "\n", "v", "[", "766", ",", "7", "]", "=", "251", "\n", "v", "[", "767", ",", "7", "]", "=", "7", "\n", "v", "[", "768", ",", "7", "]", "=", "251", "\n", "v", "[", "769", ",", "7", "]", "=", "187", "\n", "v", "[", "770", ",", "7", "]", "=", "91", "\n", "v", "[", "771", ",", "7", "]", "=", "11", "\n", "v", "[", "772", ",", "7", "]", "=", "149", "\n", "v", "[", "773", ",", "7", "]", "=", "13", "\n", "v", "[", "774", ",", "7", "]", "=", "205", "\n", "v", "[", "775", ",", "7", "]", "=", "37", "\n", "v", "[", "776", ",", "7", "]", "=", "249", "\n", "v", "[", "777", ",", "7", "]", "=", "137", "\n", "v", "[", "778", ",", "7", "]", "=", "139", "\n", "v", "[", "779", ",", "7", "]", "=", "9", "\n", "v", "[", "780", ",", "7", "]", "=", "7", "\n", "v", "[", "781", ",", "7", "]", "=", "113", "\n", "v", "[", "782", ",", "7", "]", "=", "183", "\n", "v", "[", "783", ",", "7", "]", "=", "205", "\n", "v", "[", "784", ",", "7", "]", "=", "187", "\n", "v", "[", "785", ",", "7", "]", "=", "39", "\n", "v", "[", "786", ",", "7", "]", "=", "3", "\n", "v", "[", "787", ",", "7", "]", "=", "79", "\n", "v", "[", "788", ",", "7", "]", "=", "155", "\n", "v", "[", "789", ",", "7", "]", "=", "227", "\n", "v", "[", "790", ",", "7", "]", "=", "89", "\n", "v", "[", "791", ",", "7", "]", "=", "185", "\n", "v", "[", "792", ",", "7", "]", "=", "51", "\n", "v", "[", "793", ",", "7", "]", "=", "127", "\n", "v", "[", "794", ",", "7", "]", "=", "63", "\n", "v", "[", "795", ",", "7", "]", "=", "83", "\n", "v", "[", "796", ",", "7", "]", "=", "41", "\n", "v", "[", "797", ",", "7", "]", "=", "133", "\n", "v", "[", "798", ",", "7", "]", "=", "183", "\n", "v", "[", "799", ",", "7", "]", "=", "181", "\n", "v", "[", "800", ",", "7", "]", "=", "127", "\n", "v", "[", "801", ",", "7", "]", "=", "19", "\n", "v", "[", "802", ",", "7", "]", "=", "255", "\n", "v", "[", "803", ",", "7", "]", "=", "219", "\n", "v", "[", "804", ",", "7", "]", "=", "59", "\n", "v", "[", "805", ",", "7", "]", "=", "251", "\n", "v", "[", "806", ",", "7", "]", "=", "3", "\n", "v", "[", "807", ",", "7", "]", "=", "187", "\n", "v", "[", "808", ",", "7", "]", "=", "57", "\n", "v", "[", "809", ",", "7", "]", "=", "217", "\n", "v", "[", "810", ",", "7", "]", "=", "115", "\n", "v", "[", "811", ",", "7", "]", "=", "217", "\n", "v", "[", "812", ",", "7", "]", "=", "229", "\n", "v", "[", "813", ",", "7", "]", "=", "181", "\n", "v", "[", "814", ",", "7", "]", "=", "185", "\n", "v", "[", "815", ",", "7", "]", "=", "149", "\n", "v", "[", "816", ",", "7", "]", "=", "83", "\n", "v", "[", "817", ",", "7", "]", "=", "115", "\n", "v", "[", "818", ",", "7", "]", "=", "11", "\n", "v", "[", "819", ",", "7", "]", "=", "123", "\n", "v", "[", "820", ",", "7", "]", "=", "19", "\n", "v", "[", "821", ",", "7", "]", "=", "109", "\n", "v", "[", "822", ",", "7", "]", "=", "165", "\n", "v", "[", "823", ",", "7", "]", "=", "103", "\n", "v", "[", "824", ",", "7", "]", "=", "123", "\n", "v", "[", "825", ",", "7", "]", "=", "219", "\n", "v", "[", "826", ",", "7", "]", "=", "129", "\n", "v", "[", "827", ",", "7", "]", "=", "155", "\n", "v", "[", "828", ",", "7", "]", "=", "207", "\n", "v", "[", "829", ",", "7", "]", "=", "177", "\n", "v", "[", "830", ",", "7", "]", "=", "9", "\n", "v", "[", "831", ",", "7", "]", "=", "49", "\n", "v", "[", "832", ",", "7", "]", "=", "181", "\n", "v", "[", "833", ",", "7", "]", "=", "231", "\n", "v", "[", "834", ",", "7", "]", "=", "33", "\n", "v", "[", "835", ",", "7", "]", "=", "233", "\n", "v", "[", "836", ",", "7", "]", "=", "67", "\n", "v", "[", "837", ",", "7", "]", "=", "155", "\n", "v", "[", "838", ",", "7", "]", "=", "41", "\n", "v", "[", "839", ",", "7", "]", "=", "9", "\n", "v", "[", "840", ",", "7", "]", "=", "95", "\n", "v", "[", "841", ",", "7", "]", "=", "123", "\n", "v", "[", "842", ",", "7", "]", "=", "65", "\n", "v", "[", "843", ",", "7", "]", "=", "117", "\n", "v", "[", "844", ",", "7", "]", "=", "249", "\n", "v", "[", "845", ",", "7", "]", "=", "85", "\n", "v", "[", "846", ",", "7", "]", "=", "169", "\n", "v", "[", "847", ",", "7", "]", "=", "129", "\n", "v", "[", "848", ",", "7", "]", "=", "241", "\n", "v", "[", "849", ",", "7", "]", "=", "173", "\n", "v", "[", "850", ",", "7", "]", "=", "251", "\n", "v", "[", "851", ",", "7", "]", "=", "225", "\n", "v", "[", "852", ",", "7", "]", "=", "147", "\n", "v", "[", "853", ",", "7", "]", "=", "165", "\n", "v", "[", "854", ",", "7", "]", "=", "69", "\n", "v", "[", "855", ",", "7", "]", "=", "81", "\n", "v", "[", "856", ",", "7", "]", "=", "239", "\n", "v", "[", "857", ",", "7", "]", "=", "95", "\n", "v", "[", "858", ",", "7", "]", "=", "23", "\n", "v", "[", "859", ",", "7", "]", "=", "83", "\n", "v", "[", "860", ",", "7", "]", "=", "227", "\n", "v", "[", "861", ",", "7", "]", "=", "249", "\n", "v", "[", "862", ",", "7", "]", "=", "143", "\n", "v", "[", "863", ",", "7", "]", "=", "171", "\n", "v", "[", "864", ",", "7", "]", "=", "193", "\n", "v", "[", "865", ",", "7", "]", "=", "9", "\n", "v", "[", "866", ",", "7", "]", "=", "21", "\n", "v", "[", "867", ",", "7", "]", "=", "57", "\n", "v", "[", "868", ",", "7", "]", "=", "73", "\n", "v", "[", "869", ",", "7", "]", "=", "97", "\n", "v", "[", "870", ",", "7", "]", "=", "57", "\n", "v", "[", "871", ",", "7", "]", "=", "29", "\n", "v", "[", "872", ",", "7", "]", "=", "239", "\n", "v", "[", "873", ",", "7", "]", "=", "151", "\n", "v", "[", "874", ",", "7", "]", "=", "159", "\n", "v", "[", "875", ",", "7", "]", "=", "191", "\n", "v", "[", "876", ",", "7", "]", "=", "47", "\n", "v", "[", "877", ",", "7", "]", "=", "51", "\n", "v", "[", "878", ",", "7", "]", "=", "1", "\n", "v", "[", "879", ",", "7", "]", "=", "223", "\n", "v", "[", "880", ",", "7", "]", "=", "251", "\n", "v", "[", "881", ",", "7", "]", "=", "251", "\n", "v", "[", "882", ",", "7", "]", "=", "151", "\n", "v", "[", "883", ",", "7", "]", "=", "41", "\n", "v", "[", "884", ",", "7", "]", "=", "119", "\n", "v", "[", "885", ",", "7", "]", "=", "127", "\n", "v", "[", "886", ",", "7", "]", "=", "131", "\n", "v", "[", "887", ",", "7", "]", "=", "33", "\n", "v", "[", "888", ",", "7", "]", "=", "209", "\n", "v", "[", "889", ",", "7", "]", "=", "123", "\n", "v", "[", "890", ",", "7", "]", "=", "53", "\n", "v", "[", "891", ",", "7", "]", "=", "241", "\n", "v", "[", "892", ",", "7", "]", "=", "25", "\n", "v", "[", "893", ",", "7", "]", "=", "31", "\n", "v", "[", "894", ",", "7", "]", "=", "183", "\n", "v", "[", "895", ",", "7", "]", "=", "107", "\n", "v", "[", "896", ",", "7", "]", "=", "25", "\n", "v", "[", "897", ",", "7", "]", "=", "115", "\n", "v", "[", "898", ",", "7", "]", "=", "39", "\n", "v", "[", "899", ",", "7", "]", "=", "11", "\n", "v", "[", "900", ",", "7", "]", "=", "213", "\n", "v", "[", "901", ",", "7", "]", "=", "239", "\n", "v", "[", "902", ",", "7", "]", "=", "219", "\n", "v", "[", "903", ",", "7", "]", "=", "109", "\n", "v", "[", "904", ",", "7", "]", "=", "185", "\n", "v", "[", "905", ",", "7", "]", "=", "35", "\n", "v", "[", "906", ",", "7", "]", "=", "133", "\n", "v", "[", "907", ",", "7", "]", "=", "123", "\n", "v", "[", "908", ",", "7", "]", "=", "185", "\n", "v", "[", "909", ",", "7", "]", "=", "27", "\n", "v", "[", "910", ",", "7", "]", "=", "55", "\n", "v", "[", "911", ",", "7", "]", "=", "245", "\n", "v", "[", "912", ",", "7", "]", "=", "61", "\n", "v", "[", "913", ",", "7", "]", "=", "75", "\n", "v", "[", "914", ",", "7", "]", "=", "205", "\n", "v", "[", "915", ",", "7", "]", "=", "213", "\n", "v", "[", "916", ",", "7", "]", "=", "169", "\n", "v", "[", "917", ",", "7", "]", "=", "163", "\n", "v", "[", "918", ",", "7", "]", "=", "63", "\n", "v", "[", "919", ",", "7", "]", "=", "55", "\n", "v", "[", "920", ",", "7", "]", "=", "49", "\n", "v", "[", "921", ",", "7", "]", "=", "83", "\n", "v", "[", "922", ",", "7", "]", "=", "195", "\n", "v", "[", "923", ",", "7", "]", "=", "51", "\n", "v", "[", "924", ",", "7", "]", "=", "31", "\n", "v", "[", "925", ",", "7", "]", "=", "41", "\n", "v", "[", "926", ",", "7", "]", "=", "15", "\n", "v", "[", "927", ",", "7", "]", "=", "203", "\n", "v", "[", "928", ",", "7", "]", "=", "41", "\n", "v", "[", "929", ",", "7", "]", "=", "63", "\n", "v", "[", "930", ",", "7", "]", "=", "127", "\n", "v", "[", "931", ",", "7", "]", "=", "161", "\n", "v", "[", "932", ",", "7", "]", "=", "5", "\n", "v", "[", "933", ",", "7", "]", "=", "143", "\n", "v", "[", "934", ",", "7", "]", "=", "7", "\n", "v", "[", "935", ",", "7", "]", "=", "199", "\n", "v", "[", "936", ",", "7", "]", "=", "251", "\n", "v", "[", "937", ",", "7", "]", "=", "95", "\n", "v", "[", "938", ",", "7", "]", "=", "75", "\n", "v", "[", "939", ",", "7", "]", "=", "101", "\n", "v", "[", "940", ",", "7", "]", "=", "15", "\n", "v", "[", "941", ",", "7", "]", "=", "43", "\n", "v", "[", "942", ",", "7", "]", "=", "237", "\n", "v", "[", "943", ",", "7", "]", "=", "197", "\n", "v", "[", "944", ",", "7", "]", "=", "117", "\n", "v", "[", "945", ",", "7", "]", "=", "167", "\n", "v", "[", "946", ",", "7", "]", "=", "155", "\n", "v", "[", "947", ",", "7", "]", "=", "21", "\n", "v", "[", "948", ",", "7", "]", "=", "83", "\n", "v", "[", "949", ",", "7", "]", "=", "205", "\n", "v", "[", "950", ",", "7", "]", "=", "255", "\n", "v", "[", "951", ",", "7", "]", "=", "49", "\n", "v", "[", "952", ",", "7", "]", "=", "101", "\n", "v", "[", "953", ",", "7", "]", "=", "213", "\n", "v", "[", "954", ",", "7", "]", "=", "237", "\n", "v", "[", "955", ",", "7", "]", "=", "135", "\n", "v", "[", "956", ",", "7", "]", "=", "135", "\n", "v", "[", "957", ",", "7", "]", "=", "21", "\n", "v", "[", "958", ",", "7", "]", "=", "73", "\n", "v", "[", "959", ",", "7", "]", "=", "93", "\n", "v", "[", "960", ",", "7", "]", "=", "115", "\n", "v", "[", "961", ",", "7", "]", "=", "7", "\n", "v", "[", "962", ",", "7", "]", "=", "85", "\n", "v", "[", "963", ",", "7", "]", "=", "223", "\n", "v", "[", "964", ",", "7", "]", "=", "237", "\n", "v", "[", "965", ",", "7", "]", "=", "79", "\n", "v", "[", "966", ",", "7", "]", "=", "89", "\n", "v", "[", "967", ",", "7", "]", "=", "5", "\n", "v", "[", "968", ",", "7", "]", "=", "57", "\n", "v", "[", "969", ",", "7", "]", "=", "239", "\n", "v", "[", "970", ",", "7", "]", "=", "67", "\n", "v", "[", "971", ",", "7", "]", "=", "65", "\n", "v", "[", "972", ",", "7", "]", "=", "201", "\n", "v", "[", "973", ",", "7", "]", "=", "155", "\n", "v", "[", "974", ",", "7", "]", "=", "71", "\n", "v", "[", "975", ",", "7", "]", "=", "85", "\n", "v", "[", "976", ",", "7", "]", "=", "195", "\n", "v", "[", "977", ",", "7", "]", "=", "89", "\n", "v", "[", "978", ",", "7", "]", "=", "181", "\n", "v", "[", "979", ",", "7", "]", "=", "119", "\n", "v", "[", "980", ",", "7", "]", "=", "135", "\n", "v", "[", "981", ",", "7", "]", "=", "147", "\n", "v", "[", "982", ",", "7", "]", "=", "237", "\n", "v", "[", "983", ",", "7", "]", "=", "173", "\n", "v", "[", "984", ",", "7", "]", "=", "41", "\n", "v", "[", "985", ",", "7", "]", "=", "155", "\n", "v", "[", "986", ",", "7", "]", "=", "67", "\n", "v", "[", "987", ",", "7", "]", "=", "113", "\n", "v", "[", "988", ",", "7", "]", "=", "111", "\n", "v", "[", "989", ",", "7", "]", "=", "21", "\n", "v", "[", "990", ",", "7", "]", "=", "183", "\n", "v", "[", "991", ",", "7", "]", "=", "23", "\n", "v", "[", "992", ",", "7", "]", "=", "103", "\n", "v", "[", "993", ",", "7", "]", "=", "207", "\n", "v", "[", "994", ",", "7", "]", "=", "253", "\n", "v", "[", "995", ",", "7", "]", "=", "69", "\n", "v", "[", "996", ",", "7", "]", "=", "219", "\n", "v", "[", "997", ",", "7", "]", "=", "205", "\n", "v", "[", "998", ",", "7", "]", "=", "195", "\n", "v", "[", "999", ",", "7", "]", "=", "43", "\n", "v", "[", "1000", ",", "7", "]", "=", "197", "\n", "v", "[", "1001", ",", "7", "]", "=", "229", "\n", "v", "[", "1002", ",", "7", "]", "=", "139", "\n", "v", "[", "1003", ",", "7", "]", "=", "177", "\n", "v", "[", "1004", ",", "7", "]", "=", "129", "\n", "v", "[", "1005", ",", "7", "]", "=", "69", "\n", "v", "[", "1006", ",", "7", "]", "=", "97", "\n", "v", "[", "1007", ",", "7", "]", "=", "201", "\n", "v", "[", "1008", ",", "7", "]", "=", "163", "\n", "v", "[", "1009", ",", "7", "]", "=", "189", "\n", "v", "[", "1010", ",", "7", "]", "=", "11", "\n", "v", "[", "1011", ",", "7", "]", "=", "99", "\n", "v", "[", "1012", ",", "7", "]", "=", "91", "\n", "v", "[", "1013", ",", "7", "]", "=", "253", "\n", "v", "[", "1014", ",", "7", "]", "=", "239", "\n", "v", "[", "1015", ",", "7", "]", "=", "91", "\n", "v", "[", "1016", ",", "7", "]", "=", "145", "\n", "v", "[", "1017", ",", "7", "]", "=", "19", "\n", "v", "[", "1018", ",", "7", "]", "=", "179", "\n", "v", "[", "1019", ",", "7", "]", "=", "231", "\n", "v", "[", "1020", ",", "7", "]", "=", "121", "\n", "v", "[", "1021", ",", "7", "]", "=", "7", "\n", "v", "[", "1022", ",", "7", "]", "=", "225", "\n", "v", "[", "1023", ",", "7", "]", "=", "237", "\n", "v", "[", "1024", ",", "7", "]", "=", "125", "\n", "v", "[", "1025", ",", "7", "]", "=", "191", "\n", "v", "[", "1026", ",", "7", "]", "=", "119", "\n", "v", "[", "1027", ",", "7", "]", "=", "59", "\n", "v", "[", "1028", ",", "7", "]", "=", "175", "\n", "v", "[", "1029", ",", "7", "]", "=", "237", "\n", "v", "[", "1030", ",", "7", "]", "=", "131", "\n", "v", "[", "1031", ",", "7", "]", "=", "79", "\n", "v", "[", "1032", ",", "7", "]", "=", "43", "\n", "v", "[", "1033", ",", "7", "]", "=", "45", "\n", "v", "[", "1034", ",", "7", "]", "=", "205", "\n", "v", "[", "1035", ",", "7", "]", "=", "199", "\n", "v", "[", "1036", ",", "7", "]", "=", "251", "\n", "v", "[", "1037", ",", "7", "]", "=", "153", "\n", "v", "[", "1038", ",", "7", "]", "=", "207", "\n", "v", "[", "1039", ",", "7", "]", "=", "37", "\n", "v", "[", "1040", ",", "7", "]", "=", "179", "\n", "v", "[", "1041", ",", "7", "]", "=", "113", "\n", "v", "[", "1042", ",", "7", "]", "=", "255", "\n", "v", "[", "1043", ",", "7", "]", "=", "107", "\n", "v", "[", "1044", ",", "7", "]", "=", "217", "\n", "v", "[", "1045", ",", "7", "]", "=", "61", "\n", "v", "[", "1046", ",", "7", "]", "=", "7", "\n", "v", "[", "1047", ",", "7", "]", "=", "181", "\n", "v", "[", "1048", ",", "7", "]", "=", "247", "\n", "v", "[", "1049", ",", "7", "]", "=", "31", "\n", "v", "[", "1050", ",", "7", "]", "=", "13", "\n", "v", "[", "1051", ",", "7", "]", "=", "113", "\n", "v", "[", "1052", ",", "7", "]", "=", "145", "\n", "v", "[", "1053", ",", "7", "]", "=", "107", "\n", "v", "[", "1054", ",", "7", "]", "=", "233", "\n", "v", "[", "1055", ",", "7", "]", "=", "233", "\n", "v", "[", "1056", ",", "7", "]", "=", "43", "\n", "v", "[", "1057", ",", "7", "]", "=", "79", "\n", "v", "[", "1058", ",", "7", "]", "=", "23", "\n", "v", "[", "1059", ",", "7", "]", "=", "169", "\n", "v", "[", "1060", ",", "7", "]", "=", "137", "\n", "v", "[", "1061", ",", "7", "]", "=", "129", "\n", "v", "[", "1062", ",", "7", "]", "=", "183", "\n", "v", "[", "1063", ",", "7", "]", "=", "53", "\n", "v", "[", "1064", ",", "7", "]", "=", "91", "\n", "v", "[", "1065", ",", "7", "]", "=", "55", "\n", "v", "[", "1066", ",", "7", "]", "=", "103", "\n", "v", "[", "1067", ",", "7", "]", "=", "223", "\n", "v", "[", "1068", ",", "7", "]", "=", "87", "\n", "v", "[", "1069", ",", "7", "]", "=", "177", "\n", "v", "[", "1070", ",", "7", "]", "=", "157", "\n", "v", "[", "1071", ",", "7", "]", "=", "79", "\n", "v", "[", "1072", ",", "7", "]", "=", "213", "\n", "v", "[", "1073", ",", "7", "]", "=", "139", "\n", "v", "[", "1074", ",", "7", "]", "=", "183", "\n", "v", "[", "1075", ",", "7", "]", "=", "231", "\n", "v", "[", "1076", ",", "7", "]", "=", "205", "\n", "v", "[", "1077", ",", "7", "]", "=", "143", "\n", "v", "[", "1078", ",", "7", "]", "=", "129", "\n", "v", "[", "1079", ",", "7", "]", "=", "243", "\n", "v", "[", "1080", ",", "7", "]", "=", "205", "\n", "v", "[", "1081", ",", "7", "]", "=", "93", "\n", "v", "[", "1082", ",", "7", "]", "=", "59", "\n", "v", "[", "1083", ",", "7", "]", "=", "15", "\n", "v", "[", "1084", ",", "7", "]", "=", "89", "\n", "v", "[", "1085", ",", "7", "]", "=", "9", "\n", "v", "[", "1086", ",", "7", "]", "=", "11", "\n", "v", "[", "1087", ",", "7", "]", "=", "47", "\n", "v", "[", "1088", ",", "7", "]", "=", "133", "\n", "v", "[", "1089", ",", "7", "]", "=", "227", "\n", "v", "[", "1090", ",", "7", "]", "=", "75", "\n", "v", "[", "1091", ",", "7", "]", "=", "9", "\n", "v", "[", "1092", ",", "7", "]", "=", "91", "\n", "v", "[", "1093", ",", "7", "]", "=", "19", "\n", "v", "[", "1094", ",", "7", "]", "=", "171", "\n", "v", "[", "1095", ",", "7", "]", "=", "163", "\n", "v", "[", "1096", ",", "7", "]", "=", "79", "\n", "v", "[", "1097", ",", "7", "]", "=", "7", "\n", "v", "[", "1098", ",", "7", "]", "=", "103", "\n", "v", "[", "1099", ",", "7", "]", "=", "5", "\n", "v", "[", "1100", ",", "7", "]", "=", "119", "\n", "v", "[", "1101", ",", "7", "]", "=", "155", "\n", "v", "[", "1102", ",", "7", "]", "=", "75", "\n", "v", "[", "1103", ",", "7", "]", "=", "11", "\n", "v", "[", "1104", ",", "7", "]", "=", "71", "\n", "v", "[", "1105", ",", "7", "]", "=", "95", "\n", "v", "[", "1106", ",", "7", "]", "=", "17", "\n", "v", "[", "1107", ",", "7", "]", "=", "13", "\n", "v", "[", "1108", ",", "7", "]", "=", "243", "\n", "v", "[", "1109", ",", "7", "]", "=", "207", "\n", "v", "[", "1110", ",", "7", "]", "=", "187", "\n", "\n", "v", "[", "53", ",", "8", "]", "=", "235", "\n", "v", "[", "54", ",", "8", "]", "=", "307", "\n", "v", "[", "55", ",", "8", "]", "=", "495", "\n", "v", "[", "56", ",", "8", "]", "=", "417", "\n", "v", "[", "57", ",", "8", "]", "=", "57", "\n", "v", "[", "58", ",", "8", "]", "=", "151", "\n", "v", "[", "59", ",", "8", "]", "=", "19", "\n", "v", "[", "60", ",", "8", "]", "=", "119", "\n", "v", "[", "61", ",", "8", "]", "=", "375", "\n", "v", "[", "62", ",", "8", "]", "=", "451", "\n", "v", "[", "63", ",", "8", "]", "=", "55", "\n", "v", "[", "64", ",", "8", "]", "=", "449", "\n", "v", "[", "65", ",", "8", "]", "=", "501", "\n", "v", "[", "66", ",", "8", "]", "=", "53", "\n", "v", "[", "67", ",", "8", "]", "=", "185", "\n", "v", "[", "68", ",", "8", "]", "=", "317", "\n", "v", "[", "69", ",", "8", "]", "=", "17", "\n", "v", "[", "70", ",", "8", "]", "=", "21", "\n", "v", "[", "71", ",", "8", "]", "=", "487", "\n", "v", "[", "72", ",", "8", "]", "=", "13", "\n", "v", "[", "73", ",", "8", "]", "=", "347", "\n", "v", "[", "74", ",", "8", "]", "=", "393", "\n", "v", "[", "75", ",", "8", "]", "=", "15", "\n", "v", "[", "76", ",", "8", "]", "=", "391", "\n", "v", "[", "77", ",", "8", "]", "=", "307", "\n", "v", "[", "78", ",", "8", "]", "=", "189", "\n", "v", "[", "79", ",", "8", "]", "=", "381", "\n", "v", "[", "80", ",", "8", "]", "=", "71", "\n", "v", "[", "81", ",", "8", "]", "=", "163", "\n", "v", "[", "82", ",", "8", "]", "=", "99", "\n", "v", "[", "83", ",", "8", "]", "=", "467", "\n", "v", "[", "84", ",", "8", "]", "=", "167", "\n", "v", "[", "85", ",", "8", "]", "=", "433", "\n", "v", "[", "86", ",", "8", "]", "=", "337", "\n", "v", "[", "87", ",", "8", "]", "=", "257", "\n", "v", "[", "88", ",", "8", "]", "=", "179", "\n", "v", "[", "89", ",", "8", "]", "=", "47", "\n", "v", "[", "90", ",", "8", "]", "=", "385", "\n", "v", "[", "91", ",", "8", "]", "=", "23", "\n", "v", "[", "92", ",", "8", "]", "=", "117", "\n", "v", "[", "93", ",", "8", "]", "=", "369", "\n", "v", "[", "94", ",", "8", "]", "=", "425", "\n", "v", "[", "95", ",", "8", "]", "=", "207", "\n", "v", "[", "96", ",", "8", "]", "=", "433", "\n", "v", "[", "97", ",", "8", "]", "=", "301", "\n", "v", "[", "98", ",", "8", "]", "=", "147", "\n", "v", "[", "99", ",", "8", "]", "=", "333", "\n", "v", "[", "100", ",", "8", "]", "=", "85", "\n", "v", "[", "101", ",", "8", "]", "=", "221", "\n", "v", "[", "102", ",", "8", "]", "=", "423", "\n", "v", "[", "103", ",", "8", "]", "=", "49", "\n", "v", "[", "104", ",", "8", "]", "=", "3", "\n", "v", "[", "105", ",", "8", "]", "=", "43", "\n", "v", "[", "106", ",", "8", "]", "=", "229", "\n", "v", "[", "107", ",", "8", "]", "=", "227", "\n", "v", "[", "108", ",", "8", "]", "=", "201", "\n", "v", "[", "109", ",", "8", "]", "=", "383", "\n", "v", "[", "110", ",", "8", "]", "=", "281", "\n", "v", "[", "111", ",", "8", "]", "=", "229", "\n", "v", "[", "112", ",", "8", "]", "=", "207", "\n", "v", "[", "113", ",", "8", "]", "=", "21", "\n", "v", "[", "114", ",", "8", "]", "=", "343", "\n", "v", "[", "115", ",", "8", "]", "=", "251", "\n", "v", "[", "116", ",", "8", "]", "=", "397", "\n", "v", "[", "117", ",", "8", "]", "=", "173", "\n", "v", "[", "118", ",", "8", "]", "=", "507", "\n", "v", "[", "119", ",", "8", "]", "=", "421", "\n", "v", "[", "120", ",", "8", "]", "=", "443", "\n", "v", "[", "121", ",", "8", "]", "=", "399", "\n", "v", "[", "122", ",", "8", "]", "=", "53", "\n", "v", "[", "123", ",", "8", "]", "=", "345", "\n", "v", "[", "124", ",", "8", "]", "=", "77", "\n", "v", "[", "125", ",", "8", "]", "=", "385", "\n", "v", "[", "126", ",", "8", "]", "=", "317", "\n", "v", "[", "127", ",", "8", "]", "=", "155", "\n", "v", "[", "128", ",", "8", "]", "=", "187", "\n", "v", "[", "129", ",", "8", "]", "=", "269", "\n", "v", "[", "130", ",", "8", "]", "=", "501", "\n", "v", "[", "131", ",", "8", "]", "=", "19", "\n", "v", "[", "132", ",", "8", "]", "=", "169", "\n", "v", "[", "133", ",", "8", "]", "=", "235", "\n", "v", "[", "134", ",", "8", "]", "=", "415", "\n", "v", "[", "135", ",", "8", "]", "=", "61", "\n", "v", "[", "136", ",", "8", "]", "=", "247", "\n", "v", "[", "137", ",", "8", "]", "=", "183", "\n", "v", "[", "138", ",", "8", "]", "=", "5", "\n", "v", "[", "139", ",", "8", "]", "=", "257", "\n", "v", "[", "140", ",", "8", "]", "=", "401", "\n", "v", "[", "141", ",", "8", "]", "=", "451", "\n", "v", "[", "142", ",", "8", "]", "=", "95", "\n", "v", "[", "143", ",", "8", "]", "=", "455", "\n", "v", "[", "144", ",", "8", "]", "=", "49", "\n", "v", "[", "145", ",", "8", "]", "=", "489", "\n", "v", "[", "146", ",", "8", "]", "=", "75", "\n", "v", "[", "147", ",", "8", "]", "=", "459", "\n", "v", "[", "148", ",", "8", "]", "=", "377", "\n", "v", "[", "149", ",", "8", "]", "=", "87", "\n", "v", "[", "150", ",", "8", "]", "=", "463", "\n", "v", "[", "151", ",", "8", "]", "=", "155", "\n", "v", "[", "152", ",", "8", "]", "=", "233", "\n", "v", "[", "153", ",", "8", "]", "=", "115", "\n", "v", "[", "154", ",", "8", "]", "=", "429", "\n", "v", "[", "155", ",", "8", "]", "=", "211", "\n", "v", "[", "156", ",", "8", "]", "=", "419", "\n", "v", "[", "157", ",", "8", "]", "=", "143", "\n", "v", "[", "158", ",", "8", "]", "=", "487", "\n", "v", "[", "159", ",", "8", "]", "=", "195", "\n", "v", "[", "160", ",", "8", "]", "=", "209", "\n", "v", "[", "161", ",", "8", "]", "=", "461", "\n", "v", "[", "162", ",", "8", "]", "=", "193", "\n", "v", "[", "163", ",", "8", "]", "=", "157", "\n", "v", "[", "164", ",", "8", "]", "=", "193", "\n", "v", "[", "165", ",", "8", "]", "=", "363", "\n", "v", "[", "166", ",", "8", "]", "=", "181", "\n", "v", "[", "167", ",", "8", "]", "=", "271", "\n", "v", "[", "168", ",", "8", "]", "=", "445", "\n", "v", "[", "169", ",", "8", "]", "=", "381", "\n", "v", "[", "170", ",", "8", "]", "=", "231", "\n", "v", "[", "171", ",", "8", "]", "=", "135", "\n", "v", "[", "172", ",", "8", "]", "=", "327", "\n", "v", "[", "173", ",", "8", "]", "=", "403", "\n", "v", "[", "174", ",", "8", "]", "=", "171", "\n", "v", "[", "175", ",", "8", "]", "=", "197", "\n", "v", "[", "176", ",", "8", "]", "=", "181", "\n", "v", "[", "177", ",", "8", "]", "=", "343", "\n", "v", "[", "178", ",", "8", "]", "=", "113", "\n", "v", "[", "179", ",", "8", "]", "=", "313", "\n", "v", "[", "180", ",", "8", "]", "=", "393", "\n", "v", "[", "181", ",", "8", "]", "=", "311", "\n", "v", "[", "182", ",", "8", "]", "=", "415", "\n", "v", "[", "183", ",", "8", "]", "=", "267", "\n", "v", "[", "184", ",", "8", "]", "=", "247", "\n", "v", "[", "185", ",", "8", "]", "=", "425", "\n", "v", "[", "186", ",", "8", "]", "=", "233", "\n", "v", "[", "187", ",", "8", "]", "=", "289", "\n", "v", "[", "188", ",", "8", "]", "=", "55", "\n", "v", "[", "189", ",", "8", "]", "=", "39", "\n", "v", "[", "190", ",", "8", "]", "=", "247", "\n", "v", "[", "191", ",", "8", "]", "=", "327", "\n", "v", "[", "192", ",", "8", "]", "=", "141", "\n", "v", "[", "193", ",", "8", "]", "=", "5", "\n", "v", "[", "194", ",", "8", "]", "=", "189", "\n", "v", "[", "195", ",", "8", "]", "=", "183", "\n", "v", "[", "196", ",", "8", "]", "=", "27", "\n", "v", "[", "197", ",", "8", "]", "=", "337", "\n", "v", "[", "198", ",", "8", "]", "=", "341", "\n", "v", "[", "199", ",", "8", "]", "=", "327", "\n", "v", "[", "200", ",", "8", "]", "=", "87", "\n", "v", "[", "201", ",", "8", "]", "=", "429", "\n", "v", "[", "202", ",", "8", "]", "=", "357", "\n", "v", "[", "203", ",", "8", "]", "=", "265", "\n", "v", "[", "204", ",", "8", "]", "=", "251", "\n", "v", "[", "205", ",", "8", "]", "=", "437", "\n", "v", "[", "206", ",", "8", "]", "=", "201", "\n", "v", "[", "207", ",", "8", "]", "=", "29", "\n", "v", "[", "208", ",", "8", "]", "=", "339", "\n", "v", "[", "209", ",", "8", "]", "=", "257", "\n", "v", "[", "210", ",", "8", "]", "=", "377", "\n", "v", "[", "211", ",", "8", "]", "=", "17", "\n", "v", "[", "212", ",", "8", "]", "=", "53", "\n", "v", "[", "213", ",", "8", "]", "=", "327", "\n", "v", "[", "214", ",", "8", "]", "=", "47", "\n", "v", "[", "215", ",", "8", "]", "=", "375", "\n", "v", "[", "216", ",", "8", "]", "=", "393", "\n", "v", "[", "217", ",", "8", "]", "=", "369", "\n", "v", "[", "218", ",", "8", "]", "=", "403", "\n", "v", "[", "219", ",", "8", "]", "=", "125", "\n", "v", "[", "220", ",", "8", "]", "=", "429", "\n", "v", "[", "221", ",", "8", "]", "=", "257", "\n", "v", "[", "222", ",", "8", "]", "=", "157", "\n", "v", "[", "223", ",", "8", "]", "=", "217", "\n", "v", "[", "224", ",", "8", "]", "=", "85", "\n", "v", "[", "225", ",", "8", "]", "=", "267", "\n", "v", "[", "226", ",", "8", "]", "=", "117", "\n", "v", "[", "227", ",", "8", "]", "=", "337", "\n", "v", "[", "228", ",", "8", "]", "=", "447", "\n", "v", "[", "229", ",", "8", "]", "=", "219", "\n", "v", "[", "230", ",", "8", "]", "=", "501", "\n", "v", "[", "231", ",", "8", "]", "=", "41", "\n", "v", "[", "232", ",", "8", "]", "=", "41", "\n", "v", "[", "233", ",", "8", "]", "=", "193", "\n", "v", "[", "234", ",", "8", "]", "=", "509", "\n", "v", "[", "235", ",", "8", "]", "=", "131", "\n", "v", "[", "236", ",", "8", "]", "=", "207", "\n", "v", "[", "237", ",", "8", "]", "=", "505", "\n", "v", "[", "238", ",", "8", "]", "=", "421", "\n", "v", "[", "239", ",", "8", "]", "=", "149", "\n", "v", "[", "240", ",", "8", "]", "=", "111", "\n", "v", "[", "241", ",", "8", "]", "=", "177", "\n", "v", "[", "242", ",", "8", "]", "=", "167", "\n", "v", "[", "243", ",", "8", "]", "=", "223", "\n", "v", "[", "244", ",", "8", "]", "=", "291", "\n", "v", "[", "245", ",", "8", "]", "=", "91", "\n", "v", "[", "246", ",", "8", "]", "=", "29", "\n", "v", "[", "247", ",", "8", "]", "=", "305", "\n", "v", "[", "248", ",", "8", "]", "=", "151", "\n", "v", "[", "249", ",", "8", "]", "=", "177", "\n", "v", "[", "250", ",", "8", "]", "=", "337", "\n", "v", "[", "251", ",", "8", "]", "=", "183", "\n", "v", "[", "252", ",", "8", "]", "=", "361", "\n", "v", "[", "253", ",", "8", "]", "=", "435", "\n", "v", "[", "254", ",", "8", "]", "=", "307", "\n", "v", "[", "255", ",", "8", "]", "=", "507", "\n", "v", "[", "256", ",", "8", "]", "=", "77", "\n", "v", "[", "257", ",", "8", "]", "=", "181", "\n", "v", "[", "258", ",", "8", "]", "=", "507", "\n", "v", "[", "259", ",", "8", "]", "=", "315", "\n", "v", "[", "260", ",", "8", "]", "=", "145", "\n", "v", "[", "261", ",", "8", "]", "=", "423", "\n", "v", "[", "262", ",", "8", "]", "=", "71", "\n", "v", "[", "263", ",", "8", "]", "=", "103", "\n", "v", "[", "264", ",", "8", "]", "=", "493", "\n", "v", "[", "265", ",", "8", "]", "=", "271", "\n", "v", "[", "266", ",", "8", "]", "=", "469", "\n", "v", "[", "267", ",", "8", "]", "=", "339", "\n", "v", "[", "268", ",", "8", "]", "=", "237", "\n", "v", "[", "269", ",", "8", "]", "=", "437", "\n", "v", "[", "270", ",", "8", "]", "=", "483", "\n", "v", "[", "271", ",", "8", "]", "=", "31", "\n", "v", "[", "272", ",", "8", "]", "=", "219", "\n", "v", "[", "273", ",", "8", "]", "=", "61", "\n", "v", "[", "274", ",", "8", "]", "=", "131", "\n", "v", "[", "275", ",", "8", "]", "=", "391", "\n", "v", "[", "276", ",", "8", "]", "=", "233", "\n", "v", "[", "277", ",", "8", "]", "=", "219", "\n", "v", "[", "278", ",", "8", "]", "=", "69", "\n", "v", "[", "279", ",", "8", "]", "=", "57", "\n", "v", "[", "280", ",", "8", "]", "=", "459", "\n", "v", "[", "281", ",", "8", "]", "=", "225", "\n", "v", "[", "282", ",", "8", "]", "=", "421", "\n", "v", "[", "283", ",", "8", "]", "=", "7", "\n", "v", "[", "284", ",", "8", "]", "=", "461", "\n", "v", "[", "285", ",", "8", "]", "=", "111", "\n", "v", "[", "286", ",", "8", "]", "=", "451", "\n", "v", "[", "287", ",", "8", "]", "=", "277", "\n", "v", "[", "288", ",", "8", "]", "=", "185", "\n", "v", "[", "289", ",", "8", "]", "=", "193", "\n", "v", "[", "290", ",", "8", "]", "=", "125", "\n", "v", "[", "291", ",", "8", "]", "=", "251", "\n", "v", "[", "292", ",", "8", "]", "=", "199", "\n", "v", "[", "293", ",", "8", "]", "=", "73", "\n", "v", "[", "294", ",", "8", "]", "=", "71", "\n", "v", "[", "295", ",", "8", "]", "=", "7", "\n", "v", "[", "296", ",", "8", "]", "=", "409", "\n", "v", "[", "297", ",", "8", "]", "=", "417", "\n", "v", "[", "298", ",", "8", "]", "=", "149", "\n", "v", "[", "299", ",", "8", "]", "=", "193", "\n", "v", "[", "300", ",", "8", "]", "=", "53", "\n", "v", "[", "301", ",", "8", "]", "=", "437", "\n", "v", "[", "302", ",", "8", "]", "=", "29", "\n", "v", "[", "303", ",", "8", "]", "=", "467", "\n", "v", "[", "304", ",", "8", "]", "=", "229", "\n", "v", "[", "305", ",", "8", "]", "=", "31", "\n", "v", "[", "306", ",", "8", "]", "=", "35", "\n", "v", "[", "307", ",", "8", "]", "=", "75", "\n", "v", "[", "308", ",", "8", "]", "=", "105", "\n", "v", "[", "309", ",", "8", "]", "=", "503", "\n", "v", "[", "310", ",", "8", "]", "=", "75", "\n", "v", "[", "311", ",", "8", "]", "=", "317", "\n", "v", "[", "312", ",", "8", "]", "=", "401", "\n", "v", "[", "313", ",", "8", "]", "=", "367", "\n", "v", "[", "314", ",", "8", "]", "=", "131", "\n", "v", "[", "315", ",", "8", "]", "=", "365", "\n", "v", "[", "316", ",", "8", "]", "=", "441", "\n", "v", "[", "317", ",", "8", "]", "=", "433", "\n", "v", "[", "318", ",", "8", "]", "=", "93", "\n", "v", "[", "319", ",", "8", "]", "=", "377", "\n", "v", "[", "320", ",", "8", "]", "=", "405", "\n", "v", "[", "321", ",", "8", "]", "=", "465", "\n", "v", "[", "322", ",", "8", "]", "=", "259", "\n", "v", "[", "323", ",", "8", "]", "=", "283", "\n", "v", "[", "324", ",", "8", "]", "=", "443", "\n", "v", "[", "325", ",", "8", "]", "=", "143", "\n", "v", "[", "326", ",", "8", "]", "=", "445", "\n", "v", "[", "327", ",", "8", "]", "=", "3", "\n", "v", "[", "328", ",", "8", "]", "=", "461", "\n", "v", "[", "329", ",", "8", "]", "=", "329", "\n", "v", "[", "330", ",", "8", "]", "=", "309", "\n", "v", "[", "331", ",", "8", "]", "=", "77", "\n", "v", "[", "332", ",", "8", "]", "=", "323", "\n", "v", "[", "333", ",", "8", "]", "=", "155", "\n", "v", "[", "334", ",", "8", "]", "=", "347", "\n", "v", "[", "335", ",", "8", "]", "=", "45", "\n", "v", "[", "336", ",", "8", "]", "=", "381", "\n", "v", "[", "337", ",", "8", "]", "=", "315", "\n", "v", "[", "338", ",", "8", "]", "=", "463", "\n", "v", "[", "339", ",", "8", "]", "=", "207", "\n", "v", "[", "340", ",", "8", "]", "=", "321", "\n", "v", "[", "341", ",", "8", "]", "=", "157", "\n", "v", "[", "342", ",", "8", "]", "=", "109", "\n", "v", "[", "343", ",", "8", "]", "=", "479", "\n", "v", "[", "344", ",", "8", "]", "=", "313", "\n", "v", "[", "345", ",", "8", "]", "=", "345", "\n", "v", "[", "346", ",", "8", "]", "=", "167", "\n", "v", "[", "347", ",", "8", "]", "=", "439", "\n", "v", "[", "348", ",", "8", "]", "=", "307", "\n", "v", "[", "349", ",", "8", "]", "=", "235", "\n", "v", "[", "350", ",", "8", "]", "=", "473", "\n", "v", "[", "351", ",", "8", "]", "=", "79", "\n", "v", "[", "352", ",", "8", "]", "=", "101", "\n", "v", "[", "353", ",", "8", "]", "=", "245", "\n", "v", "[", "354", ",", "8", "]", "=", "19", "\n", "v", "[", "355", ",", "8", "]", "=", "381", "\n", "v", "[", "356", ",", "8", "]", "=", "251", "\n", "v", "[", "357", ",", "8", "]", "=", "35", "\n", "v", "[", "358", ",", "8", "]", "=", "25", "\n", "v", "[", "359", ",", "8", "]", "=", "107", "\n", "v", "[", "360", ",", "8", "]", "=", "187", "\n", "v", "[", "361", ",", "8", "]", "=", "115", "\n", "v", "[", "362", ",", "8", "]", "=", "113", "\n", "v", "[", "363", ",", "8", "]", "=", "321", "\n", "v", "[", "364", ",", "8", "]", "=", "115", "\n", "v", "[", "365", ",", "8", "]", "=", "445", "\n", "v", "[", "366", ",", "8", "]", "=", "61", "\n", "v", "[", "367", ",", "8", "]", "=", "77", "\n", "v", "[", "368", ",", "8", "]", "=", "293", "\n", "v", "[", "369", ",", "8", "]", "=", "405", "\n", "v", "[", "370", ",", "8", "]", "=", "13", "\n", "v", "[", "371", ",", "8", "]", "=", "53", "\n", "v", "[", "372", ",", "8", "]", "=", "17", "\n", "v", "[", "373", ",", "8", "]", "=", "171", "\n", "v", "[", "374", ",", "8", "]", "=", "299", "\n", "v", "[", "375", ",", "8", "]", "=", "41", "\n", "v", "[", "376", ",", "8", "]", "=", "79", "\n", "v", "[", "377", ",", "8", "]", "=", "3", "\n", "v", "[", "378", ",", "8", "]", "=", "485", "\n", "v", "[", "379", ",", "8", "]", "=", "331", "\n", "v", "[", "380", ",", "8", "]", "=", "13", "\n", "v", "[", "381", ",", "8", "]", "=", "257", "\n", "v", "[", "382", ",", "8", "]", "=", "59", "\n", "v", "[", "383", ",", "8", "]", "=", "201", "\n", "v", "[", "384", ",", "8", "]", "=", "497", "\n", "v", "[", "385", ",", "8", "]", "=", "81", "\n", "v", "[", "386", ",", "8", "]", "=", "451", "\n", "v", "[", "387", ",", "8", "]", "=", "199", "\n", "v", "[", "388", ",", "8", "]", "=", "171", "\n", "v", "[", "389", ",", "8", "]", "=", "81", "\n", "v", "[", "390", ",", "8", "]", "=", "253", "\n", "v", "[", "391", ",", "8", "]", "=", "365", "\n", "v", "[", "392", ",", "8", "]", "=", "75", "\n", "v", "[", "393", ",", "8", "]", "=", "451", "\n", "v", "[", "394", ",", "8", "]", "=", "149", "\n", "v", "[", "395", ",", "8", "]", "=", "483", "\n", "v", "[", "396", ",", "8", "]", "=", "81", "\n", "v", "[", "397", ",", "8", "]", "=", "453", "\n", "v", "[", "398", ",", "8", "]", "=", "469", "\n", "v", "[", "399", ",", "8", "]", "=", "485", "\n", "v", "[", "400", ",", "8", "]", "=", "305", "\n", "v", "[", "401", ",", "8", "]", "=", "163", "\n", "v", "[", "402", ",", "8", "]", "=", "401", "\n", "v", "[", "403", ",", "8", "]", "=", "15", "\n", "v", "[", "404", ",", "8", "]", "=", "91", "\n", "v", "[", "405", ",", "8", "]", "=", "3", "\n", "v", "[", "406", ",", "8", "]", "=", "129", "\n", "v", "[", "407", ",", "8", "]", "=", "35", "\n", "v", "[", "408", ",", "8", "]", "=", "239", "\n", "v", "[", "409", ",", "8", "]", "=", "355", "\n", "v", "[", "410", ",", "8", "]", "=", "211", "\n", "v", "[", "411", ",", "8", "]", "=", "387", "\n", "v", "[", "412", ",", "8", "]", "=", "101", "\n", "v", "[", "413", ",", "8", "]", "=", "299", "\n", "v", "[", "414", ",", "8", "]", "=", "67", "\n", "v", "[", "415", ",", "8", "]", "=", "375", "\n", "v", "[", "416", ",", "8", "]", "=", "405", "\n", "v", "[", "417", ",", "8", "]", "=", "357", "\n", "v", "[", "418", ",", "8", "]", "=", "267", "\n", "v", "[", "419", ",", "8", "]", "=", "363", "\n", "v", "[", "420", ",", "8", "]", "=", "79", "\n", "v", "[", "421", ",", "8", "]", "=", "83", "\n", "v", "[", "422", ",", "8", "]", "=", "437", "\n", "v", "[", "423", ",", "8", "]", "=", "457", "\n", "v", "[", "424", ",", "8", "]", "=", "39", "\n", "v", "[", "425", ",", "8", "]", "=", "97", "\n", "v", "[", "426", ",", "8", "]", "=", "473", "\n", "v", "[", "427", ",", "8", "]", "=", "289", "\n", "v", "[", "428", ",", "8", "]", "=", "179", "\n", "v", "[", "429", ",", "8", "]", "=", "57", "\n", "v", "[", "430", ",", "8", "]", "=", "23", "\n", "v", "[", "431", ",", "8", "]", "=", "49", "\n", "v", "[", "432", ",", "8", "]", "=", "79", "\n", "v", "[", "433", ",", "8", "]", "=", "71", "\n", "v", "[", "434", ",", "8", "]", "=", "341", "\n", "v", "[", "435", ",", "8", "]", "=", "287", "\n", "v", "[", "436", ",", "8", "]", "=", "95", "\n", "v", "[", "437", ",", "8", "]", "=", "229", "\n", "v", "[", "438", ",", "8", "]", "=", "271", "\n", "v", "[", "439", ",", "8", "]", "=", "475", "\n", "v", "[", "440", ",", "8", "]", "=", "49", "\n", "v", "[", "441", ",", "8", "]", "=", "241", "\n", "v", "[", "442", ",", "8", "]", "=", "261", "\n", "v", "[", "443", ",", "8", "]", "=", "495", "\n", "v", "[", "444", ",", "8", "]", "=", "353", "\n", "v", "[", "445", ",", "8", "]", "=", "381", "\n", "v", "[", "446", ",", "8", "]", "=", "13", "\n", "v", "[", "447", ",", "8", "]", "=", "291", "\n", "v", "[", "448", ",", "8", "]", "=", "37", "\n", "v", "[", "449", ",", "8", "]", "=", "251", "\n", "v", "[", "450", ",", "8", "]", "=", "105", "\n", "v", "[", "451", ",", "8", "]", "=", "399", "\n", "v", "[", "452", ",", "8", "]", "=", "81", "\n", "v", "[", "453", ",", "8", "]", "=", "89", "\n", "v", "[", "454", ",", "8", "]", "=", "265", "\n", "v", "[", "455", ",", "8", "]", "=", "507", "\n", "v", "[", "456", ",", "8", "]", "=", "205", "\n", "v", "[", "457", ",", "8", "]", "=", "145", "\n", "v", "[", "458", ",", "8", "]", "=", "331", "\n", "v", "[", "459", ",", "8", "]", "=", "129", "\n", "v", "[", "460", ",", "8", "]", "=", "119", "\n", "v", "[", "461", ",", "8", "]", "=", "503", "\n", "v", "[", "462", ",", "8", "]", "=", "249", "\n", "v", "[", "463", ",", "8", "]", "=", "1", "\n", "v", "[", "464", ",", "8", "]", "=", "289", "\n", "v", "[", "465", ",", "8", "]", "=", "463", "\n", "v", "[", "466", ",", "8", "]", "=", "163", "\n", "v", "[", "467", ",", "8", "]", "=", "443", "\n", "v", "[", "468", ",", "8", "]", "=", "63", "\n", "v", "[", "469", ",", "8", "]", "=", "123", "\n", "v", "[", "470", ",", "8", "]", "=", "361", "\n", "v", "[", "471", ",", "8", "]", "=", "261", "\n", "v", "[", "472", ",", "8", "]", "=", "49", "\n", "v", "[", "473", ",", "8", "]", "=", "429", "\n", "v", "[", "474", ",", "8", "]", "=", "137", "\n", "v", "[", "475", ",", "8", "]", "=", "355", "\n", "v", "[", "476", ",", "8", "]", "=", "175", "\n", "v", "[", "477", ",", "8", "]", "=", "507", "\n", "v", "[", "478", ",", "8", "]", "=", "59", "\n", "v", "[", "479", ",", "8", "]", "=", "277", "\n", "v", "[", "480", ",", "8", "]", "=", "391", "\n", "v", "[", "481", ",", "8", "]", "=", "25", "\n", "v", "[", "482", ",", "8", "]", "=", "185", "\n", "v", "[", "483", ",", "8", "]", "=", "381", "\n", "v", "[", "484", ",", "8", "]", "=", "197", "\n", "v", "[", "485", ",", "8", "]", "=", "39", "\n", "v", "[", "486", ",", "8", "]", "=", "5", "\n", "v", "[", "487", ",", "8", "]", "=", "429", "\n", "v", "[", "488", ",", "8", "]", "=", "119", "\n", "v", "[", "489", ",", "8", "]", "=", "247", "\n", "v", "[", "490", ",", "8", "]", "=", "177", "\n", "v", "[", "491", ",", "8", "]", "=", "329", "\n", "v", "[", "492", ",", "8", "]", "=", "465", "\n", "v", "[", "493", ",", "8", "]", "=", "421", "\n", "v", "[", "494", ",", "8", "]", "=", "271", "\n", "v", "[", "495", ",", "8", "]", "=", "467", "\n", "v", "[", "496", ",", "8", "]", "=", "151", "\n", "v", "[", "497", ",", "8", "]", "=", "45", "\n", "v", "[", "498", ",", "8", "]", "=", "429", "\n", "v", "[", "499", ",", "8", "]", "=", "137", "\n", "v", "[", "500", ",", "8", "]", "=", "471", "\n", "v", "[", "501", ",", "8", "]", "=", "11", "\n", "v", "[", "502", ",", "8", "]", "=", "17", "\n", "v", "[", "503", ",", "8", "]", "=", "409", "\n", "v", "[", "504", ",", "8", "]", "=", "347", "\n", "v", "[", "505", ",", "8", "]", "=", "199", "\n", "v", "[", "506", ",", "8", "]", "=", "463", "\n", "v", "[", "507", ",", "8", "]", "=", "177", "\n", "v", "[", "508", ",", "8", "]", "=", "11", "\n", "v", "[", "509", ",", "8", "]", "=", "51", "\n", "v", "[", "510", ",", "8", "]", "=", "361", "\n", "v", "[", "511", ",", "8", "]", "=", "95", "\n", "v", "[", "512", ",", "8", "]", "=", "497", "\n", "v", "[", "513", ",", "8", "]", "=", "163", "\n", "v", "[", "514", ",", "8", "]", "=", "351", "\n", "v", "[", "515", ",", "8", "]", "=", "127", "\n", "v", "[", "516", ",", "8", "]", "=", "395", "\n", "v", "[", "517", ",", "8", "]", "=", "511", "\n", "v", "[", "518", ",", "8", "]", "=", "327", "\n", "v", "[", "519", ",", "8", "]", "=", "353", "\n", "v", "[", "520", ",", "8", "]", "=", "49", "\n", "v", "[", "521", ",", "8", "]", "=", "105", "\n", "v", "[", "522", ",", "8", "]", "=", "151", "\n", "v", "[", "523", ",", "8", "]", "=", "321", "\n", "v", "[", "524", ",", "8", "]", "=", "331", "\n", "v", "[", "525", ",", "8", "]", "=", "329", "\n", "v", "[", "526", ",", "8", "]", "=", "509", "\n", "v", "[", "527", ",", "8", "]", "=", "107", "\n", "v", "[", "528", ",", "8", "]", "=", "109", "\n", "v", "[", "529", ",", "8", "]", "=", "303", "\n", "v", "[", "530", ",", "8", "]", "=", "467", "\n", "v", "[", "531", ",", "8", "]", "=", "287", "\n", "v", "[", "532", ",", "8", "]", "=", "161", "\n", "v", "[", "533", ",", "8", "]", "=", "45", "\n", "v", "[", "534", ",", "8", "]", "=", "385", "\n", "v", "[", "535", ",", "8", "]", "=", "289", "\n", "v", "[", "536", ",", "8", "]", "=", "363", "\n", "v", "[", "537", ",", "8", "]", "=", "331", "\n", "v", "[", "538", ",", "8", "]", "=", "265", "\n", "v", "[", "539", ",", "8", "]", "=", "407", "\n", "v", "[", "540", ",", "8", "]", "=", "37", "\n", "v", "[", "541", ",", "8", "]", "=", "433", "\n", "v", "[", "542", ",", "8", "]", "=", "315", "\n", "v", "[", "543", ",", "8", "]", "=", "343", "\n", "v", "[", "544", ",", "8", "]", "=", "63", "\n", "v", "[", "545", ",", "8", "]", "=", "51", "\n", "v", "[", "546", ",", "8", "]", "=", "185", "\n", "v", "[", "547", ",", "8", "]", "=", "71", "\n", "v", "[", "548", ",", "8", "]", "=", "27", "\n", "v", "[", "549", ",", "8", "]", "=", "267", "\n", "v", "[", "550", ",", "8", "]", "=", "503", "\n", "v", "[", "551", ",", "8", "]", "=", "239", "\n", "v", "[", "552", ",", "8", "]", "=", "293", "\n", "v", "[", "553", ",", "8", "]", "=", "245", "\n", "v", "[", "554", ",", "8", "]", "=", "281", "\n", "v", "[", "555", ",", "8", "]", "=", "297", "\n", "v", "[", "556", ",", "8", "]", "=", "75", "\n", "v", "[", "557", ",", "8", "]", "=", "461", "\n", "v", "[", "558", ",", "8", "]", "=", "371", "\n", "v", "[", "559", ",", "8", "]", "=", "129", "\n", "v", "[", "560", ",", "8", "]", "=", "189", "\n", "v", "[", "561", ",", "8", "]", "=", "189", "\n", "v", "[", "562", ",", "8", "]", "=", "339", "\n", "v", "[", "563", ",", "8", "]", "=", "287", "\n", "v", "[", "564", ",", "8", "]", "=", "111", "\n", "v", "[", "565", ",", "8", "]", "=", "111", "\n", "v", "[", "566", ",", "8", "]", "=", "379", "\n", "v", "[", "567", ",", "8", "]", "=", "93", "\n", "v", "[", "568", ",", "8", "]", "=", "27", "\n", "v", "[", "569", ",", "8", "]", "=", "185", "\n", "v", "[", "570", ",", "8", "]", "=", "347", "\n", "v", "[", "571", ",", "8", "]", "=", "337", "\n", "v", "[", "572", ",", "8", "]", "=", "247", "\n", "v", "[", "573", ",", "8", "]", "=", "507", "\n", "v", "[", "574", ",", "8", "]", "=", "161", "\n", "v", "[", "575", ",", "8", "]", "=", "231", "\n", "v", "[", "576", ",", "8", "]", "=", "43", "\n", "v", "[", "577", ",", "8", "]", "=", "499", "\n", "v", "[", "578", ",", "8", "]", "=", "73", "\n", "v", "[", "579", ",", "8", "]", "=", "327", "\n", "v", "[", "580", ",", "8", "]", "=", "263", "\n", "v", "[", "581", ",", "8", "]", "=", "331", "\n", "v", "[", "582", ",", "8", "]", "=", "249", "\n", "v", "[", "583", ",", "8", "]", "=", "493", "\n", "v", "[", "584", ",", "8", "]", "=", "37", "\n", "v", "[", "585", ",", "8", "]", "=", "25", "\n", "v", "[", "586", ",", "8", "]", "=", "115", "\n", "v", "[", "587", ",", "8", "]", "=", "3", "\n", "v", "[", "588", ",", "8", "]", "=", "167", "\n", "v", "[", "589", ",", "8", "]", "=", "197", "\n", "v", "[", "590", ",", "8", "]", "=", "127", "\n", "v", "[", "591", ",", "8", "]", "=", "357", "\n", "v", "[", "592", ",", "8", "]", "=", "497", "\n", "v", "[", "593", ",", "8", "]", "=", "103", "\n", "v", "[", "594", ",", "8", "]", "=", "125", "\n", "v", "[", "595", ",", "8", "]", "=", "191", "\n", "v", "[", "596", ",", "8", "]", "=", "165", "\n", "v", "[", "597", ",", "8", "]", "=", "55", "\n", "v", "[", "598", ",", "8", "]", "=", "101", "\n", "v", "[", "599", ",", "8", "]", "=", "95", "\n", "v", "[", "600", ",", "8", "]", "=", "79", "\n", "v", "[", "601", ",", "8", "]", "=", "351", "\n", "v", "[", "602", ",", "8", "]", "=", "341", "\n", "v", "[", "603", ",", "8", "]", "=", "43", "\n", "v", "[", "604", ",", "8", "]", "=", "125", "\n", "v", "[", "605", ",", "8", "]", "=", "135", "\n", "v", "[", "606", ",", "8", "]", "=", "173", "\n", "v", "[", "607", ",", "8", "]", "=", "289", "\n", "v", "[", "608", ",", "8", "]", "=", "373", "\n", "v", "[", "609", ",", "8", "]", "=", "133", "\n", "v", "[", "610", ",", "8", "]", "=", "421", "\n", "v", "[", "611", ",", "8", "]", "=", "241", "\n", "v", "[", "612", ",", "8", "]", "=", "281", "\n", "v", "[", "613", ",", "8", "]", "=", "213", "\n", "v", "[", "614", ",", "8", "]", "=", "177", "\n", "v", "[", "615", ",", "8", "]", "=", "363", "\n", "v", "[", "616", ",", "8", "]", "=", "151", "\n", "v", "[", "617", ",", "8", "]", "=", "227", "\n", "v", "[", "618", ",", "8", "]", "=", "145", "\n", "v", "[", "619", ",", "8", "]", "=", "363", "\n", "v", "[", "620", ",", "8", "]", "=", "239", "\n", "v", "[", "621", ",", "8", "]", "=", "431", "\n", "v", "[", "622", ",", "8", "]", "=", "81", "\n", "v", "[", "623", ",", "8", "]", "=", "397", "\n", "v", "[", "624", ",", "8", "]", "=", "241", "\n", "v", "[", "625", ",", "8", "]", "=", "67", "\n", "v", "[", "626", ",", "8", "]", "=", "291", "\n", "v", "[", "627", ",", "8", "]", "=", "255", "\n", "v", "[", "628", ",", "8", "]", "=", "405", "\n", "v", "[", "629", ",", "8", "]", "=", "421", "\n", "v", "[", "630", ",", "8", "]", "=", "399", "\n", "v", "[", "631", ",", "8", "]", "=", "75", "\n", "v", "[", "632", ",", "8", "]", "=", "399", "\n", "v", "[", "633", ",", "8", "]", "=", "105", "\n", "v", "[", "634", ",", "8", "]", "=", "329", "\n", "v", "[", "635", ",", "8", "]", "=", "41", "\n", "v", "[", "636", ",", "8", "]", "=", "425", "\n", "v", "[", "637", ",", "8", "]", "=", "7", "\n", "v", "[", "638", ",", "8", "]", "=", "283", "\n", "v", "[", "639", ",", "8", "]", "=", "375", "\n", "v", "[", "640", ",", "8", "]", "=", "475", "\n", "v", "[", "641", ",", "8", "]", "=", "427", "\n", "v", "[", "642", ",", "8", "]", "=", "277", "\n", "v", "[", "643", ",", "8", "]", "=", "209", "\n", "v", "[", "644", ",", "8", "]", "=", "411", "\n", "v", "[", "645", ",", "8", "]", "=", "3", "\n", "v", "[", "646", ",", "8", "]", "=", "137", "\n", "v", "[", "647", ",", "8", "]", "=", "195", "\n", "v", "[", "648", ",", "8", "]", "=", "289", "\n", "v", "[", "649", ",", "8", "]", "=", "509", "\n", "v", "[", "650", ",", "8", "]", "=", "121", "\n", "v", "[", "651", ",", "8", "]", "=", "55", "\n", "v", "[", "652", ",", "8", "]", "=", "147", "\n", "v", "[", "653", ",", "8", "]", "=", "275", "\n", "v", "[", "654", ",", "8", "]", "=", "251", "\n", "v", "[", "655", ",", "8", "]", "=", "19", "\n", "v", "[", "656", ",", "8", "]", "=", "129", "\n", "v", "[", "657", ",", "8", "]", "=", "285", "\n", "v", "[", "658", ",", "8", "]", "=", "415", "\n", "v", "[", "659", ",", "8", "]", "=", "487", "\n", "v", "[", "660", ",", "8", "]", "=", "491", "\n", "v", "[", "661", ",", "8", "]", "=", "193", "\n", "v", "[", "662", ",", "8", "]", "=", "219", "\n", "v", "[", "663", ",", "8", "]", "=", "403", "\n", "v", "[", "664", ",", "8", "]", "=", "23", "\n", "v", "[", "665", ",", "8", "]", "=", "97", "\n", "v", "[", "666", ",", "8", "]", "=", "65", "\n", "v", "[", "667", ",", "8", "]", "=", "285", "\n", "v", "[", "668", ",", "8", "]", "=", "75", "\n", "v", "[", "669", ",", "8", "]", "=", "21", "\n", "v", "[", "670", ",", "8", "]", "=", "373", "\n", "v", "[", "671", ",", "8", "]", "=", "261", "\n", "v", "[", "672", ",", "8", "]", "=", "339", "\n", "v", "[", "673", ",", "8", "]", "=", "239", "\n", "v", "[", "674", ",", "8", "]", "=", "495", "\n", "v", "[", "675", ",", "8", "]", "=", "415", "\n", "v", "[", "676", ",", "8", "]", "=", "333", "\n", "v", "[", "677", ",", "8", "]", "=", "107", "\n", "v", "[", "678", ",", "8", "]", "=", "435", "\n", "v", "[", "679", ",", "8", "]", "=", "297", "\n", "v", "[", "680", ",", "8", "]", "=", "213", "\n", "v", "[", "681", ",", "8", "]", "=", "149", "\n", "v", "[", "682", ",", "8", "]", "=", "463", "\n", "v", "[", "683", ",", "8", "]", "=", "199", "\n", "v", "[", "684", ",", "8", "]", "=", "323", "\n", "v", "[", "685", ",", "8", "]", "=", "45", "\n", "v", "[", "686", ",", "8", "]", "=", "19", "\n", "v", "[", "687", ",", "8", "]", "=", "301", "\n", "v", "[", "688", ",", "8", "]", "=", "121", "\n", "v", "[", "689", ",", "8", "]", "=", "499", "\n", "v", "[", "690", ",", "8", "]", "=", "187", "\n", "v", "[", "691", ",", "8", "]", "=", "229", "\n", "v", "[", "692", ",", "8", "]", "=", "63", "\n", "v", "[", "693", ",", "8", "]", "=", "425", "\n", "v", "[", "694", ",", "8", "]", "=", "99", "\n", "v", "[", "695", ",", "8", "]", "=", "281", "\n", "v", "[", "696", ",", "8", "]", "=", "35", "\n", "v", "[", "697", ",", "8", "]", "=", "125", "\n", "v", "[", "698", ",", "8", "]", "=", "349", "\n", "v", "[", "699", ",", "8", "]", "=", "87", "\n", "v", "[", "700", ",", "8", "]", "=", "101", "\n", "v", "[", "701", ",", "8", "]", "=", "59", "\n", "v", "[", "702", ",", "8", "]", "=", "195", "\n", "v", "[", "703", ",", "8", "]", "=", "511", "\n", "v", "[", "704", ",", "8", "]", "=", "355", "\n", "v", "[", "705", ",", "8", "]", "=", "73", "\n", "v", "[", "706", ",", "8", "]", "=", "263", "\n", "v", "[", "707", ",", "8", "]", "=", "243", "\n", "v", "[", "708", ",", "8", "]", "=", "101", "\n", "v", "[", "709", ",", "8", "]", "=", "165", "\n", "v", "[", "710", ",", "8", "]", "=", "141", "\n", "v", "[", "711", ",", "8", "]", "=", "11", "\n", "v", "[", "712", ",", "8", "]", "=", "389", "\n", "v", "[", "713", ",", "8", "]", "=", "219", "\n", "v", "[", "714", ",", "8", "]", "=", "187", "\n", "v", "[", "715", ",", "8", "]", "=", "449", "\n", "v", "[", "716", ",", "8", "]", "=", "447", "\n", "v", "[", "717", ",", "8", "]", "=", "393", "\n", "v", "[", "718", ",", "8", "]", "=", "477", "\n", "v", "[", "719", ",", "8", "]", "=", "305", "\n", "v", "[", "720", ",", "8", "]", "=", "221", "\n", "v", "[", "721", ",", "8", "]", "=", "51", "\n", "v", "[", "722", ",", "8", "]", "=", "355", "\n", "v", "[", "723", ",", "8", "]", "=", "209", "\n", "v", "[", "724", ",", "8", "]", "=", "499", "\n", "v", "[", "725", ",", "8", "]", "=", "479", "\n", "v", "[", "726", ",", "8", "]", "=", "265", "\n", "v", "[", "727", ",", "8", "]", "=", "377", "\n", "v", "[", "728", ",", "8", "]", "=", "145", "\n", "v", "[", "729", ",", "8", "]", "=", "411", "\n", "v", "[", "730", ",", "8", "]", "=", "173", "\n", "v", "[", "731", ",", "8", "]", "=", "11", "\n", "v", "[", "732", ",", "8", "]", "=", "433", "\n", "v", "[", "733", ",", "8", "]", "=", "483", "\n", "v", "[", "734", ",", "8", "]", "=", "135", "\n", "v", "[", "735", ",", "8", "]", "=", "385", "\n", "v", "[", "736", ",", "8", "]", "=", "341", "\n", "v", "[", "737", ",", "8", "]", "=", "89", "\n", "v", "[", "738", ",", "8", "]", "=", "209", "\n", "v", "[", "739", ",", "8", "]", "=", "391", "\n", "v", "[", "740", ",", "8", "]", "=", "33", "\n", "v", "[", "741", ",", "8", "]", "=", "395", "\n", "v", "[", "742", ",", "8", "]", "=", "319", "\n", "v", "[", "743", ",", "8", "]", "=", "451", "\n", "v", "[", "744", ",", "8", "]", "=", "119", "\n", "v", "[", "745", ",", "8", "]", "=", "341", "\n", "v", "[", "746", ",", "8", "]", "=", "227", "\n", "v", "[", "747", ",", "8", "]", "=", "375", "\n", "v", "[", "748", ",", "8", "]", "=", "61", "\n", "v", "[", "749", ",", "8", "]", "=", "331", "\n", "v", "[", "750", ",", "8", "]", "=", "493", "\n", "v", "[", "751", ",", "8", "]", "=", "411", "\n", "v", "[", "752", ",", "8", "]", "=", "293", "\n", "v", "[", "753", ",", "8", "]", "=", "47", "\n", "v", "[", "754", ",", "8", "]", "=", "203", "\n", "v", "[", "755", ",", "8", "]", "=", "375", "\n", "v", "[", "756", ",", "8", "]", "=", "167", "\n", "v", "[", "757", ",", "8", "]", "=", "395", "\n", "v", "[", "758", ",", "8", "]", "=", "155", "\n", "v", "[", "759", ",", "8", "]", "=", "5", "\n", "v", "[", "760", ",", "8", "]", "=", "237", "\n", "v", "[", "761", ",", "8", "]", "=", "361", "\n", "v", "[", "762", ",", "8", "]", "=", "489", "\n", "v", "[", "763", ",", "8", "]", "=", "127", "\n", "v", "[", "764", ",", "8", "]", "=", "21", "\n", "v", "[", "765", ",", "8", "]", "=", "345", "\n", "v", "[", "766", ",", "8", "]", "=", "101", "\n", "v", "[", "767", ",", "8", "]", "=", "371", "\n", "v", "[", "768", ",", "8", "]", "=", "233", "\n", "v", "[", "769", ",", "8", "]", "=", "431", "\n", "v", "[", "770", ",", "8", "]", "=", "109", "\n", "v", "[", "771", ",", "8", "]", "=", "119", "\n", "v", "[", "772", ",", "8", "]", "=", "277", "\n", "v", "[", "773", ",", "8", "]", "=", "125", "\n", "v", "[", "774", ",", "8", "]", "=", "263", "\n", "v", "[", "775", ",", "8", "]", "=", "73", "\n", "v", "[", "776", ",", "8", "]", "=", "135", "\n", "v", "[", "777", ",", "8", "]", "=", "123", "\n", "v", "[", "778", ",", "8", "]", "=", "83", "\n", "v", "[", "779", ",", "8", "]", "=", "123", "\n", "v", "[", "780", ",", "8", "]", "=", "405", "\n", "v", "[", "781", ",", "8", "]", "=", "69", "\n", "v", "[", "782", ",", "8", "]", "=", "75", "\n", "v", "[", "783", ",", "8", "]", "=", "287", "\n", "v", "[", "784", ",", "8", "]", "=", "401", "\n", "v", "[", "785", ",", "8", "]", "=", "23", "\n", "v", "[", "786", ",", "8", "]", "=", "283", "\n", "v", "[", "787", ",", "8", "]", "=", "393", "\n", "v", "[", "788", ",", "8", "]", "=", "41", "\n", "v", "[", "789", ",", "8", "]", "=", "379", "\n", "v", "[", "790", ",", "8", "]", "=", "431", "\n", "v", "[", "791", ",", "8", "]", "=", "11", "\n", "v", "[", "792", ",", "8", "]", "=", "475", "\n", "v", "[", "793", ",", "8", "]", "=", "505", "\n", "v", "[", "794", ",", "8", "]", "=", "19", "\n", "v", "[", "795", ",", "8", "]", "=", "365", "\n", "v", "[", "796", ",", "8", "]", "=", "265", "\n", "v", "[", "797", ",", "8", "]", "=", "271", "\n", "v", "[", "798", ",", "8", "]", "=", "499", "\n", "v", "[", "799", ",", "8", "]", "=", "489", "\n", "v", "[", "800", ",", "8", "]", "=", "443", "\n", "v", "[", "801", ",", "8", "]", "=", "165", "\n", "v", "[", "802", ",", "8", "]", "=", "91", "\n", "v", "[", "803", ",", "8", "]", "=", "83", "\n", "v", "[", "804", ",", "8", "]", "=", "291", "\n", "v", "[", "805", ",", "8", "]", "=", "319", "\n", "v", "[", "806", ",", "8", "]", "=", "199", "\n", "v", "[", "807", ",", "8", "]", "=", "107", "\n", "v", "[", "808", ",", "8", "]", "=", "245", "\n", "v", "[", "809", ",", "8", "]", "=", "389", "\n", "v", "[", "810", ",", "8", "]", "=", "143", "\n", "v", "[", "811", ",", "8", "]", "=", "137", "\n", "v", "[", "812", ",", "8", "]", "=", "89", "\n", "v", "[", "813", ",", "8", "]", "=", "125", "\n", "v", "[", "814", ",", "8", "]", "=", "281", "\n", "v", "[", "815", ",", "8", "]", "=", "381", "\n", "v", "[", "816", ",", "8", "]", "=", "215", "\n", "v", "[", "817", ",", "8", "]", "=", "131", "\n", "v", "[", "818", ",", "8", "]", "=", "299", "\n", "v", "[", "819", ",", "8", "]", "=", "249", "\n", "v", "[", "820", ",", "8", "]", "=", "375", "\n", "v", "[", "821", ",", "8", "]", "=", "455", "\n", "v", "[", "822", ",", "8", "]", "=", "43", "\n", "v", "[", "823", ",", "8", "]", "=", "73", "\n", "v", "[", "824", ",", "8", "]", "=", "281", "\n", "v", "[", "825", ",", "8", "]", "=", "217", "\n", "v", "[", "826", ",", "8", "]", "=", "297", "\n", "v", "[", "827", ",", "8", "]", "=", "229", "\n", "v", "[", "828", ",", "8", "]", "=", "431", "\n", "v", "[", "829", ",", "8", "]", "=", "357", "\n", "v", "[", "830", ",", "8", "]", "=", "81", "\n", "v", "[", "831", ",", "8", "]", "=", "357", "\n", "v", "[", "832", ",", "8", "]", "=", "171", "\n", "v", "[", "833", ",", "8", "]", "=", "451", "\n", "v", "[", "834", ",", "8", "]", "=", "481", "\n", "v", "[", "835", ",", "8", "]", "=", "13", "\n", "v", "[", "836", ",", "8", "]", "=", "387", "\n", "v", "[", "837", ",", "8", "]", "=", "491", "\n", "v", "[", "838", ",", "8", "]", "=", "489", "\n", "v", "[", "839", ",", "8", "]", "=", "439", "\n", "v", "[", "840", ",", "8", "]", "=", "385", "\n", "v", "[", "841", ",", "8", "]", "=", "487", "\n", "v", "[", "842", ",", "8", "]", "=", "177", "\n", "v", "[", "843", ",", "8", "]", "=", "393", "\n", "v", "[", "844", ",", "8", "]", "=", "33", "\n", "v", "[", "845", ",", "8", "]", "=", "71", "\n", "v", "[", "846", ",", "8", "]", "=", "375", "\n", "v", "[", "847", ",", "8", "]", "=", "443", "\n", "v", "[", "848", ",", "8", "]", "=", "129", "\n", "v", "[", "849", ",", "8", "]", "=", "407", "\n", "v", "[", "850", ",", "8", "]", "=", "395", "\n", "v", "[", "851", ",", "8", "]", "=", "127", "\n", "v", "[", "852", ",", "8", "]", "=", "65", "\n", "v", "[", "853", ",", "8", "]", "=", "333", "\n", "v", "[", "854", ",", "8", "]", "=", "309", "\n", "v", "[", "855", ",", "8", "]", "=", "119", "\n", "v", "[", "856", ",", "8", "]", "=", "197", "\n", "v", "[", "857", ",", "8", "]", "=", "435", "\n", "v", "[", "858", ",", "8", "]", "=", "497", "\n", "v", "[", "859", ",", "8", "]", "=", "373", "\n", "v", "[", "860", ",", "8", "]", "=", "71", "\n", "v", "[", "861", ",", "8", "]", "=", "379", "\n", "v", "[", "862", ",", "8", "]", "=", "509", "\n", "v", "[", "863", ",", "8", "]", "=", "387", "\n", "v", "[", "864", ",", "8", "]", "=", "159", "\n", "v", "[", "865", ",", "8", "]", "=", "265", "\n", "v", "[", "866", ",", "8", "]", "=", "477", "\n", "v", "[", "867", ",", "8", "]", "=", "463", "\n", "v", "[", "868", ",", "8", "]", "=", "449", "\n", "v", "[", "869", ",", "8", "]", "=", "47", "\n", "v", "[", "870", ",", "8", "]", "=", "353", "\n", "v", "[", "871", ",", "8", "]", "=", "249", "\n", "v", "[", "872", ",", "8", "]", "=", "335", "\n", "v", "[", "873", ",", "8", "]", "=", "505", "\n", "v", "[", "874", ",", "8", "]", "=", "89", "\n", "v", "[", "875", ",", "8", "]", "=", "141", "\n", "v", "[", "876", ",", "8", "]", "=", "55", "\n", "v", "[", "877", ",", "8", "]", "=", "235", "\n", "v", "[", "878", ",", "8", "]", "=", "187", "\n", "v", "[", "879", ",", "8", "]", "=", "87", "\n", "v", "[", "880", ",", "8", "]", "=", "363", "\n", "v", "[", "881", ",", "8", "]", "=", "93", "\n", "v", "[", "882", ",", "8", "]", "=", "363", "\n", "v", "[", "883", ",", "8", "]", "=", "101", "\n", "v", "[", "884", ",", "8", "]", "=", "67", "\n", "v", "[", "885", ",", "8", "]", "=", "215", "\n", "v", "[", "886", ",", "8", "]", "=", "321", "\n", "v", "[", "887", ",", "8", "]", "=", "331", "\n", "v", "[", "888", ",", "8", "]", "=", "305", "\n", "v", "[", "889", ",", "8", "]", "=", "261", "\n", "v", "[", "890", ",", "8", "]", "=", "411", "\n", "v", "[", "891", ",", "8", "]", "=", "491", "\n", "v", "[", "892", ",", "8", "]", "=", "479", "\n", "v", "[", "893", ",", "8", "]", "=", "65", "\n", "v", "[", "894", ",", "8", "]", "=", "307", "\n", "v", "[", "895", ",", "8", "]", "=", "469", "\n", "v", "[", "896", ",", "8", "]", "=", "415", "\n", "v", "[", "897", ",", "8", "]", "=", "131", "\n", "v", "[", "898", ",", "8", "]", "=", "315", "\n", "v", "[", "899", ",", "8", "]", "=", "487", "\n", "v", "[", "900", ",", "8", "]", "=", "83", "\n", "v", "[", "901", ",", "8", "]", "=", "455", "\n", "v", "[", "902", ",", "8", "]", "=", "19", "\n", "v", "[", "903", ",", "8", "]", "=", "113", "\n", "v", "[", "904", ",", "8", "]", "=", "163", "\n", "v", "[", "905", ",", "8", "]", "=", "503", "\n", "v", "[", "906", ",", "8", "]", "=", "99", "\n", "v", "[", "907", ",", "8", "]", "=", "499", "\n", "v", "[", "908", ",", "8", "]", "=", "251", "\n", "v", "[", "909", ",", "8", "]", "=", "239", "\n", "v", "[", "910", ",", "8", "]", "=", "81", "\n", "v", "[", "911", ",", "8", "]", "=", "167", "\n", "v", "[", "912", ",", "8", "]", "=", "391", "\n", "v", "[", "913", ",", "8", "]", "=", "255", "\n", "v", "[", "914", ",", "8", "]", "=", "317", "\n", "v", "[", "915", ",", "8", "]", "=", "363", "\n", "v", "[", "916", ",", "8", "]", "=", "359", "\n", "v", "[", "917", ",", "8", "]", "=", "395", "\n", "v", "[", "918", ",", "8", "]", "=", "419", "\n", "v", "[", "919", ",", "8", "]", "=", "307", "\n", "v", "[", "920", ",", "8", "]", "=", "251", "\n", "v", "[", "921", ",", "8", "]", "=", "267", "\n", "v", "[", "922", ",", "8", "]", "=", "171", "\n", "v", "[", "923", ",", "8", "]", "=", "461", "\n", "v", "[", "924", ",", "8", "]", "=", "183", "\n", "v", "[", "925", ",", "8", "]", "=", "465", "\n", "v", "[", "926", ",", "8", "]", "=", "165", "\n", "v", "[", "927", ",", "8", "]", "=", "163", "\n", "v", "[", "928", ",", "8", "]", "=", "293", "\n", "v", "[", "929", ",", "8", "]", "=", "477", "\n", "v", "[", "930", ",", "8", "]", "=", "223", "\n", "v", "[", "931", ",", "8", "]", "=", "403", "\n", "v", "[", "932", ",", "8", "]", "=", "389", "\n", "v", "[", "933", ",", "8", "]", "=", "97", "\n", "v", "[", "934", ",", "8", "]", "=", "335", "\n", "v", "[", "935", ",", "8", "]", "=", "357", "\n", "v", "[", "936", ",", "8", "]", "=", "297", "\n", "v", "[", "937", ",", "8", "]", "=", "19", "\n", "v", "[", "938", ",", "8", "]", "=", "469", "\n", "v", "[", "939", ",", "8", "]", "=", "501", "\n", "v", "[", "940", ",", "8", "]", "=", "249", "\n", "v", "[", "941", ",", "8", "]", "=", "85", "\n", "v", "[", "942", ",", "8", "]", "=", "213", "\n", "v", "[", "943", ",", "8", "]", "=", "311", "\n", "v", "[", "944", ",", "8", "]", "=", "265", "\n", "v", "[", "945", ",", "8", "]", "=", "379", "\n", "v", "[", "946", ",", "8", "]", "=", "297", "\n", "v", "[", "947", ",", "8", "]", "=", "283", "\n", "v", "[", "948", ",", "8", "]", "=", "393", "\n", "v", "[", "949", ",", "8", "]", "=", "449", "\n", "v", "[", "950", ",", "8", "]", "=", "463", "\n", "v", "[", "951", ",", "8", "]", "=", "289", "\n", "v", "[", "952", ",", "8", "]", "=", "159", "\n", "v", "[", "953", ",", "8", "]", "=", "289", "\n", "v", "[", "954", ",", "8", "]", "=", "499", "\n", "v", "[", "955", ",", "8", "]", "=", "407", "\n", "v", "[", "956", ",", "8", "]", "=", "129", "\n", "v", "[", "957", ",", "8", "]", "=", "137", "\n", "v", "[", "958", ",", "8", "]", "=", "221", "\n", "v", "[", "959", ",", "8", "]", "=", "43", "\n", "v", "[", "960", ",", "8", "]", "=", "89", "\n", "v", "[", "961", ",", "8", "]", "=", "403", "\n", "v", "[", "962", ",", "8", "]", "=", "271", "\n", "v", "[", "963", ",", "8", "]", "=", "75", "\n", "v", "[", "964", ",", "8", "]", "=", "83", "\n", "v", "[", "965", ",", "8", "]", "=", "445", "\n", "v", "[", "966", ",", "8", "]", "=", "453", "\n", "v", "[", "967", ",", "8", "]", "=", "389", "\n", "v", "[", "968", ",", "8", "]", "=", "149", "\n", "v", "[", "969", ",", "8", "]", "=", "143", "\n", "v", "[", "970", ",", "8", "]", "=", "423", "\n", "v", "[", "971", ",", "8", "]", "=", "499", "\n", "v", "[", "972", ",", "8", "]", "=", "317", "\n", "v", "[", "973", ",", "8", "]", "=", "445", "\n", "v", "[", "974", ",", "8", "]", "=", "157", "\n", "v", "[", "975", ",", "8", "]", "=", "137", "\n", "v", "[", "976", ",", "8", "]", "=", "453", "\n", "v", "[", "977", ",", "8", "]", "=", "163", "\n", "v", "[", "978", ",", "8", "]", "=", "87", "\n", "v", "[", "979", ",", "8", "]", "=", "23", "\n", "v", "[", "980", ",", "8", "]", "=", "391", "\n", "v", "[", "981", ",", "8", "]", "=", "119", "\n", "v", "[", "982", ",", "8", "]", "=", "427", "\n", "v", "[", "983", ",", "8", "]", "=", "323", "\n", "v", "[", "984", ",", "8", "]", "=", "173", "\n", "v", "[", "985", ",", "8", "]", "=", "89", "\n", "v", "[", "986", ",", "8", "]", "=", "259", "\n", "v", "[", "987", ",", "8", "]", "=", "377", "\n", "v", "[", "988", ",", "8", "]", "=", "511", "\n", "v", "[", "989", ",", "8", "]", "=", "249", "\n", "v", "[", "990", ",", "8", "]", "=", "31", "\n", "v", "[", "991", ",", "8", "]", "=", "363", "\n", "v", "[", "992", ",", "8", "]", "=", "229", "\n", "v", "[", "993", ",", "8", "]", "=", "353", "\n", "v", "[", "994", ",", "8", "]", "=", "329", "\n", "v", "[", "995", ",", "8", "]", "=", "493", "\n", "v", "[", "996", ",", "8", "]", "=", "427", "\n", "v", "[", "997", ",", "8", "]", "=", "57", "\n", "v", "[", "998", ",", "8", "]", "=", "205", "\n", "v", "[", "999", ",", "8", "]", "=", "389", "\n", "v", "[", "1000", ",", "8", "]", "=", "91", "\n", "v", "[", "1001", ",", "8", "]", "=", "83", "\n", "v", "[", "1002", ",", "8", "]", "=", "13", "\n", "v", "[", "1003", ",", "8", "]", "=", "219", "\n", "v", "[", "1004", ",", "8", "]", "=", "439", "\n", "v", "[", "1005", ",", "8", "]", "=", "45", "\n", "v", "[", "1006", ",", "8", "]", "=", "35", "\n", "v", "[", "1007", ",", "8", "]", "=", "371", "\n", "v", "[", "1008", ",", "8", "]", "=", "441", "\n", "v", "[", "1009", ",", "8", "]", "=", "17", "\n", "v", "[", "1010", ",", "8", "]", "=", "267", "\n", "v", "[", "1011", ",", "8", "]", "=", "501", "\n", "v", "[", "1012", ",", "8", "]", "=", "53", "\n", "v", "[", "1013", ",", "8", "]", "=", "25", "\n", "v", "[", "1014", ",", "8", "]", "=", "333", "\n", "v", "[", "1015", ",", "8", "]", "=", "17", "\n", "v", "[", "1016", ",", "8", "]", "=", "201", "\n", "v", "[", "1017", ",", "8", "]", "=", "475", "\n", "v", "[", "1018", ",", "8", "]", "=", "257", "\n", "v", "[", "1019", ",", "8", "]", "=", "417", "\n", "v", "[", "1020", ",", "8", "]", "=", "345", "\n", "v", "[", "1021", ",", "8", "]", "=", "381", "\n", "v", "[", "1022", ",", "8", "]", "=", "377", "\n", "v", "[", "1023", ",", "8", "]", "=", "55", "\n", "v", "[", "1024", ",", "8", "]", "=", "403", "\n", "v", "[", "1025", ",", "8", "]", "=", "77", "\n", "v", "[", "1026", ",", "8", "]", "=", "389", "\n", "v", "[", "1027", ",", "8", "]", "=", "347", "\n", "v", "[", "1028", ",", "8", "]", "=", "363", "\n", "v", "[", "1029", ",", "8", "]", "=", "211", "\n", "v", "[", "1030", ",", "8", "]", "=", "413", "\n", "v", "[", "1031", ",", "8", "]", "=", "419", "\n", "v", "[", "1032", ",", "8", "]", "=", "5", "\n", "v", "[", "1033", ",", "8", "]", "=", "167", "\n", "v", "[", "1034", ",", "8", "]", "=", "219", "\n", "v", "[", "1035", ",", "8", "]", "=", "201", "\n", "v", "[", "1036", ",", "8", "]", "=", "285", "\n", "v", "[", "1037", ",", "8", "]", "=", "425", "\n", "v", "[", "1038", ",", "8", "]", "=", "11", "\n", "v", "[", "1039", ",", "8", "]", "=", "77", "\n", "v", "[", "1040", ",", "8", "]", "=", "269", "\n", "v", "[", "1041", ",", "8", "]", "=", "489", "\n", "v", "[", "1042", ",", "8", "]", "=", "281", "\n", "v", "[", "1043", ",", "8", "]", "=", "403", "\n", "v", "[", "1044", ",", "8", "]", "=", "79", "\n", "v", "[", "1045", ",", "8", "]", "=", "425", "\n", "v", "[", "1046", ",", "8", "]", "=", "125", "\n", "v", "[", "1047", ",", "8", "]", "=", "81", "\n", "v", "[", "1048", ",", "8", "]", "=", "331", "\n", "v", "[", "1049", ",", "8", "]", "=", "437", "\n", "v", "[", "1050", ",", "8", "]", "=", "271", "\n", "v", "[", "1051", ",", "8", "]", "=", "397", "\n", "v", "[", "1052", ",", "8", "]", "=", "299", "\n", "v", "[", "1053", ",", "8", "]", "=", "475", "\n", "v", "[", "1054", ",", "8", "]", "=", "271", "\n", "v", "[", "1055", ",", "8", "]", "=", "249", "\n", "v", "[", "1056", ",", "8", "]", "=", "413", "\n", "v", "[", "1057", ",", "8", "]", "=", "233", "\n", "v", "[", "1058", ",", "8", "]", "=", "261", "\n", "v", "[", "1059", ",", "8", "]", "=", "495", "\n", "v", "[", "1060", ",", "8", "]", "=", "171", "\n", "v", "[", "1061", ",", "8", "]", "=", "69", "\n", "v", "[", "1062", ",", "8", "]", "=", "27", "\n", "v", "[", "1063", ",", "8", "]", "=", "409", "\n", "v", "[", "1064", ",", "8", "]", "=", "21", "\n", "v", "[", "1065", ",", "8", "]", "=", "421", "\n", "v", "[", "1066", ",", "8", "]", "=", "367", "\n", "v", "[", "1067", ",", "8", "]", "=", "81", "\n", "v", "[", "1068", ",", "8", "]", "=", "483", "\n", "v", "[", "1069", ",", "8", "]", "=", "255", "\n", "v", "[", "1070", ",", "8", "]", "=", "15", "\n", "v", "[", "1071", ",", "8", "]", "=", "219", "\n", "v", "[", "1072", ",", "8", "]", "=", "365", "\n", "v", "[", "1073", ",", "8", "]", "=", "497", "\n", "v", "[", "1074", ",", "8", "]", "=", "181", "\n", "v", "[", "1075", ",", "8", "]", "=", "75", "\n", "v", "[", "1076", ",", "8", "]", "=", "431", "\n", "v", "[", "1077", ",", "8", "]", "=", "99", "\n", "v", "[", "1078", ",", "8", "]", "=", "325", "\n", "v", "[", "1079", ",", "8", "]", "=", "407", "\n", "v", "[", "1080", ",", "8", "]", "=", "229", "\n", "v", "[", "1081", ",", "8", "]", "=", "281", "\n", "v", "[", "1082", ",", "8", "]", "=", "63", "\n", "v", "[", "1083", ",", "8", "]", "=", "83", "\n", "v", "[", "1084", ",", "8", "]", "=", "493", "\n", "v", "[", "1085", ",", "8", "]", "=", "5", "\n", "v", "[", "1086", ",", "8", "]", "=", "113", "\n", "v", "[", "1087", ",", "8", "]", "=", "15", "\n", "v", "[", "1088", ",", "8", "]", "=", "271", "\n", "v", "[", "1089", ",", "8", "]", "=", "37", "\n", "v", "[", "1090", ",", "8", "]", "=", "87", "\n", "v", "[", "1091", ",", "8", "]", "=", "451", "\n", "v", "[", "1092", ",", "8", "]", "=", "299", "\n", "v", "[", "1093", ",", "8", "]", "=", "83", "\n", "v", "[", "1094", ",", "8", "]", "=", "451", "\n", "v", "[", "1095", ",", "8", "]", "=", "311", "\n", "v", "[", "1096", ",", "8", "]", "=", "441", "\n", "v", "[", "1097", ",", "8", "]", "=", "47", "\n", "v", "[", "1098", ",", "8", "]", "=", "455", "\n", "v", "[", "1099", ",", "8", "]", "=", "47", "\n", "v", "[", "1100", ",", "8", "]", "=", "253", "\n", "v", "[", "1101", ",", "8", "]", "=", "13", "\n", "v", "[", "1102", ",", "8", "]", "=", "109", "\n", "v", "[", "1103", ",", "8", "]", "=", "369", "\n", "v", "[", "1104", ",", "8", "]", "=", "347", "\n", "v", "[", "1105", ",", "8", "]", "=", "11", "\n", "v", "[", "1106", ",", "8", "]", "=", "409", "\n", "v", "[", "1107", ",", "8", "]", "=", "275", "\n", "v", "[", "1108", ",", "8", "]", "=", "63", "\n", "v", "[", "1109", ",", "8", "]", "=", "441", "\n", "v", "[", "1110", ",", "8", "]", "=", "15", "\n", "\n", "v", "[", "101", ",", "9", "]", "=", "519", "\n", "v", "[", "102", ",", "9", "]", "=", "307", "\n", "v", "[", "103", ",", "9", "]", "=", "931", "\n", "v", "[", "104", ",", "9", "]", "=", "1023", "\n", "v", "[", "105", ",", "9", "]", "=", "517", "\n", "v", "[", "106", ",", "9", "]", "=", "771", "\n", "v", "[", "107", ",", "9", "]", "=", "151", "\n", "v", "[", "108", ",", "9", "]", "=", "1023", "\n", "v", "[", "109", ",", "9", "]", "=", "539", "\n", "v", "[", "110", ",", "9", "]", "=", "725", "\n", "v", "[", "111", ",", "9", "]", "=", "45", "\n", "v", "[", "112", ",", "9", "]", "=", "927", "\n", "v", "[", "113", ",", "9", "]", "=", "707", "\n", "v", "[", "114", ",", "9", "]", "=", "29", "\n", "v", "[", "115", ",", "9", "]", "=", "125", "\n", "v", "[", "116", ",", "9", "]", "=", "371", "\n", "v", "[", "117", ",", "9", "]", "=", "275", "\n", "v", "[", "118", ",", "9", "]", "=", "279", "\n", "v", "[", "119", ",", "9", "]", "=", "817", "\n", "v", "[", "120", ",", "9", "]", "=", "389", "\n", "v", "[", "121", ",", "9", "]", "=", "453", "\n", "v", "[", "122", ",", "9", "]", "=", "989", "\n", "v", "[", "123", ",", "9", "]", "=", "1015", "\n", "v", "[", "124", ",", "9", "]", "=", "29", "\n", "v", "[", "125", ",", "9", "]", "=", "169", "\n", "v", "[", "126", ",", "9", "]", "=", "743", "\n", "v", "[", "127", ",", "9", "]", "=", "99", "\n", "v", "[", "128", ",", "9", "]", "=", "923", "\n", "v", "[", "129", ",", "9", "]", "=", "981", "\n", "v", "[", "130", ",", "9", "]", "=", "181", "\n", "v", "[", "131", ",", "9", "]", "=", "693", "\n", "v", "[", "132", ",", "9", "]", "=", "309", "\n", "v", "[", "133", ",", "9", "]", "=", "227", "\n", "v", "[", "134", ",", "9", "]", "=", "111", "\n", "v", "[", "135", ",", "9", "]", "=", "219", "\n", "v", "[", "136", ",", "9", "]", "=", "897", "\n", "v", "[", "137", ",", "9", "]", "=", "377", "\n", "v", "[", "138", ",", "9", "]", "=", "425", "\n", "v", "[", "139", ",", "9", "]", "=", "609", "\n", "v", "[", "140", ",", "9", "]", "=", "227", "\n", "v", "[", "141", ",", "9", "]", "=", "19", "\n", "v", "[", "142", ",", "9", "]", "=", "221", "\n", "v", "[", "143", ",", "9", "]", "=", "143", "\n", "v", "[", "144", ",", "9", "]", "=", "581", "\n", "v", "[", "145", ",", "9", "]", "=", "147", "\n", "v", "[", "146", ",", "9", "]", "=", "919", "\n", "v", "[", "147", ",", "9", "]", "=", "127", "\n", "v", "[", "148", ",", "9", "]", "=", "725", "\n", "v", "[", "149", ",", "9", "]", "=", "793", "\n", "v", "[", "150", ",", "9", "]", "=", "289", "\n", "v", "[", "151", ",", "9", "]", "=", "411", "\n", "v", "[", "152", ",", "9", "]", "=", "835", "\n", "v", "[", "153", ",", "9", "]", "=", "921", "\n", "v", "[", "154", ",", "9", "]", "=", "957", "\n", "v", "[", "155", ",", "9", "]", "=", "443", "\n", "v", "[", "156", ",", "9", "]", "=", "349", "\n", "v", "[", "157", ",", "9", "]", "=", "813", "\n", "v", "[", "158", ",", "9", "]", "=", "5", "\n", "v", "[", "159", ",", "9", "]", "=", "105", "\n", "v", "[", "160", ",", "9", "]", "=", "457", "\n", "v", "[", "161", ",", "9", "]", "=", "393", "\n", "v", "[", "162", ",", "9", "]", "=", "539", "\n", "v", "[", "163", ",", "9", "]", "=", "101", "\n", "v", "[", "164", ",", "9", "]", "=", "197", "\n", "v", "[", "165", ",", "9", "]", "=", "697", "\n", "v", "[", "166", ",", "9", "]", "=", "27", "\n", "v", "[", "167", ",", "9", "]", "=", "343", "\n", "v", "[", "168", ",", "9", "]", "=", "515", "\n", "v", "[", "169", ",", "9", "]", "=", "69", "\n", "v", "[", "170", ",", "9", "]", "=", "485", "\n", "v", "[", "171", ",", "9", "]", "=", "383", "\n", "v", "[", "172", ",", "9", "]", "=", "855", "\n", "v", "[", "173", ",", "9", "]", "=", "693", "\n", "v", "[", "174", ",", "9", "]", "=", "133", "\n", "v", "[", "175", ",", "9", "]", "=", "87", "\n", "v", "[", "176", ",", "9", "]", "=", "743", "\n", "v", "[", "177", ",", "9", "]", "=", "747", "\n", "v", "[", "178", ",", "9", "]", "=", "475", "\n", "v", "[", "179", ",", "9", "]", "=", "87", "\n", "v", "[", "180", ",", "9", "]", "=", "469", "\n", "v", "[", "181", ",", "9", "]", "=", "763", "\n", "v", "[", "182", ",", "9", "]", "=", "721", "\n", "v", "[", "183", ",", "9", "]", "=", "345", "\n", "v", "[", "184", ",", "9", "]", "=", "479", "\n", "v", "[", "185", ",", "9", "]", "=", "965", "\n", "v", "[", "186", ",", "9", "]", "=", "527", "\n", "v", "[", "187", ",", "9", "]", "=", "121", "\n", "v", "[", "188", ",", "9", "]", "=", "271", "\n", "v", "[", "189", ",", "9", "]", "=", "353", "\n", "v", "[", "190", ",", "9", "]", "=", "467", "\n", "v", "[", "191", ",", "9", "]", "=", "177", "\n", "v", "[", "192", ",", "9", "]", "=", "245", "\n", "v", "[", "193", ",", "9", "]", "=", "627", "\n", "v", "[", "194", ",", "9", "]", "=", "113", "\n", "v", "[", "195", ",", "9", "]", "=", "357", "\n", "v", "[", "196", ",", "9", "]", "=", "7", "\n", "v", "[", "197", ",", "9", "]", "=", "691", "\n", "v", "[", "198", ",", "9", "]", "=", "725", "\n", "v", "[", "199", ",", "9", "]", "=", "355", "\n", "v", "[", "200", ",", "9", "]", "=", "889", "\n", "v", "[", "201", ",", "9", "]", "=", "635", "\n", "v", "[", "202", ",", "9", "]", "=", "737", "\n", "v", "[", "203", ",", "9", "]", "=", "429", "\n", "v", "[", "204", ",", "9", "]", "=", "545", "\n", "v", "[", "205", ",", "9", "]", "=", "925", "\n", "v", "[", "206", ",", "9", "]", "=", "357", "\n", "v", "[", "207", ",", "9", "]", "=", "873", "\n", "v", "[", "208", ",", "9", "]", "=", "187", "\n", "v", "[", "209", ",", "9", "]", "=", "351", "\n", "v", "[", "210", ",", "9", "]", "=", "677", "\n", "v", "[", "211", ",", "9", "]", "=", "999", "\n", "v", "[", "212", ",", "9", "]", "=", "921", "\n", "v", "[", "213", ",", "9", "]", "=", "477", "\n", "v", "[", "214", ",", "9", "]", "=", "233", "\n", "v", "[", "215", ",", "9", "]", "=", "765", "\n", "v", "[", "216", ",", "9", "]", "=", "495", "\n", "v", "[", "217", ",", "9", "]", "=", "81", "\n", "v", "[", "218", ",", "9", "]", "=", "953", "\n", "v", "[", "219", ",", "9", "]", "=", "479", "\n", "v", "[", "220", ",", "9", "]", "=", "89", "\n", "v", "[", "221", ",", "9", "]", "=", "173", "\n", "v", "[", "222", ",", "9", "]", "=", "473", "\n", "v", "[", "223", ",", "9", "]", "=", "131", "\n", "v", "[", "224", ",", "9", "]", "=", "961", "\n", "v", "[", "225", ",", "9", "]", "=", "411", "\n", "v", "[", "226", ",", "9", "]", "=", "291", "\n", "v", "[", "227", ",", "9", "]", "=", "967", "\n", "v", "[", "228", ",", "9", "]", "=", "65", "\n", "v", "[", "229", ",", "9", "]", "=", "511", "\n", "v", "[", "230", ",", "9", "]", "=", "13", "\n", "v", "[", "231", ",", "9", "]", "=", "805", "\n", "v", "[", "232", ",", "9", "]", "=", "945", "\n", "v", "[", "233", ",", "9", "]", "=", "369", "\n", "v", "[", "234", ",", "9", "]", "=", "827", "\n", "v", "[", "235", ",", "9", "]", "=", "295", "\n", "v", "[", "236", ",", "9", "]", "=", "163", "\n", "v", "[", "237", ",", "9", "]", "=", "835", "\n", "v", "[", "238", ",", "9", "]", "=", "259", "\n", "v", "[", "239", ",", "9", "]", "=", "207", "\n", "v", "[", "240", ",", "9", "]", "=", "331", "\n", "v", "[", "241", ",", "9", "]", "=", "29", "\n", "v", "[", "242", ",", "9", "]", "=", "315", "\n", "v", "[", "243", ",", "9", "]", "=", "999", "\n", "v", "[", "244", ",", "9", "]", "=", "133", "\n", "v", "[", "245", ",", "9", "]", "=", "967", "\n", "v", "[", "246", ",", "9", "]", "=", "41", "\n", "v", "[", "247", ",", "9", "]", "=", "117", "\n", "v", "[", "248", ",", "9", "]", "=", "677", "\n", "v", "[", "249", ",", "9", "]", "=", "471", "\n", "v", "[", "250", ",", "9", "]", "=", "717", "\n", "v", "[", "251", ",", "9", "]", "=", "881", "\n", "v", "[", "252", ",", "9", "]", "=", "755", "\n", "v", "[", "253", ",", "9", "]", "=", "351", "\n", "v", "[", "254", ",", "9", "]", "=", "723", "\n", "v", "[", "255", ",", "9", "]", "=", "259", "\n", "v", "[", "256", ",", "9", "]", "=", "879", "\n", "v", "[", "257", ",", "9", "]", "=", "455", "\n", "v", "[", "258", ",", "9", "]", "=", "721", "\n", "v", "[", "259", ",", "9", "]", "=", "289", "\n", "v", "[", "260", ",", "9", "]", "=", "149", "\n", "v", "[", "261", ",", "9", "]", "=", "199", "\n", "v", "[", "262", ",", "9", "]", "=", "805", "\n", "v", "[", "263", ",", "9", "]", "=", "987", "\n", "v", "[", "264", ",", "9", "]", "=", "851", "\n", "v", "[", "265", ",", "9", "]", "=", "423", "\n", "v", "[", "266", ",", "9", "]", "=", "597", "\n", "v", "[", "267", ",", "9", "]", "=", "129", "\n", "v", "[", "268", ",", "9", "]", "=", "11", "\n", "v", "[", "269", ",", "9", "]", "=", "733", "\n", "v", "[", "270", ",", "9", "]", "=", "549", "\n", "v", "[", "271", ",", "9", "]", "=", "153", "\n", "v", "[", "272", ",", "9", "]", "=", "285", "\n", "v", "[", "273", ",", "9", "]", "=", "451", "\n", "v", "[", "274", ",", "9", "]", "=", "559", "\n", "v", "[", "275", ",", "9", "]", "=", "377", "\n", "v", "[", "276", ",", "9", "]", "=", "109", "\n", "v", "[", "277", ",", "9", "]", "=", "357", "\n", "v", "[", "278", ",", "9", "]", "=", "143", "\n", "v", "[", "279", ",", "9", "]", "=", "693", "\n", "v", "[", "280", ",", "9", "]", "=", "615", "\n", "v", "[", "281", ",", "9", "]", "=", "677", "\n", "v", "[", "282", ",", "9", "]", "=", "701", "\n", "v", "[", "283", ",", "9", "]", "=", "475", "\n", "v", "[", "284", ",", "9", "]", "=", "767", "\n", "v", "[", "285", ",", "9", "]", "=", "85", "\n", "v", "[", "286", ",", "9", "]", "=", "229", "\n", "v", "[", "287", ",", "9", "]", "=", "509", "\n", "v", "[", "288", ",", "9", "]", "=", "547", "\n", "v", "[", "289", ",", "9", "]", "=", "151", "\n", "v", "[", "290", ",", "9", "]", "=", "389", "\n", "v", "[", "291", ",", "9", "]", "=", "711", "\n", "v", "[", "292", ",", "9", "]", "=", "785", "\n", "v", "[", "293", ",", "9", "]", "=", "657", "\n", "v", "[", "294", ",", "9", "]", "=", "319", "\n", "v", "[", "295", ",", "9", "]", "=", "509", "\n", "v", "[", "296", ",", "9", "]", "=", "99", "\n", "v", "[", "297", ",", "9", "]", "=", "1007", "\n", "v", "[", "298", ",", "9", "]", "=", "775", "\n", "v", "[", "299", ",", "9", "]", "=", "359", "\n", "v", "[", "300", ",", "9", "]", "=", "697", "\n", "v", "[", "301", ",", "9", "]", "=", "677", "\n", "v", "[", "302", ",", "9", "]", "=", "85", "\n", "v", "[", "303", ",", "9", "]", "=", "497", "\n", "v", "[", "304", ",", "9", "]", "=", "105", "\n", "v", "[", "305", ",", "9", "]", "=", "615", "\n", "v", "[", "306", ",", "9", "]", "=", "891", "\n", "v", "[", "307", ",", "9", "]", "=", "71", "\n", "v", "[", "308", ",", "9", "]", "=", "449", "\n", "v", "[", "309", ",", "9", "]", "=", "835", "\n", "v", "[", "310", ",", "9", "]", "=", "609", "\n", "v", "[", "311", ",", "9", "]", "=", "377", "\n", "v", "[", "312", ",", "9", "]", "=", "693", "\n", "v", "[", "313", ",", "9", "]", "=", "665", "\n", "v", "[", "314", ",", "9", "]", "=", "627", "\n", "v", "[", "315", ",", "9", "]", "=", "215", "\n", "v", "[", "316", ",", "9", "]", "=", "911", "\n", "v", "[", "317", ",", "9", "]", "=", "503", "\n", "v", "[", "318", ",", "9", "]", "=", "729", "\n", "v", "[", "319", ",", "9", "]", "=", "131", "\n", "v", "[", "320", ",", "9", "]", "=", "19", "\n", "v", "[", "321", ",", "9", "]", "=", "895", "\n", "v", "[", "322", ",", "9", "]", "=", "199", "\n", "v", "[", "323", ",", "9", "]", "=", "161", "\n", "v", "[", "324", ",", "9", "]", "=", "239", "\n", "v", "[", "325", ",", "9", "]", "=", "633", "\n", "v", "[", "326", ",", "9", "]", "=", "1013", "\n", "v", "[", "327", ",", "9", "]", "=", "537", "\n", "v", "[", "328", ",", "9", "]", "=", "255", "\n", "v", "[", "329", ",", "9", "]", "=", "23", "\n", "v", "[", "330", ",", "9", "]", "=", "149", "\n", "v", "[", "331", ",", "9", "]", "=", "679", "\n", "v", "[", "332", ",", "9", "]", "=", "1021", "\n", "v", "[", "333", ",", "9", "]", "=", "595", "\n", "v", "[", "334", ",", "9", "]", "=", "199", "\n", "v", "[", "335", ",", "9", "]", "=", "557", "\n", "v", "[", "336", ",", "9", "]", "=", "659", "\n", "v", "[", "337", ",", "9", "]", "=", "251", "\n", "v", "[", "338", ",", "9", "]", "=", "829", "\n", "v", "[", "339", ",", "9", "]", "=", "727", "\n", "v", "[", "340", ",", "9", "]", "=", "439", "\n", "v", "[", "341", ",", "9", "]", "=", "495", "\n", "v", "[", "342", ",", "9", "]", "=", "647", "\n", "v", "[", "343", ",", "9", "]", "=", "223", "\n", "v", "[", "344", ",", "9", "]", "=", "949", "\n", "v", "[", "345", ",", "9", "]", "=", "625", "\n", "v", "[", "346", ",", "9", "]", "=", "87", "\n", "v", "[", "347", ",", "9", "]", "=", "481", "\n", "v", "[", "348", ",", "9", "]", "=", "85", "\n", "v", "[", "349", ",", "9", "]", "=", "799", "\n", "v", "[", "350", ",", "9", "]", "=", "917", "\n", "v", "[", "351", ",", "9", "]", "=", "769", "\n", "v", "[", "352", ",", "9", "]", "=", "949", "\n", "v", "[", "353", ",", "9", "]", "=", "739", "\n", "v", "[", "354", ",", "9", "]", "=", "115", "\n", "v", "[", "355", ",", "9", "]", "=", "499", "\n", "v", "[", "356", ",", "9", "]", "=", "945", "\n", "v", "[", "357", ",", "9", "]", "=", "547", "\n", "v", "[", "358", ",", "9", "]", "=", "225", "\n", "v", "[", "359", ",", "9", "]", "=", "1015", "\n", "v", "[", "360", ",", "9", "]", "=", "469", "\n", "v", "[", "361", ",", "9", "]", "=", "737", "\n", "v", "[", "362", ",", "9", "]", "=", "495", "\n", "v", "[", "363", ",", "9", "]", "=", "353", "\n", "v", "[", "364", ",", "9", "]", "=", "103", "\n", "v", "[", "365", ",", "9", "]", "=", "17", "\n", "v", "[", "366", ",", "9", "]", "=", "665", "\n", "v", "[", "367", ",", "9", "]", "=", "639", "\n", "v", "[", "368", ",", "9", "]", "=", "525", "\n", "v", "[", "369", ",", "9", "]", "=", "75", "\n", "v", "[", "370", ",", "9", "]", "=", "447", "\n", "v", "[", "371", ",", "9", "]", "=", "185", "\n", "v", "[", "372", ",", "9", "]", "=", "43", "\n", "v", "[", "373", ",", "9", "]", "=", "729", "\n", "v", "[", "374", ",", "9", "]", "=", "577", "\n", "v", "[", "375", ",", "9", "]", "=", "863", "\n", "v", "[", "376", ",", "9", "]", "=", "735", "\n", "v", "[", "377", ",", "9", "]", "=", "317", "\n", "v", "[", "378", ",", "9", "]", "=", "99", "\n", "v", "[", "379", ",", "9", "]", "=", "17", "\n", "v", "[", "380", ",", "9", "]", "=", "477", "\n", "v", "[", "381", ",", "9", "]", "=", "893", "\n", "v", "[", "382", ",", "9", "]", "=", "537", "\n", "v", "[", "383", ",", "9", "]", "=", "519", "\n", "v", "[", "384", ",", "9", "]", "=", "1017", "\n", "v", "[", "385", ",", "9", "]", "=", "375", "\n", "v", "[", "386", ",", "9", "]", "=", "297", "\n", "v", "[", "387", ",", "9", "]", "=", "325", "\n", "v", "[", "388", ",", "9", "]", "=", "999", "\n", "v", "[", "389", ",", "9", "]", "=", "353", "\n", "v", "[", "390", ",", "9", "]", "=", "343", "\n", "v", "[", "391", ",", "9", "]", "=", "729", "\n", "v", "[", "392", ",", "9", "]", "=", "135", "\n", "v", "[", "393", ",", "9", "]", "=", "489", "\n", "v", "[", "394", ",", "9", "]", "=", "859", "\n", "v", "[", "395", ",", "9", "]", "=", "267", "\n", "v", "[", "396", ",", "9", "]", "=", "141", "\n", "v", "[", "397", ",", "9", "]", "=", "831", "\n", "v", "[", "398", ",", "9", "]", "=", "141", "\n", "v", "[", "399", ",", "9", "]", "=", "893", "\n", "v", "[", "400", ",", "9", "]", "=", "249", "\n", "v", "[", "401", ",", "9", "]", "=", "807", "\n", "v", "[", "402", ",", "9", "]", "=", "53", "\n", "v", "[", "403", ",", "9", "]", "=", "613", "\n", "v", "[", "404", ",", "9", "]", "=", "131", "\n", "v", "[", "405", ",", "9", "]", "=", "547", "\n", "v", "[", "406", ",", "9", "]", "=", "977", "\n", "v", "[", "407", ",", "9", "]", "=", "131", "\n", "v", "[", "408", ",", "9", "]", "=", "999", "\n", "v", "[", "409", ",", "9", "]", "=", "175", "\n", "v", "[", "410", ",", "9", "]", "=", "31", "\n", "v", "[", "411", ",", "9", "]", "=", "341", "\n", "v", "[", "412", ",", "9", "]", "=", "739", "\n", "v", "[", "413", ",", "9", "]", "=", "467", "\n", "v", "[", "414", ",", "9", "]", "=", "675", "\n", "v", "[", "415", ",", "9", "]", "=", "241", "\n", "v", "[", "416", ",", "9", "]", "=", "645", "\n", "v", "[", "417", ",", "9", "]", "=", "247", "\n", "v", "[", "418", ",", "9", "]", "=", "391", "\n", "v", "[", "419", ",", "9", "]", "=", "583", "\n", "v", "[", "420", ",", "9", "]", "=", "183", "\n", "v", "[", "421", ",", "9", "]", "=", "973", "\n", "v", "[", "422", ",", "9", "]", "=", "433", "\n", "v", "[", "423", ",", "9", "]", "=", "367", "\n", "v", "[", "424", ",", "9", "]", "=", "131", "\n", "v", "[", "425", ",", "9", "]", "=", "467", "\n", "v", "[", "426", ",", "9", "]", "=", "571", "\n", "v", "[", "427", ",", "9", "]", "=", "309", "\n", "v", "[", "428", ",", "9", "]", "=", "385", "\n", "v", "[", "429", ",", "9", "]", "=", "977", "\n", "v", "[", "430", ",", "9", "]", "=", "111", "\n", "v", "[", "431", ",", "9", "]", "=", "917", "\n", "v", "[", "432", ",", "9", "]", "=", "935", "\n", "v", "[", "433", ",", "9", "]", "=", "473", "\n", "v", "[", "434", ",", "9", "]", "=", "345", "\n", "v", "[", "435", ",", "9", "]", "=", "411", "\n", "v", "[", "436", ",", "9", "]", "=", "313", "\n", "v", "[", "437", ",", "9", "]", "=", "97", "\n", "v", "[", "438", ",", "9", "]", "=", "149", "\n", "v", "[", "439", ",", "9", "]", "=", "959", "\n", "v", "[", "440", ",", "9", "]", "=", "841", "\n", "v", "[", "441", ",", "9", "]", "=", "839", "\n", "v", "[", "442", ",", "9", "]", "=", "669", "\n", "v", "[", "443", ",", "9", "]", "=", "431", "\n", "v", "[", "444", ",", "9", "]", "=", "51", "\n", "v", "[", "445", ",", "9", "]", "=", "41", "\n", "v", "[", "446", ",", "9", "]", "=", "301", "\n", "v", "[", "447", ",", "9", "]", "=", "247", "\n", "v", "[", "448", ",", "9", "]", "=", "1015", "\n", "v", "[", "449", ",", "9", "]", "=", "377", "\n", "v", "[", "450", ",", "9", "]", "=", "329", "\n", "v", "[", "451", ",", "9", "]", "=", "945", "\n", "v", "[", "452", ",", "9", "]", "=", "269", "\n", "v", "[", "453", ",", "9", "]", "=", "67", "\n", "v", "[", "454", ",", "9", "]", "=", "979", "\n", "v", "[", "455", ",", "9", "]", "=", "581", "\n", "v", "[", "456", ",", "9", "]", "=", "643", "\n", "v", "[", "457", ",", "9", "]", "=", "823", "\n", "v", "[", "458", ",", "9", "]", "=", "557", "\n", "v", "[", "459", ",", "9", "]", "=", "91", "\n", "v", "[", "460", ",", "9", "]", "=", "405", "\n", "v", "[", "461", ",", "9", "]", "=", "117", "\n", "v", "[", "462", ",", "9", "]", "=", "801", "\n", "v", "[", "463", ",", "9", "]", "=", "509", "\n", "v", "[", "464", ",", "9", "]", "=", "347", "\n", "v", "[", "465", ",", "9", "]", "=", "893", "\n", "v", "[", "466", ",", "9", "]", "=", "303", "\n", "v", "[", "467", ",", "9", "]", "=", "227", "\n", "v", "[", "468", ",", "9", "]", "=", "783", "\n", "v", "[", "469", ",", "9", "]", "=", "555", "\n", "v", "[", "470", ",", "9", "]", "=", "867", "\n", "v", "[", "471", ",", "9", "]", "=", "99", "\n", "v", "[", "472", ",", "9", "]", "=", "703", "\n", "v", "[", "473", ",", "9", "]", "=", "111", "\n", "v", "[", "474", ",", "9", "]", "=", "797", "\n", "v", "[", "475", ",", "9", "]", "=", "873", "\n", "v", "[", "476", ",", "9", "]", "=", "541", "\n", "v", "[", "477", ",", "9", "]", "=", "919", "\n", "v", "[", "478", ",", "9", "]", "=", "513", "\n", "v", "[", "479", ",", "9", "]", "=", "343", "\n", "v", "[", "480", ",", "9", "]", "=", "319", "\n", "v", "[", "481", ",", "9", "]", "=", "517", "\n", "v", "[", "482", ",", "9", "]", "=", "135", "\n", "v", "[", "483", ",", "9", "]", "=", "871", "\n", "v", "[", "484", ",", "9", "]", "=", "917", "\n", "v", "[", "485", ",", "9", "]", "=", "285", "\n", "v", "[", "486", ",", "9", "]", "=", "663", "\n", "v", "[", "487", ",", "9", "]", "=", "301", "\n", "v", "[", "488", ",", "9", "]", "=", "15", "\n", "v", "[", "489", ",", "9", "]", "=", "763", "\n", "v", "[", "490", ",", "9", "]", "=", "89", "\n", "v", "[", "491", ",", "9", "]", "=", "323", "\n", "v", "[", "492", ",", "9", "]", "=", "757", "\n", "v", "[", "493", ",", "9", "]", "=", "317", "\n", "v", "[", "494", ",", "9", "]", "=", "807", "\n", "v", "[", "495", ",", "9", "]", "=", "309", "\n", "v", "[", "496", ",", "9", "]", "=", "1013", "\n", "v", "[", "497", ",", "9", "]", "=", "345", "\n", "v", "[", "498", ",", "9", "]", "=", "499", "\n", "v", "[", "499", ",", "9", "]", "=", "279", "\n", "v", "[", "500", ",", "9", "]", "=", "711", "\n", "v", "[", "501", ",", "9", "]", "=", "915", "\n", "v", "[", "502", ",", "9", "]", "=", "411", "\n", "v", "[", "503", ",", "9", "]", "=", "281", "\n", "v", "[", "504", ",", "9", "]", "=", "193", "\n", "v", "[", "505", ",", "9", "]", "=", "739", "\n", "v", "[", "506", ",", "9", "]", "=", "365", "\n", "v", "[", "507", ",", "9", "]", "=", "315", "\n", "v", "[", "508", ",", "9", "]", "=", "375", "\n", "v", "[", "509", ",", "9", "]", "=", "809", "\n", "v", "[", "510", ",", "9", "]", "=", "469", "\n", "v", "[", "511", ",", "9", "]", "=", "487", "\n", "v", "[", "512", ",", "9", "]", "=", "621", "\n", "v", "[", "513", ",", "9", "]", "=", "857", "\n", "v", "[", "514", ",", "9", "]", "=", "975", "\n", "v", "[", "515", ",", "9", "]", "=", "537", "\n", "v", "[", "516", ",", "9", "]", "=", "939", "\n", "v", "[", "517", ",", "9", "]", "=", "585", "\n", "v", "[", "518", ",", "9", "]", "=", "129", "\n", "v", "[", "519", ",", "9", "]", "=", "625", "\n", "v", "[", "520", ",", "9", "]", "=", "447", "\n", "v", "[", "521", ",", "9", "]", "=", "129", "\n", "v", "[", "522", ",", "9", "]", "=", "1017", "\n", "v", "[", "523", ",", "9", "]", "=", "133", "\n", "v", "[", "524", ",", "9", "]", "=", "83", "\n", "v", "[", "525", ",", "9", "]", "=", "3", "\n", "v", "[", "526", ",", "9", "]", "=", "415", "\n", "v", "[", "527", ",", "9", "]", "=", "661", "\n", "v", "[", "528", ",", "9", "]", "=", "53", "\n", "v", "[", "529", ",", "9", "]", "=", "115", "\n", "v", "[", "530", ",", "9", "]", "=", "903", "\n", "v", "[", "531", ",", "9", "]", "=", "49", "\n", "v", "[", "532", ",", "9", "]", "=", "79", "\n", "v", "[", "533", ",", "9", "]", "=", "55", "\n", "v", "[", "534", ",", "9", "]", "=", "385", "\n", "v", "[", "535", ",", "9", "]", "=", "261", "\n", "v", "[", "536", ",", "9", "]", "=", "345", "\n", "v", "[", "537", ",", "9", "]", "=", "297", "\n", "v", "[", "538", ",", "9", "]", "=", "199", "\n", "v", "[", "539", ",", "9", "]", "=", "385", "\n", "v", "[", "540", ",", "9", "]", "=", "617", "\n", "v", "[", "541", ",", "9", "]", "=", "25", "\n", "v", "[", "542", ",", "9", "]", "=", "515", "\n", "v", "[", "543", ",", "9", "]", "=", "275", "\n", "v", "[", "544", ",", "9", "]", "=", "849", "\n", "v", "[", "545", ",", "9", "]", "=", "401", "\n", "v", "[", "546", ",", "9", "]", "=", "471", "\n", "v", "[", "547", ",", "9", "]", "=", "377", "\n", "v", "[", "548", ",", "9", "]", "=", "661", "\n", "v", "[", "549", ",", "9", "]", "=", "535", "\n", "v", "[", "550", ",", "9", "]", "=", "505", "\n", "v", "[", "551", ",", "9", "]", "=", "939", "\n", "v", "[", "552", ",", "9", "]", "=", "465", "\n", "v", "[", "553", ",", "9", "]", "=", "225", "\n", "v", "[", "554", ",", "9", "]", "=", "929", "\n", "v", "[", "555", ",", "9", "]", "=", "219", "\n", "v", "[", "556", ",", "9", "]", "=", "955", "\n", "v", "[", "557", ",", "9", "]", "=", "659", "\n", "v", "[", "558", ",", "9", "]", "=", "441", "\n", "v", "[", "559", ",", "9", "]", "=", "117", "\n", "v", "[", "560", ",", "9", "]", "=", "527", "\n", "v", "[", "561", ",", "9", "]", "=", "427", "\n", "v", "[", "562", ",", "9", "]", "=", "515", "\n", "v", "[", "563", ",", "9", "]", "=", "287", "\n", "v", "[", "564", ",", "9", "]", "=", "191", "\n", "v", "[", "565", ",", "9", "]", "=", "33", "\n", "v", "[", "566", ",", "9", "]", "=", "389", "\n", "v", "[", "567", ",", "9", "]", "=", "197", "\n", "v", "[", "568", ",", "9", "]", "=", "825", "\n", "v", "[", "569", ",", "9", "]", "=", "63", "\n", "v", "[", "570", ",", "9", "]", "=", "417", "\n", "v", "[", "571", ",", "9", "]", "=", "949", "\n", "v", "[", "572", ",", "9", "]", "=", "35", "\n", "v", "[", "573", ",", "9", "]", "=", "571", "\n", "v", "[", "574", ",", "9", "]", "=", "9", "\n", "v", "[", "575", ",", "9", "]", "=", "131", "\n", "v", "[", "576", ",", "9", "]", "=", "609", "\n", "v", "[", "577", ",", "9", "]", "=", "439", "\n", "v", "[", "578", ",", "9", "]", "=", "95", "\n", "v", "[", "579", ",", "9", "]", "=", "19", "\n", "v", "[", "580", ",", "9", "]", "=", "569", "\n", "v", "[", "581", ",", "9", "]", "=", "893", "\n", "v", "[", "582", ",", "9", "]", "=", "451", "\n", "v", "[", "583", ",", "9", "]", "=", "397", "\n", "v", "[", "584", ",", "9", "]", "=", "971", "\n", "v", "[", "585", ",", "9", "]", "=", "801", "\n", "v", "[", "586", ",", "9", "]", "=", "125", "\n", "v", "[", "587", ",", "9", "]", "=", "471", "\n", "v", "[", "588", ",", "9", "]", "=", "187", "\n", "v", "[", "589", ",", "9", "]", "=", "257", "\n", "v", "[", "590", ",", "9", "]", "=", "67", "\n", "v", "[", "591", ",", "9", "]", "=", "949", "\n", "v", "[", "592", ",", "9", "]", "=", "621", "\n", "v", "[", "593", ",", "9", "]", "=", "453", "\n", "v", "[", "594", ",", "9", "]", "=", "411", "\n", "v", "[", "595", ",", "9", "]", "=", "621", "\n", "v", "[", "596", ",", "9", "]", "=", "955", "\n", "v", "[", "597", ",", "9", "]", "=", "309", "\n", "v", "[", "598", ",", "9", "]", "=", "783", "\n", "v", "[", "599", ",", "9", "]", "=", "893", "\n", "v", "[", "600", ",", "9", "]", "=", "597", "\n", "v", "[", "601", ",", "9", "]", "=", "377", "\n", "v", "[", "602", ",", "9", "]", "=", "753", "\n", "v", "[", "603", ",", "9", "]", "=", "145", "\n", "v", "[", "604", ",", "9", "]", "=", "637", "\n", "v", "[", "605", ",", "9", "]", "=", "941", "\n", "v", "[", "606", ",", "9", "]", "=", "593", "\n", "v", "[", "607", ",", "9", "]", "=", "317", "\n", "v", "[", "608", ",", "9", "]", "=", "555", "\n", "v", "[", "609", ",", "9", "]", "=", "375", "\n", "v", "[", "610", ",", "9", "]", "=", "575", "\n", "v", "[", "611", ",", "9", "]", "=", "175", "\n", "v", "[", "612", ",", "9", "]", "=", "403", "\n", "v", "[", "613", ",", "9", "]", "=", "571", "\n", "v", "[", "614", ",", "9", "]", "=", "555", "\n", "v", "[", "615", ",", "9", "]", "=", "109", "\n", "v", "[", "616", ",", "9", "]", "=", "377", "\n", "v", "[", "617", ",", "9", "]", "=", "931", "\n", "v", "[", "618", ",", "9", "]", "=", "499", "\n", "v", "[", "619", ",", "9", "]", "=", "649", "\n", "v", "[", "620", ",", "9", "]", "=", "653", "\n", "v", "[", "621", ",", "9", "]", "=", "329", "\n", "v", "[", "622", ",", "9", "]", "=", "279", "\n", "v", "[", "623", ",", "9", "]", "=", "271", "\n", "v", "[", "624", ",", "9", "]", "=", "647", "\n", "v", "[", "625", ",", "9", "]", "=", "721", "\n", "v", "[", "626", ",", "9", "]", "=", "665", "\n", "v", "[", "627", ",", "9", "]", "=", "429", "\n", "v", "[", "628", ",", "9", "]", "=", "957", "\n", "v", "[", "629", ",", "9", "]", "=", "803", "\n", "v", "[", "630", ",", "9", "]", "=", "767", "\n", "v", "[", "631", ",", "9", "]", "=", "425", "\n", "v", "[", "632", ",", "9", "]", "=", "477", "\n", "v", "[", "633", ",", "9", "]", "=", "995", "\n", "v", "[", "634", ",", "9", "]", "=", "105", "\n", "v", "[", "635", ",", "9", "]", "=", "495", "\n", "v", "[", "636", ",", "9", "]", "=", "575", "\n", "v", "[", "637", ",", "9", "]", "=", "687", "\n", "v", "[", "638", ",", "9", "]", "=", "385", "\n", "v", "[", "639", ",", "9", "]", "=", "227", "\n", "v", "[", "640", ",", "9", "]", "=", "923", "\n", "v", "[", "641", ",", "9", "]", "=", "563", "\n", "v", "[", "642", ",", "9", "]", "=", "723", "\n", "v", "[", "643", ",", "9", "]", "=", "481", "\n", "v", "[", "644", ",", "9", "]", "=", "717", "\n", "v", "[", "645", ",", "9", "]", "=", "111", "\n", "v", "[", "646", ",", "9", "]", "=", "633", "\n", "v", "[", "647", ",", "9", "]", "=", "113", "\n", "v", "[", "648", ",", "9", "]", "=", "369", "\n", "v", "[", "649", ",", "9", "]", "=", "955", "\n", "v", "[", "650", ",", "9", "]", "=", "253", "\n", "v", "[", "651", ",", "9", "]", "=", "321", "\n", "v", "[", "652", ",", "9", "]", "=", "409", "\n", "v", "[", "653", ",", "9", "]", "=", "909", "\n", "v", "[", "654", ",", "9", "]", "=", "367", "\n", "v", "[", "655", ",", "9", "]", "=", "33", "\n", "v", "[", "656", ",", "9", "]", "=", "967", "\n", "v", "[", "657", ",", "9", "]", "=", "453", "\n", "v", "[", "658", ",", "9", "]", "=", "863", "\n", "v", "[", "659", ",", "9", "]", "=", "449", "\n", "v", "[", "660", ",", "9", "]", "=", "539", "\n", "v", "[", "661", ",", "9", "]", "=", "781", "\n", "v", "[", "662", ",", "9", "]", "=", "911", "\n", "v", "[", "663", ",", "9", "]", "=", "113", "\n", "v", "[", "664", ",", "9", "]", "=", "7", "\n", "v", "[", "665", ",", "9", "]", "=", "219", "\n", "v", "[", "666", ",", "9", "]", "=", "725", "\n", "v", "[", "667", ",", "9", "]", "=", "1015", "\n", "v", "[", "668", ",", "9", "]", "=", "971", "\n", "v", "[", "669", ",", "9", "]", "=", "1021", "\n", "v", "[", "670", ",", "9", "]", "=", "525", "\n", "v", "[", "671", ",", "9", "]", "=", "785", "\n", "v", "[", "672", ",", "9", "]", "=", "873", "\n", "v", "[", "673", ",", "9", "]", "=", "191", "\n", "v", "[", "674", ",", "9", "]", "=", "893", "\n", "v", "[", "675", ",", "9", "]", "=", "297", "\n", "v", "[", "676", ",", "9", "]", "=", "507", "\n", "v", "[", "677", ",", "9", "]", "=", "215", "\n", "v", "[", "678", ",", "9", "]", "=", "21", "\n", "v", "[", "679", ",", "9", "]", "=", "153", "\n", "v", "[", "680", ",", "9", "]", "=", "645", "\n", "v", "[", "681", ",", "9", "]", "=", "913", "\n", "v", "[", "682", ",", "9", "]", "=", "755", "\n", "v", "[", "683", ",", "9", "]", "=", "371", "\n", "v", "[", "684", ",", "9", "]", "=", "881", "\n", "v", "[", "685", ",", "9", "]", "=", "113", "\n", "v", "[", "686", ",", "9", "]", "=", "903", "\n", "v", "[", "687", ",", "9", "]", "=", "225", "\n", "v", "[", "688", ",", "9", "]", "=", "49", "\n", "v", "[", "689", ",", "9", "]", "=", "587", "\n", "v", "[", "690", ",", "9", "]", "=", "201", "\n", "v", "[", "691", ",", "9", "]", "=", "927", "\n", "v", "[", "692", ",", "9", "]", "=", "429", "\n", "v", "[", "693", ",", "9", "]", "=", "599", "\n", "v", "[", "694", ",", "9", "]", "=", "513", "\n", "v", "[", "695", ",", "9", "]", "=", "97", "\n", "v", "[", "696", ",", "9", "]", "=", "319", "\n", "v", "[", "697", ",", "9", "]", "=", "331", "\n", "v", "[", "698", ",", "9", "]", "=", "833", "\n", "v", "[", "699", ",", "9", "]", "=", "325", "\n", "v", "[", "700", ",", "9", "]", "=", "887", "\n", "v", "[", "701", ",", "9", "]", "=", "139", "\n", "v", "[", "702", ",", "9", "]", "=", "927", "\n", "v", "[", "703", ",", "9", "]", "=", "399", "\n", "v", "[", "704", ",", "9", "]", "=", "163", "\n", "v", "[", "705", ",", "9", "]", "=", "307", "\n", "v", "[", "706", ",", "9", "]", "=", "803", "\n", "v", "[", "707", ",", "9", "]", "=", "169", "\n", "v", "[", "708", ",", "9", "]", "=", "1019", "\n", "v", "[", "709", ",", "9", "]", "=", "869", "\n", "v", "[", "710", ",", "9", "]", "=", "537", "\n", "v", "[", "711", ",", "9", "]", "=", "907", "\n", "v", "[", "712", ",", "9", "]", "=", "479", "\n", "v", "[", "713", ",", "9", "]", "=", "335", "\n", "v", "[", "714", ",", "9", "]", "=", "697", "\n", "v", "[", "715", ",", "9", "]", "=", "479", "\n", "v", "[", "716", ",", "9", "]", "=", "353", "\n", "v", "[", "717", ",", "9", "]", "=", "769", "\n", "v", "[", "718", ",", "9", "]", "=", "787", "\n", "v", "[", "719", ",", "9", "]", "=", "1023", "\n", "v", "[", "720", ",", "9", "]", "=", "855", "\n", "v", "[", "721", ",", "9", "]", "=", "493", "\n", "v", "[", "722", ",", "9", "]", "=", "883", "\n", "v", "[", "723", ",", "9", "]", "=", "521", "\n", "v", "[", "724", ",", "9", "]", "=", "735", "\n", "v", "[", "725", ",", "9", "]", "=", "297", "\n", "v", "[", "726", ",", "9", "]", "=", "1011", "\n", "v", "[", "727", ",", "9", "]", "=", "991", "\n", "v", "[", "728", ",", "9", "]", "=", "879", "\n", "v", "[", "729", ",", "9", "]", "=", "855", "\n", "v", "[", "730", ",", "9", "]", "=", "591", "\n", "v", "[", "731", ",", "9", "]", "=", "415", "\n", "v", "[", "732", ",", "9", "]", "=", "917", "\n", "v", "[", "733", ",", "9", "]", "=", "375", "\n", "v", "[", "734", ",", "9", "]", "=", "453", "\n", "v", "[", "735", ",", "9", "]", "=", "553", "\n", "v", "[", "736", ",", "9", "]", "=", "189", "\n", "v", "[", "737", ",", "9", "]", "=", "841", "\n", "v", "[", "738", ",", "9", "]", "=", "339", "\n", "v", "[", "739", ",", "9", "]", "=", "211", "\n", "v", "[", "740", ",", "9", "]", "=", "601", "\n", "v", "[", "741", ",", "9", "]", "=", "57", "\n", "v", "[", "742", ",", "9", "]", "=", "765", "\n", "v", "[", "743", ",", "9", "]", "=", "745", "\n", "v", "[", "744", ",", "9", "]", "=", "621", "\n", "v", "[", "745", ",", "9", "]", "=", "209", "\n", "v", "[", "746", ",", "9", "]", "=", "875", "\n", "v", "[", "747", ",", "9", "]", "=", "639", "\n", "v", "[", "748", ",", "9", "]", "=", "7", "\n", "v", "[", "749", ",", "9", "]", "=", "595", "\n", "v", "[", "750", ",", "9", "]", "=", "971", "\n", "v", "[", "751", ",", "9", "]", "=", "263", "\n", "v", "[", "752", ",", "9", "]", "=", "1009", "\n", "v", "[", "753", ",", "9", "]", "=", "201", "\n", "v", "[", "754", ",", "9", "]", "=", "23", "\n", "v", "[", "755", ",", "9", "]", "=", "77", "\n", "v", "[", "756", ",", "9", "]", "=", "621", "\n", "v", "[", "757", ",", "9", "]", "=", "33", "\n", "v", "[", "758", ",", "9", "]", "=", "535", "\n", "v", "[", "759", ",", "9", "]", "=", "963", "\n", "v", "[", "760", ",", "9", "]", "=", "661", "\n", "v", "[", "761", ",", "9", "]", "=", "523", "\n", "v", "[", "762", ",", "9", "]", "=", "263", "\n", "v", "[", "763", ",", "9", "]", "=", "917", "\n", "v", "[", "764", ",", "9", "]", "=", "103", "\n", "v", "[", "765", ",", "9", "]", "=", "623", "\n", "v", "[", "766", ",", "9", "]", "=", "231", "\n", "v", "[", "767", ",", "9", "]", "=", "47", "\n", "v", "[", "768", ",", "9", "]", "=", "301", "\n", "v", "[", "769", ",", "9", "]", "=", "549", "\n", "v", "[", "770", ",", "9", "]", "=", "337", "\n", "v", "[", "771", ",", "9", "]", "=", "675", "\n", "v", "[", "772", ",", "9", "]", "=", "189", "\n", "v", "[", "773", ",", "9", "]", "=", "357", "\n", "v", "[", "774", ",", "9", "]", "=", "1005", "\n", "v", "[", "775", ",", "9", "]", "=", "789", "\n", "v", "[", "776", ",", "9", "]", "=", "189", "\n", "v", "[", "777", ",", "9", "]", "=", "319", "\n", "v", "[", "778", ",", "9", "]", "=", "721", "\n", "v", "[", "779", ",", "9", "]", "=", "1005", "\n", "v", "[", "780", ",", "9", "]", "=", "525", "\n", "v", "[", "781", ",", "9", "]", "=", "675", "\n", "v", "[", "782", ",", "9", "]", "=", "539", "\n", "v", "[", "783", ",", "9", "]", "=", "191", "\n", "v", "[", "784", ",", "9", "]", "=", "813", "\n", "v", "[", "785", ",", "9", "]", "=", "917", "\n", "v", "[", "786", ",", "9", "]", "=", "51", "\n", "v", "[", "787", ",", "9", "]", "=", "167", "\n", "v", "[", "788", ",", "9", "]", "=", "415", "\n", "v", "[", "789", ",", "9", "]", "=", "579", "\n", "v", "[", "790", ",", "9", "]", "=", "755", "\n", "v", "[", "791", ",", "9", "]", "=", "605", "\n", "v", "[", "792", ",", "9", "]", "=", "721", "\n", "v", "[", "793", ",", "9", "]", "=", "837", "\n", "v", "[", "794", ",", "9", "]", "=", "529", "\n", "v", "[", "795", ",", "9", "]", "=", "31", "\n", "v", "[", "796", ",", "9", "]", "=", "327", "\n", "v", "[", "797", ",", "9", "]", "=", "799", "\n", "v", "[", "798", ",", "9", "]", "=", "961", "\n", "v", "[", "799", ",", "9", "]", "=", "279", "\n", "v", "[", "800", ",", "9", "]", "=", "409", "\n", "v", "[", "801", ",", "9", "]", "=", "847", "\n", "v", "[", "802", ",", "9", "]", "=", "649", "\n", "v", "[", "803", ",", "9", "]", "=", "241", "\n", "v", "[", "804", ",", "9", "]", "=", "285", "\n", "v", "[", "805", ",", "9", "]", "=", "545", "\n", "v", "[", "806", ",", "9", "]", "=", "407", "\n", "v", "[", "807", ",", "9", "]", "=", "161", "\n", "v", "[", "808", ",", "9", "]", "=", "591", "\n", "v", "[", "809", ",", "9", "]", "=", "73", "\n", "v", "[", "810", ",", "9", "]", "=", "313", "\n", "v", "[", "811", ",", "9", "]", "=", "811", "\n", "v", "[", "812", ",", "9", "]", "=", "17", "\n", "v", "[", "813", ",", "9", "]", "=", "663", "\n", "v", "[", "814", ",", "9", "]", "=", "269", "\n", "v", "[", "815", ",", "9", "]", "=", "261", "\n", "v", "[", "816", ",", "9", "]", "=", "37", "\n", "v", "[", "817", ",", "9", "]", "=", "783", "\n", "v", "[", "818", ",", "9", "]", "=", "127", "\n", "v", "[", "819", ",", "9", "]", "=", "917", "\n", "v", "[", "820", ",", "9", "]", "=", "231", "\n", "v", "[", "821", ",", "9", "]", "=", "577", "\n", "v", "[", "822", ",", "9", "]", "=", "975", "\n", "v", "[", "823", ",", "9", "]", "=", "793", "\n", "v", "[", "824", ",", "9", "]", "=", "921", "\n", "v", "[", "825", ",", "9", "]", "=", "343", "\n", "v", "[", "826", ",", "9", "]", "=", "751", "\n", "v", "[", "827", ",", "9", "]", "=", "139", "\n", "v", "[", "828", ",", "9", "]", "=", "221", "\n", "v", "[", "829", ",", "9", "]", "=", "79", "\n", "v", "[", "830", ",", "9", "]", "=", "817", "\n", "v", "[", "831", ",", "9", "]", "=", "393", "\n", "v", "[", "832", ",", "9", "]", "=", "545", "\n", "v", "[", "833", ",", "9", "]", "=", "11", "\n", "v", "[", "834", ",", "9", "]", "=", "781", "\n", "v", "[", "835", ",", "9", "]", "=", "71", "\n", "v", "[", "836", ",", "9", "]", "=", "1", "\n", "v", "[", "837", ",", "9", "]", "=", "699", "\n", "v", "[", "838", ",", "9", "]", "=", "767", "\n", "v", "[", "839", ",", "9", "]", "=", "917", "\n", "v", "[", "840", ",", "9", "]", "=", "9", "\n", "v", "[", "841", ",", "9", "]", "=", "107", "\n", "v", "[", "842", ",", "9", "]", "=", "341", "\n", "v", "[", "843", ",", "9", "]", "=", "587", "\n", "v", "[", "844", ",", "9", "]", "=", "903", "\n", "v", "[", "845", ",", "9", "]", "=", "965", "\n", "v", "[", "846", ",", "9", "]", "=", "599", "\n", "v", "[", "847", ",", "9", "]", "=", "507", "\n", "v", "[", "848", ",", "9", "]", "=", "843", "\n", "v", "[", "849", ",", "9", "]", "=", "739", "\n", "v", "[", "850", ",", "9", "]", "=", "579", "\n", "v", "[", "851", ",", "9", "]", "=", "397", "\n", "v", "[", "852", ",", "9", "]", "=", "397", "\n", "v", "[", "853", ",", "9", "]", "=", "325", "\n", "v", "[", "854", ",", "9", "]", "=", "775", "\n", "v", "[", "855", ",", "9", "]", "=", "565", "\n", "v", "[", "856", ",", "9", "]", "=", "925", "\n", "v", "[", "857", ",", "9", "]", "=", "75", "\n", "v", "[", "858", ",", "9", "]", "=", "55", "\n", "v", "[", "859", ",", "9", "]", "=", "979", "\n", "v", "[", "860", ",", "9", "]", "=", "931", "\n", "v", "[", "861", ",", "9", "]", "=", "93", "\n", "v", "[", "862", ",", "9", "]", "=", "957", "\n", "v", "[", "863", ",", "9", "]", "=", "857", "\n", "v", "[", "864", ",", "9", "]", "=", "753", "\n", "v", "[", "865", ",", "9", "]", "=", "965", "\n", "v", "[", "866", ",", "9", "]", "=", "795", "\n", "v", "[", "867", ",", "9", "]", "=", "67", "\n", "v", "[", "868", ",", "9", "]", "=", "5", "\n", "v", "[", "869", ",", "9", "]", "=", "87", "\n", "v", "[", "870", ",", "9", "]", "=", "909", "\n", "v", "[", "871", ",", "9", "]", "=", "97", "\n", "v", "[", "872", ",", "9", "]", "=", "995", "\n", "v", "[", "873", ",", "9", "]", "=", "271", "\n", "v", "[", "874", ",", "9", "]", "=", "875", "\n", "v", "[", "875", ",", "9", "]", "=", "671", "\n", "v", "[", "876", ",", "9", "]", "=", "613", "\n", "v", "[", "877", ",", "9", "]", "=", "33", "\n", "v", "[", "878", ",", "9", "]", "=", "351", "\n", "v", "[", "879", ",", "9", "]", "=", "69", "\n", "v", "[", "880", ",", "9", "]", "=", "811", "\n", "v", "[", "881", ",", "9", "]", "=", "669", "\n", "v", "[", "882", ",", "9", "]", "=", "729", "\n", "v", "[", "883", ",", "9", "]", "=", "401", "\n", "v", "[", "884", ",", "9", "]", "=", "647", "\n", "v", "[", "885", ",", "9", "]", "=", "241", "\n", "v", "[", "886", ",", "9", "]", "=", "435", "\n", "v", "[", "887", ",", "9", "]", "=", "447", "\n", "v", "[", "888", ",", "9", "]", "=", "721", "\n", "v", "[", "889", ",", "9", "]", "=", "271", "\n", "v", "[", "890", ",", "9", "]", "=", "745", "\n", "v", "[", "891", ",", "9", "]", "=", "53", "\n", "v", "[", "892", ",", "9", "]", "=", "775", "\n", "v", "[", "893", ",", "9", "]", "=", "99", "\n", "v", "[", "894", ",", "9", "]", "=", "343", "\n", "v", "[", "895", ",", "9", "]", "=", "451", "\n", "v", "[", "896", ",", "9", "]", "=", "427", "\n", "v", "[", "897", ",", "9", "]", "=", "593", "\n", "v", "[", "898", ",", "9", "]", "=", "339", "\n", "v", "[", "899", ",", "9", "]", "=", "845", "\n", "v", "[", "900", ",", "9", "]", "=", "243", "\n", "v", "[", "901", ",", "9", "]", "=", "345", "\n", "v", "[", "902", ",", "9", "]", "=", "17", "\n", "v", "[", "903", ",", "9", "]", "=", "573", "\n", "v", "[", "904", ",", "9", "]", "=", "421", "\n", "v", "[", "905", ",", "9", "]", "=", "517", "\n", "v", "[", "906", ",", "9", "]", "=", "971", "\n", "v", "[", "907", ",", "9", "]", "=", "499", "\n", "v", "[", "908", ",", "9", "]", "=", "435", "\n", "v", "[", "909", ",", "9", "]", "=", "769", "\n", "v", "[", "910", ",", "9", "]", "=", "75", "\n", "v", "[", "911", ",", "9", "]", "=", "203", "\n", "v", "[", "912", ",", "9", "]", "=", "793", "\n", "v", "[", "913", ",", "9", "]", "=", "985", "\n", "v", "[", "914", ",", "9", "]", "=", "343", "\n", "v", "[", "915", ",", "9", "]", "=", "955", "\n", "v", "[", "916", ",", "9", "]", "=", "735", "\n", "v", "[", "917", ",", "9", "]", "=", "523", "\n", "v", "[", "918", ",", "9", "]", "=", "659", "\n", "v", "[", "919", ",", "9", "]", "=", "703", "\n", "v", "[", "920", ",", "9", "]", "=", "303", "\n", "v", "[", "921", ",", "9", "]", "=", "421", "\n", "v", "[", "922", ",", "9", "]", "=", "951", "\n", "v", "[", "923", ",", "9", "]", "=", "405", "\n", "v", "[", "924", ",", "9", "]", "=", "631", "\n", "v", "[", "925", ",", "9", "]", "=", "825", "\n", "v", "[", "926", ",", "9", "]", "=", "735", "\n", "v", "[", "927", ",", "9", "]", "=", "433", "\n", "v", "[", "928", ",", "9", "]", "=", "841", "\n", "v", "[", "929", ",", "9", "]", "=", "485", "\n", "v", "[", "930", ",", "9", "]", "=", "49", "\n", "v", "[", "931", ",", "9", "]", "=", "749", "\n", "v", "[", "932", ",", "9", "]", "=", "107", "\n", "v", "[", "933", ",", "9", "]", "=", "669", "\n", "v", "[", "934", ",", "9", "]", "=", "211", "\n", "v", "[", "935", ",", "9", "]", "=", "497", "\n", "v", "[", "936", ",", "9", "]", "=", "143", "\n", "v", "[", "937", ",", "9", "]", "=", "99", "\n", "v", "[", "938", ",", "9", "]", "=", "57", "\n", "v", "[", "939", ",", "9", "]", "=", "277", "\n", "v", "[", "940", ",", "9", "]", "=", "969", "\n", "v", "[", "941", ",", "9", "]", "=", "107", "\n", "v", "[", "942", ",", "9", "]", "=", "397", "\n", "v", "[", "943", ",", "9", "]", "=", "563", "\n", "v", "[", "944", ",", "9", "]", "=", "551", "\n", "v", "[", "945", ",", "9", "]", "=", "447", "\n", "v", "[", "946", ",", "9", "]", "=", "381", "\n", "v", "[", "947", ",", "9", "]", "=", "187", "\n", "v", "[", "948", ",", "9", "]", "=", "57", "\n", "v", "[", "949", ",", "9", "]", "=", "405", "\n", "v", "[", "950", ",", "9", "]", "=", "731", "\n", "v", "[", "951", ",", "9", "]", "=", "769", "\n", "v", "[", "952", ",", "9", "]", "=", "923", "\n", "v", "[", "953", ",", "9", "]", "=", "955", "\n", "v", "[", "954", ",", "9", "]", "=", "915", "\n", "v", "[", "955", ",", "9", "]", "=", "737", "\n", "v", "[", "956", ",", "9", "]", "=", "595", "\n", "v", "[", "957", ",", "9", "]", "=", "341", "\n", "v", "[", "958", ",", "9", "]", "=", "253", "\n", "v", "[", "959", ",", "9", "]", "=", "823", "\n", "v", "[", "960", ",", "9", "]", "=", "197", "\n", "v", "[", "961", ",", "9", "]", "=", "321", "\n", "v", "[", "962", ",", "9", "]", "=", "315", "\n", "v", "[", "963", ",", "9", "]", "=", "181", "\n", "v", "[", "964", ",", "9", "]", "=", "885", "\n", "v", "[", "965", ",", "9", "]", "=", "497", "\n", "v", "[", "966", ",", "9", "]", "=", "159", "\n", "v", "[", "967", ",", "9", "]", "=", "571", "\n", "v", "[", "968", ",", "9", "]", "=", "981", "\n", "v", "[", "969", ",", "9", "]", "=", "899", "\n", "v", "[", "970", ",", "9", "]", "=", "785", "\n", "v", "[", "971", ",", "9", "]", "=", "947", "\n", "v", "[", "972", ",", "9", "]", "=", "217", "\n", "v", "[", "973", ",", "9", "]", "=", "217", "\n", "v", "[", "974", ",", "9", "]", "=", "135", "\n", "v", "[", "975", ",", "9", "]", "=", "753", "\n", "v", "[", "976", ",", "9", "]", "=", "623", "\n", "v", "[", "977", ",", "9", "]", "=", "565", "\n", "v", "[", "978", ",", "9", "]", "=", "717", "\n", "v", "[", "979", ",", "9", "]", "=", "903", "\n", "v", "[", "980", ",", "9", "]", "=", "581", "\n", "v", "[", "981", ",", "9", "]", "=", "955", "\n", "v", "[", "982", ",", "9", "]", "=", "621", "\n", "v", "[", "983", ",", "9", "]", "=", "361", "\n", "v", "[", "984", ",", "9", "]", "=", "869", "\n", "v", "[", "985", ",", "9", "]", "=", "87", "\n", "v", "[", "986", ",", "9", "]", "=", "943", "\n", "v", "[", "987", ",", "9", "]", "=", "907", "\n", "v", "[", "988", ",", "9", "]", "=", "853", "\n", "v", "[", "989", ",", "9", "]", "=", "353", "\n", "v", "[", "990", ",", "9", "]", "=", "335", "\n", "v", "[", "991", ",", "9", "]", "=", "197", "\n", "v", "[", "992", ",", "9", "]", "=", "771", "\n", "v", "[", "993", ",", "9", "]", "=", "433", "\n", "v", "[", "994", ",", "9", "]", "=", "743", "\n", "v", "[", "995", ",", "9", "]", "=", "195", "\n", "v", "[", "996", ",", "9", "]", "=", "91", "\n", "v", "[", "997", ",", "9", "]", "=", "1023", "\n", "v", "[", "998", ",", "9", "]", "=", "63", "\n", "v", "[", "999", ",", "9", "]", "=", "301", "\n", "v", "[", "1000", ",", "9", "]", "=", "647", "\n", "v", "[", "1001", ",", "9", "]", "=", "205", "\n", "v", "[", "1002", ",", "9", "]", "=", "485", "\n", "v", "[", "1003", ",", "9", "]", "=", "927", "\n", "v", "[", "1004", ",", "9", "]", "=", "1003", "\n", "v", "[", "1005", ",", "9", "]", "=", "987", "\n", "v", "[", "1006", ",", "9", "]", "=", "359", "\n", "v", "[", "1007", ",", "9", "]", "=", "577", "\n", "v", "[", "1008", ",", "9", "]", "=", "147", "\n", "v", "[", "1009", ",", "9", "]", "=", "141", "\n", "v", "[", "1010", ",", "9", "]", "=", "1017", "\n", "v", "[", "1011", ",", "9", "]", "=", "701", "\n", "v", "[", "1012", ",", "9", "]", "=", "273", "\n", "v", "[", "1013", ",", "9", "]", "=", "89", "\n", "v", "[", "1014", ",", "9", "]", "=", "589", "\n", "v", "[", "1015", ",", "9", "]", "=", "487", "\n", "v", "[", "1016", ",", "9", "]", "=", "859", "\n", "v", "[", "1017", ",", "9", "]", "=", "343", "\n", "v", "[", "1018", ",", "9", "]", "=", "91", "\n", "v", "[", "1019", ",", "9", "]", "=", "847", "\n", "v", "[", "1020", ",", "9", "]", "=", "341", "\n", "v", "[", "1021", ",", "9", "]", "=", "173", "\n", "v", "[", "1022", ",", "9", "]", "=", "287", "\n", "v", "[", "1023", ",", "9", "]", "=", "1003", "\n", "v", "[", "1024", ",", "9", "]", "=", "289", "\n", "v", "[", "1025", ",", "9", "]", "=", "639", "\n", "v", "[", "1026", ",", "9", "]", "=", "983", "\n", "v", "[", "1027", ",", "9", "]", "=", "685", "\n", "v", "[", "1028", ",", "9", "]", "=", "697", "\n", "v", "[", "1029", ",", "9", "]", "=", "35", "\n", "v", "[", "1030", ",", "9", "]", "=", "701", "\n", "v", "[", "1031", ",", "9", "]", "=", "645", "\n", "v", "[", "1032", ",", "9", "]", "=", "911", "\n", "v", "[", "1033", ",", "9", "]", "=", "501", "\n", "v", "[", "1034", ",", "9", "]", "=", "705", "\n", "v", "[", "1035", ",", "9", "]", "=", "873", "\n", "v", "[", "1036", ",", "9", "]", "=", "763", "\n", "v", "[", "1037", ",", "9", "]", "=", "745", "\n", "v", "[", "1038", ",", "9", "]", "=", "657", "\n", "v", "[", "1039", ",", "9", "]", "=", "559", "\n", "v", "[", "1040", ",", "9", "]", "=", "699", "\n", "v", "[", "1041", ",", "9", "]", "=", "315", "\n", "v", "[", "1042", ",", "9", "]", "=", "347", "\n", "v", "[", "1043", ",", "9", "]", "=", "429", "\n", "v", "[", "1044", ",", "9", "]", "=", "197", "\n", "v", "[", "1045", ",", "9", "]", "=", "165", "\n", "v", "[", "1046", ",", "9", "]", "=", "955", "\n", "v", "[", "1047", ",", "9", "]", "=", "859", "\n", "v", "[", "1048", ",", "9", "]", "=", "167", "\n", "v", "[", "1049", ",", "9", "]", "=", "303", "\n", "v", "[", "1050", ",", "9", "]", "=", "833", "\n", "v", "[", "1051", ",", "9", "]", "=", "531", "\n", "v", "[", "1052", ",", "9", "]", "=", "473", "\n", "v", "[", "1053", ",", "9", "]", "=", "635", "\n", "v", "[", "1054", ",", "9", "]", "=", "641", "\n", "v", "[", "1055", ",", "9", "]", "=", "195", "\n", "v", "[", "1056", ",", "9", "]", "=", "589", "\n", "v", "[", "1057", ",", "9", "]", "=", "821", "\n", "v", "[", "1058", ",", "9", "]", "=", "205", "\n", "v", "[", "1059", ",", "9", "]", "=", "3", "\n", "v", "[", "1060", ",", "9", "]", "=", "635", "\n", "v", "[", "1061", ",", "9", "]", "=", "371", "\n", "v", "[", "1062", ",", "9", "]", "=", "891", "\n", "v", "[", "1063", ",", "9", "]", "=", "249", "\n", "v", "[", "1064", ",", "9", "]", "=", "123", "\n", "v", "[", "1065", ",", "9", "]", "=", "77", "\n", "v", "[", "1066", ",", "9", "]", "=", "623", "\n", "v", "[", "1067", ",", "9", "]", "=", "993", "\n", "v", "[", "1068", ",", "9", "]", "=", "401", "\n", "v", "[", "1069", ",", "9", "]", "=", "525", "\n", "v", "[", "1070", ",", "9", "]", "=", "427", "\n", "v", "[", "1071", ",", "9", "]", "=", "71", "\n", "v", "[", "1072", ",", "9", "]", "=", "655", "\n", "v", "[", "1073", ",", "9", "]", "=", "951", "\n", "v", "[", "1074", ",", "9", "]", "=", "357", "\n", "v", "[", "1075", ",", "9", "]", "=", "851", "\n", "v", "[", "1076", ",", "9", "]", "=", "899", "\n", "v", "[", "1077", ",", "9", "]", "=", "535", "\n", "v", "[", "1078", ",", "9", "]", "=", "493", "\n", "v", "[", "1079", ",", "9", "]", "=", "323", "\n", "v", "[", "1080", ",", "9", "]", "=", "1003", "\n", "v", "[", "1081", ",", "9", "]", "=", "343", "\n", "v", "[", "1082", ",", "9", "]", "=", "515", "\n", "v", "[", "1083", ",", "9", "]", "=", "859", "\n", "v", "[", "1084", ",", "9", "]", "=", "1017", "\n", "v", "[", "1085", ",", "9", "]", "=", "5", "\n", "v", "[", "1086", ",", "9", "]", "=", "423", "\n", "v", "[", "1087", ",", "9", "]", "=", "315", "\n", "v", "[", "1088", ",", "9", "]", "=", "1011", "\n", "v", "[", "1089", ",", "9", "]", "=", "703", "\n", "v", "[", "1090", ",", "9", "]", "=", "41", "\n", "v", "[", "1091", ",", "9", "]", "=", "777", "\n", "v", "[", "1092", ",", "9", "]", "=", "163", "\n", "v", "[", "1093", ",", "9", "]", "=", "95", "\n", "v", "[", "1094", ",", "9", "]", "=", "831", "\n", "v", "[", "1095", ",", "9", "]", "=", "79", "\n", "v", "[", "1096", ",", "9", "]", "=", "975", "\n", "v", "[", "1097", ",", "9", "]", "=", "235", "\n", "v", "[", "1098", ",", "9", "]", "=", "633", "\n", "v", "[", "1099", ",", "9", "]", "=", "723", "\n", "v", "[", "1100", ",", "9", "]", "=", "297", "\n", "v", "[", "1101", ",", "9", "]", "=", "589", "\n", "v", "[", "1102", ",", "9", "]", "=", "317", "\n", "v", "[", "1103", ",", "9", "]", "=", "679", "\n", "v", "[", "1104", ",", "9", "]", "=", "981", "\n", "v", "[", "1105", ",", "9", "]", "=", "195", "\n", "v", "[", "1106", ",", "9", "]", "=", "399", "\n", "v", "[", "1107", ",", "9", "]", "=", "1003", "\n", "v", "[", "1108", ",", "9", "]", "=", "121", "\n", "v", "[", "1109", ",", "9", "]", "=", "501", "\n", "v", "[", "1110", ",", "9", "]", "=", "155", "\n", "\n", "v", "[", "161", ",", "10", "]", "=", "7", "\n", "v", "[", "162", ",", "10", "]", "=", "2011", "\n", "v", "[", "163", ",", "10", "]", "=", "1001", "\n", "v", "[", "164", ",", "10", "]", "=", "49", "\n", "v", "[", "165", ",", "10", "]", "=", "825", "\n", "v", "[", "166", ",", "10", "]", "=", "415", "\n", "v", "[", "167", ",", "10", "]", "=", "1441", "\n", "v", "[", "168", ",", "10", "]", "=", "383", "\n", "v", "[", "169", ",", "10", "]", "=", "1581", "\n", "v", "[", "170", ",", "10", "]", "=", "623", "\n", "v", "[", "171", ",", "10", "]", "=", "1621", "\n", "v", "[", "172", ",", "10", "]", "=", "1319", "\n", "v", "[", "173", ",", "10", "]", "=", "1387", "\n", "v", "[", "174", ",", "10", "]", "=", "619", "\n", "v", "[", "175", ",", "10", "]", "=", "839", "\n", "v", "[", "176", ",", "10", "]", "=", "217", "\n", "v", "[", "177", ",", "10", "]", "=", "75", "\n", "v", "[", "178", ",", "10", "]", "=", "1955", "\n", "v", "[", "179", ",", "10", "]", "=", "505", "\n", "v", "[", "180", ",", "10", "]", "=", "281", "\n", "v", "[", "181", ",", "10", "]", "=", "1629", "\n", "v", "[", "182", ",", "10", "]", "=", "1379", "\n", "v", "[", "183", ",", "10", "]", "=", "53", "\n", "v", "[", "184", ",", "10", "]", "=", "1111", "\n", "v", "[", "185", ",", "10", "]", "=", "1399", "\n", "v", "[", "186", ",", "10", "]", "=", "301", "\n", "v", "[", "187", ",", "10", "]", "=", "209", "\n", "v", "[", "188", ",", "10", "]", "=", "49", "\n", "v", "[", "189", ",", "10", "]", "=", "155", "\n", "v", "[", "190", ",", "10", "]", "=", "1647", "\n", "v", "[", "191", ",", "10", "]", "=", "631", "\n", "v", "[", "192", ",", "10", "]", "=", "129", "\n", "v", "[", "193", ",", "10", "]", "=", "1569", "\n", "v", "[", "194", ",", "10", "]", "=", "335", "\n", "v", "[", "195", ",", "10", "]", "=", "67", "\n", "v", "[", "196", ",", "10", "]", "=", "1955", "\n", "v", "[", "197", ",", "10", "]", "=", "1611", "\n", "v", "[", "198", ",", "10", "]", "=", "2021", "\n", "v", "[", "199", ",", "10", "]", "=", "1305", "\n", "v", "[", "200", ",", "10", "]", "=", "121", "\n", "v", "[", "201", ",", "10", "]", "=", "37", "\n", "v", "[", "202", ",", "10", "]", "=", "877", "\n", "v", "[", "203", ",", "10", "]", "=", "835", "\n", "v", "[", "204", ",", "10", "]", "=", "1457", "\n", "v", "[", "205", ",", "10", "]", "=", "669", "\n", "v", "[", "206", ",", "10", "]", "=", "1405", "\n", "v", "[", "207", ",", "10", "]", "=", "935", "\n", "v", "[", "208", ",", "10", "]", "=", "1735", "\n", "v", "[", "209", ",", "10", "]", "=", "665", "\n", "v", "[", "210", ",", "10", "]", "=", "551", "\n", "v", "[", "211", ",", "10", "]", "=", "789", "\n", "v", "[", "212", ",", "10", "]", "=", "1543", "\n", "v", "[", "213", ",", "10", "]", "=", "1267", "\n", "v", "[", "214", ",", "10", "]", "=", "1027", "\n", "v", "[", "215", ",", "10", "]", "=", "1", "\n", "v", "[", "216", ",", "10", "]", "=", "1911", "\n", "v", "[", "217", ",", "10", "]", "=", "163", "\n", "v", "[", "218", ",", "10", "]", "=", "1929", "\n", "v", "[", "219", ",", "10", "]", "=", "67", "\n", "v", "[", "220", ",", "10", "]", "=", "1975", "\n", "v", "[", "221", ",", "10", "]", "=", "1681", "\n", "v", "[", "222", ",", "10", "]", "=", "1413", "\n", "v", "[", "223", ",", "10", "]", "=", "191", "\n", "v", "[", "224", ",", "10", "]", "=", "1711", "\n", "v", "[", "225", ",", "10", "]", "=", "1307", "\n", "v", "[", "226", ",", "10", "]", "=", "401", "\n", "v", "[", "227", ",", "10", "]", "=", "725", "\n", "v", "[", "228", ",", "10", "]", "=", "1229", "\n", "v", "[", "229", ",", "10", "]", "=", "1403", "\n", "v", "[", "230", ",", "10", "]", "=", "1609", "\n", "v", "[", "231", ",", "10", "]", "=", "2035", "\n", "v", "[", "232", ",", "10", "]", "=", "917", "\n", "v", "[", "233", ",", "10", "]", "=", "921", "\n", "v", "[", "234", ",", "10", "]", "=", "1789", "\n", "v", "[", "235", ",", "10", "]", "=", "41", "\n", "v", "[", "236", ",", "10", "]", "=", "2003", "\n", "v", "[", "237", ",", "10", "]", "=", "187", "\n", "v", "[", "238", ",", "10", "]", "=", "67", "\n", "v", "[", "239", ",", "10", "]", "=", "1635", "\n", "v", "[", "240", ",", "10", "]", "=", "717", "\n", "v", "[", "241", ",", "10", "]", "=", "1449", "\n", "v", "[", "242", ",", "10", "]", "=", "277", "\n", "v", "[", "243", ",", "10", "]", "=", "1903", "\n", "v", "[", "244", ",", "10", "]", "=", "1179", "\n", "v", "[", "245", ",", "10", "]", "=", "363", "\n", "v", "[", "246", ",", "10", "]", "=", "1211", "\n", "v", "[", "247", ",", "10", "]", "=", "1231", "\n", "v", "[", "248", ",", "10", "]", "=", "647", "\n", "v", "[", "249", ",", "10", "]", "=", "1261", "\n", "v", "[", "250", ",", "10", "]", "=", "1029", "\n", "v", "[", "251", ",", "10", "]", "=", "1485", "\n", "v", "[", "252", ",", "10", "]", "=", "1309", "\n", "v", "[", "253", ",", "10", "]", "=", "1149", "\n", "v", "[", "254", ",", "10", "]", "=", "317", "\n", "v", "[", "255", ",", "10", "]", "=", "1335", "\n", "v", "[", "256", ",", "10", "]", "=", "171", "\n", "v", "[", "257", ",", "10", "]", "=", "243", "\n", "v", "[", "258", ",", "10", "]", "=", "271", "\n", "v", "[", "259", ",", "10", "]", "=", "1055", "\n", "v", "[", "260", ",", "10", "]", "=", "1601", "\n", "v", "[", "261", ",", "10", "]", "=", "1129", "\n", "v", "[", "262", ",", "10", "]", "=", "1653", "\n", "v", "[", "263", ",", "10", "]", "=", "205", "\n", "v", "[", "264", ",", "10", "]", "=", "1463", "\n", "v", "[", "265", ",", "10", "]", "=", "1681", "\n", "v", "[", "266", ",", "10", "]", "=", "1621", "\n", "v", "[", "267", ",", "10", "]", "=", "197", "\n", "v", "[", "268", ",", "10", "]", "=", "951", "\n", "v", "[", "269", ",", "10", "]", "=", "573", "\n", "v", "[", "270", ",", "10", "]", "=", "1697", "\n", "v", "[", "271", ",", "10", "]", "=", "1265", "\n", "v", "[", "272", ",", "10", "]", "=", "1321", "\n", "v", "[", "273", ",", "10", "]", "=", "1805", "\n", "v", "[", "274", ",", "10", "]", "=", "1235", "\n", "v", "[", "275", ",", "10", "]", "=", "1853", "\n", "v", "[", "276", ",", "10", "]", "=", "1307", "\n", "v", "[", "277", ",", "10", "]", "=", "945", "\n", "v", "[", "278", ",", "10", "]", "=", "1197", "\n", "v", "[", "279", ",", "10", "]", "=", "1411", "\n", "v", "[", "280", ",", "10", "]", "=", "833", "\n", "v", "[", "281", ",", "10", "]", "=", "273", "\n", "v", "[", "282", ",", "10", "]", "=", "1517", "\n", "v", "[", "283", ",", "10", "]", "=", "1747", "\n", "v", "[", "284", ",", "10", "]", "=", "1095", "\n", "v", "[", "285", ",", "10", "]", "=", "1345", "\n", "v", "[", "286", ",", "10", "]", "=", "869", "\n", "v", "[", "287", ",", "10", "]", "=", "57", "\n", "v", "[", "288", ",", "10", "]", "=", "1383", "\n", "v", "[", "289", ",", "10", "]", "=", "221", "\n", "v", "[", "290", ",", "10", "]", "=", "1713", "\n", "v", "[", "291", ",", "10", "]", "=", "335", "\n", "v", "[", "292", ",", "10", "]", "=", "1751", "\n", "v", "[", "293", ",", "10", "]", "=", "1141", "\n", "v", "[", "294", ",", "10", "]", "=", "839", "\n", "v", "[", "295", ",", "10", "]", "=", "523", "\n", "v", "[", "296", ",", "10", "]", "=", "1861", "\n", "v", "[", "297", ",", "10", "]", "=", "1105", "\n", "v", "[", "298", ",", "10", "]", "=", "389", "\n", "v", "[", "299", ",", "10", "]", "=", "1177", "\n", "v", "[", "300", ",", "10", "]", "=", "1877", "\n", "v", "[", "301", ",", "10", "]", "=", "805", "\n", "v", "[", "302", ",", "10", "]", "=", "93", "\n", "v", "[", "303", ",", "10", "]", "=", "1591", "\n", "v", "[", "304", ",", "10", "]", "=", "423", "\n", "v", "[", "305", ",", "10", "]", "=", "1835", "\n", "v", "[", "306", ",", "10", "]", "=", "99", "\n", "v", "[", "307", ",", "10", "]", "=", "1781", "\n", "v", "[", "308", ",", "10", "]", "=", "1515", "\n", "v", "[", "309", ",", "10", "]", "=", "1909", "\n", "v", "[", "310", ",", "10", "]", "=", "1011", "\n", "v", "[", "311", ",", "10", "]", "=", "303", "\n", "v", "[", "312", ",", "10", "]", "=", "385", "\n", "v", "[", "313", ",", "10", "]", "=", "1635", "\n", "v", "[", "314", ",", "10", "]", "=", "357", "\n", "v", "[", "315", ",", "10", "]", "=", "973", "\n", "v", "[", "316", ",", "10", "]", "=", "1781", "\n", "v", "[", "317", ",", "10", "]", "=", "1707", "\n", "v", "[", "318", ",", "10", "]", "=", "1363", "\n", "v", "[", "319", ",", "10", "]", "=", "1053", "\n", "v", "[", "320", ",", "10", "]", "=", "649", "\n", "v", "[", "321", ",", "10", "]", "=", "1469", "\n", "v", "[", "322", ",", "10", "]", "=", "623", "\n", "v", "[", "323", ",", "10", "]", "=", "1429", "\n", "v", "[", "324", ",", "10", "]", "=", "1241", "\n", "v", "[", "325", ",", "10", "]", "=", "1151", "\n", "v", "[", "326", ",", "10", "]", "=", "1055", "\n", "v", "[", "327", ",", "10", "]", "=", "503", "\n", "v", "[", "328", ",", "10", "]", "=", "921", "\n", "v", "[", "329", ",", "10", "]", "=", "3", "\n", "v", "[", "330", ",", "10", "]", "=", "349", "\n", "v", "[", "331", ",", "10", "]", "=", "1149", "\n", "v", "[", "332", ",", "10", "]", "=", "293", "\n", "v", "[", "333", ",", "10", "]", "=", "45", "\n", "v", "[", "334", ",", "10", "]", "=", "303", "\n", "v", "[", "335", ",", "10", "]", "=", "877", "\n", "v", "[", "336", ",", "10", "]", "=", "1565", "\n", "v", "[", "337", ",", "10", "]", "=", "1583", "\n", "v", "[", "338", ",", "10", "]", "=", "1001", "\n", "v", "[", "339", ",", "10", "]", "=", "663", "\n", "v", "[", "340", ",", "10", "]", "=", "1535", "\n", "v", "[", "341", ",", "10", "]", "=", "395", "\n", "v", "[", "342", ",", "10", "]", "=", "1141", "\n", "v", "[", "343", ",", "10", "]", "=", "1481", "\n", "v", "[", "344", ",", "10", "]", "=", "1797", "\n", "v", "[", "345", ",", "10", "]", "=", "643", "\n", "v", "[", "346", ",", "10", "]", "=", "1507", "\n", "v", "[", "347", ",", "10", "]", "=", "465", "\n", "v", "[", "348", ",", "10", "]", "=", "2027", "\n", "v", "[", "349", ",", "10", "]", "=", "1695", "\n", "v", "[", "350", ",", "10", "]", "=", "367", "\n", "v", "[", "351", ",", "10", "]", "=", "937", "\n", "v", "[", "352", ",", "10", "]", "=", "719", "\n", "v", "[", "353", ",", "10", "]", "=", "545", "\n", "v", "[", "354", ",", "10", "]", "=", "1991", "\n", "v", "[", "355", ",", "10", "]", "=", "83", "\n", "v", "[", "356", ",", "10", "]", "=", "819", "\n", "v", "[", "357", ",", "10", "]", "=", "239", "\n", "v", "[", "358", ",", "10", "]", "=", "1791", "\n", "v", "[", "359", ",", "10", "]", "=", "1461", "\n", "v", "[", "360", ",", "10", "]", "=", "1647", "\n", "v", "[", "361", ",", "10", "]", "=", "1501", "\n", "v", "[", "362", ",", "10", "]", "=", "1161", "\n", "v", "[", "363", ",", "10", "]", "=", "1629", "\n", "v", "[", "364", ",", "10", "]", "=", "139", "\n", "v", "[", "365", ",", "10", "]", "=", "1595", "\n", "v", "[", "366", ",", "10", "]", "=", "1921", "\n", "v", "[", "367", ",", "10", "]", "=", "1267", "\n", "v", "[", "368", ",", "10", "]", "=", "1415", "\n", "v", "[", "369", ",", "10", "]", "=", "509", "\n", "v", "[", "370", ",", "10", "]", "=", "347", "\n", "v", "[", "371", ",", "10", "]", "=", "777", "\n", "v", "[", "372", ",", "10", "]", "=", "1083", "\n", "v", "[", "373", ",", "10", "]", "=", "363", "\n", "v", "[", "374", ",", "10", "]", "=", "269", "\n", "v", "[", "375", ",", "10", "]", "=", "1015", "\n", "v", "[", "376", ",", "10", "]", "=", "1809", "\n", "v", "[", "377", ",", "10", "]", "=", "1105", "\n", "v", "[", "378", ",", "10", "]", "=", "1429", "\n", "v", "[", "379", ",", "10", "]", "=", "1471", "\n", "v", "[", "380", ",", "10", "]", "=", "2019", "\n", "v", "[", "381", ",", "10", "]", "=", "381", "\n", "v", "[", "382", ",", "10", "]", "=", "2025", "\n", "v", "[", "383", ",", "10", "]", "=", "1223", "\n", "v", "[", "384", ",", "10", "]", "=", "827", "\n", "v", "[", "385", ",", "10", "]", "=", "1733", "\n", "v", "[", "386", ",", "10", "]", "=", "887", "\n", "v", "[", "387", ",", "10", "]", "=", "1321", "\n", "v", "[", "388", ",", "10", "]", "=", "803", "\n", "v", "[", "389", ",", "10", "]", "=", "1951", "\n", "v", "[", "390", ",", "10", "]", "=", "1297", "\n", "v", "[", "391", ",", "10", "]", "=", "1995", "\n", "v", "[", "392", ",", "10", "]", "=", "833", "\n", "v", "[", "393", ",", "10", "]", "=", "1107", "\n", "v", "[", "394", ",", "10", "]", "=", "1135", "\n", "v", "[", "395", ",", "10", "]", "=", "1181", "\n", "v", "[", "396", ",", "10", "]", "=", "1251", "\n", "v", "[", "397", ",", "10", "]", "=", "983", "\n", "v", "[", "398", ",", "10", "]", "=", "1389", "\n", "v", "[", "399", ",", "10", "]", "=", "1565", "\n", "v", "[", "400", ",", "10", "]", "=", "273", "\n", "v", "[", "401", ",", "10", "]", "=", "137", "\n", "v", "[", "402", ",", "10", "]", "=", "71", "\n", "v", "[", "403", ",", "10", "]", "=", "735", "\n", "v", "[", "404", ",", "10", "]", "=", "1005", "\n", "v", "[", "405", ",", "10", "]", "=", "933", "\n", "v", "[", "406", ",", "10", "]", "=", "67", "\n", "v", "[", "407", ",", "10", "]", "=", "1471", "\n", "v", "[", "408", ",", "10", "]", "=", "551", "\n", "v", "[", "409", ",", "10", "]", "=", "457", "\n", "v", "[", "410", ",", "10", "]", "=", "1667", "\n", "v", "[", "411", ",", "10", "]", "=", "1729", "\n", "v", "[", "412", ",", "10", "]", "=", "919", "\n", "v", "[", "413", ",", "10", "]", "=", "285", "\n", "v", "[", "414", ",", "10", "]", "=", "1629", "\n", "v", "[", "415", ",", "10", "]", "=", "1815", "\n", "v", "[", "416", ",", "10", "]", "=", "653", "\n", "v", "[", "417", ",", "10", "]", "=", "1919", "\n", "v", "[", "418", ",", "10", "]", "=", "1039", "\n", "v", "[", "419", ",", "10", "]", "=", "531", "\n", "v", "[", "420", ",", "10", "]", "=", "393", "\n", "v", "[", "421", ",", "10", "]", "=", "1411", "\n", "v", "[", "422", ",", "10", "]", "=", "359", "\n", "v", "[", "423", ",", "10", "]", "=", "221", "\n", "v", "[", "424", ",", "10", "]", "=", "699", "\n", "v", "[", "425", ",", "10", "]", "=", "1485", "\n", "v", "[", "426", ",", "10", "]", "=", "471", "\n", "v", "[", "427", ",", "10", "]", "=", "1357", "\n", "v", "[", "428", ",", "10", "]", "=", "1715", "\n", "v", "[", "429", ",", "10", "]", "=", "595", "\n", "v", "[", "430", ",", "10", "]", "=", "1677", "\n", "v", "[", "431", ",", "10", "]", "=", "153", "\n", "v", "[", "432", ",", "10", "]", "=", "1903", "\n", "v", "[", "433", ",", "10", "]", "=", "1281", "\n", "v", "[", "434", ",", "10", "]", "=", "215", "\n", "v", "[", "435", ",", "10", "]", "=", "781", "\n", "v", "[", "436", ",", "10", "]", "=", "543", "\n", "v", "[", "437", ",", "10", "]", "=", "293", "\n", "v", "[", "438", ",", "10", "]", "=", "1807", "\n", "v", "[", "439", ",", "10", "]", "=", "965", "\n", "v", "[", "440", ",", "10", "]", "=", "1695", "\n", "v", "[", "441", ",", "10", "]", "=", "443", "\n", "v", "[", "442", ",", "10", "]", "=", "1985", "\n", "v", "[", "443", ",", "10", "]", "=", "321", "\n", "v", "[", "444", ",", "10", "]", "=", "879", "\n", "v", "[", "445", ",", "10", "]", "=", "1227", "\n", "v", "[", "446", ",", "10", "]", "=", "1915", "\n", "v", "[", "447", ",", "10", "]", "=", "839", "\n", "v", "[", "448", ",", "10", "]", "=", "1945", "\n", "v", "[", "449", ",", "10", "]", "=", "1993", "\n", "v", "[", "450", ",", "10", "]", "=", "1165", "\n", "v", "[", "451", ",", "10", "]", "=", "51", "\n", "v", "[", "452", ",", "10", "]", "=", "557", "\n", "v", "[", "453", ",", "10", "]", "=", "723", "\n", "v", "[", "454", ",", "10", "]", "=", "1491", "\n", "v", "[", "455", ",", "10", "]", "=", "817", "\n", "v", "[", "456", ",", "10", "]", "=", "1237", "\n", "v", "[", "457", ",", "10", "]", "=", "947", "\n", "v", "[", "458", ",", "10", "]", "=", "1215", "\n", "v", "[", "459", ",", "10", "]", "=", "1911", "\n", "v", "[", "460", ",", "10", "]", "=", "1225", "\n", "v", "[", "461", ",", "10", "]", "=", "1965", "\n", "v", "[", "462", ",", "10", "]", "=", "1889", "\n", "v", "[", "463", ",", "10", "]", "=", "1503", "\n", "v", "[", "464", ",", "10", "]", "=", "1177", "\n", "v", "[", "465", ",", "10", "]", "=", "73", "\n", "v", "[", "466", ",", "10", "]", "=", "1767", "\n", "v", "[", "467", ",", "10", "]", "=", "303", "\n", "v", "[", "468", ",", "10", "]", "=", "177", "\n", "v", "[", "469", ",", "10", "]", "=", "1897", "\n", "v", "[", "470", ",", "10", "]", "=", "1401", "\n", "v", "[", "471", ",", "10", "]", "=", "321", "\n", "v", "[", "472", ",", "10", "]", "=", "921", "\n", "v", "[", "473", ",", "10", "]", "=", "217", "\n", "v", "[", "474", ",", "10", "]", "=", "1779", "\n", "v", "[", "475", ",", "10", "]", "=", "327", "\n", "v", "[", "476", ",", "10", "]", "=", "1889", "\n", "v", "[", "477", ",", "10", "]", "=", "333", "\n", "v", "[", "478", ",", "10", "]", "=", "615", "\n", "v", "[", "479", ",", "10", "]", "=", "1665", "\n", "v", "[", "480", ",", "10", "]", "=", "1825", "\n", "v", "[", "481", ",", "10", "]", "=", "1639", "\n", "v", "[", "482", ",", "10", "]", "=", "237", "\n", "v", "[", "483", ",", "10", "]", "=", "1205", "\n", "v", "[", "484", ",", "10", "]", "=", "361", "\n", "v", "[", "485", ",", "10", "]", "=", "129", "\n", "v", "[", "486", ",", "10", "]", "=", "1655", "\n", "v", "[", "487", ",", "10", "]", "=", "983", "\n", "v", "[", "488", ",", "10", "]", "=", "1089", "\n", "v", "[", "489", ",", "10", "]", "=", "1171", "\n", "v", "[", "490", ",", "10", "]", "=", "401", "\n", "v", "[", "491", ",", "10", "]", "=", "677", "\n", "v", "[", "492", ",", "10", "]", "=", "643", "\n", "v", "[", "493", ",", "10", "]", "=", "749", "\n", "v", "[", "494", ",", "10", "]", "=", "303", "\n", "v", "[", "495", ",", "10", "]", "=", "1407", "\n", "v", "[", "496", ",", "10", "]", "=", "1873", "\n", "v", "[", "497", ",", "10", "]", "=", "1579", "\n", "v", "[", "498", ",", "10", "]", "=", "1491", "\n", "v", "[", "499", ",", "10", "]", "=", "1393", "\n", "v", "[", "500", ",", "10", "]", "=", "1247", "\n", "v", "[", "501", ",", "10", "]", "=", "789", "\n", "v", "[", "502", ",", "10", "]", "=", "763", "\n", "v", "[", "503", ",", "10", "]", "=", "49", "\n", "v", "[", "504", ",", "10", "]", "=", "5", "\n", "v", "[", "505", ",", "10", "]", "=", "1607", "\n", "v", "[", "506", ",", "10", "]", "=", "1891", "\n", "v", "[", "507", ",", "10", "]", "=", "735", "\n", "v", "[", "508", ",", "10", "]", "=", "1557", "\n", "v", "[", "509", ",", "10", "]", "=", "1909", "\n", "v", "[", "510", ",", "10", "]", "=", "1765", "\n", "v", "[", "511", ",", "10", "]", "=", "1777", "\n", "v", "[", "512", ",", "10", "]", "=", "1127", "\n", "v", "[", "513", ",", "10", "]", "=", "813", "\n", "v", "[", "514", ",", "10", "]", "=", "695", "\n", "v", "[", "515", ",", "10", "]", "=", "97", "\n", "v", "[", "516", ",", "10", "]", "=", "731", "\n", "v", "[", "517", ",", "10", "]", "=", "1503", "\n", "v", "[", "518", ",", "10", "]", "=", "1751", "\n", "v", "[", "519", ",", "10", "]", "=", "333", "\n", "v", "[", "520", ",", "10", "]", "=", "769", "\n", "v", "[", "521", ",", "10", "]", "=", "865", "\n", "v", "[", "522", ",", "10", "]", "=", "693", "\n", "v", "[", "523", ",", "10", "]", "=", "377", "\n", "v", "[", "524", ",", "10", "]", "=", "1919", "\n", "v", "[", "525", ",", "10", "]", "=", "957", "\n", "v", "[", "526", ",", "10", "]", "=", "1359", "\n", "v", "[", "527", ",", "10", "]", "=", "1627", "\n", "v", "[", "528", ",", "10", "]", "=", "1039", "\n", "v", "[", "529", ",", "10", "]", "=", "1783", "\n", "v", "[", "530", ",", "10", "]", "=", "1065", "\n", "v", "[", "531", ",", "10", "]", "=", "1665", "\n", "v", "[", "532", ",", "10", "]", "=", "1917", "\n", "v", "[", "533", ",", "10", "]", "=", "1947", "\n", "v", "[", "534", ",", "10", "]", "=", "991", "\n", "v", "[", "535", ",", "10", "]", "=", "1997", "\n", "v", "[", "536", ",", "10", "]", "=", "841", "\n", "v", "[", "537", ",", "10", "]", "=", "459", "\n", "v", "[", "538", ",", "10", "]", "=", "221", "\n", "v", "[", "539", ",", "10", "]", "=", "327", "\n", "v", "[", "540", ",", "10", "]", "=", "1595", "\n", "v", "[", "541", ",", "10", "]", "=", "1881", "\n", "v", "[", "542", ",", "10", "]", "=", "1269", "\n", "v", "[", "543", ",", "10", "]", "=", "1007", "\n", "v", "[", "544", ",", "10", "]", "=", "129", "\n", "v", "[", "545", ",", "10", "]", "=", "1413", "\n", "v", "[", "546", ",", "10", "]", "=", "475", "\n", "v", "[", "547", ",", "10", "]", "=", "1105", "\n", "v", "[", "548", ",", "10", "]", "=", "791", "\n", "v", "[", "549", ",", "10", "]", "=", "1983", "\n", "v", "[", "550", ",", "10", "]", "=", "1359", "\n", "v", "[", "551", ",", "10", "]", "=", "503", "\n", "v", "[", "552", ",", "10", "]", "=", "691", "\n", "v", "[", "553", ",", "10", "]", "=", "659", "\n", "v", "[", "554", ",", "10", "]", "=", "691", "\n", "v", "[", "555", ",", "10", "]", "=", "343", "\n", "v", "[", "556", ",", "10", "]", "=", "1375", "\n", "v", "[", "557", ",", "10", "]", "=", "1919", "\n", "v", "[", "558", ",", "10", "]", "=", "263", "\n", "v", "[", "559", ",", "10", "]", "=", "1373", "\n", "v", "[", "560", ",", "10", "]", "=", "603", "\n", "v", "[", "561", ",", "10", "]", "=", "1383", "\n", "v", "[", "562", ",", "10", "]", "=", "297", "\n", "v", "[", "563", ",", "10", "]", "=", "781", "\n", "v", "[", "564", ",", "10", "]", "=", "145", "\n", "v", "[", "565", ",", "10", "]", "=", "285", "\n", "v", "[", "566", ",", "10", "]", "=", "767", "\n", "v", "[", "567", ",", "10", "]", "=", "1739", "\n", "v", "[", "568", ",", "10", "]", "=", "1715", "\n", "v", "[", "569", ",", "10", "]", "=", "715", "\n", "v", "[", "570", ",", "10", "]", "=", "317", "\n", "v", "[", "571", ",", "10", "]", "=", "1333", "\n", "v", "[", "572", ",", "10", "]", "=", "85", "\n", "v", "[", "573", ",", "10", "]", "=", "831", "\n", "v", "[", "574", ",", "10", "]", "=", "1615", "\n", "v", "[", "575", ",", "10", "]", "=", "81", "\n", "v", "[", "576", ",", "10", "]", "=", "1667", "\n", "v", "[", "577", ",", "10", "]", "=", "1467", "\n", "v", "[", "578", ",", "10", "]", "=", "1457", "\n", "v", "[", "579", ",", "10", "]", "=", "1453", "\n", "v", "[", "580", ",", "10", "]", "=", "1825", "\n", "v", "[", "581", ",", "10", "]", "=", "109", "\n", "v", "[", "582", ",", "10", "]", "=", "387", "\n", "v", "[", "583", ",", "10", "]", "=", "1207", "\n", "v", "[", "584", ",", "10", "]", "=", "2039", "\n", "v", "[", "585", ",", "10", "]", "=", "213", "\n", "v", "[", "586", ",", "10", "]", "=", "1351", "\n", "v", "[", "587", ",", "10", "]", "=", "1329", "\n", "v", "[", "588", ",", "10", "]", "=", "1173", "\n", "v", "[", "589", ",", "10", "]", "=", "57", "\n", "v", "[", "590", ",", "10", "]", "=", "1769", "\n", "v", "[", "591", ",", "10", "]", "=", "951", "\n", "v", "[", "592", ",", "10", "]", "=", "183", "\n", "v", "[", "593", ",", "10", "]", "=", "23", "\n", "v", "[", "594", ",", "10", "]", "=", "451", "\n", "v", "[", "595", ",", "10", "]", "=", "1155", "\n", "v", "[", "596", ",", "10", "]", "=", "1551", "\n", "v", "[", "597", ",", "10", "]", "=", "2037", "\n", "v", "[", "598", ",", "10", "]", "=", "811", "\n", "v", "[", "599", ",", "10", "]", "=", "635", "\n", "v", "[", "600", ",", "10", "]", "=", "1671", "\n", "v", "[", "601", ",", "10", "]", "=", "1451", "\n", "v", "[", "602", ",", "10", "]", "=", "863", "\n", "v", "[", "603", ",", "10", "]", "=", "1499", "\n", "v", "[", "604", ",", "10", "]", "=", "1673", "\n", "v", "[", "605", ",", "10", "]", "=", "363", "\n", "v", "[", "606", ",", "10", "]", "=", "1029", "\n", "v", "[", "607", ",", "10", "]", "=", "1077", "\n", "v", "[", "608", ",", "10", "]", "=", "1525", "\n", "v", "[", "609", ",", "10", "]", "=", "277", "\n", "v", "[", "610", ",", "10", "]", "=", "1023", "\n", "v", "[", "611", ",", "10", "]", "=", "655", "\n", "v", "[", "612", ",", "10", "]", "=", "665", "\n", "v", "[", "613", ",", "10", "]", "=", "1869", "\n", "v", "[", "614", ",", "10", "]", "=", "1255", "\n", "v", "[", "615", ",", "10", "]", "=", "965", "\n", "v", "[", "616", ",", "10", "]", "=", "277", "\n", "v", "[", "617", ",", "10", "]", "=", "1601", "\n", "v", "[", "618", ",", "10", "]", "=", "329", "\n", "v", "[", "619", ",", "10", "]", "=", "1603", "\n", "v", "[", "620", ",", "10", "]", "=", "1901", "\n", "v", "[", "621", ",", "10", "]", "=", "395", "\n", "v", "[", "622", ",", "10", "]", "=", "65", "\n", "v", "[", "623", ",", "10", "]", "=", "1307", "\n", "v", "[", "624", ",", "10", "]", "=", "2029", "\n", "v", "[", "625", ",", "10", "]", "=", "21", "\n", "v", "[", "626", ",", "10", "]", "=", "1321", "\n", "v", "[", "627", ",", "10", "]", "=", "543", "\n", "v", "[", "628", ",", "10", "]", "=", "1569", "\n", "v", "[", "629", ",", "10", "]", "=", "1185", "\n", "v", "[", "630", ",", "10", "]", "=", "1905", "\n", "v", "[", "631", ",", "10", "]", "=", "1701", "\n", "v", "[", "632", ",", "10", "]", "=", "413", "\n", "v", "[", "633", ",", "10", "]", "=", "2041", "\n", "v", "[", "634", ",", "10", "]", "=", "1697", "\n", "v", "[", "635", ",", "10", "]", "=", "725", "\n", "v", "[", "636", ",", "10", "]", "=", "1417", "\n", "v", "[", "637", ",", "10", "]", "=", "1847", "\n", "v", "[", "638", ",", "10", "]", "=", "411", "\n", "v", "[", "639", ",", "10", "]", "=", "211", "\n", "v", "[", "640", ",", "10", "]", "=", "915", "\n", "v", "[", "641", ",", "10", "]", "=", "1891", "\n", "v", "[", "642", ",", "10", "]", "=", "17", "\n", "v", "[", "643", ",", "10", "]", "=", "1877", "\n", "v", "[", "644", ",", "10", "]", "=", "1699", "\n", "v", "[", "645", ",", "10", "]", "=", "687", "\n", "v", "[", "646", ",", "10", "]", "=", "1089", "\n", "v", "[", "647", ",", "10", "]", "=", "1973", "\n", "v", "[", "648", ",", "10", "]", "=", "1809", "\n", "v", "[", "649", ",", "10", "]", "=", "851", "\n", "v", "[", "650", ",", "10", "]", "=", "1495", "\n", "v", "[", "651", ",", "10", "]", "=", "1257", "\n", "v", "[", "652", ",", "10", "]", "=", "63", "\n", "v", "[", "653", ",", "10", "]", "=", "1323", "\n", "v", "[", "654", ",", "10", "]", "=", "1307", "\n", "v", "[", "655", ",", "10", "]", "=", "609", "\n", "v", "[", "656", ",", "10", "]", "=", "881", "\n", "v", "[", "657", ",", "10", "]", "=", "1543", "\n", "v", "[", "658", ",", "10", "]", "=", "177", "\n", "v", "[", "659", ",", "10", "]", "=", "617", "\n", "v", "[", "660", ",", "10", "]", "=", "1505", "\n", "v", "[", "661", ",", "10", "]", "=", "1747", "\n", "v", "[", "662", ",", "10", "]", "=", "1537", "\n", "v", "[", "663", ",", "10", "]", "=", "925", "\n", "v", "[", "664", ",", "10", "]", "=", "183", "\n", "v", "[", "665", ",", "10", "]", "=", "77", "\n", "v", "[", "666", ",", "10", "]", "=", "1723", "\n", "v", "[", "667", ",", "10", "]", "=", "1877", "\n", "v", "[", "668", ",", "10", "]", "=", "1703", "\n", "v", "[", "669", ",", "10", "]", "=", "397", "\n", "v", "[", "670", ",", "10", "]", "=", "459", "\n", "v", "[", "671", ",", "10", "]", "=", "521", "\n", "v", "[", "672", ",", "10", "]", "=", "257", "\n", "v", "[", "673", ",", "10", "]", "=", "1177", "\n", "v", "[", "674", ",", "10", "]", "=", "389", "\n", "v", "[", "675", ",", "10", "]", "=", "1947", "\n", "v", "[", "676", ",", "10", "]", "=", "1553", "\n", "v", "[", "677", ",", "10", "]", "=", "1583", "\n", "v", "[", "678", ",", "10", "]", "=", "1831", "\n", "v", "[", "679", ",", "10", "]", "=", "261", "\n", "v", "[", "680", ",", "10", "]", "=", "485", "\n", "v", "[", "681", ",", "10", "]", "=", "289", "\n", "v", "[", "682", ",", "10", "]", "=", "1281", "\n", "v", "[", "683", ",", "10", "]", "=", "1543", "\n", "v", "[", "684", ",", "10", "]", "=", "1591", "\n", "v", "[", "685", ",", "10", "]", "=", "1123", "\n", "v", "[", "686", ",", "10", "]", "=", "573", "\n", "v", "[", "687", ",", "10", "]", "=", "821", "\n", "v", "[", "688", ",", "10", "]", "=", "1065", "\n", "v", "[", "689", ",", "10", "]", "=", "1933", "\n", "v", "[", "690", ",", "10", "]", "=", "1373", "\n", "v", "[", "691", ",", "10", "]", "=", "2005", "\n", "v", "[", "692", ",", "10", "]", "=", "905", "\n", "v", "[", "693", ",", "10", "]", "=", "207", "\n", "v", "[", "694", ",", "10", "]", "=", "173", "\n", "v", "[", "695", ",", "10", "]", "=", "1573", "\n", "v", "[", "696", ",", "10", "]", "=", "1597", "\n", "v", "[", "697", ",", "10", "]", "=", "573", "\n", "v", "[", "698", ",", "10", "]", "=", "1883", "\n", "v", "[", "699", ",", "10", "]", "=", "1795", "\n", "v", "[", "700", ",", "10", "]", "=", "1499", "\n", "v", "[", "701", ",", "10", "]", "=", "1743", "\n", "v", "[", "702", ",", "10", "]", "=", "553", "\n", "v", "[", "703", ",", "10", "]", "=", "335", "\n", "v", "[", "704", ",", "10", "]", "=", "333", "\n", "v", "[", "705", ",", "10", "]", "=", "1645", "\n", "v", "[", "706", ",", "10", "]", "=", "791", "\n", "v", "[", "707", ",", "10", "]", "=", "871", "\n", "v", "[", "708", ",", "10", "]", "=", "1157", "\n", "v", "[", "709", ",", "10", "]", "=", "969", "\n", "v", "[", "710", ",", "10", "]", "=", "557", "\n", "v", "[", "711", ",", "10", "]", "=", "141", "\n", "v", "[", "712", ",", "10", "]", "=", "223", "\n", "v", "[", "713", ",", "10", "]", "=", "1129", "\n", "v", "[", "714", ",", "10", "]", "=", "1685", "\n", "v", "[", "715", ",", "10", "]", "=", "423", "\n", "v", "[", "716", ",", "10", "]", "=", "1069", "\n", "v", "[", "717", ",", "10", "]", "=", "391", "\n", "v", "[", "718", ",", "10", "]", "=", "99", "\n", "v", "[", "719", ",", "10", "]", "=", "95", "\n", "v", "[", "720", ",", "10", "]", "=", "1847", "\n", "v", "[", "721", ",", "10", "]", "=", "531", "\n", "v", "[", "722", ",", "10", "]", "=", "1859", "\n", "v", "[", "723", ",", "10", "]", "=", "1833", "\n", "v", "[", "724", ",", "10", "]", "=", "1833", "\n", "v", "[", "725", ",", "10", "]", "=", "341", "\n", "v", "[", "726", ",", "10", "]", "=", "237", "\n", "v", "[", "727", ",", "10", "]", "=", "1997", "\n", "v", "[", "728", ",", "10", "]", "=", "1799", "\n", "v", "[", "729", ",", "10", "]", "=", "409", "\n", "v", "[", "730", ",", "10", "]", "=", "431", "\n", "v", "[", "731", ",", "10", "]", "=", "1917", "\n", "v", "[", "732", ",", "10", "]", "=", "363", "\n", "v", "[", "733", ",", "10", "]", "=", "335", "\n", "v", "[", "734", ",", "10", "]", "=", "1039", "\n", "v", "[", "735", ",", "10", "]", "=", "1085", "\n", "v", "[", "736", ",", "10", "]", "=", "1657", "\n", "v", "[", "737", ",", "10", "]", "=", "1975", "\n", "v", "[", "738", ",", "10", "]", "=", "1527", "\n", "v", "[", "739", ",", "10", "]", "=", "1111", "\n", "v", "[", "740", ",", "10", "]", "=", "659", "\n", "v", "[", "741", ",", "10", "]", "=", "389", "\n", "v", "[", "742", ",", "10", "]", "=", "899", "\n", "v", "[", "743", ",", "10", "]", "=", "595", "\n", "v", "[", "744", ",", "10", "]", "=", "1439", "\n", "v", "[", "745", ",", "10", "]", "=", "1861", "\n", "v", "[", "746", ",", "10", "]", "=", "1979", "\n", "v", "[", "747", ",", "10", "]", "=", "1569", "\n", "v", "[", "748", ",", "10", "]", "=", "1087", "\n", "v", "[", "749", ",", "10", "]", "=", "1009", "\n", "v", "[", "750", ",", "10", "]", "=", "165", "\n", "v", "[", "751", ",", "10", "]", "=", "1895", "\n", "v", "[", "752", ",", "10", "]", "=", "1481", "\n", "v", "[", "753", ",", "10", "]", "=", "1583", "\n", "v", "[", "754", ",", "10", "]", "=", "29", "\n", "v", "[", "755", ",", "10", "]", "=", "1193", "\n", "v", "[", "756", ",", "10", "]", "=", "1673", "\n", "v", "[", "757", ",", "10", "]", "=", "1075", "\n", "v", "[", "758", ",", "10", "]", "=", "301", "\n", "v", "[", "759", ",", "10", "]", "=", "1081", "\n", "v", "[", "760", ",", "10", "]", "=", "1377", "\n", "v", "[", "761", ",", "10", "]", "=", "1747", "\n", "v", "[", "762", ",", "10", "]", "=", "1497", "\n", "v", "[", "763", ",", "10", "]", "=", "1103", "\n", "v", "[", "764", ",", "10", "]", "=", "1789", "\n", "v", "[", "765", ",", "10", "]", "=", "887", "\n", "v", "[", "766", ",", "10", "]", "=", "739", "\n", "v", "[", "767", ",", "10", "]", "=", "1577", "\n", "v", "[", "768", ",", "10", "]", "=", "313", "\n", "v", "[", "769", ",", "10", "]", "=", "1367", "\n", "v", "[", "770", ",", "10", "]", "=", "1299", "\n", "v", "[", "771", ",", "10", "]", "=", "1801", "\n", "v", "[", "772", ",", "10", "]", "=", "1131", "\n", "v", "[", "773", ",", "10", "]", "=", "1837", "\n", "v", "[", "774", ",", "10", "]", "=", "73", "\n", "v", "[", "775", ",", "10", "]", "=", "1865", "\n", "v", "[", "776", ",", "10", "]", "=", "1065", "\n", "v", "[", "777", ",", "10", "]", "=", "843", "\n", "v", "[", "778", ",", "10", "]", "=", "635", "\n", "v", "[", "779", ",", "10", "]", "=", "55", "\n", "v", "[", "780", ",", "10", "]", "=", "1655", "\n", "v", "[", "781", ",", "10", "]", "=", "913", "\n", "v", "[", "782", ",", "10", "]", "=", "1037", "\n", "v", "[", "783", ",", "10", "]", "=", "223", "\n", "v", "[", "784", ",", "10", "]", "=", "1871", "\n", "v", "[", "785", ",", "10", "]", "=", "1161", "\n", "v", "[", "786", ",", "10", "]", "=", "461", "\n", "v", "[", "787", ",", "10", "]", "=", "479", "\n", "v", "[", "788", ",", "10", "]", "=", "511", "\n", "v", "[", "789", ",", "10", "]", "=", "1721", "\n", "v", "[", "790", ",", "10", "]", "=", "1107", "\n", "v", "[", "791", ",", "10", "]", "=", "389", "\n", "v", "[", "792", ",", "10", "]", "=", "151", "\n", "v", "[", "793", ",", "10", "]", "=", "35", "\n", "v", "[", "794", ",", "10", "]", "=", "375", "\n", "v", "[", "795", ",", "10", "]", "=", "1099", "\n", "v", "[", "796", ",", "10", "]", "=", "937", "\n", "v", "[", "797", ",", "10", "]", "=", "1185", "\n", "v", "[", "798", ",", "10", "]", "=", "1701", "\n", "v", "[", "799", ",", "10", "]", "=", "769", "\n", "v", "[", "800", ",", "10", "]", "=", "639", "\n", "v", "[", "801", ",", "10", "]", "=", "1633", "\n", "v", "[", "802", ",", "10", "]", "=", "1609", "\n", "v", "[", "803", ",", "10", "]", "=", "379", "\n", "v", "[", "804", ",", "10", "]", "=", "1613", "\n", "v", "[", "805", ",", "10", "]", "=", "2031", "\n", "v", "[", "806", ",", "10", "]", "=", "685", "\n", "v", "[", "807", ",", "10", "]", "=", "289", "\n", "v", "[", "808", ",", "10", "]", "=", "975", "\n", "v", "[", "809", ",", "10", "]", "=", "671", "\n", "v", "[", "810", ",", "10", "]", "=", "1599", "\n", "v", "[", "811", ",", "10", "]", "=", "1447", "\n", "v", "[", "812", ",", "10", "]", "=", "871", "\n", "v", "[", "813", ",", "10", "]", "=", "647", "\n", "v", "[", "814", ",", "10", "]", "=", "99", "\n", "v", "[", "815", ",", "10", "]", "=", "139", "\n", "v", "[", "816", ",", "10", "]", "=", "1427", "\n", "v", "[", "817", ",", "10", "]", "=", "959", "\n", "v", "[", "818", ",", "10", "]", "=", "89", "\n", "v", "[", "819", ",", "10", "]", "=", "117", "\n", "v", "[", "820", ",", "10", "]", "=", "841", "\n", "v", "[", "821", ",", "10", "]", "=", "891", "\n", "v", "[", "822", ",", "10", "]", "=", "1959", "\n", "v", "[", "823", ",", "10", "]", "=", "223", "\n", "v", "[", "824", ",", "10", "]", "=", "1697", "\n", "v", "[", "825", ",", "10", "]", "=", "1145", "\n", "v", "[", "826", ",", "10", "]", "=", "499", "\n", "v", "[", "827", ",", "10", "]", "=", "1435", "\n", "v", "[", "828", ",", "10", "]", "=", "1809", "\n", "v", "[", "829", ",", "10", "]", "=", "1413", "\n", "v", "[", "830", ",", "10", "]", "=", "1445", "\n", "v", "[", "831", ",", "10", "]", "=", "1675", "\n", "v", "[", "832", ",", "10", "]", "=", "171", "\n", "v", "[", "833", ",", "10", "]", "=", "1073", "\n", "v", "[", "834", ",", "10", "]", "=", "1349", "\n", "v", "[", "835", ",", "10", "]", "=", "1545", "\n", "v", "[", "836", ",", "10", "]", "=", "2039", "\n", "v", "[", "837", ",", "10", "]", "=", "1027", "\n", "v", "[", "838", ",", "10", "]", "=", "1563", "\n", "v", "[", "839", ",", "10", "]", "=", "859", "\n", "v", "[", "840", ",", "10", "]", "=", "215", "\n", "v", "[", "841", ",", "10", "]", "=", "1673", "\n", "v", "[", "842", ",", "10", "]", "=", "1919", "\n", "v", "[", "843", ",", "10", "]", "=", "1633", "\n", "v", "[", "844", ",", "10", "]", "=", "779", "\n", "v", "[", "845", ",", "10", "]", "=", "411", "\n", "v", "[", "846", ",", "10", "]", "=", "1845", "\n", "v", "[", "847", ",", "10", "]", "=", "1477", "\n", "v", "[", "848", ",", "10", "]", "=", "1489", "\n", "v", "[", "849", ",", "10", "]", "=", "447", "\n", "v", "[", "850", ",", "10", "]", "=", "1545", "\n", "v", "[", "851", ",", "10", "]", "=", "351", "\n", "v", "[", "852", ",", "10", "]", "=", "1989", "\n", "v", "[", "853", ",", "10", "]", "=", "495", "\n", "v", "[", "854", ",", "10", "]", "=", "183", "\n", "v", "[", "855", ",", "10", "]", "=", "1639", "\n", "v", "[", "856", ",", "10", "]", "=", "1385", "\n", "v", "[", "857", ",", "10", "]", "=", "1805", "\n", "v", "[", "858", ",", "10", "]", "=", "1097", "\n", "v", "[", "859", ",", "10", "]", "=", "1249", "\n", "v", "[", "860", ",", "10", "]", "=", "1431", "\n", "v", "[", "861", ",", "10", "]", "=", "1571", "\n", "v", "[", "862", ",", "10", "]", "=", "591", "\n", "v", "[", "863", ",", "10", "]", "=", "697", "\n", "v", "[", "864", ",", "10", "]", "=", "1509", "\n", "v", "[", "865", ",", "10", "]", "=", "709", "\n", "v", "[", "866", ",", "10", "]", "=", "31", "\n", "v", "[", "867", ",", "10", "]", "=", "1563", "\n", "v", "[", "868", ",", "10", "]", "=", "165", "\n", "v", "[", "869", ",", "10", "]", "=", "513", "\n", "v", "[", "870", ",", "10", "]", "=", "1425", "\n", "v", "[", "871", ",", "10", "]", "=", "1299", "\n", "v", "[", "872", ",", "10", "]", "=", "1081", "\n", "v", "[", "873", ",", "10", "]", "=", "145", "\n", "v", "[", "874", ",", "10", "]", "=", "1841", "\n", "v", "[", "875", ",", "10", "]", "=", "1211", "\n", "v", "[", "876", ",", "10", "]", "=", "941", "\n", "v", "[", "877", ",", "10", "]", "=", "609", "\n", "v", "[", "878", ",", "10", "]", "=", "845", "\n", "v", "[", "879", ",", "10", "]", "=", "1169", "\n", "v", "[", "880", ",", "10", "]", "=", "1865", "\n", "v", "[", "881", ",", "10", "]", "=", "1593", "\n", "v", "[", "882", ",", "10", "]", "=", "347", "\n", "v", "[", "883", ",", "10", "]", "=", "293", "\n", "v", "[", "884", ",", "10", "]", "=", "1277", "\n", "v", "[", "885", ",", "10", "]", "=", "157", "\n", "v", "[", "886", ",", "10", "]", "=", "211", "\n", "v", "[", "887", ",", "10", "]", "=", "93", "\n", "v", "[", "888", ",", "10", "]", "=", "1679", "\n", "v", "[", "889", ",", "10", "]", "=", "1799", "\n", "v", "[", "890", ",", "10", "]", "=", "527", "\n", "v", "[", "891", ",", "10", "]", "=", "41", "\n", "v", "[", "892", ",", "10", "]", "=", "473", "\n", "v", "[", "893", ",", "10", "]", "=", "563", "\n", "v", "[", "894", ",", "10", "]", "=", "187", "\n", "v", "[", "895", ",", "10", "]", "=", "1525", "\n", "v", "[", "896", ",", "10", "]", "=", "575", "\n", "v", "[", "897", ",", "10", "]", "=", "1579", "\n", "v", "[", "898", ",", "10", "]", "=", "857", "\n", "v", "[", "899", ",", "10", "]", "=", "703", "\n", "v", "[", "900", ",", "10", "]", "=", "1211", "\n", "v", "[", "901", ",", "10", "]", "=", "647", "\n", "v", "[", "902", ",", "10", "]", "=", "709", "\n", "v", "[", "903", ",", "10", "]", "=", "981", "\n", "v", "[", "904", ",", "10", "]", "=", "285", "\n", "v", "[", "905", ",", "10", "]", "=", "697", "\n", "v", "[", "906", ",", "10", "]", "=", "163", "\n", "v", "[", "907", ",", "10", "]", "=", "981", "\n", "v", "[", "908", ",", "10", "]", "=", "153", "\n", "v", "[", "909", ",", "10", "]", "=", "1515", "\n", "v", "[", "910", ",", "10", "]", "=", "47", "\n", "v", "[", "911", ",", "10", "]", "=", "1553", "\n", "v", "[", "912", ",", "10", "]", "=", "599", "\n", "v", "[", "913", ",", "10", "]", "=", "225", "\n", "v", "[", "914", ",", "10", "]", "=", "1147", "\n", "v", "[", "915", ",", "10", "]", "=", "381", "\n", "v", "[", "916", ",", "10", "]", "=", "135", "\n", "v", "[", "917", ",", "10", "]", "=", "821", "\n", "v", "[", "918", ",", "10", "]", "=", "1965", "\n", "v", "[", "919", ",", "10", "]", "=", "609", "\n", "v", "[", "920", ",", "10", "]", "=", "1033", "\n", "v", "[", "921", ",", "10", "]", "=", "983", "\n", "v", "[", "922", ",", "10", "]", "=", "503", "\n", "v", "[", "923", ",", "10", "]", "=", "1117", "\n", "v", "[", "924", ",", "10", "]", "=", "327", "\n", "v", "[", "925", ",", "10", "]", "=", "453", "\n", "v", "[", "926", ",", "10", "]", "=", "2005", "\n", "v", "[", "927", ",", "10", "]", "=", "1257", "\n", "v", "[", "928", ",", "10", "]", "=", "343", "\n", "v", "[", "929", ",", "10", "]", "=", "1649", "\n", "v", "[", "930", ",", "10", "]", "=", "1199", "\n", "v", "[", "931", ",", "10", "]", "=", "599", "\n", "v", "[", "932", ",", "10", "]", "=", "1877", "\n", "v", "[", "933", ",", "10", "]", "=", "569", "\n", "v", "[", "934", ",", "10", "]", "=", "695", "\n", "v", "[", "935", ",", "10", "]", "=", "1587", "\n", "v", "[", "936", ",", "10", "]", "=", "1475", "\n", "v", "[", "937", ",", "10", "]", "=", "187", "\n", "v", "[", "938", ",", "10", "]", "=", "973", "\n", "v", "[", "939", ",", "10", "]", "=", "233", "\n", "v", "[", "940", ",", "10", "]", "=", "511", "\n", "v", "[", "941", ",", "10", "]", "=", "51", "\n", "v", "[", "942", ",", "10", "]", "=", "1083", "\n", "v", "[", "943", ",", "10", "]", "=", "665", "\n", "v", "[", "944", ",", "10", "]", "=", "1321", "\n", "v", "[", "945", ",", "10", "]", "=", "531", "\n", "v", "[", "946", ",", "10", "]", "=", "1875", "\n", "v", "[", "947", ",", "10", "]", "=", "1939", "\n", "v", "[", "948", ",", "10", "]", "=", "859", "\n", "v", "[", "949", ",", "10", "]", "=", "1507", "\n", "v", "[", "950", ",", "10", "]", "=", "1979", "\n", "v", "[", "951", ",", "10", "]", "=", "1203", "\n", "v", "[", "952", ",", "10", "]", "=", "1965", "\n", "v", "[", "953", ",", "10", "]", "=", "737", "\n", "v", "[", "954", ",", "10", "]", "=", "921", "\n", "v", "[", "955", ",", "10", "]", "=", "1565", "\n", "v", "[", "956", ",", "10", "]", "=", "1943", "\n", "v", "[", "957", ",", "10", "]", "=", "819", "\n", "v", "[", "958", ",", "10", "]", "=", "223", "\n", "v", "[", "959", ",", "10", "]", "=", "365", "\n", "v", "[", "960", ",", "10", "]", "=", "167", "\n", "v", "[", "961", ",", "10", "]", "=", "1705", "\n", "v", "[", "962", ",", "10", "]", "=", "413", "\n", "v", "[", "963", ",", "10", "]", "=", "1577", "\n", "v", "[", "964", ",", "10", "]", "=", "745", "\n", "v", "[", "965", ",", "10", "]", "=", "1573", "\n", "v", "[", "966", ",", "10", "]", "=", "655", "\n", "v", "[", "967", ",", "10", "]", "=", "1633", "\n", "v", "[", "968", ",", "10", "]", "=", "1003", "\n", "v", "[", "969", ",", "10", "]", "=", "91", "\n", "v", "[", "970", ",", "10", "]", "=", "1123", "\n", "v", "[", "971", ",", "10", "]", "=", "477", "\n", "v", "[", "972", ",", "10", "]", "=", "1741", "\n", "v", "[", "973", ",", "10", "]", "=", "1663", "\n", "v", "[", "974", ",", "10", "]", "=", "35", "\n", "v", "[", "975", ",", "10", "]", "=", "715", "\n", "v", "[", "976", ",", "10", "]", "=", "37", "\n", "v", "[", "977", ",", "10", "]", "=", "1513", "\n", "v", "[", "978", ",", "10", "]", "=", "815", "\n", "v", "[", "979", ",", "10", "]", "=", "941", "\n", "v", "[", "980", ",", "10", "]", "=", "1379", "\n", "v", "[", "981", ",", "10", "]", "=", "263", "\n", "v", "[", "982", ",", "10", "]", "=", "1831", "\n", "v", "[", "983", ",", "10", "]", "=", "1735", "\n", "v", "[", "984", ",", "10", "]", "=", "1111", "\n", "v", "[", "985", ",", "10", "]", "=", "1449", "\n", "v", "[", "986", ",", "10", "]", "=", "353", "\n", "v", "[", "987", ",", "10", "]", "=", "1941", "\n", "v", "[", "988", ",", "10", "]", "=", "1655", "\n", "v", "[", "989", ",", "10", "]", "=", "1349", "\n", "v", "[", "990", ",", "10", "]", "=", "877", "\n", "v", "[", "991", ",", "10", "]", "=", "285", "\n", "v", "[", "992", ",", "10", "]", "=", "1723", "\n", "v", "[", "993", ",", "10", "]", "=", "125", "\n", "v", "[", "994", ",", "10", "]", "=", "1753", "\n", "v", "[", "995", ",", "10", "]", "=", "985", "\n", "v", "[", "996", ",", "10", "]", "=", "723", "\n", "v", "[", "997", ",", "10", "]", "=", "175", "\n", "v", "[", "998", ",", "10", "]", "=", "439", "\n", "v", "[", "999", ",", "10", "]", "=", "791", "\n", "v", "[", "1000", ",", "10", "]", "=", "1051", "\n", "v", "[", "1001", ",", "10", "]", "=", "1261", "\n", "v", "[", "1002", ",", "10", "]", "=", "717", "\n", "v", "[", "1003", ",", "10", "]", "=", "1555", "\n", "v", "[", "1004", ",", "10", "]", "=", "1757", "\n", "v", "[", "1005", ",", "10", "]", "=", "1777", "\n", "v", "[", "1006", ",", "10", "]", "=", "577", "\n", "v", "[", "1007", ",", "10", "]", "=", "1583", "\n", "v", "[", "1008", ",", "10", "]", "=", "1957", "\n", "v", "[", "1009", ",", "10", "]", "=", "873", "\n", "v", "[", "1010", ",", "10", "]", "=", "331", "\n", "v", "[", "1011", ",", "10", "]", "=", "1163", "\n", "v", "[", "1012", ",", "10", "]", "=", "313", "\n", "v", "[", "1013", ",", "10", "]", "=", "1", "\n", "v", "[", "1014", ",", "10", "]", "=", "1963", "\n", "v", "[", "1015", ",", "10", "]", "=", "963", "\n", "v", "[", "1016", ",", "10", "]", "=", "1905", "\n", "v", "[", "1017", ",", "10", "]", "=", "821", "\n", "v", "[", "1018", ",", "10", "]", "=", "1677", "\n", "v", "[", "1019", ",", "10", "]", "=", "185", "\n", "v", "[", "1020", ",", "10", "]", "=", "709", "\n", "v", "[", "1021", ",", "10", "]", "=", "545", "\n", "v", "[", "1022", ",", "10", "]", "=", "1723", "\n", "v", "[", "1023", ",", "10", "]", "=", "215", "\n", "v", "[", "1024", ",", "10", "]", "=", "1885", "\n", "v", "[", "1025", ",", "10", "]", "=", "1249", "\n", "v", "[", "1026", ",", "10", "]", "=", "583", "\n", "v", "[", "1027", ",", "10", "]", "=", "1803", "\n", "v", "[", "1028", ",", "10", "]", "=", "839", "\n", "v", "[", "1029", ",", "10", "]", "=", "885", "\n", "v", "[", "1030", ",", "10", "]", "=", "485", "\n", "v", "[", "1031", ",", "10", "]", "=", "413", "\n", "v", "[", "1032", ",", "10", "]", "=", "1767", "\n", "v", "[", "1033", ",", "10", "]", "=", "425", "\n", "v", "[", "1034", ",", "10", "]", "=", "129", "\n", "v", "[", "1035", ",", "10", "]", "=", "1035", "\n", "v", "[", "1036", ",", "10", "]", "=", "329", "\n", "v", "[", "1037", ",", "10", "]", "=", "1263", "\n", "v", "[", "1038", ",", "10", "]", "=", "1881", "\n", "v", "[", "1039", ",", "10", "]", "=", "1779", "\n", "v", "[", "1040", ",", "10", "]", "=", "1565", "\n", "v", "[", "1041", ",", "10", "]", "=", "359", "\n", "v", "[", "1042", ",", "10", "]", "=", "367", "\n", "v", "[", "1043", ",", "10", "]", "=", "453", "\n", "v", "[", "1044", ",", "10", "]", "=", "707", "\n", "v", "[", "1045", ",", "10", "]", "=", "1419", "\n", "v", "[", "1046", ",", "10", "]", "=", "831", "\n", "v", "[", "1047", ",", "10", "]", "=", "1889", "\n", "v", "[", "1048", ",", "10", "]", "=", "887", "\n", "v", "[", "1049", ",", "10", "]", "=", "1871", "\n", "v", "[", "1050", ",", "10", "]", "=", "1869", "\n", "v", "[", "1051", ",", "10", "]", "=", "747", "\n", "v", "[", "1052", ",", "10", "]", "=", "223", "\n", "v", "[", "1053", ",", "10", "]", "=", "1547", "\n", "v", "[", "1054", ",", "10", "]", "=", "1799", "\n", "v", "[", "1055", ",", "10", "]", "=", "433", "\n", "v", "[", "1056", ",", "10", "]", "=", "1441", "\n", "v", "[", "1057", ",", "10", "]", "=", "553", "\n", "v", "[", "1058", ",", "10", "]", "=", "2021", "\n", "v", "[", "1059", ",", "10", "]", "=", "1303", "\n", "v", "[", "1060", ",", "10", "]", "=", "1505", "\n", "v", "[", "1061", ",", "10", "]", "=", "1735", "\n", "v", "[", "1062", ",", "10", "]", "=", "1619", "\n", "v", "[", "1063", ",", "10", "]", "=", "1065", "\n", "v", "[", "1064", ",", "10", "]", "=", "1161", "\n", "v", "[", "1065", ",", "10", "]", "=", "2047", "\n", "v", "[", "1066", ",", "10", "]", "=", "347", "\n", "v", "[", "1067", ",", "10", "]", "=", "867", "\n", "v", "[", "1068", ",", "10", "]", "=", "881", "\n", "v", "[", "1069", ",", "10", "]", "=", "1447", "\n", "v", "[", "1070", ",", "10", "]", "=", "329", "\n", "v", "[", "1071", ",", "10", "]", "=", "781", "\n", "v", "[", "1072", ",", "10", "]", "=", "1065", "\n", "v", "[", "1073", ",", "10", "]", "=", "219", "\n", "v", "[", "1074", ",", "10", "]", "=", "589", "\n", "v", "[", "1075", ",", "10", "]", "=", "645", "\n", "v", "[", "1076", ",", "10", "]", "=", "1257", "\n", "v", "[", "1077", ",", "10", "]", "=", "1833", "\n", "v", "[", "1078", ",", "10", "]", "=", "749", "\n", "v", "[", "1079", ",", "10", "]", "=", "1841", "\n", "v", "[", "1080", ",", "10", "]", "=", "1733", "\n", "v", "[", "1081", ",", "10", "]", "=", "1179", "\n", "v", "[", "1082", ",", "10", "]", "=", "1191", "\n", "v", "[", "1083", ",", "10", "]", "=", "1025", "\n", "v", "[", "1084", ",", "10", "]", "=", "1639", "\n", "v", "[", "1085", ",", "10", "]", "=", "1955", "\n", "v", "[", "1086", ",", "10", "]", "=", "1423", "\n", "v", "[", "1087", ",", "10", "]", "=", "1685", "\n", "v", "[", "1088", ",", "10", "]", "=", "1711", "\n", "v", "[", "1089", ",", "10", "]", "=", "493", "\n", "v", "[", "1090", ",", "10", "]", "=", "549", "\n", "v", "[", "1091", ",", "10", "]", "=", "783", "\n", "v", "[", "1092", ",", "10", "]", "=", "1653", "\n", "v", "[", "1093", ",", "10", "]", "=", "397", "\n", "v", "[", "1094", ",", "10", "]", "=", "895", "\n", "v", "[", "1095", ",", "10", "]", "=", "233", "\n", "v", "[", "1096", ",", "10", "]", "=", "759", "\n", "v", "[", "1097", ",", "10", "]", "=", "1505", "\n", "v", "[", "1098", ",", "10", "]", "=", "677", "\n", "v", "[", "1099", ",", "10", "]", "=", "1449", "\n", "v", "[", "1100", ",", "10", "]", "=", "1573", "\n", "v", "[", "1101", ",", "10", "]", "=", "1297", "\n", "v", "[", "1102", ",", "10", "]", "=", "1821", "\n", "v", "[", "1103", ",", "10", "]", "=", "1691", "\n", "v", "[", "1104", ",", "10", "]", "=", "791", "\n", "v", "[", "1105", ",", "10", "]", "=", "289", "\n", "v", "[", "1106", ",", "10", "]", "=", "1187", "\n", "v", "[", "1107", ",", "10", "]", "=", "867", "\n", "v", "[", "1108", ",", "10", "]", "=", "1535", "\n", "v", "[", "1109", ",", "10", "]", "=", "575", "\n", "v", "[", "1110", ",", "10", "]", "=", "183", "\n", "\n", "v", "[", "337", ",", "11", "]", "=", "3915", "\n", "v", "[", "338", ",", "11", "]", "=", "97", "\n", "v", "[", "339", ",", "11", "]", "=", "3047", "\n", "v", "[", "340", ",", "11", "]", "=", "937", "\n", "v", "[", "341", ",", "11", "]", "=", "2897", "\n", "v", "[", "342", ",", "11", "]", "=", "953", "\n", "v", "[", "343", ",", "11", "]", "=", "127", "\n", "v", "[", "344", ",", "11", "]", "=", "1201", "\n", "v", "[", "345", ",", "11", "]", "=", "3819", "\n", "v", "[", "346", ",", "11", "]", "=", "193", "\n", "v", "[", "347", ",", "11", "]", "=", "2053", "\n", "v", "[", "348", ",", "11", "]", "=", "3061", "\n", "v", "[", "349", ",", "11", "]", "=", "3759", "\n", "v", "[", "350", ",", "11", "]", "=", "1553", "\n", "v", "[", "351", ",", "11", "]", "=", "2007", "\n", "v", "[", "352", ",", "11", "]", "=", "2493", "\n", "v", "[", "353", ",", "11", "]", "=", "603", "\n", "v", "[", "354", ",", "11", "]", "=", "3343", "\n", "v", "[", "355", ",", "11", "]", "=", "3751", "\n", "v", "[", "356", ",", "11", "]", "=", "1059", "\n", "v", "[", "357", ",", "11", "]", "=", "783", "\n", "v", "[", "358", ",", "11", "]", "=", "1789", "\n", "v", "[", "359", ",", "11", "]", "=", "1589", "\n", "v", "[", "360", ",", "11", "]", "=", "283", "\n", "v", "[", "361", ",", "11", "]", "=", "1093", "\n", "v", "[", "362", ",", "11", "]", "=", "3919", "\n", "v", "[", "363", ",", "11", "]", "=", "2747", "\n", "v", "[", "364", ",", "11", "]", "=", "277", "\n", "v", "[", "365", ",", "11", "]", "=", "2605", "\n", "v", "[", "366", ",", "11", "]", "=", "2169", "\n", "v", "[", "367", ",", "11", "]", "=", "2905", "\n", "v", "[", "368", ",", "11", "]", "=", "721", "\n", "v", "[", "369", ",", "11", "]", "=", "4069", "\n", "v", "[", "370", ",", "11", "]", "=", "233", "\n", "v", "[", "371", ",", "11", "]", "=", "261", "\n", "v", "[", "372", ",", "11", "]", "=", "1137", "\n", "v", "[", "373", ",", "11", "]", "=", "3993", "\n", "v", "[", "374", ",", "11", "]", "=", "3619", "\n", "v", "[", "375", ",", "11", "]", "=", "2881", "\n", "v", "[", "376", ",", "11", "]", "=", "1275", "\n", "v", "[", "377", ",", "11", "]", "=", "3865", "\n", "v", "[", "378", ",", "11", "]", "=", "1299", "\n", "v", "[", "379", ",", "11", "]", "=", "3757", "\n", "v", "[", "380", ",", "11", "]", "=", "1193", "\n", "v", "[", "381", ",", "11", "]", "=", "733", "\n", "v", "[", "382", ",", "11", "]", "=", "993", "\n", "v", "[", "383", ",", "11", "]", "=", "1153", "\n", "v", "[", "384", ",", "11", "]", "=", "2945", "\n", "v", "[", "385", ",", "11", "]", "=", "3163", "\n", "v", "[", "386", ",", "11", "]", "=", "3179", "\n", "v", "[", "387", ",", "11", "]", "=", "437", "\n", "v", "[", "388", ",", "11", "]", "=", "271", "\n", "v", "[", "389", ",", "11", "]", "=", "3493", "\n", "v", "[", "390", ",", "11", "]", "=", "3971", "\n", "v", "[", "391", ",", "11", "]", "=", "1005", "\n", "v", "[", "392", ",", "11", "]", "=", "2615", "\n", "v", "[", "393", ",", "11", "]", "=", "2253", "\n", "v", "[", "394", ",", "11", "]", "=", "1131", "\n", "v", "[", "395", ",", "11", "]", "=", "585", "\n", "v", "[", "396", ",", "11", "]", "=", "2775", "\n", "v", "[", "397", ",", "11", "]", "=", "2171", "\n", "v", "[", "398", ",", "11", "]", "=", "2383", "\n", "v", "[", "399", ",", "11", "]", "=", "2937", "\n", "v", "[", "400", ",", "11", "]", "=", "2447", "\n", "v", "[", "401", ",", "11", "]", "=", "1745", "\n", "v", "[", "402", ",", "11", "]", "=", "663", "\n", "v", "[", "403", ",", "11", "]", "=", "1515", "\n", "v", "[", "404", ",", "11", "]", "=", "3767", "\n", "v", "[", "405", ",", "11", "]", "=", "2709", "\n", "v", "[", "406", ",", "11", "]", "=", "1767", "\n", "v", "[", "407", ",", "11", "]", "=", "3185", "\n", "v", "[", "408", ",", "11", "]", "=", "3017", "\n", "v", "[", "409", ",", "11", "]", "=", "2815", "\n", "v", "[", "410", ",", "11", "]", "=", "1829", "\n", "v", "[", "411", ",", "11", "]", "=", "87", "\n", "v", "[", "412", ",", "11", "]", "=", "3341", "\n", "v", "[", "413", ",", "11", "]", "=", "793", "\n", "v", "[", "414", ",", "11", "]", "=", "2627", "\n", "v", "[", "415", ",", "11", "]", "=", "2169", "\n", "v", "[", "416", ",", "11", "]", "=", "1875", "\n", "v", "[", "417", ",", "11", "]", "=", "3745", "\n", "v", "[", "418", ",", "11", "]", "=", "367", "\n", "v", "[", "419", ",", "11", "]", "=", "3783", "\n", "v", "[", "420", ",", "11", "]", "=", "783", "\n", "v", "[", "421", ",", "11", "]", "=", "827", "\n", "v", "[", "422", ",", "11", "]", "=", "3253", "\n", "v", "[", "423", ",", "11", "]", "=", "2639", "\n", "v", "[", "424", ",", "11", "]", "=", "2955", "\n", "v", "[", "425", ",", "11", "]", "=", "3539", "\n", "v", "[", "426", ",", "11", "]", "=", "1579", "\n", "v", "[", "427", ",", "11", "]", "=", "2109", "\n", "v", "[", "428", ",", "11", "]", "=", "379", "\n", "v", "[", "429", ",", "11", "]", "=", "2939", "\n", "v", "[", "430", ",", "11", "]", "=", "3019", "\n", "v", "[", "431", ",", "11", "]", "=", "1999", "\n", "v", "[", "432", ",", "11", "]", "=", "2253", "\n", "v", "[", "433", ",", "11", "]", "=", "2911", "\n", "v", "[", "434", ",", "11", "]", "=", "3733", "\n", "v", "[", "435", ",", "11", "]", "=", "481", "\n", "v", "[", "436", ",", "11", "]", "=", "1767", "\n", "v", "[", "437", ",", "11", "]", "=", "1055", "\n", "v", "[", "438", ",", "11", "]", "=", "4019", "\n", "v", "[", "439", ",", "11", "]", "=", "4085", "\n", "v", "[", "440", ",", "11", "]", "=", "105", "\n", "v", "[", "441", ",", "11", "]", "=", "1829", "\n", "v", "[", "442", ",", "11", "]", "=", "2097", "\n", "v", "[", "443", ",", "11", "]", "=", "2379", "\n", "v", "[", "444", ",", "11", "]", "=", "1567", "\n", "v", "[", "445", ",", "11", "]", "=", "2713", "\n", "v", "[", "446", ",", "11", "]", "=", "737", "\n", "v", "[", "447", ",", "11", "]", "=", "3423", "\n", "v", "[", "448", ",", "11", "]", "=", "3941", "\n", "v", "[", "449", ",", "11", "]", "=", "2659", "\n", "v", "[", "450", ",", "11", "]", "=", "3961", "\n", "v", "[", "451", ",", "11", "]", "=", "1755", "\n", "v", "[", "452", ",", "11", "]", "=", "3613", "\n", "v", "[", "453", ",", "11", "]", "=", "1937", "\n", "v", "[", "454", ",", "11", "]", "=", "1559", "\n", "v", "[", "455", ",", "11", "]", "=", "2287", "\n", "v", "[", "456", ",", "11", "]", "=", "2743", "\n", "v", "[", "457", ",", "11", "]", "=", "67", "\n", "v", "[", "458", ",", "11", "]", "=", "2859", "\n", "v", "[", "459", ",", "11", "]", "=", "325", "\n", "v", "[", "460", ",", "11", "]", "=", "2601", "\n", "v", "[", "461", ",", "11", "]", "=", "1149", "\n", "v", "[", "462", ",", "11", "]", "=", "3259", "\n", "v", "[", "463", ",", "11", "]", "=", "2403", "\n", "v", "[", "464", ",", "11", "]", "=", "3947", "\n", "v", "[", "465", ",", "11", "]", "=", "2011", "\n", "v", "[", "466", ",", "11", "]", "=", "175", "\n", "v", "[", "467", ",", "11", "]", "=", "3389", "\n", "v", "[", "468", ",", "11", "]", "=", "3915", "\n", "v", "[", "469", ",", "11", "]", "=", "1315", "\n", "v", "[", "470", ",", "11", "]", "=", "2447", "\n", "v", "[", "471", ",", "11", "]", "=", "141", "\n", "v", "[", "472", ",", "11", "]", "=", "359", "\n", "v", "[", "473", ",", "11", "]", "=", "3609", "\n", "v", "[", "474", ",", "11", "]", "=", "3933", "\n", "v", "[", "475", ",", "11", "]", "=", "729", "\n", "v", "[", "476", ",", "11", "]", "=", "2051", "\n", "v", "[", "477", ",", "11", "]", "=", "1755", "\n", "v", "[", "478", ",", "11", "]", "=", "2149", "\n", "v", "[", "479", ",", "11", "]", "=", "2107", "\n", "v", "[", "480", ",", "11", "]", "=", "1741", "\n", "v", "[", "481", ",", "11", "]", "=", "1051", "\n", "v", "[", "482", ",", "11", "]", "=", "3681", "\n", "v", "[", "483", ",", "11", "]", "=", "471", "\n", "v", "[", "484", ",", "11", "]", "=", "1055", "\n", "v", "[", "485", ",", "11", "]", "=", "845", "\n", "v", "[", "486", ",", "11", "]", "=", "257", "\n", "v", "[", "487", ",", "11", "]", "=", "1559", "\n", "v", "[", "488", ",", "11", "]", "=", "1061", "\n", "v", "[", "489", ",", "11", "]", "=", "2803", "\n", "v", "[", "490", ",", "11", "]", "=", "2219", "\n", "v", "[", "491", ",", "11", "]", "=", "1315", "\n", "v", "[", "492", ",", "11", "]", "=", "1369", "\n", "v", "[", "493", ",", "11", "]", "=", "3211", "\n", "v", "[", "494", ",", "11", "]", "=", "4027", "\n", "v", "[", "495", ",", "11", "]", "=", "105", "\n", "v", "[", "496", ",", "11", "]", "=", "11", "\n", "v", "[", "497", ",", "11", "]", "=", "1077", "\n", "v", "[", "498", ",", "11", "]", "=", "2857", "\n", "v", "[", "499", ",", "11", "]", "=", "337", "\n", "v", "[", "500", ",", "11", "]", "=", "3553", "\n", "v", "[", "501", ",", "11", "]", "=", "3503", "\n", "v", "[", "502", ",", "11", "]", "=", "3917", "\n", "v", "[", "503", ",", "11", "]", "=", "2665", "\n", "v", "[", "504", ",", "11", "]", "=", "3823", "\n", "v", "[", "505", ",", "11", "]", "=", "3403", "\n", "v", "[", "506", ",", "11", "]", "=", "3711", "\n", "v", "[", "507", ",", "11", "]", "=", "2085", "\n", "v", "[", "508", ",", "11", "]", "=", "1103", "\n", "v", "[", "509", ",", "11", "]", "=", "1641", "\n", "v", "[", "510", ",", "11", "]", "=", "701", "\n", "v", "[", "511", ",", "11", "]", "=", "4095", "\n", "v", "[", "512", ",", "11", "]", "=", "2883", "\n", "v", "[", "513", ",", "11", "]", "=", "1435", "\n", "v", "[", "514", ",", "11", "]", "=", "653", "\n", "v", "[", "515", ",", "11", "]", "=", "2363", "\n", "v", "[", "516", ",", "11", "]", "=", "1597", "\n", "v", "[", "517", ",", "11", "]", "=", "767", "\n", "v", "[", "518", ",", "11", "]", "=", "869", "\n", "v", "[", "519", ",", "11", "]", "=", "1825", "\n", "v", "[", "520", ",", "11", "]", "=", "1117", "\n", "v", "[", "521", ",", "11", "]", "=", "1297", "\n", "v", "[", "522", ",", "11", "]", "=", "501", "\n", "v", "[", "523", ",", "11", "]", "=", "505", "\n", "v", "[", "524", ",", "11", "]", "=", "149", "\n", "v", "[", "525", ",", "11", "]", "=", "873", "\n", "v", "[", "526", ",", "11", "]", "=", "2673", "\n", "v", "[", "527", ",", "11", "]", "=", "551", "\n", "v", "[", "528", ",", "11", "]", "=", "1499", "\n", "v", "[", "529", ",", "11", "]", "=", "2793", "\n", "v", "[", "530", ",", "11", "]", "=", "3277", "\n", "v", "[", "531", ",", "11", "]", "=", "2143", "\n", "v", "[", "532", ",", "11", "]", "=", "3663", "\n", "v", "[", "533", ",", "11", "]", "=", "533", "\n", "v", "[", "534", ",", "11", "]", "=", "3991", "\n", "v", "[", "535", ",", "11", "]", "=", "575", "\n", "v", "[", "536", ",", "11", "]", "=", "1877", "\n", "v", "[", "537", ",", "11", "]", "=", "1009", "\n", "v", "[", "538", ",", "11", "]", "=", "3929", "\n", "v", "[", "539", ",", "11", "]", "=", "473", "\n", "v", "[", "540", ",", "11", "]", "=", "3009", "\n", "v", "[", "541", ",", "11", "]", "=", "2595", "\n", "v", "[", "542", ",", "11", "]", "=", "3249", "\n", "v", "[", "543", ",", "11", "]", "=", "675", "\n", "v", "[", "544", ",", "11", "]", "=", "3593", "\n", "v", "[", "545", ",", "11", "]", "=", "2453", "\n", "v", "[", "546", ",", "11", "]", "=", "1567", "\n", "v", "[", "547", ",", "11", "]", "=", "973", "\n", "v", "[", "548", ",", "11", "]", "=", "595", "\n", "v", "[", "549", ",", "11", "]", "=", "1335", "\n", "v", "[", "550", ",", "11", "]", "=", "1715", "\n", "v", "[", "551", ",", "11", "]", "=", "589", "\n", "v", "[", "552", ",", "11", "]", "=", "85", "\n", "v", "[", "553", ",", "11", "]", "=", "2265", "\n", "v", "[", "554", ",", "11", "]", "=", "3069", "\n", "v", "[", "555", ",", "11", "]", "=", "461", "\n", "v", "[", "556", ",", "11", "]", "=", "1659", "\n", "v", "[", "557", ",", "11", "]", "=", "2627", "\n", "v", "[", "558", ",", "11", "]", "=", "1307", "\n", "v", "[", "559", ",", "11", "]", "=", "1731", "\n", "v", "[", "560", ",", "11", "]", "=", "1501", "\n", "v", "[", "561", ",", "11", "]", "=", "1699", "\n", "v", "[", "562", ",", "11", "]", "=", "3545", "\n", "v", "[", "563", ",", "11", "]", "=", "3803", "\n", "v", "[", "564", ",", "11", "]", "=", "2157", "\n", "v", "[", "565", ",", "11", "]", "=", "453", "\n", "v", "[", "566", ",", "11", "]", "=", "2813", "\n", "v", "[", "567", ",", "11", "]", "=", "2047", "\n", "v", "[", "568", ",", "11", "]", "=", "2999", "\n", "v", "[", "569", ",", "11", "]", "=", "3841", "\n", "v", "[", "570", ",", "11", "]", "=", "2361", "\n", "v", "[", "571", ",", "11", "]", "=", "1079", "\n", "v", "[", "572", ",", "11", "]", "=", "573", "\n", "v", "[", "573", ",", "11", "]", "=", "69", "\n", "v", "[", "574", ",", "11", "]", "=", "1363", "\n", "v", "[", "575", ",", "11", "]", "=", "1597", "\n", "v", "[", "576", ",", "11", "]", "=", "3427", "\n", "v", "[", "577", ",", "11", "]", "=", "2899", "\n", "v", "[", "578", ",", "11", "]", "=", "2771", "\n", "v", "[", "579", ",", "11", "]", "=", "1327", "\n", "v", "[", "580", ",", "11", "]", "=", "1117", "\n", "v", "[", "581", ",", "11", "]", "=", "1523", "\n", "v", "[", "582", ",", "11", "]", "=", "3521", "\n", "v", "[", "583", ",", "11", "]", "=", "2393", "\n", "v", "[", "584", ",", "11", "]", "=", "2537", "\n", "v", "[", "585", ",", "11", "]", "=", "1979", "\n", "v", "[", "586", ",", "11", "]", "=", "3179", "\n", "v", "[", "587", ",", "11", "]", "=", "683", "\n", "v", "[", "588", ",", "11", "]", "=", "2453", "\n", "v", "[", "589", ",", "11", "]", "=", "453", "\n", "v", "[", "590", ",", "11", "]", "=", "1227", "\n", "v", "[", "591", ",", "11", "]", "=", "779", "\n", "v", "[", "592", ",", "11", "]", "=", "671", "\n", "v", "[", "593", ",", "11", "]", "=", "3483", "\n", "v", "[", "594", ",", "11", "]", "=", "2135", "\n", "v", "[", "595", ",", "11", "]", "=", "3139", "\n", "v", "[", "596", ",", "11", "]", "=", "3381", "\n", "v", "[", "597", ",", "11", "]", "=", "3945", "\n", "v", "[", "598", ",", "11", "]", "=", "57", "\n", "v", "[", "599", ",", "11", "]", "=", "1541", "\n", "v", "[", "600", ",", "11", "]", "=", "3405", "\n", "v", "[", "601", ",", "11", "]", "=", "3381", "\n", "v", "[", "602", ",", "11", "]", "=", "2371", "\n", "v", "[", "603", ",", "11", "]", "=", "2879", "\n", "v", "[", "604", ",", "11", "]", "=", "1985", "\n", "v", "[", "605", ",", "11", "]", "=", "987", "\n", "v", "[", "606", ",", "11", "]", "=", "3017", "\n", "v", "[", "607", ",", "11", "]", "=", "3031", "\n", "v", "[", "608", ",", "11", "]", "=", "3839", "\n", "v", "[", "609", ",", "11", "]", "=", "1401", "\n", "v", "[", "610", ",", "11", "]", "=", "3749", "\n", "v", "[", "611", ",", "11", "]", "=", "2977", "\n", "v", "[", "612", ",", "11", "]", "=", "681", "\n", "v", "[", "613", ",", "11", "]", "=", "1175", "\n", "v", "[", "614", ",", "11", "]", "=", "1519", "\n", "v", "[", "615", ",", "11", "]", "=", "3355", "\n", "v", "[", "616", ",", "11", "]", "=", "907", "\n", "v", "[", "617", ",", "11", "]", "=", "117", "\n", "v", "[", "618", ",", "11", "]", "=", "771", "\n", "v", "[", "619", ",", "11", "]", "=", "3741", "\n", "v", "[", "620", ",", "11", "]", "=", "3337", "\n", "v", "[", "621", ",", "11", "]", "=", "1743", "\n", "v", "[", "622", ",", "11", "]", "=", "1227", "\n", "v", "[", "623", ",", "11", "]", "=", "3335", "\n", "v", "[", "624", ",", "11", "]", "=", "2755", "\n", "v", "[", "625", ",", "11", "]", "=", "1909", "\n", "v", "[", "626", ",", "11", "]", "=", "3603", "\n", "v", "[", "627", ",", "11", "]", "=", "2397", "\n", "v", "[", "628", ",", "11", "]", "=", "653", "\n", "v", "[", "629", ",", "11", "]", "=", "87", "\n", "v", "[", "630", ",", "11", "]", "=", "2025", "\n", "v", "[", "631", ",", "11", "]", "=", "2617", "\n", "v", "[", "632", ",", "11", "]", "=", "3257", "\n", "v", "[", "633", ",", "11", "]", "=", "287", "\n", "v", "[", "634", ",", "11", "]", "=", "3051", "\n", "v", "[", "635", ",", "11", "]", "=", "3809", "\n", "v", "[", "636", ",", "11", "]", "=", "897", "\n", "v", "[", "637", ",", "11", "]", "=", "2215", "\n", "v", "[", "638", ",", "11", "]", "=", "63", "\n", "v", "[", "639", ",", "11", "]", "=", "2043", "\n", "v", "[", "640", ",", "11", "]", "=", "1757", "\n", "v", "[", "641", ",", "11", "]", "=", "3671", "\n", "v", "[", "642", ",", "11", "]", "=", "297", "\n", "v", "[", "643", ",", "11", "]", "=", "3131", "\n", "v", "[", "644", ",", "11", "]", "=", "1305", "\n", "v", "[", "645", ",", "11", "]", "=", "293", "\n", "v", "[", "646", ",", "11", "]", "=", "3865", "\n", "v", "[", "647", ",", "11", "]", "=", "3173", "\n", "v", "[", "648", ",", "11", "]", "=", "3397", "\n", "v", "[", "649", ",", "11", "]", "=", "2269", "\n", "v", "[", "650", ",", "11", "]", "=", "3673", "\n", "v", "[", "651", ",", "11", "]", "=", "717", "\n", "v", "[", "652", ",", "11", "]", "=", "3041", "\n", "v", "[", "653", ",", "11", "]", "=", "3341", "\n", "v", "[", "654", ",", "11", "]", "=", "3595", "\n", "v", "[", "655", ",", "11", "]", "=", "3819", "\n", "v", "[", "656", ",", "11", "]", "=", "2871", "\n", "v", "[", "657", ",", "11", "]", "=", "3973", "\n", "v", "[", "658", ",", "11", "]", "=", "1129", "\n", "v", "[", "659", ",", "11", "]", "=", "513", "\n", "v", "[", "660", ",", "11", "]", "=", "871", "\n", "v", "[", "661", ",", "11", "]", "=", "1485", "\n", "v", "[", "662", ",", "11", "]", "=", "3977", "\n", "v", "[", "663", ",", "11", "]", "=", "2473", "\n", "v", "[", "664", ",", "11", "]", "=", "1171", "\n", "v", "[", "665", ",", "11", "]", "=", "1143", "\n", "v", "[", "666", ",", "11", "]", "=", "3063", "\n", "v", "[", "667", ",", "11", "]", "=", "3547", "\n", "v", "[", "668", ",", "11", "]", "=", "2183", "\n", "v", "[", "669", ",", "11", "]", "=", "3993", "\n", "v", "[", "670", ",", "11", "]", "=", "133", "\n", "v", "[", "671", ",", "11", "]", "=", "2529", "\n", "v", "[", "672", ",", "11", "]", "=", "2699", "\n", "v", "[", "673", ",", "11", "]", "=", "233", "\n", "v", "[", "674", ",", "11", "]", "=", "2355", "\n", "v", "[", "675", ",", "11", "]", "=", "231", "\n", "v", "[", "676", ",", "11", "]", "=", "3241", "\n", "v", "[", "677", ",", "11", "]", "=", "611", "\n", "v", "[", "678", ",", "11", "]", "=", "1309", "\n", "v", "[", "679", ",", "11", "]", "=", "3829", "\n", "v", "[", "680", ",", "11", "]", "=", "1839", "\n", "v", "[", "681", ",", "11", "]", "=", "1495", "\n", "v", "[", "682", ",", "11", "]", "=", "301", "\n", "v", "[", "683", ",", "11", "]", "=", "1169", "\n", "v", "[", "684", ",", "11", "]", "=", "1613", "\n", "v", "[", "685", ",", "11", "]", "=", "2673", "\n", "v", "[", "686", ",", "11", "]", "=", "243", "\n", "v", "[", "687", ",", "11", "]", "=", "3601", "\n", "v", "[", "688", ",", "11", "]", "=", "3669", "\n", "v", "[", "689", ",", "11", "]", "=", "2813", "\n", "v", "[", "690", ",", "11", "]", "=", "2671", "\n", "v", "[", "691", ",", "11", "]", "=", "2679", "\n", "v", "[", "692", ",", "11", "]", "=", "3463", "\n", "v", "[", "693", ",", "11", "]", "=", "2477", "\n", "v", "[", "694", ",", "11", "]", "=", "1795", "\n", "v", "[", "695", ",", "11", "]", "=", "617", "\n", "v", "[", "696", ",", "11", "]", "=", "2317", "\n", "v", "[", "697", ",", "11", "]", "=", "1855", "\n", "v", "[", "698", ",", "11", "]", "=", "1057", "\n", "v", "[", "699", ",", "11", "]", "=", "1703", "\n", "v", "[", "700", ",", "11", "]", "=", "1761", "\n", "v", "[", "701", ",", "11", "]", "=", "2515", "\n", "v", "[", "702", ",", "11", "]", "=", "801", "\n", "v", "[", "703", ",", "11", "]", "=", "1205", "\n", "v", "[", "704", ",", "11", "]", "=", "1311", "\n", "v", "[", "705", ",", "11", "]", "=", "473", "\n", "v", "[", "706", ",", "11", "]", "=", "3963", "\n", "v", "[", "707", ",", "11", "]", "=", "697", "\n", "v", "[", "708", ",", "11", "]", "=", "1221", "\n", "v", "[", "709", ",", "11", "]", "=", "251", "\n", "v", "[", "710", ",", "11", "]", "=", "381", "\n", "v", "[", "711", ",", "11", "]", "=", "3887", "\n", "v", "[", "712", ",", "11", "]", "=", "1761", "\n", "v", "[", "713", ",", "11", "]", "=", "3093", "\n", "v", "[", "714", ",", "11", "]", "=", "3721", "\n", "v", "[", "715", ",", "11", "]", "=", "2079", "\n", "v", "[", "716", ",", "11", "]", "=", "4085", "\n", "v", "[", "717", ",", "11", "]", "=", "379", "\n", "v", "[", "718", ",", "11", "]", "=", "3601", "\n", "v", "[", "719", ",", "11", "]", "=", "3845", "\n", "v", "[", "720", ",", "11", "]", "=", "433", "\n", "v", "[", "721", ",", "11", "]", "=", "1781", "\n", "v", "[", "722", ",", "11", "]", "=", "29", "\n", "v", "[", "723", ",", "11", "]", "=", "1897", "\n", "v", "[", "724", ",", "11", "]", "=", "1599", "\n", "v", "[", "725", ",", "11", "]", "=", "2163", "\n", "v", "[", "726", ",", "11", "]", "=", "75", "\n", "v", "[", "727", ",", "11", "]", "=", "3475", "\n", "v", "[", "728", ",", "11", "]", "=", "3957", "\n", "v", "[", "729", ",", "11", "]", "=", "1641", "\n", "v", "[", "730", ",", "11", "]", "=", "3911", "\n", "v", "[", "731", ",", "11", "]", "=", "2959", "\n", "v", "[", "732", ",", "11", "]", "=", "2833", "\n", "v", "[", "733", ",", "11", "]", "=", "1279", "\n", "v", "[", "734", ",", "11", "]", "=", "1099", "\n", "v", "[", "735", ",", "11", "]", "=", "403", "\n", "v", "[", "736", ",", "11", "]", "=", "799", "\n", "v", "[", "737", ",", "11", "]", "=", "2183", "\n", "v", "[", "738", ",", "11", "]", "=", "2699", "\n", "v", "[", "739", ",", "11", "]", "=", "1711", "\n", "v", "[", "740", ",", "11", "]", "=", "2037", "\n", "v", "[", "741", ",", "11", "]", "=", "727", "\n", "v", "[", "742", ",", "11", "]", "=", "289", "\n", "v", "[", "743", ",", "11", "]", "=", "1785", "\n", "v", "[", "744", ",", "11", "]", "=", "1575", "\n", "v", "[", "745", ",", "11", "]", "=", "3633", "\n", "v", "[", "746", ",", "11", "]", "=", "2367", "\n", "v", "[", "747", ",", "11", "]", "=", "1261", "\n", "v", "[", "748", ",", "11", "]", "=", "3953", "\n", "v", "[", "749", ",", "11", "]", "=", "1735", "\n", "v", "[", "750", ",", "11", "]", "=", "171", "\n", "v", "[", "751", ",", "11", "]", "=", "1959", "\n", "v", "[", "752", ",", "11", "]", "=", "2867", "\n", "v", "[", "753", ",", "11", "]", "=", "859", "\n", "v", "[", "754", ",", "11", "]", "=", "2951", "\n", "v", "[", "755", ",", "11", "]", "=", "3211", "\n", "v", "[", "756", ",", "11", "]", "=", "15", "\n", "v", "[", "757", ",", "11", "]", "=", "1279", "\n", "v", "[", "758", ",", "11", "]", "=", "1323", "\n", "v", "[", "759", ",", "11", "]", "=", "599", "\n", "v", "[", "760", ",", "11", "]", "=", "1651", "\n", "v", "[", "761", ",", "11", "]", "=", "3951", "\n", "v", "[", "762", ",", "11", "]", "=", "1011", "\n", "v", "[", "763", ",", "11", "]", "=", "315", "\n", "v", "[", "764", ",", "11", "]", "=", "3513", "\n", "v", "[", "765", ",", "11", "]", "=", "3351", "\n", "v", "[", "766", ",", "11", "]", "=", "1725", "\n", "v", "[", "767", ",", "11", "]", "=", "3793", "\n", "v", "[", "768", ",", "11", "]", "=", "2399", "\n", "v", "[", "769", ",", "11", "]", "=", "287", "\n", "v", "[", "770", ",", "11", "]", "=", "4017", "\n", "v", "[", "771", ",", "11", "]", "=", "3571", "\n", "v", "[", "772", ",", "11", "]", "=", "1007", "\n", "v", "[", "773", ",", "11", "]", "=", "541", "\n", "v", "[", "774", ",", "11", "]", "=", "3115", "\n", "v", "[", "775", ",", "11", "]", "=", "429", "\n", "v", "[", "776", ",", "11", "]", "=", "1585", "\n", "v", "[", "777", ",", "11", "]", "=", "1285", "\n", "v", "[", "778", ",", "11", "]", "=", "755", "\n", "v", "[", "779", ",", "11", "]", "=", "1211", "\n", "v", "[", "780", ",", "11", "]", "=", "3047", "\n", "v", "[", "781", ",", "11", "]", "=", "915", "\n", "v", "[", "782", ",", "11", "]", "=", "3611", "\n", "v", "[", "783", ",", "11", "]", "=", "2697", "\n", "v", "[", "784", ",", "11", "]", "=", "2129", "\n", "v", "[", "785", ",", "11", "]", "=", "3669", "\n", "v", "[", "786", ",", "11", "]", "=", "81", "\n", "v", "[", "787", ",", "11", "]", "=", "3939", "\n", "v", "[", "788", ",", "11", "]", "=", "2437", "\n", "v", "[", "789", ",", "11", "]", "=", "915", "\n", "v", "[", "790", ",", "11", "]", "=", "779", "\n", "v", "[", "791", ",", "11", "]", "=", "3567", "\n", "v", "[", "792", ",", "11", "]", "=", "3701", "\n", "v", "[", "793", ",", "11", "]", "=", "2479", "\n", "v", "[", "794", ",", "11", "]", "=", "3807", "\n", "v", "[", "795", ",", "11", "]", "=", "1893", "\n", "v", "[", "796", ",", "11", "]", "=", "3927", "\n", "v", "[", "797", ",", "11", "]", "=", "2619", "\n", "v", "[", "798", ",", "11", "]", "=", "2543", "\n", "v", "[", "799", ",", "11", "]", "=", "3633", "\n", "v", "[", "800", ",", "11", "]", "=", "2007", "\n", "v", "[", "801", ",", "11", "]", "=", "3857", "\n", "v", "[", "802", ",", "11", "]", "=", "3837", "\n", "v", "[", "803", ",", "11", "]", "=", "487", "\n", "v", "[", "804", ",", "11", "]", "=", "1769", "\n", "v", "[", "805", ",", "11", "]", "=", "3759", "\n", "v", "[", "806", ",", "11", "]", "=", "3105", "\n", "v", "[", "807", ",", "11", "]", "=", "2727", "\n", "v", "[", "808", ",", "11", "]", "=", "3155", "\n", "v", "[", "809", ",", "11", "]", "=", "2479", "\n", "v", "[", "810", ",", "11", "]", "=", "1341", "\n", "v", "[", "811", ",", "11", "]", "=", "1657", "\n", "v", "[", "812", ",", "11", "]", "=", "2767", "\n", "v", "[", "813", ",", "11", "]", "=", "2541", "\n", "v", "[", "814", ",", "11", "]", "=", "577", "\n", "v", "[", "815", ",", "11", "]", "=", "2105", "\n", "v", "[", "816", ",", "11", "]", "=", "799", "\n", "v", "[", "817", ",", "11", "]", "=", "17", "\n", "v", "[", "818", ",", "11", "]", "=", "2871", "\n", "v", "[", "819", ",", "11", "]", "=", "3637", "\n", "v", "[", "820", ",", "11", "]", "=", "953", "\n", "v", "[", "821", ",", "11", "]", "=", "65", "\n", "v", "[", "822", ",", "11", "]", "=", "69", "\n", "v", "[", "823", ",", "11", "]", "=", "2897", "\n", "v", "[", "824", ",", "11", "]", "=", "3841", "\n", "v", "[", "825", ",", "11", "]", "=", "3559", "\n", "v", "[", "826", ",", "11", "]", "=", "4067", "\n", "v", "[", "827", ",", "11", "]", "=", "2335", "\n", "v", "[", "828", ",", "11", "]", "=", "3409", "\n", "v", "[", "829", ",", "11", "]", "=", "1087", "\n", "v", "[", "830", ",", "11", "]", "=", "425", "\n", "v", "[", "831", ",", "11", "]", "=", "2813", "\n", "v", "[", "832", ",", "11", "]", "=", "1705", "\n", "v", "[", "833", ",", "11", "]", "=", "1701", "\n", "v", "[", "834", ",", "11", "]", "=", "1237", "\n", "v", "[", "835", ",", "11", "]", "=", "821", "\n", "v", "[", "836", ",", "11", "]", "=", "1375", "\n", "v", "[", "837", ",", "11", "]", "=", "3673", "\n", "v", "[", "838", ",", "11", "]", "=", "2693", "\n", "v", "[", "839", ",", "11", "]", "=", "3925", "\n", "v", "[", "840", ",", "11", "]", "=", "1541", "\n", "v", "[", "841", ",", "11", "]", "=", "1871", "\n", "v", "[", "842", ",", "11", "]", "=", "2285", "\n", "v", "[", "843", ",", "11", "]", "=", "847", "\n", "v", "[", "844", ",", "11", "]", "=", "4035", "\n", "v", "[", "845", ",", "11", "]", "=", "1101", "\n", "v", "[", "846", ",", "11", "]", "=", "2029", "\n", "v", "[", "847", ",", "11", "]", "=", "855", "\n", "v", "[", "848", ",", "11", "]", "=", "2733", "\n", "v", "[", "849", ",", "11", "]", "=", "2503", "\n", "v", "[", "850", ",", "11", "]", "=", "121", "\n", "v", "[", "851", ",", "11", "]", "=", "2855", "\n", "v", "[", "852", ",", "11", "]", "=", "1069", "\n", "v", "[", "853", ",", "11", "]", "=", "3463", "\n", "v", "[", "854", ",", "11", "]", "=", "3505", "\n", "v", "[", "855", ",", "11", "]", "=", "1539", "\n", "v", "[", "856", ",", "11", "]", "=", "607", "\n", "v", "[", "857", ",", "11", "]", "=", "1349", "\n", "v", "[", "858", ",", "11", "]", "=", "575", "\n", "v", "[", "859", ",", "11", "]", "=", "2301", "\n", "v", "[", "860", ",", "11", "]", "=", "2321", "\n", "v", "[", "861", ",", "11", "]", "=", "1101", "\n", "v", "[", "862", ",", "11", "]", "=", "333", "\n", "v", "[", "863", ",", "11", "]", "=", "291", "\n", "v", "[", "864", ",", "11", "]", "=", "2171", "\n", "v", "[", "865", ",", "11", "]", "=", "4085", "\n", "v", "[", "866", ",", "11", "]", "=", "2173", "\n", "v", "[", "867", ",", "11", "]", "=", "2541", "\n", "v", "[", "868", ",", "11", "]", "=", "1195", "\n", "v", "[", "869", ",", "11", "]", "=", "925", "\n", "v", "[", "870", ",", "11", "]", "=", "4039", "\n", "v", "[", "871", ",", "11", "]", "=", "1379", "\n", "v", "[", "872", ",", "11", "]", "=", "699", "\n", "v", "[", "873", ",", "11", "]", "=", "1979", "\n", "v", "[", "874", ",", "11", "]", "=", "275", "\n", "v", "[", "875", ",", "11", "]", "=", "953", "\n", "v", "[", "876", ",", "11", "]", "=", "1755", "\n", "v", "[", "877", ",", "11", "]", "=", "1643", "\n", "v", "[", "878", ",", "11", "]", "=", "325", "\n", "v", "[", "879", ",", "11", "]", "=", "101", "\n", "v", "[", "880", ",", "11", "]", "=", "2263", "\n", "v", "[", "881", ",", "11", "]", "=", "3329", "\n", "v", "[", "882", ",", "11", "]", "=", "3673", "\n", "v", "[", "883", ",", "11", "]", "=", "3413", "\n", "v", "[", "884", ",", "11", "]", "=", "1977", "\n", "v", "[", "885", ",", "11", "]", "=", "2727", "\n", "v", "[", "886", ",", "11", "]", "=", "2313", "\n", "v", "[", "887", ",", "11", "]", "=", "1419", "\n", "v", "[", "888", ",", "11", "]", "=", "887", "\n", "v", "[", "889", ",", "11", "]", "=", "609", "\n", "v", "[", "890", ",", "11", "]", "=", "2475", "\n", "v", "[", "891", ",", "11", "]", "=", "591", "\n", "v", "[", "892", ",", "11", "]", "=", "2613", "\n", "v", "[", "893", ",", "11", "]", "=", "2081", "\n", "v", "[", "894", ",", "11", "]", "=", "3805", "\n", "v", "[", "895", ",", "11", "]", "=", "3435", "\n", "v", "[", "896", ",", "11", "]", "=", "2409", "\n", "v", "[", "897", ",", "11", "]", "=", "111", "\n", "v", "[", "898", ",", "11", "]", "=", "3557", "\n", "v", "[", "899", ",", "11", "]", "=", "3607", "\n", "v", "[", "900", ",", "11", "]", "=", "903", "\n", "v", "[", "901", ",", "11", "]", "=", "231", "\n", "v", "[", "902", ",", "11", "]", "=", "3059", "\n", "v", "[", "903", ",", "11", "]", "=", "473", "\n", "v", "[", "904", ",", "11", "]", "=", "2959", "\n", "v", "[", "905", ",", "11", "]", "=", "2925", "\n", "v", "[", "906", ",", "11", "]", "=", "3861", "\n", "v", "[", "907", ",", "11", "]", "=", "2043", "\n", "v", "[", "908", ",", "11", "]", "=", "3887", "\n", "v", "[", "909", ",", "11", "]", "=", "351", "\n", "v", "[", "910", ",", "11", "]", "=", "2865", "\n", "v", "[", "911", ",", "11", "]", "=", "369", "\n", "v", "[", "912", ",", "11", "]", "=", "1377", "\n", "v", "[", "913", ",", "11", "]", "=", "2639", "\n", "v", "[", "914", ",", "11", "]", "=", "1261", "\n", "v", "[", "915", ",", "11", "]", "=", "3625", "\n", "v", "[", "916", ",", "11", "]", "=", "3279", "\n", "v", "[", "917", ",", "11", "]", "=", "2201", "\n", "v", "[", "918", ",", "11", "]", "=", "2949", "\n", "v", "[", "919", ",", "11", "]", "=", "3049", "\n", "v", "[", "920", ",", "11", "]", "=", "449", "\n", "v", "[", "921", ",", "11", "]", "=", "1297", "\n", "v", "[", "922", ",", "11", "]", "=", "897", "\n", "v", "[", "923", ",", "11", "]", "=", "1891", "\n", "v", "[", "924", ",", "11", "]", "=", "411", "\n", "v", "[", "925", ",", "11", "]", "=", "2773", "\n", "v", "[", "926", ",", "11", "]", "=", "749", "\n", "v", "[", "927", ",", "11", "]", "=", "2753", "\n", "v", "[", "928", ",", "11", "]", "=", "1825", "\n", "v", "[", "929", ",", "11", "]", "=", "853", "\n", "v", "[", "930", ",", "11", "]", "=", "2775", "\n", "v", "[", "931", ",", "11", "]", "=", "3547", "\n", "v", "[", "932", ",", "11", "]", "=", "3923", "\n", "v", "[", "933", ",", "11", "]", "=", "3923", "\n", "v", "[", "934", ",", "11", "]", "=", "987", "\n", "v", "[", "935", ",", "11", "]", "=", "3723", "\n", "v", "[", "936", ",", "11", "]", "=", "2189", "\n", "v", "[", "937", ",", "11", "]", "=", "3877", "\n", "v", "[", "938", ",", "11", "]", "=", "3577", "\n", "v", "[", "939", ",", "11", "]", "=", "297", "\n", "v", "[", "940", ",", "11", "]", "=", "2763", "\n", "v", "[", "941", ",", "11", "]", "=", "1845", "\n", "v", "[", "942", ",", "11", "]", "=", "3083", "\n", "v", "[", "943", ",", "11", "]", "=", "2951", "\n", "v", "[", "944", ",", "11", "]", "=", "483", "\n", "v", "[", "945", ",", "11", "]", "=", "2169", "\n", "v", "[", "946", ",", "11", "]", "=", "3985", "\n", "v", "[", "947", ",", "11", "]", "=", "245", "\n", "v", "[", "948", ",", "11", "]", "=", "3655", "\n", "v", "[", "949", ",", "11", "]", "=", "3441", "\n", "v", "[", "950", ",", "11", "]", "=", "1023", "\n", "v", "[", "951", ",", "11", "]", "=", "235", "\n", "v", "[", "952", ",", "11", "]", "=", "835", "\n", "v", "[", "953", ",", "11", "]", "=", "3693", "\n", "v", "[", "954", ",", "11", "]", "=", "3585", "\n", "v", "[", "955", ",", "11", "]", "=", "327", "\n", "v", "[", "956", ",", "11", "]", "=", "1003", "\n", "v", "[", "957", ",", "11", "]", "=", "543", "\n", "v", "[", "958", ",", "11", "]", "=", "3059", "\n", "v", "[", "959", ",", "11", "]", "=", "2637", "\n", "v", "[", "960", ",", "11", "]", "=", "2923", "\n", "v", "[", "961", ",", "11", "]", "=", "87", "\n", "v", "[", "962", ",", "11", "]", "=", "3617", "\n", "v", "[", "963", ",", "11", "]", "=", "1031", "\n", "v", "[", "964", ",", "11", "]", "=", "1043", "\n", "v", "[", "965", ",", "11", "]", "=", "903", "\n", "v", "[", "966", ",", "11", "]", "=", "2913", "\n", "v", "[", "967", ",", "11", "]", "=", "2177", "\n", "v", "[", "968", ",", "11", "]", "=", "2641", "\n", "v", "[", "969", ",", "11", "]", "=", "3279", "\n", "v", "[", "970", ",", "11", "]", "=", "389", "\n", "v", "[", "971", ",", "11", "]", "=", "2009", "\n", "v", "[", "972", ",", "11", "]", "=", "525", "\n", "v", "[", "973", ",", "11", "]", "=", "4085", "\n", "v", "[", "974", ",", "11", "]", "=", "3299", "\n", "v", "[", "975", ",", "11", "]", "=", "987", "\n", "v", "[", "976", ",", "11", "]", "=", "2409", "\n", "v", "[", "977", ",", "11", "]", "=", "813", "\n", "v", "[", "978", ",", "11", "]", "=", "2683", "\n", "v", "[", "979", ",", "11", "]", "=", "373", "\n", "v", "[", "980", ",", "11", "]", "=", "2695", "\n", "v", "[", "981", ",", "11", "]", "=", "3775", "\n", "v", "[", "982", ",", "11", "]", "=", "2375", "\n", "v", "[", "983", ",", "11", "]", "=", "1119", "\n", "v", "[", "984", ",", "11", "]", "=", "2791", "\n", "v", "[", "985", ",", "11", "]", "=", "223", "\n", "v", "[", "986", ",", "11", "]", "=", "325", "\n", "v", "[", "987", ",", "11", "]", "=", "587", "\n", "v", "[", "988", ",", "11", "]", "=", "1379", "\n", "v", "[", "989", ",", "11", "]", "=", "2877", "\n", "v", "[", "990", ",", "11", "]", "=", "2867", "\n", "v", "[", "991", ",", "11", "]", "=", "3793", "\n", "v", "[", "992", ",", "11", "]", "=", "655", "\n", "v", "[", "993", ",", "11", "]", "=", "831", "\n", "v", "[", "994", ",", "11", "]", "=", "3425", "\n", "v", "[", "995", ",", "11", "]", "=", "1663", "\n", "v", "[", "996", ",", "11", "]", "=", "1681", "\n", "v", "[", "997", ",", "11", "]", "=", "2657", "\n", "v", "[", "998", ",", "11", "]", "=", "1865", "\n", "v", "[", "999", ",", "11", "]", "=", "3943", "\n", "v", "[", "1000", ",", "11", "]", "=", "2977", "\n", "v", "[", "1001", ",", "11", "]", "=", "1979", "\n", "v", "[", "1002", ",", "11", "]", "=", "2271", "\n", "v", "[", "1003", ",", "11", "]", "=", "3247", "\n", "v", "[", "1004", ",", "11", "]", "=", "1267", "\n", "v", "[", "1005", ",", "11", "]", "=", "1747", "\n", "v", "[", "1006", ",", "11", "]", "=", "811", "\n", "v", "[", "1007", ",", "11", "]", "=", "159", "\n", "v", "[", "1008", ",", "11", "]", "=", "429", "\n", "v", "[", "1009", ",", "11", "]", "=", "2001", "\n", "v", "[", "1010", ",", "11", "]", "=", "1195", "\n", "v", "[", "1011", ",", "11", "]", "=", "3065", "\n", "v", "[", "1012", ",", "11", "]", "=", "553", "\n", "v", "[", "1013", ",", "11", "]", "=", "1499", "\n", "v", "[", "1014", ",", "11", "]", "=", "3529", "\n", "v", "[", "1015", ",", "11", "]", "=", "1081", "\n", "v", "[", "1016", ",", "11", "]", "=", "2877", "\n", "v", "[", "1017", ",", "11", "]", "=", "3077", "\n", "v", "[", "1018", ",", "11", "]", "=", "845", "\n", "v", "[", "1019", ",", "11", "]", "=", "1793", "\n", "v", "[", "1020", ",", "11", "]", "=", "2409", "\n", "v", "[", "1021", ",", "11", "]", "=", "3995", "\n", "v", "[", "1022", ",", "11", "]", "=", "2559", "\n", "v", "[", "1023", ",", "11", "]", "=", "4081", "\n", "v", "[", "1024", ",", "11", "]", "=", "1195", "\n", "v", "[", "1025", ",", "11", "]", "=", "2955", "\n", "v", "[", "1026", ",", "11", "]", "=", "1117", "\n", "v", "[", "1027", ",", "11", "]", "=", "1409", "\n", "v", "[", "1028", ",", "11", "]", "=", "785", "\n", "v", "[", "1029", ",", "11", "]", "=", "287", "\n", "v", "[", "1030", ",", "11", "]", "=", "1521", "\n", "v", "[", "1031", ",", "11", "]", "=", "1607", "\n", "v", "[", "1032", ",", "11", "]", "=", "85", "\n", "v", "[", "1033", ",", "11", "]", "=", "3055", "\n", "v", "[", "1034", ",", "11", "]", "=", "3123", "\n", "v", "[", "1035", ",", "11", "]", "=", "2533", "\n", "v", "[", "1036", ",", "11", "]", "=", "2329", "\n", "v", "[", "1037", ",", "11", "]", "=", "3477", "\n", "v", "[", "1038", ",", "11", "]", "=", "799", "\n", "v", "[", "1039", ",", "11", "]", "=", "3683", "\n", "v", "[", "1040", ",", "11", "]", "=", "3715", "\n", "v", "[", "1041", ",", "11", "]", "=", "337", "\n", "v", "[", "1042", ",", "11", "]", "=", "3139", "\n", "v", "[", "1043", ",", "11", "]", "=", "3311", "\n", "v", "[", "1044", ",", "11", "]", "=", "431", "\n", "v", "[", "1045", ",", "11", "]", "=", "3511", "\n", "v", "[", "1046", ",", "11", "]", "=", "2299", "\n", "v", "[", "1047", ",", "11", "]", "=", "365", "\n", "v", "[", "1048", ",", "11", "]", "=", "2941", "\n", "v", "[", "1049", ",", "11", "]", "=", "3067", "\n", "v", "[", "1050", ",", "11", "]", "=", "1331", "\n", "v", "[", "1051", ",", "11", "]", "=", "1081", "\n", "v", "[", "1052", ",", "11", "]", "=", "1097", "\n", "v", "[", "1053", ",", "11", "]", "=", "2853", "\n", "v", "[", "1054", ",", "11", "]", "=", "2299", "\n", "v", "[", "1055", ",", "11", "]", "=", "495", "\n", "v", "[", "1056", ",", "11", "]", "=", "1745", "\n", "v", "[", "1057", ",", "11", "]", "=", "749", "\n", "v", "[", "1058", ",", "11", "]", "=", "3819", "\n", "v", "[", "1059", ",", "11", "]", "=", "619", "\n", "v", "[", "1060", ",", "11", "]", "=", "1059", "\n", "v", "[", "1061", ",", "11", "]", "=", "3559", "\n", "v", "[", "1062", ",", "11", "]", "=", "183", "\n", "v", "[", "1063", ",", "11", "]", "=", "3743", "\n", "v", "[", "1064", ",", "11", "]", "=", "723", "\n", "v", "[", "1065", ",", "11", "]", "=", "949", "\n", "v", "[", "1066", ",", "11", "]", "=", "3501", "\n", "v", "[", "1067", ",", "11", "]", "=", "733", "\n", "v", "[", "1068", ",", "11", "]", "=", "2599", "\n", "v", "[", "1069", ",", "11", "]", "=", "3983", "\n", "v", "[", "1070", ",", "11", "]", "=", "3961", "\n", "v", "[", "1071", ",", "11", "]", "=", "911", "\n", "v", "[", "1072", ",", "11", "]", "=", "1899", "\n", "v", "[", "1073", ",", "11", "]", "=", "985", "\n", "v", "[", "1074", ",", "11", "]", "=", "2493", "\n", "v", "[", "1075", ",", "11", "]", "=", "1795", "\n", "v", "[", "1076", ",", "11", "]", "=", "653", "\n", "v", "[", "1077", ",", "11", "]", "=", "157", "\n", "v", "[", "1078", ",", "11", "]", "=", "433", "\n", "v", "[", "1079", ",", "11", "]", "=", "2361", "\n", "v", "[", "1080", ",", "11", "]", "=", "3093", "\n", "v", "[", "1081", ",", "11", "]", "=", "3119", "\n", "v", "[", "1082", ",", "11", "]", "=", "3679", "\n", "v", "[", "1083", ",", "11", "]", "=", "2367", "\n", "v", "[", "1084", ",", "11", "]", "=", "1701", "\n", "v", "[", "1085", ",", "11", "]", "=", "1445", "\n", "v", "[", "1086", ",", "11", "]", "=", "1321", "\n", "v", "[", "1087", ",", "11", "]", "=", "2397", "\n", "v", "[", "1088", ",", "11", "]", "=", "1241", "\n", "v", "[", "1089", ",", "11", "]", "=", "3305", "\n", "v", "[", "1090", ",", "11", "]", "=", "3985", "\n", "v", "[", "1091", ",", "11", "]", "=", "2349", "\n", "v", "[", "1092", ",", "11", "]", "=", "4067", "\n", "v", "[", "1093", ",", "11", "]", "=", "3805", "\n", "v", "[", "1094", ",", "11", "]", "=", "3073", "\n", "v", "[", "1095", ",", "11", "]", "=", "2837", "\n", "v", "[", "1096", ",", "11", "]", "=", "1567", "\n", "v", "[", "1097", ",", "11", "]", "=", "3783", "\n", "v", "[", "1098", ",", "11", "]", "=", "451", "\n", "v", "[", "1099", ",", "11", "]", "=", "2441", "\n", "v", "[", "1100", ",", "11", "]", "=", "1181", "\n", "v", "[", "1101", ",", "11", "]", "=", "487", "\n", "v", "[", "1102", ",", "11", "]", "=", "543", "\n", "v", "[", "1103", ",", "11", "]", "=", "1201", "\n", "v", "[", "1104", ",", "11", "]", "=", "3735", "\n", "v", "[", "1105", ",", "11", "]", "=", "2517", "\n", "v", "[", "1106", ",", "11", "]", "=", "733", "\n", "v", "[", "1107", ",", "11", "]", "=", "1535", "\n", "v", "[", "1108", ",", "11", "]", "=", "2175", "\n", "v", "[", "1109", ",", "11", "]", "=", "3613", "\n", "v", "[", "1110", ",", "11", "]", "=", "3019", "\n", "\n", "v", "[", "481", ",", "12", "]", "=", "2319", "\n", "v", "[", "482", ",", "12", "]", "=", "653", "\n", "v", "[", "483", ",", "12", "]", "=", "1379", "\n", "v", "[", "484", ",", "12", "]", "=", "1675", "\n", "v", "[", "485", ",", "12", "]", "=", "1951", "\n", "v", "[", "486", ",", "12", "]", "=", "7075", "\n", "v", "[", "487", ",", "12", "]", "=", "2087", "\n", "v", "[", "488", ",", "12", "]", "=", "7147", "\n", "v", "[", "489", ",", "12", "]", "=", "1427", "\n", "v", "[", "490", ",", "12", "]", "=", "893", "\n", "v", "[", "491", ",", "12", "]", "=", "171", "\n", "v", "[", "492", ",", "12", "]", "=", "2019", "\n", "v", "[", "493", ",", "12", "]", "=", "7235", "\n", "v", "[", "494", ",", "12", "]", "=", "5697", "\n", "v", "[", "495", ",", "12", "]", "=", "3615", "\n", "v", "[", "496", ",", "12", "]", "=", "1961", "\n", "v", "[", "497", ",", "12", "]", "=", "7517", "\n", "v", "[", "498", ",", "12", "]", "=", "6849", "\n", "v", "[", "499", ",", "12", "]", "=", "2893", "\n", "v", "[", "500", ",", "12", "]", "=", "1883", "\n", "v", "[", "501", ",", "12", "]", "=", "2863", "\n", "v", "[", "502", ",", "12", "]", "=", "2173", "\n", "v", "[", "503", ",", "12", "]", "=", "4543", "\n", "v", "[", "504", ",", "12", "]", "=", "73", "\n", "v", "[", "505", ",", "12", "]", "=", "381", "\n", "v", "[", "506", ",", "12", "]", "=", "3893", "\n", "v", "[", "507", ",", "12", "]", "=", "6045", "\n", "v", "[", "508", ",", "12", "]", "=", "1643", "\n", "v", "[", "509", ",", "12", "]", "=", "7669", "\n", "v", "[", "510", ",", "12", "]", "=", "1027", "\n", "v", "[", "511", ",", "12", "]", "=", "1549", "\n", "v", "[", "512", ",", "12", "]", "=", "3983", "\n", "v", "[", "513", ",", "12", "]", "=", "1985", "\n", "v", "[", "514", ",", "12", "]", "=", "6589", "\n", "v", "[", "515", ",", "12", "]", "=", "7497", "\n", "v", "[", "516", ",", "12", "]", "=", "2745", "\n", "v", "[", "517", ",", "12", "]", "=", "2375", "\n", "v", "[", "518", ",", "12", "]", "=", "7047", "\n", "v", "[", "519", ",", "12", "]", "=", "1117", "\n", "v", "[", "520", ",", "12", "]", "=", "1171", "\n", "v", "[", "521", ",", "12", "]", "=", "1975", "\n", "v", "[", "522", ",", "12", "]", "=", "5199", "\n", "v", "[", "523", ",", "12", "]", "=", "3915", "\n", "v", "[", "524", ",", "12", "]", "=", "3695", "\n", "v", "[", "525", ",", "12", "]", "=", "8113", "\n", "v", "[", "526", ",", "12", "]", "=", "4303", "\n", "v", "[", "527", ",", "12", "]", "=", "3773", "\n", "v", "[", "528", ",", "12", "]", "=", "7705", "\n", "v", "[", "529", ",", "12", "]", "=", "6855", "\n", "v", "[", "530", ",", "12", "]", "=", "1675", "\n", "v", "[", "531", ",", "12", "]", "=", "2245", "\n", "v", "[", "532", ",", "12", "]", "=", "2817", "\n", "v", "[", "533", ",", "12", "]", "=", "1719", "\n", "v", "[", "534", ",", "12", "]", "=", "569", "\n", "v", "[", "535", ",", "12", "]", "=", "1021", "\n", "v", "[", "536", ",", "12", "]", "=", "2077", "\n", "v", "[", "537", ",", "12", "]", "=", "5945", "\n", "v", "[", "538", ",", "12", "]", "=", "1833", "\n", "v", "[", "539", ",", "12", "]", "=", "2631", "\n", "v", "[", "540", ",", "12", "]", "=", "4851", "\n", "v", "[", "541", ",", "12", "]", "=", "6371", "\n", "v", "[", "542", ",", "12", "]", "=", "833", "\n", "v", "[", "543", ",", "12", "]", "=", "7987", "\n", "v", "[", "544", ",", "12", "]", "=", "331", "\n", "v", "[", "545", ",", "12", "]", "=", "1899", "\n", "v", "[", "546", ",", "12", "]", "=", "8093", "\n", "v", "[", "547", ",", "12", "]", "=", "6719", "\n", "v", "[", "548", ",", "12", "]", "=", "6903", "\n", "v", "[", "549", ",", "12", "]", "=", "5903", "\n", "v", "[", "550", ",", "12", "]", "=", "5657", "\n", "v", "[", "551", ",", "12", "]", "=", "5007", "\n", "v", "[", "552", ",", "12", "]", "=", "2689", "\n", "v", "[", "553", ",", "12", "]", "=", "6637", "\n", "v", "[", "554", ",", "12", "]", "=", "2675", "\n", "v", "[", "555", ",", "12", "]", "=", "1645", "\n", "v", "[", "556", ",", "12", "]", "=", "1819", "\n", "v", "[", "557", ",", "12", "]", "=", "689", "\n", "v", "[", "558", ",", "12", "]", "=", "6709", "\n", "v", "[", "559", ",", "12", "]", "=", "7717", "\n", "v", "[", "560", ",", "12", "]", "=", "6295", "\n", "v", "[", "561", ",", "12", "]", "=", "7013", "\n", "v", "[", "562", ",", "12", "]", "=", "7695", "\n", "v", "[", "563", ",", "12", "]", "=", "3705", "\n", "v", "[", "564", ",", "12", "]", "=", "7069", "\n", "v", "[", "565", ",", "12", "]", "=", "2621", "\n", "v", "[", "566", ",", "12", "]", "=", "3631", "\n", "v", "[", "567", ",", "12", "]", "=", "6571", "\n", "v", "[", "568", ",", "12", "]", "=", "6259", "\n", "v", "[", "569", ",", "12", "]", "=", "7261", "\n", "v", "[", "570", ",", "12", "]", "=", "3397", "\n", "v", "[", "571", ",", "12", "]", "=", "7645", "\n", "v", "[", "572", ",", "12", "]", "=", "1115", "\n", "v", "[", "573", ",", "12", "]", "=", "4753", "\n", "v", "[", "574", ",", "12", "]", "=", "2047", "\n", "v", "[", "575", ",", "12", "]", "=", "7579", "\n", "v", "[", "576", ",", "12", "]", "=", "2271", "\n", "v", "[", "577", ",", "12", "]", "=", "5403", "\n", "v", "[", "578", ",", "12", "]", "=", "4911", "\n", "v", "[", "579", ",", "12", "]", "=", "7629", "\n", "v", "[", "580", ",", "12", "]", "=", "4225", "\n", "v", "[", "581", ",", "12", "]", "=", "1209", "\n", "v", "[", "582", ",", "12", "]", "=", "6955", "\n", "v", "[", "583", ",", "12", "]", "=", "6951", "\n", "v", "[", "584", ",", "12", "]", "=", "1829", "\n", "v", "[", "585", ",", "12", "]", "=", "5579", "\n", "v", "[", "586", ",", "12", "]", "=", "5231", "\n", "v", "[", "587", ",", "12", "]", "=", "1783", "\n", "v", "[", "588", ",", "12", "]", "=", "4285", "\n", "v", "[", "589", ",", "12", "]", "=", "7425", "\n", "v", "[", "590", ",", "12", "]", "=", "599", "\n", "v", "[", "591", ",", "12", "]", "=", "5785", "\n", "v", "[", "592", ",", "12", "]", "=", "3275", "\n", "v", "[", "593", ",", "12", "]", "=", "5643", "\n", "v", "[", "594", ",", "12", "]", "=", "2263", "\n", "v", "[", "595", ",", "12", "]", "=", "657", "\n", "v", "[", "596", ",", "12", "]", "=", "6769", "\n", "v", "[", "597", ",", "12", "]", "=", "6261", "\n", "v", "[", "598", ",", "12", "]", "=", "1251", "\n", "v", "[", "599", ",", "12", "]", "=", "3249", "\n", "v", "[", "600", ",", "12", "]", "=", "4447", "\n", "v", "[", "601", ",", "12", "]", "=", "4111", "\n", "v", "[", "602", ",", "12", "]", "=", "3991", "\n", "v", "[", "603", ",", "12", "]", "=", "1215", "\n", "v", "[", "604", ",", "12", "]", "=", "131", "\n", "v", "[", "605", ",", "12", "]", "=", "4397", "\n", "v", "[", "606", ",", "12", "]", "=", "3487", "\n", "v", "[", "607", ",", "12", "]", "=", "7585", "\n", "v", "[", "608", ",", "12", "]", "=", "5565", "\n", "v", "[", "609", ",", "12", "]", "=", "7199", "\n", "v", "[", "610", ",", "12", "]", "=", "3573", "\n", "v", "[", "611", ",", "12", "]", "=", "7105", "\n", "v", "[", "612", ",", "12", "]", "=", "7409", "\n", "v", "[", "613", ",", "12", "]", "=", "1671", "\n", "v", "[", "614", ",", "12", "]", "=", "949", "\n", "v", "[", "615", ",", "12", "]", "=", "3889", "\n", "v", "[", "616", ",", "12", "]", "=", "5971", "\n", "v", "[", "617", ",", "12", "]", "=", "3333", "\n", "v", "[", "618", ",", "12", "]", "=", "225", "\n", "v", "[", "619", ",", "12", "]", "=", "3647", "\n", "v", "[", "620", ",", "12", "]", "=", "5403", "\n", "v", "[", "621", ",", "12", "]", "=", "3409", "\n", "v", "[", "622", ",", "12", "]", "=", "7459", "\n", "v", "[", "623", ",", "12", "]", "=", "6879", "\n", "v", "[", "624", ",", "12", "]", "=", "5789", "\n", "v", "[", "625", ",", "12", "]", "=", "6567", "\n", "v", "[", "626", ",", "12", "]", "=", "5581", "\n", "v", "[", "627", ",", "12", "]", "=", "4919", "\n", "v", "[", "628", ",", "12", "]", "=", "1927", "\n", "v", "[", "629", ",", "12", "]", "=", "4407", "\n", "v", "[", "630", ",", "12", "]", "=", "8085", "\n", "v", "[", "631", ",", "12", "]", "=", "4691", "\n", "v", "[", "632", ",", "12", "]", "=", "611", "\n", "v", "[", "633", ",", "12", "]", "=", "3005", "\n", "v", "[", "634", ",", "12", "]", "=", "591", "\n", "v", "[", "635", ",", "12", "]", "=", "753", "\n", "v", "[", "636", ",", "12", "]", "=", "589", "\n", "v", "[", "637", ",", "12", "]", "=", "171", "\n", "v", "[", "638", ",", "12", "]", "=", "5729", "\n", "v", "[", "639", ",", "12", "]", "=", "5891", "\n", "v", "[", "640", ",", "12", "]", "=", "1033", "\n", "v", "[", "641", ",", "12", "]", "=", "3049", "\n", "v", "[", "642", ",", "12", "]", "=", "6567", "\n", "v", "[", "643", ",", "12", "]", "=", "5257", "\n", "v", "[", "644", ",", "12", "]", "=", "8003", "\n", "v", "[", "645", ",", "12", "]", "=", "1757", "\n", "v", "[", "646", ",", "12", "]", "=", "4489", "\n", "v", "[", "647", ",", "12", "]", "=", "4923", "\n", "v", "[", "648", ",", "12", "]", "=", "6379", "\n", "v", "[", "649", ",", "12", "]", "=", "5171", "\n", "v", "[", "650", ",", "12", "]", "=", "1757", "\n", "v", "[", "651", ",", "12", "]", "=", "689", "\n", "v", "[", "652", ",", "12", "]", "=", "3081", "\n", "v", "[", "653", ",", "12", "]", "=", "1389", "\n", "v", "[", "654", ",", "12", "]", "=", "4113", "\n", "v", "[", "655", ",", "12", "]", "=", "455", "\n", "v", "[", "656", ",", "12", "]", "=", "2761", "\n", "v", "[", "657", ",", "12", "]", "=", "847", "\n", "v", "[", "658", ",", "12", "]", "=", "7575", "\n", "v", "[", "659", ",", "12", "]", "=", "5829", "\n", "v", "[", "660", ",", "12", "]", "=", "633", "\n", "v", "[", "661", ",", "12", "]", "=", "6629", "\n", "v", "[", "662", ",", "12", "]", "=", "1103", "\n", "v", "[", "663", ",", "12", "]", "=", "7635", "\n", "v", "[", "664", ",", "12", "]", "=", "803", "\n", "v", "[", "665", ",", "12", "]", "=", "6175", "\n", "v", "[", "666", ",", "12", "]", "=", "6587", "\n", "v", "[", "667", ",", "12", "]", "=", "2711", "\n", "v", "[", "668", ",", "12", "]", "=", "3879", "\n", "v", "[", "669", ",", "12", "]", "=", "67", "\n", "v", "[", "670", ",", "12", "]", "=", "1179", "\n", "v", "[", "671", ",", "12", "]", "=", "4761", "\n", "v", "[", "672", ",", "12", "]", "=", "7281", "\n", "v", "[", "673", ",", "12", "]", "=", "1557", "\n", "v", "[", "674", ",", "12", "]", "=", "3379", "\n", "v", "[", "675", ",", "12", "]", "=", "2459", "\n", "v", "[", "676", ",", "12", "]", "=", "4273", "\n", "v", "[", "677", ",", "12", "]", "=", "4127", "\n", "v", "[", "678", ",", "12", "]", "=", "7147", "\n", "v", "[", "679", ",", "12", "]", "=", "35", "\n", "v", "[", "680", ",", "12", "]", "=", "3549", "\n", "v", "[", "681", ",", "12", "]", "=", "395", "\n", "v", "[", "682", ",", "12", "]", "=", "3735", "\n", "v", "[", "683", ",", "12", "]", "=", "5787", "\n", "v", "[", "684", ",", "12", "]", "=", "4179", "\n", "v", "[", "685", ",", "12", "]", "=", "5889", "\n", "v", "[", "686", ",", "12", "]", "=", "5057", "\n", "v", "[", "687", ",", "12", "]", "=", "7473", "\n", "v", "[", "688", ",", "12", "]", "=", "4713", "\n", "v", "[", "689", ",", "12", "]", "=", "2133", "\n", "v", "[", "690", ",", "12", "]", "=", "2897", "\n", "v", "[", "691", ",", "12", "]", "=", "1841", "\n", "v", "[", "692", ",", "12", "]", "=", "2125", "\n", "v", "[", "693", ",", "12", "]", "=", "1029", "\n", "v", "[", "694", ",", "12", "]", "=", "1695", "\n", "v", "[", "695", ",", "12", "]", "=", "6523", "\n", "v", "[", "696", ",", "12", "]", "=", "1143", "\n", "v", "[", "697", ",", "12", "]", "=", "5105", "\n", "v", "[", "698", ",", "12", "]", "=", "7133", "\n", "v", "[", "699", ",", "12", "]", "=", "3351", "\n", "v", "[", "700", ",", "12", "]", "=", "2775", "\n", "v", "[", "701", ",", "12", "]", "=", "3971", "\n", "v", "[", "702", ",", "12", "]", "=", "4503", "\n", "v", "[", "703", ",", "12", "]", "=", "7589", "\n", "v", "[", "704", ",", "12", "]", "=", "5155", "\n", "v", "[", "705", ",", "12", "]", "=", "4305", "\n", "v", "[", "706", ",", "12", "]", "=", "1641", "\n", "v", "[", "707", ",", "12", "]", "=", "4717", "\n", "v", "[", "708", ",", "12", "]", "=", "2427", "\n", "v", "[", "709", ",", "12", "]", "=", "5617", "\n", "v", "[", "710", ",", "12", "]", "=", "1267", "\n", "v", "[", "711", ",", "12", "]", "=", "399", "\n", "v", "[", "712", ",", "12", "]", "=", "5831", "\n", "v", "[", "713", ",", "12", "]", "=", "4305", "\n", "v", "[", "714", ",", "12", "]", "=", "4241", "\n", "v", "[", "715", ",", "12", "]", "=", "3395", "\n", "v", "[", "716", ",", "12", "]", "=", "3045", "\n", "v", "[", "717", ",", "12", "]", "=", "4899", "\n", "v", "[", "718", ",", "12", "]", "=", "1713", "\n", "v", "[", "719", ",", "12", "]", "=", "171", "\n", "v", "[", "720", ",", "12", "]", "=", "411", "\n", "v", "[", "721", ",", "12", "]", "=", "7099", "\n", "v", "[", "722", ",", "12", "]", "=", "5473", "\n", "v", "[", "723", ",", "12", "]", "=", "5209", "\n", "v", "[", "724", ",", "12", "]", "=", "1195", "\n", "v", "[", "725", ",", "12", "]", "=", "1077", "\n", "v", "[", "726", ",", "12", "]", "=", "1309", "\n", "v", "[", "727", ",", "12", "]", "=", "2953", "\n", "v", "[", "728", ",", "12", "]", "=", "7343", "\n", "v", "[", "729", ",", "12", "]", "=", "4887", "\n", "v", "[", "730", ",", "12", "]", "=", "3229", "\n", "v", "[", "731", ",", "12", "]", "=", "6759", "\n", "v", "[", "732", ",", "12", "]", "=", "6721", "\n", "v", "[", "733", ",", "12", "]", "=", "6775", "\n", "v", "[", "734", ",", "12", "]", "=", "675", "\n", "v", "[", "735", ",", "12", "]", "=", "4039", "\n", "v", "[", "736", ",", "12", "]", "=", "2493", "\n", "v", "[", "737", ",", "12", "]", "=", "7511", "\n", "v", "[", "738", ",", "12", "]", "=", "3269", "\n", "v", "[", "739", ",", "12", "]", "=", "4199", "\n", "v", "[", "740", ",", "12", "]", "=", "6625", "\n", "v", "[", "741", ",", "12", "]", "=", "7943", "\n", "v", "[", "742", ",", "12", "]", "=", "2013", "\n", "v", "[", "743", ",", "12", "]", "=", "4145", "\n", "v", "[", "744", ",", "12", "]", "=", "667", "\n", "v", "[", "745", ",", "12", "]", "=", "513", "\n", "v", "[", "746", ",", "12", "]", "=", "2303", "\n", "v", "[", "747", ",", "12", "]", "=", "4591", "\n", "v", "[", "748", ",", "12", "]", "=", "7941", "\n", "v", "[", "749", ",", "12", "]", "=", "2741", "\n", "v", "[", "750", ",", "12", "]", "=", "987", "\n", "v", "[", "751", ",", "12", "]", "=", "8061", "\n", "v", "[", "752", ",", "12", "]", "=", "3161", "\n", "v", "[", "753", ",", "12", "]", "=", "5951", "\n", "v", "[", "754", ",", "12", "]", "=", "1431", "\n", "v", "[", "755", ",", "12", "]", "=", "831", "\n", "v", "[", "756", ",", "12", "]", "=", "5559", "\n", "v", "[", "757", ",", "12", "]", "=", "7405", "\n", "v", "[", "758", ",", "12", "]", "=", "1357", "\n", "v", "[", "759", ",", "12", "]", "=", "4319", "\n", "v", "[", "760", ",", "12", "]", "=", "4235", "\n", "v", "[", "761", ",", "12", "]", "=", "5421", "\n", "v", "[", "762", ",", "12", "]", "=", "2559", "\n", "v", "[", "763", ",", "12", "]", "=", "4415", "\n", "v", "[", "764", ",", "12", "]", "=", "2439", "\n", "v", "[", "765", ",", "12", "]", "=", "823", "\n", "v", "[", "766", ",", "12", "]", "=", "1725", "\n", "v", "[", "767", ",", "12", "]", "=", "6219", "\n", "v", "[", "768", ",", "12", "]", "=", "4903", "\n", "v", "[", "769", ",", "12", "]", "=", "6699", "\n", "v", "[", "770", ",", "12", "]", "=", "5451", "\n", "v", "[", "771", ",", "12", "]", "=", "349", "\n", "v", "[", "772", ",", "12", "]", "=", "7703", "\n", "v", "[", "773", ",", "12", "]", "=", "2927", "\n", "v", "[", "774", ",", "12", "]", "=", "7809", "\n", "v", "[", "775", ",", "12", "]", "=", "6179", "\n", "v", "[", "776", ",", "12", "]", "=", "1417", "\n", "v", "[", "777", ",", "12", "]", "=", "5987", "\n", "v", "[", "778", ",", "12", "]", "=", "3017", "\n", "v", "[", "779", ",", "12", "]", "=", "4983", "\n", "v", "[", "780", ",", "12", "]", "=", "3479", "\n", "v", "[", "781", ",", "12", "]", "=", "4525", "\n", "v", "[", "782", ",", "12", "]", "=", "4643", "\n", "v", "[", "783", ",", "12", "]", "=", "4911", "\n", "v", "[", "784", ",", "12", "]", "=", "227", "\n", "v", "[", "785", ",", "12", "]", "=", "5475", "\n", "v", "[", "786", ",", "12", "]", "=", "2287", "\n", "v", "[", "787", ",", "12", "]", "=", "5581", "\n", "v", "[", "788", ",", "12", "]", "=", "6817", "\n", "v", "[", "789", ",", "12", "]", "=", "1937", "\n", "v", "[", "790", ",", "12", "]", "=", "1421", "\n", "v", "[", "791", ",", "12", "]", "=", "4415", "\n", "v", "[", "792", ",", "12", "]", "=", "7977", "\n", "v", "[", "793", ",", "12", "]", "=", "1789", "\n", "v", "[", "794", ",", "12", "]", "=", "3907", "\n", "v", "[", "795", ",", "12", "]", "=", "6815", "\n", "v", "[", "796", ",", "12", "]", "=", "6789", "\n", "v", "[", "797", ",", "12", "]", "=", "6003", "\n", "v", "[", "798", ",", "12", "]", "=", "5609", "\n", "v", "[", "799", ",", "12", "]", "=", "4507", "\n", "v", "[", "800", ",", "12", "]", "=", "337", "\n", "v", "[", "801", ",", "12", "]", "=", "7427", "\n", "v", "[", "802", ",", "12", "]", "=", "7943", "\n", "v", "[", "803", ",", "12", "]", "=", "3075", "\n", "v", "[", "804", ",", "12", "]", "=", "6427", "\n", "v", "[", "805", ",", "12", "]", "=", "1019", "\n", "v", "[", "806", ",", "12", "]", "=", "7121", "\n", "v", "[", "807", ",", "12", "]", "=", "4763", "\n", "v", "[", "808", ",", "12", "]", "=", "81", "\n", "v", "[", "809", ",", "12", "]", "=", "3587", "\n", "v", "[", "810", ",", "12", "]", "=", "2929", "\n", "v", "[", "811", ",", "12", "]", "=", "1795", "\n", "v", "[", "812", ",", "12", "]", "=", "8067", "\n", "v", "[", "813", ",", "12", "]", "=", "2415", "\n", "v", "[", "814", ",", "12", "]", "=", "1265", "\n", "v", "[", "815", ",", "12", "]", "=", "4025", "\n", "v", "[", "816", ",", "12", "]", "=", "5599", "\n", "v", "[", "817", ",", "12", "]", "=", "4771", "\n", "v", "[", "818", ",", "12", "]", "=", "3025", "\n", "v", "[", "819", ",", "12", "]", "=", "2313", "\n", "v", "[", "820", ",", "12", "]", "=", "6129", "\n", "v", "[", "821", ",", "12", "]", "=", "7611", "\n", "v", "[", "822", ",", "12", "]", "=", "6881", "\n", "v", "[", "823", ",", "12", "]", "=", "5253", "\n", "v", "[", "824", ",", "12", "]", "=", "4413", "\n", "v", "[", "825", ",", "12", "]", "=", "7869", "\n", "v", "[", "826", ",", "12", "]", "=", "105", "\n", "v", "[", "827", ",", "12", "]", "=", "3173", "\n", "v", "[", "828", ",", "12", "]", "=", "1629", "\n", "v", "[", "829", ",", "12", "]", "=", "2537", "\n", "v", "[", "830", ",", "12", "]", "=", "1023", "\n", "v", "[", "831", ",", "12", "]", "=", "4409", "\n", "v", "[", "832", ",", "12", "]", "=", "7209", "\n", "v", "[", "833", ",", "12", "]", "=", "4413", "\n", "v", "[", "834", ",", "12", "]", "=", "7107", "\n", "v", "[", "835", ",", "12", "]", "=", "7469", "\n", "v", "[", "836", ",", "12", "]", "=", "33", "\n", "v", "[", "837", ",", "12", "]", "=", "1955", "\n", "v", "[", "838", ",", "12", "]", "=", "2881", "\n", "v", "[", "839", ",", "12", "]", "=", "5167", "\n", "v", "[", "840", ",", "12", "]", "=", "6451", "\n", "v", "[", "841", ",", "12", "]", "=", "4211", "\n", "v", "[", "842", ",", "12", "]", "=", "179", "\n", "v", "[", "843", ",", "12", "]", "=", "5573", "\n", "v", "[", "844", ",", "12", "]", "=", "7879", "\n", "v", "[", "845", ",", "12", "]", "=", "3387", "\n", "v", "[", "846", ",", "12", "]", "=", "7759", "\n", "v", "[", "847", ",", "12", "]", "=", "5455", "\n", "v", "[", "848", ",", "12", "]", "=", "7157", "\n", "v", "[", "849", ",", "12", "]", "=", "1891", "\n", "v", "[", "850", ",", "12", "]", "=", "5683", "\n", "v", "[", "851", ",", "12", "]", "=", "5689", "\n", "v", "[", "852", ",", "12", "]", "=", "6535", "\n", "v", "[", "853", ",", "12", "]", "=", "3109", "\n", "v", "[", "854", ",", "12", "]", "=", "6555", "\n", "v", "[", "855", ",", "12", "]", "=", "6873", "\n", "v", "[", "856", ",", "12", "]", "=", "1249", "\n", "v", "[", "857", ",", "12", "]", "=", "4251", "\n", "v", "[", "858", ",", "12", "]", "=", "6437", "\n", "v", "[", "859", ",", "12", "]", "=", "49", "\n", "v", "[", "860", ",", "12", "]", "=", "2745", "\n", "v", "[", "861", ",", "12", "]", "=", "1201", "\n", "v", "[", "862", ",", "12", "]", "=", "7327", "\n", "v", "[", "863", ",", "12", "]", "=", "4179", "\n", "v", "[", "864", ",", "12", "]", "=", "6783", "\n", "v", "[", "865", ",", "12", "]", "=", "623", "\n", "v", "[", "866", ",", "12", "]", "=", "2779", "\n", "v", "[", "867", ",", "12", "]", "=", "5963", "\n", "v", "[", "868", ",", "12", "]", "=", "2585", "\n", "v", "[", "869", ",", "12", "]", "=", "6927", "\n", "v", "[", "870", ",", "12", "]", "=", "5333", "\n", "v", "[", "871", ",", "12", "]", "=", "4033", "\n", "v", "[", "872", ",", "12", "]", "=", "285", "\n", "v", "[", "873", ",", "12", "]", "=", "7467", "\n", "v", "[", "874", ",", "12", "]", "=", "4443", "\n", "v", "[", "875", ",", "12", "]", "=", "4917", "\n", "v", "[", "876", ",", "12", "]", "=", "3", "\n", "v", "[", "877", ",", "12", "]", "=", "4319", "\n", "v", "[", "878", ",", "12", "]", "=", "5517", "\n", "v", "[", "879", ",", "12", "]", "=", "3449", "\n", "v", "[", "880", ",", "12", "]", "=", "813", "\n", "v", "[", "881", ",", "12", "]", "=", "5499", "\n", "v", "[", "882", ",", "12", "]", "=", "2515", "\n", "v", "[", "883", ",", "12", "]", "=", "5771", "\n", "v", "[", "884", ",", "12", "]", "=", "3357", "\n", "v", "[", "885", ",", "12", "]", "=", "2073", "\n", "v", "[", "886", ",", "12", "]", "=", "4395", "\n", "v", "[", "887", ",", "12", "]", "=", "4925", "\n", "v", "[", "888", ",", "12", "]", "=", "2643", "\n", "v", "[", "889", ",", "12", "]", "=", "7215", "\n", "v", "[", "890", ",", "12", "]", "=", "5817", "\n", "v", "[", "891", ",", "12", "]", "=", "1199", "\n", "v", "[", "892", ",", "12", "]", "=", "1597", "\n", "v", "[", "893", ",", "12", "]", "=", "1619", "\n", "v", "[", "894", ",", "12", "]", "=", "7535", "\n", "v", "[", "895", ",", "12", "]", "=", "4833", "\n", "v", "[", "896", ",", "12", "]", "=", "609", "\n", "v", "[", "897", ",", "12", "]", "=", "4797", "\n", "v", "[", "898", ",", "12", "]", "=", "8171", "\n", "v", "[", "899", ",", "12", "]", "=", "6847", "\n", "v", "[", "900", ",", "12", "]", "=", "793", "\n", "v", "[", "901", ",", "12", "]", "=", "6757", "\n", "v", "[", "902", ",", "12", "]", "=", "8165", "\n", "v", "[", "903", ",", "12", "]", "=", "3371", "\n", "v", "[", "904", ",", "12", "]", "=", "2431", "\n", "v", "[", "905", ",", "12", "]", "=", "5235", "\n", "v", "[", "906", ",", "12", "]", "=", "4739", "\n", "v", "[", "907", ",", "12", "]", "=", "7703", "\n", "v", "[", "908", ",", "12", "]", "=", "7223", "\n", "v", "[", "909", ",", "12", "]", "=", "6525", "\n", "v", "[", "910", ",", "12", "]", "=", "5891", "\n", "v", "[", "911", ",", "12", "]", "=", "5605", "\n", "v", "[", "912", ",", "12", "]", "=", "4433", "\n", "v", "[", "913", ",", "12", "]", "=", "3533", "\n", "v", "[", "914", ",", "12", "]", "=", "5267", "\n", "v", "[", "915", ",", "12", "]", "=", "5125", "\n", "v", "[", "916", ",", "12", "]", "=", "5037", "\n", "v", "[", "917", ",", "12", "]", "=", "225", "\n", "v", "[", "918", ",", "12", "]", "=", "6717", "\n", "v", "[", "919", ",", "12", "]", "=", "1121", "\n", "v", "[", "920", ",", "12", "]", "=", "5741", "\n", "v", "[", "921", ",", "12", "]", "=", "2013", "\n", "v", "[", "922", ",", "12", "]", "=", "4327", "\n", "v", "[", "923", ",", "12", "]", "=", "4839", "\n", "v", "[", "924", ",", "12", "]", "=", "569", "\n", "v", "[", "925", ",", "12", "]", "=", "5227", "\n", "v", "[", "926", ",", "12", "]", "=", "7677", "\n", "v", "[", "927", ",", "12", "]", "=", "4315", "\n", "v", "[", "928", ",", "12", "]", "=", "2391", "\n", "v", "[", "929", ",", "12", "]", "=", "5551", "\n", "v", "[", "930", ",", "12", "]", "=", "859", "\n", "v", "[", "931", ",", "12", "]", "=", "3627", "\n", "v", "[", "932", ",", "12", "]", "=", "6377", "\n", "v", "[", "933", ",", "12", "]", "=", "3903", "\n", "v", "[", "934", ",", "12", "]", "=", "4311", "\n", "v", "[", "935", ",", "12", "]", "=", "6527", "\n", "v", "[", "936", ",", "12", "]", "=", "7573", "\n", "v", "[", "937", ",", "12", "]", "=", "4905", "\n", "v", "[", "938", ",", "12", "]", "=", "7731", "\n", "v", "[", "939", ",", "12", "]", "=", "1909", "\n", "v", "[", "940", ",", "12", "]", "=", "1555", "\n", "v", "[", "941", ",", "12", "]", "=", "3279", "\n", "v", "[", "942", ",", "12", "]", "=", "1949", "\n", "v", "[", "943", ",", "12", "]", "=", "1887", "\n", "v", "[", "944", ",", "12", "]", "=", "6675", "\n", "v", "[", "945", ",", "12", "]", "=", "5509", "\n", "v", "[", "946", ",", "12", "]", "=", "2033", "\n", "v", "[", "947", ",", "12", "]", "=", "5473", "\n", "v", "[", "948", ",", "12", "]", "=", "3539", "\n", "v", "[", "949", ",", "12", "]", "=", "5033", "\n", "v", "[", "950", ",", "12", "]", "=", "5935", "\n", "v", "[", "951", ",", "12", "]", "=", "6095", "\n", "v", "[", "952", ",", "12", "]", "=", "4761", "\n", "v", "[", "953", ",", "12", "]", "=", "1771", "\n", "v", "[", "954", ",", "12", "]", "=", "1271", "\n", "v", "[", "955", ",", "12", "]", "=", "1717", "\n", "v", "[", "956", ",", "12", "]", "=", "4415", "\n", "v", "[", "957", ",", "12", "]", "=", "5083", "\n", "v", "[", "958", ",", "12", "]", "=", "6277", "\n", "v", "[", "959", ",", "12", "]", "=", "3147", "\n", "v", "[", "960", ",", "12", "]", "=", "7695", "\n", "v", "[", "961", ",", "12", "]", "=", "2461", "\n", "v", "[", "962", ",", "12", "]", "=", "4783", "\n", "v", "[", "963", ",", "12", "]", "=", "4539", "\n", "v", "[", "964", ",", "12", "]", "=", "5833", "\n", "v", "[", "965", ",", "12", "]", "=", "5583", "\n", "v", "[", "966", ",", "12", "]", "=", "651", "\n", "v", "[", "967", ",", "12", "]", "=", "1419", "\n", "v", "[", "968", ",", "12", "]", "=", "2605", "\n", "v", "[", "969", ",", "12", "]", "=", "5511", "\n", "v", "[", "970", ",", "12", "]", "=", "3913", "\n", "v", "[", "971", ",", "12", "]", "=", "5795", "\n", "v", "[", "972", ",", "12", "]", "=", "2333", "\n", "v", "[", "973", ",", "12", "]", "=", "2329", "\n", "v", "[", "974", ",", "12", "]", "=", "4431", "\n", "v", "[", "975", ",", "12", "]", "=", "3725", "\n", "v", "[", "976", ",", "12", "]", "=", "6069", "\n", "v", "[", "977", ",", "12", "]", "=", "2699", "\n", "v", "[", "978", ",", "12", "]", "=", "7055", "\n", "v", "[", "979", ",", "12", "]", "=", "6879", "\n", "v", "[", "980", ",", "12", "]", "=", "1017", "\n", "v", "[", "981", ",", "12", "]", "=", "3121", "\n", "v", "[", "982", ",", "12", "]", "=", "2547", "\n", "v", "[", "983", ",", "12", "]", "=", "4603", "\n", "v", "[", "984", ",", "12", "]", "=", "2385", "\n", "v", "[", "985", ",", "12", "]", "=", "6915", "\n", "v", "[", "986", ",", "12", "]", "=", "6103", "\n", "v", "[", "987", ",", "12", "]", "=", "5669", "\n", "v", "[", "988", ",", "12", "]", "=", "7833", "\n", "v", "[", "989", ",", "12", "]", "=", "2001", "\n", "v", "[", "990", ",", "12", "]", "=", "4287", "\n", "v", "[", "991", ",", "12", "]", "=", "6619", "\n", "v", "[", "992", ",", "12", "]", "=", "955", "\n", "v", "[", "993", ",", "12", "]", "=", "2761", "\n", "v", "[", "994", ",", "12", "]", "=", "5711", "\n", "v", "[", "995", ",", "12", "]", "=", "6291", "\n", "v", "[", "996", ",", "12", "]", "=", "3415", "\n", "v", "[", "997", ",", "12", "]", "=", "3909", "\n", "v", "[", "998", ",", "12", "]", "=", "2841", "\n", "v", "[", "999", ",", "12", "]", "=", "5627", "\n", "v", "[", "1000", ",", "12", "]", "=", "4939", "\n", "v", "[", "1001", ",", "12", "]", "=", "7671", "\n", "v", "[", "1002", ",", "12", "]", "=", "6059", "\n", "v", "[", "1003", ",", "12", "]", "=", "6275", "\n", "v", "[", "1004", ",", "12", "]", "=", "6517", "\n", "v", "[", "1005", ",", "12", "]", "=", "1931", "\n", "v", "[", "1006", ",", "12", "]", "=", "4583", "\n", "v", "[", "1007", ",", "12", "]", "=", "7301", "\n", "v", "[", "1008", ",", "12", "]", "=", "1267", "\n", "v", "[", "1009", ",", "12", "]", "=", "7509", "\n", "v", "[", "1010", ",", "12", "]", "=", "1435", "\n", "v", "[", "1011", ",", "12", "]", "=", "2169", "\n", "v", "[", "1012", ",", "12", "]", "=", "6939", "\n", "v", "[", "1013", ",", "12", "]", "=", "3515", "\n", "v", "[", "1014", ",", "12", "]", "=", "2985", "\n", "v", "[", "1015", ",", "12", "]", "=", "2787", "\n", "v", "[", "1016", ",", "12", "]", "=", "2123", "\n", "v", "[", "1017", ",", "12", "]", "=", "1969", "\n", "v", "[", "1018", ",", "12", "]", "=", "3307", "\n", "v", "[", "1019", ",", "12", "]", "=", "353", "\n", "v", "[", "1020", ",", "12", "]", "=", "4359", "\n", "v", "[", "1021", ",", "12", "]", "=", "7059", "\n", "v", "[", "1022", ",", "12", "]", "=", "5273", "\n", "v", "[", "1023", ",", "12", "]", "=", "5873", "\n", "v", "[", "1024", ",", "12", "]", "=", "6657", "\n", "v", "[", "1025", ",", "12", "]", "=", "6765", "\n", "v", "[", "1026", ",", "12", "]", "=", "6229", "\n", "v", "[", "1027", ",", "12", "]", "=", "3179", "\n", "v", "[", "1028", ",", "12", "]", "=", "1583", "\n", "v", "[", "1029", ",", "12", "]", "=", "6237", "\n", "v", "[", "1030", ",", "12", "]", "=", "2155", "\n", "v", "[", "1031", ",", "12", "]", "=", "371", "\n", "v", "[", "1032", ",", "12", "]", "=", "273", "\n", "v", "[", "1033", ",", "12", "]", "=", "7491", "\n", "v", "[", "1034", ",", "12", "]", "=", "3309", "\n", "v", "[", "1035", ",", "12", "]", "=", "6805", "\n", "v", "[", "1036", ",", "12", "]", "=", "3015", "\n", "v", "[", "1037", ",", "12", "]", "=", "6831", "\n", "v", "[", "1038", ",", "12", "]", "=", "7819", "\n", "v", "[", "1039", ",", "12", "]", "=", "713", "\n", "v", "[", "1040", ",", "12", "]", "=", "4747", "\n", "v", "[", "1041", ",", "12", "]", "=", "3935", "\n", "v", "[", "1042", ",", "12", "]", "=", "4109", "\n", "v", "[", "1043", ",", "12", "]", "=", "1311", "\n", "v", "[", "1044", ",", "12", "]", "=", "709", "\n", "v", "[", "1045", ",", "12", "]", "=", "3089", "\n", "v", "[", "1046", ",", "12", "]", "=", "7059", "\n", "v", "[", "1047", ",", "12", "]", "=", "4247", "\n", "v", "[", "1048", ",", "12", "]", "=", "2989", "\n", "v", "[", "1049", ",", "12", "]", "=", "1509", "\n", "v", "[", "1050", ",", "12", "]", "=", "4919", "\n", "v", "[", "1051", ",", "12", "]", "=", "1841", "\n", "v", "[", "1052", ",", "12", "]", "=", "3045", "\n", "v", "[", "1053", ",", "12", "]", "=", "3821", "\n", "v", "[", "1054", ",", "12", "]", "=", "6929", "\n", "v", "[", "1055", ",", "12", "]", "=", "4655", "\n", "v", "[", "1056", ",", "12", "]", "=", "1333", "\n", "v", "[", "1057", ",", "12", "]", "=", "6429", "\n", "v", "[", "1058", ",", "12", "]", "=", "6649", "\n", "v", "[", "1059", ",", "12", "]", "=", "2131", "\n", "v", "[", "1060", ",", "12", "]", "=", "5265", "\n", "v", "[", "1061", ",", "12", "]", "=", "1051", "\n", "v", "[", "1062", ",", "12", "]", "=", "261", "\n", "v", "[", "1063", ",", "12", "]", "=", "8057", "\n", "v", "[", "1064", ",", "12", "]", "=", "3379", "\n", "v", "[", "1065", ",", "12", "]", "=", "2179", "\n", "v", "[", "1066", ",", "12", "]", "=", "1993", "\n", "v", "[", "1067", ",", "12", "]", "=", "5655", "\n", "v", "[", "1068", ",", "12", "]", "=", "3063", "\n", "v", "[", "1069", ",", "12", "]", "=", "6381", "\n", "v", "[", "1070", ",", "12", "]", "=", "3587", "\n", "v", "[", "1071", ",", "12", "]", "=", "7417", "\n", "v", "[", "1072", ",", "12", "]", "=", "1579", "\n", "v", "[", "1073", ",", "12", "]", "=", "1541", "\n", "v", "[", "1074", ",", "12", "]", "=", "2107", "\n", "v", "[", "1075", ",", "12", "]", "=", "5085", "\n", "v", "[", "1076", ",", "12", "]", "=", "2873", "\n", "v", "[", "1077", ",", "12", "]", "=", "6141", "\n", "v", "[", "1078", ",", "12", "]", "=", "955", "\n", "v", "[", "1079", ",", "12", "]", "=", "3537", "\n", "v", "[", "1080", ",", "12", "]", "=", "2157", "\n", "v", "[", "1081", ",", "12", "]", "=", "841", "\n", "v", "[", "1082", ",", "12", "]", "=", "1999", "\n", "v", "[", "1083", ",", "12", "]", "=", "1465", "\n", "v", "[", "1084", ",", "12", "]", "=", "5171", "\n", "v", "[", "1085", ",", "12", "]", "=", "5651", "\n", "v", "[", "1086", ",", "12", "]", "=", "1535", "\n", "v", "[", "1087", ",", "12", "]", "=", "7235", "\n", "v", "[", "1088", ",", "12", "]", "=", "4349", "\n", "v", "[", "1089", ",", "12", "]", "=", "1263", "\n", "v", "[", "1090", ",", "12", "]", "=", "1453", "\n", "v", "[", "1091", ",", "12", "]", "=", "1005", "\n", "v", "[", "1092", ",", "12", "]", "=", "6893", "\n", "v", "[", "1093", ",", "12", "]", "=", "2919", "\n", "v", "[", "1094", ",", "12", "]", "=", "1947", "\n", "v", "[", "1095", ",", "12", "]", "=", "1635", "\n", "v", "[", "1096", ",", "12", "]", "=", "3963", "\n", "v", "[", "1097", ",", "12", "]", "=", "397", "\n", "v", "[", "1098", ",", "12", "]", "=", "969", "\n", "v", "[", "1099", ",", "12", "]", "=", "4569", "\n", "v", "[", "1100", ",", "12", "]", "=", "655", "\n", "v", "[", "1101", ",", "12", "]", "=", "6737", "\n", "v", "[", "1102", ",", "12", "]", "=", "2995", "\n", "v", "[", "1103", ",", "12", "]", "=", "7235", "\n", "v", "[", "1104", ",", "12", "]", "=", "7713", "\n", "v", "[", "1105", ",", "12", "]", "=", "973", "\n", "v", "[", "1106", ",", "12", "]", "=", "4821", "\n", "v", "[", "1107", ",", "12", "]", "=", "2377", "\n", "v", "[", "1108", ",", "12", "]", "=", "1673", "\n", "v", "[", "1109", ",", "12", "]", "=", "1", "\n", "v", "[", "1110", ",", "12", "]", "=", "6541", "\n", "\n", "# \t\tv[0:40,0] = transpose([ \\", "\n", "# \t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\", "\n", "# \t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\", "\n", "# \t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\", "\n", "# \t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ])", "\n", "\n", "# \t\tv[2:40,1] = transpose([ \\", "\n", "# \t\t\t1, 3, 1, 3, 1, 3, 3, 1, \\", "\n", "# \t\t\t3, 1, 3, 1, 3, 1, 1, 3, 1, 3, \\", "\n", "# \t\t\t1, 3, 1, 3, 3, 1, 3, 1, 3, 1, \\", "\n", "# \t\t\t3, 1, 1, 3, 1, 3, 1, 3, 1, 3 ])", "\n", "\n", "# \t\tv[3:40,2] = transpose([ \\", "\n", "# \t\t\t7, 5, 1, 3, 3, 7, 5, \\", "\n", "# \t\t\t5, 7, 7, 1, 3, 3, 7, 5, 1, 1, \\", "\n", "# \t\t\t5, 3, 3, 1, 7, 5, 1, 3, 3, 7, \\", "\n", "# \t\t\t5, 1, 1, 5, 7, 7, 5, 1, 3, 3 ])", "\n", "\n", "# \t\tv[5:40,3] = transpose([ \\", "\n", "# \t\t\t1, 7, 9,13,11, \\", "\n", "# \t\t\t1, 3, 7, 9, 5,13,13,11, 3,15, \\", "\n", "# \t\t\t5, 3,15, 7, 9,13, 9, 1,11, 7, \\", "\n", "# \t\t\t5,15, 1,15,11, 5, 3, 1, 7, 9 ])", "\n", "\n", "# \t\tv[7:40,4] = transpose([ \\", "\n", "# \t\t\t9, 3,27, \\", "\n", "# \t\t\t15,29,21,23,19,11,25, 7,13,17, \\", "\n", "# \t\t\t1,25,29, 3,31,11, 5,23,27,19, \\", "\n", "# \t\t\t21, 5, 1,17,13, 7,15, 9,31, 9 ])", "\n", "\n", "# \t\tv[13:40,5] = transpose([ \\", "\n", "# \t\t\t\t\t\t\t37,33, 7, 5,11,39,63, \\", "\n", "# \t\t 27,17,15,23,29, 3,21,13,31,25, \\", "\n", "# \t\t\t9,49,33,19,29,11,19,27,15,25 ])", "\n", "\n", "# \t\tv[19:40,6] = transpose([ \\", "\n", "# \t\t\t13, \\", "\n", "# \t\t\t33,115, 41, 79, 17, 29,119, 75, 73,105, \\", "\n", "# \t\t\t7, 59, 65, 21,\t3,113, 61, 89, 45,107 ])", "\n", "\n", "# \t\tv[37:40,7] = transpose([ \\", "\n", "# \t\t\t7, 23, 39 ])", "\n", "#", "\n", "#\tSet POLY.", "\n", "#", "\n", "poly", "=", "[", "1", ",", "3", ",", "7", ",", "11", ",", "13", ",", "19", ",", "25", ",", "37", ",", "59", ",", "47", ",", "61", ",", "55", ",", "41", ",", "67", ",", "97", ",", "91", ",", "109", ",", "103", ",", "115", ",", "131", ",", "193", ",", "137", ",", "145", ",", "143", ",", "241", ",", "157", ",", "185", ",", "167", ",", "229", ",", "171", ",", "213", ",", "191", ",", "253", ",", "203", ",", "211", ",", "239", ",", "247", ",", "285", ",", "369", ",", "299", "]", "\n", "\n", "poly", "=", "[", "1", ",", "3", ",", "7", ",", "11", ",", "13", ",", "19", ",", "25", ",", "37", ",", "59", ",", "47", ",", "\n", "61", ",", "55", ",", "41", ",", "67", ",", "97", ",", "91", ",", "109", ",", "103", ",", "115", ",", "131", ",", "\n", "193", ",", "137", ",", "145", ",", "143", ",", "241", ",", "157", ",", "185", ",", "167", ",", "229", ",", "171", ",", "\n", "213", ",", "191", ",", "253", ",", "203", ",", "211", ",", "239", ",", "247", ",", "285", ",", "369", ",", "299", ",", "\n", "301", ",", "333", ",", "351", ",", "355", ",", "357", ",", "361", ",", "391", ",", "397", ",", "425", ",", "451", ",", "\n", "463", ",", "487", ",", "501", ",", "529", ",", "539", ",", "545", ",", "557", ",", "563", ",", "601", ",", "607", ",", "\n", "617", ",", "623", ",", "631", ",", "637", ",", "647", ",", "661", ",", "675", ",", "677", ",", "687", ",", "695", ",", "\n", "701", ",", "719", ",", "721", ",", "731", ",", "757", ",", "761", ",", "787", ",", "789", ",", "799", ",", "803", ",", "\n", "817", ",", "827", ",", "847", ",", "859", ",", "865", ",", "875", ",", "877", ",", "883", ",", "895", ",", "901", ",", "\n", "911", ",", "949", ",", "953", ",", "967", ",", "971", ",", "973", ",", "981", ",", "985", ",", "995", ",", "1001", ",", "\n", "1019", ",", "1033", ",", "1051", ",", "1063", ",", "1069", ",", "1125", ",", "1135", ",", "1153", ",", "1163", ",", "1221", ",", "\n", "1239", ",", "1255", ",", "1267", ",", "1279", ",", "1293", ",", "1305", ",", "1315", ",", "1329", ",", "1341", ",", "1347", ",", "\n", "1367", ",", "1387", ",", "1413", ",", "1423", ",", "1431", ",", "1441", ",", "1479", ",", "1509", ",", "1527", ",", "1531", ",", "\n", "1555", ",", "1557", ",", "1573", ",", "1591", ",", "1603", ",", "1615", ",", "1627", ",", "1657", ",", "1663", ",", "1673", ",", "\n", "1717", ",", "1729", ",", "1747", ",", "1759", ",", "1789", ",", "1815", ",", "1821", ",", "1825", ",", "1849", ",", "1863", ",", "\n", "1869", ",", "1877", ",", "1881", ",", "1891", ",", "1917", ",", "1933", ",", "1939", ",", "1969", ",", "2011", ",", "2035", ",", "\n", "2041", ",", "2053", ",", "2071", ",", "2091", ",", "2093", ",", "2119", ",", "2147", ",", "2149", ",", "2161", ",", "2171", ",", "\n", "2189", ",", "2197", ",", "2207", ",", "2217", ",", "2225", ",", "2255", ",", "2257", ",", "2273", ",", "2279", ",", "2283", ",", "\n", "2293", ",", "2317", ",", "2323", ",", "2341", ",", "2345", ",", "2363", ",", "2365", ",", "2373", ",", "2377", ",", "2385", ",", "\n", "2395", ",", "2419", ",", "2421", ",", "2431", ",", "2435", ",", "2447", ",", "2475", ",", "2477", ",", "2489", ",", "2503", ",", "\n", "2521", ",", "2533", ",", "2551", ",", "2561", ",", "2567", ",", "2579", ",", "2581", ",", "2601", ",", "2633", ",", "2657", ",", "\n", "2669", ",", "2681", ",", "2687", ",", "2693", ",", "2705", ",", "2717", ",", "2727", ",", "2731", ",", "2739", ",", "2741", ",", "\n", "2773", ",", "2783", ",", "2793", ",", "2799", ",", "2801", ",", "2811", ",", "2819", ",", "2825", ",", "2833", ",", "2867", ",", "\n", "2879", ",", "2881", ",", "2891", ",", "2905", ",", "2911", ",", "2917", ",", "2927", ",", "2941", ",", "2951", ",", "2955", ",", "\n", "2963", ",", "2965", ",", "2991", ",", "2999", ",", "3005", ",", "3017", ",", "3035", ",", "3037", ",", "3047", ",", "3053", ",", "\n", "3083", ",", "3085", ",", "3097", ",", "3103", ",", "3159", ",", "3169", ",", "3179", ",", "3187", ",", "3205", ",", "3209", ",", "\n", "3223", ",", "3227", ",", "3229", ",", "3251", ",", "3263", ",", "3271", ",", "3277", ",", "3283", ",", "3285", ",", "3299", ",", "\n", "3305", ",", "3319", ",", "3331", ",", "3343", ",", "3357", ",", "3367", ",", "3373", ",", "3393", ",", "3399", ",", "3413", ",", "\n", "3417", ",", "3427", ",", "3439", ",", "3441", ",", "3475", ",", "3487", ",", "3497", ",", "3515", ",", "3517", ",", "3529", ",", "\n", "3543", ",", "3547", ",", "3553", ",", "3559", ",", "3573", ",", "3589", ",", "3613", ",", "3617", ",", "3623", ",", "3627", ",", "\n", "3635", ",", "3641", ",", "3655", ",", "3659", ",", "3669", ",", "3679", ",", "3697", ",", "3707", ",", "3709", ",", "3713", ",", "\n", "3731", ",", "3743", ",", "3747", ",", "3771", ",", "3791", ",", "3805", ",", "3827", ",", "3833", ",", "3851", ",", "3865", ",", "\n", "3889", ",", "3895", ",", "3933", ",", "3947", ",", "3949", ",", "3957", ",", "3971", ",", "3985", ",", "3991", ",", "3995", ",", "\n", "4007", ",", "4013", ",", "4021", ",", "4045", ",", "4051", ",", "4069", ",", "4073", ",", "4179", ",", "4201", ",", "4219", ",", "\n", "4221", ",", "4249", ",", "4305", ",", "4331", ",", "4359", ",", "4383", ",", "4387", ",", "4411", ",", "4431", ",", "4439", ",", "\n", "4449", ",", "4459", ",", "4485", ",", "4531", ",", "4569", ",", "4575", ",", "4621", ",", "4663", ",", "4669", ",", "4711", ",", "\n", "4723", ",", "4735", ",", "4793", ",", "4801", ",", "4811", ",", "4879", ",", "4893", ",", "4897", ",", "4921", ",", "4927", ",", "\n", "4941", ",", "4977", ",", "5017", ",", "5027", ",", "5033", ",", "5127", ",", "5169", ",", "5175", ",", "5199", ",", "5213", ",", "\n", "5223", ",", "5237", ",", "5287", ",", "5293", ",", "5331", ",", "5391", ",", "5405", ",", "5453", ",", "5523", ",", "5573", ",", "\n", "5591", ",", "5597", ",", "5611", ",", "5641", ",", "5703", ",", "5717", ",", "5721", ",", "5797", ",", "5821", ",", "5909", ",", "\n", "5913", ",", "5955", ",", "5957", ",", "6005", ",", "6025", ",", "6061", ",", "6067", ",", "6079", ",", "6081", ",", "6231", ",", "\n", "6237", ",", "6289", ",", "6295", ",", "6329", ",", "6383", ",", "6427", ",", "6453", ",", "6465", ",", "6501", ",", "6523", ",", "\n", "6539", ",", "6577", ",", "6589", ",", "6601", ",", "6607", ",", "6631", ",", "6683", ",", "6699", ",", "6707", ",", "6761", ",", "\n", "6795", ",", "6865", ",", "6881", ",", "6901", ",", "6923", ",", "6931", ",", "6943", ",", "6999", ",", "7057", ",", "7079", ",", "\n", "7103", ",", "7105", ",", "7123", ",", "7173", ",", "7185", ",", "7191", ",", "7207", ",", "7245", ",", "7303", ",", "7327", ",", "\n", "7333", ",", "7355", ",", "7365", ",", "7369", ",", "7375", ",", "7411", ",", "7431", ",", "7459", ",", "7491", ",", "7505", ",", "\n", "7515", ",", "7541", ",", "7557", ",", "7561", ",", "7701", ",", "7705", ",", "7727", ",", "7749", ",", "7761", ",", "7783", ",", "\n", "7795", ",", "7823", ",", "7907", ",", "7953", ",", "7963", ",", "7975", ",", "8049", ",", "8089", ",", "8123", ",", "8125", ",", "\n", "8137", ",", "8219", ",", "8231", ",", "8245", ",", "8275", ",", "8293", ",", "8303", ",", "8331", ",", "8333", ",", "8351", ",", "\n", "8357", ",", "8367", ",", "8379", ",", "8381", ",", "8387", ",", "8393", ",", "8417", ",", "8435", ",", "8461", ",", "8469", ",", "\n", "8489", ",", "8495", ",", "8507", ",", "8515", ",", "8551", ",", "8555", ",", "8569", ",", "8585", ",", "8599", ",", "8605", ",", "\n", "8639", ",", "8641", ",", "8647", ",", "8653", ",", "8671", ",", "8675", ",", "8689", ",", "8699", ",", "8729", ",", "8741", ",", "\n", "8759", ",", "8765", ",", "8771", ",", "8795", ",", "8797", ",", "8825", ",", "8831", ",", "8841", ",", "8855", ",", "8859", ",", "\n", "8883", ",", "8895", ",", "8909", ",", "8943", ",", "8951", ",", "8955", ",", "8965", ",", "8999", ",", "9003", ",", "9031", ",", "\n", "9045", ",", "9049", ",", "9071", ",", "9073", ",", "9085", ",", "9095", ",", "9101", ",", "9109", ",", "9123", ",", "9129", ",", "\n", "9137", ",", "9143", ",", "9147", ",", "9185", ",", "9197", ",", "9209", ",", "9227", ",", "9235", ",", "9247", ",", "9253", ",", "\n", "9257", ",", "9277", ",", "9297", ",", "9303", ",", "9313", ",", "9325", ",", "9343", ",", "9347", ",", "9371", ",", "9373", ",", "\n", "9397", ",", "9407", ",", "9409", ",", "9415", ",", "9419", ",", "9443", ",", "9481", ",", "9495", ",", "9501", ",", "9505", ",", "\n", "9517", ",", "9529", ",", "9555", ",", "9557", ",", "9571", ",", "9585", ",", "9591", ",", "9607", ",", "9611", ",", "9621", ",", "\n", "9625", ",", "9631", ",", "9647", ",", "9661", ",", "9669", ",", "9679", ",", "9687", ",", "9707", ",", "9731", ",", "9733", ",", "\n", "9745", ",", "9773", ",", "9791", ",", "9803", ",", "9811", ",", "9817", ",", "9833", ",", "9847", ",", "9851", ",", "9863", ",", "\n", "9875", ",", "9881", ",", "9905", ",", "9911", ",", "9917", ",", "9923", ",", "9963", ",", "9973", ",", "10003", ",", "10025", ",", "\n", "10043", ",", "10063", ",", "10071", ",", "10077", ",", "10091", ",", "10099", ",", "10105", ",", "10115", ",", "10129", ",", "10145", ",", "\n", "10169", ",", "10183", ",", "10187", ",", "10207", ",", "10223", ",", "10225", ",", "10247", ",", "10265", ",", "10271", ",", "10275", ",", "\n", "10289", ",", "10299", ",", "10301", ",", "10309", ",", "10343", ",", "10357", ",", "10373", ",", "10411", ",", "10413", ",", "10431", ",", "\n", "10445", ",", "10453", ",", "10463", ",", "10467", ",", "10473", ",", "10491", ",", "10505", ",", "10511", ",", "10513", ",", "10523", ",", "\n", "10539", ",", "10549", ",", "10559", ",", "10561", ",", "10571", ",", "10581", ",", "10615", ",", "10621", ",", "10625", ",", "10643", ",", "\n", "10655", ",", "10671", ",", "10679", ",", "10685", ",", "10691", ",", "10711", ",", "10739", ",", "10741", ",", "10755", ",", "10767", ",", "\n", "10781", ",", "10785", ",", "10803", ",", "10805", ",", "10829", ",", "10857", ",", "10863", ",", "10865", ",", "10875", ",", "10877", ",", "\n", "10917", ",", "10921", ",", "10929", ",", "10949", ",", "10967", ",", "10971", ",", "10987", ",", "10995", ",", "11009", ",", "11029", ",", "\n", "11043", ",", "11045", ",", "11055", ",", "11063", ",", "11075", ",", "11081", ",", "11117", ",", "11135", ",", "11141", ",", "11159", ",", "\n", "11163", ",", "11181", ",", "11187", ",", "11225", ",", "11237", ",", "11261", ",", "11279", ",", "11297", ",", "11307", ",", "11309", ",", "\n", "11327", ",", "11329", ",", "11341", ",", "11377", ",", "11403", ",", "11405", ",", "11413", ",", "11427", ",", "11439", ",", "11453", ",", "\n", "11461", ",", "11473", ",", "11479", ",", "11489", ",", "11495", ",", "11499", ",", "11533", ",", "11545", ",", "11561", ",", "11567", ",", "\n", "11575", ",", "11579", ",", "11589", ",", "11611", ",", "11623", ",", "11637", ",", "11657", ",", "11663", ",", "11687", ",", "11691", ",", "\n", "11701", ",", "11747", ",", "11761", ",", "11773", ",", "11783", ",", "11795", ",", "11797", ",", "11817", ",", "11849", ",", "11855", ",", "\n", "11867", ",", "11869", ",", "11873", ",", "11883", ",", "11919", ",", "11921", ",", "11927", ",", "11933", ",", "11947", ",", "11955", ",", "\n", "11961", ",", "11999", ",", "12027", ",", "12029", ",", "12037", ",", "12041", ",", "12049", ",", "12055", ",", "12095", ",", "12097", ",", "\n", "12107", ",", "12109", ",", "12121", ",", "12127", ",", "12133", ",", "12137", ",", "12181", ",", "12197", ",", "12207", ",", "12209", ",", "\n", "12239", ",", "12253", ",", "12263", ",", "12269", ",", "12277", ",", "12287", ",", "12295", ",", "12309", ",", "12313", ",", "12335", ",", "\n", "12361", ",", "12367", ",", "12391", ",", "12409", ",", "12415", ",", "12433", ",", "12449", ",", "12469", ",", "12479", ",", "12481", ",", "\n", "12499", ",", "12505", ",", "12517", ",", "12527", ",", "12549", ",", "12559", ",", "12597", ",", "12615", ",", "12621", ",", "12639", ",", "\n", "12643", ",", "12657", ",", "12667", ",", "12707", ",", "12713", ",", "12727", ",", "12741", ",", "12745", ",", "12763", ",", "12769", ",", "\n", "12779", ",", "12781", ",", "12787", ",", "12799", ",", "12809", ",", "12815", ",", "12829", ",", "12839", ",", "12857", ",", "12875", ",", "\n", "12883", ",", "12889", ",", "12901", ",", "12929", ",", "12947", ",", "12953", ",", "12959", ",", "12969", ",", "12983", ",", "12987", ",", "\n", "12995", ",", "13015", ",", "13019", ",", "13031", ",", "13063", ",", "13077", ",", "13103", ",", "13137", ",", "13149", ",", "13173", ",", "\n", "13207", ",", "13211", ",", "13227", ",", "13241", ",", "13249", ",", "13255", ",", "13269", ",", "13283", ",", "13285", ",", "13303", ",", "\n", "13307", ",", "13321", ",", "13339", ",", "13351", ",", "13377", ",", "13389", ",", "13407", ",", "13417", ",", "13431", ",", "13435", ",", "\n", "13447", ",", "13459", ",", "13465", ",", "13477", ",", "13501", ",", "13513", ",", "13531", ",", "13543", ",", "13561", ",", "13581", ",", "\n", "13599", ",", "13605", ",", "13617", ",", "13623", ",", "13637", ",", "13647", ",", "13661", ",", "13677", ",", "13683", ",", "13695", ",", "\n", "13725", ",", "13729", ",", "13753", ",", "13773", ",", "13781", ",", "13785", ",", "13795", ",", "13801", ",", "13807", ",", "13825", ",", "\n", "13835", ",", "13855", ",", "13861", ",", "13871", ",", "13883", ",", "13897", ",", "13905", ",", "13915", ",", "13939", ",", "13941", ",", "\n", "13969", ",", "13979", ",", "13981", ",", "13997", ",", "14027", ",", "14035", ",", "14037", ",", "14051", ",", "14063", ",", "14085", ",", "\n", "14095", ",", "14107", ",", "14113", ",", "14125", ",", "14137", ",", "14145", ",", "14151", ",", "14163", ",", "14193", ",", "14199", ",", "\n", "14219", ",", "14229", ",", "14233", ",", "14243", ",", "14277", ",", "14287", ",", "14289", ",", "14295", ",", "14301", ",", "14305", ",", "\n", "14323", ",", "14339", ",", "14341", ",", "14359", ",", "14365", ",", "14375", ",", "14387", ",", "14411", ",", "14425", ",", "14441", ",", "\n", "14449", ",", "14499", ",", "14513", ",", "14523", ",", "14537", ",", "14543", ",", "14561", ",", "14579", ",", "14585", ",", "14593", ",", "\n", "14599", ",", "14603", ",", "14611", ",", "14641", ",", "14671", ",", "14695", ",", "14701", ",", "14723", ",", "14725", ",", "14743", ",", "\n", "14753", ",", "14759", ",", "14765", ",", "14795", ",", "14797", ",", "14803", ",", "14831", ",", "14839", ",", "14845", ",", "14855", ",", "\n", "14889", ",", "14895", ",", "14909", ",", "14929", ",", "14941", ",", "14945", ",", "14951", ",", "14963", ",", "14965", ",", "14985", ",", "\n", "15033", ",", "15039", ",", "15053", ",", "15059", ",", "15061", ",", "15071", ",", "15077", ",", "15081", ",", "15099", ",", "15121", ",", "\n", "15147", ",", "15149", ",", "15157", ",", "15167", ",", "15187", ",", "15193", ",", "15203", ",", "15205", ",", "15215", ",", "15217", ",", "\n", "15223", ",", "15243", ",", "15257", ",", "15269", ",", "15273", ",", "15287", ",", "15291", ",", "15313", ",", "15335", ",", "15347", ",", "\n", "15359", ",", "15373", ",", "15379", ",", "15381", ",", "15391", ",", "15395", ",", "15397", ",", "15419", ",", "15439", ",", "15453", ",", "\n", "15469", ",", "15491", ",", "15503", ",", "15517", ",", "15527", ",", "15531", ",", "15545", ",", "15559", ",", "15593", ",", "15611", ",", "\n", "15613", ",", "15619", ",", "15639", ",", "15643", ",", "15649", ",", "15661", ",", "15667", ",", "15669", ",", "15681", ",", "15693", ",", "\n", "15717", ",", "15721", ",", "15741", ",", "15745", ",", "15765", ",", "15793", ",", "15799", ",", "15811", ",", "15825", ",", "15835", ",", "\n", "15847", ",", "15851", ",", "15865", ",", "15877", ",", "15881", ",", "15887", ",", "15899", ",", "15915", ",", "15935", ",", "15937", ",", "\n", "15955", ",", "15973", ",", "15977", ",", "16011", ",", "16035", ",", "16061", ",", "16069", ",", "16087", ",", "16093", ",", "16097", ",", "\n", "16121", ",", "16141", ",", "16153", ",", "16159", ",", "16165", ",", "16183", ",", "16189", ",", "16195", ",", "16197", ",", "16201", ",", "\n", "16209", ",", "16215", ",", "16225", ",", "16259", ",", "16265", ",", "16273", ",", "16299", ",", "16309", ",", "16355", ",", "16375", ",", "\n", "16381", "]", "\n", "atmost", "=", "2", "**", "log_max", "-", "1", "\n", "#", "\n", "#\tFind the number of bits in ATMOST.", "\n", "#", "\n", "maxcol", "=", "i4_bit_hi1", "(", "atmost", ")", "\n", "#", "\n", "#\tInitialize row 1 of V.", "\n", "#", "\n", "v", "[", "0", ",", "0", ":", "maxcol", "]", "=", "1", "\n", "\n", "#", "\n", "#\tThings to do only if the dimension changed.", "\n", "#", "\n", "", "if", "(", "dim_num", "!=", "dim_num_save", ")", ":", "\n", "#", "\n", "#\tCheck parameters.", "\n", "#", "\n", "\t\t", "if", "(", "dim_num", "<", "1", "or", "dim_max", "<", "dim_num", ")", ":", "\n", "\t\t\t", "print", "(", "'I4_SOBOL - Fatal error!'", ")", "\n", "print", "(", "'\tThe spatial dimension DIM_NUM should satisfy:'", ")", "\n", "print", "(", "'\t\t1 <= DIM_NUM <= %d'", "%", "dim_max", ")", "\n", "print", "(", "'\tBut this input value is DIM_NUM = %d'", "%", "dim_num", ")", "\n", "return", "\n", "\n", "", "dim_num_save", "=", "dim_num", "\n", "#", "\n", "#\tInitialize the remaining rows of V.", "\n", "#", "\n", "for", "i", "in", "xrange", "(", "2", ",", "dim_num", "+", "1", ")", ":", "\n", "#", "\n", "#\tThe bits of the integer POLY(I) gives the form of polynomial I.", "\n", "#", "\n", "#\tFind the degree of polynomial I from binary encoding.", "\n", "#", "\n", "\t\t\t", "j", "=", "poly", "[", "i", "-", "1", "]", "\n", "m", "=", "0", "\n", "while", "(", "1", ")", ":", "\n", "\t\t\t\t", "j", "=", "math", ".", "floor", "(", "j", "/", "2.", ")", "\n", "if", "(", "j", "<=", "0", ")", ":", "\n", "\t\t\t\t\t", "break", "\n", "", "m", "=", "m", "+", "1", "\n", "#", "\n", "#\tExpand this bit pattern to separate components of the logical array INCLUD.", "\n", "#", "\n", "", "j", "=", "poly", "[", "i", "-", "1", "]", "\n", "includ", "=", "zeros", "(", "m", ")", "\n", "for", "k", "in", "xrange", "(", "m", ",", "0", ",", "-", "1", ")", ":", "\n", "\t\t\t\t", "j2", "=", "math", ".", "floor", "(", "j", "/", "2.", ")", "\n", "includ", "[", "k", "-", "1", "]", "=", "(", "j", "!=", "2", "*", "j2", ")", "\n", "j", "=", "j2", "\n", "#", "\n", "#\tCalculate the remaining elements of row I as explained", "\n", "#\tin Bratley and Fox, section 2.", "\n", "#", "\n", "", "for", "j", "in", "xrange", "(", "m", "+", "1", ",", "maxcol", "+", "1", ")", ":", "\n", "\t\t\t\t", "newv", "=", "v", "[", "i", "-", "1", ",", "j", "-", "m", "-", "1", "]", "\n", "l", "=", "1", "\n", "for", "k", "in", "xrange", "(", "1", ",", "m", "+", "1", ")", ":", "\n", "\t\t\t\t\t", "l", "=", "2", "*", "l", "\n", "if", "(", "includ", "[", "k", "-", "1", "]", ")", ":", "\n", "\t\t\t\t\t\t", "newv", "=", "bitwise_xor", "(", "int", "(", "newv", ")", ",", "int", "(", "l", "*", "v", "[", "i", "-", "1", ",", "j", "-", "k", "-", "1", "]", ")", ")", "\n", "", "", "v", "[", "i", "-", "1", ",", "j", "-", "1", "]", "=", "newv", "\n", "#", "\n", "#\tMultiply columns of V by appropriate power of 2.", "\n", "#", "\n", "", "", "l", "=", "1", "\n", "for", "j", "in", "xrange", "(", "maxcol", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "\t\t\t", "l", "=", "2", "*", "l", "\n", "v", "[", "0", ":", "dim_num", ",", "j", "-", "1", "]", "=", "v", "[", "0", ":", "dim_num", ",", "j", "-", "1", "]", "*", "l", "\n", "#", "\n", "#\tRECIPD is 1/(common denominator of the elements in V).", "\n", "#", "\n", "", "recipd", "=", "1.0", "/", "(", "2", "*", "l", ")", "\n", "lastq", "=", "zeros", "(", "dim_num", ")", "\n", "\n", "", "seed", "=", "int", "(", "math", ".", "floor", "(", "seed", ")", ")", "\n", "\n", "if", "(", "seed", "<", "0", ")", ":", "\n", "\t\t", "seed", "=", "0", "\n", "\n", "", "if", "(", "seed", "==", "0", ")", ":", "\n", "\t\t", "l", "=", "1", "\n", "lastq", "=", "zeros", "(", "dim_num", ")", "\n", "\n", "", "elif", "(", "seed", "==", "seed_save", "+", "1", ")", ":", "\n", "#", "\n", "#\tFind the position of the right-hand zero in SEED.", "\n", "#", "\n", "\t\t", "l", "=", "i4_bit_lo0", "(", "seed", ")", "\n", "\n", "", "elif", "(", "seed", "<=", "seed_save", ")", ":", "\n", "\n", "\t\t", "seed_save", "=", "0", "\n", "l", "=", "1", "\n", "lastq", "=", "zeros", "(", "dim_num", ")", "\n", "\n", "for", "seed_temp", "in", "xrange", "(", "int", "(", "seed_save", ")", ",", "int", "(", "seed", ")", ")", ":", "\n", "\t\t\t", "l", "=", "i4_bit_lo0", "(", "seed_temp", ")", "\n", "for", "i", "in", "xrange", "(", "1", ",", "dim_num", "+", "1", ")", ":", "\n", "\t\t\t\t", "lastq", "[", "i", "-", "1", "]", "=", "bitwise_xor", "(", "int", "(", "lastq", "[", "i", "-", "1", "]", ")", ",", "int", "(", "v", "[", "i", "-", "1", ",", "l", "-", "1", "]", ")", ")", "\n", "\n", "", "", "l", "=", "i4_bit_lo0", "(", "seed", ")", "\n", "\n", "", "elif", "(", "seed_save", "+", "1", "<", "seed", ")", ":", "\n", "\n", "\t\t", "for", "seed_temp", "in", "xrange", "(", "int", "(", "seed_save", "+", "1", ")", ",", "int", "(", "seed", ")", ")", ":", "\n", "\t\t\t", "l", "=", "i4_bit_lo0", "(", "seed_temp", ")", "\n", "for", "i", "in", "xrange", "(", "1", ",", "dim_num", "+", "1", ")", ":", "\n", "\t\t\t\t", "lastq", "[", "i", "-", "1", "]", "=", "bitwise_xor", "(", "int", "(", "lastq", "[", "i", "-", "1", "]", ")", ",", "int", "(", "v", "[", "i", "-", "1", ",", "l", "-", "1", "]", ")", ")", "\n", "\n", "", "", "l", "=", "i4_bit_lo0", "(", "seed", ")", "\n", "#", "\n", "#\tCheck that the user is not calling too many times!", "\n", "#", "\n", "", "if", "(", "maxcol", "<", "l", ")", ":", "\n", "\t\t", "print", "(", "'I4_SOBOL - Fatal error!'", ")", "\n", "print", "(", "'\tToo many calls!'", ")", "\n", "print", "(", "'\tMAXCOL = %d\\n'", "%", "maxcol", ")", "\n", "print", "(", "'\tL =\t\t\t%d\\n'", "%", "l", ")", "\n", "return", "\n", "#", "\n", "#\tCalculate the new components of QUASI.", "\n", "#", "\n", "", "quasi", "=", "zeros", "(", "dim_num", ")", "\n", "for", "i", "in", "xrange", "(", "1", ",", "dim_num", "+", "1", ")", ":", "\n", "\t\t", "quasi", "[", "i", "-", "1", "]", "=", "lastq", "[", "i", "-", "1", "]", "*", "recipd", "\n", "lastq", "[", "i", "-", "1", "]", "=", "bitwise_xor", "(", "int", "(", "lastq", "[", "i", "-", "1", "]", ")", ",", "int", "(", "v", "[", "i", "-", "1", ",", "l", "-", "1", "]", ")", ")", "\n", "\n", "", "seed_save", "=", "seed", "\n", "seed", "=", "seed", "+", "1", "\n", "\n", "return", "[", "quasi", ",", "seed", "]", "\n", "", "def", "i4_uniform", "(", "a", ",", "b", ",", "seed", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.i4_uniform": [[13799, 13892], ["math.floor", "round", "round", "mod", "math.floor", "round", "max", "min", "print", "print", "min", "max", "int", "int", "min", "max"], "function", ["None"], ["", "def", "i4_uniform", "(", "a", ",", "b", ",", "seed", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## I4_UNIFORM returns a scaled pseudorandom I4.", "\n", "#", "\n", "#\tDiscussion:", "\n", "#", "\n", "#\t\tThe pseudorandom number will be scaled to be uniformly distributed", "\n", "#\t\tbetween A and B.", "\n", "#", "\n", "#\tLicensing:", "\n", "#", "\n", "#\t\tThis code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#\tModified:", "\n", "#", "\n", "#    \t\t22 February 2011", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tOriginal MATLAB version by John Burkardt.", "\n", "#\t\tPYTHON version by Corrado Chisari", "\n", "#", "\n", "#\tReference:", "\n", "#", "\n", "#\t\tPaul Bratley, Bennett Fox, Linus Schrage,", "\n", "#\t\tA Guide to Simulation,", "\n", "#\t\tSpringer Verlag, pages 201-202, 1983.", "\n", "#", "\n", "#\t\tPierre L'Ecuyer,", "\n", "#\t\tRandom Number Generation,", "\n", "#\t\tin Handbook of Simulation,", "\n", "#\t\tedited by Jerry Banks,", "\n", "#\t\tWiley Interscience, page 95, 1998.", "\n", "#", "\n", "#\t\tBennett Fox,", "\n", "#\t\tAlgorithm 647:", "\n", "#\t\tImplementation and Relative Efficiency of Quasirandom", "\n", "#\t\tSequence Generators,", "\n", "#\t\tACM Transactions on Mathematical Software,", "\n", "#\t\tVolume 12, Number 4, pages 362-376, 1986.", "\n", "#", "\n", "#\t\tPeter Lewis, Allen Goodman, James Miller", "\n", "#\t\tA Pseudo-Random Number Generator for the System/360,", "\n", "#\t\tIBM Systems Journal,", "\n", "#\t\tVolume 8, pages 136-143, 1969.", "\n", "#", "\n", "#\tParameters:", "\n", "#", "\n", "#\t\tInput, integer A, B, the minimum and maximum acceptable values.", "\n", "#", "\n", "#\t\tInput, integer SEED, a seed for the random number generator.", "\n", "#", "\n", "#\t\tOutput, integer C, the randomly chosen integer.", "\n", "#", "\n", "#\t\tOutput, integer SEED, the updated seed.", "\n", "#", "\n", "\t", "if", "(", "seed", "==", "0", ")", ":", "\n", "\t\t", "print", "(", "'I4_UNIFORM - Fatal error!'", ")", "\n", "print", "(", "'\tInput SEED = 0!'", ")", "\n", "\n", "", "seed", "=", "math", ".", "floor", "(", "seed", ")", "\n", "a", "=", "round", "(", "a", ")", "\n", "b", "=", "round", "(", "b", ")", "\n", "\n", "seed", "=", "mod", "(", "seed", ",", "2147483647", ")", "\n", "\n", "if", "(", "seed", "<", "0", ")", ":", "\n", "\t\t", "seed", "=", "seed", "+", "2147483647", "\n", "\n", "", "k", "=", "math", ".", "floor", "(", "seed", "/", "127773", ")", "\n", "\n", "seed", "=", "16807", "*", "(", "seed", "-", "k", "*", "127773", ")", "-", "k", "*", "2836", "\n", "\n", "if", "(", "seed", "<", "0", ")", ":", "\n", "\t\t", "seed", "=", "seed", "+", "2147483647", "\n", "\n", "", "r", "=", "seed", "*", "4.656612875E-10", "\n", "#", "\n", "#\tScale R to lie between A-0.5 and B+0.5.", "\n", "#", "\n", "r", "=", "(", "1.0", "-", "r", ")", "*", "(", "min", "(", "a", ",", "b", ")", "-", "0.5", ")", "+", "r", "*", "(", "max", "(", "a", ",", "b", ")", "+", "0.5", ")", "\n", "#", "\n", "#\tUse rounding to convert R to an integer between A and B.", "\n", "#", "\n", "value", "=", "round", "(", "r", ")", "\n", "\n", "value", "=", "max", "(", "value", ",", "min", "(", "a", ",", "b", ")", ")", "\n", "value", "=", "min", "(", "value", ",", "max", "(", "a", ",", "b", ")", ")", "\n", "\n", "c", "=", "value", "\n", "\n", "return", "[", "int", "(", "c", ")", ",", "int", "(", "seed", ")", "]", "\n", "", "def", "prime_ge", "(", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.prime_ge": [[13892, 13939], ["max", "math.ceil", "sobol_lib.isprime"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.isprime"], ["", "def", "prime_ge", "(", "n", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## PRIME_GE returns the smallest prime greater than or equal to N.", "\n", "#", "\n", "#", "\n", "#\tExample:", "\n", "#", "\n", "#\t\tN\t\t PRIME_GE", "\n", "#", "\n", "#\t\t-10\t\t2", "\n", "#\t\t\t1\t\t2", "\n", "#\t\t\t2\t\t2", "\n", "#\t\t\t3\t\t3", "\n", "#\t\t\t4\t\t5", "\n", "#\t\t\t5\t\t5", "\n", "#\t\t\t6\t\t7", "\n", "#\t\t\t7\t\t7", "\n", "#\t\t\t8\t 11", "\n", "#\t\t\t9\t 11", "\n", "#\t\t 10\t 11", "\n", "#", "\n", "#\tLicensing:", "\n", "#", "\n", "#\t\tThis code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#\tModified:", "\n", "#", "\n", "#    \t\t22 February 2011", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tOriginal MATLAB version by John Burkardt.", "\n", "#\t\tPYTHON version by Corrado Chisari", "\n", "#", "\n", "#\tParameters:", "\n", "#", "\n", "#\t\tInput, integer N, the number to be bounded.", "\n", "#", "\n", "#\t\tOutput, integer P, the smallest prime number that is greater", "\n", "#\t\tthan or equal to N.\t", "\n", "#", "\n", "\t", "p", "=", "max", "(", "math", ".", "ceil", "(", "n", ")", ",", "2", ")", "\n", "while", "(", "not", "isprime", "(", "p", ")", ")", ":", "\n", "\t\t", "p", "=", "p", "+", "1", "\n", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.sobol_lib.isprime": [[13940, 13972], ["int"], "function", ["None"], ["", "def", "isprime", "(", "n", ")", ":", "\n", "#*****************************************************************************80", "\n", "#", "\n", "## IS_PRIME returns True if N is a prime number, False otherwise", "\n", "#", "\n", "#", "\n", "#\tLicensing:", "\n", "#", "\n", "#\t\tThis code is distributed under the GNU LGPL license.", "\n", "#", "\n", "#\tModified:", "\n", "#", "\n", "#    \t\t22 February 2011", "\n", "#", "\n", "#\tAuthor:", "\n", "#", "\n", "#\t\tCorrado Chisari", "\n", "#", "\n", "#\tParameters:", "\n", "#", "\n", "#\t\tInput, integer N, the number to be checked.", "\n", "#", "\n", "#\t\tOutput, boolean value, True or False", "\n", "#", "\n", "\t", "if", "n", "!=", "int", "(", "n", ")", "or", "n", "<", "1", ":", "\n", "\t\t", "return", "False", "\n", "", "p", "=", "2", "\n", "while", "p", "<", "n", ":", "\n", "\t\t", "if", "n", "%", "p", "==", "0", ":", "\n", "\t\t\t", "return", "False", "\n", "", "p", "+=", "1", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.__init__": [[14, 37], ["xoa.workers.evaluator.TargetFunctionEvaluator.__init__", "surrogates.SurrogateEvaluator.init_results"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.init_results"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "lookup", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "lookup", "=", "lookup", "\n", "id", "=", "\"surrogate_{}\"", ".", "format", "(", "name", ")", "\n", "super", "(", "SurrogateEvaluator", ",", "self", ")", ".", "__init__", "(", "id", ",", "forked", "=", "False", ")", "\n", "\n", "self", ".", "type", "=", "'surrogate'", "\n", "\n", "self", ".", "cur_model_index", "=", "None", "\n", "self", ".", "time_slip_rate", "=", "None", "\n", "\n", "if", "'time_slip_rate'", "in", "kwargs", ":", "\n", "            ", "self", ".", "time_slip_rate", "=", "kwargs", "[", "'time_slip_rate'", "]", "\n", "\n", "", "init_loss", "=", "0.9", "\n", "if", "'init_loss'", "in", "kwargs", ":", "\n", "            ", "init_loss", "=", "kwargs", "[", "'init_loss'", "]", "\n", "", "else", ":", "\n", "            ", "if", "name", "==", "'CIFAR100-VGG'", ":", "\n", "                ", "init_loss", "=", "0.99", "\n", "", "elif", "name", "==", "'PTB-LSTM'", ":", "\n", "                ", "init_loss", "=", "1.0", "\n", "\n", "", "", "self", ".", "init_results", "(", "init_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.init_results": [[38, 47], ["surrogates.SurrogateEvaluator.results.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "init_results", "(", "self", ",", "init_loss", ")", ":", "\n", "# TODO: do something for initial condition setting", "\n", "        ", "result", "=", "{", "\n", "\"run_time\"", ":", "0.0", ",", "\n", "\"val_loss\"", ":", "init_loss", ",", "\n", "\"cur_iter\"", ":", "0", ",", "\n", "\"iter_unit\"", ":", "\"epoch\"", "\n", "}", "\n", "self", ".", "results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.set_job_description": [[48, 68], ["debug", "surrogates.SurrogateEvaluator.find", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "set_job_description", "(", "self", ",", "hpv", ",", "index", "=", "None", ",", "job_id", "=", "None", ")", ":", "\n", "        ", "if", "job_id", "!=", "None", ":", "\n", "            ", "self", ".", "job_id", "=", "job_id", "\n", "\n", "# skip hpv matching with index value", "\n", "", "if", "index", "is", "not", "None", ":", "\n", "            ", "debug", "(", "\"Parameter lookup using given index: {}\"", ".", "format", "(", "index", ")", ")", "\n", "self", ".", "params", "=", "hpv", "\n", "self", ".", "cur_model_index", "=", "index", "\n", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "model_index", "=", "self", ".", "find", "(", "hpv", ")", "\n", "if", "model_index", "<", "0", ":", "\n", "                ", "error", "(", "\"invalid hyperparameter setting: {}\"", ".", "format", "(", "hpv", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "self", ".", "cur_model_index", "=", "model_index", "\n", "", "self", ".", "params", "=", "hpv", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.execute": [[69, 131], ["ValueError", "surrogates.SurrogateEvaluator.lookup.get_all_exec_times", "len", "float", "debug", "range", "ValueError", "warn", "surrogates.SurrogateEvaluator.thread_cond.notify", "ValueError", "surrogates.SurrogateEvaluator.lookup.get_all_test_acc_per_epoch", "surrogates.SurrogateEvaluator.pause_cond.wait", "surrogates.SurrogateEvaluator.values.tolist", "int", "int", "time.sleep", "debug", "debug", "surrogates.SurrogateEvaluator.results.append", "sys.exc_info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_exec_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_test_acc_per_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "execute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cur_model_index", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'hyperparameters are not initialized'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "total_epoches", "=", "self", ".", "lookup", ".", "num_epochs", "\n", "if", "self", ".", "max_iters", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "iter_unit", "==", "\"epoch\"", "and", "self", ".", "max_iters", "<=", "total_epoches", ":", "\n", "                    ", "total_epoches", "=", "self", ".", "max_iters", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid max iteration setting: {} vs {}\"", ".", "format", "(", "self", ".", "max_iters", ",", "total_epoches", ")", ")", "\n", "", "", "durations", "=", "self", ".", "lookup", ".", "get_all_exec_times", "(", ")", "\n", "total_samples", "=", "len", "(", "durations", ")", "\n", "if", "self", ".", "cur_model_index", ">", "total_samples", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid surrogate vector index\"", ")", "\n", "", "duration", "=", "durations", "[", "self", ".", "cur_model_index", "]", "\n", "dur_per_epoch", "=", "float", "(", "duration", "/", "total_epoches", ")", "\n", "debug", "(", "\"Total duration of surrogate: {}\"", ".", "format", "(", "duration", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "total_epoches", ")", ":", "\n", "                ", "cur_epoch", "=", "i", "+", "1", "\n", "with", "self", ".", "pause_cond", ":", "\n", "                    ", "while", "self", ".", "paused", ":", "\n", "                        ", "self", ".", "pause_cond", ".", "wait", "(", ")", "\n", "\n", "", "lcs", "=", "self", ".", "lookup", ".", "get_all_test_acc_per_epoch", "(", "cur_epoch", ")", "\n", "lc", "=", "lcs", ".", "values", ".", "tolist", "(", ")", "[", "self", ".", "cur_model_index", "]", "\n", "#debug(\"learning curve of index {}: {}\".format(self.cur_model_index, lc))", "\n", "cur_loss", "=", "1.0", "-", "lc", "[", "-", "1", "]", "\n", "cur_dur", "=", "dur_per_epoch", "*", "cur_epoch", "\n", "wait_iters", "=", "int", "\n", "if", "self", ".", "time_slip_rate", ":", "\n", "                        ", "wait_iters", "=", "int", "(", "dur_per_epoch", "/", "self", ".", "time_slip_rate", ")", "\n", "", "else", ":", "\n", "                        ", "wait_iters", "=", "int", "(", "dur_per_epoch", "/", "10.0", ")", "\n", "\n", "", "i", "=", "0", "\n", "while", "i", "<", "wait_iters", "and", "self", ".", "stop_flag", "==", "False", ":", "\n", "                        ", "time", ".", "sleep", "(", "1", ")", "\n", "i", "+=", "1", "\n", "\n", "", "if", "self", ".", "stop_flag", "==", "True", ":", "\n", "                        ", "debug", "(", "\"Early stopped at {}\"", ".", "format", "(", "cur_epoch", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "debug", "(", "\"After {:.1f} sec., loss {:.4f} at {} epoches\"", ".", "format", "(", "cur_dur", ",", "cur_loss", ",", "cur_epoch", ")", ")", "# for debugging", "\n", "result", "=", "{", "\n", "\"run_time\"", ":", "cur_dur", ",", "\n", "\"test_loss\"", ":", "cur_loss", ",", "\n", "\"cur_iter\"", ":", "cur_epoch", ",", "\n", "\"iter_unit\"", ":", "\"epoch\"", "\n", "}", "\n", "\n", "self", ".", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"{} occurs\"", ".", "format", "(", "sys", ".", "exc_info", "(", ")", "[", "0", "]", ")", ")", "\n", "", "finally", ":", "\n", "            ", "with", "self", ".", "thread_cond", ":", "\n", "                ", "self", ".", "busy", "=", "False", "\n", "self", ".", "cur_model_index", "=", "None", "\n", "self", ".", "thread_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find": [[132, 144], ["surrogates.SurrogateEvaluator.lookup.get_all_hyperparam_vectors", "surrogates.SurrogateEvaluator.vectorize", "numpy.array_equal", "v.tolist", "surrogates.SurrogateEvaluator.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_hyperparam_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.vectorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "", "def", "find", "(", "self", ",", "hpv", ")", ":", "\n", "        ", "''' find appropriate index of surrogate function in lookup, if not found, return -1 '''", "\n", "model_idx", "=", "0", "\n", "hpvs", "=", "self", ".", "lookup", ".", "get_all_hyperparam_vectors", "(", ")", "\n", "tv", "=", "self", ".", "vectorize", "(", "hpv", ")", "\n", "for", "v", "in", "hpvs", ":", "\n", "            ", "if", "np", ".", "array_equal", "(", "v", ".", "tolist", "(", ")", ",", "tv", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "return", "model_idx", "\n", "", "else", ":", "\n", "                ", "model_idx", "+=", "1", "\n", "\n", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.vectorize": [[145, 152], ["numpy.asarray", "l.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "vectorize", "(", "self", ",", "hpv", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "lookup", ".", "config", "\n", "l", "=", "[", "]", "\n", "for", "k", "in", "cfg", ".", "param_order", ":", "\n", "            ", "l", ".", "append", "(", "hpv", "[", "k", "]", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.__init__": [[16, 32], ["xoa.workers.worker.Worker.__init__", "s_opt.SequentialOptimizer.reset", "run_config[].replace"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "run_config", ",", "hp_config", ",", "id", ",", "hp_dir", "=", "\"hp_conf/\"", ")", ":", "\n", "\n", "        ", "super", "(", "SequentialOptimizer", ",", "self", ")", ".", "__init__", "(", "id", ")", "\n", "self", ".", "rconf", "=", "run_config", "\n", "self", ".", "hconf", "=", "hp_config", "\n", "self", ".", "hp_dir", "=", "hp_dir", "\n", "\n", "self", ".", "type", "=", "'tuner'", "\n", "if", "'title'", "in", "run_config", ":", "\n", "            ", "self", ".", "id", "=", "run_config", "[", "'title'", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "\n", "", "self", ".", "device_id", "=", "'cpu0'", "\n", "self", ".", "machine", "=", "None", "\n", "self", ".", "search_space", "=", "None", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.get_device_id": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_device_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "device_id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.get_config": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rconf", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.set_params": [[39, 47], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "set_params", "(", "self", ",", "params", ",", "index", "=", "None", ")", ":", "\n", "        ", "if", "params", ":", "\n", "            ", "self", ".", "params", "=", "params", "\n", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"invalid params: {}\"", ".", "format", "(", "params", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.get_search_space": [[48, 52], ["warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "get_search_space", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "search_space", "==", "None", ":", "\n", "            ", "warn", "(", "\"Search space space is not initialized.\"", ")", "\n", "", "return", "self", ".", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.start": [[53, 59], ["error", "super().start"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", "is", "None", ":", "\n", "            ", "error", "(", "'Set configuration properly before starting.'", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "super", "(", "SequentialOptimizer", ",", "self", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.reset": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.get_cur_result": [[63, 74], ["len", "s_opt.SequentialOptimizer.machine.get_working_results"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_working_results"], ["", "def", "get_cur_result", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "results", ")", "==", "0", ":", "\n", "            ", "if", "self", ".", "machine", "!=", "None", ":", "\n", "                ", "latest", "=", "self", ".", "machine", ".", "get_working_results", "(", ")", "\n", "#debug(\"current result: {}\".format(latest))", "\n", "", "else", ":", "\n", "                ", "latest", "=", "{", "}", "\n", "", "", "else", ":", "\n", "            ", "latest", "=", "self", ".", "results", "\n", "", "result", "=", "{", "\"result\"", ":", "latest", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.execute": [[75, 88], ["s_opt.SequentialOptimizer.run", "warn", "s_opt.SequentialOptimizer.thread_cond.notify", "sys.exc_info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "execute", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "results", "=", "self", ".", "run", "(", "self", ".", "rconf", ",", "self", ".", "hconf", ",", "self", ".", "params", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"{} occurs\"", ".", "format", "(", "sys", ".", "exc_info", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "stop_flag", "=", "True", "\n", "\n", "", "finally", ":", "\n", "            ", "with", "self", ".", "thread_cond", ":", "\n", "                ", "self", ".", "busy", "=", "False", "\n", "self", ".", "params", "=", "None", "\n", "self", ".", "thread_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.stop": [[89, 94], ["super().stop", "s_opt.SequentialOptimizer.machine.stop"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop"], ["", "", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "machine", "!=", "None", ":", "\n", "            ", "self", ".", "machine", ".", "stop", "(", ")", "\n", "\n", "", "super", "(", "SequentialOptimizer", ",", "self", ")", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.run": [[95, 163], ["debug", "s_opt.SequentialOptimizer.machine.play", "xoa.commons.read_hyperparam_config", "debug", "validators.url", "warn", "xoa.spaces.create_space_from_table", "ValueError", "validators.url", "optimizers.create_emulator", "ValueError", "xoa.spaces.connect_remote_space", "optimizers.create_runner", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.play", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.read_hyperparam_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_space_from_table", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.__init__.create_emulator", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.connect_remote_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.__init__.create_runner"], ["", "def", "run", "(", "self", ",", "run_cfg", ",", "hp_cfg", ",", "args", ",", "save_results", "=", "False", ")", ":", "\n", "        ", "debug", "(", "\"Run sequential optimization with {}\"", ".", "format", "(", "run_cfg", ")", ")", "\n", "num_resume", "=", "0", "\n", "save_internal", "=", "False", "\n", "if", "'rerun'", "in", "args", ":", "\n", "            ", "num_resume", "=", "args", "[", "'rerun'", "]", "\n", "", "if", "'save_internal'", "in", "args", ":", "\n", "            ", "save_internal", "=", "args", "[", "'save_internal'", "]", "\n", "\n", "", "results", "=", "[", "]", "\n", "s_name", "=", "None", "\n", "self", ".", "search_space", "=", "None", "\n", "\n", "if", "'surrogate'", "in", "args", "and", "args", "[", "'surrogate'", "]", "!=", "'None'", ":", "\n", "            ", "s_name", "=", "args", "[", "'surrogate'", "]", "\n", "hp_path", "=", "\"{}{}.json\"", ".", "format", "(", "self", ".", "hp_dir", ",", "s_name", ")", "\n", "hp_cfg", "=", "read_hyperparam_config", "(", "hp_path", ")", "# FIXME:rewrite here", "\n", "if", "hp_cfg", "==", "None", ":", "\n", "                ", "ValueError", "(", "\"Surrogate {} configuration not found.\"", ".", "format", "(", "s_name", ")", ")", "\n", "\n", "", "", "if", "'space_id'", "in", "args", ":", "\n", "            ", "space_id", "=", "args", "[", "'space_id'", "]", "\n", "history_url", "=", "\"{}/spaces/{}/\"", ".", "format", "(", "run_cfg", "[", "\"master_node\"", "]", ",", "space_id", ")", "\n", "debug", "(", "\"Global history: {}\"", ".", "format", "(", "history_url", ")", ")", "\n", "if", "v", ".", "url", "(", "history_url", ")", ":", "\n", "                ", "self", ".", "search_space", "=", "connect_remote_space", "(", "history_url", ",", "\n", "run_cfg", "[", "\"credential\"", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "warn", "(", "\"No valid space ID: {}\"", ".", "format", "(", "space_id", ")", ")", "\n", "self", ".", "search_space", "=", "create_space_from_table", "(", "args", "[", "'surrogate'", "]", ")", "\n", "\n", "", "if", "self", ".", "search_space", "==", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid parameter space. Space is not initialized properly\"", ")", "\n", "\n", "", "goal_metric", "=", "'error'", "\n", "if", "'goal_metric'", "in", "args", ":", "\n", "            ", "goal_metric", "=", "args", "[", "'goal_metric'", "]", "\n", "\n", "", "if", "'train_node'", "in", "args", ":", "\n", "            ", "t_conf", "=", "args", "[", "'train_node'", "]", "\n", "if", "v", ".", "url", "(", "t_conf", "[", "'url'", "]", ")", ":", "\n", "                ", "self", ".", "machine", "=", "bandit", ".", "create_runner", "(", "t_conf", "[", "'url'", "]", ",", "\n", "self", ".", "search_space", ",", "\n", "args", "[", "'exp_crt'", "]", ",", "\n", "args", "[", "'exp_goal'", "]", ",", "args", "[", "'exp_time'", "]", ",", "\n", "run_cfg", ",", "hp_cfg", ",", "\n", "goal_metric", "=", "goal_metric", ",", "\n", "num_resume", "=", "num_resume", ",", "\n", "save_internal", "=", "save_internal", ",", "\n", "use_surrogate", "=", "s_name", ",", "\n", "id", "=", "self", ".", "id", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid node URL: {}\"", ".", "format", "(", "t_conf", "[", "'url'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "\n", "            ", "self", ".", "machine", "=", "bandit", ".", "create_emulator", "(", "self", ".", "search_space", ",", "\n", "args", "[", "'exp_crt'", "]", ",", "\n", "args", "[", "'exp_goal'", "]", ",", "\n", "args", "[", "'exp_time'", "]", ",", "\n", "goal_metric", "=", "goal_metric", ",", "\n", "num_resume", "=", "num_resume", ",", "\n", "save_internal", "=", "save_internal", ",", "\n", "run_config", "=", "run_cfg", ",", "\n", "id", "=", "self", ".", "id", "+", "\"_emul\"", ")", "\n", "", "results", "=", "self", ".", "machine", ".", "play", "(", "args", "[", "'mode'", "]", ",", "args", "[", "'spec'", "]", ",", "args", "[", "'num_trials'", "]", ",", "\n", "save_results", "=", "save_results", ")", "\n", "return", "results", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.__init__": [[13, 30], ["threading.Condition", "threading.Condition", "threading.Lock", "threading.Lock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", "=", "None", ")", ":", "\n", "        ", "self", ".", "thread", "=", "None", "\n", "\n", "self", ".", "busy", "=", "False", "\n", "self", ".", "stop_flag", "=", "False", "\n", "self", ".", "thread_cond", "=", "threading", ".", "Condition", "(", "threading", ".", "Lock", "(", ")", ")", "\n", "self", ".", "paused", "=", "False", "\n", "self", ".", "pause_cond", "=", "threading", ".", "Condition", "(", "threading", ".", "Lock", "(", ")", ")", "\n", "self", ".", "timer", "=", "None", "\n", "self", ".", "timeout", "=", "None", "\n", "self", ".", "type", "=", "'prototype'", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n", "if", "id", "!=", "None", ":", "\n", "            ", "self", ".", "id", "=", "id", "\n", "", "else", ":", "\n", "            ", "self", ".", "id", "=", "'worker_proto'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_id": [[31, 33], ["None"], "methods", ["None"], ["", "", "def", "get_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_cur_status": [[34, 45], ["None"], "methods", ["None"], ["", "def", "get_cur_status", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "busy", ":", "\n", "            ", "if", "self", ".", "paused", ":", "\n", "                ", "return", "'pending'", "\n", "", "else", ":", "\n", "                ", "return", "'processing'", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "paused", ":", "\n", "                ", "return", "'error'", "\n", "", "else", ":", "\n", "                ", "return", "'idle'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.start": [[46, 67], ["threading.Thread", "worker.Worker.thread.start", "worker.Worker.timer.cancel", "threading.Timer", "worker.Worker.timer.start", "worker.Worker.thread_cond.wait"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start"], ["", "", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "thread_cond", ":", "\n", "            ", "while", "self", ".", "busy", ":", "\n", "                ", "self", ".", "thread_cond", ".", "wait", "(", ")", "\n", "", "self", ".", "busy", "=", "True", "\n", "\n", "", "if", "not", "self", ".", "timeout", "is", "None", "and", "not", "self", ".", "timer", "is", "None", ":", "\n", "            ", "self", ".", "timer", ".", "cancel", "(", ")", "\n", "\n", "", "self", ".", "stop_flag", "=", "False", "\n", "#self.id += str(threading.current_thread().ident)", "\n", "self", ".", "thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "self", ".", "execute", ",", "name", "=", "'worker {} thread'", ".", "format", "(", "self", ".", "id", ")", ")", "\n", "self", ".", "thread", ".", "daemon", "=", "True", "\n", "self", ".", "thread", ".", "start", "(", ")", "\n", "\n", "if", "not", "self", ".", "timeout", "is", "None", ":", "\n", "            ", "self", ".", "timer", "=", "threading", ".", "Timer", "(", "self", ".", "timeout", ",", "self", ".", "stop", ")", "\n", "self", ".", "timer", ".", "daemon", "=", "True", "\n", "self", ".", "timer", ".", "start", "(", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.pause": [[68, 71], ["worker.Worker.pause_cond.acquire"], "methods", ["None"], ["", "def", "pause", "(", "self", ")", ":", "\n", "        ", "self", ".", "paused", "=", "True", "\n", "self", ".", "pause_cond", ".", "acquire", "(", ")", "\n", "#debug(\"Pause requested.\")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.resume": [[73, 77], ["worker.Worker.pause_cond.notify", "worker.Worker.pause_cond.release"], "methods", ["None"], ["", "def", "resume", "(", "self", ")", ":", "\n", "        ", "self", ".", "paused", "=", "False", "\n", "self", ".", "pause_cond", ".", "notify", "(", ")", "\n", "self", ".", "pause_cond", ".", "release", "(", ")", "\n", "#debug(\"Resume requested.\")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.stop": [[79, 86], ["worker.Worker.thread.join", "worker.Worker.resume"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.resume"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "thread", "is", "None", ":", "\n", "#debug(\"Stop requested.\")", "\n", "            ", "self", ".", "stop_flag", "=", "True", "\n", "if", "self", ".", "paused", "==", "True", ":", "\n", "                ", "self", ".", "resume", "(", ")", "\n", "", "self", ".", "thread", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.execute": [[87, 89], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "execute", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'execute() should be overrided.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.__init__": [[15, 28], ["xoa.workers.worker.Worker.__init__", "trainer.Trainer.reset"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "id", "=", "None", ",", "fork", "=", "False", ")", ":", "\n", "        ", "self", ".", "fork", "=", "fork", "\n", "\n", "self", ".", "device_type", "=", "'cpu'", "\n", "self", ".", "device_index", "=", "0", "\n", "self", ".", "last_sync_time", "=", "None", "\n", "\n", "if", "id", "==", "None", ":", "\n", "            ", "id", "=", "'trainer_proto'", "\n", "\n", "", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "id", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_resource": [[29, 32], ["None"], "methods", ["None"], ["", "def", "set_resource", "(", "self", ",", "device_type", ",", "device_index", ")", ":", "\n", "        ", "self", ".", "device_type", "=", "device_type", "\n", "self", ".", "device_index", "=", "device_index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_device_id", "(", "self", ")", ":", "\n", "        ", "return", "\"{}{}\"", ".", "format", "(", "self", ".", "device_type", ",", "self", ".", "device_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.reset": [[36, 46], ["os.remove", "os.path.isdir", "os.mkdir", "trainer.Trainer.get_device_id"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./temp/'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'./temp/'", ")", "\n", "", "pkl", "=", "\"./temp/mutex_{}.pkl\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "os", ".", "remove", "(", "pkl", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.sync_result": [[47, 61], ["retrieve_func", "trainer.Trainer.dump_results", "type", "len", "debug", "type", "trainer.Trainer.results.append", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.dump_results", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "sync_result", "(", "self", ",", "retrieve_func", ")", ":", "\n", "        ", "result", "=", "retrieve_func", "(", ")", "\n", "# TODO: validate result contents", "\n", "if", "type", "(", "result", ")", "==", "list", ":", "\n", "            ", "if", "len", "(", "result", ")", ">", "0", ":", "\n", "                ", "self", ".", "results", "=", "result", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"No result found yet.\"", ")", "\n", "", "", "elif", "type", "(", "result", ")", "==", "dict", ":", "\n", "            ", "self", ".", "results", ".", "append", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"Invalid result: {}\"", ".", "format", "(", "result", ")", ")", "\n", "\n", "", "self", ".", "dump_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_sync_time": [[62, 65], ["None"], "methods", ["None"], ["", "def", "set_sync_time", "(", "self", ",", "sync_time", ")", ":", "\n", "#debug(\"Result had been synched at {}\".format(time.asctime(time.localtime(sync_time))))", "\n", "        ", "self", ".", "last_sync_time", "=", "sync_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_job_description": [[66, 77], ["debug", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "set_job_description", "(", "self", ",", "params", ",", "index", "=", "None", ",", "job_id", "=", "None", ")", ":", "\n", "        ", "if", "job_id", "!=", "None", ":", "\n", "            ", "self", ".", "job_id", "=", "job_id", "\n", "\n", "", "if", "params", ":", "\n", "            ", "debug", "(", "\"Assigned parameters: {}\"", ".", "format", "(", "params", ")", ")", "\n", "self", ".", "params", "=", "params", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"Invalid parameters: {}\"", ".", "format", "(", "params", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.is_forked": [[78, 80], ["None"], "methods", ["None"], ["", "", "def", "is_forked", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fork", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.is_working": [[81, 83], ["None"], "methods", ["None"], ["", "def", "is_working", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.dump_results": [[84, 91], ["trainer.Trainer.is_forked", "os.path.isdir", "os.mkdir", "trainer.Trainer.get_device_id", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.is_forked", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "dump_results", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_forked", "(", ")", "==", "True", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./temp/'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'./temp/'", ")", "\n", "", "pkl", "=", "\"./temp/mutex_{}.pkl\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "with", "open", "(", "\"{}\"", ".", "format", "(", "pkl", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "results", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.load_results": [[92, 99], ["trainer.Trainer.get_device_id", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "", "", "def", "load_results", "(", "self", ",", "device_id", ")", ":", "\n", "        ", "pkl", "=", "\"./temp/mutex_{}.pkl\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "\"{}\"", ".", "format", "(", "pkl", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "self", ".", "results", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_cur_result": [[100, 135], ["trainer.Trainer.is_forked", "trainer.Trainer.load_results", "len", "copy.copy", "result[].append", "result[].append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.is_forked", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.load_results", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_cur_result", "(", "self", ",", "device_id", ")", ":", "\n", "        ", "if", "self", ".", "is_forked", "(", ")", "==", "True", ":", "\n", "            ", "self", ".", "load_results", "(", "device_id", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "results", ")", ">", "0", ":", "\n", "            ", "latest", "=", "self", ".", "results", "[", "-", "1", "]", "\n", "result", "=", "copy", ".", "copy", "(", "latest", ")", "\n", "\n", "result", "[", "'val_loss_curve'", "]", "=", "[", "]", "\n", "result", "[", "'test_loss_curve'", "]", "=", "[", "]", "\n", "for", "r", "in", "self", ".", "results", ":", "\n", "                ", "if", "'val_loss'", "in", "r", ":", "\n", "                    ", "result", "[", "'val_loss_curve'", "]", ".", "append", "(", "r", "[", "'val_loss'", "]", ")", "\n", "", "if", "'test_loss'", "in", "r", ":", "\n", "                    ", "result", "[", "'test_loss_curve'", "]", ".", "append", "(", "r", "[", "'test_loss'", "]", ")", "\n", "\n", "", "", "result", "[", "'run_time'", "]", "=", "latest", "[", "'run_time'", "]", "\n", "return", "result", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "\"arguments\"", "in", "self", ".", "config", ":", "\n", "                    ", "if", "\"fail_err\"", "in", "self", ".", "config", "[", "'arguments'", "]", ":", "\n", "                        ", "default_err", "=", "self", ".", "config", "[", "'defaults'", "]", "[", "-", "1", "]", "\n", "default_result", "=", "{", "\"cur_iter\"", ":", "0", ",", "\n", "\"iter_unit\"", ":", "\"epoch\"", ",", "\n", "\"test_loss\"", ":", "default_err", ",", "\n", "\"loss_type\"", ":", "\"test_error\"", ",", "\n", "\"run_time\"", ":", "0.0", "\n", "}", "\n", "return", "default_result", "\n", "", "else", ":", "\n", "                        ", "return", "None", "\n", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.add_result": [[136, 155], ["trainer.Trainer.results.append", "trainer.Trainer.dump_results"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.dump_results"], ["", "", "", "def", "add_result", "(", "self", ",", "cur_iter", ",", "cur_loss", ",", "run_time", ",", "\n", "iter_unit", "=", "\"epoch\"", ",", "\n", "loss_type", "=", "\"test_error_rate\"", ")", ":", "\n", "        ", "error_type", "=", "'test'", "\n", "if", "'valid'", "in", "loss_type", ":", "\n", "            ", "error_type", "=", "'val'", "\n", "\n", "", "result", "=", "{", "\"cur_iter\"", ":", "cur_iter", ",", "\n", "\"iter_unit\"", ":", "iter_unit", ",", "\n", "\"run_time\"", ":", "run_time", "\n", "}", "\n", "\n", "result", "[", "\"{}_loss\"", ".", "format", "(", "error_type", ")", "]", "=", "cur_loss", "\n", "if", "\"error_rate\"", "in", "loss_type", ":", "\n", "            ", "cur_acc", "=", "1.0", "-", "cur_loss", "\n", "result", "[", "\"{}_acc\"", ".", "format", "(", "error_type", ")", "]", "=", "cur_acc", "\n", "\n", "", "self", ".", "results", ".", "append", "(", "result", ")", "\n", "self", ".", "dump_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.check_started": [[156, 179], ["subprocess.check_output", "json.loads", "debug", "debug", "int", "debug", "trainer.Trainer.get_device_id", "len", "trainer.Trainer.get_device_id"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "check_started", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "device_type", "==", "'gpu'", ":", "\n", "            ", "try", ":", "\n", "# Assume that gpustat installed properly", "\n", "                ", "result", "=", "subprocess", ".", "check_output", "(", "'gpustat --json'", ",", "shell", "=", "True", ")", "\n", "gpu_dict", "=", "json", ".", "loads", "(", "result", ")", "\n", "for", "g", "in", "gpu_dict", "[", "'gpus'", "]", ":", "\n", "                    ", "if", "g", "[", "'index'", "]", "==", "int", "(", "self", ".", "device_index", ")", ":", "\n", "                        ", "debug", "(", "\"Working processes on {}: {}\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ",", "g", "[", "'processes'", "]", ")", ")", "\n", "if", "len", "(", "g", "[", "'processes'", "]", ")", ">", "0", ":", "\n", "                            ", "return", "True", "\n", "", "else", ":", "\n", "                            ", "return", "False", "\n", "", "", "", "debug", "(", "\"No {} device found: {}\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ",", "gpu_dict", ")", ")", "\n", "return", "False", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "debug", "(", "\"Checking GPU processes failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "# XXX: return True even it fails ", "\n", "return", "True", "\n", "", "", "else", ":", "\n", "# working on CPU always return True", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.execute": [[180, 190], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "execute", "(", "self", ")", ":", "\n", "        ", "''' Execute target function and append an intermidiate result per epoch to self.results.\n        The result is a dictionary object which has following attributes: \n          - \"run_time\" : float, run time (elapsed time for the given epoch) \n          - \"cur_loss\": float, current loss value\n          - \"cur_acc\": float, current accuracy value. if current loss is an error rate, it becomes 1.0 - cur_loss. (optional)\n          - \"cur_iter\": integer, number of current iterations\n          - \"iter_unit\" : string, epoch or steps will be accepted\n        '''", "\n", "raise", "NotImplementedError", "(", "'execute() should be overrided.'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.__init__": [[11, 26], ["xoa.connectors.remote_hpo.RemoteOptimizerConnector", "xoa.workers.worker.Worker.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hpo_node", ",", "train_node", ",", "hp_config", ",", "credential", ",", "\n", "id", "=", "None", ",", "polling_interval", "=", "5", ")", ":", "\n", "        ", "self", ".", "hpo_node", "=", "hpo_node", "\n", "self", ".", "train_node", "=", "train_node", "\n", "self", ".", "hp_config", "=", "hp_config", "\n", "self", ".", "credential", "=", "credential", "\n", "self", ".", "jobs", "=", "[", "]", "\n", "self", ".", "polling_interval", "=", "polling_interval", "\n", "self", ".", "in_progress", "=", "False", "\n", "\n", "self", ".", "connector", "=", "RemoteOptimizerConnector", "(", "self", ".", "hpo_node", "[", "\"ip_address\"", "]", ",", "\n", "self", ".", "hpo_node", "[", "\"port_num\"", "]", ",", "\n", "self", ".", "credential", ")", "\n", "\n", "return", "super", "(", "ParallelOptimizer", ",", "self", ")", ".", "__init__", "(", "id", "=", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.create_job_request": [[27, 51], ["p_opt.ParallelOptimizer.hp_config.get_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict"], ["", "def", "create_job_request", "(", "self", ",", "mode", "=", "\"DIV\"", ",", "spec", "=", "\"RANDOM\"", ",", "\n", "exp_crt", "=", "\"TIME\"", ",", "exp_time", "=", "\"24h\"", ",", "exp_goal", "=", "0.9999", ",", "\n", "num_trials", "=", "1", ",", "\n", "space_id", "=", "\"None\"", ",", "\n", "goal_metric", "=", "\"error\"", ",", "\n", "surrogate", "=", "None", ")", ":", "\n", "        ", "job_desc", "=", "{", "}", "\n", "job_desc", "[", "'exp_crt'", "]", "=", "exp_crt", "\n", "job_desc", "[", "'exp_time'", "]", "=", "exp_time", "\n", "job_desc", "[", "'exp_goal'", "]", "=", "exp_goal", "\n", "job_desc", "[", "'num_trials'", "]", "=", "num_trials", "\n", "job_desc", "[", "'goal_metric'", "]", "=", "goal_metric", "\n", "job_desc", "[", "'mode'", "]", "=", "mode", "\n", "job_desc", "[", "'spec'", "]", "=", "spec", "\n", "\n", "trainer_url", "=", "\"http://{}:{}\"", ".", "format", "(", "self", ".", "train_node", "[", "\"ip_address\"", "]", ",", "self", ".", "train_node", "[", "\"port_num\"", "]", ")", "\n", "job_desc", "[", "'train_node'", "]", "=", "trainer_url", "\n", "job_desc", "[", "'space_id'", "]", "=", "space_id", "\n", "if", "surrogate", "!=", "None", ":", "\n", "            ", "job_desc", "[", "'surrogate'", "]", "=", "surrogate", "\n", "", "else", ":", "\n", "            ", "job_desc", "[", "'hp_cfg'", "]", "=", "self", ".", "hp_config", ".", "get_dict", "(", ")", "\n", "\n", "", "return", "job_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.wait_until_done": [[52, 76], ["NotImplementedError", "p_opt.ParallelOptimizer.connector.get_job", "time.sleep", "warn", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "wait_until_done", "(", "self", ",", "method", "=", "'polling'", ")", ":", "\n", "        ", "cur_result", "=", "None", "\n", "if", "method", "==", "'polling'", ":", "\n", "            ", "try", ":", "\n", "                ", "while", "not", "self", ".", "stop_flag", ":", "# XXX: infinite loop", "\n", "                    ", "self", ".", "in_progress", "=", "True", "\n", "j", "=", "self", ".", "connector", ".", "get_job", "(", "\"active\"", ")", "\n", "if", "j", "!=", "None", ":", "\n", "                        ", "if", "\"result\"", "in", "j", ":", "\n", "                            ", "pass", "\n", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"Invalid job description: {}\"", ".", "format", "(", "j", ")", ")", "\n", "", "", "else", ":", "\n", "# working job is finished", "\n", "                        ", "break", "\n", "", "time", ".", "sleep", "(", "self", ".", "polling_interval", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Something goes wrong in remote worker: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "", "finally", ":", "\n", "                ", "self", ".", "in_progress", "=", "False", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"No such waiting method implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.set_job_request": [[77, 80], ["None"], "methods", ["None"], ["", "", "def", "set_job_request", "(", "self", ",", "job_req", ")", ":", "\n", "# TODO: validate job request", "\n", "        ", "self", ".", "job_req", "=", "job_req", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.optimize": [[81, 105], ["p_opt.ParallelOptimizer.connector.validate", "p_opt.ParallelOptimizer.connector.create_job", "TypeError", "p_opt.ParallelOptimizer.connector.start", "error", "p_opt.ParallelOptimizer.jobs.append", "p_opt.ParallelOptimizer.wait_until_done", "p_opt.ParallelOptimizer.get_repo", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_job.RemoteJobConnector.create_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.wait_until_done", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_repo", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "optimize", "(", "self", ",", "job_req", ")", ":", "\n", "        ", "if", "self", ".", "connector", ".", "validate", "(", ")", ":", "\n", "            ", "job_id", "=", "self", ".", "connector", ".", "create_job", "(", "job_req", ")", "\n", "if", "job_id", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "connector", ".", "start", "(", "job_id", ")", ":", "\n", "\n", "                    ", "self", ".", "jobs", ".", "append", "(", "{", "\"id\"", ":", "job_id", ",", "\"options\"", ":", "job_req", ",", "\"status\"", ":", "\"run\"", "}", ")", "\n", "\n", "self", ".", "wait_until_done", "(", ")", "\n", "\n", "result", "=", "self", ".", "get_repo", "(", "job_id", ")", "\n", "for", "job", "in", "self", ".", "jobs", ":", "\n", "                        ", "if", "job", "[", "'id'", "]", "==", "job_id", ":", "\n", "                            ", "job", "[", "\"result\"", "]", "=", "result", "\n", "job", "[", "\"status\"", "]", "=", "\"done\"", "\n", "\n", "", "", "return", "result", "\n", "\n", "", "else", ":", "\n", "                    ", "error", "(", "\"Starting HPO job failed.\"", ")", "\n", "", "", "else", ":", "\n", "                ", "error", "(", "\"Creating job failed\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Trainer validation failed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.get_results": [[106, 117], ["debug", "error", "results.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "try", ":", "\n", "            ", "debug", "(", "\"trying to getting all results from {}\"", ".", "format", "(", "self", ".", "jobs", ")", ")", "\n", "for", "job", "in", "self", ".", "jobs", ":", "\n", "                ", "if", "job", "[", "\"status\"", "]", "==", "\"done\"", ":", "\n", "                    ", "results", ".", "append", "(", "{", "\"job_id\"", ":", "job", "[", "\"id\"", "]", ",", "\"result\"", ":", "job", "[", "\"result\"", "]", "}", ")", "\n", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "error", "(", "\"getting the results failed\"", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.get_current_result": [[118, 128], ["p_opt.ParallelOptimizer.connector.get_job", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "get_current_result", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "j", "=", "self", ".", "connector", ".", "get_job", "(", "job_id", ")", "\n", "if", "\"result\"", "in", "j", ":", "\n", "                ", "return", "j", "[", "\"result\"", "]", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Something goes wrong in remote worker: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.execute": [[129, 134], ["p_opt.ParallelOptimizer.optimize", "p_opt.ParallelOptimizer.create_job_request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.optimize", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.create_job_request"], ["", "", "def", "execute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "job_req", "==", "None", ":", "\n", "            ", "self", ".", "job_req", "=", "self", ".", "create_job_request", "(", ")", "\n", "\n", "", "return", "self", ".", "optimize", "(", "self", ".", "job_req", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.check_active": [[135, 137], ["p_opt.ParallelOptimizer.connector.check_active"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.check_active"], ["", "def", "check_active", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "connector", ".", "check_active", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.__init__": [[5, 7], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.get_id": [[8, 10], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.set_id": [[11, 13], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.__init__": [[17, 28], ["xoa.workers.trainer.Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "forked", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "TargetFunctionEvaluator", ",", "self", ")", ".", "__init__", "(", "name", ",", "fork", "=", "forked", ")", "\n", "\n", "self", ".", "type", "=", "'eval_func'", "\n", "self", ".", "eval_func", "=", "None", "\n", "\n", "self", ".", "max_iters", "=", "1", "\n", "self", ".", "iter_unit", "=", "\"epoch\"", "\n", "\n", "self", ".", "eval_process", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.get_config": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.set_max_iters": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_max_iters", "(", "self", ",", "num_max_iters", ",", "iter_unit", "=", "\"epoch\"", ")", ":", "\n", "        ", "self", ".", "max_iters", "=", "num_max_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.set_exec_func": [[35, 40], ["None"], "methods", ["None"], ["", "def", "set_exec_func", "(", "self", ",", "eval_func", ",", "args", ",", "defaults", "=", "None", ")", ":", "\n", "        ", "self", ".", "eval_func", "=", "eval_func", "\n", "self", ".", "config", "=", "{", "\"target_func\"", ":", "eval_func", ".", "__name__", ",", "\n", "\"arguments\"", ":", "args", ",", "\n", "\"defaults\"", ":", "defaults", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start": [[41, 54], ["evaluator.TargetFunctionEvaluator.is_working", "debug", "time.sleep", "error", "debug", "super().start"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.is_working", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_working", "(", ")", "==", "True", ":", "\n", "            ", "debug", "(", "\"Trainer is busy!\"", ")", "\n", "time", ".", "sleep", "(", "3", ")", "# XXX:set proper waiting time", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "params", "is", "None", ":", "\n", "            ", "error", "(", "'Set configuration properly before starting!'", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"Training is starting with {}\"", ".", "format", "(", "self", ".", "params", ")", ")", "\n", "super", "(", "TargetFunctionEvaluator", ",", "self", ")", ".", "start", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.is_working": [[55, 66], ["evaluator.TargetFunctionEvaluator.is_forked", "evaluator.TargetFunctionEvaluator.eval_process.is_alive", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.is_forked", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "is_working", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "self", ".", "is_forked", "(", ")", "and", "self", ".", "eval_process", "!=", "None", ":", "\n", "                ", "self", ".", "busy", "=", "self", ".", "eval_process", ".", "is_alive", "(", ")", "\n", "return", "self", ".", "busy", "\n", "", "else", ":", "\n", "                ", "self", ".", "busy", "=", "False", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "debug", "(", "\"Exception raised when checking work state: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "", "finally", ":", "\n", "            ", "return", "self", ".", "busy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.stop": [[67, 82], ["super().stop", "evaluator.TargetFunctionEvaluator.eval_process.is_alive", "debug", "time.sleep", "os.kill", "time.sleep", "warn", "evaluator.TargetFunctionEvaluator.stop"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop"], ["", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eval_process", "!=", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "while", "self", ".", "eval_process", ".", "is_alive", "(", ")", ":", "\n", "                    ", "os", ".", "kill", "(", "self", ".", "eval_process", ".", "_popen", ".", "pid", ",", "signal", ".", "SIGKILL", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "", "debug", "(", "\"Evaluation process stopped.\"", ")", "\n", "self", ".", "stop_flag", "=", "True", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Exception occurs on stopping an evaluation job: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "self", ".", "stop", "(", ")", "# XXX:retry to kill process", "\n", "", "", "else", ":", "\n", "            ", "super", "(", "TargetFunctionEvaluator", ",", "self", ")", ".", "stop", "(", ")", "\n", "while", "self", ".", "stop_flag", "==", "False", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.execute": [[83, 140], ["evaluator.TargetFunctionEvaluator.reset", "debug", "debug", "time.time", "copy.copy", "evaluator.TargetFunctionEvaluator.get_cur_result", "evaluator.TargetFunctionEvaluator.update_result", "evaluator.TargetFunctionEvaluator.is_forked", "multiprocessing.Process", "evaluator.TargetFunctionEvaluator.eval_process.start", "time.sleep", "evaluator.TargetFunctionEvaluator.eval_func", "evaluator.TargetFunctionEvaluator.get_device_id", "warn", "evaluator.TargetFunctionEvaluator.thread_cond.notify", "evaluator.TargetFunctionEvaluator.load_results", "debug", "evaluator.TargetFunctionEvaluator.check_started", "evaluator.TargetFunctionEvaluator.eval_process.join", "time.time", "time.asctime", "time.asctime", "debug", "RuntimeError", "evaluator.TargetFunctionEvaluator.get_device_id", "time.localtime", "time.localtime", "time.asctime", "time.sleep", "sys.exc_info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_cur_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.update_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.is_forked", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.load_results", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.check_started", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "", "", "def", "execute", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "reset", "(", ")", "# XXX:self.results should be empty here", "\n", "debug", "(", "\"Assigned parameters: {}\"", ".", "format", "(", "self", ".", "params", ")", ")", "\n", "debug", "(", "\"Max training iteration: {}{}\"", ".", "format", "(", "self", ".", "max_iters", ",", "self", ".", "iter_unit", ")", ")", "\n", "\n", "base_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "result", "=", "None", "\n", "job_id", "=", "copy", ".", "copy", "(", "self", ".", "job_id", ")", "# XXX:store started job id   ", "\n", "# wait until terminated by calling stop()", "\n", "\n", "if", "self", ".", "is_forked", "(", ")", "==", "True", ":", "\n", "                ", "self", ".", "eval_process", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "eval_func", ",", "\n", "args", "=", "(", "self", ".", "params", ",", ")", ",", "\n", "kwargs", "=", "{", "\n", "\"max_iters\"", ":", "self", ".", "max_iters", ",", "\n", "\"iter_unit\"", ":", "self", ".", "iter_unit", ",", "\n", "\"job_id\"", ":", "job_id", "\n", "}", ")", "\n", "\n", "self", ".", "eval_process", ".", "start", "(", ")", "\n", "# Waiting until the evaluation process being initialized", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "if", "self", ".", "check_started", "(", ")", "==", "True", ":", "\n", "                    ", "self", ".", "eval_process", ".", "join", "(", ")", "# Here takes long time to complete ", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "et", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "end_time", ")", ")", "\n", "ls", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "self", ".", "last_sync_time", ")", ")", "\n", "debug", "(", "\"Task ended at {} but the final result was synchronized at {}.\"", ".", "format", "(", "et", ",", "ls", ")", ")", "\n", "while", "self", ".", "last_sync_time", "==", "None", "or", "end_time", ">", "self", ".", "last_sync_time", ":", "\n", "                        ", "now", "=", "time", ".", "asctime", "(", ")", "\n", "#debug(\"Waiting the result synchronization at {}.\".format(now))", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "if", "self", ".", "stop_flag", "==", "True", ":", "\n", "                            ", "break", "\n", "", "", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Fail to start the evaluation with {}\"", ".", "format", "(", "self", ".", "params", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "eval_func", "(", "self", ".", "params", ",", "\n", "max_iters", "=", "self", ".", "max_iters", ",", "\n", "iter_unit", "=", "self", ".", "iter_unit", ",", "\n", "job_id", "=", "job_id", ")", "\n", "\n", "", "result", "=", "self", ".", "get_cur_result", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "self", ".", "update_result", "(", "self", ".", "max_iters", ",", "result", ",", "base_time", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception raised on evaluation: {}\\n{}\"", ".", "format", "(", "ex", ",", "sys", ".", "exc_info", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "stop_flag", "=", "True", "\n", "\n", "", "finally", ":", "\n", "            ", "with", "self", ".", "thread_cond", ":", "\n", "                ", "self", ".", "thread_cond", ".", "notify", "(", ")", "\n", "self", ".", "load_results", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "debug", "(", "\"Evaluation of {} has finished.\"", ".", "format", "(", "job_id", ")", ")", "\n", "self", ".", "busy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.update_result": [[141, 184], ["type", "evaluator.TargetFunctionEvaluator.results.append", "time.time", "type", "len", "type", "math.isnan", "evaluator.TargetFunctionEvaluator.results.append", "warn", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "", "def", "update_result", "(", "self", ",", "cur_iter", ",", "result", ",", "base_time", ")", ":", "\n", "        ", "if", "type", "(", "result", ")", "==", "dict", ":", "\n", "\n", "# mandatory attributes", "\n", "            ", "if", "\"cur_iter\"", "in", "result", ":", "\n", "                ", "cur_iter", "=", "result", "[", "\"cur_iter\"", "]", "\n", "\n", "", "if", "\"iter_unit\"", "in", "result", ":", "\n", "                ", "iter_unit", "=", "result", "[", "\"iter_unit\"", "]", "\n", "\n", "", "cur_dur", "=", "None", "\n", "if", "\"run_time\"", "in", "result", "and", "result", "[", "\"run_time\"", "]", ">", "0", ":", "\n", "                ", "cur_dur", "=", "result", "[", "\"run_time\"", "]", "\n", "", "else", ":", "\n", "                ", "cur_dur", "=", "time", ".", "time", "(", ")", "-", "base_time", "\n", "\n", "", "result", "=", "{", "\n", "\"cur_iter\"", ":", "cur_iter", ",", "\n", "\"iter_unit\"", ":", "self", ".", "iter_unit", ",", "\n", "\"run_time\"", ":", "cur_dur", "\n", "}", "\n", "\n", "keys", "=", "[", "'val_loss'", ",", "'val_loss'", ",", "'val_acc'", ",", "'test_acc'", "]", "\n", "for", "k", "in", "keys", ":", "\n", "                ", "if", "k", "in", "result", ":", "\n", "                    ", "v", "=", "result", "[", "k", "]", "\n", "result", "[", "k", "]", "=", "v", "\n", "", "", "self", ".", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "elif", "type", "(", "result", ")", "==", "list", "and", "len", "(", "result", ")", ">", "0", ":", "\n", "            ", "self", ".", "results", "=", "result", "# update all results            ", "\n", "", "elif", "type", "(", "result", ")", "==", "float", ":", "\n", "            ", "if", "math", ".", "isnan", "(", "result", ")", ":", "\n", "                ", "result", "=", "sys", ".", "float_info", ".", "max", "# Set max number of float when NaN ", "\n", "", "result", "=", "{", "\n", "\"run_time\"", ":", "time", ".", "time", "(", ")", "-", "base_time", ",", "\n", "\"test_loss\"", ":", "result", ",", "\n", "\"cur_iter\"", ":", "cur_iter", ",", "\n", "\"iter_unit\"", ":", "self", ".", "iter_unit", "\n", "}", "\n", "self", ".", "results", ".", "append", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"Invalid result format: {}\"", ".", "format", "(", "result", ")", ")", "\n", "#raise ValueError(\"Invalid result\")        ", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.TimestringConverter.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.TimestringConverter.convert": [[11, 35], ["str", "str.endswith", "str.endswith", "ValueError", "int", "str.endswith", "str.endswith", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "time_string", ")", ":", "\n", "        ", "secs", "=", "0", "\n", "try", ":", "\n", "            ", "ts", "=", "str", "(", "time_string", ")", "\n", "# convert to integer", "\n", "if", "ts", ".", "endswith", "(", "'m'", ")", ":", "# minutes", "\n", "                ", "ts", "=", "time_string", "[", ":", "-", "1", "]", "\n", "secs", "=", "int", "(", "ts", ")", "*", "60", "\n", "", "elif", "ts", ".", "endswith", "(", "'h'", ")", ":", "# hours", "\n", "                ", "ts", "=", "time_string", "[", ":", "-", "1", "]", "\n", "secs", "=", "int", "(", "ts", ")", "*", "60", "*", "60", "\n", "", "elif", "ts", ".", "endswith", "(", "'d'", ")", ":", "# hours", "\n", "                ", "ts", "=", "time_string", "[", ":", "-", "1", "]", "\n", "secs", "=", "int", "(", "ts", ")", "*", "60", "*", "60", "*", "24", "\n", "", "elif", "ts", ".", "endswith", "(", "'w'", ")", ":", "# weeks", "\n", "                ", "ts", "=", "time_string", "[", ":", "-", "1", "]", "\n", "secs", "=", "int", "(", "ts", ")", "*", "60", "*", "60", "*", "24", "*", "7", "\n", "", "else", ":", "\n", "                ", "secs", "=", "int", "(", "time_string", ")", "\n", "\n", "", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Invaild --exp_time argument: {}.'", ".", "format", "(", "time_string", ")", ")", "\n", "\n", "", "return", "secs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.__init__": [[39, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.transform": [[42, 56], ["converter.OneHotVectorTransformer.config.get_param_names", "converter.OneHotVectorTransformer.config.get_value_type", "converter.OneHotVectorTransformer.config.get_type", "converter.OneHotVectorTransformer.config.get_range", "converter.OneHotVectorTransformer.encode"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode"], ["", "def", "transform", "(", "self", ",", "hpv", ")", ":", "\n", "# hpv is dict type", "\n", "\n", "        ", "encoded", "=", "[", "]", "\n", "for", "param", "in", "self", ".", "config", ".", "get_param_names", "(", ")", ":", "\n", "            ", "vt", "=", "self", ".", "config", ".", "get_value_type", "(", "param", ")", "\n", "t", "=", "self", ".", "config", ".", "get_type", "(", "param", ")", "\n", "r", "=", "self", ".", "config", ".", "get_range", "(", "param", ")", "\n", "v", "=", "hpv", "[", "param", "]", "\n", "e", "=", "self", ".", "encode", "(", "vt", ",", "t", ",", "r", ",", "v", ")", "\n", "#debug(\"{}: {} ({})\".format(param, vt, r))", "\n", "#debug(\"{} -> {}\".format(v, e))", "\n", "encoded", "+=", "e", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.encode": [[57, 74], ["len", "converter.OneHotVectorTransformer.get_cat_index", "converter.OneHotVectorTransformer.create_one_hot_vector", "float", "converter.OneHotVectorTransformer.get_cat_index", "float", "float", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.get_cat_index", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.create_one_hot_vector", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.get_cat_index"], ["", "def", "encode", "(", "self", ",", "value_type", ",", "type", ",", "range", ",", "value", ")", ":", "\n", "        ", "encoded", "=", "None", "\n", "if", "value_type", "==", "'discrete'", "or", "value_type", "==", "'continuous'", ":", "\n", "            ", "min", "=", "range", "[", "0", "]", "\n", "max", "=", "range", "[", "1", "]", "\n", "encoded", "=", "[", "(", "(", "float", "(", "value", ")", "-", "min", ")", "/", "(", "float", "(", "max", ")", "-", "min", ")", ")", "]", "# normalized", "\n", "", "elif", "value_type", "==", "'categorical'", ":", "\n", "            ", "num_items", "=", "len", "(", "range", ")", "\n", "index", "=", "self", ".", "get_cat_index", "(", "type", ",", "range", ",", "value", ")", "\n", "encoded", "=", "self", ".", "create_one_hot_vector", "(", "num_items", ",", "index", ")", "\n", "", "elif", "value_type", "==", "'preordered'", ":", "\n", "            ", "base", "=", "len", "(", "range", ")", "-", "1", "\n", "span", "=", "float", "(", "1.0", "/", "base", ")", "\n", "index", "=", "self", ".", "get_cat_index", "(", "type", ",", "range", ",", "value", ")", "\n", "encoded", "=", "[", "index", "*", "span", "]", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode": [[75, 94], ["int", "len", "int", "len"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "value_type", ",", "type", ",", "range", ",", "value", ")", ":", "\n", "        ", "decoded", "=", "None", "\n", "if", "value_type", "==", "'discrete'", "or", "value_type", "==", "'continuous'", ":", "\n", "            ", "min", "=", "range", "[", "0", "]", "\n", "max", "=", "range", "[", "-", "1", "]", "\n", "decoded", "=", "(", "max", "-", "min", ")", "*", "value", "+", "min", "\n", "# fix rounding up error", "\n", "if", "decoded", ">", "max", ":", "\n", "                ", "decoded", "=", "max", "\n", "\n", "", "", "elif", "value_type", "==", "'categorical'", ":", "\n", "            ", "num_item", "=", "int", "(", "len", "(", "range", ")", "*", "value", ")", "\n", "decoded", "=", "range", "[", "num_item", "]", "\n", "\n", "", "elif", "value_type", "==", "'preordered'", ":", "\n", "            ", "item_id", "=", "int", "(", "len", "(", "range", ")", "*", "value", ")", "-", "1", "\n", "decoded", "=", "range", "[", "item_id", "]", "\n", "\n", "", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.create_one_hot_vector": [[95, 103], ["ValueError", "range"], "methods", ["None"], ["", "def", "create_one_hot_vector", "(", "self", ",", "size", ",", "index", ")", ":", "\n", "\n", "        ", "if", "size", ">", "index", "and", "index", ">=", "0", ":", "\n", "            ", "vec", "=", "[", "0.0", "for", "v", "in", "range", "(", "size", ")", "]", "\n", "vec", "[", "index", "]", "=", "1.0", "\n", "return", "vec", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invaild size or index: {}, {}\"", ".", "format", "(", "size", ",", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast": [[104, 116], ["bool", "int", "float", "str", "TypeError"], "methods", ["None"], ["", "", "def", "cast", "(", "self", ",", "type", ",", "value", ")", ":", "\n", "        ", "if", "type", "==", "\"bool\"", ":", "\n", "            ", "value", "=", "bool", "(", "value", ")", "\n", "", "elif", "type", "==", "\"int\"", ":", "\n", "            ", "value", "=", "int", "(", "value", ")", "\n", "", "elif", "type", "==", "'float'", ":", "\n", "            ", "value", "=", "float", "(", "value", ")", "\n", "", "elif", "type", "==", "'str'", ":", "\n", "            ", "value", "=", "str", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Invalid type {}, value {}\"", ".", "format", "(", "type", ",", "value", ")", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.get_cat_index": [[117, 129], ["len", "converter.OneHotVectorTransformer.cast", "range", "ValueError", "converter.OneHotVectorTransformer.cast", "isinstance", "abs"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast"], ["", "def", "get_cat_index", "(", "self", ",", "type", ",", "category", ",", "value", ")", ":", "\n", "        ", "num_cat", "=", "len", "(", "category", ")", "\n", "value", "=", "self", ".", "cast", "(", "type", ",", "value", ")", "\n", "for", "i", "in", "range", "(", "num_cat", ")", ":", "\n", "            ", "c", "=", "self", ".", "cast", "(", "type", ",", "category", "[", "i", "]", ")", "\n", "if", "c", "==", "value", ":", "\n", "                ", "return", "i", "\n", "", "elif", "isinstance", "(", "value", ",", "float", ")", "and", "abs", "(", "c", "-", "value", ")", "<", "0.000001", ":", "\n", "#XXX: approximately same", "\n", "                ", "return", "i", "\n", "\n", "", "", "raise", "ValueError", "(", "\"No value {} in category {}\"", ".", "format", "(", "value", ",", "category", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.Singleton.__new__": [[66, 70], ["object.__new__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.Singleton.__new__"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "cls", "not", "in", "cls", ".", "_instances", ":", "\n", "            ", "cls", ".", "_instances", "[", "cls", "]", "=", "super", "(", "Singleton", ",", "cls", ")", ".", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "cls", ".", "_instances", "[", "cls", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.__init__": [[74, 80], ["hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# initialize first time only ", "\n", "        ", "if", "hasattr", "(", "self", ",", "'cur_level'", ")", "is", "False", ":", "\n", "            ", "self", ".", "cur_level", "=", "'warn'", "\n", "self", ".", "levels", "=", "[", "'debug'", ",", "'warn'", ",", "'error'", ",", "'log'", "]", "\n", "self", ".", "trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.set_level": [[81, 84], ["log_level.lower", "log_level.lower"], "methods", ["None"], ["", "", "def", "set_level", "(", "self", ",", "log_level", ")", ":", "\n", "        ", "if", "log_level", ".", "lower", "(", ")", "in", "self", ".", "levels", ":", "\n", "            ", "self", ".", "cur_level", "=", "log_level", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.set_trace": [[85, 87], ["None"], "methods", ["None"], ["", "", "def", "set_trace", "(", "self", ",", "trace", ")", ":", "\n", "        ", "self", ".", "trace", "=", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.debug": [[88, 91], ["logger.ConsoleLogger.levels.index", "logger.ConsoleLogger.levels.index", "print", "os.getpid"], "methods", ["None"], ["", "def", "debug", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'debug'", ")", ":", "\n", "            ", "print", "(", "\"[{}:D] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.warn": [[92, 96], ["logger.ConsoleLogger.levels.index", "logger.ConsoleLogger.levels.index", "print", "logger.ConsoleLogger.print_trace", "os.getpid"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.print_trace"], ["", "", "def", "warn", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'warn'", ")", ":", "\n", "            ", "print", "(", "\"[{}:W] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "self", ".", "print_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.error": [[97, 101], ["logger.ConsoleLogger.levels.index", "logger.ConsoleLogger.levels.index", "print", "logger.ConsoleLogger.print_trace", "os.getpid"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.print_trace"], ["", "", "def", "error", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'error'", ")", ":", "\n", "            ", "print", "(", "\"[{}:E] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "self", ".", "print_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.print_trace": [[102, 107], ["traceback.format_exc", "print"], "methods", ["None"], ["", "", "def", "print_trace", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "trace", ":", "\n", "            ", "exception_log", "=", "traceback", ".", "format_exc", "(", ")", "\n", "if", "exception_log", "!=", "None", "and", "not", "'NoneType'", "in", "exception_log", ":", "\n", "                ", "print", "(", "exception_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.ConsoleLogger.info": [[108, 110], ["print", "os.getpid"], "methods", ["None"], ["", "", "", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "\"[{}:L] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.__init__": [[114, 121], ["hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# initialize first time only ", "\n", "        ", "if", "hasattr", "(", "self", ",", "'cur_level'", ")", "is", "False", ":", "\n", "            ", "self", ".", "cur_level", "=", "'warn'", "\n", "self", ".", "levels", "=", "[", "'debug'", ",", "'warn'", ",", "'error'", ",", "'log'", "]", "\n", "self", ".", "trace", "=", "False", "\n", "self", ".", "logger", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.set_log_file": [[122, 129], ["logging.getLogger", "logging.getLogger", "logging.getLogger", "logging.getLogger", "logging.Formatter", "logging.Formatter", "logging.Formatter", "logging.Formatter", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setFormatter", "logger.FileLogger.logger.addHandler", "logger.FileLogger.logger.setLevel"], "methods", ["None"], ["", "", "def", "set_log_file", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'FileLogger'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(process)d:%(levelname)s] %(message)s'", ")", "\n", "f_handler", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "f_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "f_handler", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.set_level": [[130, 146], ["logger.FileLogger.set_log_file", "log_level.lower", "log_level.lower", "logger.FileLogger.logger.setLevel", "logger.FileLogger.logger.setLevel", "logger.FileLogger.logger.setLevel", "logger.FileLogger.logger.setLevel", "print"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file"], ["", "def", "set_level", "(", "self", ",", "log_level", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "\n", "", "if", "log_level", ".", "lower", "(", ")", "in", "self", ".", "levels", ":", "\n", "            ", "self", ".", "cur_level", "=", "log_level", ".", "lower", "(", ")", "\n", "if", "self", ".", "cur_level", "==", "'debug'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "", "elif", "self", ".", "cur_level", "==", "'warn'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "WARN", ")", "\n", "", "elif", "self", ".", "cur_level", "==", "'error'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "ERROR", ")", "\n", "", "elif", "self", ".", "cur_level", "==", "'log'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Invalid log level: {}'", ".", "format", "(", "log_level", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.set_trace": [[147, 149], ["None"], "methods", ["None"], ["", "", "", "def", "set_trace", "(", "self", ",", "trace", ")", ":", "\n", "        ", "self", ".", "trace", "=", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.debug": [[150, 156], ["logger.FileLogger.set_log_file", "logger.FileLogger.levels.index", "logger.FileLogger.levels.index", "logging.disable", "logging.disable", "logging.disable", "logging.disable", "logger.FileLogger.logger.debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "debug", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'debug'", ")", ":", "\n", "            ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "self", ".", "logger", ".", "debug", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.warn": [[157, 163], ["logger.FileLogger.set_log_file", "logger.FileLogger.levels.index", "logger.FileLogger.levels.index", "logging.disable", "logging.disable", "logging.disable", "logging.disable", "logger.FileLogger.logger.warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "warn", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'warn'", ")", ":", "\n", "            ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "self", ".", "logger", ".", "warn", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.error": [[164, 171], ["print", "logger.FileLogger.set_log_file", "logger.FileLogger.levels.index", "logger.FileLogger.levels.index", "logging.disable", "logging.disable", "logging.disable", "logging.disable", "logger.FileLogger.logger.error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "", "def", "error", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "msg", ")", "# print message in console", "\n", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'error'", ")", ":", "\n", "            ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "self", ".", "logger", ".", "error", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.print_trace": [[172, 179], ["traceback.format_exc", "logger.FileLogger.set_log_file", "logger.FileLogger.logger.debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "print_trace", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "\n", "", "exception_log", "=", "traceback", ".", "format_exc", "(", ")", "\n", "if", "exception_log", "!=", "None", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "exception_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.info": [[180, 186], ["print", "logging.disable", "logging.disable", "logging.disable", "logging.disable", "logger.FileLogger.logger.info", "logger.FileLogger.set_log_file"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file"], ["", "", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "msg", ")", "# print message in console  ", "\n", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.print_trace": [[10, 15], ["logger.ConsoleLogger.set_trace", "logger.ConsoleLogger"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.set_trace"], ["def", "print_trace", "(", "enable", "=", "True", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger", "\n", "", "__LOGGER__", ".", "set_trace", "(", "enable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file": [[16, 29], ["logger.FileLogger", "logger.FileLogger.set_log_file", "print", "os.path.isdir", "os.mkdir", "print", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_file"], ["", "def", "set_log_file", "(", "log_type", ",", "log_file", ",", "to_path", "=", "'./temp/'", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "f_path", "=", "to_path", "+", "log_file", "\n", "try", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "to_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "to_path", ")", "\n", "\n", "", "__LOGGER__", "=", "FileLogger", "(", ")", "\n", "__LOGGER__", ".", "set_log_file", "(", "f_path", ")", "\n", "print", "(", "\"Progress logs of {} will be stored in {}\"", ".", "format", "(", "log_type", ",", "f_path", ")", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_level": [[31, 38], ["logger.ConsoleLogger.set_level", "logger.ConsoleLogger", "logger.print_trace"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.FileLogger.set_level", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.print_trace"], ["", "", "def", "set_log_level", "(", "log_level", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "set_level", "(", "log_level", ")", "\n", "if", "log_level", "==", "'debug'", ":", "\n", "        ", "print_trace", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug": [[39, 44], ["logger.ConsoleLogger.debug", "logger.ConsoleLogger"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "debug", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "debug", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn": [[45, 50], ["logger.ConsoleLogger.warn", "logger.ConsoleLogger"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "warn", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "warn", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error": [[51, 56], ["logger.ConsoleLogger.error", "logger.ConsoleLogger"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "error", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "error", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info": [[57, 62], ["logger.ConsoleLogger.info", "logger.ConsoleLogger"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "def", "info", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.read_cfg.read_config": [[5, 36], ["os.path.exists", "ValueError", "os.path.exists", "os.path.exists", "open", "logger.error", "ValueError", "os.path.exists", "hasattr", "os.path.exists", "yaml.load", "yaml.load", "json.load", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["def", "read_config", "(", "cfg_file_name", ",", "path", "=", "'run_conf/'", ")", ":", "\n", "    ", "try", ":", "\n", "# file existence test", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Run config path not existed: {}\"", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", "+", "cfg_file_name", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "path", "+", "cfg_file_name", "+", "\".yaml\"", ")", ":", "\n", "                ", "cfg_file_name", "+=", "\".yaml\"", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "path", "+", "cfg_file_name", "+", "\".yml\"", ")", ":", "\n", "                ", "cfg_file_name", "+=", "\".yml\"", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "path", "+", "cfg_file_name", "+", "\".json\"", ")", ":", "\n", "                ", "cfg_file_name", "+=", "\".json\"", "\n", "\n", "", "", "with", "open", "(", "path", "+", "cfg_file_name", ")", "as", "cfg_file", ":", "\n", "            ", "if", "\".yaml\"", "in", "cfg_file_name", "or", "\".yml\"", "in", "cfg_file_name", ":", "\n", "                ", "import", "yaml", "\n", "if", "hasattr", "(", "yaml", ",", "'FullLoader'", ")", ":", "\n", "                    ", "json_dict", "=", "yaml", ".", "load", "(", "cfg_file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "else", ":", "\n", "                    ", "json_dict", "=", "yaml", ".", "load", "(", "cfg_file", ")", "# python 2.x support", "\n", "", "", "elif", "\".json\"", "in", "cfg_file_name", ":", "\n", "                ", "import", "json", "\n", "json_dict", "=", "json", ".", "load", "(", "cfg_file", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid run config format\"", ")", "\n", "", "return", "json_dict", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "error", "(", "'Exception on loading run configuration: {}'", ".", "format", "(", "ex", ")", ")", "\n", "raise", "ValueError", "(", "'Reading {} file failed.'", ".", "format", "(", "cfg_file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.read_cfg.validate_config": [[38, 71], ["type", "logger.error", "len", "logger.error", "len", "logger.error", "ValueError", "ValueError", "ValueError", "ValueError", "arm.keys", "arm.keys", "bandit.keys", "bandit.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "", "def", "validate_config", "(", "config", ")", ":", "\n", "# validate config schema", "\n", "    ", "try", ":", "\n", "        ", "if", "type", "(", "config", ")", "is", "not", "dict", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "\"arms\"", "in", "config", ":", "\n", "            ", "if", "len", "(", "config", "[", "\"arms\"", "]", ")", "==", "0", ":", "\n", "                ", "error", "(", "\"no arm is listed.\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "for", "arm", "in", "config", "[", "\"arms\"", "]", ":", "\n", "                    ", "if", "not", "\"model\"", "in", "arm", ".", "keys", "(", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\"no mode attribute in bandit\"", ")", "\n", "", "if", "not", "\"acq_func\"", "in", "arm", ".", "keys", "(", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\"no spec attribute  in bandit\"", ")", "\n", "# TODO: validate value", "\n", "\n", "", "", "", "", "if", "\"bandits\"", "in", "config", ":", "\n", "            ", "if", "len", "(", "config", "[", "\"bandits\"", "]", ")", "==", "0", ":", "\n", "                ", "error", "(", "\"no bandit is listed.\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "for", "bandit", "in", "config", "[", "\"bandits\"", "]", ":", "\n", "                    ", "if", "not", "\"mode\"", "in", "bandit", ".", "keys", "(", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\"no model attribute in bandit\"", ")", "\n", "", "if", "not", "\"spec\"", "in", "bandit", ".", "keys", "(", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\"no strategy attribute  in bandit\"", ")", "\n", "# TODO: validate value", "\n", "", "", "", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "error", "(", "\"invalid BO configuration: {}\"", ".", "format", "(", "config", ")", ")", "\n", "return", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfigurationReader.__init__": [[17, 26], ["os.path.exists", "cfg_file_name.endswith", "hp_cfg.HyperparameterConfigurationReader.read_json", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfigurationReader.read_json", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["    ", "def", "__init__", "(", "self", ",", "cfg_file_name", ",", "config_path", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "_dict", "=", "{", "}", "\n", "if", "not", "cfg_file_name", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "cfg_file_name", "+=", "'.json'", "\n", "", "path", "=", "\"{}{}\"", ".", "format", "(", "config_path", ",", "cfg_file_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "self", ".", "_dict", "=", "self", ".", "read_json", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "error", "(", "\"hyperparam config not found: {}\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfigurationReader.read_json": [[27, 31], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "", "def", "read_json", "(", "self", ",", "cfg_file_name", ")", ":", "\n", "        ", "with", "open", "(", "cfg_file_name", ")", "as", "json_cfg", ":", "\n", "            ", "json_dict", "=", "json", ".", "load", "(", "json_cfg", ")", "\n", "return", "json_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfigurationReader.get_config": [[32, 39], ["hp_cfg.HyperparameterConfiguration", "hp_cfg.HyperparameterConfigurationReader.validate", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "hc", "=", "HyperparameterConfiguration", "(", "self", ".", "_dict", ")", "\n", "if", "self", ".", "validate", "(", "hc", ")", ":", "\n", "                ", "return", "hc", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid configuration: {}\"", ".", "format", "(", "self", ".", "_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfigurationReader.validate": [[40, 83], ["cfg.hyperparams.__dict__.items", "hasattr", "error", "hasattr", "error", "hasattr", "error", "hasattr", "error", "len", "error", "type", "hasattr", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "", "def", "validate", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "cfg", ",", "'hyperparams'", ")", ":", "\n", "            ", "error", "(", "'json object does not contain hyperparams attribute: {}'", ".", "format", "(", "cfg", ")", ")", "\n", "return", "False", "\n", "\n", "", "for", "hyperparam", ",", "conf", "in", "cfg", ".", "hyperparams", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "\n", "# attribute existence test", "\n", "            ", "if", "not", "hasattr", "(", "conf", ",", "'type'", ")", ":", "\n", "                ", "error", "(", "hyperparam", "+", "\" has not type attribute.\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "supported_types", "=", "[", "'int'", ",", "'float'", ",", "'str'", ",", "'bool'", ",", "'unicode'", "]", "\n", "if", "not", "conf", ".", "type", "in", "supported_types", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "if", "not", "hasattr", "(", "conf", ",", "'value_type'", ")", ":", "\n", "                ", "error", "(", "hyperparam", "+", "\" has not value_type attribute.\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "supported_value_types", "=", "[", "'discrete'", ",", "'continuous'", ",", "'preordered'", ",", "'categorical'", "]", "\n", "if", "not", "conf", ".", "value_type", "in", "supported_value_types", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "if", "not", "hasattr", "(", "conf", ",", "'range'", ")", ":", "\n", "                ", "error", "(", "hyperparam", "+", "\" has not range attribute.\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "                ", "range_list", "=", "conf", ".", "range", "\n", "if", "len", "(", "range_list", ")", "is", "0", ":", "\n", "                    ", "error", "(", "hyperparam", "+", "\" has no range values\"", ")", "\n", "return", "False", "\n", "\n", "", "for", "value", "in", "range_list", ":", "\n", "                    ", "value_type_name", "=", "type", "(", "value", ")", ".", "__name__", "\n", "if", "value_type_name", "==", "'unicode'", ":", "\n", "                        ", "value_type_name", "=", "'str'", "\n", "", "if", "value_type_name", "!=", "conf", ".", "type", ":", "\n", "                        ", "if", "not", "hasattr", "(", "conf", ",", "'power_of'", ")", ":", "\n", "                            ", "error", "(", "hyperparam", "+", "\" has invalid type item.\"", ")", "\n", "return", "False", "\n", "\n", "", "", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.DictionaryToObject.__init__": [[86, 95], ["d.items", "isinstance", "setattr", "setattr", "isinstance", "hp_cfg.DictionaryToObject", "isinstance", "hp_cfg.DictionaryToObject"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "for", "a", ",", "b", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "a", ",", "[", "DictionaryToObject", "(", "x", ")", "\n", "if", "isinstance", "(", "\n", "x", ",", "dict", ")", "else", "x", "for", "x", "in", "b", "]", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "a", ",", "DictionaryToObject", "(", "b", ")", "\n", "if", "isinstance", "(", "b", ",", "dict", ")", "else", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.__init__": [[98, 101], ["hp_cfg.DictionaryToObject.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "_dict", "=", "d", "\n", "super", "(", "HyperparameterConfiguration", ",", "self", ")", ".", "__init__", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names": [[102, 109], ["param_list.sort", "hp_cfg.HyperparameterConfiguration.hyperparams.__dict__.keys"], "methods", ["None"], ["", "def", "get_param_names", "(", "self", ")", ":", "\n", "        ", "if", "'param_order'", "in", "self", ".", "_dict", ":", "\n", "            ", "return", "self", ".", "_dict", "[", "'param_order'", "]", "\n", "", "else", ":", "\n", "            ", "param_list", "=", "[", "p", "for", "p", "in", "self", ".", "hyperparams", ".", "__dict__", ".", "keys", "(", ")", "]", "\n", "param_list", ".", "sort", "(", ")", "\n", "return", "param_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type": [[110, 118], ["ValueError", "hp_cfg.HyperparameterConfiguration.get_param_names", "getattr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names"], ["", "", "def", "get_type", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "hyperparam", "=", "getattr", "(", "self", ".", "hyperparams", ",", "name", ")", "\n", "if", "hyperparam", ".", "type", "==", "'unicode'", ":", "\n", "                ", "return", "\"str\"", "\n", "", "else", ":", "\n", "                ", "return", "hyperparam", ".", "type", "\n", "", "", "raise", "ValueError", "(", "\"Invalid hyperparameter name: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type": [[119, 124], ["ValueError", "hp_cfg.HyperparameterConfiguration.get_param_names", "getattr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names"], ["", "def", "get_value_type", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "hyperparam", "=", "getattr", "(", "self", ".", "hyperparams", ",", "name", ")", "\n", "return", "hyperparam", ".", "value_type", "\n", "", "raise", "ValueError", "(", "\"Invalid hyperparameter name: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.is_architectural": [[125, 133], ["ValueError", "hp_cfg.HyperparameterConfiguration.get_param_names", "getattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names"], ["", "def", "is_architectural", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "hyperparam", "=", "getattr", "(", "self", ".", "hyperparams", ",", "name", ")", "\n", "if", "hasattr", "(", "hyperparam", ",", "'architectural'", ")", ":", "\n", "                ", "return", "hyperparam", ".", "architectural", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "raise", "ValueError", "(", "\"Invalid hyperparameter name: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_range": [[134, 152], ["hp_cfg.HyperparameterConfiguration.get_param_names", "getattr", "hasattr", "ValueError", "r.append", "r.append", "item.encode"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode"], ["", "def", "get_range", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "hyperparam", "=", "getattr", "(", "self", ".", "hyperparams", ",", "name", ")", "\n", "r", "=", "hyperparam", ".", "range", "\n", "\n", "if", "hasattr", "(", "hyperparam", ",", "'power_of'", ")", ":", "\n", "                ", "base", "=", "hyperparam", ".", "power_of", "\n", "r", "=", "[", "]", "\n", "for", "power", "in", "hyperparam", ".", "range", ":", "\n", "                    ", "r", ".", "append", "(", "base", "**", "power", ")", "\n", "\n", "", "", "if", "hyperparam", ".", "type", "==", "'unicode'", ":", "\n", "                ", "r", "=", "[", "]", "\n", "for", "item", "in", "hyperparam", ".", "range", ":", "\n", "                    ", "r", ".", "append", "(", "item", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", "\n", "", "", "return", "r", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid hyperparameter name: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_default_vector": [[153, 164], ["hp_cfg.HyperparameterConfiguration.get_param_names", "getattr", "hasattr", "vec.append", "debug", "vec.append", "hp_cfg.HyperparameterConfiguration.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "", "def", "get_default_vector", "(", "self", ")", ":", "\n", "        ", "vec", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "hyperparam", "=", "getattr", "(", "self", ".", "hyperparams", ",", "name", ")", "\n", "if", "hasattr", "(", "hyperparam", ",", "'default'", ")", ":", "\n", "                ", "vec", ".", "append", "(", "hyperparam", ".", "default", ")", "\n", "", "else", ":", "\n", "                ", "min_val", "=", "self", ".", "get_range", "(", "name", ")", "[", "0", "]", "\n", "debug", "(", "\"No default value setting. Use {} as a minimum value of the range.\"", ".", "format", "(", "min_val", ")", ")", "\n", "vec", ".", "append", "(", "min_val", ")", "\n", "", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict": [[165, 167], ["None"], "methods", ["None"], ["", "def", "get_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert": [[168, 187], ["hp_cfg.HyperparameterConfiguration.grid_to_hpv_list", "hp_cfg.HyperparameterConfiguration.dict_to_array", "hp_cfg.HyperparameterConfiguration.dict_to_array", "hp_cfg.HyperparameterConfiguration.arr_to_norm_vec", "hp_cfg.HyperparameterConfiguration.arr_to_list", "hp_cfg.HyperparameterConfiguration.replace_cat_number", "hp_cfg.HyperparameterConfiguration.arr_to_dict", "hp_cfg.HyperparameterConfiguration.to_one_hot_vector", "TypeError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.grid_to_hpv_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.dict_to_array", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.dict_to_array", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_norm_vec", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.replace_cat_number", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.to_one_hot_vector"], ["", "def", "convert", "(", "self", ",", "source_type", ",", "target_type", ",", "value", ")", ":", "\n", "        ", "if", "source_type", "==", "'grid'", "and", "target_type", "==", "'hpv_list'", ":", "\n", "            ", "return", "self", ".", "grid_to_hpv_list", "(", "value", ")", "\n", "", "elif", "source_type", "==", "'dict'", "and", "target_type", "==", "'arr'", ":", "\n", "            ", "return", "self", ".", "dict_to_array", "(", "value", ",", "False", ")", "\n", "", "elif", "source_type", "==", "'dict'", "and", "target_type", "==", "'norm_arr'", ":", "\n", "            ", "return", "self", ".", "dict_to_array", "(", "value", ",", "True", ")", "\n", "", "elif", "source_type", "==", "'arr'", "and", "target_type", "==", "'norm_arr'", ":", "\n", "            ", "return", "self", ".", "arr_to_norm_vec", "(", "value", ")", "\n", "", "elif", "source_type", "==", "'arr'", "and", "target_type", "==", "'list'", ":", "\n", "            ", "return", "self", ".", "arr_to_list", "(", "value", ")", "\n", "", "elif", "source_type", "==", "'hopt_dict'", "and", "target_type", "==", "'dict'", ":", "\n", "            ", "return", "self", ".", "replace_cat_number", "(", "value", ")", "\n", "", "elif", "source_type", "==", "'arr'", "and", "target_type", "==", "'dict'", ":", "\n", "            ", "return", "self", ".", "arr_to_dict", "(", "value", ")", "\n", "", "elif", "target_type", "==", "'one_hot'", ":", "\n", "            ", "return", "self", ".", "to_one_hot_vector", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Invalid type.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.grid_to_hpv_list": [[188, 201], ["hp_cfg.HyperparameterConfiguration.get_param_names", "range", "len", "range", "hpvs.append", "len", "hp_cfg.HyperparameterConfiguration.unnormalize", "hpv.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.unnormalize", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "grid_to_hpv_list", "(", "self", ",", "grid_list", ")", ":", "\n", "        ", "hpvs", "=", "[", "]", "\n", "p_names", "=", "self", ".", "get_param_names", "(", ")", "\n", "\n", "# TODO:speeding up may be required using parallelization", "\n", "for", "i", "in", "range", "(", "len", "(", "grid_list", ")", ")", ":", "\n", "            ", "g", "=", "grid_list", "[", "i", "]", "\n", "hpv", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "g", ")", ")", ":", "\n", "                ", "arg", "=", "self", ".", "unnormalize", "(", "p_names", "[", "j", "]", ",", "g", "[", "j", "]", ")", "\n", "hpv", ".", "append", "(", "arg", ")", "\n", "", "hpvs", ".", "append", "(", "hpv", ")", "\n", "", "return", "hpvs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.dict_to_array": [[202, 211], ["hp_cfg.HyperparameterConfiguration.get_param_names", "hp_cfg.HyperparameterConfiguration.append", "hp_cfg.HyperparameterConfiguration.arr_to_norm_vec"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_norm_vec"], ["", "def", "dict_to_array", "(", "self", ",", "hp_dict", ",", "normalize", ")", ":", "\n", "\n", "        ", "arr", "=", "[", "]", "\n", "for", "p", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "arr", ".", "append", "(", "hp_dict", "[", "p", "]", ")", "\n", "\n", "", "if", "normalize", "==", "True", ":", "\n", "            ", "arr", "=", "self", ".", "arr_to_norm_vec", "(", "arr", ")", "\n", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_list": [[212, 229], ["hp_cfg.HyperparameterConfiguration.get_param_names", "range", "len", "len", "TypeError", "len", "hp_cfg.HyperparameterConfiguration.get_type", "typed_list.append", "int", "len", "len", "float", "eval"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "arr_to_list", "(", "self", ",", "arr", ")", ":", "\n", "# arr to type-casted list", "\n", "        ", "typed_list", "=", "[", "]", "\n", "p_list", "=", "self", ".", "get_param_names", "(", ")", "\n", "if", "len", "(", "p_list", ")", "!=", "len", "(", "arr", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Invalid vector size {} != {} when arr_to_list()\"", ".", "format", "(", "len", "(", "p_list", ")", ",", "len", "(", "arr", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "p_list", ")", ")", ":", "\n", "            ", "p", "=", "p_list", "[", "i", "]", "\n", "t", "=", "self", ".", "get_type", "(", "p", ")", "\n", "if", "t", "==", "'int'", ":", "\n", "                ", "v", "=", "int", "(", "float", "(", "arr", "[", "i", "]", ")", ")", "# FIX: float type string raises ValueError", "\n", "", "else", ":", "\n", "                ", "v", "=", "eval", "(", "t", ")", "(", "arr", "[", "i", "]", ")", "\n", "", "typed_list", ".", "append", "(", "v", ")", "\n", "\n", "", "return", "typed_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_dict": [[230, 248], ["hp_cfg.HyperparameterConfiguration.get_param_names", "range", "len", "len", "TypeError", "len", "hp_cfg.HyperparameterConfiguration.get_type", "float", "eval", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type"], ["", "def", "arr_to_dict", "(", "self", ",", "arr", ")", ":", "\n", "# arr to type-casted dictionary", "\n", "        ", "typed_dict", "=", "{", "}", "\n", "p_list", "=", "self", ".", "get_param_names", "(", ")", "\n", "if", "len", "(", "p_list", ")", "!=", "len", "(", "arr", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Invalid vector size {} != {} when arr_to_dict()\"", ".", "format", "(", "len", "(", "p_list", ")", ",", "len", "(", "arr", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "p_list", ")", ")", ":", "\n", "            ", "p", "=", "p_list", "[", "i", "]", "\n", "t", "=", "self", ".", "get_type", "(", "p", ")", "\n", "if", "t", "==", "'int'", ":", "\n", "                ", "v", "=", "float", "(", "arr", "[", "i", "]", ")", "# XXX: first make it a float type", "\n", "", "else", ":", "\n", "                ", "v", "=", "arr", "[", "i", "]", "\n", "", "v", "=", "eval", "(", "t", ")", "(", "v", ")", "# type casting", "\n", "typed_dict", "[", "p", "]", "=", "v", "\n", "\n", "", "return", "typed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.to_one_hot_vector": [[249, 265], ["hp_cfg.HyperparameterConfiguration.get_param_names", "isinstance", "xoa.commons.converter.OneHotVectorTransformer", "xoa.commons.converter.OneHotVectorTransformer.transform", "hp_cfg.HyperparameterConfiguration.arr_to_list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_list"], ["", "def", "to_one_hot_vector", "(", "self", ",", "vector", ")", ":", "\n", "        ", "one_hot", "=", "[", "]", "\n", "vector_dict", "=", "{", "}", "\n", "p_list", "=", "self", ".", "get_param_names", "(", ")", "\n", "if", "isinstance", "(", "vector", ",", "dict", ")", ":", "\n", "            ", "vector_dict", "=", "vector", "\n", "", "else", ":", "\n", "            ", "vector", "=", "self", ".", "arr_to_list", "(", "vector", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "vector", ")", ")", ":", "\n", "                ", "k", "=", "p_list", "[", "i", "]", "\n", "v", "=", "vector", "[", "i", "]", "\n", "vector_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "t", "=", "OneHotVectorTransformer", "(", "self", ")", "\n", "one_hot", "=", "t", ".", "transform", "(", "vector_dict", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_norm_vec": [[266, 303], ["hp_cfg.HyperparameterConfiguration.get_param_names", "isinstance", "hp_cfg.HyperparameterConfiguration.arr_to_list", "hp_cfg.HyperparameterConfiguration.get_param_names", "range", "numpy.array", "value_types.append", "ranges.append", "types.append", "hp_cfg.HyperparameterConfiguration.dict_to_list", "len", "hp_cfg.HyperparameterConfiguration.get_value_type", "hp_cfg.HyperparameterConfiguration.get_range", "hp_cfg.HyperparameterConfiguration.get_type", "normalized.append", "normalized.append", "float", "float", "float", "float", "float", "param_range.index", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_value_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "arr_to_norm_vec", "(", "self", ",", "vector", ")", ":", "\n", "\n", "        ", "value_types", "=", "[", "]", "\n", "ranges", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "for", "param", "in", "self", ".", "get_param_names", "(", ")", ":", "\n", "            ", "value_types", ".", "append", "(", "self", ".", "get_value_type", "(", "param", ")", ")", "\n", "ranges", ".", "append", "(", "self", ".", "get_range", "(", "param", ")", ")", "\n", "types", ".", "append", "(", "self", ".", "get_type", "(", "param", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "vector", ",", "dict", ")", ":", "\n", "            ", "vector", "=", "self", ".", "dict_to_list", "(", "vector", ")", "\n", "\n", "", "vector", "=", "self", ".", "arr_to_list", "(", "vector", ")", "\n", "p_list", "=", "self", ".", "get_param_names", "(", ")", "\n", "normalized", "=", "[", "]", "\n", "\n", "# min-max normalization", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "vector", ")", ")", ":", "\n", "            ", "param_name", "=", "p_list", "[", "i", "]", "\n", "value_type", "=", "value_types", "[", "i", "]", "\n", "type", "=", "types", "[", "i", "]", "\n", "value", "=", "vector", "[", "i", "]", "\n", "param_range", "=", "ranges", "[", "i", "]", "\n", "\n", "if", "value_type", "!=", "'categorical'", "and", "value_type", "!=", "'preordered'", ":", "\n", "                ", "max_val", "=", "param_range", "[", "-", "1", "]", "\n", "min_val", "=", "param_range", "[", "0", "]", "\n", "denominator", "=", "max_val", "-", "min_val", "\n", "numerator", "=", "float", "(", "value", ")", "-", "min_val", "\n", "normalized", ".", "append", "(", "float", "(", "numerator", ")", "/", "float", "(", "denominator", ")", ")", "\n", "", "else", ":", "\n", "#debug(\"Categorical/preordered type in config: {}({})\".format(param_name, value_type))", "\n", "                ", "n_v", "=", "float", "(", "param_range", ".", "index", "(", "value", ")", ")", "/", "float", "(", "len", "(", "param_range", ")", ")", "\n", "normalized", ".", "append", "(", "n_v", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_nearby_index": [[304, 326], ["hp_cfg.HyperparameterConfiguration.get_param_names", "numpy.nditer", "type", "range", "numpy.array", "hp_cfg.HyperparameterConfiguration.arr_to_norm_vec", "hp_cfg.HyperparameterConfiguration.arr_to_norm_vec", "numpy.linalg.norm", "len", "vector_list.append", "i.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_norm_vec", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.arr_to_norm_vec", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "get_nearby_index", "(", "self", ",", "candidates", ",", "hpv", ",", "params", ")", ":", "\n", "        ", "vec", "=", "params", "\n", "p_list", "=", "self", ".", "get_param_names", "(", ")", "\n", "if", "type", "(", "params", ")", "==", "dict", ":", "\n", "            ", "vector_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "p_list", ")", ")", ":", "\n", "                ", "vector_list", ".", "append", "(", "params", "[", "p_list", "[", "i", "]", "]", ")", "\n", "", "vec", "=", "np", ".", "array", "(", "vector_list", ")", "\n", "\n", "", "closest_dist", "=", "9999999", "\n", "nearby_idx", "=", "-", "1", "\n", "\n", "for", "i", "in", "np", ".", "nditer", "(", "candidates", ")", ":", "\n", "            ", "compare_vec", "=", "hpv", "[", "i", ",", ":", "]", "\n", "norm_vec1", "=", "self", ".", "arr_to_norm_vec", "(", "vec", ")", "\n", "norm_vec2", "=", "self", ".", "arr_to_norm_vec", "(", "compare_vec", ")", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "norm_vec1", "-", "norm_vec2", ")", "\n", "if", "distance", "<", "closest_dist", ":", "\n", "                ", "closest_dist", "=", "distance", "\n", "nearby_idx", "=", "i", ".", "tolist", "(", ")", "\n", "\n", "", "", "return", "nearby_idx", ",", "closest_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.replace_cat_number": [[327, 340], ["hp_cfg.HyperparameterConfiguration.hyperparams.__dict__.items", "warn", "str", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "replace_cat_number", "(", "self", ",", "param_values", ")", ":", "\n", "        ", "for", "param", ",", "setting", "in", "self", ".", "hyperparams", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "setting", ".", "type", "==", "\"str\"", ":", "\n", "                    ", "if", "setting", ".", "value_type", "==", "'categorical'", ":", "\n", "                        ", "str_value", "=", "param_values", "[", "param", "]", "\n", "param_values", "[", "param", "]", "=", "str", "(", "str_value", ")", "\n", "", "else", ":", "\n", "                        ", "warn", "(", "\"Unknown case: {} - {}\"", ".", "format", "(", "param", ",", "setting", ".", "value_type", ")", ")", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Error: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "", "return", "param_values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.unnormalize": [[341, 384], ["getattr", "len", "int", "max", "min", "int", "hasattr", "bool", "int", "int", "hasattr", "str", "numpy.power", "float", "numpy.power", "float", "debug", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "unnormalize", "(", "self", ",", "param_name", ",", "norm_value", ")", ":", "\n", "        ", "result", "=", "None", "\n", "hp_cfg", "=", "getattr", "(", "self", ".", "hyperparams", ",", "param_name", ")", "\n", "range_list", "=", "hp_cfg", ".", "range", "\n", "\n", "if", "hp_cfg", ".", "value_type", "==", "\"categorical\"", "or", "hp_cfg", ".", "value_type", "==", "'preordered'", ":", "\n", "            ", "size", "=", "len", "(", "range_list", ")", "\n", "index", "=", "int", "(", "norm_value", "*", "size", ")", "\n", "if", "index", "==", "size", ":", "# handle the terminal condition", "\n", "                ", "index", "=", "size", "-", "1", "\n", "", "result", "=", "range_list", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "max_value", "=", "max", "(", "range_list", ")", "\n", "min_value", "=", "min", "(", "range_list", ")", "\n", "\n", "if", "hp_cfg", ".", "type", "==", "'int'", ":", "\n", "                ", "result", "=", "min_value", "+", "int", "(", "norm_value", "*", "(", "max_value", "-", "min_value", ")", ")", "\n", "#XXX:to include the max value", "\n", "if", "norm_value", "==", "1.0", ":", "\n", "                    ", "result", "=", "max_value", "\n", "", "if", "hasattr", "(", "hp_cfg", ",", "'power_of'", ")", ":", "\n", "                    ", "result", "=", "int", "(", "np", ".", "power", "(", "hp_cfg", ".", "power_of", ",", "float", "(", "result", ")", ")", ")", "\n", "\n", "", "", "elif", "hp_cfg", ".", "type", "==", "'float'", ":", "\n", "                ", "result", "=", "min_value", "+", "(", "norm_value", "*", "(", "max_value", "-", "min_value", ")", ")", "\n", "#XXX:to include the max value", "\n", "if", "norm_value", "==", "1.0", ":", "\n", "                    ", "result", "=", "max_value", "\n", "\n", "", "if", "hasattr", "(", "hp_cfg", ",", "'power_of'", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "result", "=", "np", ".", "power", "(", "hp_cfg", ".", "power_of", ",", "float", "(", "result", ")", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "debug", "(", "\"{}:when {}**{}\"", ".", "format", "(", "ex", ",", "hp_cfg", ".", "power_of", ",", "result", ")", ")", "\n", "result", "=", "np", ".", "power", "(", "hp_cfg", ".", "power_of", ",", "min_value", ")", "\n", "\n", "", "", "", "", "if", "hp_cfg", ".", "type", "==", "'int'", ":", "\n", "            ", "result", "=", "int", "(", "result", ")", "\n", "", "elif", "hp_cfg", ".", "type", "==", "'bool'", ":", "\n", "            ", "result", "=", "bool", "(", "result", ")", "\n", "", "elif", "hp_cfg", ".", "type", "==", "'str'", ":", "\n", "            ", "result", "=", "str", "(", "result", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.truncate": [[385, 398], ["getattr", "abs", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "truncate", "(", "self", ",", "hpv_dict", ")", ":", "\n", "# For handling float typed value mismatching due to precision issue", "\n", "        ", "for", "k", "in", "hpv_dict", ":", "\n", "            ", "hp_cfg", "=", "getattr", "(", "self", ".", "hyperparams", ",", "k", ")", "\n", "if", "hp_cfg", ".", "value_type", "==", "'preordered'", "and", "hp_cfg", ".", "type", "==", "'float'", ":", "\n", "                ", "v", "=", "hpv_dict", "[", "k", "]", "\n", "for", "iv", "in", "hp_cfg", ".", "range", ":", "\n", "                    ", "diff", "=", "abs", "(", "v", "-", "iv", ")", "\n", "if", "diff", ">", "0", "and", "diff", "<", "0.000001", ":", "\n", "                        ", "debug", "(", "'float value of {} is truncated: {} -> {}'", ".", "format", "(", "k", ",", "v", ",", "iv", ")", ")", "\n", "hpv_dict", "[", "k", "]", "=", "iv", "\n", "break", "\n", "", "", "", "", "return", "hpv_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.read_hyperparam_config": [[11, 14], ["hp_cfg.HyperparameterConfigurationReader", "hp_cfg.HyperparameterConfigurationReader.get_config"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config"], ["def", "read_hyperparam_config", "(", "cfg_file", ")", ":", "\n", "    ", "hcr", "=", "HyperparameterConfigurationReader", "(", "cfg_file", ")", "\n", "return", "hcr", ".", "get_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.HistorySaver.__init__": [[16, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_type", ",", "run_mode", ",", "\n", "target_goal", ",", "time_expired", ",", "config", ",", "\n", "path", "=", "'./results/'", ",", "postfix", "=", "\"\"", ")", ":", "\n", "\n", "        ", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "run_mode", "=", "run_mode", "\n", "self", ".", "target_goal", "=", "target_goal", "\n", "self", ".", "time_expired", "=", "time_expired", "\n", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "postfix", "=", "postfix", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.HistorySaver.save": [[29, 61], ["range", "info", "str", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "debug", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "str", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "open", "json_file.write", "str", "json.dumps", "gzip.open", "pickle.dump", "saver.HistorySaver.config[].replace", "str", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "save", "(", "self", ",", "name1", ",", "name2", ",", "trials", ",", "results", ",", "internals", "=", "None", ")", ":", "\n", "        ", "directory", "=", "self", ".", "path", "+", "str", "(", "self", ".", "data_type", ")", "\n", "\n", "if", "self", ".", "run_mode", "==", "'GOAL'", ":", "\n", "            ", "directory", "+=", "\"/G\"", "+", "str", "(", "self", ".", "target_goal", ")", "\n", "", "elif", "self", ".", "run_mode", "==", "'TIME'", ":", "\n", "            ", "directory", "+=", "\"/T\"", "+", "str", "(", "int", "(", "self", ".", "time_expired", ")", ")", "+", "\"S\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "debug", "(", "'Creating '", "+", "directory", ")", "\n", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "file_path", "=", "directory", "+", "'/'", "\n", "if", "name1", "!=", "'DIV'", "or", "name2", "!=", "'RANDOM'", ":", "\n", "            ", "file_path", "=", "file_path", "+", "name1", "+", "'-'", "+", "name2", "\n", "", "elif", "'title'", "in", "self", ".", "config", ":", "\n", "            ", "file_path", "=", "file_path", "+", "self", ".", "config", "[", "'title'", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "\n", "", "file_path", "=", "\"{}{}({})\"", ".", "format", "(", "file_path", ",", "self", ".", "postfix", ",", "str", "(", "trials", ")", ")", "\n", "for", "retry", "in", "range", "(", "1", ",", "100", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "\"{}.json\"", ".", "format", "(", "file_path", ")", ")", ":", "\n", "                ", "file_path", "=", "\"{}.retry\"", ".", "format", "(", "file_path", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "info", "(", "\"The optimization result saved as {}.json\"", ".", "format", "(", "file_path", ")", ")", "\n", "with", "open", "(", "file_path", "+", "'.json'", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "results", ")", ")", "\n", "\n", "", "if", "internals", "is", "not", "None", ":", "\n", "            ", "with", "gzip", ".", "open", "(", "file_path", "+", "'.pkl.gz'", ",", "'wb'", ")", "as", "pkl_gz", ":", "\n", "                ", "pickle", ".", "dump", "(", "internals", ",", "pkl_gz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.HistorySaver.load": [[62, 84], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "str", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "debug", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "warn", "str", "open", "json.load", "sorted", "int", "str", "json.load.keys", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "", "", "def", "load", "(", "self", ",", "optimizer", ",", "aquisition_func", ",", "num_trials", ")", ":", "\n", "        ", "directory", "=", "self", ".", "path", "+", "str", "(", "self", ".", "data_type", ")", "\n", "if", "self", ".", "run_mode", "==", "'GOAL'", ":", "\n", "            ", "directory", "+=", "\"/G\"", "+", "str", "(", "self", ".", "target_goal", ")", "\n", "", "elif", "self", ".", "run_mode", "==", "'TIME'", ":", "\n", "            ", "directory", "+=", "\"/T\"", "+", "str", "(", "int", "(", "self", ".", "time_expired", ")", ")", "+", "\"S\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "debug", "(", "'Creating '", "+", "directory", ")", "\n", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "file_name", "=", "\"{}-{}.{}({}).json\"", ".", "format", "(", "optimizer", ",", "aquisition_func", ",", "self", ".", "postfix", ",", "num_trials", ")", "\n", "file_path", "=", "directory", "+", "'/'", "+", "file_name", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "            ", "with", "open", "(", "file_path", ")", "as", "json_temp", ":", "\n", "                ", "temp_results", "=", "json", ".", "load", "(", "json_temp", ")", "\n", "iters", "=", "[", "int", "(", "key", ")", "for", "key", "in", "temp_results", ".", "keys", "(", ")", "]", "\n", "sorted_iters", "=", "sorted", "(", "iters", ")", "\n", "return", "temp_results", ",", "sorted_iters", "[", "-", "1", "]", "+", "1", "\n", "", "", "else", ":", "\n", "            ", "warn", "(", "\"File not found: {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "return", "{", "}", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.TemporaryHistorySaver.__init__": [[88, 106], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "debug", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "data_type", ",", "optimizer", ",", "\n", "aquisition_func", ",", "num_trials", ",", "config", ",", "\n", "path", "=", "'./temp/'", ")", ":", "\n", "        ", "title", "=", "\"\"", "\n", "if", "\"title\"", "in", "config", ":", "\n", "            ", "title", "=", "config", "[", "\"title\"", "]", "\n", "", "else", ":", "\n", "            ", "title", "=", "data_type", "\n", "\n", "", "self", ".", "temp_name", "=", "\"{}.{}-{}({})\"", ".", "format", "(", "title", ",", "\n", "optimizer", ",", "aquisition_func", ",", "num_trials", ")", "\n", "\n", "self", ".", "path", "=", "path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "            ", "debug", "(", "'Creating '", "+", "self", ".", "path", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "path", ")", "\n", "\n", "", "self", ".", "temp_file_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.TemporaryHistorySaver.save": [[107, 111], ["open", "json_file.write", "json.dumps"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "results", ")", ":", "\n", "        ", "self", ".", "temp_file_path", "=", "self", ".", "path", "+", "self", ".", "temp_name", "+", "'.json'", "\n", "with", "open", "(", "self", ".", "temp_file_path", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "results", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.TemporaryHistorySaver.restore": [[112, 126], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "open", "json.load", "sorted", "int", "warn", "json.load.keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "temp_file_path", "=", "self", ".", "path", "+", "self", ".", "temp_name", "+", "'.json'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "temp_file_path", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "temp_file_path", ")", "as", "json_temp", ":", "\n", "                ", "try", ":", "\n", "                    ", "temp_results", "=", "json", ".", "load", "(", "json_temp", ")", "\n", "iters", "=", "[", "int", "(", "key", ")", "for", "key", "in", "temp_results", ".", "keys", "(", ")", "]", "\n", "sorted_iters", "=", "sorted", "(", "iters", ")", "\n", "return", "temp_results", ",", "sorted_iters", "[", "-", "1", "]", "+", "1", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                    ", "warn", "(", "\"temp file loading error: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "{", "}", ",", "0", "\n", "", "", "", "else", ":", "\n", "            ", "return", "{", "}", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.TemporaryHistorySaver.remove": [[127, 133], ["os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "", "def", "remove", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "temp_file_path", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "temp_file_path", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.request_lib.Connection.__init__": [[8, 16], ["requests.auth.HTTPBasicAuth"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_url", ",", "username", "=", "None", ",", "password", "=", "None", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_url", "=", "base_url", "\n", "self", ".", "auth", "=", "HTTPBasicAuth", "(", "username", ",", "password", ")", "\n", "\n", "if", "timeout", "!=", "None", ":", "\n", "            ", "self", ".", "timeout", "=", "timeout", "\n", "", "else", ":", "\n", "            ", "self", ".", "timeout", "=", "10.0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.request_lib.Connection.request_get": [[17, 26], ["requests.request", "str"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "", "def", "request_get", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "url", "=", "self", ".", "base_url", "+", "resource", "\n", "if", "args", "==", "None", ":", "\n", "            ", "args", "=", "{", "}", "\n", "", "res", "=", "req", ".", "request", "(", "'GET'", ",", "url", ",", "params", "=", "args", ",", "headers", "=", "headers", ",", "\n", "timeout", "=", "self", ".", "timeout", ")", "\n", "res", ".", "headers", "[", "'status'", "]", "=", "str", "(", "res", ".", "status_code", ")", "\n", "resp", "=", "{", "'headers'", ":", "res", ".", "headers", ",", "'body'", ":", "res", ".", "content", "}", "\n", "return", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.request_lib.Connection.request_post": [[27, 42], ["requests.request", "str", "json.loads"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_post", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "url", "=", "self", ".", "base_url", "+", "resource", "\n", "if", "args", "==", "None", ":", "\n", "            ", "args", "=", "{", "}", "\n", "\n", "", "if", "body", "!=", "None", ":", "\n", "            ", "body", "=", "json", ".", "loads", "(", "body", ")", "\n", "", "else", ":", "\n", "            ", "body", "=", "{", "}", "\n", "\n", "", "res", "=", "req", ".", "request", "(", "'POST'", ",", "url", ",", "params", "=", "args", ",", "headers", "=", "headers", ",", "json", "=", "body", ",", "\n", "timeout", "=", "self", ".", "timeout", ")", "\n", "res", ".", "headers", "[", "'status'", "]", "=", "str", "(", "res", ".", "status_code", ")", "\n", "resp", "=", "{", "'headers'", ":", "res", ".", "headers", ",", "'body'", ":", "res", ".", "content", "}", "\n", "return", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.request_lib.Connection.request_put": [[43, 58], ["requests.request", "str", "json.loads"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_put", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "url", "=", "self", ".", "base_url", "+", "resource", "\n", "if", "args", "==", "None", ":", "\n", "            ", "args", "=", "{", "}", "\n", "\n", "", "if", "body", "!=", "None", ":", "\n", "            ", "body", "=", "json", ".", "loads", "(", "body", ")", "\n", "", "else", ":", "\n", "            ", "body", "=", "{", "}", "\n", "\n", "", "res", "=", "req", ".", "request", "(", "'PUT'", ",", "url", ",", "params", "=", "args", ",", "headers", "=", "headers", ",", "json", "=", "body", ",", "\n", "timeout", "=", "self", ".", "timeout", ")", "\n", "res", ".", "headers", "[", "'status'", "]", "=", "str", "(", "res", ".", "status_code", ")", "\n", "resp", "=", "{", "'headers'", ":", "res", ".", "headers", ",", "'body'", ":", "res", ".", "content", "}", "\n", "return", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.request_lib.Connection.request_delete": [[59, 72], ["requests.request", "str", "json.loads"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_delete", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "url", "=", "self", ".", "base_url", "+", "resource", "\n", "if", "args", "==", "None", ":", "\n", "            ", "args", "=", "{", "}", "\n", "", "if", "body", "!=", "None", ":", "\n", "            ", "body", "=", "json", ".", "loads", "(", "body", ")", "\n", "", "else", ":", "\n", "            ", "body", "=", "{", "}", "\n", "", "res", "=", "req", ".", "request", "(", "'DELETE'", ",", "url", ",", "params", "=", "args", ",", "headers", "=", "headers", ",", "json", "=", "body", ",", "\n", "timeout", "=", "self", ".", "timeout", ")", "\n", "res", ".", "headers", "[", "'status'", "]", "=", "str", "(", "res", ".", "status_code", ")", "\n", "resp", "=", "{", "'headers'", ":", "res", ".", "headers", ",", "'body'", ":", "res", ".", "content", "}", "\n", "return", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.__init__": [[112, 118], ["gae_restful_lib.parse_uri"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.parse_uri"], ["    ", "def", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", ":", "\n", "        ", "(", "scheme", ",", "authority", ",", "path", ",", "query", ",", "fragment", ")", "=", "parse_uri", "(", "request_uri", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "host", "=", "host", "\n", "self", ".", "credentials", "=", "credentials", "\n", "self", ".", "http", "=", "http", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.depth": [[119, 122], ["gae_restful_lib.parse_uri", "request_uri[].count", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.parse_uri"], ["", "def", "depth", "(", "self", ",", "request_uri", ")", ":", "\n", "        ", "(", "scheme", ",", "authority", ",", "path", ",", "query", ",", "fragment", ")", "=", "parse_uri", "(", "request_uri", ")", "\n", "return", "request_uri", "[", "len", "(", "self", ".", "path", ")", ":", "]", ".", "count", "(", "\"/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.inscope": [[123, 127], ["gae_restful_lib.parse_uri", "path.startswith"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.parse_uri"], ["", "def", "inscope", "(", "self", ",", "host", ",", "request_uri", ")", ":", "\n", "# XXX Should we normalize the request_uri?", "\n", "        ", "(", "scheme", ",", "authority", ",", "path", ",", "query", ",", "fragment", ")", "=", "parse_uri", "(", "request_uri", ")", "\n", "return", "(", "host", "==", "self", ".", "host", ")", "and", "path", ".", "startswith", "(", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.request": [[128, 132], ["None"], "methods", ["None"], ["", "def", "request", "(", "self", ",", "method", ",", "request_uri", ",", "headers", ",", "content", ")", ":", "\n", "        ", "\"\"\"Modify the request headers to add the appropriate\n        Authorization header. Over-rise this in sub-classes.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.response": [[133, 142], ["None"], "methods", ["None"], ["", "def", "response", "(", "self", ",", "response", ",", "content", ")", ":", "\n", "        ", "\"\"\"Gives us a chance to update with new nonces\n        or such returned from the last authorized response.\n        Over-rise this in sub-classes if necessary.\n\n        Return TRUE is the request is to be retried, for \n        example Digest may return stale=true.\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.BasicAuthentication.__init__": [[146, 148], ["gae_restful_lib.Authentication.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", ":", "\n", "        ", "Authentication", ".", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.BasicAuthentication.request": [[149, 153], ["base64.encodestring().strip", "base64.encodestring"], "methods", ["None"], ["", "def", "request", "(", "self", ",", "method", ",", "request_uri", ",", "headers", ",", "content", ")", ":", "\n", "        ", "\"\"\"Modify the request headers to add the appropriate\n        Authorization header.\"\"\"", "\n", "headers", "[", "'authorization'", "]", "=", "'Basic '", "+", "base64", ".", "encodestring", "(", "\"%s:%s\"", "%", "self", ".", "credentials", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.DigestAuthentication.__init__": [[158, 171], ["gae_restful_lib.Authentication.__init__", "gae_restful_lib._parse_www_authenticate", "gae_restful_lib.DigestAuthentication.challenge.get", "gae_restful_lib.DigestAuthentication.challenge.get", "UnimplementedDigestAuthOptionError", "UnimplementedDigestAuthOptionError", "_", "_", "x.strip", "gae_restful_lib.DigestAuthentication.split"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["def", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", ":", "\n", "        ", "Authentication", ".", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", "\n", "challenge", "=", "_parse_www_authenticate", "(", "response", ",", "'www-authenticate'", ")", "\n", "self", ".", "challenge", "=", "challenge", "[", "'digest'", "]", "\n", "qop", "=", "self", ".", "challenge", ".", "get", "(", "'qop'", ")", "\n", "self", ".", "challenge", "[", "'qop'", "]", "=", "(", "'auth'", "in", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "qop", ".", "split", "(", ")", "]", ")", "and", "'auth'", "or", "None", "\n", "if", "self", ".", "challenge", "[", "'qop'", "]", "is", "None", ":", "\n", "            ", "raise", "UnimplementedDigestAuthOptionError", "(", "_", "(", "\"Unsupported value for qop: %s.\"", "%", "qop", ")", ")", "\n", "", "self", ".", "challenge", "[", "'algorithm'", "]", "=", "self", ".", "challenge", ".", "get", "(", "'algorithm'", ",", "'MD5'", ")", "\n", "if", "self", ".", "challenge", "[", "'algorithm'", "]", "!=", "'MD5'", ":", "\n", "            ", "raise", "UnimplementedDigestAuthOptionError", "(", "_", "(", "\"Unsupported value for algorithm: %s.\"", "%", "self", ".", "challenge", "[", "'algorithm'", "]", ")", ")", "\n", "", "self", ".", "A1", "=", "\"\"", ".", "join", "(", "[", "self", ".", "credentials", "[", "0", "]", ",", "\":\"", ",", "self", ".", "challenge", "[", "'realm'", "]", ",", "\":\"", ",", "self", ".", "credentials", "[", "1", "]", "]", ")", "\n", "self", ".", "challenge", "[", "'nc'", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.DigestAuthentication.request": [[172, 195], ["md5.new().hexdigest", "H", "gae_restful_lib._cnonce", "KD", "H", "md5.new", "H"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._cnonce"], ["", "def", "request", "(", "self", ",", "method", ",", "request_uri", ",", "headers", ",", "content", ",", "cnonce", "=", "None", ")", ":", "\n", "        ", "\"\"\"Modify the request headers\"\"\"", "\n", "H", "=", "lambda", "x", ":", "md5", ".", "new", "(", "x", ")", ".", "hexdigest", "(", ")", "\n", "KD", "=", "lambda", "s", ",", "d", ":", "H", "(", "\"%s:%s\"", "%", "(", "s", ",", "d", ")", ")", "\n", "A2", "=", "\"\"", ".", "join", "(", "[", "method", ",", "\":\"", ",", "request_uri", "]", ")", "\n", "self", ".", "challenge", "[", "'cnonce'", "]", "=", "cnonce", "or", "_cnonce", "(", ")", "\n", "request_digest", "=", "'\"%s\"'", "%", "KD", "(", "H", "(", "self", ".", "A1", ")", ",", "\"%s:%s:%s:%s:%s\"", "%", "(", "self", ".", "challenge", "[", "'nonce'", "]", ",", "\n", "'%08x'", "%", "self", ".", "challenge", "[", "'nc'", "]", ",", "\n", "self", ".", "challenge", "[", "'cnonce'", "]", ",", "\n", "self", ".", "challenge", "[", "'qop'", "]", ",", "H", "(", "A2", ")", "\n", ")", ")", "\n", "headers", "[", "'Authorization'", "]", "=", "'Digest username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"%s\", algorithm=%s, response=%s, qop=%s, nc=%08x, cnonce=\"%s\"'", "%", "(", "\n", "self", ".", "credentials", "[", "0", "]", ",", "\n", "self", ".", "challenge", "[", "'realm'", "]", ",", "\n", "self", ".", "challenge", "[", "'nonce'", "]", ",", "\n", "request_uri", ",", "\n", "self", ".", "challenge", "[", "'algorithm'", "]", ",", "\n", "request_digest", ",", "\n", "self", ".", "challenge", "[", "'qop'", "]", ",", "\n", "self", ".", "challenge", "[", "'nc'", "]", ",", "\n", "self", ".", "challenge", "[", "'cnonce'", "]", ",", "\n", ")", "\n", "self", ".", "challenge", "[", "'nc'", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.DigestAuthentication.response": [[196, 210], ["response.has_key", "_parse_www_authenticate().get", "_parse_www_authenticate().get", "_parse_www_authenticate().get.has_key", "_parse_www_authenticate().get.get", "gae_restful_lib._parse_www_authenticate", "gae_restful_lib._parse_www_authenticate"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate"], ["", "def", "response", "(", "self", ",", "response", ",", "content", ")", ":", "\n", "        ", "if", "not", "response", ".", "has_key", "(", "'authentication-info'", ")", ":", "\n", "            ", "challenge", "=", "_parse_www_authenticate", "(", "response", ",", "'www-authenticate'", ")", ".", "get", "(", "'digest'", ",", "{", "}", ")", "\n", "if", "'true'", "==", "challenge", ".", "get", "(", "'stale'", ")", ":", "\n", "                ", "self", ".", "challenge", "[", "'nonce'", "]", "=", "challenge", "[", "'nonce'", "]", "\n", "self", ".", "challenge", "[", "'nc'", "]", "=", "1", "\n", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "updated_challenge", "=", "_parse_www_authenticate", "(", "response", ",", "'authentication-info'", ")", ".", "get", "(", "'digest'", ",", "{", "}", ")", "\n", "\n", "if", "updated_challenge", ".", "has_key", "(", "'nextnonce'", ")", ":", "\n", "                ", "self", ".", "challenge", "[", "'nonce'", "]", "=", "updated_challenge", "[", "'nextnonce'", "]", "\n", "self", ".", "challenge", "[", "'nc'", "]", "=", "1", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.HmacDigestAuthentication.__init__": [[216, 246], ["gae_restful_lib.Authentication.__init__", "gae_restful_lib._parse_www_authenticate", "gae_restful_lib.HmacDigestAuthentication.challenge.get", "gae_restful_lib.HmacDigestAuthentication.challenge.get", "gae_restful_lib.HmacDigestAuthentication.challenge.get", "gae_restful_lib.HmacDigestAuthentication.challenge.get", "gae_restful_lib.HmacDigestAuthentication.pwhashmod.new().hexdigest().lower", "gae_restful_lib.HmacDigestAuthentication.challenge.get", "UnimplementedHmacDigestAuthOptionError", "UnimplementedHmacDigestAuthOptionError", "UnimplementedHmacDigestAuthOptionError", "_", "_", "_", "gae_restful_lib.HmacDigestAuthentication.pwhashmod.new().hexdigest().lower", "gae_restful_lib.HmacDigestAuthentication.pwhashmod.new().hexdigest", "gae_restful_lib.HmacDigestAuthentication.pwhashmod.new().hexdigest", "gae_restful_lib.HmacDigestAuthentication.pwhashmod.new", "gae_restful_lib.HmacDigestAuthentication.pwhashmod.new"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["def", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", ":", "\n", "        ", "Authentication", ".", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", "\n", "challenge", "=", "_parse_www_authenticate", "(", "response", ",", "'www-authenticate'", ")", "\n", "self", ".", "challenge", "=", "challenge", "[", "'hmacdigest'", "]", "\n", "# TODO: self.challenge['domain']", "\n", "self", ".", "challenge", "[", "'reason'", "]", "=", "self", ".", "challenge", ".", "get", "(", "'reason'", ",", "'unauthorized'", ")", "\n", "if", "self", ".", "challenge", "[", "'reason'", "]", "not", "in", "[", "'unauthorized'", ",", "'integrity'", "]", ":", "\n", "            ", "self", ".", "challenge", "[", "'reason'", "]", "=", "'unauthorized'", "\n", "", "self", ".", "challenge", "[", "'salt'", "]", "=", "self", ".", "challenge", ".", "get", "(", "'salt'", ",", "''", ")", "\n", "if", "not", "self", ".", "challenge", ".", "get", "(", "'snonce'", ")", ":", "\n", "            ", "raise", "UnimplementedHmacDigestAuthOptionError", "(", "_", "(", "\"The challenge doesn't contain a server nonce, or this one is empty.\"", ")", ")", "\n", "", "self", ".", "challenge", "[", "'algorithm'", "]", "=", "self", ".", "challenge", ".", "get", "(", "'algorithm'", ",", "'HMAC-SHA-1'", ")", "\n", "if", "self", ".", "challenge", "[", "'algorithm'", "]", "not", "in", "[", "'HMAC-SHA-1'", ",", "'HMAC-MD5'", "]", ":", "\n", "            ", "raise", "UnimplementedHmacDigestAuthOptionError", "(", "_", "(", "\"Unsupported value for algorithm: %s.\"", "%", "self", ".", "challenge", "[", "'algorithm'", "]", ")", ")", "\n", "", "self", ".", "challenge", "[", "'pw-algorithm'", "]", "=", "self", ".", "challenge", ".", "get", "(", "'pw-algorithm'", ",", "'SHA-1'", ")", "\n", "if", "self", ".", "challenge", "[", "'pw-algorithm'", "]", "not", "in", "[", "'SHA-1'", ",", "'MD5'", "]", ":", "\n", "            ", "raise", "UnimplementedHmacDigestAuthOptionError", "(", "_", "(", "\"Unsupported value for pw-algorithm: %s.\"", "%", "self", ".", "challenge", "[", "'pw-algorithm'", "]", ")", ")", "\n", "", "if", "self", ".", "challenge", "[", "'algorithm'", "]", "==", "'HMAC-MD5'", ":", "\n", "            ", "self", ".", "hashmod", "=", "md5", "\n", "", "else", ":", "\n", "            ", "self", ".", "hashmod", "=", "sha", "\n", "", "if", "self", ".", "challenge", "[", "'pw-algorithm'", "]", "==", "'MD5'", ":", "\n", "            ", "self", ".", "pwhashmod", "=", "md5", "\n", "", "else", ":", "\n", "            ", "self", ".", "pwhashmod", "=", "sha", "\n", "", "self", ".", "key", "=", "\"\"", ".", "join", "(", "[", "self", ".", "credentials", "[", "0", "]", ",", "\":\"", ",", "\n", "self", ".", "pwhashmod", ".", "new", "(", "\"\"", ".", "join", "(", "[", "self", ".", "credentials", "[", "1", "]", ",", "self", ".", "challenge", "[", "'salt'", "]", "]", ")", ")", ".", "hexdigest", "(", ")", ".", "lower", "(", ")", ",", "\n", "\":\"", ",", "self", ".", "challenge", "[", "'realm'", "]", "\n", "]", ")", "\n", "self", ".", "key", "=", "self", ".", "pwhashmod", ".", "new", "(", "self", ".", "key", ")", ".", "hexdigest", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.HmacDigestAuthentication.request": [[247, 265], ["_get_end2end_headers", "time.strftime", "gae_restful_lib._cnonce", "hmac.new().hexdigest().lower", "time.gmtime", "hmac.new().hexdigest", "hmac.new"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._cnonce"], ["", "def", "request", "(", "self", ",", "method", ",", "request_uri", ",", "headers", ",", "content", ")", ":", "\n", "        ", "\"\"\"Modify the request headers\"\"\"", "\n", "keys", "=", "_get_end2end_headers", "(", "headers", ")", "\n", "keylist", "=", "\"\"", ".", "join", "(", "[", "\"%s \"", "%", "k", "for", "k", "in", "keys", "]", ")", "\n", "headers_val", "=", "\"\"", ".", "join", "(", "[", "headers", "[", "k", "]", "for", "k", "in", "keys", "]", ")", "\n", "created", "=", "time", ".", "strftime", "(", "'%Y-%m-%dT%H:%M:%SZ'", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "cnonce", "=", "_cnonce", "(", ")", "\n", "request_digest", "=", "\"%s:%s:%s:%s:%s\"", "%", "(", "method", ",", "request_uri", ",", "cnonce", ",", "self", ".", "challenge", "[", "'snonce'", "]", ",", "headers_val", ")", "\n", "request_digest", "=", "hmac", ".", "new", "(", "self", ".", "key", ",", "request_digest", ",", "self", ".", "hashmod", ")", ".", "hexdigest", "(", ")", ".", "lower", "(", ")", "\n", "headers", "[", "'Authorization'", "]", "=", "'HMACDigest username=\"%s\", realm=\"%s\", snonce=\"%s\", cnonce=\"%s\", uri=\"%s\", created=\"%s\", response=\"%s\", headers=\"%s\"'", "%", "(", "\n", "self", ".", "credentials", "[", "0", "]", ",", "\n", "self", ".", "challenge", "[", "'realm'", "]", ",", "\n", "self", ".", "challenge", "[", "'snonce'", "]", ",", "\n", "cnonce", ",", "\n", "request_uri", ",", "\n", "created", ",", "\n", "request_digest", ",", "\n", "keylist", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.HmacDigestAuthentication.response": [[267, 272], ["_parse_www_authenticate().get", "_parse_www_authenticate().get.get", "gae_restful_lib._parse_www_authenticate"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate"], ["", "def", "response", "(", "self", ",", "response", ",", "content", ")", ":", "\n", "        ", "challenge", "=", "_parse_www_authenticate", "(", "response", ",", "'www-authenticate'", ")", ".", "get", "(", "'hmacdigest'", ",", "{", "}", ")", "\n", "if", "challenge", ".", "get", "(", "'reason'", ")", "in", "[", "'integrity'", ",", "'stale'", "]", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.WsseAuthentication.__init__": [[282, 284], ["gae_restful_lib.Authentication.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", ":", "\n", "        ", "Authentication", ".", "__init__", "(", "self", ",", "credentials", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "http", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.WsseAuthentication.request": [[285, 297], ["time.strftime", "gae_restful_lib._cnonce", "gae_restful_lib._wsse_username_token", "time.gmtime"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._cnonce", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._wsse_username_token"], ["", "def", "request", "(", "self", ",", "method", ",", "request_uri", ",", "headers", ",", "content", ")", ":", "\n", "        ", "\"\"\"Modify the request headers to add the appropriate\n        Authorization header.\"\"\"", "\n", "headers", "[", "'Authorization'", "]", "=", "'WSSE profile=\"UsernameToken\"'", "\n", "iso_now", "=", "time", ".", "strftime", "(", "\"%Y-%m-%dT%H:%M:%SZ\"", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "cnonce", "=", "_cnonce", "(", ")", "\n", "password_digest", "=", "_wsse_username_token", "(", "cnonce", ",", "iso_now", ",", "self", ".", "credentials", "[", "1", "]", ")", "\n", "headers", "[", "'X-WSSE'", "]", "=", "'UsernameToken Username=\"%s\", PasswordDigest=\"%s\", Nonce=\"%s\", Created=\"%s\"'", "%", "(", "\n", "self", ".", "credentials", "[", "0", "]", ",", "\n", "password_digest", ",", "\n", "cnonce", ",", "\n", "iso_now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.__init__": [[299, 301], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "credentials", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.add": [[302, 304], ["gae_restful_lib.Credentials.credentials.append", "domain.lower"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "add", "(", "self", ",", "name", ",", "password", ",", "domain", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "credentials", ".", "append", "(", "(", "domain", ".", "lower", "(", ")", ",", "name", ",", "password", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.clear": [[305, 307], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "credentials", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter": [[308, 312], ["None"], "methods", ["None"], ["", "def", "iter", "(", "self", ",", "domain", ")", ":", "\n", "        ", "for", "(", "cdomain", ",", "name", ",", "password", ")", "in", "self", ".", "credentials", ":", "\n", "            ", "if", "cdomain", "==", "\"\"", "or", "domain", "==", "cdomain", ":", "\n", "                ", "yield", "(", "name", ",", "password", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.__init__": [[333, 354], ["mimeTypes.mimeTypes.mimeTypes", "mimeTypes.mimeTypes.mimeTypes.getDictionary", "gae_restful_lib.Credentials", "urlparse.urlparse", "urlparse.urlsplit", "gae_restful_lib.GAE_Connection.add_credentials"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.mimeTypes.mimeTypes.getDictionary", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.add_credentials"], ["    ", "def", "__init__", "(", "self", ",", "base_url", ",", "username", "=", "None", ",", "password", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_url", "=", "base_url", "\n", "m", "=", "mimeTypes", "(", ")", "\n", "self", ".", "mimetypes", "=", "m", ".", "getDictionary", "(", ")", "\n", "\n", "# Name/password", "\n", "self", ".", "credentials", "=", "Credentials", "(", ")", "\n", "\n", "if", "username", "and", "password", ":", "\n", "            ", "self", ".", "add_credentials", "(", "username", ",", "password", ",", "domain", "=", "\"\"", ")", "\n", "\n", "# authorization objects", "\n", "", "self", ".", "authorizations", "=", "[", "]", "\n", "\n", "self", ".", "url", "=", "urlparse", ".", "urlparse", "(", "base_url", ")", "\n", "\n", "(", "scheme", ",", "netloc", ",", "path", ",", "query", ",", "fragment", ")", "=", "urlparse", ".", "urlsplit", "(", "base_url", ")", "\n", "\n", "self", ".", "scheme", "=", "scheme", "\n", "self", ".", "host", "=", "netloc", "\n", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection._auth_from_challenge": [[355, 364], ["gae_restful_lib._parse_www_authenticate", "gae_restful_lib.GAE_Connection.credentials.iter", "_parse_www_authenticate.has_key"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter"], ["", "def", "_auth_from_challenge", "(", "self", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ")", ":", "\n", "        ", "\"\"\"A generator that creates Authorization objects\n           that can be applied to requests.\n        \"\"\"", "\n", "challenges", "=", "_parse_www_authenticate", "(", "response", ",", "'www-authenticate'", ")", "\n", "for", "cred", "in", "self", ".", "credentials", ".", "iter", "(", "host", ")", ":", "\n", "            ", "for", "scheme", "in", "AUTH_SCHEME_ORDER", ":", "\n", "                ", "if", "challenges", ".", "has_key", "(", "scheme", ")", ":", "\n", "                    ", "yield", "AUTH_SCHEME_CLASSES", "[", "scheme", "]", "(", "cred", ",", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.add_credentials": [[365, 369], ["gae_restful_lib.GAE_Connection.credentials.add"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add"], ["", "", "", "", "def", "add_credentials", "(", "self", ",", "name", ",", "password", ",", "domain", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"Add a name and password that will be used\n        any time a request requires authentication.\"\"\"", "\n", "self", ".", "credentials", ".", "add", "(", "name", ",", "password", ",", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.clear_credentials": [[370, 375], ["gae_restful_lib.GAE_Connection.credentials.clear"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.clear"], ["", "def", "clear_credentials", "(", "self", ")", ":", "\n", "        ", "\"\"\"Remove all the names and passwords\n        that are used for authentication\"\"\"", "\n", "self", ".", "credentials", ".", "clear", "(", ")", "\n", "self", ".", "authorizations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.request_get": [[376, 378], ["gae_restful_lib.GAE_Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_get", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "urlfetch", ".", "GET", ",", "args", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.request_delete": [[379, 381], ["gae_restful_lib.GAE_Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_delete", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "urlfetch", ".", "DELETE", ",", "args", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.request_post": [[382, 384], ["gae_restful_lib.GAE_Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_post", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "urlfetch", ".", "POST", ",", "args", ",", "body", "=", "body", ",", "filename", "=", "filename", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.request_put": [[385, 387], ["gae_restful_lib.GAE_Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_put", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "urlfetch", ".", "PUT", ",", "args", ",", "body", "=", "body", ",", "filename", "=", "filename", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.request_head": [[388, 390], ["gae_restful_lib.GAE_Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_head", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "urlfetch", ".", "HEAD", ",", "args", ",", "body", "=", "body", ",", "filename", "=", "filename", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection._conn_request": [[391, 399], ["google.appengine.api.urlfetch.fetch", "google.appengine.api.urlfetch.fetch.content.decode", "header_key.lower"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode"], ["", "def", "_conn_request", "(", "self", ",", "conn", ",", "request_uri", ",", "method", ",", "body", ",", "headers", ")", ":", "\n", "# Shim to allow easy reuse of httplib2 auth methods - conn param is not used", "\n", "        ", "urlfetch_response", "=", "urlfetch", ".", "fetch", "(", "request_uri", ",", "method", "=", "method", ",", "payload", "=", "body", ",", "headers", "=", "headers", ")", "\n", "r_headers", "=", "{", "'status'", ":", "urlfetch_response", ".", "status_code", "}", "\n", "for", "header_key", "in", "urlfetch_response", ".", "headers", ":", "\n", "            ", "r_headers", "[", "header_key", ".", "lower", "(", ")", "]", "=", "urlfetch_response", ".", "headers", "[", "header_key", "]", "\n", "\n", "", "return", "(", "r_headers", ",", "urlfetch_response", ".", "content", ".", "decode", "(", "'UTF-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.get_content_type": [[400, 404], ["gae_restful_lib.GAE_Connection.mimetypes.get", "filename.split", "mimetypes.guess_type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "def", "get_content_type", "(", "self", ",", "filename", ")", ":", "\n", "        ", "extension", "=", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "guessed_mimetype", "=", "self", ".", "mimetypes", ".", "get", "(", "extension", ",", "mimetypes", ".", "guess_type", "(", "filename", ")", "[", "0", "]", ")", "\n", "return", "guessed_mimetype", "or", "'application/octet-stream'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.request": [[405, 456], ["gae_restful_lib.GAE_Connection._conn_request", "headers.get", "gae_restful_lib.GAE_Connection.path.endswith", "path.startswith", "auth.request", "auth.response", "gae_restful_lib.GAE_Connection._auth_from_challenge", "request_path.append", "request_path.append", "request_path.append", "request_path.append", "urllib.urlencode", "auth.depth", "auth.inscope", "auth.request", "gae_restful_lib.GAE_Connection._conn_request", "authorization.request", "gae_restful_lib.GAE_Connection._conn_request", "gae_restful_lib.GAE_Connection.authorizations.append", "authorization.response", "sorted"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection._conn_request", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.HmacDigestAuthentication.response", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection._auth_from_challenge", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.depth", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Authentication.inscope", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection._conn_request", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection._conn_request", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.HmacDigestAuthentication.response"], ["", "def", "request", "(", "self", ",", "resource", ",", "method", "=", "urlfetch", ".", "GET", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "params", "=", "None", "\n", "path", "=", "resource", "\n", "headers", "[", "'User-Agent'", "]", "=", "'Basic Agent'", "\n", "\n", "if", "not", "headers", ".", "get", "(", "'Content-Type'", ",", "None", ")", ":", "\n", "            ", "headers", "[", "'Content-Type'", "]", "=", "'text/plain'", "\n", "\n", "", "request_path", "=", "[", "]", "\n", "if", "self", ".", "path", "!=", "\"/\"", ":", "\n", "            ", "if", "self", ".", "path", ".", "endswith", "(", "'/'", ")", ":", "\n", "                ", "request_path", ".", "append", "(", "self", ".", "path", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "request_path", ".", "append", "(", "self", ".", "path", ")", "\n", "", "if", "path", ".", "startswith", "(", "'/'", ")", ":", "\n", "                ", "request_path", ".", "append", "(", "path", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "request_path", ".", "append", "(", "path", ")", "\n", "", "", "full_path", "=", "u'/'", ".", "join", "(", "request_path", ")", "\n", "\n", "if", "args", ":", "\n", "            ", "full_path", "+=", "u\"?%s\"", "%", "(", "urlencode", "(", "args", ")", ")", "\n", "\n", "", "request_uri", "=", "u\"%s://%s%s\"", "%", "(", "self", ".", "scheme", ",", "self", ".", "host", ",", "full_path", ")", "\n", "\n", "auths", "=", "[", "(", "auth", ".", "depth", "(", "request_uri", ")", ",", "auth", ")", "for", "auth", "in", "self", ".", "authorizations", "if", "auth", ".", "inscope", "(", "host", ",", "request_uri", ")", "]", "\n", "auth", "=", "auths", "and", "sorted", "(", "auths", ")", "[", "0", "]", "[", "1", "]", "or", "None", "\n", "if", "auth", ":", "\n", "            ", "auth", ".", "request", "(", "method", ",", "request_uri", ",", "headers", ",", "body", ")", "\n", "\n", "", "(", "response", ",", "content", ")", "=", "self", ".", "_conn_request", "(", "conn", ",", "request_uri", ",", "method", ",", "body", ",", "headers", ")", "\n", "\n", "if", "auth", ":", "\n", "            ", "if", "auth", ".", "response", "(", "response", ",", "body", ")", ":", "\n", "                ", "auth", ".", "request", "(", "URLFETCH_METHOD_STRING", "[", "method", "]", ",", "request_uri", ",", "headers", ",", "body", ")", "\n", "\n", "(", "response", ",", "content", ")", "=", "self", ".", "_conn_request", "(", "conn", ",", "request_uri", ",", "method", ",", "body", ",", "headers", ")", "\n", "\n", "", "", "if", "response", "[", "'status'", "]", "==", "401", ":", "\n", "#return {u\"body\":u\"\".join([\"%s: %s\" % (key, response[key]) for key in response])}", "\n", "            ", "for", "authorization", "in", "self", ".", "_auth_from_challenge", "(", "self", ".", "host", ",", "request_uri", ",", "headers", ",", "response", ",", "content", ")", ":", "\n", "                ", "authorization", ".", "request", "(", "URLFETCH_METHOD_STRING", "[", "method", "]", ",", "request_uri", ",", "headers", ",", "body", ")", "\n", "\n", "(", "response", ",", "content", ")", "=", "self", ".", "_conn_request", "(", "conn", ",", "request_uri", ",", "method", ",", "body", ",", "headers", ")", "\n", "\n", "if", "response", "[", "'status'", "]", "!=", "401", ":", "\n", "                    ", "self", ".", "authorizations", ".", "append", "(", "authorization", ")", "\n", "authorization", ".", "response", "(", "response", ",", "body", ")", "\n", "break", "\n", "\n", "", "", "", "return", "{", "u'headers'", ":", "response", ",", "u'body'", ":", "content", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._parse_www_authenticate": [[60, 85], ["headers.has_key", "headers[].strip", "www_auth.search", "the_rest.strip", "the_rest.strip.split", "www_auth.search", "www_auth.search.groups", "UNQUOTE_PAIRS.sub", "auth_scheme.lower", "len", "www_auth.search.groups", "key.lower"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.search", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.search"], ["def", "_parse_www_authenticate", "(", "headers", ",", "headername", "=", "'www-authenticate'", ")", ":", "\n", "    ", "\"\"\"Returns a dictionary of dictionaries, one dict\n    per auth_scheme.\"\"\"", "\n", "retval", "=", "{", "}", "\n", "if", "headers", ".", "has_key", "(", "headername", ")", ":", "\n", "        ", "authenticate", "=", "headers", "[", "headername", "]", ".", "strip", "(", ")", "\n", "www_auth", "=", "USE_WWW_AUTH_STRICT_PARSING", "and", "WWW_AUTH_STRICT", "or", "WWW_AUTH_RELAXED", "\n", "while", "authenticate", ":", "\n", "# Break off the scheme at the beginning of the line", "\n", "            ", "if", "headername", "==", "'authentication-info'", ":", "\n", "                ", "(", "auth_scheme", ",", "the_rest", ")", "=", "(", "'digest'", ",", "authenticate", ")", "\n", "", "else", ":", "\n", "                ", "(", "auth_scheme", ",", "the_rest", ")", "=", "authenticate", ".", "split", "(", "\" \"", ",", "1", ")", "\n", "# Now loop over all the key value pairs that come after the scheme, ", "\n", "# being careful not to roll into the next scheme", "\n", "", "match", "=", "www_auth", ".", "search", "(", "the_rest", ")", "\n", "auth_params", "=", "{", "}", "\n", "while", "match", ":", "\n", "                ", "if", "match", "and", "len", "(", "match", ".", "groups", "(", ")", ")", "==", "3", ":", "\n", "                    ", "(", "key", ",", "value", ",", "the_rest", ")", "=", "match", ".", "groups", "(", ")", "\n", "auth_params", "[", "key", ".", "lower", "(", ")", "]", "=", "UNQUOTE_PAIRS", ".", "sub", "(", "r'\\1'", ",", "value", ")", "# '\\\\'.join([x.replace('\\\\', '') for x in value.split('\\\\\\\\')])", "\n", "", "match", "=", "www_auth", ".", "search", "(", "the_rest", ")", "\n", "", "retval", "[", "auth_scheme", ".", "lower", "(", ")", "]", "=", "auth_params", "\n", "authenticate", "=", "the_rest", ".", "strip", "(", ")", "\n", "", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._cnonce": [[86, 89], ["md5.new().hexdigest", "md5.new", "time.ctime", "range", "random.randrange"], "function", ["None"], ["", "def", "_cnonce", "(", ")", ":", "\n", "    ", "dig", "=", "md5", ".", "new", "(", "\"%s:%s\"", "%", "(", "time", ".", "ctime", "(", ")", ",", "[", "\"0123456789\"", "[", "random", ".", "randrange", "(", "0", ",", "9", ")", "]", "for", "i", "in", "range", "(", "20", ")", "]", ")", ")", ".", "hexdigest", "(", ")", "\n", "return", "dig", "[", ":", "16", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib._wsse_username_token": [[90, 92], ["base64.encodestring().strip", "base64.encodestring", "sha.new().digest", "sha.new"], "function", ["None"], ["", "def", "_wsse_username_token", "(", "cnonce", ",", "iso_now", ",", "password", ")", ":", "\n", "    ", "return", "base64", ".", "encodestring", "(", "sha", ".", "new", "(", "\"%s%s%s\"", "%", "(", "cnonce", ",", "iso_now", ",", "password", ")", ")", ".", "digest", "(", ")", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.parse_uri": [[95, 102], ["URI.match().groups", "URI.match"], "function", ["None"], ["def", "parse_uri", "(", "uri", ")", ":", "\n", "    ", "\"\"\"Parses a URI using the regex given in Appendix B of RFC 3986.\n\n        (scheme, authority, path, query, fragment) = parse_uri(uri)\n    \"\"\"", "\n", "groups", "=", "URI", ".", "match", "(", "uri", ")", ".", "groups", "(", ")", "\n", "return", "(", "groups", "[", "1", "]", ",", "groups", "[", "3", "]", ",", "groups", "[", "4", "]", ",", "groups", "[", "6", "]", ",", "groups", "[", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.mimeTypes.mimeTypes.getDictionary": [[25, 58], ["mimetype_extension_mapping.update", "mimetype_extension_mapping.update"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update"], ["    ", "def", "getDictionary", "(", "self", ")", ":", "\n", "        ", "mimetype_to_extension", "=", "{", "}", "\n", "extension_to_mimetype", "=", "{", "}", "\n", "mimetype_to_extension", "[", "'text/plain'", "]", "=", "'txt'", "\n", "mimetype_to_extension", "[", "'text/xml'", "]", "=", "'xml'", "\n", "mimetype_to_extension", "[", "'text/css'", "]", "=", "'css'", "\n", "mimetype_to_extension", "[", "'text/javascript'", "]", "=", "'js'", "\n", "mimetype_to_extension", "[", "'text/rtf'", "]", "=", "'rtf'", "\n", "mimetype_to_extension", "[", "'text/calendar'", "]", "=", "'ics'", "\n", "mimetype_to_extension", "[", "'application/msword'", "]", "=", "'doc'", "\n", "mimetype_to_extension", "[", "'application/msexcel'", "]", "=", "'xls'", "\n", "mimetype_to_extension", "[", "'application/x-msword'", "]", "=", "'doc'", "\n", "mimetype_to_extension", "[", "'application/vnd.ms-excel'", "]", "=", "'xls'", "\n", "mimetype_to_extension", "[", "'application/vnd.ms-powerpoint'", "]", "=", "'ppt'", "\n", "mimetype_to_extension", "[", "'application/pdf'", "]", "=", "'pdf'", "\n", "mimetype_to_extension", "[", "'text/comma-separated-values'", "]", "=", "'csv'", "\n", "\n", "\n", "mimetype_to_extension", "[", "'image/jpeg'", "]", "=", "'jpg'", "\n", "mimetype_to_extension", "[", "'image/gif'", "]", "=", "'gif'", "\n", "mimetype_to_extension", "[", "'image/jpg'", "]", "=", "'jpg'", "\n", "mimetype_to_extension", "[", "'image/tiff'", "]", "=", "'tiff'", "\n", "mimetype_to_extension", "[", "'image/png'", "]", "=", "'png'", "\n", "\n", "# And hacky reverse lookups", "\n", "for", "mimetype", "in", "mimetype_to_extension", ":", "\n", "            ", "extension_to_mimetype", "[", "mimetype_to_extension", "[", "mimetype", "]", "]", "=", "mimetype", "\n", "\n", "", "mimetype_extension_mapping", "=", "{", "}", "\n", "mimetype_extension_mapping", ".", "update", "(", "mimetype_to_extension", ")", "\n", "mimetype_extension_mapping", ".", "update", "(", "extension_to_mimetype", ")", "\n", "\n", "return", "mimetype_extension_mapping", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.RDFFormatException.__init__": [[57, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.RDFFormatException.__str__": [[59, 61], ["repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.__init__": [[63, 75], ["base_store_url.endswith", "restful_lib.Connection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_store_url", ",", "username", "=", "None", ",", "password", "=", "None", ")", ":", "\n", "        ", "\"\"\" Base URL for the store should be pretty self-explanatory. E.g. something like\n            \"http://api.talis.com/stores/store_name\"\n            Only needs to enter the username/password if this class is going to tinker\n            with things.\"\"\"", "\n", "if", "base_store_url", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "base_store_url", "=", "base_store_url", "[", ":", "-", "1", "]", "\n", "\n", "", "self", ".", "base_store_url", "=", "base_store_url", "\n", "# Split the given URL", "\n", "if", "base_store_url", ":", "\n", "            ", "self", ".", "conn", "=", "Connection", "(", "base_store_url", ",", "username", "=", "username", ",", "password", "=", "password", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.does_snapshot_exist": [[76, 92], ["talis.Store.conn.request", "talis.Store.get", "talis.Store.get().get", "talis.Store.get().get", "talis.Store.get().get.startswith", "talis.Store.get", "talis.Store.get"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "", "def", "does_snapshot_exist", "(", "self", ",", "snapshot_filename", ")", ":", "\n", "# Test to see if snapshot exists:", "\n", "        ", "snapshot_path", "=", "SNAPSHOT_TEMPLATE", "%", "snapshot_filename", "\n", "\n", "response", "=", "self", ".", "conn", ".", "request", "(", "snapshot_path", ",", "method", "=", "\"HEAD\"", ")", "\n", "\n", "if", "response", ".", "get", "(", "'headers'", ")", "and", "response", ".", "get", "(", "'headers'", ")", ".", "get", "(", "'status'", ")", ":", "\n", "            ", "status", "=", "response", ".", "get", "(", "'headers'", ")", ".", "get", "(", "'status'", ")", "\n", "\n", "if", "status", "in", "[", "'200'", ",", "'204'", "]", ":", "\n", "                ", "return", "True", "\n", "", "elif", "status", ".", "startswith", "(", "'4'", ")", ":", "\n", "                ", "return", "False", "\n", "# else: raise Error?", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.schedule_reset_data": [[93, 103], ["talis.Store.conn.request_post", "datetime.datetime.datetime.utcnow().isoformat().split", "datetime.datetime.datetime.utcnow().isoformat", "datetime.datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post"], ["", "def", "schedule_reset_data", "(", "self", ",", "label", ",", "at_time", "=", "None", ")", ":", "\n", "        ", "\"\"\"Will request that the store is emptied, and label the request. \n           If a time is given as an ISO8601 formatted string, this will be \n           the scheduled time for the snapshot. Otherwise, it will use the current time.\"\"\"", "\n", "if", "not", "at_time", ":", "\n", "            ", "at_time", "=", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "snapshot_request", "=", "RESET_STORE_TEMPLATE", "%", "(", "label", ",", "at_time", ")", "\n", "\n", "return", "self", ".", "conn", ".", "request_post", "(", "JOB_REQUESTS", ",", "body", "=", "snapshot_request", ",", "headers", "=", "{", "'Content-Type'", ":", "'application/rdf+xml'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.schedule_snapshot_data": [[104, 114], ["talis.Store.conn.request_post", "datetime.datetime.datetime.utcnow().isoformat().split", "datetime.datetime.datetime.utcnow().isoformat", "datetime.datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post"], ["", "def", "schedule_snapshot_data", "(", "self", ",", "label", ",", "at_time", "=", "None", ")", ":", "\n", "        ", "\"\"\"Will request a snapshot be made of the store. \n           If a time is given as an ISO8601 formatted string, this will be \n           the scheduled time for the snapshot. Otherwise, it will use the current time.\"\"\"", "\n", "if", "not", "at_time", ":", "\n", "            ", "at_time", "=", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "snapshot_request", "=", "SNAPSHOT_STORE_TEMPLATE", "%", "(", "label", ",", "at_time", ")", "\n", "\n", "return", "self", ".", "conn", ".", "request_post", "(", "JOB_REQUESTS", ",", "body", "=", "snapshot_request", ",", "headers", "=", "{", "'Content-Type'", ":", "'application/rdf+xml'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.schedule_snapshot_restore": [[115, 129], ["talis.Store.does_snapshot_exist", "talis.Store.conn.request_post", "datetime.datetime.datetime.utcnow().isoformat().split", "datetime.datetime.datetime.utcnow().isoformat", "datetime.datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.does_snapshot_exist", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post"], ["", "def", "schedule_snapshot_restore", "(", "self", ",", "label", ",", "snapshot_filename", ",", "at_time", "=", "None", ")", ":", "\n", "        ", "\"\"\"Will request that the store is restored from a snapshot. If a time is given as\n           an ISO8601 formatted string, this will be the scheduled time for\n           the recovery. Otherwise, it will use the current time.\"\"\"", "\n", "if", "not", "at_time", ":", "\n", "            ", "at_time", "=", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "# Test to see if snapshot exists:", "\n", "", "snapshot_path", "=", "SNAPSHOT_TEMPLATE", "%", "snapshot_filename", "\n", "\n", "if", "self", ".", "does_snapshot_exist", "(", "snapshot_filename", ")", ":", "\n", "            ", "snapshot_uri", "=", "\"%s%s\"", "%", "(", "self", ".", "base_store_url", ",", "snapshot_path", ")", "\n", "snapshot_request", "=", "SNAPSHOT_RESTORE_TEMPLATE", "%", "(", "label", ",", "snapshot_uri", ",", "at_time", ")", "\n", "return", "self", ".", "conn", ".", "request_post", "(", "JOB_REQUESTS", ",", "body", "=", "snapshot_request", ",", "headers", "=", "{", "'Content-Type'", ":", "'application/rdf+xml'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.submit_rdfxml": [[130, 133], ["talis.Store._put_rdf"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._put_rdf"], ["", "", "def", "submit_rdfxml", "(", "self", ",", "rdf_text", ")", ":", "\n", "        ", "\"\"\"Puts the given RDF/XML into the Talis Store\"\"\"", "\n", "return", "self", ".", "_put_rdf", "(", "rdf_text", ",", "mimetype", "=", "\"application/rdf+xml\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._put_rdf": [[134, 144], ["talis.Store.conn.request_post", "talis.RDFFormatException"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post"], ["", "def", "_put_rdf", "(", "self", ",", "rdf_text", ",", "mimetype", "=", "\"application/rdf+xml\"", ")", ":", "\n", "        ", "\"\"\"Placeholder for allowing other serialisation types to be put into a\n           Talis store, whether the conversion takes place here, or if the Talis\n           store starts to accept other formats.\"\"\"", "\n", "if", "rdf_text", ":", "\n", "            ", "request_headers", "=", "{", "}", "\n", "if", "mimetype", "not", "in", "[", "'application/rdf+xml'", "]", ":", "\n", "                ", "raise", "RDFFormatException", "(", "\"%s is not an allowed RDF serialisation format\"", "%", "mimetype", ")", "\n", "", "request_headers", "[", "'Content-Type'", "]", "=", "mimetype", "\n", "return", "self", ".", "conn", ".", "request_post", "(", "META_ENDPOINT", ",", "body", "=", "rdf_text", ",", "headers", "=", "request_headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._query_sparql_service": [[145, 151], ["passed_args.update", "talis.Store.conn.request_get"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get"], ["", "", "def", "_query_sparql_service", "(", "self", ",", "query", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Low-level SPARQL query - returns the message and response headers from the server.\n           You may be looking for Store.sparql instead of this.\"\"\"", "\n", "passed_args", "=", "{", "'query'", ":", "query", "}", "\n", "passed_args", ".", "update", "(", "args", ")", "\n", "return", "self", ".", "conn", ".", "request_get", "(", "SPARQL_ENDPOINT", ",", "args", "=", "passed_args", ",", "headers", "=", "{", "'Content-type'", ":", "'application/x-www-form-urlencoded'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._query_search_service": [[152, 160], ["passed_args.update", "talis.Store.conn.request_get"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get"], ["", "def", "_query_search_service", "(", "self", ",", "query", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Low-level content box query - returns the message and response headers from the server.\n           You may be looking for Store.search instead of this.\"\"\"", "\n", "\n", "passed_args", "=", "{", "'query'", ":", "query", "}", "\n", "passed_args", ".", "update", "(", "args", ")", "\n", "\n", "return", "self", ".", "conn", ".", "request_get", "(", "CONTENT_ENDPOINT", ",", "args", "=", "passed_args", ",", "headers", "=", "{", "'Content-type'", ":", "'application/x-www-form-urlencoded'", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._list_snapshots": [[161, 163], ["talis.Store.conn.request_get"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get"], ["", "def", "_list_snapshots", "(", "self", ",", "passed_args", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "conn", ".", "request_get", "(", "SNAPSHOTS", ",", "args", "=", "passed_args", ",", "headers", "=", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.submit_rdfxml_from_url": [[168, 192], ["restful_lib.Connection", "restful_lib.Connection.request_get", "restful_lib.Connection.request_get.get", "restful_lib.Connection.request_get.get().encode", "response_headers.get", "talis.Store._put_rdf", "restful_lib.Connection.request_get.get().get", "restful_lib.Connection.request_get.get", "restful_lib.Connection.request_get.get", "header.lower"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._put_rdf", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "def", "submit_rdfxml_from_url", "(", "self", ",", "url_to_file", ",", "headers", "=", "{", "\"Accept\"", ":", "\"application/rdf+xml\"", "}", ")", ":", "\n", "        ", "\"\"\"Convenience method - downloads the file from a given url, and then pushes that\n           into the meta store. Currently, it doesn't put it through a parse-> reserialise\n           step, so that it could handle more than rdf/xml on the way it but it is a\n           future possibility.\"\"\"", "\n", "import_rdf_connection", "=", "Connection", "(", "url_to_file", ")", "\n", "response", "=", "import_rdf_connection", ".", "request_get", "(", "\"\"", ",", "headers", "=", "headers", ")", "\n", "\n", "if", "response", ".", "get", "(", "'headers'", ")", "and", "response", ".", "get", "(", "'headers'", ")", ".", "get", "(", "'status'", ")", "in", "[", "'200'", ",", "'204'", "]", ":", "\n", "            ", "request_headers", "=", "{", "}", "\n", "\n", "# Lowercase all response header fields, to make matching easier. ", "\n", "# According to HTTP spec, they should be case-insensitive", "\n", "response_headers", "=", "response", "[", "'headers'", "]", "\n", "for", "header", "in", "response_headers", ":", "\n", "                ", "response_headers", "[", "header", ".", "lower", "(", ")", "]", "=", "response_headers", "[", "header", "]", "\n", "\n", "# Set the body content", "\n", "", "body", "=", "response", ".", "get", "(", "'body'", ")", ".", "encode", "(", "'UTF-8'", ")", "\n", "\n", "# Get the response mimetype", "\n", "rdf_type", "=", "response_headers", ".", "get", "(", "'content-type'", ",", "None", ")", "\n", "\n", "return", "self", ".", "_put_rdf", "(", "body", ",", "mimetype", "=", "rdf_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.sparql": [[193, 208], ["talis.Store._query_sparql_service", "talis.Store.get", "talis.Store.get.get", "talis.Store.get.get", "talis.Store.get().encode", "talis.Store.get"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._query_sparql_service", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "", "def", "sparql", "(", "self", ",", "query", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Performs a SPARQL query and simply returns the body of the response if successful\n           - if there is an issue, such as a code 404 or 500, this method will return False. \n           \n           Use the _query_sparql_service method to get hold of\n           the complete response in this case.\"\"\"", "\n", "response", "=", "self", ".", "_query_sparql_service", "(", "query", ",", "args", ")", "\n", "headers", "=", "response", ".", "get", "(", "'headers'", ")", "\n", "\n", "status", "=", "headers", ".", "get", "(", "'status'", ",", "headers", ".", "get", "(", "'Status'", ")", ")", "\n", "\n", "if", "status", "in", "[", "'200'", ",", "200", ",", "'204'", ",", "204", "]", ":", "\n", "            ", "return", "response", ".", "get", "(", "'body'", ")", ".", "encode", "(", "'UTF-8'", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store.search": [[209, 225], ["talis.Store._query_search_service", "talis.Store.get", "talis.Store.get.get", "talis.Store.get.get", "talis.Atom_Search_Results", "talis.Atom_Search_Results.get_item_list", "talis.Store.get().encode", "talis.Store.get"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Store._query_search_service", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Atom_Search_Results.get_item_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "", "def", "search", "(", "self", ",", "query", ",", "args", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Performs a search query and simply returns the body of the response if successful\n           - if there is an issue, such as a code 404 or 500, this method will return False. \n           \n           Use the _query_search_service method to get hold of\n           the complete response in this case.\"\"\"", "\n", "response", "=", "self", ".", "_query_search_service", "(", "query", ",", "args", ")", "\n", "headers", "=", "response", ".", "get", "(", "'headers'", ")", "\n", "\n", "status", "=", "headers", ".", "get", "(", "'status'", ",", "headers", ".", "get", "(", "'Status'", ")", ")", "\n", "\n", "if", "status", "in", "[", "'200'", ",", "200", ",", "'204'", ",", "204", "]", ":", "\n", "            ", "parsed_atom", "=", "Atom_Search_Results", "(", "response", ".", "get", "(", "'body'", ")", ".", "encode", "(", "'UTF-8'", ")", ")", "\n", "return", "parsed_atom", ".", "get_item_list", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Item.__init__": [[227, 230], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "title", "=", "None", "\n", "self", ".", "link", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Atom_Search_Results.__init__": [[232, 234], ["talis.Atom_Search_Results.load_atom_search"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Atom_Search_Results.load_atom_search"], ["    ", "def", "__init__", "(", "self", ",", "atom_text", ")", ":", "\n", "        ", "self", ".", "load_atom_search", "(", "atom_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Atom_Search_Results.load_atom_search": [[235, 237], ["xml.etree.ElementTree.fromstring"], "methods", ["None"], ["", "def", "load_atom_search", "(", "self", ",", "atom_text", ")", ":", "\n", "        ", "self", ".", "atom", "=", "ET", ".", "fromstring", "(", "atom_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.Atom_Search_Results.get_item_list": [[238, 248], ["talis.Atom_Search_Results.atom.findall", "talis.Item", "items.append", "item.find", "item.find"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find"], ["", "def", "get_item_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "atom", ":", "\n", "            ", "items", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "atom", ".", "findall", "(", "'{http://purl.org/rss/1.0/}item'", ")", ":", "\n", "                ", "item_fields", "=", "Item", "(", ")", "\n", "item_fields", ".", "title", "=", "item", ".", "find", "(", "'{http://purl.org/rss/1.0/}title'", ")", ".", "text", "\n", "item_fields", ".", "link", "=", "item", ".", "find", "(", "'{http://purl.org/rss/1.0/}link'", ")", ".", "text", "\n", "items", ".", "append", "(", "item_fields", ")", "\n", "\n", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.talis.GAE_Store.__init__": [[250, 262], ["base_store_url.endswith", "gae_restful_lib.GAE_Connection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_store_url", ",", "username", "=", "None", ",", "password", "=", "None", ")", ":", "\n", "        ", "\"\"\" Base URL for the store should be pretty self-explanatory. E.g. something like\n            \"http://api.talis.com/stores/store_name\"\n            The username and password will not do anything, until the Google app engine's\n            fetch library handles authentication, if ever.\"\"\"", "\n", "if", "base_store_url", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "base_store_url", "=", "base_store_url", "[", ":", "-", "1", "]", "\n", "\n", "", "self", ".", "base_store_url", "=", "base_store_url", "\n", "# Split the given URL", "\n", "if", "base_store_url", ":", "\n", "            ", "self", ".", "conn", "=", "GAE_Connection", "(", "base_store_url", ",", "username", ",", "password", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.__init__": [[37, 56], ["mimeTypes.mimeTypes.mimeTypes", "mimeTypes.mimeTypes.mimeTypes.getDictionary", "urlparse.urlparse", "urlparse.urlsplit", "httplib2.Http", "restful_lib.Connection.h.add_credentials"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.mimeTypes.mimeTypes.getDictionary", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.GAE_Connection.add_credentials"], ["    ", "def", "__init__", "(", "self", ",", "base_url", ",", "username", "=", "None", ",", "password", "=", "None", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_url", "=", "base_url", "\n", "self", ".", "username", "=", "username", "\n", "m", "=", "mimeTypes", "(", ")", "\n", "self", ".", "mimetypes", "=", "m", ".", "getDictionary", "(", ")", "\n", "\n", "self", ".", "url", "=", "urlparse", ".", "urlparse", "(", "base_url", ")", "\n", "\n", "(", "scheme", ",", "netloc", ",", "path", ",", "query", ",", "fragment", ")", "=", "urlparse", ".", "urlsplit", "(", "base_url", ")", "\n", "\n", "self", ".", "scheme", "=", "scheme", "\n", "self", ".", "host", "=", "netloc", "\n", "self", ".", "path", "=", "path", "\n", "\n", "# Create Http class with support for Digest HTTP Authentication, if necessary", "\n", "self", ".", "h", "=", "httplib2", ".", "Http", "(", "\".cache\"", ",", "timeout", "=", "timeout", ")", "\n", "self", ".", "h", ".", "follow_all_redirects", "=", "True", "\n", "if", "username", "and", "password", ":", "\n", "            ", "self", ".", "h", ".", "add_credentials", "(", "username", ",", "password", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_get": [[57, 59], ["restful_lib.Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "", "def", "request_get", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "\"get\"", ",", "args", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_delete": [[60, 62], ["restful_lib.Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_delete", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "\"delete\"", ",", "args", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_head": [[63, 65], ["restful_lib.Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_head", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "\"head\"", ",", "args", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_post": [[66, 68], ["restful_lib.Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_post", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "\"post\"", ",", "args", ",", "body", "=", "body", ",", "filename", "=", "filename", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request_put": [[69, 71], ["restful_lib.Connection.request"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request"], ["", "def", "request_put", "(", "self", ",", "resource", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "resource", ",", "\"put\"", ",", "args", ",", "body", "=", "body", ",", "filename", "=", "filename", ",", "headers", "=", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.get_content_type": [[72, 76], ["restful_lib.Connection.mimetypes.get", "filename.split", "mimetypes.guess_type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "def", "get_content_type", "(", "self", ",", "filename", ")", ":", "\n", "        ", "extension", "=", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "guessed_mimetype", "=", "self", ".", "mimetypes", ".", "get", "(", "extension", ",", "mimetypes", ".", "guess_type", "(", "filename", ")", "[", "0", "]", ")", "\n", "return", "guessed_mimetype", "or", "'application/octet-stream'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request": [[77, 130], ["restful_lib.Connection.h.request", "restful_lib.Connection.get_content_type", "cStringIO.StringIO", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.write", "cStringIO.StringIO.getvalue", "str", "restful_lib.Connection.path.endswith", "path.startswith", "method.upper", "content.decode", "len", "str", "urllib.urlencode", "request_path.append", "request_path.append", "request_path.append", "request_path.append", "headers.get", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.request", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.restful_lib.Connection.get_content_type", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.jobs.Jobs.get"], ["", "def", "request", "(", "self", ",", "resource", ",", "method", "=", "\"get\"", ",", "args", "=", "None", ",", "body", "=", "None", ",", "filename", "=", "None", ",", "headers", "=", "{", "}", ")", ":", "\n", "        ", "params", "=", "None", "\n", "path", "=", "resource", "\n", "headers", "[", "'User-Agent'", "]", "=", "'Basic Agent'", "\n", "\n", "BOUNDARY", "=", "u'00hoYUXOnLD5RQ8SKGYVgLLt64jejnMwtO7q8XE1'", "\n", "CRLF", "=", "u'\\r\\n'", "\n", "\n", "if", "filename", "and", "body", ":", "\n", "#fn = open(filename ,'r')", "\n", "#chunks = fn.read()", "\n", "#fn.close()", "\n", "\n", "# Attempt to find the Mimetype", "\n", "            ", "content_type", "=", "self", ".", "get_content_type", "(", "filename", ")", "\n", "headers", "[", "'Content-Type'", "]", "=", "'multipart/form-data; boundary='", "+", "BOUNDARY", "\n", "encode_string", "=", "StringIO", "(", ")", "\n", "encode_string", ".", "write", "(", "CRLF", ")", "\n", "encode_string", ".", "write", "(", "u'--'", "+", "BOUNDARY", "+", "CRLF", ")", "\n", "encode_string", ".", "write", "(", "u'Content-Disposition: form-data; name=\"file\"; filename=\"%s\"'", "%", "filename", ")", "\n", "encode_string", ".", "write", "(", "CRLF", ")", "\n", "encode_string", ".", "write", "(", "u'Content-Type: %s'", "%", "content_type", "+", "CRLF", ")", "\n", "encode_string", ".", "write", "(", "CRLF", ")", "\n", "encode_string", ".", "write", "(", "body", ")", "\n", "encode_string", ".", "write", "(", "CRLF", ")", "\n", "encode_string", ".", "write", "(", "u'--'", "+", "BOUNDARY", "+", "u'--'", "+", "CRLF", ")", "\n", "\n", "body", "=", "encode_string", ".", "getvalue", "(", ")", "\n", "headers", "[", "'Content-Length'", "]", "=", "str", "(", "len", "(", "body", ")", ")", "\n", "", "elif", "body", ":", "\n", "            ", "if", "not", "headers", ".", "get", "(", "'Content-Type'", ",", "None", ")", ":", "\n", "                ", "headers", "[", "'Content-Type'", "]", "=", "'text/xml'", "\n", "", "headers", "[", "'Content-Length'", "]", "=", "str", "(", "len", "(", "body", ")", ")", "\n", "", "else", ":", "\n", "            ", "headers", "[", "'Content-Type'", "]", "=", "'text/xml'", "\n", "\n", "", "if", "args", ":", "\n", "            ", "path", "+=", "u\"?\"", "+", "urllib", ".", "urlencode", "(", "args", ")", "\n", "\n", "", "request_path", "=", "[", "]", "\n", "if", "self", ".", "path", "!=", "\"/\"", ":", "\n", "            ", "if", "self", ".", "path", ".", "endswith", "(", "'/'", ")", ":", "\n", "                ", "request_path", ".", "append", "(", "self", ".", "path", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "request_path", ".", "append", "(", "self", ".", "path", ")", "\n", "", "if", "path", ".", "startswith", "(", "'/'", ")", ":", "\n", "                ", "request_path", ".", "append", "(", "path", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "request_path", ".", "append", "(", "path", ")", "\n", "\n", "", "", "resp", ",", "content", "=", "self", ".", "h", ".", "request", "(", "u\"%s://%s%s\"", "%", "(", "self", ".", "scheme", ",", "self", ".", "host", ",", "u'/'", ".", "join", "(", "request_path", ")", ")", ",", "method", ".", "upper", "(", ")", ",", "body", "=", "body", ",", "headers", "=", "headers", ")", "\n", "\n", "return", "{", "u'headers'", ":", "resp", ",", "u'body'", ":", "content", ".", "decode", "(", "'UTF-8'", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode": [[53, 63], ["ord", "ord", "c.encode"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode"], ["def", "encode", "(", "c", ")", ":", "\n", "    ", "retval", "=", "c", "\n", "i", "=", "ord", "(", "c", ")", "\n", "for", "low", ",", "high", "in", "escape_range", ":", "\n", "        ", "if", "i", "<", "low", ":", "\n", "            ", "break", "\n", "", "if", "i", ">=", "low", "and", "i", "<=", "high", ":", "\n", "            ", "retval", "=", "\"\"", ".", "join", "(", "[", "\"%%%2X\"", "%", "ord", "(", "o", ")", "for", "o", "in", "c", ".", "encode", "(", "'utf-8'", ")", "]", ")", "\n", "break", "\n", "", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.iri2uri": [[65, 78], ["isinstance", "urlparse.urlsplit", "authority.encode.encode", "urlparse.urlunsplit", "iri2uri.encode"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode"], ["", "def", "iri2uri", "(", "uri", ")", ":", "\n", "    ", "\"\"\"Convert an IRI to a URI. Note that IRIs must be \n    passed in a unicode strings. That is, do not utf-8 encode\n    the IRI before passing it into the function.\"\"\"", "\n", "if", "isinstance", "(", "uri", ",", "unicode", ")", ":", "\n", "        ", "(", "scheme", ",", "authority", ",", "path", ",", "query", ",", "fragment", ")", "=", "urlparse", ".", "urlsplit", "(", "uri", ")", "\n", "authority", "=", "authority", ".", "encode", "(", "'idna'", ")", "\n", "# For each character in 'ucschar' or 'iprivate'", "\n", "#  1. encode as utf-8", "\n", "#  2. then %-encode each octet of that utf-8 ", "\n", "uri", "=", "urlparse", ".", "urlunsplit", "(", "(", "scheme", ",", "authority", ",", "path", ",", "query", ",", "fragment", ")", ")", "\n", "uri", "=", "\"\"", ".", "join", "(", "[", "encode", "(", "c", ")", "for", "c", "in", "uri", "]", ")", "\n", "", "return", "uri", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.j_mgr.HPOJobFactory.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "worker", ",", "n_jobs", ")", ":", "\n", "        ", "self", ".", "n_jobs", "=", "n_jobs", "\n", "self", ".", "worker", "=", "worker", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.j_mgr.HPOJobFactory.create": [[9, 22], ["time.strftime", "jr.keys", "j_mgr.HPOJobFactory.worker.get_id", "j_mgr.HPOJobFactory.worker.get_device_id", "time.strftime", "time.strftime", "time.gmtime", "time.localtime", "time.localtime"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.get_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "create", "(", "self", ",", "jr", ")", ":", "\n", "        ", "job", "=", "{", "}", "\n", "job", "[", "'job_id'", "]", "=", "\"{}-{}-{}-{}\"", ".", "format", "(", "self", ".", "worker", ".", "get_id", "(", ")", ",", "\n", "self", ".", "worker", ".", "get_device_id", "(", ")", ",", "\n", "time", ".", "strftime", "(", "'%Y%m%d'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "time", ".", "strftime", "(", "'%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "job", "[", "'created'", "]", "=", "time", ".", "strftime", "(", "'%Y-%m-%dT%H:%M:%SZ'", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "job", "[", "'status'", "]", "=", "\"created\"", "\n", "job", "[", "'result'", "]", "=", "None", "\n", "for", "key", "in", "jr", ".", "keys", "(", ")", ":", "\n", "            ", "job", "[", "key", "]", "=", "jr", "[", "key", "]", "\n", "\n", "", "return", "job", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.__init__": [[14, 25], ["xoa.managers.proto.ManagerPrototype.__init__", "s_mgr.HPOJobManager.get_hpo_jobs", "xoa.workers.s_opt.SequentialOptimizer", "s_mgr.HPOJobManager.worker.get_id", "s_mgr.HPOJobManager.worker.get_device_id", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_hpo_jobs", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.get_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["    ", "def", "__init__", "(", "self", ",", "run_cfg", ",", "hp_cfg", ",", "port", ",", "use_surrogate", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "HPOJobManager", ",", "self", ")", ".", "__init__", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "self", ".", "jobs", "=", "self", ".", "get_hpo_jobs", "(", ")", "\n", "\n", "self", ".", "worker", "=", "SequentialOptimizer", "(", "run_cfg", ",", "hp_cfg", ",", "\"tuner_{}\"", ".", "format", "(", "port", ")", ")", "\n", "self", ".", "prefix", "=", "self", ".", "worker", ".", "get_id", "(", ")", "\n", "self", ".", "device_id", "=", "self", ".", "worker", ".", "get_device_id", "(", ")", "\n", "\n", "self", ".", "use_surrogate", "=", "use_surrogate", "\n", "self", ".", "to_dos", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.__del__": [[26, 31], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "debug", "(", "\"All jobs will be terminated\"", ")", "\n", "# force to terminate all jobs", "\n", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "j", "[", "\"status\"", "]", "=", "'terminated'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_config": [[34, 39], ["s_mgr.HPOJobManager.worker.get_config"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "# This returns run config", "\n", "        ", "if", "self", ".", "use_surrogate", ":", "\n", "            ", "return", "{", "\"target_func\"", ":", "\"surrogate\"", ",", "\"param_order\"", ":", "[", "]", "}", "\n", "", "return", "self", ".", "worker", ".", "get_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_spec": [[40, 46], ["s_mgr.HPOJobManager.worker.get_device_id"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "get_spec", "(", "self", ")", ":", "\n", "        ", "my_spec", "=", "{", "\n", "\"node_type\"", ":", "\"BO Node\"", ",", "\n", "\"id\"", ":", "self", ".", "worker", ".", "id", ",", "\n", "\"device_id\"", ":", "self", ".", "worker", ".", "get_device_id", "(", ")", "}", "\n", "return", "my_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.add": [[47, 69], ["xoa.managers.j_mgr.HPOJobFactory", "xoa.managers.j_mgr.HPOJobFactory.create", "s_mgr.HPOJobManager.jobs.append", "debug", "s_mgr.HPOJobManager.worker.set_params", "len", "s_mgr.HPOJobManager.to_dos.append", "debug", "debug", "ValueError", "warn", "debug", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.create", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.s_opt.SequentialOptimizer.set_params", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "add", "(", "self", ",", "args", ")", ":", "\n", "        ", "job_id", "=", "None", "\n", "# TODO: validate parameters", "\n", "try", ":", "\n", "            ", "f", "=", "HPOJobFactory", "(", "self", ".", "worker", ",", "len", "(", "self", ".", "jobs", ")", ")", "\n", "job", "=", "f", ".", "create", "(", "args", ")", "\n", "self", ".", "jobs", ".", "append", "(", "job", ")", "\n", "debug", "(", "\"Job {} added properly.\"", ".", "format", "(", "job", "[", "'job_id'", "]", ")", ")", "\n", "\n", "if", "self", ".", "worker", ".", "set_params", "(", "args", ")", ":", "\n", "                ", "args", "[", "'status'", "]", "=", "'assigned'", "\n", "self", ".", "to_dos", ".", "append", "(", "{", "\"worker\"", ":", "self", ".", "worker", ",", "\"job_id\"", ":", "job", "[", "'job_id'", "]", "}", ")", "\n", "debug", "(", "\"Job {} assigned properly.\"", ".", "format", "(", "job", "[", "'job_id'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"invalid hyperparam vector: {}\"", ".", "format", "(", "args", ")", ")", "\n", "raise", "ValueError", "(", "\"invalid hyperparameters\"", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Adding job failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n", "", "return", "job", "[", "'job_id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_active_job_id": [[70, 75], ["None"], "methods", ["None"], ["", "def", "get_active_job_id", "(", "self", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'status'", "]", "==", "'processing'", ":", "\n", "                ", "return", "j", "[", "'job_id'", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_job": [[76, 82], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_job", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "return", "j", "\n", "", "", "debug", "(", "\"no such {} job is existed\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_all_jobs": [[83, 89], ["job_ids.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_all_jobs", "(", "self", ")", ":", "\n", "        ", "job_ids", "=", "[", "]", "\n", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "job_ids", ".", "append", "(", "j", "[", "'job_id'", "]", ")", "\n", "\n", "", "return", "job_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_to_do": [[90, 96], ["None"], "methods", ["None"], ["", "def", "get_to_do", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "to_dos", ":", "\n", "            ", "if", "w", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "return", "w", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.sync_result": [[97, 112], ["s_mgr.HPOJobManager.get_job", "w[].get_cur_result", "w[].get_cur_status", "s_mgr.HPOJobManager.update", "s_mgr.HPOJobManager.update"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_cur_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_cur_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update"], ["", "def", "sync_result", "(", "self", ",", "job_id", "=", "'active'", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "to_dos", ":", "\n", "            ", "id", "=", "w", "[", "'job_id'", "]", "\n", "if", "job_id", "!=", "'active'", "and", "id", "!=", "job_id", ":", "\n", "                ", "id", "=", "job_id", "\n", "", "j", "=", "self", ".", "get_job", "(", "id", ")", "\n", "if", "j", "[", "'status'", "]", "==", "'processing'", "or", "j", "[", "'status'", "]", "==", "'terminated'", ":", "\n", "                ", "cur_result", "=", "w", "[", "'worker'", "]", ".", "get_cur_result", "(", ")", "\n", "if", "cur_result", "is", "not", "None", ":", "\n", "                    ", "self", ".", "update", "(", "id", ",", "**", "cur_result", ")", "\n", "", "cur_status", "=", "w", "[", "'worker'", "]", ".", "get_cur_status", "(", ")", "\n", "if", "cur_status", "==", "'idle'", ":", "\n", "                    ", "self", ".", "update", "(", "id", ",", "status", "=", "'done'", ")", "\n", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.control": [[113, 160], ["s_mgr.HPOJobManager.get_active_job_id", "s_mgr.HPOJobManager.get_to_do", "s_mgr.HPOJobManager.get_job", "debug", "debug", "s_mgr.HPOJobManager.update", "w[].start", "debug", "s_mgr.HPOJobManager.get_to_do", "w[].pause", "s_mgr.HPOJobManager.update", "debug", "s_mgr.HPOJobManager.get_to_do", "s_mgr.HPOJobManager.get_job", "debug", "time.sleep", "w[].resume", "s_mgr.HPOJobManager.update", "debug", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_to_do", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_to_do", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.pause", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_to_do", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.resume", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "", "def", "control", "(", "self", ",", "job_id", ",", "cmd", ")", ":", "\n", "        ", "aj", "=", "self", ".", "get_active_job_id", "(", ")", "\n", "if", "cmd", "==", "'start'", ":", "\n", "            ", "if", "aj", "is", "not", "None", ":", "\n", "                ", "debug", "(", "\"{} is processing now.\"", ".", "format", "(", "aj", ")", ")", "\n", "return", "False", "\n", "", "w", "=", "self", ".", "get_to_do", "(", "job_id", ")", "\n", "j", "=", "self", ".", "get_job", "(", "job_id", ")", "\n", "if", "w", "is", "not", "None", ":", "\n", "                ", "if", "w", "[", "'job_id'", "]", "==", "job_id", "and", "j", "[", "'status'", "]", "!=", "'processing'", ":", "\n", "                    ", "self", ".", "update", "(", "job_id", ",", "status", "=", "'processing'", ")", "\n", "return", "w", "[", "'worker'", "]", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"{} job is already {}.\"", ".", "format", "(", "job_id", ",", "j", "[", "'status'", "]", ")", ")", "\n", "return", "False", "\n", "", "", "debug", "(", "\"No {} job is assigned yet.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "\n", "", "elif", "cmd", "==", "'pause'", ":", "\n", "                ", "if", "aj", "==", "job_id", ":", "\n", "                    ", "w", "=", "self", ".", "get_to_do", "(", "job_id", ")", "\n", "w", "[", "'worker'", "]", ".", "pause", "(", ")", "\n", "# XXX:waiting required until being paused", "\n", "while", "w", "[", "'worker'", "]", ".", "paused", "==", "False", ":", "\n", "                        ", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "self", ".", "update", "(", "job_id", ",", "status", "=", "'pending'", ")", "\n", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"Unable to pause inactive job: {}\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "", "elif", "cmd", "==", "'resume'", ":", "\n", "            ", "w", "=", "self", ".", "get_to_do", "(", "job_id", ")", "\n", "j", "=", "self", ".", "get_job", "(", "job_id", ")", "\n", "if", "w", "is", "not", "None", "and", "j", "[", "'status'", "]", "==", "'pending'", ":", "\n", "                ", "w", "[", "'worker'", "]", ".", "resume", "(", ")", "\n", "while", "w", "[", "'worker'", "]", ".", "paused", "==", "True", ":", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "", "self", ".", "update", "(", "job_id", ",", "status", "=", "'processing'", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "debug", "(", "'Unable to resume inactive job: {}'", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "debug", "(", "\"Unsupported command: {}\"", ".", "format", "(", "cmd", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.update": [[161, 170], ["future.utils.iteritems", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "update", "(", "self", ",", "job_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "for", "(", "k", ",", "v", ")", "in", "iteritems", "(", "kwargs", ")", ":", "\n", "                    ", "if", "k", "in", "j", ":", "\n", "                        ", "j", "[", "k", "]", "=", "v", "\n", "#debug(\"{} of {} is updated: {}\".format(k, job_id, v))", "\n", "", "else", ":", "\n", "                        ", "debug", "(", "\"{} is invalid in {}\"", ".", "format", "(", "k", ",", "job_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.remove": [[171, 187], ["warn", "s_mgr.HPOJobManager.get_to_do", "debug", "w[].stop", "s_mgr.HPOJobManager.update", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.get_to_do", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "", "", "", "def", "remove", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", "and", "j", "[", "'status'", "]", "!=", "'terminated'", ":", "\n", "                ", "w", "=", "self", ".", "get_to_do", "(", "job_id", ")", "\n", "\n", "if", "w", "is", "not", "None", ":", "\n", "                    ", "debug", "(", "\"{} will be stopped\"", ".", "format", "(", "job_id", ")", ")", "\n", "w", "[", "'worker'", "]", ".", "stop", "(", ")", "\n", "\n", "self", ".", "update", "(", "job_id", ",", "status", "=", "'terminated'", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"No such {} in TO-DO list\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "", "", "warn", "(", "\"No jobs available.\"", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.s_mgr.HPOJobManager.stop_working_job": [[188, 194], ["w[].get_cur_status", "s_mgr.HPOJobManager.remove"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_cur_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "def", "stop_working_job", "(", "self", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "to_dos", ":", "\n", "            ", "if", "w", "[", "'worker'", "]", ".", "get_cur_status", "(", ")", "==", "'processing'", ":", "\n", "                ", "job_id", "=", "w", "[", "'job_id'", "]", "\n", "self", ".", "remove", "(", "job_id", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.__init__": [[18, 26], ["xoa.spaces.space_mgr.SearchSpaceManager", "xoa.managers.proto.ManagerPrototype.__init__", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp_config", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "hp_config", "=", "hp_config", "\n", "self", ".", "jobs", "=", "[", "]", "\n", "self", ".", "nodes", "=", "{", "}", "\n", "self", ".", "pairs", "=", "[", "]", "\n", "self", ".", "workers", "=", "[", "]", "\n", "self", ".", "space_mgr", "=", "SearchSpaceManager", "(", ")", "\n", "return", "super", "(", "ParallelHPOManager", ",", "self", ")", ".", "__init__", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.__del__": [[27, 29], ["p_mgr.ParallelHPOManager.stop_working_job"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.stop_working_job"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop_working_job", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_config": [[30, 36], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "{", "\n", "\"nodes\"", ":", "self", ".", "nodes", ",", "\n", "\"pairs\"", ":", "self", ".", "pairs", "\n", "}", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_spec": [[37, 42], ["None"], "methods", ["None"], ["", "def", "get_spec", "(", "self", ")", ":", "\n", "        ", "my_spec", "=", "{", "\n", "\"node_type\"", ":", "\"Master Node\"", ",", "\n", "\"type\"", ":", "self", ".", "type", "}", "\n", "return", "my_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_space_manager": [[43, 45], ["None"], "methods", ["None"], ["", "def", "get_space_manager", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "space_mgr", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_job": [[46, 52], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_job", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "return", "j", "\n", "", "", "debug", "(", "\"no such {} job is existed\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_active_job_id": [[53, 58], ["None"], "methods", ["None"], ["", "def", "get_active_job_id", "(", "self", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'status'", "]", "==", "'processing'", ":", "\n", "                ", "return", "j", "[", "'job_id'", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.register": [[59, 101], ["p_mgr.ParallelHPOManager.check_registered", "ValueError", "ValueError", "ValueError", "debug", "len", "p_mgr.ParallelHPOManager.nodes.keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.check_registered", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "register", "(", "self", ",", "node_spec", ")", ":", "\n", "        ", "ip", "=", "None", "\n", "port", "=", "None", "\n", "node_type", "=", "None", "\n", "\n", "if", "\"ip_address\"", "in", "node_spec", ":", "\n", "            ", "ip", "=", "node_spec", "[", "\"ip_address\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No IP address in specification\"", ")", "\n", "\n", "", "if", "\"port_num\"", "in", "node_spec", ":", "\n", "            ", "port", "=", "node_spec", "[", "\"port_num\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No port number in specification\"", ")", "\n", "\n", "", "if", "\"node_type\"", "in", "node_spec", ":", "\n", "            ", "node_type", "=", "node_spec", "[", "\"node_type\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No node type in specification\"", ")", "\n", "\n", "", "node_id", "=", "self", ".", "check_registered", "(", "ip", ",", "port", ")", "\n", "\n", "if", "node_id", "!=", "None", ":", "\n", "            ", "debug", "(", "\"Node already registered:{}\"", ".", "format", "(", "node_id", ")", ")", "\n", "return", "node_id", ",", "200", "\n", "\n", "# Try handshaking with registered node to check it is healthy.", "\n", "", "url", "=", "\"http://{}:{}\"", ".", "format", "(", "ip", ",", "port", ")", "\n", "# TODO:Check job type is compatible", "\n", "\n", "# Create node id and append to node repository", "\n", "node_id", "=", "\"{}-{:03d}\"", ".", "format", "(", "node_type", ",", "len", "(", "self", ".", "nodes", ".", "keys", "(", ")", ")", ")", "\n", "node_spec", "=", "{", "\n", "\"id\"", ":", "node_id", ",", "\n", "\"ip_address\"", ":", "ip", ",", "\n", "\"port_num\"", ":", "port", ",", "\n", "\"node_type\"", ":", "node_type", ",", "\n", "\"status\"", ":", "\"registered\"", "\n", "}", "\n", "\n", "self", ".", "nodes", "[", "node_id", "]", "=", "node_spec", "\n", "return", "node_id", ",", "201", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.check_registered": [[102, 108], ["p_mgr.ParallelHPOManager.nodes.keys"], "methods", ["None"], ["", "def", "check_registered", "(", "self", ",", "ip_addr", ",", "port", ")", ":", "\n", "        ", "for", "nk", "in", "self", ".", "nodes", ".", "keys", "(", ")", ":", "\n", "            ", "n", "=", "self", ".", "nodes", "[", "nk", "]", "\n", "if", "n", "[", "\"ip_address\"", "]", "==", "ip_addr", "and", "n", "[", "\"port_num\"", "]", "==", "port", ":", "\n", "                ", "return", "n", "[", "\"id\"", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_pairs": [[109, 111], ["None"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_node": [[112, 120], ["None"], "methods", ["None"], ["", "def", "get_node", "(", "self", ",", "node_id", ")", ":", "\n", "        ", "if", "node_id", "==", "\"all\"", ":", "\n", "            ", "nodes", "=", "[", "n", "for", "n", "in", "self", ".", "nodes", "]", "\n", "return", "nodes", "\n", "", "elif", "node_id", "in", "self", ".", "nodes", ":", "\n", "            ", "return", "self", ".", "nodes", "[", "node_id", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.match_nodes": [[121, 147], ["p_mgr.ParallelHPOManager.nodes.keys", "range", "len", "len", "p_mgr.ParallelHPOManager.pairs.append", "optimizers.append", "trainers.append", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "match_nodes", "(", "self", ")", ":", "\n", "        ", "optimizers", "=", "[", "]", "\n", "trainers", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "nodes", ".", "keys", "(", ")", ":", "\n", "            ", "n", "=", "self", ".", "nodes", "[", "k", "]", "\n", "if", "n", "[", "\"status\"", "]", "!=", "\"paired\"", ":", "\n", "                ", "if", "n", "[", "\"node_type\"", "]", "==", "\"BO Node\"", ":", "\n", "                    ", "optimizers", ".", "append", "(", "n", "[", "\"id\"", "]", ")", "\n", "", "elif", "n", "[", "\"node_type\"", "]", "==", "\"Training Node\"", ":", "\n", "                    ", "trainers", ".", "append", "(", "n", "[", "\"id\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "warn", "(", "\"Invalid type of node: {}\"", ".", "format", "(", "n", "[", "\"node_type\"", "]", ")", ")", "\n", "\n", "# pairing with optimizer and trainer one by one", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "optimizers", ")", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "trainers", ")", ":", "\n", "                ", "opt", "=", "self", ".", "nodes", "[", "optimizers", "[", "i", "]", "]", "\n", "train", "=", "self", ".", "nodes", "[", "trainers", "[", "i", "]", "]", "\n", "pair", "=", "{", "\"optimizer\"", ":", "opt", ",", "\n", "\"trainer\"", ":", "train", "\n", "}", "\n", "opt", "[", "\"status\"", "]", "=", "\"paired\"", "\n", "train", "[", "\"status\"", "]", "=", "\"paired\"", "\n", "self", ".", "pairs", ".", "append", "(", "pair", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.create_new_space": [[148, 158], ["p_mgr.ParallelHPOManager.space_mgr.create", "p_mgr.ParallelHPOManager.hp_config.get_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.create", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict"], ["", "", "", "def", "create_new_space", "(", "self", ",", "\n", "space_spec", "=", "{", "}", ",", "\n", "surrogate", "=", "None", ")", ":", "\n", "\n", "        ", "if", "surrogate", "!=", "None", ":", "\n", "            ", "space_spec", "=", "{", "\"surrogate\"", ":", "surrogate", "}", "\n", "\n", "", "space_id", "=", "self", ".", "space_mgr", ".", "create", "(", "self", ".", "hp_config", ".", "get_dict", "(", ")", ",", "space_spec", ")", "\n", "\n", "return", "space_id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.validate_space": [[159, 164], ["p_mgr.ParallelHPOManager.space_mgr.get_available_spaces"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_available_spaces"], ["", "def", "validate_space", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "if", "space_id", "in", "self", ".", "space_mgr", ".", "get_available_spaces", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.prepare": [[165, 205], ["p_mgr.ParallelHPOManager.validate_space", "p_mgr.ParallelHPOManager.create_new_space", "len", "p_mgr.ParallelHPOManager.match_nodes", "xoa.workers.p_opt.ParallelOptimizer", "xoa.workers.p_opt.ParallelOptimizer.create_job_request", "xoa.workers.p_opt.ParallelOptimizer.set_job_request", "p_mgr.ParallelHPOManager.workers.append", "len", "warn", "p_mgr.ParallelHPOManager.get_credential", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.validate_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.create_new_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.match_nodes", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.create_job_request", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.set_job_request", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_credential"], ["", "", "def", "prepare", "(", "self", ",", "args", ")", ":", "\n", "# Default settings to create new result history", "\n", "        ", "num_samples", "=", "20000", "\n", "grid_seed", "=", "1", "\n", "surrogate", "=", "None", "\n", "\n", "if", "\"num_samples\"", "in", "args", ":", "\n", "            ", "num_samples", "=", "args", "[", "'num_samples'", "]", "\n", "\n", "", "if", "'seed'", "in", "args", ":", "\n", "            ", "grid_seed", "=", "args", "[", "'seed'", "]", "\n", "if", "grid_seed", "==", "'random'", ":", "\n", "                ", "grid_seed", "=", "np", ".", "random", ".", "randint", "(", "num_samples", ")", "*", "grid_seed", "\n", "\n", "", "", "if", "'surrogate'", "in", "args", ":", "\n", "            ", "surrogate", "=", "args", "[", "'surrogate'", "]", "\n", "\n", "", "if", "'space_id'", "in", "args", "and", "self", ".", "validate_space", "(", "args", "[", "'space_id'", "]", ")", ":", "\n", "            ", "space_id", "=", "args", "[", "'space_id'", "]", "\n", "", "else", ":", "\n", "            ", "space_id", "=", "self", ".", "create_new_space", "(", "num_samples", ",", "grid_seed", ",", "surrogate", ")", "\n", "", "args", "[", "'space_id'", "]", "=", "space_id", "\n", "\n", "self", ".", "workers", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "pairs", ")", "==", "0", ":", "\n", "            ", "self", ".", "match_nodes", "(", ")", "\n", "\n", "", "for", "p", "in", "self", ".", "pairs", ":", "\n", "            ", "hpo", "=", "p", "[", "\"optimizer\"", "]", "\n", "train", "=", "p", "[", "\"trainer\"", "]", "\n", "w", "=", "ParallelOptimizer", "(", "hpo", ",", "train", ",", "self", ".", "hp_config", ",", "self", ".", "get_credential", "(", ")", ")", "\n", "jr", "=", "w", ".", "create_job_request", "(", "**", "args", ")", "\n", "#debug(\"worker job description: {}\".format(jr))", "\n", "w", ".", "set_job_request", "(", "jr", ")", "\n", "self", ".", "workers", ".", "append", "(", "w", ")", "\n", "", "if", "len", "(", "self", ".", "workers", ")", "<", "1", ":", "\n", "            ", "warn", "(", "\"Workers are not prepared\"", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.add": [[206, 221], ["xoa.managers.j_mgr.HPOJobFactory", "xoa.managers.j_mgr.HPOJobFactory.create", "p_mgr.ParallelHPOManager.jobs.append", "debug", "p_mgr.ParallelHPOManager.prepare", "ValueError", "len", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.create", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.prepare", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "add", "(", "self", ",", "args", ")", ":", "\n", "# TODO: validate parameters", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "self", ".", "prepare", "(", "args", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Preparation failed: {}\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "", "f", "=", "HPOJobFactory", "(", "self", ".", "workers", ",", "len", "(", "self", ".", "jobs", ")", ")", "\n", "job", "=", "f", ".", "create", "(", "args", ")", "\n", "self", ".", "jobs", ".", "append", "(", "job", ")", "\n", "debug", "(", "\"Job added properly: {}\"", ".", "format", "(", "job", ")", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Job add failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "job", "[", "'job_id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.remove": [[222, 224], ["p_mgr.ParallelHPOManager.control"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.control"], ["", "def", "remove", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "self", ".", "control", "(", "job_id", ",", "\"stop\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.control": [[225, 266], ["p_mgr.ParallelHPOManager.get_job", "p_mgr.ParallelHPOManager.update", "p_mgr.ParallelHPOManager.space_mgr.set_space_status", "p_mgr.ParallelHPOManager.get_active_job_id", "debug", "len", "debug", "debug", "w.start", "p_mgr.ParallelHPOManager.space_mgr.set_space_status", "p_mgr.ParallelHPOManager.stop_working_job", "debug", "p_mgr.ParallelHPOManager.get_active_job_id", "debug", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.stop_working_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "control", "(", "self", ",", "job_id", ",", "cmd", ")", ":", "\n", "\n", "        ", "j", "=", "self", ".", "get_job", "(", "job_id", ")", "\n", "\n", "if", "not", "'space_id'", "in", "j", ":", "\n", "            ", "return", "False", "\n", "\n", "", "space_id", "=", "j", "[", "'space_id'", "]", "\n", "if", "cmd", "==", "'start'", ":", "\n", "            ", "if", "job_id", "==", "self", ".", "get_active_job_id", "(", ")", ":", "\n", "                ", "debug", "(", "\"{} is processing now.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "\n", "", "if", "len", "(", "self", ".", "workers", ")", "==", "0", ":", "\n", "                ", "debug", "(", "\"No worker is prepared.\"", ")", "\n", "return", "False", "\n", "\n", "", "if", "j", "[", "'status'", "]", "==", "'processing'", ":", "\n", "                ", "debug", "(", "\"{} job is already {}.\"", ".", "format", "(", "job_id", ",", "j", "[", "'status'", "]", ")", ")", "\n", "return", "False", "\n", "", "self", ".", "update", "(", "job_id", ",", "status", "=", "'processing'", ")", "\n", "self", ".", "space_mgr", ".", "set_space_status", "(", "space_id", ",", "\"active\"", ")", "\n", "for", "w", "in", "self", ".", "workers", ":", "\n", "                ", "w", ".", "start", "(", ")", "\n", "", "return", "True", "\n", "\n", "", "elif", "cmd", "==", "'stop'", ":", "\n", "            ", "if", "job_id", "!=", "self", ".", "get_active_job_id", "(", ")", ":", "\n", "                ", "debug", "(", "\"{} is not processing now.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "\n", "", "if", "j", "[", "'status'", "]", "!=", "'processing'", ":", "\n", "                ", "debug", "(", "\"{} job is not working.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "self", ".", "space_mgr", ".", "set_space_status", "(", "space_id", ",", "\"inactive\"", ")", "\n", "self", ".", "stop_working_job", "(", ")", "\n", "return", "True", "\n", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"Unsupported command: {}\"", ".", "format", "(", "cmd", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.update": [[267, 276], ["future.utils.iteritems", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "update", "(", "self", ",", "job_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "for", "(", "k", ",", "v", ")", "in", "iteritems", "(", "kwargs", ")", ":", "\n", "                    ", "if", "k", "in", "j", ":", "\n", "                        ", "j", "[", "k", "]", "=", "v", "\n", "#debug(\"{} of {} is updated: {}\".format(k, job_id, v))", "\n", "", "else", ":", "\n", "                        ", "debug", "(", "\"{} is invalid in {}\"", ".", "format", "(", "k", ",", "job_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.stop_working_job": [[277, 280], ["w.stop"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop"], ["", "", "", "", "", "def", "stop_working_job", "(", "self", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "workers", ":", "\n", "            ", "w", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.sync_result": [[281, 324], ["p_mgr.ParallelHPOManager.get_job", "p_mgr.ParallelHPOManager.space_mgr.get_active_space_id", "p_mgr.ParallelHPOManager.space_mgr.get_space", "numpy.array", "p_mgr.ParallelHPOManager.update", "p_mgr.ParallelHPOManager.get_active_job_id", "debug", "p_mgr.ParallelHPOManager.get_errors", "p_mgr.ParallelHPOManager.get_completions", "p_mgr.ParallelHPOManager.get_hpv_dict", "p_mgr.ParallelHPOManager.update", "p_mgr.ParallelHPOManager.space_mgr.set_space_status", "w.check_active", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_active_space_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.p_opt.ParallelOptimizer.check_active"], ["", "", "def", "sync_result", "(", "self", ",", "job_id", "=", "'active'", ")", ":", "\n", "        ", "if", "job_id", "==", "'active'", ":", "\n", "            ", "id", "=", "self", ".", "get_active_job_id", "(", ")", "\n", "", "else", ":", "\n", "            ", "id", "=", "job_id", "\n", "", "j", "=", "self", ".", "get_job", "(", "id", ")", "\n", "space_id", "=", "self", ".", "space_mgr", ".", "get_active_space_id", "(", ")", "\n", "space", "=", "self", ".", "space_mgr", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "debug", "(", "\"No parameter space initialized\"", ")", "\n", "return", "\n", "", "cur_errs", "=", "np", ".", "array", "(", "space", ".", "get_errors", "(", "\"completions\"", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "# find index of current min error", "\n", "min_err_i", "=", "None", "\n", "cur_best_err", "=", "None", "\n", "cur_best_hpv", "=", "None", "\n", "i", "=", "0", "\n", "for", "c", "in", "cur_errs", ":", "\n", "            ", "if", "cur_best_err", "==", "None", "or", "c", "<", "cur_best_err", ":", "\n", "                ", "if", "not", "np", ".", "isnan", "(", "c", ")", ":", "\n", "                    ", "cur_best_err", "=", "c", "\n", "min_err_i", "=", "i", "\n", "", "", "i", "+=", "1", "\n", "", "min_err_id", "=", "space", ".", "get_completions", "(", ")", "[", "min_err_i", "]", "\n", "if", "min_err_id", "!=", "None", ":", "\n", "            ", "cur_best_hpv", "=", "space", ".", "get_hpv_dict", "(", "min_err_id", ")", "\n", "\n", "", "summary", "=", "{", "\n", "\"best_err\"", ":", "cur_best_err", ",", "\n", "\"best_hpv\"", ":", "cur_best_hpv", "\n", "}", "\n", "cur_result", "=", "{", "\"result\"", ":", "summary", "}", "\n", "self", ".", "update", "(", "id", ",", "**", "cur_result", ")", "\n", "\n", "# check whether all HPO nodes terminated and update status", "\n", "all_terminated", "=", "True", "\n", "for", "w", "in", "self", ".", "workers", ":", "\n", "            ", "if", "w", ".", "check_active", "(", ")", "==", "True", ":", "\n", "                ", "all_terminated", "=", "False", "\n", "break", "\n", "", "", "if", "all_terminated", ":", "\n", "            ", "self", ".", "update", "(", "id", ",", "status", "=", "\"done\"", ")", "\n", "self", ".", "space_mgr", ".", "set_space_status", "(", "space_id", ",", "\"inactive\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_all_jobs": [[325, 331], ["job_ids.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_all_jobs", "(", "self", ")", ":", "\n", "        ", "job_ids", "=", "[", "]", "\n", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "job_ids", ".", "append", "(", "j", "[", "'job_id'", "]", ")", "\n", "\n", "", "return", "job_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobFactory.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "worker", ",", "jobs", ")", ":", "\n", "        ", "self", ".", "jobs", "=", "jobs", "\n", "self", ".", "worker", "=", "worker", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobFactory.create": [[18, 45], ["t_mgr.TrainingJobFactory.worker.get_id", "t_mgr.TrainingJobFactory.worker.get_device_id", "time.strftime", "time.strftime", "time.time", "time.localtime", "time.localtime"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.get_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "create", "(", "self", ",", "dataset", ",", "model", ",", "hpv", ",", "cfg", ")", ":", "\n", "        ", "job_id", "=", "\"{}-{}-{}-{}\"", ".", "format", "(", "self", ".", "worker", ".", "get_id", "(", ")", ",", "\n", "self", ".", "worker", ".", "get_device_id", "(", ")", ",", "\n", "time", ".", "strftime", "(", "'%Y%m%d'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "time", ".", "strftime", "(", "'%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "\n", "job", "=", "{", "\n", "\"job_id\"", ":", "job_id", ",", "\n", "\"created\"", ":", "time", ".", "time", "(", ")", ",", "\n", "\"status\"", ":", "\"created\"", ",", "\n", "\"test_loss\"", ":", "None", ",", "\n", "\"test_acc\"", ":", "None", ",", "\n", "\"val_loss\"", ":", "None", ",", "\n", "\"val_acc\"", ":", "None", ",", "\n", "\"val_loss_curve\"", ":", "[", "]", ",", "\n", "\"test_loss_curve\"", ":", "[", "]", ",", "\n", "\"run_time\"", ":", "None", ",", "\n", "\"times\"", ":", "[", "]", ",", "\n", "\"cur_iter\"", ":", "0", ",", "\n", "\"iter_unit\"", ":", "\"epoch\"", ",", "\n", "\"loss_type\"", ":", "None", ",", "\n", "\"dataset\"", ":", "dataset", ",", "\n", "\"model\"", ":", "model", ",", "\n", "\"config\"", ":", "cfg", ",", "\n", "\"hyperparams\"", ":", "hpv", "\n", "}", "\n", "return", "job", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.__init__": [[48, 60], ["xoa.managers.proto.ManagerPrototype.__init__", "t_mgr.TrainingJobManager.get_train_jobs", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_train_jobs"], ["    ", "def", "__init__", "(", "self", ",", "worker", ",", "use_surrogate", "=", "False", ",", "retrieve_func", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "TrainingJobManager", ",", "self", ")", ".", "__init__", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "self", ".", "jobs", "=", "self", ".", "get_train_jobs", "(", ")", "\n", "\n", "self", ".", "worker", "=", "worker", "\n", "self", ".", "use_surrogate", "=", "use_surrogate", "\n", "self", ".", "retrieve_func", "=", "retrieve_func", "\n", "\n", "self", ".", "work_item", "=", "None", "\n", "self", ".", "timeout_count", "=", "0", "\n", "self", ".", "max_timeout", "=", "100000", "# XXX: For avoiding the result file not found error", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.__del__": [[61, 66], ["None"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "#debug(\"All of jobs will be terminated\")", "\n", "# force to terminate all jobs", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "j", "[", "\"status\"", "]", "=", "'terminated'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_config": [[69, 73], ["t_mgr.TrainingJobManager.worker.get_config"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_surrogate", ":", "\n", "            ", "return", "{", "\"target_func\"", ":", "\"surrogate\"", ",", "\"param_order\"", ":", "[", "]", "}", "\n", "", "return", "self", ".", "worker", ".", "get_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_spec": [[74, 80], ["t_mgr.TrainingJobManager.worker.get_id", "t_mgr.TrainingJobManager.worker.get_device_id"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.__init__.WorkerResource.get_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id"], ["", "def", "get_spec", "(", "self", ")", ":", "\n", "        ", "id", "=", "{", "\n", "\"node_type\"", ":", "\"Training Node\"", ",", "\n", "\"id\"", ":", "self", ".", "worker", ".", "get_id", "(", ")", ",", "\n", "\"device_id\"", ":", "self", ".", "worker", ".", "get_device_id", "(", ")", "}", "\n", "return", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add": [[81, 131], ["t_mgr.TrainingJobFactory", "t_mgr.TrainingJobFactory.create", "t_mgr.TrainingJobManager.jobs.append", "debug", "worker.set_job_description", "worker.set_max_iters", "debug", "debug", "ValueError", "warn", "ValueError", "worker.set_max_iters"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.create", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_job_description", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.set_max_iters", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.set_max_iters"], ["", "def", "add", "(", "self", ",", "args", ")", ":", "\n", "        ", "job_id", "=", "None", "\n", "# TODO: validate parameters", "\n", "try", ":", "\n", "            ", "dataset", "=", "args", "[", "'dataset'", "]", "# e.g. MNIST, CIFAR-10, ", "\n", "model", "=", "args", "[", "'model'", "]", "# LeNet, VGG, LSTM, ... ", "\n", "hpv", "=", "args", "[", "'hyperparams'", "]", "# refer to data*.json for keys", "\n", "cfg", "=", "args", "[", "'config'", "]", "# max_iter, ...            ", "\n", "f", "=", "TrainingJobFactory", "(", "self", ".", "worker", ",", "self", ".", "jobs", ")", "\n", "job", "=", "f", ".", "create", "(", "dataset", ",", "model", ",", "hpv", ",", "cfg", ")", "\n", "job_id", "=", "job", "[", "'job_id'", "]", "\n", "\n", "self", ".", "jobs", ".", "append", "(", "job", ")", "\n", "debug", "(", "\"Job appended properly.\"", ")", "\n", "\n", "worker", "=", "self", ".", "worker", "\n", "max_epoch", "=", "None", "\n", "if", "\"max_epoch\"", "in", "cfg", ":", "\n", "                ", "max_epoch", "=", "cfg", "[", "'max_epoch'", "]", "\n", "worker", ".", "set_max_iters", "(", "max_epoch", ",", "\"epoch\"", ")", "\n", "", "elif", "\"max_iter\"", "in", "cfg", ":", "\n", "                ", "max_iter", "=", "cfg", "[", "'max_iter'", "]", "\n", "iter_unit", "=", "\"epoch\"", "\n", "if", "\"iter_unit\"", "in", "cfg", ":", "\n", "                    ", "iter_unit", "=", "cfg", "[", "'iter_unit'", "]", "\n", "", "worker", ".", "set_max_iters", "(", "max_iter", ",", "iter_unit", ")", "\n", "\n", "", "cand_index", "=", "None", "\n", "if", "'cand_index'", "in", "cfg", ":", "\n", "                ", "cand_index", "=", "cfg", "[", "'cand_index'", "]", "\n", "\n", "", "if", "worker", ".", "set_job_description", "(", "hpv", ",", "cand_index", ",", "job_id", ")", ":", "\n", "                ", "job", "[", "'status'", "]", "=", "'assigned'", "\n", "self", ".", "work_item", "=", "{", "\n", "\"worker\"", ":", "worker", ",", "\n", "\"job_id\"", ":", "job_id", ",", "\n", "\"cand_index\"", ":", "cand_index", ",", "\n", "\"hyperparams\"", ":", "hpv", "\n", "}", "\n", "debug", "(", "\"{} created properly.\"", ".", "format", "(", "job_id", ")", ")", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"Invalid hyperparam vector: {}\"", ".", "format", "(", "hpv", ")", ")", "\n", "raise", "ValueError", "(", "\"Invalid hyperparameters\"", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "#debug(\"invalid arguments: {}, {}, {}, {}\".format(dataset, model, hpv, cfg))", "\n", "            ", "warn", "(", "\"Adding job {} failed: {}\"", ".", "format", "(", "job", ",", "ex", ")", ")", "\n", "raise", "ValueError", "(", "\"Invalid job description\"", ")", "\n", "", "finally", ":", "\n", "            ", "return", "job_id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id": [[132, 137], ["None"], "methods", ["None"], ["", "", "def", "get_active_job_id", "(", "self", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'status'", "]", "==", "'processing'", ":", "\n", "                ", "return", "j", "[", "'job_id'", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job": [[138, 144], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_job", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "return", "j", "\n", "", "", "debug", "(", "\"no such {} job is existed\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_all_jobs": [[145, 152], ["job_ids.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_all_jobs", "(", "self", ")", ":", "\n", "\n", "        ", "job_ids", "=", "[", "]", "\n", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "job_ids", ".", "append", "(", "j", "[", "'job_id'", "]", ")", "\n", "\n", "", "return", "job_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.sync_result": [[153, 193], ["t_mgr.TrainingJobManager.get_job", "w[].get_cur_status", "warn", "w[].get_cur_result", "w[].sync_result", "w[].get_device_id", "time.time", "t_mgr.TrainingJobManager.update", "w[].set_sync_time", "t_mgr.TrainingJobManager.update", "t_mgr.TrainingJobManager.remove", "w[].is_working", "warn", "t_mgr.TrainingJobManager.remove", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_cur_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_cur_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.sync_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.get_device_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_sync_time", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.is_working", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "sync_result", "(", "self", ",", "job_id", "=", "'active'", ")", ":", "\n", "\n", "        ", "if", "self", ".", "work_item", "==", "None", ":", "\n", "            ", "return", "\n", "", "w", "=", "self", ".", "work_item", "\n", "if", "job_id", "==", "'active'", ":", "\n", "            ", "job_id", "=", "w", "[", "'job_id'", "]", "\n", "\n", "", "if", "job_id", "!=", "w", "[", "'job_id'", "]", ":", "\n", "            ", "warn", "(", "\"Something wrong happens in result sync.- {}:{}\"", ".", "format", "(", "job_id", ",", "w", "[", "'job_id'", "]", ")", ")", "\n", "\n", "#debug(\"Work item: {}\".format(t['job_id']))", "\n", "", "j", "=", "self", ".", "get_job", "(", "job_id", ")", "\n", "cur_status", "=", "w", "[", "'worker'", "]", ".", "get_cur_status", "(", ")", "\n", "if", "cur_status", "==", "'processing'", ":", "\n", "            ", "if", "self", ".", "retrieve_func", "!=", "None", ":", "\n", "                ", "w", "[", "'worker'", "]", ".", "sync_result", "(", "self", ".", "retrieve_func", ")", "\n", "\n", "", "cur_result", "=", "w", "[", "'worker'", "]", ".", "get_cur_result", "(", "w", "[", "'worker'", "]", ".", "get_device_id", "(", ")", ")", "\n", "if", "cur_result", "!=", "None", ":", "\n", "                ", "sync_time", "=", "time", ".", "time", "(", ")", "\n", "#debug(\"The result of {} updated at {}.\".format(job_id, ", "\n", "#                                          time.asctime(time.localtime(sync_time))))", "\n", "self", ".", "timeout_count", "=", "0", "# reset timeout count               ", "\n", "self", ".", "update", "(", "w", "[", "'job_id'", "]", ",", "**", "cur_result", ")", "\n", "w", "[", "'worker'", "]", ".", "set_sync_time", "(", "sync_time", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "timeout_count", "+=", "1", "\n", "if", "self", ".", "timeout_count", ">", "self", ".", "max_timeout", ":", "\n", "                    ", "self", ".", "remove", "(", "w", "[", "'job_id'", "]", ")", "\n", "", "elif", "w", "[", "'worker'", "]", ".", "is_working", "(", ")", "==", "False", ":", "\n", "# when a process could not be launched properly, ", "\n", "# it should be removed gracefully.", "\n", "                    ", "warn", "(", "\"Job {} finished with no result\"", ".", "format", "(", "w", "[", "'job_id'", "]", ")", ")", "\n", "self", ".", "remove", "(", "w", "[", "'job_id'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"An interim result is not updated yet. Timeout: {}/{}\"", ".", "format", "(", "self", ".", "timeout_count", ",", "self", ".", "max_timeout", ")", ")", "\n", "\n", "", "", "", "elif", "cur_status", "==", "'idle'", ":", "\n", "            ", "self", ".", "update", "(", "w", "[", "'job_id'", "]", ",", "status", "=", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.update_result": [[194, 205], ["t[].get_cur_status", "t[].add_result", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_cur_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.add_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "update_result", "(", "self", ",", "cur_iter", ",", "cur_loss", ",", "run_time", ",", "\n", "iter_unit", "=", "'epoch'", ",", "\n", "loss_type", "=", "'test_error_rate'", ")", ":", "\n", "        ", "t", "=", "self", ".", "work_item", "\n", "if", "t", "[", "'worker'", "]", ".", "get_cur_status", "(", ")", "==", "'processing'", ":", "\n", "            ", "job_id", "=", "t", "[", "'job_id'", "]", "\n", "t", "[", "'worker'", "]", ".", "add_result", "(", "cur_iter", ",", "cur_loss", ",", "run_time", ",", "\n", "iter_unit", "=", "iter_unit", ",", "loss_type", "=", "loss_type", ")", "\n", "#debug(\"The result is updated at {} {} \".format(cur_iter, iter_unit))", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"Invalid state - update request for inactive task.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.control": [[206, 254], ["t_mgr.TrainingJobManager.get_active_job_id", "t_mgr.TrainingJobManager.get_job", "debug", "debug", "t_mgr.TrainingJobManager.update", "debug", "w[].pause", "t_mgr.TrainingJobManager.update", "debug", "debug", "w[].start", "warn", "w[].stop", "time.sleep", "w[].set_job_description", "w[].resume", "t_mgr.TrainingJobManager.update", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_active_job_id", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.get_job", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.pause", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.trainer.Trainer.set_job_description", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.resume", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "control", "(", "self", ",", "job_id", ",", "cmd", ")", ":", "\n", "        ", "aj", "=", "self", ".", "get_active_job_id", "(", ")", "\n", "if", "cmd", "==", "'start'", ":", "\n", "            ", "if", "aj", "is", "not", "None", ":", "\n", "                ", "debug", "(", "\"{} is processing now.\"", ".", "format", "(", "aj", ")", ")", "\n", "return", "False", "\n", "", "w", "=", "self", ".", "work_item", "\n", "j", "=", "self", ".", "get_job", "(", "w", "[", "'job_id'", "]", ")", "\n", "if", "job_id", "==", "w", "[", "'job_id'", "]", "and", "j", "!=", "None", ":", "\n", "                ", "if", "j", "[", "'status'", "]", "!=", "'processing'", ":", "\n", "                    ", "while", "w", "[", "'worker'", "]", ".", "start", "(", ")", "==", "False", ":", "\n", "                        ", "warn", "(", "\"Killing the zombie process...\"", ")", "\n", "w", "[", "'worker'", "]", ".", "stop", "(", ")", "\n", "time", ".", "sleep", "(", "3", ")", "# Waiting until the worker being stopped", "\n", "w", "[", "'worker'", "]", ".", "set_job_description", "(", "w", "[", "'hyperparams'", "]", ",", "\n", "w", "[", "'cand_index'", "]", ",", "\n", "job_id", ")", "\n", "\n", "", "self", ".", "update", "(", "job_id", ",", "status", "=", "'processing'", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"{} job is already {}.\"", ".", "format", "(", "job_id", ",", "w", "[", "'status'", "]", ")", ")", "\n", "return", "False", "\n", "", "", "else", ":", "\n", "                ", "debug", "(", "\"No {} job is assigned yet.\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "", "elif", "cmd", "==", "'pause'", ":", "\n", "                ", "if", "aj", "==", "job_id", ":", "\n", "                    ", "w", "=", "self", ".", "work_item", "\n", "w", "[", "'worker'", "]", ".", "pause", "(", ")", "\n", "self", ".", "update", "(", "job_id", ",", "status", "=", "'pending'", ")", "\n", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"Unable to pause inactive job: {}\"", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "", "elif", "cmd", "==", "'resume'", ":", "\n", "            ", "w", "=", "self", ".", "work_item", "\n", "if", "w", "!=", "None", "and", "w", "[", "'status'", "]", "==", "'pending'", ":", "\n", "                ", "w", "[", "'worker'", "]", ".", "resume", "(", ")", "\n", "self", ".", "update", "(", "job_id", ",", "status", "=", "'processing'", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "debug", "(", "'Unable to resume inactive job: {}'", ".", "format", "(", "job_id", ")", ")", "\n", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "debug", "(", "\"Unsupported command: {}\"", ".", "format", "(", "cmd", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.update": [[255, 264], ["future.utils.iteritems", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "update", "(", "self", ",", "job_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "jobs", ":", "\n", "            ", "if", "j", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "                ", "for", "(", "k", ",", "v", ")", "in", "iteritems", "(", "kwargs", ")", ":", "\n", "                    ", "if", "k", "in", "j", ":", "\n", "                        ", "j", "[", "k", "]", "=", "v", "\n", "#debug(\"{} of {} is updated: {}\".format(k, job_id, v))", "\n", "", "else", ":", "\n", "                        ", "debug", "(", "\"{} is invalid in {}\"", ".", "format", "(", "k", ",", "job_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.remove": [[265, 276], ["debug", "debug", "w[].stop", "t_mgr.TrainingJobManager.update", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "", "", "", "def", "remove", "(", "self", ",", "job_id", ")", ":", "\n", "        ", "debug", "(", "\"Job termination request accepted: {}\"", ".", "format", "(", "job_id", ")", ")", "\n", "w", "=", "self", ".", "work_item", "\n", "if", "w", "[", "'job_id'", "]", "==", "job_id", ":", "\n", "            ", "debug", "(", "\"{} will be stopped\"", ".", "format", "(", "w", "[", "'job_id'", "]", ")", ")", "\n", "w", "[", "'worker'", "]", ".", "stop", "(", ")", "\n", "self", ".", "update", "(", "w", "[", "'job_id'", "]", ",", "status", "=", "'terminated'", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"{} is not working! Current job is {}.\"", ".", "format", "(", "job_id", ",", "w", "[", "'job_id'", "]", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.stop_working_job": [[277, 282], ["t[].get_cur_status", "t_mgr.TrainingJobManager.remove"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.worker.Worker.get_cur_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "", "def", "stop_working_job", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "work_item", "\n", "if", "t", "[", "'worker'", "]", ".", "get_cur_status", "(", ")", "==", "'processing'", ":", "\n", "            ", "job_id", "=", "t", "[", "'job_id'", "]", "\n", "self", ".", "remove", "(", "job_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_name", "=", "JSON_DB_FILE", ")", ":", "\n", "        ", "self", ".", "file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.update": [[19, 22], ["db_mgr.JsonFileDBManager.load"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "def", "update", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "database", "=", "self", ".", "load", "(", "self", ".", "file_name", ")", "\n", "database", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.load": [[23, 35], ["open", "json.load", "info", "db_mgr.JsonFileDBManager.save"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save"], ["", "def", "load", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "json_obj", "=", "{", "}", "\n", "\n", "try", ":", "\n", "            ", "with", "open", "(", "self", ".", "file_name", ",", "'r'", ")", "as", "json_db", ":", "\n", "                ", "json_obj", "=", "json", ".", "load", "(", "json_db", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "info", "(", "\"Database access is failed. Create new DB as {}\"", ".", "format", "(", "file_name", ")", ")", "\n", "self", ".", "save", "(", "json_obj", ")", "\n", "", "finally", ":", "\n", "            ", "return", "json_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.save": [[36, 40], ["open", "json.dump"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "database", ")", ":", "\n", "        ", "if", "self", ".", "file_name", "!=", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "file_name", ",", "'w'", ")", "as", "json_db", ":", "\n", "                ", "json", ".", "dump", "(", "database", ",", "json_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.get_db": [[41, 44], ["db_mgr.JsonFileDBManager.load"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "", "", "def", "get_db", "(", "self", ")", ":", "\n", "        ", "database", "=", "self", ".", "load", "(", "self", ".", "file_name", ")", "\n", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.get_database_manager": [[7, 12], ["db_mgr.JsonFileDBManager", "NotImplementedError"], "function", ["None"], ["def", "get_database_manager", "(", "db_type", "=", "\"JSON\"", ")", ":", "\n", "    ", "if", "db_type", "==", "\"JSON\"", ":", "\n", "        ", "return", "JsonFileDBManager", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No such DB type implemented: {}\"", ".", "format", "(", "db_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.__init__": [[22, 35], ["xoa.managers.proto.ManagerPrototype.__init__", "flask.Flask", "flask_restful.Api", "ws_mgr.WebServiceManager.initialize", "ws_mgr.WebServiceManager.save_db", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.save_db"], ["    ", "def", "__init__", "(", "self", ",", "job_mgr", ",", "hp_cfg", ",", "\n", "credential", "=", "None", ")", ":", "\n", "        ", "super", "(", "WebServiceManager", ",", "self", ")", ".", "__init__", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "self", ".", "app", "=", "Flask", "(", "self", ".", "type", ")", "\n", "self", ".", "api", "=", "Api", "(", "self", ".", "app", ")", "\n", "self", ".", "job_mgr", "=", "job_mgr", "\n", "\n", "if", "credential", "!=", "None", ":", "\n", "            ", "self", ".", "save_db", "(", "'credential'", ",", "credential", ")", "\n", "", "self", ".", "hp_cfg", "=", "hp_cfg", "\n", "self", ".", "my_process", "=", "None", "\n", "\n", "self", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.initialize": [[36, 85], ["ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.job_mgr.get_space_manager", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource", "ws_mgr.WebServiceManager.api.add_resource"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.p_mgr.ParallelHPOManager.get_space_manager"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# For profile", "\n", "        ", "self", ".", "api", ".", "add_resource", "(", "Billboard", ",", "\"/\"", ",", "# for profile and ", "\n", "resource_class_kwargs", "=", "{", "'resource_manager'", ":", "self", "}", ")", "\n", "\n", "self", ".", "api", ".", "add_resource", "(", "Config", ",", "\"/config/\"", ",", "# for run spec", "\n", "resource_class_kwargs", "=", "{", "'job_manager'", ":", "self", ".", "job_mgr", ",", "\"hp_config\"", ":", "self", ".", "hp_cfg", "}", ")", "\n", "\n", "# For job handling", "\n", "self", ".", "api", ".", "add_resource", "(", "Jobs", ",", "\"/jobs/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'job_manager'", ":", "self", ".", "job_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "Job", ",", "\"/jobs/<string:job_id>/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'job_manager'", ":", "self", ".", "job_mgr", "}", ")", "\n", "\n", "if", "self", ".", "job_mgr", ".", "type", "==", "\"ParallelHPOManager\"", ":", "\n", "            ", "from", "xoa", ".", "resources", ".", "candidates", "import", "Candidates", "\n", "from", "xoa", ".", "resources", ".", "completions", "import", "Completions", "\n", "from", "xoa", ".", "resources", ".", "grid", "import", "Grid", "\n", "from", "xoa", ".", "resources", ".", "hparams", "import", "HyperparamVector", "\n", "from", "xoa", ".", "resources", ".", "errors", "import", "ObservedErrors", "\n", "from", "xoa", ".", "resources", ".", "error", "import", "ObservedError", "\n", "from", "xoa", ".", "resources", ".", "spaces", "import", "Spaces", "\n", "from", "xoa", ".", "resources", ".", "space", "import", "Space", "\n", "from", "xoa", ".", "resources", ".", "nodes", "import", "Nodes", "\n", "from", "xoa", ".", "resources", ".", "node", "import", "Node", "\n", "# For managing HPO nodes", "\n", "self", ".", "api", ".", "add_resource", "(", "Nodes", ",", "\"/nodes/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'node_manager'", ":", "self", ".", "job_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "Node", ",", "\"/nodes/<string:node_id>/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'node_manager'", ":", "self", ".", "job_mgr", "}", ")", "\n", "\n", "space_mgr", "=", "self", ".", "job_mgr", ".", "get_space_manager", "(", ")", "\n", "# For managing sampling space and history sharing", "\n", "self", ".", "api", ".", "add_resource", "(", "Spaces", ",", "\"/spaces/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "Space", ",", "\"/spaces/<string:space_id>/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "Grid", ",", "\"/spaces/<string:space_id>/grid/<string:sample_id>/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "HyperparamVector", ",", "\"/spaces/<string:space_id>/vectors/<string:sample_id>/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "Completions", ",", "\"/spaces/<string:space_id>/completions/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "Candidates", ",", "\"/spaces/<string:space_id>/candidates/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "ObservedErrors", ",", "\"/spaces/<string:space_id>/errors/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "self", ".", "api", ".", "add_resource", "(", "ObservedError", ",", "\"/spaces/<string:space_id>/errors/<string:sample_id>/\"", ",", "\n", "resource_class_kwargs", "=", "{", "'space_manager'", ":", "space_mgr", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.get_spec": [[86, 88], ["ws_mgr.WebServiceManager.job_mgr.get_spec"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.get_spec"], ["", "", "def", "get_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "job_mgr", ".", "get_spec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.get_urls": [[89, 121], ["ValueError"], "methods", ["None"], ["", "def", "get_urls", "(", "self", ")", ":", "\n", "        ", "urls", "=", "[", "\n", "{", "\"/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/config/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", "\n", "]", "\n", "\n", "job_urls", "=", "[", "\n", "{", "\"/jobs/\"", ":", "{", "\"method\"", ":", "[", "'GET'", ",", "'POST'", "]", "}", "}", ",", "\n", "{", "\"/jobs/active/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/jobs/[job_id]/\"", ":", "{", "\"method\"", ":", "[", "'GET'", ",", "'PUT'", ",", "'DELETE'", "]", "}", "}", "\n", "]", "\n", "\n", "space_urls", "=", "[", "\n", "{", "\"/spaces/[space_id]/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/spaces/[space_id]/completions/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/spaces/[space_id]/candidates/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/spaces/[space_id]/grid/[id]/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/spaces/[space_id]/vectors/[id]/\"", ":", "{", "\"method\"", ":", "[", "'GET'", "]", "}", "}", ",", "\n", "{", "\"/spaces/[space_id]/errors/[id]/\"", ":", "{", "\"method\"", ":", "[", "'GET'", ",", "'PUT'", "]", "}", "}", "\n", "]", "\n", "\n", "node_urls", "=", "[", "\n", "{", "\"/nodes/\"", ":", "{", "\"method\"", ":", "[", "'GET'", ",", "'POST'", ",", "'PUT'", ",", "'DELETE'", "]", "}", "}", ",", "\n", "{", "\"/nodes/[node_id]/\"", ":", "{", "\"method\"", ":", "[", "'GET'", ",", "'PUT'", ",", "'DELETE'", "]", "}", "}", "\n", "]", "\n", "\n", "if", "self", ".", "job_mgr", ".", "type", "==", "\"TrainingJobManager\"", "or", "self", ".", "job_mgr", ".", "type", "==", "\"HPOJobManager\"", ":", "\n", "            ", "return", "urls", "+", "job_urls", "\n", "", "elif", "self", ".", "job_mgr", ".", "type", "==", "\"ParallelHPOManager\"", ":", "\n", "            ", "return", "urls", "+", "job_urls", "+", "space_urls", "+", "node_urls", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid type: {}\"", ".", "format", "(", "self", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.run_service": [[123, 141], ["multiprocessing.Process", "ws_mgr.WebServiceManager.my_process.start", "ws_mgr.WebServiceManager.my_process.join", "ws_mgr.WebServiceManager.app.run", "set_log_level"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.evaluator.TargetFunctionEvaluator.start", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.set_log_level"], ["", "", "def", "run_service", "(", "self", ",", "port", ",", "debug_mode", "=", "False", ",", "threaded", "=", "False", ",", "with_process", "=", "False", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "with_process", "==", "True", ":", "\n", "                ", "kwargs", "=", "{", "\n", "'host'", ":", "'0.0.0.0'", ",", "\n", "'port'", ":", "port", ",", "\n", "'debug'", ":", "debug_mode", "\n", "}", "\n", "\n", "self", ".", "my_process", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "app", ".", "run", ",", "kwargs", "=", "kwargs", ")", "\n", "self", ".", "my_process", ".", "start", "(", ")", "\n", "self", ".", "my_process", ".", "join", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "debug_mode", ":", "\n", "                    ", "set_log_level", "(", "'debug'", ")", "\n", "", "self", ".", "app", ".", "run", "(", "host", "=", "'0.0.0.0'", ",", "port", "=", "port", ",", "debug", "=", "debug_mode", ",", "threaded", "=", "threaded", ")", "\n", "", "", "except", "KeyboardInterrupt", "as", "ki", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.ws_mgr.WebServiceManager.stop_service": [[143, 148], ["ws_mgr.WebServiceManager.my_process.terminate", "ws_mgr.WebServiceManager.my_process.join", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "stop_service", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "my_process", "!=", "None", ":", "\n", "            ", "self", ".", "my_process", ".", "terminate", "(", ")", "\n", "self", ".", "my_process", ".", "join", "(", ")", "\n", "debug", "(", "\"API server terminated properly.\"", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.__init__": [[8, 11], ["xoa.managers.db_mgr.get_database_manager"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.get_database_manager"], ["\n", "        ", "if", "'num_samples'", "in", "spec", ":", "\n", "            ", "self", ".", "num_samples", "=", "spec", "[", "'num_samples'", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_credential": [[12, 15], ["proto.ManagerPrototype.dbm.get_db"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.get_db"], ["            ", "self", ".", "num_samples", "=", "20000", "\n", "\n", "", "if", "'seed'", "in", "spec", ":", "\n", "            ", "seed", "=", "spec", "[", "'seed'", "]", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_train_jobs": [[16, 22], ["proto.ManagerPrototype.dbm.get_db"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.get_db"], ["if", "spec", "[", "'seed'", "]", "==", "'random'", ":", "\n", "                ", "seed", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_samples", ")", "\n", "", "self", ".", "seed", "=", "seed", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "1", "\n", "\n", "", "self", ".", "config", "=", "config", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_hpo_jobs": [[23, 29], ["proto.ManagerPrototype.dbm.get_db"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.get_db"], ["self", ".", "params", "=", "config", ".", "get_param_names", "(", ")", "\n", "self", ".", "num_dim", "=", "len", "(", "self", ".", "params", ")", "\n", "self", ".", "verifier", "=", "verifier", "\n", "self", ".", "verified", "=", "False", "\n", "\n", "", "def", "get_sample_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_users": [[30, 36], ["proto.ManagerPrototype.dbm.get_db"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.get_db"], ["\n", "", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "return", "self", ".", "name", "\n", "", "else", ":", "\n", "            ", "return", "\"Undefined\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.save_db": [[37, 41], ["proto.ManagerPrototype.dbm.get_db", "proto.ManagerPrototype.dbm.save"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.db_mgr.JsonFileDBManager.get_db", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save"], ["", "", "def", "is_verified", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "verified", "==", "None", ":", "\n", "            ", "return", "True", "# XXX: No verifier is treated as all of candidate are verified", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "verified", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.authorize": [[42, 61], ["auth_key.replace", "base64.b64decode().decode", "base64.b64decode().decode.split", "proto.ManagerPrototype.get_users", "debug", "base64.b64decode", "proto.ManagerPrototype.get_credential"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_users", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.proto.ManagerPrototype.get_credential"], ["\n", "", "", "def", "validate", "(", "self", ",", "candidate", ")", ":", "\n", "\n", "        ", "if", "type", "(", "candidate", ")", "!=", "dict", ":", "\n", "            ", "candidate", "=", "self", ".", "config", ".", "convert", "(", "\"arr\"", ",", "\"dict\"", ",", "candidate", ")", "\n", "\n", "", "cand", "=", "{", "}", "\n", "try", ":", "\n", "# Type forcing", "\n", "            ", "for", "k", "in", "candidate", ":", "\n", "                ", "if", "not", "k", "in", "self", ".", "config", ".", "get_param_names", "(", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"{} is not in {}\"", ".", "format", "(", "k", ",", "self", ".", "params", ")", ")", "\n", "", "v", "=", "candidate", "[", "k", "]", "\n", "t", "=", "eval", "(", "self", ".", "config", ".", "get_type", "(", "k", ")", ")", "\n", "v", "=", "t", "(", "v", ")", "\n", "# Value check", "\n", "r_k", "=", "self", ".", "config", ".", "get_range", "(", "k", ")", "\n", "vt", "=", "self", ".", "config", ".", "get_value_type", "(", "k", ")", "\n", "if", "vt", "==", "'categorical'", "or", "vt", "==", "'preordered'", ":", "\n", "                    ", "if", "not", "v", "in", "r_k", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.__init__": [[15, 32], ["lookup.get_all_hyperparam_vectors", "xoa.spaces.config_space.ConfigurationSpace.__init__", "lookup.get_all_test_errors", "lookup.get_all_exec_times", "lookup.hp_config.get_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_hyperparam_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_test_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_exec_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_dict"], ["    ", "def", "__init__", "(", "self", ",", "lookup", ",", "space_setting", "=", "{", "}", ")", ":", "\n", "\n", "        ", "hpv_list", "=", "lookup", ".", "get_all_hyperparam_vectors", "(", ")", "\n", "super", "(", "SurrogatesSpace", ",", "self", ")", ".", "__init__", "(", "lookup", ".", "data_type", ",", "\n", "lookup", ".", "hp_config", ".", "get_dict", "(", ")", ",", "\n", "hpv_list", ")", "\n", "# preloaded results", "\n", "self", ".", "full_error_list", "=", "lookup", ".", "get_all_test_errors", "(", ")", "\n", "self", ".", "exec_times", "=", "lookup", ".", "get_all_exec_times", "(", ")", "\n", "self", ".", "lookup", "=", "lookup", "\n", "self", ".", "num_epochs", "=", "lookup", ".", "num_epochs", "\n", "\n", "# Simple candidate resampling implementation", "\n", "self", ".", "resampled_set", "=", "None", "\n", "\n", "# For fast nearest index finding", "\n", "self", ".", "pvl_list", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.update_error": [[34, 40], ["super().update_error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error"], ["", "def", "update_error", "(", "self", ",", "sample_index", ",", "test_error", "=", "None", ",", "num_epochs", "=", "None", ",", "error_type", "=", "'test'", ")", ":", "\n", "        ", "if", "test_error", "is", "None", ":", "\n", "            ", "test_error", "=", "self", ".", "test_errors", "[", "sample_index", "]", "\n", "", "if", "num_epochs", "is", "None", ":", "\n", "            ", "num_epochs", "=", "self", ".", "num_epochs", "\n", "", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "update_error", "(", "sample_index", ",", "test_error", ",", "num_epochs", ",", "error_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.get_errors": [[41, 54], ["preeval_space.SurrogatesSpace.get_completions", "error_list.append", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_errors", "(", "self", ",", "type_or_id", ",", "min_epoch", "=", "0", ",", "error_type", "=", "'test'", ")", ":", "\n", "        ", "error_list", "=", "[", "]", "\n", "if", "type_or_id", "==", "\"completions\"", ":", "\n", "            ", "for", "c", "in", "self", ".", "get_completions", "(", "min_epoch", ")", ":", "\n", "                ", "err", "=", "self", ".", "full_error_list", "[", "c", "]", "\n", "error_list", ".", "append", "(", "err", ")", "\n", "", "return", "error_list", "\n", "", "elif", "type_or_id", "==", "\"all\"", ":", "\n", "            ", "return", "self", ".", "error_list", "\n", "", "elif", "type_or_id", "<", "len", "(", "self", ".", "full_error_list", ")", ":", "\n", "            ", "return", "self", ".", "full_error_list", "[", "type_or_id", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid request to get_errors: {}'", ".", "format", "(", "type_or_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.get_exec_time": [[55, 60], ["None"], "methods", ["None"], ["", "", "def", "get_exec_time", "(", "self", ",", "index", "=", "None", ")", ":", "\n", "        ", "if", "index", "!=", "None", ":", "\n", "            ", "return", "self", ".", "exec_times", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "exec_times", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.expand": [[61, 107], ["time.time", "len", "debug", "type", "preeval_space.SurrogatesSpace.hp_config.convert", "len", "numpy.random.choice", "numpy.array", "TypeError", "len", "numpy.random.choice.append", "numpy.random.choice.remove", "preeval_space.SurrogatesSpace.resampled_set.append", "len", "preeval_space.SurrogatesSpace.find_nearby_index", "numpy.random.choice.append", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.find_nearby_index", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "expand", "(", "self", ",", "hpv", ",", "schemata", "=", "None", ",", "gen_counts", "=", "None", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "'''\n        # return approximated index instead of newly created index        \n        idx, dist = self.hp_config.get_nearby_index(self.get_candidates(), \n                                                    self.hp_vectors, \n                                                    hpv)\n        debug(\"Distance btw selection and surrogate: {}\".format(dist))\n        '''", "\n", "if", "type", "(", "hpv", ")", "==", "dict", ":", "\n", "            ", "hpv", "=", "self", ".", "hp_config", ".", "convert", "(", "'dict'", ",", "'arr'", ",", "hpv", ")", "\n", "", "hpv_list", "=", "hpv", "\n", "dim", "=", "len", "(", "np", ".", "array", "(", "hpv", ")", ".", "shape", ")", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "hpv_list", "=", "[", "hpv", "]", "\n", "", "elif", "dim", "!=", "2", ":", "\n", "            ", "raise", "TypeError", "(", "\"Invalid hyperparameter vector: expand\"", ")", "\n", "\n", "\n", "", "indices", "=", "[", "]", "\n", "\n", "## FIXME:below is quick appending for SMAC of 20k dataset", "\n", "if", "len", "(", "hpv_list", ")", ">", "1000", ":", "\n", "# resample from candidates", "\n", "            ", "indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "candidates", ",", "len", "(", "hpv_list", ")", ")", "\n", "", "else", ":", "\n", "# XXX: add to ingore completed indices", "\n", "            ", "for", "c", "in", "self", ".", "completions", ":", "\n", "                ", "indices", ".", "append", "(", "c", ")", "\n", "\n", "", "for", "hpv", "in", "hpv_list", ":", "\n", "                ", "if", "len", "(", "hpv", ")", ">", "0", ":", "\n", "                    ", "index", "=", "self", ".", "find_nearby_index", "(", "hpv", ",", "indices", ")", "\n", "indices", ".", "append", "(", "index", ")", "\n", "\n", "# XXX:remove completed indices in the indices", "\n", "", "", "for", "c", "in", "self", ".", "completions", ":", "\n", "                ", "indices", ".", "remove", "(", "c", ")", "\n", "\n", "", "", "if", "self", ".", "resampled_set", "==", "None", ":", "\n", "            ", "self", ".", "resampled_set", "=", "indices", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "indices", ":", "\n", "                ", "self", ".", "resampled_set", ".", "append", "(", "i", ")", "\n", "", "", "debug", "(", "\"Finding neighbors takes {:.4f} sec.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "s_t", ")", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.find_nearby_index": [[108, 188], ["time.time", "preeval_space.SurrogatesSpace.one_hot_encode", "numpy.array", "numpy.sqrt", "len", "int", "range", "sorted", "numpy.array.dot", "trace_list.append", "len", "len", "preeval_space.SurrogatesSpace.get_param_vectors", "numpy.array", "numpy.sqrt", "preeval_space.SurrogatesSpace.pvl_list.append", "random.randrange", "numpy.array.dot", "int", "int", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "find_nearby_index", "(", "self", ",", "hpv", ",", "vetoers", "=", "[", "]", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "pvl_list", "==", "None", "or", "len", "(", "self", ".", "pvl_list", ")", "==", "0", ":", "\n", "# initialize vector length list to find a nearest index of new candidate fast", "\n", "            ", "pv_list", "=", "self", ".", "candidates", "# XXX: Use of orignal candidates!!", "\n", "\n", "self", ".", "pvl_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pv_list", ")", ")", ":", "\n", "                ", "ipv", "=", "self", ".", "get_param_vectors", "(", "i", ")", "\n", "ix", "=", "np", ".", "array", "(", "ipv", ")", "\n", "ipvl", "=", "np", ".", "sqrt", "(", "ix", ".", "dot", "(", "ix", ")", ")", "# much faster version than np.linalg.norm", "\n", "pv_dict", "=", "{", "'index'", ":", "i", ",", "'pv'", ":", "ipv", ",", "'length'", ":", "ipvl", "}", "\n", "self", ".", "pvl_list", ".", "append", "(", "pv_dict", ")", "\n", "# sorted by pvl_list values", "\n", "", "self", ".", "pvl_list", "=", "sorted", "(", "self", ".", "pvl_list", ",", "key", "=", "lambda", "k", ":", "k", "[", "'length'", "]", ")", "\n", "\n", "", "pv", "=", "self", ".", "one_hot_encode", "(", "hpv", ")", "\n", "x", "=", "np", ".", "array", "(", "pv", ")", "\n", "pvl", "=", "np", ".", "sqrt", "(", "x", ".", "dot", "(", "x", ")", ")", "\n", "\n", "# find nearest index of the pre-evaluated configurations", "\n", "size", "=", "len", "(", "self", ".", "pvl_list", ")", "\n", "#debug(\"Candidate size: {}\".format(size))", "\n", "trace_list", "=", "[", "]", "\n", "prev_idx", "=", "size", "-", "1", "# max index ", "\n", "idx", "=", "int", "(", "size", "/", "2", ")", "# started at middle", "\n", "new_idx", "=", "idx", "\n", "while", "True", ":", "\n", "            ", "cpvl", "=", "self", ".", "pvl_list", "[", "idx", "]", "[", "'length'", "]", "\n", "trace_list", ".", "append", "(", "idx", ")", "\n", "\n", "if", "pvl", "==", "cpvl", ":", "\n", "#debug(\"[impossible] index: {}, distance: {:.2f}\".format(idx, abs(cpvl-pvl))) ", "\n", "                ", "return", "idx", "#XXX: almost impossible case", "\n", "", "elif", "pvl", "<", "cpvl", ":", "\n", "                ", "new_idx", "=", "idx", "-", "int", "(", "abs", "(", "idx", "-", "prev_idx", ")", "/", "2", ")", "\n", "", "elif", "pvl", ">", "cpvl", ":", "\n", "                ", "new_idx", "=", "idx", "+", "int", "(", "abs", "(", "idx", "-", "prev_idx", ")", "/", "2", ")", "\n", "\n", "", "if", "new_idx", "==", "idx", ":", "\n", "# no way to go further", "\n", "#debug(\"[nearest] index: {}, distance: {:.2f}\".format(idx, abs(cpvl-pvl)))", "\n", "                ", "break", "\n", "\n", "", "elif", "new_idx", "<", "0", ":", "\n", "                ", "new_idx", "=", "0", "# go to the start point", "\n", "", "elif", "new_idx", ">=", "size", ":", "\n", "                ", "new_idx", "=", "size", "-", "1", "# go to the end point", "\n", "\n", "", "if", "new_idx", "in", "trace_list", ":", "\n", "# already visited", "\n", "#debug(\"[revisted] index: {}, distance: {:.2f}\".format(idx, abs(cpvl-pvl)))", "\n", "                ", "break", "\n", "\n", "", "prev_idx", "=", "idx", "\n", "idx", "=", "new_idx", "\n", "\n", "# check idx is in vetoers", "\n", "", "while", "self", ".", "pvl_list", "[", "idx", "]", "[", "'index'", "]", "in", "vetoers", ":", "\n", "            ", "dir", "=", "randrange", "(", "size", ")", "-", "idx", "\n", "if", "dir", ">", "0", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "idx", "-=", "1", "\n", "\n", "", "", "cpvl", "=", "self", ".", "pvl_list", "[", "idx", "]", "[", "'length'", "]", "\n", "index", "=", "self", ".", "pvl_list", "[", "idx", "]", "[", "'index'", "]", "\n", "#debug(\"Nearby distance: {:.7f}\".format(abs(cpvl-pvl)))", "\n", "#debug(\"original: {}\".format(hpv))", "\n", "#debug(\"replaced: {}\".format(self.get_hpv(idx)))", "\n", "\n", "# remove selected item", "\n", "#for i in range(len(self.pvl_list)):", "\n", "#    if self.pvl_list[i]['index'] == index:", "\n", "#        del self.pvl_list[i]", "\n", "#        break", "\n", "\n", "#debug(\"Finding neighbor {} takes {:.4f} sec.\".format(index, time.time() - s_t))", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.remove": [[189, 195], ["super().remove", "numpy.setdiff1d", "numpy.setdiff1d.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "remove", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "resampled_set", "==", "None", ":", "\n", "            ", "super", "(", "SurrogatesSpace", ",", "self", ")", ".", "remove", "(", "indices", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "np", ".", "setdiff1d", "(", "self", ".", "resampled_set", ",", "indices", ")", "\n", "self", ".", "resampled_set", "=", "candidates", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.restore_candidates": [[196, 198], ["None"], "methods", ["None"], ["", "", "def", "restore_candidates", "(", "self", ")", ":", "\n", "        ", "self", ".", "resampled_set", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.set_candidates": [[199, 211], ["preeval_space.SurrogatesSpace.get_completions", "new_indices.append", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "set_candidates", "(", "self", ",", "cand_indices", ")", ":", "\n", "# use of subset candidate from now", "\n", "# XXX:check candidate indices were evaluated", "\n", "        ", "done_indices", "=", "self", ".", "get_completions", "(", ")", "\n", "new_indices", "=", "[", "]", "\n", "for", "cand", "in", "cand_indices", ":", "\n", "            ", "if", "not", "cand", "in", "done_indices", ":", "\n", "                ", "new_indices", ".", "append", "(", "cand", ")", "\n", "", "else", ":", "\n", "                ", "warn", "(", "'Candidate #{} already evaluated!'", ".", "format", "(", "cand", ")", ")", "\n", "\n", "", "", "self", ".", "resampled_set", "=", "new_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.preeval_space.SurrogatesSpace.get_candidates": [[212, 221], ["type", "len"], "methods", ["None"], ["", "def", "get_candidates", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "type", "(", "self", ".", "resampled_set", ")", "==", "np", ".", "ndarray", "and", "len", "(", "self", ".", "resampled_set", ")", ">", "0", ":", "\n", "#debug(\"Using {} sampled candidates\".format(len(self.resampled_set)))", "\n", "                ", "return", "self", ".", "resampled_set", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "candidates", "\n", "", "", "except", ":", "\n", "            ", "return", "self", ".", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.__init__": [[14, 35], ["config_space.ConfigurationSpace.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "hp_config_dict", ",", "hpv_list", ",", "\n", "space_setting", "=", "{", "}", ")", ":", "\n", "\n", "# Simple size diversification implementation", "\n", "        ", "self", ".", "resized_space", "=", "None", "\n", "self", ".", "resize", "=", "None", "\n", "\n", "if", "'resize'", "in", "space_setting", ":", "\n", "            ", "self", ".", "resize", "=", "space_setting", "[", "'resize'", "]", "\n", "self", ".", "size_select", "=", "'SEQ'", "\n", "\n", "if", "'select_size'", "in", "space_setting", ":", "\n", "                ", "self", ".", "size_select", "=", "space_setting", "[", "'size_select'", "]", "\n", "\n", "", "", "self", ".", "resize_start_index", "=", "0", "\n", "self", ".", "size_selections", "=", "None", "\n", "\n", "# Simple candidate resampling implementation", "\n", "self", ".", "resampled_set", "=", "None", "\n", "\n", "super", "(", "AdaptiveConfigurationSpace", ",", "self", ")", ".", "__init__", "(", "name", ",", "hp_config_dict", ",", "hpv_list", ",", "space_setting", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.initialize": [[36, 57], ["super().initialize", "super().get_candidates", "numpy.array", "debug", "type", "type", "adaptive_space.AdaptiveConfigurationSpace.resized_space.keys", "numpy.where", "type", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "super", "(", "AdaptiveConfigurationSpace", ",", "self", ")", ".", "initialize", "(", ")", "\n", "self", ".", "resampled_set", "=", "None", "\n", "\n", "# space resizing", "\n", "if", "self", ".", "resize", "!=", "None", "and", "type", "(", "self", ".", "resize", ")", "==", "list", ":", "\n", "            ", "all_cands", "=", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "get_candidates", "(", ")", "\n", "all_cands", "=", "np", ".", "array", "(", "all_cands", ")", "\n", "self", ".", "resized_space", "=", "{", "}", "\n", "self", ".", "size_selections", "=", "{", "}", "\n", "for", "s_size", "in", "self", ".", "resize", ":", "\n", "                ", "if", "type", "(", "s_size", ")", "==", "int", ":", "\n", "                    ", "cands", "=", "np", ".", "where", "(", "all_cands", "<", "s_size", ")", "[", "0", "]", "\n", "self", ".", "resized_space", "[", "s_size", "]", "=", "cands", "\n", "", "elif", "type", "(", "s_size", ")", "==", "list", ":", "\n", "                    ", "i_start", "=", "s_size", "[", "0", "]", "\n", "i_end", "=", "s_size", "[", "1", "]", "\n", "cands", "=", "np", ".", "where", "(", "all_cands", "<", "i_end", ")", "[", "0", "]", "\n", "cands", "=", "np", ".", "where", "(", "all_cands", ">=", "i_start", ")", "[", "0", "]", "\n", "self", ".", "resized_space", "[", "i_end", "]", "=", "cands", "\n", "", "", "debug", "(", "\"Space resizing: {}\"", ".", "format", "(", "self", ".", "resized_space", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.archive": [[58, 72], ["copy.copy", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy"], ["", "", "def", "archive", "(", "self", ",", "run_index", ")", ":", "\n", "\n", "        ", "if", "run_index", "==", "0", ":", "\n", "            ", "k_hpv", "=", "\"hpv\"", "\n", "k_schemata", "=", "\"schemata\"", "\n", "k_gen_count", "=", "\"gen_count\"", "\n", "", "else", ":", "\n", "            ", "k_hpv", "=", "\"hpv{}\"", ".", "format", "(", "run_index", ")", "\n", "k_schemata", "=", "\"schemata{}\"", ".", "format", "(", "run_index", ")", "\n", "k_gen_count", "=", "\"gen_count{}\"", ".", "format", "(", "run_index", ")", "\n", "\n", "", "self", ".", "backups", "[", "k_hpv", "]", "=", "copy", ".", "copy", "(", "self", ".", "hp_vectors", ")", "\n", "self", ".", "backups", "[", "k_schemata", "]", "=", "copy", ".", "copy", "(", "self", ".", "schemata", ")", "\n", "self", ".", "backups", "[", "k_gen_count", "]", "=", "copy", ".", "copy", "(", "self", ".", "gen_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.expand": [[73, 82], ["super().expand", "type", "adaptive_space.AdaptiveConfigurationSpace.resampled_set.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "expand", "(", "self", ",", "indices", ")", ":", "\n", "        ", "indices", "=", "super", "(", "AdaptiveConfigurationSpace", ",", "self", ")", ".", "expand", "(", "indices", ")", "\n", "if", "self", ".", "resampled_set", "==", "None", ":", "\n", "            ", "return", "indices", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "indices", ":", "\n", "                ", "if", "type", "(", "i", ")", "==", "int", ":", "\n", "                    ", "self", ".", "resampled_set", ".", "append", "(", "i", ")", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.remove": [[83, 89], ["super().remove", "numpy.setdiff1d", "numpy.setdiff1d.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "remove", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "resampled_set", "==", "None", ":", "\n", "            ", "super", "(", "AdaptiveConfigurationSpace", ",", "self", ")", ".", "remove", "(", "indices", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "np", ".", "setdiff1d", "(", "self", ".", "resampled_set", ",", "indices", ")", "\n", "self", ".", "resampled_set", "=", "candidates", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.restore_candidates": [[90, 92], ["None"], "methods", ["None"], ["", "", "def", "restore_candidates", "(", "self", ")", ":", "\n", "        ", "self", ".", "resampled_set", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.set_candidates": [[93, 111], ["isinstance", "adaptive_space.AdaptiveConfigurationSpace.get_completions", "adaptive_space.AdaptiveConfigurationSpace.remove", "cand_indices.tolist.tolist.tolist", "len", "len", "len", "min", "new_indices.append", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "set_candidates", "(", "self", ",", "cand_indices", ")", ":", "\n", "        ", "if", "self", ".", "resampled_set", "and", "len", "(", "self", ".", "resampled_set", ")", ">", "0", "and", "len", "(", "cand_indices", ")", "==", "0", "and", "len", "(", "self", ".", "initial_hpv", ")", "<=", "min", "(", "self", ".", "resampled_set", ")", ":", "# for expanded candidate only", "\n", "            ", "self", ".", "remove", "(", "self", ".", "resampled_set", ")", "\n", "#debug(\"Set candidates: {}\".format(cand_indices))", "\n", "", "if", "isinstance", "(", "cand_indices", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "cand_indices", "=", "cand_indices", ".", "tolist", "(", ")", "\n", "\n", "", "done_indices", "=", "self", ".", "get_completions", "(", ")", "\n", "new_indices", "=", "[", "]", "\n", "for", "cand", "in", "cand_indices", ":", "\n", "            ", "if", "not", "cand", "in", "done_indices", ":", "\n", "                ", "new_indices", ".", "append", "(", "cand", ")", "\n", "", "else", ":", "\n", "                ", "warn", "(", "'Candidate #{} already evaluated!'", ".", "format", "(", "cand", ")", ")", "\n", "\n", "", "", "self", ".", "resampled_set", "=", "cand_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.get_candidates": [[112, 154], ["len", "len", "random.randint", "adaptive_space.AdaptiveConfigurationSpace.get_completions", "type", "debug", "ValueError", "list", "type", "type", "random.randint"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_candidates", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "resize", "!=", "None", ":", "\n", "# very simple search space resizing strategy", "\n", "            ", "n_sizes", "=", "len", "(", "self", ".", "resize", ")", "\n", "n_done", "=", "len", "(", "self", ".", "get_completions", "(", ")", ")", "\n", "i", "=", "randint", "(", "0", ",", "n_sizes", "-", "1", ")", "\n", "if", "n_done", "==", "0", ":", "\n", "                ", "self", ".", "resize_start_index", "=", "i", "\n", "#debug(\"Space diversification starts with {}.\".format(self.resize_start_index))", "\n", "", "elif", "n_done", "in", "self", ".", "size_selections", ":", "\n", "                ", "cur_size", "=", "self", ".", "size_selections", "[", "n_done", "]", "\n", "return", "self", ".", "resized_space", "[", "cur_size", "]", "\n", "\n", "", "if", "self", ".", "size_select", "==", "'SEQ'", ":", "\n", "                ", "if", "n_sizes", ">", "n_done", ":", "\n", "                    ", "i", "=", "n_done", "\n", "", "else", ":", "\n", "                    ", "i", "=", "n_done", "%", "n_sizes", "\n", "", "", "elif", "self", ".", "size_select", "==", "'RANDOM'", ":", "\n", "                ", "if", "n_done", ">", "3", ":", "\n", "                    ", "i", "=", "randint", "(", "0", ",", "n_sizes", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "i", "=", "self", ".", "resize_start_index", "\n", "#debug(\"Space diversification is not started yet\")", "\n", "\n", "", "", "cur_size", "=", "self", ".", "resize", "[", "i", "]", "\n", "if", "type", "(", "cur_size", ")", "==", "list", ":", "\n", "                ", "cur_size", "=", "cur_size", "[", "1", "]", "\n", "\n", "", "if", "cur_size", "in", "self", ".", "resized_space", ":", "\n", "                ", "debug", "(", "\"[SpaceDiv] # of done: {}, space id: {}\"", ".", "format", "(", "n_done", ",", "cur_size", ")", ")", "\n", "self", ".", "size_selections", "[", "n_done", "]", "=", "cur_size", "\n", "return", "self", ".", "resized_space", "[", "cur_size", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid size: {}\"", ".", "format", "(", "cur_size", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "type", "(", "self", ".", "resampled_set", ")", "==", "np", ".", "ndarray", "or", "type", "(", "self", ".", "resampled_set", ")", "==", "list", ":", "\n", "#debug(\"Use of resampled candidates: {}\".format(self.resampled_set))", "\n", "                ", "return", "list", "(", "self", ".", "resampled_set", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.update_error": [[155, 162], ["super().update_error", "numpy.setdiff1d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error"], ["", "", "", "def", "update_error", "(", "self", ",", "sample_index", ",", "error_value", ",", "num_epochs", "=", "None", ",", "error_type", "=", "'test'", ")", ":", "\n", "        ", "super", "(", "AdaptiveConfigurationSpace", ",", "self", ")", ".", "update_error", "(", "sample_index", ",", "error_value", ",", "num_epochs", ",", "error_type", ")", "\n", "\n", "if", "self", ".", "resize", "!=", "None", ":", "\n", "            ", "for", "k", "in", "self", ".", "resized_space", ":", "\n", "                ", "if", "sample_index", "in", "self", ".", "resized_space", "[", "k", "]", ":", "\n", "                    ", "self", ".", "resized_space", "[", "k", "]", "=", "np", ".", "setdiff1d", "(", "self", ".", "resized_space", "[", "k", "]", ",", "sample_index", ")", "\n", "#debug(\"Candidate #{} is removed in space size {}.\".format(sample_index, k))", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.__init__": [[15, 21], ["xoa.connectors.remote_space.RemoteParameterSpaceConnector", "remote_space.RemoteParameterSpace.space.get_param_vectors", "history.SearchHistory.__init__", "remote_space.RemoteParameterSpace.space.get_space_id", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_space_id"], ["\n", "        ", "super", "(", "RemoteParameterSpaceConnector", ",", "self", ")", ".", "__init__", "(", "url", ",", "credential", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_samples", "=", "None", "\n", "self", ".", "hp_config", "=", "None", "\n", "self", ".", "space_id", "=", "None", "\n", "debug", "(", "\"Getting parameter space status...\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_name": [[22, 24], ["None"], "methods", ["None"], ["space", "=", "self", ".", "get_status", "(", ")", "\n", "while", "space", "==", "None", ":", "\n", "            ", "space", "=", "self", ".", "get_status", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_params_dim": [[25, 30], ["remote_space.RemoteParameterSpace.get_param_vectors"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors"], ["time", ".", "sleep", "(", "3", ")", "\n", "\n", "", "", "def", "get_status", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n", "status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_hp_config": [[31, 33], ["None"], "methods", ["None"], ["\n", "if", "status", "==", "'200'", ":", "\n", "                ", "space", "=", "json", ".", "loads", "(", "resp", "[", "'body'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_param_vectors": [[34, 36], ["numpy.asarray", "remote_space.RemoteParameterSpace.space.get_param_vectors"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors"], ["\n", "self", ".", "num_samples", "=", "space", "[", "'num_samples'", "]", "\n", "self", ".", "hp_config", "=", "HyperparameterConfiguration", "(", "space", "[", "\"hp_config\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_hpv_dict": [[37, 39], ["remote_space.RemoteParameterSpace.space.get_hpv_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict"], ["self", ".", "space_id", "=", "space", "[", "'space_id'", "]", "\n", "\n", "return", "space", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_hp_vectors": [[40, 42], ["remote_space.RemoteParameterSpace.space.get_hp_vectors"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors"], ["", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Connection failed with code {}\"", ".", "format", "(", "status", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_candidates": [[44, 47], ["remote_space.RemoteParameterSpace.space.get_candidates"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates"], ["            ", "debug", "(", "\"Getting remote space: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n", "", "", "def", "get_space_id", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_completions": [[48, 51], ["remote_space.RemoteParameterSpace.space.get_completions"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions"], ["        ", "if", "self", ".", "space_id", "==", "None", ":", "\n", "            ", "while", "self", ".", "get_status", "(", ")", "==", "None", ":", "\n", "                ", "time", ".", "sleep", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.update_error": [[52, 54], ["remote_space.RemoteParameterSpace.space.update_error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error"], ["", "", "return", "self", ".", "space_id", "\n", "\n", "", "def", "get_num_samples", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.get_errors": [[55, 62], ["remote_space.RemoteParameterSpace.space.get_error", "remote_space.RemoteParameterSpace.space.get_error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.connectors.remote_space.RemoteParameterSpaceConnector.get_error"], ["        ", "if", "self", ".", "num_samples", "==", "None", ":", "\n", "            ", "while", "self", ".", "get_status", "(", ")", "==", "None", ":", "\n", "                ", "time", ".", "sleep", "(", "3", ")", "\n", "\n", "", "", "return", "self", ".", "num_samples", "\n", "\n", "", "def", "get_candidates", "(", "self", ")", ":", "\n", "        ", "resp", "=", "self", ".", "conn", ".", "request_get", "(", "\"/candidates/\"", ",", "args", "=", "{", "}", ",", "headers", "=", "self", ".", "headers", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.remote_space.RemoteParameterSpace.expand": [[63, 65], ["remote_space.RemoteParameterSpace.space.expand"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand"], ["status", "=", "resp", "[", "'headers'", "]", "[", "'status'", "]", "\n", "\n", "if", "status", "==", "'200'", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.__init__": [[18, 42], ["xoa.commons.hp_cfg.HyperparameterConfiguration", "history.SearchHistory.__init__", "config_space.ConfigurationSpace.validate", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "hp_config_dict", ",", "hpv_list", ",", "\n", "space_setting", "=", "{", "}", ",", "resampled", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "hp_config", "=", "HyperparameterConfiguration", "(", "hp_config_dict", ")", "\n", "\n", "self", ".", "prior_history", "=", "None", "\n", "if", "'prior_history'", "in", "space_setting", ":", "\n", "            ", "self", ".", "prior_history", "=", "space_setting", "[", "'prior_history'", "]", "\n", "\n", "", "self", ".", "priors", "=", "[", "]", "\n", "self", ".", "backups", "=", "{", "}", "\n", "\n", "self", ".", "initial_hpv", "=", "hpv_list", "\n", "if", "'duplicate_check'", "in", "space_setting", "and", "space_setting", "[", "'duplicate_check'", "]", "==", "True", ":", "\n", "            ", "self", ".", "initial_hpv", "=", "self", ".", "validate", "(", "hpv_list", ")", "\n", "\n", "", "self", ".", "hp_vectors", "=", "{", "}", "\n", "self", ".", "param_vectors", "=", "{", "}", "\n", "\n", "self", ".", "schemata", "=", "{", "}", "\n", "self", ".", "gen_counts", "=", "{", "}", "\n", "\n", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "__init__", "(", "len", "(", "self", ".", "initial_hpv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.validate": [[43, 77], ["time.time", "len", "info", "range", "len", "config_space.ConfigurationSpace.one_hot_encode", "range", "len", "info", "len", "upv_list.append", "uhpv_list.append", "len", "numpy.linalg.norm", "abs", "abs", "time.time", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "validate", "(", "self", ",", "hpv_list", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "num_samples", "=", "len", "(", "hpv_list", ")", "\n", "info", "(", "\"Candidate validation will be performed...\"", ")", "\n", "# duplicate check (takes long time!!)      ", "\n", "upv_list", "=", "[", "]", "# unique param vector list", "\n", "uhpv_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hpv_list", ")", ")", ":", "\n", "            ", "hpv", "=", "hpv_list", "[", "i", "]", "\n", "pv", "=", "self", ".", "one_hot_encode", "(", "hpv", ")", "\n", "\n", "is_duplicate", "=", "False", "\n", "\n", "#debug(\"# of unique items: {}\".format(len(upv_list)))", "\n", "\n", "for", "dup_i", "in", "range", "(", "len", "(", "upv_list", ")", ")", ":", "\n", "                ", "upv", "=", "upv_list", "[", "dup_i", "]", "\n", "if", "abs", "(", "pv", "[", "0", "]", "-", "upv", "[", "0", "]", ")", "<=", "0.001", "and", "abs", "(", "pv", "[", "-", "1", "]", "-", "upv", "[", "-", "1", "]", ")", "<=", "0.001", ":", "\n", "                    ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "pv", ")", "-", "np", ".", "array", "(", "upv", ")", ")", "\n", "if", "dist", "<", "0.0001", ":", "\n", "                        ", "is_duplicate", "=", "True", "\n", "#debug(\"#{} is a duplicated configuration\".format(i))", "\n", "break", "\n", "\n", "", "", "", "if", "is_duplicate", "==", "False", ":", "\n", "                ", "upv_list", ".", "append", "(", "pv", ")", "\n", "uhpv_list", ".", "append", "(", "hpv", ")", "\n", "\n", "", "", "if", "len", "(", "uhpv_list", ")", "<", "num_samples", ":", "\n", "            ", "n_reduced", "=", "num_samples", "-", "len", "(", "uhpv_list", ")", "\n", "info", "(", "\"# of samples {} are reduced after duplicate check ({:.1f} sec.)\"", ".", "format", "(", "n_reduced", ",", "time", ".", "time", "(", ")", "-", "s_t", ")", ")", "\n", "\n", "", "return", "uhpv_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.initialize": [[78, 110], ["time.time", "range", "super().initialize", "info", "len", "config_space.ConfigurationSpace.one_hot_encode", "config_space.ConfigurationSpace.preset", "debug", "len", "config_space.ConfigurationSpace.prior_history.lower().endswith", "warn", "time.time", "config_space.ConfigurationSpace.load_prior_from_table", "config_space.ConfigurationSpace.load", "config_space.ConfigurationSpace.extract_prior", "len", "config_space.ConfigurationSpace.prior_history.lower", "len", "IOError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.preset", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load_prior_from_table", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.extract_prior"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "hp_vectors", "=", "{", "}", "\n", "self", ".", "param_vectors", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "initial_hpv", ")", ")", ":", "\n", "            ", "hpv", "=", "self", ".", "initial_hpv", "[", "i", "]", "\n", "pv", "=", "self", ".", "one_hot_encode", "(", "hpv", ")", "\n", "\n", "self", ".", "param_vectors", "[", "i", "]", "=", "pv", "\n", "self", ".", "hp_vectors", "[", "i", "]", "=", "hpv", "\n", "\n", "", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "initialize", "(", ")", "\n", "\n", "# load results from the previous HPO runs", "\n", "if", "self", ".", "prior_history", "!=", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "len", "(", "self", ".", "priors", ")", "==", "0", ":", "\n", "                    ", "if", "self", ".", "prior_history", ".", "lower", "(", ")", ".", "endswith", "(", "'.csv'", ")", ":", "\n", "                        ", "self", ".", "priors", "=", "self", ".", "load_prior_from_table", "(", "self", ".", "prior_history", ")", "\n", "", "else", ":", "\n", "                        ", "hp_vectors", "=", "self", ".", "load", "(", "'spaces'", ",", "self", ".", "prior_history", ")", "\n", "if", "len", "(", "hp_vectors", ")", "==", "0", ":", "\n", "                            ", "raise", "IOError", "(", "\"No space information retrieved: {}\"", ".", "format", "(", "self", ".", "prior_history", ")", ")", "\n", "", "self", ".", "priors", "=", "self", ".", "extract_prior", "(", "hp_vectors", ",", "'results'", ",", "self", ".", "prior_history", ")", "\n", "\n", "", "", "self", ".", "preset", "(", ")", "\n", "debug", "(", "\"The # of prior observations: {}\"", ".", "format", "(", "len", "(", "self", ".", "completions", ")", ")", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Use of prior history failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "", "", "info", "(", "\"Search space initialization complete. ({:.1f} sec.)\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "s_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.archive": [[111, 120], ["copy.copy", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy"], ["", "def", "archive", "(", "self", ",", "run_index", ")", ":", "\n", "\n", "        ", "if", "run_index", "==", "0", ":", "\n", "            ", "k_hpv", "=", "\"hpv\"", "\n", "k_schemata", "=", "\"schemata\"", "\n", "k_gen_count", "=", "\"gen_count\"", "\n", "self", ".", "backups", "[", "k_hpv", "]", "=", "copy", ".", "copy", "(", "self", ".", "hp_vectors", ")", "\n", "self", ".", "backups", "[", "k_schemata", "]", "=", "copy", ".", "copy", "(", "self", ".", "schemata", ")", "\n", "self", ".", "backups", "[", "k_gen_count", "]", "=", "copy", ".", "copy", "(", "self", ".", "gen_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save_history": [[122, 152], ["config_space.ConfigurationSpace.get_hpv_dict", "config_space.ConfigurationSpace.get_errors", "config_space.ConfigurationSpace.get_train_epoch", "hpv_dict_list.append", "os.path.isdir", "os.mkdir", "len", "pandas.DataFrame.from_dict", "pandas.DataFrame.from_dict.to_csv", "debug", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_train_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "save_history", "(", "self", ",", "run_index", ",", "to_dir", "=", "'temp/'", ")", ":", "\n", "# FIXME: below works stupidly because it refreshs from scratch.", "\n", "# save current experiment to csv format", "\n", "        ", "hpv_dict_list", "=", "[", "]", "\n", "for", "c", "in", "self", ".", "completions", ":", "\n", "            ", "h", "=", "self", ".", "get_hpv_dict", "(", "c", ")", "\n", "e", "=", "self", ".", "get_errors", "(", "c", ")", "\n", "t", "=", "self", ".", "get_train_epoch", "(", "c", ")", "\n", "h", "[", "'_error_'", "]", "=", "e", "\n", "h", "[", "'_epoch_'", "]", "=", "t", "\n", "hpv_dict_list", ".", "append", "(", "h", ")", "\n", "\n", "", "try", ":", "\n", "            ", "if", "to_dir", "==", "'results/'", ":", "\n", "                ", "to_path", "=", "\"./results/{}/\"", ".", "format", "(", "self", ".", "name", ")", "\n", "f_path", "=", "\"{}R{}H.csv\"", ".", "format", "(", "to_path", ",", "run_index", ")", "\n", "", "else", ":", "\n", "                ", "to_path", "=", "to_dir", "\n", "f_path", "=", "\"{}{}.csv\"", ".", "format", "(", "to_dir", ",", "self", ".", "name", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "to_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "to_path", ")", "\n", "\n", "# create dictionary type results", "\n", "", "if", "len", "(", "hpv_dict_list", ")", ">", "0", ":", "\n", "                ", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "hpv_dict_list", ")", "\n", "csv", "=", "df", ".", "to_csv", "(", "f_path", ",", "index", "=", "False", ")", "\n", "debug", "(", "\"Optimization history saved at {}\"", ".", "format", "(", "f_path", ")", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Fail to save history due to {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save": [[153, 174], ["copy.copy", "copy.copy", "copy.copy", "numpy.savez_compressed", "debug", "os.path.isdir", "os.mkdir", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "# save hyperparameter vectors & schemata when no backup available", "\n", "        ", "if", "not", "\"hpv\"", "in", "self", ".", "backups", ":", "\n", "            ", "self", ".", "backups", "[", "\"hpv\"", "]", "=", "copy", ".", "copy", "(", "self", ".", "hp_vectors", ")", "\n", "\n", "", "if", "not", "\"schemata\"", "in", "self", ".", "backups", ":", "\n", "            ", "self", ".", "backups", "[", "\"schemata\"", "]", "=", "copy", ".", "copy", "(", "self", ".", "schemata", ")", "\n", "\n", "", "if", "not", "\"gen_count\"", "in", "self", ".", "backups", ":", "\n", "            ", "self", ".", "backups", "[", "\"gen_count\"", "]", "=", "copy", ".", "copy", "(", "self", ".", "gen_counts", ")", "\n", "\n", "", "try", ":", "\n", "            ", "to_path", "=", "\"./results/{}/\"", ".", "format", "(", "self", ".", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "to_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "to_path", ")", "\n", "\n", "", "file_name", "=", "\"{}search_space.npz\"", ".", "format", "(", "to_path", ")", "\n", "np", ".", "savez_compressed", "(", "file_name", ",", "**", "self", ".", "backups", ")", "\n", "debug", "(", "\"{} saved properly.\"", ".", "format", "(", "file_name", ")", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Fail to save {} due to {}\"", ".", "format", "(", "file_name", ",", "ex", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load": [[175, 200], ["os.path.exists", "os.path.isdir", "IOError", "os.path.exists", "open", "json.load", "numpy.load", "numpy.load.close", "IOError", "warn", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "load", "(", "self", ",", "space_folder", ",", "space_name", ")", ":", "\n", "        ", "if", "space_folder", "[", "-", "1", "]", "!=", "'/'", ":", "\n", "            ", "space_folder", "+=", "'/'", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "space_folder", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"{} folder not existed\"", ".", "format", "(", "space_folder", ")", ")", "\n", "", "json_file", "=", "\"{}{}.json\"", ".", "format", "(", "space_folder", ",", "space_name", ")", "\n", "npz_file", "=", "\"{}{}.npz\"", ".", "format", "(", "space_folder", ",", "space_name", ")", "\n", "hp_vectors", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "space", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "'hpv'", "in", "space", ":", "\n", "                    ", "hp_vectors", "=", "space", "[", "'hpv'", "]", "\n", "", "else", ":", "\n", "                    ", "warn", "(", "\"Invalid space format!\"", ")", "\n", "", "", "", "elif", "os", ".", "path", ".", "exists", "(", "npz_file", ")", ":", "\n", "            ", "space", "=", "np", ".", "load", "(", "npz_file", ")", "\n", "if", "'hpv'", "in", "space", ":", "\n", "                ", "hp_vectors", "=", "space", "[", "'hpv'", "]", "\n", "", "else", ":", "\n", "                ", "warn", "(", "\"Invalid space format!\"", ")", "\n", "", "space", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "\"{}{} file not exist\"", ".", "format", "(", "space_folder", ",", "space_name", ")", ")", "\n", "", "return", "hp_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.preset": [[201, 213], ["warn", "config_space.ConfigurationSpace.hp_config.convert", "config_space.ConfigurationSpace.expand", "config_space.ConfigurationSpace.update_error", "config_space.ConfigurationSpace.update_error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error"], ["", "def", "preset", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "k", "in", "self", ".", "priors", ":", "\n", "                ", "c", "=", "self", ".", "priors", "[", "k", "]", "\n", "if", "'hyperparams'", "in", "c", ":", "\n", "                    ", "hpv", "=", "self", ".", "hp_config", ".", "convert", "(", "\"arr\"", ",", "\"list\"", ",", "c", "[", "'hyperparams'", "]", ")", "\n", "indices", "=", "self", ".", "expand", "(", "hpv", ")", "\n", "self", ".", "update_error", "(", "indices", "[", "0", "]", ",", "c", "[", "'observed_error'", "]", ",", "c", "[", "'train_epoch'", "]", ",", "'test'", ")", "\n", "self", ".", "update_error", "(", "indices", "[", "0", "]", ",", "c", "[", "'observed_error'", "]", ",", "c", "[", "'train_epoch'", "]", ",", "'valid'", ")", "\n", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Preset previous history failed:{}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.extract_prior": [[214, 245], ["os.walk", "os.path.isdir", "IOError", "os.path.join", "debug", "f.endswith", "open", "json.load", "json.load.keys", "range", "ValueError", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "", "def", "extract_prior", "(", "self", ",", "hp_vectors", ",", "result_folder", ",", "result_name", ")", ":", "\n", "        ", "completions", "=", "{", "}", "\n", "if", "result_folder", "[", "-", "1", "]", "!=", "'/'", ":", "\n", "            ", "result_folder", "+=", "'/'", "\n", "", "result_path", "=", "\"{}{}\"", ".", "format", "(", "result_folder", ",", "result_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "result_path", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"{} not found\"", ".", "format", "(", "result_path", ")", ")", "\n", "\n", "", "for", "dirpath", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "result_path", ")", ":", "\n", "            ", "for", "filename", "in", "[", "f", "for", "f", "in", "filenames", "if", "f", ".", "endswith", "(", "\".json\"", ")", "]", ":", "\n", "                ", "result_file", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", "\n", "debug", "(", "\"Priors will be from {}.\"", ".", "format", "(", "result_file", ")", ")", "\n", "with", "open", "(", "result_file", ",", "'r'", ")", "as", "json_file", ":", "\n", "                    ", "results", "=", "json", ".", "load", "(", "json_file", ")", "\n", "for", "k", "in", "results", ".", "keys", "(", ")", ":", "\n", "                        ", "r", "=", "results", "[", "k", "]", "\n", "if", "'model_idx'", "in", "r", ":", "\n", "                            ", "for", "i", "in", "range", "(", "len", "(", "r", "[", "'model_idx'", "]", ")", ")", ":", "\n", "                                ", "idx", "=", "r", "[", "'model_idx'", "]", "[", "i", "]", "\n", "if", "idx", "in", "hp_vectors", ":", "\n", "                                    ", "completions", "[", "idx", "]", "=", "{", "\n", "\"hyperparams\"", ":", "hp_vectors", "[", "idx", "]", ",", "\n", "\"observed_error\"", ":", "r", "[", "'test_error'", "]", "[", "i", "]", ",", "\n", "\"train_epoch\"", ":", "r", "[", "'train_epoch'", "]", "[", "i", "]", "\n", "}", "\n", "", "else", ":", "\n", "                                    ", "raise", "ValueError", "(", "\"No index in hpv dict: {}\"", ".", "format", "(", "idx", ")", ")", "\n", "", "", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"Invalid prior result format: {}\"", ".", "format", "(", "result_file", ")", ")", "\n", "\n", "", "", "", "", "", "return", "completions", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load_prior_from_table": [[246, 272], ["pandas.read_csv", "config_space.ConfigurationSpace.hp_config.get_param_names", "hist[].tolist", "range", "hist[].tolist", "len", "hist[].iloc[].tolist", "warn", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "load_prior_from_table", "(", "self", ",", "csv_file", ",", "csv_dir", "=", "'temp/'", ")", ":", "\n", "        ", "completions", "=", "{", "}", "\n", "csv_path", "=", "csv_dir", "+", "csv_file", "\n", "try", ":", "\n", "            ", "hist", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "hp_params", "=", "self", ".", "hp_config", ".", "get_param_names", "(", ")", "\n", "errors", "=", "hist", "[", "'_error_'", "]", ".", "tolist", "(", ")", "\n", "epochs", "=", "None", "\n", "if", "'_epoch_'", "in", "hist", ":", "\n", "                ", "epochs", "=", "hist", "[", "'_epoch_'", "]", ".", "tolist", "(", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "errors", ")", ")", ":", "\n", "                ", "hp_vector", "=", "hist", "[", "hp_params", "]", ".", "iloc", "[", "i", "]", ".", "tolist", "(", ")", "\n", "train_epoch", "=", "0", "\n", "if", "epochs", "!=", "None", ":", "\n", "                    ", "train_epoch", "=", "epochs", "[", "i", "]", "\n", "", "completions", "[", "i", "]", "=", "{", "\n", "\"hyperparams\"", ":", "hp_vector", ",", "\n", "\"observed_error\"", ":", "errors", "[", "i", "]", ",", "\n", "\"train_epoch\"", ":", "train_epoch", "\n", "}", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception on loading prior history from table: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "raise", "ValueError", "(", "\"Invalid prior table file: {}\"", ".", "format", "(", "csv_path", ")", ")", "\n", "\n", "", "return", "completions", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_size": [[273, 275], ["len", "config_space.ConfigurationSpace.hp_vectors.keys"], "methods", ["None"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "hp_vectors", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_name": [[276, 278], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config": [[279, 281], ["None"], "methods", ["None"], ["", "def", "get_hp_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hp_config", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_schema": [[282, 287], ["numpy.zeros", "config_space.ConfigurationSpace.get_hpv_dim"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dim"], ["", "def", "get_schema", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "index", "in", "self", ".", "schemata", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "self", ".", "get_hpv_dim", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "schemata", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_generation": [[288, 293], ["None"], "methods", ["None"], ["", "", "def", "get_generation", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "index", "in", "self", ".", "gen_counts", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "gen_counts", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dim": [[294, 296], ["len"], "methods", ["None"], ["", "", "def", "get_hpv_dim", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "initial_hpv", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_params_dim": [[297, 299], ["len", "config_space.ConfigurationSpace.one_hot_encode"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode"], ["", "def", "get_params_dim", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "one_hot_encode", "(", "self", ".", "initial_hpv", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_param_vectors": [[300, 330], ["type", "numpy.array", "config_space.ConfigurationSpace.get_completions", "ValueError", "p_list.append", "config_space.ConfigurationSpace.get_candidates", "ValueError", "sorted", "ValueError", "config_space.ConfigurationSpace.param_vectors.keys", "p_list.append", "p_list.append", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "get_param_vectors", "(", "self", ",", "type_or_index", "=", "'all'", ",", "min_epoch", "=", "0", ")", ":", "\n", "        ", "p_list", "=", "[", "]", "\n", "if", "type", "(", "type_or_index", ")", "==", "str", ":", "\n", "            ", "if", "type_or_index", "==", "\"completions\"", ":", "\n", "                ", "completions", "=", "self", ".", "get_completions", "(", "min_epoch", ")", "\n", "for", "c", "in", "completions", ":", "\n", "                    ", "if", "not", "c", "in", "self", ".", "param_vectors", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Invalid completion: {}\"", ".", "format", "(", "c", ")", ")", "\n", "", "pv", "=", "self", ".", "param_vectors", "[", "c", "]", "\n", "p_list", ".", "append", "(", "pv", ")", "\n", "", "", "elif", "type_or_index", "==", "\"candidates\"", ":", "\n", "#debug(\"getting parameters of candidates\")                ", "\n", "                ", "for", "c", "in", "self", ".", "get_candidates", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "if", "c", "in", "self", ".", "param_vectors", ":", "\n", "                            ", "pv", "=", "self", ".", "param_vectors", "[", "c", "]", "\n", "p_list", ".", "append", "(", "pv", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "error", "(", "\"{} is invalid: {}\"", ".", "format", "(", "c", ",", "ex", ")", ")", "\n", "\n", "", "", "", "elif", "type_or_index", "==", "'all'", ":", "\n", "                ", "for", "k", "in", "sorted", "(", "self", ".", "param_vectors", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "p_list", ".", "append", "(", "self", ".", "param_vectors", "[", "k", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Not supported type: {}\"", ".", "format", "(", "type_or_index", ")", ")", "\n", "", "return", "np", ".", "array", "(", "p_list", ")", "\n", "", "elif", "type_or_index", "in", "self", ".", "param_vectors", ":", "\n", "            ", "return", "self", ".", "param_vectors", "[", "type_or_index", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid index: {}\"", ".", "format", "(", "type_or_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_vectors": [[331, 333], ["None"], "methods", ["None"], ["", "", "def", "get_hp_vectors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hp_vectors", "# return dict type ", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_existed": [[334, 339], ["None"], "methods", ["None"], ["", "def", "is_existed", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "in", "self", ".", "hp_vectors", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv": [[340, 345], ["config_space.ConfigurationSpace.is_existed", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_existed"], ["", "", "def", "get_hpv", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "is_existed", "(", "index", ")", ":", "\n", "            ", "return", "self", ".", "hp_vectors", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid index: {}\"", ".", "format", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict": [[346, 365], ["config_space.ConfigurationSpace.hp_config.convert", "ValueError", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "", "def", "get_hpv_dict", "(", "self", ",", "index", ",", "k", "=", "None", ")", ":", "\n", "\n", "        ", "hpv_dict", "=", "self", ".", "hp_vectors", "\n", "if", "k", "!=", "None", ":", "\n", "            ", "if", "k", "==", "0", ":", "\n", "                ", "if", "'hpv'", "in", "self", ".", "backups", ":", "\n", "                    ", "hpv_dict", "=", "self", ".", "backups", "[", "'hpv'", "]", "\n", "", "", "else", ":", "\n", "                ", "key", "=", "'hpv{}'", ".", "format", "(", "k", ")", "\n", "if", "key", "in", "self", ".", "backups", ":", "\n", "                    ", "hpv_dict", "=", "self", ".", "backups", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "error", "(", "\"No backup of hyperparamter vectors: {}\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "", "if", "index", "in", "hpv_dict", ":", "\n", "            ", "hp_arr", "=", "hpv_dict", "[", "index", "]", "\n", "hpv", "=", "self", ".", "hp_config", ".", "convert", "(", "'arr'", ",", "'dict'", ",", "hp_arr", ")", "\n", "return", "hpv", "# XXX:return dictionary value", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid index: {}\"", ".", "format", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.set_schema": [[366, 375], ["len", "config_space.ConfigurationSpace.get_hpv_dim", "ValueError", "ValueError", "len", "config_space.ConfigurationSpace.get_hpv_dim"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dim", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dim"], ["", "", "def", "set_schema", "(", "self", ",", "index", ",", "schema", ")", ":", "\n", "        ", "if", "len", "(", "schema", ")", "!=", "self", ".", "get_hpv_dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid schema dimension: {} != {}\"", ".", "format", "(", "len", "(", "schema", ")", ",", "self", ".", "get_hpv_dim", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "index", "in", "self", ".", "schemata", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid index: {}\"", ".", "format", "(", "index", ")", ")", "\n", "", "else", ":", "\n", "# TODO:validate input", "\n", "            ", "self", ".", "schemata", "[", "index", "]", "=", "schema", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_indices": [[376, 413], ["len", "tqdm.tqdm.tqdm", "config_space.ConfigurationSpace.hp_config.convert", "spv_list.append", "range", "numpy.array", "range", "check_list.count", "range", "debug", "config_space.ConfigurationSpace.expand", "numpy.array", "range", "len", "check_list.count", "debug", "len", "not_existed_list.append", "len", "numpy.linalg.norm", "indices.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_indices", "(", "self", ",", "hpv_list", ")", ":", "\n", "\n", "# convert hpv_list to param_vector_list", "\n", "        ", "spv_list", "=", "[", "]", "\n", "for", "h", "in", "hpv_list", ":", "\n", "            ", "spv", "=", "self", ".", "hp_config", ".", "convert", "(", "'arr'", ",", "'one_hot'", ",", "h", ")", "\n", "spv_list", ".", "append", "(", "np", ".", "array", "(", "spv", ")", ")", "\n", "", "size", "=", "len", "(", "spv_list", ")", "\n", "indices", "=", "[", "]", "\n", "check_list", "=", "[", "False", "for", "i", "in", "range", "(", "size", ")", "]", "\n", "# FIXME: below logic takes too much time!!", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "candidates", ")", ")", ")", ":", "\n", "            ", "c", "=", "self", ".", "candidates", "[", "j", "]", "\n", "tpv", "=", "np", ".", "array", "(", "self", ".", "param_vectors", "[", "c", "]", ")", "\n", "found", "=", "False", "\n", "if", "check_list", ".", "count", "(", "False", ")", "==", "0", ":", "\n", "                ", "debug", "(", "\"All items have been compared completely.\"", ")", "\n", "break", "\n", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "                ", "if", "check_list", "[", "i", "]", "==", "False", ":", "\n", "                    ", "spv", "=", "spv_list", "[", "i", "]", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "tpv", "-", "spv", ")", "<", "1e-5", ":", "# almost equal", "\n", "                        ", "indices", ".", "append", "(", "c", ")", "\n", "found", "=", "True", "\n", "check_list", "[", "i", "]", "=", "True", "\n", "break", "\n", "\n", "", "", "", "", "not_existed_list", "=", "[", "]", "\n", "if", "check_list", ".", "count", "(", "False", ")", ">", "0", ":", "# some configuration remained", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "check_list", ")", ")", ":", "\n", "                ", "if", "check_list", "[", "j", "]", "==", "False", ":", "\n", "                    ", "not_existed_list", ".", "append", "(", "hpv_list", "[", "j", "]", ")", "\n", "", "", "debug", "(", "\"Search space will be expanded for new {} configurations\"", ".", "format", "(", "len", "(", "not_existed_list", ")", ")", ")", "\n", "indices", "+=", "self", ".", "expand", "(", "not_existed_list", ")", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.expand": [[414, 445], ["len", "config_space.ConfigurationSpace.hp_vectors.keys", "range", "super().expand", "type", "config_space.ConfigurationSpace.hp_config.convert", "max", "len", "numpy.array", "TypeError", "len", "config_space.ConfigurationSpace.hp_config.convert", "vec_indices.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "expand", "(", "self", ",", "hpv", ",", "schemata", "=", "[", "]", ",", "gen_counts", "=", "[", "]", ")", ":", "\n", "# check dimensions", "\n", "        ", "if", "type", "(", "hpv", ")", "==", "dict", ":", "\n", "            ", "hpv", "=", "self", ".", "hp_config", ".", "convert", "(", "'dict'", ",", "'arr'", ",", "hpv", ")", "\n", "", "hpv_list", "=", "hpv", "\n", "dim", "=", "len", "(", "np", ".", "array", "(", "hpv", ")", ".", "shape", ")", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "hpv_list", "=", "[", "hpv", "]", "\n", "", "elif", "dim", "!=", "2", ":", "\n", "            ", "raise", "TypeError", "(", "\"Invalid hyperparameter vector: expand\"", ")", "\n", "\n", "", "vec_indices", "=", "[", "]", "\n", "key_list", "=", "self", ".", "hp_vectors", ".", "keys", "(", ")", "\n", "vec_index", "=", "max", "(", "key_list", ")", "+", "1", "# starts with the last model index", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hpv_list", ")", ")", ":", "\n", "            ", "h", "=", "hpv_list", "[", "i", "]", "\n", "if", "len", "(", "h", ")", ">", "0", ":", "# HOTFIX: empty vector will not be added", "\n", "                ", "self", ".", "hp_vectors", "[", "vec_index", "]", "=", "h", "\n", "self", ".", "param_vectors", "[", "vec_index", "]", "=", "self", ".", "hp_config", ".", "convert", "(", "'arr'", ",", "'one_hot'", ",", "h", ")", "\n", "\n", "if", "len", "(", "schemata", ")", ">", "i", "and", "len", "(", "schemata", "[", "i", "]", ")", ">", "0", ":", "\n", "                    ", "self", ".", "schemata", "[", "vec_index", "]", "=", "schemata", "[", "i", "]", "\n", "\n", "", "if", "len", "(", "gen_counts", ")", ">", "i", ":", "\n", "                    ", "self", ".", "gen_counts", "[", "vec_index", "]", "=", "gen_counts", "[", "i", "]", "\n", "\n", "", "vec_indices", ".", "append", "(", "vec_index", ")", "\n", "vec_index", "+=", "1", "\n", "\n", "", "", "return", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "expand", "(", "vec_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode": [[446, 453], ["len", "config_space.ConfigurationSpace.hp_config.convert", "numpy.asarray", "ValueError", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert"], ["", "def", "one_hot_encode", "(", "self", ",", "hpv", ")", ":", "\n", "        ", "dim", "=", "len", "(", "np", ".", "array", "(", "hpv", ")", ".", "shape", ")", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "e", "=", "self", ".", "hp_config", ".", "convert", "(", "'arr'", ",", "'one_hot'", ",", "hpv", ")", "\n", "return", "np", ".", "asarray", "(", "e", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid HPV: {}\"", ".", "format", "(", "hpv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_incumbent": [[454, 467], ["super().get_incumbent", "config_space.ConfigurationSpace.get_errors", "config_space.ConfigurationSpace.get_errors", "config_space.ConfigurationSpace.get_hpv", "config_space.ConfigurationSpace.get_schema", "config_space.ConfigurationSpace.get_generation"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_incumbent", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_schema", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_generation"], ["", "", "def", "get_incumbent", "(", "self", ")", ":", "\n", "        ", "i", "=", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "get_incumbent", "(", ")", "\n", "if", "i", "!=", "None", ":", "\n", "            ", "return", "{", "\n", "\"index\"", ":", "i", ",", "\n", "\"test_error\"", ":", "self", ".", "get_errors", "(", "i", ")", ",", "\n", "\"valid_error\"", ":", "self", ".", "get_errors", "(", "i", ",", "error_type", "=", "'valid'", ")", ",", "\n", "\"hpv\"", ":", "self", ".", "get_hpv", "(", "i", ")", ",", "\n", "\"schema\"", ":", "self", ".", "get_schema", "(", "i", ")", ",", "\n", "\"gen\"", ":", "self", ".", "get_generation", "(", "i", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_evaluated": [[468, 480], ["config_space.ConfigurationSpace.one_hot_encode", "config_space.ConfigurationSpace.get_completions", "type", "config_space.ConfigurationSpace.hp_config.convert", "config_space.ConfigurationSpace.get_param_vectors", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors"], ["", "", "def", "is_evaluated", "(", "self", ",", "hpv_to_check", ")", ":", "\n", "        ", "if", "type", "(", "hpv_to_check", ")", "==", "dict", ":", "\n", "            ", "hpv_to_check", "=", "self", ".", "hp_config", ".", "convert", "(", "'dict'", ",", "'arr'", ",", "hpv_to_check", ")", "\n", "", "pvc", "=", "self", ".", "one_hot_encode", "(", "hpv_to_check", ")", "\n", "\n", "for", "i", "in", "self", ".", "get_completions", "(", ")", ":", "\n", "            ", "pv", "=", "self", ".", "get_param_vectors", "(", "i", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "pv", "-", "pvc", ")", "\n", "if", "dist", "<", "1e-5", ":", "# XXX: ignore very small difference", "\n", "#debug(\"Already evaluated configuration: {}\".format(hpv_to_check))", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_duplicated": [[481, 493], ["config_space.ConfigurationSpace.one_hot_encode", "type", "config_space.ConfigurationSpace.hp_config.convert", "config_space.ConfigurationSpace.one_hot_encode", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.one_hot_encode"], ["", "def", "is_duplicated", "(", "self", ",", "hpvs", ",", "hpv_to_check", ")", ":", "\n", "        ", "if", "type", "(", "hpv_to_check", ")", "==", "dict", ":", "\n", "            ", "hpv_to_check", "=", "self", ".", "hp_config", ".", "convert", "(", "'dict'", ",", "'arr'", ",", "hpv_to_check", ")", "\n", "", "pvc", "=", "self", ".", "one_hot_encode", "(", "hpv_to_check", ")", "\n", "\n", "for", "hpv", "in", "hpvs", ":", "\n", "            ", "pv", "=", "self", ".", "one_hot_encode", "(", "hpv", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "pv", "-", "pvc", ")", "\n", "if", "dist", "<", "1e-5", ":", "# XXX: ignore very small difference", "\n", "#debug(\"Duplicated configuration: {}\".format(hpv_to_check))", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.remove": [[494, 501], ["super().remove", "config_space.ConfigurationSpace.hp_vectors.pop", "config_space.ConfigurationSpace.param_vectors.pop"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "def", "remove", "(", "self", ",", "indices", ")", ":", "\n", "        ", "for", "i", "in", "indices", ":", "\n", "            ", "if", "not", "i", "in", "self", ".", "completions", ":", "\n", "                ", "self", ".", "hp_vectors", ".", "pop", "(", "i", ",", "None", ")", "\n", "self", ".", "param_vectors", ".", "pop", "(", "i", ",", "None", ")", "\n", "\n", "", "", "super", "(", "ConfigurationSpace", ",", "self", ")", ".", "remove", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.compute_all": [[503, 523], ["debug", "trainer.train", "trainer.train", "warn", "len", "test_errs.append", "debug", "test_errs.append", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["def", "compute_all", "(", "self", ",", "trainer", ",", "train_epoch", "=", "None", ")", ":", "\n", "        ", "test_errs", "=", "[", "]", "\n", "try", ":", "\n", "            ", "for", "i", "in", "self", ".", "completions", ":", "\n", "                ", "r", "=", "trainer", ".", "train", "(", "i", ",", "train_epoch", ",", "no_etr", "=", "True", ")", "\n", "if", "'test_error'", "in", "r", ":", "\n", "                    ", "test_errs", ".", "append", "(", "r", "[", "'test_error'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"#{} returns invalid result: {}\"", ".", "format", "(", "i", ",", "r", ")", ")", "\n", "", "", "for", "i", "in", "self", ".", "candidates", ":", "\n", "                ", "r", "=", "trainer", ".", "train", "(", "i", ",", "train_epoch", ",", "no_etr", "=", "True", ")", "\n", "if", "'test_error'", "in", "r", ":", "\n", "                    ", "test_errs", ".", "append", "(", "r", "[", "'test_error'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "debug", "(", "\"#{} returns invalid result: {}\"", ".", "format", "(", "i", ",", "r", ")", ")", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Error when retrieves all available samples: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "\n", "", "debug", "(", "\"# of samples that are retrieved: {}\"", ".", "format", "(", "len", "(", "test_errs", ")", ")", ")", "\n", "return", "test_errs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.__init__": [[15, 18], ["xoa.managers.proto.ManagerPrototype.__init__", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SearchSpaceManager", ",", "self", ")", ".", "__init__", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "self", ".", "spaces", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.create": [[19, 46], ["time.strftime", "xoa.spaces.create_space_from_table", "xoa.spaces.create_search_space", "time.gmtime"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_space_from_table", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_search_space"], ["", "def", "create", "(", "self", ",", "hp_cfg_dict", ",", "space_spec", ")", ":", "\n", "        ", "if", "\"surrogate\"", "in", "space_spec", ":", "\n", "            ", "surrogate", "=", "space_spec", "[", "\"surrogate\"", "]", "\n", "grid_order", "=", "None", "\n", "\n", "if", "\"grid_order\"", "in", "space_spec", ":", "\n", "                ", "grid_order", "=", "space_spec", "[", "\"grid_order\"", "]", "\n", "", "s", "=", "create_space_from_table", "(", "surrogate", ",", "grid_order", ")", "\n", "cfg", "=", "surrogate", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "\"num_samples\"", "in", "space_spec", ":", "\n", "                ", "space_spec", "[", "\"num_samples\"", "]", "=", "20000", "\n", "\n", "", "if", "not", "\"seed\"", "in", "space_spec", ":", "\n", "                ", "space_spec", "[", "\"seed\"", "]", "=", "1", "\n", "\n", "", "s", "=", "create_search_space", "(", "hp_cfg_dict", ",", "space_spec", ")", "\n", "\n", "", "space_id", "=", "s", ".", "name", "\n", "space_obj", "=", "{", "\"id\"", ":", "space_id", ",", "\"config\"", ":", "hp_cfg_dict", ",", "\"space\"", ":", "s", "}", "\n", "space_obj", "[", "\"created\"", "]", "=", "time", ".", "strftime", "(", "'%Y%m%dT%H:%M:%SZ'", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "space_obj", "[", "\"status\"", "]", "=", "\"created\"", "\n", "\n", "self", ".", "spaces", "[", "space_id", "]", "=", "space_obj", "\n", "\n", "return", "space_id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_available_spaces": [[47, 49], ["list", "space_mgr.SearchSpaceManager.spaces.keys"], "methods", ["None"], ["", "def", "get_available_spaces", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_active_space_id": [[50, 56], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_active_space_id", "(", "self", ")", ":", "\n", "        ", "for", "s", "in", "self", ".", "spaces", ":", "\n", "            ", "if", "self", ".", "spaces", "[", "s", "]", "[", "'status'", "]", "==", "\"active\"", ":", "\n", "                ", "return", "s", "\n", "", "", "debug", "(", "\"No space is active now\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.set_space_status": [[57, 68], ["space_mgr.SearchSpaceManager.get_active_space_id"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_active_space_id"], ["", "def", "set_space_status", "(", "self", ",", "space_id", ",", "status", ")", ":", "\n", "        ", "if", "space_id", "==", "\"active\"", ":", "\n", "            ", "space_id", "=", "get_active_space_id", "(", ")", "\n", "\n", "", "elif", "space_id", "in", "self", ".", "spaces", ":", "\n", "            ", "self", ".", "spaces", "[", "space_id", "]", "[", "'status'", "]", "=", "status", "\n", "self", ".", "spaces", "[", "space_id", "]", "[", "'updated'", "]", "=", "time", ".", "strftime", "(", "'%Y%m%dT%H:%M:%SZ'", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"No such space {} existed\"", ".", "format", "(", "space_id", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space": [[69, 80], ["debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "get_space", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "if", "space_id", "==", "\"active\"", ":", "\n", "            ", "for", "s", "in", "self", ".", "spaces", ":", "\n", "                ", "if", "self", ".", "spaces", "[", "s", "]", "[", "'status'", "]", "==", "\"active\"", ":", "\n", "                    ", "return", "self", ".", "spaces", "[", "s", "]", "[", "'space'", "]", "\n", "", "", "return", "None", "\n", "", "elif", "space_id", "in", "self", ".", "spaces", ":", "\n", "            ", "return", "self", ".", "spaces", "[", "space_id", "]", "[", "'space'", "]", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"No such {} space existed\"", ".", "format", "(", "space_id", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_space_config": [[81, 90], ["space_mgr.SearchSpaceManager.get_active_space_id"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.space_mgr.SearchSpaceManager.get_active_space_id"], ["", "", "def", "get_space_config", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "if", "space_id", "==", "\"active\"", ":", "\n", "            ", "space_id", "=", "get_active_space_id", "(", ")", "\n", "\n", "", "if", "space_id", "in", "self", ".", "spaces", ":", "\n", "            ", "return", "self", ".", "spaces", "[", "space_id", "]", "[", "'config'", "]", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"No such space space {} existed\"", ".", "format", "(", "space_id", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_samples", ")", ":", "\n", "\n", "        ", "self", ".", "num_samples", "=", "num_samples", "\n", "#self.initialize()", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.initialize": [[12, 23], ["debug", "range", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "completions", "=", "[", "]", "#np.arange(0)", "\n", "self", ".", "candidates", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_samples", ")", "]", "# np.setdiff1d(np.arange(num_samples), self.completions)", "\n", "debug", "(", "\"{} candidates from {} to {}\"", ".", "format", "(", "len", "(", "self", ".", "candidates", ")", ",", "self", ".", "candidates", "[", "0", "]", ",", "self", ".", "candidates", "[", "-", "1", "]", ")", ")", "\n", "\n", "self", ".", "test_errors", "=", "{", "}", "#[ None for i in range(num_samples) ] # np.ones(num_samples)", "\n", "self", ".", "valid_errors", "=", "{", "}", "#[ None for i in range(num_samples) ] # np.ones(num_samples)", "\n", "self", ".", "train_epochs", "=", "{", "}", "#[ 0 for i in range(num_samples) ] # np.zeros(num_samples)", "\n", "self", ".", "val_loss_curves", "=", "{", "}", "\n", "self", ".", "test_loss_curves", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_candidates", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions": [[27, 39], ["sorted", "history.SearchHistory.train_epochs.keys", "completions.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_completions", "(", "self", ",", "min_epoch", "=", "0", ")", ":", "\n", "\n", "        ", "if", "min_epoch", "==", "0", ":", "\n", "#debug(\"# of all completions: {}\".format(len(self.completions))) ", "\n", "            ", "return", "self", ".", "completions", "\n", "", "else", ":", "\n", "            ", "completions", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "self", ".", "train_epochs", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "self", ".", "train_epochs", "[", "k", "]", ">=", "min_epoch", ":", "\n", "                    ", "completions", ".", "append", "(", "k", ")", "\n", "#debug(\"# of all completions: {}, # over {} epochs: {}\".format(len(self.completions), min_epoch, len(completions)))", "\n", "", "", "return", "completions", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_incumbent": [[40, 50], ["numpy.array", "history.SearchHistory.get_errors", "numpy.nanargmin", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "get_incumbent", "(", "self", ")", ":", "\n", "        ", "completed", "=", "self", ".", "completions", "\n", "compl_errs", "=", "np", ".", "array", "(", "self", ".", "get_errors", "(", "\"completions\"", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "try", ":", "\n", "            ", "min_i", "=", "np", ".", "nanargmin", "(", "compl_errs", ")", "\n", "return", "completed", "[", "min_i", "]", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "# FIX: when None value exists in compl_errs", "\n", "            ", "debug", "(", "\"No valid evaluation retrieved: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_search_order": [[51, 57], ["history.SearchHistory.completions.tolist", "history.SearchHistory.index"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_search_order", "(", "self", ",", "sample_index", ")", ":", "\n", "        ", "if", "sample_index", "in", "self", ".", "completions", ":", "\n", "            ", "search_order", "=", "self", ".", "completions", ".", "tolist", "(", ")", "\n", "return", "search_order", ".", "index", "(", "sample_index", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_train_epoch": [[58, 60], ["None"], "methods", ["None"], ["", "", "def", "get_train_epoch", "(", "self", ",", "sample_index", ")", ":", "\n", "        ", "return", "self", ".", "train_epochs", "[", "sample_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_loss_curve": [[61, 73], ["ValueError", "ValueError"], "methods", ["None"], ["", "def", "get_loss_curve", "(", "self", ",", "sample_index", ",", "loss_type", "=", "'test'", ")", ":", "\n", "        ", "loss_curves", "=", "None", "\n", "if", "loss_type", "==", "'test'", ":", "\n", "            ", "loss_curves", "=", "self", ".", "test_loss_curves", "\n", "", "elif", "loss_type", "==", "'valid'", ":", "\n", "            ", "loss_curves", "=", "self", ".", "val_loss_curves", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported loss type!\"", ")", "\n", "", "if", "not", "sample_index", "in", "loss_curves", ":", "\n", "            ", "raise", "ValueError", "(", "\"Sample index not found in the loss curves\"", ")", "\n", "\n", "", "return", "loss_curves", "[", "sample_index", "]", "# XXX:dict type returned", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error": [[74, 109], ["history.SearchHistory.completions.append", "history.SearchHistory.candidates.remove", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "def", "update_error", "(", "self", ",", "sample_index", ",", "error_value", ",", "num_epochs", "=", "None", ",", "error_type", "=", "'test'", ")", ":", "\n", "        ", "error_dict", "=", "None", "\n", "loss_curves", "=", "{", "}", "\n", "if", "error_type", "==", "'test'", ":", "\n", "            ", "error_dict", "=", "self", ".", "test_errors", "\n", "loss_curves", "=", "self", ".", "test_loss_curves", "\n", "", "elif", "error_type", "==", "'valid'", ":", "\n", "            ", "error_dict", "=", "self", ".", "valid_errors", "\n", "loss_curves", "=", "self", ".", "val_loss_curves", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported error type!\"", ")", "\n", "\n", "", "error_dict", "[", "sample_index", "]", "=", "error_value", "\n", "\n", "if", "not", "sample_index", "in", "self", ".", "completions", ":", "\n", "            ", "self", ".", "completions", ".", "append", "(", "sample_index", ")", "\n", "#debug(\"{} is added from completions -> {}\".format(sample_index, len(self.completions))) ", "\n", "\n", "", "if", "sample_index", "in", "self", ".", "candidates", ":", "\n", "            ", "self", ".", "candidates", ".", "remove", "(", "sample_index", ")", "\n", "#debug(\"Id#{} is ejected from candidates. remains: {}\".format(sample_index, len(self.candidates)))", "\n", "", "else", ":", "\n", "#debug(\"Id#{} has been removed from candidates\".format(sample_index))", "\n", "            ", "pass", "\n", "\n", "", "if", "num_epochs", "!=", "None", ":", "\n", "            ", "if", "not", "sample_index", "in", "self", ".", "train_epochs", ":", "\n", "                ", "self", ".", "train_epochs", "[", "sample_index", "]", "=", "num_epochs", "\n", "", "elif", "self", ".", "train_epochs", "[", "sample_index", "]", "<", "num_epochs", ":", "\n", "                ", "self", ".", "train_epochs", "[", "sample_index", "]", "=", "num_epochs", "\n", "\n", "", "if", "not", "sample_index", "in", "loss_curves", ":", "\n", "                ", "loss_curves", "[", "sample_index", "]", "=", "{", "}", "\n", "", "elif", "not", "num_epochs", "in", "loss_curves", "[", "sample_index", "]", ":", "\n", "                ", "loss_curves", "[", "sample_index", "]", "[", "num_epochs", "]", "=", "error_value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors": [[113, 139], ["ValueError", "history.SearchHistory.get_completions", "len", "warn", "debug", "err_list.append", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "get_errors", "(", "self", ",", "type_or_id", "=", "\"completions\"", ",", "min_epoch", "=", "0", ",", "error_type", "=", "'test'", ")", ":", "\n", "        ", "error_dict", "=", "None", "\n", "if", "error_type", "==", "'test'", ":", "\n", "            ", "error_dict", "=", "self", ".", "test_errors", "\n", "", "elif", "error_type", "==", "'valid'", ":", "\n", "            ", "error_dict", "=", "self", ".", "valid_errors", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid error type: {}\"", ".", "format", "(", "error_type", ")", ")", "\n", "", "if", "type_or_id", "==", "\"completions\"", ":", "\n", "            ", "try", ":", "\n", "                ", "err_list", "=", "[", "]", "\n", "cs", "=", "self", ".", "get_completions", "(", "min_epoch", ")", "\n", "if", "len", "(", "cs", ")", ">", "0", ":", "\n", "                    ", "for", "c", "in", "cs", ":", "\n", "                        ", "err_list", ".", "append", "(", "error_dict", "[", "c", "]", ")", "\n", "", "return", "err_list", "\n", "", "else", ":", "\n", "                    ", "return", "[", "]", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Exception on get errors: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "return", "[", "]", "\n", "", "", "elif", "type_or_id", "==", "\"all\"", ":", "\n", "            ", "return", "error_dict", "\n", "", "else", ":", "\n", "            ", "return", "error_dict", "[", "type_or_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand": [[140, 145], ["history.SearchHistory.candidates.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "expand", "(", "self", ",", "indices", ")", ":", "\n", "        ", "for", "i", "in", "indices", ":", "\n", "            ", "self", ".", "candidates", ".", "append", "(", "i", ")", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.remove": [[146, 149], ["numpy.setdiff1d", "numpy.setdiff1d.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "remove", "(", "self", ",", "indices", ")", ":", "\n", "        ", "candidates", "=", "np", ".", "setdiff1d", "(", "self", ".", "candidates", ",", "indices", ")", "\n", "self", ".", "candidates", "=", "candidates", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_space_from_table": [[12, 26], ["get_lookup_loader", "SurrogatesSpace", "debug", "error", "debug", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.get_lookup_loader", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.create_search_space": [[28, 66], ["time.time", "xoa.spaces.adaptive_space.AdaptiveConfigurationSpace", "debug", "time.strftime", "xoa.spaces.candidates.CandidateSetGenerator", "xoa.spaces.candidates.CandidateSetGenerator.generate", "time.time", "random.randint", "time.gmtime"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.__init__.connect_remote_space": [[68, 76], ["debug", "RemoteParameterSpace", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.__init__": [[16, 42], ["candidates.CandidateSetGenerator.config.get_param_names", "type", "xoa.commons.hp_cfg.HyperparameterConfiguration", "candidates.CandidateSetGenerator.config.get_default_vector", "debug", "candidates.CandidateSetGenerator.config.convert", "candidates.CandidateSetGenerator.config.convert", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_default_vector", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert"], ["", "def", "get", "(", "self", ",", "space_id", ")", ":", "\n", "        ", "parser", "=", "reqparse", ".", "RequestParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"Authorization\"", ",", "location", "=", "\"headers\"", ")", "# for security reason", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "self", ".", "sm", ".", "authorize", "(", "args", "[", "'Authorization'", "]", ")", ":", "\n", "            ", "return", "\"Unauthorized\"", ",", "401", "\n", "\n", "", "space", "=", "self", ".", "sm", ".", "get_space", "(", "space_id", ")", "\n", "if", "space", "==", "None", ":", "\n", "            ", "return", "\"Search space {} is not available\"", ".", "format", "(", "space_id", ")", ",", "500", "\n", "\n", "", "result", "=", "{", "}", "\n", "\n", "result", "[", "\"candidates\"", "]", "=", "space", ".", "get_candidates", "(", ")", "\n", "\n", "return", "result", ",", "200", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors": [[43, 45], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors": [[46, 48], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_schemata": [[49, 51], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_generations": [[52, 54], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_sampler": [[55, 75], ["SobolSequenceSampler", "debug", "UniformRandomSampler", "CartesianGridSampler", "LatinHypercubeSampler", "NeighborSampler", "PartialNeighborSampler", "EvolutionarySampler", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate": [[76, 106], ["time.time", "candidates.CandidateSetGenerator.get_sampler", "candidates.CandidateSetGenerator.sampler.generate", "candidates.CandidateSetGenerator.sampler.get_schemata", "candidates.CandidateSetGenerator.sampler.get_generations", "candidates.CandidateSetGenerator.sampler.get_sample_size", "candidates.CandidateSetGenerator.config.convert", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "warn", "debug", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_sampler", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_schemata", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_generations", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.proto.SamplerProtype.get_sample_size", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.__init__": [[18, 22], ["control.CandidateSetController.search_space.restore_candidates"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.restore_candidates"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "space", "\n", "self", ".", "search_space", ".", "restore_candidates", "(", ")", "\n", "self", ".", "verifier", "=", "verifier", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.append": [[23, 87], ["len", "copy.copy", "random.randint", "xoa.spaces.candidates.CandidateSetGenerator", "xoa.spaces.candidates.CandidateSetGenerator.generate", "xoa.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "ValueError", "control.CandidateSetController.search_space.get_candidates", "control.CandidateSetController.search_space.get_hp_config", "len", "warn", "len", "control.CandidateSetController.search_space.expand", "warn", "type", "warn", "random.randint", "add_spec.find", "add_spec.find", "type", "int", "TypeError", "len", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find"], ["", "def", "append", "(", "self", ",", "spec", ",", "total_samples", ")", ":", "\n", "        ", "if", "not", "'add'", "in", "spec", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid search space spec!\"", ")", "\n", "return", "False", "\n", "\n", "", "add_spec", "=", "spec", "[", "'add'", "]", "\n", "method_type", "=", "'uniform'", "\n", "number", "=", "1", "\n", "cur_size", "=", "len", "(", "self", ".", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "\n", "# parsing append scheme", "\n", "try", ":", "\n", "            ", "if", "type", "(", "add_spec", ")", "==", "str", ":", "\n", "                ", "if", "'['", "in", "add_spec", "and", "']'", "in", "add_spec", ":", "\n", "                    ", "o_i", "=", "add_spec", ".", "find", "(", "'['", ")", "\n", "e_i", "=", "add_spec", ".", "find", "(", "']'", ")", "\n", "method_type", "=", "add_spec", "[", ":", "o_i", "]", "\n", "remains", "=", "add_spec", "[", "o_i", "+", "1", ":", "e_i", "]", "\n", "if", "remains", "==", "'refill'", ":", "\n", "                        ", "number", "=", "total_samples", "-", "cur_size", "\n", "", "else", ":", "\n", "                        ", "number", "=", "int", "(", "remains", ")", "\n", "", "", "", "elif", "type", "(", "add_spec", ")", "==", "int", ":", "\n", "                ", "method_type", "=", "'uniform'", "\n", "number", "=", "int", "(", "add_spec", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"Invalid method: {}\"", ".", "format", "(", "add_spec", ")", ")", "\n", "return", "False", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"{}, Add a candidate by uniform random.\"", ".", "format", "(", "ex", ")", ")", "\n", "method_type", "=", "'uniform'", "\n", "number", "=", "1", "\n", "\n", "", "total_samples", "=", "number", "\n", "\n", "if", "'verification'", "in", "spec", "and", "spec", "[", "'verification'", "]", ":", "\n", "            ", "verifier", "=", "self", ".", "verifier", "\n", "", "else", ":", "\n", "            ", "verifier", "=", "None", "\n", "\n", "", "spec", "=", "copy", ".", "copy", "(", "spec", ")", "\n", "spec", "[", "'sample_method'", "]", "=", "method_type", "\n", "spec", "[", "'num_samples'", "]", "=", "number", "\n", "# Randomizes the seed value", "\n", "spec", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "cur_size", ",", "cur_size", "*", "2", ")", "\n", "if", "method_type", "==", "'Sobol'", ":", "\n", "            ", "spec", "[", "'num_skips'", "]", "=", "number", "*", "random", ".", "randint", "(", "cur_size", ",", "cur_size", "*", "2", ")", "\n", "\n", "", "hvg", "=", "CandidateSetGenerator", "(", "self", ".", "search_space", ".", "get_hp_config", "(", ")", ",", "spec", ",", "verifier", "=", "verifier", ")", "\n", "hvg", ".", "generate", "(", ")", "\n", "hpvs", "=", "hvg", ".", "get_hp_vectors", "(", ")", "\n", "\n", "\n", "if", "total_samples", "!=", "len", "(", "hpvs", ")", ":", "\n", "            ", "warn", "(", "\"[Add] # of items to be added: {}, actual: {}\"", ".", "format", "(", "total_samples", ",", "len", "(", "valid_hpvs", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "hpvs", ")", ">", "0", ":", "\n", "            ", "self", ".", "search_space", ".", "expand", "(", "hpvs", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"No candidate added by {}: {}\"", ".", "format", "(", "add_spec", ",", "spec", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.intensify": [[88, 118], ["random.randint", "xoa.spaces.candidates.CandidateSetGenerator", "xoa.spaces.candidates.CandidateSetGenerator.generate", "xoa.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "xoa.spaces.candidates.CandidateSetGenerator.get_schemata", "xoa.spaces.candidates.CandidateSetGenerator.get_generations", "control.CandidateSetController.search_space.get_hp_config", "len", "warn", "len", "control.CandidateSetController.search_space.expand", "warn", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_schemata", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_generations", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "intensify", "(", "self", ",", "spec", ")", ":", "\n", "        ", "try", ":", "\n", "\n", "            ", "total_samples", "=", "spec", "[", "'num_samples'", "]", "\n", "if", "total_samples", "<=", "0", ":", "\n", "                ", "return", "False", "\n", "\n", "", "if", "'verification'", "in", "spec", "and", "spec", "[", "'verification'", "]", ":", "\n", "                ", "verifier", "=", "self", ".", "verifier", "\n", "", "else", ":", "\n", "                ", "verifier", "=", "None", "\n", "\n", "", "spec", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "0", ",", "total_samples", ")", "\n", "\n", "hvg", "=", "CandidateSetGenerator", "(", "self", ".", "search_space", ".", "get_hp_config", "(", ")", ",", "spec", ",", "verifier", "=", "verifier", ")", "\n", "hvg", ".", "generate", "(", ")", "\n", "hpvs", "=", "hvg", ".", "get_hp_vectors", "(", ")", "\n", "schemata", "=", "hvg", ".", "get_schemata", "(", ")", "\n", "gen_counts", "=", "hvg", ".", "get_generations", "(", ")", "\n", "\n", "if", "total_samples", "!=", "len", "(", "hpvs", ")", ":", "\n", "                ", "warn", "(", "\"[Intensify] # of items to be added: {}, actual: {}\"", ".", "format", "(", "total_samples", ",", "len", "(", "hpvs", ")", ")", ")", "\n", "", "if", "len", "(", "hpvs", ")", ">", "0", ":", "\n", "                ", "self", ".", "search_space", ".", "expand", "(", "hpvs", ",", "schemata", ",", "gen_counts", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception raised on intensifying samples: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.evolve": [[119, 145], ["random.randint", "xoa.spaces.candidates.CandidateSetGenerator", "xoa.spaces.candidates.CandidateSetGenerator.generate", "xoa.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "xoa.spaces.candidates.CandidateSetGenerator.get_schemata", "xoa.spaces.candidates.CandidateSetGenerator.get_generations", "control.CandidateSetController.search_space.get_hp_config", "len", "warn", "len", "control.CandidateSetController.search_space.expand", "warn", "debug", "traceback.format_exc", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_schemata", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_generations", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "evolve", "(", "self", ",", "spec", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "total_samples", "=", "spec", "[", "'num_samples'", "]", "\n", "if", "'verification'", "in", "spec", "and", "spec", "[", "'verification'", "]", ":", "\n", "                ", "verifier", "=", "self", ".", "verifier", "\n", "", "else", ":", "\n", "                ", "verifier", "=", "None", "\n", "\n", "", "spec", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "0", ",", "total_samples", ")", "\n", "hvg", "=", "CandidateSetGenerator", "(", "self", ".", "search_space", ".", "get_hp_config", "(", ")", ",", "spec", ",", "verifier", "=", "verifier", ")", "\n", "hvg", ".", "generate", "(", ")", "\n", "hpvs", "=", "hvg", ".", "get_hp_vectors", "(", ")", "\n", "schemata", "=", "hvg", ".", "get_schemata", "(", ")", "\n", "gen_counts", "=", "hvg", ".", "get_generations", "(", ")", "\n", "\n", "if", "total_samples", "!=", "len", "(", "hpvs", ")", ":", "\n", "                ", "warn", "(", "\"[Evolve] # of items to be added: {}, actual: {}\"", ".", "format", "(", "total_samples", ",", "len", "(", "hpvs", ")", ")", ")", "\n", "", "if", "len", "(", "hpvs", ")", ">", "0", ":", "\n", "                ", "self", ".", "search_space", ".", "expand", "(", "hpvs", ",", "schemata", ",", "gen_counts", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception raised on evolving samples: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove_evaluated": [[146, 160], ["time.time", "range", "debug", "len", "control.CandidateSetController.search_space.is_evaluated", "valid_hpvs.append", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_evaluated", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "remove_evaluated", "(", "self", ",", "hpvs", ")", ":", "\n", "        ", "''' check whether hpv is already in the history '''", "\n", "ds_t", "=", "time", ".", "time", "(", ")", "\n", "n_dup", "=", "0", "\n", "valid_hpvs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "hpvs", ")", ")", ":", "\n", "            ", "hpv", "=", "hpvs", "[", "i", "]", "\n", "if", "self", ".", "search_space", ".", "is_evaluated", "(", "hpv", ")", ":", "\n", "                ", "n_dup", "+=", "1", "\n", "", "else", ":", "\n", "                ", "valid_hpvs", ".", "append", "(", "hpv", ")", "\n", "\n", "", "", "debug", "(", "\"# of duplicates: {} (Takes {:.1f} sec.)\"", ".", "format", "(", "n_dup", ",", "time", ".", "time", "(", ")", "-", "ds_t", ")", ")", "\n", "return", "valid_hpvs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove": [[161, 216], ["control.CandidateSetController.search_space.set_candidates", "warn", "warn", "method.find", "method.find", "int", "time.time", "numpy.array", "numpy.array", "warn", "len", "ValueError", "time.time", "control.CandidateSetController.search_space.remove", "warn", "numpy.argpartition", "numpy.setdiff1d", "control.CandidateSetController.search_space.remove", "ValueError", "len", "numpy.argpartition"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.set_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "def", "remove", "(", "self", ",", "method", ",", "estimates", ")", ":", "\n", "        ", "if", "method", "==", "'all_candidates'", ":", "\n", "            ", "self", ".", "search_space", ".", "set_candidates", "(", "[", "]", ")", "# FIXME:to avoid expensive operation", "\n", "return", "True", "\n", "\n", "", "if", "not", "'candidates'", "in", "estimates", "or", "not", "'acq_funcs'", "in", "estimates", ":", "\n", "            ", "warn", "(", "\"Samples can not be removed without estimated values\"", ")", "\n", "return", "False", "\n", "\n", "", "if", "not", "'['", "in", "method", "or", "not", "']'", "in", "method", ":", "\n", "            ", "warn", "(", "\"Invalid method format: {}\"", ".", "format", "(", "method", ")", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "            ", "o_i", "=", "method", ".", "find", "(", "'['", ")", "\n", "e_i", "=", "method", ".", "find", "(", "']'", ")", "\n", "\n", "try", ":", "\n", "                ", "method_type", "=", "method", "[", ":", "o_i", "]", "\n", "number", "=", "int", "(", "method", "[", "o_i", "+", "1", ":", "e_i", "]", ")", "\n", "#debug(\"Removing {} by {}\".format(number, method_type))", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Invalid method name: {}\"", ".", "format", "(", "method", ")", ")", "\n", "return", "False", "\n", "\n", "", "try", ":", "\n", "                ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "cands", "=", "np", ".", "array", "(", "estimates", "[", "'candidates'", "]", ")", "# has index", "\n", "est_values", "=", "np", ".", "array", "(", "estimates", "[", "'acq_funcs'", "]", ")", "# estimated performance by acquistion function", "\n", "if", "len", "(", "cands", ")", "<", "number", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid method - removing {} samples can not performed over {} candidates\"", ".", "format", "(", "number", ",", "len", "(", "cands", ")", ")", ")", "\n", "\n", "# supported method type: worst, except_top ", "\n", "", "if", "method_type", "==", "'worst'", ":", "\n", "# find worst {number} items to delete", "\n", "#worst_k = est_values.argsort()[:number][::1] # FIXME: takes long time to sort                ", "\n", "                    ", "worst_k", "=", "np", ".", "argpartition", "(", "est_values", ",", "number", ")", "[", ":", "number", "]", "\n", "s_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "search_space", ".", "remove", "(", "cands", "[", "worst_k", "]", ")", "\n", "#debug(\"Worst item remove time: {:.2f}\".format(time.time() - s_t))", "\n", "", "elif", "method_type", "==", "'except_top'", ":", "\n", "# find top {number} items to be saved", "\n", "#top_k = est_values.argsort()[-1 * number:][::-1] # FIXME: takes long time to sort", "\n", "                    ", "top_k", "=", "np", ".", "argpartition", "(", "est_values", ",", "-", "1", "*", "number", ")", "[", "-", "1", "*", "number", ":", "]", "\n", "remains", "=", "np", ".", "setdiff1d", "(", "cands", ",", "cands", "[", "top_k", "]", ")", "# remained items", "\n", "self", ".", "search_space", ".", "remove", "(", "remains", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid method type: {}\"", ".", "format", "(", "method", ")", ")", "\n", "return", "False", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "warn", "(", "\"Removing sample failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.resample": [[217, 437], ["time.time", "debug", "len", "debug", "warn", "time.time", "control.CandidateSetController.remove", "time.time", "control.CandidateSetController.append", "time.time", "numpy.array", "numpy.array", "debug", "time.time", "copy.copy", "control.CandidateSetController.search_space.get_incumbent", "numpy.array", "numpy.array", "debug", "debug", "time.time", "copy.copy", "control.CandidateSetController.search_space.get_candidates", "debug", "debug", "numpy.array", "control.CandidateSetController.search_space.is_existed", "numpy.array", "control.CandidateSetController.search_space.get_hpv", "control.CandidateSetController.search_space.get_schema", "warn", "list", "len", "debug", "type", "warn", "debug", "ValueError", "numpy.array.argsort", "debug", "pop_sizes.astype.astype.astype", "copy.copy", "random.randint", "control.CandidateSetController.search_space.get_hpv", "control.CandidateSetController.search_space.get_generation", "control.CandidateSetController.intensify", "warn", "type", "warn", "debug", "ValueError", "numpy.array.argsort", "debug", "pop_sizes.astype.astype.astype", "control.CandidateSetController.evolve", "set", "control.CandidateSetController.search_space.is_existed", "warn", "list", "int", "range", "time.time", "e_spec.find", "e_spec.find", "int", "ValueError", "traceback.format_exc", "sum", "numpy.array", "warn", "debug", "time.time", "e_spec.find", "e_spec.find", "int", "ValueError", "traceback.format_exc", "sum", "numpy.array", "warn", "debug", "time.time", "unique_selections.append", "itertools.combinations", "control.CandidateSetController.search_space.get_param_vectors", "control.CandidateSetController.search_space.get_param_vectors", "numpy.linalg.norm", "div_values.append", "copy.copy", "control.CandidateSetController.search_space.get_hpv", "control.CandidateSetController.search_space.get_schema", "control.CandidateSetController.search_space.get_generation", "control.CandidateSetController.search_space.get_hpv", "specs.append", "len", "int", "warn", "debug", "time.time", "time.time", "NotImplementedError", "int", "traceback.format_exc", "NotImplementedError", "int", "traceback.format_exc", "len", "control.CandidateSetController.evolve", "traceback.format_exc", "numpy.array", "numpy.array", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_incumbent", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_existed", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_schema", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_generation", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.intensify", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.evolve", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.is_existed", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_schema", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_generation", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.evolve"], ["", "", "def", "resample", "(", "self", ",", "estimates", ",", "space_cfg", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "total_samples", "=", "20000", "\n", "\n", "if", "\"num_samples\"", "in", "space_cfg", ":", "\n", "            ", "total_samples", "=", "space_cfg", "[", "\"num_samples\"", "]", "\n", "", "elif", "\"num_samples\"", "in", "space_cfg", "[", "\"search_space\"", "]", ":", "\n", "            ", "total_samples", "=", "space_cfg", "[", "\"search_space\"", "]", "[", "\"num_samples\"", "]", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"Use of default sample size: {}\"", ".", "format", "(", "total_samples", ")", ")", "\n", "\n", "", "if", "estimates", "==", "None", "or", "not", "'candidates'", "in", "estimates", ":", "\n", "            ", "debug", "(", "\"No Estimated value is available to do resampling.\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "'remove'", "in", "space_cfg", ":", "\n", "                ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "ds", "=", "space_cfg", "[", "\"remove\"", "]", "\n", "if", "self", ".", "remove", "(", "ds", ",", "estimates", ")", ":", "\n", "                    ", "debug", "(", "\"Candidates have been removed by {} ({:.1f} sec)\"", ".", "format", "(", "ds", ",", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n", "", "", "if", "'add'", "in", "space_cfg", ":", "\n", "                ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "append", "(", "space_cfg", ",", "total_samples", ")", ":", "\n", "                    ", "debug", "(", "\"Candidates have been added by {} ({:.0f} sec)\"", ".", "format", "(", "space_cfg", "[", "'add'", "]", ",", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n", "", "", "if", "'intensify'", "in", "space_cfg", ":", "\n", "                ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "ns", "=", "10", "# XXX:initial size", "\n", "pn", "=", "10", "# parent size", "\n", "\n", "try", ":", "\n", "                    ", "if", "type", "(", "space_cfg", "[", "'intensify'", "]", ")", "==", "int", ":", "\n", "                        ", "ns", "=", "space_cfg", "[", "'intensify'", "]", "\n", "", "elif", "']'", "in", "space_cfg", "[", "'intensify'", "]", ":", "\n", "# Tokenize evolve strategies", "\n", "                        ", "e_spec", "=", "space_cfg", "[", "'intensify'", "]", "\n", "o_i", "=", "e_spec", ".", "find", "(", "'['", ")", "\n", "e_i", "=", "e_spec", ".", "find", "(", "']'", ")", "\n", "method", "=", "e_spec", "[", ":", "o_i", "]", "\n", "if", "not", "'top-'", "in", "method", ":", "\n", "                            ", "raise", "NotImplementedError", "(", "\"Not supported mutation method: {}. Currently top-* supported only.\"", ".", "format", "(", "method", ")", ")", "\n", "", "else", ":", "\n", "                            ", "pn", "=", "int", "(", "method", "[", "4", ":", "]", ")", "\n", "", "ns", "=", "int", "(", "e_spec", "[", "o_i", "+", "1", ":", "e_i", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Invalid mutation strategy: {}\"", ".", "format", "(", "space_cfg", "[", "'intensify'", "]", ")", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                    ", "warn", "(", "\"Fail to decode mutation strategy: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "raise", "ValueError", "(", "ex", ")", "\n", "", "cands", "=", "np", ".", "array", "(", "estimates", "[", "'candidates'", "]", ")", "# has index", "\n", "est_values", "=", "np", ".", "array", "(", "estimates", "[", "'acq_funcs'", "]", ")", "# estimated performance by acquistion function", "\n", "top_k", "=", "est_values", ".", "argsort", "(", ")", "[", "-", "1", "*", "pn", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "if", "pn", ">", "1", ":", "\n", "                    ", "try", ":", "\n", "                        ", "top_k_est_values", "=", "est_values", "[", "top_k", "]", "\n", "norm_values", "=", "top_k_est_values", "/", "sum", "(", "top_k_est_values", ")", "\n", "\n", "debug", "(", "\"Top-k values: {}, normalized: {}\"", ".", "format", "(", "top_k_est_values", ",", "norm_values", ")", ")", "\n", "pop_sizes", "=", "np", ".", "array", "(", "norm_values", ")", "*", "ns", "\n", "pop_sizes", "=", "pop_sizes", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "warn", "(", "\"Fail to calculate pop size: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "pop_sizes", "=", "np", ".", "array", "(", "[", "ns", "]", ")", "\n", "\n", "", "i", "=", "0", "\n", "for", "k", "in", "cands", "[", "top_k", "]", ":", "\n", "                    ", "if", "self", ".", "search_space", ".", "is_existed", "(", "k", ")", ":", "\n", "                        ", "spec", "=", "copy", ".", "copy", "(", "space_cfg", ")", "\n", "spec", "[", "'num_samples'", "]", "=", "pop_sizes", "[", "i", "]", "\n", "spec", "[", "'sample_method'", "]", "=", "'local'", "\n", "spec", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "0", ",", "total_samples", ")", "\n", "spec", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "k", ")", "\n", "spec", "[", "'generation'", "]", "=", "self", ".", "search_space", ".", "get_generation", "(", "k", ")", "\n", "self", ".", "intensify", "(", "spec", ")", "\n", "", "else", ":", "\n", "                        ", "warn", "(", "\"Invalid candidate index: {}\"", ".", "format", "(", "k", ")", ")", "\n", "", "i", "+=", "0", "\n", "\n", "", "debug", "(", "\"Candidates have been intensified. ({:.1f} sec)\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n", "", "if", "'evolve'", "in", "space_cfg", ":", "\n", "                ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "spec", "=", "copy", ".", "copy", "(", "space_cfg", ")", "\n", "spec", "[", "'sample_method'", "]", "=", "'genetic'", "\n", "incum", "=", "self", ".", "search_space", ".", "get_incumbent", "(", ")", "# has {\"hpv\":list, \"schema\": list, \"gen\": int}", "\n", "\n", "if", "not", "'mutation_ratio'", "in", "spec", ":", "\n", "                    ", "spec", "[", "'mutation_ratio'", "]", "=", ".1", "\n", "\n", "", "ns", "=", "10", "# XXX:initial size", "\n", "pn", "=", "1", "# parents size", "\n", "\n", "try", ":", "\n", "                    ", "spec", "[", "'male'", "]", "=", "incum", "[", "'hpv'", "]", "\n", "spec", "[", "'schema'", "]", "=", "incum", "[", "'schema'", "]", "\n", "spec", "[", "'gen'", "]", "=", "incum", "[", "'gen'", "]", "\n", "\n", "# Decode evolving method", "\n", "if", "type", "(", "space_cfg", "[", "'evolve'", "]", ")", "==", "int", ":", "\n", "                        ", "ns", "=", "space_cfg", "[", "'evolve'", "]", "\n", "", "elif", "']'", "in", "space_cfg", "[", "'evolve'", "]", ":", "\n", "# Tokenize evolve strategies", "\n", "                        ", "e_spec", "=", "space_cfg", "[", "'evolve'", "]", "\n", "o_i", "=", "e_spec", ".", "find", "(", "'['", ")", "\n", "e_i", "=", "e_spec", ".", "find", "(", "']'", ")", "\n", "method", "=", "e_spec", "[", ":", "o_i", "]", "\n", "if", "not", "'top-'", "in", "method", ":", "\n", "                            ", "raise", "NotImplementedError", "(", "\"Not supported evolutionary method: {}. Currently top-* supported only.\"", ".", "format", "(", "method", ")", ")", "\n", "", "else", ":", "\n", "                            ", "pn", "=", "int", "(", "method", "[", "4", ":", "]", ")", "\n", "", "ns", "=", "int", "(", "e_spec", "[", "o_i", "+", "1", ":", "e_i", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Invalid evolutionary strategy: {}\"", ".", "format", "(", "space_cfg", "[", "'evolve'", "]", ")", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "                    ", "warn", "(", "\"Fail to decode evolutionary strategy: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "raise", "ValueError", "(", "ex", ")", "\n", "\n", "# Count # of promising samples using estimated values", "\n", "", "cands", "=", "np", ".", "array", "(", "estimates", "[", "'candidates'", "]", ")", "# has index", "\n", "est_values", "=", "np", ".", "array", "(", "estimates", "[", "'acq_funcs'", "]", ")", "# estimated performance by acquistion function", "\n", "top_k", "=", "est_values", ".", "argsort", "(", ")", "[", "-", "1", "*", "pn", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "pn", ">", "1", ":", "\n", "                    ", "try", ":", "\n", "                        ", "top_k_est_values", "=", "est_values", "[", "top_k", "]", "\n", "norm_values", "=", "top_k_est_values", "/", "sum", "(", "top_k_est_values", ")", "\n", "\n", "debug", "(", "\"Top-k values: {}, normalized: {}\"", ".", "format", "(", "top_k_est_values", ",", "norm_values", ")", ")", "\n", "pop_sizes", "=", "np", ".", "array", "(", "norm_values", ")", "*", "ns", "\n", "pop_sizes", "=", "pop_sizes", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "warn", "(", "\"Fail to calculate pop size: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "pop_sizes", "=", "np", ".", "array", "(", "[", "ns", "]", ")", "\n", "\n", "", "debug", "(", "\"Evolutionary strategy: {}, population to evolve: {}\"", ".", "format", "(", "space_cfg", "[", "'evolve'", "]", ",", "pop_sizes", ")", ")", "\n", "\n", "# Evolve samples", "\n", "i", "=", "0", "\n", "for", "k", "in", "cands", "[", "top_k", "]", ":", "\n", "                    ", "spec", "[", "'num_samples'", "]", "=", "pop_sizes", "[", "i", "]", "\n", "spec", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "k", ")", "\n", "spec", "[", "'schema'", "]", "=", "self", ".", "search_space", ".", "get_schema", "(", "k", ")", "\n", "if", "spec", "[", "'num_samples'", "]", ">", "0", ":", "\n", "                        ", "self", ".", "evolve", "(", "spec", ")", "\n", "", "i", "+=", "0", "\n", "", "debug", "(", "\"Candidates have been evolved. ({:.1f} sec)\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", ")", "\n", "\n", "# FIXME:obsolete feature. do not use below ", "\n", "", "if", "'evolve_div'", "in", "space_cfg", ":", "\n", "                ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "spec", "=", "copy", ".", "copy", "(", "space_cfg", ")", "\n", "spec", "[", "'sample_method'", "]", "=", "'genetic'", "\n", "n_ts", "=", "spec", "[", "'evolve_div'", "]", "\n", "\n", "if", "not", "'mutation_ratio'", "in", "spec", ":", "\n", "                    ", "spec", "[", "'mutation_ratio'", "]", "=", ".1", "\n", "\n", "", "if", "not", "'candidates'", "in", "estimates", "or", "not", "'acq_funcs'", "in", "estimates", "or", "not", "'all_selection'", "in", "estimates", ":", "\n", "                    ", "warn", "(", "\"No diversified evolution without estimated values\"", ")", "\n", "", "else", ":", "\n", "# diversified evolution                ", "\n", "                    ", "selections", "=", "estimates", "[", "'all_selection'", "]", "\n", "unique_selections", "=", "[", "]", "\n", "for", "s", "in", "list", "(", "set", "(", "selections", ")", ")", ":", "\n", "                        ", "if", "self", ".", "search_space", ".", "is_existed", "(", "s", ")", ":", "\n", "                            ", "unique_selections", ".", "append", "(", "s", ")", "\n", "\n", "", "", "n_us", "=", "len", "(", "unique_selections", ")", "# number of unique selections", "\n", "debug", "(", "\"[evolve_div] {} selected parents: {}\"", ".", "format", "(", "n_us", ",", "unique_selections", ")", ")", "\n", "if", "n_us", "==", "0", ":", "\n", "                        ", "warn", "(", "\"No parents to evolve available!\"", ")", "\n", "return", "\n", "\n", "", "try", ":", "\n", "                        ", "combi_list", "=", "list", "(", "combinations", "(", "unique_selections", ",", "2", ")", ")", "\n", "\n", "pop_size", "=", "int", "(", "n_ts", "/", "len", "(", "combi_list", ")", ")", "\n", "div_values", "=", "[", "]", "\n", "specs", "=", "[", "]", "\n", "\n", "for", "c", "in", "combi_list", ":", "\n", "                            ", "p1_index", "=", "c", "[", "0", "]", "\n", "p2_index", "=", "c", "[", "1", "]", "\n", "p1_vec", "=", "self", ".", "search_space", ".", "get_param_vectors", "(", "p1_index", ")", "\n", "p2_vec", "=", "self", ".", "search_space", ".", "get_param_vectors", "(", "p2_index", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "p1_vec", ")", "-", "np", ".", "array", "(", "p2_vec", ")", ")", "\n", "#debug(\"Distance btw {} & {}: {}\".format(p1_index, p2_index, dist))", "\n", "div_values", ".", "append", "(", "dist", ")", "\n", "\n", "s", "=", "copy", ".", "copy", "(", "spec", ")", "\n", "s", "[", "'male'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "p1_index", ")", "\n", "s", "[", "\"schema\"", "]", "=", "self", ".", "search_space", ".", "get_schema", "(", "p1_index", ")", "\n", "s", "[", "\"gen\"", "]", "=", "self", ".", "search_space", ".", "get_generation", "(", "p1_index", ")", "\n", "\n", "s", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "p2_index", ")", "\n", "specs", ".", "append", "(", "s", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "specs", ")", ")", ":", "\n", "                            ", "spec", "=", "specs", "[", "i", "]", "\n", "div_v", "=", "div_values", "[", "i", "]", "\n", "spec", "[", "'num_samples'", "]", "=", "int", "(", "n_ts", "*", "div_v", "/", "sum", "(", "div_values", ")", ")", "\n", "if", "spec", "[", "'num_samples'", "]", ">", "0", ":", "\n", "                                ", "self", ".", "evolve", "(", "spec", ")", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "warn", "(", "'[evolve_div] exception raised:'", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "# FIXME:remove above code", "\n", "\n", "", "", "", "cand_size", "=", "len", "(", "self", ".", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "debug", "(", "\"The # of candidates: {}, resampling time: {:.1f} sec.\"", ".", "format", "(", "cand_size", ",", "time", ".", "time", "(", ")", "-", "s_t", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.__init__": [[10, 12], ["resample.CandidateSetResampler.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "modeller", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "super", "(", "CandidateSetEnsembler", ",", "self", ")", ".", "__init__", "(", "space", ",", "modeller", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.ensemble": [[13, 29], ["time.time", "ensemble.CandidateSetEnsembler.parse_method", "debug", "ensemble.CandidateSetEnsembler.select_batch", "ensemble.CandidateSetEnsembler.search_space.set_candidates", "ensemble.CandidateSetEnsembler.mutate_batch", "ensemble.CandidateSetEnsembler.search_space.set_candidates", "ensemble.CandidateSetEnsembler.crossover_batch", "ensemble.CandidateSetEnsembler.search_space.set_candidates", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.parse_method", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.select_batch", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.set_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.mutate_batch", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.set_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.crossover_batch", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.set_candidates"], ["", "def", "ensemble", "(", "self", ",", "s_method", ",", "n_cand", ",", "n_steps", ",", "steps_after_best", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "n_p", ",", "n_c", ",", "dist", ",", "ord", ",", "kp", "=", "self", ".", "parse_method", "(", "s_method", ",", "n_cand", ",", "n_steps", ",", "steps_after_best", ")", "\n", "\n", "if", "'-ALL'", "in", "s_method", ":", "\n", "            ", "candidates", "=", "self", ".", "select_batch", "(", "n_cand", ")", "\n", "self", ".", "search_space", ".", "set_candidates", "(", "candidates", ")", "\n", "", "elif", "'-MUTATE'", "in", "s_method", ":", "\n", "            ", "candidates", "=", "self", ".", "mutate_batch", "(", "n_cand", ")", "\n", "self", ".", "search_space", ".", "set_candidates", "(", "candidates", ")", "\n", "pass", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "self", ".", "crossover_batch", "(", "n_cand", ",", "n_p", ",", "n_c", ",", "\n", "distance", "=", "dist", ",", "order_by", "=", "ord", ",", "keep_parents", "=", "kp", ")", "\n", "self", ".", "search_space", ".", "set_candidates", "(", "candidates", ")", "\n", "", "debug", "(", "\"Candidate reproduction took {:.1f} sec. to evolve {} candidates\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "s_t", ",", "len", "(", "candidates", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.parse_method": [[30, 120], ["None"], "methods", ["None"], ["", "def", "parse_method", "(", "self", ",", "s_method", ",", "n_cand", ",", "n_steps", ",", "steps_after_best", ")", ":", "\n", "\n", "        ", "n_p", "=", "60", "\n", "n_c", "=", "3000", "\n", "if", "n_cand", ">", "n_c", ":", "\n", "            ", "n_c", "=", "n_cand", "\n", "\n", "", "dist", "=", "'cosine'", "\n", "order", "=", "'low'", "# make exploitative", "\n", "\n", "# TODO:add more experiment conditions", "\n", "if", "'-P600'", "in", "s_method", ":", "\n", "            ", "n_p", "=", "600", "\n", "", "elif", "'-P300'", "in", "s_method", ":", "\n", "            ", "n_p", "=", "300", "\n", "", "elif", "'-P120'", "in", "s_method", ":", "\n", "            ", "n_p", "=", "120", "\n", "", "elif", "'-P60'", "in", "s_method", ":", "\n", "            ", "n_p", "=", "60", "\n", "", "elif", "'-P30'", "in", "s_method", ":", "\n", "            ", "n_p", "=", "30", "\n", "\n", "", "if", "'-C20k'", "in", "s_method", ":", "\n", "            ", "n_c", "=", "20000", "\n", "", "if", "'-C10k'", "in", "s_method", ":", "\n", "            ", "n_c", "=", "10000", "\n", "", "elif", "'-C5k'", "in", "s_method", ":", "\n", "            ", "n_c", "=", "5000", "\n", "", "elif", "'-C3k'", "in", "s_method", ":", "\n", "            ", "n_c", "=", "3000", "\n", "", "elif", "'-C1k'", "in", "s_method", ":", "\n", "            ", "n_c", "=", "1000", "\n", "\n", "", "if", "'-L2'", "in", "s_method", ":", "\n", "            ", "dist", "=", "'l2'", "\n", "", "elif", "'-L1'", "in", "s_method", ":", "\n", "            ", "dist", "=", "'l1'", "\n", "\n", "", "if", "'-H'", "in", "s_method", ":", "\n", "            ", "order", "=", "'high'", "# make explorative", "\n", "", "elif", "'-N'", "in", "s_method", ":", "\n", "            ", "order", "=", "'none'", "\n", "", "elif", "'-R'", "in", "s_method", ":", "\n", "            ", "order", "=", "'random'", "\n", "", "elif", "'-S10'", "in", "s_method", ":", "# round-robin 10:1", "\n", "            ", "if", "n_steps", "%", "10", "==", "1", ":", "\n", "                ", "order", "=", "'high'", "# make explorative", "\n", "", "else", ":", "\n", "                ", "order", "=", "'low'", "\n", "", "", "elif", "'-S5'", "in", "s_method", ":", "# round-robin 5:1", "\n", "            ", "if", "n_steps", "%", "5", "==", "1", ":", "\n", "                ", "order", "=", "'high'", "# make explorative", "\n", "", "else", ":", "\n", "                ", "order", "=", "'low'", "\n", "", "", "elif", "'-S'", "in", "s_method", ":", "# round-robin 1:1", "\n", "            ", "if", "n_steps", "%", "2", "==", "1", ":", "\n", "                ", "order", "=", "'high'", "# make explorative", "\n", "", "else", ":", "\n", "                ", "order", "=", "'low'", "\n", "", "", "elif", "'-ADA2'", "in", "s_method", ":", "\n", "            ", "rn", "=", "self", ".", "steps_after_best", "%", "4", "\n", "if", "rn", "==", "0", ":", "\n", "                ", "order", "=", "'low'", "# make exploitative", "\n", "", "elif", "rn", "==", "1", ":", "\n", "                ", "order", "=", "'random'", "\n", "", "elif", "rn", "==", "2", ":", "\n", "                ", "order", "=", "'high'", "# make explorative", "\n", "", "else", ":", "\n", "# no subsampling will be performed", "\n", "                ", "return", "\n", "", "", "elif", "'-ADA1'", "in", "s_method", ":", "\n", "            ", "if", "n_steps", "<", "20", ":", "\n", "                ", "order", "=", "'random'", "\n", "", "elif", "steps_after_best", "%", "2", "==", "0", ":", "\n", "                ", "order", "=", "'low'", "# make exploitative", "\n", "", "else", ":", "\n", "                ", "order", "=", "'high'", "# make explorative", "\n", "", "", "elif", "'-ADA'", "in", "s_method", ":", "\n", "            ", "if", "n_steps", "<", "20", ":", "\n", "                ", "order", "=", "'random'", "\n", "", "elif", "steps_after_best", "<", "3", ":", "\n", "                ", "order", "=", "'low'", "# make exploitative", "\n", "", "else", ":", "\n", "                ", "order", "=", "'high'", "# make explorative", "\n", "\n", "", "", "keep_parents", "=", "False", "\n", "if", "'-KP'", "in", "s_method", ":", "\n", "            ", "keep_parents", "=", "True", "\n", "\n", "", "return", "n_p", ",", "n_c", ",", "dist", ",", "order", ",", "keep_parents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.select_batch": [[121, 135], ["time.time", "ensemble.CandidateSetEnsembler.modeller.get_arm_list", "int", "list", "ensemble.CandidateSetEnsembler.modeller.get_model", "ensemble.CandidateSetEnsembler.next", "ensemble.CandidateSetEnsembler.get_top_k_indices", "set", "len", "len", "ensemble.CandidateSetEnsembler.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_arm_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.get_top_k_indices", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "select_batch", "(", "self", ",", "n_cand", ")", ":", "\n", "        ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "arms", "=", "self", ".", "modeller", ".", "get_arm_list", "(", ")", "\n", "ep_size", "=", "int", "(", "n_cand", "/", "len", "(", "arms", ")", ")", "\n", "p_list", "=", "[", "]", "\n", "for", "a", "in", "arms", ":", "\n", "            ", "model", "=", "self", ".", "modeller", ".", "get_model", "(", "a", "[", "'model'", "]", ")", "\n", "_", ",", "estimates", "=", "model", ".", "next", "(", "a", "[", "'acq_func'", "]", ")", "\n", "p_indices", "=", "self", ".", "get_top_k_indices", "(", "estimates", ",", "ep_size", ")", "\n", "if", "len", "(", "p_indices", ")", ">", "0", ":", "\n", "                ", "p_list", "+=", "p_indices", ".", "tolist", "(", ")", "\n", "\n", "", "", "candidates", "=", "list", "(", "set", "(", "p_list", ")", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.mutate_batch": [[136, 145], ["ensemble.CandidateSetEnsembler.select_batch", "ensemble.CandidateSetEnsembler.search_space.expand", "ensemble.CandidateSetEnsembler.mutate", "offspring.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.select_batch", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.mutate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "mutate_batch", "(", "self", ",", "n_cand", ")", ":", "\n", "        ", "parents", "=", "self", ".", "select_batch", "(", "n_cand", ")", "\n", "offspring", "=", "[", "]", "\n", "for", "p_index", "in", "parents", ":", "\n", "            ", "o_hpv", "=", "self", ".", "mutate", "(", "p_index", ",", "n_cand", ")", "\n", "offspring", ".", "append", "(", "o_hpv", ")", "\n", "\n", "", "sample_indices", "=", "self", ".", "search_space", ".", "expand", "(", "offspring", ")", "\n", "return", "sample_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.crossover_batch": [[146, 151], ["ensemble.CandidateSetEnsembler.select_batch", "ensemble.CandidateSetEnsembler.crossover"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.select_batch", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.crossover"], ["", "def", "crossover_batch", "(", "self", ",", "n_pop", ",", "n_parents", ",", "n_child", ",", "\n", "distance", "=", "'cosine'", ",", "order_by", "=", "'low'", ",", "keep_parents", "=", "False", ")", ":", "\n", "        ", "parents", "=", "self", ".", "select_batch", "(", "n_parents", ")", "\n", "offspring", "=", "self", ".", "crossover", "(", "parents", ",", "n_child", ",", "n_pop", ",", "distance", ",", "order_by", ",", "keep_parents", ")", "\n", "return", "offspring", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.__init__": [[18, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "modeller", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "search_space", "=", "space", "\n", "\n", "self", ".", "modeller", "=", "modeller", "\n", "self", ".", "verifier", "=", "verifier", "\n", "self", ".", "strategy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.get_diversity": [[25, 37], ["resample.CandidateSetResampler.search_space.get_param_vectors", "resample.CandidateSetResampler.search_space.get_param_vectors", "scipy.spatial.distance.euclidean", "scipy.spatial.distance.cityblock", "scipy.spatial.distance.cosine", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors"], ["", "def", "get_diversity", "(", "self", ",", "p1_index", ",", "p2_index", ",", "dist_type", ")", ":", "\n", "        ", "p1", "=", "self", ".", "search_space", ".", "get_param_vectors", "(", "p1_index", ")", "\n", "p2", "=", "self", ".", "search_space", ".", "get_param_vectors", "(", "p2_index", ")", "\n", "\n", "if", "dist_type", "==", "'l2'", ":", "\n", "            ", "return", "distance", ".", "euclidean", "(", "p1", ",", "p2", ")", "\n", "", "elif", "dist_type", "==", "'l1'", ":", "\n", "            ", "return", "distance", ".", "cityblock", "(", "p1", ",", "p2", ")", "\n", "", "elif", "dist_type", "==", "'cosine'", ":", "\n", "            ", "return", "distance", ".", "cosine", "(", "p1", ",", "p2", ")", "# 0~1, the value closed to 1 refers to be independent each other", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not supported distance type. Use any of l2, l1, cosine.\"", ".", "format", "(", "dist_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.get_top_k_indices": [[38, 49], ["numpy.array().reshape", "numpy.array().reshape", "warn", "numpy.argpartition", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "get_top_k_indices", "(", "self", ",", "estimates", ",", "k", ")", ":", "\n", "        ", "if", "estimates", "and", "'candidates'", "in", "estimates", "and", "'acq_funcs'", "in", "estimates", ":", "\n", "            ", "cands", "=", "np", ".", "array", "(", "estimates", "[", "'candidates'", "]", ")", ".", "reshape", "(", "-", "1", ")", "# has index", "\n", "est_values", "=", "np", ".", "array", "(", "estimates", "[", "'acq_funcs'", "]", ")", ".", "reshape", "(", "-", "1", ")", "# estimated performance by acquistion function", "\n", "top_k_values", "=", "np", ".", "argpartition", "(", "est_values", ",", "-", "1", "*", "k", ")", "[", "-", "1", "*", "k", ":", "]", "\n", "top_k_cands", "=", "cands", "[", "top_k_values", "]", "\n", "#debug('Top-{} indices: {}'.format(k, top_k_cands))", "\n", "return", "top_k_cands", "\n", "", "else", ":", "\n", "            ", "warn", "(", "\"No estimation values to sample candidates\"", ")", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.mutate": [[50, 63], ["random.randint", "resample.CandidateSetResampler.search_space.get_hpv", "xoa.spaces.candidates.CandidateSetGenerator", "xoa.spaces.candidates.CandidateSetGenerator.generate", "xoa.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "resample.CandidateSetResampler.search_space.get_hp_config", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config"], ["", "", "def", "mutate", "(", "self", ",", "parent_index", ",", "seed_var", "=", "100", ",", "n_offspring", "=", "1", ")", ":", "\n", "        ", "spec", "=", "{", "'num_samples'", ":", "n_offspring", ",", "'sample_method'", ":", "'local'", "}", "\n", "spec", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "0", ",", "seed_var", ")", "# XXX:randomize!", "\n", "spec", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "parent_index", ")", "\n", "\n", "hvg", "=", "CandidateSetGenerator", "(", "self", ".", "search_space", ".", "get_hp_config", "(", ")", ",", "spec", ",", "verifier", "=", "self", ".", "verifier", ")", "\n", "hvg", ".", "generate", "(", ")", "\n", "offspring", "=", "hvg", ".", "get_hp_vectors", "(", ")", "\n", "if", "len", "(", "offspring", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mutation operation failed!\"", ")", "\n", "\n", "#debug(\"{} -> {}\".format(spec['female'], offspring))", "\n", "", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.partial_mutate": [[64, 90], ["random.randint", "resample.CandidateSetResampler.search_space.get_hpv", "xoa.spaces.candidates.CandidateSetGenerator", "xoa.spaces.candidates.CandidateSetGenerator.generate", "xoa.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "resample.CandidateSetResampler.search_space.get_hp_config", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.generate", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_hp_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config"], ["", "def", "partial_mutate", "(", "self", ",", "parent_index", ",", "\n", "valid_params", "=", "None", ",", "\n", "valid_types", "=", "None", ",", "\n", "arch_type_only", "=", "False", ",", "\n", "seed_var", "=", "100", ")", ":", "\n", "        ", "spec", "=", "{", "'num_samples'", ":", "1", ",", "'sample_method'", ":", "'partial'", "}", "\n", "spec", "[", "'seed'", "]", "=", "random", ".", "randint", "(", "0", ",", "seed_var", ")", "# XXX:randomize!", "\n", "spec", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "parent_index", ")", "\n", "\n", "if", "valid_params", ":", "\n", "            ", "spec", "[", "'valid_params'", "]", "=", "valid_params", "\n", "\n", "", "if", "valid_types", ":", "\n", "            ", "spec", "[", "'valid_types'", "]", "=", "valid_types", "\n", "\n", "", "if", "arch_type_only", ":", "\n", "            ", "spec", "[", "'arch_type_only'", "]", "=", "arch_type_only", "\n", "\n", "", "hvg", "=", "CandidateSetGenerator", "(", "self", ".", "search_space", ".", "get_hp_config", "(", ")", ",", "spec", ",", "verifier", "=", "self", ".", "verifier", ")", "\n", "hvg", ".", "generate", "(", ")", "\n", "hpvs", "=", "hvg", ".", "get_hp_vectors", "(", ")", "\n", "if", "len", "(", "hpvs", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Partial mutation failed!\"", ")", "\n", "", "offspring", "=", "hpvs", "[", "0", "]", "\n", "#debug(\"{} -> {}\".format(spec['female'], offspring))", "\n", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.crossover": [[91, 152], ["list", "len", "debug", "resample.CandidateSetResampler.search_space.get_hp_config", "debug", "resample.CandidateSetResampler.search_space.expand", "len", "itertools.combinations", "len", "random.randint", "resample.CandidateSetResampler.search_space.get_hpv", "resample.CandidateSetResampler.search_space.get_schema", "resample.CandidateSetResampler.search_space.get_generation", "resample.CandidateSetResampler.search_space.get_hpv", "xoa.samplers.EvolutionarySampler", "xoa.samplers.EvolutionarySampler.cross_over_uniform", "resample.CandidateSetResampler.get_diversity", "sorted.append", "sorted", "len", "len", "debug", "warn", "len", "sorted", "child_hpv_list.append", "len", "operator.itemgetter", "random.shuffle", "len", "len", "len", "operator.itemgetter", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_schema", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_generation", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.cross_over_uniform", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.get_diversity", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "crossover", "(", "self", ",", "up_list", ",", "n_child", ",", "n_pop", ",", "\n", "distance", "=", "'cosine'", ",", "order_by", "=", "'low'", ",", "keep_parents", "=", "False", ")", ":", "\n", "\n", "# pairing all possible parents and create next generation", "\n", "        ", "all_pairs", "=", "list", "(", "combinations", "(", "up_list", ",", "2", ")", ")", "\n", "p_size", "=", "len", "(", "all_pairs", ")", "\n", "debug", "(", "\"# of parents: {}, # of pairs: {}\"", ".", "format", "(", "len", "(", "up_list", ")", ",", "p_size", ")", ")", "\n", "hp_config", "=", "self", ".", "search_space", ".", "get_hp_config", "(", ")", "\n", "next_gen_list", "=", "[", "]", "\n", "\n", "while", "len", "(", "next_gen_list", ")", "<", "n_child", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "p_size", "-", "1", ")", "\n", "p", "=", "all_pairs", "[", "i", "]", "\n", "spec", "=", "{", "'sample_method'", ":", "'genetic'", "}", "\n", "p1_index", "=", "p", "[", "0", "]", "\n", "p2_index", "=", "p", "[", "1", "]", "\n", "spec", "[", "'male'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "p1_index", ")", "\n", "spec", "[", "\"schema\"", "]", "=", "self", ".", "search_space", ".", "get_schema", "(", "p1_index", ")", "\n", "spec", "[", "\"gen\"", "]", "=", "self", ".", "search_space", ".", "get_generation", "(", "p1_index", ")", "\n", "spec", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "p2_index", ")", "\n", "spec", "[", "'num_samples'", "]", "=", "1", "\n", "\n", "esg", "=", "EvolutionarySampler", "(", "hp_config", ",", "spec", ",", "self", ".", "verifier", ")", "\n", "offspring_list", "=", "esg", ".", "cross_over_uniform", "(", "1", ")", "# list item - {\"hpv\": [], \"schema\": []}", "\n", "dist", "=", "self", ".", "get_diversity", "(", "p1_index", ",", "p2_index", ",", "distance", ")", "\n", "next_gen_list", ".", "append", "(", "{", "\"diversity\"", ":", "dist", ",", "\"offspring\"", ":", "offspring_list", "}", ")", "\n", "\n", "#debug(\"Sorting offspring...\")", "\n", "", "if", "order_by", "==", "'low'", ":", "\n", "# ordering next_gen_list by low diversity", "\n", "            ", "next_gen_list", "=", "sorted", "(", "next_gen_list", ",", "key", "=", "itemgetter", "(", "'diversity'", ")", ")", "\n", "", "elif", "order_by", "==", "'high'", ":", "\n", "# ordering next_gen_list by high diversity", "\n", "            ", "next_gen_list", "=", "sorted", "(", "next_gen_list", ",", "key", "=", "itemgetter", "(", "'diversity'", ")", ",", "reverse", "=", "True", ")", "\n", "", "elif", "order_by", "==", "'random'", ":", "\n", "            ", "random", ".", "shuffle", "(", "next_gen_list", ")", "\n", "", "elif", "order_by", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid ordering type: {}\"", ".", "format", "(", "order_by", ")", ")", "\n", "\n", "", "if", "len", "(", "next_gen_list", ")", ">", "n_pop", ":", "\n", "            ", "next_gen_list", "=", "next_gen_list", "[", ":", "n_pop", "]", "\n", "\n", "# get evolved configuration index", "\n", "", "child_hpv_list", "=", "[", "]", "\n", "for", "ng", "in", "next_gen_list", ":", "\n", "            ", "offspring", "=", "ng", "[", "\"offspring\"", "]", "\n", "for", "o", "in", "offspring", ":", "\n", "                ", "child_hpv", "=", "o", "[", "'hpv'", "]", "\n", "child_hpv_list", ".", "append", "(", "child_hpv", ")", "\n", "", "", "debug", "(", "\"[CR] getting indices of offspring for {} configurations\"", ".", "format", "(", "len", "(", "child_hpv_list", ")", ")", ")", "\n", "offspring", "=", "self", ".", "search_space", ".", "expand", "(", "child_hpv_list", ")", "\n", "n_s", "=", "len", "(", "offspring", ")", "\n", "if", "keep_parents", "==", "True", ":", "\n", "            ", "offspring", "+=", "up_list", "\n", "n_s", "=", "len", "(", "offspring", ")", "\n", "debug", "(", "\"[CR] {} parents will be survived: {} -> {}\"", ".", "format", "(", "len", "(", "up_list", ")", ",", "len", "(", "child_hpv_list", ")", ",", "n_s", ")", ")", "\n", "\n", "", "if", "n_s", "<", "n_pop", ":", "\n", "            ", "warn", "(", "\"[CR] population size is less than {}: {}\"", ".", "format", "(", "n_pop", ",", "len", "(", "next_gen_list", ")", ")", ")", "\n", "\n", "", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.crossover_uniform": [[153, 194], ["list", "len", "debug", "resample.CandidateSetResampler.search_space.get_hp_config", "debug", "resample.CandidateSetResampler.search_space.expand", "itertools.combinations", "len", "random.randint", "xoa.samplers.EvolutionarySampler", "xoa.samplers.EvolutionarySampler.cross_over_uniform", "next_gen_list.append", "len", "type", "resample.CandidateSetResampler.search_space.get_hpv", "resample.CandidateSetResampler.search_space.get_schema", "resample.CandidateSetResampler.search_space.get_generation", "resample.CandidateSetResampler.search_space.get_hpv", "debug", "child_hpv_list.append", "len", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hp_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.samplers.es.EvolutionarySampler.cross_over_uniform", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_schema", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_generation", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "crossover_uniform", "(", "self", ",", "up_list", ",", "n_child", ")", ":", "\n", "\n", "# pairing all possible parents and create next generation", "\n", "        ", "all_pairs", "=", "list", "(", "combinations", "(", "up_list", ",", "2", ")", ")", "\n", "p_size", "=", "len", "(", "all_pairs", ")", "\n", "debug", "(", "\"# of parents: {}, # of pairs: {}\"", ".", "format", "(", "len", "(", "up_list", ")", ",", "p_size", ")", ")", "\n", "hp_config", "=", "self", ".", "search_space", ".", "get_hp_config", "(", ")", "\n", "next_gen_list", "=", "[", "]", "\n", "\n", "while", "len", "(", "next_gen_list", ")", "<", "n_child", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "p_size", "-", "1", ")", "\n", "p", "=", "all_pairs", "[", "i", "]", "\n", "spec", "=", "{", "'sample_method'", ":", "'genetic'", "}", "\n", "if", "type", "(", "p", "[", "0", "]", ")", "==", "int", "and", "type", "(", "p", "[", "0", "]", ")", ":", "\n", "                ", "p1_index", "=", "p", "[", "0", "]", "\n", "p2_index", "=", "p", "[", "1", "]", "\n", "spec", "[", "'male'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "p1_index", ")", "\n", "spec", "[", "\"schema\"", "]", "=", "self", ".", "search_space", ".", "get_schema", "(", "p1_index", ")", "\n", "spec", "[", "\"gen\"", "]", "=", "self", ".", "search_space", ".", "get_generation", "(", "p1_index", ")", "\n", "spec", "[", "'female'", "]", "=", "self", ".", "search_space", ".", "get_hpv", "(", "p2_index", ")", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"pair: {}\"", ".", "format", "(", "p", ")", ")", "\n", "spec", "[", "'male'", "]", "=", "p", "[", "0", "]", "\n", "spec", "[", "'female'", "]", "=", "p", "[", "1", "]", "\n", "", "spec", "[", "'num_samples'", "]", "=", "1", "\n", "\n", "esg", "=", "EvolutionarySampler", "(", "hp_config", ",", "spec", ",", "self", ".", "verifier", ")", "\n", "offspring_list", "=", "esg", ".", "cross_over_uniform", "(", "1", ")", "# list item - {\"hpv\": [], \"schema\": []}", "\n", "next_gen_list", ".", "append", "(", "{", "\"offspring\"", ":", "offspring_list", "}", ")", "\n", "\n", "# get evolved configuration index", "\n", "", "child_hpv_list", "=", "[", "]", "\n", "for", "ng", "in", "next_gen_list", ":", "\n", "            ", "offspring", "=", "ng", "[", "\"offspring\"", "]", "\n", "for", "o", "in", "offspring", ":", "\n", "                ", "child_hpv", "=", "o", "[", "'hpv'", "]", "\n", "child_hpv_list", ".", "append", "(", "child_hpv", ")", "\n", "", "", "debug", "(", "\"[CRU] getting indices of offspring for {} configurations\"", ".", "format", "(", "len", "(", "child_hpv_list", ")", ")", ")", "\n", "offspring", "=", "self", ".", "search_space", ".", "expand", "(", "child_hpv_list", ")", "\n", "\n", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.resample": [[195, 333], ["resample.CandidateSetResampler.search_space.restore_candidates", "resample.CandidateSetResampler.modeller.get_arm_list", "len", "debug", "resample.CandidateSetResampler.search_space.get_completions", "resample.CandidateSetResampler.modeller.get_model", "resample.CandidateSetResampler.next", "len", "len", "resample.CandidateSetResampler.search_space.set_candidates", "error", "debug", "numpy.array", "resample.CandidateSetResampler.get_top_k_indices", "numpy.random.choice.tolist", "debug", "traceback.format_exc", "len", "debug", "resample.CandidateSetResampler.search_space.get_completions", "len", "numpy.random.choice", "numpy.array", "numpy.random.choice", "len", "resample.CandidateSetResampler.search_space.expand", "numpy.random.choice.tolist", "resample.CandidateSetResampler.search_space.expand", "debug", "len", "random.randint", "resample.CandidateSetResampler.strategy.next", "resample.CandidateSetResampler.search_space.get_candidates", "random.random", "keep_list.append", "resample.CandidateSetResampler.mutate", "len", "len", "resample.CandidateSetResampler.mutate", "resample.CandidateSetResampler.modeller.get_models", "DisparityCheckStrategy", "s_method.rfind", "ValueError", "offspring.append", "len", "len", "s_method.rfind", "len", "offspring.append", "debug", "keep_list.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.restore_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_arm_list", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.set_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.get_top_k_indices", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.random", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.mutate", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.mutate", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_models", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "resample", "(", "self", ",", "s_method", ",", "n_cand", ",", "n_steps", ",", "vetoer", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "search_space", ".", "restore_candidates", "(", ")", "# XXX:reset candidate set", "\n", "\n", "model_name", "=", "'GP'", "# default BO model", "\n", "acq_func_name", "=", "'EI'", "# default acquisition function", "\n", "arms", "=", "self", ".", "modeller", ".", "get_arm_list", "(", ")", "\n", "\n", "m_i", "=", "0", "\n", "\n", "if", "'UNIFORM'", "in", "s_method", ":", "\n", "            ", "model_name", "=", "'ALL'", "\n", "acq_func_name", "=", "'RANDOM'", "\n", "\n", "", "elif", "'HISTORY'", "in", "s_method", ":", "\n", "            ", "model_name", "=", "'HISTORY'", "\n", "acq_func_name", "=", "'RANDOM'", "\n", "\n", "", "elif", "'DIV-SEQ'", "in", "s_method", ":", "\n", "            ", "m_i", "=", "n_steps", "%", "len", "(", "arms", ")", "\n", "a", "=", "arms", "[", "m_i", "]", "\n", "model_name", "=", "a", "[", "'model'", "]", "\n", "acq_func_name", "=", "a", "[", "'acq_func'", "]", "\n", "if", "vetoer", "!=", "None", "and", "vetoer", "[", "'model'", "]", "==", "model_name", "and", "vetoer", "[", "'acq_func'", "]", "==", "acq_func_name", ":", "\n", "# get next model                ", "\n", "                ", "m_i", "=", "(", "n_steps", "+", "1", ")", "%", "len", "(", "arms", ")", "\n", "a", "=", "arms", "[", "m_i", "]", "\n", "model_name", "=", "a", "[", "'model'", "]", "\n", "acq_func_name", "=", "a", "[", "'acq_func'", "]", "\n", "debug", "(", "\"Switching to {}-{}\"", ".", "format", "(", "model_name", ",", "acq_func_name", ")", ")", "\n", "", "", "elif", "'DIV-RANDOM'", "in", "s_method", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "m_i", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "arms", ")", "-", "1", ")", "\n", "a", "=", "arms", "[", "m_i", "]", "\n", "model_name", "=", "a", "[", "'model'", "]", "\n", "acq_func_name", "=", "a", "[", "'acq_func'", "]", "\n", "if", "vetoer", "!=", "None", "and", "vetoer", "[", "'model'", "]", "!=", "model_name", "and", "vetoer", "[", "'acq_func'", "]", "!=", "acq_func_name", ":", "\n", "                    ", "break", "\n", "", "", "", "elif", "'DIV-DISP'", "in", "s_method", ":", "\n", "            ", "if", "self", ".", "strategy", "is", "None", ":", "\n", "                ", "from", "optimizers", ".", "arms", ".", "strategies", "import", "DisparityCheckStrategy", "\n", "choosers", "=", "self", ".", "modeller", ".", "get_models", "(", ")", "\n", "self", ".", "strategy", "=", "DisparityCheckStrategy", "(", "arms", ",", "\n", "[", "0.0", "for", "a", "in", "arms", "]", ",", "[", "0", "for", "a", "in", "arms", "]", ",", "\n", "choosers", ")", "\n", "", "m_i", "=", "self", ".", "strategy", ".", "next", "(", "n_steps", ")", "\n", "a", "=", "arms", "[", "m_i", "]", "\n", "model_name", "=", "a", "[", "'model'", "]", "\n", "acq_func_name", "=", "a", "[", "'acq_func'", "]", "\n", "\n", "", "elif", "not", "'DIV-'", "in", "s_method", ":", "# deterministic BO model", "\n", "            ", "m_i", "=", "s_method", ".", "rfind", "(", "'-'", ")", "\n", "last_token", "=", "s_method", "[", "m_i", "+", "1", ":", "]", "\n", "#print(last_token)", "\n", "# check last token ", "\n", "if", "'M'", "in", "last_token", "or", "'CO'", "in", "last_token", ":", "\n", "                ", "m_j", "=", "s_method", ".", "rfind", "(", "'-'", ",", "0", ",", "m_i", "-", "1", ")", "\n", "model_name", "=", "s_method", "[", ":", "m_j", "]", "\n", "acq_func_name", "=", "s_method", "[", "m_j", "+", "1", ":", "m_i", "]", "\n", "", "else", ":", "\n", "                ", "model_name", "=", "s_method", "[", ":", "m_i", "]", "\n", "acq_func_name", "=", "s_method", "[", "m_i", "+", "1", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported model to sample: {}\"", ".", "format", "(", "s_method", ")", ")", "\n", "\n", "", "d", "=", "len", "(", "self", ".", "search_space", ".", "get_completions", "(", ")", ")", "\n", "debug", "(", "'Resampling with {}-{} (obs.# {})'", ".", "format", "(", "model_name", ",", "acq_func_name", ",", "d", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "parents", "=", "[", "]", "\n", "samples", "=", "[", "]", "\n", "if", "'RANDOM'", "==", "acq_func_name", ":", "\n", "                ", "if", "model_name", "==", "'HISTORY'", ":", "\n", "                    ", "parents", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_completions", "(", ")", ")", "\n", "if", "len", "(", "parents", ")", "<", "10", ":", "# XXX:ignore when minimum history size", "\n", "                        ", "parents", "=", "[", "]", "\n", "", "else", ":", "\n", "                        ", "parents", "=", "np", ".", "random", ".", "choice", "(", "parents", ",", "n_cand", ")", "\n", "\n", "", "", "elif", "model_name", "==", "'ALL'", ":", "\n", "                    ", "all_parents", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "parents", "=", "np", ".", "random", ".", "choice", "(", "all_parents", ",", "n_cand", ")", "\n", "", "", "else", ":", "\n", "                ", "model", "=", "self", ".", "modeller", ".", "get_model", "(", "model_name", ")", "\n", "_", ",", "estimates", "=", "model", ".", "next", "(", "acq_func_name", ")", "\n", "\n", "if", "estimates", "!=", "None", ":", "\n", "                    ", "parents", "=", "self", ".", "get_top_k_indices", "(", "estimates", ",", "n_cand", ")", "\n", "\n", "", "", "if", "len", "(", "parents", ")", ">", "0", ":", "\n", "\n", "# mutation based recombination strategies", "\n", "                ", "if", "'-XM'", "in", "s_method", ":", "\n", "# performing mutation 0.5, none 0.5", "\n", "                    ", "offspring", "=", "[", "]", "\n", "keep_list", "=", "[", "]", "\n", "\n", "for", "p_index", "in", "parents", ".", "tolist", "(", ")", ":", "\n", "                        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "# keep parent", "\n", "                            ", "keep_list", ".", "append", "(", "p_index", ")", "\n", "", "else", ":", "\n", "                            ", "o_hpv", "=", "self", ".", "mutate", "(", "p_index", ",", "seed_var", "=", "n_cand", ")", "\n", "for", "v", "in", "o_hpv", ":", "\n", "                                ", "if", "len", "(", "v", ")", ">", "0", ":", "#XXX: skip empty list", "\n", "                                    ", "offspring", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                                    ", "debug", "(", "'mutated offspring is invalid: {}'", ".", "format", "(", "v", ")", ")", "\n", "keep_list", ".", "append", "(", "p_index", ")", "\n", "", "", "", "", "if", "len", "(", "offspring", ")", ">", "0", ":", "\n", "                        ", "samples", "=", "self", ".", "search_space", ".", "expand", "(", "offspring", ")", "\n", "#debug('mutated candidates: {}'.format(samples))", "\n", "#debug('selected candidates: {}'.format(keep_list))", "\n", "samples", "+=", "keep_list", "\n", "", "else", ":", "\n", "                        ", "samples", "=", "keep_list", "\n", "", "debug", "(", "\"Offsprings generated by mutation ({}) or origin ({})\"", ".", "format", "(", "len", "(", "offspring", ")", ",", "len", "(", "keep_list", ")", ")", ")", "\n", "", "elif", "'-M'", "in", "s_method", ":", "\n", "# performing mutation ", "\n", "                    ", "offspring", "=", "[", "]", "\n", "for", "p_index", "in", "parents", ".", "tolist", "(", ")", ":", "\n", "                        ", "o_hpv", "=", "self", ".", "mutate", "(", "p_index", ",", "seed_var", "=", "n_cand", ")", "\n", "for", "v", "in", "o_hpv", ":", "\n", "                            ", "offspring", ".", "append", "(", "v", ")", "\n", "\n", "", "", "samples", "=", "self", ".", "search_space", ".", "expand", "(", "offspring", ")", "\n", "debug", "(", "\"offsprings by mutation: {}\"", ".", "format", "(", "len", "(", "samples", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "# No variation operator", "\n", "                    ", "samples", "=", "parents", "\n", "\n", "", "", "if", "len", "(", "samples", ")", ">", "0", ":", "\n", "                ", "self", ".", "search_space", ".", "set_candidates", "(", "samples", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "error", "(", "\"Resampling candidate error at {} iterations: {}\"", ".", "format", "(", "n_steps", ",", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.__init__": [[10, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "goal_metric", ",", "report_type", "=", "'test'", ")", ":", "\n", "\n", "        ", "self", ".", "result", "=", "{", "}", "\n", "self", ".", "goal_metric", "=", "goal_metric", "\n", "\n", "self", ".", "result", "[", "'error'", "]", "=", "[", "]", "\n", "if", "goal_metric", "==", "'accuracy'", ":", "\n", "            ", "self", ".", "result", "[", "'accuracy'", "]", "=", "[", "]", "\n", "#self.result['metrics'] = []", "\n", "\n", "", "self", ".", "report_type", "=", "report_type", "\n", "\n", "# list of the estimated execution time of a candidate", "\n", "#self.result['est_exec_time'] = []", "\n", "self", ".", "result", "[", "'exec_time'", "]", "=", "[", "]", "\n", "self", ".", "result", "[", "'opt_time'", "]", "=", "[", "]", "\n", "\n", "self", ".", "result", "[", "'model_idx'", "]", "=", "[", "]", "# for tracing selected candidates", "\n", "self", ".", "result", "[", "'select_trace'", "]", "=", "[", "]", "# for tracing arm selection", "\n", "self", ".", "result", "[", "'train_epoch'", "]", "=", "[", "]", "\n", "\n", "self", ".", "result", "[", "'num_duplicates'", "]", "=", "[", "]", "\n", "#self.result['force_terminate'] = False # whether it found a goal or not", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.append": [[36, 59], ["eval_result.keys", "warn", "repo.ResultsRepository.result[].append", "repo.ResultsRepository.result[].append", "repo.ResultsRepository.result[].append", "repo.ResultsRepository.result[].append", "repo.ResultsRepository.result[].append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "append", "(", "self", ",", "eval_result", ")", ":", "\n", "        ", "if", "not", "'test_error'", "in", "eval_result", "and", "not", "'valid_error'", "in", "eval_result", ":", "\n", "            ", "warn", "(", "\"Invalid evaluation result: {}\"", ".", "format", "(", "eval_result", ")", ")", "\n", "return", "\n", "\n", "", "for", "k", "in", "eval_result", ".", "keys", "(", ")", ":", "\n", "            ", "v", "=", "eval_result", "[", "k", "]", "\n", "\n", "if", "k", "in", "self", ".", "result", ":", "\n", "                ", "self", ".", "result", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "elif", "self", ".", "report_type", "==", "'test'", "and", "k", "==", "'test_error'", ":", "\n", "                ", "self", ".", "result", "[", "'error'", "]", ".", "append", "(", "v", ")", "\n", "", "elif", "self", ".", "report_type", "==", "'validation'", "and", "k", "==", "'valid_error'", ":", "\n", "                ", "self", ".", "result", "[", "'error'", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "if", "not", "'test_accuracy'", "in", "eval_result", "and", "self", ".", "goal_metric", "==", "\"accuracy\"", ":", "\n", "\n", "            ", "if", "self", ".", "report_type", "==", "'test'", "and", "'test_error'", "in", "eval_result", ":", "\n", "                ", "test_acc", "=", "1.0", "-", "eval_result", "[", "'test_error'", "]", "\n", "self", ".", "result", "[", "'accuracy'", "]", ".", "append", "(", "test_acc", ")", "\n", "", "elif", "self", ".", "report_type", "==", "'validation'", "and", "'valid_error'", "in", "eval_result", ":", "\n", "                ", "valid_acc", "=", "1.0", "-", "eval_result", "[", "'valid_error'", "]", "\n", "self", ".", "result", "[", "'accuracy'", "]", ".", "append", "(", "valid_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.count_duplicates": [[60, 67], ["repo.ResultsRepository.result[].append", "selects.append", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "count_duplicates", "(", "self", ",", "shelves", ")", ":", "\n", "        ", "selects", "=", "[", "]", "\n", "for", "s", "in", "shelves", ":", "\n", "            ", "selects", ".", "append", "(", "s", "[", "'model_idx'", "]", ")", "\n", "", "num_duplicate", "=", "len", "(", "selects", ")", "-", "len", "(", "set", "(", "selects", ")", ")", "\n", "\n", "self", ".", "result", "[", "'num_duplicates'", "]", ".", "append", "(", "num_duplicate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.update_trace": [[68, 70], ["repo.ResultsRepository.result[].append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "update_trace", "(", "self", ",", "optimizer", ",", "acquistion_func", ")", ":", "\n", "        ", "self", ".", "result", "[", "'select_trace'", "]", ".", "append", "(", "optimizer", "+", "'_'", "+", "acquistion_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.save_select_status": [[71, 74], ["None"], "methods", ["None"], ["", "def", "save_select_status", "(", "self", ",", "values", ",", "counts", ")", ":", "\n", "        ", "self", ".", "result", "[", "'mean_rewards'", "]", "=", "values", "\n", "self", ".", "result", "[", "'selected_counts'", "]", "=", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_elapsed_time": [[75, 83], ["len", "sum", "len", "sum"], "methods", ["None"], ["", "def", "get_elapsed_time", "(", "self", ")", ":", "\n", "        ", "elapsed_time", "=", "0", "\n", "if", "len", "(", "self", ".", "result", "[", "'exec_time'", "]", ")", ">", "0", ":", "\n", "            ", "elapsed_time", "+=", "sum", "(", "self", ".", "result", "[", "'exec_time'", "]", ")", "\n", "", "if", "len", "(", "self", ".", "result", "[", "'opt_time'", "]", ")", ">", "0", ":", "\n", "            ", "elapsed_time", "+=", "sum", "(", "self", ".", "result", "[", "'opt_time'", "]", ")", "\n", "\n", "", "return", "elapsed_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_current_status": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_current_status", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values": [[87, 92], ["None"], "methods", ["None"], ["", "def", "get_values", "(", "self", ",", "property", ")", ":", "\n", "        ", "if", "property", "in", "self", ".", "result", ":", "\n", "            ", "return", "self", ".", "result", "[", "property", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_value": [[93, 99], ["len", "len"], "methods", ["None"], ["", "", "def", "get_value", "(", "self", ",", "property", ",", "index", ")", ":", "\n", "        ", "if", "property", "in", "self", ".", "result", ":", "\n", "            ", "if", "len", "(", "self", ".", "result", "[", "property", "]", ")", "!=", "0", ":", "\n", "                ", "if", "len", "(", "self", ".", "result", "[", "property", "]", ")", ">", "index", ":", "\n", "                    ", "return", "self", ".", "result", "[", "property", "]", "[", "index", "]", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_total_duration": [[100, 103], ["None"], "methods", ["None"], ["", "def", "get_total_duration", "(", "self", ",", "index", ")", ":", "\n", "        ", "time", "=", "self", ".", "result", "[", "'opt_time'", "]", "[", "index", "]", "+", "self", ".", "result", "[", "'exec_time'", "]", "[", "index", "]", "\n", "return", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.BatchResultsRepository.__init__": [[106, 108], ["repo.ResultsRepository.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "report_type", "=", "'test'", ")", ":", "\n", "        ", "return", "super", "(", "BatchResultsRepository", ",", "self", ")", ".", "__init__", "(", "'accuracy'", ",", "report_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.BatchResultsRepository.update_batch_result": [[109, 122], ["b[].get_values", "b[].get_values", "b[].get_values", "b[].get_values", "b[].get_values", "b[].get_values"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_values"], ["", "def", "update_batch_result", "(", "self", ",", "bandits", ")", ":", "\n", "\n", "        ", "self", ".", "result", "[", "'model_idx'", "]", "=", "[", "b", "[", "'local_result'", "]", ".", "get_values", "(", "'model_idx'", ")", "for", "b", "in", "bandits", "]", "\n", "self", ".", "result", "[", "'error'", "]", "=", "[", "b", "[", "'local_result'", "]", ".", "get_values", "(", "'error'", ")", "for", "b", "in", "bandits", "]", "\n", "self", ".", "result", "[", "'accuracy'", "]", "=", "[", "b", "[", "'local_result'", "]", ".", "get_values", "(", "'accuracy'", ")", "for", "b", "in", "bandits", "]", "\n", "\n", "#self.result['est_exec_time'] = [ b['local_result'].get_values('est_exec_time') for b in bandits ]", "\n", "self", ".", "result", "[", "'exec_time'", "]", "=", "[", "b", "[", "'local_result'", "]", ".", "get_values", "(", "'exec_time'", ")", "for", "b", "in", "bandits", "]", "\n", "self", ".", "result", "[", "'opt_time'", "]", "=", "[", "b", "[", "'local_result'", "]", ".", "get_values", "(", "'opt_time'", ")", "for", "b", "in", "bandits", "]", "\n", "\n", "self", ".", "result", "[", "'iters'", "]", "=", "[", "b", "[", "'cur_iters'", "]", "for", "b", "in", "bandits", "]", "\n", "self", ".", "result", "[", "'num_duplicates'", "]", "=", "[", "b", "[", "'num_duplicates'", "]", "for", "b", "in", "bandits", "]", "\n", "self", ".", "result", "[", "'select_trace'", "]", "=", "[", "b", "[", "'local_result'", "]", ".", "get_values", "(", "'select_trace'", ")", "for", "b", "in", "bandits", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.__init__.create_emulator": [[4, 28], ["get_dnn_train_simulator", "bandit.HPOBanditMachine", "get_dnn_train_simulator.get_min_train_epoch"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_dnn_train_simulator", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_trainer.TabularFCNetTrainEmulator.get_min_train_epoch"], [""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.__init__.create_runner": [[30, 53], ["bandit.HPOBanditMachine"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.__init__": [[27, 103], ["s_space.get_name", "xoa.commons.converter.TimestringConverter().convert", "optimizers.repo.ResultsRepository", "bandit.HPOBanditMachine.show_run_condition", "info", "xoa.commons.converter.TimestringConverter", "xoa.commons.converter.TimestringConverter().convert", "xoa.commons.converter.TimestringConverter"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_name", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.show_run_condition", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.convert"], ["def", "__init__", "(", "self", ",", "s_space", ",", "trainer", ",", "\n", "run_mode", ",", "target_val", ",", "time_expired", ",", "run_config", ",", "goal_metric", ",", "\n", "num_resume", "=", "0", ",", "\n", "save_internal", "=", "False", ",", "\n", "calc_measure", "=", "False", ",", "\n", "min_train_epoch", "=", "1", ",", "\n", "id", "=", "\"HPOBanditMachine\"", ")", ":", "\n", "\n", "        ", "self", ".", "id", "=", "id", "\n", "\n", "self", ".", "search_space", "=", "s_space", "\n", "self", ".", "save_name", "=", "s_space", ".", "get_name", "(", ")", "\n", "\n", "self", ".", "trainer", "=", "trainer", "\n", "\n", "self", ".", "calc_measure", "=", "calc_measure", "\n", "\n", "self", ".", "target_goal", "=", "target_val", "\n", "self", ".", "goal_metric", "=", "goal_metric", "\n", "self", ".", "time_expired", "=", "TimestringConverter", "(", ")", ".", "convert", "(", "time_expired", ")", "\n", "\n", "self", ".", "save_internal", "=", "save_internal", "\n", "if", "self", ".", "save_internal", ":", "\n", "            ", "info", "(", "\"Internal data will be stored.\"", ")", "\n", "", "self", ".", "num_resume", "=", "num_resume", "\n", "self", ".", "min_candidates", "=", "100", "# XXX:any number to be tested ", "\n", "self", ".", "cs", "=", "None", "# candidate sampler", "\n", "\n", "self", ".", "warm_up", "=", "{", "'time'", ":", "None", ",", "'iters'", ":", "0", ",", "'select'", ":", "{", "}", ",", "'revisit'", ":", "2", "}", "\n", "\n", "self", ".", "warm_up_revisit", "=", "2", "# XXX: number of best configurations from warm-up phase to be revisited", "\n", "\n", "self", ".", "run_config", "=", "run_config", "\n", "self", ".", "min_train_epoch", "=", "min_train_epoch", "\n", "self", ".", "max_train_epoch", "=", "None", "\n", "self", ".", "use_interim", "=", "True", "\n", "self", ".", "max_error", "=", "100.0", "\n", "\n", "self", ".", "report_type", "=", "'test'", "\n", "\n", "if", "self", ".", "run_config", ":", "\n", "            ", "if", "\"min_train_epoch\"", "in", "self", ".", "run_config", ":", "\n", "                ", "self", ".", "min_train_epoch", "=", "self", ".", "run_config", "[", "\"min_train_epoch\"", "]", "\n", "\n", "", "if", "\"max_train_epoch\"", "in", "self", ".", "run_config", ":", "\n", "                ", "self", ".", "max_train_epoch", "=", "self", ".", "run_config", "[", "\"max_train_epoch\"", "]", "\n", "\n", "", "if", "\"warm_up\"", "in", "self", ".", "run_config", ":", "\n", "                ", "warm_up_cfg", "=", "self", ".", "run_config", "[", "\"warm_up\"", "]", "\n", "if", "\"time\"", "in", "warm_up_cfg", ":", "\n", "                    ", "self", ".", "warm_up", "[", "'time'", "]", "=", "TimestringConverter", "(", ")", ".", "convert", "(", "warm_up_cfg", "[", "\"time\"", "]", ")", "\n", "\n", "", "if", "\"iters\"", "in", "warm_up_cfg", ":", "\n", "                    ", "self", ".", "warm_up", "[", "'iters'", "]", "=", "warm_up_cfg", "[", "\"iters\"", "]", "\n", "\n", "", "if", "\"revisit\"", "in", "warm_up_cfg", ":", "\n", "                    ", "self", ".", "warm_up", "[", "'revisit'", "]", "=", "warm_up_cfg", "[", "'revisit'", "]", "\n", "\n", "", "", "if", "\"report_type\"", "in", "self", ".", "run_config", ":", "\n", "                ", "self", ".", "report_type", "=", "self", ".", "run_config", "[", "'report_type'", "]", "\n", "\n", "", "if", "\"use_interim\"", "in", "self", ".", "run_config", ":", "\n", "                ", "self", ".", "use_interim", "=", "self", ".", "run_config", "[", "'use_interim'", "]", "\n", "\n", "", "", "self", ".", "run_mode", "=", "run_mode", "# can be 'GOAL' or 'TIME'", "\n", "self", ".", "print_exception_trace", "=", "False", "\n", "\n", "self", ".", "stop_flag", "=", "False", "\n", "\n", "self", ".", "repo", "=", "ResultsRepository", "(", "self", ".", "goal_metric", ",", "self", ".", "report_type", ")", "\n", "self", ".", "cur_results", "=", "None", "\n", "self", ".", "incumbent", "=", "None", "\n", "self", ".", "steps_after_best", "=", "0", "\n", "self", ".", "fail_time", "=", "0.0", "\n", "\n", "self", ".", "show_run_condition", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_search_space": [[104, 106], ["None"], "methods", ["None"], ["", "def", "get_search_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.show_run_condition": [[107, 128], ["info", "time.localtime", "time.asctime", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "def", "show_run_condition", "(", "self", ")", ":", "\n", "        ", "if", "'num_trials'", "in", "self", ".", "run_config", ":", "\n", "            ", "num_trials", "=", "self", ".", "run_config", "[", "'num_trials'", "]", "\n", "", "else", ":", "\n", "            ", "num_trials", "=", "1", "\n", "\n", "", "mode", "=", "\"{} performance of best configuration\"", ".", "format", "(", "self", ".", "report_type", ")", "\n", "criterion", "=", "\"\"", "\n", "if", "'benchmark_mode'", "in", "self", ".", "run_config", ":", "\n", "            ", "mode", "+=", "\" experimented on benchmark mode\"", "\n", "criterion", "=", "\"when estimated wall clock time expires after {:.0f} sec\"", ".", "format", "(", "self", ".", "time_expired", ")", "\n", "", "else", ":", "\n", "            ", "term_time", "=", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", "+", "(", "self", ".", "time_expired", "*", "num_trials", ")", ")", "\n", "criterion", "=", "\"executing until {}\"", ".", "format", "(", "time", ".", "asctime", "(", "term_time", ")", ")", "\n", "\n", "", "if", "self", ".", "run_mode", "==", "\"GOAL\"", ":", "\n", "            ", "if", "criterion", "!=", "\"\"", ":", "\n", "                ", "criterion", "+=", "\" or \"", "\n", "", "criterion", "+=", "\"when {} {} is achieved\"", ".", "format", "(", "self", ".", "target_goal", ",", "self", ".", "goal_metric", ")", "\n", "\n", "", "info", "(", "\"Termination condition: {}, it will return {} \"", ".", "format", "(", "criterion", ",", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.reset": [[129, 155], ["bandit.HPOBanditMachine.search_space.initialize", "bandit.HPOBanditMachine.trainer.initialize", "optimizers.arms.SurrogateModelManager", "optimizers.repo.ResultsRepository", "bandit.HPOBanditMachine.trainer.get_verifier", "CandidateSetResampler"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.get_verifier"], ["", "def", "reset", "(", "self", ",", "run_config", "=", "None", ")", ":", "\n", "        ", "if", "run_config", "is", "None", ":", "\n", "            ", "run_config", "=", "self", ".", "run_config", "\n", "", "self", ".", "search_space", ".", "initialize", "(", ")", "\n", "self", ".", "trainer", ".", "initialize", "(", ")", "\n", "v", "=", "None", "\n", "if", "\"search_space\"", "in", "self", ".", "run_config", ":", "\n", "            ", "s_spec", "=", "self", ".", "run_config", "[", "'search_space'", "]", "\n", "\n", "if", "\"verification\"", "in", "s_spec", "and", "s_spec", "[", "\"verification\"", "]", "==", "True", ":", "\n", "                ", "v", "=", "self", ".", "trainer", ".", "get_verifier", "(", ")", "\n", "\n", "", "", "self", ".", "mab", "=", "SurrogateModelManager", "(", "self", ".", "search_space", ",", "run_config", ",", "verifier", "=", "v", ")", "\n", "self", ".", "repo", "=", "ResultsRepository", "(", "self", ".", "goal_metric", ",", "self", ".", "report_type", ")", "\n", "# initialize candidate sampler", "\n", "if", "\"search_space\"", "in", "self", ".", "run_config", ":", "\n", "            ", "s_spec", "=", "self", ".", "run_config", "[", "'search_space'", "]", "\n", "if", "\"resample\"", "in", "s_spec", ":", "\n", "                ", "method", "=", "s_spec", "[", "'resample'", "]", "\n", "self", ".", "cs", "=", "CandidateSetResampler", "(", "self", ".", "search_space", ",", "self", ".", "mab", ",", "v", ")", "\n", "\n", "", "", "self", ".", "incumbent", "=", "None", "\n", "self", ".", "steps_after_best", "=", "0", "\n", "self", ".", "fail_time", "=", "0.0", "\n", "\n", "self", ".", "warm_up", "[", "'select'", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.stop": [[157, 159], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop_flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_cur_runtime": [[160, 162], ["bandit.HPOBanditMachine.repo.get_elapsed_time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.get_elapsed_time"], ["", "def", "get_cur_runtime", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "repo", ".", "get_elapsed_time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.choose_by_prior": [[163, 185], ["bandit.HPOBanditMachine.warm_up[].keys", "sorted", "bandit.HPOBanditMachine.search_space.get_errors", "bandit.HPOBanditMachine.warm_up[].items", "warn", "type", "ValueError", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "choose_by_prior", "(", "self", ",", "n_rank", ")", ":", "\n", "        ", "try", ":", "\n", "# returns n_rank th best performed configurations(which has high performance)", "\n", "            ", "for", "k", "in", "self", ".", "warm_up", "[", "'select'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "err", "=", "self", ".", "search_space", ".", "get_errors", "(", "k", ",", "error_type", "=", "'test'", ")", "\n", "if", "type", "(", "err", ")", "==", "list", ":", "\n", "                    ", "err", "=", "err", "[", "0", "]", "\n", "", "s", "=", "self", ".", "warm_up", "[", "'select'", "]", "[", "k", "]", "\n", "\n", "if", "s", "[", "'index'", "]", "!=", "k", ":", "# validate key-value set", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid key-value pair in dictionary.\"", ")", "\n", "", "if", "err", "==", "None", "or", "np", ".", "isnan", "(", "err", ")", ":", "\n", "                    ", "err", "=", "MAX_ERROR", "\n", "", "s", "[", "'test_error'", "]", "=", "err", "\n", "\n", "", "sorted_list", "=", "sorted", "(", "self", ".", "warm_up", "[", "'select'", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "'test_error'", "]", ")", "\n", "r", "=", "sorted_list", "[", "n_rank", "]", "[", "1", "]", "\n", "return", "r", "[", "'index'", "]", ",", "r", "[", "'model'", "]", ",", "r", "[", "'acq_func'", "]", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception at choosing by prior: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "return", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.is_warm_up_stage": [[186, 201], ["bandit.HPOBanditMachine.get_cur_runtime", "len", "bandit.HPOBanditMachine.warm_up[].keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_cur_runtime"], ["", "", "def", "is_warm_up_stage", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "warm_up", "[", "'time'", "]", "!=", "None", ":", "\n", "            ", "if", "self", ".", "get_cur_runtime", "(", ")", "<=", "self", ".", "warm_up", "[", "'time'", "]", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "if", "self", ".", "warm_up", "[", "'select'", "]", "!=", "None", ":", "\n", "            ", "if", "self", ".", "warm_up", "[", "'iters'", "]", "<=", "len", "(", "self", ".", "warm_up", "[", "'select'", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "else", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.choose": [[202, 245], ["len", "len", "debug", "bandit.HPOBanditMachine.mab.get_model", "bandit.HPOBanditMachine.is_warm_up_stage", "len", "len", "bandit.HPOBanditMachine.next", "search_space.get_completions", "search_space.get_candidates", "debug", "bandit.HPOBanditMachine.next", "bandit.HPOBanditMachine.next", "bandit.HPOBanditMachine.warm_up[].keys", "debug", "search_space.get_completions", "bandit.HPOBanditMachine.choose_by_prior", "debug", "info", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.is_warm_up_stage", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.choose_by_prior", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "", "def", "choose", "(", "self", ",", "model_name", ",", "acq_func", ",", "search_space", "=", "None", ")", ":", "\n", "\n", "        ", "if", "search_space", "==", "None", ":", "\n", "            ", "search_space", "=", "self", ".", "search_space", "\n", "\n", "", "d", "=", "len", "(", "search_space", ".", "get_completions", "(", ")", ")", "\n", "c", "=", "len", "(", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "debug", "(", "\"Choosing next candidate using {}-{} (obs.# {}, cand.# {})\"", ".", "format", "(", "model_name", ",", "acq_func", ",", "d", ",", "c", ")", ")", "\n", "model", "=", "self", ".", "mab", ".", "get_model", "(", "model_name", ")", "\n", "\n", "if", "self", ".", "is_warm_up_stage", "(", ")", ":", "\n", "# low-fidelity optimization mode", "\n", "            ", "debug", "(", "\"Low-fidelity optimization will be performed\"", ")", "\n", "next_index", ",", "est_values", "=", "model", ".", "next", "(", "acq_func", ")", "\n", "self", ".", "warm_up", "[", "'select'", "]", "[", "next_index", "]", "=", "{", "\"model\"", ":", "model_name", ",", "\"acq_func\"", ":", "acq_func", ",", "\"index\"", ":", "next_index", "}", "\n", "\n", "return", "next_index", ",", "est_values", ",", "self", ".", "min_train_epoch", "\n", "\n", "# high-fidelity optimization mode", "\n", "", "if", "self", ".", "warm_up", "[", "'select'", "]", "==", "None", ":", "\n", "            ", "next_index", ",", "est_values", "=", "model", ".", "next", "(", "acq_func", ",", "self", ".", "min_train_epoch", ")", "\n", "return", "next_index", ",", "est_values", ",", "self", ".", "max_train_epoch", "\n", "\n", "", "n_warm_up", "=", "len", "(", "self", ".", "warm_up", "[", "'select'", "]", ".", "keys", "(", ")", ")", "\n", "if", "n_warm_up", "<", "self", ".", "warm_up_revisit", ":", "\n", "            ", "debug", "(", "\"The # of obs. in warm-up phase is less than {}: {}.\"", ".", "format", "(", "self", ".", "warm_up_revisit", ",", "len", "(", "self", ".", "warm_up", "[", "'select'", "]", ")", ")", ")", "\n", "self", ".", "warm_up_revisit", "=", "n_warm_up", "\n", "\n", "# high-fidelity optimization from low-fidelity results", "\n", "", "n_compl", "=", "len", "(", "search_space", ".", "get_completions", "(", "self", ".", "min_train_epoch", ")", ")", "# get high fidelity results only", "\n", "if", "n_compl", "<", "self", ".", "warm_up_revisit", ":", "\n", "\n", "            ", "next_index", ",", "model_name", ",", "acq_func", "=", "self", ".", "choose_by_prior", "(", "search_space", ",", "n_compl", ")", "\n", "if", "next_index", "!=", "None", ":", "\n", "                ", "info", "(", "\"High-fidelity optimization of {}: {}/{}\"", ".", "format", "(", "next_index", ",", "n_compl", "+", "1", ",", "self", ".", "warm_up_revisit", ")", ")", "\n", "return", "next_index", ",", "None", ",", "self", ".", "max_train_epoch", "\n", "\n", "", "", "if", "self", ".", "warm_up", "[", "'select'", "]", "!=", "None", ":", "\n", "            ", "debug", "(", "\"Low-fidelity optimization ended completely.\"", ")", "\n", "self", ".", "warm_up", "[", "'select'", "]", "=", "None", "# end of restoration", "\n", "\n", "", "next_index", ",", "est_values", "=", "model", ".", "next", "(", "acq_func", ",", "self", ".", "min_train_epoch", ")", "\n", "return", "next_index", ",", "est_values", ",", "self", ".", "max_train_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.evaluate": [[246, 301], ["time.time", "bandit.HPOBanditMachine.trainer.get_interim_error", "bandit.HPOBanditMachine.search_space.update_error", "bandit.HPOBanditMachine.trainer.train", "bandit.HPOBanditMachine.search_space.update_error", "bandit.HPOBanditMachine.search_space.update_error", "error", "sys.exit", "warn", "traceback.print_exc", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_trainer.TabularFCNetTrainEmulator.get_interim_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.update_error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.exit", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "evaluate", "(", "self", ",", "cand_index", ",", "train_epoch", ")", ":", "\n", "\n", "        ", "eval_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "if", "self", ".", "use_interim", ":", "\n", "# set initial error for avoiding duplicate", "\n", "            ", "interim_error", ",", "cur_epoch", "=", "self", ".", "trainer", ".", "get_interim_error", "(", "cand_index", ")", "\n", "self", ".", "search_space", ".", "update_error", "(", "cand_index", ",", "interim_error", ",", "num_epochs", "=", "cur_epoch", ",", "error_type", "=", "'valid'", ")", "\n", "", "else", ":", "\n", "            ", "interim_error", "=", "self", ".", "max_error", "\n", "", "try", ":", "\n", "            ", "train_result", "=", "self", ".", "trainer", ".", "train", "(", "cand_index", ",", "train_epoch", ")", "\n", "\n", "", "except", "SystemError", "as", "se", ":", "\n", "            ", "error", "(", "\"System error from trainer: {}\"", ".", "format", "(", "se", ")", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception from trainer: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "train_result", "=", "None", "\n", "\n", "", "if", "train_result", "==", "None", "or", "not", "'test_error'", "in", "train_result", ":", "\n", "            ", "train_result", "=", "{", "}", "\n", "# return interim error for avoiding stopping", "\n", "train_result", "[", "'test_error'", "]", "=", "interim_error", "\n", "train_result", "[", "'early_terminated'", "]", "=", "True", "\n", "test_error", "=", "interim_error", "\n", "", "else", ":", "\n", "            ", "test_error", "=", "train_result", "[", "'test_error'", "]", "\n", "\n", "", "train_result", "[", "'model_idx'", "]", "=", "cand_index", "\n", "\n", "if", "not", "'exec_time'", "in", "train_result", ":", "\n", "            ", "train_result", "[", "'exec_time'", "]", "=", "time", ".", "time", "(", ")", "-", "eval_start_time", "\n", "\n", "", "if", "'train_epoch'", "in", "train_result", ":", "\n", "            ", "train_epoch", "=", "train_result", "[", "'train_epoch'", "]", "\n", "", "else", ":", "\n", "            ", "train_result", "[", "'train_epoch'", "]", "=", "train_epoch", "\n", "\n", "# Set final performance", "\n", "", "if", "test_error", "!=", "None", ":", "\n", "            ", "self", ".", "search_space", ".", "update_error", "(", "cand_index", ",", "test_error", ",", "train_epoch", ",", "error_type", "=", "'test'", ")", "\n", "\n", "", "if", "'valid_error'", "in", "train_result", ":", "\n", "            ", "valid_error", "=", "train_result", "[", "'valid_error'", "]", "\n", "", "else", ":", "\n", "            ", "valid_error", "=", "test_error", "# use of test error as validation error", "\n", "\n", "", "if", "valid_error", "!=", "None", ":", "\n", "            ", "self", ".", "search_space", ".", "update_error", "(", "cand_index", ",", "valid_error", ",", "train_epoch", ",", "error_type", "=", "'valid'", ")", "\n", "\n", "", "return", "train_result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.pull": [[302, 393], ["bandit.HPOBanditMachine.repo.update_trace", "bandit.HPOBanditMachine.evaluate", "bandit.HPOBanditMachine.repo.append", "bandit.HPOBanditMachine.search_space.restore_candidates", "time.time", "bandit.HPOBanditMachine.mab.get_selected_model", "bandit.HPOBanditMachine.choose", "time.time", "warn", "bandit.HPOBanditMachine.mab.feedback", "float", "type", "bandit.HPOBanditMachine.choose", "bandit.HPOBanditMachine.update_space", "Exception", "Exception", "bandit.HPOBanditMachine.resample_candidates", "bandit.HPOBanditMachine.mab.get_others_best", "est_values[].append", "error", "warn", "str", "traceback.format_exc", "ValueError", "bandit.HPOBanditMachine.keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.update_trace", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.adaptive_space.AdaptiveConfigurationSpace.restore_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_selected_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.choose", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.feedback", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.choose", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.update_space", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.resample_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_others_best", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "pull", "(", "self", ",", "n_steps", ")", ":", "\n", "        ", "model", "=", "'NONE'", "\n", "acq_func", "=", "'RANDOM'", "\n", "s_spec", "=", "{", "}", "\n", "\n", "try", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "incumbent", "!=", "None", "and", "\"known_best\"", "in", "self", ".", "run_config", ":", "\n", "                ", "k_b", "=", "float", "(", "self", ".", "run_config", "[", "\"known_best\"", "]", ")", "\n", "#debug(\"Current best: {}, known best: {}\".format(self.incumbent, k_b))", "\n", "# speedup remained iterations using random selection", "\n", "if", "self", ".", "goal_metric", "==", "\"error\"", "and", "self", ".", "incumbent", "<=", "k_b", ":", "\n", "                    ", "self", ".", "cs", "=", "None", "# XXX:stop to resample candidates", "\n", "raise", "Exception", "(", "'optimal error ({}) has been achieved.'", ".", "format", "(", "k_b", ")", ")", "\n", "\n", "", "if", "self", ".", "goal_metric", "==", "\"accuracy\"", "and", "self", ".", "incumbent", ">=", "k_b", ":", "\n", "                    ", "self", ".", "cs", "=", "None", "# XXX:stop to resample candidates", "\n", "raise", "Exception", "(", "'optimal accuarcy ({}) has been achieved.'", ".", "format", "(", "k_b", ")", ")", "\n", "\n", "", "", "model", ",", "acq_func", "=", "self", ".", "mab", ".", "get_selected_model", "(", "n_steps", ")", "\n", "\n", "if", "\"search_space\"", "in", "self", ".", "run_config", ":", "\n", "                ", "s_spec", "=", "self", ".", "run_config", "[", "'search_space'", "]", "\n", "if", "\"resample\"", "in", "s_spec", ":", "\n", "                    ", "method", "=", "s_spec", "[", "'resample'", "]", "\n", "vetoer", "=", "{", "'model'", ":", "model", ",", "'acq_func'", ":", "acq_func", "}", "\n", "if", "'allow_same_model'", "in", "s_spec", "and", "s_spec", "[", "'allow_same_model'", "]", "==", "True", ":", "\n", "                        ", "vetoer", "=", "None", "\n", "", "", "if", "self", ".", "cs", "is", "not", "None", ":", "\n", "                    ", "self", ".", "resample_candidates", "(", "method", ",", "n_steps", ",", "vetoer", "=", "vetoer", ")", "\n", "\n", "", "", "cand_index", ",", "est_values", ",", "train_epoch", "=", "self", ".", "choose", "(", "model", ",", "acq_func", ")", "\n", "\n", "if", "type", "(", "est_values", ")", "==", "dict", ":", "\n", "                ", "if", "s_spec", "and", "\"evolve_div\"", "in", "s_spec", ":", "\n", "                    ", "est_values", "[", "'all_selection'", "]", "=", "self", ".", "mab", ".", "get_others_best", "(", ")", "\n", "est_values", "[", "'all_selection'", "]", ".", "append", "(", "cand_index", ")", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "self", ".", "stop_flag", "=", "True", "\n", "return", "0.0", ",", "None", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "if", "not", "'has been achieved.'", "in", "str", "(", "ex", ")", ":", "\n", "                ", "error", "(", "\"The next candidate will be randomly chosen due to the following error: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "warn", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "model", "=", "'NONE'", "\n", "acq_func", "=", "'RANDOM'", "\n", "cand_index", ",", "est_values", ",", "train_epoch", "=", "self", ".", "choose", "(", "model", ",", "acq_func", ")", "\n", "\n", "", "self", ".", "repo", ".", "update_trace", "(", "model", ",", "acq_func", ")", "\n", "opt_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "eval_result", "=", "self", ".", "evaluate", "(", "cand_index", ",", "train_epoch", ")", "\n", "eval_result", "[", "'opt_time'", "]", "=", "opt_time", "\n", "\n", "# Check whether the evaluation has been failed", "\n", "if", "'train_failed'", "in", "eval_result", "and", "eval_result", "[", "'train_failed'", "]", "==", "True", ":", "\n", "            ", "warn", "(", "\"Training the configuration #{} failed!\"", ".", "format", "(", "cand_index", ")", ")", "\n", "", "elif", "\"add\"", "in", "s_spec", "or", "\"remove\"", "in", "s_spec", "or", "\"intensify\"", "in", "s_spec", "or", "\"evolve\"", "in", "s_spec", "or", "\"resample_steps\"", "in", "s_spec", ":", "\n", "# update posterior distribution of the samples", "\n", "            ", "self", ".", "update_space", "(", "n_steps", ",", "s_spec", ",", "eval_result", ",", "est_values", ")", "\n", "\n", "# update evaluation result", "\n", "", "self", ".", "repo", ".", "append", "(", "eval_result", ")", "\n", "\n", "# reset candidate set", "\n", "self", ".", "search_space", ".", "restore_candidates", "(", ")", "\n", "\n", "\n", "y", "=", "None", "\n", "if", "self", ".", "report_type", "==", "'test'", "and", "'test_{}'", ".", "format", "(", "self", ".", "goal_metric", ")", "in", "eval_result", ":", "\n", "            ", "y", "=", "eval_result", "[", "'test_{}'", ".", "format", "(", "self", ".", "goal_metric", ")", "]", "\n", "", "elif", "self", ".", "report_type", "==", "'validation'", "and", "'valid_{}'", ".", "format", "(", "self", ".", "goal_metric", ")", "in", "eval_result", ":", "\n", "            ", "y", "=", "eval_result", "[", "'valid_{}'", ".", "format", "(", "self", ".", "goal_metric", ")", "]", "\n", "", "elif", "self", ".", "goal_metric", "in", "eval_result", ":", "\n", "            ", "y", "=", "eval_result", "[", "self", ".", "goal_metric", "]", "\n", "", "elif", "self", ".", "goal_metric", "==", "'accuracy'", "and", "'test_error'", "in", "eval_result", ":", "\n", "            ", "y", "=", "1.0", "-", "eval_result", "[", "'test_error'", "]", "\n", "", "elif", "self", ".", "goal_metric", "==", "'accuracy'", "and", "'test_error'", "in", "eval_result", ":", "\n", "            ", "y", "=", "1.0", "-", "eval_result", "[", "'test_error'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No {} in eval_result keys: {}\"", ".", "format", "(", "self", ".", "goal_metric", ",", "eval_result", ".", "keys", "(", ")", ")", ")", "\n", "", "if", "model", "!=", "'NONE'", ":", "\n", "            ", "self", ".", "mab", ".", "feedback", "(", "n_steps", ",", "y", ",", "est_values", ",", "self", ".", "goal_metric", ")", "\n", "\n", "", "return", "y", ",", "est_values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.check_incumbent_updated": [[394, 416], ["bandit.HPOBanditMachine.search_space.get_incumbent", "type", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_incumbent"], ["", "def", "check_incumbent_updated", "(", "self", ",", "eval_result", ")", ":", "\n", "        ", "cur_best", "=", "self", ".", "search_space", ".", "get_incumbent", "(", ")", "\n", "if", "type", "(", "cur_best", ")", "==", "dict", ":", "\n", "            ", "if", "self", ".", "report_type", "==", "'test'", ":", "\n", "                ", "if", "'test_error'", "in", "cur_best", "and", "'test_error'", "in", "eval_result", ":", "\n", "# Only when last evaluation updates the current best performance ", "\n", "                    ", "best_err", "=", "cur_best", "[", "'test_error'", "]", "# None when it starts", "\n", "new_err", "=", "eval_result", "[", "'test_error'", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"No attribute named test_error\"", ")", "\n", "", "", "elif", "self", ".", "report_type", "==", "'validation'", ":", "\n", "                ", "if", "'valid_error'", "in", "cur_best", "and", "'valid_error'", "in", "eval_result", ":", "\n", "                    ", "best_err", "=", "cur_best", "[", "'valid_error'", "]", "# None when it starts", "\n", "new_err", "=", "eval_result", "[", "'valid_error'", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"No attribute named valid_error\"", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"No supported report type: {}\"", ".", "format", "(", "self", ".", "report_type", ")", ")", "\n", "", "if", "best_err", "==", "None", "or", "best_err", ">", "new_err", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.update_incumbent": [[417, 438], ["bandit.HPOBanditMachine.get_cur_runtime", "info", "info", "info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_cur_runtime", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "", "", "def", "update_incumbent", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "y", "==", "None", ":", "# in case of error, skip belows", "\n", "            ", "self", ".", "steps_after_best", "+=", "1", "\n", "return", "\n", "\n", "", "duration", "=", "self", ".", "get_cur_runtime", "(", ")", "\n", "if", "self", ".", "incumbent", "==", "None", ":", "\n", "            ", "self", ".", "incumbent", "=", "y", "\n", "self", ".", "steps_after_best", "=", "0", "\n", "\n", "info", "(", "\"Initial {} {} performance: {:.6f} ({:.0f} sec)\"", ".", "format", "(", "self", ".", "report_type", ",", "self", ".", "goal_metric", ",", "y", ",", "duration", ")", ")", "\n", "", "elif", "self", ".", "goal_metric", "==", "\"accuracy\"", "and", "self", ".", "incumbent", "<", "y", ":", "\n", "            ", "info", "(", "\"Best {} accuracy change: {:.6f} -> {:.6f} ({:.0f} sec)\"", ".", "format", "(", "self", ".", "report_type", ",", "self", ".", "incumbent", ",", "y", ",", "duration", ")", ")", "\n", "self", ".", "incumbent", "=", "y", "\n", "self", ".", "steps_after_best", "=", "0", "\n", "", "elif", "self", ".", "goal_metric", "==", "\"error\"", "and", "self", ".", "incumbent", ">", "y", ":", "\n", "            ", "info", "(", "\"Best {} error change:{:.6f} -> {:.6f} ({:.0f} sec)\"", ".", "format", "(", "self", ".", "report_type", ",", "self", ".", "incumbent", ",", "y", ",", "duration", ")", ")", "\n", "self", ".", "incumbent", "=", "y", "\n", "self", ".", "steps_after_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "steps_after_best", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.play": [[439, 524], ["TemporaryHistorySaver", "range", "TemporaryHistorySaver.remove", "HistorySaver", "HistorySaver.load", "TemporaryHistorySaver.restore", "info", "time.time", "bandit.HPOBanditMachine.reset", "bandit.HPOBanditMachine.mab.reset", "range", "info", "bandit.HPOBanditMachine.repo.get_current_status", "TemporaryHistorySaver.save", "bandit.HPOBanditMachine.search_space.archive", "HistorySaver.save", "warn", "debug", "bandit.HPOBanditMachine.pull", "bandit.HPOBanditMachine.update_incumbent", "bandit.HPOBanditMachine.is_terminated", "time.time", "info", "bandit.HPOBanditMachine.repo.get_current_status", "TemporaryHistorySaver.save", "bandit.HPOBanditMachine.search_space.save_history", "bandit.HPOBanditMachine.mab.get_stats", "bandit.HPOBanditMachine.repo.save_select_status", "bandit.HPOBanditMachine.get_cur_runtime", "bandit.HPOBanditMachine.search_space.save_history", "bandit.HPOBanditMachine.get_cur_runtime", "info", "bandit.HPOBanditMachine.search_space.compute_all"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.TemporaryHistorySaver.restore", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_current_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.archive", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.pull", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.update_incumbent", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.is_terminated", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_current_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_stats", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.save_select_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_cur_runtime", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_cur_runtime", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.compute_all"], ["", "", "def", "play", "(", "self", ",", "mode", ",", "spec", ",", "num_runs", ",", "save", "=", "True", ")", ":", "\n", "        ", "temp_saver", "=", "TemporaryHistorySaver", "(", "self", ".", "save_name", ",", "\n", "mode", ",", "spec", ",", "num_runs", ",", "\n", "self", ".", "run_config", ")", "\n", "saver", "=", "None", "\n", "\n", "if", "save", "==", "True", ":", "\n", "            ", "saver", "=", "HistorySaver", "(", "self", ".", "save_name", ",", "self", ".", "run_mode", ",", "self", ".", "target_goal", ",", "\n", "self", ".", "time_expired", ",", "self", ".", "run_config", ",", "\n", "postfix", "=", "\".{}\"", ".", "format", "(", "self", ".", "id", ")", ")", "\n", "\n", "", "bm_mode", "=", "False", "\n", "if", "'benchmark_mode'", "in", "self", ".", "run_config", "and", "self", ".", "run_config", "[", "'benchmark_mode'", "]", ":", "\n", "            ", "bm_mode", "=", "True", "\n", "\n", "# For in-depth analysis", "\n", "", "opt_rec", "=", "None", "\n", "if", "self", ".", "save_internal", ":", "\n", "            ", "opt_rec", "=", "{", "}", "\n", "\n", "# restore prior history", "\n", "", "if", "self", ".", "num_resume", ">", "0", ":", "\n", "            ", "self", ".", "cur_results", ",", "start_idx", "=", "saver", ".", "load", "(", "mode", ",", "spec", ",", "self", ".", "num_resume", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cur_results", ",", "start_idx", "=", "temp_saver", ".", "restore", "(", ")", "\n", "\n", "", "if", "start_idx", ">", "0", ":", "\n", "            ", "info", "(", "\"HPO runs will be continued from temporary saved result(s).\"", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "start_idx", ",", "num_runs", ")", ":", "# loop for multiple HPO runs           ", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "mab", ".", "reset", "(", "mode", ",", "spec", ")", "\n", "total_queries", "=", "NUM_MAX_ITERATIONS", "\n", "\n", "for", "j", "in", "range", "(", "NUM_MAX_ITERATIONS", ")", ":", "# loop for each HPO run", "\n", "                ", "debug", "(", "\"Pulling the arm {} times at {:.1f}\"", ".", "format", "(", "j", "+", "1", ",", "self", ".", "get_cur_runtime", "(", ")", ")", ")", "\n", "y", ",", "opt", "=", "self", ".", "pull", "(", "j", ")", "\n", "self", ".", "update_incumbent", "(", "y", ")", "\n", "\n", "if", "j", ">", "0", "and", "j", "%", "100", "==", "0", ":", "\n", "                    ", "info", "(", "\"{} configurations have been evaluated ({:.0f} sec)\"", ".", "format", "(", "j", ",", "self", ".", "get_cur_runtime", "(", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "stop_flag", "==", "True", ":", "\n", "                    ", "return", "self", ".", "cur_results", "\n", "\n", "", "if", "num_runs", "==", "1", "and", "not", "bm_mode", ":", "\n", "                    ", "self", ".", "cur_results", "[", "i", "]", "=", "self", ".", "repo", ".", "get_current_status", "(", ")", "\n", "temp_saver", ".", "save", "(", "self", ".", "cur_results", ")", "\n", "self", ".", "search_space", ".", "save_history", "(", "i", ")", "\n", "\n", "if", "self", ".", "save_internal", ":", "\n", "                        ", "if", "j", "%", "10", "==", "0", ":", "\n", "                            ", "info", "(", "\"Storing internal data at step {}... \"", ".", "format", "(", "j", ")", ")", "\n", "opt_rec", "[", "'est_{}'", ".", "format", "(", "j", ")", "]", "=", "opt", "\n", "dist", "=", "self", ".", "search_space", ".", "compute_all", "(", "self", ".", "trainer", ",", "self", ".", "max_train_epoch", ")", "\n", "opt_rec", "[", "'dist_{}'", ".", "format", "(", "j", ")", "]", "=", "dist", "\n", "\n", "# stopping criteria check", "\n", "", "", "", "if", "self", ".", "is_terminated", "(", "start_time", ")", ":", "\n", "                    ", "if", "not", "bm_mode", ":", "\n", "# update final search history", "\n", "                        ", "self", ".", "search_space", ".", "save_history", "(", "i", ",", "'results/'", ")", "\n", "", "values", ",", "counts", "=", "self", ".", "mab", ".", "get_stats", "(", ")", "\n", "self", ".", "repo", ".", "save_select_status", "(", "values", ",", "counts", ")", "\n", "total_queries", "=", "j", "\n", "break", "\n", "\n", "", "", "wall_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "info", "(", "\"Best {} {} at run #{} is {:.6f} by {} queries. (wall-clock {:.0f} sec)\"", ".", "format", "(", "self", ".", "report_type", ",", "self", ".", "goal_metric", ",", "\n", "i", ",", "self", ".", "incumbent", ",", "total_queries", ",", "wall_time", ")", ")", "\n", "\n", "self", ".", "cur_results", "[", "i", "]", "=", "self", ".", "repo", ".", "get_current_status", "(", ")", "\n", "temp_saver", ".", "save", "(", "self", ".", "cur_results", ")", "\n", "self", ".", "search_space", ".", "archive", "(", "i", ")", "\n", "\n", "", "if", "saver", ":", "\n", "            ", "saver", ".", "save", "(", "mode", ",", "spec", ",", "num_runs", ",", "self", ".", "cur_results", ",", "opt_rec", ")", "\n", "\n", "", "if", "start_idx", "==", "num_runs", ":", "\n", "            ", "warn", "(", "\"No more extra runs.\"", ")", "\n", "\n", "", "temp_saver", ".", "remove", "(", ")", "\n", "\n", "return", "self", ".", "cur_results", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.is_terminated": [[525, 543], ["bandit.HPOBanditMachine.get_cur_runtime", "info", "info", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_cur_runtime", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "def", "is_terminated", "(", "self", ",", "start_time", ")", ":", "\n", "\n", "        ", "if", "self", ".", "run_mode", "==", "'GOAL'", ":", "\n", "            ", "if", "self", ".", "goal_metric", "==", "\"accuracy\"", "and", "self", ".", "incumbent", ">=", "self", ".", "target_goal", ":", "\n", "                ", "return", "True", "\n", "", "elif", "self", ".", "goal_metric", "==", "\"error\"", "and", "self", ".", "incumbent", "<=", "self", ".", "target_goal", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "duration", "=", "self", ".", "get_cur_runtime", "(", ")", "\n", "if", "duration", ">=", "self", ".", "time_expired", ":", "\n", "            ", "info", "(", "\"Timeout: simulated run time is over ({:.0f} sec)\"", ".", "format", "(", "duration", ")", ")", "\n", "return", "True", "\n", "", "elif", "time", ".", "time", "(", ")", "-", "start_time", ">=", "self", ".", "time_expired", ":", "\n", "            ", "info", "(", "\"Timeout: actual run time is over ({:.0f} sec)\"", ".", "format", "(", "self", ".", "time_expired", "-", "duration", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "#info(\"Termination check at {:.0f}\".format(duration))", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_working_results": [[544, 551], ["results.append", "bandit.HPOBanditMachine.get_repo().get_current_status", "bandit.HPOBanditMachine.get_repo"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.repo.ResultsRepository.get_current_status", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_repo"], ["", "", "def", "get_working_results", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "if", "self", ".", "cur_results", ":", "\n", "            ", "results", "+=", "self", ".", "cur_results", "\n", "\n", "", "results", ".", "append", "(", "self", ".", "get_repo", "(", ")", ".", "get_current_status", "(", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.get_repo": [[552, 556], ["optimizers.repo.ResultsRepository"], "methods", ["None"], ["", "def", "get_repo", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "repo", "==", "None", ":", "\n", "            ", "self", ".", "repo", "=", "ResultsRepository", "(", "self", ".", "goal_metric", ",", "self", ".", "report_type", ")", "\n", "", "return", "self", ".", "repo", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.print_incumbent": [[557, 581], ["results.keys", "range", "bandit.HPOBanditMachine.search_space.get_hpv_dict", "info", "len", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "def", "print_incumbent", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "k", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "result", "=", "results", "[", "k", "]", "\n", "\n", "error_min_index", "=", "0", "\n", "cur_best_err", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "result", "[", "'error'", "]", ")", ")", ":", "\n", "                    ", "err", "=", "result", "[", "'error'", "]", "[", "i", "]", "\n", "if", "cur_best_err", "==", "None", ":", "\n", "                        ", "cur_best_err", "=", "err", "\n", "# if an error is None, ignore them", "\n", "", "if", "err", "!=", "None", ":", "\n", "                        ", "if", "cur_best_err", ">", "err", ":", "\n", "                            ", "cur_best_err", "=", "err", "\n", "error_min_index", "=", "i", "\n", "\n", "", "", "", "best_model_index", "=", "result", "[", "'model_idx'", "]", "[", "error_min_index", "]", "\n", "best_error", "=", "result", "[", "'test_error'", "]", "[", "error_min_index", "]", "\n", "best_hpv", "=", "self", ".", "search_space", ".", "get_hpv_dict", "(", "best_model_index", ",", "int", "(", "k", ")", ")", "\n", "info", "(", "\"[R{}H] {} -> {}.\"", ".", "format", "(", "k", ",", "best_hpv", ",", "best_error", ")", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "#warn(\"[Run #{}] report failed\".format(k))", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.update_space": [[582, 638], ["bandit.HPOBanditMachine.trainer.get_verifier", "CandidateSetController", "type", "warn", "type", "CandidateSetController.resample", "CandidateSetController.resample", "bandit.HPOBanditMachine.check_incumbent_updated", "info", "CandidateSetController.resample", "copy.deepcopy", "bandit.HPOBanditMachine.check_incumbent_updated", "debug", "NotImplementedError", "copy.deepcopy.pop", "copy.deepcopy.pop"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.get_verifier", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.resample", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.resample", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.check_incumbent_updated", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.resample", "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.check_incumbent_updated", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "", "def", "update_space", "(", "self", ",", "n_done", ",", "s_spec", ",", "eval_result", ",", "est_values", ")", ":", "\n", "        ", "v", "=", "None", "\n", "if", "\"verification\"", "in", "s_spec", "and", "s_spec", "[", "\"verification\"", "]", "==", "True", ":", "\n", "            ", "v", "=", "self", ".", "trainer", ".", "get_verifier", "(", ")", "\n", "\n", "", "an", "=", "0", "\n", "if", "\"resample_after\"", "in", "s_spec", ":", "\n", "            ", "an", "=", "s_spec", "[", "'resample_after'", "]", "\n", "\n", "", "if", "n_done", ">", "an", ":", "\n", "            ", "csc", "=", "CandidateSetController", "(", "self", ".", "search_space", ",", "v", ")", "\n", "# for every step ss of HPO iteration", "\n", "if", "\"update_rule\"", "in", "s_spec", ":", "\n", "                ", "pes_spec", "=", "s_spec", "[", "\"update_rule\"", "]", "\n", "pess", "=", "1", "# default step size for adaptive sampling", "\n", "\n", "if", "\"resample_steps\"", "in", "s_spec", ":", "\n", "                    ", "pess", "=", "s_spec", "[", "\"resample_steps\"", "]", "\n", "", "else", ":", "\n", "                    ", "pess", "=", "1", "\n", "\n", "", "if", "type", "(", "pess", ")", "==", "int", ":", "\n", "                    ", "if", "n_done", ">", "0", "and", "n_done", "%", "pess", "==", "0", ":", "\n", "                        ", "if", "'rule_name'", "in", "pes_spec", ":", "\n", "                            ", "update_rule", "=", "pes_spec", "[", "'rule_name'", "]", "\n", "if", "update_rule", "==", "'add_when_explore_or_evolve_when_exploit'", ":", "\n", "                                ", "spec", "=", "copy", ".", "deepcopy", "(", "pes_spec", ")", "\n", "if", "self", ".", "check_incumbent_updated", "(", "eval_result", ")", ":", "\n", "                                    ", "spec", "[", "'rule_name'", "]", "=", "'exploit'", "\n", "spec", ".", "pop", "(", "'add'", ",", "None", ")", "# drop add condition", "\n", "", "else", ":", "\n", "                                    ", "spec", "[", "'rule_name'", "]", "=", "'explore'", "\n", "spec", ".", "pop", "(", "'evolve'", ",", "None", ")", "# drop evolve condition", "\n", "\n", "", "debug", "(", "\"Current resampling spec: {}\"", ".", "format", "(", "spec", ")", ")", "\n", "pes_spec", "=", "spec", "\n", "", "else", ":", "\n", "                                ", "raise", "NotImplementedError", "(", "\"Invalid update rule: {}\"", ".", "format", "(", "update_rule", ")", ")", "\n", "\n", "", "", "csc", ".", "resample", "(", "est_values", ",", "pes_spec", ")", "\n", "", "", "else", ":", "\n", "                    ", "warn", "(", "\"Invalid resampling step size!\"", ")", "\n", "", "", "else", ":", "\n", "# for global steps", "\n", "                ", "ss", "=", "'new_record'", "# default step size for adaptive sampling", "\n", "if", "\"resample_steps\"", "in", "s_spec", ":", "\n", "                    ", "ss", "=", "s_spec", "[", "\"resample_steps\"", "]", "\n", "\n", "", "if", "type", "(", "ss", ")", "==", "int", ":", "\n", "                    ", "if", "n_done", ">", "0", "and", "n_done", "%", "ss", "==", "0", ":", "\n", "                        ", "csc", ".", "resample", "(", "est_values", ",", "s_spec", ")", "\n", "\n", "", "", "elif", "ss", "==", "'new_record'", ":", "\n", "                    ", "if", "self", ".", "check_incumbent_updated", "(", "eval_result", ")", ":", "\n", "                        ", "info", "(", "\"Resampling will be performed due to new best found\"", ")", "\n", "csc", ".", "resample", "(", "est_values", ",", "s_spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.optimizers.bandit.HPOBanditMachine.resample_candidates": [[639, 663], ["method.find", "method.find", "int", "bandit.HPOBanditMachine.cs.ensemble", "bandit.HPOBanditMachine.cs.resample", "type", "int", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.ensemble.CandidateSetEnsembler.ensemble", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.resample.CandidateSetResampler.resample"], ["", "", "", "", "", "def", "resample_candidates", "(", "self", ",", "method", ",", "n_steps", ",", "vetoer", "=", "None", ",", "verifier", "=", "None", ")", ":", "\n", "\n", "        ", "s_method", "=", "'UNIFORM'", "# default method", "\n", "n_cand", "=", "100", "\n", "\n", "# parsing resampling method ", "\n", "if", "'['", "in", "method", "and", "']'", "in", "method", ":", "\n", "            ", "o_i", "=", "method", ".", "find", "(", "'['", ")", "\n", "e_i", "=", "method", ".", "find", "(", "']'", ")", "\n", "s_method", "=", "method", "[", ":", "o_i", "]", "\n", "n_cand", "=", "int", "(", "method", "[", "o_i", "+", "1", ":", "e_i", "]", ")", "\n", "", "elif", "type", "(", "method", ")", "==", "int", ":", "\n", "            ", "n_cand", "=", "int", "(", "method", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid resampling method: {}\"", ".", "format", "(", "method", ")", ")", "\n", "\n", "# resampling using batched BO", "\n", "", "if", "'BATCH-DIV'", "in", "s_method", ":", "\n", "# perform cross-over after batched BO diversification", "\n", "            ", "if", "n_steps", "<=", "2", ":", "\n", "                ", "return", "\n", "", "self", ".", "cs", ".", "ensemble", "(", "s_method", ",", "n_cand", ",", "n_steps", ",", "self", ".", "steps_after_best", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cs", ".", "resample", "(", "s_method", ",", "n_cand", ",", "n_steps", ",", "vetoer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.Measure.difference": [[8, 10], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "difference", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.RankIntersectionMeasure.__init__": [[14, 17], ["numpy.asarray", "numpy.asarray().argsort", "numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "true_errors", ")", ":", "\n", "        ", "self", ".", "true_errors", "=", "np", ".", "asarray", "(", "true_errors", ")", "\n", "self", ".", "rank_index", "=", "np", ".", "asarray", "(", "true_errors", ")", ".", "argsort", "(", ")", "[", ":", "]", "[", ":", ":", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.RankIntersectionMeasure.intersection": [[18, 36], ["len", "len", "len", "len", "ValueError", "float", "set", "numpy.asarray", "set", "set", "len", "numpy.asarray().argsort", "numpy.asarray"], "methods", ["None"], ["", "def", "intersection", "(", "self", ",", "candidates", ",", "acq_funcs", ",", "k", ",", "j", "=", "None", ")", ":", "\n", "        ", "if", "j", "is", "None", ":", "\n", "            ", "j", "=", "len", "(", "candidates", ")", "\n", "", "true_ranks", "=", "self", ".", "rank_index", "[", "k", ":", "j", "]", "\n", "est_ranks", "=", "np", ".", "asarray", "(", "candidates", ")", "[", "np", ".", "asarray", "(", "acq_funcs", ")", ".", "argsort", "(", ")", "[", ":", "]", "[", ":", ":", "-", "1", "]", "]", "[", "k", ":", "j", "]", "\n", "\n", "if", "len", "(", "true_ranks", ")", "!=", "len", "(", "est_ranks", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'est value is invalid.'", ")", "\n", "", "n", "=", "len", "(", "true_ranks", ")", "\n", "if", "n", ">", "0", ":", "\n", "#print(\"est rank: {}\".format(est_ranks))", "\n", "            ", "intersect", "=", "set", "(", "true_ranks", ")", "&", "set", "(", "est_ranks", ")", "\n", "rate", "=", "float", "(", "len", "(", "intersect", ")", "/", "n", ")", "\n", "", "else", ":", "\n", "            ", "intersect", "=", "set", "(", "[", "]", ")", "\n", "rate", "=", "0.0", "\n", "\n", "", "return", "intersect", ",", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.RankIntersectionMeasure.compare_all": [[37, 63], ["range", "measures.RankIntersectionMeasure.intersection", "rates.append", "ri.append", "len", "ri.append", "ri.append", "ranges.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.RankIntersectionMeasure.intersection", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "compare_all", "(", "self", ",", "candidates", ",", "acq_funcs", ",", "\n", "ranges", "=", "None", ",", "bound", "=", "100", ",", "bin_size", "=", "50", ")", ":", "\n", "        ", "if", "ranges", "is", "None", ":", "\n", "            ", "ranges", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "bound", ")", ":", "\n", "                ", "ri", "=", "[", "]", "\n", "ri", ".", "append", "(", "i", "*", "bin_size", ")", "\n", "i", "+=", "1", "\n", "if", "i", "*", "bin_size", ">=", "len", "(", "candidates", ")", ":", "\n", "                    ", "ri", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "ri", ".", "append", "(", "i", "*", "bin_size", ")", "\n", "\n", "", "if", "not", "None", "in", "ri", ":", "\n", "                    ", "ranges", ".", "append", "(", "ri", ")", "\n", "\n", "", "", "", "rates", "=", "[", "]", "\n", "for", "ri", "in", "ranges", ":", "\n", "# accumulated rank intersection                 ", "\n", "#_, r = self.intersection(candidates, acq_funcs, 0, ri[1])", "\n", "# rank intersection", "\n", "\n", "            ", "_", ",", "r", "=", "self", ".", "intersection", "(", "candidates", ",", "acq_funcs", ",", "ri", "[", "0", "]", ",", "ri", "[", "1", "]", ")", "\n", "rates", ".", "append", "(", "r", "*", "100", ")", "\n", "\n", "", "return", "rates", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.count_parameters_in_MB": [[6, 11], ["isinstance", "numpy.sum", "numpy.sum", "numpy.prod", "numpy.prod", "v.size", "model.parameters", "v.size"], "function", ["None"], ["def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "if", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "", "else", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.get_model_infos": [[13, 40], ["flop_benchmark.add_flops_counting_methods", "add_flops_counting_methods.eval", "torch.rand", "torch.rand", "flop_benchmark.count_parameters_in_MB", "hasattr", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "add_flops_counting_methods.apply", "next", "cache_inputs.cuda.cuda", "torch.no_grad", "torch.no_grad", "add_flops_counting_methods.", "flop_benchmark.compute_average_flops_cost", "flop_benchmark.count_parameters_in_MB", "print", "print", "add_flops_counting_methods.parameters", "add_flops_counting_methods.auxiliary_param"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.compute_average_flops_cost", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param"], ["", "", "def", "get_model_infos", "(", "model", ",", "shape", ")", ":", "\n", "#model = copy.deepcopy( model )", "\n", "\n", "  ", "model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "#model = model.cuda()", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#cache_inputs = torch.zeros(*shape).cuda()", "\n", "#cache_inputs = torch.zeros(*shape)", "\n", "cache_inputs", "=", "torch", ".", "rand", "(", "*", "shape", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "cache_inputs", "=", "cache_inputs", ".", "cuda", "(", ")", "\n", "#print_log('In the calculating function : cache input size : {:}'.format(cache_inputs.size()), log)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "_____", "=", "model", "(", "cache_inputs", ")", "\n", "", "FLOPs", "=", "compute_average_flops_cost", "(", "model", ")", "/", "1e6", "\n", "Param", "=", "count_parameters_in_MB", "(", "model", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'auxiliary_param'", ")", ":", "\n", "    ", "aux_params", "=", "count_parameters_in_MB", "(", "model", ".", "auxiliary_param", "(", ")", ")", "\n", "print", "(", "'The auxiliary params of this model is : {:}'", ".", "format", "(", "aux_params", ")", ")", "\n", "print", "(", "'We remove the auxiliary params from the total params ({:}) when counting'", ".", "format", "(", "Param", ")", ")", "\n", "Param", "=", "Param", "-", "aux_params", "\n", "\n", "#print_log('FLOPs : {:} MB'.format(FLOPs), log)", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "apply", "(", "remove_hook_function", ")", "\n", "return", "FLOPs", ",", "Param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.add_flops_counting_methods": [[43, 49], ["flop_benchmark.add_batch_counter_hook_function", "model.apply", "model.apply", "flop_benchmark.remove_hook_function"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.add_batch_counter_hook_function", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.remove_hook_function"], ["", "def", "add_flops_counting_methods", "(", "model", ")", ":", "\n", "  ", "model", ".", "__batch_counter__", "=", "0", "\n", "add_batch_counter_hook_function", "(", "model", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.compute_average_flops_cost": [[52, 66], ["model.modules", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "model", ")", ":", "\n", "  ", "\"\"\"\n  A method that will be available after add_flops_counting_methods() is called on a desired net object.\n  Returns current mean flops consumption per image.\n  \"\"\"", "\n", "batches_count", "=", "model", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "#or isinstance(module, torch.nn.AvgPool2d) or isinstance(module, torch.nn.MaxPool2d) \\", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "      ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.pool_flops_counter_hook": [[69, 77], ["inputs[].size", "inputs[].size", "inputs[].size"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "pool_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "pool_module", ".", "kernel_size", "\n", "out_C", ",", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "1", ":", "]", "\n", "assert", "out_C", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", ",", "'{:} vs. {:}'", ".", "format", "(", "out_C", ",", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "\n", "overall_flops", "=", "batch_size", "*", "out_C", "*", "output_height", "*", "output_width", "*", "kernel_size", "*", "kernel_size", "\n", "pool_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.self_calculate_flops_counter_hook": [[79, 82], ["flop_benchmark..calculate_flop_self"], "function", ["None"], ["", "def", "self_calculate_flops_counter_hook", "(", "self_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "overall_flops", "=", "self_module", ".", "calculate_flop_self", "(", "inputs", "[", "0", "]", ".", "shape", ",", "output", ".", "shape", ")", "\n", "self_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.fc_flops_counter_hook": [[84, 92], ["inputs[].size", "inputs[].size", "output.size"], "function", ["None"], ["", "def", "fc_flops_counter_hook", "(", "fc_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "xin", ",", "xout", "=", "fc_module", ".", "in_features", ",", "fc_module", ".", "out_features", "\n", "assert", "xin", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", "and", "xout", "==", "output", ".", "size", "(", "1", ")", ",", "'IO=({:}, {:})'", ".", "format", "(", "xin", ",", "xout", ")", "\n", "overall_flops", "=", "batch_size", "*", "xin", "*", "xout", "\n", "if", "fc_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "batch_size", "*", "xout", "\n", "", "fc_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.conv1d_flops_counter_hook": [[94, 109], ["inputs[].size"], "function", ["None"], ["", "def", "conv1d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "outputs", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "outL", "=", "outputs", ".", "shape", "[", "-", "1", "]", "\n", "[", "kernel", "]", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "outL", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.conv2d_flops_counter_hook": [[111, 127], ["inputs[].size"], "function", ["None"], ["", "def", "conv2d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.batch_counter_hook": [[129, 134], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "inputs", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "  ", "inputs", "=", "inputs", "[", "0", "]", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.add_batch_counter_hook_function": [[136, 140], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "  ", "if", "not", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "    ", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.add_flops_counter_variable_or_reset": [[142, 148], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "    ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.add_flops_counter_hook_function": [[150, 171], ["isinstance", "isinstance", "hasattr", "module.register_forward_hook", "isinstance", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook", "isinstance", "isinstance", "hasattr", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv2d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv1d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "fc_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "pool_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "# self-defined module", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "self_calculate_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.remove_hook_function": [[173, 182], ["hasattr", "hasattr", "getattr", "getattr.remove", "delattr"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove"], ["", "", "", "def", "remove_hook_function", "(", "module", ")", ":", "\n", "  ", "hookers", "=", "[", "'__batch_counter_handle__'", ",", "'__flops_handle__'", "]", "\n", "for", "hooker", "in", "hookers", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "hooker", ")", ":", "\n", "      ", "handle", "=", "getattr", "(", "module", ",", "hooker", ")", "\n", "handle", ".", "remove", "(", ")", "\n", "", "", "keys", "=", "[", "'__flops__'", ",", "'__batch_counter__'", ",", "'__flops__'", "]", "+", "hookers", "\n", "for", "ckey", "in", "keys", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "ckey", ")", ":", "delattr", "(", "module", ",", "ckey", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.available_module_types": [[13, 15], ["None"], "function", ["None"], ["def", "available_module_types", "(", ")", ":", "\n", "  ", "return", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.get_conv2D_Wmats": [[17, 31], ["range", "range", "mats.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_conv2D_Wmats", "(", "tensor", ":", "np", ".", "ndarray", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "  ", "\"\"\"\n  Extract W slices from a 4 index conv2D tensor of shape: (N,M,i,j) or (M,N,i,j).\n  Return ij (N x M) matrices\n  \"\"\"", "\n", "mats", "=", "[", "]", "\n", "N", ",", "M", ",", "imax", ",", "jmax", "=", "tensor", ".", "shape", "\n", "assert", "N", "+", "M", ">=", "imax", "+", "jmax", ",", "'invalid tensor shape detected: {}x{} (NxM), {}x{} (i,j)'", ".", "format", "(", "N", ",", "M", ",", "imax", ",", "jmax", ")", "\n", "for", "i", "in", "range", "(", "imax", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "jmax", ")", ":", "\n", "      ", "w", "=", "tensor", "[", ":", ",", ":", ",", "i", ",", "j", "]", "\n", "if", "N", "<", "M", ":", "w", "=", "w", ".", "T", "\n", "mats", ".", "append", "(", "w", ")", "\n", "", "", "return", "mats", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.glorot_norm_check": [[33, 49], ["numpy.sqrt", "numpy.linalg.norm", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "glorot_norm_check", "(", "W", ",", "N", ",", "M", ",", "rf_size", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", ":", "\n", "  ", "\"\"\"Check if this layer needs Glorot Normalization Fix\"\"\"", "\n", "\n", "kappa", "=", "np", ".", "sqrt", "(", "2", "/", "(", "(", "N", "+", "M", ")", "*", "rf_size", ")", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "W", ")", "\n", "\n", "check1", "=", "norm", "/", "np", ".", "sqrt", "(", "N", "*", "M", ")", "\n", "check2", "=", "norm", "/", "(", "kappa", "*", "np", ".", "sqrt", "(", "N", "*", "M", ")", ")", "\n", "\n", "if", "(", "rf_size", ">", "1", ")", "and", "(", "check2", ">", "lower", ")", "and", "(", "check2", "<", "upper", ")", ":", "\n", "    ", "return", "check2", ",", "True", "\n", "", "elif", "(", "check1", ">", "lower", ")", "&", "(", "check1", "<", "upper", ")", ":", "\n", "    ", "return", "check1", ",", "True", "\n", "", "else", ":", "\n", "    ", "if", "rf_size", ">", "1", ":", "return", "check2", ",", "False", "\n", "else", ":", "return", "check1", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.glorot_norm_fix": [[50, 55], ["numpy.sqrt"], "function", ["None"], ["", "", "def", "glorot_norm_fix", "(", "w", ",", "n", ",", "m", ",", "rf_size", ")", ":", "\n", "  ", "\"\"\"Apply Glorot Normalization Fix.\"\"\"", "\n", "kappa", "=", "np", ".", "sqrt", "(", "2", "/", "(", "(", "n", "+", "m", ")", "*", "rf_size", ")", ")", "\n", "w", "=", "w", "/", "kappa", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.analyze_weights": [[57, 157], ["collections.OrderedDict", "len", "enumerate", "collections.OrderedDict", "weight_watcher.glorot_norm_check", "numpy.min", "numpy.max", "weight_watcher.glorot_norm_fix", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit", "numpy.max", "numpy.log10", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit", "numpy.max", "powerlaw.Fit", "numpy.min", "numpy.count_nonzero", "numpy.log10", "summary.append", "numpy.linalg.norm", "numpy.log10", "numpy.dot", "numpy.linalg.norm", "numpy.log10", "summary.append", "numpy.sqrt", "glorot_norm_fix.astype", "numpy.log10", "numpy.sum", "numpy.log10", "numpy.finfo", "numpy.log10", "numpy.max"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.glorot_norm_check", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.glorot_norm_fix", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "analyze_weights", "(", "weights", ",", "min_size", ",", "max_size", ",", "alphas", ",", "lognorms", ",", "spectralnorms", ",", "softranks", ",", "normalize", ",", "glorot_fix", ")", ":", "\n", "  ", "results", "=", "OrderedDict", "(", ")", "\n", "count", "=", "len", "(", "weights", ")", "\n", "if", "count", "==", "0", ":", "return", "results", "\n", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "weights", ")", ":", "\n", "    ", "M", ",", "N", "=", "np", ".", "min", "(", "weight", ".", "shape", ")", ",", "np", ".", "max", "(", "weight", ".", "shape", ")", "\n", "Q", "=", "N", "/", "M", "\n", "results", "[", "i", "]", "=", "cur_res", "=", "OrderedDict", "(", "N", "=", "N", ",", "M", "=", "M", ",", "Q", "=", "Q", ")", "\n", "check", ",", "checkTF", "=", "glorot_norm_check", "(", "weight", ",", "N", ",", "M", ",", "count", ")", "\n", "cur_res", "[", "'check'", "]", "=", "check", "\n", "cur_res", "[", "'checkTF'", "]", "=", "checkTF", "\n", "# assume receptive field size is count", "\n", "if", "glorot_fix", ":", "\n", "      ", "weight", "=", "glorot_norm_fix", "(", "weight", ",", "N", ",", "M", ",", "count", ")", "\n", "", "else", ":", "\n", "# probably never needed since we always fix for glorot", "\n", "      ", "weight", "=", "weight", "*", "np", ".", "sqrt", "(", "count", "/", "2.0", ")", "\n", "\n", "", "if", "spectralnorms", ":", "# spectralnorm is the max eigenvalues", "\n", "      ", "svd", "=", "TruncatedSVD", "(", "n_components", "=", "1", ",", "n_iter", "=", "7", ",", "random_state", "=", "10", ")", "\n", "svd", ".", "fit", "(", "weight", ")", "\n", "sv", "=", "svd", ".", "singular_values_", "\n", "sv_max", "=", "np", ".", "max", "(", "sv", ")", "\n", "if", "normalize", ":", "\n", "        ", "evals", "=", "sv", "*", "sv", "/", "N", "\n", "", "else", ":", "\n", "        ", "evals", "=", "sv", "*", "sv", "\n", "", "lambda0", "=", "evals", "[", "0", "]", "\n", "cur_res", "[", "\"spectralnorm\"", "]", "=", "lambda0", "\n", "cur_res", "[", "\"logspectralnorm\"", "]", "=", "np", ".", "log10", "(", "lambda0", ")", "\n", "", "else", ":", "\n", "      ", "lambda0", "=", "None", "\n", "\n", "", "if", "M", "<", "min_size", ":", "\n", "      ", "summary", "=", "\"Weight matrix {}/{} ({},{}): Skipping: too small (<{})\"", ".", "format", "(", "i", "+", "1", ",", "count", ",", "M", ",", "N", ",", "min_size", ")", "\n", "cur_res", "[", "\"summary\"", "]", "=", "summary", "\n", "continue", "\n", "", "elif", "max_size", ">", "0", "and", "M", ">", "max_size", ":", "\n", "      ", "summary", "=", "\"Weight matrix {}/{} ({},{}): Skipping: too big (testing) (>{})\"", ".", "format", "(", "i", "+", "1", ",", "count", ",", "M", ",", "N", ",", "max_size", ")", "\n", "cur_res", "[", "\"summary\"", "]", "=", "summary", "\n", "continue", "\n", "", "else", ":", "\n", "      ", "summary", "=", "[", "]", "\n", "", "if", "alphas", ":", "\n", "      ", "import", "powerlaw", "\n", "svd", "=", "TruncatedSVD", "(", "n_components", "=", "M", "-", "1", ",", "n_iter", "=", "7", ",", "random_state", "=", "10", ")", "\n", "svd", ".", "fit", "(", "weight", ".", "astype", "(", "float", ")", ")", "\n", "sv", "=", "svd", ".", "singular_values_", "\n", "if", "normalize", ":", "evals", "=", "sv", "*", "sv", "/", "N", "\n", "else", ":", "evals", "=", "sv", "*", "sv", "\n", "\n", "lambda_max", "=", "np", ".", "max", "(", "evals", ")", "\n", "fit", "=", "powerlaw", ".", "Fit", "(", "evals", ",", "xmax", "=", "lambda_max", ",", "verbose", "=", "False", ")", "\n", "alpha", "=", "fit", ".", "alpha", "\n", "cur_res", "[", "\"alpha\"", "]", "=", "alpha", "\n", "D", "=", "fit", ".", "D", "\n", "cur_res", "[", "\"D\"", "]", "=", "D", "\n", "cur_res", "[", "\"lambda_min\"", "]", "=", "np", ".", "min", "(", "evals", ")", "\n", "cur_res", "[", "\"lambda_max\"", "]", "=", "lambda_max", "\n", "alpha_weighted", "=", "alpha", "*", "np", ".", "log10", "(", "lambda_max", ")", "\n", "cur_res", "[", "\"alpha_weighted\"", "]", "=", "alpha_weighted", "\n", "tolerance", "=", "lambda_max", "*", "M", "*", "np", ".", "finfo", "(", "np", ".", "max", "(", "sv", ")", ")", ".", "eps", "\n", "cur_res", "[", "\"rank_loss\"", "]", "=", "np", ".", "count_nonzero", "(", "sv", ">", "tolerance", ",", "axis", "=", "-", "1", ")", "\n", "\n", "logpnorm", "=", "np", ".", "log10", "(", "np", ".", "sum", "(", "[", "ev", "**", "alpha", "for", "ev", "in", "evals", "]", ")", ")", "\n", "cur_res", "[", "\"logpnorm\"", "]", "=", "logpnorm", "\n", "\n", "summary", ".", "append", "(", "\n", "\"Weight matrix {}/{} ({},{}): Alpha: {}, Alpha Weighted: {}, D: {}, pNorm {}\"", ".", "format", "(", "i", "+", "1", ",", "count", ",", "M", ",", "N", ",", "alpha", ",", "\n", "alpha_weighted", ",", "D", ",", "\n", "logpnorm", ")", ")", "\n", "\n", "", "if", "lognorms", ":", "\n", "      ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "weight", ")", "# Frobenius Norm", "\n", "cur_res", "[", "\"norm\"", "]", "=", "norm", "\n", "lognorm", "=", "np", ".", "log10", "(", "norm", ")", "\n", "cur_res", "[", "\"lognorm\"", "]", "=", "lognorm", "\n", "\n", "X", "=", "np", ".", "dot", "(", "weight", ".", "T", ",", "weight", ")", "\n", "if", "normalize", ":", "X", "=", "X", "/", "N", "\n", "normX", "=", "np", ".", "linalg", ".", "norm", "(", "X", ")", "# Frobenius Norm", "\n", "cur_res", "[", "\"normX\"", "]", "=", "normX", "\n", "lognormX", "=", "np", ".", "log10", "(", "normX", ")", "\n", "cur_res", "[", "\"lognormX\"", "]", "=", "lognormX", "\n", "\n", "summary", ".", "append", "(", "\n", "\"Weight matrix {}/{} ({},{}): LogNorm: {} ; LogNormX: {}\"", ".", "format", "(", "i", "+", "1", ",", "count", ",", "M", ",", "N", ",", "lognorm", ",", "lognormX", ")", ")", "\n", "\n", "if", "softranks", ":", "\n", "        ", "softrank", "=", "norm", "**", "2", "/", "sv_max", "**", "2", "\n", "softranklog", "=", "np", ".", "log10", "(", "softrank", ")", "\n", "softranklogratio", "=", "lognorm", "/", "np", ".", "log10", "(", "sv_max", ")", "\n", "cur_res", "[", "\"softrank\"", "]", "=", "softrank", "\n", "cur_res", "[", "\"softranklog\"", "]", "=", "softranklog", "\n", "cur_res", "[", "\"softranklogratio\"", "]", "=", "softranklogratio", "\n", "summary", "+=", "\"{}. Softrank: {}. Softrank log: {}. Softrank log ratio: {}\"", ".", "format", "(", "summary", ",", "softrank", ",", "softranklog", ",", "\n", "softranklogratio", ")", "\n", "", "", "cur_res", "[", "\"summary\"", "]", "=", "\"\\n\"", ".", "join", "(", "summary", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.compute_details": [[159, 283], ["collections.OrderedDict", "results.items", "metrics.items", "metrics_stats.append", "metrics_stats.append", "metrics_stats.append", "metrics_stats.append", "metrics_stats.append", "metrics_stats.append", "result.items", "compounds.items", "min", "max", "numpy.mean", "min", "max", "numpy.mean", "str().replace", "len", "numpy.mean", "metrics_values_compound[].append", "str().isdigit", "len", "str", "str", "metrics_values[].append", "compounds[].append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "compute_details", "(", "results", ")", ":", "\n", "  ", "\"\"\"\n  Return a pandas data frame.\n  \"\"\"", "\n", "final_summary", "=", "OrderedDict", "(", ")", "\n", "\n", "metrics", "=", "{", "\n", "# key in \"results\" : pretty print name", "\n", "\"check\"", ":", "\"Check\"", ",", "\n", "\"checkTF\"", ":", "\"CheckTF\"", ",", "\n", "\"norm\"", ":", "\"Norm\"", ",", "\n", "\"lognorm\"", ":", "\"LogNorm\"", ",", "\n", "\"normX\"", ":", "\"Norm X\"", ",", "\n", "\"lognormX\"", ":", "\"LogNorm X\"", ",", "\n", "\"alpha\"", ":", "\"Alpha\"", ",", "\n", "\"alpha_weighted\"", ":", "\"Alpha Weighted\"", ",", "\n", "\"spectralnorm\"", ":", "\"Spectral Norm\"", ",", "\n", "\"logspectralnorm\"", ":", "\"Log Spectral Norm\"", ",", "\n", "\"softrank\"", ":", "\"Softrank\"", ",", "\n", "\"softranklog\"", ":", "\"Softrank Log\"", ",", "\n", "\"softranklogratio\"", ":", "\"Softrank Log Ratio\"", ",", "\n", "\"sigma_mp\"", ":", "\"Marchenko-Pastur (MP) fit sigma\"", ",", "\n", "\"numofSpikes\"", ":", "\"Number of spikes per MP fit\"", ",", "\n", "\"ratio_numofSpikes\"", ":", "\"aka, percent_mass, Number of spikes / total number of evals\"", ",", "\n", "\"softrank_mp\"", ":", "\"Softrank for MP fit\"", ",", "\n", "\"logpnorm\"", ":", "\"alpha pNorm\"", "\n", "}", "\n", "\n", "metrics_stats", "=", "[", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "    ", "metrics_stats", ".", "append", "(", "\"{}_min\"", ".", "format", "(", "metric", ")", ")", "\n", "metrics_stats", ".", "append", "(", "\"{}_max\"", ".", "format", "(", "metric", ")", ")", "\n", "metrics_stats", ".", "append", "(", "\"{}_avg\"", ".", "format", "(", "metric", ")", ")", "\n", "\n", "metrics_stats", ".", "append", "(", "\"{}_compound_min\"", ".", "format", "(", "metric", ")", ")", "\n", "metrics_stats", ".", "append", "(", "\"{}_compound_max\"", ".", "format", "(", "metric", ")", ")", "\n", "metrics_stats", ".", "append", "(", "\"{}_compound_avg\"", ".", "format", "(", "metric", ")", ")", "\n", "\n", "", "columns", "=", "[", "\"layer_id\"", ",", "\"layer_type\"", ",", "\"N\"", ",", "\"M\"", ",", "\"layer_count\"", ",", "\"slice\"", ",", "\n", "\"slice_count\"", ",", "\"level\"", ",", "\"comment\"", "]", "+", "[", "*", "metrics", "]", "+", "metrics_stats", "\n", "\n", "metrics_values", "=", "{", "}", "\n", "metrics_values_compound", "=", "{", "}", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n", "    ", "metrics_values", "[", "metric", "]", "=", "[", "]", "\n", "metrics_values_compound", "[", "metric", "]", "=", "[", "]", "\n", "\n", "", "layer_count", "=", "0", "\n", "for", "layer_id", ",", "result", "in", "results", ".", "items", "(", ")", ":", "\n", "    ", "layer_count", "+=", "1", "\n", "\n", "layer_type", "=", "np", ".", "NAN", "\n", "if", "\"layer_type\"", "in", "result", ":", "\n", "      ", "layer_type", "=", "str", "(", "result", "[", "\"layer_type\"", "]", ")", ".", "replace", "(", "\"LAYER_TYPE.\"", ",", "\"\"", ")", "\n", "\n", "", "compounds", "=", "{", "}", "# temp var", "\n", "for", "metric", "in", "metrics", ":", "\n", "      ", "compounds", "[", "metric", "]", "=", "[", "]", "\n", "\n", "", "slice_count", ",", "Ntotal", ",", "Mtotal", "=", "0", ",", "0", ",", "0", "\n", "for", "slice_id", ",", "summary", "in", "result", ".", "items", "(", ")", ":", "\n", "      ", "if", "not", "str", "(", "slice_id", ")", ".", "isdigit", "(", ")", ":", "\n", "        ", "continue", "\n", "", "slice_count", "+=", "1", "\n", "\n", "N", "=", "np", ".", "NAN", "\n", "if", "\"N\"", "in", "summary", ":", "\n", "        ", "N", "=", "summary", "[", "\"N\"", "]", "\n", "Ntotal", "+=", "N", "\n", "\n", "", "M", "=", "np", ".", "NAN", "\n", "if", "\"M\"", "in", "summary", ":", "\n", "        ", "M", "=", "summary", "[", "\"M\"", "]", "\n", "Mtotal", "+=", "M", "\n", "\n", "", "data", "=", "{", "\"layer_id\"", ":", "layer_id", ",", "\"layer_type\"", ":", "layer_type", ",", "\"N\"", ":", "N", ",", "\"M\"", ":", "M", ",", "\"slice\"", ":", "slice_id", ",", "\"level\"", ":", "\"SLICE\"", ",", "\n", "\"comment\"", ":", "\"Slice level\"", "}", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "if", "metric", "in", "summary", ":", "\n", "          ", "value", "=", "summary", "[", "metric", "]", "\n", "if", "value", "is", "not", "None", ":", "\n", "            ", "metrics_values", "[", "metric", "]", ".", "append", "(", "value", ")", "\n", "compounds", "[", "metric", "]", ".", "append", "(", "value", ")", "\n", "data", "[", "metric", "]", "=", "value", "\n", "\n", "", "", "", "", "data", "=", "{", "\"layer_id\"", ":", "layer_id", ",", "\"layer_type\"", ":", "layer_type", ",", "\"N\"", ":", "Ntotal", ",", "\"M\"", ":", "Mtotal", ",", "\"slice_count\"", ":", "slice_count", ",", "\n", "\"level\"", ":", "\"LAYER\"", ",", "\"comment\"", ":", "\"Layer level\"", "}", "\n", "# Compute the compound value over the slices", "\n", "for", "metric", ",", "value", "in", "compounds", ".", "items", "(", ")", ":", "\n", "      ", "count", "=", "len", "(", "value", ")", "\n", "if", "count", "==", "0", ":", "\n", "        ", "continue", "\n", "\n", "", "compound", "=", "np", ".", "mean", "(", "value", ")", "\n", "metrics_values_compound", "[", "metric", "]", ".", "append", "(", "compound", ")", "\n", "data", "[", "metric", "]", "=", "compound", "\n", "\n", "", "", "data", "=", "{", "\"layer_count\"", ":", "layer_count", ",", "\"level\"", ":", "\"NETWORK\"", ",", "\"comment\"", ":", "\"Network Level\"", "}", "\n", "for", "metric", ",", "metric_name", "in", "metrics", ".", "items", "(", ")", ":", "\n", "    ", "if", "metric", "not", "in", "metrics_values", "or", "len", "(", "metrics_values", "[", "metric", "]", ")", "==", "0", ":", "\n", "      ", "continue", "\n", "\n", "", "values", "=", "metrics_values", "[", "metric", "]", "\n", "minimum", "=", "min", "(", "values", ")", "\n", "maximum", "=", "max", "(", "values", ")", "\n", "avg", "=", "np", ".", "mean", "(", "values", ")", "\n", "final_summary", "[", "metric", "]", "=", "avg", "\n", "# print(\"{}: min: {}, max: {}, avg: {}\".format(metric_name, minimum, maximum, avg))", "\n", "data", "[", "\"{}_min\"", ".", "format", "(", "metric", ")", "]", "=", "minimum", "\n", "data", "[", "\"{}_max\"", ".", "format", "(", "metric", ")", "]", "=", "maximum", "\n", "data", "[", "\"{}_avg\"", ".", "format", "(", "metric", ")", "]", "=", "avg", "\n", "\n", "values", "=", "metrics_values_compound", "[", "metric", "]", "\n", "minimum", "=", "min", "(", "values", ")", "\n", "maximum", "=", "max", "(", "values", ")", "\n", "avg", "=", "np", ".", "mean", "(", "values", ")", "\n", "final_summary", "[", "\"{}_compound\"", ".", "format", "(", "metric", ")", "]", "=", "avg", "\n", "# print(\"{} compound: min: {}, max: {}, avg: {}\".format(metric_name, minimum, maximum, avg))", "\n", "data", "[", "\"{}_compound_min\"", ".", "format", "(", "metric", ")", "]", "=", "minimum", "\n", "data", "[", "\"{}_compound_max\"", ".", "format", "(", "metric", ")", "]", "=", "maximum", "\n", "data", "[", "\"{}_compound_avg\"", ".", "format", "(", "metric", ")", "]", "=", "avg", "\n", "\n", "", "return", "final_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.analyze": [[285, 320], ["model.named_modules", "collections.OrderedDict", "enumerate", "weight_watcher.compute_details", "isinstance", "isinstance", "weight_watcher.analyze_weights", "type", "weight_watcher.available_module_types", "names.append", "modules.append", "weight_watcher.get_conv2D_Wmats", "module.weight.cpu().detach().numpy", "module.weight.cpu().detach().numpy", "module.weight.cpu().detach", "module.weight.cpu().detach", "module.weight.cpu", "module.weight.cpu"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.compute_details", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.analyze_weights", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.available_module_types", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.weight_watcher.get_conv2D_Wmats"], ["", "def", "analyze", "(", "model", ":", "nn", ".", "Module", ",", "min_size", "=", "50", ",", "max_size", "=", "0", ",", "\n", "alphas", ":", "bool", "=", "False", ",", "lognorms", ":", "bool", "=", "True", ",", "spectralnorms", ":", "bool", "=", "False", ",", "\n", "softranks", ":", "bool", "=", "False", ",", "normalize", ":", "bool", "=", "False", ",", "glorot_fix", ":", "bool", "=", "False", ")", ":", "\n", "  ", "\"\"\"\n  Analyze the weight matrices of a model.\n  :param model: A PyTorch model\n  :param min_size: The minimum weight matrix size to analyze.\n  :param max_size: The maximum weight matrix size to analyze (0 = no limit).\n  :param alphas: Compute the power laws (alpha) of the weight matrices.\n    Time consuming so disabled by default (use lognorm if you want speed)\n  :param lognorms: Compute the log norms of the weight matrices.\n  :param spectralnorms: Compute the spectral norm (max eigenvalue) of the weight matrices.\n  :param softranks: Compute the soft norm (i.e. StableRank) of the weight matrices.\n  :param normalize: Normalize or not.\n  :param glorot_fix:\n  :return: (a dict of all layers' results, a dict of the summarized info)\n  \"\"\"", "\n", "names", ",", "modules", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "available_module_types", "(", ")", ")", ":", "\n", "      ", "names", ".", "append", "(", "name", ")", "\n", "modules", ".", "append", "(", "module", ")", "\n", "# print('There are {:} layers to be analyzed in this model.'.format(len(modules)))", "\n", "", "", "all_results", "=", "OrderedDict", "(", ")", "\n", "for", "index", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "      ", "weights", "=", "[", "module", ".", "weight", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", "\n", "", "else", ":", "\n", "      ", "weights", "=", "get_conv2D_Wmats", "(", "module", ".", "weight", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "results", "=", "analyze_weights", "(", "weights", ",", "min_size", ",", "max_size", ",", "alphas", ",", "lognorms", ",", "spectralnorms", ",", "softranks", ",", "normalize", ",", "glorot_fix", ")", "\n", "results", "[", "'id'", "]", "=", "index", "\n", "results", "[", "'type'", "]", "=", "type", "(", "module", ")", "\n", "all_results", "[", "index", "]", "=", "results", "\n", "", "summary", "=", "compute_details", "(", "all_results", ")", "\n", "return", "all_results", ",", "summary", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.__init__": [[6, 8], ["gpu_manager.GPUManager.query_gpu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.query_gpu"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "all_gpus", "=", "self", ".", "query_gpu", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.get_info": [[9, 14], ["os.popen().readlines", "line.strip", "os.popen"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "ctype", ")", ":", "\n", "    ", "cmd", "=", "'nvidia-smi --query-gpu={} --format=csv,noheader'", ".", "format", "(", "ctype", ")", "\n", "lines", "=", "os", ".", "popen", "(", "cmd", ")", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "line", ".", "strip", "(", "'\\n'", ")", "for", "line", "in", "lines", "]", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.query_gpu": [[15, 49], ["len", "gpu_manager.GPUManager.get_info", "gpu_manager.GPUManager.get_info", "enumerate", "os.environ[].split", "enumerate", "range", "selected_gpus.append", "query.find", "gpu.copy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.get_info", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.get_info", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy"], ["", "def", "query_gpu", "(", "self", ",", "show", "=", "True", ")", ":", "\n", "    ", "num_gpus", "=", "len", "(", "self", ".", "get_info", "(", "'index'", ")", ")", "\n", "all_gpus", "=", "[", "{", "}", "for", "i", "in", "range", "(", "num_gpus", ")", "]", "\n", "for", "query", "in", "self", ".", "queries", ":", "\n", "      ", "infos", "=", "self", ".", "get_info", "(", "query", ")", "\n", "for", "idx", ",", "info", "in", "enumerate", "(", "infos", ")", ":", "\n", "        ", "all_gpus", "[", "idx", "]", "[", "query", "]", "=", "info", "\n", "\n", "", "", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "      ", "CUDA_VISIBLE_DEVICES", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", "\n", "selected_gpus", "=", "[", "]", "\n", "for", "idx", ",", "CUDA_VISIBLE_DEVICE", "in", "enumerate", "(", "CUDA_VISIBLE_DEVICES", ")", ":", "\n", "        ", "find", "=", "False", "\n", "for", "gpu", "in", "all_gpus", ":", "\n", "          ", "if", "gpu", "[", "'index'", "]", "==", "CUDA_VISIBLE_DEVICE", ":", "\n", "            ", "assert", "not", "find", ",", "'Duplicate cuda device index : {}'", ".", "format", "(", "CUDA_VISIBLE_DEVICE", ")", "\n", "find", "=", "True", "\n", "selected_gpus", ".", "append", "(", "gpu", ".", "copy", "(", ")", ")", "\n", "selected_gpus", "[", "-", "1", "]", "[", "'index'", "]", "=", "'{}'", ".", "format", "(", "idx", ")", "\n", "", "", "assert", "find", ",", "'Does not find the device : {}'", ".", "format", "(", "CUDA_VISIBLE_DEVICE", ")", "\n", "", "all_gpus", "=", "selected_gpus", "\n", "\n", "", "if", "show", ":", "\n", "      ", "allstrings", "=", "''", "\n", "for", "gpu", "in", "all_gpus", ":", "\n", "        ", "string", "=", "'| '", "\n", "for", "query", "in", "self", ".", "queries", ":", "\n", "          ", "if", "query", ".", "find", "(", "'memory'", ")", "==", "0", ":", "xinfo", "=", "'{:>9}'", ".", "format", "(", "gpu", "[", "query", "]", ")", "\n", "else", ":", "xinfo", "=", "gpu", "[", "query", "]", "\n", "string", "=", "string", "+", "query", "+", "' : '", "+", "xinfo", "+", "' | '", "\n", "", "allstrings", "=", "allstrings", "+", "string", "+", "'\\n'", "\n", "", "return", "allstrings", "\n", "", "else", ":", "\n", "      ", "return", "all_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.select_by_memory": [[50, 63], ["gpu_manager.GPUManager.query_gpu", "enumerate", "alls.sort", "sorted", "len", "int", "alls.append", "int", "int.split", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.gpu_manager.GPUManager.query_gpu", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "select_by_memory", "(", "self", ",", "numbers", "=", "1", ")", ":", "\n", "    ", "all_gpus", "=", "self", ".", "query_gpu", "(", "False", ")", "\n", "assert", "numbers", "<=", "len", "(", "all_gpus", ")", ",", "'Require {} gpus more than you have'", ".", "format", "(", "numbers", ")", "\n", "alls", "=", "[", "]", "\n", "for", "idx", ",", "gpu", "in", "enumerate", "(", "all_gpus", ")", ":", "\n", "      ", "free_memory", "=", "gpu", "[", "'memory.free'", "]", "\n", "free_memory", "=", "free_memory", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "free_memory", "=", "int", "(", "free_memory", ")", "\n", "index", "=", "gpu", "[", "'index'", "]", "\n", "alls", ".", "append", "(", "(", "free_memory", ",", "index", ")", ")", "\n", "", "alls", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "alls", "=", "[", "int", "(", "alls", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "numbers", ")", "]", "\n", "return", "sorted", "(", "alls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.identity2affine": [[6, 14], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["def", "identity2affine", "(", "full", "=", "False", ")", ":", "\n", "  ", "if", "not", "full", ":", "\n", "    ", "parameters", "=", "torch", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "parameters", "[", "1", ",", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "    ", "parameters", "=", "torch", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "parameters", "[", "1", ",", "1", "]", "=", "parameters", "[", "2", ",", "2", "]", "=", "1", "\n", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L": [[15, 17], ["None"], "function", ["None"], ["", "def", "normalize_L", "(", "x", ",", "L", ")", ":", "\n", "  ", "return", "-", "1.", "+", "2.", "*", "x", "/", "(", "L", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_L": [[18, 20], ["None"], "function", ["None"], ["", "def", "denormalize_L", "(", "x", ",", "L", ")", ":", "\n", "  ", "return", "(", "x", "+", "1.0", ")", "/", "2.0", "*", "(", "L", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.crop2affine": [[21, 33], ["torch.zeros", "torch.zeros", "len", "affine_utils.normalize_L", "affine_utils.normalize_L", "affine_utils.normalize_L", "affine_utils.normalize_L"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L"], ["", "def", "crop2affine", "(", "crop_box", ",", "W", ",", "H", ")", ":", "\n", "  ", "assert", "len", "(", "crop_box", ")", "==", "4", ",", "'Invalid crop-box : {:}'", ".", "format", "(", "crop_box", ")", "\n", "parameters", "=", "torch", ".", "zeros", "(", "3", ",", "3", ")", "\n", "x1", ",", "y1", "=", "normalize_L", "(", "crop_box", "[", "0", "]", ",", "W", ")", ",", "normalize_L", "(", "crop_box", "[", "1", "]", ",", "H", ")", "\n", "x2", ",", "y2", "=", "normalize_L", "(", "crop_box", "[", "2", "]", ",", "W", ")", ",", "normalize_L", "(", "crop_box", "[", "3", "]", ",", "H", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "(", "x2", "-", "x1", ")", "/", "2", "\n", "parameters", "[", "0", ",", "2", "]", "=", "(", "x2", "+", "x1", ")", "/", "2", "\n", "\n", "parameters", "[", "1", ",", "1", "]", "=", "(", "y2", "-", "y1", ")", "/", "2", "\n", "parameters", "[", "1", ",", "2", "]", "=", "(", "y2", "+", "y1", ")", "/", "2", "\n", "parameters", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.scale2affine": [[34, 40], ["torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "scale2affine", "(", "scalex", ",", "scaley", ")", ":", "\n", "  ", "parameters", "=", "torch", ".", "zeros", "(", "3", ",", "3", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "scalex", "\n", "parameters", "[", "1", ",", "1", "]", "=", "scaley", "\n", "parameters", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.offset2affine": [[41, 47], ["torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "offset2affine", "(", "offx", ",", "offy", ")", ":", "\n", "  ", "parameters", "=", "torch", ".", "zeros", "(", "3", ",", "3", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "parameters", "[", "1", ",", "1", "]", "=", "parameters", "[", "2", ",", "2", "]", "=", "1", "\n", "parameters", "[", "0", ",", "2", "]", "=", "offx", "\n", "parameters", "[", "1", ",", "2", "]", "=", "offy", "\n", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.horizontalmirror2affine": [[48, 53], ["torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "horizontalmirror2affine", "(", ")", ":", "\n", "  ", "parameters", "=", "torch", ".", "zeros", "(", "3", ",", "3", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "-", "1", "\n", "parameters", "[", "1", ",", "1", "]", "=", "parameters", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.rotate2affine": [[56, 66], ["torch.zeros", "torch.zeros", "math.cos", "math.sin", "math.cos", "math.sin"], "function", ["None"], ["", "def", "rotate2affine", "(", "degree", ")", ":", "\n", "  ", "assert", "degree", ">=", "0", "and", "degree", "<=", "360", ",", "'Invalid degree : {:}'", ".", "format", "(", "degree", ")", "\n", "degree", "=", "degree", "/", "180", "*", "math", ".", "pi", "\n", "parameters", "=", "torch", ".", "zeros", "(", "3", ",", "3", ")", "\n", "parameters", "[", "0", ",", "0", "]", "=", "math", ".", "cos", "(", "-", "degree", ")", "\n", "parameters", "[", "0", ",", "1", "]", "=", "-", "math", ".", "sin", "(", "-", "degree", ")", "\n", "parameters", "[", "1", ",", "0", "]", "=", "math", ".", "sin", "(", "-", "degree", ")", "\n", "parameters", "[", "1", ",", "1", "]", "=", "math", ".", "cos", "(", "-", "degree", ")", "\n", "parameters", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_points": [[68, 75], ["affine_utils.normalize_L", "affine_utils.normalize_L", "isinstance", "points.clone", "isinstance", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L"], ["", "def", "normalize_points", "(", "shape", ",", "points", ")", ":", "\n", "  ", "assert", "(", "isinstance", "(", "shape", ",", "tuple", ")", "or", "isinstance", "(", "shape", ",", "list", ")", ")", "and", "len", "(", "shape", ")", "==", "2", ",", "'invalid shape : {:}'", ".", "format", "(", "shape", ")", "\n", "assert", "isinstance", "(", "points", ",", "torch", ".", "Tensor", ")", "and", "(", "points", ".", "shape", "[", "0", "]", "==", "2", ")", ",", "'points are wrong : {:}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "(", "H", ",", "W", ")", ",", "points", "=", "shape", ",", "points", ".", "clone", "(", ")", "\n", "points", "[", "0", ",", ":", "]", "=", "normalize_L", "(", "points", "[", "0", ",", ":", "]", ",", "W", ")", "\n", "points", "[", "1", ",", ":", "]", "=", "normalize_L", "(", "points", "[", "1", ",", ":", "]", ",", "H", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_points_batch": [[77, 84], ["affine_utils.normalize_L", "affine_utils.normalize_L", "torch.stack", "torch.stack", "isinstance", "points.clone", "isinstance", "isinstance", "len", "points.size"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_L"], ["", "def", "normalize_points_batch", "(", "shape", ",", "points", ")", ":", "\n", "  ", "assert", "(", "isinstance", "(", "shape", ",", "tuple", ")", "or", "isinstance", "(", "shape", ",", "list", ")", ")", "and", "len", "(", "shape", ")", "==", "2", ",", "'invalid shape : {:}'", ".", "format", "(", "shape", ")", "\n", "assert", "isinstance", "(", "points", ",", "torch", ".", "Tensor", ")", "and", "(", "points", ".", "size", "(", "-", "1", ")", "==", "2", ")", ",", "'points are wrong : {:}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "(", "H", ",", "W", ")", ",", "points", "=", "shape", ",", "points", ".", "clone", "(", ")", "\n", "x", "=", "normalize_L", "(", "points", "[", "...", ",", "0", "]", ",", "W", ")", "\n", "y", "=", "normalize_L", "(", "points", "[", "...", ",", "1", "]", ",", "H", ")", "\n", "return", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_points": [[86, 93], ["affine_utils.denormalize_L", "affine_utils.denormalize_L", "isinstance", "points.clone", "isinstance", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_L"], ["", "def", "denormalize_points", "(", "shape", ",", "points", ")", ":", "\n", "  ", "assert", "(", "isinstance", "(", "shape", ",", "tuple", ")", "or", "isinstance", "(", "shape", ",", "list", ")", ")", "and", "len", "(", "shape", ")", "==", "2", ",", "'invalid shape : {:}'", ".", "format", "(", "shape", ")", "\n", "assert", "isinstance", "(", "points", ",", "torch", ".", "Tensor", ")", "and", "(", "points", ".", "shape", "[", "0", "]", "==", "2", ")", ",", "'points are wrong : {:}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "(", "H", ",", "W", ")", ",", "points", "=", "shape", ",", "points", ".", "clone", "(", ")", "\n", "points", "[", "0", ",", ":", "]", "=", "denormalize_L", "(", "points", "[", "0", ",", ":", "]", ",", "W", ")", "\n", "points", "[", "1", ",", ":", "]", "=", "denormalize_L", "(", "points", "[", "1", ",", ":", "]", ",", "H", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_points_batch": [[95, 102], ["affine_utils.denormalize_L", "affine_utils.denormalize_L", "torch.stack", "torch.stack", "isinstance", "points.clone", "isinstance", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_L", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_L"], ["", "def", "denormalize_points_batch", "(", "shape", ",", "points", ")", ":", "\n", "  ", "assert", "(", "isinstance", "(", "shape", ",", "tuple", ")", "or", "isinstance", "(", "shape", ",", "list", ")", ")", "and", "len", "(", "shape", ")", "==", "2", ",", "'invalid shape : {:}'", ".", "format", "(", "shape", ")", "\n", "assert", "isinstance", "(", "points", ",", "torch", ".", "Tensor", ")", "and", "(", "points", ".", "shape", "[", "-", "1", "]", "==", "2", ")", ",", "'points are wrong : {:}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "(", "H", ",", "W", ")", ",", "points", "=", "shape", ",", "points", ".", "clone", "(", ")", "\n", "x", "=", "denormalize_L", "(", "points", "[", "...", ",", "0", "]", ",", "W", ")", "\n", "y", "=", "denormalize_L", "(", "points", "[", "...", ",", "1", "]", ",", "H", ")", "\n", "return", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.solve2theta": [[104, 117], ["torch.gels", "torch.gels", "X_[].transpose", "source.clone", "torch.cat.clone", "torch.sum().item", "torch.sum().item", "torch.cat.size", "torch.cat", "torch.cat", "source.transpose", "torch.cat.transpose", "source.size", "torch.cat.size", "torch.sum", "torch.sum", "oks.unsqueeze().float", "oks.unsqueeze"], "function", ["None"], ["", "def", "solve2theta", "(", "source", ",", "target", ")", ":", "\n", "  ", "source", ",", "target", "=", "source", ".", "clone", "(", ")", ",", "target", ".", "clone", "(", ")", "\n", "oks", "=", "source", "[", "2", ",", ":", "]", "==", "1", "\n", "assert", "torch", ".", "sum", "(", "oks", ")", ".", "item", "(", ")", ">=", "3", ",", "'valid points : {:} is short'", ".", "format", "(", "oks", ")", "\n", "if", "target", ".", "size", "(", "0", ")", "==", "2", ":", "target", "=", "torch", ".", "cat", "(", "(", "target", ",", "oks", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "source", ",", "target", "=", "source", "[", ":", ",", "oks", "]", ",", "target", "[", ":", ",", "oks", "]", "\n", "source", ",", "target", "=", "source", ".", "transpose", "(", "1", ",", "0", ")", ",", "target", ".", "transpose", "(", "1", ",", "0", ")", "\n", "assert", "source", ".", "size", "(", "1", ")", "==", "target", ".", "size", "(", "1", ")", "==", "3", "\n", "#X, residual, rank, s = np.linalg.lstsq(target.numpy(), source.numpy())", "\n", "#theta = torch.Tensor(X.T[:2, :])", "\n", "X_", ",", "qr", "=", "torch", ".", "gels", "(", "source", ",", "target", ")", "\n", "theta", "=", "X_", "[", ":", "3", ",", ":", "2", "]", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.affine2image": [[119, 126], ["image.size", "theta[].unsqueeze", "torch.Size", "torch.Size", "torch.affine_grid", "torch.grid_sample", "F.grid_sample.squeeze", "image.unsqueeze"], "function", ["None"], ["", "def", "affine2image", "(", "image", ",", "theta", ",", "shape", ")", ":", "\n", "  ", "C", ",", "H", ",", "W", "=", "image", ".", "size", "(", ")", "\n", "theta", "=", "theta", "[", ":", "2", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "grid_size", "=", "torch", ".", "Size", "(", "[", "1", ",", "C", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "]", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "grid_size", ")", "\n", "affI", "=", "F", ".", "grid_sample", "(", "image", ".", "unsqueeze", "(", "0", ")", ",", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "return", "affI", ".", "squeeze", "(", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.nas_utils.evaluate_one_shot": [[12, 58], ["print", "copy.deepcopy", "model.train", "model.load_state_dict", "model.state_dict", "torch.no_grad", "torch.no_grad", "torch.functional.log_softmax", "models.CellStructure.gen_all", "iter", "random.seed", "random.shuffle", "enumerate", "print", "enumerate", "api.query_index_by_arch", "api.get_more_info", "gt_accs_10_valid.append", "api.get_more_info", "gt_accs_10_test.append", "enumerate", "sum().item", "probs.append", "numpy.corrcoef", "numpy.corrcoef", "model.set_cal_mode", "model", "torch.max", "torch.max", "accuracies.append", "log_utils.time_string", "next", "inputs.cuda", "correct.mean().item", "print", "model.op_names.index", "select_logits.append", "sum", "iter", "next", "numpy.corrcoef", "numpy.corrcoef", "targets.cuda", "correct.mean", "len", "log_utils.time_string", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.state_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.gen_all", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_index_by_arch", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.get_more_info", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.get_more_info", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.set_cal_mode", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["def", "evaluate_one_shot", "(", "model", ",", "xloader", ",", "api", ",", "cal_mode", ",", "seed", "=", "111", ")", ":", "\n", "  ", "print", "(", "'This is an old version of codes to use NAS-Bench-API, and should be modified to align with the new version. Please contact me for more details if you use this function.'", ")", "\n", "weights", "=", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "model", ".", "train", "(", "cal_mode", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "logits", "=", "nn", ".", "functional", ".", "log_softmax", "(", "model", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "archs", "=", "CellStructure", ".", "gen_all", "(", "model", ".", "op_names", ",", "model", ".", "max_nodes", ",", "False", ")", "\n", "probs", ",", "accuracies", ",", "gt_accs_10_valid", ",", "gt_accs_10_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "loader_iter", "=", "iter", "(", "xloader", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "shuffle", "(", "archs", ")", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "archs", ")", ":", "\n", "      ", "arch_index", "=", "api", ".", "query_index_by_arch", "(", "arch", ")", "\n", "metrics", "=", "api", ".", "get_more_info", "(", "arch_index", ",", "'cifar10-valid'", ",", "None", ",", "False", ",", "False", ")", "\n", "gt_accs_10_valid", ".", "append", "(", "metrics", "[", "'valid-accuracy'", "]", ")", "\n", "metrics", "=", "api", ".", "get_more_info", "(", "arch_index", ",", "'cifar10'", ",", "None", ",", "False", ",", "False", ")", "\n", "gt_accs_10_test", ".", "append", "(", "metrics", "[", "'test-accuracy'", "]", ")", "\n", "select_logits", "=", "[", "]", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "arch", ".", "nodes", ")", ":", "\n", "        ", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "1", ",", "xin", ")", "\n", "op_index", "=", "model", ".", "op_names", ".", "index", "(", "op", ")", "\n", "select_logits", ".", "append", "(", "logits", "[", "model", ".", "edge2index", "[", "node_str", "]", ",", "op_index", "]", ")", "\n", "", "", "cur_prob", "=", "sum", "(", "select_logits", ")", ".", "item", "(", ")", "\n", "probs", ".", "append", "(", "cur_prob", ")", "\n", "", "cor_prob_valid", "=", "np", ".", "corrcoef", "(", "probs", ",", "gt_accs_10_valid", ")", "[", "0", ",", "1", "]", "\n", "cor_prob_test", "=", "np", ".", "corrcoef", "(", "probs", ",", "gt_accs_10_test", ")", "[", "0", ",", "1", "]", "\n", "print", "(", "'{:} correlation for probabilities : {:.6f} on CIFAR-10 validation and {:.6f} on CIFAR-10 test'", ".", "format", "(", "time_string", "(", ")", ",", "cor_prob_valid", ",", "cor_prob_test", ")", ")", "\n", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "archs", ")", ":", "\n", "      ", "model", ".", "set_cal_mode", "(", "'dynamic'", ",", "arch", ")", "\n", "try", ":", "\n", "        ", "inputs", ",", "targets", "=", "next", "(", "loader_iter", ")", "\n", "", "except", ":", "\n", "        ", "loader_iter", "=", "iter", "(", "xloader", ")", "\n", "inputs", ",", "targets", "=", "next", "(", "loader_iter", ")", "\n", "", "_", ",", "logits", "=", "model", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "correct", "=", "(", "preds", "==", "targets", ".", "cuda", "(", ")", ")", ".", "float", "(", ")", "\n", "accuracies", ".", "append", "(", "correct", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "if", "idx", "!=", "0", "and", "(", "idx", "%", "500", "==", "0", "or", "idx", "+", "1", "==", "len", "(", "archs", ")", ")", ":", "\n", "        ", "cor_accs_valid", "=", "np", ".", "corrcoef", "(", "accuracies", ",", "gt_accs_10_valid", "[", ":", "idx", "+", "1", "]", ")", "[", "0", ",", "1", "]", "\n", "cor_accs_test", "=", "np", ".", "corrcoef", "(", "accuracies", ",", "gt_accs_10_test", "[", ":", "idx", "+", "1", "]", ")", "[", "0", ",", "1", "]", "\n", "print", "(", "'{:} {:05d}/{:05d} mode={:5s}, correlation : accs={:.5f} for CIFAR-10 valid, {:.5f} for CIFAR-10 test.'", ".", "format", "(", "time_string", "(", ")", ",", "idx", ",", "len", "(", "archs", ")", ",", "'Train'", "if", "cal_mode", "else", "'Eval'", ",", "cor_accs_valid", ",", "cor_accs_test", ")", ")", "\n", "", "", "", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "return", "archs", ",", "probs", ",", "accuracies", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy": [[3, 17], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "obtain_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.__init__": [[9, 29], ["str", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "acq_func", "=", "'RANDOM'", ",", "shaping_func", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "search_space", "=", "space", "\n", "if", "not", "type", "(", "acq_func", ")", "==", "list", ":", "\n", "            ", "self", ".", "acq_funcs", "=", "[", "acq_func", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "acq_funcs", "=", "acq_func", "\n", "\n", "", "self", ".", "est_eval_time", "=", "None", "\n", "self", ".", "time_penalties", "=", "[", "]", "\n", "\n", "self", ".", "func_m", "=", "[", "]", "\n", "self", ".", "func_v", "=", "[", "]", "\n", "self", ".", "best_err", "=", "None", "\n", "self", ".", "model_spec", "=", "None", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "shaping_func", "=", "str", "(", "shaping_func", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "shaping_func", "=", "'no_shaping'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.add_time_acq_func": [[32, 41], ["type", "base.BaseChooser.time_penalties.append", "base.BaseChooser.acq_funcs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "add_time_acq_func", "(", "self", ",", "time_penalties", ")", ":", "\n", "        ", "if", "type", "(", "time_penalties", ")", "!=", "list", ":", "\n", "            ", "time_penalties", "=", "[", "time_penalties", "]", "\n", "\n", "", "for", "time_penalty", "in", "time_penalties", ":", "\n", "            ", "self", ".", "time_penalties", ".", "append", "(", "time_penalty", ")", "\n", "\n", "", "for", "time_penalty", "in", "time_penalties", ":", "\n", "            ", "self", ".", "acq_funcs", ".", "append", "(", "time_penalty", "[", "'name'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.set_eval_time_penalty": [[42, 44], ["None"], "methods", ["None"], ["", "", "def", "set_eval_time_penalty", "(", "self", ",", "est_eval_time", ")", ":", "\n", "        ", "self", ".", "est_eval_time", "=", "est_eval_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.output_transform": [[45, 68], ["eval", "numpy.vectorize", "numpy.vectorize", "numpy.vectorize.", "numpy.min", "numpy.min", "transform.apply_power_transform", "transform.apply_power_transform", "numpy.std", "numpy.std", "warn", "numpy.vectorize.", "numpy.std", "numpy.std", "numpy.std", "numpy.std", "numpy.std", "numpy.std", "transform.apply_power_transform", "numpy.std", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.vectorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.vectorize", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_power_transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_power_transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_power_transform"], ["", "def", "output_transform", "(", "self", ",", "errs", ")", ":", "\n", "# transform errors for enhancing optimization performance", "\n", "        ", "func", "=", "eval", "(", "'apply_{}'", ".", "format", "(", "self", ".", "shaping_func", ")", ")", "\n", "v_func", "=", "np", ".", "vectorize", "(", "func", ")", "\n", "if", "self", ".", "shaping_func", "==", "\"hybrid_log\"", ":", "\n", "            ", "errs", "=", "v_func", "(", "errs", ",", "threshold", "=", "self", ".", "alpha", ")", "\n", "", "elif", "self", ".", "shaping_func", "==", "\"power_transform\"", ":", "\n", "# power transformation is closely implemented similar to HEBO", "\n", "            ", "if", "np", ".", "min", "(", "errs", ")", "<=", "0.0", ":", "\n", "                ", "norm_errs", "=", "apply_power_transform", "(", "errs", ",", "np", ".", "std", "(", "errs", ")", ",", "'yeo-johnson'", ")", "\n", "", "else", ":", "\n", "                ", "norm_errs", "=", "apply_power_transform", "(", "errs", ",", "np", ".", "std", "(", "errs", ")", ",", "'box-cox'", ")", "\n", "if", "np", ".", "std", "(", "norm_errs", ")", "<", "0.5", ":", "\n", "                    ", "norm_errs", "=", "apply_power_transform", "(", "norm_errs", ",", "np", ".", "std", "(", "norm_errs", ")", ",", "'yeo-johnson'", ")", "\n", "", "", "if", "np", ".", "std", "(", "norm_errs", ")", "<", "0.5", ":", "\n", "                ", "warn", "(", "'Power transformation failed due to high variance'", ")", "\n", "", "else", ":", "\n", "                ", "errs", "=", "norm_errs", "\n", "", "", "elif", "self", ".", "shaping_func", "==", "'no_shaping'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "errs", "=", "v_func", "(", "errs", ")", "\n", "", "return", "errs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.is_modeled": [[69, 89], ["len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "is_modeled", "(", "self", ",", "candidates", ",", "completions", ")", ":", "\n", "# check whether the probabilistic model has been built already.", "\n", "        ", "if", "len", "(", "self", ".", "func_m", ")", "==", "0", "or", "len", "(", "self", ".", "func_v", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "model_spec", "==", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "len", "(", "self", ".", "model_spec", "[", "'inputs'", "]", ")", "!=", "len", "(", "completions", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "self", ".", "best_err", "==", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "for", "c", "in", "completions", ":", "\n", "            ", "if", "not", "c", "in", "self", ".", "model_spec", "[", "'inputs'", "]", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "if", "len", "(", "self", ".", "model_spec", "[", "'outputs'", "]", ")", "!=", "len", "(", "candidates", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.get_valid_obs": [[90, 106], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "base.BaseChooser.search_space.get_param_vectors", "base.BaseChooser.search_space.get_errors", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "len", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "warn", "numpy.argwhere", "numpy.argwhere", "numpy.isnan", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "get_valid_obs", "(", "self", ",", "min_epoch", "=", "0", ")", ":", "\n", "        ", "comp", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_param_vectors", "(", "\"completions\"", ",", "min_epoch", ")", ")", "\n", "errs", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_errors", "(", "\"completions\"", ",", "min_epoch", ",", "error_type", "=", "'valid'", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "try", ":", "\n", "            ", "none_indices", "=", "np", ".", "argwhere", "(", "np", ".", "isnan", "(", "errs", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "if", "len", "(", "none_indices", ")", ">", "0", ":", "\n", "#debug(\"# of failed evaluations: {}\".format(len(none_indices)))", "\n", "                ", "errs", "=", "np", ".", "delete", "(", "errs", ",", "none_indices", ")", "\n", "comp", "=", "np", ".", "delete", "(", "comp", ",", "none_indices", ",", "0", ")", "# last 0 is very important!", "\n", "#debug(\"NaN results deleted: {}, {}\".format(comp.shape, errs.shape))  ", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception raised when getting on valid observations: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "#debug('Completed indices: {}'.format(self.search_space.get_completions()))", "\n", "", "return", "comp", ",", "errs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.next": [[107, 118], ["numpy.array", "numpy.array", "base.BaseChooser.search_space.get_candidates", "int", "int", "ValueError", "int", "numpy.floor", "numpy.floor", "numpy.rand", "numpy.rand"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates"], ["", "def", "next", "(", "self", ",", "af", ",", "min_epoch", "=", "0", ")", ":", "\n", "\n", "        ", "candidates", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "if", "af", "==", "'RANDOM'", ":", "\n", "# Base chooser select uniformly at random ", "\n", "            ", "next_index", "=", "int", "(", "candidates", "[", "int", "(", "np", ".", "floor", "(", "candidates", ".", "shape", "[", "0", "]", "*", "npr", ".", "rand", "(", ")", ")", ")", "]", ")", "\n", "", "elif", "af", "==", "'SEQ'", ":", "\n", "            ", "next_index", "=", "int", "(", "candidates", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported acquistion function: {}\"", ".", "format", "(", "af", ")", ")", "\n", "", "return", "next_index", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.reset": [[119, 121], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.build_model": [[122, 124], ["NotImplementedError"], "methods", ["None"], ["", "def", "build_model", "(", "self", ",", "comp", ",", "cand", ",", "errs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'build_model() is not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.estimate": [[125, 127], ["NotImplementedError"], "methods", ["None"], ["", "def", "estimate", "(", "self", ",", "af", ",", "test_set_size", "=", "10", ",", "metric", "=", "'top1'", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'estimate() is not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.cross_validate": [[128, 142], ["int", "base.BaseChooser.split_dataset", "base.BaseChooser.train_valid", "score_list.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.split_dataset", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.train_valid", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "cross_validate", "(", "self", ",", "comp_vec", ",", "errs", ",", "acq_func", ",", "test_set_size", "=", "10", ",", "metric", "=", "'top1'", ")", ":", "\n", "        ", "k", "=", "int", "(", "len", "(", "errs", ")", "/", "test_set_size", ")", "\n", "if", "k", ">", "5", ":", "\n", "            ", "k", "=", "5", "# limit up to 5-fold CV", "\n", "", "dataset_list", "=", "self", ".", "split_dataset", "(", "comp_vec", ",", "errs", ",", "k", ")", "\n", "score_list", "=", "[", "]", "\n", "score", "=", "0.0", "\n", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "            ", "score", "=", "self", ".", "train_valid", "(", "dataset", ",", "acq_func", ",", "test_set_size", ",", "metric", ")", "\n", "\n", "score_list", ".", "append", "(", "score", ")", "\n", "\n", "", "return", "score_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.train_valid": [[143, 181], ["train_X.append", "train_y.append", "len", "test_X.append", "test_y.append", "base.BaseChooser.build_model", "numpy.min", "numpy.min", "scipy.stats.rankdata", "scipy.stats.rankdata", "scipy.stats.spearmanr", "debug", "scipy.stats.rankdata.tolist().index", "acq_func", "scipy.stats.rankdata.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.build_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "train_valid", "(", "self", ",", "dataset", ",", "acq_func", ",", "test_set_size", ",", "metric", ")", ":", "\n", "        ", "train_set", "=", "dataset", "[", "'train'", "]", "\n", "train_X", "=", "[", "]", "\n", "train_y", "=", "[", "]", "\n", "\n", "for", "d", "in", "train_set", ":", "\n", "            ", "train_X", ".", "append", "(", "d", "[", "'X'", "]", ")", "\n", "train_y", ".", "append", "(", "d", "[", "'y'", "]", ")", "\n", "\n", "", "test_set", "=", "dataset", "[", "'test'", "]", "\n", "if", "len", "(", "test_set", ")", ">", "test_set_size", ":", "\n", "            ", "test_set", "=", "dataset", "[", "'test'", "]", "[", "test_set_size", ":", "]", "\n", "\n", "", "test_X", "=", "[", "]", "\n", "test_y", "=", "[", "]", "\n", "for", "d", "in", "test_set", ":", "\n", "            ", "test_X", ".", "append", "(", "d", "[", "'X'", "]", ")", "\n", "test_y", ".", "append", "(", "d", "[", "'y'", "]", ")", "\n", "", "try", ":", "\n", "            ", "m", ",", "v", "=", "self", ".", "build_model", "(", "train_X", ",", "test_X", ",", "train_y", ")", "\n", "\n", "best_err", "=", "np", ".", "min", "(", "train_y", ")", "\n", "est_rank", "=", "rankdata", "(", "[", "-", "1.0", "*", "acq_v", "for", "acq_v", "in", "acq_func", "(", "best_err", ",", "m", ",", "v", ")", "]", ",", "method", "=", "'ordinal'", ")", "\n", "true_rank", "=", "rankdata", "(", "test_y", ",", "method", "=", "'ordinal'", ")", "\n", "\n", "if", "metric", "==", "'spearman'", ":", "\n", "                ", "r", "=", "spearmanr", "(", "est_rank", ",", "true_rank", ")", "\n", "debug", "(", "'The {}'", ".", "format", "(", "r", ")", ")", "\n", "score", "=", "r", "[", "0", "]", "\n", "if", "r", "[", "1", "]", ">", "0.05", ":", "# unreliable performance estimation treated as zero", "\n", "                    ", "score", "=", "0.0", "\n", "", "", "elif", "metric", "==", "'top1'", ":", "\n", "                ", "est_best_i", "=", "est_rank", ".", "tolist", "(", ")", ".", "index", "(", "1", ")", "\n", "real_rank", "=", "true_rank", "[", "est_best_i", "]", "\n", "score", "=", "test_set_size", "-", "real_rank", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "score", "=", "0.0", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.split_dataset": [[182, 205], ["range", "scipy.stats.rankdata", "range", "dataset_list.append", "range", "random.shuffle", "len", "len", "test_set.append", "train_set.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "split_dataset", "(", "self", ",", "comp_vec", ",", "errs", ",", "fold", ",", "order", "=", "'sort'", ")", ":", "\n", "\n", "# NOTE:larger error value has lower order. The order starts with 1.", "\n", "        ", "err_order", "=", "[", "i", "+", "1", "for", "i", "in", "range", "(", "len", "(", "errs", ")", ")", "]", "\n", "if", "order", "==", "'sort'", ":", "\n", "            ", "err_order", "=", "rankdata", "(", "errs", ",", "method", "=", "'ordinal'", ")", "\n", "", "elif", "order", "==", "'shuffle'", ":", "\n", "            ", "random", ".", "shuffle", "(", "err_order", ")", "\n", "\n", "", "dataset_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "fold", ")", ":", "\n", "            ", "train_set", "=", "[", "]", "\n", "test_set", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "err_order", ")", ")", ":", "\n", "                ", "j", "=", "err_order", "[", "i", "]", "-", "1", "# j will be index of comp_vec and errs", "\n", "if", "i", "%", "fold", "==", "k", ":", "\n", "                    ", "test_set", ".", "append", "(", "{", "'X'", ":", "comp_vec", "[", "j", "]", ",", "'y'", ":", "errs", "[", "j", "]", "}", ")", "\n", "", "else", ":", "\n", "                    ", "train_set", ".", "append", "(", "{", "'X'", ":", "comp_vec", "[", "j", "]", ",", "'y'", ":", "errs", "[", "j", "]", "}", ")", "\n", "", "", "dataset_list", ".", "append", "(", "{", "'train'", ":", "train_set", ",", "'test'", ":", "test_set", "}", ")", "\n", "\n", "", "return", "dataset_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.get_acq_func": [[5, 18], ["ValueError"], "function", ["None"], ["def", "get_acq_func", "(", "af", ")", ":", "\n", "    ", "if", "af", "==", "'EI'", ":", "\n", "        ", "acq_func", "=", "compute_ei", "\n", "\n", "", "elif", "af", "==", "'PI'", ":", "\n", "        ", "acq_func", "=", "compute_pi", "\n", "\n", "", "elif", "af", "==", "'UCB'", ":", "\n", "        ", "acq_func", "=", "compute_ucb", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported acquisition function type: {}'", ".", "format", "(", "af", ")", ")", "\n", "\n", "", "return", "acq_func", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.compute_ei": [[24, 33], ["scipy.norm.cdf", "scipy.norm.pdf", "numpy.sqrt"], "function", ["None"], ["", "def", "compute_ei", "(", "best", ",", "func_m", ",", "func_v", ",", "trade_off", "=", "0", ",", "epsilon", "=", "0.0001", ")", ":", "\n", "# Expected improvement", "\n", "    ", "func_s", "=", "np", ".", "sqrt", "(", "func_v", ")", "+", "epsilon", "\n", "u", "=", "(", "best", "-", "func_m", "-", "trade_off", ")", "/", "func_s", "\n", "ncdf", "=", "sps", ".", "norm", ".", "cdf", "(", "u", ")", "\n", "npdf", "=", "sps", ".", "norm", ".", "pdf", "(", "u", ")", "\n", "ei", "=", "func_s", "*", "(", "u", "*", "ncdf", "+", "npdf", ")", "\n", "\n", "return", "ei", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.compute_pi": [[35, 43], ["scipy.norm.cdf", "numpy.sqrt"], "function", ["None"], ["", "def", "compute_pi", "(", "best", ",", "func_m", ",", "func_v", ",", "trade_off", "=", "0", ",", "epsilon", "=", "0.0001", ")", ":", "\n", "# Probability of improvement", "\n", "    ", "func_s", "=", "np", ".", "sqrt", "(", "func_v", ")", "+", "epsilon", "\n", "u", "=", "(", "best", "-", "func_m", "-", "trade_off", ")", "/", "func_s", "\n", "\n", "pi", "=", "sps", ".", "norm", ".", "cdf", "(", "u", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.compute_ucb": [[45, 50], ["numpy.sqrt"], "function", ["None"], ["", "def", "compute_ucb", "(", "best", ",", "func_m", ",", "func_v", ",", "trade_off", "=", "0", ",", "epsilon", "=", "0.0001", ")", ":", "\n", "    ", "func_s", "=", "np", ".", "sqrt", "(", "func_v", ")", "+", "epsilon", "\n", "\n", "ucb", "=", "-", "func_m", "+", "func_s", "\n", "return", "ucb", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.apply_eval_time_penalty": [[56, 69], ["acq.linear_penalty", "acq.top_k_penalty", "acq.per_second_penalty", "acq.per_log_second_penalty", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.linear_penalty", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.top_k_penalty", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.per_second_penalty", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.per_log_second_penalty"], ["", "def", "apply_eval_time_penalty", "(", "time_penalty", ",", "af_vals", ",", "est_eval_time", ",", "penalty_rate", ")", ":", "\n", "    ", "if", "time_penalty", "==", "None", "or", "time_penalty", "==", "\"None\"", ":", "\n", "        ", "return", "af_vals", "\n", "", "elif", "time_penalty", "==", "'linear'", ":", "\n", "        ", "return", "linear_penalty", "(", "af_vals", ",", "est_eval_time", ",", "penalty_rate", ")", "\n", "", "elif", "time_penalty", "==", "'top_k'", ":", "\n", "        ", "return", "top_k_penalty", "(", "af_vals", ",", "est_eval_time", ",", "penalty_rate", ")", "\n", "", "elif", "time_penalty", "==", "'per_second'", ":", "\n", "        ", "return", "per_second_penalty", "(", "af_vals", ",", "est_eval_time", ")", "\n", "", "elif", "time_penalty", "==", "'per_log_second'", ":", "\n", "        ", "return", "per_log_second_penalty", "(", "af_vals", ",", "est_eval_time", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unsupported penalty methods: {}\"", ".", "format", "(", "time_penalty", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.linear_penalty": [[70, 82], ["numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.min"], "function", ["None"], ["", "", "def", "linear_penalty", "(", "af_vals", ",", "et", ",", "alpha", ")", ":", "\n", "    ", "if", "np", ".", "min", "(", "et", ")", "<", "0", ":", "\n", "        ", "et", "=", "et", "-", "np", ".", "min", "(", "et", ")", "\n", "\n", "", "if", "np", ".", "min", "(", "af_vals", ")", "<", "0", ":", "\n", "        ", "af_vals", "=", "af_vals", "-", "np", ".", "min", "(", "af_vals", ")", "\n", "\n", "", "et", "=", "et", "/", "np", ".", "max", "(", "et", ")", "\n", "af_vals", "=", "af_vals", "/", "np", ".", "max", "(", "af_vals", ")", "\n", "new_af_vals", "=", "af_vals", "-", "alpha", "*", "et", "\n", "\n", "return", "new_af_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.top_k_penalty": [[84, 97], ["numpy.min", "numpy.max", "numpy.where", "numpy.min", "af_vals.argsort", "numpy.min"], "function", ["None"], ["", "def", "top_k_penalty", "(", "af_vals", ",", "et", ",", "top_k", ")", ":", "\n", "    ", "if", "np", ".", "min", "(", "af_vals", ")", "<", "0", ":", "\n", "        ", "af_vals", "=", "af_vals", "-", "np", ".", "min", "(", "af_vals", ")", "\n", "\n", "", "af_vals", "=", "af_vals", "/", "np", ".", "max", "(", "af_vals", ")", "\n", "\n", "new_af_vals", "=", "af_vals", "\n", "idxs", "=", "af_vals", ".", "argsort", "(", ")", "[", "-", "top_k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "et_20", "=", "et", "[", "idxs", "]", "\n", "et_min_idx", "=", "np", ".", "where", "(", "et", "==", "np", ".", "min", "(", "et_20", ")", ")", "[", "0", "]", "\n", "new_af_vals", "[", "et_min_idx", "]", "=", "10", "\n", "\n", "return", "new_af_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.per_second_penalty": [[99, 107], ["numpy.min", "numpy.min"], "function", ["None"], ["", "def", "per_second_penalty", "(", "af_vals", ",", "et", ")", ":", "\n", "    ", "if", "np", ".", "min", "(", "et", ")", "<", "0", ":", "\n", "        ", "et", "=", "et", "-", "np", ".", "min", "(", "et", ")", "\n", "\n", "", "et", "=", "et", "+", "10", "\n", "new_af_vals", "=", "af_vals", "/", "et", "\n", "\n", "return", "new_af_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.per_log_second_penalty": [[109, 117], ["numpy.min", "numpy.log", "numpy.min"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "def", "per_log_second_penalty", "(", "af_vals", ",", "et", ")", ":", "\n", "    ", "if", "np", ".", "min", "(", "et", ")", "<", "0", ":", "\n", "        ", "et", "=", "et", "-", "np", ".", "min", "(", "et", ")", "\n", "\n", "", "et", "=", "et", "+", "10", "\n", "new_af_vals", "=", "af_vals", "/", "np", ".", "log", "(", "et", ")", "\n", "\n", "return", "new_af_vals", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_no_shaping": [[12, 14], ["None"], "function", ["None"], ["def", "apply_no_shaping", "(", "err", ")", ":", "\n", "    ", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_log_err": [[16, 25], ["numpy.log10", "abs"], "function", ["None"], ["", "def", "apply_log_err", "(", "err", ")", ":", "\n", "\n", "    ", "err", "=", "np", ".", "log10", "(", "err", ")", "\n", "\n", "if", "err", "<", "LOG_ERR_LOWER_BOUND", ":", "\n", "        ", "err", "=", "LOG_ERR_LOWER_BOUND", "\n", "\n", "", "scale_err", "=", "(", "err", "-", "LOG_ERR_LOWER_BOUND", ")", "/", "abs", "(", "LOG_ERR_LOWER_BOUND", ")", "\n", "return", "scale_err", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_hybrid_log": [[27, 39], ["math.log10", "math.log10", "math.log10"], "function", ["None"], ["", "def", "apply_hybrid_log", "(", "err", ",", "threshold", "=", "0.3", ",", "err_lower_bound", "=", "0.00001", ")", ":", "\n", "    ", "log_th", "=", "math", ".", "log10", "(", "threshold", ")", "\n", "beta", "=", "threshold", "-", "log_th", "\n", "\n", "if", "err", ">", "threshold", ":", "\n", "        ", "return", "err", "# linear scale", "\n", "", "else", ":", "\n", "        ", "if", "err", ">", "0", ":", "\n", "            ", "log_applied", "=", "math", ".", "log10", "(", "err", ")", "\n", "", "else", ":", "\n", "            ", "log_applied", "=", "math", ".", "log10", "(", "err_lower_bound", ")", "\n", "", "return", "log_applied", "+", "beta", "# log scale", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.transform.apply_power_transform": [[41, 54], ["numpy.array().reshape", "numpy.array().reshape", "sklearn.preprocessing.power_transform", "numpy.array", "numpy.isfinite().all", "ValueError", "debug", "numpy.array", "numpy.isfinite"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "apply_power_transform", "(", "errs", ",", "err_std", ",", "method", ")", ":", "\n", "\n", "    ", "shaped", "=", "np", ".", "array", "(", "errs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "try", ":", "\n", "        ", "shaped", "=", "power_transform", "(", "shaped", "/", "err_std", ",", "method", "=", "method", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "shaped", ")", ".", "all", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid transformation due to non-finite component(s)\"", ")", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "debug", "(", "\"{} Original errors: {}\"", ".", "format", "(", "ex", ",", "errs", ")", ")", "\n", "return", "errs", "\n", "\n", "", "errs", "=", "np", ".", "array", "(", "shaped", ")", ".", "reshape", "(", "-", "1", ")", "\n", "return", "errs", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.__init__": [[23, 43], ["space.get_params_dim", "int", "int", "int", "bool", "base.BaseChooser.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_params_dim", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "\n", "covar", "=", "\"Matern52\"", ",", "mcmc_iters", "=", "10", ",", "\n", "n_init_pop", "=", "2", ",", "max_obs", "=", "200", ",", "\n", "shaping_func", "=", "\"no_shaping\"", ",", "\n", "warp", "=", "True", ",", "\n", "alpha", "=", "0.3", ")", ":", "\n", "\n", "        ", "self", ".", "num_dims", "=", "space", ".", "get_params_dim", "(", ")", "\n", "self", ".", "max_obs", "=", "int", "(", "max_obs", ")", "\n", "self", ".", "n_init_pop", "=", "int", "(", "n_init_pop", ")", "\n", "\n", "self", ".", "kernel_type", "=", "covar", "\n", "self", ".", "mcmc_iters", "=", "int", "(", "mcmc_iters", ")", "\n", "self", ".", "warp", "=", "bool", "(", "int", "(", "warp", ")", ")", "\n", "self", ".", "model", "=", "None", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "acq_funcs", "=", "[", "'EI'", ",", "'PI'", ",", "'UCB'", "]", "\n", "super", "(", "InputWarpedGPChooser", ",", "self", ")", ".", "__init__", "(", "space", ",", "acq_funcs", ",", "shaping_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.get_valid_obs": [[44, 58], ["super().get_valid_obs", "len", "debug", "numpy.random.choice", "nc.append", "ne.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.get_valid_obs", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_valid_obs", "(", "self", ",", "min_epoch", "=", "0", ")", ":", "\n", "        ", "comp", ",", "errs", "=", "super", "(", "InputWarpedGPChooser", ",", "self", ")", ".", "get_valid_obs", "(", "min_epoch", ")", "\n", "size", "=", "len", "(", "comp", ")", "\n", "if", "size", ">", "self", ".", "max_obs", ":", "\n", "            ", "debug", "(", "\"Subsampling {} observations due to GP cubic complexity\"", ".", "format", "(", "self", ".", "max_obs", ")", ")", "\n", "nc", "=", "[", "]", "\n", "ne", "=", "[", "]", "\n", "indices", "=", "np", ".", "random", ".", "choice", "(", "size", ",", "self", ".", "max_obs", ")", "\n", "for", "i", "in", "indices", ":", "\n", "                ", "nc", ".", "append", "(", "comp", "[", "i", "]", ")", "\n", "ne", ".", "append", "(", "errs", "[", "i", "]", ")", "\n", "", "return", "np", ".", "array", "(", "nc", ")", ",", "np", ".", "array", "(", "ne", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "comp", ")", ",", "np", ".", "array", "(", "errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.next": [[59, 110], ["time.time", "wgp.InputWarpedGPChooser.get_valid_obs", "numpy.array", "wgp.InputWarpedGPChooser.search_space.get_param_vectors", "wgp.InputWarpedGPChooser.output_transform", "numpy.min", "acq.get_acq_func", "acq.get_acq_func.", "numpy.argmax", "debug", "ValueError", "wgp.InputWarpedGPChooser.search_space.get_candidates", "len", "wgp.InputWarpedGPChooser.is_modeled", "wgp.InputWarpedGPChooser.build_model", "numpy.array.tolist", "acq.get_acq_func.tolist", "wgp.InputWarpedGPChooser.func_m.tolist", "wgp.InputWarpedGPChooser.func_v.tolist", "int", "int", "len", "ValueError", "int", "time.time", "random.choice"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.get_valid_obs", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.output_transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.get_acq_func", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.is_modeled", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.build_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "next", "(", "self", ",", "af", ",", "min_epoch", "=", "0", ")", ":", "\n", "\n", "        ", "if", "not", "af", "in", "self", ".", "acq_funcs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported acqusition function!\"", ")", "\n", "\n", "", "s_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "comp_grid", ",", "errs", "=", "self", ".", "get_valid_obs", "(", "min_epoch", ")", "\n", "\n", "candidates", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "cand_grid", "=", "self", ".", "search_space", ".", "get_param_vectors", "(", "\"candidates\"", ")", "\n", "\n", "# Don't bother using fancy GP stuff at first.", "\n", "if", "len", "(", "comp_grid", ")", "==", "0", ":", "\n", "            ", "return", "int", "(", "candidates", "[", "0", "]", ")", ",", "None", "# return the first candidate ", "\n", "", "elif", "len", "(", "comp_grid", ")", "<", "self", ".", "n_init_pop", ":", "\n", "            ", "return", "int", "(", "random", ".", "choice", "(", "candidates", ")", ")", ",", "None", "\n", "\n", "# transform errors for enhancing optimization performance", "\n", "", "errs", "=", "self", ".", "output_transform", "(", "errs", ")", "\n", "\n", "if", "not", "self", ".", "is_modeled", "(", "candidates", ",", "errs", ")", ":", "\n", "            ", "self", ".", "model_spec", "=", "{", "\"outputs\"", ":", "candidates", ",", "\"inputs\"", ":", "errs", "}", "\n", "self", ".", "func_m", ",", "self", ".", "func_v", "=", "self", ".", "build_model", "(", "comp_grid", ",", "cand_grid", ",", "errs", ")", "\n", "\n", "# Save previous calculation result!", "\n", "self", ".", "model_spec", "[", "\"ms\"", "]", "=", "self", ".", "func_m", "\n", "self", ".", "model_spec", "[", "\"vs\"", "]", "=", "self", ".", "func_v", "\n", "\n", "", "elif", "\"ms\"", "in", "self", ".", "model_spec", "and", "\"vs\"", "in", "self", ".", "model_spec", ":", "\n", "            ", "self", ".", "func_m", "=", "self", ".", "model_spec", "[", "\"ms\"", "]", "\n", "self", ".", "func_v", "=", "self", ".", "model_spec", "[", "\"vs\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid previous model result!\"", ")", "\n", "\n", "# Current best.", "\n", "", "self", ".", "best_err", "=", "np", ".", "min", "(", "errs", ")", "\n", "\n", "acq_func", "=", "get_acq_func", "(", "af", ")", "\n", "af_values", "=", "acq_func", "(", "self", ".", "best_err", ",", "self", ".", "func_m", ",", "self", ".", "func_v", ")", "\n", "best_cand", "=", "np", ".", "argmax", "(", "af_values", ")", "\n", "\n", "est_values", "=", "{", "\n", "'candidates'", ":", "candidates", ".", "tolist", "(", ")", ",", "\n", "'acq_funcs'", ":", "af_values", ".", "tolist", "(", ")", ",", "\n", "'means'", ":", "self", ".", "func_m", ".", "tolist", "(", ")", ",", "\n", "'vars'", ":", "self", ".", "func_v", ".", "tolist", "(", ")", "\n", "}", "\n", "debug", "(", "'[WGP-{}_{}] using {} MCMC takes {:.2f} secs'", ".", "format", "(", "self", ".", "kernel_type", ",", "self", ".", "shaping_func", ",", "self", ".", "mcmc_iters", ",", "time", ".", "time", "(", ")", "-", "s_t", ")", ")", "\n", "\n", "return", "int", "(", "candidates", "[", "best_cand", "]", ")", ",", "est_values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.estimate": [[111, 127], ["acq.get_acq_func", "wgp.InputWarpedGPChooser.get_valid_obs", "ValueError", "len", "wgp.InputWarpedGPChooser.output_transform", "wgp.InputWarpedGPChooser.cross_validate", "float", "debug", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.get_acq_func", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.get_valid_obs", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.output_transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.cross_validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "estimate", "(", "self", ",", "af", ",", "test_set_size", "=", "10", ",", "metric", "=", "'top1'", ")", ":", "\n", "        ", "if", "not", "af", "in", "self", ".", "acq_funcs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported acqusition function!\"", ")", "\n", "", "acq_func", "=", "get_acq_func", "(", "af", ")", "\n", "\n", "comp_vec", ",", "errs", "=", "self", ".", "get_valid_obs", "(", ")", "\n", "\n", "if", "len", "(", "errs", ")", "<=", "test_set_size", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "errs", "=", "self", ".", "output_transform", "(", "errs", ")", "\n", "scores", "=", "self", ".", "cross_validate", "(", "comp_vec", ",", "errs", ",", "acq_func", ",", "test_set_size", "=", "test_set_size", ",", "metric", "=", "metric", ")", "\n", "mean_score", "=", "float", "(", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", ")", "\n", "debug", "(", "'[WGP-{}_{}-{}] {}-fold CV performance: {:.4f}'", ".", "format", "(", "self", ".", "kernel_type", ",", "self", ".", "shaping_func", ",", "af", ",", "\n", "len", "(", "scores", ")", ",", "mean_score", ")", ")", "\n", "", "return", "mean_score", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.build_model": [[128, 176], ["numpy.array", "numpy.array", "numpy.array", "logging.disable", "numpy.zeros", "numpy.ones", "errs.reshape.reshape.reshape", "GPy.util.input_warping_functions.KumarWarping", "wgp.InputWarpedGPChooser.model.optimize_restarts", "wgp.InputWarpedGPChooser.model.predict", "mu.reshape.reshape.reshape", "var.reshape.reshape.reshape", "logging.disable", "GPy.kern.Matern52", "GPy.models.InputWarpedGP", "GPy.models.GPRegression", "GPy.kern.Matern32", "wgp.InputWarpedGPChooser.model.likelihood.variance.set_prior", "GPy.kern.Linear", "GPy.kern.Matern32", "numpy.std", "GPy.kern.Matern32.variance.set_prior", "NotImplementedError", "GPy.priors.LogGaussian", "GPy.priors.Gamma"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RandomForestRegressorWithVariance.predict"], ["", "def", "build_model", "(", "self", ",", "comp", ",", "cand", ",", "errs", ")", ":", "\n", "        ", "comp", "=", "np", ".", "array", "(", "comp", ")", "\n", "cand", "=", "np", ".", "array", "(", "cand", ")", "\n", "errs", "=", "np", ".", "array", "(", "errs", ")", "\n", "\n", "logging", ".", "disable", "(", "logging", ".", "WARNING", ")", "# XXX:disable all warnings ", "\n", "# initialize GP model", "\n", "kern", "=", "None", "\n", "if", "self", ".", "kernel_type", "==", "\"Matern52\"", ":", "\n", "            ", "kern", "=", "Matern52", "(", "comp", ".", "shape", "[", "1", "]", ",", "ARD", "=", "True", ")", "\n", "", "elif", "self", ".", "kernel_type", "==", "\"Matern32\"", ":", "\n", "            ", "kern", "=", "Matern32", "(", "comp", ".", "shape", "[", "1", "]", ",", "ARD", "=", "True", ")", "\n", "", "elif", "self", ".", "kernel_type", "==", "'Linear+Matern32'", ":", "\n", "            ", "k1", "=", "Linear", "(", "comp", ".", "shape", "[", "1", "]", ",", "ARD", "=", "False", ")", "\n", "k2", "=", "Matern32", "(", "comp", ".", "shape", "[", "1", "]", ",", "ARD", "=", "True", ")", "\n", "k2", ".", "lengthscale", "=", "np", ".", "std", "(", "comp", ",", "axis", "=", "0", ")", "\n", "k2", ".", "variance", "=", "0.5", "\n", "k2", ".", "variance", ".", "set_prior", "(", "priors", ".", "Gamma", "(", "0.5", ",", "1", ")", ",", "warning", "=", "False", ")", "\n", "kern", "=", "k1", "+", "k2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Not supported kernel type: {}'", ".", "format", "(", "self", ".", "kernel_type", ")", ")", "\n", "\n", "", "xmin", "=", "np", ".", "zeros", "(", "comp", ".", "shape", "[", "1", "]", ")", "\n", "xmax", "=", "np", ".", "ones", "(", "comp", ".", "shape", "[", "1", "]", ")", "\n", "errs", "=", "errs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "warp_f", "=", "KumarWarping", "(", "comp", ",", "Xmin", "=", "xmin", ",", "Xmax", "=", "xmax", ")", "\n", "\n", "if", "self", ".", "model", ":", "\n", "            ", "del", "self", ".", "model", "# XXX:Force to remove previous model", "\n", "self", ".", "model", "=", "None", "\n", "\n", "", "if", "self", ".", "warp", ":", "\n", "            ", "self", ".", "model", "=", "InputWarpedGP", "(", "comp", ",", "errs", ",", "kern", ",", "warping_function", "=", "warp_f", ")", "\n", "if", "self", ".", "kernel_type", "==", "'Linear+Matern32'", ":", "\n", "                ", "self", ".", "model", ".", "likelihood", ".", "variance", ".", "set_prior", "(", "priors", ".", "LogGaussian", "(", "-", "4.63", ",", "0.5", ")", ",", "warning", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "GPRegression", "(", "comp", ",", "errs", ",", "kern", ")", "\n", "\n", "# Training GP model", "\n", "", "self", ".", "model", ".", "optimize_restarts", "(", "max_iters", "=", "200", ",", "verbose", "=", "False", ",", "num_restarts", "=", "self", ".", "mcmc_iters", ")", "\n", "\n", "# Predict the marginal means and variances at candidates.", "\n", "mu", ",", "var", "=", "self", ".", "model", ".", "predict", "(", "cand", ")", "\n", "mu", "=", "mu", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "var", "=", "var", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "# FIX:enable all loggings", "\n", "\n", "return", "mu", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RandomForestRegressorWithVariance.predict": [[15, 26], ["numpy.atleast_2d", "numpy.var", "tree.predict", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RandomForestRegressorWithVariance.predict"], ["    ", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "# Check data", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "\n", "all_y_hat", "=", "[", "tree", ".", "predict", "(", "X", ")", "for", "tree", "in", "self", ".", "estimators_", "]", "\n", "\n", "# Reduce", "\n", "y_hat", "=", "sum", "(", "all_y_hat", ")", "/", "self", ".", "n_estimators", "\n", "y_var", "=", "np", ".", "var", "(", "all_y_hat", ",", "axis", "=", "0", ",", "ddof", "=", "1", ")", "\n", "\n", "return", "y_hat", ",", "y_var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.__init__": [[30, 59], ["float", "int", "float", "float", "rf.RandomForestRegressorWithVariance", "base.BaseChooser.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "\n", "n_trees", "=", "50", ",", "\n", "max_depth", "=", "None", ",", "\n", "min_samples_split", "=", "2", ",", "\n", "max_monkeys", "=", "7", ",", "\n", "max_features", "=", "\"auto\"", ",", "\n", "n_init_pop", "=", "2", ",", "max_obs", "=", "None", ",", "\n", "n_jobs", "=", "1", ",", "\n", "random_state", "=", "None", ",", "\n", "shaping_func", "=", "\"no_shaping\"", ",", "\n", "alpha", "=", "0.3", ")", ":", "\n", "\n", "        ", "self", ".", "n_trees", "=", "float", "(", "n_trees", ")", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "min_samples_split", "=", "min_samples_split", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "n_init_pop", "=", "int", "(", "n_init_pop", ")", "\n", "self", ".", "n_jobs", "=", "float", "(", "n_jobs", ")", "\n", "self", ".", "random_state", "=", "random_state", "\n", "self", ".", "alpha", "=", "float", "(", "alpha", ")", "\n", "self", ".", "model", "=", "RandomForestRegressorWithVariance", "(", "n_estimators", "=", "n_trees", ",", "\n", "max_depth", "=", "max_depth", ",", "\n", "min_samples_split", "=", "min_samples_split", ",", "\n", "max_features", "=", "max_features", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", "random_state", "=", "random_state", ")", "\n", "\n", "acq_funcs", "=", "[", "'EI'", ",", "'PI'", ",", "'UCB'", "]", "\n", "super", "(", "RFChooser", ",", "self", ")", ".", "__init__", "(", "space", ",", "acq_funcs", ",", "shaping_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.next": [[60, 102], ["numpy.array", "numpy.array", "rf.RFChooser.search_space.get_param_vectors", "super().get_valid_obs", "acq.get_acq_func", "acq.get_acq_func.", "numpy.argmax", "ValueError", "rf.RFChooser.search_space.get_candidates", "rf.RFChooser.search_space.get_completions", "len", "len", "ValueError", "rf.RFChooser.output_transform", "rf.RFChooser.is_modeled", "numpy.min", "rf.RFChooser.build_model", "numpy.array.tolist", "acq.get_acq_func.tolist", "rf.RFChooser.func_m.tolist", "rf.RFChooser.func_v.tolist", "int", "int", "int", "random.choice"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.candidates.CandidateSetGenerator.get_param_vectors", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.get_valid_obs", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.get_acq_func", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_candidates", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_completions", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.output_transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.is_modeled", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.build_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "next", "(", "self", ",", "af", ",", "min_epoch", "=", "0", ")", ":", "\n", "\n", "        ", "if", "not", "af", "in", "self", ".", "acq_funcs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported acqusition function!\"", ")", "\n", "\n", "", "candidates", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_candidates", "(", ")", ")", "\n", "completions", "=", "np", ".", "array", "(", "self", ".", "search_space", ".", "get_completions", "(", "min_epoch", ")", ")", "\n", "\n", "# Don't bother using fancy RF stuff at first.", "\n", "if", "len", "(", "completions", ")", "==", "0", ":", "\n", "            ", "return", "int", "(", "candidates", "[", "0", "]", ")", ",", "None", "# return the first candidate", "\n", "", "elif", "completions", ".", "shape", "[", "0", "]", "<", "self", ".", "n_init_pop", ":", "\n", "            ", "return", "int", "(", "random", ".", "choice", "(", "candidates", ")", ")", ",", "None", "\n", "\n", "# Grab out the relevant sets.        ", "\n", "", "cand_vec", "=", "self", ".", "search_space", ".", "get_param_vectors", "(", "\"candidates\"", ")", "\n", "comp_vec", ",", "errs", "=", "super", "(", "RFChooser", ",", "self", ")", ".", "get_valid_obs", "(", "min_epoch", ")", "\n", "\n", "if", "len", "(", "errs", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"No actual errors available\"", ")", "\n", "", "else", ":", "\n", "            ", "errs", "=", "self", ".", "output_transform", "(", "errs", ")", "\n", "\n", "", "if", "not", "self", ".", "is_modeled", "(", "candidates", ",", "completions", ")", ":", "\n", "            ", "self", ".", "model_spec", "=", "{", "\"outputs\"", ":", "candidates", ",", "\"inputs\"", ":", "completions", "}", "\n", "# Current best.", "\n", "self", ".", "best_err", "=", "np", ".", "min", "(", "errs", ")", "\n", "self", ".", "func_m", ",", "self", ".", "func_v", "=", "self", ".", "build_model", "(", "comp_vec", ",", "cand_vec", ",", "errs", ")", "\n", "\n", "", "acq_func", "=", "get_acq_func", "(", "af", ")", "\n", "af_values", "=", "acq_func", "(", "self", ".", "best_err", ",", "self", ".", "func_m", ",", "self", ".", "func_v", ")", "\n", "\n", "best_cand", "=", "np", ".", "argmax", "(", "af_values", ")", "\n", "\n", "est_values", "=", "{", "\n", "'candidates'", ":", "candidates", ".", "tolist", "(", ")", ",", "\n", "'acq_funcs'", ":", "af_values", ".", "tolist", "(", ")", ",", "\n", "'means'", ":", "self", ".", "func_m", ".", "tolist", "(", ")", ",", "\n", "'vars'", ":", "self", ".", "func_v", ".", "tolist", "(", ")", "\n", "}", "\n", "\n", "return", "int", "(", "candidates", "[", "best_cand", "]", ")", ",", "est_values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.estimate": [[104, 119], ["acq.get_acq_func", "rf.RFChooser.get_valid_obs", "ValueError", "len", "rf.RFChooser.output_transform", "rf.RFChooser.cross_validate", "float", "debug", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.acq.get_acq_func", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.wgp.InputWarpedGPChooser.get_valid_obs", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.output_transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.base.BaseChooser.cross_validate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "estimate", "(", "self", ",", "af", ",", "test_set_size", "=", "10", ",", "metric", "=", "'top1'", ")", ":", "\n", "        ", "if", "not", "af", "in", "self", ".", "acq_funcs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported acqusition function!\"", ")", "\n", "", "acq_func", "=", "get_acq_func", "(", "af", ")", "\n", "\n", "comp_vec", ",", "errs", "=", "self", ".", "get_valid_obs", "(", ")", "\n", "\n", "if", "len", "(", "errs", ")", "<=", "test_set_size", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "errs", "=", "self", ".", "output_transform", "(", "errs", ")", "\n", "scores", "=", "self", ".", "cross_validate", "(", "comp_vec", ",", "errs", ",", "acq_func", ",", "test_set_size", "=", "test_set_size", ",", "metric", "=", "metric", ")", "\n", "mean_score", "=", "float", "(", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", ")", "\n", "debug", "(", "'[RF_{}-{}] {}-fold CV performance: {:.4f}'", ".", "format", "(", "self", ".", "shaping_func", ",", "af", ",", "len", "(", "scores", ")", ",", "mean_score", ")", ")", "\n", "", "return", "mean_score", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.build_model": [[120, 124], ["rf.RFChooser.model.fit", "rf.RFChooser.model.predict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RandomForestRegressorWithVariance.predict"], ["", "def", "build_model", "(", "self", ",", "comp_vec", ",", "cand_vec", ",", "errs", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "fit", "(", "comp_vec", ",", "errs", ")", "\n", "return", "self", ".", "model", ".", "predict", "(", "cand_vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.__init__.unpack_args": [[5, 12], ["len", "re.compile", "dict", "map", "re.compile().split", "re.compile.split", "re.compile"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.__init__.load_chooser": [[14, 28], ["__init__.unpack_args", "InputWarpedGPChooser", "RFChooser", "BaseChooser"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.__init__.unpack_args"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.__init__": [[12, 18], ["select.ArmSelector.configure_arms", "select.ArmSelector.reset", "select.ArmSelector.configure_strategy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.configure_arms", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.configure_strategy"], ["    ", "def", "__init__", "(", "self", ",", "spec", ",", "config", ",", "space", ",", "choosers", ")", ":", "\n", "\n", "        ", "self", ".", "num_skip", "=", "0", "\n", "self", ".", "configure_arms", "(", "config", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "configure_strategy", "(", "spec", ",", "config", ",", "space", ",", "choosers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.reset": [[19, 27], ["range", "select.ArmSelector.values.append", "select.ArmSelector.counts.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_arm_index", "=", "0", "\n", "self", ".", "values", "=", "[", "]", "\n", "self", ".", "counts", "=", "[", "]", "\n", "\n", "for", "arm", "in", "range", "(", "self", ".", "num_arms", ")", ":", "\n", "            ", "self", ".", "values", ".", "append", "(", "0.0", ")", "\n", "self", ".", "counts", ".", "append", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.get_stats": [[28, 30], ["None"], "methods", ["None"], ["", "", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "values", ",", "self", ".", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.update_reward": [[31, 39], ["select.ArmSelector.strategy.update", "debug", "select.ArmSelector.strategy.get_random_ratio", "round"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.div.DiversificationStrategy.get_random_ratio"], ["", "def", "update_reward", "(", "self", ",", "step", ",", "cur_acc", ",", "optional", ")", ":", "\n", "        ", "'''reward update'''", "\n", "if", "step", ">=", "self", ".", "num_skip", ":", "\n", "            ", "self", ".", "strategy", ".", "update", "(", "self", ".", "cur_arm_index", ",", "cur_acc", ",", "optional", ")", "\n", "\n", "debug", "(", "\"Arm selection ratio: {}, Current epsilon: {}\"", ".", "format", "(", "\n", "[", "round", "(", "v", ",", "2", ")", "for", "v", "in", "self", ".", "values", "]", ",", "\n", "self", ".", "strategy", ".", "get_random_ratio", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.get_arm": [[40, 50], ["numpy.random.randint", "debug", "select.ArmSelector.strategy.next"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next"], ["", "", "def", "get_arm", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "num_skip", ":", "\n", "            ", "next_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_arms", ")", "\n", "debug", "(", "'The arm will be selected uniformly at random before {} steps'", ".", "format", "(", "self", ".", "num_skip", ")", ")", "\n", "", "else", ":", "\n", "            ", "next_index", "=", "self", ".", "strategy", ".", "next", "(", "step", ")", "\n", "", "arm", "=", "self", ".", "arms", "[", "next_index", "]", "\n", "self", ".", "cur_arm_index", "=", "next_index", "\n", "\n", "return", "arm", "[", "'model'", "]", ",", "arm", "[", "'acq_func'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.get_other_arms": [[51, 59], ["range", "others.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_other_arms", "(", "self", ")", ":", "\n", "        ", "others", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_arms", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "cur_arm_index", ":", "\n", "                ", "arm", "=", "self", ".", "arms", "[", "i", "]", "\n", "others", ".", "append", "(", "arm", ")", "\n", "\n", "", "", "return", "others", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.configure_arms": [[60, 96], ["len"], "methods", ["None"], ["", "def", "configure_arms", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "'arms'", "in", "config", ":", "\n", "            ", "self", ".", "arms", "=", "config", "[", "'arms'", "]", "\n", "", "else", ":", "\n", "# XXX: default diversified models", "\n", "            ", "self", ".", "arms", "=", "[", "\n", "{", "\n", "\"model\"", ":", "\"RF-HLE\"", ",", "\n", "\"acq_func\"", ":", "\"EI\"", "\n", "}", ",", "\n", "{", "\n", "\"model\"", ":", "\"RF-HLE\"", ",", "\n", "\"acq_func\"", ":", "\"PI\"", "\n", "}", ",", "\n", "{", "\n", "\"model\"", ":", "\"RF-HLE\"", ",", "\n", "\"acq_func\"", ":", "\"UCB\"", "\n", "}", ",", "\n", "{", "\n", "\"model\"", ":", "\"GP-HLE\"", ",", "\n", "\"acq_func\"", ":", "\"EI\"", "\n", "}", ",", "\n", "{", "\n", "\"model\"", ":", "\"GP-HLE\"", ",", "\n", "\"acq_func\"", ":", "\"PI\"", "\n", "}", ",", "\n", "{", "\n", "\"model\"", ":", "\"GP-HLE\"", ",", "\n", "\"acq_func\"", ":", "\"UCB\"", "\n", "}", ",", "\n", "{", "\n", "\"model\"", ":", "\"TPE\"", ",", "\n", "\"acq_func\"", ":", "\"EI\"", "\n", "}", "\n", "]", "\n", "", "self", ".", "num_arms", "=", "len", "(", "self", ".", "arms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.configure_strategy": [[97, 230], ["config[].replace", "SequentialStrategy", "SequentialKnockOutStrategy", "RandomStrategy", "ClassicHedgeStrategy", "config.keys", "BayesianHedgeStrategy", "config.keys", "BayesianHedgeStrategy", "config.keys", "BayesianHedgeStrategy", "config.keys", "BayesianHedgeStrategy", "config.keys", "DisparityCheckStrategy", "CVSelectionStrategy", "CVDropStrategy", "EpsilonGreedyStrategy", "config.keys", "config.keys", "EpsilonGreedyStrategy", "config.keys", "config.keys", "GreedyTimeStrategy", "config.keys", "GreedyTimeStrategy", "ValueError", "config.keys"], "methods", ["None"], ["", "def", "configure_strategy", "(", "self", ",", "spec", ",", "config", ",", "space", ",", "choosers", ")", ":", "\n", "\n", "        ", "self", ".", "spec", "=", "spec", "\n", "\n", "# Configure model diversification strategy", "\n", "title", "=", "''", "\n", "if", "title", "in", "config", ":", "\n", "            ", "title", "=", "config", "[", "'title'", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "\n", "", "if", "spec", "==", "'SEQ'", ":", "\n", "            ", "self", ".", "strategy", "=", "SequentialStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "title", ")", "\n", "", "elif", "spec", "==", "'SKO'", ":", "\n", "            ", "num_iters_per_round", "=", "self", ".", "num_arms", "*", "10", "\n", "self", ".", "strategy", "=", "SequentialKnockOutStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "num_iters_per_round", ",", "title", ")", "\n", "", "elif", "spec", "==", "'RANDOM'", ":", "\n", "            ", "self", ".", "strategy", "=", "RandomStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "title", ")", "\n", "", "elif", "spec", "==", "'HEDGE'", ":", "\n", "            ", "eta", "=", "1", "\n", "if", "'eta'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "eta", "=", "config", "[", "'eta'", "]", "\n", "", "self", ".", "strategy", "=", "ClassicHedgeStrategy", "(", "self", ".", "arms", ",", "eta", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "title", ")", "\n", "", "elif", "spec", "==", "'BO-HEDGE'", ":", "\n", "            ", "eta", "=", "0.1", "\n", "if", "'eta'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "eta", "=", "config", "[", "'eta'", "]", "\n", "", "self", ".", "strategy", "=", "BayesianHedgeStrategy", "(", "self", ".", "arms", ",", "eta", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "space", ",", "choosers", ",", "\n", "title", "=", "title", ")", "\n", "", "elif", "spec", "==", "'BO-HEDGE-T'", ":", "\n", "            ", "eta", "=", "0.1", "\n", "if", "'eta'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "eta", "=", "config", "[", "'eta'", "]", "\n", "", "self", ".", "strategy", "=", "BayesianHedgeStrategy", "(", "self", ".", "arms", ",", "eta", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "space", ",", "choosers", ",", "\n", "title", "=", "title", ",", "\n", "unbiased_estimation", "=", "True", ")", "\n", "", "elif", "spec", "==", "'BO-HEDGE-LE'", ":", "\n", "            ", "eta", "=", "0.1", "\n", "if", "'eta'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "eta", "=", "config", "[", "'eta'", "]", "\n", "", "self", ".", "strategy", "=", "BayesianHedgeStrategy", "(", "self", ".", "arms", ",", "eta", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "space", ",", "choosers", ",", "\n", "title", "=", "title", ",", "\n", "reward_scaling", "=", "\"LOG_ERR\"", ")", "\n", "", "elif", "spec", "==", "'BO-HEDGE-LET'", ":", "\n", "            ", "eta", "=", "0.1", "\n", "if", "'eta'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "eta", "=", "config", "[", "'eta'", "]", "\n", "", "self", ".", "strategy", "=", "BayesianHedgeStrategy", "(", "self", ".", "arms", ",", "eta", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "space", ",", "choosers", ",", "\n", "title", "=", "title", ",", "\n", "unbiased_estimation", "=", "True", ",", "\n", "reward_scaling", "=", "\"LOG_ERR\"", ")", "\n", "", "elif", "spec", "==", "'DISP'", ":", "\n", "            ", "self", ".", "strategy", "=", "DisparityCheckStrategy", "(", "self", ".", "arms", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "choosers", ",", "\n", "title", "=", "title", ")", "\n", "", "elif", "spec", "==", "'CVS'", ":", "\n", "            ", "self", ".", "strategy", "=", "CVSelectionStrategy", "(", "self", ".", "arms", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "choosers", ",", "\n", "title", "=", "title", ")", "\n", "", "elif", "spec", "==", "'CVD'", ":", "\n", "            ", "self", ".", "strategy", "=", "CVDropStrategy", "(", "self", ".", "arms", ",", "\n", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "choosers", ",", "\n", "title", "=", "title", ")", "\n", "", "elif", "spec", "==", "'EG'", ":", "\n", "            ", "init_eps", "=", "1.0", "\n", "decay_factor", "=", "5", "\n", "\n", "self", ".", "num_skip", "=", "2", "#XXX: avoiding selection bias by first two steps  ", "\n", "\n", "if", "'init_eps'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "init_eps", "=", "config", "[", "'init_eps'", "]", "\n", "", "if", "'decay_factor'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "decay_factor", "=", "config", "[", "'decay_factor'", "]", "\n", "\n", "", "self", ".", "strategy", "=", "EpsilonGreedyStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "title", ",", "\n", "init_eps", "=", "init_eps", ",", "\n", "decay_factor", "=", "decay_factor", ")", "\n", "", "elif", "spec", "==", "'EG-LE'", ":", "\n", "            ", "init_eps", "=", "1.0", "\n", "decay_factor", "=", "5", "\n", "reward_scaling", "=", "'LOG_ERR'", "\n", "\n", "self", ".", "num_skip", "=", "2", "#XXX: avoiding first two selection bias  ", "\n", "\n", "if", "'init_eps'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "init_eps", "=", "config", "[", "'init_eps'", "]", "\n", "", "if", "'decay_factor'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "decay_factor", "=", "config", "[", "'decay_factor'", "]", "\n", "\n", "", "self", ".", "strategy", "=", "EpsilonGreedyStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "title", ",", "\n", "init_eps", "=", "init_eps", ",", "\n", "decay_factor", "=", "decay_factor", ",", "\n", "reward_scaling", "=", "reward_scaling", ")", "\n", "", "elif", "spec", "==", "'GT'", ":", "\n", "            ", "time_unit", "=", "'H'", "\n", "\n", "self", ".", "num_skip", "=", "2", "#XXX: avoiding first two selection bias  ", "\n", "\n", "if", "'time_unit'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "time_unit", "=", "config", "[", "'time_unit'", "]", "\n", "\n", "", "self", ".", "strategy", "=", "GreedyTimeStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "title", ",", "\n", "time_unit", "=", "time_unit", ")", "\n", "\n", "", "elif", "spec", "==", "'GT-LE'", ":", "\n", "            ", "time_unit", "=", "'H'", "\n", "reward_scaling", "=", "'LOG_ERR'", "\n", "\n", "self", ".", "num_skip", "=", "2", "#XXX: avoiding first two selection bias  ", "\n", "\n", "if", "'time_unit'", "in", "config", ".", "keys", "(", ")", ":", "\n", "                ", "time_unit", "=", "config", "[", "'time_unit'", "]", "\n", "\n", "", "self", ".", "strategy", "=", "GreedyTimeStrategy", "(", "self", ".", "num_arms", ",", "self", ".", "values", ",", "self", ".", "counts", ",", "\n", "title", ",", "\n", "time_unit", "=", "time_unit", ",", "\n", "reward_scaling", "=", "reward_scaling", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No {} strategy available!\"", ".", "format", "(", "spec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.__init__": [[17, 26], ["manage.SurrogateModelManager.configure"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.configure"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "config", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "search_space", "=", "space", "\n", "\n", "self", ".", "selector", "=", "None", "\n", "self", ".", "mode", "=", "None", "\n", "self", ".", "spec", "=", "None", "\n", "\n", "self", ".", "models", "=", "self", ".", "configure", "(", "config", ",", "verifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_default_models": [[27, 57], ["list", "list.append", "set"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_default_models", "(", "self", ",", "config", ")", ":", "\n", "        ", "models", "=", "[", "]", "\n", "if", "'arms'", "in", "config", ":", "\n", "            ", "models", "=", "list", "(", "set", "(", "[", "a", "[", "'model'", "]", "for", "a", "in", "config", "[", "'arms'", "]", "]", ")", ")", "\n", "\n", "# Add default modeling methods", "\n", "", "if", "not", "'NONE'", "in", "models", ":", "\n", "            ", "models", ".", "append", "(", "'NONE'", ")", "\n", "\n", "#if not 'GP' in models:", "\n", "#    models.append('GP')", "\n", "\n", "#if not 'RF' in models:", "\n", "#    models.append('RF')", "\n", "\n", "#if not 'TPE' in models:", "\n", "#    models.append('TPE')", "\n", "\n", "#if not 'EVO' in models:", "\n", "#    models.append('EVO')", "\n", "\n", "# experimental option", "\n", "#if not 'DNGO' in opts:", "\n", "#    opts.append('DNGO')", "\n", "#if not 'GN' in opts:", "\n", "#    opts.append('GN')", "\n", "#if not 'BNS' in opts:", "\n", "#    opts.append('BNS')", "\n", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.configure": [[58, 186], ["manage.SurrogateModelManager.get_default_models", "optimizers.choosers.load_chooser", "debug", "debug", "error", "int", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_default_models", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.__init__.load_chooser", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "configure", "(", "self", ",", "config", ",", "verifier", "=", "None", ")", ":", "\n", "        ", "choosers", "=", "{", "}", "\n", "models", "=", "self", ".", "get_default_models", "(", "config", ")", "\n", "\n", "# Global response shaping setting ", "\n", "\n", "space_config", "=", "{", "}", "\n", "if", "'search_space'", "in", "config", ":", "\n", "            ", "space_config", "=", "config", "[", "'search_space'", "]", "\n", "\n", "\n", "# Local response shaping setting", "\n", "", "for", "m", "in", "models", ":", "\n", "            ", "options", "=", "''", "\n", "model_type", "=", "None", "#XXX:Not determined yet", "\n", "\n", "# response shaping options", "\n", "shaping_options", "=", "''", "\n", "if", "'shaping_func'", "in", "space_config", ":", "\n", "                ", "shaping_options", "+=", "',shaping_func={}'", ".", "format", "(", "space_config", "[", "'shaping_func'", "]", ")", "\n", "", "if", "'shaping_alpha'", "in", "space_config", ":", "\n", "                ", "shaping_options", "+=", "',alpha={}'", ".", "format", "(", "space_config", "[", "'shaping_alpha'", "]", ")", "\n", "", "if", "shaping_options", "!=", "''", ":", "\n", "                ", "debug", "(", "\"Grobal shaping option: {}\"", ".", "format", "(", "shaping_options", ")", ")", "\n", "\n", "", "if", "'-LE'", "in", "m", ":", "\n", "                ", "shaping_options", "=", "',shaping_func=log_err'", "\n", "", "elif", "'-HLE'", "in", "m", ":", "\n", "                ", "if", "'shaping_alpha'", "in", "space_config", ":", "\n", "                    ", "shaping_options", "=", "',shaping_func=hybrid_log,alpha={}'", ".", "format", "(", "space_config", "[", "'shaping_alpha'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "shaping_options", "=", "',shaping_func=hybrid_log'", "\n", "", "", "elif", "'-PTE'", "in", "m", ":", "\n", "                ", "shaping_options", "=", "',shaping_func=power_transform'", "\n", "", "elif", "'-NLE'", "in", "m", ":", "\n", "                ", "shaping_options", "=", "shaping_options", "+", "',shaping_func=no_shaping'", "\n", "\n", "\n", "", "if", "'GP'", "in", "m", ":", "\n", "# max sample size hyperparameters", "\n", "                ", "gp_options", "=", "'max_obs=200'", "\n", "\n", "# parse GP model hyperparameter options", "\n", "if", "'n300'", "in", "m", ":", "\n", "                    ", "gp_options", "=", "'max_obs=300'", "\n", "", "elif", "'n400'", "in", "m", ":", "\n", "                    ", "gp_options", "=", "'max_obs=400'", "\n", "", "elif", "'n500'", "in", "m", ":", "\n", "                    ", "gp_options", "=", "'max_obs=500'", "\n", "\n", "# MCMC sampling ", "\n", "", "if", "'m'", "in", "m", ":", "\n", "                    ", "gp_options", "+=", "',mcmc_iters=1'", "\n", "if", "'m5'", "in", "m", ":", "\n", "                        ", "gp_options", "+=", "',mcmc_iters=5'", "\n", "\n", "", "", "if", "'WGP'", "in", "m", ":", "\n", "                    ", "model_type", "=", "'WGP'", "\n", "\n", "if", "'WGPL32'", "in", "m", ":", "\n", "                        ", "gp_options", "=", "gp_options", "+", "\",covar=Linear+Matern32\"", "\n", "", "elif", "'WGP32'", "in", "m", ":", "\n", "                        ", "gp_options", "=", "gp_options", "+", "\",covar=Matern32\"", "\n", "", "else", ":", "\n", "                        ", "gp_options", "=", "gp_options", "+", "\",covar=Matern52\"", "\n", "\n", "", "if", "'NWGP'", "in", "m", ":", "\n", "                        ", "gp_options", "+=", "',warp=0'", "# No input warping", "\n", "", "", "elif", "'GPDN'", "in", "m", ":", "\n", "                    ", "model_type", "=", "'GN'", "\n", "", "else", ":", "\n", "# Snoek's model implementation", "\n", "                    ", "model_type", "=", "'GP'", "\n", "\n", "if", "'a0'", "==", "m", ":", "\n", "                        ", "gp_options", "=", "gp_options", "+", "',trade_off=0.01,v=0.2'", "\n", "", "elif", "'a1'", "in", "m", ":", "\n", "                        ", "gp_options", "=", "gp_options", "+", "',trade_off=0.01,v=0.2'", "\n", "", "elif", "'a2'", "in", "m", ":", "\n", "                        ", "gp_options", "=", "gp_options", "+", "',trade_off=1.0,v=0.1'", "\n", "\n", "", "", "debug", "(", "\"{} model setting: {}\"", ".", "format", "(", "model_type", ",", "gp_options", ")", ")", "\n", "options", "=", "gp_options", "+", "shaping_options", "\n", "\n", "\n", "", "elif", "'RF'", "in", "m", ":", "\n", "                ", "options", "=", "\"max_features=auto\"", "+", "shaping_options", "\n", "model_type", "=", "'RF'", "\n", "", "elif", "'DNGO'", "in", "m", ":", "\n", "                ", "options", "=", "\"n_hypers=0\"", "+", "shaping_options", "\n", "model_type", "=", "'DNGO'", "\n", "", "elif", "'BNS'", "in", "m", ":", "\n", "                ", "options", "=", "\"num_ensemble=5\"", "+", "shaping_options", "\n", "model_type", "=", "'BNS'", "\n", "", "elif", "'TPE'", "in", "m", ":", "\n", "                ", "model_type", "=", "'TPE'", "\n", "options", "=", "''", "\n", "", "elif", "'HEBO'", "in", "m", ":", "\n", "                ", "model_type", "=", "'HEBO'", "\n", "if", "not", "'shaping_func'", "in", "shaping_options", ":", "\n", "                    ", "options", "=", "'shaping_func=power_transform'", "+", "shaping_options", "\n", "", "else", ":", "\n", "                    ", "options", "=", "shaping_options", "\n", "", "", "elif", "'EVO'", "in", "m", ":", "\n", "                ", "evo_options", "=", "''", "\n", "if", "'n_init_pop'", "in", "space_config", ":", "\n", "                    ", "evo_options", "+=", "',n_init_pop={}'", ".", "format", "(", "space_config", "[", "'n_init_pop'", "]", ")", "\n", "", "if", "'n_parent'", "in", "space_config", ":", "\n", "                    ", "n_p", "=", "space_config", "[", "'n_parent'", "]", "\n", "try", ":", "\n", "                        ", "n_parent", "=", "int", "(", "n_p", ")", "\n", "evo_options", "+=", "',n_parent={}'", ".", "format", "(", "n_parent", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "warn", "(", "\"sample size convert error: {}\"", ".", "format", "(", "m", ")", ")", "\n", "\n", "", "", "model_type", "=", "'EVO'", "\n", "options", "=", "'acq_func=RE'", "+", "evo_options", "\n", "\n", "", "elif", "'NONE'", "in", "m", ":", "\n", "                ", "model_type", "=", "'NONE'", "\n", "options", "=", "'acq_func=RANDOM'", "\n", "\n", "", "if", "not", "model_type", ":", "\n", "                ", "error", "(", "\"Not supported model: {}\"", ".", "format", "(", "m", ")", ")", "\n", "\n", "", "choosers", "[", "m", "]", "=", "load_chooser", "(", "self", ".", "search_space", ",", "model_type", ",", "options", ",", "verifier", "=", "verifier", ")", "\n", "\n", "", "return", "choosers", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.reset": [[187, 213], ["debug", "optimizers.arms.select.ArmSelector", "manage.SurrogateModelManager.models[].reset", "debug", "debug", "optimizers.arms.select.ArmSelector", "debug", "optimizers.arms.select.ArmSelector", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "reset", "(", "self", ",", "mode", ",", "spec", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "spec", "=", "spec", "\n", "\n", "if", "mode", "==", "'DIV'", "or", "mode", "==", "'ADA'", ":", "\n", "            ", "debug", "(", "\"Multi-armed bandit mode.\"", ")", "\n", "self", ".", "selector", "=", "ArmSelector", "(", "spec", ",", "self", ".", "config", ",", "self", ".", "search_space", ",", "self", ".", "models", ")", "\n", "", "elif", "'search_space'", "in", "self", ".", "config", ":", "\n", "            ", "space_spec", "=", "self", ".", "config", "[", "'search_space'", "]", "\n", "if", "'evolve_div'", "in", "space_spec", ":", "\n", "                ", "debug", "(", "\"Single-armed bandit mode with diversified evolution.\"", ")", "\n", "self", ".", "selector", "=", "ArmSelector", "(", "'RANDOM'", ",", "self", ".", "config", ",", "self", ".", "search_space", ",", "self", ".", "models", ")", "\n", "", "elif", "'resample'", "in", "space_spec", ":", "\n", "                ", "debug", "(", "\"Single-armed bandit mode with resampling candidates.\"", ")", "\n", "self", ".", "selector", "=", "ArmSelector", "(", "'SEQ'", ",", "self", ".", "config", ",", "self", ".", "search_space", ",", "self", ".", "models", ")", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"Single-armed bandit mode.\"", ")", "\n", "self", ".", "selector", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "debug", "(", "\"Single-armed bandit mode.\"", ")", "\n", "self", ".", "selector", "=", "None", "\n", "\n", "", "self", ".", "cur_index", "=", "0", "\n", "\n", "for", "m", "in", "self", ".", "models", ":", "\n", "            ", "self", ".", "models", "[", "m", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_arm_list": [[214, 219], ["None"], "methods", ["None"], ["", "", "def", "get_arm_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "selector", ":", "\n", "            ", "return", "self", ".", "selector", ".", "arms", "\n", "", "else", ":", "\n", "            ", "return", "[", "{", "\"model\"", ":", "self", ".", "mode", ",", "\"acq_func\"", ":", "self", ".", "spec", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_models": [[220, 222], ["None"], "methods", ["None"], ["", "", "def", "get_models", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_model": [[223, 228], ["ValueError", "manage.SurrogateModelManager.models.keys"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "if", "model_name", "in", "self", ".", "models", ":", "\n", "            ", "return", "self", ".", "models", "[", "model_name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid model name: {} in {}\"", ".", "format", "(", "model_name", ",", "self", ".", "models", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_others_best": [[229, 251], ["manage.SurrogateModelManager.selector.get_other_arms", "manage.SurrogateModelManager.models[].next", "debug", "others_selection.append", "manage.SurrogateModelManager.models[].next", "debug", "others_selection.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.get_other_arms", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_others_best", "(", "self", ",", "min_epoch", "=", "0", ")", ":", "\n", "        ", "others", "=", "self", ".", "selector", ".", "get_other_arms", "(", ")", "\n", "others_selection", "=", "[", "]", "\n", "tpe", "=", "None", "\n", "for", "s", "in", "others", ":", "\n", "            ", "model_name", "=", "s", "[", "'model'", "]", "\n", "if", "model_name", "!=", "'TPE'", "or", "model_name", "!=", "'HEBO'", "or", "model_name", "!=", "'EVO'", ":", "\n", "                ", "acq_func", "=", "s", "[", "'acq_func'", "]", "\n", "next_index", ",", "_", "=", "self", ".", "models", "[", "model_name", "]", ".", "next", "(", "acq_func", ",", "min_epoch", ")", "\n", "debug", "(", "\"Selected next candidate by {}({}) is {}\"", ".", "format", "(", "model_name", ",", "acq_func", ",", "next_index", ")", ")", "\n", "others_selection", ".", "append", "(", "next_index", ")", "\n", "", "else", ":", "\n", "                ", "tpe", "=", "s", "\n", "\n", "", "", "if", "tpe", "!=", "None", ":", "\n", "            ", "model_name", "=", "tpe", "[", "'model'", "]", "\n", "acq_func", "=", "tpe", "[", "'acq_func'", "]", "\n", "next_index", ",", "_", "=", "self", ".", "models", "[", "model_name", "]", ".", "next", "(", "acq_func", ",", "min_epoch", ")", "\n", "debug", "(", "\"Selected next candidate by {}({}) is {}\"", ".", "format", "(", "model_name", ",", "acq_func", ",", "next_index", ")", ")", "\n", "others_selection", ".", "append", "(", "next_index", ")", "\n", "\n", "", "return", "others_selection", "# XXX: selection can be duplicated", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_selected_model": [[252, 259], ["manage.SurrogateModelManager.selector.get_arm"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.get_arm"], ["", "def", "get_selected_model", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "cur_index", "=", "index", "\n", "\n", "if", "self", ".", "mode", "==", "'DIV'", "or", "self", ".", "mode", "==", "'ADA'", ":", "\n", "            ", "return", "self", ".", "selector", ".", "get_arm", "(", "index", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mode", ",", "self", ".", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_stats": [[260, 265], ["manage.SurrogateModelManager.selector.get_stats"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.get_stats"], ["", "", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "selector", "!=", "None", ":", "\n", "            ", "return", "self", ".", "selector", ".", "get_stats", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", ",", "self", ".", "cur_index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.arms.manage.SurrogateModelManager.feedback": [[266, 276], ["manage.SurrogateModelManager.selector.update_reward"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.arms.select.ArmSelector.update_reward"], ["", "", "def", "feedback", "(", "self", ",", "index", ",", "value", ",", "opt", ",", "metric", ")", ":", "\n", "        ", "if", "value", "==", "None", ":", "\n", "# XXX: when no response returned", "\n", "            ", "return", "\n", "\n", "", "if", "metric", "!=", "'accuracy'", ":", "\n", "            ", "value", "=", "-", "1.0", "*", "value", "# XXX:make ", "\n", "\n", "", "if", "self", ".", "mode", "==", "'DIV'", "or", "self", ".", "mode", "==", "'ADA'", ":", "\n", "            ", "self", ".", "selector", ".", "update_reward", "(", "index", ",", "value", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.div.DiversificationStrategy.__init__": [[9, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_arms", ",", "values", ",", "counts", ",", "epsilon", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "num_arms", "=", "num_arms", "\n", "self", ".", "values", "=", "values", "\n", "self", ".", "counts", "=", "counts", "\n", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.div.DiversificationStrategy.get_random_ratio": [[17, 19], ["None"], "methods", ["None"], ["", "def", "get_random_ratio", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.div.DiversificationStrategy.next": [[20, 22], ["NotImplementedError"], "methods", ["None"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method should be overloaded properly.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.div.DiversificationStrategy.update": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method should be overloaded properly.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVSelectionStrategy.__init__": [[8, 18], ["div.DiversificationStrategy.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arms", ",", "\n", "values", ",", "counts", ",", "\n", "choosers", ",", "\n", "title", "=", "\"\"", ",", "\n", "check_iters", "=", "10", ")", ":", "\n", "        ", "name", "=", "\"CVS_\"", "+", "title", "\n", "super", "(", "CVSelectionStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "len", "(", "arms", ")", ",", "values", ",", "counts", ")", "\n", "self", ".", "arms", "=", "arms", "\n", "self", ".", "check_iters", "=", "check_iters", "\n", "self", ".", "choosers", "=", "choosers", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVSelectionStrategy.evaluate": [[19, 35], ["range", "len", "chooser.estimate", "all_nominees.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.estimate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "evaluate", "(", "self", ",", "metric", "=", "'top1'", ")", ":", "\n", "        ", "all_nominees", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "arms", ")", ")", ":", "\n", "            ", "arm", "=", "self", ".", "arms", "[", "i", "]", "\n", "optimizer", "=", "arm", "[", "'model'", "]", "\n", "aquisition_func", "=", "arm", "[", "'acq_func'", "]", "\n", "chooser", "=", "self", ".", "choosers", "[", "optimizer", "]", "\n", "score", "=", "chooser", ".", "estimate", "(", "aquisition_func", ",", "metric", "=", "metric", ")", "\n", "\n", "all_nominees", ".", "append", "(", "{", "\n", "\"arm_index\"", ":", "i", ",", "\n", "\"name\"", ":", "'{}-{}'", ".", "format", "(", "optimizer", ",", "aquisition_func", ")", ",", "\n", "\"score\"", ":", "score", "\n", "}", ")", "\n", "\n", "", "return", "all_nominees", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVSelectionStrategy.next": [[36, 57], ["cv.CVSelectionStrategy.evaluate", "info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "best_i", "=", "0", "\n", "if", "step", "<", "self", ".", "check_iters", "*", "2", ":", "\n", "            ", "idx", "=", "step", "%", "self", ".", "num_arms", "\n", "\n", "", "elif", "step", ">=", "self", ".", "check_iters", ":", "\n", "            ", "if", "step", "%", "self", ".", "check_iters", "==", "0", ":", "\n", "                ", "models", "=", "self", ".", "evaluate", "(", ")", "\n", "# choose best scored model", "\n", "best_score", "=", "0.0", "\n", "best_model", "=", "models", "[", "0", "]", "[", "'name'", "]", "\n", "best_i", "=", "0", "\n", "for", "m", "in", "models", ":", "\n", "                    ", "if", "m", "[", "\"score\"", "]", ">", "best_score", ":", "\n", "                        ", "best_score", "=", "m", "[", "\"score\"", "]", "\n", "best_i", "=", "m", "[", "'arm_index'", "]", "\n", "best_model", "=", "m", "[", "'name'", "]", "\n", "", "", "info", "(", "'Best model {} is only used to choose next from {} iterations.'", ".", "format", "(", "best_model", ",", "step", ")", ")", "\n", "", "idx", "=", "best_i", "\n", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVSelectionStrategy.update": [[58, 62], ["range", "len", "float", "float", "sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "            ", "self", ".", "values", "[", "i", "]", "=", "float", "(", "self", ".", "counts", "[", "i", "]", ")", "/", "float", "(", "sum", "(", "self", ".", "counts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVDropStrategy.__init__": [[65, 77], ["div.DiversificationStrategy.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arms", ",", "\n", "values", ",", "counts", ",", "\n", "choosers", ",", "\n", "title", "=", "\"\"", ",", "\n", "check_iters", "=", "10", ")", ":", "\n", "        ", "name", "=", "\"CVD_\"", "+", "title", "\n", "\n", "super", "(", "CVDropStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "len", "(", "arms", ")", ",", "values", ",", "counts", ")", "\n", "self", ".", "arms", "=", "arms", "\n", "self", ".", "check_iters", "=", "check_iters", "\n", "self", ".", "choosers", "=", "choosers", "\n", "self", ".", "good_models", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVDropStrategy.evaluate": [[78, 94], ["range", "len", "chooser.estimate", "all_nominees.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RFChooser.estimate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "evaluate", "(", "self", ",", "metric", "=", "'top1'", ")", ":", "\n", "        ", "all_nominees", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "arms", ")", ")", ":", "\n", "            ", "arm", "=", "self", ".", "arms", "[", "i", "]", "\n", "optimizer", "=", "arm", "[", "'model'", "]", "\n", "aquisition_func", "=", "arm", "[", "'acq_func'", "]", "\n", "chooser", "=", "self", ".", "choosers", "[", "optimizer", "]", "\n", "score", "=", "chooser", ".", "estimate", "(", "aquisition_func", ",", "metric", "=", "metric", ")", "\n", "\n", "all_nominees", ".", "append", "(", "{", "\n", "\"arm_index\"", ":", "i", ",", "\n", "\"name\"", ":", "'{}-{}'", ".", "format", "(", "optimizer", ",", "aquisition_func", ")", ",", "\n", "\"score\"", ":", "score", "\n", "}", ")", "\n", "\n", "", "return", "all_nominees", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVDropStrategy.next": [[95, 117], ["numpy.random.randint", "time.time", "cv.CVDropStrategy.evaluate", "float", "debug", "len", "time.time", "sum", "len", "cv.CVDropStrategy.good_models.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "check_iters", "*", "2", ":", "\n", "            ", "idx", "=", "step", "%", "self", ".", "num_arms", "\n", "\n", "", "elif", "step", ">=", "self", ".", "check_iters", ":", "\n", "            ", "if", "step", "%", "self", ".", "check_iters", "==", "0", ":", "\n", "                ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "good_models", "=", "[", "]", "\n", "models", "=", "self", ".", "evaluate", "(", ")", "\n", "# drop models which have ", "\n", "mean_score", "=", "float", "(", "sum", "(", "[", "m", "[", "'score'", "]", "for", "m", "in", "models", "]", ")", "/", "len", "(", "models", ")", ")", "\n", "for", "m", "in", "models", ":", "\n", "                    ", "if", "m", "[", "\"score\"", "]", ">=", "mean_score", ":", "\n", "                        ", "self", ".", "good_models", ".", "append", "(", "m", ")", "\n", "#info('[CVD] {} models will be used to choose next from {} iterations.'.format(len(self.good_models), step))", "\n", "", "", "dur", "=", "time", ".", "time", "(", ")", "-", "s_t", "\n", "debug", "(", "'Model drop by CV takes {:.2f} sec. {} surviors over threshold {:.4f}: {}'", ".", "format", "(", "dur", ",", "len", "(", "models", ")", ",", "mean_score", ",", "[", "m", "[", "'name'", "]", "for", "m", "in", "models", "]", ")", ")", "\n", "# randomize a good model selection", "\n", "", "rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "good_models", ")", ")", "\n", "idx", "=", "self", ".", "good_models", "[", "rand", "]", "[", "'arm_index'", "]", "\n", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.cv.CVDropStrategy.update": [[118, 122], ["range", "len", "float", "float", "sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "            ", "self", ".", "values", "[", "i", "]", "=", "float", "(", "self", ".", "counts", "[", "i", "]", ")", "/", "float", "(", "sum", "(", "self", ".", "counts", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialStrategy.__init__": [[14, 17], ["div.DiversificationStrategy.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_arms", ",", "values", ",", "counts", ",", "title", ")", ":", "\n", "        ", "name", "=", "\"SEQ_\"", "+", "title", "\n", "super", "(", "SequentialStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "num_arms", ",", "values", ",", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialStrategy.next": [[18, 22], ["None"], "methods", ["None"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "idx", "=", "step", "%", "self", ".", "num_arms", "\n", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialStrategy.update": [[23, 27], ["range", "len", "float", "float", "sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "            ", "self", ".", "values", "[", "i", "]", "=", "float", "(", "self", ".", "counts", "[", "i", "]", ")", "/", "float", "(", "sum", "(", "self", ".", "counts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialKnockOutStrategy.__init__": [[29, 43], ["div.DiversificationStrategy.__init__", "range", "seq.SequentialKnockOutStrategy.reset", "float", "len", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "num_arms", ",", "values", ",", "counts", ",", "iters_round", ",", "title", ")", ":", "\n", "        ", "name", "=", "\"SKO_\"", "+", "title", "\n", "self", ".", "iters_round", "=", "iters_round", "\n", "\n", "super", "(", "SequentialKnockOutStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "num_arms", ",", "values", ",", "counts", ")", "\n", "\n", "self", ".", "remain_arms", "=", "[", "i", "for", "i", "in", "range", "(", "num_arms", ")", "]", "\n", "self", ".", "min_remains", "=", "2", "# XXX: minimum remains", "\n", "\n", "init_prob", "=", "1.0", "/", "float", "(", "num_arms", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "            ", "self", ".", "values", "[", "i", "]", "=", "init_prob", "\n", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialKnockOutStrategy.reset": [[44, 48], ["numpy.array", "range", "range"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_arm_values", "=", "[", "0.0", "for", "i", "in", "range", "(", "self", ".", "num_arms", ")", "]", "\n", "self", ".", "rank_sums", "=", "np", ".", "array", "(", "[", "0.0", "for", "i", "in", "range", "(", "self", ".", "num_arms", ")", "]", ")", "\n", "self", ".", "cur_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialKnockOutStrategy.next": [[49, 80], ["numpy.argmax", "seq.SequentialKnockOutStrategy.reset", "len", "len", "info", "seq.SequentialKnockOutStrategy.remain_arms.remove", "range", "debug", "warn", "float", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "idx", "=", "0", "\n", "if", "step", "!=", "0", "and", "step", "%", "self", ".", "iters_round", "==", "0", ":", "\n", "# remove the worst performed arm            ", "\n", "            ", "try", ":", "\n", "                ", "i_worst", "=", "np", ".", "argmax", "(", "self", ".", "rank_sums", ")", "\n", "\n", "if", "len", "(", "self", ".", "remain_arms", ")", ">", "self", ".", "min_remains", ":", "\n", "                    ", "info", "(", "'Arm #{} will be eliminated in {}'", ".", "format", "(", "i_worst", ",", "self", ".", "remain_arms", ")", ")", "\n", "self", ".", "remain_arms", ".", "remove", "(", "i_worst", ")", "\n", "prob", "=", "1.0", "/", "float", "(", "len", "(", "self", ".", "remain_arms", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "                        ", "if", "i", "in", "self", ".", "remain_arms", ":", "\n", "                            ", "self", ".", "values", "[", "i", "]", "=", "prob", "\n", "", "else", ":", "\n", "                            ", "self", ".", "values", "[", "i", "]", "=", "0.0", "\n", "", "", "", "else", ":", "\n", "                    ", "debug", "(", "'the number of remained arms is {}.'", ".", "format", "(", "len", "(", "self", ".", "remain_arms", ")", ")", ")", "\n", "", "", "except", ":", "\n", "                ", "warn", "(", "\"no {} in {}\"", ".", "format", "(", "i_worst", ",", "self", ".", "remain_arms", ")", ")", "\n", "", "finally", ":", "\n", "                ", "self", ".", "reset", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "cur_index", "<", "len", "(", "self", ".", "remain_arms", ")", ":", "\n", "                ", "idx", "=", "self", ".", "remain_arms", "[", "self", ".", "cur_index", "]", "\n", "self", ".", "cur_index", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "cur_index", "=", "0", "\n", "idx", "=", "self", ".", "remain_arms", "[", "self", ".", "cur_index", "]", "\n", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.seq.SequentialKnockOutStrategy.update": [[81, 88], ["scipy.stats.rankdata"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "=", "self", ".", "counts", "[", "arm_index", "]", "+", "1", "\n", "self", ".", "prev_arm_values", "[", "arm_index", "]", "=", "curr_acc", "\n", "\n", "# calculate rank", "\n", "cur_ranks", "=", "rankdata", "(", "self", ".", "prev_arm_values", ")", "\n", "self", ".", "rank_sums", "+=", "cur_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.EpsilonGreedyStrategy.__init__": [[14, 34], ["div.DiversificationStrategy.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_arms", ",", "values", ",", "counts", ",", "\n", "title", "=", "\"\"", ",", "\n", "init_eps", "=", "1.0", ",", "\n", "decay_factor", "=", "5", ",", "\n", "reward_scaling", "=", "None", ",", "\n", "log_scale_decay", "=", "False", ")", ":", "\n", "\n", "        ", "name", "=", "\"EG\"", "\n", "if", "reward_scaling", "==", "'LOG_ERR'", ":", "\n", "            ", "name", "=", "name", "+", "'_LE'", "\n", "\n", "", "if", "title", "!=", "\"\"", ":", "\n", "            ", "name", "=", "name", "+", "\"_\"", "+", "title", "\n", "\n", "", "self", ".", "initial_epsilon", "=", "init_eps", "\n", "super", "(", "EpsilonGreedyStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "num_arms", ",", "values", ",", "counts", ",", "init_eps", ")", "\n", "\n", "self", ".", "decay_factor", "=", "decay_factor", "\n", "self", ".", "log_scale_decay", "=", "log_scale_decay", "\n", "self", ".", "reward_scaling", "=", "reward_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.EpsilonGreedyStrategy.next": [[35, 63], ["numpy.random.random_sample", "numpy.max", "numpy.asscalar", "numpy.where", "numpy.random.choice", "len", "len", "numpy.arange", "numpy.setdiff1d", "numpy.random.choice", "len", "numpy.random.choice"], "methods", ["None"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "ran_num", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "idx", "=", "None", "\n", "\n", "decay_steps", "=", "self", ".", "num_arms", "*", "self", ".", "decay_factor", "\n", "# linear scale decreasing", "\n", "self", ".", "epsilon", "=", "self", ".", "initial_epsilon", "-", "(", "step", "//", "decay_steps", ")", "*", "0.1", "\n", "\n", "# force to keep epsilon greater than 0.1", "\n", "if", "self", ".", "epsilon", "<", "0.1", ":", "\n", "            ", "self", ".", "epsilon", "=", "0.1", "\n", "\n", "", "max_val", "=", "np", ".", "max", "(", "self", ".", "values", ")", "\n", "max_idxs", "=", "np", ".", "where", "(", "self", ".", "values", "==", "max_val", ")", "[", "0", "]", "\n", "\n", "if", "ran_num", "<", "1", "-", "self", ".", "epsilon", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "max_idxs", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "max_idxs", ")", "==", "len", "(", "self", ".", "values", ")", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "choice", "(", "max_idxs", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "temp", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "values", ")", ")", "\n", "temp", "=", "np", ".", "setdiff1d", "(", "temp", ",", "max_idxs", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "temp", ",", "1", ")", "[", "0", "]", "\n", "\n", "", "", "idx", "=", "np", ".", "asscalar", "(", "idx", ")", "\n", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.EpsilonGreedyStrategy.update": [[64, 71], ["greedy.EpsilonGreedyStrategy.scale_acc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.scale_acc"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "acc", "=", "self", ".", "scale_acc", "(", "curr_acc", ")", "\n", "reward", "=", "(", "acc", "-", "self", ".", "values", "[", "arm_index", "]", ")", "\n", "if", "self", ".", "counts", "[", "arm_index", "]", ">", "0", ":", "\n", "            ", "reward", "=", "reward", "/", "self", ".", "counts", "[", "arm_index", "]", "\n", "", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "self", ".", "values", "[", "arm_index", "]", "+=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.EpsilonGreedyStrategy.scale_acc": [[72, 89], ["math.fabs", "TypeError", "math.log10"], "methods", ["None"], ["", "def", "scale_acc", "(", "self", ",", "acc", ")", ":", "\n", "        ", "if", "self", ".", "reward_scaling", "is", "None", ":", "\n", "            ", "return", "acc", "\n", "", "elif", "self", ".", "reward_scaling", "==", "\"LOG_ERR\"", ":", "\n", "\n", "# XXX: truncate extrapolated estimation", "\n", "            ", "if", "acc", "<", "0", ":", "\n", "                ", "acc", "=", "0.00001", "\n", "", "if", "acc", ">", "1.0", ":", "\n", "                ", "acc", "=", "0.99999", "\n", "\n", "# scaling log with error", "\n", "", "err", "=", "1.0", "-", "acc", "\n", "abs_log_err", "=", "math", ".", "fabs", "(", "math", ".", "log10", "(", "err", ")", ")", "\n", "return", "abs_log_err", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'unsupported reward scaling:{}'", ".", "format", "(", "self", ".", "reward_scaling", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.__init__": [[93, 112], ["div.DiversificationStrategy.__init__", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_arms", ",", "values", ",", "counts", ",", "\n", "title", "=", "\"\"", ",", "\n", "time_unit", "=", "'H'", ",", "\n", "reward_scaling", "=", "None", ")", ":", "\n", "\n", "        ", "name", "=", "\"GT\"", "+", "time_unit", "\n", "\n", "if", "reward_scaling", "==", "'LOG_ERR'", ":", "\n", "            ", "name", "=", "name", "+", "'_LE'", "\n", "\n", "", "if", "title", "!=", "\"\"", ":", "\n", "            ", "name", "=", "name", "+", "\"_\"", "+", "title", "\n", "\n", "", "super", "(", "GreedyTimeStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "num_arms", ",", "values", ",", "counts", ",", "1.0", ")", "\n", "self", ".", "reward_scaling", "=", "reward_scaling", "\n", "\n", "self", ".", "time_unit", "=", "time_unit", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "cum_exec_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.get_elapsed_time": [[113, 128], ["math.ceil", "time.time", "math.ceil", "math.ceil", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "get_elapsed_time", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cum_exec_time", "==", "0", ":", "\n", "            ", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "", "else", ":", "\n", "            ", "elapsed", "=", "self", ".", "cum_exec_time", "\n", "\n", "", "if", "self", ".", "time_unit", "==", "'H'", ":", "\n", "            ", "elapsed", "=", "math", ".", "ceil", "(", "elapsed", "/", "(", "60", "*", "60", ")", ")", "\n", "", "elif", "self", ".", "time_unit", "==", "'M'", ":", "\n", "            ", "elapsed", "=", "math", ".", "ceil", "(", "elapsed", "/", "60", ")", "\n", "", "elif", "self", ".", "time_unit", "==", "'S'", ":", "\n", "            ", "elapsed", "=", "math", ".", "ceil", "(", "elapsed", ")", "\n", "", "else", ":", "\n", "            ", "warn", "(", "'unsupported time unit: {}'", ".", "format", "(", "self", ".", "time_unit", ")", ")", "\n", "", "return", "elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.next": [[129, 156], ["numpy.random.random_sample", "greedy.GreedyTimeStrategy.get_elapsed_time", "numpy.max", "numpy.asscalar", "math.sqrt", "numpy.where", "numpy.random.choice", "len", "len", "numpy.arange", "numpy.setdiff1d", "numpy.random.choice", "len", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.get_elapsed_time"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "ran_num", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "idx", "=", "None", "\n", "\n", "# time dependent epsilon", "\n", "t", "=", "self", ".", "get_elapsed_time", "(", ")", "\n", "self", ".", "epsilon", "=", "1", "/", "math", ".", "sqrt", "(", "t", "+", "1", ")", "\n", "\n", "# force to keep epsilon greater than 0.1", "\n", "if", "self", ".", "epsilon", "<", "0.1", ":", "\n", "            ", "self", ".", "epsilon", "=", "0.1", "\n", "\n", "", "max_val", "=", "np", ".", "max", "(", "self", ".", "values", ")", "\n", "max_idxs", "=", "np", ".", "where", "(", "self", ".", "values", "==", "max_val", ")", "[", "0", "]", "\n", "\n", "if", "ran_num", "<", "1", "-", "self", ".", "epsilon", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "max_idxs", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "max_idxs", ")", "==", "len", "(", "self", ".", "values", ")", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "choice", "(", "max_idxs", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "temp", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "values", ")", ")", "\n", "temp", "=", "np", ".", "setdiff1d", "(", "temp", ",", "max_idxs", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "temp", ",", "1", ")", "[", "0", "]", "\n", "\n", "", "", "idx", "=", "np", ".", "asscalar", "(", "idx", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.update": [[157, 168], ["greedy.GreedyTimeStrategy.scale_acc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.scale_acc"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "\n", "        ", "if", "'exec_time'", "in", "opt", ":", "\n", "            ", "self", ".", "cum_exec_time", "+=", "opt", "[", "'exec_time'", "]", "\n", "\n", "", "acc", "=", "self", ".", "scale_acc", "(", "curr_acc", ")", "\n", "reward", "=", "(", "acc", "-", "self", ".", "values", "[", "arm_index", "]", ")", "\n", "if", "self", ".", "counts", "[", "arm_index", "]", ">", "0", ":", "\n", "            ", "reward", "=", "reward", "/", "self", ".", "counts", "[", "arm_index", "]", "\n", "", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "self", ".", "values", "[", "arm_index", "]", "+=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.greedy.GreedyTimeStrategy.scale_acc": [[169, 186], ["math.fabs", "TypeError", "math.log10"], "methods", ["None"], ["", "def", "scale_acc", "(", "self", ",", "acc", ")", ":", "\n", "        ", "if", "self", ".", "reward_scaling", "is", "None", ":", "\n", "            ", "return", "acc", "\n", "", "elif", "self", ".", "reward_scaling", "==", "\"LOG_ERR\"", ":", "\n", "\n", "# XXX: truncate extrapolated estimation", "\n", "            ", "if", "acc", "<", "0", ":", "\n", "                ", "acc", "=", "0.00001", "\n", "", "if", "acc", ">", "1.0", ":", "\n", "                ", "acc", "=", "0.99999", "\n", "\n", "# scaling log with error", "\n", "", "err", "=", "1.0", "-", "acc", "\n", "abs_log_err", "=", "math", ".", "fabs", "(", "math", ".", "log10", "(", "err", ")", ")", "\n", "return", "abs_log_err", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'unsupported reward scaling:{}'", ".", "format", "(", "self", ".", "reward_scaling", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.ClassicHedgeStrategy.__init__": [[24, 31], ["div.DiversificationStrategy.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "arms", ",", "temperature", ",", "values", ",", "counts", ",", "title", "=", "\"\"", ")", ":", "\n", "        ", "name", "=", "\"HEDGE\"", "\n", "if", "title", "!=", "\"\"", ":", "\n", "            ", "name", "=", "name", "+", "\"_\"", "+", "title", "\n", "\n", "", "super", "(", "ClassicHedgeStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "num_arms", ",", "values", ",", "counts", ",", "0.0", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.ClassicHedgeStrategy.categorical_draw": [[32, 41], ["random.random", "range", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.random"], ["", "def", "categorical_draw", "(", "self", ",", "probs", ")", ":", "\n", "        ", "z", "=", "random", ".", "random", "(", ")", "\n", "cum_prob", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "probs", ")", ")", ":", "\n", "            ", "prob", "=", "probs", "[", "i", "]", "\n", "cum_prob", "+=", "prob", "\n", "if", "cum_prob", ">", "z", ":", "\n", "                ", "return", "i", "\n", "", "", "raise", "ValueError", "(", "\"unrealistic status.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.ClassicHedgeStrategy.next": [[42, 46], ["sum", "hedge.ClassicHedgeStrategy.categorical_draw", "math.exp", "math.exp"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.categorical_draw"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "z", "=", "sum", "(", "[", "math", ".", "exp", "(", "v", "*", "self", ".", "temperature", ")", "for", "v", "in", "self", ".", "values", "]", ")", "\n", "probs", "=", "[", "math", ".", "exp", "(", "v", "*", "self", ".", "temperature", ")", "/", "z", "for", "v", "in", "self", ".", "values", "]", "\n", "return", "self", ".", "categorical_draw", "(", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.ClassicHedgeStrategy.update": [[47, 53], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "chosen_arm", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "reward", "=", "curr_acc", "# TODO:reward design required              ", "\n", "self", ".", "counts", "[", "chosen_arm", "]", "=", "self", ".", "counts", "[", "chosen_arm", "]", "+", "1", "\n", "value", "=", "self", ".", "values", "[", "chosen_arm", "]", "\n", "\n", "self", ".", "values", "[", "chosen_arm", "]", "=", "value", "+", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.__init__": [[57, 75], ["div.DiversificationStrategy.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "arms", ",", "temperature", ",", "values", ",", "counts", ",", "\n", "s_space", ",", "choosers", ",", "\n", "title", "=", "\"\"", ",", "\n", "unbiased_estimation", "=", "False", ",", "\n", "reward_scaling", "=", "None", ")", ":", "\n", "        ", "name", "=", "\"BO-HEDGE\"", "\n", "if", "title", "!=", "\"\"", ":", "\n", "            ", "name", "=", "name", "+", "\"_\"", "+", "title", "\n", "\n", "", "super", "(", "BayesianHedgeStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "len", "(", "arms", ")", ",", "values", ",", "counts", ",", "0.0", ")", "\n", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "search_space", "=", "s_space", "\n", "self", ".", "choosers", "=", "choosers", "\n", "self", ".", "arms", "=", "arms", "\n", "self", ".", "nominees", "=", "None", "\n", "self", ".", "unbiased_estimation", "=", "unbiased_estimation", "\n", "self", ".", "reward_scaling", "=", "reward_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.categorical_draw": [[76, 85], ["random.random", "range", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.random"], ["", "def", "categorical_draw", "(", "self", ",", "probs", ")", ":", "\n", "        ", "z", "=", "random", ".", "random", "(", ")", "\n", "cum_prob", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "probs", ")", ")", ":", "\n", "            ", "prob", "=", "probs", "[", "i", "]", "\n", "cum_prob", "+=", "prob", "\n", "if", "cum_prob", ">", "z", ":", "\n", "                ", "return", "i", "\n", "", "", "raise", "ValueError", "(", "\"unrealistic status.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.nominate": [[86, 116], ["chooser.next", "all_nominees.append", "estimate[].index", "hedge.BayesianHedgeStrategy.search_space.get_errors", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.get_errors", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "nominate", "(", "self", ")", ":", "\n", "        ", "all_nominees", "=", "[", "]", "\n", "\n", "for", "arm", "in", "self", ".", "arms", ":", "\n", "\n", "            ", "optimizer", "=", "arm", "[", "'model'", "]", "\n", "aquisition_func", "=", "arm", "[", "'acq_func'", "]", "\n", "chooser", "=", "self", ".", "choosers", "[", "optimizer", "]", "\n", "# default error value.", "\n", "est_value", "=", "MAX_ERROR", "\n", "test_error", "=", "MAX_ERROR", "\n", "\n", "next_index", ",", "estimate", "=", "chooser", ".", "next", "(", "aquisition_func", ")", "\n", "if", "estimate", "is", "not", "None", ":", "\n", "                ", "i", "=", "estimate", "[", "'means'", "]", ".", "index", "(", "next_index", ")", "\n", "est_value", "=", "estimate", "[", "'means'", "]", "[", "i", "]", "\n", "\n", "try", ":", "\n", "                    ", "test_error", "=", "self", ".", "search_space", ".", "get_errors", "(", "next_index", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                    ", "warn", "(", "'No record in the search history: {}'", ".", "format", "(", "next_index", ")", ")", "\n", "\n", "", "", "all_nominees", ".", "append", "(", "{", "\n", "\"optimizer\"", ":", "optimizer", ",", "\n", "\"aquisition_func\"", ":", "aquisition_func", ",", "\n", "\"best_index\"", ":", "next_index", ",", "\n", "\"true_err\"", ":", "test_error", ",", "\n", "\"est_err\"", ":", "est_value", "\n", "}", ")", "\n", "", "return", "all_nominees", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.next": [[117, 131], ["hedge.BayesianHedgeStrategy.nominate", "sum", "debug", "hedge.BayesianHedgeStrategy.categorical_draw", "round", "warn", "random.randrange", "debug", "math.exp", "len", "math.exp"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.nominate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.categorical_draw", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "nominees", "=", "self", ".", "nominate", "(", ")", "\n", "arm_index", "=", "0", "\n", "try", ":", "\n", "            ", "z", "=", "sum", "(", "[", "math", ".", "exp", "(", "v", "*", "self", ".", "temperature", ")", "for", "v", "in", "self", ".", "values", "]", ")", "\n", "probs", "=", "[", "round", "(", "math", ".", "exp", "(", "v", "*", "self", ".", "temperature", ")", "/", "z", ",", "3", ")", "for", "v", "in", "self", ".", "values", "]", "\n", "debug", "(", "'probability:{}'", ".", "format", "(", "probs", ")", ")", "\n", "arm_index", "=", "self", ".", "categorical_draw", "(", "probs", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Exception on hedge: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "arm_index", "=", "random", ".", "randrange", "(", "len", "(", "probs", ")", ")", "\n", "debug", "(", "\"Uniform random select: {}\"", ".", "format", "(", "arm_index", ")", ")", "\n", "\n", "", "return", "arm_index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.update": [[132, 148], ["range", "range", "len", "len", "hedge.BayesianHedgeStrategy.scale_reward", "hedge.BayesianHedgeStrategy.scale_reward"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.scale_reward", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.scale_reward"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "=", "self", ".", "counts", "[", "arm_index", "]", "+", "1", "\n", "\n", "if", "self", ".", "unbiased_estimation", "is", "False", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "self", ".", "nominees", ")", ")", ":", "\n", "                ", "selected_nominee", "=", "self", ".", "nominees", "[", "n", "]", "\n", "est_err", "=", "selected_nominee", "[", "'est_err'", "]", "\n", "value", "=", "self", ".", "values", "[", "n", "]", "\n", "self", ".", "values", "[", "n", "]", "=", "value", "+", "self", ".", "scale_reward", "(", "est_err", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "self", ".", "nominees", ")", ")", ":", "\n", "                ", "selected_nominee", "=", "self", ".", "nominees", "[", "n", "]", "\n", "err", "=", "selected_nominee", "[", "'true_err'", "]", "\n", "value", "=", "self", ".", "values", "[", "n", "]", "\n", "self", ".", "values", "[", "n", "]", "=", "value", "+", "self", ".", "scale_reward", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.hedge.BayesianHedgeStrategy.scale_reward": [[149, 161], ["math.fabs", "TypeError", "math.log10"], "methods", ["None"], ["", "", "", "def", "scale_reward", "(", "self", ",", "err", ")", ":", "\n", "        ", "if", "self", ".", "reward_scaling", "is", "None", ":", "\n", "            ", "return", "-", "1.0", "*", "err", "\n", "", "elif", "self", ".", "reward_scaling", "==", "\"LOG_ERR\"", ":", "\n", "\n", "\n", "# scaling log with error", "\n", "\n", "            ", "abs_log_err", "=", "math", ".", "fabs", "(", "math", ".", "log10", "(", "err", ")", ")", "\n", "return", "-", "1.0", "*", "abs_log_err", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'unsupported reward scaling:{}'", ".", "format", "(", "self", ".", "reward_scaling", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.__init__": [[16, 34], ["div.DiversificationStrategy.__init__", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "arms", ",", "\n", "values", ",", "counts", ",", "\n", "choosers", ",", "\n", "title", "=", "\"\"", ",", "\n", "check_iters", "=", "0", ")", ":", "\n", "\n", "        ", "if", "check_iters", "==", "0", ":", "\n", "            ", "check_iters", "=", "len", "(", "arms", ")", "\n", "\n", "", "name", "=", "\"DISP-CHECK{}\"", ".", "format", "(", "check_iters", ")", "\n", "if", "title", "!=", "\"\"", ":", "\n", "            ", "name", "=", "name", "+", "\"_\"", "+", "title", "\n", "\n", "", "super", "(", "DisparityCheckStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "len", "(", "arms", ")", ",", "values", ",", "counts", ",", "0.0", ")", "\n", "self", ".", "arms", "=", "arms", "\n", "self", ".", "valid_arm_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "arms", ")", ")", "]", "\n", "self", ".", "check_iters", "=", "check_iters", "\n", "self", ".", "choosers", "=", "choosers", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.nominate": [[35, 61], ["range", "len", "chooser.next", "scipy.stats.rankdata", "all_nominees.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "nominate", "(", "self", ",", "top_k", "=", "None", ")", ":", "\n", "        ", "all_nominees", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "arms", ")", ")", ":", "\n", "            ", "arm", "=", "self", ".", "arms", "[", "i", "]", "\n", "optimizer", "=", "arm", "[", "'model'", "]", "\n", "aquisition_func", "=", "arm", "[", "'acq_func'", "]", "\n", "chooser", "=", "self", ".", "choosers", "[", "optimizer", "]", "\n", "\n", "_", ",", "estimate", "=", "chooser", ".", "next", "(", "aquisition_func", ")", "\n", "if", "estimate", "is", "not", "None", "and", "'acq_funcs'", "in", "estimate", ":", "\n", "                ", "cand_indices", "=", "estimate", "[", "'candidates'", "]", "\n", "ranks", "=", "rankdata", "(", "estimate", "[", "'acq_funcs'", "]", ",", "method", "=", "'min'", ")", "\n", "\n", "if", "top_k", "and", "top_k", "<", "len", "(", "cand_indices", ")", ":", "\n", "# TODO: consider only top-k ranks", "\n", "                    ", "pass", "\n", "\n", "", "all_nominees", ".", "append", "(", "{", "\n", "\"arm_index\"", ":", "i", ",", "\n", "\"name\"", ":", "'{}-{}'", ".", "format", "(", "optimizer", ",", "aquisition_func", ")", ",", "\n", "\"candidates\"", ":", "cand_indices", ",", "\n", "\"ranks\"", ":", "ranks", "\n", "}", ")", "\n", "\n", "", "", "return", "all_nominees", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.measure_correlation": [[62, 75], ["NotImplementedError", "scipy.stats.kendalltau"], "methods", ["None"], ["", "def", "measure_correlation", "(", "self", ",", "nominees1", ",", "nominees2", ",", "metric", "=", "'kendall'", ",", "alpha", "=", "0.05", ")", ":", "\n", "        ", "coef", "=", "0.0", "# default coefficient", "\n", "if", "metric", "!=", "'kendall'", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'correlation metric not supported: {}'", ".", "format", "(", "metric", ")", ")", "\n", "", "else", ":", "\n", "            ", "ranks1", "=", "nominees1", "[", "\"ranks\"", "]", "\n", "ranks2", "=", "nominees2", "[", "\"ranks\"", "]", "\n", "coef", ",", "p", "=", "kendalltau", "(", "ranks1", ",", "ranks2", ")", "\n", "if", "p", "<", "alpha", ":", "\n", "#debug('{} and {} are correlated with the value {}'.format(", "\n", "#    nominees1['name'], nominees2['name'], coef))", "\n", "                ", "return", "coef", "\n", "", "", "return", "coef", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.next": [[76, 98], ["time.time", "disparity.DisparityCheckStrategy.nominate", "len", "len", "disparity.DisparityCheckStrategy.configure_arms", "debug", "remained_arms.append", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.nominate", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.configure_arms", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "\n", "        ", "if", "step", ">=", "self", ".", "check_iters", ":", "\n", "            ", "s_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "nominees", "=", "self", ".", "nominate", "(", ")", "\n", "if", "len", "(", "nominees", ")", ">", "1", ":", "\n", "                ", "self", ".", "valid_arm_indices", "=", "self", ".", "configure_arms", "(", "nominees", ")", "\n", "remained_arms", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "valid_arm_indices", ":", "\n", "                    ", "arm", "=", "self", ".", "arms", "[", "i", "]", "\n", "remained_arms", ".", "append", "(", "'{}-{}'", ".", "format", "(", "arm", "[", "'model'", "]", ",", "arm", "[", "'acq_func'", "]", ")", ")", "\n", "\n", "", "self", ".", "check_iters", "=", "step", "+", "len", "(", "remained_arms", ")", "\n", "dur", "=", "time", ".", "time", "(", ")", "-", "s_t", "\n", "debug", "(", "'Diversity measure takes {:.2f} sec: {}'", ".", "format", "(", "dur", ",", "remained_arms", ")", ")", "\n", "\n", "\n", "", "", "i", "=", "step", "%", "len", "(", "self", ".", "valid_arm_indices", ")", "\n", "arm_index", "=", "self", ".", "valid_arm_indices", "[", "i", "]", "\n", "\n", "return", "arm_index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.configure_arms": [[99, 132], ["list", "itertools.combinations", "disparity.DisparityCheckStrategy.measure_correlation", "random.randint", "range", "range", "debug", "sim_combi.append", "len", "len", "debug", "disp_combi.append", "valid_arm_indices.remove", "valid_arm_indices.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.measure_correlation", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "configure_arms", "(", "self", ",", "nominees", ")", ":", "\n", "        ", "valid_arm_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "arms", ")", ")", "]", "\n", "sim_combi", "=", "[", "]", "\n", "disp_combi", "=", "[", "]", "\n", "combi", "=", "list", "(", "combinations", "(", "nominees", ",", "2", ")", ")", "\n", "for", "c", "in", "combi", ":", "\n", "            ", "coef", "=", "self", ".", "measure_correlation", "(", "c", "[", "0", "]", ",", "c", "[", "1", "]", ")", "\n", "if", "coef", ">=", "0.65", ":", "\n", "                ", "debug", "(", "'{} & {} show strong agreement({:0.4f}).'", ".", "format", "(", "c", "[", "0", "]", "[", "'name'", "]", ",", "c", "[", "1", "]", "[", "'name'", "]", ",", "coef", ")", ")", "\n", "sim_combi", ".", "append", "(", "c", ")", "\n", "\n", "", "elif", "coef", "<=", "-", "0.65", ":", "\n", "                ", "debug", "(", "'{} & {} show strong disagreement({:0.4f}).'", ".", "format", "(", "c", "[", "0", "]", "[", "'name'", "]", ",", "c", "[", "1", "]", "[", "'name'", "]", ",", "coef", ")", ")", "\n", "disp_combi", ".", "append", "(", "c", ")", "\n", "\n", "# drop a item randomly in the similar combinations", "\n", "", "", "for", "s", "in", "sim_combi", ":", "\n", "            ", "c", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "k", "=", "s", "[", "c", "]", "[", "\"arm_index\"", "]", "\n", "if", "len", "(", "valid_arm_indices", ")", ">", "1", ":", "\n", "                ", "if", "k", "in", "valid_arm_indices", ":", "\n", "                    ", "valid_arm_indices", ".", "remove", "(", "k", ")", "\n", "#debug('Arm# {} removed'.format(k))", "\n", "\n", "# append disagreed arms to the list", "\n", "", "", "", "for", "d", "in", "disp_combi", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "a", "=", "d", "[", "j", "]", "[", "\"arm_index\"", "]", "\n", "if", "not", "a", "in", "valid_arm_indices", ":", "\n", "                    ", "valid_arm_indices", ".", "append", "(", "a", ")", "\n", "#debug('Arm# {} appended'.format(a))", "\n", "#debug('The remained arms: {}'.format(valid_arm_indices))", "\n", "", "", "", "return", "valid_arm_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.disparity.DisparityCheckStrategy.update": [[133, 137], ["range", "len", "float", "float", "sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "            ", "self", ".", "values", "[", "i", "]", "=", "float", "(", "self", ".", "counts", "[", "i", "]", ")", "/", "float", "(", "sum", "(", "self", ".", "counts", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.__init__": [[15, 18], ["div.DiversificationStrategy.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_arms", ",", "values", ",", "counts", ",", "title", ")", ":", "\n", "        ", "name", "=", "\"RANDOM_\"", "+", "title", "\n", "super", "(", "RandomStrategy", ",", "self", ")", ".", "__init__", "(", "name", ",", "num_arms", ",", "values", ",", "counts", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next": [[19, 23], ["numpy.random.randint"], "methods", ["None"], ["", "def", "next", "(", "self", ",", "step", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_arms", ")", "\n", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.update": [[24, 28], ["range", "len", "float", "float", "sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "arm_index", ",", "curr_acc", ",", "opt", ")", ":", "\n", "        ", "self", ".", "counts", "[", "arm_index", "]", "+=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "values", ")", ")", ":", "\n", "            ", "self", ".", "values", "[", "i", "]", "=", "float", "(", "self", ".", "counts", "[", "i", "]", ")", "/", "float", "(", "sum", "(", "self", ".", "counts", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.create_verifier": [[20, 28], ["proxy.get_nas_builder", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_builder", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "create_verifier", "(", "surrogate", ",", "run_config", ")", ":", "\n", "    ", "if", "'NAS-Bench-101'", "in", "surrogate", ":", "\n", "        ", "builder", "=", "get_nas_builder", "(", "surrogate", ",", "run_config", ")", "\n", "return", "builder", "\n", "", "else", ":", "\n", "# Not supported other BM yet", "\n", "        ", "warn", "(", "\"Not supported surrogate BM to verify: {}\"", ".", "format", "(", "surrogate", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_builder": [[30, 43], ["NAS101Builder", "NAS201Bench", "ValueError"], "function", ["None"], ["", "", "def", "get_nas_builder", "(", "surrogate", ",", "run_config", ",", "dataset", "=", "'ImageNet16-120'", ")", ":", "\n", "    ", "if", "surrogate", "==", "'NAS-Bench-101'", ":", "\n", "        ", "if", "\"data_path\"", "in", "run_config", ":", "\n", "            ", "data_path", "=", "run_config", "[", "\"data_path\"", "]", "\n", "", "else", ":", "\n", "            ", "data_path", "=", "'lookup/nasbench_full.tfrecord'", "\n", "\n", "", "return", "NAS101Builder", "(", "data_path", ",", "surrogate", ")", "\n", "", "elif", "surrogate", "==", "'NAS-Bench-201'", ":", "\n", "        ", "from", "lookup", ".", "nas201bench", ".", "api", "import", "NAS201Bench", "\n", "return", "NAS201Bench", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Not supported surrogate: {}'", ".", "format", "(", "surrogate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_emulator": [[45, 92], ["NAS101Emulator", "type", "NAS201Emulator", "ValueError", "NAS101ETREmulator", "NAS101ETREmulator", "range", "NAS201ETREmulator", "NAS101ETREmulator", "NAS201ETREmulator", "warn", "NAS201ETREmulator", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "get_nas_emulator", "(", "bench_type", ",", "builder", ",", "space", ",", "run_config", ")", ":", "\n", "\n", "    ", "if", "\"min_train_epoch\"", "in", "run_config", ":", "\n", "        ", "min_epoch", "=", "run_config", "[", "\"min_train_epoch\"", "]", "\n", "", "else", ":", "\n", "        ", "min_epoch", "=", "108", "\n", "\n", "", "if", "\"worst_error\"", "in", "run_config", "and", "type", "(", "run_config", "[", "\"worst_error\"", "]", ")", "==", "float", ":", "\n", "        ", "worst_error", "=", "run_config", "[", "\"worst_error\"", "]", "\n", "", "else", ":", "\n", "        ", "worst_error", "=", "None", "\n", "\n", "", "report_mean_test_acc", "=", "False", "\n", "if", "\"report_mean_test_acc\"", "in", "run_config", ":", "\n", "        ", "report_mean_test_acc", "=", "run_config", "[", "\"report_mean_test_acc\"", "]", "\n", "\n", "", "if", "bench_type", "==", "101", ":", "\n", "        ", "epoch_budgets", "=", "[", "4", ",", "12", ",", "36", ",", "108", "]", "\n", "if", "\"early_term_rule\"", "in", "run_config", ":", "\n", "            ", "etr", "=", "run_config", "[", "\"early_term_rule\"", "]", "\n", "if", "etr", "==", "\"DecaTercet\"", ":", "\n", "                ", "return", "NAS101ETREmulator", "(", "builder", ",", "space", ",", "0.1", ",", "epoch_budgets", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "", "elif", "etr", "==", "\"PentaTercet\"", ":", "\n", "                ", "return", "NAS101ETREmulator", "(", "builder", ",", "space", ",", "0.2", ",", "epoch_budgets", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "", "elif", "etr", "==", "\"TetraTercet\"", ":", "\n", "                ", "return", "NAS101ETREmulator", "(", "builder", ",", "space", ",", "0.25", ",", "epoch_budgets", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "", "elif", "etr", "!=", "'None'", ":", "\n", "                ", "warn", "(", "\"ETR {} is not implemented for NAS101-benchmark\"", ".", "format", "(", "etr", ")", ")", "\n", "\n", "", "", "return", "NAS101Emulator", "(", "builder", ",", "space", ",", "min_epoch", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "\n", "", "elif", "bench_type", "==", "201", ":", "\n", "        ", "epoch_budgets", "=", "[", "i", "*", "10", "for", "i", "in", "range", "(", "1", ",", "21", ")", "]", "\n", "if", "\"early_term_rule\"", "in", "run_config", ":", "\n", "            ", "etr", "=", "run_config", "[", "\"early_term_rule\"", "]", "\n", "if", "etr", "==", "\"DecaTercet\"", ":", "\n", "                ", "return", "NAS201ETREmulator", "(", "builder", ",", "space", ",", "0.1", ",", "epoch_budgets", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "", "elif", "etr", "==", "\"PentaTercet\"", ":", "\n", "                ", "return", "NAS201ETREmulator", "(", "builder", ",", "space", ",", "0.2", ",", "epoch_budgets", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "", "elif", "etr", "==", "\"TetraTercet\"", ":", "\n", "                ", "return", "NAS201ETREmulator", "(", "builder", ",", "space", ",", "0.25", ",", "epoch_budgets", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "", "elif", "etr", "!=", "'None'", ":", "\n", "                ", "warn", "(", "\"ETR {} is not implemented for NAS201-benchmark\"", ".", "format", "(", "etr", ")", ")", "\n", "", "", "return", "NAS201Emulator", "(", "builder", ",", "space", ",", "min_epoch", ",", "worst_error", ",", "report_mean_test_acc", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not supported benchmark type: {}\"", ".", "format", "(", "bench_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_fcnet_emulator": [[94, 131], ["TabularFCNetTrainEmulator", "ModuleNotFoundError", "type", "TabularFCNetETREmulator", "TabularFCNetETREmulator", "TabularFCNetETREmulator", "warn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "get_fcnet_emulator", "(", "space", ",", "run_config", ",", "config_type", ")", ":", "\n", "\n", "\n", "    ", "try", ":", "\n", "        ", "from", "trainers", ".", "emul", ".", "fcnet_trainer", "import", "TabularFCNetTrainEmulator", "\n", "from", "trainers", ".", "emul", ".", "fcnet_etr_trainer", "import", "TabularFCNetETREmulator", "\n", "\n", "", "except", "ImportError", "as", "ie", ":", "\n", "        ", "raise", "ModuleNotFoundError", "(", "\"Import error for HPO-Benchmark: {}\"", ".", "format", "(", "ie", ")", ")", "\n", "\n", "", "if", "\"min_train_epoch\"", "in", "run_config", ":", "\n", "        ", "min_epoch", "=", "run_config", "[", "\"min_train_epoch\"", "]", "\n", "", "else", ":", "\n", "        ", "min_epoch", "=", "100", "\n", "\n", "", "if", "\"worst_error\"", "in", "run_config", "and", "type", "(", "run_config", "[", "\"worst_error\"", "]", ")", "==", "float", ":", "\n", "        ", "worst_error", "=", "run_config", "[", "\"worst_error\"", "]", "\n", "", "else", ":", "\n", "        ", "worst_error", "=", "None", "\n", "\n", "", "if", "\"data_path\"", "in", "run_config", ":", "\n", "        ", "data_path", "=", "run_config", "[", "\"data_path\"", "]", "\n", "", "else", ":", "\n", "        ", "data_path", "=", "'lookup/fcnet_tabular_benchmarks/'", "\n", "\n", "", "if", "\"early_term_rule\"", "in", "run_config", ":", "\n", "        ", "etr", "=", "run_config", "[", "\"early_term_rule\"", "]", "\n", "if", "etr", "==", "\"DecaTercet\"", ":", "\n", "            ", "return", "TabularFCNetETREmulator", "(", "space", ",", "data_path", ",", "0.1", ",", "worst_error", ",", "config_type", ")", "\n", "", "elif", "etr", "==", "\"PentaTercet\"", ":", "\n", "            ", "return", "TabularFCNetETREmulator", "(", "space", ",", "data_path", ",", "0.2", ",", "worst_error", ",", "config_type", ")", "\n", "", "elif", "etr", "==", "\"TetraTercet\"", ":", "\n", "            ", "return", "TabularFCNetETREmulator", "(", "space", ",", "data_path", ",", "0.25", ",", "worst_error", ",", "config_type", ")", "\n", "", "elif", "etr", "!=", "'None'", ":", "\n", "            ", "warn", "(", "\"ETR {} is not implemented for NAS benchmark\"", ".", "format", "(", "etr", ")", ")", "\n", "\n", "", "", "return", "TabularFCNetTrainEmulator", "(", "space", ",", "data_path", ",", "min_epoch", ",", "worst_error", ",", "config_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_dnn_train_simulator": [[133, 161], ["hasattr", "ValueError", "TrainEmulator", "CompoundETRTrainer", "CompoundETRTrainer", "CompoundETRTrainer", "debug", "TrainEmulator"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "get_dnn_train_simulator", "(", "space", ",", "run_config", ")", ":", "\n", "\n", "    ", "etr", "=", "None", "\n", "if", "run_config", "and", "\"early_term_rule\"", "in", "run_config", ":", "\n", "        ", "etr", "=", "run_config", "[", "\"early_term_rule\"", "]", "\n", "\n", "", "expired_time", "=", "None", "\n", "if", "run_config", "and", "\"warm_up_time\"", "in", "run_config", ":", "\n", "        ", "expired_time", "=", "run_config", "[", "\"warm_up_time\"", "]", "\n", "\n", "", "from", "trainers", ".", "emul", ".", "trainer", "import", "TrainEmulator", "\n", "from", "trainers", ".", "emul", ".", "threshold_etr", "import", "CompoundETRTrainer", "\n", "\n", "if", "not", "hasattr", "(", "space", ",", "'lookup'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid surrogate space\"", ")", "\n", "", "lookup", "=", "space", ".", "lookup", "\n", "\n", "if", "etr", "==", "None", "or", "etr", "==", "\"None\"", ":", "\n", "        ", "return", "TrainEmulator", "(", "lookup", ")", "\n", "", "elif", "etr", "==", "\"DecaTercet\"", ":", "\n", "        ", "return", "CompoundETRTrainer", "(", "lookup", ",", "0.1", ")", "\n", "", "elif", "etr", "==", "\"PentaTercet\"", ":", "\n", "        ", "return", "CompoundETRTrainer", "(", "lookup", ",", "0.2", ")", "\n", "", "elif", "etr", "==", "\"TetraTercet\"", ":", "\n", "        ", "return", "CompoundETRTrainer", "(", "lookup", ",", "0.25", ")", "\n", "", "else", ":", "\n", "        ", "debug", "(", "\"Invalid ETR: {}. Use no ETR instread\"", ".", "format", "(", "etr", ")", ")", "\n", "return", "TrainEmulator", "(", "lookup", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.__init__": [[6, 8], ["None"], "methods", ["None"], ["class", "SamplerProtype", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ",", "spec", ",", "verifier", "=", "None", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.initialize": [[9, 11], ["None"], "methods", ["None"], ["        ", "if", "'num_samples'", "in", "spec", ":", "\n", "            ", "self", ".", "num_samples", "=", "spec", "[", "'num_samples'", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.add_train_history": [[12, 25], ["proto.TrainerPrototype.history.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["            ", "self", ".", "num_samples", "=", "20000", "\n", "\n", "", "if", "'seed'", "in", "spec", ":", "\n", "            ", "seed", "=", "spec", "[", "'seed'", "]", "\n", "if", "spec", "[", "'seed'", "]", "==", "'random'", ":", "\n", "                ", "seed", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_samples", ")", "\n", "", "self", ".", "seed", "=", "seed", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "1", "\n", "\n", "", "self", ".", "config", "=", "config", "\n", "self", ".", "params", "=", "config", ".", "get_param_names", "(", ")", "\n", "self", ".", "num_dim", "=", "len", "(", "self", ".", "params", ")", "\n", "self", ".", "verifier", "=", "verifier", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.train": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["self", ".", "verified", "=", "False", "\n", "\n", "", "def", "get_sample_size", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.get_interim_error": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["        ", "return", "self", ".", "num_samples", "\n", "\n", "", "def", "get_name", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.get_acc_curve": [[32, 50], ["len", "ValueError", "len"], "methods", ["None"], ["        ", "if", "self", ".", "name", ":", "\n", "            ", "return", "self", ".", "name", "\n", "", "else", ":", "\n", "            ", "return", "\"Undefined\"", "\n", "\n", "", "", "def", "is_verified", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "verified", "==", "None", ":", "\n", "            ", "return", "True", "# XXX: No verifier is treated as all of candidate are verified", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "verified", "\n", "\n", "", "", "def", "validate", "(", "self", ",", "candidate", ")", ":", "\n", "\n", "        ", "if", "type", "(", "candidate", ")", "!=", "dict", ":", "\n", "            ", "candidate", "=", "self", ".", "config", ".", "convert", "(", "\"arr\"", ",", "\"dict\"", ",", "candidate", ")", "\n", "\n", "", "cand", "=", "{", "}", "\n", "try", ":", "\n", "# Type forcing", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.get_verifier": [[51, 53], ["None"], "methods", ["None"], ["            ", "for", "k", "in", "candidate", ":", "\n", "                ", "if", "not", "k", "in", "self", ".", "config", ".", "get_param_names", "(", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"{} is not in {}\"", ".", "format", "(", "k", ",", "self", ".", "params", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.__init__.create_trainer": [[19, 42], ["isinstance", "xoa.commons.hp_cfg.HyperparameterConfiguration", "info", "NotImplementedError", "proxy.get_nas_emulator", "proxy.get_nas_builder", "proxy.get_nas_emulator", "proxy.get_nas_builder", "proxy.get_fcnet_emulator"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_emulator", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_builder", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_emulator", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_nas_builder", "home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proxy.get_fcnet_emulator"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.__init__": [[19, 37], ["trainers.emul.fcnet_trainer.TabularFCNetTrainEmulator.__init__", "int", "int", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "data_path", ",", "survive_ratio", ",", "\n", "worst_err", "=", "0.9", ",", "config_type", "=", "'FCNetProteinStructureBenchmark'", ")", ":", "\n", "\n", "        ", "if", "survive_ratio", "<", "0.0", "or", "survive_ratio", ">", "0.5", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid survive_ratio: {}\"", ".", "format", "(", "survive_ratio", ")", ")", "\n", "\n", "", "self", ".", "threshold_percentile", "=", "100.0", "-", "(", "survive_ratio", "*", "100.0", ")", "\n", "self", ".", "acc_scale", "=", "10.0", "\n", "self", ".", "etr_checked", "=", "False", "\n", "\n", "super", "(", "TabularFCNetETREmulator", ",", "self", ")", ".", "__init__", "(", "space", ",", "data_path", ",", "10", ",", "worst_err", ",", "config_type", ")", "\n", "\n", "self", ".", "survive_ratio", "=", "survive_ratio", "\n", "self", ".", "early_drop_percentile", "=", "(", "survive_ratio", "*", "100.0", ")", "\n", "self", ".", "late_drop_percentile", "=", "100", "-", "(", "survive_ratio", "*", "100.0", ")", "\n", "self", ".", "num_epochs", "=", "100", "\n", "self", ".", "early_drop_epoch", "=", "int", "(", "self", ".", "num_epochs", "*", "0.5", ")", "\n", "self", ".", "survive_check_epoch", "=", "int", "(", "self", ".", "num_epochs", "*", "(", "1.0", "-", "self", ".", "survive_ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.initialize": [[38, 40], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "super", "(", "TabularFCNetETREmulator", ",", "self", ")", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.get_eval_indices": [[41, 49], ["int", "int"], "methods", ["None"], ["", "def", "get_eval_indices", "(", "self", ",", "eval_start_ratio", ",", "eval_end_ratio", ")", ":", "\n", "        ", "start_index", "=", "int", "(", "self", ".", "num_epochs", "*", "eval_start_ratio", ")", "\n", "if", "start_index", ">", "0", ":", "\n", "            ", "start_index", "-=", "1", "\n", "\n", "", "eval_start_index", "=", "start_index", "\n", "eval_end_index", "=", "int", "(", "self", ".", "num_epochs", "*", "eval_end_ratio", ")", "-", "1", "\n", "return", "eval_start_index", ",", "eval_end_index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.get_acc_threshold": [[50, 78], ["fcnet_etr_trainer.TabularFCNetETREmulator.get_acc_curves", "len", "numpy.mean", "len", "numpy.percentile", "numpy.isnan", "mean_accs.append", "len", "len", "numpy.mean", "numpy.isnan", "mean_accs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.get_acc_curves", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_acc_threshold", "(", "self", ",", "cur_acc_curve", ",", "\n", "eval_start_index", ",", "eval_end_index", ",", "percentile", ")", ":", "\n", "        ", "mean_accs", "=", "[", "]", "\n", "cur_acc_curve", "=", "cur_acc_curve", "[", "eval_start_index", ":", "eval_end_index", "+", "1", "]", "\n", "if", "len", "(", "cur_acc_curve", ")", ">", "0", ":", "\n", "            ", "cur_mean_acc", "=", "np", ".", "mean", "(", "cur_acc_curve", ")", "\n", "if", "np", ".", "isnan", "(", "cur_mean_acc", ")", "==", "False", ":", "\n", "                ", "mean_accs", ".", "append", "(", "cur_mean_acc", ")", "\n", "\n", "", "", "acc_curves", "=", "self", ".", "get_acc_curves", "(", ")", "\n", "for", "prev_curve", "in", "acc_curves", ":", "\n", "            ", "acc_curve_span", "=", "[", "]", "\n", "\n", "if", "len", "(", "prev_curve", ")", ">", "eval_end_index", ":", "\n", "                ", "acc_curve_span", "=", "prev_curve", "[", "eval_start_index", ":", "eval_end_index", "+", "1", "]", "\n", "\n", "", "if", "len", "(", "acc_curve_span", ")", ">", "0", ":", "\n", "                ", "mean_acc", "=", "np", ".", "mean", "(", "acc_curve_span", ")", "\n", "if", "np", ".", "isnan", "(", "mean_acc", ")", "==", "False", ":", "\n", "                    ", "mean_accs", ".", "append", "(", "mean_acc", ")", "\n", "\n", "", "", "", "if", "len", "(", "mean_accs", ")", ">", "0", ":", "\n", "            ", "threshold", "=", "np", ".", "percentile", "(", "mean_accs", ",", "percentile", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "#debug(\"P:{}%, T:{:.4f}, mean accs:{}\".format(percentile, threshold, [\"{:.4f}\".format(acc) for acc in mean_accs]))", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.set_acc_scale": [[79, 88], ["max", "debug", "debug", "warn"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "def", "set_acc_scale", "(", "self", ",", "loss_curve", ")", ":", "\n", "        ", "max_loss", "=", "max", "(", "loss_curve", ")", "\n", "if", "self", ".", "acc_scale", "<", "max_loss", ":", "\n", "            ", "if", "self", ".", "acc_scale", ">", "1.0", ":", "\n", "                ", "warn", "(", "\"Scaling factor to transform loss to accuracy has to be set again due to {}\"", ".", "format", "(", "max_loss", ")", ")", "\n", "", "debug", "(", "\"Scaling to transform loss to accuracy properly.\"", ")", "\n", "while", "self", ".", "acc_scale", "<", "max_loss", ":", "\n", "                ", "self", ".", "acc_scale", "=", "10", "*", "self", ".", "acc_scale", "\n", "", "debug", "(", "\"Current accuracy scale: {}\"", ".", "format", "(", "self", ".", "acc_scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.flip_curve": [[89, 104], ["fcnet_etr_trainer.TabularFCNetETREmulator.set_acc_scale", "acc_curve.append", "float", "float"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.set_acc_scale", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "flip_curve", "(", "self", ",", "loss_curve", ")", ":", "\n", "        ", "acc_curve", "=", "[", "]", "\n", "prev_acc", "=", "None", "\n", "self", ".", "set_acc_scale", "(", "loss_curve", ")", "\n", "for", "loss", "in", "loss_curve", ":", "\n", "            ", "if", "loss", "!=", "None", ":", "\n", "                ", "acc", "=", "float", "(", "self", ".", "acc_scale", "-", "loss", ")", "/", "float", "(", "self", ".", "acc_scale", ")", "\n", "prev_acc", "=", "acc", "\n", "", "else", ":", "\n", "                ", "if", "prev_acc", "==", "None", ":", "\n", "                    ", "acc", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "acc", "=", "prev_acc", "\n", "", "", "acc_curve", ".", "append", "(", "acc", ")", "\n", "", "return", "acc_curve", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.get_acc_curves": [[105, 115], ["range", "len", "acc_curves.append", "fcnet_etr_trainer.TabularFCNetETREmulator.flip_curve"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.flip_curve"], ["", "def", "get_acc_curves", "(", "self", ")", ":", "\n", "        ", "acc_curves", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "history", ")", ")", ":", "\n", "            ", "curve", "=", "self", ".", "history", "[", "i", "]", "[", "\"curve\"", "]", "\n", "if", "not", "'accuracy'", "in", "self", ".", "history", "[", "i", "]", "[", "'measure'", "]", ":", "\n", "                ", "acc_curve", "=", "self", ".", "flip_curve", "(", "curve", ")", "\n", "", "else", ":", "\n", "                ", "acc_curve", "=", "curve", "\n", "", "acc_curves", ".", "append", "(", "acc_curve", ")", "\n", "", "return", "acc_curves", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.stop_check": [[116, 149], ["len", "fcnet_etr_trainer.TabularFCNetETREmulator.get_eval_indices", "fcnet_etr_trainer.TabularFCNetETREmulator.get_acc_threshold", "debug", "debug", "fcnet_etr_trainer.TabularFCNetETREmulator.get_eval_indices", "fcnet_etr_trainer.TabularFCNetETREmulator.get_acc_threshold", "debug", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.get_eval_indices", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.get_eval_indices", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "stop_check", "(", "self", ",", "acc_curve", ",", "cur_epoch", ")", ":", "\n", "        ", "if", "len", "(", "acc_curve", ")", "<", "self", ".", "early_drop_epoch", ":", "\n", "            ", "return", "False", "# no ETR rule applied due to short epochs learning", "\n", "\n", "", "if", "self", ".", "etr_checked", "==", "False", ":", "\n", "            ", "if", "cur_epoch", ">=", "self", ".", "early_drop_epoch", "and", "cur_epoch", "<", "self", ".", "survive_check_epoch", ":", "\n", "# evaluate early termination criteria", "\n", "                ", "start_index", ",", "end_index", "=", "self", ".", "get_eval_indices", "(", "0.0", ",", "0.5", ")", "\n", "cur_acc", "=", "acc_curve", "[", "end_index", "]", "\n", "\n", "acc_thres", "=", "self", ".", "get_acc_threshold", "(", "acc_curve", ",", "start_index", ",", "end_index", ",", "self", ".", "early_drop_percentile", ")", "\n", "debug", "(", "\"Termination check at {} epoch: {:.6f} > 1.0\"", ".", "format", "(", "cur_epoch", ",", "cur_acc", "/", "acc_thres", ")", ")", "\n", "if", "cur_acc", "<", "acc_thres", ":", "\n", "                    ", "debug", "(", "\"Evaluation is dropped in the early checkpoint.\"", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "self", ".", "etr_checked", "=", "\"early\"", "\n", "", "", "", "elif", "self", ".", "etr_checked", "==", "\"early\"", ":", "\n", "            ", "if", "cur_epoch", ">=", "self", ".", "survive_check_epoch", ":", "\n", "# evaluate late survival criteria", "\n", "                ", "eval_end_ratio", "=", "1.0", "-", "self", ".", "survive_ratio", "\n", "start_index", ",", "end_index", "=", "self", ".", "get_eval_indices", "(", "0.5", ",", "eval_end_ratio", ")", "\n", "cur_acc", "=", "acc_curve", "[", "end_index", "]", "\n", "acc_thres", "=", "self", ".", "get_acc_threshold", "(", "acc_curve", ",", "start_index", ",", "end_index", ",", "self", ".", "late_drop_percentile", ")", "\n", "debug", "(", "\"Termination check at {} epoch: {:.6f} > 1.0\"", ".", "format", "(", "cur_epoch", ",", "cur_acc", "/", "acc_thres", ")", ")", "\n", "if", "cur_acc", "<", "acc_thres", ":", "\n", "                    ", "debug", "(", "\"Evaluation is dropped in the late checkpoint.\"", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                    ", "self", ".", "etr_checked", "=", "True", "\n", "return", "False", "\n", "", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.train": [[150, 208], ["super().train", "fcnet_etr_trainer.TabularFCNetETREmulator.space.get_hpv_dict", "fcnet_etr_trainer.TabularFCNetETREmulator.benchmark", "fcnet_etr_trainer.TabularFCNetETREmulator.objective_function_learning_curve", "fcnet_etr_trainer.TabularFCNetETREmulator.flip_curve", "fcnet_etr_trainer.TabularFCNetETREmulator.stop_check", "fcnet_etr_trainer.TabularFCNetETREmulator.add_train_history", "fcnet_etr_trainer.TabularFCNetETREmulator.stop_check", "float", "float", "float", "warn", "debug", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.objective_function_learning_curve", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.flip_curve", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.stop_check", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_etr_trainer.TabularFCNetETREmulator.stop_check", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "", "def", "train", "(", "self", ",", "model_index", ",", "train_epoch", "=", "None", ",", "no_etr", "=", "False", ")", ":", "\n", "\n", "        ", "if", "train_epoch", "==", "None", ":", "\n", "            ", "train_epoch", "=", "self", ".", "num_epochs", "\n", "\n", "", "if", "no_etr", "==", "True", ":", "\n", "            ", "return", "super", "(", "TabularFCNetETREmulator", ",", "self", ")", ".", "train", "(", "model_index", ",", "train_epoch", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "etr_checked", "=", "False", "\n", "early_terminated", "=", "False", "\n", "h", "=", "self", ".", "space", ".", "get_hpv_dict", "(", "model_index", ")", "\n", "b", "=", "self", ".", "benchmark", "(", "data_dir", "=", "self", ".", "data_dir", ")", "\n", "\n", "test_err", ",", "err_curve", ",", "rts", "=", "b", ".", "objective_function_learning_curve", "(", "h", ",", "budget", "=", "train_epoch", ")", "\n", "#debug(\"Valid MSE curve: {}, Runtimes: {}\".format(err_curve, rts))", "\n", "err", "=", "test_err", "\n", "acc_curve", "=", "self", ".", "flip_curve", "(", "err_curve", ")", "\n", "if", "self", ".", "stop_check", "(", "acc_curve", ",", "self", ".", "early_drop_epoch", ")", ":", "\n", "                ", "err", "=", "err_curve", "[", "self", ".", "early_drop_epoch", "-", "1", "]", "\n", "test_err", "=", "err", "# XXX: treated early stopped error as test error ", "\n", "err_curve", "=", "err_curve", "[", ":", "self", ".", "early_drop_epoch", "]", "\n", "rt", "=", "rts", "[", "self", ".", "early_drop_epoch", "-", "1", "]", "\n", "train_epoch", "=", "self", ".", "early_drop_epoch", "\n", "early_terminated", "=", "True", "\n", "#debug(\"Early dropped at {}: {}\".format(self.early_drop_epoch, err))", "\n", "", "elif", "self", ".", "stop_check", "(", "acc_curve", ",", "self", ".", "survive_check_epoch", ")", ":", "\n", "                ", "err", "=", "err_curve", "[", "self", ".", "survive_check_epoch", "-", "1", "]", "\n", "test_err", "=", "err", "# XXX: treated early stopped error as test error", "\n", "err_curve", "=", "err_curve", "[", ":", "self", ".", "survive_check_epoch", "]", "\n", "rt", "=", "rts", "[", "self", ".", "survive_check_epoch", "-", "1", "]", "\n", "train_epoch", "=", "self", ".", "survive_check_epoch", "\n", "early_terminated", "=", "True", "\n", "#debug(\"Not finally survived at {}: {}\".format(self.survive_check_epoch, err))", "\n", "", "else", ":", "\n", "                ", "err", "=", "err_curve", "[", "-", "1", "]", "\n", "rt", "=", "rts", "[", "-", "1", "]", "\n", "#debug(\"Survivor performance: {}, runtime: {}\".format(err, rt))", "\n", "\n", "", "self", ".", "add_train_history", "(", "err_curve", ",", "\n", "rt", ",", "\n", "train_epoch", ",", "\n", "measure", "=", "'loss'", ")", "\n", "\n", "if", "train_epoch", "!=", "self", ".", "num_epochs", ":", "\n", "                ", "test_err", "=", "err", "# XXX: use of interim valid error as test performance", "\n", "\n", "", "return", "{", "\n", "\"valid_error\"", ":", "float", "(", "err", ")", ",", "\n", "\"test_error\"", ":", "float", "(", "test_err", ")", ",", "\n", "\"exec_time\"", ":", "float", "(", "rt", ")", ",", "\n", "\"train_epoch\"", ":", "train_epoch", ",", "\n", "'early_terminated'", ":", "early_terminated", "\n", "}", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Training failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.__init__": [[16, 25], ["trainers.proto.TrainerPrototype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bench", ",", "space", ",", "min_epoch", ",", "\n", "worst_err", "=", "0.9", ",", "report_mean_test_acc", "=", "False", ")", ":", "\n", "        ", "self", ".", "space", "=", "space", "\n", "self", ".", "min_epoch", "=", "min_epoch", "\n", "self", ".", "worst_err", "=", "worst_err", "\n", "self", ".", "report_mean_test_acc", "=", "report_mean_test_acc", "\n", "\n", "self", ".", "bench", "=", "bench", "\n", "super", "(", "NAS101Emulator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.get_min_train_epoch": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_min_train_epoch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "min_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.get_verifier": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_verifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bench", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.train": [[32, 93], ["time.time", "nas_trainer.NAS101Emulator.space.get_hpv_dict", "nas_trainer.NAS101Emulator.bench.build", "nas_trainer.NAS101Emulator.bench.is_valid", "nas_trainer.NAS101Emulator.bench.query", "nas_trainer.NAS101Emulator.keys", "ValueError", "nas_trainer.NAS101Emulator.bench.get_metrics_from_spec", "numpy.mean", "time.time", "float", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.MaxPool3x3Conv1x1.build", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.is_valid", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_metrics_from_spec"], ["", "def", "train", "(", "self", ",", "model_index", ",", "train_epoch", "=", "None", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "=", "0.0", "\n", "\n", "is_failed", "=", "False", "\n", "test_acc", "=", "0.0", "\n", "valid_acc", "=", "0.0", "\n", "\n", "try", ":", "\n", "            ", "if", "train_epoch", "==", "None", ":", "\n", "                ", "train_epoch", "=", "108", "\n", "\n", "", "h", "=", "self", ".", "space", ".", "get_hpv_dict", "(", "model_index", ")", "\n", "cell", "=", "self", ".", "bench", ".", "build", "(", "h", ")", "\n", "\n", "if", "self", ".", "bench", ".", "is_valid", "(", "cell", ")", ":", "\n", "# Querying multiple times may yield different results. Each cell is evaluated 3", "\n", "# times at each epoch budget and querying will sample one randomly.", "\n", "                ", "result", "=", "self", ".", "bench", ".", "query", "(", "cell", ",", "epochs", "=", "train_epoch", ")", "\n", "accuracies", "=", "{", "}", "\n", "for", "k", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "'accuracy'", "in", "k", ":", "\n", "                        ", "accuracies", "[", "k", "]", "=", "result", "[", "k", "]", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Architecture not found!\"", ")", "\n", "\n", "", "total_time", "=", "result", "[", "'training_time'", "]", "\n", "valid_acc", "=", "result", "[", "'validation_accuracy'", "]", "\n", "\n", "if", "train_epoch", "==", "108", "and", "self", ".", "report_mean_test_acc", "==", "True", ":", "\n", "# compute mean test error for the final budget", "\n", "                ", "_", ",", "metrics", "=", "self", ".", "bench", ".", "get_metrics_from_spec", "(", "cell", ")", "\n", "test_acc", "=", "np", ".", "mean", "(", "[", "metrics", "[", "108", "]", "[", "i", "]", "[", "\"final_test_accuracy\"", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "test_acc", "=", "result", "[", "'test_accuracy'", "]", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "#warn(\"Error on the configuration #{}: {}\".format(model_index, ex))", "\n", "#debug(traceback.format_exc())", "\n", "            ", "is_failed", "=", "True", "\n", "if", "self", ".", "worst_err", "!=", "None", ":", "\n", "                ", "test_acc", "=", "1.0", "-", "float", "(", "self", ".", "worst_err", ")", "\n", "", "else", ":", "\n", "                ", "test_acc", "=", "0.0", "\n", "", "valid_acc", "=", "test_acc", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "train_epoch", "=", "0", "\n", "", "finally", ":", "\n", "#debug(\"Training the configuration #{} with {} epochs ({:.0f}s) -> {:.4f}\".format(model_index, train_epoch, total_time, test_acc))", "\n", "            ", "test_error", "=", "1.0", "-", "test_acc", "\n", "valid_error", "=", "1.0", "-", "valid_acc", "\n", "return", "{", "\n", "\"test_error\"", ":", "test_error", ",", "\n", "\"valid_error\"", ":", "valid_error", ",", "\n", "\"test_accuracy\"", ":", "test_acc", ",", "\n", "\"valid_accuracy\"", ":", "valid_acc", ",", "\n", "\"exec_time\"", ":", "total_time", ",", "\n", "\"train_epoch\"", ":", "train_epoch", ",", "\n", "\"train_failed\"", ":", "is_failed", ",", "\n", "'early_terminated'", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS101Emulator.get_interim_error": [[95, 106], ["nas_trainer.NAS101Emulator.train"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train"], ["", "", "def", "get_interim_error", "(", "self", ",", "model_index", ",", "cur_dur", "=", "0", ")", ":", "\n", "\n", "        ", "if", "cur_dur", ">", "0", ":", "\n", "            ", "cur_epoch", "=", "self", ".", "min_epoch", "\n", "ret", "=", "self", ".", "train", "(", "model_index", ",", "cur_epoch", ")", "\n", "error", "=", "ret", "[", "'valid_error'", "]", "\n", "", "else", ":", "\n", "            ", "cur_epoch", "=", "0", "\n", "error", "=", "self", ".", "worst_err", "\n", "\n", "", "return", "error", ",", "cur_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS201Emulator.__init__": [[110, 113], ["nas_trainer.NAS101Emulator.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bench", ",", "space", ",", "min_epoch", ",", "\n", "worst_err", "=", "0.9", ",", "report_mean_test_acc", "=", "False", ")", ":", "\n", "        ", "super", "(", "NAS201Emulator", ",", "self", ")", ".", "__init__", "(", "bench", ",", "space", ",", "min_epoch", ",", "worst_err", ",", "report_mean_test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS201Emulator.verify": [[114, 116], ["None"], "methods", ["None"], ["", "def", "verify", "(", "self", ",", "cand", ")", ":", "\n", "        ", "return", "True", "# XXX:every configuration is valid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_trainer.NAS201Emulator.train": [[117, 154], ["time.time", "nas_trainer.NAS201Emulator.space.get_hpv_dict", "nas_trainer.NAS201Emulator.bench.get_arch_index", "nas_trainer.NAS201Emulator.bench.train", "debug", "traceback.format_exc", "float", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.get_arch_index", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "train", "(", "self", ",", "model_index", ",", "train_epoch", "=", "None", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "is_failed", "=", "False", "\n", "try", ":", "\n", "            ", "if", "train_epoch", "==", "None", ":", "\n", "                ", "train_epoch", "=", "200", "\n", "\n", "", "conf_dict", "=", "self", ".", "space", ".", "get_hpv_dict", "(", "model_index", ")", "\n", "#debug('Config: {}'.format(conf_dict))", "\n", "model_index", "=", "self", ".", "bench", ".", "get_arch_index", "(", "conf_dict", ")", "\n", "test_loss", ",", "val_loss", ",", "total_time", ",", "result", "=", "self", ".", "bench", ".", "train", "(", "model_index", ",", "train_epoch", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "#warn(\"Error on the configuration #{}: {}\".format(model_index, ex))", "\n", "            ", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "is_failed", "=", "True", "\n", "if", "self", ".", "worst_err", "!=", "None", ":", "\n", "                ", "test_loss", "=", "float", "(", "self", ".", "worst_err", ")", "\n", "", "else", ":", "\n", "                ", "test_loss", "=", "1.0", "\n", "", "val_loss", "=", "test_loss", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "train_epoch", "=", "0", "\n", "", "finally", ":", "\n", "#debug(\"Training the configuration #{} with {} epochs ({:.0f}s) returns test error {:.4f}\".format(model_index, train_epoch, total_time, test_loss))", "\n", "            ", "valid_acc", "=", "1.0", "-", "val_loss", "\n", "test_acc", "=", "1.0", "-", "test_loss", "\n", "\n", "return", "{", "\n", "\"test_error\"", ":", "test_loss", ",", "\n", "\"valid_error\"", ":", "val_loss", ",", "\n", "\"test_accuracy\"", ":", "test_acc", ",", "\n", "\"valid_accuracy\"", ":", "valid_acc", ",", "\n", "\"exec_time\"", ":", "total_time", ",", "\n", "\"train_epoch\"", ":", "train_epoch", ",", "\n", "\"train_failed\"", ":", "is_failed", ",", "\n", "'early_terminated'", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.ThresholdingETRTrainer.__init__": [[15, 32], ["trainers.emul.trainer.EarlyTerminationTrainer.__init__", "int", "ValueError", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lookup", ",", "survive_ratio", ",", "\n", "eval_start_ratio", "=", "0.5", ",", "eval_end_ratio", "=", "0.67", ")", ":", "\n", "\n", "        ", "if", "survive_ratio", "<", "0.0", "or", "survive_ratio", ">", "0.5", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid survive_ratio: {}\"", ".", "format", "(", "survive_ratio", ")", ")", "\n", "\n", "", "super", "(", "ThresholdingETRTrainer", ",", "self", ")", ".", "__init__", "(", "lookup", ")", "\n", "\n", "self", ".", "num_epochs", "=", "lookup", ".", "num_epochs", "\n", "\n", "start_index", "=", "int", "(", "self", ".", "num_epochs", "*", "eval_start_ratio", ")", "\n", "if", "start_index", ">", "0", ":", "\n", "            ", "start_index", "-=", "1", "\n", "\n", "", "self", ".", "eval_start_index", "=", "start_index", "\n", "self", ".", "eval_end_index", "=", "int", "(", "self", ".", "num_epochs", "*", "eval_end_ratio", ")", "-", "1", "\n", "self", ".", "threshold_percentile", "=", "100.0", "-", "(", "survive_ratio", "*", "100.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.ThresholdingETRTrainer.get_eval_epoch": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_eval_epoch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_end_index", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.ThresholdingETRTrainer.get_acc_threshold": [[36, 56], ["range", "len", "numpy.mean", "len", "threshold_etr.ThresholdingETRTrainer.get_acc_curve", "len", "numpy.percentile", "numpy.isnan", "mean_accs.append", "len", "numpy.mean", "numpy.isnan", "mean_accs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.get_acc_curve", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_acc_threshold", "(", "self", ",", "cur_acc_curve", ")", ":", "\n", "        ", "mean_accs", "=", "[", "]", "\n", "if", "len", "(", "cur_acc_curve", ")", ">", "0", ":", "\n", "            ", "cur_mean_acc", "=", "np", ".", "mean", "(", "cur_acc_curve", ")", "\n", "if", "np", ".", "isnan", "(", "cur_mean_acc", ")", "==", "False", ":", "\n", "                ", "mean_accs", ".", "append", "(", "cur_mean_acc", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "history", ")", ")", ":", "\n", "            ", "acc_curve_span", "=", "self", ".", "get_acc_curve", "(", "i", ",", "self", ".", "eval_start_index", ",", "self", ".", "eval_end_index", "+", "1", ")", "\n", "if", "len", "(", "acc_curve_span", ")", ">", "0", ":", "\n", "                ", "mean_acc", "=", "np", ".", "mean", "(", "acc_curve_span", ")", "\n", "if", "np", ".", "isnan", "(", "mean_acc", ")", "==", "False", ":", "\n", "                    ", "mean_accs", ".", "append", "(", "mean_acc", ")", "\n", "\n", "", "", "", "if", "len", "(", "mean_accs", ")", ">", "0", ":", "\n", "            ", "threshold", "=", "np", ".", "percentile", "(", "mean_accs", ",", "self", ".", "threshold_percentile", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "#debug(\"mean accs:{}\".format([\"{:.4f}\".format(acc) for acc in mean_accs]))", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.ThresholdingETRTrainer.train": [[57, 108], ["threshold_etr.ThresholdingETRTrainer.get_preevaluated_result", "threshold_etr.ThresholdingETRTrainer.add_train_history", "len", "threshold_etr.ThresholdingETRTrainer.get_eval_epoch", "threshold_etr.ThresholdingETRTrainer.get_acc_threshold", "debug", "copy.copy", "threshold_etr.ThresholdingETRTrainer.get_train_time", "max", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.get_preevaluated_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.ThresholdingETRTrainer.get_eval_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.get_train_time"], ["", "def", "train", "(", "self", ",", "cand_index", ",", "train_epoch", "=", "None", ",", "min_train_epoch", "=", "1", ")", ":", "\n", "\n", "        ", "if", "train_epoch", "==", "None", ":", "\n", "            ", "train_epoch", "=", "self", ".", "num_epochs", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_epochs", "=", "train_epoch", "\n", "\n", "#debug(\"cand_index:{}\".format(cand_index))", "\n", "\n", "", "result", "=", "self", ".", "get_preevaluated_result", "(", "cand_index", ")", "\n", "acc_curve", "=", "result", "[", "'curve'", "]", "\n", "train_time", "=", "result", "[", "'train_time'", "]", "\n", "min_loss", "=", "result", "[", "'test_error'", "]", "\n", "\n", "#debug(\"{}: commencing iteration {}\".format(type(self).__name__, len(self.history)))", "\n", "#debug(\"accuracy curve: {}\".format(acc_curve))", "\n", "\n", "cur_acc_curve", "=", "acc_curve", "\n", "cur_max_acc", "=", "0.0", "\n", "cur_epoch", "=", "min_train_epoch", "\n", "early_terminated", "=", "False", "\n", "\n", "while", "cur_epoch", "<=", "train_epoch", ":", "\n", "\n", "            ", "acc", "=", "acc_curve", "[", "cur_epoch", "-", "1", "]", "\n", "\n", "if", "acc", ">", "cur_max_acc", ":", "\n", "                ", "cur_max_acc", "=", "acc", "\n", "\n", "", "if", "cur_epoch", "==", "self", ".", "get_eval_epoch", "(", ")", ":", "\n", "                ", "threshold", "=", "self", ".", "get_acc_threshold", "(", "acc_curve", "[", "min_train_epoch", "-", "1", ":", "cur_epoch", "]", ")", "\n", "\n", "if", "threshold", ">", "acc", ":", "\n", "                    ", "debug", "(", "\"{} terminates training #{} at epoch {} (Checking accuracy {:.4f} > {:.4f} asymptote: {:.4f})\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "cand_index", ",", "cur_epoch", ",", "threshold", ",", "acc", ",", "max", "(", "acc_curve", ")", ")", ")", "\n", "\n", "cur_acc_curve", "=", "copy", ".", "copy", "(", "acc_curve", "[", "min_train_epoch", "-", "1", ":", "cur_epoch", "]", ")", "\n", "min_loss", "=", "1.0", "-", "cur_max_acc", "\n", "train_time", "=", "self", ".", "get_train_time", "(", "cand_index", ",", "cur_epoch", ")", "\n", "early_terminated", "=", "True", "\n", "break", "\n", "\n", "", "", "cur_epoch", "+=", "1", "\n", "\n", "", "self", ".", "add_train_history", "(", "cur_acc_curve", ",", "train_time", ",", "cur_epoch", ",", "early_terminated", ")", "\n", "\n", "return", "{", "\n", "\"test_error\"", ":", "min_loss", ",", "\n", "\"train_epoch\"", ":", "len", "(", "cur_acc_curve", ")", ",", "\n", "\"exec_time\"", ":", "train_time", ",", "\n", "'early_terminated'", ":", "early_terminated", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.EarlyDropETRTrainer.__init__": [[113, 119], ["threshold_etr.ThresholdingETRTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lookup", ",", "drop_ratio", ")", ":", "# 0 ~ 0.5", "\n", "\n", "        ", "survive_ratio", "=", "1.0", "-", "drop_ratio", "\n", "super", "(", "EarlyDropETRTrainer", ",", "self", ")", ".", "__init__", "(", "lookup", ",", "survive_ratio", ",", "\n", "eval_start_ratio", "=", "0", ",", "\n", "eval_end_ratio", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.LateSurviveETRTrainer.__init__": [[123, 129], ["threshold_etr.ThresholdingETRTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lookup", ",", "survive_ratio", ")", ":", "\n", "\n", "        ", "eval_end_ratio", "=", "1.0", "-", "survive_ratio", "\n", "super", "(", "LateSurviveETRTrainer", ",", "self", ")", ".", "__init__", "(", "lookup", ",", "survive_ratio", ",", "\n", "eval_start_ratio", "=", "0.5", ",", "\n", "eval_end_ratio", "=", "eval_end_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.CompoundETRTrainer.__init__": [[132, 140], ["threshold_etr.EarlyDropETRTrainer", "threshold_etr.LateSurviveETRTrainer", "trainers.emul.trainer.EarlyTerminationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lookup", ",", "survive_ratio", ")", ":", "\n", "\n", "        ", "self", ".", "num_epochs", "=", "lookup", ".", "num_epochs", "\n", "drop_ratio", "=", "1.0", "-", "survive_ratio", "\n", "self", ".", "lower_etr", "=", "EarlyDropETRTrainer", "(", "lookup", ",", "drop_ratio", ")", "\n", "self", ".", "higher_etr", "=", "LateSurviveETRTrainer", "(", "lookup", ",", "survive_ratio", ")", "\n", "\n", "super", "(", "CompoundETRTrainer", ",", "self", ")", ".", "__init__", "(", "lookup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.CompoundETRTrainer.train": [[142, 185], ["threshold_etr.CompoundETRTrainer.get_preevaluated_result", "int", "threshold_etr.CompoundETRTrainer.add_train_history", "numpy.argmax", "len", "threshold_etr.CompoundETRTrainer.lower_etr.train", "threshold_etr.CompoundETRTrainer.higher_etr.train", "threshold_etr.CompoundETRTrainer.higher_etr.get_eval_epoch", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.get_preevaluated_result", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.threshold_etr.ThresholdingETRTrainer.get_eval_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy"], ["", "def", "train", "(", "self", ",", "cand_index", ",", "train_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "acc", "=", "0", "# stopping accuracy", "\n", "min_train_epoch", "=", "1", "\n", "result", "=", "self", ".", "get_preevaluated_result", "(", "cand_index", ")", "\n", "\n", "cur_acc_curve", "=", "result", "[", "'curve'", "]", "\n", "best_epoch", "=", "np", ".", "argmax", "(", "result", "[", "'curve'", "]", ")", "+", "1", "\n", "cur_max_acc", "=", "0", "\n", "cur_epoch", "=", "min_train_epoch", "\n", "early_terminated", "=", "False", "\n", "if", "train_epoch", "==", "None", ":", "\n", "            ", "train_epoch", "=", "self", ".", "num_epochs", "\n", "", "threshold_epoch", "=", "int", "(", "train_epoch", "*", "0.5", ")", "\n", "\n", "while", "cur_epoch", "<=", "self", ".", "num_epochs", ":", "\n", "\n", "            ", "if", "cur_epoch", "<", "threshold_epoch", ":", "\n", "                ", "result", "=", "self", ".", "lower_etr", ".", "train", "(", "cand_index", ",", "\n", "train_epoch", "=", "threshold_epoch", ")", "\n", "\n", "if", "result", "[", "'early_terminated'", "]", "==", "True", ":", "\n", "                    ", "cur_acc_curve", "=", "cur_acc_curve", "[", ":", "threshold_epoch", "]", "\n", "cur_epoch", "=", "threshold_epoch", "\n", "", "else", ":", "\n", "                    ", "result", "=", "self", ".", "higher_etr", ".", "train", "(", "cand_index", ",", "\n", "min_train_epoch", "=", "threshold_epoch", ")", "\n", "if", "result", "[", "'early_terminated'", "]", "==", "True", ":", "\n", "                        ", "cur_epoch", "=", "self", ".", "higher_etr", ".", "get_eval_epoch", "(", ")", "\n", "cur_acc_curve", "=", "copy", ".", "copy", "(", "cur_acc_curve", "[", ":", "cur_epoch", "]", ")", "\n", "", "else", ":", "\n", "                       ", "cur_epoch", "=", "self", ".", "num_epochs", "\n", "", "", "break", "\n", "\n", "", "", "self", ".", "add_train_history", "(", "cur_acc_curve", ",", "result", "[", "'exec_time'", "]", ",", "\n", "cur_epoch", ",", "result", "[", "'early_terminated'", "]", ")", "\n", "\n", "return", "{", "\n", "\"test_error\"", ":", "result", "[", "'test_error'", "]", ",", "\n", "\"train_epoch\"", ":", "len", "(", "cur_acc_curve", ")", ",", "\n", "\"best_epoch\"", ":", "best_epoch", ",", "\n", "\"exec_time\"", ":", "result", "[", "'exec_time'", "]", ",", "\n", "'early_terminated'", ":", "result", "[", "'early_terminated'", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.__init__": [[37, 49], ["arch_builder.NAS101Builder.load_dataset", "super().__init__", "os.path.isfile", "error", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.load_dataset", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "config_type", ")", ":", "\n", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "data_path", ")", ":", "\n", "            ", "error", "(", "\"Invalid NAS 101 dataset path: {}\"", ".", "format", "(", "data_path", ")", ")", "\n", "raise", "ValueError", "(", "\"Dataset path not found: {}\"", ".", "format", "(", "data_path", ")", ")", "\n", "\n", "", "if", "not", "'NAS-Bench-101'", "in", "config_type", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid configuration type: {}\"", ".", "format", "(", "config_type", ")", ")", "\n", "\n", "", "self", ".", "config_type", "=", "config_type", "\n", "self", ".", "nas_bench", "=", "self", ".", "load_dataset", "(", "data_path", ")", "\n", "super", "(", "NAS101Builder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.get_config_type": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_config_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config_type", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.verify": [[53, 65], ["arch_builder.NAS101Builder.is_valid", "arch_builder.NAS101Builder.build_type2", "arch_builder.NAS101Builder.build_type1", "arch_builder.NAS101Builder.build"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.is_valid", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type2", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type1", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.MaxPool3x3Conv1x1.build"], ["", "def", "verify", "(", "self", ",", "cand", ")", ":", "\n", "        ", "if", "'type2'", "in", "self", ".", "config_type", ":", "\n", "            ", "c", "=", "self", ".", "build_type2", "(", "cand", ")", "\n", "", "elif", "'type1'", "in", "self", ".", "config_type", ":", "\n", "            ", "c", "=", "self", ".", "build_type1", "(", "cand", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "self", ".", "build", "(", "cand", ")", "\n", "\n", "", "if", "self", ".", "is_valid", "(", "c", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.load_dataset": [[66, 74], ["lookup.NASBench", "error"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "", "def", "load_dataset", "(", "self", ",", "tfrecord", ")", ":", "\n", "        ", "global", "NAS_BENCH_DATA", "\n", "try", ":", "\n", "            ", "if", "NAS_BENCH_DATA", "==", "None", ":", "\n", "                ", "NAS_BENCH_DATA", "=", "api", ".", "NASBench", "(", "tfrecord", ")", "\n", "", "return", "NAS_BENCH_DATA", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "error", "(", "\"Dataset loading fail: {}\"", ".", "format", "(", "tfrecord", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.bin_array": [[75, 78], ["numpy.array().astype().tolist", "numpy.array().astype", "numpy.array", "list", "numpy.binary_repr().zfill", "numpy.binary_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "bin_array", "(", "self", ",", "num", ",", "m", ")", ":", "\n", "        ", "\"\"\"Convert a positive integer num into an m-bit bit vector\"\"\"", "\n", "return", "np", ".", "array", "(", "list", "(", "np", ".", "binary_repr", "(", "num", ")", ".", "zfill", "(", "m", ")", ")", ")", ".", "astype", "(", "np", ".", "int8", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.is_valid": [[79, 81], ["arch_builder.NAS101Builder.nas_bench.is_valid"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.is_valid"], ["", "def", "is_valid", "(", "self", ",", "cell", ")", ":", "\n", "        ", "return", "self", ".", "nas_bench", ".", "is_valid", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.query": [[82, 84], ["arch_builder.NAS101Builder.nas_bench.query"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query"], ["", "def", "query", "(", "self", ",", "cell", ",", "epochs", ")", ":", "\n", "        ", "return", "self", ".", "nas_bench", ".", "query", "(", "cell", ",", "epochs", "=", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.get_metrics_from_spec": [[85, 87], ["arch_builder.NAS101Builder.nas_bench.get_metrics_from_spec"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_metrics_from_spec"], ["", "def", "get_metrics_from_spec", "(", "self", ",", "cell", ")", ":", "\n", "        ", "return", "self", ".", "nas_bench", ".", "get_metrics_from_spec", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build": [[88, 98], ["arch_builder.NAS101Builder.build_type2", "arch_builder.NAS101Builder.build_type1", "arch_builder.NAS101Builder.build_type0", "TypeError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type2", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type1", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type0"], ["", "def", "build", "(", "self", ",", "h", ")", ":", "\n", "        ", "if", "'-type2'", "in", "self", ".", "config_type", ":", "\n", "            ", "cell", "=", "self", ".", "build_type2", "(", "h", ")", "\n", "", "elif", "'-type1'", "in", "self", ".", "config_type", ":", "\n", "            ", "cell", "=", "self", ".", "build_type1", "(", "h", ")", "\n", "", "elif", "self", ".", "config_type", "==", "'NAS-Bench-101'", ":", "\n", "            ", "cell", "=", "self", ".", "build_type0", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Not supported configuration space type: {}\"", ".", "format", "(", "self", ".", "config_type", ")", ")", "\n", "", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type0": [[99, 131], ["len", "ops.insert", "ops.append", "int", "range", "range", "numpy.array", "lookup.ModelSpec", "int", "int", "int", "int", "int", "int", "len", "arch_builder.NAS101Builder.bin_array", "numpy.array.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.bin_array", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "build_type0", "(", "self", ",", "h", ")", ":", "\n", "        ", "ops", "=", "[", "h", "[", "'ops1'", "]", ",", "h", "[", "'ops2'", "]", ",", "h", "[", "'ops3'", "]", ",", "h", "[", "'ops4'", "]", ",", "h", "[", "'ops5'", "]", "]", "\n", "links", "=", "[", "int", "(", "h", "[", "'link0'", "]", ")", ",", "int", "(", "h", "[", "'link1'", "]", ")", ",", "int", "(", "h", "[", "'link2'", "]", ")", ",", "\n", "int", "(", "h", "[", "'link3'", "]", ")", ",", "int", "(", "h", "[", "'link4'", "]", ")", ",", "int", "(", "h", "[", "'link5'", "]", ")", ",", "0", "]", "\n", "\n", "MAX_LINKS", "=", "[", "63", ",", "31", ",", "15", ",", "7", ",", "3", ",", "1", ",", "0", "]", "\n", "\n", "n_iv", "=", "len", "(", "ops", ")", "# number of inner vertices (input, output excluded)", "\n", "ops", ".", "insert", "(", "0", ",", "INPUT", ")", "\n", "ops", ".", "append", "(", "OUTPUT", ")", "\n", "n_v", "=", "n_iv", "+", "2", "\n", "edge_spots", "=", "int", "(", "n_v", "*", "(", "n_v", "-", "1", ")", "/", "2", ")", "\n", "#debug(\"node operation list: \")", "\n", "#debug(\"{}\".format(ops))", "\n", "\n", "# validate links value", "\n", "for", "i", "in", "range", "(", "len", "(", "links", ")", ")", ":", "\n", "            ", "if", "links", "[", "i", "]", ">", "MAX_LINKS", "[", "i", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid link value at {}: {} > {}\"", ".", "format", "(", "i", ",", "links", "[", "i", "]", ",", "MAX_LINKS", "[", "i", "]", ")", ")", "\n", "\n", "", "", "matrix", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_v", ")", ":", "\n", "            ", "vec", "=", "self", ".", "bin_array", "(", "links", "[", "i", "]", ",", "n_v", ")", "\n", "matrix", ".", "append", "(", "vec", ")", "\n", "", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "#debug(\"{}\".format(links))", "\n", "#debug(\"Adj. matrix:\")", "\n", "#debug(matrix)", "\n", "\n", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "# output layer", "\n", "# Operations at the vertices of the module, matches order of matrix.", "\n", "ops", "=", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type1": [[132, 166], ["len", "ops.insert", "ops.append", "range", "list", "range", "numpy.array", "lookup.ModelSpec", "list.append", "set", "numpy.array", "range", "numpy.array.append", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "build_type1", "(", "self", ",", "h", ")", ":", "\n", "        ", "ops", "=", "[", "h", "[", "'ops1'", "]", ",", "h", "[", "'ops2'", "]", ",", "h", "[", "'ops3'", "]", ",", "h", "[", "'ops4'", "]", ",", "h", "[", "'ops5'", "]", "]", "\n", "n_iv", "=", "len", "(", "ops", ")", "# number of inner vertices (input, output excluded)", "\n", "ops", ".", "insert", "(", "0", ",", "INPUT", ")", "\n", "ops", ".", "append", "(", "OUTPUT", ")", "\n", "\n", "n_v", "=", "n_iv", "+", "2", "\n", "selected", "=", "[", "]", "\n", "max_edges", "=", "9", "\n", "for", "i", "in", "range", "(", "max_edges", ")", ":", "\n", "            ", "k", "=", "\"edge_{}\"", ".", "format", "(", "i", ")", "\n", "v", "=", "h", "[", "k", "]", "\n", "selected", ".", "append", "(", "v", ")", "\n", "", "selected", "=", "list", "(", "set", "(", "selected", ")", ")", "# remove duplicated", "\n", "\n", "matrix", "=", "[", "]", "\n", "slot_index", "=", "0", "\n", "for", "i", "in", "range", "(", "n_v", ")", ":", "\n", "            ", "vec", "=", "np", ".", "array", "(", "[", "0", "for", "j", "in", "range", "(", "n_v", ")", "]", ")", "\n", "for", "k", "in", "range", "(", "i", "+", "1", ",", "n_v", ")", ":", "\n", "                ", "if", "slot_index", "in", "selected", ":", "\n", "                    ", "vec", "[", "k", "]", "=", "1", "\n", "", "slot_index", "=", "slot_index", "+", "1", "\n", "\n", "", "matrix", ".", "append", "(", "vec", ")", "\n", "\n", "", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "#debug(\"{}\".format(links))", "\n", "#debug(\"Adj. matrix:\")", "\n", "#debug(matrix)", "\n", "\n", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "# output layer", "\n", "# Operations at the vertices of the module, matches order of matrix.", "\n", "ops", "=", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.arch_builder.NAS101Builder.build_type2": [[167, 207], ["len", "ops.insert", "ops.append", "int", "range", "numpy.array", "range", "numpy.array", "lookup.ModelSpec", "numpy.array.append", "numpy.array", "range", "numpy.array.append", "numpy.array.argsort", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "build_type2", "(", "self", ",", "h", ")", ":", "\n", "        ", "ops", "=", "[", "h", "[", "'ops1'", "]", ",", "h", "[", "'ops2'", "]", ",", "h", "[", "'ops3'", "]", ",", "h", "[", "'ops4'", "]", ",", "h", "[", "'ops5'", "]", "]", "\n", "n_iv", "=", "len", "(", "ops", ")", "# number of inner vertices (input, output excluded)", "\n", "ops", ".", "insert", "(", "0", ",", "INPUT", ")", "\n", "ops", ".", "append", "(", "OUTPUT", ")", "\n", "\n", "n_v", "=", "n_iv", "+", "2", "\n", "edge_spots", "=", "int", "(", "n_v", "*", "(", "n_v", "-", "1", ")", "/", "2", ")", "\n", "num_edges", "=", "h", "[", "'num_edges'", "]", "\n", "edge_values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "edge_spots", ")", ":", "\n", "            ", "k", "=", "'edge_{}'", ".", "format", "(", "i", ")", "\n", "v", "=", "h", "[", "k", "]", "\n", "edge_values", ".", "append", "(", "v", ")", "\n", "", "edge_values", "=", "np", ".", "array", "(", "edge_values", ")", "\n", "\n", "selected", "=", "[", "]", "# selected edges by higher order", "\n", "if", "num_edges", ">", "0", ":", "\n", "            ", "selected", "=", "edge_values", ".", "argsort", "(", ")", "[", "-", "num_edges", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "#debug(\"Selected edge index: {}\".format(selected))       ", "\n", "\n", "", "matrix", "=", "[", "]", "\n", "slot_index", "=", "0", "\n", "for", "i", "in", "range", "(", "n_v", ")", ":", "\n", "            ", "vec", "=", "np", ".", "array", "(", "[", "0", "for", "j", "in", "range", "(", "n_v", ")", "]", ")", "\n", "for", "k", "in", "range", "(", "i", "+", "1", ",", "n_v", ")", ":", "\n", "                ", "if", "slot_index", "in", "selected", ":", "\n", "                    ", "vec", "[", "k", "]", "=", "1", "\n", "", "slot_index", "=", "slot_index", "+", "1", "\n", "\n", "", "matrix", ".", "append", "(", "vec", ")", "\n", "\n", "", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "#debug(\"{}\".format(links))", "\n", "#debug(\"Adj. matrix:\")", "\n", "#debug(matrix)", "\n", "\n", "return", "api", ".", "ModelSpec", "(", "matrix", "=", "matrix", ",", "# output layer", "\n", "# Operations at the vertices of the module, matches order of matrix.", "\n", "ops", "=", "ops", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.TrainEmulator.__init__": [[10, 18], ["lookup.get_all_test_acc_per_epoch", "lookup.get_all_exec_times", "trainers.proto.TrainerPrototype.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_test_acc_per_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_exec_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["from", "xoa", ".", "commons", ".", "logger", "import", "*", "\n", "from", "xoa", ".", "workers", ".", "worker", "import", "Worker", "\n", "\n", "class", "Trainer", "(", "Worker", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "id", "=", "None", ",", "fork", "=", "False", ")", ":", "\n", "        ", "self", ".", "fork", "=", "fork", "\n", "\n", "self", ".", "device_type", "=", "'cpu'", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.TrainEmulator.get_min_train_epoch": [[19, 27], ["None"], "methods", ["None"], ["self", ".", "device_index", "=", "0", "\n", "self", ".", "last_sync_time", "=", "None", "\n", "\n", "if", "id", "==", "None", ":", "\n", "            ", "id", "=", "'trainer_proto'", "\n", "\n", "", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "id", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.TrainEmulator.train": [[28, 38], ["len", "max"], "methods", ["None"], ["\n", "", "def", "set_resource", "(", "self", ",", "device_type", ",", "device_index", ")", ":", "\n", "        ", "self", ".", "device_type", "=", "device_type", "\n", "self", ".", "device_index", "=", "device_index", "\n", "\n", "", "def", "get_device_id", "(", "self", ")", ":", "\n", "        ", "return", "\"{}{}\"", ".", "format", "(", "self", ".", "device_type", ",", "self", ".", "device_index", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.TrainEmulator.get_interim_error": [[40, 55], ["int", "trainer.TrainEmulator.lookup.get_all_test_errors"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_test_errors"], ["            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./temp/'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'./temp/'", ")", "\n", "", "pkl", "=", "\"./temp/mutex_{}.pkl\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "os", ".", "remove", "(", "pkl", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "def", "sync_result", "(", "self", ",", "retrieve_func", ")", ":", "\n", "        ", "result", "=", "retrieve_func", "(", ")", "\n", "# TODO: validate result contents", "\n", "if", "type", "(", "result", ")", "==", "list", ":", "\n", "            ", "if", "len", "(", "result", ")", ">", "0", ":", "\n", "                ", "self", ".", "results", "=", "result", "\n", "", "else", ":", "\n", "                ", "debug", "(", "\"No result found yet.\"", ")", "\n", "", "", "elif", "type", "(", "result", ")", "==", "dict", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.__init__": [[60, 64], ["trainer.TrainEmulator.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["", "self", ".", "dump_results", "(", ")", "\n", "\n", "", "def", "set_sync_time", "(", "self", ",", "sync_time", ")", ":", "\n", "#debug(\"Result had been synched at {}\".format(time.asctime(time.localtime(sync_time))))", "\n", "        ", "self", ".", "last_sync_time", "=", "sync_time", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.initialize": [[65, 68], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize"], ["\n", "", "def", "set_job_description", "(", "self", ",", "params", ",", "index", "=", "None", ",", "job_id", "=", "None", ")", ":", "\n", "        ", "if", "job_id", "!=", "None", ":", "\n", "            ", "self", ".", "job_id", "=", "job_id", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.get_train_time": [[69, 77], ["len", "debug"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["\n", "", "if", "params", ":", "\n", "            ", "debug", "(", "\"Assigned parameters: {}\"", ".", "format", "(", "params", ")", ")", "\n", "self", ".", "params", "=", "params", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "debug", "(", "\"Invalid parameters: {}\"", ".", "format", "(", "params", ")", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.get_preevaluated_result": [[78, 88], ["max"], "methods", ["None"], ["", "", "def", "is_forked", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fork", "\n", "\n", "", "def", "is_working", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "def", "dump_results", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_forked", "(", ")", "==", "True", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./temp/'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'./temp/'", ")", "\n", "", "pkl", "=", "\"./temp/mutex_{}.pkl\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history": [[90, 94], ["super().add_train_history", "trainer.EarlyTerminationTrainer.early_terminated_history.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["                ", "pickle", ".", "dump", "(", "self", ".", "results", ",", "f", ")", "\n", "\n", "", "", "", "def", "load_results", "(", "self", ",", "device_id", ")", ":", "\n", "        ", "pkl", "=", "\"./temp/mutex_{}.pkl\"", ".", "format", "(", "self", ".", "get_device_id", "(", ")", ")", "\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyStopTerminateBoilerplate.__init__": [[101, 104], ["trainer.EarlyTerminationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["        ", "if", "self", ".", "is_forked", "(", ")", "==", "True", ":", "\n", "            ", "self", ".", "load_results", "(", "device_id", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "results", ")", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyStopTerminateBoilerplate.train": [[105, 139], ["len", "print", "trainer.EarlyStopTerminateBoilerplate.early_terminated_history.append", "trainer.EarlyStopTerminateBoilerplate.early_terminated_history.append", "max"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["            ", "latest", "=", "self", ".", "results", "[", "-", "1", "]", "\n", "result", "=", "copy", ".", "copy", "(", "latest", ")", "\n", "\n", "result", "[", "'val_loss_curve'", "]", "=", "[", "]", "\n", "result", "[", "'test_loss_curve'", "]", "=", "[", "]", "\n", "for", "r", "in", "self", ".", "results", ":", "\n", "                ", "if", "'val_loss'", "in", "r", ":", "\n", "                    ", "result", "[", "'val_loss_curve'", "]", ".", "append", "(", "r", "[", "'val_loss'", "]", ")", "\n", "", "if", "'test_loss'", "in", "r", ":", "\n", "                    ", "result", "[", "'test_loss_curve'", "]", ".", "append", "(", "r", "[", "'test_loss'", "]", ")", "\n", "\n", "", "", "result", "[", "'run_time'", "]", "=", "latest", "[", "'run_time'", "]", "\n", "return", "result", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "\"arguments\"", "in", "self", ".", "config", ":", "\n", "                    ", "if", "\"fail_err\"", "in", "self", ".", "config", "[", "'arguments'", "]", ":", "\n", "                        ", "default_err", "=", "self", ".", "config", "[", "'defaults'", "]", "[", "-", "1", "]", "\n", "default_result", "=", "{", "\"cur_iter\"", ":", "0", ",", "\n", "\"iter_unit\"", ":", "\"epoch\"", ",", "\n", "\"test_loss\"", ":", "default_err", ",", "\n", "\"loss_type\"", ":", "\"test_error\"", ",", "\n", "\"run_time\"", ":", "0.0", "\n", "}", "\n", "return", "default_result", "\n", "", "else", ":", "\n", "                        ", "return", "None", "\n", "\n", "", "", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "", "def", "add_result", "(", "self", ",", "cur_iter", ",", "cur_loss", ",", "run_time", ",", "\n", "iter_unit", "=", "\"epoch\"", ",", "\n", "loss_type", "=", "\"test_error_rate\"", ")", ":", "\n", "        ", "error_type", "=", "'test'", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_trainer.TabularFCNetTrainEmulator.__init__": [[16, 33], ["trainers.proto.TrainerPrototype.__init__", "eval", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "data_path", ",", "min_epoch", ",", "\n", "worst_err", "=", "100.0", ",", "\n", "config_type", "=", "'FCNetProteinStructureBenchmark'", ")", ":", "\n", "\n", "        ", "self", ".", "space", "=", "space", "\n", "self", ".", "data_dir", "=", "data_path", "\n", "self", ".", "min_epoch", "=", "min_epoch", "\n", "self", ".", "num_epochs", "=", "100", "\n", "self", ".", "worst_err", "=", "worst_err", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "benchmark", "=", "eval", "(", "config_type", ")", "\n", "self", ".", "config_type", "=", "config_type", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} benchmark: {}\"", ".", "format", "(", "config_type", ",", "ex", ")", ")", "\n", "\n", "", "super", "(", "TabularFCNetTrainEmulator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_trainer.TabularFCNetTrainEmulator.get_min_train_epoch": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_min_train_epoch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "min_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_trainer.TabularFCNetTrainEmulator.get_interim_error": [[37, 48], ["fcnet_trainer.TabularFCNetTrainEmulator.train"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train"], ["", "def", "get_interim_error", "(", "self", ",", "model_index", ",", "cur_dur", "=", "0", ")", ":", "\n", "\n", "        ", "if", "cur_dur", ">", "0", ":", "\n", "            ", "cur_epoch", "=", "self", ".", "min_epoch", "\n", "ret", "=", "self", ".", "train", "(", "model_index", ",", "cur_epoch", ")", "\n", "error", "=", "ret", "[", "'valid_error'", "]", "\n", "", "else", ":", "\n", "            ", "cur_epoch", "=", "0", "\n", "error", "=", "self", ".", "worst_err", "\n", "\n", "", "return", "error", ",", "cur_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.fcnet_trainer.TabularFCNetTrainEmulator.train": [[49, 75], ["fcnet_trainer.TabularFCNetTrainEmulator.space.get_hpv_dict", "fcnet_trainer.TabularFCNetTrainEmulator.benchmark", "fcnet_trainer.TabularFCNetTrainEmulator.objective_function", "float", "float", "float", "warn", "debug", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.get_hpv_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10C.objective_function", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "train", "(", "self", ",", "model_index", ",", "train_epoch", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "train_epoch", "==", "None", ":", "\n", "                ", "train_epoch", "=", "self", ".", "num_epochs", "\n", "\n", "", "h", "=", "self", ".", "space", ".", "get_hpv_dict", "(", "model_index", ")", "\n", "b", "=", "self", ".", "benchmark", "(", "data_dir", "=", "self", ".", "data_dir", ")", "\n", "\n", "test", ",", "valid", ",", "rt", "=", "b", ".", "objective_function", "(", "h", ",", "budget", "=", "train_epoch", ")", "\n", "\n", "#debug(\"Final test: {}, Valid MSE: {}, Runtime: {}\".format(test, valid, rt))", "\n", "if", "train_epoch", "!=", "self", ".", "num_epochs", ":", "\n", "                ", "test", "=", "valid", "# XXX: use of interim valid error as test performance", "\n", "\n", "\n", "", "return", "{", "\n", "\"valid_error\"", ":", "float", "(", "valid", ")", ",", "\n", "\"test_error\"", ":", "float", "(", "test", ")", ",", "\n", "\"exec_time\"", ":", "float", "(", "rt", ")", ",", "\n", "\"train_epoch\"", ":", "train_epoch", ",", "\n", "'early_terminated'", ":", "False", "\n", "}", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "warn", "(", "\"Training failed: {}\"", ".", "format", "(", "ex", ")", ")", "\n", "debug", "(", "traceback", ".", "format_exc", "(", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS101ETREmulator.__init__": [[16, 28], ["trainers.emul.nas_trainer.NAS101Emulator.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "space", ",", "survive_ratio", ",", "epoch_budgets", ",", "\n", "worst_err", "=", "0.9", ",", "report_mean_test_acc", "=", "False", ")", ":", "\n", "\n", "        ", "if", "survive_ratio", "<", "0.0", "or", "survive_ratio", ">", "0.5", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid survive_ratio: {}\"", ".", "format", "(", "survive_ratio", ")", ")", "\n", "\n", "", "self", ".", "threshold_percentile", "=", "100.0", "-", "(", "survive_ratio", "*", "100.0", ")", "\n", "self", ".", "epoch_budgets", "=", "epoch_budgets", "\n", "self", ".", "eval_start_index", "=", "0", "\n", "self", ".", "eval_end_index", "=", "2", "# XXX: use of 36 epochs", "\n", "\n", "super", "(", "NAS101ETREmulator", ",", "self", ")", ".", "__init__", "(", "builder", ",", "space", ",", "epoch_budgets", "[", "0", "]", ",", "worst_err", ",", "report_mean_test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS101ETREmulator.initialize": [[29, 31], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "super", "(", "NAS101ETREmulator", ",", "self", ")", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS101ETREmulator.get_acc_threshold": [[32, 51], ["range", "len", "numpy.mean", "len", "nas_etr_trainer.NAS101ETREmulator.get_acc_curve", "len", "numpy.percentile", "numpy.isnan", "mean_accs.append", "len", "numpy.mean", "numpy.isnan", "mean_accs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.get_acc_curve", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_acc_threshold", "(", "self", ",", "cur_acc_curve", ")", ":", "\n", "        ", "mean_accs", "=", "[", "]", "\n", "if", "len", "(", "cur_acc_curve", ")", ">", "0", ":", "\n", "            ", "cur_mean_acc", "=", "np", ".", "mean", "(", "cur_acc_curve", ")", "\n", "if", "np", ".", "isnan", "(", "cur_mean_acc", ")", "==", "False", ":", "\n", "                ", "mean_accs", ".", "append", "(", "cur_mean_acc", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "history", ")", ")", ":", "\n", "            ", "acc_curve_span", "=", "self", ".", "get_acc_curve", "(", "i", ",", "self", ".", "eval_start_index", ",", "self", ".", "eval_end_index", ")", "\n", "if", "len", "(", "acc_curve_span", ")", ">", "0", ":", "\n", "                ", "mean_acc", "=", "np", ".", "mean", "(", "acc_curve_span", ")", "\n", "if", "np", ".", "isnan", "(", "mean_acc", ")", "==", "False", ":", "\n", "                    ", "mean_accs", ".", "append", "(", "mean_acc", ")", "\n", "\n", "", "", "", "if", "len", "(", "mean_accs", ")", ">", "0", ":", "\n", "            ", "threshold", "=", "np", ".", "percentile", "(", "mean_accs", ",", "self", ".", "threshold_percentile", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS101ETREmulator.train": [[52, 105], ["nas_etr_trainer.NAS101ETREmulator.get_acc_threshold", "debug", "nas_etr_trainer.NAS101ETREmulator.add_train_history", "debug", "super().train", "val_acc_curve.append", "test_acc_curve.append", "train_times.append", "debug", "max"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "train", "(", "self", ",", "model_index", ",", "train_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "if", "train_epoch", "==", "None", ":", "\n", "            ", "train_epoch", "=", "self", ".", "epoch_budgets", "[", "-", "1", "]", "\n", "\n", "", "val_acc_curve", "=", "[", "]", "\n", "test_acc_curve", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "for", "b", "in", "self", ".", "epoch_budgets", ":", "\n", "            ", "result", "=", "super", "(", "NAS101ETREmulator", ",", "self", ")", ".", "train", "(", "model_index", ",", "b", ")", "\n", "if", "result", "[", "\"train_failed\"", "]", ":", "\n", "                ", "return", "result", "\n", "\n", "", "val_acc_curve", ".", "append", "(", "result", "[", "'valid_accuracy'", "]", ")", "\n", "test_acc_curve", ".", "append", "(", "result", "[", "'test_accuracy'", "]", ")", "\n", "train_times", ".", "append", "(", "result", "[", "'exec_time'", "]", ")", "\n", "\n", "#debug(\"{}: commencing iteration {}\".format(type(self).__name__, len(self.history)))", "\n", "\n", "", "eval_epoch", "=", "self", ".", "epoch_budgets", "[", "self", ".", "eval_end_index", "]", "\n", "p_curve", "=", "val_acc_curve", "[", "self", ".", "eval_start_index", ":", "self", ".", "eval_end_index", "+", "1", "]", "\n", "threshold", "=", "self", ".", "get_acc_threshold", "(", "p_curve", ")", "\n", "cur_val_acc", "=", "val_acc_curve", "[", "self", ".", "eval_end_index", "]", "\n", "cur_test_acc", "=", "test_acc_curve", "[", "self", ".", "eval_end_index", "]", "\n", "debug", "(", "\"Checking current accuracy over the threshold: {:.4f} / {:.4f}\"", ".", "format", "(", "cur_val_acc", ",", "threshold", ")", ")", "\n", "if", "cur_val_acc", "<", "threshold", ":", "\n", "            ", "debug", "(", "\"config #{} is terminated at epoch {} ({:.4f} > {:.4f} asymptote: {:.4f})\"", ".", "format", "(", "\n", "model_index", ",", "eval_epoch", ",", "threshold", ",", "cur_val_acc", ",", "max", "(", "val_acc_curve", ")", ")", ")", "\n", "\n", "val_acc_curve", "=", "p_curve", "\n", "val_loss", "=", "1.0", "-", "cur_val_acc", "\n", "test_loss", "=", "1.0", "-", "cur_test_acc", "\n", "train_time", "=", "train_times", "[", "self", ".", "eval_end_index", "]", "\n", "train_epoch", "=", "eval_epoch", "\n", "early_terminated", "=", "True", "\n", "", "else", ":", "\n", "            ", "val_loss", "=", "1.0", "-", "val_acc_curve", "[", "-", "1", "]", "\n", "test_loss", "=", "1.0", "-", "test_acc_curve", "[", "-", "1", "]", "\n", "train_time", "=", "train_times", "[", "-", "1", "]", "\n", "early_terminated", "=", "False", "\n", "#debug(\"Early terminated: {}\".format(early_terminated))", "\n", "", "self", ".", "add_train_history", "(", "val_acc_curve", ",", "train_time", ",", "eval_epoch", ",", "measure", "=", "'valid_accuracy'", ")", "\n", "debug", "(", "\"Training the configuration #{} with {} epochs ({:.0f}s) -> {:.4f}\"", ".", "format", "(", "model_index", ",", "train_epoch", ",", "train_time", ",", "1.0", "-", "test_loss", ")", ")", "\n", "return", "{", "\n", "\"test_error\"", ":", "test_loss", ",", "\n", "\"test_accuracy\"", ":", "1.0", "-", "test_loss", ",", "\n", "\"valid_error\"", ":", "val_loss", ",", "\n", "\"valid_accuracy\"", ":", "1.0", "-", "val_loss", ",", "\n", "\"exec_time\"", ":", "train_time", ",", "\n", "\"train_epoch\"", ":", "train_epoch", ",", "\n", "\"train_failed\"", ":", "False", ",", "\n", "'early_terminated'", ":", "early_terminated", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.__init__": [[111, 134], ["sorted", "int", "int", "sorted", "nas_etr_trainer.NAS201ETREmulator.epoch_budgets.index", "nas_etr_trainer.NAS201ETREmulator.epoch_budgets.index", "trainers.emul.nas_trainer.NAS201Emulator.__init__", "ValueError", "nas_etr_trainer.NAS201ETREmulator.epoch_budgets.append", "nas_etr_trainer.NAS201ETREmulator.epoch_budgets.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "space", ",", "survive_ratio", ",", "epoch_budgets", ",", "\n", "worst_err", "=", "0.9", ",", "report_mean_test_acc", "=", "False", ")", ":", "\n", "\n", "        ", "if", "survive_ratio", "<", "0.0", "or", "survive_ratio", ">", "0.5", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid survive_ratio: {}\"", ".", "format", "(", "survive_ratio", ")", ")", "\n", "\n", "", "self", ".", "threshold_percentile", "=", "100.0", "-", "(", "survive_ratio", "*", "100.0", ")", "\n", "self", ".", "epoch_budgets", "=", "sorted", "(", "epoch_budgets", ")", "\n", "\n", "max_epoch", "=", "epoch_budgets", "[", "-", "1", "]", "\n", "checkpoint1", "=", "int", "(", "max_epoch", "*", "0.5", ")", "\n", "checkpoint2", "=", "int", "(", "max_epoch", "*", "self", ".", "threshold_percentile", "/", "100.0", ")", "\n", "if", "not", "checkpoint1", "in", "self", ".", "epoch_budgets", ":", "\n", "            ", "self", ".", "epoch_budgets", ".", "append", "(", "checkpoint1", ")", "\n", "", "if", "not", "checkpoint2", "in", "self", ".", "epoch_budgets", ":", "\n", "            ", "self", ".", "epoch_budgets", ".", "append", "(", "checkpoint2", ")", "\n", "", "sorted", "(", "self", ".", "epoch_budgets", ")", "\n", "\n", "self", ".", "eval_start_index", "=", "0", "\n", "self", ".", "eval_mid_index", "=", "self", ".", "epoch_budgets", ".", "index", "(", "checkpoint1", ")", "\n", "self", ".", "eval_end_index", "=", "self", ".", "epoch_budgets", ".", "index", "(", "checkpoint2", ")", "\n", "\n", "super", "(", "NAS201ETREmulator", ",", "self", ")", ".", "__init__", "(", "builder", ",", "space", ",", "epoch_budgets", "[", "0", "]", ",", "worst_err", ",", "report_mean_test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize": [[135, 137], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "super", "(", "NAS201ETREmulator", ",", "self", ")", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold": [[138, 167], ["range", "len", "numpy.mean", "len", "nas_etr_trainer.NAS201ETREmulator.get_acc_curve", "len", "numpy.percentile", "numpy.isnan", "mean_accs.append", "ValueError", "len", "numpy.mean", "numpy.isnan", "mean_accs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.trainers.proto.TrainerPrototype.get_acc_curve", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_acc_threshold", "(", "self", ",", "cur_acc_curve", ",", "checkpoint", ")", ":", "\n", "        ", "mean_accs", "=", "[", "]", "\n", "if", "len", "(", "cur_acc_curve", ")", ">", "0", ":", "\n", "            ", "cur_mean_acc", "=", "np", ".", "mean", "(", "cur_acc_curve", ")", "\n", "if", "np", ".", "isnan", "(", "cur_mean_acc", ")", "==", "False", ":", "\n", "                ", "mean_accs", ".", "append", "(", "cur_mean_acc", ")", "\n", "\n", "", "", "eval_start_index", "=", "self", ".", "eval_start_index", "\n", "eval_end_index", "=", "self", ".", "eval_end_index", "\n", "if", "checkpoint", "==", "'checkpoint1'", ":", "\n", "            ", "eval_end_index", "=", "self", ".", "eval_mid_index", "\n", "", "elif", "checkpoint", "==", "'checkpoint2'", ":", "\n", "            ", "eval_start_index", "=", "self", ".", "eval_mid_index", "\n", "eval_end_index", "=", "self", ".", "eval_end_index", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid checkpoint: {}'", ".", "format", "(", "checkpoint", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "history", ")", ")", ":", "\n", "            ", "acc_curve_span", "=", "self", ".", "get_acc_curve", "(", "i", ",", "eval_start_index", ",", "eval_end_index", ")", "\n", "if", "len", "(", "acc_curve_span", ")", ">", "0", ":", "\n", "                ", "mean_acc", "=", "np", ".", "mean", "(", "acc_curve_span", ")", "\n", "if", "np", ".", "isnan", "(", "mean_acc", ")", "==", "False", ":", "\n", "                    ", "mean_accs", ".", "append", "(", "mean_acc", ")", "\n", "\n", "", "", "", "if", "len", "(", "mean_accs", ")", ">", "0", ":", "\n", "            ", "threshold", "=", "np", ".", "percentile", "(", "mean_accs", ",", "self", ".", "threshold_percentile", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.train": [[168, 236], ["nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "nas_etr_trainer.NAS201ETREmulator.add_train_history", "debug", "super().train", "val_acc_curve.append", "test_acc_curve.append", "train_times.append", "debug", "nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "debug", "max", "max"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.trainer.EarlyTerminationTrainer.add_train_history", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.emul.nas_etr_trainer.NAS201ETREmulator.get_acc_threshold", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug"], ["", "def", "train", "(", "self", ",", "model_index", ",", "train_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "if", "train_epoch", "==", "None", ":", "\n", "            ", "train_epoch", "=", "self", ".", "epoch_budgets", "[", "-", "1", "]", "\n", "\n", "", "val_acc_curve", "=", "[", "]", "\n", "test_acc_curve", "=", "[", "]", "\n", "train_times", "=", "[", "]", "\n", "\n", "for", "b", "in", "self", ".", "epoch_budgets", ":", "\n", "            ", "result", "=", "super", "(", "NAS201ETREmulator", ",", "self", ")", ".", "train", "(", "model_index", ",", "b", ")", "\n", "if", "result", "[", "\"train_failed\"", "]", ":", "\n", "                ", "return", "result", "\n", "\n", "", "val_acc_curve", ".", "append", "(", "result", "[", "'valid_accuracy'", "]", ")", "\n", "test_acc_curve", ".", "append", "(", "result", "[", "'test_accuracy'", "]", ")", "\n", "train_times", ".", "append", "(", "result", "[", "'exec_time'", "]", ")", "\n", "\n", "#debug(\"{}: commencing iteration {}\".format(type(self).__name__, len(self.history)))", "\n", "\n", "", "eval_epoch", "=", "self", ".", "epoch_budgets", "[", "self", ".", "eval_mid_index", "]", "\n", "p_curve", "=", "val_acc_curve", "[", "self", ".", "eval_start_index", ":", "self", ".", "eval_mid_index", "+", "1", "]", "\n", "threshold", "=", "self", ".", "get_acc_threshold", "(", "p_curve", ",", "'checkpoint1'", ")", "\n", "cur_val_acc", "=", "val_acc_curve", "[", "self", ".", "eval_mid_index", "]", "\n", "cur_test_acc", "=", "test_acc_curve", "[", "self", ".", "eval_mid_index", "]", "\n", "#debug(\"Checkpoint-1: {:.4f} / {:.4f}\".format(cur_val_acc, threshold))", "\n", "if", "cur_val_acc", "<", "threshold", ":", "\n", "            ", "debug", "(", "\"config #{} is early-terminated at epoch {} ({:.4f} > {:.4f} asymptote: {:.4f})\"", ".", "format", "(", "\n", "model_index", ",", "eval_epoch", ",", "threshold", ",", "cur_val_acc", ",", "max", "(", "val_acc_curve", ")", ")", ")", "\n", "val_acc_curve", "=", "p_curve", "\n", "val_loss", "=", "1.0", "-", "cur_val_acc", "\n", "test_loss", "=", "1.0", "-", "cur_test_acc", "\n", "train_time", "=", "train_times", "[", "self", ".", "eval_mid_index", "]", "\n", "train_epoch", "=", "eval_epoch", "\n", "early_terminated", "=", "True", "\n", "", "else", ":", "\n", "            ", "eval_epoch", "=", "self", ".", "epoch_budgets", "[", "self", ".", "eval_end_index", "]", "\n", "p_curve", "=", "val_acc_curve", "[", "self", ".", "eval_mid_index", ":", "self", ".", "eval_end_index", "+", "1", "]", "\n", "threshold", "=", "self", ".", "get_acc_threshold", "(", "p_curve", ",", "'checkpoint1'", ")", "\n", "cur_val_acc", "=", "val_acc_curve", "[", "self", ".", "eval_end_index", "]", "\n", "cur_test_acc", "=", "test_acc_curve", "[", "self", ".", "eval_end_index", "]", "\n", "#debug(\"Checkpoint-2: {:.4f} / {:.4f}\".format(cur_val_acc, threshold))", "\n", "if", "cur_val_acc", "<", "threshold", ":", "\n", "                ", "debug", "(", "\"config #{} is lately-terminated at epoch {} ({:.4f} > {:.4f} asymptote: {:.4f})\"", ".", "format", "(", "\n", "model_index", ",", "eval_epoch", ",", "threshold", ",", "cur_val_acc", ",", "max", "(", "val_acc_curve", ")", ")", ")", "\n", "val_acc_curve", "=", "p_curve", "\n", "val_loss", "=", "1.0", "-", "cur_val_acc", "\n", "test_loss", "=", "1.0", "-", "cur_test_acc", "\n", "train_time", "=", "train_times", "[", "self", ".", "eval_end_index", "]", "\n", "train_epoch", "=", "eval_epoch", "\n", "early_terminated", "=", "True", "\n", "", "else", ":", "\n", "                ", "val_loss", "=", "1.0", "-", "val_acc_curve", "[", "-", "1", "]", "\n", "test_loss", "=", "1.0", "-", "test_acc_curve", "[", "-", "1", "]", "\n", "train_time", "=", "train_times", "[", "-", "1", "]", "\n", "early_terminated", "=", "False", "\n", "\n", "", "", "self", ".", "add_train_history", "(", "val_acc_curve", ",", "train_time", ",", "eval_epoch", ",", "measure", "=", "'valid_accuracy'", ")", "\n", "debug", "(", "\"Training the configuration #{} with {} epochs ({:.0f}s) -> {:.4f}\"", ".", "format", "(", "model_index", ",", "train_epoch", ",", "train_time", ",", "1.0", "-", "test_loss", ")", ")", "\n", "return", "{", "\n", "\"test_error\"", ":", "test_loss", ",", "\n", "\"test_accuracy\"", ":", "1.0", "-", "test_loss", ",", "\n", "\"valid_error\"", ":", "val_loss", ",", "\n", "\"valid_accuracy\"", ":", "1.0", "-", "val_loss", ",", "\n", "\"exec_time\"", ":", "train_time", ",", "\n", "\"train_epoch\"", ":", "train_epoch", ",", "\n", "\"train_failed\"", ":", "False", ",", "\n", "'early_terminated'", ":", "early_terminated", "\n", "}", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.__init__": [[15, 29], ["hpobench.FCNetBenchmark.get_configuration_space", "h5py.File", "numpy.random.RandomState", "os.path.join", "hpobench.FCNetBenchmark.get_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10C.get_configuration_space"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "dataset", "=", "\"./lookup/fcnet_protein_structure_data.hdf5\"", ",", "seed", "=", "None", ")", ":", "\n", "\n", "        ", "cs", "=", "self", ".", "get_configuration_space", "(", ")", "\n", "self", ".", "names", "=", "[", "h", ".", "name", "for", "h", "in", "cs", ".", "get_hyperparameters", "(", ")", "]", "\n", "\n", "self", ".", "data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "path", ",", "dataset", ")", ",", "\"r\"", ")", "\n", "\n", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y", "=", "[", "]", "\n", "self", ".", "c", "=", "[", "]", "\n", "self", ".", "b", "=", "[", "]", "# budget", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.reset_tracker": [[30, 38], ["numpy.random.RandomState"], "methods", ["None"], ["", "def", "reset_tracker", "(", "self", ")", ":", "\n", "# __init__() sans the data loading for multiple runs", "\n", "        ", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y", "=", "[", "]", "\n", "self", ".", "c", "=", "[", "]", "\n", "self", ".", "b", "=", "[", "]", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.get_best_configuration": [[39, 56], ["hpobench.FCNetBenchmark.data.keys", "numpy.argmin", "configs.append", "te.append", "ve.append", "json.loads", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_best_configuration", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Returns the best configuration in the dataset that achieves the lowest test performance.\n\n        :return: Returns tuple with the best configuration, its final validation performance and its test performance\n        \"\"\"", "\n", "\n", "configs", ",", "te", ",", "ve", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "configs", ".", "append", "(", "json", ".", "loads", "(", "k", ")", ")", "\n", "te", ".", "append", "(", "np", ".", "mean", "(", "self", ".", "data", "[", "k", "]", "[", "\"final_test_error\"", "]", ")", ")", "\n", "ve", ".", "append", "(", "np", ".", "mean", "(", "self", ".", "data", "[", "k", "]", "[", "\"valid_mse\"", "]", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "\n", "", "b", "=", "np", ".", "argmin", "(", "te", ")", "\n", "\n", "return", "configs", "[", "b", "]", ",", "ve", "[", "b", "]", ",", "te", "[", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.objective_function": [[57, 85], ["hpobench.FCNetBenchmark.rng.randint", "numpy.mean", "hpobench.FCNetBenchmark.X.append", "hpobench.FCNetBenchmark.y.append", "hpobench.FCNetBenchmark.c.append", "hpobench.FCNetBenchmark.b.append", "type", "json.dumps", "json.dumps", "config.get_dictionary"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "objective_function", "(", "self", ",", "config", ",", "budget", "=", "100", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "0", "<", "budget", "<=", "100", "# check whether budget is in the correct bounds", "\n", "\n", "i", "=", "self", ".", "rng", ".", "randint", "(", "4", ")", "\n", "\n", "if", "type", "(", "config", ")", "==", "ConfigSpace", ".", "Configuration", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ".", "get_dictionary", "(", ")", ",", "sort_keys", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "test", "=", "np", ".", "mean", "(", "self", ".", "data", "[", "k", "]", "[", "\"final_test_error\"", "]", ")", "\n", "valid", "=", "self", ".", "data", "[", "k", "]", "[", "\"valid_mse\"", "]", "[", "i", "]", "\n", "runtime", "=", "self", ".", "data", "[", "k", "]", "[", "\"runtime\"", "]", "[", "i", "]", "\n", "\n", "if", "budget", "!=", "100", ":", "\n", "            ", "test", "=", "valid", "\n", "\n", "", "time_per_epoch", "=", "runtime", "/", "100", "# divide by the maximum number of epochs", "\n", "\n", "rt", "=", "time_per_epoch", "*", "budget", "\n", "\n", "self", ".", "X", ".", "append", "(", "config", ")", "\n", "self", ".", "y", ".", "append", "(", "valid", "[", "budget", "-", "1", "]", ")", "\n", "self", ".", "c", ".", "append", "(", "rt", ")", "\n", "self", ".", "b", ".", "append", "(", "budget", ")", "\n", "\n", "return", "test", ",", "valid", "[", "budget", "-", "1", "]", ",", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.objective_function_learning_curve": [[86, 114], ["hpobench.FCNetBenchmark.rng.randint", "numpy.mean", "hpobench.FCNetBenchmark.X.append", "hpobench.FCNetBenchmark.y.append", "hpobench.FCNetBenchmark.c.append", "hpobench.FCNetBenchmark.b.append", "type", "json.dumps", "json.dumps", "min", "config.get_dictionary", "range", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "objective_function_learning_curve", "(", "self", ",", "config", ",", "budget", "=", "100", ")", ":", "\n", "\n", "        ", "assert", "0", "<", "budget", "<=", "100", "# check whether budget is in the correct bounds", "\n", "\n", "index", "=", "self", ".", "rng", ".", "randint", "(", "4", ")", "\n", "\n", "if", "type", "(", "config", ")", "==", "ConfigSpace", ".", "Configuration", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ".", "get_dictionary", "(", ")", ",", "sort_keys", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "test", "=", "np", ".", "mean", "(", "self", ".", "data", "[", "k", "]", "[", "\"final_test_error\"", "]", ")", "\n", "lc", "=", "[", "self", ".", "data", "[", "k", "]", "[", "\"valid_mse\"", "]", "[", "index", "]", "[", "i", "]", "for", "i", "in", "range", "(", "budget", ")", "]", "\n", "runtime", "=", "self", ".", "data", "[", "k", "]", "[", "\"runtime\"", "]", "[", "index", "]", "\n", "\n", "if", "budget", "!=", "100", ":", "\n", "            ", "test", "=", "min", "(", "lc", ")", "\n", "\n", "", "time_per_epoch", "=", "runtime", "/", "100", "# divide by the maximum number of epochs", "\n", "\n", "rt", "=", "[", "time_per_epoch", "*", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "budget", ")", "]", "\n", "\n", "self", ".", "X", ".", "append", "(", "config", ")", "\n", "self", ".", "y", ".", "append", "(", "lc", "[", "-", "1", "]", ")", "\n", "self", ".", "c", ".", "append", "(", "rt", "[", "-", "1", "]", ")", "\n", "self", ".", "b", ".", "append", "(", "budget", ")", "\n", "\n", "return", "test", ",", "lc", ",", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.objective_function_deterministic": [[115, 137], ["hpobench.FCNetBenchmark.X.append", "hpobench.FCNetBenchmark.y.append", "hpobench.FCNetBenchmark.c.append", "hpobench.FCNetBenchmark.b.append", "type", "json.dumps", "json.dumps", "config.get_dictionary"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "objective_function_deterministic", "(", "self", ",", "config", ",", "budget", "=", "100", ",", "index", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "0", "<", "budget", "<=", "100", "# check whether budget is in the correct bounds", "\n", "\n", "if", "type", "(", "config", ")", "==", "ConfigSpace", ".", "Configuration", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ".", "get_dictionary", "(", ")", ",", "sort_keys", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "valid", "=", "self", ".", "data", "[", "k", "]", "[", "\"valid_mse\"", "]", "[", "index", "]", "\n", "runtime", "=", "self", ".", "data", "[", "k", "]", "[", "\"runtime\"", "]", "[", "index", "]", "\n", "\n", "time_per_epoch", "=", "runtime", "/", "100", "# divide by the maximum number of epochs", "\n", "\n", "rt", "=", "time_per_epoch", "*", "budget", "\n", "\n", "self", ".", "X", ".", "append", "(", "config", ")", "\n", "self", ".", "y", ".", "append", "(", "valid", "[", "budget", "-", "1", "]", ")", "\n", "self", ".", "c", ".", "append", "(", "rt", ")", "\n", "self", ".", "b", ".", "append", "(", "budget", ")", "\n", "\n", "return", "valid", "[", "budget", "-", "1", "]", ",", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.objective_function_test": [[138, 149], ["numpy.mean", "numpy.mean", "type", "json.dumps", "json.dumps", "config.get_dictionary"], "methods", ["None"], ["", "def", "objective_function_test", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "type", "(", "config", ")", "==", "ConfigSpace", ".", "Configuration", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ".", "get_dictionary", "(", ")", ",", "sort_keys", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "k", "=", "json", ".", "dumps", "(", "config", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "test", "=", "np", ".", "mean", "(", "self", ".", "data", "[", "k", "]", "[", "\"final_test_error\"", "]", ")", "\n", "runtime", "=", "np", ".", "mean", "(", "self", ".", "data", "[", "k", "]", "[", "\"runtime\"", "]", ")", "\n", "\n", "return", "test", ",", "runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.get_results": [[150, 206], ["print", "hpobench.FCNetBenchmark.get_best_configuration", "range", "dict", "len", "hpobench.FCNetBenchmark.objective_function_test", "train_epochs.append", "exec_times.append", "opt_times.append", "model_indices.append", "len", "float", "errors.append", "errors.append", "errors.append", "ValueError", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.get_best_configuration", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.objective_function_test", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_results", "(", "self", ",", "result_type", "=", "'test'", ",", "ignore_invalid_configs", "=", "False", ")", ":", "\n", "\n", "        ", "print", "(", "\"{} configurations had been retrieved.\"", ".", "format", "(", "len", "(", "self", ".", "X", ")", ")", ")", "\n", "inc", ",", "y_star_valid", ",", "y_star_test", "=", "self", ".", "get_best_configuration", "(", ")", "\n", "#print(\"Best config: {}, {}, {}\".format(inc, y_star_valid, y_star_test))", "\n", "#regret_validation = []", "\n", "#regret_test = []", "\n", "\n", "errors", "=", "[", "]", "\n", "exec_times", "=", "[", "]", "\n", "opt_times", "=", "[", "]", "\n", "model_indices", "=", "[", "]", "\n", "train_epochs", "=", "[", "]", "\n", "\n", "inc_valid", "=", "np", ".", "inf", "\n", "inc_test", "=", "np", ".", "inf", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "X", ")", ")", ":", "\n", "            ", "val_v", "=", "self", ".", "y", "[", "i", "]", "\n", "\n", "rt", "=", "self", ".", "c", "[", "i", "]", "\n", "test_v", ",", "_", "=", "self", ".", "objective_function_test", "(", "self", ".", "X", "[", "i", "]", ")", "\n", "#print(\"test error: {}, time: {}\".format(test_v, rt))", "\n", "budget", "=", "self", ".", "b", "[", "i", "]", "\n", "train_epochs", ".", "append", "(", "budget", ")", "\n", "\n", "if", "inc_valid", ">", "val_v", ":", "\n", "                ", "inc_valid", "=", "val_v", "\n", "inc_test", "=", "test_v", "\n", "\n", "#regret_validation.append(float(inc_valid - y_star_valid))", "\n", "#regret_test.append(float(inc_test - y_star_test))", "\n", "\n", "", "exec_times", ".", "append", "(", "float", "(", "rt", ")", ")", "\n", "if", "result_type", "==", "'test'", ":", "\n", "                ", "if", "budget", "==", "100", ":", "\n", "                    ", "errors", ".", "append", "(", "float", "(", "test_v", ")", ")", "\n", "", "else", ":", "\n", "                    ", "errors", ".", "append", "(", "float", "(", "val_v", ")", ")", "\n", "", "", "elif", "result_type", "==", "'validation'", ":", "\n", "                ", "errors", ".", "append", "(", "float", "(", "val_v", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid report type: {}\"", ".", "format", "(", "result_type", ")", ")", "\n", "", "opt_times", ".", "append", "(", "0", ")", "# FIXME:ignore surrogate modeling time", "\n", "model_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "res", "=", "dict", "(", ")", "\n", "#res['regret_validation'] = regret_validation", "\n", "#res['regret_test'] = regret_test", "\n", "res", "[", "'opt_time'", "]", "=", "opt_times", "\n", "res", "[", "'exec_time'", "]", "=", "exec_times", "\n", "res", "[", "'error'", "]", "=", "errors", "\n", "res", "[", "'model_idx'", "]", "=", "model_indices", "\n", "res", "[", "'train_epoch'", "]", "=", "train_epochs", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetBenchmark.get_configuration_space": [[207, 222], ["ConfigSpace.ConfigurationSpace", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.OrdinalHyperparameter", "ConfigSpace.OrdinalHyperparameter", "ConfigSpace.OrdinalHyperparameter", "ConfigSpace.OrdinalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.OrdinalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.OrdinalHyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_configuration_space", "(", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "OrdinalHyperparameter", "(", "\"n_units_1\"", ",", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "OrdinalHyperparameter", "(", "\"n_units_2\"", ",", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "OrdinalHyperparameter", "(", "\"dropout_1\"", ",", "[", "0.0", ",", "0.3", ",", "0.6", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "OrdinalHyperparameter", "(", "\"dropout_2\"", ",", "[", "0.0", ",", "0.3", ",", "0.6", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"activation_fn_1\"", ",", "[", "\"tanh\"", ",", "\"relu\"", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"activation_fn_2\"", ",", "[", "\"tanh\"", ",", "\"relu\"", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "\n", "ConfigSpace", ".", "OrdinalHyperparameter", "(", "\"init_lr\"", ",", "[", "5", "*", "1e-4", ",", "1e-3", ",", "5", "*", "1e-3", ",", "1e-2", ",", "5", "*", "1e-2", ",", "1e-1", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"lr_schedule\"", ",", "[", "\"cosine\"", ",", "\"const\"", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "OrdinalHyperparameter", "(", "\"batch_size\"", ",", "[", "8", ",", "16", ",", "32", ",", "64", "]", ")", ")", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetSliceLocalizationBenchmark.__init__": [[226, 230], ["hpobench.FCNetBenchmark.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "'FCNetSliceLocalizationBenchmark'", "\n", "super", "(", "FCNetSliceLocalizationBenchmark", ",", "self", ")", ".", "__init__", "(", "path", "=", "data_dir", ",", "\n", "dataset", "=", "\"fcnet_slice_localization_data.hdf5\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetProteinStructureBenchmark.__init__": [[234, 237], ["hpobench.FCNetBenchmark.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "'FCNetProteinStructureBenchmark'", "\n", "super", "(", "FCNetProteinStructureBenchmark", ",", "self", ")", ".", "__init__", "(", "path", "=", "data_dir", ",", "dataset", "=", "\"fcnet_protein_structure_data.hdf5\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetNavalPropulsionBenchmark.__init__": [[241, 244], ["hpobench.FCNetBenchmark.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "'FCNetNavalPropulsionBenchmark'", "\n", "super", "(", "FCNetNavalPropulsionBenchmark", ",", "self", ")", ".", "__init__", "(", "path", "=", "data_dir", ",", "dataset", "=", "\"fcnet_naval_propulsion_data.hdf5\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.hpobench.FCNetParkinsonsTelemonitoringBenchmark.__init__": [[248, 252], ["hpobench.FCNetBenchmark.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "'FCNetParkinsonsTelemonitoringBenchmark'", "\n", "super", "(", "FCNetParkinsonsTelemonitoringBenchmark", ",", "self", ")", ".", "__init__", "(", "path", "=", "data_dir", ",", "\n", "dataset", "=", "\"fcnet_parkinsons_telemonitoring_data.hdf5\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas201.NAS201Benchmark.__init__": [[13, 24], ["lookup.nas201bench.api.NAS201Bench"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "multi_fidelity", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "multi_fidelity", "=", "multi_fidelity", "\n", "self", ".", "dataset", "=", "NAS201Bench", "(", "name", ")", "\n", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y_valid", "=", "[", "]", "\n", "self", ".", "y_test", "=", "[", "]", "\n", "self", ".", "costs", "=", "[", "]", "\n", "self", ".", "budgets", "=", "[", "]", "\n", "self", ".", "max_epochs", "=", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas201.NAS201Benchmark.reset_tracker": [[25, 32], ["None"], "methods", ["None"], ["", "def", "reset_tracker", "(", "self", ")", ":", "\n", "# __init__() sans the data loading for multiple runs", "\n", "        ", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y_valid", "=", "[", "]", "\n", "self", ".", "y_test", "=", "[", "]", "\n", "self", ".", "costs", "=", "[", "]", "\n", "self", ".", "budgets", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas201.NAS201Benchmark.objective_function": [[33, 52], ["nas201.NAS201Benchmark.X.append", "nas201.NAS201Benchmark.dataset.train", "nas201.NAS201Benchmark.y_test.append", "nas201.NAS201Benchmark.y_valid.append", "nas201.NAS201Benchmark.costs.append", "nas201.NAS201Benchmark.budgets.append", "type", "nas201.NAS201Benchmark.dataset.get_arch_index"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.get_arch_index"], ["", "def", "objective_function", "(", "self", ",", "config", ",", "budget", "=", "200", ")", ":", "\n", "\n", "        ", "if", "self", ".", "multi_fidelity", "is", "False", ":", "\n", "            ", "assert", "budget", "==", "200", "\n", "\n", "", "if", "type", "(", "config", ")", "!=", "int", ":", "\n", "            ", "m_i", "=", "self", ".", "dataset", ".", "get_arch_index", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "m_i", "=", "config", "\n", "\n", "", "self", ".", "X", ".", "append", "(", "m_i", ")", "\n", "test_loss", ",", "val_loss", ",", "train_time", ",", "info", "=", "self", ".", "dataset", ".", "train", "(", "m_i", ",", "n_epochs", "=", "budget", ")", "\n", "\n", "self", ".", "y_test", ".", "append", "(", "test_loss", ")", "\n", "self", ".", "y_valid", ".", "append", "(", "val_loss", ")", "\n", "self", ".", "costs", ".", "append", "(", "train_time", ")", "\n", "self", ".", "budgets", ".", "append", "(", "budget", ")", "\n", "\n", "return", "test_loss", ",", "val_loss", ",", "train_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas201.NAS201Benchmark.get_results": [[54, 99], ["print", "range", "dict", "len", "exec_times.append", "opt_times.append", "len", "float", "errors.append", "type", "model_indices.append", "model_indices.append", "float", "errors.append", "ValueError", "float"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_results", "(", "self", ",", "result_type", "=", "'test'", ",", "ignore_invalid_configs", "=", "True", ")", ":", "\n", "        ", "errors", "=", "[", "]", "\n", "exec_times", "=", "[", "]", "\n", "opt_times", "=", "[", "]", "\n", "model_indices", "=", "[", "]", "\n", "\n", "inc_valid", "=", "np", ".", "inf", "\n", "inc_test", "=", "np", ".", "inf", "\n", "print", "(", "\"{} configurations had been retrieved.\"", ".", "format", "(", "len", "(", "self", ".", "X", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "X", ")", ")", ":", "\n", "\n", "            ", "if", "ignore_invalid_configs", "and", "self", ".", "costs", "[", "i", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "val_v", "=", "self", ".", "y_valid", "[", "i", "]", "\n", "test_v", "=", "self", ".", "y_test", "[", "i", "]", "\n", "if", "inc_valid", ">", "val_v", ":", "\n", "                ", "inc_valid", "=", "val_v", "\n", "inc_test", "=", "test_v", "\n", "\n", "", "if", "i", "in", "self", ".", "budgets", "and", "self", ".", "budgets", "[", "i", "]", "!=", "self", ".", "max_epochs", ":", "\n", "                ", "test_v", "=", "val_v", "# if a configuration terminated early, no way to know final test performance", "\n", "\n", "", "rt", "=", "self", ".", "costs", "[", "i", "]", "\n", "exec_times", ".", "append", "(", "float", "(", "rt", ")", ")", "\n", "if", "result_type", "==", "'test'", ":", "\n", "                ", "errors", ".", "append", "(", "float", "(", "test_v", ")", ")", "\n", "", "elif", "result_type", "==", "'validation'", ":", "\n", "                ", "errors", ".", "append", "(", "float", "(", "val_v", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid report type: {}\"", ".", "format", "(", "result_type", ")", ")", "\n", "", "opt_times", ".", "append", "(", "0", ")", "# FIXME:ignore surrogate modeling time", "\n", "if", "type", "(", "self", ".", "X", "[", "i", "]", ")", "==", "int", ":", "\n", "                ", "model_indices", ".", "append", "(", "self", ".", "X", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "model_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "", "res", "=", "dict", "(", ")", "\n", "res", "[", "'opt_time'", "]", "=", "opt_times", "\n", "res", "[", "'exec_time'", "]", "=", "exec_times", "\n", "res", "[", "'error'", "]", "=", "errors", "\n", "res", "[", "'model_idx'", "]", "=", "model_indices", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas201.NAS201Benchmark.get_configuration_space": [[100, 110], ["ConfigSpace.ConfigurationSpace", "range", "range", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.CategoricalHyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_configuration_space", "(", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "search_range", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "node_str", ",", "search_range", ")", ")", "\n", "#print(\"Config space: {}\".format(cs))", "\n", "", "", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.__init__": [[31, 47], ["lookup.nas101bench.api.NASBench", "lookup.nas101bench.api.NASBench", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "data_dir", ",", "multi_fidelity", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "multi_fidelity", "=", "multi_fidelity", "\n", "if", "self", ".", "multi_fidelity", ":", "\n", "            ", "self", ".", "dataset", "=", "api", ".", "NASBench", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'nasbench_full.tfrecord'", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset", "=", "api", ".", "NASBench", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'nasbench_only108.tfrecord'", ")", ")", "\n", "", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y_valid", "=", "[", "]", "\n", "self", ".", "y_test", "=", "[", "]", "\n", "self", ".", "costs", "=", "[", "]", "\n", "self", ".", "budgets", "=", "[", "]", "\n", "\n", "self", ".", "y_star_valid", "=", "0.04944576819737756", "# lowest mean validation error", "\n", "self", ".", "y_star_test", "=", "0.056824247042338016", "# lowest mean test error", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.reset_tracker": [[48, 55], ["None"], "methods", ["None"], ["", "def", "reset_tracker", "(", "self", ")", ":", "\n", "# __init__() sans the data loading for multiple runs", "\n", "        ", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y_valid", "=", "[", "]", "\n", "self", ".", "y_test", "=", "[", "]", "\n", "self", ".", "costs", "=", "[", "]", "\n", "self", ".", "budgets", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.objective_function": [[56, 59], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "objective_function", "(", "self", ",", "config", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid": [[60, 65], ["nas101.NASCifar10.X.append", "nas101.NASCifar10.y_valid.append", "nas101.NASCifar10.y_test.append", "nas101.NASCifar10.costs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "record_invalid", "(", "self", ",", "config", ",", "valid", ",", "test", ",", "costs", ")", ":", "\n", "        ", "self", ".", "X", ".", "append", "(", "config", ")", "\n", "self", ".", "y_valid", ".", "append", "(", "valid", ")", "\n", "self", ".", "y_test", ".", "append", "(", "test", ")", "\n", "self", ".", "costs", ".", "append", "(", "costs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_valid": [[66, 83], ["nas101.NASCifar10.X.append", "nas101.NASCifar10.y_test.append", "nas101.NASCifar10.y_valid.append", "nas101.NASCifar10.costs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "record_valid", "(", "self", ",", "config", ",", "data", ",", "model_spec", ")", ":", "\n", "\n", "        ", "self", ".", "X", ".", "append", "(", "config", ")", "\n", "\n", "# compute mean test error for the final budget", "\n", "#_, metrics = self.dataset.get_metrics_from_spec(model_spec)", "\n", "#mean_test_error = 1 - np.mean([metrics[108][i][\"final_test_accuracy\"] for i in range(3)])", "\n", "#self.y_test.append(mean_test_error)", "\n", "test_error", "=", "1", "-", "data", "[", "\"test_accuracy\"", "]", "\n", "self", ".", "y_test", ".", "append", "(", "test_error", ")", "\n", "\n", "# compute validation error for the chosen budget", "\n", "valid_error", "=", "1", "-", "data", "[", "\"validation_accuracy\"", "]", "\n", "self", ".", "y_valid", ".", "append", "(", "valid_error", ")", "\n", "\n", "runtime", "=", "data", "[", "\"training_time\"", "]", "\n", "self", ".", "costs", ".", "append", "(", "runtime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.get_configuration_space": [[84, 87], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_configuration_space", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.get_results": [[88, 142], ["print", "range", "dict", "len", "exec_times.append", "opt_times.append", "model_indices.append", "len", "float", "errors.append", "float", "errors.append", "ValueError", "float"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_results", "(", "self", ",", "result_type", "=", "'test'", ",", "ignore_invalid_configs", "=", "True", ")", ":", "\n", "\n", "#regret_validation = []", "\n", "#regret_test = []", "\n", "\n", "#rt = 0", "\n", "        ", "errors", "=", "[", "]", "\n", "exec_times", "=", "[", "]", "\n", "opt_times", "=", "[", "]", "\n", "model_indices", "=", "[", "]", "\n", "\n", "inc_valid", "=", "np", ".", "inf", "\n", "inc_test", "=", "np", ".", "inf", "\n", "print", "(", "\"{} configurations had been retrieved.\"", ".", "format", "(", "len", "(", "self", ".", "X", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "X", ")", ")", ":", "\n", "\n", "            ", "if", "ignore_invalid_configs", "and", "self", ".", "costs", "[", "i", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "val_v", "=", "self", ".", "y_valid", "[", "i", "]", "\n", "test_v", "=", "self", ".", "y_test", "[", "i", "]", "\n", "if", "inc_valid", ">", "val_v", ":", "\n", "                ", "inc_valid", "=", "val_v", "\n", "inc_test", "=", "test_v", "\n", "\n", "", "if", "i", "in", "self", ".", "budgets", "and", "self", ".", "budgets", "[", "i", "]", "!=", "108", ":", "\n", "                ", "test_v", "=", "val_v", "# if a configuration terminated early, no way to know final test performance", "\n", "\n", "#regret_validation.append(float(inc_valid - self.y_star_valid))", "\n", "#regret_test.append(float(inc_test - self.y_star_test))", "\n", "#rt += self.costs[i]", "\n", "#runtime.append(float(rt))", "\n", "", "rt", "=", "self", ".", "costs", "[", "i", "]", "\n", "exec_times", ".", "append", "(", "float", "(", "rt", ")", ")", "\n", "if", "result_type", "==", "'test'", ":", "\n", "                ", "errors", ".", "append", "(", "float", "(", "test_v", ")", ")", "\n", "", "elif", "result_type", "==", "'validation'", ":", "\n", "                ", "errors", ".", "append", "(", "float", "(", "val_v", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid report type: {}\"", ".", "format", "(", "result_type", ")", ")", "\n", "", "opt_times", ".", "append", "(", "0", ")", "# FIXME:ignore surrogate modeling time", "\n", "model_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "res", "=", "dict", "(", ")", "\n", "#res['regret_validation'] = regret_validation", "\n", "#res['regret_test'] = regret_test", "\n", "#res['runtime'] = runtime", "\n", "res", "[", "'opt_time'", "]", "=", "opt_times", "\n", "res", "[", "'exec_time'", "]", "=", "exec_times", "\n", "res", "[", "'error'", "]", "=", "errors", "\n", "res", "[", "'model_idx'", "]", "=", "model_indices", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.__init__": [[146, 148], ["nas101.NASCifar10.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "multi_fidelity", "=", "True", ")", ":", "\n", "        ", "super", "(", "NASCifar10A", ",", "self", ")", ".", "__init__", "(", "'NASCifar10A'", ",", "data_dir", ",", "multi_fidelity", "=", "multi_fidelity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.bin_array": [[149, 152], ["numpy.array().astype().tolist", "numpy.array().astype", "numpy.array", "list", "numpy.binary_repr().zfill", "numpy.binary_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "bin_array", "(", "self", ",", "num", ",", "m", ")", ":", "\n", "        ", "\"\"\"Convert a positive integer num into an m-bit bit vector\"\"\"", "\n", "return", "np", ".", "array", "(", "list", "(", "np", ".", "binary_repr", "(", "num", ")", ".", "zfill", "(", "m", ")", ")", ")", ".", "astype", "(", "np", ".", "int8", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.build": [[153, 179], ["len", "ops.insert", "ops.append", "int", "range", "range", "numpy.array", "len", "nas101.NASCifar10A.bin_array", "matrix.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.bin_array", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "build", "(", "self", ",", "h", ")", ":", "\n", "\n", "        ", "ops", "=", "[", "h", "[", "'ops1'", "]", ",", "h", "[", "'ops2'", "]", ",", "h", "[", "'ops3'", "]", ",", "h", "[", "'ops4'", "]", ",", "h", "[", "'ops5'", "]", "]", "\n", "links", "=", "[", "h", "[", "'link0'", "]", ",", "h", "[", "'link1'", "]", ",", "h", "[", "'link2'", "]", ",", "h", "[", "'link3'", "]", ",", "h", "[", "'link4'", "]", ",", "h", "[", "'link5'", "]", ",", "0", "]", "\n", "\n", "MAX_LINKS", "=", "[", "63", ",", "31", ",", "15", ",", "7", ",", "3", ",", "1", ",", "0", "]", "\n", "\n", "n_iv", "=", "len", "(", "ops", ")", "# number of inner vertices (input, output excluded)", "\n", "ops", ".", "insert", "(", "0", ",", "INPUT", ")", "\n", "ops", ".", "append", "(", "OUTPUT", ")", "\n", "n_v", "=", "n_iv", "+", "2", "\n", "edge_spots", "=", "int", "(", "n_v", "*", "(", "n_v", "-", "1", ")", "/", "2", ")", "\n", "#debug(\"node operation list: \")", "\n", "#debug(\"{}\".format(ops))", "\n", "\n", "# validate links value", "\n", "for", "i", "in", "range", "(", "len", "(", "links", ")", ")", ":", "\n", "            ", "if", "links", "[", "i", "]", ">", "MAX_LINKS", "[", "i", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid link value at {}: {} > {}\"", ".", "format", "(", "i", ",", "links", "[", "i", "]", ",", "MAX_LINKS", "[", "i", "]", ")", ")", "\n", "\n", "", "", "matrix", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_v", ")", ":", "\n", "            ", "vec", "=", "self", ".", "bin_array", "(", "links", "[", "i", "]", ",", "n_v", ")", "\n", "matrix", ".", "append", "(", "vec", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.objective_function": [[180, 205], ["nas101.NASCifar10A.build", "lookup.nas101bench.api.ModelSpec", "nas101.NASCifar10A.record_valid", "nas101.NASCifar10A.budgets.append", "lookup.nas101bench.lib.graph_util.num_edges", "nas101.NASCifar10A.record_invalid", "nas101.NASCifar10A.dataset.query", "range", "list", "nas101.NASCifar10A.record_invalid"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.MaxPool3x3Conv1x1.build", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_valid", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.num_edges", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid"], ["", "def", "objective_function", "(", "self", ",", "config", ",", "budget", "=", "108", ")", ":", "\n", "\n", "        ", "if", "self", ".", "multi_fidelity", "is", "False", ":", "\n", "            ", "assert", "budget", "==", "108", "\n", "\n", "", "matrix", "=", "self", ".", "build", "(", "config", ")", "\n", "\n", "# if not graph_util.is_full_dag(matrix) or graph_util.num_edges(matrix) > MAX_EDGES:", "\n", "if", "graph_util", ".", "num_edges", "(", "matrix", ")", ">", "MAX_EDGES", ":", "\n", "            ", "self", ".", "record_invalid", "(", "config", ",", "1", ",", "1", ",", "0", ")", "\n", "return", "1", ",", "1", ",", "0", "\n", "\n", "", "labeling", "=", "[", "config", "[", "\"ops%d\"", "%", "i", "]", "for", "i", "in", "range", "(", "1", ",", "6", ")", "]", "\n", "labeling", "=", "[", "'input'", "]", "+", "list", "(", "labeling", ")", "+", "[", "'output'", "]", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", ",", "labeling", ")", "\n", "try", ":", "\n", "           ", "data", "=", "self", ".", "dataset", ".", "query", "(", "model_spec", ",", "epochs", "=", "budget", ")", "\n", "", "except", "api", ".", "OutOfDomainError", ":", "\n", "            ", "self", ".", "record_invalid", "(", "config", ",", "1", ",", "1", ",", "0", ")", "\n", "return", "1", ",", "1", ",", "0", "\n", "\n", "", "self", ".", "record_valid", "(", "config", ",", "data", ",", "model_spec", ")", "\n", "self", ".", "budgets", ".", "append", "(", "budget", ")", "\n", "\n", "return", "1", "-", "data", "[", "\"test_accuracy\"", "]", ",", "1", "-", "data", "[", "\"validation_accuracy\"", "]", ",", "data", "[", "\"training_time\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10A.get_configuration_space": [[206, 225], ["ConfigSpace.ConfigurationSpace", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_configuration_space", "(", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "\n", "ops_choices", "=", "[", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", "]", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"ops1\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"ops2\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"ops3\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"ops4\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"ops5\"", ",", "ops_choices", ")", ")", "\n", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"link0\"", ",", "[", "i", "for", "i", "in", "range", "(", "64", ")", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"link1\"", ",", "[", "i", "for", "i", "in", "range", "(", "32", ")", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"link2\"", ",", "[", "i", "for", "i", "in", "range", "(", "16", ")", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"link3\"", ",", "[", "i", "for", "i", "in", "range", "(", "8", ")", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"link4\"", ",", "[", "i", "for", "i", "in", "range", "(", "4", ")", "]", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"link5\"", ",", "[", "i", "for", "i", "in", "range", "(", "2", ")", "]", ")", ")", "\n", "\n", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10B.__init__": [[229, 231], ["nas101.NASCifar10.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "multi_fidelity", "=", "True", ")", ":", "\n", "        ", "super", "(", "NASCifar10B", ",", "self", ")", ".", "__init__", "(", "'NASCifar10B'", ",", "data_dir", ",", "multi_fidelity", "=", "multi_fidelity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10B.objective_function": [[233, 265], ["range", "numpy.fromfunction", "lookup.nas101bench.api.ModelSpec", "nas101.NASCifar10B.record_valid", "nas101.NASCifar10B.budgets.append", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "lookup.nas101bench.lib.graph_util.num_edges", "nas101.NASCifar10B.record_invalid", "nas101.NASCifar10B.dataset.query", "range", "list", "nas101.NASCifar10B.record_invalid"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_valid", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.num_edges", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid"], ["", "def", "objective_function", "(", "self", ",", "config", ",", "budget", "=", "108", ")", ":", "\n", "        ", "if", "self", ".", "multi_fidelity", "is", "False", ":", "\n", "            ", "assert", "budget", "==", "108", "\n", "\n", "", "bitlist", "=", "[", "0", "]", "*", "(", "VERTICES", "*", "(", "VERTICES", "-", "1", ")", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "MAX_EDGES", ")", ":", "\n", "            ", "bitlist", "[", "config", "[", "\"edge_%d\"", "%", "i", "]", "]", "=", "1", "\n", "", "out", "=", "0", "\n", "for", "bit", "in", "bitlist", ":", "\n", "            ", "out", "=", "(", "out", "<<", "1", ")", "|", "bit", "\n", "\n", "", "matrix", "=", "np", ".", "fromfunction", "(", "graph_util", ".", "gen_is_edge_fn", "(", "out", ")", ",", "\n", "(", "VERTICES", ",", "VERTICES", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "# if not graph_util.is_full_dag(matrix) or graph_util.num_edges(matrix) > MAX_EDGES:", "\n", "if", "graph_util", ".", "num_edges", "(", "matrix", ")", ">", "MAX_EDGES", ":", "\n", "            ", "self", ".", "record_invalid", "(", "config", ",", "1", ",", "1", ",", "0", ")", "\n", "return", "1", ",", "1", ",", "0", "\n", "\n", "", "labeling", "=", "[", "config", "[", "\"op_node_%d\"", "%", "i", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "labeling", "=", "[", "'input'", "]", "+", "list", "(", "labeling", ")", "+", "[", "'output'", "]", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", ",", "labeling", ")", "\n", "try", ":", "\n", "            ", "data", "=", "self", ".", "dataset", ".", "query", "(", "model_spec", ",", "epochs", "=", "budget", ")", "\n", "", "except", "api", ".", "OutOfDomainError", ":", "\n", "            ", "self", ".", "record_invalid", "(", "config", ",", "1", ",", "1", ",", "0", ")", "\n", "return", "1", ",", "1", ",", "0", "\n", "\n", "", "self", ".", "record_valid", "(", "config", ",", "data", ",", "model_spec", ")", "\n", "self", ".", "budgets", ".", "append", "(", "budget", ")", "\n", "\n", "return", "1", "-", "data", "[", "\"test_accuracy\"", "]", ",", "1", "-", "data", "[", "\"validation_accuracy\"", "]", ",", "data", "[", "\"training_time\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10B.get_configuration_space": [[266, 280], ["ConfigSpace.ConfigurationSpace", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "range", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "range", "ConfigSpace.CategoricalHyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_configuration_space", "(", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "\n", "ops_choices", "=", "[", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", "]", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_0\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_1\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_2\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_3\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_4\"", ",", "ops_choices", ")", ")", "\n", "cat", "=", "[", "i", "for", "i", "in", "range", "(", "(", "VERTICES", "*", "(", "VERTICES", "-", "1", ")", ")", "//", "2", ")", "]", "\n", "for", "i", "in", "range", "(", "MAX_EDGES", ")", ":", "\n", "            ", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"edge_%d\"", "%", "i", ",", "cat", ")", ")", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10C.__init__": [[284, 286], ["nas101.NASCifar10.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "multi_fidelity", "=", "True", ")", ":", "\n", "        ", "super", "(", "NASCifar10C", ",", "self", ")", ".", "__init__", "(", "'NASCifar10C'", ",", "data_dir", ",", "multi_fidelity", "=", "multi_fidelity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10C.objective_function": [[288, 323], ["range", "numpy.zeros", "numpy.zeros", "numpy.triu_indices", "range", "lookup.nas101bench.api.ModelSpec", "nas101.NASCifar10C.record_valid", "nas101.NASCifar10C.budgets.append", "edge_prob.append", "len", "lookup.nas101bench.lib.graph_util.num_edges", "nas101.NASCifar10C.record_invalid", "nas101.NASCifar10C.dataset.query", "numpy.argsort", "range", "list", "nas101.NASCifar10C.record_invalid"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_valid", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.num_edges", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10.record_invalid"], ["", "def", "objective_function", "(", "self", ",", "config", ",", "budget", "=", "108", ")", ":", "\n", "        ", "if", "self", ".", "multi_fidelity", "is", "False", ":", "\n", "            ", "assert", "budget", "==", "108", "\n", "\n", "", "edge_prob", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "VERTICES", "*", "(", "VERTICES", "-", "1", ")", "//", "2", ")", ":", "\n", "            ", "edge_prob", ".", "append", "(", "config", "[", "\"edge_%d\"", "%", "i", "]", ")", "\n", "\n", "", "idx", "=", "np", ".", "argsort", "(", "edge_prob", ")", "[", ":", ":", "-", "1", "]", "[", ":", "config", "[", "\"num_edges\"", "]", "]", "\n", "binay_encoding", "=", "np", ".", "zeros", "(", "len", "(", "edge_prob", ")", ")", "\n", "binay_encoding", "[", "idx", "]", "=", "1", "\n", "matrix", "=", "np", ".", "zeros", "(", "[", "VERTICES", ",", "VERTICES", "]", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "idx", "=", "np", ".", "triu_indices", "(", "matrix", ".", "shape", "[", "0", "]", ",", "k", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "VERTICES", "*", "(", "VERTICES", "-", "1", ")", "//", "2", ")", ":", "\n", "            ", "row", "=", "idx", "[", "0", "]", "[", "i", "]", "\n", "col", "=", "idx", "[", "1", "]", "[", "i", "]", "\n", "matrix", "[", "row", ",", "col", "]", "=", "binay_encoding", "[", "i", "]", "\n", "\n", "", "if", "graph_util", ".", "num_edges", "(", "matrix", ")", ">", "MAX_EDGES", ":", "\n", "            ", "self", ".", "record_invalid", "(", "config", ",", "1", ",", "1", ",", "0", ")", "\n", "return", "1", ",", "1", ",", "0", "\n", "\n", "", "labeling", "=", "[", "config", "[", "\"op_node_%d\"", "%", "i", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "labeling", "=", "[", "'input'", "]", "+", "list", "(", "labeling", ")", "+", "[", "'output'", "]", "\n", "model_spec", "=", "api", ".", "ModelSpec", "(", "matrix", ",", "labeling", ")", "\n", "try", ":", "\n", "            ", "data", "=", "self", ".", "dataset", ".", "query", "(", "model_spec", ",", "epochs", "=", "budget", ")", "\n", "", "except", "api", ".", "OutOfDomainError", ":", "\n", "            ", "self", ".", "record_invalid", "(", "config", ",", "1", ",", "1", ",", "0", ")", "\n", "return", "1", ",", "1", ",", "0", "\n", "\n", "", "self", ".", "record_valid", "(", "config", ",", "data", ",", "model_spec", ")", "\n", "self", ".", "budgets", ".", "append", "(", "budget", ")", "\n", "\n", "return", "1", "-", "data", "[", "\"test_accuracy\"", "]", ",", "1", "-", "data", "[", "\"validation_accuracy\"", "]", ",", "data", "[", "\"training_time\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.nas101.NASCifar10C.get_configuration_space": [[324, 340], ["ConfigSpace.ConfigurationSpace", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "range", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.CategoricalHyperparameter", "ConfigSpace.UniformIntegerHyperparameter", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.UniformFloatHyperparameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_configuration_space", "(", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "\n", "ops_choices", "=", "[", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", "]", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_0\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_1\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_2\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_3\"", ",", "ops_choices", ")", ")", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"op_node_4\"", ",", "ops_choices", ")", ")", "\n", "\n", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "UniformIntegerHyperparameter", "(", "\"num_edges\"", ",", "0", ",", "MAX_EDGES", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "VERTICES", "*", "(", "VERTICES", "-", "1", ")", "//", "2", ")", ":", "\n", "            ", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "UniformFloatHyperparameter", "(", "\"edge_%d\"", "%", "i", ",", "0", ",", "1", ")", ")", "\n", "", "return", "cs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.__init__": [[53, 64], ["len", "dnnbench.LookupDataLoader.data.sample().reset_index", "hp_cfg.get_param_names", "dnnbench.LookupDataLoader.data.sample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.HyperparameterConfiguration.get_param_names"], ["def", "__init__", "(", "self", ",", "dataset_type", ",", "surrogate", ",", "hp_cfg", ",", "num_epochs", ",", "grid_shuffle", ")", ":", "\n", "        ", "self", ".", "data", "=", "surrogate", "\n", "if", "grid_shuffle", "is", "True", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", ".", "sample", "(", "frac", "=", "1", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "", "self", ".", "hp_config", "=", "hp_cfg", "\n", "self", ".", "data_type", "=", "dataset_type", "\n", "\n", "self", ".", "begin_index", "=", "1", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "num_hyperparams", "=", "len", "(", "hp_cfg", ".", "get_param_names", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_hyperparam_vectors": [[65, 71], ["None"], "methods", ["None"], ["", "def", "get_all_hyperparam_vectors", "(", "self", ")", ":", "\n", "        ", "start_index", "=", "self", ".", "begin_index", "\n", "end_index", "=", "start_index", "+", "self", ".", "num_hyperparams", "\n", "hp_grid", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "start_index", ":", "end_index", "]", ".", "values", "# hyperparameter vectors", "\n", "\n", "return", "hp_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_test_acc_per_epoch": [[72, 87], ["hasattr"], "methods", ["None"], ["", "def", "get_all_test_acc_per_epoch", "(", "self", ",", "end_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "start_index", "=", "self", ".", "begin_index", "+", "self", ".", "num_hyperparams", "\n", "if", "end_epoch", "is", "None", "or", "end_epoch", ">", "self", ".", "num_epochs", ":", "\n", "            ", "end_epoch", "=", "self", ".", "num_epochs", "\n", "", "end_index", "=", "start_index", "+", "end_epoch", "\n", "accs", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "start_index", ":", "end_index", "]", "# accuracy at each epoch", "\n", "\n", "if", "hasattr", "(", "self", ".", "hp_config", ",", "'metric'", ")", ":", "\n", "            ", "if", "self", ".", "hp_config", ".", "metric", "==", "'perplexity'", ":", "\n", "# XXX:handle perplexity metric", "\n", "                ", "max_perplexity", "=", "1000.0", "\n", "perplexities", "=", "accs", "\n", "accs", "=", "(", "max_perplexity", "-", "perplexities", ")", "/", "max_perplexity", "\n", "", "", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_test_errors": [[88, 99], ["dnnbench.LookupDataLoader.get_all_test_acc_per_epoch", "numpy.sort"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_test_acc_per_epoch"], ["", "def", "get_all_test_errors", "(", "self", ",", "end_epoch", "=", "None", ")", ":", "\n", "        ", "vals", "=", "self", ".", "get_all_test_acc_per_epoch", "(", "end_epoch", ")", "\n", "sorted_vals", "=", "np", ".", "sort", "(", "vals", ")", "# sorted accuracies", "\n", "test_error_index", "=", "self", ".", "num_epochs", "-", "1", "\n", "if", "end_epoch", "is", "not", "None", ":", "\n", "            ", "if", "end_epoch", ">", "0", "and", "end_epoch", "<=", "self", ".", "num_epochs", ":", "\n", "                ", "test_error_index", "=", "end_epoch", "-", "1", "\n", "\n", "", "", "fin_vals", "=", "sorted_vals", "[", ":", ",", "test_error_index", "]", "# accuracy when training finished", "\n", "fin_loss", "=", "1", "-", "fin_vals", "# final error", "\n", "return", "fin_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_exec_times": [[100, 108], ["None"], "methods", ["None"], ["", "def", "get_all_exec_times", "(", "self", ",", "end_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "if", "end_epoch", "is", "None", "or", "end_epoch", ">", "self", ".", "num_epochs", ":", "\n", "            ", "end_epoch", "=", "self", ".", "num_epochs", "\n", "", "time_col_index", "=", "self", ".", "begin_index", "+", "self", ".", "num_hyperparams", "+", "end_epoch", "#25", "\n", "dur", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "time_col_index", "]", ".", "values", "# elapsed time", "\n", "dur", "=", "dur", "/", "self", ".", "num_epochs", "*", "end_epoch", "\n", "return", "dur", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_all_sobol_vectors": [[109, 114], ["None"], "methods", ["None"], ["", "def", "get_all_sobol_vectors", "(", "self", ")", ":", "\n", "        ", "start_index", "=", "self", ".", "begin_index", "+", "self", ".", "num_hyperparams", "+", "self", ".", "num_epochs", "+", "1", "\n", "end_index", "=", "start_index", "+", "self", ".", "num_hyperparams", "\n", "sobol_grid", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "start_index", ":", "end_index", "]", ".", "values", "\n", "return", "sobol_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.LookupDataLoader.get_best_acc_of_trial": [[115, 117], ["numpy.max", "dnnbench.LookupDataLoader.get_all_test_acc_per_epoch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_test_acc_per_epoch"], ["", "def", "get_best_acc_of_trial", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "get_all_test_acc_per_epoch", "(", ")", ".", "values", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.__init__": [[121, 123], ["dnnbench.LookupDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset_type", ",", "surrogate", ",", "hp_cfg", ")", ":", "\n", "        ", "super", "(", "CifarResnetSurrogateLoader", ",", "self", ")", ".", "__init__", "(", "dataset_type", ",", "surrogate", ",", "hp_cfg", ",", "100", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_test_acc_per_epoch": [[124, 132], ["None"], "methods", ["None"], ["", "def", "get_all_test_acc_per_epoch", "(", "self", ",", "end_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "start_index", "=", "self", ".", "begin_index", "+", "self", ".", "num_hyperparams", "+", "1", "# skip durations + 0 epoch", "\n", "if", "end_epoch", "is", "None", "or", "end_epoch", ">", "self", ".", "num_epochs", ":", "\n", "            ", "end_epoch", "=", "self", ".", "num_epochs", "\n", "", "end_index", "=", "start_index", "+", "end_epoch", "\n", "accs", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "start_index", ":", "end_index", "]", "# accuracy at each epoch", "\n", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_sobol_vectors": [[133, 138], ["None"], "methods", ["None"], ["", "def", "get_all_sobol_vectors", "(", "self", ")", ":", "\n", "        ", "start_index", "=", "self", ".", "begin_index", "+", "self", ".", "num_hyperparams", "+", "202", "\n", "end_index", "=", "start_index", "+", "self", ".", "num_hyperparams", "\n", "sobol_grid", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "start_index", ":", "end_index", "]", ".", "values", "\n", "return", "sobol_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.CifarResnetSurrogateLoader.get_all_exec_times": [[139, 147], ["None"], "methods", ["None"], ["", "def", "get_all_exec_times", "(", "self", ",", "end_epoch", "=", "None", ")", ":", "\n", "\n", "        ", "if", "end_epoch", "is", "None", "or", "end_epoch", ">", "self", ".", "num_epochs", ":", "\n", "            ", "end_epoch", "=", "self", ".", "num_epochs", "\n", "", "time_col_index", "=", "self", ".", "begin_index", "+", "self", ".", "num_hyperparams", "+", "101", "\n", "dur", "=", "self", ".", "data", ".", "iloc", "[", ":", ",", "time_col_index", "]", ".", "values", "# elapsed time", "\n", "dur", "=", "dur", "/", "self", ".", "num_epochs", "*", "end_epoch", "\n", "return", "dur", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.check_lookup_existed": [[11, 18], ["name.endswith", "os.listdir", "str"], "function", ["None"], ["def", "check_lookup_existed", "(", "name", ",", "lookup_dir", ")", ":", "\n", "    ", "if", "name", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "name", "=", "name", "[", ":", "-", "4", "]", "\n", "", "for", "csv", "in", "os", ".", "listdir", "(", "lookup_dir", ")", ":", "\n", "        ", "if", "str", "(", "csv", ")", "==", "'{}.csv'", ".", "format", "(", "name", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.get_lookup_loader": [[20, 49], ["pandas.read_csv", "debug", "xoa.commons.read_hyperparam_config", "hasattr", "dnnbench.check_lookup_existed", "error", "dnnbench.CifarResnetSurrogateLoader", "dnnbench.LookupDataLoader", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.debug", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.hp_cfg.read_hyperparam_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.lookup.dnnbench.check_lookup_existed", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.error"], ["", "def", "get_lookup_loader", "(", "name", ",", "lookup_dir", "=", "LOOKUP_DIR", ",", "config_folder", "=", "'hp_conf/'", ",", "grid_order", "=", "None", ")", ":", "\n", "\n", "    ", "if", "not", "check_lookup_existed", "(", "name", ",", "lookup_dir", ")", ":", "\n", "        ", "error", "(", "\"lookup file not found!\"", ")", "\n", "return", "None", "\n", "\n", "", "grid_shuffle", "=", "False", "\n", "if", "grid_order", "==", "'shuffle'", ":", "\n", "        ", "grid_shuffle", "=", "True", "\n", "\n", "", "csv_path", "=", "lookup_dir", "+", "str", "(", "name", ")", "+", "'.csv'", "\n", "csv_data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "\n", "cfg_path", "=", "config_folder", "+", "str", "(", "name", ")", "+", "'.json'", "\n", "debug", "(", "\"lookup load: {} config path: {}\"", ".", "format", "(", "name", ",", "cfg_path", ")", ")", "\n", "cfg", "=", "read_hyperparam_config", "(", "cfg_path", ")", "\n", "\n", "num_epochs", "=", "15", "\n", "if", "name", "==", "'CIFAR10-VGG'", "or", "name", "==", "'CIFAR100-VGG'", ":", "\n", "        ", "num_epochs", "=", "50", "\n", "\n", "", "if", "hasattr", "(", "cfg", ",", "'num_epoch'", ")", ":", "\n", "        ", "num_epochs", "=", "cfg", ".", "num_epoch", "\n", "\n", "", "if", "name", "==", "'CIFAR10-ResNet'", ":", "\n", "        ", "loader", "=", "CifarResnetSurrogateLoader", "(", "name", ",", "csv_data", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "loader", "=", "LookupDataLoader", "(", "name", ",", "csv_data", ",", "cfg", ",", "num_epochs", ",", "grid_shuffle", ")", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.__init__": [[23, 38], ["nas_201_api.NASBench201API", "models.get_search_spaces", "api.config2structure_func", "os.path.isfile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_search_spaces", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.config2structure_func"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "\n", "arch_nas_dataset", "=", "'./lookup/NAS-Bench-201-v1_1-096897.pth'", ")", ":", "\n", "        ", "self", ".", "max_nodes", "=", "4", "\n", "self", ".", "max_epoches", "=", "200", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "dataset", "=", "'cifar10-valid'", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "name", "=", "\"nas-bench-201\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "arch_nas_dataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"No lookup data available\"", ")", "\n", "\n", "", "self", ".", "api", "=", "API", "(", "arch_nas_dataset", ")", "\n", "self", ".", "search_space", "=", "get_search_spaces", "(", "'cell'", ",", "\"nas-bench-201\"", ")", "\n", "self", ".", "convert_func", "=", "config2structure_func", "(", "self", ".", "max_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.verify": [[39, 41], ["None"], "methods", ["None"], ["", "def", "verify", "(", "self", ",", "cand", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.get_search_space": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_search_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.convert_structure": [[45, 47], ["api.NAS201Bench.convert_func"], "methods", ["None"], ["", "def", "convert_structure", "(", "self", ",", "config", ")", ":", "\n", "        ", "return", "self", ".", "convert_func", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.get_arch_index": [[48, 51], ["api.NAS201Bench.convert_structure", "api.NAS201Bench.api.query_index_by_arch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.Controller.convert_structure", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_index_by_arch"], ["", "def", "get_arch_index", "(", "self", ",", "config", ")", ":", "\n", "        ", "structure", "=", "self", ".", "convert_structure", "(", "config", ")", "\n", "return", "self", ".", "api", ".", "query_index_by_arch", "(", "structure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.get_eval_info": [[52, 61], ["api.NAS201Bench.api.get_more_info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.get_more_info"], ["", "def", "get_eval_info", "(", "self", ",", "arch_index", ",", "n_epochs", "=", "None", ")", ":", "\n", "        ", "if", "n_epochs", "!=", "None", "and", "n_epochs", ">", "0", ":", "\n", "            ", "i_epochs", "=", "n_epochs", "-", "1", "\n", "", "else", ":", "\n", "            ", "i_epochs", "=", "n_epochs", "\n", "\n", "", "info", "=", "self", ".", "api", ".", "get_more_info", "(", "arch_index", ",", "self", ".", "dataset", ",", "i_epochs", ",", "\n", "hp", "=", "'200'", ",", "is_random", "=", "True", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train": [[62, 90], ["api.NAS201Bench.get_eval_info", "ValueError", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.get_eval_info"], ["", "def", "train", "(", "self", ",", "arch_index", ",", "n_epochs", "=", "None", ")", ":", "\n", "        ", "info", "=", "self", ".", "get_eval_info", "(", "arch_index", ",", "n_epochs", ")", "\n", "cur_time", "=", "info", "[", "'train-all-time'", "]", "\n", "val_loss", "=", "1.0", "\n", "test_loss", "=", "1.0", "\n", "#print(\"#{} ({} epochs): {}\".format(arch_index, n_epochs, info))", "\n", "\n", "if", "not", "'train-accuracy'", "in", "info", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid eval info #{}: {}\"", ".", "format", "(", "arch_index", ",", "info", ")", ")", "\n", "\n", "", "if", "n_epochs", "==", "None", "or", "n_epochs", "==", "self", ".", "max_epoches", ":", "\n", "            ", "if", "'valid-accuracy'", "in", "info", ":", "\n", "                ", "cur_acc", "=", "info", "[", "'valid-accuracy'", "]", "# Note: 0 ~ 100", "\n", "val_loss", "=", "1.0", "-", "float", "(", "cur_acc", "/", "100", ")", "\n", "cur_time", "+=", "info", "[", "'valid-per-time'", "]", "\n", "\n", "", "if", "'test-accuracy'", "in", "info", ":", "\n", "                ", "cur_acc", "=", "info", "[", "'test-accuracy'", "]", "# Note: 0 ~ 100", "\n", "test_loss", "=", "1.0", "-", "float", "(", "cur_acc", "/", "100", ")", "\n", "cur_time", "+=", "info", "[", "'test-per-time'", "]", "\n", "\n", "", "", "elif", "'valtest-accuracy'", "in", "info", ":", "\n", "            ", "cur_acc", "=", "info", "[", "'valtest-accuracy'", "]", "# Note: 0 ~ 100", "\n", "test_loss", "=", "1.0", "-", "float", "(", "cur_acc", "/", "100", ")", "\n", "val_loss", "=", "1.0", "-", "float", "(", "cur_acc", "/", "100", ")", "\n", "cur_time", "+=", "info", "[", "'valtest-per-time'", "]", "\n", "\n", "", "return", "test_loss", ",", "val_loss", ",", "cur_time", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.query_by_arch": [[91, 93], ["api.NAS201Bench.api.query_by_arch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_by_arch"], ["", "def", "query_by_arch", "(", "self", ",", "arch", ")", ":", "\n", "        ", "return", "self", ".", "api", ".", "query_by_arch", "(", "arch", ",", "'200'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.config2structure_func": [[7, 19], ["range", "models.CellStructure", "range", "genotypes.append", "xlist.append", "tuple"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "config2structure_func", "(", "max_nodes", ")", ":", "\n", "    ", "def", "config2structure", "(", "config", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_name", "=", "config", "[", "node_str", "]", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "CellStructure", "(", "genotypes", ")", "\n", "", "return", "config2structure", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.ImageNet16.__init__": [[53, 86], ["enumerate", "numpy.vstack().reshape", "DownsampledImageNet.ImageNet16.data.transpose", "DownsampledImageNet.ImageNet16._check_integrity", "RuntimeError", "os.path.join", "zip", "open", "DownsampledImageNet.ImageNet16.data.append", "DownsampledImageNet.ImageNet16.targets.extend", "numpy.vstack", "isinstance", "pickle.load", "pickle.load", "new_data.append", "new_targets.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.ImageNet16._check_integrity", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "root", ",", "train", ",", "transform", ",", "use_num_of_class_only", "=", "None", ")", ":", "\n", "    ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "# training set or valid set", "\n", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", ")", "\n", "\n", "if", "self", ".", "train", ":", "downloaded_list", "=", "self", ".", "train_list", "\n", "else", ":", "downloaded_list", "=", "self", ".", "valid_list", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "i", ",", "(", "file_name", ",", "checksum", ")", "in", "enumerate", "(", "downloaded_list", ")", ":", "\n", "      ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "file_name", ")", "\n", "#print ('Load {:}/{:02d}-th : {:}'.format(i, len(downloaded_list), file_path))", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "          ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "          ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "if", "use_num_of_class_only", "is", "not", "None", ":", "\n", "      ", "assert", "isinstance", "(", "use_num_of_class_only", ",", "int", ")", "and", "use_num_of_class_only", ">", "0", "and", "use_num_of_class_only", "<", "1000", ",", "'invalid use_num_of_class_only : {:}'", ".", "format", "(", "use_num_of_class_only", ")", "\n", "new_data", ",", "new_targets", "=", "[", "]", ",", "[", "]", "\n", "for", "I", ",", "L", "in", "zip", "(", "self", ".", "data", ",", "self", ".", "targets", ")", ":", "\n", "        ", "if", "1", "<=", "L", "<=", "use_num_of_class_only", ":", "\n", "          ", "new_data", ".", "append", "(", "I", ")", "\n", "new_targets", ".", "append", "(", "L", ")", "\n", "", "", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "#    self.mean.append(entry['mean'])", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.ImageNet16.__getitem__": [[95, 104], ["PIL.Image.fromarray", "DownsampledImageNet.ImageNet16.transform"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.transform"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "-", "1", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "      ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.ImageNet16.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.ImageNet16._check_integrity": [[108, 116], ["os.path.join", "DownsampledImageNet.check_integrity"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "    ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "valid_list", ")", ":", "\n", "      ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.calculate_md5": [[14, 20], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update"], ["", "def", "calculate_md5", "(", "fpath", ",", "chunk_size", "=", "1024", "*", "1024", ")", ":", "\n", "  ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "chunk_size", ")", ",", "b''", ")", ":", "\n", "      ", "md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.check_md5": [[22, 24], ["DownsampledImageNet.calculate_md5"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.calculate_md5"], ["", "def", "check_md5", "(", "fpath", ",", "md5", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "md5", "==", "calculate_md5", "(", "fpath", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.check_integrity": [[26, 30], ["os.path.isfile", "DownsampledImageNet.check_md5"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.DownsampledImageNet.check_md5"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "return", "False", "\n", "if", "md5", "is", "None", ":", "return", "True", "\n", "else", ":", "return", "check_md5", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.SearchDatasetWrap.SearchDataset.__init__": [[10, 28], ["isinstance", "len", "train_split.copy", "valid_split.copy", "train_split.copy", "valid_split.copy", "len", "len", "set().intersection", "set", "len", "set"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.RankIntersectionMeasure.intersection"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "data", ",", "train_split", ",", "valid_split", ",", "check", "=", "True", ")", ":", "\n", "    ", "self", ".", "datasetname", "=", "name", "\n", "if", "isinstance", "(", "data", ",", "(", "list", ",", "tuple", ")", ")", ":", "# new type of SearchDataset", "\n", "      ", "assert", "len", "(", "data", ")", "==", "2", ",", "'invalid length: {:}'", ".", "format", "(", "len", "(", "data", ")", ")", "\n", "self", ".", "train_data", "=", "data", "[", "0", "]", "\n", "self", ".", "valid_data", "=", "data", "[", "1", "]", "\n", "self", ".", "train_split", "=", "train_split", ".", "copy", "(", ")", "\n", "self", ".", "valid_split", "=", "valid_split", ".", "copy", "(", ")", "\n", "self", ".", "mode_str", "=", "'V2'", "# new mode ", "\n", "", "else", ":", "\n", "      ", "self", ".", "mode_str", "=", "'V1'", "# old mode ", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "train_split", "=", "train_split", ".", "copy", "(", ")", "\n", "self", ".", "valid_split", "=", "valid_split", ".", "copy", "(", ")", "\n", "if", "check", ":", "\n", "        ", "intersection", "=", "set", "(", "train_split", ")", ".", "intersection", "(", "set", "(", "valid_split", ")", ")", "\n", "assert", "len", "(", "intersection", ")", "==", "0", ",", "'the splitted train and validation sets should have no intersection'", "\n", "", "", "self", ".", "length", "=", "len", "(", "self", ".", "train_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.SearchDatasetWrap.SearchDataset.__repr__": [[29, 31], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(name={datasetname}, train={tr_L}, valid={val_L}, version={ver})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "datasetname", "=", "self", ".", "datasetname", ",", "tr_L", "=", "len", "(", "self", ".", "train_split", ")", ",", "val_L", "=", "len", "(", "self", ".", "valid_split", ")", ",", "ver", "=", "self", ".", "mode_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.SearchDatasetWrap.SearchDataset.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.SearchDatasetWrap.SearchDataset.__getitem__": [[35, 47], ["random.choice", "ValueError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">=", "0", "and", "index", "<", "self", ".", "length", ",", "'invalid index = {:}'", ".", "format", "(", "index", ")", "\n", "train_index", "=", "self", ".", "train_split", "[", "index", "]", "\n", "valid_index", "=", "random", ".", "choice", "(", "self", ".", "valid_split", ")", "\n", "if", "self", ".", "mode_str", "==", "'V1'", ":", "\n", "      ", "train_image", ",", "train_label", "=", "self", ".", "data", "[", "train_index", "]", "\n", "valid_image", ",", "valid_label", "=", "self", ".", "data", "[", "valid_index", "]", "\n", "", "elif", "self", ".", "mode_str", "==", "'V2'", ":", "\n", "      ", "train_image", ",", "train_label", "=", "self", ".", "train_data", "[", "train_index", "]", "\n", "valid_image", ",", "valid_label", "=", "self", ".", "valid_data", "[", "valid_index", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "self", ".", "mode_str", ")", ")", "\n", "return", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.CUTOUT.__init__": [[29, 31], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "    ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.CUTOUT.__repr__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(length={length})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.CUTOUT.__call__": [[35, 51], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.Lighting.__init__": [[64, 72], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "alphastd", ",", "\n", "eigval", "=", "imagenet_pca", "[", "'eigval'", "]", ",", "\n", "eigvec", "=", "imagenet_pca", "[", "'eigvec'", "]", ")", ":", "\n", "    ", "self", ".", "alphastd", "=", "alphastd", "\n", "assert", "eigval", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "eigvec", ".", "shape", "==", "(", "3", ",", "3", ")", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.Lighting.__call__": [[73, 88], ["rnd.astype.astype.astype", "v.reshape.reshape.reshape", "numpy.dot().reshape", "numpy.add", "PIL.Image.fromarray", "numpy.random.randn", "numpy.asarray", "numpy.clip", "numpy.clip.astype", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "if", "self", ".", "alphastd", "==", "0.", ":", "\n", "      ", "return", "img", "\n", "", "rnd", "=", "np", ".", "random", ".", "randn", "(", "3", ")", "*", "self", ".", "alphastd", "\n", "rnd", "=", "rnd", ".", "astype", "(", "'float32'", ")", "\n", "v", "=", "rnd", "\n", "old_dtype", "=", "np", ".", "asarray", "(", "img", ")", ".", "dtype", "\n", "v", "=", "v", "*", "self", ".", "eigval", "\n", "v", "=", "v", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inc", "=", "np", ".", "dot", "(", "self", ".", "eigvec", ",", "v", ")", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "img", "=", "np", ".", "add", "(", "img", ",", "inc", ")", "\n", "if", "old_dtype", "==", "np", ".", "uint8", ":", "\n", "      ", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "old_dtype", ")", ",", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.Lighting.__repr__": [[89, 91], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.get_datasets": [[93, 183], ["torchvision.Compose", "torchvision.Compose", "name.startswith", "torchvision.CIFAR10", "torchvision.CIFAR10", "name.startswith", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.CIFAR100", "torchvision.CIFAR100", "name.startswith", "name.startswith", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "name.startswith", "len", "len", "torchvision.ImageFolder", "torchvision.ImageFolder", "TypeError", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "xlists.append", "xlists.append", "xlists.append", "torchvision.Compose", "torchvision.Compose", "TypeError", "len", "len", "os.join", "os.join", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "get_dataset_with_transform.CUTOUT", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "xlists.append", "xlists.append", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "get_dataset_with_transform.Lighting", "ValueError", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "torchvision.RandomResizedCrop", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "TypeError", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_datasets", "(", "name", ",", "root", ",", "cutout", ")", ":", "\n", "\n", "  ", "if", "name", "==", "'cifar10'", ":", "\n", "    ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "    ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "    ", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "    ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "122.68", ",", "116.66", ",", "104.01", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.22", ",", "61.26", ",", "65.09", "]", "]", "\n", "", "else", ":", "\n", "    ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# Data Argumentation", "\n", "", "if", "name", "==", "'cifar10'", "or", "name", "==", "'cifar100'", ":", "\n", "    ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "    ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "16", ",", "padding", "=", "2", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "", "elif", "name", "==", "'tiered'", ":", "\n", "    ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "80", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "CenterCrop", "(", "80", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "name", "==", "'imagenet-1k'", ":", "\n", "      ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ")", "]", "\n", "xlists", ".", "append", "(", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0.2", ")", ")", "\n", "xlists", ".", "append", "(", "Lighting", "(", "0.1", ")", ")", "\n", "", "elif", "name", "==", "'imagenet-1k-s'", ":", "\n", "      ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid name : {:}'", ".", "format", "(", "name", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "xlists", ".", "append", "(", "normalize", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "xlists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "", "else", ":", "\n", "    ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "if", "name", "==", "'cifar10'", ":", "\n", "    ", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "    ", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "    ", "train_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'train'", ")", ",", "train_transform", ")", "\n", "test_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'val'", ")", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", ",", "'invalid number of images : {:} & {:} vs {:} & {:}'", ".", "format", "(", "len", "(", "train_data", ")", ",", "len", "(", "test_data", ")", ",", "1281167", ",", "50000", ")", "\n", "", "elif", "name", "==", "'ImageNet16'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", "\n", "", "elif", "name", "==", "'ImageNet16-120'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "120", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "120", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "151700", "and", "len", "(", "test_data", ")", "==", "6000", "\n", "", "elif", "name", "==", "'ImageNet16-150'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "150", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "150", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "190272", "and", "len", "(", "test_data", ")", "==", "7500", "\n", "", "elif", "name", "==", "'ImageNet16-200'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "200", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "200", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "254775", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "else", ":", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "class_num", "=", "Dataset2Class", "[", "name", "]", "\n", "return", "train_data", ",", "test_data", ",", "xshape", ",", "class_num", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.get_nas_search_loaders": [[185, 224], ["isinstance", "config_utils.load_config", "copy.deepcopy", "hasattr", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "list", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "range", "torch.utils.data.sampler.SubsetRandomSampler", "list", "len", "range", "torch.utils.data.sampler.SubsetRandomSampler", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config"], ["", "def", "get_nas_search_loaders", "(", "train_data", ",", "valid_data", ",", "dataset", ",", "config_root", ",", "batch_size", ",", "workers", ")", ":", "\n", "  ", "if", "isinstance", "(", "batch_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "    ", "batch", ",", "test_batch", "=", "batch_size", "\n", "", "else", ":", "\n", "    ", "batch", ",", "test_batch", "=", "batch_size", ",", "batch_size", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "#split_Fpath = 'configs/nas-benchmark/cifar-split.txt'", "\n", "    ", "cifar_split", "=", "load_config", "(", "'{:}/cifar-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "train_split", ",", "valid_split", "=", "cifar_split", ".", "train", ",", "cifar_split", ".", "valid", "# search over the proposed training and validation set", "\n", "#logger.log('Load split file from {:}'.format(split_Fpath))      # they are two disjoint groups in the original CIFAR-10 training set", "\n", "# To split data", "\n", "xvalid_data", "=", "deepcopy", "(", "train_data", ")", "\n", "if", "hasattr", "(", "xvalid_data", ",", "'transforms'", ")", ":", "# to avoid a print issue", "\n", "      ", "xvalid_data", ".", "transforms", "=", "valid_data", ".", "transform", "\n", "", "xvalid_data", ".", "transform", "=", "deepcopy", "(", "valid_data", ".", "transform", ")", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "train_data", ",", "train_split", ",", "valid_split", ")", "\n", "# data loader", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_split", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "xvalid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "valid_split", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "    ", "cifar100_test_split", "=", "load_config", "(", "'{:}/cifar100-test-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", ";", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "[", "search_train_data", ",", "search_valid_data", "]", ",", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "cifar100_test_split", ".", "xvalid", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_test_split", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'ImageNet16-120'", ":", "\n", "    ", "imagenet_test_split", "=", "load_config", "(", "'{:}/imagenet-16-120-test-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", ";", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "[", "search_train_data", ",", "search_valid_data", "]", ",", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "imagenet_test_split", ".", "xvalid", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_test_split", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid dataset : {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "return", "search_loader", ",", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.test_utils.test_imagenet_data": [[7, 21], ["len", "range", "print", "os.path.split", "os.path.split", "image_name.find"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.find"], ["def", "test_imagenet_data", "(", "imagenet", ")", ":", "\n", "  ", "total_length", "=", "len", "(", "imagenet", ")", "\n", "assert", "total_length", "==", "1281166", "or", "total_length", "==", "50000", ",", "'The length of ImageNet is wrong : {}'", ".", "format", "(", "total_length", ")", "\n", "map_id", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "total_length", ")", ":", "\n", "    ", "path", ",", "target", "=", "imagenet", ".", "imgs", "[", "index", "]", "\n", "folder", ",", "image_name", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "_", ",", "folder", "=", "os", ".", "path", ".", "split", "(", "folder", ")", "\n", "if", "folder", "not", "in", "map_id", ":", "\n", "      ", "map_id", "[", "folder", "]", "=", "target", "\n", "", "else", ":", "\n", "      ", "assert", "map_id", "[", "folder", "]", "==", "target", ",", "'Class : {} is not {}'", ".", "format", "(", "folder", ",", "target", ")", "\n", "", "assert", "image_name", ".", "find", "(", "folder", ")", "==", "0", ",", "'{} is wrong.'", ".", "format", "(", "path", ")", "\n", "", "print", "(", "'Check ImageNet Dataset OK'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__init__": [[24, 46], ["LandmarkDataset.LandmarkDataset.reset", "print", "warnings.simplefilter", "warnings.warn", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["  ", "def", "__init__", "(", "self", ",", "transform", ",", "sigma", ",", "downsample", ",", "heatmap_type", ",", "shape", ",", "use_gray", ",", "mean_file", ",", "data_indicator", ",", "cache_images", "=", "None", ")", ":", "\n", "\n", "    ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "heatmap_type", "=", "heatmap_type", "\n", "self", ".", "dataset_name", "=", "data_indicator", "\n", "self", ".", "shape", "=", "shape", "# [H,W]", "\n", "self", ".", "use_gray", "=", "use_gray", "\n", "assert", "transform", "is", "not", "None", ",", "'transform : {:}'", ".", "format", "(", "transform", ")", "\n", "self", ".", "mean_file", "=", "mean_file", "\n", "if", "mean_file", "is", "None", ":", "\n", "      ", "self", ".", "mean_data", "=", "None", "\n", "warnings", ".", "warn", "(", "'LandmarkDataset initialized with mean_data = None'", ")", "\n", "", "else", ":", "\n", "      ", "assert", "osp", ".", "isfile", "(", "mean_file", ")", ",", "'{:} is not a file.'", ".", "format", "(", "mean_file", ")", "\n", "self", ".", "mean_data", "=", "torch", ".", "load", "(", "mean_file", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "self", ".", "cutout", "=", "None", "\n", "self", ".", "cache_images", "=", "cache_images", "\n", "print", "(", "'The general dataset initialization done : {:}'", ".", "format", "(", "self", ")", ")", "\n", "warnings", ".", "simplefilter", "(", "'once'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__repr__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(point-num={NUM_PTS}, shape={shape}, sigma={sigma}, heatmap_type={heatmap_type}, length={length}, cutout={cutout}, dataset={dataset_name}, mean={mean_file})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.set_cutout": [[52, 56], ["augmentation_utils.CutOut", "int"], "methods", ["None"], ["", "def", "set_cutout", "(", "self", ",", "length", ")", ":", "\n", "    ", "if", "length", "is", "not", "None", "and", "length", ">=", "1", ":", "\n", "      ", "self", ".", "cutout", "=", "CutOut", "(", "int", "(", "length", ")", ")", "\n", "", "else", ":", "self", ".", "cutout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.reset": [[58, 71], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "LandmarkDataset.LandmarkDataset.mean_data[].copy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy"], ["", "def", "reset", "(", "self", ",", "num_pts", "=", "-", "1", ",", "boxid", "=", "'default'", ",", "only_pts", "=", "False", ")", ":", "\n", "    ", "self", ".", "NUM_PTS", "=", "num_pts", "\n", "if", "only_pts", ":", "return", "\n", "self", ".", "length", "=", "0", "\n", "self", ".", "datas", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "NormDistances", "=", "[", "]", "\n", "self", ".", "BOXID", "=", "boxid", "\n", "if", "self", ".", "mean_data", "is", "None", ":", "\n", "      ", "self", ".", "mean_face", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "mean_face", "=", "torch", ".", "Tensor", "(", "self", ".", "mean_data", "[", "boxid", "]", ".", "copy", "(", ")", ".", "T", ")", "\n", "assert", "(", "self", ".", "mean_face", ">=", "-", "1", ")", ".", "all", "(", ")", "and", "(", "self", ".", "mean_face", "<=", "1", ")", ".", "all", "(", ")", ",", "'mean-{:}-face : {:}'", ".", "format", "(", "boxid", ",", "self", ".", "mean_face", ")", "\n", "#assert self.dataset_name is not None, 'The dataset name is None'", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__len__": [[74, 77], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "assert", "len", "(", "self", ".", "datas", ")", "==", "self", ".", "length", ",", "'The length is not correct : {}'", ".", "format", "(", "self", ".", "length", ")", "\n", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append": [[79, 84], ["os.path.isfile", "LandmarkDataset.LandmarkDataset.datas.append", "LandmarkDataset.LandmarkDataset.labels.append", "LandmarkDataset.LandmarkDataset.NormDistances.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "append", "(", "self", ",", "data", ",", "label", ",", "distance", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "data", ")", ",", "'The image path is not a file : {:}'", ".", "format", "(", "data", ")", "\n", "self", ".", "datas", ".", "append", "(", "data", ")", ";", "self", ".", "labels", ".", "append", "(", "label", ")", "\n", "self", ".", "NormDistances", ".", "append", "(", "distance", ")", "\n", "self", ".", "length", "=", "self", ".", "length", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.load_list": [[86, 116], ["isinstance", "enumerate", "print", "tqdm.tqdm.tqdm", "print", "LandmarkDataset.LandmarkDataset.reset", "print", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "range", "landmark_utils.PointMeta2V", "LandmarkDataset.LandmarkDataset.append", "len", "len", "len", "len", "len", "len", "isinstance", "len", "len", "len", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "load_list", "(", "self", ",", "file_lists", ",", "num_pts", ",", "boxindicator", ",", "normalizeL", ",", "reset", ")", ":", "\n", "    ", "if", "reset", ":", "self", ".", "reset", "(", "num_pts", ",", "boxindicator", ")", "\n", "else", ":", "assert", "self", ".", "NUM_PTS", "==", "num_pts", "and", "self", ".", "BOXID", "==", "boxindicator", ",", "'The number of point is inconsistance : {:} vs {:}'", ".", "format", "(", "self", ".", "NUM_PTS", ",", "num_pts", ")", "\n", "if", "isinstance", "(", "file_lists", ",", "str", ")", ":", "file_lists", "=", "[", "file_lists", "]", "\n", "samples", "=", "[", "]", "\n", "for", "idx", ",", "file_path", "in", "enumerate", "(", "file_lists", ")", ":", "\n", "      ", "print", "(", "':::: load list {:}/{:} : {:}'", ".", "format", "(", "idx", ",", "len", "(", "file_lists", ")", ",", "file_path", ")", ")", "\n", "xdata", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "if", "isinstance", "(", "xdata", ",", "list", ")", ":", "data", "=", "xdata", "# image or video dataset list", "\n", "elif", "isinstance", "(", "xdata", ",", "dict", ")", ":", "data", "=", "xdata", "[", "'datas'", "]", "# multi-view dataset list", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid Type Error : {:}'", ".", "format", "(", "type", "(", "xdata", ")", ")", ")", "\n", "samples", "=", "samples", "+", "data", "\n", "# samples is a dict, where the key is the image-path and the value is the annotation", "\n", "# each annotation is a dict, contains 'points' (3,num_pts), and various box", "\n", "", "print", "(", "'GeneralDataset-V2 : {:} samples'", ".", "format", "(", "len", "(", "samples", ")", ")", ")", "\n", "\n", "#for index, annotation in enumerate(samples):", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "samples", ")", ")", ")", ":", "\n", "      ", "annotation", "=", "samples", "[", "index", "]", "\n", "image_path", "=", "annotation", "[", "'current_frame'", "]", "\n", "points", ",", "box", "=", "annotation", "[", "'points'", "]", ",", "annotation", "[", "'box-{:}'", ".", "format", "(", "boxindicator", ")", "]", "\n", "label", "=", "PointMeta2V", "(", "self", ".", "NUM_PTS", ",", "points", ",", "box", ",", "image_path", ",", "self", ".", "dataset_name", ")", "\n", "if", "normalizeL", "is", "None", ":", "normDistance", "=", "None", "\n", "else", ":", "normDistance", "=", "annotation", "[", "'normalizeL-{:}'", ".", "format", "(", "normalizeL", ")", "]", "\n", "self", ".", "append", "(", "image_path", ",", "label", ",", "normDistance", ")", "\n", "\n", "", "assert", "len", "(", "self", ".", "datas", ")", "==", "self", ".", "length", ",", "'The length and the data is not right {} vs {}'", ".", "format", "(", "self", ".", "length", ",", "len", "(", "self", ".", "datas", ")", ")", "\n", "assert", "len", "(", "self", ".", "labels", ")", "==", "self", ".", "length", ",", "'The length and the labels is not right {} vs {}'", ".", "format", "(", "self", ".", "length", ",", "len", "(", "self", ".", "labels", ")", ")", "\n", "assert", "len", "(", "self", ".", "NormDistances", ")", "==", "self", ".", "length", ",", "'The length and the NormDistances is not right {} vs {}'", ".", "format", "(", "self", ".", "length", ",", "len", "(", "self", ".", "NormDistance", ")", ")", "\n", "print", "(", "'Load data done for LandmarkDataset, which has {:} images.'", ".", "format", "(", "self", ".", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__getitem__": [[118, 126], ["LandmarkDataset.LandmarkDataset.labels[].copy", "LandmarkDataset.LandmarkDataset._process_", "LandmarkDataset.LandmarkDataset.cache_images[].clone", "dataset_utils.pil_loader"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset._process_"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">=", "0", "and", "index", "<", "self", ".", "length", ",", "'Invalid index : {:}'", ".", "format", "(", "index", ")", "\n", "if", "self", ".", "cache_images", "is", "not", "None", "and", "self", ".", "datas", "[", "index", "]", "in", "self", ".", "cache_images", ":", "\n", "      ", "image", "=", "self", ".", "cache_images", "[", "self", ".", "datas", "[", "index", "]", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "pil_loader", "(", "self", ".", "datas", "[", "index", "]", ",", "self", ".", "use_gray", ")", "\n", "", "target", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", "\n", "return", "self", ".", "_process_", "(", "image", ",", "target", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset._process_": [[128, 160], ["LandmarkDataset.LandmarkDataset.transform", "target.is_none", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "image.size", "isinstance", "isinstance", "LandmarkDataset.LandmarkDataset.__process_affine", "LandmarkDataset.LandmarkDataset.__process_affine", "affineImage.append", "heatmaps.append", "mask.append", "norm_trans_points.append", "THETA.append", "transpose_theta.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.transform", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.is_none", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__process_affine", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__process_affine", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_process_", "(", "self", ",", "image", ",", "target", ",", "index", ")", ":", "\n", "\n", "# transform the image and points", "\n", "    ", "image", ",", "target", ",", "theta", "=", "self", ".", "transform", "(", "image", ",", "target", ")", "\n", "(", "C", ",", "H", ",", "W", ")", ",", "(", "height", ",", "width", ")", "=", "image", ".", "size", "(", ")", ",", "self", ".", "shape", "\n", "\n", "# obtain the visiable indicator vector", "\n", "if", "target", ".", "is_none", "(", ")", ":", "nopoints", "=", "True", "\n", "else", ":", "nopoints", "=", "False", "\n", "if", "index", "==", "-", "1", ":", "__path", "=", "None", "\n", "else", ":", "__path", "=", "self", ".", "datas", "[", "index", "]", "\n", "if", "isinstance", "(", "theta", ",", "list", ")", "or", "isinstance", "(", "theta", ",", "tuple", ")", ":", "\n", "      ", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "_theta", "in", "theta", ":", "\n", "        ", "_affineImage", ",", "_heatmaps", ",", "_mask", ",", "_norm_trans_points", ",", "_theta", ",", "_transpose_theta", "=", "self", ".", "__process_affine", "(", "image", ",", "target", ",", "_theta", ",", "nopoints", ",", "'P[{:}]@{:}'", ".", "format", "(", "index", ",", "__path", ")", ")", "\n", "affineImage", ".", "append", "(", "_affineImage", ")", "\n", "heatmaps", ".", "append", "(", "_heatmaps", ")", "\n", "mask", ".", "append", "(", "_mask", ")", "\n", "norm_trans_points", ".", "append", "(", "_norm_trans_points", ")", "\n", "THETA", ".", "append", "(", "_theta", ")", "\n", "transpose_theta", ".", "append", "(", "_transpose_theta", ")", "\n", "", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", "=", "torch", ".", "stack", "(", "affineImage", ")", ",", "torch", ".", "stack", "(", "heatmaps", ")", ",", "torch", ".", "stack", "(", "mask", ")", ",", "torch", ".", "stack", "(", "norm_trans_points", ")", ",", "torch", ".", "stack", "(", "THETA", ")", ",", "torch", ".", "stack", "(", "transpose_theta", ")", "\n", "", "else", ":", "\n", "      ", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", "=", "self", ".", "__process_affine", "(", "image", ",", "target", ",", "theta", ",", "nopoints", ",", "'S[{:}]@{:}'", ".", "format", "(", "index", ",", "__path", ")", ")", "\n", "\n", "", "torch_index", "=", "torch", ".", "IntTensor", "(", "[", "index", "]", ")", "\n", "torch_nopoints", "=", "torch", ".", "ByteTensor", "(", "[", "nopoints", "]", ")", "\n", "torch_shape", "=", "torch", ".", "IntTensor", "(", "[", "H", ",", "W", "]", ")", "\n", "\n", "return", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", ",", "torch_index", ",", "torch_nopoints", ",", "torch_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.__process_affine": [[162, 192], ["xvision.affine2image", "image.clone", "target.copy", "theta.clone", "image.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "xvision.identity2affine", "apply_affine2point", "apply_boundary", "apply_boundary.clone", "xvision.denormalize_points", "pts_utils.generate_label_map", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "LandmarkDataset.LandmarkDataset.cutout", "target.get_points", "apply_boundary.clone.numpy", "xvision.identity2affine", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "warnings.warn", "xvision.identity2affine", "xvision.solve2theta", "torch.from_numpy().type.transpose", "torch.from_numpy().type.transpose", "torch.from_numpy().type.transpose", "torch.from_numpy().type.transpose", "LandmarkDataset.LandmarkDataset.mean_face.clone"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.affine2image", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.identity2affine", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.apply_affine2point", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.apply_boundary", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.denormalize_points", "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.get_points", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.identity2affine", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.identity2affine", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.solve2theta"], ["", "def", "__process_affine", "(", "self", ",", "image", ",", "target", ",", "theta", ",", "nopoints", ",", "aux_info", "=", "None", ")", ":", "\n", "    ", "image", ",", "target", ",", "theta", "=", "image", ".", "clone", "(", ")", ",", "target", ".", "copy", "(", ")", ",", "theta", ".", "clone", "(", ")", "\n", "(", "C", ",", "H", ",", "W", ")", ",", "(", "height", ",", "width", ")", "=", "image", ".", "size", "(", ")", ",", "self", ".", "shape", "\n", "if", "nopoints", ":", "# do not have label", "\n", "      ", "norm_trans_points", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "NUM_PTS", ")", ")", "\n", "heatmaps", "=", "torch", ".", "zeros", "(", "(", "self", ".", "NUM_PTS", "+", "1", ",", "height", "//", "self", ".", "downsample", ",", "width", "//", "self", ".", "downsample", ")", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "self", ".", "NUM_PTS", "+", "1", ",", "1", ",", "1", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "transpose_theta", "=", "identity2affine", "(", "False", ")", "\n", "", "else", ":", "\n", "      ", "norm_trans_points", "=", "apply_affine2point", "(", "target", ".", "get_points", "(", ")", ",", "theta", ",", "(", "H", ",", "W", ")", ")", "\n", "norm_trans_points", "=", "apply_boundary", "(", "norm_trans_points", ")", "\n", "real_trans_points", "=", "norm_trans_points", ".", "clone", "(", ")", "\n", "real_trans_points", "[", ":", "2", ",", ":", "]", "=", "denormalize_points", "(", "self", ".", "shape", ",", "real_trans_points", "[", ":", "2", ",", ":", "]", ")", "\n", "heatmaps", ",", "mask", "=", "generate_label_map", "(", "real_trans_points", ".", "numpy", "(", ")", ",", "height", "//", "self", ".", "downsample", ",", "width", "//", "self", ".", "downsample", ",", "self", ".", "sigma", ",", "self", ".", "downsample", ",", "nopoints", ",", "self", ".", "heatmap_type", ")", "# H*W*C", "\n", "heatmaps", "=", "torch", ".", "from_numpy", "(", "heatmaps", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "ByteTensor", ")", "\n", "if", "self", ".", "mean_face", "is", "None", ":", "\n", "#warnings.warn('In LandmarkDataset use identity2affine for transpose_theta because self.mean_face is None.')", "\n", "        ", "transpose_theta", "=", "identity2affine", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "if", "torch", ".", "sum", "(", "norm_trans_points", "[", "2", ",", ":", "]", "==", "1", ")", "<", "3", ":", "\n", "          ", "warnings", ".", "warn", "(", "'In LandmarkDataset after transformation, no visiable point, using identity instead. Aux: {:}'", ".", "format", "(", "aux_info", ")", ")", "\n", "transpose_theta", "=", "identity2affine", "(", "False", ")", "\n", "", "else", ":", "\n", "          ", "transpose_theta", "=", "solve2theta", "(", "norm_trans_points", ",", "self", ".", "mean_face", ".", "clone", "(", ")", ")", "\n", "\n", "", "", "", "affineImage", "=", "affine2image", "(", "image", ",", "theta", ",", "self", ".", "shape", ")", "\n", "if", "self", ".", "cutout", "is", "not", "None", ":", "affineImage", "=", "self", ".", "cutout", "(", "affineImage", ")", "\n", "\n", "return", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "theta", ",", "transpose_theta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.__init__": [[15, 29], ["torch.Tensor", "torch.Tensor", "points.copy", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy"], ["  ", "def", "__init__", "(", "self", ",", "num_point", ",", "points", ",", "box", ",", "image_path", ",", "dataset_name", ")", ":", "\n", "\n", "    ", "self", ".", "num_point", "=", "num_point", "\n", "if", "box", "is", "not", "None", ":", "\n", "      ", "assert", "(", "isinstance", "(", "box", ",", "tuple", ")", "or", "isinstance", "(", "box", ",", "list", ")", ")", "and", "len", "(", "box", ")", "==", "4", "\n", "self", ".", "box", "=", "torch", ".", "Tensor", "(", "box", ")", "\n", "", "else", ":", "self", ".", "box", "=", "None", "\n", "if", "points", "is", "None", ":", "\n", "      ", "self", ".", "points", "=", "points", "\n", "", "else", ":", "\n", "      ", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "0", "]", "==", "3", "and", "points", ".", "shape", "[", "1", "]", "==", "self", ".", "num_point", ",", "'The shape of point is not right : {}'", ".", "format", "(", "points", ")", "\n", "self", ".", "points", "=", "torch", ".", "Tensor", "(", "points", ".", "copy", "(", ")", ")", "\n", "", "self", ".", "image_path", "=", "image_path", "\n", "self", ".", "datasets", "=", "dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.__repr__": [[30, 34], ["point_meta.PointMeta.box.tolist"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "box", "is", "None", ":", "boxstr", "=", "'None'", "\n", "else", ":", "boxstr", "=", "'box=[{:.1f}, {:.1f}, {:.1f}, {:.1f}]'", ".", "format", "(", "*", "self", ".", "box", ".", "tolist", "(", ")", ")", "\n", "return", "(", "'{name}(points={num_point}, '", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "+", "boxstr", "+", "')'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.get_box": [[35, 43], ["point_meta.PointMeta.box.clone", "math.sqrt"], "methods", ["None"], ["", "def", "get_box", "(", "self", ",", "return_diagonal", "=", "False", ")", ":", "\n", "    ", "if", "self", ".", "box", "is", "None", ":", "return", "None", "\n", "if", "not", "return_diagonal", ":", "\n", "      ", "return", "self", ".", "box", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "      ", "W", "=", "(", "self", ".", "box", "[", "2", "]", "-", "self", ".", "box", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "H", "=", "(", "self", ".", "box", "[", "3", "]", "-", "self", ".", "box", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "return", "math", ".", "sqrt", "(", "H", "*", "H", "+", "W", "*", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.get_points": [[44, 49], ["torch.zeros", "point_meta.PointMeta.points.clone"], "methods", ["None"], ["", "", "def", "get_points", "(", "self", ",", "ignore_indicator", "=", "False", ")", ":", "\n", "    ", "if", "ignore_indicator", ":", "last", "=", "2", "\n", "else", ":", "last", "=", "3", "\n", "if", "self", ".", "points", "is", "not", "None", ":", "return", "self", ".", "points", ".", "clone", "(", ")", "[", ":", "last", ",", ":", "]", "\n", "else", ":", "return", "torch", ".", "zeros", "(", "(", "last", ",", "self", ".", "num_point", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.is_none": [[50, 53], ["None"], "methods", ["None"], ["", "def", "is_none", "(", "self", ")", ":", "\n", "#assert self.box is not None, 'The box should not be None'", "\n", "    ", "return", "self", ".", "points", "is", "None", "\n", "#if self.box is None: return True", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy": [[56, 58], ["copy.deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.visiable_pts_num": [[59, 65], ["torch.no_grad", "torch.sum", "ans.item.item.item"], "methods", ["None"], ["", "def", "visiable_pts_num", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "ans", "=", "self", ".", "points", "[", "2", ",", ":", "]", ">", "0", "\n", "ans", "=", "torch", ".", "sum", "(", "ans", ")", "\n", "ans", "=", "ans", ".", "item", "(", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.special_fun": [[66, 75], ["torch.ones", "ValueError", "point_meta.PointMeta.points.clone"], "methods", ["None"], ["", "def", "special_fun", "(", "self", ",", "indicator", ")", ":", "\n", "    ", "if", "indicator", "==", "'68to49'", ":", "# For 300W or 300VW, convert the default 68 points to 49 points.", "\n", "      ", "assert", "self", ".", "num_point", "==", "68", ",", "'num-point must be 68 vs. {:}'", ".", "format", "(", "self", ".", "num_point", ")", "\n", "self", ".", "num_point", "=", "49", "\n", "out", "=", "torch", ".", "ones", "(", "(", "68", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "out", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "60", ",", "64", "]", "]", "=", "0", "\n", "if", "self", ".", "points", "is", "not", "None", ":", "self", ".", "points", "=", "self", ".", "points", ".", "clone", "(", ")", "[", ":", ",", "out", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid indicator : {:}'", ".", "format", "(", "indicator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.apply_horizontal_flip": [[76, 89], ["point_meta.PointMeta.datasets.startswith", "numpy.array", "numpy.array", "point_meta.PointMeta.datasets.startswith", "list", "numpy.array", "ValueError", "range", "list", "list", "list", "numpy.array", "range", "range", "range"], "methods", ["None"], ["", "", "def", "apply_horizontal_flip", "(", "self", ")", ":", "\n", "#self.points[0, :] = width - self.points[0, :] - 1", "\n", "# Mugsy spefic or Synthetic", "\n", "    ", "if", "self", ".", "datasets", ".", "startswith", "(", "'HandsyROT'", ")", ":", "\n", "      ", "ori", "=", "np", ".", "array", "(", "list", "(", "range", "(", "0", ",", "42", ")", ")", ")", "\n", "pos", "=", "np", ".", "array", "(", "list", "(", "range", "(", "21", ",", "42", ")", ")", "+", "list", "(", "range", "(", "0", ",", "21", ")", ")", ")", "\n", "self", ".", "points", "[", ":", ",", "pos", "]", "=", "self", ".", "points", "[", ":", ",", "ori", "]", "\n", "", "elif", "self", ".", "datasets", ".", "startswith", "(", "'face68'", ")", ":", "\n", "      ", "ori", "=", "np", ".", "array", "(", "list", "(", "range", "(", "0", ",", "68", ")", ")", ")", "\n", "pos", "=", "np", ".", "array", "(", "[", "17", ",", "16", ",", "15", ",", "14", ",", "13", ",", "12", ",", "11", ",", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", ",", "27", ",", "26", ",", "25", ",", "24", ",", "23", ",", "22", ",", "21", ",", "20", ",", "19", ",", "18", ",", "28", ",", "29", ",", "30", ",", "31", ",", "36", ",", "35", ",", "34", ",", "33", ",", "32", ",", "46", ",", "45", ",", "44", ",", "43", ",", "48", ",", "47", ",", "40", ",", "39", ",", "38", ",", "37", ",", "42", ",", "41", ",", "55", ",", "54", ",", "53", ",", "52", ",", "51", ",", "50", ",", "49", ",", "60", ",", "59", ",", "58", ",", "57", ",", "56", ",", "65", ",", "64", ",", "63", ",", "62", ",", "61", ",", "68", ",", "67", ",", "66", "]", ")", "-", "1", "\n", "self", ".", "points", "[", ":", ",", "ori", "]", "=", "self", ".", "points", "[", ":", ",", "pos", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Does not support {:}'", ".", "format", "(", "self", ".", "datasets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.apply_affine2point": [[93, 107], ["points.size", "points.size", "torch.no_grad", "xvision.normalize_points", "ok_points.unsqueeze().repeat().float", "torch.gesv", "torch.sum().item", "ok_points.unsqueeze().repeat", "torch.sum", "ok_points.unsqueeze"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.affine_utils.normalize_points"], ["", "", "", "def", "apply_affine2point", "(", "points", ",", "theta", ",", "shape", ")", ":", "\n", "  ", "assert", "points", ".", "size", "(", "0", ")", "==", "3", ",", "'invalid points shape : {:}'", ".", "format", "(", "points", ".", "size", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "ok_points", "=", "points", "[", "2", ",", ":", "]", "==", "1", "\n", "assert", "torch", ".", "sum", "(", "ok_points", ")", ".", "item", "(", ")", ">", "0", ",", "'there is no visiable point'", "\n", "points", "[", ":", "2", ",", ":", "]", "=", "normalize_points", "(", "shape", ",", "points", "[", ":", "2", ",", ":", "]", ")", "\n", "\n", "norm_trans_points", "=", "ok_points", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "trans_points", ",", "___", "=", "torch", ".", "gesv", "(", "points", "[", ":", ",", "ok_points", "]", ",", "theta", ")", "\n", "\n", "norm_trans_points", "[", ":", ",", "ok_points", "]", "=", "trans_points", "\n", "\n", "", "return", "norm_trans_points", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.apply_boundary": [[110, 117], ["torch.no_grad", "norm_trans_points.clone.clone", "torch.stack", "torch.sum"], "function", ["None"], ["", "def", "apply_boundary", "(", "norm_trans_points", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "norm_trans_points", "=", "norm_trans_points", ".", "clone", "(", ")", "\n", "oks", "=", "torch", ".", "stack", "(", "(", "norm_trans_points", "[", "0", "]", ">", "-", "1", ",", "norm_trans_points", "[", "0", "]", "<", "1", ",", "norm_trans_points", "[", "1", "]", ">", "-", "1", ",", "norm_trans_points", "[", "1", "]", "<", "1", ",", "norm_trans_points", "[", "2", "]", ">", "0", ")", ")", "\n", "oks", "=", "torch", ".", "sum", "(", "oks", ",", "dim", "=", "0", ")", "==", "5", "\n", "norm_trans_points", "[", "2", ",", ":", "]", "=", "oks", "\n", "", "return", "norm_trans_points", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.search_single_args.obtain_search_single_args": [[5, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_search_single_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_path'", ",", "type", "=", "str", ",", "help", "=", "'The split file path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--search_shape'", ",", "type", "=", "str", ",", "help", "=", "'The shape to be searched.'", ")", "\n", "#parser.add_argument('--arch_para_pure',   type=int,                   help='The architecture-parameter pure or not.')", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_max'", ",", "type", "=", "float", ",", "help", "=", "'The maximum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_min'", ",", "type", "=", "float", ",", "help", "=", "'The minimum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The expected FLOP ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_weight'", ",", "type", "=", "float", ",", "help", "=", "'The loss weight for FLOP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_tolerant'", ",", "type", "=", "float", ",", "help", "=", "'The tolerant range for FLOP.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "gumbel_tau_max", "is", "not", "None", "and", "args", ".", "gumbel_tau_min", "is", "not", "None", "\n", "assert", "args", ".", "FLOP_tolerant", "is", "not", "None", "and", "args", ".", "FLOP_tolerant", ">", "0", ",", "'invalid FLOP_tolerant : {:}'", ".", "format", "(", "FLOP_tolerant", ")", "\n", "#assert args.arch_para_pure is not None, 'arch_para_pure is not None: {:}'.format(args.arch_para_pure)", "\n", "#args.arch_para_pure = bool(args.arch_para_pure)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.basic_args.obtain_basic_args": [[7, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_basic_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_source'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'The source of model defination.'", ")", "\n", "parser", ".", "add_argument", "(", "'--extra_model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'The extra model ckp file (help to indicate the searched architecture).'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.random_baseline.obtain_RandomSearch_args": [[5, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_RandomSearch_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--expect_flop'", ",", "type", "=", "float", ",", "help", "=", "'The expected flop keep ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_nums'", ",", "type", "=", "int", ",", "help", "=", "'The maximum number of running random arch generating..'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_mode'", ",", "type", "=", "str", ",", "choices", "=", "[", "'random'", ",", "'fix'", "]", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "#assert args.flop_ratio_min < args.flop_ratio_max, 'flop-ratio {:} vs {:}'.format(args.flop_ratio_min, args.flop_ratio_max)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.search_args.obtain_search_args": [[5, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_search_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_path'", ",", "type", "=", "str", ",", "help", "=", "'The split file path.'", ")", "\n", "#parser.add_argument('--arch_para_pure',   type=int,                   help='The architecture-parameter pure or not.')", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_max'", ",", "type", "=", "float", ",", "help", "=", "'The maximum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_min'", ",", "type", "=", "float", ",", "help", "=", "'The minimum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The expected FLOP ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_weight'", ",", "type", "=", "float", ",", "help", "=", "'The loss weight for FLOP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_tolerant'", ",", "type", "=", "float", ",", "help", "=", "'The tolerant range for FLOP.'", ")", "\n", "# ablation studies", "\n", "parser", ".", "add_argument", "(", "'--ablation_num_select'", ",", "type", "=", "int", ",", "help", "=", "'The number of randomly selected channels.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "gumbel_tau_max", "is", "not", "None", "and", "args", ".", "gumbel_tau_min", "is", "not", "None", "\n", "assert", "args", ".", "FLOP_tolerant", "is", "not", "None", "and", "args", ".", "FLOP_tolerant", ">", "0", ",", "'invalid FLOP_tolerant : {:}'", ".", "format", "(", "FLOP_tolerant", ")", "\n", "#assert args.arch_para_pure is not None, 'arch_para_pure is not None: {:}'.format(args.arch_para_pure)", "\n", "#args.arch_para_pure = bool(args.arch_para_pure)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.cls_kd_args.obtain_cls_kd_args": [[4, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_cls_kd_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'The teacher checkpoint in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_alpha'", ",", "type", "=", "float", ",", "help", "=", "'The alpha parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_temperature'", ",", "type", "=", "float", ",", "help", "=", "'The temperature parameter in knowledge distillation.'", ")", "\n", "#parser.add_argument('--KD_feature',       type=float,                 help='Knowledge distillation at the feature level.')", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.convert_param": [[15, 40], ["isinstance", "isinstance", "outs.append", "int", "str", "bool", "int", "float", "TypeError", "float.lower", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "convert_param", "(", "original_lists", ")", ":", "\n", "  ", "assert", "isinstance", "(", "original_lists", ",", "list", ")", ",", "'The type is not right : {:}'", ".", "format", "(", "original_lists", ")", "\n", "ctype", ",", "value", "=", "original_lists", "[", "0", "]", ",", "original_lists", "[", "1", "]", "\n", "assert", "ctype", "in", "support_types", ",", "'Ctype={:}, support={:}'", ".", "format", "(", "ctype", ",", "support_types", ")", "\n", "is_list", "=", "isinstance", "(", "value", ",", "list", ")", "\n", "if", "not", "is_list", ":", "value", "=", "[", "value", "]", "\n", "outs", "=", "[", "]", "\n", "for", "x", "in", "value", ":", "\n", "    ", "if", "ctype", "==", "'int'", ":", "\n", "      ", "x", "=", "int", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'str'", ":", "\n", "      ", "x", "=", "str", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'bool'", ":", "\n", "      ", "x", "=", "bool", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "ctype", "==", "'float'", ":", "\n", "      ", "x", "=", "float", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'none'", ":", "\n", "      ", "if", "x", ".", "lower", "(", ")", "!=", "'none'", ":", "\n", "        ", "raise", "ValueError", "(", "'For the none type, the value must be none instead of {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "x", "=", "None", "\n", "", "else", ":", "\n", "      ", "raise", "TypeError", "(", "'Does not know this type : {:}'", ".", "format", "(", "ctype", ")", ")", "\n", "", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "not", "is_list", ":", "outs", "=", "outs", "[", "0", "]", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config": [[42, 56], ["str", "hasattr", "os.path.exists", "isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "logger.log", "open", "json.load", "configure_utils.convert_param", "isinstance", "logger.log", "json.load.items", "Arguments.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.convert_param", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "def", "load_config", "(", "path", ",", "extra", ",", "logger", ")", ":", "\n", "  ", "path", "=", "str", "(", "path", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "'Can not find {:}'", ".", "format", "(", "path", ")", "\n", "# Reading data back", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "content", "=", "{", "k", ":", "convert_param", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "}", "\n", "assert", "extra", "is", "None", "or", "isinstance", "(", "extra", ",", "dict", ")", ",", "'invalid type of extra : {:}'", ".", "format", "(", "extra", ")", "\n", "if", "isinstance", "(", "extra", ",", "dict", ")", ":", "content", "=", "{", "**", "content", ",", "**", "extra", "}", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "content", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "content", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.configure2str": [[58, 99], ["config._asdict.items", "isinstance", "config._asdict._asdict", "isinstance", "isinstance", "isinstance", "configure_utils.configure2str.gtype"], "function", ["None"], ["", "def", "configure2str", "(", "config", ",", "xpath", "=", "None", ")", ":", "\n", "  ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "    ", "config", "=", "config", ".", "_asdict", "(", ")", "\n", "", "def", "cstring", "(", "x", ")", ":", "\n", "    ", "return", "\"\\\"{:}\\\"\"", ".", "format", "(", "x", ")", "\n", "", "def", "gtype", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "x", "=", "x", "[", "0", "]", "\n", "if", "isinstance", "(", "x", ",", "str", ")", ":", "return", "'str'", "\n", "elif", "isinstance", "(", "x", ",", "bool", ")", ":", "return", "'bool'", "\n", "elif", "isinstance", "(", "x", ",", "int", ")", ":", "return", "'int'", "\n", "elif", "isinstance", "(", "x", ",", "float", ")", ":", "return", "'float'", "\n", "elif", "x", "is", "None", ":", "return", "'none'", "\n", "else", ":", "raise", "ValueError", "(", "'invalid : {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "def", "cvalue", "(", "x", ",", "xtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "is_list", "=", "True", "\n", "else", ":", "\n", "      ", "is_list", ",", "x", "=", "False", ",", "[", "x", "]", "\n", "", "temps", "=", "[", "]", "\n", "for", "temp", "in", "x", ":", "\n", "      ", "if", "xtype", "==", "'bool'", ":", "temp", "=", "cstring", "(", "int", "(", "temp", ")", ")", "\n", "elif", "xtype", "==", "'none'", ":", "temp", "=", "cstring", "(", "'None'", ")", "\n", "else", ":", "temp", "=", "cstring", "(", "temp", ")", "\n", "temps", ".", "append", "(", "temp", ")", "\n", "", "if", "is_list", ":", "\n", "      ", "return", "\"[{:}]\"", ".", "format", "(", "', '", ".", "join", "(", "temps", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "temps", "[", "0", "]", "\n", "\n", "", "", "xstrings", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "    ", "xtype", "=", "gtype", "(", "value", ")", "\n", "string", "=", "'  {:20s} : [{:8s}, {:}]'", ".", "format", "(", "cstring", "(", "key", ")", ",", "cstring", "(", "xtype", ")", ",", "cvalue", "(", "value", ",", "xtype", ")", ")", "\n", "xstrings", ".", "append", "(", "string", ")", "\n", "", "Fstring", "=", "'{\\n'", "+", "',\\n'", ".", "join", "(", "xstrings", ")", "+", "'\\n}'", "\n", "if", "xpath", "is", "not", "None", ":", "\n", "    ", "parent", "=", "Path", "(", "xpath", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "osp", ".", "isfile", "(", "xpath", ")", ":", "os", ".", "remove", "(", "xpath", ")", "\n", "with", "open", "(", "xpath", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "      ", "text_file", ".", "write", "(", "'{:}'", ".", "format", "(", "Fstring", ")", ")", "\n", "", "", "return", "Fstring", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.dict2config": [[101, 107], ["isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "type", "logger.log", "xdict.keys"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "def", "dict2config", "(", "xdict", ",", "logger", ")", ":", "\n", "  ", "assert", "isinstance", "(", "xdict", ",", "dict", ")", ",", "'invalid type : {:}'", ".", "format", "(", "type", "(", "xdict", ")", ")", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "xdict", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "xdict", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "return", "content", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args": [[3, 18], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "add_shared_args", "(", "parser", ")", ":", "\n", "# Data Generation", "\n", "  ", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'The dataset name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "help", "=", "'The dataset name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout_length'", ",", "type", "=", "int", ",", "help", "=", "'The cutout length, negative means not use.'", ")", "\n", "# Printing", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency (default: 200)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq_eval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency (default: 200)'", ")", "\n", "# Checkpoints", "\n", "parser", ".", "add_argument", "(", "'--eval_frequency'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'evaluation frequency (default: 200)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "help", "=", "'Folder to save checkpoints and log.'", ")", "\n", "# Acceleration", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of data loading workers (default: 8)'", ")", "\n", "# Random Seed", "\n", "parser", ".", "add_argument", "(", "'--rand_seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'manual seed'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.cls_init_args.obtain_cls_init_args": [[4, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_cls_init_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'The checkpoint path to the initial model.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.attention_args.obtain_attention_args": [[4, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_attention_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_channel'", ",", "type", "=", "int", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_spatial'", ",", "type", "=", "str", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_active'", ",", "type", "=", "str", ",", "help", "=", "'.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.pruning_args.obtain_pruning_args": [[4, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.share_args.add_shared_args"], ["def", "obtain_pruning_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The left channel ratio compared to the original network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_version'", ",", "type", "=", "str", ",", "help", "=", "'The network version.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_alpha'", ",", "type", "=", "float", ",", "help", "=", "'The alpha parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_temperature'", ",", "type", "=", "float", ",", "help", "=", "'The temperature parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--Regular_W_feat'", ",", "type", "=", "float", ",", "help", "=", "'The .'", ")", "\n", "parser", ".", "add_argument", "(", "'--Regular_W_conv'", ",", "type", "=", "float", ",", "help", "=", "'The .'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "keep_ratio", ">", "0", "and", "args", ".", "keep_ratio", "<=", "1", ",", "'invalid keep ratio : {:}'", ".", "format", "(", "args", ".", "keep_ratio", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.starts.prepare_seed": [[9, 15], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "  ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.starts.prepare_logger": [[17, 33], ["copy.deepcopy", "Logger", "Logger.log", "Logger.log", "copy.deepcopy._get_kwargs", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "def", "prepare_logger", "(", "xargs", ")", ":", "\n", "  ", "args", "=", "copy", ".", "deepcopy", "(", "xargs", ")", "\n", "from", "log_utils", "import", "Logger", "\n", "logger", "=", "Logger", "(", "args", ".", "save_dir", ",", "args", ".", "rand_seed", ")", "\n", "logger", ".", "log", "(", "'Main Function with logger : {:}'", ".", "format", "(", "logger", ")", ")", "\n", "logger", ".", "log", "(", "'Arguments : -------------------------------'", ")", "\n", "for", "name", ",", "value", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "    ", "logger", ".", "log", "(", "'{:16} : {:}'", ".", "format", "(", "name", ",", "value", ")", ")", "\n", "", "logger", ".", "log", "(", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"Pillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"PyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"cuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA_VISIBLE_DEVICES : {:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", "else", "'None'", ")", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.starts.get_machine_info": [[35, 47], ["sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["None"], ["", "def", "get_machine_info", "(", ")", ":", "\n", "  ", "info", "=", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", "\n", "info", "+=", "\"\\nPillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "info", "+=", "\"\\nPyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", "\n", "info", "+=", "\"\\ncuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", "\n", "info", "+=", "\"\\nCUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "info", "+=", "\"\\nCUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "    ", "info", "+=", "\"\\nCUDA_VISIBLE_DEVICES={:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", "\n", "", "else", ":", "\n", "    ", "info", "+=", "\"\\nDoes not set CUDA_VISIBLE_DEVICES\"", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.starts.save_checkpoint": [[49, 57], ["os.path.isfile", "torch.save", "os.path.isfile", "hasattr", "hasattr", "os.remove", "logger.log", "logger.log"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "def", "save_checkpoint", "(", "state", ",", "filename", ",", "logger", ")", ":", "\n", "  ", "if", "osp", ".", "isfile", "(", "filename", ")", ":", "\n", "    ", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'Find {:} exist, delete is at first before saving'", ".", "format", "(", "filename", ")", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "assert", "osp", ".", "isfile", "(", "filename", ")", ",", "'save filename : {:} failed, which is not found.'", ".", "format", "(", "filename", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'save checkpoint into {:}'", ".", "format", "(", "filename", ")", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.starts.copy_checkpoint": [[59, 65], ["os.path.isfile", "shutil.copyfile", "hasattr", "hasattr", "os.remove", "logger.log", "logger.log"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "def", "copy_checkpoint", "(", "src", ",", "dst", ",", "logger", ")", ":", "\n", "  ", "if", "osp", ".", "isfile", "(", "dst", ")", ":", "\n", "    ", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'Find {:} exist, delete is at first before saving'", ".", "format", "(", "dst", ")", ")", "\n", "os", ".", "remove", "(", "dst", ")", "\n", "", "copyfile", "(", "src", ",", "dst", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'copy the file from {:} into {:}'", ".", "format", "(", "src", ",", "dst", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main.get_flop_loss": [[10, 22], ["torch.mean", "torch.log", "torch.log", "torch.log.item"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["def", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", ":", "\n", "  ", "expected_flop", "=", "torch", ".", "mean", "(", "expected_flop", ")", "\n", "\n", "if", "flop_cur", "<", "flop_need", "-", "flop_tolerant", ":", "# Too Small FLOP", "\n", "    ", "loss", "=", "-", "torch", ".", "log", "(", "expected_flop", ")", "\n", "#elif flop_cur > flop_need + flop_tolerant: # Too Large FLOP", "\n", "", "elif", "flop_cur", ">", "flop_need", ":", "# Too Large FLOP", "\n", "    ", "loss", "=", "torch", ".", "log", "(", "expected_flop", ")", "\n", "", "else", ":", "# Required FLOP", "\n", "    ", "loss", "=", "None", "\n", "", "if", "loss", "is", "None", ":", "return", "0", ",", "0", "\n", "else", ":", "return", "loss", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main.search_train": [[24, 88], ["network.train", "logger.log", "time.time", "network.apply", "enumerate", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "models.change_key", "scheduler.update", "base_targets.cuda.cuda", "arch_targets.cuda.cuda", "data_time.update", "base_optimizer.zero_grad", "network", "criterion", "criterion.backward", "base_optimizer.step", "utils.obtain_accuracy", "base_losses.update", "top1.update", "top5.update", "arch_optimizer.zero_grad", "network", "network.module.get_flop", "search_main.get_flop_loss", "criterion", "arch_loss.backward", "arch_optimizer.step", "arch_losses.update", "arch_flop_losses.update", "arch_cls_losses.update", "batch_time.update", "time.time", "criterion.item", "base_inputs.size", "prec1.item", "base_inputs.size", "prec5.item", "base_inputs.size", "arch_loss.item", "arch_inputs.size", "arch_inputs.size", "criterion.item", "arch_inputs.size", "logger.log", "len", "time.time", "time.time", "len", "log_utils.time_string", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.change_key", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main_v2.get_flop_loss", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["", "def", "search_train", "(", "search_loader", ",", "network", ",", "criterion", ",", "scheduler", ",", "base_optimizer", ",", "arch_optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "base_losses", ",", "arch_losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "arch_cls_losses", ",", "arch_flop_losses", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "epoch_str", ",", "flop_need", ",", "flop_weight", ",", "flop_tolerant", "=", "extra_info", "[", "'epoch-str'", "]", ",", "extra_info", "[", "'FLOP-exp'", "]", ",", "extra_info", "[", "'FLOP-weight'", "]", ",", "extra_info", "[", "'FLOP-tolerant'", "]", "\n", "\n", "network", ".", "train", "(", ")", "\n", "logger", ".", "log", "(", "'[Search] : {:}, FLOP-Require={:.2f} MB, FLOP-WEIGHT={:.2f}'", ".", "format", "(", "epoch_str", ",", "flop_need", ",", "flop_weight", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "network", ".", "apply", "(", "change_key", "(", "'search_mode'", ",", "'search'", ")", ")", "\n", "for", "step", ",", "(", "base_inputs", ",", "base_targets", ",", "arch_inputs", ",", "arch_targets", ")", "in", "enumerate", "(", "search_loader", ")", ":", "\n", "    ", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "step", "/", "len", "(", "search_loader", ")", ")", "\n", "# calculate prediction and loss", "\n", "base_targets", "=", "base_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "arch_targets", "=", "arch_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# update the weights", "\n", "base_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "base_inputs", ")", "\n", "#network.apply( change_key('search_mode', 'basic') )", "\n", "#features, logits = network(base_inputs)", "\n", "base_loss", "=", "criterion", "(", "logits", ",", "base_targets", ")", "\n", "base_loss", ".", "backward", "(", ")", "\n", "base_optimizer", ".", "step", "(", ")", "\n", "# record", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "base_targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "base_losses", ".", "update", "(", "base_loss", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# update the architecture", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "arch_inputs", ")", "\n", "flop_cur", "=", "network", ".", "module", ".", "get_flop", "(", "'genotype'", ",", "None", ",", "None", ")", "\n", "flop_loss", ",", "flop_loss_scale", "=", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", "\n", "acls_loss", "=", "criterion", "(", "logits", ",", "arch_targets", ")", "\n", "arch_loss", "=", "acls_loss", "+", "flop_loss", "*", "flop_weight", "\n", "arch_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "arch_losses", ".", "update", "(", "arch_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_flop_losses", ".", "update", "(", "flop_loss_scale", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_cls_losses", ".", "update", "(", "acls_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "%", "print_freq", "==", "0", "or", "(", "step", "+", "1", ")", "==", "len", "(", "search_loader", ")", ":", "\n", "      ", "Sstr", "=", "'**TRAIN** '", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "epoch_str", ",", "step", ",", "len", "(", "search_loader", ")", ")", "\n", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Base-Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "base_losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Vstr", "=", "'Acls-loss {aloss.val:.3f} ({aloss.avg:.3f}) FLOP-Loss {floss.val:.3f} ({floss.avg:.3f}) Arch-Loss {loss.val:.3f} ({loss.avg:.3f})'", ".", "format", "(", "aloss", "=", "arch_cls_losses", ",", "floss", "=", "arch_flop_losses", ",", "loss", "=", "arch_losses", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Vstr", ")", "\n", "#Istr = 'Bsz={:} Asz={:}'.format(list(base_inputs.size()), list(arch_inputs.size()))", "\n", "#logger.log(Sstr + ' ' + Tstr + ' ' + Lstr + ' ' + Vstr + ' ' + Istr)", "\n", "#print(network.module.get_arch_info())", "\n", "#print(network.module.width_attentions[0])", "\n", "#print(network.module.width_attentions[1])", "\n", "\n", "", "", "logger", ".", "log", "(", "' **TRAIN** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Base-Loss:{baseloss:.3f}, Arch-Loss={archloss:.3f}'", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "baseloss", "=", "base_losses", ".", "avg", ",", "archloss", "=", "arch_losses", ".", "avg", ")", ")", "\n", "return", "base_losses", ".", "avg", ",", "arch_losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main.search_valid": [[91, 127], ["network.eval", "network.apply", "time.time", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "models.change_key", "torch.no_grad", "enumerate", "data_time.update", "targets.cuda.cuda", "network", "criterion", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "batch_time.update", "time.time", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "logger.log", "time.time", "time.time", "len", "list", "log_utils.time_string", "len", "inputs.size"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.change_key", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["", "def", "search_valid", "(", "xloader", ",", "network", ",", "criterion", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "network", ".", "eval", "(", ")", "\n", "network", ".", "apply", "(", "change_key", "(", "'search_mode'", ",", "'search'", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "#logger.log('Starting evaluating {:}'.format(epoch_info))", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "# measure data loading time", "\n", "      ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# calculate prediction and loss", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", ",", "expected_flop", "=", "network", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "# record", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "xloader", ")", ":", "\n", "        ", "Sstr", "=", "'**VALID** '", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "extra_info", ",", "i", ",", "len", "(", "xloader", ")", ")", "\n", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Istr", "=", "'Size={:}'", ".", "format", "(", "list", "(", "inputs", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Istr", ")", "\n", "\n", "", "", "", "logger", ".", "log", "(", "' **VALID** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Loss:{loss:.3f}'", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.funcs_nasbench.pure_evaluate": [[17, 43], ["torch.nn.CrossEntropyLoss", "network.eval", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "torch.cuda.current_device", "torch.no_grad", "time.time", "enumerate", "len", "targets.cuda.cuda", "inputs.cuda.cuda", "data_time.update", "network", "criterion", "batch_time.update", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "time.time", "inputs.cuda.size", "latencies.append", "criterion.item", "inputs.cuda.size", "prec1.item", "inputs.cuda.size", "prec5.item", "inputs.cuda.size", "time.time", "time.time", "inputs.cuda.size"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "pure_evaluate", "(", "xloader", ",", "network", ",", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "batch", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "None", "\n", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "latencies", ",", "device", "=", "[", "]", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "network", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "      ", "targets", "=", "targets", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# forward", "\n", "features", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "batch", "is", "None", "or", "batch", "==", "inputs", ".", "size", "(", "0", ")", ":", "\n", "        ", "batch", "=", "inputs", ".", "size", "(", "0", ")", "\n", "latencies", ".", "append", "(", "batch_time", ".", "val", "-", "data_time", ".", "val", ")", "\n", "# record loss and accuracy", "\n", "", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "", "if", "len", "(", "latencies", ")", ">", "2", ":", "latencies", "=", "latencies", "[", "1", ":", "]", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "latencies", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.funcs_nasbench.procedure": [[46, 74], ["torch.cuda.current_device", "enumerate", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "network.train", "log_utils.AverageMeter", "log_utils.AverageMeter", "time.time", "targets.cuda.cuda", "network", "criterion", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "batch_time.update", "time.time", "network.eval", "ValueError", "scheduler.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update"], ["", "def", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "mode", ":", "str", ")", ":", "\n", "  ", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "network", ".", "train", "(", ")", "\n", "elif", "mode", "==", "'valid'", ":", "network", ".", "eval", "(", ")", "\n", "else", ":", "raise", "ValueError", "(", "\"The mode is not right : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "data_time", ",", "batch_time", ",", "end", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "i", "/", "len", "(", "xloader", ")", ")", "\n", "\n", "targets", "=", "targets", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "if", "mode", "==", "'train'", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "# forward", "\n", "features", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "# backward", "\n", "if", "mode", "==", "'train'", ":", "\n", "      ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# record loss and accuracy", "\n", "", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "# count time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "batch_time", ".", "sum", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.funcs_nasbench.evaluate_for_seed": [[76, 135], ["procedures.prepare_seed", "models.get_cell_based_tiny_net", "utils.get_model_infos", "logger.log", "logger.log", "logger.log", "procedures.get_optim_scheduler", "torch.cuda.current_device", "torch.nn.DataParallel().cuda", "criterion.cuda.cuda", "range", "models.get_cell_based_tiny_net.parameters", "time.time", "log_utils.AverageMeter", "scheduler.update", "min", "funcs_nasbench.procedure", "epoch_time.update", "time.time", "logger.log", "arch_config._asdict", "opt_config._asdict", "models.get_cell_based_tiny_net.state_dict", "models.get_cell_based_tiny_net.get_message", "log_utils.time_string", "torch.nn.DataParallel", "scheduler.get_lr", "torch.no_grad", "valid_loaders.items", "log_utils.convert_secs2time", "funcs_nasbench.procedure", "time.time", "log_utils.time_string"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.starts.prepare_seed", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.get_optim_scheduler", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.state_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.get_message", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.get_lr", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.convert_secs2time", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["", "def", "evaluate_for_seed", "(", "arch_config", ",", "opt_config", ",", "train_loader", ",", "valid_loaders", ",", "seed", ":", "int", ",", "logger", ")", ":", "\n", "\n", "  ", "prepare_seed", "(", "seed", ")", "# random seed", "\n", "net", "=", "get_cell_based_tiny_net", "(", "arch_config", ")", "\n", "#net = TinyNetwork(arch_config['channel'], arch_config['num_cells'], arch, config.class_num)", "\n", "flop", ",", "param", "=", "get_model_infos", "(", "net", ",", "opt_config", ".", "xshape", ")", "\n", "logger", ".", "log", "(", "'Network : {:}'", ".", "format", "(", "net", ".", "get_message", "(", ")", ")", ",", "False", ")", "\n", "logger", ".", "log", "(", "'{:} Seed-------------------------- {:} --------------------------'", ".", "format", "(", "time_string", "(", ")", ",", "seed", ")", ")", "\n", "logger", ".", "log", "(", "'FLOP = {:} MB, Param = {:} MB'", ".", "format", "(", "flop", ",", "param", ")", ")", "\n", "# train and valid", "\n", "optimizer", ",", "scheduler", ",", "criterion", "=", "get_optim_scheduler", "(", "net", ".", "parameters", "(", ")", ",", "opt_config", ")", "\n", "default_device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "network", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "default_device", "]", ")", ".", "cuda", "(", "device", "=", "default_device", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", "device", "=", "default_device", ")", "\n", "# start training", "\n", "start_time", ",", "epoch_time", ",", "total_epoch", "=", "time", ".", "time", "(", ")", ",", "AverageMeter", "(", ")", ",", "opt_config", ".", "epochs", "+", "opt_config", ".", "warmup", "\n", "train_losses", ",", "train_acc1es", ",", "train_acc5es", ",", "valid_losses", ",", "valid_acc1es", ",", "valid_acc5es", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "train_times", ",", "valid_times", ",", "lrs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "epoch", "in", "range", "(", "total_epoch", ")", ":", "\n", "    ", "scheduler", ".", "update", "(", "epoch", ",", "0.0", ")", "\n", "lr", "=", "min", "(", "scheduler", ".", "get_lr", "(", ")", ")", "\n", "train_loss", ",", "train_acc1", ",", "train_acc5", ",", "train_tm", "=", "procedure", "(", "train_loader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "'train'", ")", "\n", "train_losses", "[", "epoch", "]", "=", "train_loss", "\n", "train_acc1es", "[", "epoch", "]", "=", "train_acc1", "\n", "train_acc5es", "[", "epoch", "]", "=", "train_acc5", "\n", "train_times", "[", "epoch", "]", "=", "train_tm", "\n", "lrs", "[", "epoch", "]", "=", "lr", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "key", ",", "xloder", "in", "valid_loaders", ".", "items", "(", ")", ":", "\n", "        ", "valid_loss", ",", "valid_acc1", ",", "valid_acc5", ",", "valid_tm", "=", "procedure", "(", "xloder", ",", "network", ",", "criterion", ",", "None", ",", "None", ",", "'valid'", ")", "\n", "valid_losses", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_loss", "\n", "valid_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_acc1", "\n", "valid_acc5es", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_acc5", "\n", "valid_times", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_tm", "\n", "\n", "# measure elapsed time", "\n", "", "", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "need_time", "=", "'Time Left: {:}'", ".", "format", "(", "convert_secs2time", "(", "epoch_time", ".", "avg", "*", "(", "total_epoch", "-", "epoch", "-", "1", ")", ",", "True", ")", ")", "\n", "logger", ".", "log", "(", "'{:} {:} epoch={:03d}/{:03d} :: Train [loss={:.5f}, acc@1={:.2f}%, acc@5={:.2f}%] Valid [loss={:.5f}, acc@1={:.2f}%, acc@5={:.2f}%], lr={:}'", ".", "format", "(", "time_string", "(", ")", ",", "need_time", ",", "epoch", ",", "total_epoch", ",", "train_loss", ",", "train_acc1", ",", "train_acc5", ",", "valid_loss", ",", "valid_acc1", ",", "valid_acc5", ",", "lr", ")", ")", "\n", "", "info_seed", "=", "{", "'flop'", ":", "flop", ",", "\n", "'param'", ":", "param", ",", "\n", "'arch_config'", ":", "arch_config", ".", "_asdict", "(", ")", ",", "\n", "'opt_config'", ":", "opt_config", ".", "_asdict", "(", ")", ",", "\n", "'total_epoch'", ":", "total_epoch", ",", "\n", "'train_losses'", ":", "train_losses", ",", "\n", "'train_acc1es'", ":", "train_acc1es", ",", "\n", "'train_acc5es'", ":", "train_acc5es", ",", "\n", "'train_times'", ":", "train_times", ",", "\n", "'valid_losses'", ":", "valid_losses", ",", "\n", "'valid_acc1es'", ":", "valid_acc1es", ",", "\n", "'valid_acc5es'", ":", "valid_acc5es", ",", "\n", "'valid_times'", ":", "valid_times", ",", "\n", "'learning_rates'", ":", "lrs", ",", "\n", "'net_state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'net_string'", ":", "'{:}'", ".", "format", "(", "net", ")", ",", "\n", "'finish-train'", ":", "True", "\n", "}", "\n", "return", "info_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.funcs_nasbench.get_nas_bench_loaders": [[137, 204], ["torch.set_num_threads", "pathlib.Path", "config_utils.load_config", "print", "print", "get_datasets", "print", "config_utils.load_config", "copy.deepcopy", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "print", "get_datasets", "print", "config_utils.load_config", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "config_utils.load_config", "get_datasets", "print", "config_utils.load_config", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "str", "str", "str", "log_utils.time_string", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "len", "len", "len", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "len", "len", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "len", "len", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.get_datasets", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.get_datasets", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.get_dataset_with_transform.get_datasets", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["", "def", "get_nas_bench_loaders", "(", "workers", ")", ":", "\n", "\n", "  ", "torch", ".", "set_num_threads", "(", "workers", ")", "\n", "\n", "root_dir", "=", "(", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "'..'", "/", "'..'", ")", ".", "resolve", "(", ")", "\n", "torch_dir", "=", "pathlib", ".", "Path", "(", "os", ".", "environ", "[", "'TORCH_HOME'", "]", ")", "\n", "# cifar", "\n", "cifar_config_path", "=", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'CIFAR.config'", "\n", "cifar_config", "=", "load_config", "(", "cifar_config_path", ",", "None", ",", "None", ")", "\n", "get_datasets", "=", "datasets", ".", "get_datasets", "# a function to return the dataset", "\n", "break_line", "=", "'-'", "*", "150", "\n", "print", "(", "'{:} Create data-loader for all datasets'", ".", "format", "(", "time_string", "(", ")", ")", ")", "\n", "print", "(", "break_line", ")", "\n", "TRAIN_CIFAR10", ",", "VALID_CIFAR10", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "'cifar10'", ",", "str", "(", "torch_dir", "/", "'cifar.python'", ")", ",", "-", "1", ")", "\n", "print", "(", "'original CIFAR-10 : {:} training images and {:} test images : {:} input shape : {:} number of classes'", ".", "format", "(", "len", "(", "TRAIN_CIFAR10", ")", ",", "len", "(", "VALID_CIFAR10", ")", ",", "xshape", ",", "class_num", ")", ")", "\n", "cifar10_splits", "=", "load_config", "(", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'cifar-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "cifar10_splits", ".", "train", "[", ":", "10", "]", "==", "[", "0", ",", "5", ",", "7", ",", "11", ",", "13", ",", "15", ",", "16", ",", "17", ",", "20", ",", "24", "]", "and", "cifar10_splits", ".", "valid", "[", ":", "10", "]", "==", "[", "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "8", ",", "9", ",", "10", ",", "12", ",", "14", "]", "\n", "temp_dataset", "=", "copy", ".", "deepcopy", "(", "TRAIN_CIFAR10", ")", "\n", "temp_dataset", ".", "transform", "=", "VALID_CIFAR10", ".", "transform", "\n", "# data loader", "\n", "trainval_cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_CIFAR10", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_CIFAR10", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar10_splits", ".", "train", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "temp_dataset", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar10_splits", ".", "valid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test__cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_CIFAR10", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'CIFAR-10  : trval-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "trainval_cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'CIFAR-10  : train-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "train_cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'CIFAR-10  : valid-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "valid_cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'CIFAR-10  : test--loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "test__cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "break_line", ")", "\n", "# CIFAR-100", "\n", "TRAIN_CIFAR100", ",", "VALID_CIFAR100", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "'cifar100'", ",", "str", "(", "torch_dir", "/", "'cifar.python'", ")", ",", "-", "1", ")", "\n", "print", "(", "'original CIFAR-100: {:} training images and {:} test images : {:} input shape : {:} number of classes'", ".", "format", "(", "len", "(", "TRAIN_CIFAR100", ")", ",", "len", "(", "VALID_CIFAR100", ")", ",", "xshape", ",", "class_num", ")", ")", "\n", "cifar100_splits", "=", "load_config", "(", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'cifar100-test-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "cifar100_splits", ".", "xvalid", "[", ":", "10", "]", "==", "[", "1", ",", "3", ",", "4", ",", "5", ",", "8", ",", "10", ",", "13", ",", "14", ",", "15", ",", "16", "]", "and", "cifar100_splits", ".", "xtest", "[", ":", "10", "]", "==", "[", "0", ",", "2", ",", "6", ",", "7", ",", "9", ",", "11", ",", "12", ",", "17", ",", "20", ",", "24", "]", "\n", "train_cifar100_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_CIFAR100", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_cifar100_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_CIFAR100", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_splits", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test__cifar100_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_CIFAR100", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_splits", ".", "xtest", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'CIFAR-100  : train-loader has {:3d} batch'", ".", "format", "(", "len", "(", "train_cifar100_loader", ")", ")", ")", "\n", "print", "(", "'CIFAR-100  : valid-loader has {:3d} batch'", ".", "format", "(", "len", "(", "valid_cifar100_loader", ")", ")", ")", "\n", "print", "(", "'CIFAR-100  : test--loader has {:3d} batch'", ".", "format", "(", "len", "(", "test__cifar100_loader", ")", ")", ")", "\n", "print", "(", "break_line", ")", "\n", "\n", "imagenet16_config_path", "=", "'configs/nas-benchmark/ImageNet-16.config'", "\n", "imagenet16_config", "=", "load_config", "(", "imagenet16_config_path", ",", "None", ",", "None", ")", "\n", "TRAIN_ImageNet16_120", ",", "VALID_ImageNet16_120", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "'ImageNet16-120'", ",", "str", "(", "torch_dir", "/", "'cifar.python'", "/", "'ImageNet16'", ")", ",", "-", "1", ")", "\n", "print", "(", "'original TRAIN_ImageNet16_120: {:} training images and {:} test images : {:} input shape : {:} number of classes'", ".", "format", "(", "len", "(", "TRAIN_ImageNet16_120", ")", ",", "len", "(", "VALID_ImageNet16_120", ")", ",", "xshape", ",", "class_num", ")", ")", "\n", "imagenet_splits", "=", "load_config", "(", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'imagenet-16-120-test-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "imagenet_splits", ".", "xvalid", "[", ":", "10", "]", "==", "[", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", ",", "16", ",", "18", "]", "and", "imagenet_splits", ".", "xtest", "[", ":", "10", "]", "==", "[", "0", ",", "4", ",", "5", ",", "10", ",", "11", ",", "13", ",", "14", ",", "15", ",", "17", ",", "20", "]", "\n", "train_imagenet_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_ImageNet16_120", ",", "batch_size", "=", "imagenet16_config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_imagenet_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_ImageNet16_120", ",", "batch_size", "=", "imagenet16_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_splits", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test__imagenet_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_ImageNet16_120", ",", "batch_size", "=", "imagenet16_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_splits", ".", "xtest", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'ImageNet-16-120  : train-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "train_imagenet_loader", ")", ",", "imagenet16_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'ImageNet-16-120  : valid-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "valid_imagenet_loader", ")", ",", "imagenet16_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'ImageNet-16-120  : test--loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "test__imagenet_loader", ")", ",", "imagenet16_config", ".", "batch_size", ")", ")", "\n", "\n", "# 'cifar10', 'cifar100', 'ImageNet16-120'", "\n", "loaders", "=", "{", "'cifar10@trainval'", ":", "trainval_cifar10_loader", ",", "\n", "'cifar10@train'", ":", "train_cifar10_loader", ",", "\n", "'cifar10@valid'", ":", "valid_cifar10_loader", ",", "\n", "'cifar10@test'", ":", "test__cifar10_loader", ",", "\n", "'cifar100@train'", ":", "train_cifar100_loader", ",", "\n", "'cifar100@valid'", ":", "valid_cifar100_loader", ",", "\n", "'cifar100@test'", ":", "test__cifar100_loader", ",", "\n", "'ImageNet16-120@train'", ":", "train_imagenet_loader", ",", "\n", "'ImageNet16-120@valid'", ":", "valid_imagenet_loader", ",", "\n", "'ImageNet16-120@test'", ":", "test__imagenet_loader", "}", "\n", "return", "loaders", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.simple_KD_main.simple_KD_train": [[11, 14], ["simple_KD_main.procedure"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure"], ["def", "simple_KD_train", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "'train'", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.simple_KD_main.simple_KD_valid": [[15, 19], ["torch.no_grad", "torch.no_grad", "simple_KD_main.procedure"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure"], ["", "def", "simple_KD_valid", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "None", ",", "None", ",", "'valid'", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.simple_KD_main.loss_KD_fn": [[21, 27], ["torch.log_softmax", "torch.softmax", "criterion", "torch.kl_div"], "function", ["None"], ["", "def", "loss_KD_fn", "(", "criterion", ",", "student_logits", ",", "teacher_logits", ",", "studentFeatures", ",", "teacherFeatures", ",", "targets", ",", "alpha", ",", "temperature", ")", ":", "\n", "  ", "basic_loss", "=", "criterion", "(", "student_logits", ",", "targets", ")", "*", "(", "1.", "-", "alpha", ")", "\n", "log_student", "=", "F", ".", "log_softmax", "(", "student_logits", "/", "temperature", ",", "dim", "=", "1", ")", "\n", "sof_teacher", "=", "F", ".", "softmax", "(", "teacher_logits", "/", "temperature", ",", "dim", "=", "1", ")", "\n", "KD_loss", "=", "F", ".", "kl_div", "(", "log_student", ",", "sof_teacher", ",", "reduction", "=", "'batchmean'", ")", "*", "(", "alpha", "*", "temperature", "*", "temperature", ")", "\n", "return", "basic_loss", "+", "KD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.simple_KD_main.procedure": [[29, 95], ["teacher.eval", "logger.log", "time.time", "enumerate", "logger.log", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "network.train", "data_time.update", "targets.cuda.cuda", "network", "isinstance", "simple_KD_main.loss_KD_fn", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "utils.obtain_accuracy", "Ttop1.update", "Ttop5.update", "batch_time.update", "time.time", "network.eval", "ValueError", "scheduler.update", "optimizer.zero_grad", "torch.no_grad", "torch.no_grad", "teacher", "hasattr", "criterion", "loss_KD_fn.backward", "optimizer.step", "loss_KD_fn.item", "inputs.size", "sprec1.item", "inputs.size", "sprec5.item", "inputs.size", "tprec1.item", "inputs.size", "tprec5.item", "inputs.size", "logger.log", "mode.upper", "hasattr", "time.time", "len", "len", "time.time", "len", "list", "mode.upper", "len", "log_utils.time_string", "len", "scheduler.get_min_info", "inputs.size", "mode.upper"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.simple_KD_main.loss_KD_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.get_min_info"], ["", "def", "procedure", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "mode", ",", "config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "Ttop1", ",", "Ttop5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "    ", "network", ".", "train", "(", ")", "\n", "", "elif", "mode", "==", "'valid'", ":", "\n", "    ", "network", ".", "eval", "(", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "\"The mode is not right : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "teacher", ".", "eval", "(", ")", "\n", "\n", "logger", ".", "log", "(", "'[{:5s}] config :: auxiliary={:}, KD :: [alpha={:.2f}, temperature={:.2f}]'", ".", "format", "(", "mode", ",", "config", ".", "auxiliary", "if", "hasattr", "(", "config", ",", "'auxiliary'", ")", "else", "-", "1", ",", "config", ".", "KD_alpha", ",", "config", ".", "KD_temperature", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "i", "/", "len", "(", "xloader", ")", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# calculate prediction and loss", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "student_f", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "if", "isinstance", "(", "logits", ",", "list", ")", ":", "\n", "      ", "assert", "len", "(", "logits", ")", "==", "2", ",", "'logits must has {:} items instead of {:}'", ".", "format", "(", "2", ",", "len", "(", "logits", ")", ")", "\n", "logits", ",", "logits_aux", "=", "logits", "\n", "", "else", ":", "\n", "      ", "logits", ",", "logits_aux", "=", "logits", ",", "None", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "teacher_f", ",", "teacher_logits", "=", "teacher", "(", "inputs", ")", "\n", "\n", "", "loss", "=", "loss_KD_fn", "(", "criterion", ",", "logits", ",", "teacher_logits", ",", "student_f", ",", "teacher_f", ",", "targets", ",", "config", ".", "KD_alpha", ",", "config", ".", "KD_temperature", ")", "\n", "if", "config", "is", "not", "None", "and", "hasattr", "(", "config", ",", "'auxiliary'", ")", "and", "config", ".", "auxiliary", ">", "0", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "targets", ")", "\n", "loss", "+=", "config", ".", "auxiliary", "*", "loss_aux", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "      ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "", "sprec1", ",", "sprec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "sprec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "sprec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "# teacher", "\n", "tprec1", ",", "tprec5", "=", "obtain_accuracy", "(", "teacher_logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "Ttop1", ".", "update", "(", "tprec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "Ttop5", ".", "update", "(", "tprec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "xloader", ")", ":", "\n", "      ", "Sstr", "=", "' {:5s} '", ".", "format", "(", "mode", ".", "upper", "(", ")", ")", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "extra_info", ",", "i", ",", "len", "(", "xloader", ")", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "        ", "Sstr", "+=", "' {:}'", ".", "format", "(", "scheduler", ".", "get_min_info", "(", ")", ")", "\n", "", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Lstr", "+=", "' Teacher : acc@1={:.2f}, acc@5={:.2f}'", ".", "format", "(", "Ttop1", ".", "avg", ",", "Ttop5", ".", "avg", ")", "\n", "Istr", "=", "'Size={:}'", ".", "format", "(", "list", "(", "inputs", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Istr", ")", "\n", "\n", "", "", "logger", ".", "log", "(", "' **{:5s}** accuracy drop :: @1={:.2f}, @5={:.2f}'", ".", "format", "(", "mode", ".", "upper", "(", ")", ",", "Ttop1", ".", "avg", "-", "top1", ".", "avg", ",", "Ttop5", ".", "avg", "-", "top5", ".", "avg", ")", ")", "\n", "logger", ".", "log", "(", "' **{mode:5s}** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Loss:{loss:.3f}'", ".", "format", "(", "mode", "=", "mode", ".", "upper", "(", ")", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.basic_train": [[9, 12], ["basic_main.procedure"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure"], ["def", "basic_train", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "'train'", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.basic_valid": [[14, 18], ["torch.no_grad", "basic_main.procedure"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure"], ["", "def", "basic_valid", "(", "xloader", ",", "network", ",", "criterion", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "None", ",", "None", ",", "'valid'", ",", "None", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.basic_main.procedure": [[20, 76], ["logger.log", "time.time", "enumerate", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "network.train", "data_time.update", "targets.cuda.cuda", "network", "isinstance", "criterion", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "batch_time.update", "time.time", "network.eval", "ValueError", "scheduler.update", "optimizer.zero_grad", "hasattr", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "logger.log", "hasattr", "time.time", "len", "len", "time.time", "len", "list", "mode.upper", "len", "log_utils.time_string", "len", "scheduler.get_min_info", "inputs.size", "mode.upper"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.get_min_info"], ["", "def", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "mode", ",", "config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "    ", "network", ".", "train", "(", ")", "\n", "", "elif", "mode", "==", "'valid'", ":", "\n", "    ", "network", ".", "eval", "(", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "\"The mode is not right : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n", "#logger.log('[{:5s}] config ::  auxiliary={:}, message={:}'.format(mode, config.auxiliary if hasattr(config, 'auxiliary') else -1, network.module.get_message()))", "\n", "logger", ".", "log", "(", "'[{:5s}] config ::  auxiliary={:}'", ".", "format", "(", "mode", ",", "config", ".", "auxiliary", "if", "hasattr", "(", "config", ",", "'auxiliary'", ")", "else", "-", "1", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "i", "/", "len", "(", "xloader", ")", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# calculate prediction and loss", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "features", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "if", "isinstance", "(", "logits", ",", "list", ")", ":", "\n", "      ", "assert", "len", "(", "logits", ")", "==", "2", ",", "'logits must has {:} items instead of {:}'", ".", "format", "(", "2", ",", "len", "(", "logits", ")", ")", "\n", "logits", ",", "logits_aux", "=", "logits", "\n", "", "else", ":", "\n", "      ", "logits", ",", "logits_aux", "=", "logits", ",", "None", "\n", "", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "if", "config", "is", "not", "None", "and", "hasattr", "(", "config", ",", "'auxiliary'", ")", "and", "config", ".", "auxiliary", ">", "0", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "targets", ")", "\n", "loss", "+=", "config", ".", "auxiliary", "*", "loss_aux", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "      ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "xloader", ")", ":", "\n", "      ", "Sstr", "=", "' {:5s} '", ".", "format", "(", "mode", ".", "upper", "(", ")", ")", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "extra_info", ",", "i", ",", "len", "(", "xloader", ")", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "        ", "Sstr", "+=", "' {:}'", ".", "format", "(", "scheduler", ".", "get_min_info", "(", ")", ")", "\n", "", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Istr", "=", "'Size={:}'", ".", "format", "(", "list", "(", "inputs", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Istr", ")", "\n", "\n", "", "", "logger", ".", "log", "(", "' **{mode:5s}** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Loss:{loss:.3f}'", ".", "format", "(", "mode", "=", "mode", ".", "upper", "(", ")", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main_v2.get_flop_loss": [[10, 22], ["torch.mean", "torch.log", "torch.log", "torch.log.item"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["def", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", ":", "\n", "  ", "expected_flop", "=", "torch", ".", "mean", "(", "expected_flop", ")", "\n", "\n", "if", "flop_cur", "<", "flop_need", "-", "flop_tolerant", ":", "# Too Small FLOP", "\n", "    ", "loss", "=", "-", "torch", ".", "log", "(", "expected_flop", ")", "\n", "#elif flop_cur > flop_need + flop_tolerant: # Too Large FLOP", "\n", "", "elif", "flop_cur", ">", "flop_need", ":", "# Too Large FLOP", "\n", "    ", "loss", "=", "torch", ".", "log", "(", "expected_flop", ")", "\n", "", "else", ":", "# Required FLOP", "\n", "    ", "loss", "=", "None", "\n", "", "if", "loss", "is", "None", ":", "return", "0", ",", "0", "\n", "else", ":", "return", "loss", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main_v2.search_train_v2": [[24, 88], ["network.train", "logger.log", "time.time", "network.apply", "enumerate", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "models.change_key", "scheduler.update", "base_targets.cuda.cuda", "arch_targets.cuda.cuda", "data_time.update", "base_optimizer.zero_grad", "network", "criterion", "criterion.backward", "base_optimizer.step", "utils.obtain_accuracy", "base_losses.update", "top1.update", "top5.update", "arch_optimizer.zero_grad", "network", "network.module.get_flop", "search_main_v2.get_flop_loss", "criterion", "arch_loss.backward", "arch_optimizer.step", "arch_losses.update", "arch_flop_losses.update", "arch_cls_losses.update", "batch_time.update", "time.time", "criterion.item", "base_inputs.size", "prec1.item", "base_inputs.size", "prec5.item", "base_inputs.size", "arch_loss.item", "arch_inputs.size", "arch_inputs.size", "criterion.item", "arch_inputs.size", "logger.log", "len", "time.time", "time.time", "len", "log_utils.time_string", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.change_key", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.evaluation_utils.obtain_accuracy", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop", "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.search_main_v2.get_flop_loss", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["", "def", "search_train_v2", "(", "search_loader", ",", "network", ",", "criterion", ",", "scheduler", ",", "base_optimizer", ",", "arch_optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "base_losses", ",", "arch_losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "arch_cls_losses", ",", "arch_flop_losses", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "epoch_str", ",", "flop_need", ",", "flop_weight", ",", "flop_tolerant", "=", "extra_info", "[", "'epoch-str'", "]", ",", "extra_info", "[", "'FLOP-exp'", "]", ",", "extra_info", "[", "'FLOP-weight'", "]", ",", "extra_info", "[", "'FLOP-tolerant'", "]", "\n", "\n", "network", ".", "train", "(", ")", "\n", "logger", ".", "log", "(", "'[Search] : {:}, FLOP-Require={:.2f} MB, FLOP-WEIGHT={:.2f}'", ".", "format", "(", "epoch_str", ",", "flop_need", ",", "flop_weight", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "network", ".", "apply", "(", "change_key", "(", "'search_mode'", ",", "'search'", ")", ")", "\n", "for", "step", ",", "(", "base_inputs", ",", "base_targets", ",", "arch_inputs", ",", "arch_targets", ")", "in", "enumerate", "(", "search_loader", ")", ":", "\n", "    ", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "step", "/", "len", "(", "search_loader", ")", ")", "\n", "# calculate prediction and loss", "\n", "base_targets", "=", "base_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "arch_targets", "=", "arch_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# update the weights", "\n", "base_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "base_inputs", ")", "\n", "base_loss", "=", "criterion", "(", "logits", ",", "base_targets", ")", "\n", "base_loss", ".", "backward", "(", ")", "\n", "base_optimizer", ".", "step", "(", ")", "\n", "# record", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "base_targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "base_losses", ".", "update", "(", "base_loss", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# update the architecture", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "arch_inputs", ")", "\n", "flop_cur", "=", "network", ".", "module", ".", "get_flop", "(", "'genotype'", ",", "None", ",", "None", ")", "\n", "flop_loss", ",", "flop_loss_scale", "=", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", "\n", "acls_loss", "=", "criterion", "(", "logits", ",", "arch_targets", ")", "\n", "arch_loss", "=", "acls_loss", "+", "flop_loss", "*", "flop_weight", "\n", "arch_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "arch_losses", ".", "update", "(", "arch_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_flop_losses", ".", "update", "(", "flop_loss_scale", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_cls_losses", ".", "update", "(", "acls_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "%", "print_freq", "==", "0", "or", "(", "step", "+", "1", ")", "==", "len", "(", "search_loader", ")", ":", "\n", "      ", "Sstr", "=", "'**TRAIN** '", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "epoch_str", ",", "step", ",", "len", "(", "search_loader", ")", ")", "\n", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Base-Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "base_losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Vstr", "=", "'Acls-loss {aloss.val:.3f} ({aloss.avg:.3f}) FLOP-Loss {floss.val:.3f} ({floss.avg:.3f}) Arch-Loss {loss.val:.3f} ({loss.avg:.3f})'", ".", "format", "(", "aloss", "=", "arch_cls_losses", ",", "floss", "=", "arch_flop_losses", ",", "loss", "=", "arch_losses", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Vstr", ")", "\n", "#num_bytes = torch.cuda.max_memory_allocated( next(network.parameters()).device ) * 1.0", "\n", "#logger.log(Sstr + ' ' + Tstr + ' ' + Lstr + ' ' + Vstr + ' GPU={:.2f}MB'.format(num_bytes/1e6))", "\n", "#Istr = 'Bsz={:} Asz={:}'.format(list(base_inputs.size()), list(arch_inputs.size()))", "\n", "#logger.log(Sstr + ' ' + Tstr + ' ' + Lstr + ' ' + Vstr + ' ' + Istr)", "\n", "#print(network.module.get_arch_info())", "\n", "#print(network.module.width_attentions[0])", "\n", "#print(network.module.width_attentions[1])", "\n", "\n", "", "", "logger", ".", "log", "(", "' **TRAIN** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Base-Loss:{baseloss:.3f}, Arch-Loss={archloss:.3f}'", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "baseloss", "=", "base_losses", ".", "avg", ",", "archloss", "=", "arch_losses", ".", "avg", ")", ")", "\n", "return", "base_losses", ".", "avg", ",", "arch_losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.__init__.get_procedures": [[10, 26], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.__init__": [[12, 23], ["list", "isinstance", "TypeError", "group.setdefault", "map", "type"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'{:} is not an Optimizer'", ".", "format", "(", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "      ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "max_epochs", "=", "epochs", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "current_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.extra_repr": [[24, 26], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.__repr__": [[27, 30], ["optimizers._LRScheduler.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(warmup={warmup_epochs}, max-epoch={max_epochs}, current::epoch={current_epoch}, iter={current_iter:.2f}'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "+", "', {:})'", ".", "format", "(", "self", ".", "extra_repr", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.state_dict": [[31, 33], ["optimizers._LRScheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.load_state_dict": [[34, 36], ["optimizers._LRScheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.get_lr": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.get_min_info": [[40, 43], ["optimizers._LRScheduler.get_lr", "min", "max"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.get_lr"], ["", "def", "get_min_info", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "self", ".", "get_lr", "(", ")", "\n", "return", "'#LR=[{:.6f}~{:.6f}] epoch={:03d}, iter={:4.2f}#'", ".", "format", "(", "min", "(", "lrs", ")", ",", "max", "(", "lrs", ")", ",", "self", ".", "current_epoch", ",", "self", ".", "current_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.get_min_lr": [[44, 46], ["min", "optimizers._LRScheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.get_lr"], ["", "def", "get_min_lr", "(", "self", ")", ":", "\n", "    ", "return", "min", "(", "self", ".", "get_lr", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers._LRScheduler.update": [[47, 56], ["zip", "optimizers._LRScheduler.get_lr", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.get_lr"], ["", "def", "update", "(", "self", ",", "cur_epoch", ",", "cur_iter", ")", ":", "\n", "    ", "if", "cur_epoch", "is", "not", "None", ":", "\n", "      ", "assert", "isinstance", "(", "cur_epoch", ",", "int", ")", "and", "cur_epoch", ">=", "0", ",", "'invalid cur-epoch : {:}'", ".", "format", "(", "cur_epoch", ")", "\n", "self", ".", "current_epoch", "=", "cur_epoch", "\n", "", "if", "cur_iter", "is", "not", "None", ":", "\n", "      ", "assert", "isinstance", "(", "cur_iter", ",", "float", ")", "and", "cur_iter", ">=", "0", ",", "'invalid cur-iter : {:}'", ".", "format", "(", "cur_iter", ")", "\n", "self", ".", "current_iter", "=", "cur_iter", "\n", "", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "      ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.CosineAnnealingLR.__init__": [[61, 65], ["optimizers._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "T_max", ",", "eta_min", ")", ":", "\n", "    ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.CosineAnnealingLR.extra_repr": [[66, 68], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, T-max={:}, eta-min={:}'", ".", "format", "(", "'cosine'", ",", "self", ".", "T_max", ",", "self", ".", "eta_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.CosineAnnealingLR.get_lr": [[69, 85], ["lrs.append", "math.cos"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", "and", "self", ".", "current_epoch", "<", "self", ".", "max_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "#if last_epoch < self.T_max:", "\n", "#if last_epoch < self.max_epochs:", "\n", "lr", "=", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "#else:", "\n", "#  lr = self.eta_min + (base_lr - self.eta_min) * (1 + math.cos(math.pi * (self.T_max-1.0) / self.T_max)) / 2", "\n", "", "elif", "self", ".", "current_epoch", ">=", "self", ".", "max_epochs", ":", "\n", "        ", "lr", "=", "self", ".", "eta_min", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.MultiStepLR.__init__": [[90, 95], ["optimizers._LRScheduler.__init__", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "milestones", ",", "gammas", ")", ":", "\n", "    ", "assert", "len", "(", "milestones", ")", "==", "len", "(", "gammas", ")", ",", "'invalid {:} vs {:}'", ".", "format", "(", "len", "(", "milestones", ")", ",", "len", "(", "gammas", ")", ")", "\n", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gammas", "=", "gammas", "\n", "super", "(", "MultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.MultiStepLR.extra_repr": [[96, 98], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, milestones={:}, gammas={:}, base-lrs={:}'", ".", "format", "(", "'multistep'", ",", "self", ".", "milestones", ",", "self", ".", "gammas", ",", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.MultiStepLR.get_lr": [[99, 111], ["lrs.append", "bisect.bisect_right"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "idx", "=", "bisect_right", "(", "self", ".", "milestones", ",", "last_epoch", ")", "\n", "lr", "=", "base_lr", "\n", "for", "x", "in", "self", ".", "gammas", "[", ":", "idx", "]", ":", "lr", "*=", "x", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.ExponentialLR.__init__": [[115, 118], ["optimizers._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "gamma", ")", ":", "\n", "    ", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "ExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.ExponentialLR.extra_repr": [[119, 121], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, gamma={:}, base-lrs={:}'", ".", "format", "(", "'exponential'", ",", "self", ".", "gamma", ",", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.ExponentialLR.get_lr": [[122, 133], ["lrs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "assert", "last_epoch", ">=", "0", ",", "'invalid last_epoch : {:}'", ".", "format", "(", "last_epoch", ")", "\n", "lr", "=", "base_lr", "*", "(", "self", ".", "gamma", "**", "last_epoch", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.__init__": [[137, 141], ["optimizers._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "max_LR", ",", "min_LR", ")", ":", "\n", "    ", "self", ".", "max_LR", "=", "max_LR", "\n", "self", ".", "min_LR", "=", "min_LR", "\n", "super", "(", "LinearLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.extra_repr": [[142, 144], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, max_LR={:}, min_LR={:}, base-lrs={:}'", ".", "format", "(", "'LinearLR'", ",", "self", ".", "max_LR", ",", "self", ".", "min_LR", ",", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.LinearLR.get_lr": [[145, 157], ["lrs.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "assert", "last_epoch", ">=", "0", ",", "'invalid last_epoch : {:}'", ".", "format", "(", "last_epoch", ")", "\n", "ratio", "=", "(", "self", ".", "max_LR", "-", "self", ".", "min_LR", ")", "*", "last_epoch", "/", "self", ".", "max_epochs", "/", "self", ".", "max_LR", "\n", "lr", "=", "base_lr", "*", "(", "1", "-", "ratio", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.CrossEntropyLabelSmooth.__init__": [[162, 167], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.CrossEntropyLabelSmooth.forward": [[168, 174], ["optimizers.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.procedures.optimizers.get_optim_scheduler": [[177, 205], ["hasattr", "hasattr", "hasattr", "torch.optim.SGD", "torch.optim.SGD", "getattr", "optimizers.CosineAnnealingLR", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.RMSprop", "torch.optim.RMSprop", "ValueError", "optimizers.MultiStepLR", "optimizers.CrossEntropyLabelSmooth", "ValueError", "optimizers.ExponentialLR", "optimizers.LinearLR", "ValueError"], "function", ["None"], ["", "", "def", "get_optim_scheduler", "(", "parameters", ",", "config", ")", ":", "\n", "  ", "assert", "hasattr", "(", "config", ",", "'optim'", ")", "and", "hasattr", "(", "config", ",", "'scheduler'", ")", "and", "hasattr", "(", "config", ",", "'criterion'", ")", ",", "'config must have optim / scheduler / criterion keys instead of {:}'", ".", "format", "(", "config", ")", "\n", "if", "config", ".", "optim", "==", "'SGD'", ":", "\n", "    ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "config", ".", "LR", ",", "momentum", "=", "config", ".", "momentum", ",", "weight_decay", "=", "config", ".", "decay", ",", "nesterov", "=", "config", ".", "nesterov", ")", "\n", "", "elif", "config", ".", "optim", "==", "'RMSprop'", ":", "\n", "    ", "optim", "=", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "config", ".", "LR", ",", "momentum", "=", "config", ".", "momentum", ",", "weight_decay", "=", "config", ".", "decay", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid optim : {:}'", ".", "format", "(", "config", ".", "optim", ")", ")", "\n", "\n", "", "if", "config", ".", "scheduler", "==", "'cos'", ":", "\n", "    ", "T_max", "=", "getattr", "(", "config", ",", "'T_max'", ",", "config", ".", "epochs", ")", "\n", "scheduler", "=", "CosineAnnealingLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "T_max", ",", "config", ".", "eta_min", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "'multistep'", ":", "\n", "    ", "scheduler", "=", "MultiStepLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "config", ".", "milestones", ",", "config", ".", "gammas", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "'exponential'", ":", "\n", "    ", "scheduler", "=", "ExponentialLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "config", ".", "gamma", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "'linear'", ":", "\n", "    ", "scheduler", "=", "LinearLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "config", ".", "LR", ",", "config", ".", "LR_min", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid scheduler : {:}'", ".", "format", "(", "config", ".", "scheduler", ")", ")", "\n", "\n", "", "if", "config", ".", "criterion", "==", "'Softmax'", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "elif", "config", ".", "criterion", "==", "'SmoothSoftmax'", ":", "\n", "    ", "criterion", "=", "CrossEntropyLabelSmooth", "(", "config", ".", "class_num", ",", "config", ".", "label_smooth", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid criterion : {:}'", ".", "format", "(", "config", ".", "criterion", ")", ")", "\n", "", "return", "optim", ",", "scheduler", ",", "criterion", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarWideResNet.WideBasicblock.__init__": [[8, 25], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "super", "(", "WideBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "dropout", ":", "\n", "      ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "dropout", "=", "None", "\n", "", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarWideResNet.WideBasicblock.forward": [[26, 42], ["CifarWideResNet.WideBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "CifarWideResNet.WideBasicblock.conv_a", "CifarWideResNet.WideBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "CifarWideResNet.WideBasicblock.conv_b", "CifarWideResNet.WideBasicblock.dropout", "CifarWideResNet.WideBasicblock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "bn_a", "(", "x", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "basicblock", ")", "\n", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "      ", "basicblock", "=", "self", ".", "dropout", "(", "basicblock", ")", "\n", "", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "x", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarWideResNet.CifarWideResNet.__init__": [[49, 71], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "CifarWideResNet.CifarWideResNet._make_layer", "CifarWideResNet.CifarWideResNet._make_layer", "CifarWideResNet.CifarWideResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "CifarWideResNet.CifarWideResNet.apply", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "CifarWideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "print", "(", "'CifarPreResNet : Depth : {} , Layers for each block : {}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "conv_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "message", "=", "'Wide ResNet : depth={:}, widen_factor={:}, class={:}'", ".", "format", "(", "depth", ",", "widen_factor", ",", "num_classes", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "WideBasicblock", ",", "16", "*", "widen_factor", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "WideBasicblock", ",", "32", "*", "widen_factor", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "WideBasicblock", ",", "64", "*", "widen_factor", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "64", "*", "widen_factor", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "widen_factor", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarWideResNet.CifarWideResNet.get_message": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarWideResNet.CifarWideResNet._make_layer": [[75, 84], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "\n", "    ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "self", ".", "dropout", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "self", ".", "dropout", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarWideResNet.CifarWideResNet.forward": [[85, 95], ["CifarWideResNet.CifarWideResNet.conv_3x3", "CifarWideResNet.CifarWideResNet.stage_1", "CifarWideResNet.CifarWideResNet.stage_2", "CifarWideResNet.CifarWideResNet.stage_3", "CifarWideResNet.CifarWideResNet.lastact", "CifarWideResNet.CifarWideResNet.avgpool", "CifarWideResNet.CifarWideResNet.view", "CifarWideResNet.CifarWideResNet.classifier", "CifarWideResNet.CifarWideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv_3x3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "lastact", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "outs", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "outs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.initialization.initialize_resnet": [[5, 17], ["isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["def", "initialize_resnet", "(", "m", ")", ":", "\n", "  ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "      ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "      ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_conv": [[5, 12], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "init.weight.detach", "init.bias.detach"], "function", ["None"], ["def", "copy_conv", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "Conv2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "new_i", ",", "new_o", "=", "module", ".", "in_channels", ",", "module", ".", "out_channels", "\n", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "new_o", ",", ":", "new_i", "]", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "new_o", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_bn": [[13, 25], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "module.running_mean.copy_", "module.running_var.copy_", "init.weight.detach", "init.bias.detach", "init.running_mean.detach", "init.running_var.detach"], "function", ["None"], ["", "", "def", "copy_bn", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "BatchNorm2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "num_features", "=", "module", ".", "num_features", "\n", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "    ", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "running_mean", "is", "not", "None", ":", "\n", "    ", "module", ".", "running_mean", ".", "copy_", "(", "init", ".", "running_mean", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "running_var", "is", "not", "None", ":", "\n", "    ", "module", ".", "running_var", ".", "copy_", "(", "init", ".", "running_var", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_fc": [[26, 33], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "init.weight.detach", "init.bias.detach"], "function", ["None"], ["", "", "def", "copy_fc", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "Linear", ")", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "new_i", ",", "new_o", "=", "module", ".", "in_features", ",", "module", ".", "out_features", "\n", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "new_o", ",", ":", "new_i", "]", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "new_o", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_base": [[34, 41], ["clone_weights.copy_conv", "clone_weights.copy_bn", "type", "type"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_conv", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_bn"], ["", "", "def", "copy_base", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "type", "(", "module", ")", ".", "__name__", "in", "[", "'ConvBNReLU'", ",", "'Downsample'", "]", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "type", "(", "init", ")", ".", "__name__", "in", "[", "'ConvBNReLU'", ",", "'Downsample'", "]", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "if", "module", ".", "conv", "is", "not", "None", ":", "\n", "    ", "copy_conv", "(", "module", ".", "conv", ",", "init", ".", "conv", ")", "\n", "", "if", "module", ".", "bn", "is", "not", "None", ":", "\n", "    ", "copy_bn", "(", "module", ".", "bn", ",", "init", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_basic": [[42, 48], ["clone_weights.copy_base", "clone_weights.copy_base", "clone_weights.copy_base"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_base", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_base", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_base"], ["", "", "def", "copy_basic", "(", "module", ",", "init", ")", ":", "\n", "  ", "copy_base", "(", "module", ".", "conv_a", ",", "init", ".", "conv_a", ")", "\n", "copy_base", "(", "module", ".", "conv_b", ",", "init", ".", "conv_b", ")", "\n", "if", "module", ".", "downsample", "is", "not", "None", ":", "\n", "    ", "if", "init", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "copy_base", "(", "module", ".", "downsample", ",", "init", ".", "downsample", ")", "\n", "#else:", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.init_from_model": [[52, 63], ["torch.no_grad", "torch.no_grad", "clone_weights.copy_fc", "zip", "clone_weights.copy_base", "type", "type", "type", "clone_weights.copy_basic", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_fc", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_base", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.clone_weights.copy_basic"], ["", "", "", "def", "init_from_model", "(", "network", ",", "init_model", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "copy_fc", "(", "network", ".", "classifier", ",", "init_model", ".", "classifier", ")", "\n", "for", "base", ",", "target", "in", "zip", "(", "init_model", ".", "layers", ",", "network", ".", "layers", ")", ":", "\n", "      ", "assert", "type", "(", "base", ")", ".", "__name__", "==", "type", "(", "target", ")", ".", "__name__", ",", "'invalid type : {:} vs {:}'", ".", "format", "(", "base", ",", "target", ")", "\n", "if", "type", "(", "base", ")", ".", "__name__", "==", "'ConvBNReLU'", ":", "\n", "        ", "copy_base", "(", "target", ",", "base", ")", "\n", "", "elif", "type", "(", "base", ")", ".", "__name__", "==", "'ResNetBasicblock'", ":", "\n", "        ", "copy_basic", "(", "target", ",", "base", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unknown type name : {:}'", ".", "format", "(", "type", "(", "base", ")", ".", "__name__", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func": [[8, 21], ["min", "A.size", "B.size", "A.size", "B.size", "A.size", "B.size", "A.dim", "B.dim", "A.size", "B.size", "A.size", "B.size", "B.clone", "A.clone"], "function", ["None"], ["def", "additive_func", "(", "A", ",", "B", ")", ":", "\n", "  ", "assert", "A", ".", "dim", "(", ")", "==", "B", ".", "dim", "(", ")", "and", "A", ".", "size", "(", "0", ")", "==", "B", ".", "size", "(", "0", ")", ",", "'{:} vs {:}'", ".", "format", "(", "A", ".", "size", "(", ")", ",", "B", ".", "size", "(", ")", ")", "\n", "C", "=", "min", "(", "A", ".", "size", "(", "1", ")", ",", "B", ".", "size", "(", "1", ")", ")", "\n", "if", "A", ".", "size", "(", "1", ")", "==", "B", ".", "size", "(", "1", ")", ":", "\n", "    ", "return", "A", "+", "B", "\n", "", "elif", "A", ".", "size", "(", "1", ")", "<", "B", ".", "size", "(", "1", ")", ":", "\n", "    ", "out", "=", "B", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "A", "\n", "return", "out", "\n", "", "else", ":", "\n", "    ", "out", "=", "A", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "B", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.change_key": [[23, 28], ["hasattr", "setattr"], "function", ["None"], ["", "", "def", "change_key", "(", "key", ",", "value", ")", ":", "\n", "  ", "def", "func", "(", "m", ")", ":", "\n", "    ", "if", "hasattr", "(", "m", ",", "key", ")", ":", "\n", "      ", "setattr", "(", "m", ",", "key", ",", "value", ")", "\n", "", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.parse_channel_info": [[30, 35], ["xstring.split", "x.split", "int"], "function", ["None"], ["", "def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "  ", "blocks", "=", "xstring", ".", "split", "(", "' '", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.Bottleneck.__init__": [[11, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "interChannels", "=", "4", "*", "growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "interChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "interChannels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "interChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.Bottleneck.forward": [[19, 24], ["CifarDenseNet.Bottleneck.conv1", "CifarDenseNet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.Bottleneck.bn1", "CifarDenseNet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.SingleLayer.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "    ", "super", "(", "SingleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.SingleLayer.forward": [[32, 36], ["CifarDenseNet.SingleLayer.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.SingleLayer.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.Transition.__init__": [[39, 43], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nOutChannels", ")", ":", "\n", "    ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "nOutChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.Transition.forward": [[44, 48], ["CifarDenseNet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.Transition.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet.__init__": [[51, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "CifarDenseNet.DenseNet._make_dense", "int", "CifarDenseNet.Transition", "CifarDenseNet.DenseNet._make_dense", "int", "CifarDenseNet.Transition", "CifarDenseNet.DenseNet._make_dense", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "CifarDenseNet.DenseNet.apply", "int", "int", "math.floor", "math.floor", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet._make_dense", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet._make_dense", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet._make_dense"], ["  ", "def", "__init__", "(", "self", ",", "growthRate", ",", "depth", ",", "reduction", ",", "nClasses", ",", "bottleneck", ")", ":", "\n", "    ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bottleneck", ":", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "else", ":", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "3", ")", "\n", "\n", "self", ".", "message", "=", "'CifarDenseNet : block : {:}, depth : {:}, reduction : {:}, growth-rate = {:}, class = {:}'", ".", "format", "(", "'bottleneck'", "if", "bottleneck", "else", "'basic'", ",", "depth", ",", "reduction", ",", "growthRate", ",", "nClasses", ")", "\n", "\n", "nChannels", "=", "2", "*", "growthRate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "\n", "self", ".", "act", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", ",", "nClasses", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet.get_message": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet._make_dense": [[87, 96], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "layers.append", "CifarDenseNet.Bottleneck", "CifarDenseNet.SingleLayer"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_make_dense", "(", "self", ",", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nDenseBlocks", ")", ")", ":", "\n", "      ", "if", "bottleneck", ":", "\n", "        ", "layers", ".", "append", "(", "Bottleneck", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "else", ":", "\n", "        ", "layers", ".", "append", "(", "SingleLayer", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "nChannels", "+=", "growthRate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarDenseNet.DenseNet.forward": [[97, 106], ["CifarDenseNet.DenseNet.conv1", "CifarDenseNet.DenseNet.trans1", "CifarDenseNet.DenseNet.trans2", "CifarDenseNet.DenseNet.dense3", "CifarDenseNet.DenseNet.act", "features.view.view.view", "CifarDenseNet.DenseNet.fc", "CifarDenseNet.DenseNet.dense1", "CifarDenseNet.DenseNet.dense2", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense3", "(", "out", ")", "\n", "features", "=", "self", ".", "act", "(", "out", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "features", ")", "\n", "return", "features", ",", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.BasicBlock.__init__": [[16, 28], ["torch.Module.__init__", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv3x3", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "      ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.BasicBlock.forward": [[29, 46], ["ImageNet_ResNet.BasicBlock.conv1", "ImageNet_ResNet.BasicBlock.bn1", "ImageNet_ResNet.BasicBlock.relu", "ImageNet_ResNet.BasicBlock.conv2", "ImageNet_ResNet.BasicBlock.bn2", "ImageNet_ResNet.BasicBlock.relu", "ImageNet_ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.Bottleneck.__init__": [[51, 64], ["torch.Module.__init__", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv1x1", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv3x3", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.Bottleneck.forward": [[65, 86], ["ImageNet_ResNet.Bottleneck.conv1", "ImageNet_ResNet.Bottleneck.bn1", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.conv2", "ImageNet_ResNet.Bottleneck.bn2", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.conv3", "ImageNet_ResNet.Bottleneck.bn3", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet.__init__": [[90, 131], ["torch.Module.__init__", "torch.MaxPool2d", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Linear", "ImageNet_ResNet.ResNet.apply", "torch.Sequential", "torch.Sequential", "ImageNet_ResNet.ResNet.modules", "ValueError", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "isinstance", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "deep_stem", ",", "num_classes", ",", "zero_init_residual", ",", "groups", ",", "width_per_group", ")", ":", "\n", "    ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#planes = [int(width_per_group * groups * 2 ** i) for i in range(4)]", "\n", "if", "block_name", "==", "'BasicBlock'", ":", "block", "=", "BasicBlock", "\n", "elif", "block_name", "==", "'Bottleneck'", ":", "block", "=", "Bottleneck", "\n", "else", ":", "raise", "ValueError", "(", "'invalid block-name : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "if", "not", "deep_stem", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "message", "=", "'block = {:}, layers = {:}, deep_stem = {:}, num_classes = {:}'", ".", "format", "(", "block", ",", "layers", ",", "deep_stem", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet._make_layer": [[132, 155], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "torch.Sequential", "block", "torch.AvgPool2d", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "torch.Sequential", "ValueError", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv1x1", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "groups", ",", "base_width", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "if", "stride", "==", "2", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid stride [{:}] for downsample'", ".", "format", "(", "stride", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "groups", ",", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "groups", ",", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet.get_message": [[156, 158], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.ResNet.forward": [[159, 173], ["ImageNet_ResNet.ResNet.conv", "ImageNet_ResNet.ResNet.maxpool", "ImageNet_ResNet.ResNet.layer1", "ImageNet_ResNet.ResNet.layer2", "ImageNet_ResNet.ResNet.layer3", "ImageNet_ResNet.ResNet.layer4", "ImageNet_ResNet.ResNet.avgpool", "features.view.view.view", "ImageNet_ResNet.ResNet.fc", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "features", ")", "\n", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv3x3": [[5, 7], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "  ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_ResNet.conv1x1": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.ReLUConvBN.__init__": [[36, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.ReLUConvBN.forward": [[44, 46], ["cell_operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.SepConv.__init__": [[50, 57], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.SepConv.forward": [[59, 61], ["cell_operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.DualSepConv.__init__": [[65, 69], ["torch.Module.__init__", "cell_operations.SepConv", "cell_operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "DualSepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op_a", "=", "SepConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "op_b", "=", "SepConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.DualSepConv.forward": [[70, 74], ["cell_operations.DualSepConv.op_a", "cell_operations.DualSepConv.op_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "op_a", "(", "x", ")", "\n", "x", "=", "self", ".", "op_b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.ResNetBasicblock.__init__": [[78, 95], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "cell_operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "in_dim", "=", "inplanes", "\n", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.ResNetBasicblock.extra_repr": [[96, 99], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'{name}(inC={in_dim}, outC={out_dim}, stride={stride})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.ResNetBasicblock.forward": [[100, 110], ["cell_operations.ResNetBasicblock.conv_a", "cell_operations.ResNetBasicblock.conv_b", "cell_operations.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.POOLING.__init__": [[114, 123], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "mode", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "C_in", "==", "C_out", ":", "\n", "      ", "self", ".", "preprocess", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "if", "mode", "==", "'avg'", ":", "self", ".", "op", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "elif", "mode", "==", "'max'", ":", "self", ".", "op", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid mode={:} in POOLING'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.POOLING.forward": [[124, 128], ["cell_operations.POOLING.op", "cell_operations.POOLING.preprocess"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "preprocess", ":", "x", "=", "self", ".", "preprocess", "(", "inputs", ")", "\n", "else", ":", "x", "=", "inputs", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.Identity.__init__": [[132, 134], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.Identity.forward": [[135, 137], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.Zero.__init__": [[141, 147], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_zero", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.Zero.forward": [[148, 157], ["list", "x.new_zeros", "x.mul", "x[].mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "      ", "if", "self", ".", "stride", "==", "1", ":", "return", "x", ".", "mul", "(", "0.", ")", "\n", "else", ":", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "", "else", ":", "\n", "      ", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "self", ".", "C_out", "\n", "zeros", "=", "x", ".", "new_zeros", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.Zero.extra_repr": [[158, 160], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.FactorizedReduce.__init__": [[164, 182], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "cell_operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d", "ValueError", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "#assert C_out % 2 == 0, 'C_out : {:}'.format(C_out)", "\n", "      ", "C_outs", "=", "[", "C_out", "//", "2", ",", "C_out", "-", "C_out", "//", "2", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C_outs", "[", "i", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "not", "affine", ")", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "not", "affine", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.FactorizedReduce.forward": [[183, 192], ["cell_operations.FactorizedReduce.bn", "cell_operations.FactorizedReduce.relu", "cell_operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.FactorizedReduce.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "2", ":", "\n", "      ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "y", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "convs", "[", "0", "]", "(", "x", ")", ",", "self", ".", "convs", "[", "1", "]", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.FactorizedReduce.extra_repr": [[193, 195], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.PartAwareOp.__init__": [[200, 216], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "cell_operations.PartAwareOp.local_conv_list.append", "cell_operations.FactorizedReduce", "torch.Sequential", "torch.Sequential", "cell_operations.FactorizedReduce", "ValueError", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "part", "=", "4", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "part", "=", "4", "\n", "self", ".", "hidden", "=", "C_in", "//", "3", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "self", ".", "local_conv_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "C_in", ",", "self", ".", "hidden", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "hidden", ",", "affine", "=", "True", ")", ")", "\n", ")", "\n", "", "self", ".", "W_K", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "self", ".", "W_Q", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "\n", "if", "stride", "==", "2", ":", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "2", ")", "\n", "elif", "stride", "==", "1", ":", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid Stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.PartAwareOp.forward": [[217, 244], ["x.size", "range", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "part_feature.transpose().contiguous.transpose().contiguous.transpose().contiguous", "cell_operations.PartAwareOp.W_K", "cell_operations.PartAwareOp.W_Q().transpose().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "range", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.PartAwareOp.last", "IHs.append", "cell_operations.PartAwareOp.avg_pool", "local_feat_list.append", "aggreateF[].expand", "feature.view.view.view", "torch.cat().expand.append", "torch.cat().expand.append", "min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "part_feature.transpose().contiguous.transpose().contiguous.transpose", "cell_operations.PartAwareOp.W_Q().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "cell_operations.PartAwareOp.W_Q", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.history.SearchHistory.expand", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "batch", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "assert", "H", ">=", "self", ".", "part", ",", "'input size too small : {:} vs {:}'", ".", "format", "(", "x", ".", "shape", ",", "self", ".", "part", ")", "\n", "IHs", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "IHs", ".", "append", "(", "min", "(", "H", ",", "int", "(", "(", "i", "+", "1", ")", "*", "(", "float", "(", "H", ")", "/", "self", ".", "part", ")", ")", ")", ")", "\n", "local_feat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "feature", "=", "x", "[", ":", ",", ":", ",", "IHs", "[", "i", "]", ":", "IHs", "[", "i", "+", "1", "]", ",", ":", "]", "\n", "xfeax", "=", "self", ".", "avg_pool", "(", "feature", ")", "\n", "xfea", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "xfeax", ")", "\n", "local_feat_list", ".", "append", "(", "xfea", ")", "\n", "", "part_feature", "=", "torch", ".", "cat", "(", "local_feat_list", ",", "dim", "=", "2", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "self", ".", "part", ")", "\n", "part_feature", "=", "part_feature", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "part_K", "=", "self", ".", "W_K", "(", "part_feature", ")", "\n", "part_Q", "=", "self", ".", "W_Q", "(", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "weight_att", "=", "torch", ".", "bmm", "(", "part_K", ",", "part_Q", ")", "\n", "attention", "=", "torch", ".", "softmax", "(", "weight_att", ",", "dim", "=", "2", ")", "\n", "aggreateF", "=", "torch", ".", "bmm", "(", "attention", ",", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "feature", "=", "aggreateF", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ")", "\n", "feature", "=", "feature", ".", "view", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ",", "1", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "2", ")", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "H", ",", "W", ")", "\n", "final_fea", "=", "torch", ".", "cat", "(", "(", "x", ",", "features", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "self", ".", "last", "(", "final_fea", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.GDAS_Reduction_Cell.__init__": [[259, 293], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "cell_operations.FactorizedReduce", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "GDAS_Reduction_Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "\n", "self", ".", "reduction", "=", "True", "\n", "self", ".", "ops1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "8", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "8", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "8", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "8", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ")", "]", ")", "\n", "\n", "self", ".", "ops2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.GDAS_Reduction_Cell.multiplier": [[294, 297], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "multiplier", "(", "self", ")", ":", "\n", "    ", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.GDAS_Reduction_Cell.forward": [[298, 313], ["cell_operations.GDAS_Reduction_Cell.preprocess0", "cell_operations.GDAS_Reduction_Cell.preprocess1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.drop_path", "cell_operations.drop_path", "cell_operations.drop_path", "cell_operations.drop_path"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.drop_path", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.drop_path", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.drop_path", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "-", "1", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "X0", "=", "self", ".", "ops1", "[", "0", "]", "(", "s0", ")", "\n", "X1", "=", "self", ".", "ops1", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "      ", "X0", ",", "X1", "=", "drop_path", "(", "X0", ",", "drop_prob", ")", ",", "drop_path", "(", "X1", ",", "drop_prob", ")", "\n", "\n", "#X2 = self.ops2[0] (X0+X1)", "\n", "", "X2", "=", "self", ".", "ops2", "[", "0", "]", "(", "s0", ")", "\n", "X3", "=", "self", ".", "ops2", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "      ", "X2", ",", "X3", "=", "drop_path", "(", "X2", ",", "drop_prob", ")", ",", "drop_path", "(", "X3", ",", "drop_prob", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "X0", ",", "X1", ",", "X2", ",", "X3", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.cell_operations.drop_path": [[246, 254], ["torch.div.new_zeros", "mask.bernoulli_.bernoulli_", "torch.div", "torch.div", "torch.div.mul_", "torch.div.size"], "function", ["None"], ["", "", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", "=", "torch", ".", "div", "(", "x", ",", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_cell_based_tiny_net": [[20, 58], ["isinstance", "getattr", "config_utils.dict2config", "cell_searchs.CellStructure.str2structure", "GenericNAS301Model", "hasattr", "TinyNetwork", "hasattr", "isinstance", "cell_searchs.CellStructure.str2structure", "DynamicShapeTinyNet", "cell_searchs.CellStructure.str2structure", "ValueError", "tuple", "ValueError", "int", "config_utils.dict2config.channels.split"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.dict2config", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2structure"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_search_spaces": [[61, 74], ["SearchSpaceNames.keys", "ValueError", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_cifar_models": [[76, 117], ["getattr", "getattr.startswith", "CifarResNet", "ValueError", "DenseNet", "len", "getattr.split", "InferWidthCifarResNet", "CifarWideResNet", "ValueError", "getattr.split", "InferDepthCifarResNet", "InferCifarResNet", "NASNetonCIFAR", "ValueError", "torch.load", "hasattr", "hasattr", "os.path.isfile", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_imagenet_models": [[119, 146], ["getattr", "getattr.startswith", "ResNet", "ValueError", "MobileNetV2", "ValueError", "len", "getattr.split", "ValueError", "getattr.split", "InferImagenetResNet", "InferMobileNetV2", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.obtain_model": [[149, 156], ["__init__.get_cifar_models", "__init__.get_imagenet_models", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_cifar_models", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.get_imagenet_models"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.obtain_search_model": [[158, 187], ["ValueError", "SearchWidthCifarResNet", "ValueError", "SearchShapeImagenetResNet", "ValueError", "SearchDepthCifarResNet", "SearchWidthSimResNet", "ValueError", "SearchShapeCifarResNet", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.load_net_from_checkpoint": [[189, 196], ["os.path.isfile", "torch.load", "config_utils.dict2config", "__init__.obtain_model", "obtain_model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.config_utils.configure_utils.dict2config", "home.repos.pwc.inspect_result.snu-adsl_bbea.models.__init__.obtain_model", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.load_state_dict"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.Downsample.__init__": [[10, 17], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "and", "nOut", "==", "2", "*", "nIn", ",", "'stride:{} IO:{},{}'", ".", "format", "(", "stride", ",", "nIn", ",", "nOut", ")", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.Downsample.forward": [[18, 22], ["CifarResNet.Downsample.avg", "CifarResNet.Downsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.ConvBNReLU.__init__": [[26, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "if", "relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "num_conv", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.ConvBNReLU.forward": [[35, 40], ["CifarResNet.ConvBNReLU.conv", "CifarResNet.ConvBNReLU.bn", "CifarResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "conv", "=", "self", ".", "conv", "(", "x", ")", "\n", "bn", "=", "self", ".", "bn", "(", "conv", ")", "\n", "if", "self", ".", "relu", ":", "return", "self", ".", "relu", "(", "bn", ")", "\n", "else", ":", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.ResNetBasicblock.__init__": [[44, 57], ["torch.Module.__init__", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.Downsample", "CifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "Downsample", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.ResNetBasicblock.forward": [[58, 69], ["CifarResNet.ResNetBasicblock.conv_a", "CifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.relu", "torch.relu", "torch.relu", "CifarResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.ResNetBottleneck.__init__": [[74, 88], ["torch.Module.__init__", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.Downsample", "CifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "Downsample", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "stride", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "num_conv", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.ResNetBottleneck.forward": [[89, 101], ["CifarResNet.ResNetBottleneck.conv_1x1", "CifarResNet.ResNetBottleneck.conv_3x3", "CifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.relu", "torch.relu", "torch.relu", "CifarResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.CifarResNet.__init__": [[106, 146], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "CifarResNet.CifarResNet.apply", "range", "CifarResNet.CifarResNet.modules", "ValueError", "CifarResNet.ConvBNReLU", "block", "CifarResNet.CifarResNet.channels.append", "CifarResNet.CifarResNet.layers.append", "sum", "sum", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'CifarResNet : Block : {:}, Depth : {:}, Layers for each block : {:}'", ".", "format", "(", "block_name", ",", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "True", ")", "]", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "assert", "sum", "(", "x", ".", "num_conv", "for", "x", "in", "self", ".", "layers", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "sum", "(", "x", ".", "num_conv", "for", "x", "in", "self", ".", "layers", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.CifarResNet.get_message": [[147, 149], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.CifarResNet.CifarResNet.forward": [[150, 158], ["enumerate", "CifarResNet.CifarResNet.avgpool", "features.view.view.view", "CifarResNet.CifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.ConvBNReLU.__init__": [[7, 13], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.ConvBNReLU.forward": [[14, 19], ["ImageNet_MobileNetV2.ConvBNReLU.conv", "ImageNet_MobileNetV2.ConvBNReLU.bn", "ImageNet_MobileNetV2.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.InvertedResidual.__init__": [[22, 42], ["torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "ImageNet_MobileNetV2.ConvBNReLU", "ImageNet_MobileNetV2.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "    ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "      ", "layers", ".", "append", "(", "ConvBNReLU", "(", "inp", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "groups", "=", "hidden_dim", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.InvertedResidual.forward": [[43, 48], ["ImageNet_MobileNetV2.InvertedResidual.conv", "ImageNet_MobileNetV2.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "use_res_connect", ":", "\n", "      ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.MobileNetV2.__init__": [[51, 93], ["torch.nn.Module.__init__", "int", "int", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "ImageNet_MobileNetV2.MobileNetV2.apply", "ValueError", "ImageNet_MobileNetV2.ConvBNReLU", "int", "range", "ImageNet_MobileNetV2.ConvBNReLU", "torch.nn.Dropout", "torch.nn.Linear", "max", "features.append", "block"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "width_mult", ",", "input_channel", ",", "last_channel", ",", "block_name", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "block_name", "==", "'InvertedResidual'", ":", "\n", "      ", "block", "=", "InvertedResidual", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block name : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "inverted_residual_setting", "=", "[", "\n", "# t, c,  n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "max", "(", "1.0", ",", "width_mult", ")", ")", "\n", "features", "=", "[", "ConvBNReLU", "(", "3", ",", "input_channel", ",", "stride", "=", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "      ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "message", "=", "'MobileNetV2 : width_mult={:}, in-C={:}, last-C={:}, block={:}, dropout={:}'", ".", "format", "(", "width_mult", ",", "input_channel", ",", "last_channel", ",", "block_name", ",", "dropout", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.MobileNetV2.get_message": [[94, 96], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.models.ImageNet_MobileNetV2.MobileNetV2.forward": [[97, 102], ["ImageNet_MobileNetV2.MobileNetV2.features", "ImageNet_MobileNetV2.MobileNetV2.mean", "ImageNet_MobileNetV2.MobileNetV2.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "features", "=", "self", ".", "features", "(", "inputs", ")", "\n", "vectors", "=", "features", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "predicts", "=", "self", ".", "classifier", "(", "vectors", ")", "\n", "return", "features", ",", "predicts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.InferCell.__init__": [[15, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range", "len", "len", "cells.InferCell.node_IX.append", "cells.InferCell.node_IN.append", "cur_index.append", "cur_innod.append", "cells.InferCell.layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "InferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_IN", "=", "[", "]", "\n", "self", ".", "node_IX", "=", "[", "]", "\n", "self", ".", "genotype", "=", "deepcopy", "(", "genotype", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "genotype", ")", ")", ":", "\n", "      ", "node_info", "=", "genotype", "[", "i", "-", "1", "]", "\n", "cur_index", "=", "[", "]", "\n", "cur_innod", "=", "[", "]", "\n", "for", "(", "op_name", ",", "op_in", ")", "in", "node_info", ":", "\n", "        ", "if", "op_in", "==", "0", ":", "\n", "          ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "", "else", ":", "\n", "          ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_out", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "cur_index", ".", "append", "(", "len", "(", "self", ".", "layers", ")", ")", "\n", "cur_innod", ".", "append", "(", "op_in", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "", "self", ".", "node_IX", ".", "append", "(", "cur_index", ")", "\n", "self", ".", "node_IN", ".", "append", "(", "cur_innod", ")", "\n", "", "self", ".", "nodes", "=", "len", "(", "genotype", ")", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.InferCell.extra_repr": [[40, 48], ["enumerate", "zip", "laystr.append", "cells.InferCell.genotype.tostr", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tostr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'info :: nodes={nodes}, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "laystr", "=", "[", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "      ", "y", "=", "[", "'I{:}-L{:}'", ".", "format", "(", "_ii", ",", "_il", ")", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", "]", "\n", "x", "=", "'{:}<-({:})'", ".", "format", "(", "i", "+", "1", ",", "','", ".", "join", "(", "y", ")", ")", "\n", "laystr", ".", "append", "(", "x", ")", "\n", "", "return", "string", "+", "', [{:}]'", ".", "format", "(", "' | '", ".", "join", "(", "laystr", ")", ")", "+", "', {:}'", ".", "format", "(", "self", ".", "genotype", ".", "tostr", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.InferCell.forward": [[49, 55], ["enumerate", "zip", "sum", "nodes.append", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "      ", "node_feature", "=", "sum", "(", "self", ".", "layers", "[", "_il", "]", "(", "nodes", "[", "_ii", "]", ")", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", ")", "\n", "nodes", ".", "append", "(", "node_feature", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.NASNetInferCell.__init__": [[61, 83], ["torch.Module.__init__", "len", "len", "torch.ModuleDict", "torch.ModuleDict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetInferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "\n", "if", "not", "reduction", ":", "\n", "      ", "nodes", ",", "concats", "=", "genotype", "[", "'normal'", "]", ",", "genotype", "[", "'normal_concat'", "]", "\n", "", "else", ":", "\n", "      ", "nodes", ",", "concats", "=", "genotype", "[", "'reduce'", "]", ",", "genotype", "[", "'reduce_concat'", "]", "\n", "", "self", ".", "_multiplier", "=", "len", "(", "concats", ")", "\n", "self", ".", "_concats", "=", "concats", "\n", "self", ".", "_steps", "=", "len", "(", "nodes", ")", "\n", "self", ".", "_nodes", "=", "nodes", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "      ", "for", "in_node", "in", "node", ":", "\n", "        ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "OPS", "[", "name", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.NASNetInferCell.forward": [[85, 99], ["cells.NASNetInferCell.preprocess0", "cells.NASNetInferCell.preprocess1", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "states.append", "clist.append", "sum", "op"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "unused_drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "self", ".", "_nodes", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "in_node", "in", "node", ":", "\n", "        ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "clist", ".", "append", "(", "op", "(", "states", "[", "j", "]", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "x", "]", "for", "x", "in", "self", ".", "_concats", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.AuxiliaryHeadCIFAR.__init__": [[103, 117], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.cells.AuxiliaryHeadCIFAR.forward": [[118, 122], ["cells.AuxiliaryHeadCIFAR.features", "cells.AuxiliaryHeadCIFAR.classifier", "cells.AuxiliaryHeadCIFAR.view", "cells.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.__init__": [[13, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "cells.NASNetInferCell", "nasnet_cifar.NASNetonCIFAR.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cells.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "stem_multiplier", ",", "num_classes", ",", "genotype", ",", "auxiliary", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "NASNetonCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "self", ".", "auxiliary_index", "=", "None", "\n", "self", ".", "auxiliary_head", "=", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "cell", ".", "_multiplier", "*", "C_curr", ",", "reduction", "\n", "if", "reduction", "and", "C_curr", "==", "C", "*", "4", "and", "auxiliary", ":", "\n", "        ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "auxiliary_index", "=", "index", "\n", "", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "drop_path_prob", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.update_drop_path": [[42, 44], ["None"], "methods", ["None"], ["", "def", "update_drop_path", "(", "self", ",", "drop_path_prob", ")", ":", "\n", "    ", "self", ".", "drop_path_prob", "=", "drop_path_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param": [[45, 48], ["list", "nasnet_cifar.NASNetonCIFAR.auxiliary_head.parameters"], "methods", ["None"], ["", "def", "auxiliary_param", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "auxiliary_head", "is", "None", ":", "return", "[", "]", "\n", "else", ":", "return", "list", "(", "self", ".", "auxiliary_head", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.get_message": [[49, 54], ["nasnet_cifar.NASNetonCIFAR.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.extra_repr": [[55, 57], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.nasnet_cifar.NASNetonCIFAR.forward": [[58, 72], ["enumerate", "nasnet_cifar.NASNetonCIFAR.lastact", "nasnet_cifar.NASNetonCIFAR.global_pooling", "out.view.view.view", "nasnet_cifar.NASNetonCIFAR.classifier", "nasnet_cifar.NASNetonCIFAR.stem", "cell", "cell_results.append", "out.view.view.size", "nasnet_cifar.NASNetonCIFAR.auxiliary_head"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "stem_feature", ",", "logits_aux", "=", "self", ".", "stem", "(", "inputs", ")", ",", "None", "\n", "cell_results", "=", "[", "stem_feature", ",", "stem_feature", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "cell_feature", "=", "cell", "(", "cell_results", "[", "-", "2", "]", ",", "cell_results", "[", "-", "1", "]", ",", "self", ".", "drop_path_prob", ")", "\n", "cell_results", ".", "append", "(", "cell_feature", ")", "\n", "if", "self", ".", "auxiliary_index", "is", "not", "None", "and", "i", "==", "self", ".", "auxiliary_index", "and", "self", ".", "training", ":", "\n", "        ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "if", "logits_aux", "is", "None", ":", "return", "out", ",", "logits", "\n", "else", ":", "return", "out", ",", "[", "logits", ",", "logits_aux", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.tiny_network.TinyNetwork.__init__": [[12, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "zip", "tiny_network.TinyNetwork.cells.append", "torch.BatchNorm2d", "torch.ReLU", "cell_operations.ResNetBasicblock", "cells.InferCell"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "genotype", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "TinyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", "=", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev", ",", "C_curr", ",", "1", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.tiny_network.TinyNetwork.get_message": [[39, 44], ["tiny_network.TinyNetwork.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.tiny_network.TinyNetwork.extra_repr": [[45, 47], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_infers.tiny_network.TinyNetwork.forward": [[48, 59], ["tiny_network.TinyNetwork.stem", "enumerate", "tiny_network.TinyNetwork.lastact", "tiny_network.TinyNetwork.global_pooling", "out.view.view.view", "tiny_network.TinyNetwork.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.__init__": [[32, 48], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet_depth.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.get_flops": [[49, 60], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "self", ".", "in_dim", ",", "self", ".", "out_dim", "\n", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.forward": [[61, 73], ["SearchCifarResNet_depth.ConvBNReLU.conv", "SearchCifarResNet_depth.ConvBNReLU.avg", "SearchCifarResNet_depth.ConvBNReLU.bn", "SearchCifarResNet_depth.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet_depth.ConvBNReLU.size", "SearchCifarResNet_depth.ConvBNReLU.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.__init__": [[78, 91], ["torch.Module.__init__", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.get_flops": [[92, 100], ["SearchCifarResNet_depth.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet_depth.ResNetBasicblock.conv_b.get_flops", "hasattr", "SearchCifarResNet_depth.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "divide", "=", "1", ")", ":", "\n", "    ", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "divide", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "divide", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "divide", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.forward": [[101, 108], ["SearchCifarResNet_depth.ResNetBasicblock.conv_a", "SearchCifarResNet_depth.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_depth.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.__init__": [[114, 128], ["torch.Module.__init__", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.get_range": [[129, 131], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.get_flops": [[132, 141], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "SearchCifarResNet_depth.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "divide", ")", ":", "\n", "    ", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "divide", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "divide", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "divide", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "divide", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.forward": [[142, 150], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x1", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_depth.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.__init__": [[154, 215], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "collections.OrderedDict", "collections.OrderedDict", "range", "SearchCifarResNet_depth.SearchDepthCifarResNet.depth_info.items", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "SearchCifarResNet_depth.SearchDepthCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet_depth.SearchDepthCifarResNet.apply", "SearchCifarResNet_depth.get_depth_choices", "range", "SearchCifarResNet_depth.SearchDepthCifarResNet.depth_info_list.append", "range", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet_depth.ConvBNReLU", "len", "block", "SearchCifarResNet_depth.SearchDepthCifarResNet.channels.append", "SearchCifarResNet_depth.SearchDepthCifarResNet.layers.append", "bisect.bisect_right", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "block_choices.append", "SearchCifarResNet_depth.get_depth_choices", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_depth_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchDepthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "cur_block_choices", "=", "get_depth_choices", "(", "layer_blocks", ",", "False", ")", "\n", "assert", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", ",", "'stage={:}, {:} vs {:}'", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:} ::: depth-block-choices={:} for {:} blocks.\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "          ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "'choices'", ":", "block_choices", ",", "\n", "'stage'", ":", "stage", ",", "\n", "'xstart'", ":", "xstart", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "'xstart'", "]", ",", "info", "[", "'stage'", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "        ", "idx", "=", "bisect_right", "(", "info", "[", "'choices'", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "\n", "self", ".", "register_parameter", "(", "'depth_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ",", "get_depth_choices", "(", "layer_blocks", ",", "True", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.arch_parameters": [[216, 218], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "depth_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.base_parameters": [[219, 221], ["list", "list", "list", "SearchCifarResNet_depth.SearchDepthCifarResNet.classifier.parameters", "SearchCifarResNet_depth.SearchDepthCifarResNet.layers.parameters", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_flop": [[222, 260], ["zip", "enumerate", "config_dict.copy.copy.copy", "selected_layers.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "ValueError", "layer.get_flops", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.functional.softmax.size", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.functional.softmax.size", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select depth", "\n", "if", "mode", "==", "'genotype'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "      ", "choices", "=", "[", "depth_probs", ".", "size", "(", "1", ")", "-", "1", "for", "_", "in", "range", "(", "depth_probs", ".", "size", "(", "0", ")", ")", "]", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "multinomial", "(", "depth_probs", ",", "1", ",", "False", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "      ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "'choices'", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "'xstart'", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "          ", "flop", "+=", "layer", ".", "get_flops", "(", ")", "\n", "", "else", ":", "\n", "          ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "        ", "flop", "+=", "layer", ".", "get_flops", "(", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "self", ".", "classifier", ".", "in_features", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xblocks'", "]", "=", "selected_layers", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-depth'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_arch_info": [[261, 279], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for depth, there are {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "depth_attentions", ")", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.4f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:17s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || discrepancy={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.set_tau": [[280, 284], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_message": [[285, 287], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.forward": [[288, 295], ["SearchCifarResNet_depth.SearchDepthCifarResNet.basic_forward", "SearchCifarResNet_depth.SearchDepthCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.search_forward": [[296, 331], ["torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "enumerate", "sum", "layer.get_flops", "possible_tensors.append", "layer.get_flops", "sum", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "\n", "x", ",", "flops", "=", "inputs", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "layer_i", "=", "layer", "(", "x", ")", "\n", "feature_maps", ".", "append", "(", "layer_i", ")", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "        ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'choices'", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'stage'", "]", "\n", "possible_tensors", "=", "[", "]", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "          ", "xtensor", "=", "feature_maps", "[", "A", "]", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "xtensor", "*", "W", "for", "xtensor", ",", "W", "in", "zip", "(", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", ")", ")", "\n", "x", "=", "weighted_sum", "\n", "", "else", ":", "\n", "        ", "x", "=", "layer_i", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "#print ('layer-{:03d}, stage={:}, att={:}, prob={:}, flop={:}'.format(i, xstagei, xatti, flop_depth_probs[xstagei, xatti].item(), layer.get_flops(1e6)))", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "layer", ".", "get_flops", "(", "1e6", ")", "\n", "", "else", ":", "\n", "        ", "x_expected_flop", "=", "layer", ".", "get_flops", "(", "1e6", ")", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "(", "self", ".", "classifier", ".", "in_features", "*", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.basic_forward": [[332, 341], ["enumerate", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet_depth.SearchDepthCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_depth.get_depth_choices": [[15, 27], ["len", "list", "ValueError", "range", "list.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_depth_choices", "(", "nDepth", ",", "return_num", ")", ":", "\n", "  ", "if", "nDepth", "==", "2", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "nDepth", "==", "3", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "nDepth", ">", "3", ":", "\n", "    ", "choices", "=", "list", "(", "range", "(", "1", ",", "nDepth", "+", "1", ",", "2", ")", ")", "\n", "if", "choices", "[", "-", "1", "]", "<", "nDepth", ":", "choices", ".", "append", "(", "nDepth", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid nDepth : {:}'", ".", "format", "(", "nDepth", ")", ")", "\n", "", "if", "return_num", ":", "return", "len", "(", "choices", ")", "\n", "else", ":", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.__init__": [[15, 46], ["torch.Module.__init__", "max", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "generic_size_tiny_cell_model.GenericNAS301Model._cells.append", "enumerate", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "generic_size_tiny_cell_model.GenericNAS301Model.register_buffer", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "generic_size_tiny_cell_model.GenericNAS301Model._cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.cell_operations.ResNetBasicblock", "models.cell_infers.cells.InferCell"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "candidate_Cs", ":", "List", "[", "int", "]", ",", "max_num_Cs", ":", "int", ",", "genotype", ":", "Any", ",", "num_classes", ":", "int", ",", "affine", ":", "bool", ",", "track_running_stats", ":", "bool", ")", ":", "\n", "    ", "super", "(", "GenericNAS301Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_max_num_Cs", "=", "max_num_Cs", "\n", "self", ".", "_candidate_Cs", "=", "candidate_Cs", "\n", "if", "max_num_Cs", "%", "3", "!=", "2", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid number of layers : {:}'", ".", "format", "(", "max_num_Cs", ")", ")", "\n", "", "self", ".", "_num_stage", "=", "N", "=", "max_num_Cs", "//", "3", "\n", "self", ".", "_max_C", "=", "max", "(", "candidate_Cs", ")", "\n", "\n", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "_max_C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "not", "affine", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "_max_C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ")", "\n", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "c_prev", "=", "self", ".", "_max_C", "\n", "self", ".", "_cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_cells", ".", "append", "(", "stem", ")", "\n", "for", "index", ",", "reduction", "in", "enumerate", "(", "layer_reductions", ")", ":", "\n", "      ", "if", "reduction", ":", "cell", "=", "ResNetBasicblock", "(", "c_prev", ",", "self", ".", "_max_C", ",", "2", ",", "True", ")", "\n", "else", ":", "cell", "=", "InferCell", "(", "genotype", ",", "c_prev", ",", "self", ".", "_max_C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_cells", ".", "append", "(", "cell", ")", "\n", "c_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_num_layer", "=", "len", "(", "self", ".", "_cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "c_prev", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "c_prev", ",", "num_classes", ")", "\n", "# algorithm related", "\n", "self", ".", "register_buffer", "(", "'_tau'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "_algo", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.set_algo": [[47, 57], ["torch.Parameter", "torch.Parameter", "generic_size_tiny_cell_model.GenericNAS301Model.register_buffer", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "max"], "methods", ["None"], ["", "def", "set_algo", "(", "self", ",", "algo", ":", "Text", ")", ":", "\n", "# used for searching", "\n", "    ", "assert", "self", ".", "_algo", "is", "None", ",", "'This functioin can only be called once.'", "\n", "assert", "algo", "in", "[", "'fbv2'", ",", "'tunas'", ",", "'tas'", "]", ",", "'invalid algo : {:}'", ".", "format", "(", "algo", ")", "\n", "self", ".", "_algo", "=", "algo", "\n", "self", ".", "_arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_max_num_Cs", ",", "len", "(", "self", ".", "_candidate_Cs", ")", ")", ")", "\n", "if", "algo", "==", "'fbv2'", "or", "algo", "==", "'tunas'", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'_masks'", ",", "torch", ".", "zeros", "(", "len", "(", "self", ".", "_candidate_Cs", ")", ",", "max", "(", "self", ".", "_candidate_Cs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_candidate_Cs", ")", ")", ":", "\n", "        ", "self", ".", "_masks", ".", "data", "[", "i", ",", ":", "self", ".", "_candidate_Cs", "[", "i", "]", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.tau": [[58, 61], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.set_tau": [[62, 64], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "_tau", ".", "data", "[", ":", "]", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.weights": [[65, 72], ["list", "list", "list", "list", "generic_size_tiny_cell_model.GenericNAS301Model._cells.parameters", "generic_size_tiny_cell_model.GenericNAS301Model.lastact.parameters", "generic_size_tiny_cell_model.GenericNAS301Model.global_pooling.parameters", "generic_size_tiny_cell_model.GenericNAS301Model.classifier.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "_cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.alphas": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "_arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.show_alphas": [[77, 80], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "_arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.random": [[81, 88], ["range", "random.randint", "cs.append", "str", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "@", "property", "\n", "def", "random", "(", "self", ")", ":", "\n", "    ", "cs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_max_num_Cs", ")", ":", "\n", "      ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "_candidate_Cs", ")", "-", "1", ")", "\n", "cs", ".", "append", "(", "str", "(", "self", ".", "_candidate_Cs", "[", "index", "]", ")", ")", "\n", "", "return", "':'", ".", "join", "(", "cs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.genotype": [[89, 97], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "generic_size_tiny_cell_model.GenericNAS301Model._arch_parameters[].argmax().item", "cs.append", "str", "generic_size_tiny_cell_model.GenericNAS301Model._arch_parameters[].argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "property", "\n", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "cs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_max_num_Cs", ")", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "index", "=", "self", ".", "_arch_parameters", "[", "i", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "cs", ".", "append", "(", "str", "(", "self", ".", "_candidate_Cs", "[", "index", "]", ")", ")", "\n", "", "", "return", "':'", ".", "join", "(", "cs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.get_message": [[98, 103], ["generic_size_tiny_cell_model.GenericNAS301Model.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "_cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "_cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.extra_repr": [[104, 106], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(candidates={_candidate_Cs}, num={_max_num_Cs}, N={_num_stage}, L={_num_layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.generic_size_tiny_cell_model.GenericNAS301Model.forward": [[107, 149], ["enumerate", "generic_size_tiny_cell_model.GenericNAS301Model.lastact", "generic_size_tiny_cell_model.GenericNAS301Model.global_pooling", "out.view.view.view", "generic_size_tiny_cell_model.GenericNAS301Model.classifier", "cell", "max", "out.view.view.size", "torch.functional.gumbel_softmax", "torch.functional.gumbel_softmax", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "models.shape_searchs.SoftSelect.select2withP", "max", "models.shape_searchs.SoftSelect.ChannelWiseInter", "models.shape_searchs.SoftSelect.ChannelWiseInter", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_cs.cpu().view().tolist", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.functional.softmax", "torch.functional.softmax", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "log_probs.append", "generic_size_tiny_cell_model.GenericNAS301Model._masks[].view", "ValueError", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "selected_cs.cpu().view", "selected_cs.cpu", "torch.distributions.Categorical.sample.item"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "feature", "=", "inputs", "\n", "\n", "log_probs", "=", "[", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "_cells", ")", ":", "\n", "      ", "feature", "=", "cell", "(", "feature", ")", "\n", "# apply different searching algorithms", "\n", "idx", "=", "max", "(", "0", ",", "i", "-", "1", ")", "\n", "if", "self", ".", "_algo", "==", "'fbv2'", ":", "\n", "        ", "weights", "=", "nn", ".", "functional", ".", "gumbel_softmax", "(", "self", ".", "_arch_parameters", "[", "idx", ":", "idx", "+", "1", "]", ",", "tau", "=", "self", ".", "tau", ",", "dim", "=", "-", "1", ")", "\n", "mask", "=", "torch", ".", "matmul", "(", "weights", ",", "self", ".", "_masks", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "feature", "=", "feature", "*", "mask", "\n", "", "elif", "self", ".", "_algo", "==", "'tas'", ":", "\n", "        ", "selected_cs", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "_arch_parameters", "[", "idx", ":", "idx", "+", "1", "]", ",", "self", ".", "tau", ",", "num", "=", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "i1", ",", "i2", "=", "selected_cs", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "", "c1", ",", "c2", "=", "self", ".", "_candidate_Cs", "[", "i1", "]", ",", "self", ".", "_candidate_Cs", "[", "i2", "]", "\n", "out_channel", "=", "max", "(", "c1", ",", "c2", ")", "\n", "out1", "=", "ChannelWiseInter", "(", "feature", "[", ":", ",", ":", "c1", "]", ",", "out_channel", ")", "\n", "out2", "=", "ChannelWiseInter", "(", "feature", "[", ":", ",", ":", "c2", "]", ",", "out_channel", ")", "\n", "out", "=", "out1", "*", "selected_probs", "[", "0", ",", "0", "]", "+", "out2", "*", "selected_probs", "[", "0", ",", "1", "]", "\n", "if", "feature", ".", "shape", "[", "1", "]", "==", "out", ".", "shape", "[", "1", "]", ":", "\n", "          ", "feature", "=", "out", "\n", "", "else", ":", "\n", "          ", "miss", "=", "torch", ".", "zeros", "(", "feature", ".", "shape", "[", "0", "]", ",", "feature", ".", "shape", "[", "1", "]", "-", "out", ".", "shape", "[", "1", "]", ",", "feature", ".", "shape", "[", "2", "]", ",", "feature", ".", "shape", "[", "3", "]", ",", "device", "=", "feature", ".", "device", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "out", ",", "miss", ")", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "_algo", "==", "'tunas'", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "_arch_parameters", "[", "idx", ":", "idx", "+", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "dist", "=", "torch", ".", "distributions", ".", "Categorical", "(", "prob", ")", "\n", "action", "=", "dist", ".", "sample", "(", ")", "\n", "log_probs", ".", "append", "(", "dist", ".", "log_prob", "(", "action", ")", ")", "\n", "mask", "=", "self", ".", "_masks", "[", "action", ".", "item", "(", ")", "]", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "feature", "=", "feature", "*", "mask", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid algorithm : {:}'", ".", "format", "(", "self", ".", "_algo", ")", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", ",", "log_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ConvBNReLU.__init__": [[26, 47], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet_width.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchCifarResNet_width.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ConvBNReLU.get_flops": [[48, 59], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ConvBNReLU.get_range": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ConvBNReLU.forward": [[63, 70], ["SearchCifarResNet_width.ConvBNReLU.basic_forward", "SearchCifarResNet_width.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ConvBNReLU.search_forward": [[71, 96], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchCifarResNet_width.ConvBNReLU.get_flops", "SearchCifarResNet_width.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchCifarResNet_width.ConvBNReLU.avg", "SearchCifarResNet_width.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ConvBNReLU.basic_forward": [[97, 109], ["SearchCifarResNet_width.ConvBNReLU.conv", "SearchCifarResNet_width.ConvBNReLU.avg", "SearchCifarResNet_width.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet_width.ConvBNReLU.size", "SearchCifarResNet_width.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.__init__": [[114, 127], ["torch.Module.__init__", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.get_range": [[128, 130], ["SearchCifarResNet_width.ResNetBasicblock.conv_a.get_range", "SearchCifarResNet_width.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.get_flops": [[131, 142], ["SearchCifarResNet_width.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet_width.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchCifarResNet_width.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "3", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.forward": [[143, 147], ["SearchCifarResNet_width.ResNetBasicblock.basic_forward", "SearchCifarResNet_width.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.search_forward": [[148, 160], ["SearchCifarResNet_width.ResNetBasicblock.conv_a", "SearchCifarResNet_width.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet_width.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_b", ",", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.basic_forward": [[161, 168], ["SearchCifarResNet_width.ResNetBasicblock.conv_a", "SearchCifarResNet_width.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_width.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.__init__": [[174, 188], ["torch.Module.__init__", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.get_range": [[189, 191], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet_width.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.get_flops": [[192, 204], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchCifarResNet_width.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "4", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_D", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.forward": [[205, 209], ["SearchCifarResNet_width.ResNetBottleneck.basic_forward", "SearchCifarResNet_width.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.basic_forward": [[210, 218], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_width.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.search_forward": [[219, 232], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet_width.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_1x4", ",", "sum", "(", "[", "expected_flop_1x1", ",", "expected_flop_3x3", ",", "expected_flop_1x4", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.__init__": [[236, 285], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchCifarResNet_width.SearchWidthCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet_width.SearchWidthCifarResNet.apply", "range", "len", "layer.get_range", "SearchCifarResNet_width.SearchWidthCifarResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet_width.ConvBNReLU", "block", "SearchCifarResNet_width.SearchWidthCifarResNet.channels.append", "SearchCifarResNet_width.SearchWidthCifarResNet.layers.append", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "SoftSelect.get_width_choices", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchWidthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_choices", "(", "None", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.arch_parameters": [[286, 288], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "width_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.base_parameters": [[289, 291], ["list", "list", "list", "SearchCifarResNet_width.SearchWidthCifarResNet.classifier.parameters", "SearchCifarResNet_width.SearchWidthCifarResNet.layers.parameters", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_flop": [[292, 330], ["enumerate", "enumerate", "config_dict.copy.copy.copy", "channels.append", "tuple", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "#weights = [F.softmax(x, dim=0) for x in self.width_attentions]", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "        ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'fix'", ":", "\n", "        ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "'invalid extra_info : {:}'", ".", "format", "(", "extra_info", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "prob", "[", "j", "]", "=", "1", "/", "(", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-width'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_arch_info": [[331, 348], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for width, there are {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.set_tau": [[349, 353], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_message": [[354, 356], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.forward": [[357, 364], ["SearchCifarResNet_width.SearchWidthCifarResNet.basic_forward", "SearchCifarResNet_width.SearchWidthCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.search_forward": [[365, 384], ["torch.functional.softmax", "torch.functional.softmax", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "selected_widths", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "flops", ".", "append", "(", "expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.basic_forward": [[385, 394], ["enumerate", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet_width.SearchWidthCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet_width.conv_forward": [[13, 22], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.ConvBNReLU.__init__": [[26, 47], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchSimResNet_width.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchSimResNet_width.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.ConvBNReLU.get_flops": [[48, 59], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.ConvBNReLU.get_range": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.ConvBNReLU.forward": [[63, 70], ["SearchSimResNet_width.ConvBNReLU.basic_forward", "SearchSimResNet_width.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.ConvBNReLU.search_forward": [[71, 96], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchSimResNet_width.ConvBNReLU.get_flops", "SearchSimResNet_width.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchSimResNet_width.ConvBNReLU.avg", "SearchSimResNet_width.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.ConvBNReLU.basic_forward": [[97, 109], ["SearchSimResNet_width.ConvBNReLU.conv", "SearchSimResNet_width.ConvBNReLU.avg", "SearchSimResNet_width.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchSimResNet_width.ConvBNReLU.size", "SearchSimResNet_width.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SimBlock.__init__": [[114, 126], ["torch.Module.__init__", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "SimBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SimBlock.get_range": [[127, 129], ["SearchSimResNet_width.SimBlock.conv.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SimBlock.get_flops": [[130, 140], ["SearchSimResNet_width.SimBlock.conv.get_flops", "hasattr", "len", "SearchSimResNet_width.SimBlock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "2", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SimBlock.forward": [[141, 145], ["SearchSimResNet_width.SimBlock.basic_forward", "SearchSimResNet_width.SimBlock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SimBlock.search_forward": [[146, 157], ["SearchSimResNet_width.SimBlock.conv", "SharedUtils.additive_func", "isinstance", "type", "indexes.size", "probs.size", "probability.size", "SearchSimResNet_width.SimBlock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "1", "and", "probs", ".", "size", "(", "0", ")", "==", "1", "and", "probability", ".", "size", "(", "0", ")", "==", "1", ",", "'invalid size : {:}, {:}, {:}'", ".", "format", "(", "indexes", ".", "size", "(", ")", ",", "probs", ".", "size", "(", ")", ",", "probability", ".", "size", "(", ")", ")", "\n", "out", ",", "expected_next_inC", ",", "expected_flop", "=", "self", ".", "conv", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "-", "1", "]", ",", "indexes", "[", "-", "1", "]", ",", "probs", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_next_inC", ",", "sum", "(", "[", "expected_flop", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SimBlock.basic_forward": [[158, 164], ["SearchSimResNet_width.SimBlock.conv", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchSimResNet_width.SimBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.__init__": [[169, 208], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchSimResNet_width.SearchWidthSimResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchSimResNet_width.SearchWidthSimResNet.apply", "range", "len", "layer.get_range", "SearchSimResNet_width.SearchWidthSimResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.SimBlock", "SearchSimResNet_width.SearchWidthSimResNet.channels.append", "SearchSimResNet_width.SearchWidthSimResNet.layers.append", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "SoftSelect.get_width_choices", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices"], ["  ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchWidthSimResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "depth", "-", "2", ")", "%", "3", "==", "0", ",", "'depth should be one of 5, 8, 11, 14, ... instead of {:}'", ".", "format", "(", "depth", ")", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "3", "\n", "self", ".", "message", "=", "'SearchWidthSimResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "SimBlock", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_choices", "(", "None", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.arch_parameters": [[209, 211], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "width_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.base_parameters": [[212, 214], ["list", "list", "list", "SearchSimResNet_width.SearchWidthSimResNet.classifier.parameters", "SearchSimResNet_width.SearchWidthSimResNet.layers.parameters", "SearchSimResNet_width.SearchWidthSimResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_flop": [[215, 253], ["enumerate", "enumerate", "config_dict.copy.copy.copy", "channels.append", "tuple", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "#weights = [F.softmax(x, dim=0) for x in self.width_attentions]", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "        ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'fix'", ":", "\n", "        ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "'invalid extra_info : {:}'", ".", "format", "(", "extra_info", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "prob", "[", "j", "]", "=", "1", "/", "(", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-width'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_arch_info": [[254, 271], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for width, there are {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.set_tau": [[272, 276], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_message": [[277, 279], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.forward": [[280, 287], ["SearchSimResNet_width.SearchWidthSimResNet.basic_forward", "SearchSimResNet_width.SearchWidthSimResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.search_forward": [[288, 307], ["torch.functional.softmax", "torch.functional.softmax", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchSimResNet_width.SearchWidthSimResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "selected_widths", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "flops", ".", "append", "(", "expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.basic_forward": [[308, 317], ["enumerate", "SearchSimResNet_width.SearchWidthSimResNet.avgpool", "features.view.view.view", "SearchSimResNet_width.SearchWidthSimResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchSimResNet_width.conv_forward": [[13, 22], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ConvBNReLU.__init__": [[36, 60], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchImagenetResNet.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchImagenetResNet.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ",", "last_max_pool", "=", "False", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n", "if", "last_max_pool", ":", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "else", ":", "self", ".", "maxpool", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ConvBNReLU.get_flops": [[61, 72], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ConvBNReLU.get_range": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ConvBNReLU.forward": [[76, 83], ["SearchImagenetResNet.ConvBNReLU.basic_forward", "SearchImagenetResNet.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ConvBNReLU.search_forward": [[84, 109], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchImagenetResNet.ConvBNReLU.get_flops", "SearchImagenetResNet.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchImagenetResNet.ConvBNReLU.avg", "SearchImagenetResNet.ConvBNReLU.relu", "SearchImagenetResNet.ConvBNReLU.maxpool", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "maxpool", ":", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ConvBNReLU.basic_forward": [[110, 123], ["SearchImagenetResNet.ConvBNReLU.conv", "SearchImagenetResNet.ConvBNReLU.avg", "SearchImagenetResNet.ConvBNReLU.relu", "SearchImagenetResNet.ConvBNReLU.maxpool", "inputs.size", "inputs.size", "SearchImagenetResNet.ConvBNReLU.size", "SearchImagenetResNet.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "if", "self", ".", "maxpool", ":", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBasicblock.__init__": [[128, 141], ["torch.Module.__init__", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBasicblock.get_range": [[142, 144], ["SearchImagenetResNet.ResNetBasicblock.conv_a.get_range", "SearchImagenetResNet.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBasicblock.get_flops": [[145, 156], ["SearchImagenetResNet.ResNetBasicblock.conv_a.get_flops", "SearchImagenetResNet.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchImagenetResNet.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "3", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBasicblock.forward": [[157, 161], ["SearchImagenetResNet.ResNetBasicblock.basic_forward", "SearchImagenetResNet.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBasicblock.search_forward": [[162, 175], ["SearchImagenetResNet.ResNetBasicblock.conv_a", "SearchImagenetResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchImagenetResNet.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "#import pdb; pdb.set_trace()", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_b", ",", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBasicblock.basic_forward": [[176, 183], ["SearchImagenetResNet.ResNetBasicblock.conv_a", "SearchImagenetResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchImagenetResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBottleneck.__init__": [[189, 203], ["torch.Module.__init__", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBottleneck.get_range": [[204, 206], ["SearchImagenetResNet.ResNetBottleneck.conv_1x4.get_range", "SearchImagenetResNet.ResNetBottleneck.conv_1x1.get_range", "SearchImagenetResNet.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBottleneck.get_flops": [[207, 219], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1.get_flops", "SearchImagenetResNet.ResNetBottleneck.conv_3x3.get_flops", "SearchImagenetResNet.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchImagenetResNet.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "4", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_D", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBottleneck.forward": [[220, 224], ["SearchImagenetResNet.ResNetBottleneck.basic_forward", "SearchImagenetResNet.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBottleneck.basic_forward": [[225, 233], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1", "SearchImagenetResNet.ResNetBottleneck.conv_3x3", "SearchImagenetResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchImagenetResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.ResNetBottleneck.search_forward": [[234, 247], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1", "SearchImagenetResNet.ResNetBottleneck.conv_3x3", "SearchImagenetResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchImagenetResNet.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_1x4", ",", "sum", "(", "[", "expected_flop_1x1", ",", "expected_flop_3x3", ",", "expected_flop_1x4", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.__init__": [[251, 323], ["torch.Module.__init__", "SearchImagenetResNet.get_depth_choices", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.depth_info.items", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.register_parameter", "SearchImagenetResNet.SearchShapeImagenetResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "SearchImagenetResNet.SearchShapeImagenetResNet.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "SearchImagenetResNet.SearchShapeImagenetResNet.depth_info_list.append", "range", "len", "layer.get_range", "SearchImagenetResNet.SearchShapeImagenetResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "sum", "len", "block", "SearchImagenetResNet.SearchShapeImagenetResNet.channels.append", "SearchImagenetResNet.SearchShapeImagenetResNet.layers.append", "bisect.bisect_right", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "len", "block_choices.append", "len", "len", "SoftSelect.get_width_choices", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "deep_stem", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchShapeImagenetResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'BasicBlock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "", "elif", "block_name", "==", "'Bottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "sum", "(", "layers", ")", "*", "block", ".", "num_conv", ",", "layers", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "not", "deep_stem", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ",", "last_max_pool", "=", "True", ")", "]", ")", "\n", "self", ".", "channels", "=", "[", "64", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", ",", "ConvBNReLU", "(", "32", ",", "64", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ",", "last_max_pool", "=", "True", ")", "]", ")", "\n", "self", ".", "channels", "=", "[", "32", ",", "64", "]", "\n", "\n", "", "meta_depth_info", "=", "get_depth_choices", "(", "layers", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", ",", "layer_blocks", "in", "enumerate", "(", "layers", ")", ":", "\n", "      ", "cur_block_choices", "=", "meta_depth_info", "[", "stage", "]", "\n", "assert", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", ",", "'stage={:}, {:} vs {:}'", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "64", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "          ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "'choices'", ":", "block_choices", ",", "\n", "'stage'", ":", "stage", ",", "\n", "'xstart'", ":", "xstart", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "'xstart'", "]", ",", "info", "[", "'stage'", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "        ", "idx", "=", "bisect_right", "(", "info", "[", "'choices'", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "\n", "", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_width_choices", "(", "None", ")", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'depth_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "layers", ")", ",", "meta_depth_info", "[", "'num'", "]", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.arch_parameters": [[324, 331], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "LR", "=", "None", ")", ":", "\n", "    ", "if", "LR", "is", "None", ":", "\n", "      ", "return", "[", "self", ".", "width_attentions", ",", "self", ".", "depth_attentions", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "{", "\"params\"", ":", "self", ".", "width_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "depth_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.base_parameters": [[333, 335], ["list", "list", "list", "SearchImagenetResNet.SearchShapeImagenetResNet.classifier.parameters", "SearchImagenetResNet.SearchShapeImagenetResNet.layers.parameters", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool.parameters"], "methods", ["None"], ["", "", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_flop": [[336, 381], ["enumerate", "zip", "enumerate", "config_dict.copy.copy.copy", "channels.append", "ValueError", "selected_layers.append", "tuple", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "layer.get_flops", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select channels ", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "'genotype'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "      ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "'choices'", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "'xstart'", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "          ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "", "else", ":", "\n", "          ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "        ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'xblocks'", "]", "=", "selected_layers", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-shape'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_arch_info": [[382, 413], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for depth and width, there are {:} + {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "depth_attentions", ")", ",", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.4f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:17s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || discrepancy={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "string", "+=", "'\\n-----------------------------------------------'", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.set_tau": [[414, 418], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_message": [[419, 421], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.forward": [[422, 429], ["SearchImagenetResNet.SearchShapeImagenetResNet.basic_forward", "SearchImagenetResNet.SearchShapeImagenetResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.search_forward": [[430, 473], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "max", "enumerate", "sum", "SoftSelect.ChannelWiseInter", "possible_tensors.append", "sum", "feature_maps[].size", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_width_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", ")", "\n", "selected_widths", ",", "selected_width_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "        ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'choices'", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'stage'", "]", "\n", "#print ('iL={:}, choices={:}, stage={:}, probs={:}'.format(i, choices, xstagei, selected_depth_probs[xstagei].cpu().tolist()))", "\n", "#for A, W in zip(choices, selected_depth_probs[xstagei]):", "\n", "#  print('Size = {:}, W = {:}'.format(feature_maps[A].size(), W))", "\n", "possible_tensors", "=", "[", "]", "\n", "max_C", "=", "max", "(", "feature_maps", "[", "A", "]", ".", "size", "(", "1", ")", "for", "A", "in", "choices", ")", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "          ", "xtensor", "=", "ChannelWiseInter", "(", "feature_maps", "[", "A", "]", ",", "max_C", ")", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "xtensor", "*", "W", "for", "xtensor", ",", "W", "in", "zip", "(", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", ")", ")", "\n", "x", "=", "weighted_sum", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "expected_flop", "\n", "", "else", ":", "\n", "        ", "x_expected_flop", "=", "expected_flop", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.basic_forward": [[474, 483], ["enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool", "features.view.view.view", "SearchImagenetResNet.SearchShapeImagenetResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.get_depth_choices": [[12, 21], ["min", "enumerate", "range", "choices.append", "int", "float"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_depth_choices", "(", "layers", ")", ":", "\n", "  ", "min_depth", "=", "min", "(", "layers", ")", "\n", "info", "=", "{", "'num'", ":", "min_depth", "}", "\n", "for", "i", ",", "depth", "in", "enumerate", "(", "layers", ")", ":", "\n", "    ", "choices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "min_depth", "+", "1", ")", ":", "\n", "      ", "choices", ".", "append", "(", "int", "(", "float", "(", "depth", ")", "*", "j", "/", "min_depth", ")", ")", "\n", "", "info", "[", "i", "]", "=", "choices", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchImagenetResNet.conv_forward": [[23, 32], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["", "def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ConvBNReLU.__init__": [[42, 63], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchCifarResNet.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ConvBNReLU.get_flops": [[64, 75], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ConvBNReLU.get_range": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ConvBNReLU.forward": [[79, 86], ["SearchCifarResNet.ConvBNReLU.basic_forward", "SearchCifarResNet.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ConvBNReLU.search_forward": [[87, 112], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchCifarResNet.ConvBNReLU.get_flops", "SearchCifarResNet.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchCifarResNet.ConvBNReLU.avg", "SearchCifarResNet.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ConvBNReLU.basic_forward": [[113, 125], ["SearchCifarResNet.ConvBNReLU.conv", "SearchCifarResNet.ConvBNReLU.avg", "SearchCifarResNet.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet.ConvBNReLU.size", "SearchCifarResNet.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBasicblock.__init__": [[130, 143], ["torch.Module.__init__", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBasicblock.get_range": [[144, 146], ["SearchCifarResNet.ResNetBasicblock.conv_a.get_range", "SearchCifarResNet.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBasicblock.get_flops": [[147, 158], ["SearchCifarResNet.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchCifarResNet.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "3", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBasicblock.forward": [[159, 163], ["SearchCifarResNet.ResNetBasicblock.basic_forward", "SearchCifarResNet.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBasicblock.search_forward": [[164, 176], ["SearchCifarResNet.ResNetBasicblock.conv_a", "SearchCifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_b", ",", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBasicblock.basic_forward": [[177, 184], ["SearchCifarResNet.ResNetBasicblock.conv_a", "SearchCifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.__init__": [[190, 204], ["torch.Module.__init__", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range": [[205, 207], ["SearchCifarResNet.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops": [[208, 220], ["SearchCifarResNet.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchCifarResNet.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "4", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_D", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.forward": [[221, 225], ["SearchCifarResNet.ResNetBottleneck.basic_forward", "SearchCifarResNet.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.basic_forward": [[226, 234], ["SearchCifarResNet.ResNetBottleneck.conv_1x1", "SearchCifarResNet.ResNetBottleneck.conv_3x3", "SearchCifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.search_forward": [[235, 248], ["SearchCifarResNet.ResNetBottleneck.conv_1x1", "SearchCifarResNet.ResNetBottleneck.conv_3x3", "SearchCifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_1x4", ",", "sum", "(", "[", "expected_flop_1x1", ",", "expected_flop_3x3", ",", "expected_flop_1x4", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.__init__": [[252, 323], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "collections.OrderedDict", "collections.OrderedDict", "range", "SearchCifarResNet.SearchShapeCifarResNet.depth_info.items", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchCifarResNet.SearchShapeCifarResNet.register_parameter", "SearchCifarResNet.SearchShapeCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet.SearchShapeCifarResNet.apply", "SearchCifarResNet.get_depth_choices", "range", "SearchCifarResNet.SearchShapeCifarResNet.depth_info_list.append", "range", "len", "layer.get_range", "SearchCifarResNet.SearchShapeCifarResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet.ConvBNReLU", "len", "block", "SearchCifarResNet.SearchShapeCifarResNet.channels.append", "SearchCifarResNet.SearchShapeCifarResNet.layers.append", "bisect.bisect_right", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "block_choices.append", "len", "len", "SoftSelect.get_width_choices", "SearchCifarResNet.get_depth_choices", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_depth_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchShapeCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "cur_block_choices", "=", "get_depth_choices", "(", "layer_blocks", ",", "False", ")", "\n", "assert", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", ",", "'stage={:}, {:} vs {:}'", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:} ::: depth-block-choices={:} for {:} blocks.\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "          ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "'choices'", ":", "block_choices", ",", "\n", "'stage'", ":", "stage", ",", "\n", "'xstart'", ":", "xstart", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "'xstart'", "]", ",", "info", "[", "'stage'", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "        ", "idx", "=", "bisect_right", "(", "info", "[", "'choices'", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_width_choices", "(", "None", ")", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'depth_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ",", "get_depth_choices", "(", "layer_blocks", ",", "True", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters": [[324, 331], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "LR", "=", "None", ")", ":", "\n", "    ", "if", "LR", "is", "None", ":", "\n", "      ", "return", "[", "self", ".", "width_attentions", ",", "self", ".", "depth_attentions", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "{", "\"params\"", ":", "self", ".", "width_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "depth_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.base_parameters": [[333, 335], ["list", "list", "list", "SearchCifarResNet.SearchShapeCifarResNet.classifier.parameters", "SearchCifarResNet.SearchShapeCifarResNet.layers.parameters", "SearchCifarResNet.SearchShapeCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop": [[336, 399], ["enumerate", "zip", "enumerate", "config_dict.copy.copy.copy", "channels.append", "selected_layers.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "ValueError", "layer.get_flops", "int", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.functional.softmax.size", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "torch.functional.softmax.size", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select channels ", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "        ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'fix'", ":", "\n", "        ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "'invalid extra_info : {:}'", ".", "format", "(", "extra_info", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "prob", "[", "j", "]", "=", "1", "/", "(", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "'genotype'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "mode", "==", "'max'", "or", "mode", "==", "'fix'", ":", "\n", "      ", "choices", "=", "[", "depth_probs", ".", "size", "(", "1", ")", "-", "1", "for", "_", "in", "range", "(", "depth_probs", ".", "size", "(", "0", ")", ")", "]", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "multinomial", "(", "depth_probs", ",", "1", ",", "False", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "      ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "'choices'", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "'xstart'", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "          ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "", "else", ":", "\n", "          ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "        ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'xblocks'", "]", "=", "selected_layers", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-shape'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_arch_info": [[400, 431], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for depth and width, there are {:} + {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "depth_attentions", ")", ",", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.4f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:17s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || discrepancy={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "string", "+=", "'\\n-----------------------------------------------'", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.set_tau": [[432, 436], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_message": [[437, 439], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.forward": [[440, 447], ["SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "SearchCifarResNet.SearchShapeCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward": [[448, 493], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet.SearchShapeCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "max", "enumerate", "sum", "SoftSelect.ChannelWiseInter", "possible_tensors.append", "sum", "feature_maps[].size", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_width_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", ")", "\n", "selected_widths", ",", "selected_width_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "        ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'choices'", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'stage'", "]", "\n", "#print ('iL={:}, choices={:}, stage={:}, probs={:}'.format(i, choices, xstagei, selected_depth_probs[xstagei].cpu().tolist()))", "\n", "#for A, W in zip(choices, selected_depth_probs[xstagei]):", "\n", "#  print('Size = {:}, W = {:}'.format(feature_maps[A].size(), W))", "\n", "possible_tensors", "=", "[", "]", "\n", "max_C", "=", "max", "(", "feature_maps", "[", "A", "]", ".", "size", "(", "1", ")", "for", "A", "in", "choices", ")", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "          ", "xtensor", "=", "ChannelWiseInter", "(", "feature_maps", "[", "A", "]", ",", "max_C", ")", "\n", "#drop_ratio = 1-(tempi+1.0)/len(choices)", "\n", "#xtensor = drop_path(xtensor, drop_ratio)", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "xtensor", "*", "W", "for", "xtensor", ",", "W", "in", "zip", "(", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", ")", ")", "\n", "x", "=", "weighted_sum", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "expected_flop", "\n", "", "else", ":", "\n", "        ", "x_expected_flop", "=", "expected_flop", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward": [[494, 503], ["enumerate", "SearchCifarResNet.SearchShapeCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet.SearchShapeCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.get_depth_choices": [[15, 27], ["len", "list", "ValueError", "range", "list.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_depth_choices", "(", "nDepth", ",", "return_num", ")", ":", "\n", "  ", "if", "nDepth", "==", "2", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "nDepth", "==", "3", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "nDepth", ">", "3", ":", "\n", "    ", "choices", "=", "list", "(", "range", "(", "1", ",", "nDepth", "+", "1", ",", "2", ")", ")", "\n", "if", "choices", "[", "-", "1", "]", "<", "nDepth", ":", "choices", ".", "append", "(", "nDepth", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid nDepth : {:}'", ".", "format", "(", "nDepth", ")", ")", "\n", "", "if", "return_num", ":", "return", "len", "(", "choices", ")", "\n", "else", ":", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SearchCifarResNet.conv_forward": [[29, 38], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["", "def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.select2withP": [[8, 30], ["torch.gather", "torch.gather", "torch.functional.softmax", "torch.functional.softmax", "torch.no_grad", "torch.no_grad", "nn.functional.softmax.cpu", "torch.multinomial().to", "torch.multinomial().to", "torch.functional.softmax", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.multinomial", "torch.multinomial", "logits.log_softmax", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["def", "select2withP", "(", "logits", ",", "tau", ",", "just_prob", "=", "False", ",", "num", "=", "2", ",", "eps", "=", "1e-7", ")", ":", "\n", "  ", "if", "tau", "<=", "0", ":", "\n", "    ", "new_logits", "=", "logits", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "new_logits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "    ", "while", "True", ":", "# a trick to avoid the gumbels bug", "\n", "      ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "logits", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "new_logits", "=", "(", "logits", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "new_logits", ",", "dim", "=", "1", ")", "\n", "if", "(", "not", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "and", "(", "not", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "and", "(", "not", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "break", "\n", "\n", "", "", "if", "just_prob", ":", "return", "probs", "\n", "\n", "#with torch.no_grad(): # add eps for unexpected torch error", "\n", "#  probs = nn.functional.softmax(new_logits, dim=1)", "\n", "#  selected_index = torch.multinomial(probs + eps, 2, False)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# add eps for unexpected torch error", "\n", "    ", "probs", "=", "probs", ".", "cpu", "(", ")", "\n", "selected_index", "=", "torch", ".", "multinomial", "(", "probs", "+", "eps", ",", "num", ",", "False", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "", "selected_logit", "=", "torch", ".", "gather", "(", "new_logits", ",", "1", ",", "selected_index", ")", "\n", "selcted_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "selected_logit", ",", "dim", "=", "1", ")", "\n", "return", "selected_index", ",", "selcted_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInter": [[32, 39], ["SoftSelect.ChannelWiseInterV1", "SoftSelect.ChannelWiseInterV2", "ValueError"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInterV1", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInterV2"], ["", "def", "ChannelWiseInter", "(", "inputs", ",", "oC", ",", "mode", "=", "'v2'", ")", ":", "\n", "  ", "if", "mode", "==", "'v1'", ":", "\n", "    ", "return", "ChannelWiseInterV1", "(", "inputs", ",", "oC", ")", "\n", "", "elif", "mode", "==", "'v2'", ":", "\n", "    ", "return", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInterV1": [[41, 55], ["inputs.size", "torch.zeros", "torch.zeros", "range", "inputs.dim", "inputs.size", "int", "int", "inputs[].mean", "math.floor", "math.ceil", "SoftSelect.ChannelWiseInterV1.start_index"], "function", ["None"], ["", "", "def", "ChannelWiseInterV1", "(", "inputs", ",", "oC", ")", ":", "\n", "  ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "'invalid dimension : {:}'", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "def", "start_index", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "int", "(", "math", ".", "floor", "(", "float", "(", "a", "*", "c", ")", "/", "b", ")", ")", "\n", "", "def", "end_index", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "(", "a", "+", "1", ")", "*", "c", ")", "/", "b", ")", ")", "\n", "", "batch", ",", "iC", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "(", "batch", ",", "oC", ",", "H", ",", "W", ")", ",", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "if", "iC", "==", "oC", ":", "return", "inputs", "\n", "for", "ot", "in", "range", "(", "oC", ")", ":", "\n", "    ", "istartT", ",", "iendT", "=", "start_index", "(", "ot", ",", "oC", ",", "iC", ")", ",", "end_index", "(", "ot", ",", "oC", ",", "iC", ")", "\n", "values", "=", "inputs", "[", ":", ",", "istartT", ":", "iendT", "]", ".", "mean", "(", "dim", "=", "1", ")", "\n", "outputs", "[", ":", ",", "ot", ",", ":", ",", ":", "]", "=", "values", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.ChannelWiseInterV2": [[57, 62], ["inputs.size", "inputs.dim", "inputs.size", "torch.functional.adaptive_avg_pool3d"], "function", ["None"], ["", "def", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ")", ":", "\n", "  ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "'invalid dimension : {:}'", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "batch", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "if", "C", "==", "oC", ":", "return", "inputs", "\n", "else", ":", "return", "nn", ".", "functional", ".", "adaptive_avg_pool3d", "(", "inputs", ",", "(", "oC", ",", "H", ",", "W", ")", ")", "\n", "#inputs_5D = inputs.view(batch, 1, C, H, W)", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.linear_forward": [[69, 76], ["inputs.size", "torch.functional.linear"], "function", ["None"], ["", "def", "linear_forward", "(", "inputs", ",", "linear", ")", ":", "\n", "  ", "if", "linear", "is", "None", ":", "return", "inputs", "\n", "iC", "=", "inputs", ".", "size", "(", "1", ")", "\n", "weight", "=", "linear", ".", "weight", "[", ":", ",", ":", "iC", "]", "\n", "if", "linear", ".", "bias", "is", "None", ":", "bias", "=", "None", "\n", "else", ":", "bias", "=", "linear", ".", "bias", "\n", "return", "nn", ".", "functional", ".", "linear", "(", "inputs", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_width_choices": [[78, 88], ["len", "sorted", "tuple", "int", "list", "set"], "function", ["None"], ["", "def", "get_width_choices", "(", "nOut", ")", ":", "\n", "  ", "xsrange", "=", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", "]", "\n", "if", "nOut", "is", "None", ":", "\n", "    ", "return", "len", "(", "xsrange", ")", "\n", "", "else", ":", "\n", "    ", "Xs", "=", "[", "int", "(", "nOut", "*", "i", ")", "for", "i", "in", "xsrange", "]", "\n", "#xs = [ int(nOut * i // 10) for i in range(2, 11)]", "\n", "#Xs = [x for i, x in enumerate(xs) if i+1 == len(xs) or xs[i+1] > x+1]", "\n", "Xs", "=", "sorted", "(", "list", "(", "set", "(", "Xs", ")", ")", ")", "\n", "return", "tuple", "(", "Xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.get_depth_choices": [[90, 101], ["ValueError"], "function", ["None"], ["", "", "def", "get_depth_choices", "(", "nDepth", ")", ":", "\n", "  ", "if", "nDepth", "is", "None", ":", "\n", "    ", "return", "3", "\n", "", "else", ":", "\n", "    ", "assert", "nDepth", ">=", "3", ",", "'nDepth should be greater than 2 vs {:}'", ".", "format", "(", "nDepth", ")", "\n", "if", "nDepth", "==", "1", ":", "return", "(", "1", ",", "1", ",", "1", ")", "\n", "elif", "nDepth", "==", "2", ":", "return", "(", "1", ",", "1", ",", "2", ")", "\n", "elif", "nDepth", ">=", "3", ":", "\n", "      ", "return", "(", "nDepth", "//", "3", ",", "nDepth", "*", "2", "//", "3", ",", "nDepth", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid Depth : {:}'", ".", "format", "(", "nDepth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_searchs.SoftSelect.drop_path": [[103, 112], ["x.new_zeros", "mask.bernoulli_.bernoulli_", "x.size"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", "=", "x", "*", "(", "mask", "/", "keep_prob", ")", "\n", "#x.div_(keep_prob)", "\n", "#x.mul_(mask)", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.Controller.__init__": [[17, 40], ["torch.Module.__init__", "len", "len", "generic_model.Controller.register_parameter", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "edge2index", ",", "op_names", ",", "max_nodes", ",", "lstm_size", "=", "32", ",", "lstm_num_layers", "=", "2", ",", "tanh_constant", "=", "2.5", ",", "temperature", "=", "5.0", ")", ":", "\n", "    ", "super", "(", "Controller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assign the attributes", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "num_edge", "=", "len", "(", "edge2index", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "num_ops", "=", "len", "(", "op_names", ")", "\n", "self", ".", "op_names", "=", "op_names", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_N", "=", "lstm_num_layers", "\n", "self", ".", "tanh_constant", "=", "tanh_constant", "\n", "self", ".", "temperature", "=", "temperature", "\n", "# create parameters", "\n", "self", ".", "register_parameter", "(", "'input_vars'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "lstm_size", ")", ")", ")", "\n", "self", ".", "w_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "lstm_size", ",", "hidden_size", "=", "self", ".", "lstm_size", ",", "num_layers", "=", "self", ".", "lstm_N", ")", "\n", "self", ".", "w_embd", "=", "nn", ".", "Embedding", "(", "self", ".", "num_ops", ",", "self", ".", "lstm_size", ")", "\n", "self", ".", "w_pred", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "num_ops", ")", "\n", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "input_vars", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_hh_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_ih_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_embd", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_pred", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.Controller.convert_structure": [[41, 52], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "convert_structure", "(", "self", ",", "_arch", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "_arch", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.Controller.forward": [[53, 76], ["range", "generic_model.Controller.w_lstm", "generic_model.Controller.w_pred", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "sampled_arch.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "log_probs.append", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "entropys.append", "generic_model.Controller.w_embd", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "generic_model.Controller.convert_structure", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.categorical.Categorical.sample.item", "torch.distributions.categorical.Categorical.log_prob.view", "torch.distributions.categorical.Categorical.entropy.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.Controller.convert_structure"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "    ", "inputs", ",", "h0", "=", "self", ".", "input_vars", ",", "None", "\n", "log_probs", ",", "entropys", ",", "sampled_arch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "iedge", "in", "range", "(", "self", ".", "num_edge", ")", ":", "\n", "      ", "outputs", ",", "h0", "=", "self", ".", "w_lstm", "(", "inputs", ",", "h0", ")", "\n", "\n", "logits", "=", "self", ".", "w_pred", "(", "outputs", ")", "\n", "logits", "=", "logits", "/", "self", ".", "temperature", "\n", "logits", "=", "self", ".", "tanh_constant", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "# distribution", "\n", "op_distribution", "=", "Categorical", "(", "logits", "=", "logits", ")", "\n", "op_index", "=", "op_distribution", ".", "sample", "(", ")", "\n", "sampled_arch", ".", "append", "(", "op_index", ".", "item", "(", ")", ")", "\n", "\n", "op_log_prob", "=", "op_distribution", ".", "log_prob", "(", "op_index", ")", "\n", "log_probs", ".", "append", "(", "op_log_prob", ".", "view", "(", "-", "1", ")", ")", "\n", "op_entropy", "=", "op_distribution", ".", "entropy", "(", ")", "\n", "entropys", ".", "append", "(", "op_entropy", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# obtain the input embedding for the next step", "\n", "inputs", "=", "self", ".", "w_embd", "(", "op_index", ")", "\n", "", "return", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "log_probs", ")", ")", ",", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "entropys", ")", ")", ",", "self", ".", "convert_structure", "(", "sampled_arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.__init__": [[81, 117], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "generic_model.GenericNAS201Model._cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "GenericNAS201Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_max_nodes", "=", "max_nodes", "\n", "self", ".", "_stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "_cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "_cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "_cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "_num_edge", "=", "num_edge", "\n", "# algorithm related", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "_mode", "=", "None", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "self", ".", "_tau", "=", "None", "\n", "self", ".", "_algo", "=", "None", "\n", "self", ".", "_drop_path", "=", "None", "\n", "self", ".", "verbose", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.set_algo": [[118, 128], ["generic_model.Controller", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["None"], ["", "def", "set_algo", "(", "self", ",", "algo", ":", "Text", ")", ":", "\n", "# used for searching", "\n", "    ", "assert", "self", ".", "_algo", "is", "None", ",", "'This functioin can only be called once.'", "\n", "self", ".", "_algo", "=", "algo", "\n", "if", "algo", "==", "'enas'", ":", "\n", "      ", "self", ".", "controller", "=", "Controller", "(", "self", ".", "edge2index", ",", "self", ".", "_op_names", ",", "self", ".", "_max_nodes", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "_num_edge", ",", "len", "(", "self", ".", "_op_names", ")", ")", ")", "\n", "if", "algo", "==", "'gdas'", ":", "\n", "        ", "self", ".", "_tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.set_cal_mode": [[129, 134], ["copy.deepcopy"], "methods", ["None"], ["", "", "", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'gdas'", ",", "'enas'", ",", "'urs'", ",", "'joint'", ",", "'select'", ",", "'dynamic'", "]", "\n", "self", ".", "_mode", "=", "mode", "\n", "if", "mode", "==", "'dynamic'", ":", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "else", ":", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.set_drop_path": [[135, 142], ["None"], "methods", ["None"], ["", "def", "set_drop_path", "(", "self", ",", "progress", ",", "drop_path_rate", ")", ":", "\n", "    ", "if", "drop_path_rate", "is", "None", ":", "\n", "      ", "self", ".", "_drop_path", "=", "None", "\n", "", "elif", "progress", "is", "None", ":", "\n", "      ", "self", ".", "_drop_path", "=", "drop_path_rate", "\n", "", "else", ":", "\n", "      ", "self", ".", "_drop_path", "=", "progress", "*", "drop_path_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.mode": [[143, 146], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "mode", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.drop_path": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "drop_path", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_drop_path", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.weights": [[151, 159], ["list", "list", "list", "list", "list", "generic_model.GenericNAS201Model._stem.parameters", "generic_model.GenericNAS201Model._cells.parameters", "generic_model.GenericNAS201Model.lastact.parameters", "generic_model.GenericNAS201Model.global_pooling.parameters", "generic_model.GenericNAS201Model.classifier.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "_stem", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "_cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.set_tau": [[160, 162], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "_tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.tau": [[163, 166], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.alphas": [[167, 173], ["list", "generic_model.GenericNAS201Model.controller.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "alphas", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_algo", "==", "'enas'", ":", "\n", "      ", "return", "list", "(", "self", ".", "controller", ".", "parameters", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.message": [[174, 180], ["generic_model.GenericNAS201Model.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "@", "property", "\n", "def", "message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "_cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "_cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.show_alphas": [[181, 187], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "if", "self", ".", "_algo", "==", "'enas'", ":", "\n", "        ", "return", "'w_pred :\\n{:}'", ".", "format", "(", "self", ".", "controller", ".", "w_pred", ".", "weight", ")", "\n", "", "else", ":", "\n", "        ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.extra_repr": [[189, 191], ["None"], "methods", ["None"], ["", "", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={_max_nodes}, N={_layerN}, L={_Layer}, alg={_algo})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.genotype": [[192, 205], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "property", "\n", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "_op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.dync_genotype": [[206, 223], ["range", "genotypes.Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "_max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "          ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "_op_names", ")", "\n", "", "else", ":", "\n", "          ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "_op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.get_log_prob": [[224, 234], ["enumerate", "sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.log_softmax", "torch.functional.log_softmax", "generic_model.GenericNAS201Model._op_names.index", "select_logits.append", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_log_prob", "(", "self", ",", "arch", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "logits", "=", "nn", ".", "functional", ".", "log_softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "select_logits", "=", "[", "]", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "arch", ".", "nodes", ")", ":", "\n", "      ", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "1", ",", "xin", ")", "\n", "op_index", "=", "self", ".", "_op_names", ".", "index", "(", "op", ")", "\n", "select_logits", ".", "append", "(", "logits", "[", "self", ".", "edge2index", "[", "node_str", "]", ",", "op_index", "]", ")", "\n", "", "", "return", "sum", "(", "select_logits", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.return_topK": [[235, 245], ["genotypes.Structure.gen_all", "len", "random.sample", "sorted", "generic_model.GenericNAS201Model.get_log_prob", "len", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.gen_all", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob"], ["", "def", "return_topK", "(", "self", ",", "K", ",", "use_random", "=", "False", ")", ":", "\n", "    ", "archs", "=", "Structure", ".", "gen_all", "(", "self", ".", "_op_names", ",", "self", ".", "_max_nodes", ",", "False", ")", "\n", "pairs", "=", "[", "(", "self", ".", "get_log_prob", "(", "arch", ")", ",", "arch", ")", "for", "arch", "in", "archs", "]", "\n", "if", "K", "<", "0", "or", "K", ">=", "len", "(", "archs", ")", ":", "K", "=", "len", "(", "archs", ")", "\n", "if", "use_random", ":", "\n", "      ", "return", "random", ".", "sample", "(", "archs", ",", "K", ")", "\n", "", "else", ":", "\n", "      ", "sorted_pairs", "=", "sorted", "(", "pairs", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "0", "]", ")", "\n", "return_pairs", "=", "[", "sorted_pairs", "[", "_", "]", "[", "1", "]", "for", "_", "in", "range", "(", "K", ")", "]", "\n", "return", "return_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.normalize_archp": [[246, 267], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hardwts.detach().cpu", "torch.functional.softmax.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax.detach().cpu", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.functional.softmax.max", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "generic_model.GenericNAS201Model.arch_parameters.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.functional.softmax.detach", "hardwts.detach", "torch.functional.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "", "def", "normalize_archp", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "mode", "==", "'gdas'", ":", "\n", "      ", "while", "True", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "self", ".", "arch_parameters", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "self", ".", "arch_parameters", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "          ", "continue", "\n", "", "else", ":", "break", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "hardwts_cpu", "=", "hardwts", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "hardwts", ",", "hardwts_cpu", ",", "index", ",", "'GUMBEL'", "\n", "", "else", ":", "\n", "      ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "index", "=", "alphas", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "alphas_cpu", "=", "alphas", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "alphas", ",", "alphas_cpu", ",", "index", ",", "'SOFTMAX'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.forward": [[268, 304], ["generic_model.GenericNAS201Model.normalize_archp", "generic_model.GenericNAS201Model._stem", "enumerate", "generic_model.GenericNAS201Model.lastact", "generic_model.GenericNAS201Model.global_pooling", "out.view.view.view", "generic_model.GenericNAS201Model.classifier", "isinstance", "print", "out.view.view.size", "cell", "cell_operations.drop_path", "random.random", "cell.forward_urs", "cell.forward_select", "cell.forward_joint", "cell.forward_dynamic", "cell.forward_gdas", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.normalize_archp", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.generic_model.GenericNAS201Model.drop_path", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.random", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_urs", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_select", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_joint", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", ",", "alphas_cpu", ",", "index", ",", "verbose_str", "=", "self", ".", "normalize_archp", "(", ")", "\n", "feature", "=", "self", ".", "_stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "_cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'urs'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_urs", "(", "feature", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "verbose_str", "+=", "'-forward_urs'", "\n", "", "", "elif", "self", ".", "mode", "==", "'select'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_select", "(", "feature", ",", "alphas_cpu", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "verbose_str", "+=", "'-forward_select'", "\n", "", "", "elif", "self", ".", "mode", "==", "'joint'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_joint", "(", "feature", ",", "alphas", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "verbose_str", "+=", "'-forward_joint'", "\n", "", "", "elif", "self", ".", "mode", "==", "'dynamic'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "dynamic_cell", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "verbose_str", "+=", "'-forward_dynamic'", "\n", "", "", "elif", "self", ".", "mode", "==", "'gdas'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_gdas", "(", "feature", ",", "alphas", ",", "index", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "verbose_str", "+=", "'-forward_gdas'", "\n", "", "", "else", ":", "raise", "ValueError", "(", "'invalid mode={:}'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "if", "self", ".", "drop_path", "is", "not", "None", ":", "\n", "        ", "feature", "=", "drop_path", "(", "feature", ",", "self", ".", "drop_path", ")", "\n", "", "", "if", "self", ".", "verbose", "and", "random", ".", "random", "(", ")", "<", "0.001", ":", "\n", "      ", "print", "(", "verbose_str", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.__init__": [[16, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_darts.TinyNetworkDarts.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkDarts", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.get_weights": [[47, 52], ["list", "list", "list", "list", "list", "search_model_darts.TinyNetworkDarts.classifier.parameters", "search_model_darts.TinyNetworkDarts.stem.parameters", "search_model_darts.TinyNetworkDarts.cells.parameters", "search_model_darts.TinyNetworkDarts.lastact.parameters", "search_model_darts.TinyNetworkDarts.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.get_alphas": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.show_alphas": [[56, 59], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.get_message": [[60, 65], ["search_model_darts.TinyNetworkDarts.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.extra_repr": [[66, 68], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.genotype": [[69, 81], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts.TinyNetworkDarts.forward": [[82, 98], ["torch.functional.softmax", "torch.functional.softmax", "search_model_darts.TinyNetworkDarts.stem", "enumerate", "search_model_darts.TinyNetworkDarts.lastact", "search_model_darts.TinyNetworkDarts.global_pooling", "out.view.view.view", "search_model_darts.TinyNetworkDarts.classifier", "isinstance", "out.view.view.size", "cell", "cell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "\n", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ",", "alphas", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.__init__": [[25, 38], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ")", ":", "\n", "    ", "assert", "isinstance", "(", "genotype", ",", "list", ")", "or", "isinstance", "(", "genotype", ",", "tuple", ")", ",", "'invalid class of genotype : {:}'", ".", "format", "(", "type", "(", "genotype", ")", ")", "\n", "self", ".", "node_num", "=", "len", "(", "genotype", ")", "+", "1", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "node_N", "=", "[", "]", "\n", "for", "idx", ",", "node_info", "in", "enumerate", "(", "genotype", ")", ":", "\n", "      ", "assert", "isinstance", "(", "node_info", ",", "list", ")", "or", "isinstance", "(", "node_info", ",", "tuple", ")", ",", "'invalid class of node_info : {:}'", ".", "format", "(", "type", "(", "node_info", ")", ")", "\n", "assert", "len", "(", "node_info", ")", ">=", "1", ",", "'invalid length : {:}'", ".", "format", "(", "len", "(", "node_info", ")", ")", "\n", "for", "node_in", "in", "node_info", ":", "\n", "        ", "assert", "isinstance", "(", "node_in", ",", "list", ")", "or", "isinstance", "(", "node_in", ",", "tuple", ")", ",", "'invalid class of in-node : {:}'", ".", "format", "(", "type", "(", "node_in", ")", ")", "\n", "assert", "len", "(", "node_in", ")", "==", "2", "and", "node_in", "[", "1", "]", "<=", "idx", ",", "'invalid in-node : {:}'", ".", "format", "(", "node_in", ")", "\n", "", "self", ".", "node_N", ".", "append", "(", "len", "(", "node_info", ")", ")", "\n", "self", ".", "nodes", ".", "append", "(", "tuple", "(", "deepcopy", "(", "node_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist": [[39, 51], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "tolist", "(", "self", ",", "remove_str", ")", ":", "\n", "# convert this class to the list, if remove_str is 'none', then remove the 'none' operation.", "\n", "# note that we re-order the input node in this function", "\n", "# return the-genotype-list and success [if unsuccess, it is not a connectivity]", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "node_info", "=", "list", "(", "node_info", ")", "\n", "node_info", "=", "sorted", "(", "node_info", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "node_info", "=", "tuple", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "!=", "remove_str", ",", "node_info", ")", ")", "\n", "if", "len", "(", "node_info", ")", "==", "0", ":", "return", "None", ",", "False", "\n", "genotypes", ".", "append", "(", "node_info", ")", "\n", "", "return", "genotypes", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.node": [[52, 55], ["len", "len"], "methods", ["None"], ["", "def", "node", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">", "0", "and", "index", "<=", "len", "(", "self", ")", ",", "'invalid index={:} < {:}'", ".", "format", "(", "index", ",", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tostr": [[56, 63], ["strings.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "tostr", "(", "self", ")", ":", "\n", "    ", "strings", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "string", "=", "'|'", ".", "join", "(", "[", "x", "[", "0", "]", "+", "'~{:}'", ".", "format", "(", "x", "[", "1", "]", ")", "for", "x", "in", "node_info", "]", ")", "\n", "string", "=", "'|{:}|'", ".", "format", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "'+'", ".", "join", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.check_valid": [[64, 74], ["enumerate", "sums.append", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "check_valid", "(", "self", ")", ":", "\n", "    ", "nodes", "=", "{", "0", ":", "True", "}", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "sums", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "is", "False", ":", "x", "=", "False", "\n", "else", ":", "x", "=", "True", "\n", "sums", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i", "+", "1", "]", "=", "sum", "(", "sums", ")", ">", "0", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.to_unique_str": [[75, 94], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "to_unique_str", "(", "self", ",", "consider_zero", "=", "False", ")", ":", "\n", "# this is used to identify the isomorphic cell, which rerquires the prior knowledge of operation", "\n", "# two operations are special, i.e., none and skip_connect", "\n", "    ", "nodes", "=", "{", "0", ":", "'0'", "}", "\n", "for", "i_node", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "cur_node", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "if", "consider_zero", "is", "None", ":", "\n", "          ", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "elif", "consider_zero", ":", "\n", "          ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "==", "'#'", ":", "x", "=", "'#'", "# zero", "\n", "elif", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "else", ":", "\n", "          ", "if", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "cur_node", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i_node", "+", "1", "]", "=", "'+'", ".", "join", "(", "sorted", "(", "cur_node", ")", ")", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.check_valid_op": [[95, 101], ["None"], "methods", ["None"], ["", "def", "check_valid_op", "(", "self", ",", "op_names", ")", ":", "\n", "    ", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "for", "inode_edge", "in", "node_info", ":", "\n", "#assert inode_edge[0] in op_names, 'invalid op-name : {:}'.format(inode_edge[0])", "\n", "        ", "if", "inode_edge", "[", "0", "]", "not", "in", "op_names", ":", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.__repr__": [[102, 104], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tostr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({node_num} nodes with {node_info})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "node_info", "=", "self", ".", "tostr", "(", ")", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "nodes", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.__getitem__": [[108, 110], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2structure": [[111, 124], ["isinstance", "isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2structure", "(", "xstr", ")", ":", "\n", "    ", "if", "isinstance", "(", "xstr", ",", "Structure", ")", ":", "return", "xstr", "\n", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2fullstructure": [[125, 141], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2fullstructure", "(", "xstr", ",", "default_name", "=", "'none'", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "list", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "all_in_nodes", "=", "list", "(", "x", "[", "1", "]", "for", "x", "in", "input_infos", ")", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "if", "j", "not", "in", "all_in_nodes", ":", "input_infos", ".", "append", "(", "(", "default_name", ",", "j", ")", ")", "\n", "", "node_info", "=", "sorted", "(", "input_infos", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "genotypes", ".", "append", "(", "tuple", "(", "node_info", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.gen_all": [[142, 161], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.get_combination", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.get_combination", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "gen_all", "(", "search_space", ",", "num", ",", "return_ori", ")", ":", "\n", "    ", "assert", "isinstance", "(", "search_space", ",", "list", ")", "or", "isinstance", "(", "search_space", ",", "tuple", ")", ",", "'invalid class of search-space : {:}'", ".", "format", "(", "type", "(", "search_space", ")", ")", "\n", "assert", "num", ">=", "2", ",", "'There should be at least two nodes in a neural cell instead of {:}'", ".", "format", "(", "num", ")", "\n", "all_archs", "=", "get_combination", "(", "search_space", ",", "1", ")", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "all_archs", ")", ":", "\n", "      ", "all_archs", "[", "i", "]", "=", "[", "tuple", "(", "arch", ")", "]", "\n", "\n", "", "for", "inode", "in", "range", "(", "2", ",", "num", ")", ":", "\n", "      ", "cur_nodes", "=", "get_combination", "(", "search_space", ",", "inode", ")", "\n", "new_all_archs", "=", "[", "]", "\n", "for", "previous_arch", "in", "all_archs", ":", "\n", "        ", "for", "cur_node", "in", "cur_nodes", ":", "\n", "          ", "new_all_archs", ".", "append", "(", "previous_arch", "+", "[", "tuple", "(", "cur_node", ")", "]", ")", "\n", "", "", "all_archs", "=", "new_all_archs", "\n", "", "if", "return_ori", ":", "\n", "      ", "return", "all_archs", "\n", "", "else", ":", "\n", "      ", "return", "[", "Structure", "(", "x", ")", "for", "x", "in", "all_archs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.get_combination": [[7, 21], ["range", "combs.append", "new_combs.append"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_combination", "(", "space", ",", "num", ")", ":", "\n", "  ", "combs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "    ", "if", "i", "==", "0", ":", "\n", "      ", "for", "func", "in", "space", ":", "\n", "        ", "combs", ".", "append", "(", "[", "(", "func", ",", "i", ")", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "new_combs", "=", "[", "]", "\n", "for", "string", "in", "combs", ":", "\n", "        ", "for", "func", "in", "space", ":", "\n", "          ", "xstring", "=", "string", "+", "[", "(", "func", ",", "i", ")", "]", "\n", "new_combs", ".", "append", "(", "xstring", ")", "\n", "", "", "combs", "=", "new_combs", "\n", "", "", "return", "combs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.__init__": [[14, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "lookup.nas201bench.models.cell_searchs.search_cells.NASNetSearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "steps", ",", "multiplier", ",", "stem_multiplier", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetworkGDAS_FRC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "RAW_OP_CLASSES", "[", "'gdas_reduction'", "]", "(", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "reduction", "or", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.get_weights": [[50, 55], ["list", "list", "list", "list", "list", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.classifier.parameters", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.stem.parameters", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.cells.parameters", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.lastact.parameters", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.set_tau": [[56, 58], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.get_tau": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.get_alphas": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.show_alphas": [[65, 69], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}'", ".", "format", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.get_message": [[70, 75], ["search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.extra_repr": [[76, 78], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.genotype": [[79, 97], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.forward": [[98, 126], ["search_model_gdas_frc_nasnet.NASNetworkGDAS_FRC.forward.get_gumbel_prob"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "def", "get_gumbel_prob", "(", "xins", ")", ":", "\n", "      ", "while", "True", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "xins", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "xins", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "          ", "continue", "\n", "", "else", ":", "break", "\n", "", "return", "hardwts", ",", "index", "\n", "\n", "", "hardwts", ",", "index", "=", "get_gumbel_prob", "(", "self", ".", "arch_parameters", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "\n", "        ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ")", "\n", "", "else", ":", "\n", "        ", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.__init__": [[15, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_gdas.TinyNetworkGDAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkGDAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_weights": [[47, 52], ["list", "list", "list", "list", "list", "search_model_gdas.TinyNetworkGDAS.classifier.parameters", "search_model_gdas.TinyNetworkGDAS.stem.parameters", "search_model_gdas.TinyNetworkGDAS.cells.parameters", "search_model_gdas.TinyNetworkGDAS.lastact.parameters", "search_model_gdas.TinyNetworkGDAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.set_tau": [[53, 55], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_tau": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_alphas": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.show_alphas": [[62, 65], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_message": [[66, 71], ["search_model_gdas.TinyNetworkGDAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.extra_repr": [[72, 74], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.genotype": [[75, 87], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas.TinyNetworkGDAS.forward": [[88, 112], ["search_model_gdas.TinyNetworkGDAS.stem", "enumerate", "search_model_gdas.TinyNetworkGDAS.lastact", "search_model_gdas.TinyNetworkGDAS.global_pooling", "out.view.view.view", "search_model_gdas.TinyNetworkGDAS.classifier", "torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "isinstance", "out.view.view.size", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.functional.softmax.max", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "cell.forward_gdas", "cell", "search_model_gdas.TinyNetworkGDAS.arch_parameters.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.functional.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "while", "True", ":", "\n", "      ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "self", ".", "arch_parameters", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "self", ".", "arch_parameters", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "        ", "continue", "\n", "", "else", ":", "break", "\n", "\n", "", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", ".", "forward_gdas", "(", "feature", ",", "hardwts", ",", "index", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.__init__": [[13, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "lookup.nas201bench.models.cell_searchs.search_cells.NASNetSearchCell", "search_model_gdas_nasnet.NASNetworkGDAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "steps", ",", "multiplier", ",", "stem_multiplier", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetworkGDAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_weights": [[47, 52], ["list", "list", "list", "list", "list", "search_model_gdas_nasnet.NASNetworkGDAS.classifier.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.stem.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.cells.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.lastact.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.set_tau": [[53, 55], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_tau": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_alphas": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.show_alphas": [[62, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_message": [[68, 73], ["search_model_gdas_nasnet.NASNetworkGDAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.extra_repr": [[74, 76], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.genotype": [[77, 97], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_gdas_nasnet.NASNetworkGDAS.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "\n", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.forward": [[98, 126], ["search_model_gdas_nasnet.NASNetworkGDAS.forward.get_gumbel_prob"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "def", "get_gumbel_prob", "(", "xins", ")", ":", "\n", "      ", "while", "True", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "xins", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "xins", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "          ", "continue", "\n", "", "else", ":", "break", "\n", "", "return", "hardwts", ",", "index", "\n", "\n", "", "normal_hardwts", ",", "normal_index", "=", "get_gumbel_prob", "(", "self", ".", "arch_normal_parameters", ")", "\n", "reduce_hardwts", ",", "reduce_index", "=", "get_gumbel_prob", "(", "self", ".", "arch_reduce_parameters", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "hardwts", ",", "index", "=", "reduce_hardwts", ",", "reduce_index", "\n", "else", ":", "hardwts", ",", "index", "=", "normal_hardwts", ",", "normal_index", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas_utils.Controller.__init__": [[12, 32], ["torch.Module.__init__", "search_model_enas_utils.Controller.register_parameter", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_edge", ",", "num_ops", ",", "lstm_size", "=", "32", ",", "lstm_num_layers", "=", "2", ",", "tanh_constant", "=", "2.5", ",", "temperature", "=", "5.0", ")", ":", "\n", "    ", "super", "(", "Controller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assign the attributes", "\n", "self", ".", "num_edge", "=", "num_edge", "\n", "self", ".", "num_ops", "=", "num_ops", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_N", "=", "lstm_num_layers", "\n", "self", ".", "tanh_constant", "=", "tanh_constant", "\n", "self", ".", "temperature", "=", "temperature", "\n", "# create parameters", "\n", "self", ".", "register_parameter", "(", "'input_vars'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "lstm_size", ")", ")", ")", "\n", "self", ".", "w_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "lstm_size", ",", "hidden_size", "=", "self", ".", "lstm_size", ",", "num_layers", "=", "self", ".", "lstm_N", ")", "\n", "self", ".", "w_embd", "=", "nn", ".", "Embedding", "(", "self", ".", "num_ops", ",", "self", ".", "lstm_size", ")", "\n", "self", ".", "w_pred", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "num_ops", ")", "\n", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "input_vars", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_hh_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_ih_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_embd", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_pred", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas_utils.Controller.forward": [[33, 56], ["range", "search_model_enas_utils.Controller.w_lstm", "search_model_enas_utils.Controller.w_pred", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "sampled_arch.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "log_probs.append", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "entropys.append", "search_model_enas_utils.Controller.w_embd", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.categorical.Categorical.sample.item", "torch.distributions.categorical.Categorical.log_prob.view", "torch.distributions.categorical.Categorical.entropy.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "    ", "inputs", ",", "h0", "=", "self", ".", "input_vars", ",", "None", "\n", "log_probs", ",", "entropys", ",", "sampled_arch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "iedge", "in", "range", "(", "self", ".", "num_edge", ")", ":", "\n", "      ", "outputs", ",", "h0", "=", "self", ".", "w_lstm", "(", "inputs", ",", "h0", ")", "\n", "\n", "logits", "=", "self", ".", "w_pred", "(", "outputs", ")", "\n", "logits", "=", "logits", "/", "self", ".", "temperature", "\n", "logits", "=", "self", ".", "tanh_constant", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "# distribution", "\n", "op_distribution", "=", "Categorical", "(", "logits", "=", "logits", ")", "\n", "op_index", "=", "op_distribution", ".", "sample", "(", ")", "\n", "sampled_arch", ".", "append", "(", "op_index", ".", "item", "(", ")", ")", "\n", "\n", "op_log_prob", "=", "op_distribution", ".", "log_prob", "(", "op_index", ")", "\n", "log_probs", ".", "append", "(", "op_log_prob", ".", "view", "(", "-", "1", ")", ")", "\n", "op_entropy", "=", "op_distribution", ".", "entropy", "(", ")", "\n", "entropys", ".", "append", "(", "op_entropy", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# obtain the input embedding for the next step", "\n", "inputs", "=", "self", ".", "w_embd", "(", "op_index", ")", "\n", "", "return", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "log_probs", ")", ")", ",", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "entropys", ")", ")", ",", "sampled_arch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.__init__": [[14, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_darts_nasnet.NASNetworkDARTS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "N", ":", "int", ",", "steps", ":", "int", ",", "multiplier", ":", "int", ",", "stem_multiplier", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "search_space", ":", "List", "[", "Text", "]", ",", "affine", ":", "bool", ",", "track_running_stats", ":", "bool", ")", ":", "\n", "    ", "super", "(", "NASNetworkDARTS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_weights": [[48, 53], ["list", "list", "list", "list", "list", "search_model_darts_nasnet.NASNetworkDARTS.classifier.parameters", "search_model_darts_nasnet.NASNetworkDARTS.stem.parameters", "search_model_darts_nasnet.NASNetworkDARTS.cells.parameters", "search_model_darts_nasnet.NASNetworkDARTS.lastact.parameters", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "    ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.show_alphas": [[57, 62], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", "->", "Text", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_message": [[63, 68], ["search_model_darts_nasnet.NASNetworkDARTS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.extra_repr": [[69, 71], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "Text", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.genotype": [[72, 92], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_darts_nasnet.NASNetworkDARTS.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", "->", "Dict", "[", "Text", ",", "List", "]", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "\n", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.forward": [[93, 109], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "search_model_darts_nasnet.NASNetworkDARTS.stem", "enumerate", "search_model_darts_nasnet.NASNetworkDARTS.lastact", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling", "out.view.view.view", "search_model_darts_nasnet.NASNetworkDARTS.classifier", "out.view.view.size", "cell.forward_darts"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "normal_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "1", ")", "\n", "reduce_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "1", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "ww", "=", "reduce_w", "\n", "else", ":", "ww", "=", "normal_w", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_darts", "(", "s0", ",", "s1", ",", "ww", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.__init__": [[16, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_setn_nasnet.NASNetworkSETN.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "N", ":", "int", ",", "steps", ":", "int", ",", "multiplier", ":", "int", ",", "stem_multiplier", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "search_space", ":", "List", "[", "Text", "]", ",", "affine", ":", "bool", ",", "track_running_stats", ":", "bool", ")", ":", "\n", "    ", "super", "(", "NASNetworkSETN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "mode", "=", "'urs'", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.set_cal_mode": [[52, 59], ["copy.deepcopy"], "methods", ["None"], ["", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'urs'", ",", "'joint'", ",", "'select'", ",", "'dynamic'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'dynamic'", ":", "\n", "      ", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_weights": [[60, 65], ["list", "list", "list", "list", "list", "search_model_setn_nasnet.NASNetworkSETN.classifier.parameters", "search_model_setn_nasnet.NASNetworkSETN.stem.parameters", "search_model_setn_nasnet.NASNetworkSETN.cells.parameters", "search_model_setn_nasnet.NASNetworkSETN.lastact.parameters", "search_model_setn_nasnet.NASNetworkSETN.global_pooling.parameters"], "methods", ["None"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_alphas": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.show_alphas": [[69, 74], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_message": [[75, 80], ["search_model_setn_nasnet.NASNetworkSETN.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.extra_repr": [[81, 83], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.dync_genotype": [[84, 101], ["range", "Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "          ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "          ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.genotype": [[102, 122], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_setn_nasnet.NASNetworkSETN.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "\n", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.forward": [[123, 140], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "search_model_setn_nasnet.NASNetworkSETN.stem", "enumerate", "search_model_setn_nasnet.NASNetworkSETN.lastact", "search_model_setn_nasnet.NASNetworkSETN.global_pooling", "out.view.view.view", "search_model_setn_nasnet.NASNetworkSETN.classifier", "out.view.view.size", "cell.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "normal_hardwts", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", "\n", "reduce_hardwts", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "# [TODO]", "\n", "      ", "raise", "NotImplementedError", "\n", "if", "cell", ".", "reduction", ":", "hardwts", ",", "index", "=", "reduce_hardwts", ",", "reduce_index", "\n", "else", ":", "hardwts", ",", "index", "=", "normal_hardwts", ",", "normal_index", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.__init__": [[15, 34], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.NAS201SearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "max_nodes", ",", "op_names", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "NAS201SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "op_names", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "j", "==", "0", ":", "\n", "          ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "else", ":", "\n", "          ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "self", ".", "edges", "[", "node_str", "]", "=", "nn", ".", "ModuleList", "(", "xlists", ")", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.extra_repr": [[35, 38], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'info :: {max_nodes} nodes, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward": [[39, 49], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_gdas": [[51, 63], ["range", "range", "nodes.append", "index[].item", "sum", "inter_nodes.append", "sum", "enumerate", "edge"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_gdas", "(", "self", ",", "inputs", ",", "hardwts", ",", "index", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "hardwts", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "argmaxs", "=", "index", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "weigsum", "=", "sum", "(", "weights", "[", "_ie", "]", "*", "edge", "(", "nodes", "[", "j", "]", ")", "if", "_ie", "==", "argmaxs", "else", "weights", "[", "_ie", "]", "for", "_ie", ",", "edge", "in", "enumerate", "(", "self", ".", "edges", "[", "node_str", "]", ")", ")", "\n", "inter_nodes", ".", "append", "(", "weigsum", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_joint": [[65, 77], ["range", "range", "nodes.append", "sum", "inter_nodes.append", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_joint", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "#aggregation = sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) / weights.numel()", "\n", "aggregation", "=", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", "\n", "inter_nodes", ".", "append", "(", "aggregation", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_urs": [[79, 96], ["range", "enumerate", "nodes.append", "range", "inter_nodes.append", "sum", "random.choice", "sops.append", "random.choice.", "hasattr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_urs", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "while", "True", ":", "# to avoid select zero for all ops", "\n", "        ", "sops", ",", "has_non_zero", "=", "[", "]", ",", "False", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "candidates", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "select_op", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sops", ".", "append", "(", "select_op", ")", "\n", "if", "not", "hasattr", "(", "select_op", ",", "'is_zero'", ")", "or", "select_op", ".", "is_zero", "is", "False", ":", "has_non_zero", "=", "True", "\n", "", "if", "has_non_zero", ":", "break", "\n", "", "inter_nodes", "=", "[", "]", "\n", "for", "j", ",", "select_op", "in", "enumerate", "(", "sops", ")", ":", "\n", "        ", "inter_nodes", ".", "append", "(", "select_op", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_select": [[98, 109], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_select", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "#inter_nodes.append( sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) )", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic": [[111, 122], ["range", "nodes.append", "search_cells.NAS201SearchCell.op_names.index", "inter_nodes.append", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_dynamic", "(", "self", ",", "inputs", ",", "structure", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "cur_op_node", "=", "structure", ".", "nodes", "[", "i", "-", "1", "]", "\n", "inter_nodes", "=", "[", "]", "\n", "for", "op_name", ",", "j", "in", "cur_op_node", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op_name", ")", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "op_index", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.MixedOp.__init__": [[127, 133], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "space", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.MixedOp.forward_gdas": [[134, 136], ["None"], "methods", ["None"], ["", "", "def", "forward_gdas", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "_ops", "[", "index", "]", "(", "x", ")", "*", "weights", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.MixedOp.forward_darts": [[137, 139], ["sum", "op", "zip"], "methods", ["None"], ["", "def", "forward_darts", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.__init__": [[144, 165], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "search_cells.MixedOp", "search_cells.NASNetSearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetSearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "space", ")", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "# indicate the edge from node-(j) to node-(i+2)", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "op", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.multiplier": [[166, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "multiplier", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_gdas": [[170, 186], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "indexs[].item", "clist.append", "sum", "op.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward_gdas", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ",", "indexs", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "index", "=", "indexs", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "clist", ".", "append", "(", "op", ".", "forward_gdas", "(", "h", ",", "weights", ",", "index", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_darts": [[187, 202], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "clist.append", "sum", "op.forward_darts"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward_darts", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "clist", ".", "append", "(", "op", ".", "forward_darts", "(", "h", ",", "weights", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.__init__": [[16, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_setn.TinyNetworkSETN.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkSETN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "mode", "=", "'urs'", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.set_cal_mode": [[49, 54], ["copy.deepcopy"], "methods", ["None"], ["", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'urs'", ",", "'joint'", ",", "'select'", ",", "'dynamic'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'dynamic'", ":", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "else", ":", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_cal_mode": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_cal_mode", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_weights": [[58, 63], ["list", "list", "list", "list", "list", "search_model_setn.TinyNetworkSETN.classifier.parameters", "search_model_setn.TinyNetworkSETN.stem.parameters", "search_model_setn.TinyNetworkSETN.cells.parameters", "search_model_setn.TinyNetworkSETN.lastact.parameters", "search_model_setn.TinyNetworkSETN.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_alphas": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_message": [[67, 72], ["search_model_setn.TinyNetworkSETN.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.extra_repr": [[73, 75], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.genotype": [[76, 88], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.dync_genotype": [[89, 106], ["range", "genotypes.Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "          ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "          ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob": [[107, 117], ["enumerate", "sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.log_softmax", "torch.functional.log_softmax", "search_model_setn.TinyNetworkSETN.op_names.index", "select_logits.append", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_log_prob", "(", "self", ",", "arch", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "logits", "=", "nn", ".", "functional", ".", "log_softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "select_logits", "=", "[", "]", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "arch", ".", "nodes", ")", ":", "\n", "      ", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "1", ",", "xin", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op", ")", "\n", "select_logits", ".", "append", "(", "logits", "[", "self", ".", "edge2index", "[", "node_str", "]", ",", "op_index", "]", ")", "\n", "", "", "return", "sum", "(", "select_logits", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.return_topK": [[119, 126], ["genotypes.Structure.gen_all", "sorted", "len", "search_model_setn.TinyNetworkSETN.get_log_prob", "len", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.gen_all", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob"], ["", "def", "return_topK", "(", "self", ",", "K", ")", ":", "\n", "    ", "archs", "=", "Structure", ".", "gen_all", "(", "self", ".", "op_names", ",", "self", ".", "max_nodes", ",", "False", ")", "\n", "pairs", "=", "[", "(", "self", ".", "get_log_prob", "(", "arch", ")", ",", "arch", ")", "for", "arch", "in", "archs", "]", "\n", "if", "K", "<", "0", "or", "K", ">=", "len", "(", "archs", ")", ":", "K", "=", "len", "(", "archs", ")", "\n", "sorted_pairs", "=", "sorted", "(", "pairs", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "0", "]", ")", "\n", "return_pairs", "=", "[", "sorted_pairs", "[", "_", "]", "[", "1", "]", "for", "_", "in", "range", "(", "K", ")", "]", "\n", "return", "return_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_setn.TinyNetworkSETN.forward": [[128, 153], ["torch.functional.softmax", "torch.functional.softmax", "search_model_setn.TinyNetworkSETN.stem", "enumerate", "search_model_setn.TinyNetworkSETN.lastact", "search_model_setn.TinyNetworkSETN.global_pooling", "out.view.view.view", "search_model_setn.TinyNetworkSETN.classifier", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax.detach().cpu", "isinstance", "out.view.view.size", "cell", "torch.functional.softmax.detach", "cell.forward_urs", "cell.forward_select", "cell.forward_joint", "cell.forward_dynamic", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_urs", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_select", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_joint", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "alphas", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'urs'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_urs", "(", "feature", ")", "\n", "", "elif", "self", ".", "mode", "==", "'select'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_select", "(", "feature", ",", "alphas_cpu", ")", "\n", "", "elif", "self", ".", "mode", "==", "'joint'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_joint", "(", "feature", ",", "alphas", ")", "\n", "", "elif", "self", ".", "mode", "==", "'dynamic'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "dynamic_cell", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid mode={:}'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas.TinyNetworkENAS.__init__": [[17, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_enas.TinyNetworkENAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkENAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "# to maintain the sampled architecture", "\n", "self", ".", "sampled_arch", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas.TinyNetworkENAS.update_arch": [[49, 68], ["isinstance", "isinstance", "range", "genotypes.Structure", "ValueError", "range", "genotypes.append", "xlist.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "update_arch", "(", "self", ",", "_arch", ")", ":", "\n", "    ", "if", "_arch", "is", "None", ":", "\n", "      ", "self", ".", "sampled_arch", "=", "None", "\n", "", "elif", "isinstance", "(", "_arch", ",", "Structure", ")", ":", "\n", "      ", "self", ".", "sampled_arch", "=", "_arch", "\n", "", "elif", "isinstance", "(", "_arch", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "      ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "        ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "_arch", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "self", ".", "sampled_arch", "=", "Structure", "(", "genotypes", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid type of input architecture : {:}'", ".", "format", "(", "_arch", ")", ")", "\n", "", "return", "self", ".", "sampled_arch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas.TinyNetworkENAS.create_controller": [[69, 71], ["search_model_enas_utils.Controller", "len", "len"], "methods", ["None"], ["", "def", "create_controller", "(", "self", ")", ":", "\n", "    ", "return", "Controller", "(", "len", "(", "self", ".", "edge2index", ")", ",", "len", "(", "self", ".", "op_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas.TinyNetworkENAS.get_message": [[72, 77], ["search_model_enas.TinyNetworkENAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas.TinyNetworkENAS.extra_repr": [[78, 80], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_enas.TinyNetworkENAS.forward": [[81, 95], ["search_model_enas.TinyNetworkENAS.stem", "enumerate", "search_model_enas.TinyNetworkENAS.lastact", "search_model_enas.TinyNetworkENAS.global_pooling", "out.view.view.view", "search_model_enas.TinyNetworkENAS.classifier", "isinstance", "out.view.view.size", "cell.forward_dynamic", "cell"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "sampled_arch", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs._test_module.main": [[7, 10], ["search_model_enas_utils.Controller", "search_model_enas_utils.Controller."], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "  ", "controller", "=", "Controller", "(", "6", ",", "4", ")", "\n", "predictions", "=", "controller", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_random.TinyNetworkRANDOM.__init__": [[16, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_random.TinyNetworkRANDOM.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkRANDOM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_random.TinyNetworkRANDOM.get_message": [[47, 52], ["search_model_random.TinyNetworkRANDOM.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_random.TinyNetworkRANDOM.extra_repr": [[53, 55], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_random.TinyNetworkRANDOM.random_genotype": [[56, 68], ["range", "genotypes.Structure", "range", "genotypes.append", "random.choice", "xlist.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "random_genotype", "(", "self", ",", "set_cache", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "arch", "=", "Structure", "(", "genotypes", ")", "\n", "if", "set_cache", ":", "self", ".", "arch_cache", "=", "arch", "\n", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_model_random.TinyNetworkRANDOM.forward": [[69, 82], ["search_model_random.TinyNetworkRANDOM.stem", "enumerate", "search_model_random.TinyNetworkRANDOM.lastact", "search_model_random.TinyNetworkRANDOM.global_pooling", "out.view.view.view", "search_model_random.TinyNetworkRANDOM.classifier", "isinstance", "out.view.view.size", "cell.forward_dynamic", "cell"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "arch_cache", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.ConvBNReLU.__init__": [[11, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.ConvBNReLU.forward": [[21, 31], ["InferCifarResNet_depth.ConvBNReLU.conv", "InferCifarResNet_depth.ConvBNReLU.avg", "InferCifarResNet_depth.ConvBNReLU.bn", "InferCifarResNet_depth.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.ResNetBasicblock.__init__": [[36, 49], ["torch.Module.__init__", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.ResNetBasicblock.forward": [[50, 60], ["InferCifarResNet_depth.ResNetBasicblock.conv_a", "InferCifarResNet_depth.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet_depth.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.ResNetBottleneck.__init__": [[66, 79], ["torch.Module.__init__", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.ResNetBottleneck.forward": [[80, 92], ["InferCifarResNet_depth.ResNetBottleneck.conv_1x1", "InferCifarResNet_depth.ResNetBottleneck.conv_3x3", "InferCifarResNet_depth.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet_depth.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.__init__": [[97, 139], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet_depth.InferDepthCifarResNet.apply", "len", "range", "InferCifarResNet_depth.InferDepthCifarResNet.modules", "ValueError", "InferCifarResNet_depth.ConvBNReLU", "block", "InferCifarResNet_depth.InferDepthCifarResNet.channels.append", "InferCifarResNet_depth.InferDepthCifarResNet.layers.append", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xblocks", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferDepthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "3", ",", "'invalid xblocks : {:}'", ".", "format", "(", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "'InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "planes", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "          ", "break", "\n", "\n", "", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.get_message": [[140, 142], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.forward": [[143, 151], ["enumerate", "InferCifarResNet_depth.InferDepthCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet_depth.InferDepthCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.ConvBNReLU.__init__": [[11, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.ConvBNReLU.forward": [[21, 31], ["InferCifarResNet.ConvBNReLU.conv", "InferCifarResNet.ConvBNReLU.avg", "InferCifarResNet.ConvBNReLU.bn", "InferCifarResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.ResNetBasicblock.__init__": [[36, 54], ["torch.Module.__init__", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.ResNetBasicblock.forward": [[55, 65], ["InferCifarResNet.ResNetBasicblock.conv_a", "InferCifarResNet.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.ResNetBottleneck.__init__": [[71, 90], ["torch.Module.__init__", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.ResNetBottleneck.forward": [[91, 103], ["InferCifarResNet.ResNetBottleneck.conv_1x1", "InferCifarResNet.ResNetBottleneck.conv_3x3", "InferCifarResNet.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.InferCifarResNet.__init__": [[108, 156], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet.InferCifarResNet.apply", "len", "range", "InferCifarResNet.InferCifarResNet.modules", "ValueError", "InferCifarResNet.ConvBNReLU", "block", "InferCifarResNet.InferCifarResNet.layers.append", "isinstance", "range", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xblocks", ",", "xchannels", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "3", ",", "'invalid xblocks : {:}'", ".", "format", "(", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "'InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "1", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iCs", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "          ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "iL", "+", "1", ",", "layer_blocks", ")", ":", "\n", "            ", "last_channel_idx", "+=", "num_conv", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "\n", "", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.InferCifarResNet.get_message": [[157, 159], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet.InferCifarResNet.forward": [[160, 168], ["enumerate", "InferCifarResNet.InferCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet.InferCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.ConvBNReLU.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "groups", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.ConvBNReLU.forward": [[20, 25], ["InferMobileNetV2.ConvBNReLU.conv", "InferMobileNetV2.ConvBNReLU.bn", "InferMobileNetV2.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.InvertedResidual.__init__": [[28, 51], ["torch.nn.Module.__init__", "layers.extend", "torch.nn.Sequential", "len", "len", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", ",", "stride", ",", "expand_ratio", ",", "additive", ")", ":", "\n", "    ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", ",", "'invalid stride : {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "len", "(", "channels", ")", "in", "[", "2", ",", "3", "]", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "\n", "if", "len", "(", "channels", ")", "==", "2", ":", "\n", "      ", "layers", "=", "[", "]", "\n", "", "else", ":", "\n", "      ", "layers", "=", "[", "ConvBNReLU", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "]", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "2", "]", ",", "3", ",", "stride", ",", "channels", "[", "-", "2", "]", ")", ",", "\n", "# pw-linear", "\n", "ConvBNReLU", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ",", "True", ",", "False", ")", ",", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "additive", "=", "additive", "\n", "if", "self", ".", "additive", "and", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", ":", "\n", "      ", "self", ".", "shortcut", "=", "ConvBNReLU", "(", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ",", "True", ",", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "shortcut", "=", "None", "\n", "", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.InvertedResidual.forward": [[52, 57], ["InferMobileNetV2.InvertedResidual.conv", "InferMobileNetV2.InvertedResidual.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "# if self.additive: return additive_func(out, x)", "\n", "if", "self", ".", "shortcut", ":", "return", "out", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "else", ":", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.InferMobileNetV2.__init__": [[60, 114], ["torch.nn.Module.__init__", "zip", "SharedUtils.parse_channel_info", "enumerate", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "InferMobileNetV2.InferMobileNetV2.apply", "len", "len", "len", "len", "InferMobileNetV2.ConvBNReLU", "range", "InferMobileNetV2.ConvBNReLU", "len", "len", "torch.nn.Dropout", "torch.nn.Linear", "block", "features.append", "len", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.shared_utils.parse_channel_info", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "xchannels", ",", "xblocks", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "InferMobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "inverted_residual_setting", "=", "[", "\n", "# t, c,  n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "assert", "len", "(", "inverted_residual_setting", ")", "==", "len", "(", "xblocks", ")", ",", "'invalid number of layers : {:} vs {:}'", ".", "format", "(", "len", "(", "inverted_residual_setting", ")", ",", "len", "(", "xblocks", ")", ")", "\n", "for", "block_num", ",", "ir_setting", "in", "zip", "(", "xblocks", ",", "inverted_residual_setting", ")", ":", "\n", "      ", "assert", "block_num", "<=", "ir_setting", "[", "2", "]", ",", "'{:} vs {:}'", ".", "format", "(", "block_num", ",", "ir_setting", ")", "\n", "", "xchannels", "=", "parse_channel_info", "(", "xchannels", ")", "\n", "#for i, chs in enumerate(xchannels):", "\n", "#  if i > 0: assert chs[0] == xchannels[i-1][-1], 'Layer[{:}] is invalid {:} vs {:}'.format(i, xchannels[i-1], chs)", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "message", "=", "'InferMobileNetV2 : xblocks={:}'", ".", "format", "(", "xblocks", ")", "\n", "# building first layer", "\n", "features", "=", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", "[", "0", "]", ",", "xchannels", "[", "0", "]", "[", "1", "]", ",", "3", ",", "2", ",", "1", ")", "]", "\n", "last_channel_idx", "=", "1", "\n", "\n", "# building inverted residual blocks", "\n", "for", "stage", ",", "(", "t", ",", "c", ",", "n", ",", "s", ")", "in", "enumerate", "(", "inverted_residual_setting", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "additv", "=", "True", "if", "i", ">", "0", "else", "False", "\n", "module", "=", "block", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", ",", "stride", ",", "t", ",", "additv", ")", "\n", "features", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, Cs={:}, stride={:}, expand={:}, original-C={:}\"", ".", "format", "(", "stage", ",", "i", ",", "n", ",", "len", "(", "features", ")", ",", "self", ".", "xchannels", "[", "last_channel_idx", "]", ",", "stride", ",", "t", ",", "c", ")", "\n", "last_channel_idx", "+=", "1", "\n", "if", "i", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "\n", "          ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "last_channel_idx", "+=", "1", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "0", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "# building last several layers", "\n", "", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "0", "]", ",", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "assert", "last_channel_idx", "+", "2", "==", "len", "(", "self", ".", "xchannels", ")", ",", "'{:} vs {:}'", ".", "format", "(", "last_channel_idx", ",", "len", "(", "self", ".", "xchannels", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "1", "]", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.InferMobileNetV2.get_message": [[115, 117], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferMobileNetV2.InferMobileNetV2.forward": [[118, 123], ["InferMobileNetV2.InferMobileNetV2.features", "InferMobileNetV2.InferMobileNetV2.mean", "InferMobileNetV2.InferMobileNetV2.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "features", "=", "self", ".", "features", "(", "inputs", ")", "\n", "vectors", "=", "features", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "predicts", "=", "self", ".", "classifier", "(", "vectors", ")", "\n", "return", "features", ",", "predicts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.ConvBNReLU.__init__": [[12, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.ConvBNReLU.forward": [[22, 32], ["InferImagenetResNet.ConvBNReLU.conv", "InferImagenetResNet.ConvBNReLU.avg", "InferImagenetResNet.ConvBNReLU.bn", "InferImagenetResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.ResNetBasicblock.__init__": [[37, 55], ["torch.Module.__init__", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.ResNetBasicblock.forward": [[56, 66], ["InferImagenetResNet.ResNetBasicblock.conv_a", "InferImagenetResNet.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferImagenetResNet.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.ResNetBottleneck.__init__": [[72, 91], ["torch.Module.__init__", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.ResNetBottleneck.forward": [[92, 104], ["InferImagenetResNet.ResNetBottleneck.conv_1x1", "InferImagenetResNet.ResNetBottleneck.conv_3x3", "InferImagenetResNet.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferImagenetResNet.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.InferImagenetResNet.__init__": [[109, 159], ["torch.Module.__init__", "InferImagenetResNet.InferImagenetResNet.layers.append", "enumerate", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "InferImagenetResNet.InferImagenetResNet.apply", "len", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "range", "len", "len", "InferImagenetResNet.InferImagenetResNet.modules", "ValueError", "sum", "sum", "block", "InferImagenetResNet.InferImagenetResNet.layers.append", "isinstance", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "range", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "xblocks", ",", "xchannels", ",", "deep_stem", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferImagenetResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'BasicBlock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "", "elif", "block_name", "==", "'Bottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "len", "(", "layers", ")", ",", "'invalid layers : {:} vs xblocks : {:}'", ".", "format", "(", "layers", ",", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "'InferImagenetResNet : Depth : {:} -> {:}, Layers for each block : {:}'", ".", "format", "(", "sum", "(", "layers", ")", "*", "block", ".", "num_conv", ",", "sum", "(", "xblocks", ")", "*", "block", ".", "num_conv", ",", "xblocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "if", "not", "deep_stem", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "7", ",", "2", ",", "3", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "1", "\n", "", "else", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "3", ",", "2", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", ",", "ConvBNReLU", "(", "xchannels", "[", "1", "]", ",", "xchannels", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "2", "\n", "", "self", ".", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "for", "stage", ",", "layer_blocks", "in", "enumerate", "(", "layers", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iCs", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "          ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "iL", "+", "1", ",", "layer_blocks", ")", ":", "\n", "            ", "last_channel_idx", "+=", "num_conv", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "", "", "", "assert", "last_channel_idx", "+", "1", "==", "len", "(", "self", ".", "xchannels", ")", ",", "'{:} vs {:}'", ".", "format", "(", "last_channel_idx", ",", "len", "(", "self", ".", "xchannels", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.InferImagenetResNet.get_message": [[160, 162], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferImagenetResNet.InferImagenetResNet.forward": [[163, 171], ["enumerate", "InferImagenetResNet.InferImagenetResNet.avgpool", "features.view.view.view", "InferImagenetResNet.InferImagenetResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.__init__": [[12, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "ValueError", "len", "torch.Conv2d", "torch.BatchNorm2d", "zip", "InferTinyCellNet.DynamicShapeTinyNet.cells.append", "torch.BatchNorm2d", "torch.ReLU", "len", "models.cell_operations.ResNetBasicblock", "models.cell_infers.cells.InferCell", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "channels", ":", "List", "[", "int", "]", ",", "genotype", ":", "Any", ",", "num_classes", ":", "int", ")", ":", "\n", "    ", "super", "(", "DynamicShapeTinyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_channels", "=", "channels", "\n", "if", "len", "(", "channels", ")", "%", "3", "!=", "2", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid number of layers : {:}'", ".", "format", "(", "len", "(", "channels", ")", ")", ")", "\n", "", "self", ".", "_num_stage", "=", "N", "=", "len", "(", "channels", ")", "//", "3", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# layer_channels   = [C    ] * N + [C*2 ] + [C*2  ] * N + [C*4 ] + [C*4  ] * N    ", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "c_prev", "=", "channels", "[", "0", "]", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "c_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "cell", "=", "ResNetBasicblock", "(", "c_prev", ",", "c_curr", ",", "2", ",", "True", ")", "\n", "else", ":", "cell", "=", "InferCell", "(", "genotype", ",", "c_prev", ",", "c_curr", ",", "1", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "c_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_num_layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "c_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "c_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.get_message": [[39, 44], ["InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr": [[45, 47], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_channels}, N={_num_stage}, L={_num_layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.forward": [[48, 59], ["InferTinyCellNet.DynamicShapeTinyNet.stem", "enumerate", "InferTinyCellNet.DynamicShapeTinyNet.lastact", "InferTinyCellNet.DynamicShapeTinyNet.global_pooling", "out.view.view.view", "InferTinyCellNet.DynamicShapeTinyNet.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.shared_utils.parse_channel_info": [[1, 6], ["xstring.split", "x.split", "int"], "function", ["None"], ["def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "  ", "blocks", "=", "xstring", ".", "split", "(", "' '", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.ConvBNReLU.__init__": [[11, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.ConvBNReLU.forward": [[21, 31], ["InferCifarResNet_width.ConvBNReLU.conv", "InferCifarResNet_width.ConvBNReLU.avg", "InferCifarResNet_width.ConvBNReLU.bn", "InferCifarResNet_width.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.ResNetBasicblock.__init__": [[36, 54], ["torch.Module.__init__", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.ResNetBasicblock.forward": [[55, 65], ["InferCifarResNet_width.ResNetBasicblock.conv_a", "InferCifarResNet_width.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet_width.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.ResNetBottleneck.__init__": [[71, 90], ["torch.Module.__init__", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.ResNetBottleneck.forward": [[91, 103], ["InferCifarResNet_width.ResNetBottleneck.conv_1x1", "InferCifarResNet_width.ResNetBottleneck.conv_3x3", "InferCifarResNet_width.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet_width.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.__init__": [[108, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet_width.InferWidthCifarResNet.apply", "range", "InferCifarResNet_width.InferWidthCifarResNet.modules", "ValueError", "InferCifarResNet_width.ConvBNReLU", "block", "InferCifarResNet_width.InferWidthCifarResNet.layers.append", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xchannels", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferWidthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "1", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iCs", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.get_message": [[150, 152], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.forward": [[153, 161], ["enumerate", "InferCifarResNet_width.InferWidthCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet_width.InferWidthCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.__init__": [[40, 44], ["None"], "methods", ["None"], ["  ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "file_path_or_dict", ":", "Optional", "[", "Union", "[", "Text", ",", "Dict", "]", "]", "=", "None", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"The initialization function that takes the dataset file path (or a dict loaded from that path) as input.\"\"\"", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.__getitem__": [[45, 47], ["copy.deepcopy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.arch": [[48, 54], ["copy.deepcopy", "print", "len", "len"], "methods", ["None"], ["", "def", "arch", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Return the topology structure of the `index`-th architecture.\"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the arch function with index={:}'", ".", "format", "(", "index", ")", ")", "\n", "", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index : {:} vs. {:}.'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", "\n", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "meta_archs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.__repr__": [[58, 60], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({num}/{total} architectures, file={filename})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "num", "=", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "total", "=", "len", "(", "self", ".", "meta_archs", ")", ",", "filename", "=", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.avaliable_hps": [[61, 64], ["list", "copy.deepcopy"], "methods", ["None"], ["", "@", "property", "\n", "def", "avaliable_hps", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "copy", ".", "deepcopy", "(", "self", ".", "_avaliable_hps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.used_time": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "used_time", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_used_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.reset_time": [[69, 71], ["None"], "methods", ["None"], ["", "def", "reset_time", "(", "self", ")", ":", "\n", "    ", "self", ".", "_used_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.simulate_train_eval": [[72, 85], ["api_utils.NASBenchMetaAPI.query_index_by_arch", "api_utils.NASBenchMetaAPI.get_latency", "api_utils.NASBenchMetaAPI.get_more_info", "api_utils.NASBenchMetaAPI.get_more_info"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_index_by_arch", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_latency", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.get_more_info", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.get_more_info"], ["", "def", "simulate_train_eval", "(", "self", ",", "arch", ",", "dataset", ",", "iepoch", "=", "None", ",", "hp", "=", "'12'", ",", "account_time", "=", "True", ")", ":", "\n", "    ", "index", "=", "self", ".", "query_index_by_arch", "(", "arch", ")", "\n", "all_names", "=", "(", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", ")", "\n", "assert", "dataset", "in", "all_names", ",", "'Invalid dataset name : {:} vs {:}'", ".", "format", "(", "dataset", ",", "all_names", ")", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "      ", "info", "=", "self", ".", "get_more_info", "(", "index", ",", "'cifar10-valid'", ",", "iepoch", "=", "iepoch", ",", "hp", "=", "hp", ",", "is_random", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "info", "=", "self", ".", "get_more_info", "(", "index", ",", "dataset", ",", "iepoch", "=", "iepoch", ",", "hp", "=", "hp", ",", "is_random", "=", "True", ")", "\n", "", "valid_acc", ",", "time_cost", "=", "info", "[", "'valid-accuracy'", "]", ",", "info", "[", "'train-all-time'", "]", "+", "info", "[", "'valid-per-time'", "]", "\n", "latency", "=", "self", ".", "get_latency", "(", "index", ",", "dataset", ")", "\n", "if", "account_time", ":", "\n", "      ", "self", ".", "_used_time", "+=", "time_cost", "\n", "", "return", "valid_acc", ",", "latency", ",", "time_cost", ",", "self", ".", "_used_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.random": [[86, 89], ["random.randint", "len"], "methods", ["None"], ["", "def", "random", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return a random index of all architectures.\"\"\"", "\n", "return", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "meta_archs", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_index_by_arch": [[90, 114], ["isinstance", "print", "isinstance", "len", "ValueError", "hasattr", "len", "arch.tostr", "arch.tostr"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tostr", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tostr"], ["", "def", "query_index_by_arch", "(", "self", ",", "arch", ")", ":", "\n", "    ", "\"\"\" This function is used to query the index of an architecture in the search space.\n        In the topology search space, the input arch can be an architecture string such as '|nor_conv_3x3~0|+|nor_conv_3x3~0|avg_pool_3x3~1|+|skip_connect~0|nor_conv_3x3~1|skip_connect~2|';\n          or an instance that has the 'tostr' function that can generate the architecture string;\n          or it is directly an architecture index, in this case, we will check whether it is valid or not.\n        This function will return the index.\n        If return -1, it means this architecture is not in the search space.\n        Otherwise, it will return an int in [0, the-number-of-candidates-in-the-search-space).\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call query_index_by_arch with arch={:}'", ".", "format", "(", "arch", ")", ")", "\n", "", "if", "isinstance", "(", "arch", ",", "int", ")", ":", "\n", "      ", "if", "0", "<=", "arch", "<", "len", "(", "self", ")", ":", "\n", "        ", "return", "arch", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid architecture index {:} vs [{:}, {:}].'", ".", "format", "(", "arch", ",", "0", ",", "len", "(", "self", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "arch", ",", "str", ")", ":", "\n", "      ", "if", "arch", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "elif", "hasattr", "(", "arch", ",", "'tostr'", ")", ":", "\n", "      ", "if", "arch", ".", "tostr", "(", ")", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", ".", "tostr", "(", ")", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "else", ":", "arch_index", "=", "-", "1", "\n", "return", "arch_index", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_by_arch": [[115, 118], ["api_utils.NASBenchMetaAPI.query_info_str_by_arch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.query_info_str_by_arch"], ["", "def", "query_by_arch", "(", "self", ",", "arch", ",", "hp", ")", ":", "\n", "# This is to make the current version be compatible with the old version.", "\n", "    ", "return", "self", ".", "query_info_str_by_arch", "(", "arch", ",", "hp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.reload": [[119, 124], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "reload", "(", "self", ",", "archive_root", ":", "Text", "=", "None", ",", "index", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"Overwrite all information of the 'index'-th architecture in the search space, where the data will be loaded from 'archive_root'.\n       If index is None, overwrite all ckps.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.clear_params": [[125, 142], ["print", "api_utils.NASBenchMetaAPI.arch2infos_dict[].items", "[].clear_params", "result.clear_params", "str", "ValueError", "list", "api_utils.NASBenchMetaAPI.arch2infos_dict[].keys", "str"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.clear_params", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.clear_params"], ["", "def", "clear_params", "(", "self", ",", "index", ":", "int", ",", "hp", ":", "Optional", "[", "Text", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"Remove the architecture's weights to save memory.\n    :arg\n      index: the index of the target architecture\n      hp: a flag to controll how to clear the parameters.\n        -- None: clear all the weights in '01'/'12'/'90', which indicates the number of training epochs.\n        -- '01' or '12' or '90': clear all the weights in arch2infos_dict[index][hp].\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call clear_params with index={:} and hp={:}'", ".", "format", "(", "index", ",", "hp", ")", ")", "\n", "", "if", "hp", "is", "None", ":", "\n", "      ", "for", "key", ",", "result", "in", "self", ".", "arch2infos_dict", "[", "index", "]", ".", "items", "(", ")", ":", "\n", "        ", "result", ".", "clear_params", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "str", "(", "hp", ")", "not", "in", "self", ".", "arch2infos_dict", "[", "index", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'The {:}-th architecture only has hyper-parameters of {:} instead of {:}.'", ".", "format", "(", "index", ",", "list", "(", "self", ".", "arch2infos_dict", "[", "index", "]", ".", "keys", "(", ")", ")", ",", "hp", ")", ")", "\n", "", "self", ".", "arch2infos_dict", "[", "index", "]", "[", "str", "(", "hp", ")", "]", ".", "clear_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_info_str_by_arch": [[143, 146], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "query_info_str_by_arch", "(", "self", ",", "arch", ",", "hp", ":", "Text", "=", "'12'", ")", ":", "\n", "    ", "\"\"\"This function is used to query the information of a specific architecture.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI._query_info_str_by_arch": [[147, 158], ["api_utils.NASBenchMetaAPI.query_index_by_arch", "print_information", "print", "ValueError", "list", "api_utils.NASBenchMetaAPI.arch2infos_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_index_by_arch", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.print_information"], ["", "def", "_query_info_str_by_arch", "(", "self", ",", "arch", ",", "hp", ":", "Text", "=", "'12'", ",", "print_information", "=", "None", ")", ":", "\n", "    ", "arch_index", "=", "self", ".", "query_index_by_arch", "(", "arch", ")", "\n", "if", "arch_index", "in", "self", ".", "arch2infos_dict", ":", "\n", "      ", "if", "hp", "not", "in", "self", ".", "arch2infos_dict", "[", "arch_index", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'The {:}-th architecture only has hyper-parameters of {:} instead of {:}.'", ".", "format", "(", "index", ",", "list", "(", "self", ".", "arch2infos_dict", "[", "arch_index", "]", ".", "keys", "(", ")", ")", ",", "hp", ")", ")", "\n", "", "info", "=", "self", ".", "arch2infos_dict", "[", "arch_index", "]", "[", "hp", "]", "\n", "strings", "=", "print_information", "(", "info", ",", "'arch-index={:}'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "'\\n'", ".", "join", "(", "strings", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "'Find this arch-index : {:}, but this arch is not evaluated.'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_meta_info_by_index": [[159, 170], ["copy.deepcopy", "print", "ValueError", "ValueError", "list", "api_utils.NASBenchMetaAPI.arch2infos_dict[].keys"], "methods", ["None"], ["", "", "def", "query_meta_info_by_index", "(", "self", ",", "arch_index", ",", "hp", ":", "Text", "=", "'12'", ")", ":", "\n", "    ", "\"\"\"Return the ArchResults for the 'arch_index'-th architecture. This function is similar to query_by_index.\"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call query_meta_info_by_index with arch_index={:}, hp={:}'", ".", "format", "(", "arch_index", ",", "hp", ")", ")", "\n", "", "if", "arch_index", "in", "self", ".", "arch2infos_dict", ":", "\n", "      ", "if", "hp", "not", "in", "self", ".", "arch2infos_dict", "[", "arch_index", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'The {:}-th architecture only has hyper-parameters of {:} instead of {:}.'", ".", "format", "(", "arch_index", ",", "list", "(", "self", ".", "arch2infos_dict", "[", "arch_index", "]", ".", "keys", "(", ")", ")", ",", "hp", ")", ")", "\n", "", "info", "=", "self", ".", "arch2infos_dict", "[", "arch_index", "]", "[", "hp", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'arch_index [{:}] does not in arch2infos'", ".", "format", "(", "arch_index", ")", ")", "\n", "", "return", "copy", ".", "deepcopy", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_by_index": [[171, 195], ["api_utils.NASBenchMetaAPI.query_meta_info_by_index", "print", "api_utils.NASBenchMetaAPI.query", "api_utils.NASBenchMetaAPI.get_dataset_names", "ValueError", "api_utils.NASBenchMetaAPI.get_dataset_names"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_meta_info_by_index", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_dataset_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_dataset_names"], ["", "def", "query_by_index", "(", "self", ",", "arch_index", ":", "int", ",", "dataname", ":", "Union", "[", "None", ",", "Text", "]", "=", "None", ",", "hp", ":", "Text", "=", "'12'", ")", ":", "\n", "    ", "\"\"\" This 'query_by_index' function is used to query information with the training of 01 epochs, 12 epochs, 90 epochs, or 200 epochs.\n        ------\n        If hp=01, we train the model by 01 epochs (see config in configs/nas-benchmark/hyper-opts/01E.config)\n        If hp=12, we train the model by 12 epochs (see config in configs/nas-benchmark/hyper-opts/12E.config)\n        If hp=90, we train the model by 90 epochs (see config in configs/nas-benchmark/hyper-opts/90E.config)\n        If hp=200, we train the model by 200 epochs (see config in configs/nas-benchmark/hyper-opts/200E.config)\n        ------\n        If dataname is None, return the ArchResults\n          else, return a dict with all trials on that dataset (the key is the seed)\n        Options are 'cifar10-valid', 'cifar10', 'cifar100', 'ImageNet16-120'.\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call query_by_index with arch_index={:}, dataname={:}, hp={:}'", ".", "format", "(", "arch_index", ",", "dataname", ",", "hp", ")", ")", "\n", "", "info", "=", "self", ".", "query_meta_info_by_index", "(", "arch_index", ",", "hp", ")", "\n", "if", "dataname", "is", "None", ":", "return", "info", "\n", "else", ":", "\n", "      ", "if", "dataname", "not", "in", "info", ".", "get_dataset_names", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid dataset-name : {:} vs. {:}'", ".", "format", "(", "dataname", ",", "info", ".", "get_dataset_names", "(", ")", ")", ")", "\n", "", "return", "info", ".", "query", "(", "dataname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.find_best": [[196, 217], ["api_utils.remap_dataset_set_names", "enumerate", "print", "arch_info.get_compute_costs", "arch_info.get_metrics", "print", "api_utils.NASBenchMetaAPI.arch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.remap_dataset_set_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.arch"], ["", "", "def", "find_best", "(", "self", ",", "dataset", ",", "metric_on_set", ",", "FLOP_max", "=", "None", ",", "Param_max", "=", "None", ",", "hp", ":", "Text", "=", "'12'", ")", ":", "\n", "    ", "\"\"\"Find the architecture with the highest accuracy based on some constraints.\"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call find_best with dataset={:}, metric_on_set={:}, hp={:} | with #FLOPs < {:} and #Params < {:}'", ".", "format", "(", "dataset", ",", "metric_on_set", ",", "hp", ",", "FLOP_max", ",", "Param_max", ")", ")", "\n", "", "dataset", ",", "metric_on_set", "=", "remap_dataset_set_names", "(", "dataset", ",", "metric_on_set", ",", "self", ".", "verbose", ")", "\n", "best_index", ",", "highest_accuracy", "=", "-", "1", ",", "None", "\n", "for", "i", ",", "arch_index", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "      ", "arch_info", "=", "self", ".", "arch2infos_dict", "[", "arch_index", "]", "[", "hp", "]", "\n", "info", "=", "arch_info", ".", "get_compute_costs", "(", "dataset", ")", "# the information of costs", "\n", "flop", ",", "param", ",", "latency", "=", "info", "[", "'flops'", "]", ",", "info", "[", "'params'", "]", ",", "info", "[", "'latency'", "]", "\n", "if", "FLOP_max", "is", "not", "None", "and", "flop", ">", "FLOP_max", ":", "continue", "\n", "if", "Param_max", "is", "not", "None", "and", "param", ">", "Param_max", ":", "continue", "\n", "xinfo", "=", "arch_info", ".", "get_metrics", "(", "dataset", ",", "metric_on_set", ")", "# the information of loss and accuracy", "\n", "loss", ",", "accuracy", "=", "xinfo", "[", "'loss'", "]", ",", "xinfo", "[", "'accuracy'", "]", "\n", "if", "best_index", "==", "-", "1", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "arch_index", ",", "accuracy", "\n", "", "elif", "highest_accuracy", "<", "accuracy", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "arch_index", ",", "accuracy", "\n", "", "", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'  the best architecture : [{:}] {:} with accuracy={:.3f}%'", ".", "format", "(", "best_index", ",", "self", ".", "arch", "(", "best_index", ")", ",", "highest_accuracy", ")", ")", "\n", "", "return", "best_index", ",", "highest_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.get_net_param": [[218, 234], ["api_utils.NASBenchMetaAPI.query_meta_info_by_index", "api_utils.NASBenchMetaAPI.get_net_param", "print"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_meta_info_by_index", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "index", ",", "dataset", ",", "seed", ":", "Optional", "[", "int", "]", ",", "hp", ":", "Text", "=", "'12'", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the trained weights of the `index`-th architecture on `dataset` with the seed of `seed`\n      Args [seed]:\n        -- None : return a dict containing the trained weights of all trials, where each key is a seed and its corresponding value is the weights.\n        -- a interger : return the weights of a specific trial, whose seed is this interger.\n      Args [hp]:\n        -- 01 : train the model by 01 epochs\n        -- 12 : train the model by 12 epochs\n        -- 90 : train the model by 90 epochs\n        -- 200 : train the model by 200 epochs\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the get_net_param function with index={:}, dataset={:}, seed={:}, hp={:}'", ".", "format", "(", "index", ",", "dataset", ",", "seed", ",", "hp", ")", ")", "\n", "", "info", "=", "self", ".", "query_meta_info_by_index", "(", "index", ",", "hp", ")", "\n", "return", "info", ".", "get_net_param", "(", "dataset", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.get_net_config": [[235, 257], ["next", "next.query", "next", "next.get_config", "print", "ValueError", "iter", "iter", "next.values", "next.values"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query", "home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter", "home.repos.pwc.inspect_result.snu-adsl_bbea.rest_client.gae_restful_lib.Credentials.iter"], ["", "def", "get_net_config", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the configuration for the `index`-th architecture on `dataset`.\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      This function will return a dict.\n      ========= Some examlpes for using this function:\n      config = api.get_net_config(128, 'cifar10')\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the get_net_config function with index={:}, dataset={:}.'", ".", "format", "(", "index", ",", "dataset", ")", ")", "\n", "", "if", "index", "in", "self", ".", "arch2infos_dict", ":", "\n", "      ", "info", "=", "self", ".", "arch2infos_dict", "[", "index", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'The arch_index={:} is not in arch2infos_dict.'", ".", "format", "(", "arch_index", ")", ")", "\n", "", "info", "=", "next", "(", "iter", "(", "info", ".", "values", "(", ")", ")", ")", "\n", "results", "=", "info", ".", "query", "(", "dataset", ",", "None", ")", "\n", "results", "=", "next", "(", "iter", "(", "results", ".", "values", "(", ")", ")", ")", "\n", "return", "results", ".", "get_config", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.get_cost_info": [[258, 264], ["api_utils.NASBenchMetaAPI.query_meta_info_by_index", "api_utils.NASBenchMetaAPI.get_compute_costs", "print"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_meta_info_by_index", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_compute_costs"], ["", "def", "get_cost_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "hp", ":", "Text", "=", "'12'", ")", "->", "Dict", "[", "Text", ",", "float", "]", ":", "\n", "    ", "\"\"\"To obtain the cost metric for the `index`-th architecture on a dataset.\"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the get_cost_info function with index={:}, dataset={:}, and hp={:}.'", ".", "format", "(", "index", ",", "dataset", ",", "hp", ")", ")", "\n", "", "info", "=", "self", ".", "query_meta_info_by_index", "(", "index", ",", "hp", ")", "\n", "return", "info", ".", "get_compute_costs", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.get_latency": [[265, 276], ["api_utils.NASBenchMetaAPI.get_cost_info", "print"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.get_cost_info"], ["", "def", "get_latency", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "hp", ":", "Text", "=", "'12'", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    To obtain the latency of the network (by default it will return the latency with the batch size of 256).\n    :param index: the index of the target architecture\n    :param dataset: the dataset name (cifar10-valid, cifar10, cifar100, ImageNet16-120)\n    :return: return a float value in seconds\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the get_latency function with index={:}, dataset={:}, and hp={:}.'", ".", "format", "(", "index", ",", "dataset", ",", "hp", ")", ")", "\n", "", "cost_dict", "=", "self", ".", "get_cost_info", "(", "index", ",", "dataset", ",", "hp", ")", "\n", "return", "cost_dict", "[", "'latency'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.show": [[277, 280], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "show", "(", "self", ",", "index", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"This function will print the information of a specific (or all) architecture(s).\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI._show": [[281, 311], ["print", "enumerate", "print", "print", "api_utils.NASBenchMetaAPI.arch2infos_dict[].items", "print", "len", "print", "print_information", "print", "print", "print", "api_utils.NASBenchMetaAPI.arch2infos_dict[].items", "print", "print_information", "print", "print", "len", "len", "result.get_total_epoch", "result.get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.print_information", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.print_information", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_total_epoch"], ["", "def", "_show", "(", "self", ",", "index", "=", "-", "1", ",", "print_information", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    This function will print the information of a specific (or all) architecture(s).\n\n    :param index: If the index < 0: it will loop for all architectures and print their information one by one.\n                  else: it will print the information of the 'index'-th architecture.\n    :return: nothing\n    \"\"\"", "\n", "if", "index", "<", "0", ":", "# show all architectures", "\n", "      ", "print", "(", "self", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "        ", "print", "(", "'\\n'", "+", "'-'", "*", "10", "+", "' The ({:5d}/{:5d}) {:06d}-th architecture! '", ".", "format", "(", "i", ",", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "idx", ")", "+", "'-'", "*", "10", ")", "\n", "print", "(", "'arch : {:}'", ".", "format", "(", "self", ".", "meta_archs", "[", "idx", "]", ")", ")", "\n", "for", "key", ",", "result", "in", "self", ".", "arch2infos_dict", "[", "index", "]", ".", "items", "(", ")", ":", "\n", "          ", "strings", "=", "print_information", "(", "result", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "result", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ":", "\n", "        ", "if", "index", "not", "in", "self", ".", "evaluated_indexes", ":", "print", "(", "'The {:}-th architecture has not been evaluated or not saved.'", ".", "format", "(", "index", ")", ")", "\n", "else", ":", "\n", "          ", "arch_info", "=", "self", ".", "arch2infos_dict", "[", "index", "]", "\n", "for", "key", ",", "result", "in", "self", ".", "arch2infos_dict", "[", "index", "]", ".", "items", "(", ")", ":", "\n", "            ", "strings", "=", "print_information", "(", "result", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "result", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'This index ({:}) is out of range (0~{:}).'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.statistics": [[312, 328], ["range", "dict", "print", "ValueError", "collections.defaultdict", "str", "len", "len"], "methods", ["None"], ["", "", "", "def", "statistics", "(", "self", ",", "dataset", ":", "Text", ",", "hp", ":", "Union", "[", "Text", ",", "int", "]", ")", "->", "Dict", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"This function will count the number of total trials.\"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the statistics function with dataset={:} and hp={:}.'", ".", "format", "(", "dataset", ",", "hp", ")", ")", "\n", "", "valid_datasets", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "if", "dataset", "not", "in", "valid_datasets", ":", "\n", "      ", "raise", "ValueError", "(", "'{:} not in {:}'", ".", "format", "(", "dataset", ",", "valid_datasets", ")", ")", "\n", "", "nums", ",", "hp", "=", "defaultdict", "(", "lambda", ":", "0", ")", ",", "str", "(", "hp", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "      ", "archInfo", "=", "self", ".", "arch2infos_dict", "[", "index", "]", "[", "hp", "]", "\n", "dataset_seed", "=", "archInfo", ".", "dataset_seed", "\n", "if", "dataset", "not", "in", "dataset_seed", ":", "\n", "        ", "nums", "[", "0", "]", "+=", "1", "\n", "", "else", ":", "\n", "        ", "nums", "[", "len", "(", "dataset_seed", "[", "dataset", "]", ")", "]", "+=", "1", "\n", "", "", "return", "dict", "(", "nums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.__init__": [[332, 338], ["int", "copy.deepcopy", "dict", "dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "arch_index", ",", "arch_str", ")", ":", "\n", "    ", "self", ".", "arch_index", "=", "int", "(", "arch_index", ")", "\n", "self", ".", "arch_str", "=", "copy", ".", "deepcopy", "(", "arch_str", ")", "\n", "self", ".", "all_results", "=", "dict", "(", ")", "\n", "self", ".", "dataset_seed", "=", "dict", "(", ")", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_compute_costs": [[339, 361], ["collections.defaultdict", "collections.defaultdict.items", "result.get_latency", "numpy.mean", "result.get_times", "result.get_times.items", "numpy.mean", "numpy.mean", "len", "time_infos[].append", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_latency", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_compute_costs", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "\n", "flops", "=", "[", "result", ".", "flop", "for", "result", "in", "results", "]", "\n", "params", "=", "[", "result", ".", "params", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "result", ".", "get_latency", "(", ")", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "x", "for", "x", "in", "latencies", "if", "x", ">", "0", "]", "\n", "mean_latency", "=", "np", ".", "mean", "(", "latencies", ")", "if", "len", "(", "latencies", ")", ">", "0", "else", "None", "\n", "time_infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "time_info", "=", "result", ".", "get_times", "(", ")", "\n", "for", "key", ",", "value", "in", "time_info", ".", "items", "(", ")", ":", "time_infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "info", "=", "{", "'flops'", ":", "np", ".", "mean", "(", "flops", ")", ",", "\n", "'params'", ":", "np", ".", "mean", "(", "params", ")", ",", "\n", "'latency'", ":", "mean_latency", "}", "\n", "for", "key", ",", "value", "in", "time_infos", ".", "items", "(", ")", ":", "\n", "      ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "info", "[", "key", "]", "=", "None", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics": [[362, 419], ["collections.defaultdict", "dict", "result.get_eval.items", "isinstance", "random.randint", "collections.defaultdict.items", "result.get_train", "result.get_eval", "infos[].append", "isinstance", "collections.defaultdict.items", "isinstance", "len", "x_seeds.index", "collections.defaultdict.items", "ValueError", "numpy.mean", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_train", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_eval", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_metrics", "(", "self", ",", "dataset", ",", "setname", ",", "iepoch", "=", "None", ",", "is_random", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This `get_metrics` function is used to obtain obtain the loss, accuracy, etc information on a specific dataset.\n      If not specify, each set refer to the proposed split in NAS-Bench-201 paper.\n      If some args return None or raise error, then it is not avaliable.\n      ========================================\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      Args [setname] (each dataset has different setnames):\n        -- When dataset = cifar10-valid, you can use 'train', 'x-valid', 'ori-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar10, you can use 'train', 'ori-test'.\n        ------ 'train' : the metric on the training + validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar100 or ImageNet16-120, you can use 'train', 'ori-test', 'x-valid', 'x-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'x-test' : the metric on the test set.\n        ------ 'ori-test' : the metric on the validation + test set.\n      Args [iepoch] (None or an integer in [0, the-number-of-total-training-epochs)\n        ------ None : return the metric after the last training epoch.\n        ------ an integer i : return the metric after the i-th training epoch.\n      Args [is_random]:\n        ------ True : return the metric of a randomly selected trial.\n        ------ False : return the averaged metric of all avaliable trials.\n        ------ an integer indicating the 'seed' value : return the metric of a specific trial (whose random seed is 'is_random').\n    \"\"\"", "\n", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "if", "setname", "==", "'train'", ":", "\n", "        ", "info", "=", "result", ".", "get_train", "(", "iepoch", ")", "\n", "", "else", ":", "\n", "        ", "info", "=", "result", ".", "get_eval", "(", "setname", ",", "iepoch", ")", "\n", "", "for", "key", ",", "value", "in", "info", ".", "items", "(", ")", ":", "infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "return_info", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "# randomly select one", "\n", "      ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "results", ")", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "elif", "isinstance", "(", "is_random", ",", "bool", ")", "and", "not", "is_random", ":", "# average", "\n", "      ", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "return_info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "return_info", "[", "key", "]", "=", "None", "\n", "", "", "elif", "isinstance", "(", "is_random", ",", "int", ")", ":", "# specify the seed", "\n", "      ", "if", "is_random", "not", "in", "x_seeds", ":", "raise", "ValueError", "(", "'can not find random seed ({:}) from {:}'", ".", "format", "(", "is_random", ",", "x_seeds", ")", ")", "\n", "index", "=", "x_seeds", ".", "index", "(", "is_random", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid value for is_random: {:}'", ".", "format", "(", "is_random", ")", ")", "\n", "", "return", "return_info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.show": [[420, 422], ["print_information"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.print_information"], ["", "def", "show", "(", "self", ",", "is_print", "=", "False", ")", ":", "\n", "    ", "return", "print_information", "(", "self", ",", "None", ",", "is_print", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_dataset_names": [[423, 425], ["list", "api_utils.ArchResults.dataset_seed.keys"], "methods", ["None"], ["", "def", "get_dataset_names", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "dataset_seed", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_dataset_seeds": [[426, 428], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_dataset_seeds", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "dataset_seed", "[", "dataset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_net_param": [[429, 445], ["api_utils.ArchResults.all_results[].get_net_param", "api_utils.ArchResults.all_results[].get_net_param", "ValueError", "list", "api_utils.ArchResults.all_results.keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_net_param", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function will return the trained network's weights on the 'dataset'.\n    :arg\n      dataset: one of 'cifar10-valid', 'cifar10', 'cifar100', and 'ImageNet16-120'.\n      seed: an integer indicates the seed value or None that indicates returing all trials.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "xkey", "=", "(", "dataset", ",", "seed", ")", "\n", "if", "xkey", "in", "self", ".", "all_results", ":", "\n", "        ", "return", "self", ".", "all_results", "[", "xkey", "]", ".", "get_net_param", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'key={:} not in {:}'", ".", "format", "(", "xkey", ",", "list", "(", "self", ".", "all_results", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.reset_latency": [[446, 453], ["api_utils.ArchResults.all_results[].update_latency", "api_utils.ArchResults.all_results[].update_latency"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.update_latency", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.update_latency"], ["", "", "", "def", "reset_latency", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "latency", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the latency in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.reset_pseudo_train_times": [[454, 461], ["api_utils.ArchResults.all_results[].reset_pseudo_train_times", "api_utils.ArchResults.all_results[].reset_pseudo_train_times"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_pseudo_train_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_pseudo_train_times"], ["", "", "def", "reset_pseudo_train_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the train-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.reset_pseudo_eval_times": [[462, 469], ["api_utils.ArchResults.all_results[].reset_pseudo_eval_times", "api_utils.ArchResults.all_results[].reset_pseudo_eval_times"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_pseudo_eval_times", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_pseudo_eval_times"], ["", "", "def", "reset_pseudo_eval_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the eval-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_latency": [[470, 479], ["api_utils.ArchResults.all_results[].get_latency", "latencies.append", "sum", "len", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_latency", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_latency", "(", "self", ",", "dataset", ":", "Text", ")", "->", "float", ":", "\n", "    ", "\"\"\"Get the latency of a model on the target dataset. [Timestamp: 2020.03.09]\"\"\"", "\n", "latencies", "=", "[", "]", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "      ", "latency", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_latency", "(", ")", "\n", "if", "not", "isinstance", "(", "latency", ",", "float", ")", "or", "latency", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid latency of {:} with seed={:} : {:}'", ".", "format", "(", "dataset", ",", "seed", ",", "latency", ")", ")", "\n", "", "latencies", ".", "append", "(", "latency", ")", "\n", "", "return", "sum", "(", "latencies", ")", "/", "len", "(", "latencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_total_epoch": [[480, 493], ["api_utils.ArchResults.dataset_seed.items", "isinstance", "len", "ValueError", "ValueError", "set", "api_utils.ArchResults.all_results[].get_total_epoch", "api_utils.ArchResults.all_results[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_total_epoch"], ["", "def", "get_total_epoch", "(", "self", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the total number of training epochs.\"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "      ", "epochss", "=", "[", "]", "\n", "for", "xdata", ",", "x_seeds", "in", "self", ".", "dataset_seed", ".", "items", "(", ")", ":", "\n", "        ", "epochss", "+=", "[", "self", ".", "all_results", "[", "(", "xdata", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "", "elif", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "epochss", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid dataset={:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "if", "len", "(", "set", "(", "epochss", ")", ")", ">", "1", ":", "raise", "ValueError", "(", "'Each trial mush have the same number of training epochs : {:}'", ".", "format", "(", "epochss", ")", ")", "\n", "return", "epochss", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.query": [[494, 501], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "dataset", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the ResultsCount object (containing all information of a single trial) for 'dataset' and 'seed'\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.arch_idx_str": [[502, 504], ["None"], "methods", ["None"], ["", "", "def", "arch_idx_str", "(", "self", ")", ":", "\n", "    ", "return", "'{:06d}'", ".", "format", "(", "self", ".", "arch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.update": [[505, 514], ["api_utils.ArchResults.dataset_seed[].append", "sorted"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "update", "(", "self", ",", "dataset_name", ",", "seed", ",", "result", ")", ":", "\n", "    ", "if", "dataset_name", "not", "in", "self", ".", "dataset_seed", ":", "\n", "      ", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "[", "]", "\n", "", "assert", "seed", "not", "in", "self", ".", "dataset_seed", "[", "dataset_name", "]", ",", "'{:}-th arch alreadly has this seed ({:}) on {:}'", ".", "format", "(", "self", ".", "arch_index", ",", "seed", ",", "dataset_name", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", ".", "append", "(", "seed", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "sorted", "(", "self", ".", "dataset_seed", "[", "dataset_name", "]", ")", "\n", "assert", "(", "dataset_name", ",", "seed", ")", "not", "in", "self", ".", "all_results", "\n", "self", ".", "all_results", "[", "(", "dataset_name", ",", "seed", ")", "]", "=", "result", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.state_dict": [[515, 528], ["dict", "api_utils.ArchResults.__dict__.items", "dict", "isinstance", "value.items", "type", "isinstance", "_v.state_dict", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# contain the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "assert", "isinstance", "(", "_v", ",", "ResultsCount", ")", ",", "'invalid type of value for {:}/{:} : {:}'", ".", "format", "(", "key", ",", "_k", ",", "type", "(", "_v", ")", ")", "\n", "xvalue", "[", "_k", "]", "=", "_v", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "xvalue", "=", "value", "\n", "", "state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.load_state_dict": [[529, 540], ["dict", "state_dict.items", "api_utils.ArchResults.__dict__.update", "dict", "isinstance", "value.items", "type", "api_utils.ResultsCount.create_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.create_from_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# to convert to the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "xvalue", "[", "_k", "]", "=", "ResultsCount", ".", "create_from_state_dict", "(", "_v", ")", "\n", "", "", "else", ":", "xvalue", "=", "value", "\n", "new_state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "self", ".", "__dict__", ".", "update", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.create_from_state_dict": [[541, 552], ["api_utils.ArchResults", "isinstance", "api_utils.ArchResults.load_state_dict", "torch.load", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict_or_file", ")", ":", "\n", "    ", "x", "=", "ArchResults", "(", "-", "1", ",", "-", "1", ")", "\n", "if", "isinstance", "(", "state_dict_or_file", ",", "str", ")", ":", "# a file path", "\n", "      ", "state_dict", "=", "torch", ".", "load", "(", "state_dict_or_file", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "state_dict_or_file", ",", "dict", ")", ":", "\n", "      ", "state_dict", "=", "state_dict_or_file", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid type of state_dict_or_file : {:}'", ".", "format", "(", "type", "(", "state_dict_or_file", ")", ")", ")", "\n", "", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.clear_params": [[555, 560], ["api_utils.ArchResults.all_results.items"], "methods", ["None"], ["", "def", "clear_params", "(", "self", ")", ":", "\n", "    ", "for", "key", ",", "result", "in", "self", ".", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "del", "result", ".", "net_state_dict", "\n", "result", ".", "net_state_dict", "=", "None", "\n", "", "self", ".", "clear_net_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.debug_test": [[561, 571], ["print", "print", "print", "print", "api_utils.ArchResults.get_latency", "result.get_times"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_latency", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_times"], ["", "def", "debug_test", "(", "self", ")", ":", "\n", "    ", "\"\"\"This function is used for me to debug and test, which will call most methods.\"\"\"", "\n", "all_dataset", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "for", "dataset", "in", "all_dataset", ":", "\n", "      ", "print", "(", "'---->>>> {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "'The latency on {:} is {:} s'", ".", "format", "(", "dataset", ",", "self", ".", "get_latency", "(", "dataset", ")", ")", ")", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "result", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "print", "(", "'  ==>> result = {:}'", ".", "format", "(", "result", ")", ")", "\n", "print", "(", "'  ==>> cost = {:}'", ".", "format", "(", "result", ".", "get_times", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.__repr__": [[572, 574], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(arch-index={index}, arch={arch}, {num} runs, clear={clear})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "index", "=", "self", ".", "arch_index", ",", "arch", "=", "self", ".", "arch_str", ",", "num", "=", "len", "(", "self", ".", "all_results", ")", ",", "clear", "=", "self", ".", "clear_net_done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.__init__": [[583, 598], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "api_utils.ResultsCount.reset_eval"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_eval"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "state_dict", ",", "train_accs", ",", "train_losses", ",", "params", ",", "flop", ",", "arch_config", ",", "seed", ",", "epochs", ",", "latency", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "net_state_dict", "=", "state_dict", "\n", "self", ".", "train_acc1es", "=", "copy", ".", "deepcopy", "(", "train_accs", ")", "\n", "self", ".", "train_acc5es", "=", "None", "\n", "self", ".", "train_losses", "=", "copy", ".", "deepcopy", "(", "train_losses", ")", "\n", "self", ".", "train_times", "=", "None", "\n", "self", ".", "arch_config", "=", "copy", ".", "deepcopy", "(", "arch_config", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "flop", "=", "flop", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "latency", "=", "latency", "\n", "# evaluation results", "\n", "self", ".", "reset_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.update_train_info": [[599, 604], ["None"], "methods", ["None"], ["", "def", "update_train_info", "(", "self", ",", "train_acc1es", ",", "train_acc5es", ",", "train_losses", ",", "train_times", ")", "->", "None", ":", "\n", "    ", "self", ".", "train_acc1es", "=", "train_acc1es", "\n", "self", ".", "train_acc5es", "=", "train_acc5es", "\n", "self", ".", "train_losses", "=", "train_losses", "\n", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_pseudo_train_times": [[605, 611], ["collections.OrderedDict", "range"], "methods", ["None"], ["", "def", "reset_pseudo_train_times", "(", "self", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the training times.\"\"\"", "\n", "train_times", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "train_times", "[", "i", "]", "=", "estimated_per_epoch_time", "\n", "", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_pseudo_eval_times": [[612, 617], ["range", "ValueError"], "methods", ["None"], ["", "def", "reset_pseudo_eval_times", "(", "self", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the evaluation times.\"\"\"", "\n", "if", "eval_name", "not", "in", "self", ".", "eval_names", ":", "raise", "ValueError", "(", "'invalid eval name : {:}'", ".", "format", "(", "eval_name", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "eval_name", ",", "i", ")", "]", "=", "estimated_per_epoch_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.reset_eval": [[618, 623], ["None"], "methods", ["None"], ["", "", "def", "reset_eval", "(", "self", ")", ":", "\n", "    ", "self", ".", "eval_names", "=", "[", "]", "\n", "self", ".", "eval_acc1es", "=", "{", "}", "\n", "self", ".", "eval_times", "=", "{", "}", "\n", "self", ".", "eval_losses", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.update_latency": [[624, 626], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update_latency", "(", "self", ",", "latency", ")", ":", "\n", "    ", "self", ".", "latency", "=", "copy", ".", "deepcopy", "(", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_latency": [[627, 631], ["sum", "len"], "methods", ["None"], ["", "def", "get_latency", "(", "self", ")", "->", "float", ":", "\n", "    ", "\"\"\"Return the latency value in seconds. -1 represents not avaliable ; otherwise it should be a float value\"\"\"", "\n", "if", "self", ".", "latency", "is", "None", ":", "return", "-", "1.0", "\n", "else", ":", "return", "sum", "(", "self", ".", "latency", ")", "/", "len", "(", "self", ".", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.update_eval": [[632, 642], ["set", "api_utils.ResultsCount.eval_names.append", "range", "x.split", "accs.keys"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "update_eval", "(", "self", ",", "accs", ",", "losses", ",", "times", ")", ":", "# new version", "\n", "    ", "data_names", "=", "set", "(", "[", "x", ".", "split", "(", "'@'", ")", "[", "0", "]", "for", "x", "in", "accs", ".", "keys", "(", ")", "]", ")", "\n", "for", "data_name", "in", "data_names", ":", "\n", "      ", "assert", "data_name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already been added into eval-names'", ".", "format", "(", "data_name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "data_name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "        ", "xkey", "=", "'{:}@{:}'", ".", "format", "(", "data_name", ",", "iepoch", ")", "\n", "self", ".", "eval_acc1es", "[", "xkey", "]", "=", "accs", "[", "xkey", "]", "\n", "self", ".", "eval_losses", "[", "xkey", "]", "=", "losses", "[", "xkey", "]", "\n", "self", ".", "eval_times", "[", "xkey", "]", "=", "times", "[", "xkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.update_OLD_eval": [[643, 650], ["api_utils.ResultsCount.eval_names.append", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "update_OLD_eval", "(", "self", ",", "name", ",", "accs", ",", "losses", ")", ":", "# old version", "\n", "    ", "assert", "name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already added'", ".", "format", "(", "name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "if", "iepoch", "in", "accs", ":", "\n", "        ", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "accs", "[", "iepoch", "]", "\n", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "losses", "[", "iepoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.__repr__": [[651, 655], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "num_eval", "=", "len", "(", "self", ".", "eval_names", ")", "\n", "set_name", "=", "'['", "+", "', '", ".", "join", "(", "self", ".", "eval_names", ")", "+", "']'", "\n", "return", "(", "'{name}({xname}, arch={arch}, FLOP={flop:.2f}M, Param={param:.3f}MB, seed={seed}, {num_eval} eval-sets: {set_name})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "xname", "=", "self", ".", "name", ",", "arch", "=", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "flop", "=", "self", ".", "flop", ",", "param", "=", "self", ".", "params", ",", "seed", "=", "self", ".", "seed", ",", "num_eval", "=", "num_eval", ",", "set_name", "=", "set_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_total_epoch": [[656, 658], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_total_epoch", "(", "self", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_times": [[659, 675], ["isinstance", "list", "api_utils.ResultsCount.train_times.values", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "range"], "methods", ["None"], ["", "def", "get_times", "(", "self", ")", ":", "\n", "    ", "\"\"\"Obtain the information regarding both training and evaluation time.\"\"\"", "\n", "if", "self", ".", "train_times", "is", "not", "None", "and", "isinstance", "(", "self", ".", "train_times", ",", "dict", ")", ":", "\n", "      ", "train_times", "=", "list", "(", "self", ".", "train_times", ".", "values", "(", ")", ")", "\n", "time_info", "=", "{", "'T-train@epoch'", ":", "np", ".", "mean", "(", "train_times", ")", ",", "'T-train@total'", ":", "np", ".", "sum", "(", "train_times", ")", "}", "\n", "", "else", ":", "\n", "      ", "time_info", "=", "{", "'T-train@epoch'", ":", "None", ",", "'T-train@total'", ":", "None", "}", "\n", "", "for", "name", "in", "self", ".", "eval_names", ":", "\n", "      ", "try", ":", "\n", "        ", "xtimes", "=", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", "]", "\n", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "mean", "(", "xtimes", ")", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "sum", "(", "xtimes", ")", "\n", "", "except", ":", "\n", "        ", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "", "", "return", "time_info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_eval_set": [[676, 678], ["None"], "methods", ["None"], ["", "def", "get_eval_set", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "eval_names", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_train": [[680, 692], ["sum", "range"], "methods", ["None"], ["", "def", "get_train", "(", "self", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "self", ".", "train_times", "is", "not", "None", ":", "\n", "      ", "xtime", "=", "self", ".", "train_times", "[", "iepoch", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "train_times", "[", "i", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "train_losses", "[", "iepoch", "]", ",", "\n", "'accuracy'", ":", "self", ".", "train_acc1es", "[", "iepoch", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_eval": [[693, 712], ["api_utils.ResultsCount.get_eval._internal_query"], "methods", ["None"], ["", "def", "get_eval", "(", "self", ",", "name", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the evaluation information ; there could be multiple evaluation sets (identified by the 'name' argument).\"\"\"", "\n", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "def", "_internal_query", "(", "xname", ")", ":", "\n", "      ", "if", "isinstance", "(", "self", ".", "eval_times", ",", "dict", ")", "and", "len", "(", "self", ".", "eval_times", ")", ">", "0", ":", "\n", "        ", "xtime", "=", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "xname", ",", "iepoch", ")", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "xname", ",", "i", ")", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "xname", ",", "iepoch", ")", "]", ",", "\n", "'accuracy'", ":", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "xname", ",", "iepoch", ")", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "", "if", "name", "==", "'valid'", ":", "\n", "      ", "return", "_internal_query", "(", "'x-valid'", ")", "\n", "", "else", ":", "\n", "      ", "return", "_internal_query", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_net_param": [[713, 716], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "get_net_param", "(", "self", ",", "clone", "=", "False", ")", ":", "\n", "    ", "if", "clone", ":", "return", "copy", ".", "deepcopy", "(", "self", ".", "net_state_dict", ")", "\n", "else", ":", "return", "self", ".", "net_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.get_config": [[717, 739], ["str2structure", "str2structure"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.str2structure"], ["", "def", "get_config", "(", "self", ",", "str2structure", ")", ":", "\n", "    ", "\"\"\"This function is used to obtain the config dict for this architecture.\"\"\"", "\n", "if", "str2structure", "is", "None", ":", "\n", "# In this case, this is NAS-Bench-301", "\n", "      ", "if", "'name'", "in", "self", ".", "arch_config", "and", "self", ".", "arch_config", "[", "'name'", "]", "==", "'infer.shape.tiny'", ":", "\n", "        ", "return", "{", "'name'", ":", "'infer.shape.tiny'", ",", "'channels'", ":", "self", ".", "arch_config", "[", "'channels'", "]", ",", "\n", "'genotype'", ":", "self", ".", "arch_config", "[", "'genotype'", "]", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "# In this case, this is NAS-Bench-201", "\n", "", "else", ":", "\n", "        ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'arch_str'", ":", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "", "", "else", ":", "\n", "# In this case, this is NAS-Bench-301", "\n", "      ", "if", "'name'", "in", "self", ".", "arch_config", "and", "self", ".", "arch_config", "[", "'name'", "]", "==", "'infer.shape.tiny'", ":", "\n", "        ", "return", "{", "'name'", ":", "'infer.shape.tiny'", ",", "'channels'", ":", "self", ".", "arch_config", "[", "'channels'", "]", ",", "\n", "'genotype'", ":", "str2structure", "(", "self", ".", "arch_config", "[", "'genotype'", "]", ")", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "# In this case, this is NAS-Bench-201", "\n", "", "else", ":", "\n", "        ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'genotype'", ":", "str2structure", "(", "self", ".", "arch_config", "[", "'arch_str'", "]", ")", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.state_dict": [[740, 743], ["api_utils.ResultsCount.__dict__.items"], "methods", ["None"], ["", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "_state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "return", "_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.load_state_dict": [[744, 746], ["api_utils.ResultsCount.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.create_from_state_dict": [[747, 752], ["api_utils.ResultsCount", "api_utils.ResultsCount.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "x", "=", "ResultsCount", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.remap_dataset_set_names": [[19, 36], ["print", "print"], "function", ["None"], ["def", "remap_dataset_set_names", "(", "dataset", ",", "metric_on_set", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "\"\"\"re-map the metric_on_set to internal keys\"\"\"", "\n", "if", "verbose", ":", "\n", "    ", "print", "(", "'Call internal function _remap_dataset_set_names with dataset={:} and metric_on_set={:}'", ".", "format", "(", "dataset", ",", "metric_on_set", ")", ")", "\n", "", "if", "dataset", "==", "'cifar10'", "and", "metric_on_set", "==", "'valid'", ":", "\n", "    ", "dataset", ",", "metric_on_set", "=", "'cifar10-valid'", ",", "'x-valid'", "\n", "", "elif", "dataset", "==", "'cifar10'", "and", "metric_on_set", "==", "'test'", ":", "\n", "    ", "dataset", ",", "metric_on_set", "=", "'cifar10'", ",", "'ori-test'", "\n", "", "elif", "dataset", "==", "'cifar10'", "and", "metric_on_set", "==", "'train'", ":", "\n", "    ", "dataset", ",", "metric_on_set", "=", "'cifar10'", ",", "'train'", "\n", "", "elif", "(", "dataset", "==", "'cifar100'", "or", "dataset", "==", "'ImageNet16-120'", ")", "and", "metric_on_set", "==", "'valid'", ":", "\n", "    ", "metric_on_set", "=", "'x-valid'", "\n", "", "elif", "(", "dataset", "==", "'cifar100'", "or", "dataset", "==", "'ImageNet16-120'", ")", "and", "metric_on_set", "==", "'test'", ":", "\n", "    ", "metric_on_set", "=", "'x-test'", "\n", "", "if", "verbose", ":", "\n", "    ", "print", "(", "'  return dataset={:} and metric_on_set={:}'", ".", "format", "(", "dataset", ",", "metric_on_set", ")", ")", "\n", "", "return", "dataset", ",", "metric_on_set", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.__init__": [[58, 95], ["api_201.NASBench201API.reset_time", "isinstance", "copy.deepcopy", "collections.OrderedDict", "set", "sorted", "sorted", "enumerate", "os.path.join", "print", "isinstance", "isinstance", "str", "os.path.isfile", "torch.load", "isinstance", "type", "list", "collections.OrderedDict", "api_utils.ArchResults.create_from_state_dict", "api_utils.ArchResults.create_from_state_dict", "list", "print", "pathlib.Path", "copy.deepcopy", "ValueError", "file_path_or_dict[].keys", "type"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.reset_time", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.create_from_state_dict"], ["def", "__init__", "(", "self", ",", "file_path_or_dict", ":", "Optional", "[", "Union", "[", "Text", ",", "Dict", "]", "]", "=", "None", ",", "\n", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "self", ".", "filename", "=", "None", "\n", "self", ".", "reset_time", "(", ")", "\n", "if", "file_path_or_dict", "is", "None", ":", "\n", "      ", "file_path_or_dict", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'TORCH_HOME'", "]", ",", "ALL_BENCHMARK_FILES", "[", "-", "1", "]", ")", "\n", "print", "(", "'Try to use the default NAS-Bench-201 path from {:}.'", ".", "format", "(", "file_path_or_dict", ")", ")", "\n", "", "if", "isinstance", "(", "file_path_or_dict", ",", "str", ")", "or", "isinstance", "(", "file_path_or_dict", ",", "Path", ")", ":", "\n", "      ", "file_path_or_dict", "=", "str", "(", "file_path_or_dict", ")", "\n", "if", "verbose", ":", "print", "(", "'try to create the NAS-Bench-201 api from {:}'", ".", "format", "(", "file_path_or_dict", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "file_path_or_dict", ")", ",", "'invalid path : {:}'", ".", "format", "(", "file_path_or_dict", ")", "\n", "self", ".", "filename", "=", "Path", "(", "file_path_or_dict", ")", ".", "name", "\n", "file_path_or_dict", "=", "torch", ".", "load", "(", "file_path_or_dict", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ":", "\n", "      ", "file_path_or_dict", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid type : {:} not in [str, dict]'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", ")", "\n", "assert", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ",", "'It should be a dict instead of {:}'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", "\n", "self", ".", "verbose", "=", "verbose", "# [TODO] a flag indicating whether to print more logs", "\n", "keys", "=", "(", "'meta_archs'", ",", "'arch2infos'", ",", "'evaluated_indexes'", ")", "\n", "for", "key", "in", "keys", ":", "assert", "key", "in", "file_path_or_dict", ",", "'Can not find key[{:}] in the dict'", ".", "format", "(", "key", ")", "\n", "self", ".", "meta_archs", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", "[", "'meta_archs'", "]", ")", "\n", "# This is a dict mapping each architecture to a dict, where the key is #epochs and the value is ArchResults", "\n", "self", ".", "arch2infos_dict", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_avaliable_hps", "=", "set", "(", "[", "'12'", ",", "'200'", "]", ")", "\n", "for", "xkey", "in", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'arch2infos'", "]", ".", "keys", "(", ")", ")", ")", ":", "\n", "      ", "all_info", "=", "file_path_or_dict", "[", "'arch2infos'", "]", "[", "xkey", "]", "\n", "hp2archres", "=", "OrderedDict", "(", ")", "\n", "# self.arch2infos_less[xkey] = ArchResults.create_from_state_dict( all_info['less'] )", "\n", "# self.arch2infos_full[xkey] = ArchResults.create_from_state_dict( all_info['full'] )", "\n", "hp2archres", "[", "'12'", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'less'", "]", ")", "\n", "hp2archres", "[", "'200'", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'full'", "]", ")", "\n", "self", ".", "arch2infos_dict", "[", "xkey", "]", "=", "hp2archres", "\n", "", "self", ".", "evaluated_indexes", "=", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'evaluated_indexes'", "]", ")", ")", "\n", "self", ".", "archstr2index", "=", "{", "}", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "self", ".", "meta_archs", ")", ":", "\n", "      ", "assert", "arch", "not", "in", "self", ".", "archstr2index", ",", "'This [{:}]-th arch {:} already in the dict ({:}).'", ".", "format", "(", "idx", ",", "arch", ",", "self", ".", "archstr2index", "[", "arch", "]", ")", "\n", "self", ".", "archstr2index", "[", "arch", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.reload": [[96, 117], ["os.path.isdir", "os.path.join", "list", "os.path.join", "os.path.isfile", "torch.load", "collections.OrderedDict", "api_utils.ArchResults.create_from_state_dict", "api_utils.ArchResults.create_from_state_dict", "range", "len", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ResultsCount.create_from_state_dict"], ["", "", "def", "reload", "(", "self", ",", "archive_root", ":", "Text", "=", "None", ",", "index", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"Overwrite all information of the 'index'-th architecture in the search space.\n         It will load its data from 'archive_root'.\n    \"\"\"", "\n", "if", "archive_root", "is", "None", ":", "\n", "      ", "archive_root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'TORCH_HOME'", "]", ",", "ALL_ARCHIVE_DIRS", "[", "-", "1", "]", ")", "\n", "", "assert", "os", ".", "path", ".", "isdir", "(", "archive_root", ")", ",", "'invalid directory : {:}'", ".", "format", "(", "archive_root", ")", "\n", "if", "index", "is", "None", ":", "\n", "      ", "indexes", "=", "list", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "indexes", "=", "[", "index", "]", "\n", "", "for", "idx", "in", "indexes", ":", "\n", "      ", "assert", "0", "<=", "idx", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index of {:}'", ".", "format", "(", "idx", ")", "\n", "xfile_path", "=", "os", ".", "path", ".", "join", "(", "archive_root", ",", "'{:06d}-FULL.pth'", ".", "format", "(", "idx", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "xfile_path", ")", ",", "'invalid data path : {:}'", ".", "format", "(", "xfile_path", ")", "\n", "xdata", "=", "torch", ".", "load", "(", "xfile_path", ",", "map_location", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "xdata", ",", "dict", ")", "and", "'full'", "in", "xdata", "and", "'less'", "in", "xdata", ",", "'invalid format of data in {:}'", ".", "format", "(", "xfile_path", ")", "\n", "hp2archres", "=", "OrderedDict", "(", ")", "\n", "hp2archres", "[", "'12'", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'less'", "]", ")", "\n", "hp2archres", "[", "'200'", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'full'", "]", ")", "\n", "self", ".", "arch2infos_dict", "[", "idx", "]", "=", "hp2archres", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.query_info_str_by_arch": [[118, 128], ["api_201.NASBench201API._query_info_str_by_arch", "print"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI._query_info_str_by_arch"], ["", "", "def", "query_info_str_by_arch", "(", "self", ",", "arch", ",", "hp", ":", "Text", "=", "'12'", ")", ":", "\n", "    ", "\"\"\" This function is used to query the information of a specific architecture\n        'arch' can be an architecture index or an architecture string\n        When hp=12, the hyper-parameters used to train a model are in 'configs/nas-benchmark/hyper-opts/12E.config'\n        When hp=200, the hyper-parameters used to train a model are in 'configs/nas-benchmark/hyper-opts/200E.config'\n        The difference between these three configurations are the number of training epochs.\n    \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call query_info_str_by_arch with arch={:} and hp={:}'", ".", "format", "(", "arch", ",", "hp", ")", ")", "\n", "", "return", "self", ".", "_query_info_str_by_arch", "(", "arch", ",", "hp", ",", "print_information", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.get_more_info": [[144, 205], ["api_201.NASBench201API.query_index_by_arch", "archresult.get_metrics", "print", "ValueError", "isinstance", "archresult.get_dataset_seeds", "random.choice", "archresult.get_metrics", "str", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.query_index_by_arch", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_dataset_seeds", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics"], ["", "def", "get_more_info", "(", "self", ",", "index", ",", "dataset", ",", "iepoch", "=", "None", ",", "hp", "=", "'12'", ",", "is_random", "=", "True", ")", ":", "\n", "    ", "if", "self", ".", "verbose", ":", "\n", "      ", "print", "(", "'Call the get_more_info function with index={:}, dataset={:}, iepoch={:}, hp={:}, and is_random={:}.'", ".", "format", "(", "index", ",", "dataset", ",", "iepoch", ",", "hp", ",", "is_random", ")", ")", "\n", "", "index", "=", "self", ".", "query_index_by_arch", "(", "index", ")", "# To avoid the input is a string or an instance of a arch object", "\n", "if", "index", "not", "in", "self", ".", "arch2infos_dict", ":", "\n", "      ", "raise", "ValueError", "(", "'Did not find {:} from arch2infos_dict.'", ".", "format", "(", "index", ")", ")", "\n", "", "archresult", "=", "self", ".", "arch2infos_dict", "[", "index", "]", "[", "str", "(", "hp", ")", "]", "\n", "# if randomly select one trial, select the seed at first", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "\n", "      ", "seeds", "=", "archresult", ".", "get_dataset_seeds", "(", "dataset", ")", "\n", "is_random", "=", "random", ".", "choice", "(", "seeds", ")", "\n", "# collect the training information", "\n", "", "train_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'train'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "total", "=", "train_info", "[", "'iepoch'", "]", "+", "1", "\n", "xinfo", "=", "{", "'train-loss'", ":", "train_info", "[", "'loss'", "]", ",", "\n", "'train-accuracy'", ":", "train_info", "[", "'accuracy'", "]", ",", "\n", "'train-per-time'", ":", "train_info", "[", "'all_time'", "]", "/", "total", "if", "train_info", "[", "'all_time'", "]", "is", "not", "None", "else", "None", ",", "\n", "'train-all-time'", ":", "train_info", "[", "'all_time'", "]", "}", "\n", "# collect the evaluation information", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "try", ":", "\n", "        ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "valtest_info", "=", "None", "\n", "", "else", ":", "\n", "      ", "try", ":", "# collect results on the proposed test set", "\n", "        ", "if", "dataset", "==", "'cifar10'", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "", "except", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "try", ":", "# collect results on the proposed validation set", "\n", "        ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", ":", "\n", "        ", "valid_info", "=", "None", "\n", "", "try", ":", "\n", "        ", "if", "dataset", "!=", "'cifar10'", ":", "\n", "          ", "valtest_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "valtest_info", "=", "None", "\n", "", "", "except", ":", "\n", "        ", "valtest_info", "=", "None", "\n", "", "", "if", "valid_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valid-loss'", "]", "=", "valid_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valid-accuracy'", "]", "=", "valid_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valid-per-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "/", "total", "if", "valid_info", "[", "'all_time'", "]", "is", "not", "None", "else", "None", "\n", "xinfo", "[", "'valid-all-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "\n", "", "if", "test_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'test-loss'", "]", "=", "test_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'test-accuracy'", "]", "=", "test_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'test-per-time'", "]", "=", "test_info", "[", "'all_time'", "]", "/", "total", "if", "test_info", "[", "'all_time'", "]", "is", "not", "None", "else", "None", "\n", "xinfo", "[", "'test-all-time'", "]", "=", "test_info", "[", "'all_time'", "]", "\n", "", "if", "valtest_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valtest-loss'", "]", "=", "valtest_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valtest-accuracy'", "]", "=", "valtest_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valtest-per-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "/", "total", "if", "valtest_info", "[", "'all_time'", "]", "is", "not", "None", "else", "None", "\n", "xinfo", "[", "'valtest-all-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "\n", "", "return", "xinfo", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.show": [[206, 209], ["api_201.NASBench201API._show"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI._show"], ["", "def", "show", "(", "self", ",", "index", ":", "int", "=", "-", "1", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function will print the information of a specific (or all) architecture(s).\"\"\"", "\n", "self", ".", "_show", "(", "index", ",", "print_information", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.str2lists": [[210, 236], ["arch_str.split", "enumerate", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2lists", "(", "arch_str", ":", "Text", ")", "->", "List", "[", "tuple", "]", ":", "\n", "    ", "\"\"\"\n    This function shows how to read the string-based architecture encoding.\n      It is the same as the `str2structure` func in `AutoDL-Projects/lib/models/cell_searchs/genotypes.py`\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n    :return: a list of tuple, contains multiple (op, input_node_index) pairs.\n\n    :usage\n      arch = api.str2lists( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      print ('there are {:} nodes in this arch'.format(len(arch)+1)) # arch is a list\n      for i, node in enumerate(arch):\n        print('the {:}-th node is the sum of these {:} nodes with op: {:}'.format(i+1, len(node), node))\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "genotypes", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.NASBench201API.str2matrix": [[237, 274], ["arch_str.split", "numpy.zeros", "enumerate", "len", "list", "filter", "xi.split", "node_str.split", "len", "ValueError", "search_space.index", "int", "xinput.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2matrix", "(", "arch_str", ":", "Text", ",", "\n", "search_space", ":", "List", "[", "Text", "]", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    This func shows how to convert the string-based architecture encoding to the encoding strategy in NAS-Bench-101.\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n      search_space: a list of operation string, the default list is the search space for NAS-Bench-201\n        the default value should be be consistent with this line https://github.com/D-X-Y/AutoDL-Projects/blob/master/lib/models/cell_operations.py#L24\n    :return\n      the numpy matrix (2-D np.ndarray) representing the DAG of this architecture topology\n    :usage\n      matrix = api.str2matrix( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      This matrix is 4-by-4 matrix representing a cell with 4 nodes (only the lower left triangle is useful).\n         [ [0, 0, 0, 0],  # the first line represents the input (0-th) node\n           [2, 0, 0, 0],  # the second line represents the 1-st node, is calculated by 2-th-op( 0-th-node )\n           [0, 0, 0, 0],  # the third line represents the 2-nd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node )\n           [0, 0, 1, 0] ] # the fourth line represents the 3-rd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node ) + 1-th-op( 2-th-node )\n      In NAS-Bench-201 search space, 0-th-op is 'none', 1-th-op is 'skip_connect',\n         2-th-op is 'nor_conv_1x1', 3-th-op is 'nor_conv_3x3', 4-th-op is 'avg_pool_3x3'.\n    :(NOTE)\n      If a node has two input-edges from the same node, this function does not work. One edge will be overlapped.\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "num_nodes", "=", "len", "(", "node_strs", ")", "+", "1", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "for", "xi", "in", "inputs", ":", "\n", "        ", "op", ",", "idx", "=", "xi", ".", "split", "(", "'~'", ")", "\n", "if", "op", "not", "in", "search_space", ":", "raise", "ValueError", "(", "'this op ({:}) is not in {:}'", ".", "format", "(", "op", ",", "search_space", ")", ")", "\n", "op_idx", ",", "node_idx", "=", "search_space", ".", "index", "(", "op", ")", ",", "int", "(", "idx", ")", "\n", "matrix", "[", "i", "+", "1", ",", "node_idx", "]", "=", "op_idx", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_201.print_information": [[26, 50], ["information.get_dataset_names", "enumerate", "information.get_compute_costs", "information.get_metrics", "print", "information.get_metrics", "api_201.print_information.metric2str"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_dataset_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.ArchResults.get_metrics"], ["def", "print_information", "(", "information", ",", "extra_info", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "  ", "dataset_names", "=", "information", ".", "get_dataset_names", "(", ")", "\n", "strings", "=", "[", "information", ".", "arch_str", ",", "'datasets : {:}, extra-info : {:}'", ".", "format", "(", "dataset_names", ",", "extra_info", ")", "]", "\n", "def", "metric2str", "(", "loss", ",", "acc", ")", ":", "\n", "    ", "return", "'loss = {:.3f}, top1 = {:.2f}%'", ".", "format", "(", "loss", ",", "acc", ")", "\n", "\n", "", "for", "ida", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "    ", "metric", "=", "information", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "metric", "[", "'flops'", "]", ",", "metric", "[", "'params'", "]", ",", "metric", "[", "'latency'", "]", "\n", "str1", "=", "'{:14s} FLOP={:6.2f} M, Params={:.3f} MB, latency={:} ms.'", ".", "format", "(", "dataset", ",", "flop", ",", "param", ",", "'{:.2f}'", ".", "format", "(", "latency", "*", "1000", ")", "if", "latency", "is", "not", "None", "and", "latency", ">", "0", "else", "None", ")", "\n", "train_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'train'", ")", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ")", "\n", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "      ", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], test  : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}], test : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "strings", "+=", "[", "str1", ",", "str2", "]", "\n", "", "if", "show", ":", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.AverageMeter.__init__": [[6, 8], ["meter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.AverageMeter.reset": [[9, 14], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.AverageMeter.update": [[15, 20], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.AverageMeter.__repr__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(val={val}, avg={avg}, count={count})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.__init__": [[27, 29], ["meter.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset"], ["def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.reset": [[30, 38], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", ",", "'total_epoch should be greater than 0 vs {:}'", ".", "format", "(", "total_epoch", ")", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update": [[39, 47], ["meter.RecorderMeter.max_accuracy"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.max_accuracy"], ["", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "return", "self", ".", "max_accuracy", "(", "False", ")", "==", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.max_accuracy": [[48, 52], ["meter.RecorderMeter.epoch_accuracy[].max", "meter.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.plot_curve": [[53, 99], ["matplotlib.use", "plt.figure", "numpy.array", "numpy.zeros", "plt.xlim", "plt.ylim", "plt.xticks", "plt.yticks", "plt.grid", "plt.title", "plt.xlabel", "plt.ylabel", "plt.plot", "plt.legend", "plt.plot", "plt.legend", "plt.plot", "plt.legend", "plt.plot", "plt.legend", "plt.close", "numpy.arange", "numpy.arange", "plt.figure.savefig", "print", "float", "float", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.close"], ["", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "import", "matplotlib", "\n", "matplotlib", ".", "use", "(", "'agg'", ")", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "100", "\n", "width", ",", "height", "=", "1600", ",", "1000", "\n", "legend_fontsize", "=", "10", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.PrintLogger.__init__": [[18, 21], ["None"], "methods", ["None"], ["f_path", "=", "to_path", "+", "log_file", "\n", "try", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "to_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "to_path", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.PrintLogger.log": [[22, 24], ["print"], "methods", ["None"], ["\n", "", "__LOGGER__", "=", "FileLogger", "(", ")", "\n", "__LOGGER__", ".", "set_log_file", "(", "f_path", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.PrintLogger.close": [[25, 27], ["print"], "methods", ["None"], ["print", "(", "\"Progress logs of {} will be stored in {}\"", ".", "format", "(", "log_type", ",", "f_path", ")", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.__init__": [[31, 52], ["int", "pathlib.Path", "logger.Logger.log_dir.mkdir", "bool", "open", "pathlib.Path", "logger.Logger.model_dir.mkdir", "logger.Logger.tensorboard_dir.mkdir", "tf.summary.FileWriter", "time.strftime", "time.strftime", "str", "time.gmtime", "time.gmtime", "time.time", "time.time"], "methods", ["None"], ["", "", "def", "set_log_level", "(", "log_level", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "set_level", "(", "log_level", ")", "\n", "if", "log_level", "==", "'debug'", ":", "\n", "        ", "print_trace", "(", "True", ")", "\n", "\n", "", "", "def", "debug", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "debug", "(", "msg", ")", "\n", "\n", "", "def", "warn", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "warn", "(", "msg", ")", "\n", "\n", "", "def", "error", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.__repr__": [[53, 55], ["None"], "methods", ["None"], ["if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "error", "(", "msg", ")", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.path": [[56, 63], ["TypeError"], "methods", ["None"], ["\n", "", "def", "info", "(", "msg", ")", ":", "\n", "    ", "global", "__LOGGER__", "\n", "if", "__LOGGER__", "==", "None", ":", "\n", "        ", "__LOGGER__", "=", "ConsoleLogger", "(", ")", "# default logger    ", "\n", "", "__LOGGER__", ".", "info", "(", "msg", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.extract_log": [[64, 66], ["None"], "methods", ["None"], ["", "class", "Singleton", "(", "object", ")", ":", "\n", "    ", "_instances", "=", "{", "}", "\n", "def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.close": [[67, 71], ["logger.Logger.logger_file.close", "logger.Logger.writer.close"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.close"], ["        ", "if", "cls", "not", "in", "cls", ".", "_instances", ":", "\n", "            ", "cls", ".", "_instances", "[", "cls", "]", "=", "super", "(", "Singleton", ",", "cls", ")", ".", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "cls", ".", "_instances", "[", "cls", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log": [[72, 80], ["sys.stdout.write", "sys.stdout.flush", "print", "logger.Logger.logger_file.write", "logger.Logger.logger_file.flush"], "methods", ["None"], ["", "", "class", "ConsoleLogger", "(", "Singleton", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "# initialize first time only ", "\n", "        ", "if", "hasattr", "(", "self", ",", "'cur_level'", ")", "is", "False", ":", "\n", "            ", "self", ".", "cur_level", "=", "'warn'", "\n", "self", ".", "levels", "=", "[", "'debug'", ",", "'warn'", ",", "'error'", ",", "'log'", "]", "\n", "self", ".", "trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.scalar_summary": [[81, 93], ["warnings.warn", "zip", "isinstance", "isinstance", "type", "type", "isinstance", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "tf.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn"], ["", "", "def", "set_level", "(", "self", ",", "log_level", ")", ":", "\n", "        ", "if", "log_level", ".", "lower", "(", ")", "in", "self", ".", "levels", ":", "\n", "            ", "self", ".", "cur_level", "=", "log_level", ".", "lower", "(", ")", "\n", "\n", "", "", "def", "set_trace", "(", "self", ",", "trace", ")", ":", "\n", "        ", "self", ".", "trace", "=", "trace", "\n", "\n", "", "def", "debug", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'debug'", ")", ":", "\n", "            ", "print", "(", "\"[{}:D] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "\n", "", "", "def", "warn", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'warn'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.image_summary": [[94, 121], ["enumerate", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "warnings.warn", "scipy.misc.toimage().save", "tf.Summary.Image", "img_summaries.append", "StringIO", "tf.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.warn", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.save", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["            ", "print", "(", "\"[{}:W] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "self", ".", "print_trace", "(", ")", "\n", "\n", "", "", "def", "error", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "levels", ".", "index", "(", "self", ".", "cur_level", ")", "<=", "self", ".", "levels", ".", "index", "(", "'error'", ")", ":", "\n", "            ", "print", "(", "\"[{}:E] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "self", ".", "print_trace", "(", ")", "\n", "\n", "", "", "def", "print_trace", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "trace", ":", "\n", "            ", "exception_log", "=", "traceback", ".", "format_exc", "(", ")", "\n", "if", "exception_log", "!=", "None", "and", "not", "'NoneType'", "in", "exception_log", ":", "\n", "                ", "print", "(", "exception_log", ")", "\n", "\n", "", "", "", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "\"[{}:L] {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ",", "msg", ")", ")", "\n", "\n", "\n", "", "", "class", "FileLogger", "(", "Singleton", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "# initialize first time only ", "\n", "        ", "if", "hasattr", "(", "self", ",", "'cur_level'", ")", "is", "False", ":", "\n", "            ", "self", ".", "cur_level", "=", "'warn'", "\n", "self", ".", "levels", "=", "[", "'debug'", ",", "'warn'", ",", "'error'", ",", "'log'", "]", "\n", "self", ".", "trace", "=", "False", "\n", "self", ".", "logger", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.histo_summary": [[122, 151], ["numpy.histogram", "tf.HistogramProto", "float", "float", "int", "float", "float", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "ValueError", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tf.HistogramProto.bucket_limit.append", "tf.HistogramProto.bucket.append", "tf.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "set_log_file", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'FileLogger'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(process)d:%(levelname)s] %(message)s'", ")", "\n", "f_handler", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "f_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "f_handler", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n", "", "def", "set_level", "(", "self", ",", "log_level", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "None", ":", "\n", "            ", "self", ".", "set_log_file", "(", "'default.log'", ")", "\n", "\n", "", "if", "log_level", ".", "lower", "(", ")", "in", "self", ".", "levels", ":", "\n", "            ", "self", ".", "cur_level", "=", "log_level", ".", "lower", "(", ")", "\n", "if", "self", ".", "cur_level", "==", "'debug'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "", "elif", "self", ".", "cur_level", "==", "'warn'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "WARN", ")", "\n", "", "elif", "self", ".", "cur_level", "==", "'error'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "ERROR", ")", "\n", "", "elif", "self", ".", "cur_level", "==", "'log'", ":", "\n", "                ", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Invalid log level: {}'", ".", "format", "(", "log_level", ")", ")", "\n", "\n", "", "", "", "def", "set_trace", "(", "self", ",", "trace", ")", ":", "\n", "        ", "self", ".", "trace", "=", "trace", "\n", "\n", "", "def", "debug", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "None", ":", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_for_file": [[7, 10], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["def", "time_for_file", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%d-%h-at-%H-%M-%S'", "\n", "return", "'{:}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string": [[11, 15], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{:}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string_short": [[16, 20], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string_short", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y%m%d'", "\n", "string", "=", "'{:}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_print": [[21, 24], ["print", "time_utils.time_string"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.time_string"], ["", "def", "time_print", "(", "string", ",", "is_print", "=", "True", ")", ":", "\n", "  ", "if", "(", "is_print", ")", ":", "\n", "    ", "print", "(", "'{} : {}'", ".", "format", "(", "time_string", "(", ")", ",", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.convert_secs2time": [[25, 34], ["int", "int", "int"], "function", ["None"], ["", "", "def", "convert_secs2time", "(", "epoch_time", ",", "return_str", "=", "False", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "if", "return_str", ":", "\n", "    ", "str", "=", "'[{:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "return", "str", "\n", "", "else", ":", "\n", "    ", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.time_utils.print_log": [[35, 43], ["hasattr", "log.log", "print", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.logger.Logger.log"], ["", "", "def", "print_log", "(", "print_string", ",", "log", ")", ":", "\n", "#if isinstance(log, Logger): log.log('{:}'.format(print_string))", "\n", "  ", "if", "hasattr", "(", "log", ",", "'log'", ")", ":", "log", ".", "log", "(", "'{:}'", ".", "format", "(", "print_string", ")", ")", "\n", "else", ":", "\n", "    ", "print", "(", "\"{:}\"", ".", "format", "(", "print_string", ")", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "      ", "log", ".", "write", "(", "'{:}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.__init__": [[115, 203], ["lookup.nas101bench.lib.config.build_config", "random.seed", "print", "time.time", "set", "tensorflow.python_io.tf_record_iterator", "print", "json.loads", "int", "numpy.array", "numpy.reshape", "raw_operations.split", "lookup.nas101bench.lib.model_metrics_pb2.ModelMetrics.FromString", "api.NASBench.valid_epochs.add", "[].append", "time.time", "serialized_row.decode", "numpy.sqrt", "base64.b64decode", "len", "int", "list"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.config.build_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.decode"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.query": [[204, 264], ["api.NASBench.get_metrics_from_spec", "random.randint", "api.OutOfDomainError"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_metrics_from_spec"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.is_valid": [[265, 283], ["api.NASBench._check_spec"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench._check_spec"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_budget_counters": [[284, 287], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.reset_budget_counters": [[288, 292], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.evaluate": [[293, 331], ["lookup.nas101bench.lib.evaluate.train_and_evaluate", "os.path.join", "tensorflow.gfile.Open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate.train_and_evaluate"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.hash_iterator": [[332, 335], ["api.NASBench.fixed_statistics.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_metrics_from_hash": [[336, 351], ["copy.deepcopy", "copy.deepcopy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_metrics_from_spec": [[352, 367], ["api.NASBench._check_spec", "api.NASBench._hash_spec", "api.NASBench.get_metrics_from_hash"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench._check_spec", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench._hash_spec", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.get_metrics_from_hash"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench._check_spec": [[368, 392], ["len", "numpy.sum", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError", "api.OutOfDomainError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench._hash_spec": [[393, 396], ["lookup.nas101bench.lib.model_spec.hash_spec"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.ModelSpec.hash_spec"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api._NumpyEncoder.default": [[401, 409], ["isinstance", "json.JSONEncoder.default", "obj.tolist", "isinstance", "numpy.asscalar"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.NumpyEncoder.default", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar.CIFARInput.__init__": [[37, 67], ["ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", ",", "config", ")", ":", "\n", "    ", "\"\"\"Initializes a CIFARInput object.\n\n    Args:\n      mode: one of [train, valid, test, augment, sample]\n      config: config dict built from config.py\n\n    Raises:\n      ValueError: invalid mode or data files\n    \"\"\"", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "config", "=", "config", "\n", "if", "mode", "==", "'train'", ":", "# Training set (no validation & test)", "\n", "      ", "self", ".", "data_files", "=", "config", "[", "'train_data_files'", "]", "\n", "", "elif", "mode", "==", "'train_eval'", ":", "# For computing train error", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'train_data_files'", "]", "[", "0", "]", "]", "\n", "", "elif", "mode", "==", "'valid'", ":", "# For computing validation error", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'valid_data_file'", "]", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "# For computing the test error", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'test_data_file'", "]", "]", "\n", "", "elif", "mode", "==", "'augment'", ":", "# Training set (includes validation, no test)", "\n", "      ", "self", ".", "data_files", "=", "(", "config", "[", "'train_data_files'", "]", "+", "\n", "[", "config", "[", "'valid_data_file'", "]", "]", ")", "\n", "", "elif", "mode", "==", "'sample'", ":", "# Fixed batch of 100 samples from validation", "\n", "      ", "self", ".", "data_files", "=", "[", "config", "[", "'sample_data_file'", "]", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode'", ")", "\n", "\n", "", "if", "not", "self", ".", "data_files", ":", "\n", "      ", "raise", "ValueError", "(", "'no data files provided'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar.CIFARInput.num_images": [[68, 83], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "    ", "\"\"\"Number of images in the dataset (depends on the mode).\"\"\"", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "      ", "return", "40000", "\n", "", "elif", "self", ".", "mode", "==", "'train_eval'", ":", "\n", "      ", "return", "10000", "\n", "", "elif", "self", ".", "mode", "==", "'valid'", ":", "\n", "      ", "return", "10000", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "      ", "return", "10000", "\n", "", "elif", "self", ".", "mode", "==", "'augment'", ":", "\n", "      ", "return", "50000", "\n", "", "elif", "self", ".", "mode", "==", "'sample'", ":", "\n", "      ", "return", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar.CIFARInput.input_fn": [[84, 128], ["tensorflow.data.TFRecordDataset", "dataset.repeat.repeat.prefetch", "functools.partial", "dataset.repeat.repeat.apply", "dataset.repeat.repeat.map", "dataset.repeat.repeat.prefetch", "dataset.repeat.repeat.cache().apply", "dataset.repeat.repeat.repeat", "tensorflow.contrib.data.map_and_batch", "functools.partial", "tensorflow.contrib.data.shuffle_and_repeat", "dataset.repeat.repeat.cache"], "methods", ["None"], ["", "", "def", "input_fn", "(", "self", ",", "params", ")", ":", "\n", "    ", "\"\"\"Returns a CIFAR tf.data.Dataset object.\n\n    Args:\n      params: parameter dict pass by Estimator.\n\n    Returns:\n      tf.data.Dataset object\n    \"\"\"", "\n", "batch_size", "=", "params", "[", "'batch_size'", "]", "\n", "is_training", "=", "(", "self", ".", "mode", "==", "'train'", "or", "self", ".", "mode", "==", "'augment'", ")", "\n", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "self", ".", "data_files", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "buffer_size", "=", "batch_size", ")", "\n", "\n", "# Repeat dataset for training modes", "\n", "if", "is_training", ":", "\n", "# Shuffle buffer with whole dataset to ensure full randomness per epoch", "\n", "      ", "dataset", "=", "dataset", ".", "cache", "(", ")", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "shuffle_and_repeat", "(", "\n", "buffer_size", "=", "self", ".", "num_images", ")", ")", "\n", "\n", "# This is a hack to allow computing metrics on a fixed batch on TPU. Because", "\n", "# TPU shards the batch acrosss cores, we replicate the fixed batch so that", "\n", "# each core contains the whole batch.", "\n", "", "if", "self", ".", "mode", "==", "'sample'", ":", "\n", "      ", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "\n", "# Parse, preprocess, and batch images", "\n", "", "parser_fn", "=", "functools", ".", "partial", "(", "_parser", ",", "is_training", ")", "\n", "dataset", "=", "dataset", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "map_and_batch", "(", "\n", "parser_fn", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_parallel_batches", "=", "self", ".", "config", "[", "'tpu_num_shards'", "]", ",", "\n", "drop_remainder", "=", "True", ")", ")", "\n", "\n", "# Assign static batch size dimension", "\n", "dataset", "=", "dataset", ".", "map", "(", "functools", ".", "partial", "(", "_set_batch_dimension", ",", "batch_size", ")", ")", "\n", "\n", "# Prefetch to overlap in-feed with training", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "tf", ".", "contrib", ".", "data", ".", "AUTOTUNE", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar._preprocess": [[130, 153], ["tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.random_crop", "tensorflow.image.random_flip_left_right"], "function", ["None"], ["", "", "def", "_preprocess", "(", "image", ")", ":", "\n", "  ", "\"\"\"Perform standard CIFAR preprocessing.\n\n  Pads the image then performs a random crop.\n  Then, image is flipped horizontally randomly.\n\n  Args:\n    image: image Tensor with shape [height, width, 3]\n\n  Returns:\n    preprocessed image with the same dimensions.\n  \"\"\"", "\n", "# Pad 4 pixels on all sides with 0", "\n", "image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "\n", "image", ",", "HEIGHT", "+", "8", ",", "WIDTH", "+", "8", ")", "\n", "\n", "# Random crop", "\n", "image", "=", "tf", ".", "random_crop", "(", "image", ",", "[", "HEIGHT", ",", "WIDTH", ",", "3", "]", ",", "seed", "=", "0", ")", "\n", "\n", "# Random flip", "\n", "image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ",", "seed", "=", "0", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar._parser": [[155, 175], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "_preprocess.set_shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "cifar._preprocess", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar._preprocess"], ["", "def", "_parser", "(", "use_preprocessing", ",", "serialized_example", ")", ":", "\n", "  ", "\"\"\"Parses a single tf.Example into image and label tensors.\"\"\"", "\n", "features", "=", "tf", ".", "parse_single_example", "(", "\n", "serialized_example", ",", "\n", "features", "=", "{", "\n", "'image'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", ")", "\n", "image", "=", "tf", ".", "decode_raw", "(", "features", "[", "'image'", "]", ",", "tf", ".", "uint8", ")", "\n", "image", ".", "set_shape", "(", "[", "3", "*", "HEIGHT", "*", "WIDTH", "]", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "3", ",", "HEIGHT", ",", "WIDTH", "]", ")", "\n", "# TODO(chrisying): handle NCHW format", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "if", "use_preprocessing", ":", "\n", "    ", "image", "=", "_preprocess", "(", "image", ")", "\n", "", "image", "-=", "tf", ".", "constant", "(", "RGB_MEAN", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "image", "/=", "tf", ".", "constant", "(", "RGB_STD", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "label", "=", "tf", ".", "cast", "(", "features", "[", "'label'", "]", ",", "tf", ".", "int32", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.cifar._set_batch_dimension": [[177, 184], ["images.set_shape", "labels.set_shape", "images.get_shape().merge_with", "labels.get_shape().merge_with", "tensorflow.TensorShape", "tensorflow.TensorShape", "images.get_shape", "labels.get_shape"], "function", ["None"], ["", "def", "_set_batch_dimension", "(", "batch_size", ",", "images", ",", "labels", ")", ":", "\n", "  ", "images", ".", "set_shape", "(", "images", ".", "get_shape", "(", ")", ".", "merge_with", "(", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", ",", "None", ",", "None", ",", "None", "]", ")", ")", ")", "\n", "labels", ".", "set_shape", "(", "labels", ".", "get_shape", "(", ")", ".", "merge_with", "(", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ")", ")", "\n", "\n", "return", "images", ",", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.config.build_config": [[108, 116], ["FLAGS.flags_by_module_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.__init__": [[92, 106], ["lookup.nas101bench.lib.cifar.CIFARInput", "lookup.nas101bench.lib.cifar.CIFARInput", "lookup.nas101bench.lib.cifar.CIFARInput", "lookup.nas101bench.lib.cifar.CIFARInput", "lookup.nas101bench.lib.cifar.CIFARInput", "evaluate._create_estimator"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._create_estimator"], ["def", "__init__", "(", "self", ",", "spec", ",", "config", ",", "model_dir", ")", ":", "\n", "    ", "\"\"\"Initialize evaluator. See train_and_evaluate docstring.\"\"\"", "\n", "self", ".", "input_train", "=", "cifar", ".", "CIFARInput", "(", "'train'", ",", "config", ")", "\n", "self", ".", "input_train_eval", "=", "cifar", ".", "CIFARInput", "(", "'train_eval'", ",", "config", ")", "\n", "self", ".", "input_valid", "=", "cifar", ".", "CIFARInput", "(", "'valid'", ",", "config", ")", "\n", "self", ".", "input_test", "=", "cifar", ".", "CIFARInput", "(", "'test'", ",", "config", ")", "\n", "self", ".", "input_sample", "=", "cifar", ".", "CIFARInput", "(", "'sample'", ",", "config", ")", "\n", "self", ".", "estimator", "=", "_create_estimator", "(", "spec", ",", "config", ",", "model_dir", ",", "\n", "self", ".", "input_train", ".", "num_images", ",", "\n", "self", ".", "input_sample", ".", "num_images", ")", "\n", "\n", "self", ".", "spec", "=", "spec", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run": [[107, 171], ["tensorflow.gfile.MakeDirs", "evaluate._get_param_count", "tensorflow.gfile.DeleteRecursively", "map", "time.time", "evaluate._TrainAndEvaluator.estimator.train", "evaluation_results.append", "lookup.nas101bench.lib.training_time.limit", "lookup.nas101bench.lib.training_time.limit", "map.append", "sorted", "evaluate._TrainAndEvaluator._evaluate_all", "int", "evaluate._TrainAndEvaluator.estimator.train", "evaluation_results.append", "time.time", "tensorflow.logging.warning", "evaluate._TrainAndEvaluator._evaluate_all", "str", "evaluate.AbortError", "str"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._get_param_count", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.limit", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.limit", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator._evaluate_all", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator._evaluate_all"], ["", "def", "run", "(", "self", ")", ":", "\n", "    ", "\"\"\"Runs training and evaluation.\"\"\"", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "# Delete everything in the model dir at the start of each attempt", "\n", "      ", "try", ":", "\n", "        ", "tf", ".", "gfile", ".", "DeleteRecursively", "(", "self", ".", "model_dir", ")", "\n", "", "except", "tf", ".", "errors", ".", "NotFoundError", ":", "\n", "        ", "pass", "\n", "", "tf", ".", "gfile", ".", "MakeDirs", "(", "self", ".", "model_dir", ")", "\n", "\n", "try", ":", "\n", "# Train", "\n", "        ", "if", "self", ".", "config", "[", "'train_seconds'", "]", ">", "0.0", ":", "\n", "          ", "timing", "=", "training_time", ".", "limit", "(", "self", ".", "config", "[", "'train_seconds'", "]", ")", "\n", "", "else", ":", "\n", "          ", "timing", "=", "training_time", ".", "limit", "(", "None", ")", "\n", "\n", "", "evaluations", "=", "map", "(", "float", ",", "self", ".", "config", "[", "'intermediate_evaluations'", "]", ")", "\n", "if", "not", "evaluations", "or", "evaluations", "[", "-", "1", "]", "!=", "1.0", ":", "\n", "          ", "evaluations", ".", "append", "(", "1.0", ")", "\n", "", "assert", "evaluations", "==", "sorted", "(", "evaluations", ")", "\n", "\n", "evaluation_results", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Train for 1 step with 0 LR to initialize the weights, then evaluate", "\n", "# once at the start for completeness, accuracies expected to be around", "\n", "# random selection. Note that batch norm moving averages change during", "\n", "# the step but the trainable weights do not.", "\n", "self", ".", "estimator", ".", "train", "(", "\n", "input_fn", "=", "self", ".", "input_train", ".", "input_fn", ",", "\n", "max_steps", "=", "1", ",", "\n", "hooks", "=", "[", "timing", ".", "train_hook", "]", ",", "\n", "saving_listeners", "=", "[", "timing", ".", "saving_listener", "]", ")", "\n", "evaluation_results", ".", "append", "(", "self", ".", "_evaluate_all", "(", "0.0", ",", "0", ")", ")", "\n", "\n", "for", "next_evaluation", "in", "evaluations", ":", "\n", "          ", "epoch", "=", "next_evaluation", "*", "self", ".", "config", "[", "'train_epochs'", "]", "\n", "train_steps", "=", "int", "(", "epoch", "*", "self", ".", "input_train", ".", "num_images", "/", "\n", "self", ".", "config", "[", "'batch_size'", "]", ")", "\n", "self", ".", "estimator", ".", "train", "(", "\n", "input_fn", "=", "self", ".", "input_train", ".", "input_fn", ",", "\n", "max_steps", "=", "train_steps", ",", "\n", "hooks", "=", "[", "timing", ".", "train_hook", "]", ",", "\n", "saving_listeners", "=", "[", "timing", ".", "saving_listener", "]", ")", "\n", "\n", "evaluation_results", ".", "append", "(", "self", ".", "_evaluate_all", "(", "epoch", ",", "train_steps", ")", ")", "\n", "\n", "", "all_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "break", "# Break from retry loop on success", "\n", "", "except", "VALID_EXCEPTIONS", "as", "e", ":", "# pylint: disable=catching-non-exception", "\n", "        ", "attempts", "+=", "1", "\n", "tf", ".", "logging", ".", "warning", "(", "str", "(", "e", ")", ")", "\n", "if", "attempts", ">=", "self", ".", "config", "[", "'max_attempts'", "]", ":", "\n", "          ", "raise", "AbortError", "(", "str", "(", "e", ")", ")", "\n", "\n", "", "", "", "metadata", "=", "{", "\n", "'trainable_params'", ":", "_get_param_count", "(", "self", ".", "model_dir", ")", ",", "\n", "'total_time'", ":", "all_time", ",", "# includes eval and other metric time", "\n", "'evaluation_results'", ":", "evaluation_results", ",", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator._evaluate_all": [[172, 196], ["evaluate._evaluate", "evaluate._evaluate", "evaluate._evaluate", "evaluate._TrainAndEvaluator.estimator.get_variable_value", "time.time", "evaluate._TrainAndEvaluator._compute_sample_metrics", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator._compute_sample_metrics"], ["", "def", "_evaluate_all", "(", "self", ",", "epochs", ",", "steps", ")", ":", "\n", "    ", "\"\"\"Runs all the evaluations.\"\"\"", "\n", "train_accuracy", "=", "_evaluate", "(", "self", ".", "estimator", ",", "self", ".", "input_train_eval", ",", "\n", "self", ".", "config", ",", "name", "=", "'train'", ")", "\n", "valid_accuracy", "=", "_evaluate", "(", "self", ".", "estimator", ",", "self", ".", "input_valid", ",", "\n", "self", ".", "config", ",", "name", "=", "'valid'", ")", "\n", "test_accuracy", "=", "_evaluate", "(", "self", ".", "estimator", ",", "self", ".", "input_test", ",", "\n", "self", ".", "config", ",", "name", "=", "'test'", ")", "\n", "train_time", "=", "self", ".", "estimator", ".", "get_variable_value", "(", "\n", "training_time", ".", "TOTAL_TIME_NAME", ")", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "sample_metrics", "=", "self", ".", "_compute_sample_metrics", "(", ")", "\n", "predict_time", "=", "time", ".", "time", "(", ")", "-", "now", "\n", "\n", "return", "{", "\n", "'epochs'", ":", "epochs", ",", "\n", "'training_time'", ":", "train_time", ",", "\n", "'training_steps'", ":", "steps", ",", "\n", "'train_accuracy'", ":", "train_accuracy", ",", "\n", "'validation_accuracy'", ":", "valid_accuracy", ",", "\n", "'test_accuracy'", ":", "test_accuracy", ",", "\n", "'sample_metrics'", ":", "sample_metrics", ",", "\n", "'predict_time'", ":", "predict_time", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator._compute_sample_metrics": [[198, 214], ["evaluate._TrainAndEvaluator.estimator.predict().next", "evaluate._TrainAndEvaluator.estimator.predict"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.strategies.rand.RandomStrategy.next", "home.repos.pwc.inspect_result.snu-adsl_bbea.choosers.rf.RandomForestRegressorWithVariance.predict"], ["", "def", "_compute_sample_metrics", "(", "self", ")", ":", "\n", "    ", "\"\"\"Computes the metrics on a fixed batch.\"\"\"", "\n", "sample_metrics", "=", "self", ".", "estimator", ".", "predict", "(", "\n", "input_fn", "=", "self", ".", "input_sample", ".", "input_fn", ",", "yield_single_examples", "=", "False", ")", ".", "next", "(", ")", "\n", "\n", "# Fix the extra batch dimension added by PREDICT", "\n", "for", "metric", "in", "sample_metrics", ":", "\n", "      ", "if", "metric", "in", "[", "'logits'", ",", "'input_grad_norm'", "]", ":", "\n", "# Batch-shaped tensors take first batch", "\n", "        ", "sample_metrics", "[", "metric", "]", "=", "(", "\n", "sample_metrics", "[", "metric", "]", "[", ":", "self", ".", "input_sample", ".", "num_images", ",", "Ellipsis", "]", ")", "\n", "", "else", ":", "\n", "# Other tensors remove batch dimension", "\n", "        ", "sample_metrics", "[", "metric", "]", "=", "sample_metrics", "[", "metric", "]", "[", "0", ",", "Ellipsis", "]", "\n", "\n", "", "", "return", "sample_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate.train_and_evaluate": [[42, 57], ["evaluate._train_and_evaluate_impl"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._train_and_evaluate_impl"], ["", "def", "train_and_evaluate", "(", "spec", ",", "config", ",", "model_dir", ")", ":", "\n", "  ", "\"\"\"Train and evaluate the proposed model.\n\n  This method trains and evaluates the model for the creation of the benchmark\n  dataset. The default values from the config.py are exactly the values used.\n\n  Args:\n    spec: ModelSpec object.\n    config: config dict generated from config.py.\n    model_dir: directory to store the checkpoint files.\n\n  Returns:\n    dict containing the evaluation metadata.\n  \"\"\"", "\n", "return", "_train_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate.augment_and_evaluate": [[59, 81], ["evaluate._augment_and_evaluate_impl"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._augment_and_evaluate_impl"], ["", "def", "augment_and_evaluate", "(", "spec", ",", "config", ",", "model_dir", ",", "epochs_per_eval", "=", "5", ")", ":", "\n", "  ", "\"\"\"Trains the model on the full training set and evaluates on test set.\n\n  \"Augment\" specifically refers to training the same spec in a larger network on\n  the full training set.  Typically this involves increasing the epoch count,\n  number of modules/stacks, and changing the LR schedule. These changes should\n  be made to the config dict before calling this method.\n\n  Note: this method was not used for generating the NAS Benchmark dataset. See\n  train_and_evaluate instead.\n\n  Args:\n    spec: ModelSpec object.\n    config: config dict generated from config.py.\n    model_dir: directory to store the checkpoint files.\n    epochs_per_eval: number of epochs per evaluation run. Evaluation is always\n      run at the very start and end.\n\n  Returns:\n    dict containing the evaluation metadata.\n  \"\"\"", "\n", "return", "_augment_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ",", "epochs_per_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._train_and_evaluate_impl": [[83, 87], ["evaluate._TrainAndEvaluator", "evaluate._TrainAndEvaluator.run"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run"], ["", "def", "_train_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ")", ":", "\n", "  ", "\"\"\"Train and evaluate implementation, see train_and_evaluate docstring.\"\"\"", "\n", "evaluator", "=", "_TrainAndEvaluator", "(", "spec", ",", "config", ",", "model_dir", ")", "\n", "return", "evaluator", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._augment_and_evaluate_impl": [[216, 255], ["evaluate._create_estimator", "tensorflow.train.latest_checkpoint", "int", "lookup.nas101bench.lib.cifar.CIFARInput", "lookup.nas101bench.lib.training_time.limit", "lookup.nas101bench.lib.training_time.limit", "int", "min", "_create_estimator.train", "evaluate._evaluate", "evaluate._get_param_count", "int", "tf.train.latest_checkpoint.split"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._create_estimator", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.limit", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.limit", "home.repos.pwc.inspect_result.snu-adsl_bbea.nas201bench.api.NAS201Bench.train", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._get_param_count"], ["", "", "def", "_augment_and_evaluate_impl", "(", "spec", ",", "config", ",", "model_dir", ",", "epochs_per_eval", "=", "5", ")", ":", "\n", "  ", "\"\"\"Augment and evaluate implementation, see augment_and_evaluate docstring.\"\"\"", "\n", "input_augment", ",", "input_test", "=", "[", "\n", "cifar", ".", "CIFARInput", "(", "m", ",", "config", ")", "\n", "for", "m", "in", "[", "'augment'", ",", "'test'", "]", "]", "\n", "estimator", "=", "_create_estimator", "(", "spec", ",", "config", ",", "model_dir", ",", "\n", "input_augment", ".", "num_images", ")", "\n", "\n", "if", "config", "[", "'train_seconds'", "]", ">", "0.0", ":", "\n", "    ", "timing", "=", "training_time", ".", "limit", "(", "config", "[", "'train_seconds'", "]", ")", "\n", "", "else", ":", "\n", "    ", "timing", "=", "training_time", ".", "limit", "(", "None", ")", "\n", "\n", "", "steps_per_epoch", "=", "input_augment", ".", "num_images", "/", "config", "[", "'batch_size'", "]", "# float", "\n", "ckpt", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_dir", ")", "\n", "if", "not", "ckpt", ":", "\n", "    ", "current_step", "=", "0", "\n", "", "else", ":", "\n", "    ", "current_step", "=", "int", "(", "ckpt", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "", "max_steps", "=", "int", "(", "config", "[", "'train_epochs'", "]", "*", "steps_per_epoch", ")", "\n", "\n", "while", "current_step", "<", "max_steps", ":", "\n", "    ", "next_step", "=", "current_step", "+", "int", "(", "epochs_per_eval", "*", "steps_per_epoch", ")", "\n", "next_step", "=", "min", "(", "next_step", ",", "max_steps", ")", "\n", "estimator", ".", "train", "(", "\n", "input_fn", "=", "input_augment", ".", "input_fn", ",", "\n", "max_steps", "=", "next_step", ",", "\n", "hooks", "=", "[", "timing", ".", "train_hook", "]", ",", "\n", "saving_listeners", "=", "[", "timing", ".", "saving_listener", "]", ")", "\n", "current_step", "=", "next_step", "\n", "\n", "test_accuracy", "=", "_evaluate", "(", "estimator", ",", "input_test", ",", "config", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "'trainable_params'", ":", "_get_param_count", "(", "model_dir", ")", ",", "\n", "'test_accuracy'", ":", "test_accuracy", ",", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._create_estimator": [[257, 287], ["tensorflow.contrib.tpu.RunConfig", "tensorflow.contrib.tpu.TPUEstimator", "tensorflow.contrib.tpu.TPUConfig", "lookup.nas101bench.lib.model_builder.build_model_fn"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.build_model_fn"], ["", "def", "_create_estimator", "(", "spec", ",", "config", ",", "model_dir", ",", "\n", "num_train_images", ",", "num_sample_images", "=", "None", ")", ":", "\n", "  ", "\"\"\"Creates the TPUEstimator object.\"\"\"", "\n", "# Estimator will save a checkpoint at the end of every train() call. Disable", "\n", "# automatic checkpoints by setting the time interval between checkpoints to", "\n", "# a very large value.", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "model_dir", "=", "model_dir", ",", "\n", "keep_checkpoint_max", "=", "3", ",", "# Keeps ckpt at start, halfway, and end", "\n", "save_checkpoints_secs", "=", "2", "**", "30", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "config", "[", "'tpu_iterations_per_loop'", "]", ",", "\n", "num_shards", "=", "config", "[", "'tpu_num_shards'", "]", ")", ")", "\n", "\n", "# This is a hack to allow PREDICT on a fixed batch on TPU. By replicating the", "\n", "# batch by the number of shards, this ensures each TPU core operates on the", "\n", "# entire fixed batch.", "\n", "if", "num_sample_images", "and", "config", "[", "'use_tpu'", "]", ":", "\n", "    ", "num_sample_images", "*=", "config", "[", "'tpu_num_shards'", "]", "\n", "\n", "", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "config", "[", "'use_tpu'", "]", ",", "\n", "model_fn", "=", "model_builder", ".", "build_model_fn", "(", "\n", "spec", ",", "config", ",", "num_train_images", ")", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "eval_batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "predict_batch_size", "=", "num_sample_images", ")", "\n", "\n", "return", "estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._evaluate": [[289, 297], ["estimator.evaluate"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas101bench.api.NASBench.evaluate"], ["", "def", "_evaluate", "(", "estimator", ",", "input_data", ",", "config", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Evaluate the estimator on the input data.\"\"\"", "\n", "steps", "=", "input_data", ".", "num_images", "//", "config", "[", "'batch_size'", "]", "\n", "results", "=", "estimator", ".", "evaluate", "(", "\n", "input_fn", "=", "input_data", ".", "input_fn", ",", "\n", "steps", "=", "steps", ",", "\n", "name", "=", "name", ")", "\n", "return", "results", "[", "'accuracy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._get_param_count": [[299, 311], ["tensorflow.reset_default_graph", "tensorflow.train.get_checkpoint_state", "tensorflow.Session", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "numpy.sum", "numpy.prod", "v.get_shape().as_list", "tensorflow.trainable_variables", "v.get_shape"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.saver.TemporaryHistorySaver.restore"], ["", "def", "_get_param_count", "(", "model_dir", ")", ":", "\n", "  ", "\"\"\"Get trainable param count from the model directory.\"\"\"", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "checkpoint", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "model_dir", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "\n", "checkpoint", ".", "model_checkpoint_path", "+", "'.meta'", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ".", "model_checkpoint_path", ")", "\n", "params", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingRunHook.__init__": [[133, 141], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_train_secs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes the instance.\n\n    Args:\n      max_train_secs: the maximum number of seconds to train for. If None,\n        training will not be limited by time.\n    \"\"\"", "\n", "self", ".", "_max_train_secs", "=", "max_train_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingRunHook.begin": [[142, 164], ["tensorflow.name_scope", "training_time._get_or_create_timing_vars", "training_time._seconds_to_internal_time", "tensorflow.cond", "_get_or_create_timing_vars.total_time.assign", "tensorflow.timestamp", "tensorflow.control_dependencies", "_get_or_create_timing_vars.steps.assign_add", "tensorflow.equal", "training_time._internal_time_to_seconds", "_get_or_create_timing_vars.start_timestamp.assign"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._get_or_create_timing_vars", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._seconds_to_internal_time", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._internal_time_to_seconds"], ["", "def", "begin", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "_SCOPE_NAME", ")", ":", "\n", "# See _get_or_create_timing_vars for the definitions of these variables.", "\n", "      ", "timing_vars", "=", "_get_or_create_timing_vars", "(", ")", "\n", "\n", "# An op to produce a tensor with the latest timestamp.", "\n", "self", ".", "_end_op", "=", "_seconds_to_internal_time", "(", "tf", ".", "timestamp", "(", "name", "=", "'end'", ")", ")", "\n", "\n", "# An op to update the timing_vars.start_timestamp variable.", "\n", "self", ".", "_start_op", "=", "tf", ".", "cond", "(", "\n", "pred", "=", "tf", ".", "equal", "(", "timing_vars", ".", "steps", ",", "0", ")", ",", "\n", "true_fn", "=", "lambda", ":", "timing_vars", ".", "start_timestamp", ".", "assign", "(", "self", ".", "_end_op", ")", ",", "\n", "false_fn", "=", "lambda", ":", "timing_vars", ".", "start_timestamp", ")", "\n", "\n", "# An op to update the step.", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "self", ".", "_start_op", "]", ")", ":", "\n", "        ", "self", ".", "_step_op", "=", "timing_vars", ".", "steps", ".", "assign_add", "(", "1", ")", "\n", "\n", "# An op to compute the timing_vars.total_time variable.", "\n", "", "self", ".", "_total_op", "=", "timing_vars", ".", "total_time", ".", "assign", "(", "\n", "timing_vars", ".", "previous_time", "+", "\n", "_internal_time_to_seconds", "(", "self", ".", "_end_op", "-", "self", ".", "_start_op", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingRunHook.before_run": [[165, 167], ["tensorflow.train.SessionRunArgs"], "methods", ["None"], ["", "", "def", "before_run", "(", "self", ",", "run_context", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "SessionRunArgs", "(", "[", "self", ".", "_total_op", ",", "self", ".", "_step_op", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingRunHook.after_run": [[168, 172], ["run_context.request_stop"], "methods", ["None"], ["", "def", "after_run", "(", "self", ",", "run_context", ",", "run_values", ")", ":", "\n", "    ", "total_time", ",", "_", "=", "run_values", ".", "results", "\n", "if", "self", ".", "_max_train_secs", "and", "total_time", ">", "self", ".", "_max_train_secs", ":", "\n", "      ", "run_context", ".", "request_stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingSaverListener.begin": [[177, 186], ["tensorflow.name_scope", "training_time._get_or_create_timing_vars", "_get_or_create_timing_vars.previous_time.assign", "_get_or_create_timing_vars.steps.assign"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._get_or_create_timing_vars"], ["def", "begin", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "_SCOPE_NAME", ")", ":", "\n", "      ", "timing_vars", "=", "_get_or_create_timing_vars", "(", ")", "\n", "\n", "# An op to update the timing_vars.previous_time variable.", "\n", "self", ".", "_prev_op", "=", "timing_vars", ".", "previous_time", ".", "assign", "(", "timing_vars", ".", "total_time", ")", "\n", "\n", "# Marks that timing_vars.start_timestamp should be reset in the next step.", "\n", "self", ".", "_reset_steps_op", "=", "timing_vars", ".", "steps", ".", "assign", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingSaverListener.before_save": [[187, 189], ["session.run"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run"], ["", "", "def", "before_save", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "    ", "session", ".", "run", "(", "self", ".", "_prev_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._TimingSaverListener.after_save": [[190, 192], ["session.run"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run"], ["", "def", "after_save", "(", "self", ",", "session", ",", "global_step_value", ")", ":", "\n", "    ", "session", ".", "run", "(", "self", ".", "_reset_steps_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._seconds_to_internal_time": [[46, 49], ["tensorflow.to_int64", "tensorflow.round"], "function", ["None"], ["def", "_seconds_to_internal_time", "(", "seconds", ")", ":", "\n", "  ", "\"\"\"Converts seconds to fixed-precision time.\"\"\"", "\n", "return", "tf", ".", "to_int64", "(", "tf", ".", "round", "(", "seconds", "*", "_INTERNAL_TIME_PRECISION", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._internal_time_to_seconds": [[51, 54], ["tensorflow.to_float"], "function", ["None"], ["", "def", "_internal_time_to_seconds", "(", "internal_time", ")", ":", "\n", "  ", "\"\"\"Converts fixed-precision time to seconds.\"\"\"", "\n", "return", "tf", ".", "to_float", "(", "internal_time", "/", "_INTERNAL_TIME_PRECISION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.limit": [[70, 87], ["training_time._TimingRunHook", "training_time._TimingSaverListener", "Timing"], "function", ["None"], ["def", "limit", "(", "max_train_secs", "=", "None", ")", ":", "\n", "  ", "\"\"\"Provides hooks and ops to measure/limit the training time of a model.\n\n  This is done by direct measurement of the time spent on training steps. It\n  excludes time spent saving checkpoints or due to pre-emptions.\n\n  Args:\n    max_train_secs: the desired training time limit. It is possible that this\n      may be exceeded by the time it takes to run 1 step. If None, training will\n      not be limited by time but timing variables will still be created.\n\n  Returns:\n    A Timing named tuple.\n  \"\"\"", "\n", "train_hook", "=", "_TimingRunHook", "(", "max_train_secs", ")", "\n", "saving_listener", "=", "_TimingSaverListener", "(", ")", "\n", "return", "Timing", "(", "train_hook", "=", "train_hook", ",", "saving_listener", "=", "saving_listener", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.get_total_time": [[89, 103], ["training_time._get_or_create_timing_vars"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._get_or_create_timing_vars"], ["", "def", "get_total_time", "(", ")", ":", "\n", "  ", "\"\"\"Returns the timing/total_time variable, regardless of current scope.\n\n  You may need to call force_create_timing_vars() first, or else there is a risk\n  that you may try to retrieve a variable that doesn't yet exist.\n\n  Returns:\n    A TF Variable.\n\n  Raises:\n    RuntimeError: if the variable has not been created yet.\n  \"\"\"", "\n", "timing_vars", "=", "_get_or_create_timing_vars", "(", ")", "\n", "return", "timing_vars", ".", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time._get_or_create_timing_vars": [[194, 234], ["tensorflow.get_variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "_TimingVars", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["None"], ["", "", "def", "_get_or_create_timing_vars", "(", ")", ":", "\n", "  ", "\"\"\"Creates variables used to measure training time.\n\n  Returns:\n    A _TimingVars named tuple.\n  \"\"\"", "\n", "# We always create the timing variables at root_scope / _SCOPE_NAME,", "\n", "# regardless of the scope from where this is called.", "\n", "root_scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "root_scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "_SCOPE_NAME", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "      ", "start_timestamp", "=", "tf", ".", "get_variable", "(", "\n", "_START_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "-", "1", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "steps", "=", "tf", ".", "get_variable", "(", "\n", "_STEPS_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "previous_time", "=", "tf", ".", "get_variable", "(", "\n", "_PREV_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "total_time", "=", "tf", ".", "get_variable", "(", "\n", "_TOTAL_VAR", ",", "\n", "shape", "=", "[", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "return", "_TimingVars", "(", "\n", "start_timestamp", "=", "start_timestamp", ",", "\n", "steps", "=", "steps", ",", "\n", "previous_time", "=", "previous_time", ",", "\n", "total_time", "=", "total_time", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.ModelSpec.__init__": [[34, 70], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model_spec.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "model_spec.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "\"\"\"Initialize the module spec.\n\n    Args:\n      matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n      ops: V-length list of labels for the base ops used. The first and last\n        elements are ignored because they are the input and output vertices\n        which have no operations. The elements are retained to keep consistent\n        indexing.\n      data_format: channels_last or channels_first.\n\n    Raises:\n      ValueError: invalid matrix or ops\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be square'", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'length of ops must match matrix dimensions'", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be upper triangular'", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.ModelSpec._prune": [[71, 121], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.Measure.difference", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.resources.node.Node.delete", "home.repos.pwc.inspect_result.snu-adsl_bbea.utils.measures.RankIntersectionMeasure.intersection", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "          ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "          ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "      ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.ModelSpec.hash_spec": [[122, 135], ["lookup.nas101bench.lib.graph_util.hash_module", "canonical_ops.index"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "canonical_ops", ")", ":", "\n", "    ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n\n    Args:\n      canonical_ops: list of operations in the canonical ordering which they\n        were assigned (i.e. the order provided in the config['available_ops']).\n\n    Returns:\n      MD5 hash of this spec which can be used to query the dataset.\n    \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "canonical_ops", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "graph_util", ".", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.ModelSpec.visualize": [[136, 152], ["graphviz.Digraph", "graphviz.Digraph.node", "range", "graphviz.Digraph.node", "range", "numpy.shape", "str", "graphviz.Digraph.node", "str", "range", "str", "graphviz.Digraph.edge", "str", "str"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.node", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.node", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.node"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "    ", "import", "graphviz", "\n", "\"\"\"Creates a dot graph. Can be visualized in colab directly.\"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "matrix", ")", "[", "0", "]", "\n", "g", "=", "graphviz", ".", "Digraph", "(", ")", "\n", "g", ".", "node", "(", "str", "(", "0", ")", ",", "'input'", ")", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "      ", "g", ".", "node", "(", "str", "(", "v", ")", ",", "self", ".", "ops", "[", "v", "]", ")", "\n", "", "g", ".", "node", "(", "str", "(", "num_vertices", "-", "1", ")", ",", "'output'", ")", "\n", "\n", "for", "src", "in", "range", "(", "num_vertices", "-", "1", ")", ":", "\n", "      ", "for", "dst", "in", "range", "(", "src", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "matrix", "[", "src", ",", "dst", "]", ":", "\n", "          ", "g", ".", "edge", "(", "str", "(", "src", ")", ",", "str", "(", "dst", ")", ")", "\n", "\n", "", "", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular": [[154, 162], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "    ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.build_model_fn": [[36, 241], ["range", "tensorflow.layers.dense", "ValueError", "tensorflow.variable_scope", "lookup.nas101bench.lib.base_ops.conv_bn_relu", "aux_activations.append", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.losses.softmax_cross_entropy", "tensorflow.trainable_variables", "all_params_names.append", "all_params_tensors.append", "tensorflow.gradients", "tf.argmax.update", "tf.argmax.update", "tf.argmax.update", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.train.get_or_create_global_step", "tensorflow.where", "tensorflow.train.RMSPropOptimizer", "tensorflow.get_collection", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.layers.max_pooling2d", "tensorflow.variable_scope", "range", "aux_activations.append", "tensorflow.reduce_mean", "ValueError", "tensorflow.add_n", "tensorflow.expand_dims", "all_params_names.append", "all_params_tensors.append", "zip", "tensorflow.sqrt", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "int", "tensorflow.equal", "tensorflow.contrib.tpu.CrossShardOptimizer", "tensorflow.control_dependencies", "tf.contrib.tpu.CrossShardOptimizer.minimize", "tensorflow.contrib.tpu.TPUEstimatorSpec", "build_module.get_shape", "tensorflow.one_hot", "tensorflow.norm", "tensorflow.trainable_variables", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.constant", "model_builder._covariance_matrix", "enumerate", "tensorflow.cast", "tensorflow.cast", "tensorflow.argmax", "tensorflow.metrics.accuracy", "tensorflow.variable_scope", "model_builder.build_module", "tensorflow.nn.l2_loss", "tensorflow.norm", "tensorflow.constant", "tensorflow.square", "tensorflow.cos", "lookup.nas101bench.lib.training_time.get_total_time", "tensorflow.train.piecewise_constant", "ValueError", "tensorflow.trainable_variables", "tensorflow.cos", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.log_utils.meter.RecorderMeter.update", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder._covariance_matrix", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.build_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.training_time.get_total_time"], ["def", "build_model_fn", "(", "spec", ",", "config", ",", "num_train_images", ")", ":", "\n", "  ", "\"\"\"Returns a model function for Estimator.\"\"\"", "\n", "if", "config", "[", "'data_format'", "]", "==", "'channels_last'", ":", "\n", "    ", "channel_axis", "=", "3", "\n", "", "elif", "config", "[", "'data_format'", "]", "==", "'channels_first'", ":", "\n", "# Currently this is not well supported", "\n", "    ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "\n", "    ", "\"\"\"Builds the model from the input features.\"\"\"", "\n", "del", "params", "# Unused", "\n", "is_training", "=", "(", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "# Store auxiliary activations increasing in depth of network. First", "\n", "# activation occurs immediately after the stem and the others immediately", "\n", "# follow each stack.", "\n", "aux_activations", "=", "[", "]", "\n", "\n", "# Initial stem convolution", "\n", "with", "tf", ".", "variable_scope", "(", "'stem'", ")", ":", "\n", "      ", "net", "=", "base_ops", ".", "conv_bn_relu", "(", "\n", "features", ",", "3", ",", "config", "[", "'stem_filter_size'", "]", ",", "\n", "is_training", ",", "config", "[", "'data_format'", "]", ")", "\n", "aux_activations", ".", "append", "(", "net", ")", "\n", "\n", "", "for", "stack_num", "in", "range", "(", "config", "[", "'num_stacks'", "]", ")", ":", "\n", "      ", "channels", "=", "net", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "\n", "\n", "# Downsample at start (except first)", "\n", "if", "stack_num", ">", "0", ":", "\n", "        ", "net", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "net", ",", "\n", "pool_size", "=", "(", "2", ",", "2", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "config", "[", "'data_format'", "]", ")", "\n", "\n", "# Double output channels each time we downsample", "\n", "channels", "*=", "2", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'stack{}'", ".", "format", "(", "stack_num", ")", ")", ":", "\n", "        ", "for", "module_num", "in", "range", "(", "config", "[", "'num_modules_per_stack'", "]", ")", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'module{}'", ".", "format", "(", "module_num", ")", ")", ":", "\n", "            ", "net", "=", "build_module", "(", "\n", "spec", ",", "\n", "inputs", "=", "net", ",", "\n", "channels", "=", "channels", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "", "aux_activations", ".", "append", "(", "net", ")", "\n", "\n", "# Global average pool", "\n", "", "", "if", "config", "[", "'data_format'", "]", "==", "'channels_last'", ":", "\n", "      ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ")", "\n", "", "elif", "config", "[", "'data_format'", "]", "==", "'channels_first'", ":", "\n", "      ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "2", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "# Fully-connected layer to labels", "\n", "", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", "=", "net", ",", "\n", "units", "=", "config", "[", "'num_labels'", "]", ")", "\n", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", "and", "not", "config", "[", "'use_tpu'", "]", ":", "\n", "# It is a known limitation of Estimator that the labels", "\n", "# are not passed during PREDICT mode when running on CPU/GPU", "\n", "# (https://github.com/tensorflow/tensorflow/issues/17824), thus we cannot", "\n", "# compute the loss or anything dependent on it (i.e., the gradients).", "\n", "      ", "loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "", "else", ":", "\n", "      ", "loss", "=", "tf", ".", "losses", ".", "softmax_cross_entropy", "(", "\n", "onehot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "config", "[", "'num_labels'", "]", ")", ",", "\n", "logits", "=", "logits", ")", "\n", "\n", "loss", "+=", "config", "[", "'weight_decay'", "]", "*", "tf", ".", "add_n", "(", "\n", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "\n", "# Use inference mode to compute some useful metrics on a fixed sample", "\n", "# Due to the batch being sharded on TPU, these metrics should be run on CPU", "\n", "# only to ensure that the metrics are computed on the whole batch. We add a", "\n", "# leading dimension because PREDICT expects batch-shaped tensors.", "\n", "", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "      ", "parameter_norms", "=", "{", "\n", "'param:'", "+", "tensor", ".", "name", ":", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "tensor", ",", "ord", "=", "2", ")", ",", "0", ")", "\n", "for", "tensor", "in", "tf", ".", "trainable_variables", "(", ")", "\n", "}", "\n", "\n", "# Compute gradients of all parameters and the input simultaneously", "\n", "all_params_names", "=", "[", "]", "\n", "all_params_tensors", "=", "[", "]", "\n", "for", "tensor", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "all_params_names", ".", "append", "(", "'param_grad_norm:'", "+", "tensor", ".", "name", ")", "\n", "all_params_tensors", ".", "append", "(", "tensor", ")", "\n", "", "all_params_names", ".", "append", "(", "'input_grad_norm'", ")", "\n", "all_params_tensors", ".", "append", "(", "features", ")", "\n", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "all_params_tensors", ")", "\n", "\n", "param_gradient_norms", "=", "{", "}", "\n", "for", "name", ",", "grad", "in", "zip", "(", "all_params_names", ",", "grads", ")", "[", ":", "-", "1", "]", ":", "\n", "        ", "if", "grad", "is", "not", "None", ":", "\n", "          ", "param_gradient_norms", "[", "name", "]", "=", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "grad", ",", "ord", "=", "2", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "          ", "param_gradient_norms", "[", "name", "]", "=", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "constant", "(", "0.0", ")", ",", "0", ")", ")", "\n", "\n", "", "", "if", "grads", "[", "-", "1", "]", "is", "not", "None", ":", "\n", "        ", "input_grad_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "grads", "[", "-", "1", "]", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "input_grad_norm", "=", "tf", ".", "expand_dims", "(", "tf", ".", "constant", "(", "0.0", ")", ",", "0", ")", "\n", "\n", "", "covariance_matrices", "=", "{", "\n", "'cov_matrix_%d'", "%", "i", ":", "\n", "tf", ".", "expand_dims", "(", "_covariance_matrix", "(", "aux", ")", ",", "0", ")", "\n", "for", "i", ",", "aux", "in", "enumerate", "(", "aux_activations", ")", "\n", "}", "\n", "\n", "predictions", "=", "{", "\n", "'logits'", ":", "logits", ",", "\n", "'loss'", ":", "tf", ".", "expand_dims", "(", "loss", ",", "0", ")", ",", "\n", "'input_grad_norm'", ":", "input_grad_norm", ",", "\n", "}", "\n", "predictions", ".", "update", "(", "parameter_norms", ")", "\n", "predictions", ".", "update", "(", "param_gradient_norms", ")", "\n", "predictions", ".", "update", "(", "covariance_matrices", ")", "\n", "\n", "return", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "mode", "=", "mode", ",", "predictions", "=", "predictions", ")", "\n", "\n", "", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "base_lr", "=", "config", "[", "'learning_rate'", "]", "\n", "if", "config", "[", "'use_tpu'", "]", ":", "\n", "        ", "base_lr", "*=", "config", "[", "'tpu_num_shards'", "]", "\n", "\n", "", "if", "config", "[", "'lr_decay_method'", "]", "==", "'COSINE_BY_STEP'", ":", "\n", "        ", "total_steps", "=", "int", "(", "config", "[", "'train_epochs'", "]", "*", "num_train_images", "/", "\n", "config", "[", "'batch_size'", "]", ")", "\n", "progress_fraction", "=", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "float32", ")", "/", "total_steps", "\n", "learning_rate", "=", "(", "0.5", "*", "base_lr", "*", "\n", "(", "1", "+", "tf", ".", "cos", "(", "np", ".", "pi", "*", "progress_fraction", ")", ")", ")", "\n", "\n", "", "elif", "config", "[", "'lr_decay_method'", "]", "==", "'COSINE_BY_TIME'", ":", "\n", "# Requires training_time.limit hooks to be added to Estimator", "\n", "        ", "elapsed_time", "=", "tf", ".", "cast", "(", "training_time", ".", "get_total_time", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "progress_fraction", "=", "elapsed_time", "/", "config", "[", "'train_seconds'", "]", "\n", "learning_rate", "=", "(", "0.5", "*", "base_lr", "*", "\n", "(", "1", "+", "tf", ".", "cos", "(", "np", ".", "pi", "*", "progress_fraction", ")", ")", ")", "\n", "\n", "", "elif", "config", "[", "'lr_decay_method'", "]", "==", "'STEPWISE'", ":", "\n", "# divide LR by 10 at 1/2, 2/3, and 5/6 of total epochs", "\n", "        ", "total_steps", "=", "(", "config", "[", "'train_epochs'", "]", "*", "num_train_images", "/", "\n", "config", "[", "'batch_size'", "]", ")", "\n", "boundaries", "=", "[", "int", "(", "0.5", "*", "total_steps", ")", ",", "\n", "int", "(", "0.667", "*", "total_steps", ")", ",", "\n", "int", "(", "0.833", "*", "total_steps", ")", "]", "\n", "values", "=", "[", "1.0", "*", "base_lr", ",", "\n", "0.1", "*", "base_lr", ",", "\n", "0.01", "*", "base_lr", ",", "\n", "0.0001", "*", "base_lr", "]", "\n", "learning_rate", "=", "tf", ".", "train", ".", "piecewise_constant", "(", "\n", "global_step", ",", "boundaries", ",", "values", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid lr_decay_method'", ")", "\n", "\n", "# Set LR to 0 for step 0 to initialize the weights without training", "\n", "", "learning_rate", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "global_step", ",", "0", ")", ",", "0.0", ",", "learning_rate", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "epsilon", "=", "1.0", ")", "\n", "if", "config", "[", "'use_tpu'", "]", ":", "\n", "        ", "optimizer", "=", "tf", ".", "contrib", ".", "tpu", ".", "CrossShardOptimizer", "(", "optimizer", ")", "\n", "\n", "# Update ops required for batch norm moving variables", "\n", "", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "        ", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", ")", "\n", "\n", "", "return", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "loss", ",", "\n", "train_op", "=", "train_op", ")", "\n", "\n", "", "elif", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "      ", "def", "metric_fn", "(", "labels", ",", "logits", ")", ":", "\n", "        ", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "labels", ",", "predictions", ")", "\n", "\n", "return", "{", "'accuracy'", ":", "accuracy", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "labels", ",", "logits", "]", ")", "\n", "\n", "return", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ")", "\n", "\n", "", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.build_module": [[243, 336], ["model_builder.compute_vertex_channels", "range", "tensorflow.identity", "numpy.shape", "tensorflow.identity", "tensors.append", "ValueError", "inputs.get_shape", "tensorflow.variable_scope", "op.build", "final_concat_in.append", "tensorflow.variable_scope", "model_builder.projection", "len", "tensorflow.concat", "model_builder.projection", "model_builder.truncate", "add_in.append", "len", "tensorflow.add_n", "range", "model_builder.projection"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.MaxPool3x3Conv1x1.build", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.projection", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.projection", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.truncate", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.projection"], ["", "def", "build_module", "(", "spec", ",", "inputs", ",", "channels", ",", "is_training", ")", ":", "\n", "  ", "\"\"\"Build a custom module using a proposed model spec.\n\n  Builds the model using the adjacency matrix and op labels specified. Channels\n  controls the module output channel count but the interior channels are\n  determined via equally splitting the channel count whenever there is a\n  concatenation of Tensors.\n\n  Args:\n    spec: ModelSpec object.\n    inputs: input Tensors to this module.\n    channels: output channel count.\n    is_training: bool for whether this model is training.\n\n  Returns:\n    output Tensor from built module.\n\n  Raises:\n    ValueError: invalid spec\n  \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "spec", ".", "matrix", ")", "[", "0", "]", "\n", "\n", "if", "spec", ".", "data_format", "==", "'channels_last'", ":", "\n", "    ", "channel_axis", "=", "3", "\n", "", "elif", "spec", ".", "data_format", "==", "'channels_first'", ":", "\n", "    ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "", "input_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "channel_axis", "]", ".", "value", "\n", "# vertex_channels[i] = number of output channels of vertex i", "\n", "vertex_channels", "=", "compute_vertex_channels", "(", "\n", "input_channels", ",", "channels", ",", "spec", ".", "matrix", ")", "\n", "\n", "# Construct tensors from input forward", "\n", "tensors", "=", "[", "tf", ".", "identity", "(", "inputs", ",", "name", "=", "'input'", ")", "]", "\n", "\n", "final_concat_in", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'vertex_{}'", ".", "format", "(", "t", ")", ")", ":", "\n", "# Create interior connections, truncating if necessary", "\n", "      ", "add_in", "=", "[", "truncate", "(", "tensors", "[", "src", "]", ",", "vertex_channels", "[", "t", "]", ",", "spec", ".", "data_format", ")", "\n", "for", "src", "in", "range", "(", "1", ",", "t", ")", "if", "spec", ".", "matrix", "[", "src", ",", "t", "]", "]", "\n", "\n", "# Create add connection from projected input", "\n", "if", "spec", ".", "matrix", "[", "0", ",", "t", "]", ":", "\n", "        ", "add_in", ".", "append", "(", "projection", "(", "\n", "tensors", "[", "0", "]", ",", "\n", "vertex_channels", "[", "t", "]", ",", "\n", "is_training", ",", "\n", "spec", ".", "data_format", ")", ")", "\n", "\n", "", "if", "len", "(", "add_in", ")", "==", "1", ":", "\n", "        ", "vertex_input", "=", "add_in", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "vertex_input", "=", "tf", ".", "add_n", "(", "add_in", ")", "\n", "\n", "# Perform op at vertex t", "\n", "", "op", "=", "base_ops", ".", "OP_MAP", "[", "spec", ".", "ops", "[", "t", "]", "]", "(", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "spec", ".", "data_format", ")", "\n", "vertex_value", "=", "op", ".", "build", "(", "vertex_input", ",", "vertex_channels", "[", "t", "]", ")", "\n", "\n", "", "tensors", ".", "append", "(", "vertex_value", ")", "\n", "if", "spec", ".", "matrix", "[", "t", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "final_concat_in", ".", "append", "(", "tensors", "[", "t", "]", ")", "\n", "\n", "# Construct final output tensor by concating all fan-in and adding input.", "\n", "", "", "if", "not", "final_concat_in", ":", "\n", "# No interior vertices, input directly connected to output", "\n", "    ", "assert", "spec", ".", "matrix", "[", "0", ",", "num_vertices", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'output'", ")", ":", "\n", "      ", "outputs", "=", "projection", "(", "\n", "tensors", "[", "0", "]", ",", "\n", "channels", ",", "\n", "is_training", ",", "\n", "spec", ".", "data_format", ")", "\n", "\n", "", "", "else", ":", "\n", "    ", "if", "len", "(", "final_concat_in", ")", "==", "1", ":", "\n", "      ", "outputs", "=", "final_concat_in", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "outputs", "=", "tf", ".", "concat", "(", "final_concat_in", ",", "channel_axis", ")", "\n", "\n", "", "if", "spec", ".", "matrix", "[", "0", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "outputs", "+=", "projection", "(", "\n", "tensors", "[", "0", "]", ",", "\n", "channels", ",", "\n", "is_training", ",", "\n", "spec", ".", "data_format", ")", "\n", "\n", "", "", "outputs", "=", "tf", ".", "identity", "(", "outputs", ",", "name", "=", "'output'", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.projection": [[338, 344], ["tensorflow.variable_scope", "lookup.nas101bench.lib.base_ops.conv_bn_relu"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu"], ["", "def", "projection", "(", "inputs", ",", "channels", ",", "is_training", ",", "data_format", ")", ":", "\n", "  ", "\"\"\"1x1 projection (as in ResNet) followed by batch normalization and ReLU.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'projection'", ")", ":", "\n", "    ", "net", "=", "base_ops", ".", "conv_bn_relu", "(", "inputs", ",", "1", ",", "channels", ",", "is_training", ",", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.truncate": [[346, 367], ["ValueError", "inputs.get_shape", "inputs.get_shape", "tensorflow.slice", "tensorflow.slice"], "function", ["None"], ["", "def", "truncate", "(", "inputs", ",", "channels", ",", "data_format", ")", ":", "\n", "  ", "\"\"\"Slice the inputs to channels if necessary.\"\"\"", "\n", "if", "data_format", "==", "'channels_last'", ":", "\n", "    ", "input_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "3", "]", ".", "value", "\n", "", "else", ":", "\n", "    ", "assert", "data_format", "==", "'channels_first'", "\n", "input_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "\n", "", "if", "input_channels", "<", "channels", ":", "\n", "    ", "raise", "ValueError", "(", "'input channel < output channels for truncate'", ")", "\n", "", "elif", "input_channels", "==", "channels", ":", "\n", "    ", "return", "inputs", "# No truncation necessary", "\n", "", "else", ":", "\n", "# Truncation should only be necessary when channel division leads to", "\n", "# vertices with +1 channels. The input vertex should always be projected to", "\n", "# the minimum channel count.", "\n", "    ", "assert", "input_channels", "-", "channels", "==", "1", "\n", "if", "data_format", "==", "'channels_last'", ":", "\n", "      ", "return", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "channels", "]", ")", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "channels", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels": [[369, 435], ["numpy.sum", "range", "range", "tensorflow.logging.info", "range", "numpy.shape", "str", "range", "range", "max"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "", "", "def", "compute_vertex_channels", "(", "input_channels", ",", "output_channels", ",", "matrix", ")", ":", "\n", "  ", "\"\"\"Computes the number of channels at every vertex.\n\n  Given the input channels and output channels, this calculates the number of\n  channels at each interior vertex. Interior vertices have the same number of\n  channels as the max of the channels of the vertices it feeds into. The output\n  channels are divided amongst the vertices that are directly connected to it.\n  When the division is not even, some vertices may receive an extra channel to\n  compensate.\n\n  Args:\n    input_channels: input channel count.\n    output_channels: output channel count.\n    matrix: adjacency matrix for the module (pruned by model_spec).\n\n  Returns:\n    list of channel counts, in order of the vertices.\n  \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "\n", "vertex_channels", "=", "[", "0", "]", "*", "num_vertices", "\n", "vertex_channels", "[", "0", "]", "=", "input_channels", "\n", "vertex_channels", "[", "num_vertices", "-", "1", "]", "=", "output_channels", "\n", "\n", "if", "num_vertices", "==", "2", ":", "\n", "# Edge case where module only has input and output vertices", "\n", "    ", "return", "vertex_channels", "\n", "\n", "# Compute the in-degree ignoring input, axis 0 is the src vertex and axis 1 is", "\n", "# the dst vertex. Summing over 0 gives the in-degree count of each vertex.", "\n", "", "in_degree", "=", "np", ".", "sum", "(", "matrix", "[", "1", ":", "]", ",", "axis", "=", "0", ")", "\n", "interior_channels", "=", "output_channels", "//", "in_degree", "[", "num_vertices", "-", "1", "]", "\n", "correction", "=", "output_channels", "%", "in_degree", "[", "num_vertices", "-", "1", "]", "# Remainder to add", "\n", "\n", "# Set channels of vertices that flow directly to output", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "    ", "if", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "vertex_channels", "[", "v", "]", "=", "interior_channels", "\n", "if", "correction", ":", "\n", "        ", "vertex_channels", "[", "v", "]", "+=", "1", "\n", "correction", "-=", "1", "\n", "\n", "# Set channels for all other vertices to the max of the out edges, going", "\n", "# backwards. (num_vertices - 2) index skipped because it only connects to", "\n", "# output.", "\n", "", "", "", "for", "v", "in", "range", "(", "num_vertices", "-", "3", ",", "0", ",", "-", "1", ")", ":", "\n", "    ", "if", "not", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "for", "dst", "in", "range", "(", "v", "+", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "        ", "if", "matrix", "[", "v", ",", "dst", "]", ":", "\n", "          ", "vertex_channels", "[", "v", "]", "=", "max", "(", "vertex_channels", "[", "v", "]", ",", "vertex_channels", "[", "dst", "]", ")", "\n", "", "", "", "assert", "vertex_channels", "[", "v", "]", ">", "0", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'vertex_channels: %s'", ",", "str", "(", "vertex_channels", ")", ")", "\n", "\n", "# Sanity check, verify that channels never increase and final channels add up.", "\n", "final_fan_in", "=", "0", "\n", "for", "v", "in", "range", "(", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "    ", "if", "matrix", "[", "v", ",", "num_vertices", "-", "1", "]", ":", "\n", "      ", "final_fan_in", "+=", "vertex_channels", "[", "v", "]", "\n", "", "for", "dst", "in", "range", "(", "v", "+", "1", ",", "num_vertices", "-", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "v", ",", "dst", "]", ":", "\n", "        ", "assert", "vertex_channels", "[", "v", "]", ">=", "vertex_channels", "[", "dst", "]", "\n", "", "", "", "assert", "final_fan_in", "==", "output_channels", "or", "num_vertices", "==", "2", "\n", "# num_vertices == 2 means only input/output nodes, so 0 fan-in", "\n", "\n", "return", "vertex_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder._covariance_matrix": [[437, 461], ["tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.transpose", "activations.get_shape", "tensorflow.cast", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.converter.OneHotVectorTransformer.cast"], ["", "def", "_covariance_matrix", "(", "activations", ")", ":", "\n", "  ", "\"\"\"Computes the unbiased covariance matrix of the samples within the batch.\n\n  Computes the sample covariance between the samples in the batch. Specifically,\n\n    C(i,j) = (x_i - mean(x_i)) dot (x_j - mean(x_j)) / (N - 1)\n\n  Matches the default behavior of np.cov().\n\n  Args:\n    activations: tensor activations with batch dimension first.\n\n  Returns:\n    [batch, batch] shape tensor for the covariance matrix.\n  \"\"\"", "\n", "batch_size", "=", "activations", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "flattened", "=", "tf", ".", "reshape", "(", "activations", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "means", "=", "tf", ".", "reduce_mean", "(", "flattened", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "centered", "=", "flattened", "-", "means", "\n", "squared", "=", "tf", ".", "matmul", "(", "centered", ",", "tf", ".", "transpose", "(", "centered", ")", ")", "\n", "cov", "=", "squared", "/", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "flattened", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", "-", "1", ")", "\n", "\n", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.BaseOp.__init__": [[67, 72], ["data_format.lower", "data_format.lower", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_training", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "self", ".", "is_training", "=", "is_training", "\n", "if", "data_format", ".", "lower", "(", ")", "not", "in", "VALID_DATA_FORMATS", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "", "self", ".", "data_format", "=", "data_format", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.BaseOp.build": [[73, 86], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "\"\"\"Builds the operation with input tensors and returns an output tensor.\n\n    Args:\n      inputs: a 4-D Tensor.\n      channels: int number of output channels of operation. The operation may\n        choose to ignore this parameter.\n\n    Returns:\n      a 4-D Tensor with the same data format.\n    \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.Identity.build": [[91, 94], ["tensorflow.identity"], "methods", ["None"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "del", "channels", "# Unused", "\n", "return", "tf", ".", "identity", "(", "inputs", ",", "name", "=", "'identity'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.Conv3x3BnRelu.build": [[99, 105], ["tensorflow.variable_scope", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Conv3x3-BN-ReLU'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "3", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.Conv1x1BnRelu.build": [[110, 116], ["tensorflow.variable_scope", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Conv1x1-BN-ReLU'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.MaxPool3x3.build": [[121, 132], ["tensorflow.variable_scope", "tensorflow.layers.max_pooling2d"], "methods", ["None"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "del", "channels", "# Unused", "\n", "with", "tf", ".", "variable_scope", "(", "'MaxPool3x3'", ")", ":", "\n", "      ", "net", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "inputs", ",", "\n", "pool_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.BottleneckConv3x3.build": [[138, 148], ["tensorflow.variable_scope", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'BottleneckConv3x3'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "1", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "3", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.BottleneckConv5x5.build": [[153, 163], ["tensorflow.variable_scope", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'BottleneckConv5x5'", ")", ":", "\n", "      ", "net", "=", "conv_bn_relu", "(", "\n", "inputs", ",", "1", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "5", ",", "channels", "//", "4", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "net", "=", "conv_bn_relu", "(", "\n", "net", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.MaxPool3x3Conv1x1.build": [[168, 180], ["tensorflow.variable_scope", "tensorflow.layers.max_pooling2d", "base_ops.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu"], ["def", "build", "(", "self", ",", "inputs", ",", "channels", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'MaxPool3x3-Conv1x1'", ")", ":", "\n", "      ", "net", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "inputs", ",", "\n", "pool_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "net", "=", "conv_bn_relu", "(", "net", ",", "1", ",", "channels", ",", "self", ".", "is_training", ",", "self", ".", "data_format", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.base_ops.conv_bn_relu": [[32, 61], ["tensorflow.layers.conv2d", "tensorflow.layers.batch_normalization", "tensorflow.nn.relu", "ValueError", "tensorflow.variance_scaling_initializer"], "function", ["None"], ["def", "conv_bn_relu", "(", "inputs", ",", "conv_size", ",", "conv_filters", ",", "is_training", ",", "data_format", ")", ":", "\n", "  ", "\"\"\"Convolution followed by batch norm and ReLU.\"\"\"", "\n", "if", "data_format", "==", "'channels_last'", ":", "\n", "    ", "axis", "=", "3", "\n", "", "elif", "data_format", "==", "'channels_first'", ":", "\n", "    ", "axis", "=", "1", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid data_format'", ")", "\n", "\n", "", "net", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "inputs", "=", "inputs", ",", "\n", "filters", "=", "conv_filters", ",", "\n", "kernel_size", "=", "conv_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "net", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "\n", "inputs", "=", "net", ",", "\n", "axis", "=", "axis", ",", "\n", "momentum", "=", "BN_MOMENTUM", ",", "\n", "epsilon", "=", "BN_EPSILON", ",", "\n", "training", "=", "is_training", ")", "\n", "\n", "net", "=", "tf", ".", "nn", ".", "relu", "(", "net", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn": [[26, 60], ["numpy.vectorize"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.vectorize"], ["def", "gen_is_edge_fn", "(", "bits", ")", ":", "\n", "  ", "\"\"\"Generate a boolean function for the edge connectivity.\n\n  Given a bitstring FEDCBA and a 4x4 matrix, the generated matrix is\n    [[0, A, B, D],\n     [0, 0, C, E],\n     [0, 0, 0, F],\n     [0, 0, 0, 0]]\n\n  Note that this function is agnostic to the actual matrix dimension due to\n  order in which elements are filled out (column-major, starting from least\n  significant bit). For example, the same FEDCBA bitstring (0-padded) on a 5x5\n  matrix is\n    [[0, A, B, D, 0],\n     [0, 0, C, E, 0],\n     [0, 0, 0, F, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]\n\n  Args:\n    bits: integer which will be interpreted as a bit mask.\n\n  Returns:\n    vectorized function that returns True when an edge is present.\n  \"\"\"", "\n", "def", "is_edge", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Is there an edge from x to y (0-indexed)?\"\"\"", "\n", "if", "x", ">=", "y", ":", "\n", "      ", "return", "0", "\n", "# Map x, y to index into bit string", "\n", "", "index", "=", "x", "+", "(", "y", "*", "(", "y", "-", "1", ")", "//", "2", ")", "\n", "return", "(", "bits", ">>", "index", ")", "%", "2", "==", "1", "\n", "\n", "", "return", "np", ".", "vectorize", "(", "is_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag": [[62, 88], ["numpy.shape", "numpy.all", "numpy.any", "numpy.all", "numpy.any"], "function", ["None"], ["", "def", "is_full_dag", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Full DAG == all vertices on a path from vert 0 to (V-1).\n\n  i.e. no disconnected or \"hanging\" vertices.\n\n  It is sufficient to check for:\n    1) no rows of 0 except for row V-1 (only output vertex has no out-edges)\n    2) no cols of 0 except for col 0 (only input vertex has no in-edges)\n\n  Args:\n    matrix: V x V upper-triangular adjacency matrix\n\n  Returns:\n    True if the there are no dangling vertices.\n  \"\"\"", "\n", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "\n", "rows", "=", "matrix", "[", ":", "shape", "[", "0", "]", "-", "1", ",", ":", "]", "==", "0", "\n", "rows", "=", "np", ".", "all", "(", "rows", ",", "axis", "=", "1", ")", "# Any row with all 0 will be True", "\n", "rows_bad", "=", "np", ".", "any", "(", "rows", ")", "\n", "\n", "cols", "=", "matrix", "[", ":", ",", "1", ":", "]", "==", "0", "\n", "cols", "=", "np", ".", "all", "(", "cols", ",", "axis", "=", "0", ")", "# Any col with all 0 will be True", "\n", "cols_bad", "=", "np", ".", "any", "(", "cols", ")", "\n", "\n", "return", "(", "not", "rows_bad", ")", "and", "(", "not", "cols_bad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.num_edges": [[90, 93], ["numpy.sum"], "function", ["None"], ["", "def", "num_edges", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"Computes number of edges in adjacency matrix.\"\"\"", "\n", "return", "np", ".", "sum", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module": [[95, 128], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode", "home.repos.pwc.inspect_result.snu-adsl_bbea.httplib2.iri2uri.encode"], ["", "def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "  ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n\n  Args:\n    matrix: np.ndarray square upper-triangular adjacency matrix.\n    labeling: list of int labels of length equal to both dimensions of\n      matrix.\n\n  Returns:\n    MD5 hash of the matrix and labeling.\n  \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "    ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "      ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.permute_graph": [[130, 150], ["zip", "numpy.fromfunction", "list", "numpy.vectorize", "range", "sorted", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.workers.surrogates.SurrogateEvaluator.vectorize"], ["", "def", "permute_graph", "(", "graph", ",", "label", ",", "permutation", ")", ":", "\n", "  ", "\"\"\"Permutes the graph and labels based on permutation.\n\n  Args:\n    graph: np.ndarray adjacency matrix.\n    label: list of labels of same length as graph dimensions.\n    permutation: a permutation list of ints of same length as graph dimensions.\n\n  Returns:\n    np.ndarray where vertex permutation[v] is vertex v from the original graph\n  \"\"\"", "\n", "# vertex permutation[v] in new graph is vertex v in the old graph", "\n", "forward_perm", "=", "zip", "(", "permutation", ",", "list", "(", "range", "(", "len", "(", "permutation", ")", ")", ")", ")", "\n", "inverse_perm", "=", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "forward_perm", ")", "]", "\n", "edge_fn", "=", "lambda", "x", ",", "y", ":", "graph", "[", "inverse_perm", "[", "x", "]", ",", "inverse_perm", "[", "y", "]", "]", "==", "1", "\n", "new_matrix", "=", "np", ".", "fromfunction", "(", "np", ".", "vectorize", "(", "edge_fn", ")", ",", "\n", "(", "len", "(", "label", ")", ",", "len", "(", "label", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "new_label", "=", "[", "label", "[", "inverse_perm", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", "]", "\n", "return", "new_matrix", ",", "new_label", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic": [[152, 168], ["itertools.permutations", "numpy.array", "numpy.array", "numpy.shape", "numpy.shape", "len", "len", "numpy.shape", "range", "graph_util.permute_graph", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.permute_graph"], ["", "def", "is_isomorphic", "(", "graph1", ",", "graph2", ")", ":", "\n", "  ", "\"\"\"Exhaustively checks if 2 graphs are isomorphic.\"\"\"", "\n", "matrix1", ",", "label1", "=", "np", ".", "array", "(", "graph1", "[", "0", "]", ")", ",", "graph1", "[", "1", "]", "\n", "matrix2", ",", "label2", "=", "np", ".", "array", "(", "graph2", "[", "0", "]", ")", ",", "graph2", "[", "1", "]", "\n", "assert", "np", ".", "shape", "(", "matrix1", ")", "==", "np", ".", "shape", "(", "matrix2", ")", "\n", "assert", "len", "(", "label1", ")", "==", "len", "(", "label2", ")", "\n", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix1", ")", "[", "0", "]", "\n", "# Note: input and output in our constrained graphs always map to themselves", "\n", "# but this script does not enforce that.", "\n", "for", "perm", "in", "itertools", ".", "permutations", "(", "range", "(", "0", ",", "vertices", ")", ")", ":", "\n", "    ", "pmatrix1", ",", "plabel1", "=", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "if", "np", ".", "array_equal", "(", "pmatrix1", ",", "matrix2", ")", "and", "plabel1", "==", "label2", ":", "\n", "      ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.download_and_extract": [[45, 51], ["tensorflow.contrib.learn.datasets.base.maybe_download", "tarfile.open().extractall", "tarfile.open", "os.path.join"], "function", ["None"], ["def", "download_and_extract", "(", "data_dir", ")", ":", "\n", "# download CIFAR-10 if not already downloaded.", "\n", "  ", "tf", ".", "contrib", ".", "learn", ".", "datasets", ".", "base", ".", "maybe_download", "(", "CIFAR_FILENAME", ",", "data_dir", ",", "\n", "CIFAR_DOWNLOAD_URL", ")", "\n", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "CIFAR_FILENAME", ")", ",", "\n", "'r:gz'", ")", ".", "extractall", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._int64_feature": [[53, 55], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._bytes_feature": [[57, 59], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._get_file_names": [[61, 69], ["range"], "function", ["None"], ["", "def", "_get_file_names", "(", ")", ":", "\n", "  ", "\"\"\"Returns the file names expected to exist in the input_dir.\"\"\"", "\n", "file_names", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "    ", "file_names", "[", "'train_%d'", "%", "i", "]", "=", "'data_batch_%d'", "%", "i", "\n", "", "file_names", "[", "'validation'", "]", "=", "'data_batch_5'", "\n", "file_names", "[", "'test'", "]", "=", "'test_batch'", "\n", "return", "file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.read_pickle_from_file": [[71, 78], ["tensorflow.gfile.Open", "six.moves.cPickle.load", "six.moves.cPickle.load"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["", "def", "read_pickle_from_file", "(", "filename", ")", ":", "\n", "  ", "with", "tf", ".", "gfile", ".", "Open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "      ", "data_dict", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "", "else", ":", "\n", "      ", "data_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.convert_to_tfrecord": [[80, 96], ["print", "tensorflow.python_io.TFRecordWriter", "generate_cifar10_tfrecords.read_pickle_from_file", "len", "print", "range", "tensorflow.train.Example", "record_writer.write", "tf.train.Example.SerializeToString", "tensorflow.train.Features", "generate_cifar10_tfrecords._bytes_feature", "generate_cifar10_tfrecords._int64_feature", "data[].tobytes"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.read_pickle_from_file", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._bytes_feature", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._int64_feature"], ["", "def", "convert_to_tfrecord", "(", "input_file", ",", "output_file", ")", ":", "\n", "  ", "\"\"\"Converts a file to TFRecords.\"\"\"", "\n", "print", "(", "'Generating %s'", "%", "output_file", ")", "\n", "with", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ")", "as", "record_writer", ":", "\n", "    ", "data_dict", "=", "read_pickle_from_file", "(", "input_file", ")", "\n", "data", "=", "data_dict", "[", "b'data'", "]", "\n", "labels", "=", "data_dict", "[", "b'labels'", "]", "\n", "num_entries_in_batch", "=", "len", "(", "labels", ")", "\n", "print", "(", "'Converting %d images'", "%", "num_entries_in_batch", ")", "\n", "for", "i", "in", "range", "(", "num_entries_in_batch", ")", ":", "\n", "      ", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "{", "\n", "'image'", ":", "_bytes_feature", "(", "data", "[", "i", "]", ".", "tobytes", "(", ")", ")", ",", "\n", "'label'", ":", "_int64_feature", "(", "labels", "[", "i", "]", ")", "\n", "}", ")", ")", "\n", "record_writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.main": [[98, 142], ["print", "generate_cifar10_tfrecords.download_and_extract", "generate_cifar10_tfrecords._get_file_names", "os.path.join", "_get_file_names.items", "os.path.join", "generate_cifar10_tfrecords.read_pickle_from_file", "range", "os.path.join", "print", "print", "os.path.join", "os.path.join", "generate_cifar10_tfrecords.convert_to_tfrecord", "len", "tensorflow.python_io.TFRecordWriter", "os.remove", "range", "len", "images[].append", "tensorflow.train.Example", "record_writer.write", "example.SerializeToString", "tensorflow.train.Features", "generate_cifar10_tfrecords._bytes_feature", "generate_cifar10_tfrecords._int64_feature", "data[].tobytes"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.download_and_extract", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._get_file_names", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.read_pickle_from_file", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords.convert_to_tfrecord", "home.repos.pwc.inspect_result.snu-adsl_bbea.active.control.CandidateSetController.remove", "home.repos.pwc.inspect_result.snu-adsl_bbea.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._bytes_feature", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_cifar10_tfrecords._int64_feature"], ["", "", "", "def", "main", "(", "data_dir", ")", ":", "\n", "  ", "print", "(", "'Download from {} and extract.'", ".", "format", "(", "CIFAR_DOWNLOAD_URL", ")", ")", "\n", "download_and_extract", "(", "data_dir", ")", "\n", "file_names", "=", "_get_file_names", "(", ")", "\n", "input_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "CIFAR_LOCAL_FOLDER", ")", "\n", "for", "mode", ",", "f", "in", "file_names", ".", "items", "(", ")", ":", "\n", "    ", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "f", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "mode", "+", "'.tfrecords'", ")", "\n", "try", ":", "\n", "      ", "os", ".", "remove", "(", "output_file", ")", "\n", "", "except", "OSError", ":", "\n", "      ", "pass", "\n", "# Convert to tf.train.Example and write the to TFRecords.", "\n", "", "convert_to_tfrecord", "(", "input_file", ",", "output_file", ")", "\n", "\n", "# Save fixed batch of 100 examples (first 10 of each class sampled at the", "\n", "# front of the validation set). Ordered by label, i.e. 10 \"airplane\" images", "\n", "# followed by 10 \"automobile\" images...", "\n", "", "images", "=", "[", "[", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "num_images", "=", "0", "\n", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file_names", "[", "'validation'", "]", ")", "\n", "data_dict", "=", "read_pickle_from_file", "(", "input_file", ")", "\n", "data", "=", "data_dict", "[", "b'data'", "]", "\n", "labels", "=", "data_dict", "[", "b'labels'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "    ", "label", "=", "labels", "[", "i", "]", "\n", "if", "len", "(", "images", "[", "label", "]", ")", "<", "10", ":", "\n", "      ", "images", "[", "label", "]", ".", "append", "(", "\n", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "{", "\n", "'image'", ":", "_bytes_feature", "(", "data", "[", "i", "]", ".", "tobytes", "(", ")", ")", ",", "\n", "'label'", ":", "_int64_feature", "(", "label", ")", "\n", "}", ")", ")", ")", "\n", "num_images", "+=", "1", "\n", "if", "num_images", "==", "100", ":", "\n", "        ", "break", "\n", "\n", "", "", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'sample.tfrecords'", ")", "\n", "print", "(", "'Generating %s'", "%", "output_file", ")", "\n", "with", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ")", "as", "record_writer", ":", "\n", "    ", "for", "label_images", "in", "images", ":", "\n", "      ", "for", "example", "in", "label_images", ":", "\n", "        ", "record_writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.augment_model.create_resnet20_spec": [[31, 54], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array"], "function", ["None"], ["def", "create_resnet20_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct a ResNet-20-like spec.\n\n  The main difference is that there is an extra projection layer before the\n  conv3x3 whereas the original ResNet doesn't have this. This increases the\n  parameter count of this version slightly.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'conv3x3-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "3", "\n", "config", "[", "'stem_filter_size'", "]", "=", "16", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.augment_model.create_resnet50_spec": [[56, 78], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array"], "function", ["None"], ["", "def", "create_resnet50_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct a ResNet-50-like spec.\n\n  The main difference is that there is an extra projection layer before the\n  conv1x1 whereas the original ResNet doesn't have this. This increases the\n  parameter count of this version slightly.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'bottleneck3x3'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "6", "\n", "config", "[", "'stem_filter_size'", "]", "=", "128", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.augment_model.create_inception_resnet_spec": [[80, 108], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array"], "function", ["None"], ["", "def", "create_inception_resnet_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct an Inception-ResNet like spec.\n\n  This spec is very similar to the InceptionV2 module with an added\n  residual connection except that there is an extra projection in front of the\n  max pool. The overall network filter counts and module counts do not match\n  the actual source model.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "\n", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "3", "\n", "config", "[", "'stem_filter_size'", "]", "=", "128", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.augment_model.create_best_nasbench_spec": [[110, 133], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array", "lookup.nas101bench.lib.config"], "function", ["None"], ["", "def", "create_best_nasbench_spec", "(", "config", ")", ":", "\n", "  ", "\"\"\"Construct the best spec in the NASBench dataset w.r.t. mean test accuracy.\n\n  Args:\n    config: config dict created by config.py.\n\n  Returns:\n    ModelSpec object.\n  \"\"\"", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "'input'", ",", "'conv1x1-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'maxpool3x3'", ",", "\n", "'conv3x3-bn-relu'", ",", "'conv3x3-bn-relu'", ",", "'output'", "]", ")", "\n", "config", "[", "'num_stacks'", "]", "=", "3", "\n", "config", "[", "'num_modules_per_stack'", "]", "=", "3", "\n", "config", "[", "'stem_filter_size'", "]", "=", "128", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.augment_model.main": [[135, 148], ["lookup.nas101bench.lib.config.build_config", "augment_model.create_best_nasbench_spec", "lookup.nas101bench.lib.evaluate.augment_and_evaluate", "tensorflow.logging.info"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.config.build_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.augment_model.create_best_nasbench_spec", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate.augment_and_evaluate", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "config", "=", "_config", ".", "build_config", "(", ")", "\n", "\n", "# The default settings in config are exactly what was used to generate the", "\n", "# dataset of models. However, given more epochs and a different learning rate", "\n", "# schedule, it is possible to get higher accuracy.", "\n", "config", "[", "'train_epochs'", "]", "=", "200", "\n", "config", "[", "'lr_decay_method'", "]", "=", "'STEPWISE'", "\n", "config", "[", "'train_seconds'", "]", "=", "-", "1", "# Disable training time limit", "\n", "spec", "=", "create_best_nasbench_spec", "(", "config", ")", "\n", "\n", "data", "=", "evaluate", ".", "augment_and_evaluate", "(", "spec", ",", "config", ",", "FLAGS", ".", "model_dir", ")", "\n", "tf", ".", "logging", ".", "info", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.NumpyEncoder.default": [[89, 97], ["isinstance", "json.JSONEncoder.default", "obj.tolist", "isinstance", "numpy.asscalar"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.NumpyEncoder.default", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "# Matrices converted to nested lists", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "generic", ")", ":", "\n", "# Scalars converted to closest Python type", "\n", "      ", "return", "np", ".", "asscalar", "(", "obj", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.__init__": [[102, 147], ["lookup.nas101bench.lib.config.build_config", "os.path.join", "tensorflow.gfile.MakeDirs", "os.path.join", "tensorflow.gfile.Exists", "tensorflow.gfile.Open", "json.load", "sorted", "len", "re.compile", "sorted", "len", "str", "tensorflow.gfile.Open", "json.load", "tensorflow.gfile.Open", "int", "tensorflow.gfile.Open", "f.write", "run_evaluation.Evaluator.models.keys", "re.compile.match", "f.read", "str"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.config.build_config", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load", "home.repos.pwc.inspect_result.snu-adsl_bbea.spaces.config_space.ConfigurationSpace.load"], ["def", "__init__", "(", "self", ",", "\n", "models_file", ",", "\n", "output_dir", ",", "\n", "worker_id", "=", "0", ",", "\n", "total_workers", "=", "1", ",", "\n", "model_id_regex", "=", "'^'", ")", ":", "\n", "    ", "self", ".", "config", "=", "_config", ".", "build_config", "(", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "models_file", ")", "as", "f", ":", "\n", "      ", "self", ".", "models", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "remainders", "=", "None", "\n", "self", ".", "ordered_keys", "=", "None", "\n", "\n", "if", "FLAGS", ".", "remainders_file", ":", "\n", "# Run only the modules and repeat numbers specified", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "FLAGS", ".", "remainders_file", ")", "as", "f", ":", "\n", "        ", "self", ".", "remainders", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "remainders", "=", "sorted", "(", "self", ".", "remainders", ")", "\n", "self", ".", "num_models", "=", "len", "(", "self", ".", "remainders", ")", "\n", "self", ".", "total_work_units", "=", "self", ".", "num_models", "\n", "", "else", ":", "\n", "# Filter keys to only those that fit the regex and order them so all", "\n", "# workers see a canonical ordering.", "\n", "      ", "regex", "=", "re", ".", "compile", "(", "model_id_regex", ")", "\n", "evaluated_keys", "=", "[", "key", "for", "key", "in", "self", ".", "models", ".", "keys", "(", ")", "if", "regex", ".", "match", "(", "key", ")", "]", "\n", "self", ".", "ordered_keys", "=", "sorted", "(", "evaluated_keys", ")", "\n", "self", ".", "num_models", "=", "len", "(", "self", ".", "ordered_keys", ")", "\n", "self", ".", "total_work_units", "=", "self", ".", "num_models", "*", "self", ".", "config", "[", "'num_repeats'", "]", "\n", "\n", "", "self", ".", "total_workers", "=", "total_workers", "\n", "\n", "# If the worker is recovering from a restart, figure out where to restart", "\n", "worker_recovery_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'_recovery'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "worker_recovery_dir", ")", "# Silently succeeds if exists", "\n", "self", ".", "recovery_file", "=", "os", ".", "path", ".", "join", "(", "worker_recovery_dir", ",", "str", "(", "worker_id", ")", ")", "\n", "if", "tf", ".", "gfile", ".", "Exists", "(", "self", ".", "recovery_file", ")", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "recovery_file", ")", "as", "f", ":", "\n", "        ", "self", ".", "current_index", "=", "int", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "current_index", "=", "worker_id", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "recovery_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "self", ".", "current_index", ")", ")", "\n", "\n", "", "", "assert", "self", ".", "current_index", "%", "self", ".", "total_workers", "==", "worker_id", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation": [[148, 157], ["run_evaluation.Evaluator._evaluate_work_unit", "tensorflow.gfile.Open", "f.write", "str"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator._evaluate_work_unit"], ["", "def", "run_evaluation", "(", "self", ")", ":", "\n", "    ", "\"\"\"Runs the worker evaluation loop.\"\"\"", "\n", "while", "self", ".", "current_index", "<", "self", ".", "total_work_units", ":", "\n", "# Perform the expensive evaluation of the model at the current index", "\n", "      ", "self", ".", "_evaluate_work_unit", "(", "self", ".", "current_index", ")", "\n", "\n", "self", ".", "current_index", "+=", "self", ".", "total_workers", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "recovery_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "self", ".", "current_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator._evaluate_work_unit": [[158, 206], ["numpy.array", "lookup.nas101bench.lib.model_spec.ModelSpec", "os.path.join", "os.path.join", "run_evaluation.Evaluator._clean_model_dir", "numpy.sum", "lookup.nas101bench.lib.evaluate.train_and_evaluate", "tensorflow.gfile.Open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator._clean_model_dir", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate.train_and_evaluate"], ["", "", "", "def", "_evaluate_work_unit", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"Runs the evaluation of the model at the specified index.\n\n    The index records the current index of the work unit being evaluated. Each\n    worker will only compute the work units with index modulo total_workers\n    equal to the worker_id.\n\n    Args:\n      index: int index into total work units.\n    \"\"\"", "\n", "if", "self", ".", "remainders", ":", "\n", "      ", "assert", "self", ".", "ordered_keys", "is", "None", "\n", "model_id", "=", "self", ".", "remainders", "[", "index", "]", "[", "0", "]", "\n", "model_repeat", "=", "self", ".", "remainders", "[", "index", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "model_id", "=", "self", ".", "ordered_keys", "[", "index", "%", "self", ".", "num_models", "]", "\n", "model_repeat", "=", "index", "//", "self", ".", "num_models", "+", "1", "\n", "\n", "", "matrix", ",", "labels", "=", "self", ".", "models", "[", "model_id", "]", "\n", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "\n", "# Re-label to config['available_ops']", "\n", "labels", "=", "(", "[", "'input'", "]", "+", "\n", "[", "self", ".", "config", "[", "'available_ops'", "]", "[", "lab", "]", "for", "lab", "in", "labels", "[", "1", ":", "-", "1", "]", "]", "+", "\n", "[", "'output'", "]", ")", "\n", "spec", "=", "model_spec", ".", "ModelSpec", "(", "matrix", ",", "labels", ")", "\n", "assert", "spec", ".", "valid_spec", "\n", "assert", "np", ".", "sum", "(", "spec", ".", "matrix", ")", "<=", "self", ".", "config", "[", "'max_edges'", "]", "\n", "\n", "# Split the directory into 16^2 roughly equal subdirectories", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "model_id", "[", ":", "2", "]", ",", "\n", "model_id", ",", "\n", "'repeat_%d'", "%", "model_repeat", ")", "\n", "try", ":", "\n", "      ", "meta", "=", "evaluate", ".", "train_and_evaluate", "(", "spec", ",", "self", ".", "config", ",", "model_dir", ")", "\n", "", "except", "evaluate", ".", "AbortError", ":", "\n", "# After hitting the retry limit, the job will continue to the next work", "\n", "# unit. These failed jobs may need to be re-run at a later point.", "\n", "      ", "return", "\n", "\n", "# Write data to model_dir", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "RESULTS_FILE", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "meta", ",", "f", ",", "cls", "=", "NumpyEncoder", ")", "\n", "\n", "# Delete some files to reclaim space", "\n", "", "self", ".", "_clean_model_dir", "(", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator._clean_model_dir": [[207, 225], ["tensorflow.gfile.ListDirectory", "set", "os.path.join", "tensorflow.gfile.IsDirectory", "filename.startswith", "set.add", "tensorflow.gfile.DeleteRecursively", "tensorflow.gfile.Remove", "filename.startswith"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.managers.t_mgr.TrainingJobManager.add"], ["", "def", "_clean_model_dir", "(", "self", ",", "model_dir", ")", ":", "\n", "    ", "\"\"\"Cleans the output model directory to reclaim disk space.\"\"\"", "\n", "saved_prefixes", "=", "[", "CHECKPOINT_PREFIX", ",", "RESULTS_FILE", "]", "\n", "all_files", "=", "tf", ".", "gfile", ".", "ListDirectory", "(", "model_dir", ")", "\n", "files_to_keep", "=", "set", "(", ")", "\n", "for", "filename", "in", "all_files", ":", "\n", "      ", "for", "prefix", "in", "saved_prefixes", ":", "\n", "        ", "if", "(", "filename", ".", "startswith", "(", "prefix", ")", "and", "\n", "not", "filename", ".", "startswith", "(", "CHECKPOINT_1_PREFIX", ")", ")", ":", "\n", "          ", "files_to_keep", ".", "add", "(", "filename", ")", "\n", "\n", "", "", "", "for", "filename", "in", "all_files", ":", "\n", "      ", "if", "filename", "not", "in", "files_to_keep", ":", "\n", "        ", "full_filename", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "tf", ".", "gfile", ".", "IsDirectory", "(", "full_filename", ")", ":", "\n", "          ", "tf", ".", "gfile", ".", "DeleteRecursively", "(", "full_filename", ")", "\n", "", "else", ":", "\n", "          ", "tf", ".", "gfile", ".", "Remove", "(", "full_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.main": [[227, 237], ["run_evaluation.Evaluator", "Evaluator.run_evaluation"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "  ", "del", "args", "# Unused", "\n", "worker_id", "=", "FLAGS", ".", "worker_id", "+", "FLAGS", ".", "worker_id_offset", "\n", "evaluator", "=", "Evaluator", "(", "\n", "models_file", "=", "FLAGS", ".", "models_file", ",", "\n", "output_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "worker_id", "=", "worker_id", ",", "\n", "total_workers", "=", "FLAGS", ".", "total_workers", ",", "\n", "model_id_regex", "=", "FLAGS", ".", "model_id_regex", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.generate_graphs.main": [[90, 137], ["absl.logging.info", "range", "range", "absl.logging.info", "tensorflow.gfile.Open", "json.dump", "numpy.fromfunction", "itertools.product", "len", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.num_edges", "range", "list", "np.fromfunction.tolist", "range", "lookup.nas101bench.lib.graph_util.is_isomorphic", "absl.logging.fatal", "sys.exit", "str", "str", "str", "str", "np.fromfunction.tolist"], "function", ["home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.commons.logger.info", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.num_edges", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.xoa.apis.exit", "home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist"], ["def", "main", "(", "_", ")", ":", "\n", "  ", "total_graphs", "=", "0", "# Total number of graphs (including isomorphisms)", "\n", "# hash --> (matrix, label) for the canonical graph associated with each hash", "\n", "buckets", "=", "{", "}", "\n", "\n", "logging", ".", "info", "(", "'Using %d vertices, %d op labels, max %d edges'", ",", "\n", "FLAGS", ".", "max_vertices", ",", "FLAGS", ".", "num_ops", ",", "FLAGS", ".", "max_edges", ")", "\n", "for", "vertices", "in", "range", "(", "2", ",", "FLAGS", ".", "max_vertices", "+", "1", ")", ":", "\n", "    ", "for", "bits", "in", "range", "(", "2", "**", "(", "vertices", "*", "(", "vertices", "-", "1", ")", "//", "2", ")", ")", ":", "\n", "# Construct adj matrix from bit string", "\n", "      ", "matrix", "=", "np", ".", "fromfunction", "(", "graph_util", ".", "gen_is_edge_fn", "(", "bits", ")", ",", "\n", "(", "vertices", ",", "vertices", ")", ",", "\n", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "# Discard any graphs which can be pruned or exceed constraints", "\n", "if", "(", "not", "graph_util", ".", "is_full_dag", "(", "matrix", ")", "or", "\n", "graph_util", ".", "num_edges", "(", "matrix", ")", ">", "FLAGS", ".", "max_edges", ")", ":", "\n", "        ", "continue", "\n", "\n", "# Iterate through all possible labelings", "\n", "", "for", "labeling", "in", "itertools", ".", "product", "(", "*", "[", "range", "(", "FLAGS", ".", "num_ops", ")", "\n", "for", "_", "in", "range", "(", "vertices", "-", "2", ")", "]", ")", ":", "\n", "        ", "total_graphs", "+=", "1", "\n", "labeling", "=", "[", "-", "1", "]", "+", "list", "(", "labeling", ")", "+", "[", "-", "2", "]", "\n", "fingerprint", "=", "graph_util", ".", "hash_module", "(", "matrix", ",", "labeling", ")", "\n", "\n", "if", "fingerprint", "not", "in", "buckets", ":", "\n", "          ", "buckets", "[", "fingerprint", "]", "=", "(", "matrix", ".", "tolist", "(", ")", ",", "labeling", ")", "\n", "\n", "# This catches the \"false positive\" case of two models which are not", "\n", "# isomorphic hashing to the same bucket.", "\n", "", "elif", "FLAGS", ".", "verify_isomorphism", ":", "\n", "          ", "canonical_graph", "=", "buckets", "[", "fingerprint", "]", "\n", "if", "not", "graph_util", ".", "is_isomorphic", "(", "\n", "(", "matrix", ".", "tolist", "(", ")", ",", "labeling", ")", ",", "canonical_graph", ")", ":", "\n", "            ", "logging", ".", "fatal", "(", "'Matrix:\\n%s\\nLabel: %s\\nis not isomorphic to'", "\n", "' canonical matrix:\\n%s\\nLabel: %s'", ",", "\n", "str", "(", "matrix", ")", ",", "str", "(", "labeling", ")", ",", "\n", "str", "(", "canonical_graph", "[", "0", "]", ")", ",", "\n", "str", "(", "canonical_graph", "[", "1", "]", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "", "", "logging", ".", "info", "(", "'Up to %d vertices: %d graphs (%d without hashing)'", ",", "\n", "vertices", ",", "len", "(", "buckets", ")", ",", "total_graphs", ")", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "Open", "(", "FLAGS", ".", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "buckets", ",", "f", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_gen_is_edge": [[29, 82], ["lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.gen_is_edge_fn", "numpy.fromfunction", "graph_util_test.GraphUtilTest.assertTrue", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.gen_is_edge_fn"], ["  ", "def", "test_gen_is_edge", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests gen_is_edge generates correct graphs.\"\"\"", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "0", ")", "# '000'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "3", ")", "# '011'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "5", ")", "# '101'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "7", ")", "# '111'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "7", ")", "# '111'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "18", ")", "# '010010'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "fn", "=", "graph_util", ".", "gen_is_edge_fn", "(", "35", ")", "# '100011'", "\n", "arr", "=", "np", ".", "fromfunction", "(", "fn", ",", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "arr", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_is_full_dag": [[83, 134], ["graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "graph_util_test.GraphUtilTest.assertFalse", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "lookup.nas101bench.lib.graph_util.is_full_dag", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_full_dag"], ["", "def", "test_is_full_dag", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests is_full_dag classifies DAGs.\"\"\"", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# vertex 1 not connected to input", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# vertex 1 not connected to output", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# 1, 3 are connected to each other but disconnected from main path", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# no path from input to output", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n", "# completely disconnected vertex", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_full_dag", "(", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_hash_module": [[135, 263], ["numpy.array", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertEqual", "numpy.array", "numpy.array", "numpy.array", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertEqual", "graph_util_test.GraphUtilTest.assertEqual", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "numpy.array", "numpy.array", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertNotEqual", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module"], ["", "def", "test_hash_module", "(", "self", ")", ":", "\n", "# Diamond graph with label permutation", "\n", "    ", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "-", "2", "]", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "1", ",", "-", "2", "]", "\n", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label1", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label2", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Simple graph with edge permutation", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "3", ",", "-", "2", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "3", ",", "1", ",", "-", "2", "]", "\n", "\n", "matrix3", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label3", "=", "[", "-", "1", ",", "2", ",", "1", ",", "3", ",", "-", "2", "]", "\n", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label1", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "matrix2", ",", "label2", ")", "\n", "hash3", "=", "graph_util", ".", "hash_module", "(", "matrix3", ",", "label3", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "self", ".", "assertEqual", "(", "hash2", ",", "hash3", ")", "\n", "\n", "hash4", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label2", ")", "\n", "self", ".", "assertNotEqual", "(", "hash4", ",", "hash1", ")", "\n", "\n", "hash5", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label3", ")", "\n", "self", ".", "assertNotEqual", "(", "hash5", ",", "hash1", ")", "\n", "\n", "# Connected non-isomorphic regular graphs on 6 interior vertices (8 total)", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "-", "2", "]", "\n", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix1", ",", "label1", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "matrix2", ",", "label1", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Non-isomorphic tricky case (breaks if you don't include self)", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "1", ",", "0", ",", "0", ",", "-", "2", "]", ")", "\n", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "1", ",", "-", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Non-isomorphic tricky case (breaks if you don't use directed edges)", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "1", ",", "0", ",", "-", "2", "]", ")", "\n", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "0", ",", "1", ",", "-", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n", "# Non-isomorphic tricky case (breaks if you only use out-neighbors and self)", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "2", "]", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "-", "2", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_permute_graph": [[264, 284], ["numpy.array", "lookup.nas101bench.lib.graph_util.permute_graph", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertEqual", "lookup.nas101bench.lib.graph_util.permute_graph", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertEqual", "numpy.array_equal", "numpy.array_equal", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.permute_graph", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.permute_graph"], ["", "def", "test_permute_graph", "(", "self", ")", ":", "\n", "# Does not have to be DAG", "\n", "    ", "matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "1", "]", "]", ")", "\n", "labels", "=", "[", "'a'", ",", "'b'", ",", "'c'", "]", "\n", "\n", "p1", ",", "l1", "=", "graph_util", ".", "permute_graph", "(", "matrix", ",", "labels", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "p1", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "assertEqual", "(", "l1", ",", "[", "'b'", ",", "'c'", ",", "'a'", "]", ")", "\n", "\n", "p1", ",", "l1", "=", "graph_util", ".", "permute_graph", "(", "matrix", ",", "labels", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "p1", ",", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", "]", ")", ")", ")", "\n", "self", ".", "assertEqual", "(", "l1", ",", "[", "'a'", ",", "'c'", ",", "'b'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_is_isomorphic": [[285, 389], ["numpy.array", "graph_util_test.GraphUtilTest.assertTrue", "numpy.array", "numpy.array", "numpy.array", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertFalse", "numpy.array", "numpy.array", "graph_util_test.GraphUtilTest.assertFalse", "numpy.array", "numpy.array", "lookup.nas101bench.lib.graph_util.permute_graph", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertEqual", "graph_util_test.GraphUtilTest.assertTrue", "graph_util_test.GraphUtilTest.assertTrue", "lookup.nas101bench.lib.graph_util.is_isomorphic", "lookup.nas101bench.lib.graph_util.is_isomorphic", "lookup.nas101bench.lib.graph_util.is_isomorphic", "lookup.nas101bench.lib.graph_util.is_isomorphic", "lookup.nas101bench.lib.graph_util.is_isomorphic", "numpy.array_equal", "lookup.nas101bench.lib.graph_util.is_isomorphic", "lookup.nas101bench.lib.graph_util.is_isomorphic"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.permute_graph", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.is_isomorphic"], ["", "def", "test_is_isomorphic", "(", "self", ")", ":", "\n", "# Reuse some tests from hash_module", "\n", "    ", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "-", "2", "]", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "1", ",", "-", "2", "]", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix1", ",", "label2", ")", ")", ")", "\n", "\n", "# Simple graph with edge permutation", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "2", ",", "3", ",", "-", "2", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label2", "=", "[", "-", "1", ",", "2", ",", "3", ",", "1", ",", "-", "2", "]", "\n", "\n", "matrix3", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label3", "=", "[", "-", "1", ",", "2", ",", "1", ",", "3", ",", "-", "2", "]", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label2", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix3", ",", "label3", ")", ")", ")", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label1", ")", ")", ")", "\n", "\n", "# Connected non-isomorphic regular graphs on 6 interior vertices (8 total)", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "-", "2", "]", "\n", "\n", "self", ".", "assertFalse", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label1", ")", ")", ")", "\n", "\n", "# Connected isomorphic regular graphs on 8 total vertices (bipartite)", "\n", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", "]", "]", ")", "\n", "label1", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "\n", "# Sanity check: manual permutation", "\n", "perm", "=", "[", "0", ",", "5", ",", "7", ",", "2", ",", "4", ",", "1", ",", "3", ",", "6", "]", "\n", "pm1", ",", "pl1", "=", "graph_util", ".", "permute_graph", "(", "matrix1", ",", "label1", ",", "perm", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array_equal", "(", "matrix2", ",", "pm1", ")", ")", "\n", "self", ".", "assertEqual", "(", "pl1", ",", "label1", ")", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label1", ")", ",", "\n", "(", "matrix2", ",", "label1", ")", ")", ")", "\n", "\n", "label2", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "label3", "=", "[", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", "]", "\n", "\n", "self", ".", "assertTrue", "(", "graph_util", ".", "is_isomorphic", "(", "(", "matrix1", ",", "label2", ")", ",", "\n", "(", "matrix2", ",", "label3", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_random_isomorphism_hashing": [[390, 409], ["range", "random.randint", "numpy.random.randint", "numpy.random.permutation().tolist", "lookup.nas101bench.lib.graph_util.permute_graph", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module", "graph_util_test.GraphUtilTest.assertEqual", "random.randint", "range", "numpy.random.permutation"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.cell_searchs.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.permute_graph", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module"], ["", "def", "test_random_isomorphism_hashing", "(", "self", ")", ":", "\n", "# Tests that hash_module always provides the same hash for randomly", "\n", "# generated isomorphic graphs.", "\n", "    ", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "# Generate random graph. Note: the algorithm works (i.e. same hash ==", "\n", "# isomorphic graphs) for all directed graphs with coloring and does not", "\n", "# require the graph to be a DAG.", "\n", "      ", "size", "=", "random", ".", "randint", "(", "3", ",", "20", ")", "\n", "matrix", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "[", "size", ",", "size", "]", ")", "\n", "labels", "=", "[", "random", ".", "randint", "(", "0", ",", "10", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "\n", "# Generate permutation of matrix and labels.", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "size", ")", ".", "tolist", "(", ")", "\n", "pmatrix", ",", "plabels", "=", "graph_util", ".", "permute_graph", "(", "matrix", ",", "labels", ",", "perm", ")", "\n", "\n", "# Hashes should be identical.", "\n", "hash1", "=", "graph_util", ".", "hash_module", "(", "matrix", ",", "labels", ")", "\n", "hash2", "=", "graph_util", ".", "hash_module", "(", "pmatrix", ",", "plabels", ")", "\n", "self", ".", "assertEqual", "(", "hash1", ",", "hash2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.graph_util_test.GraphUtilTest.test_counterexample_bipartite": [[410, 447], ["numpy.array", "numpy.array", "graph_util_test.GraphUtilTest.assertEqual", "lookup.nas101bench.lib.graph_util.hash_module", "lookup.nas101bench.lib.graph_util.hash_module"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.graph_util.hash_module"], ["", "", "def", "test_counterexample_bipartite", "(", "self", ")", ":", "\n", "# This is a counter example that shows that the hashing algorithm is not", "\n", "# perfectly identifiable (i.e. there are non-isomorphic graphs with the same", "\n", "# hash). If this tests fails, it means the algorithm must have been changed", "\n", "# in some way that allows it to identify these graphs as non-isomoprhic.", "\n", "    ", "matrix1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "labels", "=", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "-", "2", "]", "\n", "\n", "# This takes far too long to run so commenting it out. The graphs are", "\n", "# non-isomorphic fairly obviously from visual inspection.", "\n", "# self.assertFalse(graph_util.is_isomorphic((matrix1, labels),", "\n", "#                                           (matrix2, labels)))", "\n", "self", ".", "assertEqual", "(", "graph_util", ".", "hash_module", "(", "matrix1", ",", "labels", ")", ",", "\n", "graph_util", ".", "hash_module", "(", "matrix2", ",", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_linear": [[28, 53], ["numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels"], ["  ", "def", "test_compute_vertex_channels_linear", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules with no branching.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "16", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "16", ",", "16", ",", "16", "]", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "16", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc3", "==", "[", "16", ",", "8", ",", "8", ",", "8", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ")", "\n", "vc4", "=", "model_builder", ".", "compute_vertex_channels", "(", "1", ",", "1", ",", "matrix2", ")", "\n", "assert", "vc4", "==", "[", "1", ",", "1", "]", "\n", "\n", "vc5", "=", "model_builder", ".", "compute_vertex_channels", "(", "1", ",", "5", ",", "matrix2", ")", "\n", "assert", "vc5", "==", "[", "1", ",", "5", "]", "\n", "\n", "vc5", "=", "model_builder", ".", "compute_vertex_channels", "(", "5", ",", "1", ",", "matrix2", ")", "\n", "assert", "vc5", "==", "[", "5", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_no_output_branch": [[54, 69], ["numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels"], ["", "def", "test_compute_vertex_channels_no_output_branch", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules that branch but not at the output vertex.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "16", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "16", ",", "16", ",", "16", ",", "16", "]", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "16", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc3", "==", "[", "16", ",", "8", ",", "8", ",", "8", ",", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_output_branching": [[70, 98], ["numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels"], ["", "def", "test_compute_vertex_channels_output_branching", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules that branch at output.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "16", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "8", ",", "8", ",", "16", "]", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "16", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc3", "==", "[", "16", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc4", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "15", ",", "matrix1", ")", "\n", "assert", "vc4", "==", "[", "8", ",", "8", ",", "7", ",", "15", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc5", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix2", ")", "\n", "assert", "vc5", "==", "[", "8", ",", "3", ",", "3", ",", "2", ",", "8", "]", "\n", "\n", "vc6", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "15", ",", "matrix2", ")", "\n", "assert", "vc6", "==", "[", "8", ",", "5", ",", "5", ",", "5", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_builder_test.ModelBuilderTest.test_compute_vertex_channels_max": [[99, 123], ["numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "numpy.array", "lookup.nas101bench.lib.model_builder.compute_vertex_channels", "lookup.nas101bench.lib.model_builder.compute_vertex_channels"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder.compute_vertex_channels"], ["", "def", "test_compute_vertex_channels_max", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests modules where some vertices take the max channels of neighbors.\"\"\"", "\n", "matrix1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "vc1", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix1", ")", "\n", "assert", "vc1", "==", "[", "8", ",", "4", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc2", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "9", ",", "matrix1", ")", "\n", "assert", "vc2", "==", "[", "8", ",", "5", ",", "5", ",", "4", ",", "9", "]", "\n", "\n", "matrix2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "vc3", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "8", ",", "matrix2", ")", "\n", "assert", "vc3", "==", "[", "8", ",", "4", ",", "4", ",", "4", ",", "8", "]", "\n", "\n", "vc4", "=", "model_builder", ".", "compute_vertex_channels", "(", "8", ",", "15", ",", "matrix2", ")", "\n", "assert", "vc4", "==", "[", "8", ",", "8", ",", "7", ",", "7", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_builder_test.ModelBuilderTest.test_covariance_matrix_against_numpy": [[124, 141], ["range", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "tensorflow.constant", "lookup.nas101bench.lib.model_builder._covariance_matrix", "numpy.cov", "numpy.testing.assert_array_almost_equal", "tensorflow.Session", "sess.run"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.nas_201_api.api_utils.NASBenchMetaAPI.random", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_builder._covariance_matrix", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.evaluate._TrainAndEvaluator.run"], ["", "def", "test_covariance_matrix_against_numpy", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests that the TF implementation of covariance matrix matchs np.cov.\"\"\"", "\n", "\n", "# Randomized test 100 times", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "      ", "batch", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "150", ")", "\n", "features", "=", "np", ".", "random", ".", "randint", "(", "500", ",", "1500", ")", "\n", "matrix", "=", "np", ".", "random", ".", "random", "(", "(", "batch", ",", "features", ")", ")", "\n", "\n", "tf_matrix", "=", "tf", ".", "constant", "(", "matrix", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf_cov_tensor", "=", "model_builder", ".", "_covariance_matrix", "(", "tf_matrix", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "tf_cov", "=", "sess", ".", "run", "(", "tf_cov_tensor", ")", "\n", "\n", "", "np_cov", "=", "np", ".", "cov", "(", "matrix", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "tf_cov", ",", "np_cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.setUp": [[33, 57], ["tempfile.mkdtemp", "os.path.join", "tensorflow.gfile.Open", "json.dump", "os.path.join", "tensorflow.gfile.MakeDirs"], "methods", ["None"], ["  ", "def", "setUp", "(", "self", ")", ":", "\n", "    ", "\"\"\"Set up files and directories that are expected by run_evaluation.\"\"\"", "\n", "# Create temp directory for output files", "\n", "self", ".", "output_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "self", ".", "models_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'models_file.json'", ")", "\n", "\n", "self", ".", "toy_data", "=", "{", "\n", "'abc'", ":", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "[", "-", "1", ",", "0", ",", "-", "2", "]", ")", ",", "\n", "'abd'", ":", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "[", "-", "1", ",", "0", ",", "-", "2", "]", ")", ",", "\n", "'abe'", ":", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "[", "-", "1", ",", "0", ",", "-", "2", "]", ")", ",", "\n", "}", "\n", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "self", ".", "models_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "self", ".", "toy_data", ",", "f", ")", "\n", "\n", "# Create files & directories which are normally created by", "\n", "# evaluate.train_and_evaluate but have been mocked out.", "\n", "", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ",", "model_id", ",", "'repeat_1'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "eval_dir", ")", "\n", "", "run_evaluation", ".", "FLAGS", ".", "train_data_files", "=", "'unused'", "\n", "run_evaluation", ".", "FLAGS", ".", "valid_data_file", "=", "'unused'", "\n", "run_evaluation", ".", "FLAGS", ".", "test_data_file", "=", "'unused'", "\n", "run_evaluation", ".", "FLAGS", ".", "num_repeats", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_single_worker": [[58, 78], ["tensorflow.test.mock.patch.object", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.gfile.Exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_single_worker", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests single worker code path.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_multi_worker_0": [[79, 97], ["tensorflow.test.mock.patch.object", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.gfile.Exists", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_multi_worker_0", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests multi worker code path for worker 0.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ",", "worker_id", "=", "0", ",", "total_workers", "=", "2", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "[", "'abc'", ",", "'abe'", "]", ":", "\n", "      ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_multi_worker_1": [[98, 113], ["tensorflow.test.mock.patch.object", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.gfile.Exists", "tensorflow.test.mock.call", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_multi_worker_1", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests multi worker code path for worker 1.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ",", "worker_id", "=", "1", ",", "total_workers", "=", "2", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_regex": [[114, 132], ["tensorflow.test.mock.patch.object", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertTrue", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.gfile.Exists", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_regex", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests regex filters models.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ",", "model_id_regex", "=", "'^ab(d|e)'", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "[", "'abd'", ",", "'abe'", "]", ":", "\n", "      ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "'repeat_1'", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_evaluate_repeat": [[133, 168], ["tensorflow.test.mock.patch.object", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "os.path.join", "tensorflow.gfile.MakeDirs", "absl.testing.flagsaver.flagsaver", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator.run_evaluation", "range", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "tensorflow.test.mock.call", "run_evaluation_test.RunEvaluationTest.assertTrue", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tensorflow.gfile.Exists", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_evaluate_repeat", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests evaluate with repeats.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "\n", "# Create extra directories not created in setUp for repeat_2", "\n", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ",", "model_id", ",", "'repeat_2'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "eval_dir", ")", "\n", "\n", "", "with", "flagsaver", ".", "flagsaver", "(", "num_repeats", "=", "2", ")", ":", "\n", "      ", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abc'", ",", "'repeat_2'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abd'", ",", "'repeat_2'", ")", ")", ",", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_2'", ")", ")", "]", ")", "\n", "\n", "for", "model_id", "in", "self", ".", "toy_data", ":", "\n", "      ", "for", "repeat", "in", "range", "(", "2", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "tf", ".", "gfile", ".", "Exists", "(", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "model_id", ",", "\n", "'repeat_%d'", "%", "(", "repeat", "+", "1", ")", ",", "'results.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_clean_model_dir": [[169, 200], ["os.path.join", "tensorflow.gfile.MakeDirs", "os.path.join", "tensorflow.gfile.MakeDirs", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator._clean_model_dir", "tensorflow.gfile.ListDirectory", "run_evaluation_test.RunEvaluationTest.assertItemsEqual", "tensorflow.gfile.Open", "f.write", "tensorflow.gfile.Open", "f.write", "tensorflow.gfile.Open", "f.write", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator._clean_model_dir"], ["", "", "", "def", "test_clean_model_dir", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests clean-up of model directory keeps only intended files.\"\"\"", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ",", "'abcde'", ",", "'repeat_1'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "model_dir", ")", "\n", "\n", "# Write files which will be preserved", "\n", "preserved_files", "=", "[", "'model.ckpt-0.index'", ",", "\n", "'model.ckpt-100.index'", ",", "\n", "'results.json'", "]", "\n", "for", "filename", "in", "preserved_files", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'unused'", ")", "\n", "\n", "# Write files which will be deleted", "\n", "", "", "for", "filename", "in", "[", "'checkpoint'", ",", "\n", "'events.out.tfevents'", "]", ":", "\n", "      ", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'unused'", ")", "\n", "\n", "# Create subdirectory which will be deleted", "\n", "", "", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'eval_dir'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "eval_dir", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "eval_dir", ",", "'events.out.tfevents'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "'unused'", ")", "\n", "\n", "", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "_clean_model_dir", "(", "model_dir", ")", "\n", "\n", "# Check only intended files are preserved", "\n", "remaining_files", "=", "tf", ".", "gfile", ".", "ListDirectory", "(", "model_dir", ")", "\n", "self", ".", "assertItemsEqual", "(", "remaining_files", ",", "preserved_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.run_evaluation_test.RunEvaluationTest.test_recovery_file": [[201, 230], ["tensorflow.test.mock.patch.object", "os.path.join", "tensorflow.gfile.MakeDirs", "lookup.nas101bench.scripts.run_evaluation.Evaluator", "lookup.nas101bench.scripts.run_evaluation.Evaluator.run_evaluation", "os.path.join", "mock_eval.train_and_evaluate.assert_has_calls", "run_evaluation_test.RunEvaluationTest.assertEqual", "run_evaluation_test.RunEvaluationTest.assertEqual", "tensorflow.gfile.Open", "f.write", "len", "tensorflow.gfile.Open", "int", "os.path.join", "tensorflow.test.mock.call", "f.read", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.scripts.run_evaluation.Evaluator.run_evaluation"], ["", "@", "tf", ".", "test", ".", "mock", ".", "patch", ".", "object", "(", "run_evaluation", ",", "'evaluate'", ")", "\n", "def", "test_recovery_file", "(", "self", ",", "mock_eval", ")", ":", "\n", "    ", "\"\"\"Tests that evaluation recovers from restart.\"\"\"", "\n", "mock_eval", ".", "train_and_evaluate", ".", "return_value", "=", "'unused_output'", "\n", "\n", "# Write recovery file", "\n", "recovery_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'_recovery'", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "recovery_dir", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "os", ".", "path", ".", "join", "(", "recovery_dir", ",", "'0'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "'2'", ")", "# Resume at 3rd entry", "\n", "\n", "", "evaluator", "=", "run_evaluation", ".", "Evaluator", "(", "\n", "self", ".", "models_file", ",", "self", ".", "output_dir", ")", "\n", "evaluator", ".", "run_evaluation", "(", ")", "\n", "\n", "expected_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'ab'", ")", "\n", "mock_eval", ".", "train_and_evaluate", ".", "assert_has_calls", "(", "[", "\n", "tf", ".", "test", ".", "mock", ".", "call", "(", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "tf", ".", "test", ".", "mock", ".", "ANY", ",", "\n", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "'abe'", ",", "'repeat_1'", ")", ")", "]", ")", "\n", "\n", "# Check that only 'abe' was evaluated, 'abc' and 'abe' are skipped due to", "\n", "# recovery.", "\n", "call_args", "=", "mock_eval", ".", "train_and_evaluate", ".", "call_args_list", "\n", "self", ".", "assertEqual", "(", "len", "(", "call_args", ")", ",", "1", ")", "\n", "\n", "# Check that recovery file is updated after run", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "evaluator", ".", "recovery_file", ")", "as", "f", ":", "\n", "      ", "new_idx", "=", "int", "(", "f", ".", "read", "(", ")", ")", "\n", "", "self", ".", "assertEqual", "(", "new_idx", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_spec_test.ModelSpecTest.test_prune_noop": [[28, 57], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["  ", "def", "test_prune_noop", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests graphs which require no pruning.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "model1", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model1", ".", "original_matrix", ",", "model1", ".", "matrix", ")", "\n", "assert", "model1", ".", "original_ops", "==", "model1", ".", "original_ops", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "model2", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model2", ".", "original_matrix", ",", "model2", ".", "matrix", ")", "\n", "assert", "model2", ".", "original_ops", "==", "model2", ".", "ops", "\n", "\n", "model3", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "model3", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model3", ".", "original_matrix", ",", "model3", ".", "matrix", ")", "\n", "assert", "model3", ".", "original_ops", "==", "model3", ".", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_spec_test.ModelSpecTest.test_prune_islands": [[58, 86], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_prune_islands", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests isolated components are pruned.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "model1", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model1", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model1", ".", "ops", "==", "[", "1", ",", "2", ",", "4", "]", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "assert", "model2", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model2", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model2", ".", "ops", "==", "[", "1", ",", "2", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_spec_test.ModelSpecTest.test_prune_dangling": [[87, 114], ["lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array_equal", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_prune_dangling", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests dangling vertices are pruned.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "model1", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model1", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model1", ".", "ops", "==", "[", "1", ",", "3", ",", "4", "]", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "model2", ".", "valid_spec", "\n", "assert", "np", ".", "array_equal", "(", "model2", ".", "matrix", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", ")", "\n", "assert", "model2", ".", "ops", "==", "[", "1", ",", "3", ",", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_spec_test.ModelSpecTest.test_prune_disconnected": [[115, 138], ["lookup.nas101bench.lib.model_spec.ModelSpec", "lookup.nas101bench.lib.model_spec.ModelSpec", "lookup.nas101bench.lib.model_spec.ModelSpec", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_prune_disconnected", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests graphs where with no input to output path are marked invalid.\"\"\"", "\n", "model1", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "0", ",", "0", "]", ")", "\n", "assert", "not", "model1", ".", "valid_spec", "\n", "\n", "model2", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "not", "model2", ".", "valid_spec", "\n", "\n", "model3", "=", "model_spec", ".", "ModelSpec", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "assert", "not", "model3", ".", "valid_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-adsl_bbea.tests.model_spec_test.ModelSpecTest.test_is_upper_triangular": [[139, 176], ["numpy.array", "lookup.nas101bench.lib.model_spec.is_upper_triangular", "numpy.array", "lookup.nas101bench.lib.model_spec.is_upper_triangular", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "lookup.nas101bench.lib.model_spec.is_upper_triangular", "numpy.array", "lookup.nas101bench.lib.model_spec.is_upper_triangular", "lookup.nas101bench.lib.model_spec.is_upper_triangular", "lookup.nas101bench.lib.model_spec.is_upper_triangular", "lookup.nas101bench.lib.model_spec.is_upper_triangular"], "methods", ["home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular", "home.repos.pwc.inspect_result.snu-adsl_bbea.lib.model_spec.is_upper_triangular"], ["", "def", "test_is_upper_triangular", "(", "self", ")", ":", "\n", "    ", "\"\"\"Tests is_uppper_triangular correct for square graphs.\"\"\"", "\n", "m0", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "model_spec", ".", "is_upper_triangular", "(", "m0", ")", "\n", "\n", "m1", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "model_spec", ".", "is_upper_triangular", "(", "m1", ")", "\n", "\n", "m2", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m2", ")", "\n", "\n", "m3", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m3", ")", "\n", "\n", "m4", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m4", ")", "\n", "\n", "m5", "=", "np", ".", "array", "(", "[", "[", "0", "]", "]", ")", "\n", "assert", "model_spec", ".", "is_upper_triangular", "(", "m5", ")", "\n", "\n", "m6", "=", "np", ".", "array", "(", "[", "[", "1", "]", "]", ")", "\n", "assert", "not", "model_spec", ".", "is_upper_triangular", "(", "m6", ")", "\n", "\n"]]}