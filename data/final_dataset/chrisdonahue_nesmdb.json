{"home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_bitmask": [[146, 152], ["register_function_bitmasks[].items", "ValueError"], "function", ["None"], ["def", "func_to_bitmask", "(", "ch", ",", "fu", ")", ":", "\n", "  ", "for", "offset", ",", "bitmasks", "in", "register_function_bitmasks", "[", "ch", "]", ".", "items", "(", ")", ":", "\n", "    ", "for", "fu_name", ",", "bitmask", "in", "bitmasks", ":", "\n", "      ", "if", "fu_name", "==", "fu", ":", "\n", "        ", "return", "bitmask", "\n", "", "", "", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_max": [[154, 159], ["apu.func_to_bitmask", "mask_bin.count"], "function", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_bitmask"], ["", "def", "func_to_max", "(", "ch", ",", "fu", ")", ":", "\n", "  ", "bitmask", "=", "func_to_bitmask", "(", "ch", ",", "fu", ")", "\n", "mask_bin", "=", "'{:08b}'", ".", "format", "(", "bitmask", ")", "\n", "nbits", "=", "mask_bin", ".", "count", "(", "'1'", ")", "\n", "return", "(", "2", "**", "nbits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_offset": [[161, 167], ["register_function_bitmasks[].items", "ValueError"], "function", ["None"], ["", "def", "func_to_offset", "(", "ch", ",", "fu", ")", ":", "\n", "  ", "for", "offset", ",", "bitmasks", "in", "register_function_bitmasks", "[", "ch", "]", ".", "items", "(", ")", ":", "\n", "    ", "for", "fu_name", ",", "bitmask", "in", "bitmasks", ":", "\n", "      ", "if", "fu_name", "==", "fu", ":", "\n", "        ", "return", "offset", "\n", "", "", "", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.setUpClass": [[12, 23], ["open", "vgms.append", "nesmdb.vgm.vgm_simplify", "f.read"], "methods", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_simplify.vgm_simplify"], ["  ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "    ", "vgms", "=", "[", "]", "\n", "for", "vgm_fp", "in", "_EXAMPLE_VGMS", ":", "\n", "      ", "with", "open", "(", "vgm_fp", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "vgms", ".", "append", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "vgms_simple", "=", "[", "vgm_simplify", "(", "vgm", ")", "[", "0", "]", "for", "vgm", "in", "vgms", "]", "\n", "\n", "cls", ".", "vgms_full", "=", "vgms", "\n", "cls", ".", "vgms", "=", "vgms_simple", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.test_simplify": [[25, 56], ["test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertListEqual", "nesmdb.vgm.vgm_simplify", "vgms_simple.append", "delcmds.append", "vgms_short.append", "len", "len", "nesmdb.vgm.vgm_shorten", "len"], "methods", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_simplify.vgm_simplify", "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_simplify.vgm_shorten"], ["", "def", "test_simplify", "(", "self", ")", ":", "\n", "# Verify original lengths", "\n", "    ", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "self", ".", "vgms_full", "]", ",", "\n", "[", "78942", ",", "86159", ",", "2685", ",", "2254", ",", "84706", "]", ")", "\n", "\n", "# Remove invalid VGM commands", "\n", "vgms_simple", "=", "[", "]", "\n", "delcmds", "=", "[", "]", "\n", "for", "vgm", "in", "self", ".", "vgms_full", ":", "\n", "      ", "vgm", ",", "delcmd", "=", "vgm_simplify", "(", "vgm", ")", "\n", "vgms_simple", ".", "append", "(", "vgm", ")", "\n", "delcmds", ".", "append", "(", "delcmd", ")", "\n", "\n", "# Make sure we have deleted the right number of commands", "\n", "", "self", ".", "assertListEqual", "(", "delcmds", ",", "[", "5", ",", "5", ",", "4", ",", "4", ",", "5", "]", ")", "\n", "\n", "# Make sure simplified lengths are correct", "\n", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "vgms_simple", "]", ",", "\n", "[", "78927", ",", "86144", ",", "2673", ",", "2242", ",", "84691", "]", ")", "\n", "\n", "# Shorten VGMs", "\n", "vgms_short", "=", "[", "]", "\n", "for", "vgm", "in", "vgms_simple", ":", "\n", "      ", "vgms_short", ".", "append", "(", "vgm_shorten", "(", "vgm", ",", "1000", ",", "400", ")", ")", "\n", "\n", "# Make sure shortened lengths are correct", "\n", "", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "vgms_short", "]", ",", "\n", "[", "3193", ",", "3193", ",", "1756", ",", "1192", ",", "3193", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.test_nlm": [[58, 73], ["test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertEqual", "nesmdb.cycle.vgm_cycle", "cycle_vgms.append", "nesmdb.cycle.vgm_dist", "len"], "methods", ["None"], ["", "def", "test_nlm", "(", "self", ")", ":", "\n", "    ", "total_dist", "=", "0.", "\n", "cycle_vgms", "=", "[", "]", "\n", "for", "source_vgm", "in", "self", ".", "vgms", ":", "\n", "      ", "cycle_vgm", "=", "nesmdb", ".", "cycle", ".", "vgm_cycle", "(", "source_vgm", ",", "'nlm'", ")", "\n", "total_dist", "+=", "nesmdb", ".", "cycle", ".", "vgm_dist", "(", "source_vgm", ",", "cycle_vgm", ")", "[", "0", "]", "\n", "cycle_vgms", ".", "append", "(", "cycle_vgm", ")", "\n", "\n", "# Make sure shortened lengths are correct", "\n", "", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "cycle_vgms", "]", ",", "\n", "[", "82168", ",", "86497", ",", "2656", ",", "2161", ",", "87442", "]", ")", "\n", "\n", "# Make sure the WAV files are lossless", "\n", "self", ".", "assertEqual", "(", "total_dist", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.test_midi": [[75, 91], ["test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertTrue", "nesmdb.cycle.vgm_cycle", "cycle_vgms.append", "len", "nesmdb.cycle.vgm_dist", "len"], "methods", ["None"], ["", "def", "test_midi", "(", "self", ")", ":", "\n", "    ", "total_dist", "=", "0.", "\n", "cycle_vgms", "=", "[", "]", "\n", "for", "source_vgm", "in", "self", ".", "vgms", ":", "\n", "      ", "cycle_vgm", "=", "nesmdb", ".", "cycle", ".", "vgm_cycle", "(", "source_vgm", ",", "'midi'", ",", "score_rate", "=", "24.", ")", "\n", "total_dist", "+=", "nesmdb", ".", "cycle", ".", "vgm_dist", "(", "source_vgm", ",", "cycle_vgm", ")", "[", "0", "]", "\n", "cycle_vgms", ".", "append", "(", "cycle_vgm", ")", "\n", "\n", "# Make sure shortened lengths are correct", "\n", "", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "cycle_vgms", "]", ",", "\n", "[", "12283", ",", "16303", ",", "1162", ",", "1063", ",", "15880", "]", ")", "\n", "\n", "# Make sure the MIDI files are the same as expressive score", "\n", "avg_dist", "=", "total_dist", "/", "len", "(", "self", ".", "vgms", ")", "\n", "self", ".", "assertTrue", "(", "2.20", "<", "avg_dist", "and", "avg_dist", "<", "2.24", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.test_exprsco": [[93, 109], ["test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertTrue", "nesmdb.cycle.vgm_cycle", "cycle_vgms.append", "len", "nesmdb.cycle.vgm_dist", "len"], "methods", ["None"], ["", "def", "test_exprsco", "(", "self", ")", ":", "\n", "    ", "total_dist", "=", "0.", "\n", "cycle_vgms", "=", "[", "]", "\n", "for", "source_vgm", "in", "self", ".", "vgms", ":", "\n", "      ", "cycle_vgm", "=", "nesmdb", ".", "cycle", ".", "vgm_cycle", "(", "source_vgm", ",", "'exprsco'", ",", "score_rate", "=", "24.", ")", "\n", "total_dist", "+=", "nesmdb", ".", "cycle", ".", "vgm_dist", "(", "source_vgm", ",", "cycle_vgm", ")", "[", "0", "]", "\n", "cycle_vgms", ".", "append", "(", "cycle_vgm", ")", "\n", "\n", "# Make sure shortened lengths are correct", "\n", "", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "cycle_vgms", "]", ",", "\n", "[", "12283", ",", "16303", ",", "1162", ",", "1063", ",", "15880", "]", ")", "\n", "\n", "# Make sure the expressive scores are within acceptable range", "\n", "avg_dist", "=", "total_dist", "/", "len", "(", "self", ".", "vgms", ")", "\n", "self", ".", "assertTrue", "(", "2.20", "<", "avg_dist", "and", "avg_dist", "<", "2.24", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.test_seprsco": [[111, 127], ["test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertTrue", "nesmdb.cycle.vgm_cycle", "cycle_vgms.append", "len", "nesmdb.cycle.vgm_dist", "len"], "methods", ["None"], ["", "def", "test_seprsco", "(", "self", ")", ":", "\n", "    ", "total_dist", "=", "0.", "\n", "cycle_vgms", "=", "[", "]", "\n", "for", "source_vgm", "in", "self", ".", "vgms", ":", "\n", "      ", "cycle_vgm", "=", "nesmdb", ".", "cycle", ".", "vgm_cycle", "(", "source_vgm", ",", "'seprsco'", ",", "score_rate", "=", "24.", ")", "\n", "total_dist", "+=", "nesmdb", ".", "cycle", ".", "vgm_dist", "(", "source_vgm", ",", "cycle_vgm", ")", "[", "0", "]", "\n", "cycle_vgms", ".", "append", "(", "cycle_vgm", ")", "\n", "\n", "# Make sure shortened lengths are correct", "\n", "", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "cycle_vgms", "]", ",", "\n", "[", "8026", ",", "10573", ",", "850", ",", "790", ",", "10330", "]", ")", "\n", "\n", "# Make sure the expressive scores are within acceptable range", "\n", "avg_dist", "=", "total_dist", "/", "len", "(", "self", ".", "vgms", ")", "\n", "self", ".", "assertTrue", "(", "12.40", "<", "avg_dist", "and", "avg_dist", "<", "12.42", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.tests.test_formats.TestFormats.test_blndsco": [[129, 145], ["test_formats.TestFormats.assertListEqual", "test_formats.TestFormats.assertTrue", "nesmdb.cycle.vgm_cycle", "cycle_vgms.append", "len", "nesmdb.cycle.vgm_dist", "len"], "methods", ["None"], ["", "def", "test_blndsco", "(", "self", ")", ":", "\n", "    ", "total_dist", "=", "0.", "\n", "cycle_vgms", "=", "[", "]", "\n", "for", "source_vgm", "in", "self", ".", "vgms", ":", "\n", "      ", "cycle_vgm", "=", "nesmdb", ".", "cycle", ".", "vgm_cycle", "(", "source_vgm", ",", "'blndsco'", ",", "score_rate", "=", "24.", ")", "\n", "total_dist", "+=", "nesmdb", ".", "cycle", ".", "vgm_dist", "(", "source_vgm", ",", "cycle_vgm", ")", "[", "0", "]", "\n", "cycle_vgms", ".", "append", "(", "cycle_vgm", ")", "\n", "\n", "# Make sure shortened lengths are correct", "\n", "", "self", ".", "assertListEqual", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "cycle_vgms", "]", ",", "\n", "[", "9589", ",", "10630", ",", "895", ",", "853", ",", "12361", "]", ")", "\n", "\n", "# Make sure the expressive scores are within acceptable range", "\n", "avg_dist", "=", "total_dist", "/", "len", "(", "self", ".", "vgms", ")", "\n", "self", ".", "assertTrue", "(", "11.95", "<", "avg_dist", "and", "avg_dist", "<", "11.97", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.exprsco.rawsco_to_exprsco": [[8, 47], ["rawsco[].astype", "t.astype.astype", "numpy.concatenate", "numpy.round", "m.astype.astype", "numpy.zeros", "numpy.where", "numpy.left_shift", "numpy.log", "numpy.where", "numpy.where", "numpy.log"], "function", ["None"], ["def", "rawsco_to_exprsco", "(", "rawsco", ",", "midi_valid_range", "=", "(", "21", ",", "108", ")", ")", ":", "\n", "  ", "clock", ",", "rate", ",", "nsamps", ",", "rawsco", "=", "rawsco", "\n", "assert", "rate", "==", "44100", "\n", "assert", "rawsco", ".", "shape", "[", "0", "]", "==", "nsamps", "\n", "\n", "nsamps", "=", "rawsco", ".", "shape", "[", "0", "]", "\n", "\n", "t", "=", "rawsco", "[", ":", ",", ":", "3", ",", ":", "2", "]", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "t", "=", "np", ".", "left_shift", "(", "t", "[", ":", ",", ":", ",", "0", "]", ",", "8", ")", "+", "t", "[", ":", ",", ":", ",", "1", "]", "\n", "t", "=", "t", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "t_p", ",", "t_tr", "=", "t", "[", ":", ",", ":", "2", "]", ",", "t", "[", ":", ",", "2", ":", "]", "\n", "\n", "f_p", "=", "clock", "/", "(", "16", "*", "(", "t_p", "+", "1", ")", ")", "\n", "f_tr", "=", "clock", "/", "(", "32", "*", "(", "t_tr", "+", "1", ")", ")", "\n", "f", "=", "np", ".", "concatenate", "(", "[", "f_p", ",", "f_tr", "]", ",", "axis", "=", "1", ")", "\n", "\n", "m", "=", "69", "+", "(", "12", "*", "np", ".", "log", "(", "f", "/", "440", ")", ")", "/", "np", ".", "log", "(", "2", ")", "\n", "m", "=", "np", ".", "round", "(", "m", ")", "\n", "\n", "# Clip notes to midi range", "\n", "m", "[", "np", ".", "where", "(", "m", "<", "midi_valid_range", "[", "0", "]", ")", "]", "=", "0", "\n", "m", "[", "np", ".", "where", "(", "m", ">", "midi_valid_range", "[", "1", "]", ")", "]", "=", "0", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Create output score", "\n", "exprsco", "=", "np", ".", "zeros", "(", "(", "nsamps", ",", "4", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Set notes", "\n", "exprsco", "[", ":", ",", ":", "3", ",", "0", "]", "=", "m", "\n", "exprsco", "[", ":", ",", "3", ",", "0", "]", "=", "rawsco", "[", ":", ",", "3", ",", "1", "]", "\n", "\n", "# Set velocity", "\n", "exprsco", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "where", "(", "exprsco", "[", ":", ",", ":", ",", "0", "]", ">", "0", ",", "rawsco", "[", ":", ",", ":", ",", "2", "]", ",", "0", ")", "\n", "\n", "# Set extra", "\n", "exprsco", "[", ":", ",", ":", ",", "2", "]", "=", "rawsco", "[", ":", ",", ":", ",", "3", "]", "\n", "\n", "return", "(", "rate", ",", "nsamps", ",", "exprsco", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.exprsco.exprsco_downsample": [[49, 121], ["float", "int", "numpy.zeros", "xrange", "abs", "abs", "collections.defaultdict", "xrange", "collections.Counter", "collections.defaultdict.items", "sum", "numpy.arange", "sorted", "float", "xrange", "xrange", "xrange", "collections.Counter.values", "Exception", "intervals_t.items", "sorted.append", "int", "xrange", "len", "collections.Counter.items", "math.floor", "numpy.where", "len", "ch_to_onsets[].append", "abs", "scipy.stats.mode", "scipy.stats.mode"], "function", ["None"], ["", "def", "exprsco_downsample", "(", "exprsco", ",", "rate", ",", "adaptive", ")", ":", "\n", "  ", "rate_prev", ",", "nsamps", ",", "exprsco", "=", "exprsco", "\n", "assert", "abs", "(", "rate_prev", "-", "44100.", ")", "<", "1e-6", "\n", "if", "abs", "(", "rate", "-", "44100.", ")", "<", "1e-6", ":", "\n", "    ", "return", "(", "rate_prev", ",", "nsamps", ",", "exprsco", ")", "\n", "\n", "", "if", "rate", "is", "None", ":", "\n", "# Find note onsets", "\n", "    ", "ch_to_last_note", "=", "{", "ch", ":", "0", "for", "ch", "in", "xrange", "(", "4", ")", "}", "\n", "ch_to_onsets", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", "in", "xrange", "(", "exprsco", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "for", "j", "in", "xrange", "(", "4", ")", ":", "\n", "        ", "last_note", "=", "ch_to_last_note", "[", "j", "]", "\n", "note", "=", "exprsco", "[", "i", ",", "j", ",", "0", "]", "\n", "if", "note", ">", "0", "and", "note", "!=", "last_note", ":", "\n", "          ", "ch_to_onsets", "[", "j", "]", ".", "append", "(", "i", ")", "\n", "", "ch_to_last_note", "[", "j", "]", "=", "note", "\n", "\n", "# Find note intervals", "\n", "", "", "intervals", "=", "Counter", "(", ")", "\n", "for", "_", ",", "onsets", "in", "ch_to_onsets", ".", "items", "(", ")", ":", "\n", "      ", "for", "i", "in", "xrange", "(", "1", ",", "len", "(", "onsets", ")", ")", ":", "\n", "        ", "interval", "=", "onsets", "[", "i", "]", "-", "onsets", "[", "i", "-", "1", "]", "\n", "# Minimum length 1ms", "\n", "if", "interval", ">", "44", ":", "\n", "          ", "intervals", "[", "interval", "]", "+=", "1", "\n", "", "", "", "intervals_t", "=", "{", "i", "/", "44100.", ":", "c", "for", "i", ",", "c", "in", "intervals", ".", "items", "(", ")", "}", "\n", "\n", "# Raise error if we don't have enough info to estimate tempo", "\n", "num_intervals", "=", "sum", "(", "intervals", ".", "values", "(", ")", ")", "\n", "if", "num_intervals", "<", "10", ":", "\n", "      ", "raise", "Exception", "(", "'Too few intervals ({}) to estimate tempo'", ".", "format", "(", "num_intervals", ")", ")", "\n", "\n", "# Determine how well each rate divides the intervals", "\n", "# TODO: Make 1/24/disc variables", "\n", "", "disc", "=", "0.001", "\n", "rate_errors", "=", "[", "]", "\n", "for", "rate", "in", "np", ".", "arange", "(", "1.", ",", "24.", "+", "disc", ",", "disc", ")", ":", "\n", "      ", "error", "=", "0.", "\n", "for", "interval", ",", "count", "in", "intervals_t", ".", "items", "(", ")", ":", "\n", "        ", "quotient", "=", "math", ".", "floor", "(", "interval", "*", "rate", "+", "1e-8", ")", "\n", "remainder", "=", "interval", "-", "(", "quotient", "/", "rate", ")", "\n", "if", "remainder", "<", "0", "and", "abs", "(", "remainder", ")", "<", "1e-8", ":", "\n", "          ", "remainder", "=", "0", "\n", "", "assert", "remainder", ">=", "0", "\n", "error", "+=", "remainder", "*", "count", "\n", "", "rate_errors", ".", "append", "(", "(", "rate", ",", "error", ")", ")", "\n", "\n", "# Find best rate", "\n", "", "rate_errors", "=", "sorted", "(", "rate_errors", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "rate", "=", "float", "(", "rate_errors", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "# Downsample", "\n", "", "rate", "=", "float", "(", "rate", ")", "\n", "ndown", "=", "int", "(", "(", "nsamps", "/", "44100.", ")", "*", "rate", ")", "\n", "score_low", "=", "np", ".", "zeros", "(", "(", "ndown", ",", "4", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "xrange", "(", "ndown", ")", ":", "\n", "    ", "t_lo", "=", "i", "/", "rate", "\n", "t_hi", "=", "(", "i", "+", "1", ")", "/", "rate", "\n", "# TODO: round these instead of casting?", "\n", "samp_lo", ",", "samp_hi", "=", "[", "int", "(", "t", "*", "44100.", ")", "for", "t", "in", "[", "t_lo", ",", "t_hi", "]", "]", "\n", "score_slice", "=", "exprsco", "[", "samp_lo", ":", "samp_hi", "]", "\n", "for", "ch", "in", "xrange", "(", "4", ")", ":", "\n", "      ", "score_slice_ch", "=", "score_slice", "[", ":", ",", "ch", ",", ":", "]", "\n", "on_frames", "=", "np", ".", "where", "(", "score_slice_ch", "[", ":", ",", "0", "]", "!=", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "on_frames", ")", ">", "0", ":", "\n", "        ", "score_low", "[", "i", ",", "ch", ",", ":", "]", "=", "mode", "(", "score_slice_ch", "[", "on_frames", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "score_low", "[", "i", ",", "ch", ",", ":", "2", "]", "=", "0", "\n", "score_low", "[", "i", ",", "ch", ",", "2", "]", "=", "mode", "(", "score_slice_ch", "[", ":", ",", "2", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "", "", "return", "(", "rate", ",", "nsamps", ",", "score_low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.exprsco.exprsco_to_rawsco": [[123, 150], ["numpy.where", "m.astype.astype", "numpy.round", "numpy.round", "numpy.concatenate", "t.astype.astype", "numpy.right_shift", "numpy.bitwise_and", "numpy.zeros", "numpy.power", "numpy.bitwise_and"], "function", ["None"], ["", "def", "exprsco_to_rawsco", "(", "exprsco", ",", "clock", "=", "1789773.", ")", ":", "\n", "  ", "rate", ",", "nsamps", ",", "exprsco", "=", "exprsco", "\n", "\n", "m", "=", "exprsco", "[", ":", ",", ":", "3", ",", "0", "]", "\n", "m_zero", "=", "np", ".", "where", "(", "m", "==", "0", ")", "\n", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "f", "=", "440", "*", "np", ".", "power", "(", "2", ",", "(", "(", "m", "-", "69", ")", "/", "12", ")", ")", "\n", "\n", "f_p", ",", "f_tr", "=", "f", "[", ":", ",", ":", "2", "]", ",", "f", "[", ":", ",", "2", ":", "]", "\n", "\n", "t_p", "=", "np", ".", "round", "(", "(", "clock", "/", "(", "16", "*", "f_p", ")", ")", "-", "1", ")", "\n", "t_tr", "=", "np", ".", "round", "(", "(", "clock", "/", "(", "32", "*", "f_tr", ")", ")", "-", "1", ")", "\n", "t", "=", "np", ".", "concatenate", "(", "[", "t_p", ",", "t_tr", "]", ",", "axis", "=", "1", ")", "\n", "\n", "t", "=", "t", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "t", "[", "m_zero", "]", "=", "0", "\n", "th", "=", "np", ".", "right_shift", "(", "np", ".", "bitwise_and", "(", "t", ",", "0b11100000000", ")", ",", "8", ")", "\n", "tl", "=", "np", ".", "bitwise_and", "(", "t", ",", "0b00011111111", ")", "\n", "\n", "rawsco", "=", "np", ".", "zeros", "(", "(", "exprsco", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "rawsco", "[", ":", ",", ":", ",", "2", ":", "]", "=", "exprsco", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "rawsco", "[", ":", ",", ":", "3", ",", "0", "]", "=", "th", "\n", "rawsco", "[", ":", ",", ":", "3", ",", "1", "]", "=", "tl", "\n", "rawsco", "[", ":", ",", "3", ",", "1", ":", "]", "=", "exprsco", "[", ":", ",", "3", ",", ":", "]", "\n", "\n", "return", "(", "clock", ",", "rate", ",", "nsamps", ",", "rawsco", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.seprsco.exprsco_to_seprsco": [[4, 10], ["None"], "function", ["None"], ["def", "exprsco_to_seprsco", "(", "exprsco", ")", ":", "\n", "  ", "rate", ",", "nsamps", ",", "score", "=", "exprsco", "\n", "\n", "seprsco", "=", "score", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "return", "(", "rate", ",", "nsamps", ",", "seprsco", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.seprsco.seprsco_to_exprsco": [[12, 25], ["numpy.zeros"], "function", ["None"], ["", "def", "seprsco_to_exprsco", "(", "seprsco", ")", ":", "\n", "  ", "rate", ",", "nsamps", ",", "score", "=", "seprsco", "\n", "\n", "score_len", "=", "score", ".", "shape", "[", "0", "]", "\n", "\n", "exprsco", "=", "np", ".", "zeros", "(", "(", "score_len", ",", "4", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "exprsco", "[", ":", ",", ":", ",", "0", "]", "=", "score", "\n", "\n", "exprsco", "[", ":", ",", ":", ",", "1", "]", "=", "15", "\n", "exprsco", "[", ":", ",", "2", ",", "1", "]", "=", "0", "\n", "\n", "return", "(", "rate", ",", "nsamps", ",", "exprsco", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.midi.exprsco_to_midi": [[6, 93], ["pretty_midi.instrument_name_to_program", "pretty_midi.instrument_name_to_program", "pretty_midi.instrument_name_to_program", "pretty_midi.instrument_name_to_program", "pretty_midi.Instrument", "pretty_midi.Instrument", "pretty_midi.Instrument", "pretty_midi.Instrument", "enumerate", "enumerate", "pretty_midi.PrettyMIDI", "mf.read.instruments.extend", "pretty_midi.TimeSignature", "mf.read.time_signature_changes.append", "tempfile.NamedTemporaryFile", "mf.read.write", "tempfile.NamedTemporaryFile.read", "tempfile.NamedTemporaryFile.close", "numpy.split", "enumerate", "zip", "note_ends.append", "len", "len", "pretty_midi.Note", "ins.notes.append", "pretty_midi.ControlChange", "ins.control_changes.append", "ch_ccs.append", "note_ends.append", "ch_ccs.append", "note_starts.append", "note_ends.append", "note_starts.append"], "function", ["None"], ["def", "exprsco_to_midi", "(", "exprsco", ")", ":", "\n", "  ", "import", "pretty_midi", "\n", "\n", "rate", ",", "nsamps", ",", "exprsco", "=", "exprsco", "\n", "\n", "# Create MIDI instruments", "\n", "p1_prog", "=", "pretty_midi", ".", "instrument_name_to_program", "(", "'Lead 1 (square)'", ")", "\n", "p2_prog", "=", "pretty_midi", ".", "instrument_name_to_program", "(", "'Lead 2 (sawtooth)'", ")", "\n", "tr_prog", "=", "pretty_midi", ".", "instrument_name_to_program", "(", "'Synth Bass 1'", ")", "\n", "no_prog", "=", "pretty_midi", ".", "instrument_name_to_program", "(", "'Breath Noise'", ")", "\n", "p1", "=", "pretty_midi", ".", "Instrument", "(", "program", "=", "p1_prog", ",", "name", "=", "'p1'", ",", "is_drum", "=", "False", ")", "\n", "p2", "=", "pretty_midi", ".", "Instrument", "(", "program", "=", "p2_prog", ",", "name", "=", "'p2'", ",", "is_drum", "=", "False", ")", "\n", "tr", "=", "pretty_midi", ".", "Instrument", "(", "program", "=", "tr_prog", ",", "name", "=", "'tr'", ",", "is_drum", "=", "False", ")", "\n", "no", "=", "pretty_midi", ".", "Instrument", "(", "program", "=", "no_prog", ",", "name", "=", "'no'", ",", "is_drum", "=", "True", ")", "\n", "\n", "# Iterate through score to extract channel notes", "\n", "notes", "=", "{", "}", "\n", "ccs", "=", "{", "}", "\n", "for", "i", ",", "ch", "in", "enumerate", "(", "np", ".", "split", "(", "exprsco", ",", "4", ",", "axis", "=", "1", ")", ")", ":", "\n", "    ", "ch", "=", "ch", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "# MIDI doesn't allow velocity 0 messages so set tr velocity to 1", "\n", "if", "i", "==", "2", ":", "\n", "      ", "ch", "[", ":", ",", "1", "]", "=", "1", "\n", "last_velocity", "=", "1", "\n", "", "else", ":", "\n", "      ", "last_velocity", "=", "0", "\n", "\n", "", "last_note", "=", "0", "\n", "last_timbre", "=", "0", "\n", "note_starts", "=", "[", "]", "\n", "note_ends", "=", "[", "]", "\n", "ch_ccs", "=", "[", "]", "\n", "for", "s", ",", "(", "note", ",", "velocity", ",", "timbre", ")", "in", "enumerate", "(", "ch", ")", ":", "\n", "      ", "if", "note", "!=", "last_note", ":", "\n", "        ", "if", "note", "==", "0", ":", "\n", "          ", "note_ends", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "          ", "if", "last_note", "==", "0", ":", "\n", "            ", "note_starts", ".", "append", "(", "(", "s", ",", "note", ",", "velocity", ")", ")", "\n", "", "else", ":", "\n", "            ", "note_ends", ".", "append", "(", "s", ")", "\n", "note_starts", ".", "append", "(", "(", "s", ",", "note", ",", "velocity", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "velocity", "!=", "last_velocity", ":", "\n", "          ", "ch_ccs", ".", "append", "(", "(", "s", ",", "11", ",", "velocity", ")", ")", "\n", "\n", "", "", "if", "timbre", "!=", "last_timbre", ":", "\n", "        ", "ch_ccs", ".", "append", "(", "(", "s", ",", "12", ",", "timbre", ")", ")", "\n", "\n", "", "last_note", "=", "note", "\n", "last_velocity", "=", "velocity", "\n", "last_timbre", "=", "timbre", "\n", "", "if", "last_note", "!=", "0", ":", "\n", "      ", "note_ends", ".", "append", "(", "s", "+", "1", ")", "\n", "\n", "", "assert", "len", "(", "note_starts", ")", "==", "len", "(", "note_ends", ")", "\n", "notes", "[", "i", "]", "=", "zip", "(", "note_starts", ",", "note_ends", ")", "\n", "ccs", "[", "i", "]", "=", "ch_ccs", "\n", "\n", "# Add notes to MIDI instruments", "\n", "", "for", "i", ",", "ins", "in", "enumerate", "(", "[", "p1", ",", "p2", ",", "tr", ",", "no", "]", ")", ":", "\n", "    ", "for", "(", "start_samp", ",", "note", ",", "velocity", ")", ",", "end_samp", "in", "notes", "[", "i", "]", ":", "\n", "      ", "assert", "end_samp", ">", "start_samp", "\n", "start_t", ",", "end_t", "=", "start_samp", "/", "44100.", ",", "end_samp", "/", "44100.", "\n", "note", "=", "pretty_midi", ".", "Note", "(", "velocity", "=", "velocity", ",", "pitch", "=", "note", ",", "start", "=", "start_t", ",", "end", "=", "end_t", ")", "\n", "ins", ".", "notes", ".", "append", "(", "note", ")", "\n", "\n", "", "for", "samp", ",", "cc_num", ",", "arg", "in", "ccs", "[", "i", "]", ":", "\n", "      ", "cc", "=", "pretty_midi", ".", "ControlChange", "(", "cc_num", ",", "arg", ",", "samp", "/", "44100.", ")", "\n", "ins", ".", "control_changes", ".", "append", "(", "cc", ")", "\n", "\n", "# Add instruments to MIDI file", "\n", "", "", "midi", "=", "pretty_midi", ".", "PrettyMIDI", "(", "initial_tempo", "=", "120", ",", "resolution", "=", "22050", ")", "\n", "midi", ".", "instruments", ".", "extend", "(", "[", "p1", ",", "p2", ",", "tr", ",", "no", "]", ")", "\n", "\n", "# Create indicator for end of song", "\n", "eos", "=", "pretty_midi", ".", "TimeSignature", "(", "1", ",", "1", ",", "nsamps", "/", "44100.", ")", "\n", "midi", ".", "time_signature_changes", ".", "append", "(", "eos", ")", "\n", "\n", "# Write/read MIDI file", "\n", "mf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "'rb'", ")", "\n", "midi", ".", "write", "(", "mf", ".", "name", ")", "\n", "midi", "=", "mf", ".", "read", "(", ")", "\n", "mf", ".", "close", "(", ")", "\n", "\n", "return", "midi", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.midi.midi_to_exprsco": [[95, 161], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.seek", "pretty_midi.PrettyMIDI", "tempfile.NamedTemporaryFile.close", "int", "numpy.zeros", "len", "numpy.round", "ins_names.index", "collections.defaultdict", "xrange", "int", "int", "comms[].append", "comms[].append", "int", "numpy.round", "numpy.round", "numpy.round", "comms[].append", "comms[].append"], "function", ["None"], ["", "def", "midi_to_exprsco", "(", "midi", ")", ":", "\n", "  ", "import", "pretty_midi", "\n", "\n", "# Write/read MIDI file", "\n", "mf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "'wb'", ")", "\n", "mf", ".", "write", "(", "midi", ")", "\n", "mf", ".", "seek", "(", "0", ")", "\n", "midi", "=", "pretty_midi", ".", "PrettyMIDI", "(", "mf", ".", "name", ")", "\n", "mf", ".", "close", "(", ")", "\n", "\n", "# Recover number of samples from time signature change indicator", "\n", "assert", "len", "(", "midi", ".", "time_signature_changes", ")", "==", "2", "\n", "nsamps", "=", "int", "(", "np", ".", "round", "(", "midi", ".", "time_signature_changes", "[", "1", "]", ".", "time", "*", "44100", ")", ")", "\n", "\n", "# Find voices in MIDI", "\n", "exprsco", "=", "np", ".", "zeros", "(", "(", "nsamps", ",", "4", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ins_names", "=", "[", "'p1'", ",", "'p2'", ",", "'tr'", ",", "'no'", "]", "\n", "for", "ins", "in", "midi", ".", "instruments", ":", "\n", "    ", "ch", "=", "ins_names", ".", "index", "(", "ins", ".", "name", ")", "\n", "\n", "# Process note messages", "\n", "comms", "=", "defaultdict", "(", "list", ")", "\n", "for", "note", "in", "ins", ".", "notes", ":", "\n", "      ", "start", "=", "int", "(", "np", ".", "round", "(", "note", ".", "start", "*", "44100", ")", ")", "\n", "end", "=", "int", "(", "np", ".", "round", "(", "note", ".", "end", "*", "44100", ")", ")", "\n", "velocity", "=", "note", ".", "velocity", "if", "ch", "!=", "2", "else", "0", "\n", "note", "=", "note", ".", "pitch", "\n", "\n", "comms", "[", "start", "]", ".", "append", "(", "(", "'note_on'", ",", "note", ",", "velocity", ")", ")", "\n", "comms", "[", "end", "]", ".", "append", "(", "(", "'note_off'", ",", ")", ")", "\n", "\n", "# Process CC messages", "\n", "", "for", "cc", "in", "ins", ".", "control_changes", ":", "\n", "      ", "samp", "=", "int", "(", "np", ".", "round", "(", "cc", ".", "time", "*", "44100", ")", ")", "\n", "if", "cc", ".", "number", "==", "11", ":", "\n", "        ", "velocity", "=", "cc", ".", "value", "\n", "assert", "velocity", ">", "0", "\n", "comms", "[", "samp", "]", ".", "append", "(", "(", "'cc_velo'", ",", "velocity", ")", ")", "\n", "", "elif", "cc", ".", "number", "==", "12", ":", "\n", "        ", "timbre", "=", "cc", ".", "value", "\n", "comms", "[", "samp", "]", ".", "append", "(", "(", "'cc_timbre'", ",", "timbre", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "# Write score", "\n", "", "", "note", "=", "0", "\n", "velocity", "=", "0", "\n", "timbre", "=", "0", "\n", "for", "i", "in", "xrange", "(", "nsamps", ")", ":", "\n", "      ", "for", "comm", "in", "comms", "[", "i", "]", ":", "\n", "        ", "if", "comm", "[", "0", "]", "==", "'note_on'", ":", "\n", "          ", "note", "=", "comm", "[", "1", "]", "\n", "velocity", "=", "comm", "[", "2", "]", "\n", "", "elif", "comm", "[", "0", "]", "==", "'note_off'", ":", "\n", "          ", "note", "=", "0", "\n", "velocity", "=", "0", "\n", "", "elif", "comm", "[", "0", "]", "==", "'cc_velo'", ":", "\n", "          ", "velocity", "=", "comm", "[", "1", "]", "\n", "", "elif", "comm", "[", "0", "]", "==", "'cc_timbre'", ":", "\n", "          ", "timbre", "=", "comm", "[", "1", "]", "\n", "", "else", ":", "\n", "          ", "assert", "False", "\n", "\n", "", "", "exprsco", "[", "i", ",", "ch", "]", "=", "(", "note", ",", "velocity", ",", "timbre", ")", "\n", "\n", "", "", "return", "44100", ",", "nsamps", ",", "exprsco", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.rawsco.ndf_to_rawsco": [[13, 243], ["float", "collections.defaultdict", "numpy.zeros", "xrange", "abs", "zip", "min", "samp_to_comms[].append", "bool", "rawsco.ndf_to_rawsco.sweep"], "function", ["None"], ["def", "ndf_to_rawsco", "(", "ndf", ")", ":", "\n", "  ", "clock", "=", "float", "(", "ndf", "[", "0", "]", "[", "1", "]", ")", "\n", "if", "abs", "(", "clock", "-", "1789773", ")", "<", "2", ":", "\n", "# NTSC", "\n", "    ", "fc_rate_4", "=", "240.", "\n", "fc_rate_5", "=", "192.", "\n", "", "else", ":", "\n", "# PAL", "\n", "    ", "fc_rate_4", "=", "200.", "\n", "fc_rate_5", "=", "160.", "\n", "", "fc_rate_4_inv", "=", "1.", "/", "fc_rate_4", "\n", "fc_rate_5_inv", "=", "1.", "/", "fc_rate_5", "\n", "ndf", "=", "ndf", "[", "1", ":", "]", "\n", "\n", "# Gather timings", "\n", "samp_to_comms", "=", "defaultdict", "(", "list", ")", "\n", "nsamps", "=", "0", "\n", "for", "comm", "in", "ndf", ":", "\n", "    ", "if", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "nsamps", "+=", "comm", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "assert", "comm", "[", "0", "]", "==", "'apu'", "\n", "samp_to_comms", "[", "nsamps", "]", ".", "append", "(", "comm", ")", "\n", "\n", "# Set up APU register state", "\n", "", "", "ch_to_status", "=", "{", "'p1'", ":", "1", ",", "'p2'", ":", "1", ",", "'tr'", ":", "1", ",", "'no'", ":", "1", "}", "\n", "ch_to_du", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", "}", "\n", "ch_to_lh", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'tr'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_cv", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_vo", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_se", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", "}", "\n", "ch_to_sp", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", "}", "\n", "ch_to_sn", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", "}", "\n", "ch_to_ss", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", "}", "\n", "tr_lr", "=", "0", "\n", "no_nl", "=", "0", "\n", "no_np", "=", "0", "\n", "\n", "# Set up APU auxiliary state", "\n", "ch_to_stimer", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", "}", "\n", "ch_to_timer", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'tr'", ":", "0", "}", "\n", "ch_to_timer_last", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'tr'", ":", "0", "}", "\n", "ch_to_length_counter", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'tr'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_retrigger", "=", "{", "'p1'", ":", "False", ",", "'p2'", ":", "False", "}", "\n", "ch_to_env", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_env_start_flag", "=", "{", "'p1'", ":", "False", ",", "'p2'", ":", "False", ",", "'no'", ":", "False", "}", "\n", "ch_to_env_divider", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_env_decay_level", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "ch_to_swe_divider", "=", "{", "'p1'", ":", "1", ",", "'p2'", ":", "1", "}", "\n", "ch_to_swe_write", "=", "{", "'p1'", ":", "False", ",", "'p2'", ":", "False", "}", "\n", "tr_linear_counter", "=", "0", "\n", "tr_reload", "=", "False", "\n", "\n", "# Set up frame counter state", "\n", "fc_dt", "=", "fc_rate_4_inv", "\n", "fc_t", "=", "0.", "\n", "fc_tick", "=", "0", "\n", "fc_changed", "=", "False", "\n", "\n", "# Set up score state", "\n", "ch_to_midi", "=", "{", "'p1'", ":", "0", ",", "'p2'", ":", "0", ",", "'tr'", ":", "0", ",", "'no'", ":", "0", "}", "\n", "rawsco", "=", "np", ".", "zeros", "(", "(", "nsamps", ",", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Set up function to sweep", "\n", "def", "sweep", "(", "ch", ")", ":", "\n", "    ", "shifted", "=", "ch_to_timer", "[", "ch", "]", ">>", "ch_to_ss", "[", "ch", "]", "\n", "if", "ch", "==", "'p1'", "and", "ch_to_sn", "[", "ch", "]", "==", "1", ":", "\n", "      ", "shifted", "+=", "1", "\n", "", "shifted", "*=", "-", "1", "if", "ch_to_sn", "[", "ch", "]", "==", "1", "else", "1", "\n", "ch_to_stimer", "[", "ch", "]", "=", "ch_to_timer", "[", "ch", "]", "+", "shifted", "\n", "\n", "# Extract musical transcript by emulating APU", "\n", "", "for", "samp", "in", "xrange", "(", "nsamps", ")", ":", "\n", "# Frame counter (in between samples)", "\n", "    ", "quarter_frame", "=", "False", "\n", "half_frame", "=", "False", "\n", "if", "fc_changed", ":", "\n", "      ", "quarter_frame", "=", "True", "\n", "half_frame", "=", "True", "\n", "fc_changed", "=", "False", "\n", "", "fc_t", "+=", "dt", "\n", "if", "fc_t", ">", "fc_dt", ":", "\n", "      ", "quarter_frame", "=", "True", "\n", "half_frame", "=", "fc_tick", "%", "2", "==", "1", "\n", "fc_t", "-=", "fc_dt", "\n", "fc_tick", "+=", "1", "\n", "\n", "", "if", "quarter_frame", ":", "\n", "# Update triangle linear counter", "\n", "      ", "if", "tr_reload", ":", "\n", "        ", "tr_linear_counter", "=", "tr_lr", "\n", "", "else", ":", "\n", "        ", "tr_linear_counter", "-=", "1", "\n", "", "if", "ch_to_lh", "[", "'tr'", "]", "==", "0", ":", "\n", "        ", "tr_reload", "=", "False", "\n", "\n", "# Update envelopes", "\n", "", "for", "ch", "in", "[", "'p1'", ",", "'p2'", ",", "'no'", "]", ":", "\n", "# https://wiki.nesdev.com/w/index.php/APU_Envelope", "\n", "# https://github.com/vgmrips/vgmplay/blob/master/VGMPlay/chips/np_nes_apu.c#L129", "\n", "        ", "divider", "=", "False", "\n", "if", "ch_to_env_start_flag", "[", "ch", "]", ":", "\n", "          ", "ch_to_env_start_flag", "[", "ch", "]", "=", "False", "\n", "ch_to_env_decay_level", "[", "ch", "]", "=", "15", "\n", "ch_to_env_divider", "[", "ch", "]", "=", "0", "\n", "", "else", ":", "\n", "          ", "ch_to_env_divider", "[", "ch", "]", "+=", "1", "\n", "if", "ch_to_env_divider", "[", "ch", "]", ">", "ch_to_vo", "[", "ch", "]", ":", "\n", "            ", "divider", "=", "True", "\n", "ch_to_env_divider", "[", "ch", "]", "=", "0", "\n", "", "", "if", "divider", ":", "\n", "          ", "if", "ch_to_lh", "[", "ch", "]", "==", "1", "and", "ch_to_env_decay_level", "[", "ch", "]", "==", "0", ":", "\n", "            ", "ch_to_env_decay_level", "[", "ch", "]", "=", "15", "\n", "", "elif", "ch_to_env_decay_level", "[", "ch", "]", ">", "0", ":", "\n", "            ", "ch_to_env_decay_level", "[", "ch", "]", "-=", "1", "\n", "\n", "", "", "", "", "if", "half_frame", ":", "\n", "# Decrement counters", "\n", "      ", "for", "ch", "in", "[", "'p1'", ",", "'p2'", ",", "'tr'", ",", "'no'", "]", ":", "\n", "        ", "if", "ch_to_lh", "[", "ch", "]", "==", "0", ":", "\n", "          ", "ch_to_length_counter", "[", "ch", "]", "-=", "1", "\n", "\n", "# Sweep updates", "\n", "# https://github.com/vgmrips/vgmplay/blob/master/VGMPlay/chips/np_nes_apu.c#L161", "\n", "", "", "for", "ch", "in", "[", "'p1'", ",", "'p2'", "]", ":", "\n", "        ", "if", "ch_to_se", "[", "ch", "]", ":", "\n", "          ", "ch_to_swe_divider", "[", "ch", "]", "-=", "1", "\n", "\n", "if", "ch_to_swe_divider", "[", "ch", "]", "<=", "0", ":", "\n", "            ", "sweep", "(", "ch", ")", "\n", "if", "ch_to_timer", "[", "ch", "]", ">=", "8", "and", "ch_to_stimer", "[", "ch", "]", "<", "0x800", "and", "ch_to_ss", "[", "ch", "]", ">", "0", ":", "\n", "              ", "ch_to_timer", "[", "ch", "]", "=", "0", "if", "ch_to_stimer", "[", "ch", "]", "<", "0", "else", "ch_to_stimer", "[", "ch", "]", "\n", "", "ch_to_swe_divider", "[", "ch", "]", "=", "ch_to_sp", "[", "ch", "]", "+", "1", "\n", "\n", "", "if", "ch_to_swe_write", "[", "ch", "]", ":", "\n", "            ", "ch_to_swe_divider", "[", "ch", "]", "=", "ch_to_sp", "[", "ch", "]", "+", "1", "\n", "ch_to_swe_write", "[", "ch", "]", "=", "False", "\n", "\n", "# Update state based on commands", "\n", "", "", "", "", "for", "comm", "in", "samp_to_comms", "[", "samp", "]", ":", "\n", "      ", "ch", ",", "fu", ",", "val", "=", "comm", "[", "1", ":", "4", "]", "\n", "if", "ch", "==", "'dm'", "or", "fu", "==", "'dm'", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "fu", "==", "'du'", ":", "\n", "        ", "ch_to_du", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'lh'", ":", "\n", "        ", "ch_to_lh", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'cv'", ":", "\n", "        ", "ch_to_cv", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'vo'", ":", "\n", "        ", "ch_to_vo", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'se'", ":", "\n", "        ", "ch_to_se", "[", "ch", "]", "=", "val", "\n", "ch_to_swe_write", "[", "ch", "]", "=", "True", "\n", "sweep", "(", "ch", ")", "\n", "", "elif", "fu", "==", "'sp'", ":", "\n", "        ", "ch_to_sp", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'sn'", ":", "\n", "        ", "ch_to_sn", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'ss'", ":", "\n", "        ", "ch_to_ss", "[", "ch", "]", "=", "val", "\n", "", "elif", "fu", "==", "'th'", ":", "\n", "        ", "ch_to_timer", "[", "ch", "]", "&=", "0b00011111111", "\n", "ch_to_timer", "[", "ch", "]", "|=", "(", "val", "<<", "8", ")", "\n", "if", "ch", "==", "'p1'", "or", "ch", "==", "'p2'", ":", "\n", "          ", "sweep", "(", "ch", ")", "\n", "", "", "elif", "fu", "==", "'tl'", ":", "\n", "        ", "ch_to_timer", "[", "ch", "]", "&=", "0b11100000000", "\n", "ch_to_timer", "[", "ch", "]", "|=", "val", "\n", "if", "ch", "==", "'p1'", "or", "ch", "==", "'p2'", ":", "\n", "          ", "sweep", "(", "ch", ")", "\n", "", "", "elif", "fu", "==", "'ll'", ":", "\n", "        ", "if", "ch_to_status", "[", "ch", "]", "==", "1", ":", "\n", "          ", "ch_to_length_counter", "[", "ch", "]", "=", "nesmdb", ".", "apu", ".", "length_counter_table", "[", "val", "]", "\n", "\n", "", "if", "ch", "==", "'tr'", ":", "\n", "          ", "tr_reload", "=", "True", "\n", "", "else", ":", "\n", "          ", "ch_to_retrigger", "[", "ch", "]", "=", "True", "\n", "ch_to_env_start_flag", "[", "ch", "]", "=", "True", "\n", "", "", "elif", "ch", "==", "'ch'", ":", "\n", "        ", "ch_to_status", "[", "fu", "]", "=", "val", "\n", "if", "val", "==", "0", ":", "\n", "          ", "ch_to_length_counter", "[", "fu", "]", "=", "0", "\n", "\n", "", "", "if", "ch", "==", "'tr'", "and", "fu", "==", "'lr'", ":", "\n", "        ", "tr_lr", "=", "val", "\n", "\n", "", "if", "ch", "==", "'no'", "and", "fu", "==", "'nl'", ":", "\n", "        ", "no_nl", "=", "val", "\n", "", "if", "ch", "==", "'no'", "and", "fu", "==", "'np'", ":", "\n", "        ", "no_np", "=", "val", "\n", "\n", "", "if", "ch", "==", "'fc'", "and", "fu", "==", "'mo'", ":", "\n", "        ", "fc_dt", "=", "fc_rate_5_inv", "if", "bool", "(", "val", ")", "else", "fc_rate_4_inv", "\n", "fc_t", "=", "0.", "\n", "fc_tick", "=", "0", "\n", "fc_changed", "=", "True", "\n", "\n", "# Fill in pulse score", "\n", "", "", "for", "i", ",", "ch", "in", "zip", "(", "[", "0", ",", "1", "]", ",", "[", "'p1'", ",", "'p2'", "]", ")", ":", "\n", "      ", "if", "ch_to_length_counter", "[", "ch", "]", ">", "0", ":", "\n", "        ", "vo", "=", "ch_to_vo", "[", "ch", "]", "if", "ch_to_cv", "[", "ch", "]", "else", "ch_to_env_decay_level", "[", "ch", "]", "\n", "if", "vo", ">", "0", "and", "ch_to_timer", "[", "ch", "]", ">=", "8", "and", "ch_to_stimer", "[", "ch", "]", "<", "0x800", ":", "\n", "          ", "rawsco", "[", "samp", ",", "i", ",", "0", "]", "=", "(", "ch_to_timer", "[", "ch", "]", "&", "0b11100000000", ")", ">>", "8", "\n", "rawsco", "[", "samp", ",", "i", ",", "1", "]", "=", "(", "ch_to_timer", "[", "ch", "]", "&", "0b00011111111", ")", "\n", "rawsco", "[", "samp", ",", "i", ",", "2", "]", "=", "vo", "\n", "", "", "rawsco", "[", "samp", ",", "i", ",", "3", "]", "=", "ch_to_du", "[", "ch", "]", "\n", "#rawsco[samp, i, 4] = int(ch_to_retrigger[ch])", "\n", "ch_to_retrigger", "[", "ch", "]", "=", "False", "\n", "\n", "# Fill in triangle score", "\n", "", "lc", "=", "min", "(", "ch_to_length_counter", "[", "'tr'", "]", ",", "tr_linear_counter", ")", "\n", "if", "lc", ">", "0", ":", "\n", "      ", "rawsco", "[", "samp", ",", "2", ",", "0", "]", "=", "(", "ch_to_timer", "[", "'tr'", "]", "&", "0b11100000000", ")", ">>", "8", "\n", "rawsco", "[", "samp", ",", "2", ",", "1", "]", "=", "(", "ch_to_timer", "[", "'tr'", "]", "&", "0b00011111111", ")", "\n", "#rawsco[samp, 2, 2] = 0", "\n", "#rawsco[samp, 2, 3] = 0", "\n", "\n", "# Fill in noise score", "\n", "", "if", "ch_to_length_counter", "[", "'no'", "]", ">", "0", ":", "\n", "      ", "vo", "=", "ch_to_vo", "[", "'no'", "]", "if", "ch_to_cv", "[", "'no'", "]", "else", "ch_to_env_decay_level", "[", "'no'", "]", "\n", "if", "vo", ">", "0", ":", "\n", "#rawsco[samp, 3, 0] = 0", "\n", "        ", "rawsco", "[", "samp", ",", "3", ",", "1", "]", "=", "16", "-", "no_np", "\n", "rawsco", "[", "samp", ",", "3", ",", "2", "]", "=", "vo", "\n", "", "", "rawsco", "[", "samp", ",", "3", ",", "3", "]", "=", "no_nl", "\n", "\n", "", "return", "(", "clock", ",", "44100", ",", "nsamps", ",", "rawsco", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.rawsco.rawsco_to_ndf": [[245, 366], ["xrange", "enumerate", "ndf.append", "ndf.append", "int", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "min", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "ndf.append", "int"], "function", ["None"], ["", "def", "rawsco_to_ndf", "(", "rawsco", ")", ":", "\n", "  ", "clock", ",", "rate", ",", "nsamps", ",", "score", "=", "rawsco", "\n", "\n", "if", "rate", "==", "44100", ":", "\n", "    ", "ar", "=", "True", "\n", "", "else", ":", "\n", "    ", "ar", "=", "False", "\n", "\n", "", "max_i", "=", "score", ".", "shape", "[", "0", "]", "\n", "\n", "samp", "=", "0", "\n", "t", "=", "0.", "\n", "# ('apu', ch, func, func_val, natoms, offset)", "\n", "ndf", "=", "[", "\n", "(", "'clock'", ",", "int", "(", "clock", ")", ")", ",", "\n", "(", "'apu'", ",", "'ch'", ",", "'p1'", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'ch'", ",", "'p2'", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'ch'", ",", "'tr'", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'ch'", ",", "'no'", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p1'", ",", "'du'", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p1'", ",", "'lh'", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p1'", ",", "'cv'", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p1'", ",", "'vo'", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p1'", ",", "'ss'", ",", "7", ",", "2", ",", "1", ")", ",", "# This is necessary to prevent channel silence for low notes", "\n", "(", "'apu'", ",", "'p2'", ",", "'du'", ",", "0", ",", "3", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p2'", ",", "'lh'", ",", "1", ",", "3", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p2'", ",", "'cv'", ",", "1", ",", "3", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p2'", ",", "'vo'", ",", "0", ",", "3", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'p2'", ",", "'ss'", ",", "7", ",", "4", ",", "1", ")", ",", "# This is necessary to prevent channel silence for low notes", "\n", "(", "'apu'", ",", "'tr'", ",", "'lh'", ",", "1", ",", "5", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'tr'", ",", "'lr'", ",", "127", ",", "5", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'no'", ",", "'lh'", ",", "1", ",", "6", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'no'", ",", "'cv'", ",", "1", ",", "6", ",", "0", ")", ",", "\n", "(", "'apu'", ",", "'no'", ",", "'vo'", ",", "0", ",", "6", ",", "0", ")", ",", "\n", "]", "\n", "ch_to_last_tl", "=", "{", "ch", ":", "0", "for", "ch", "in", "[", "'p1'", ",", "'p2'", "]", "}", "\n", "ch_to_last_th", "=", "{", "ch", ":", "0", "for", "ch", "in", "[", "'p1'", ",", "'p2'", "]", "}", "\n", "ch_to_last_timer", "=", "{", "ch", ":", "0", "for", "ch", "in", "[", "'p1'", ",", "'p2'", ",", "'tr'", "]", "}", "\n", "ch_to_last_du", "=", "{", "ch", ":", "0", "for", "ch", "in", "[", "'p1'", ",", "'p2'", "]", "}", "\n", "ch_to_last_volume", "=", "{", "ch", ":", "0", "for", "ch", "in", "[", "'p1'", ",", "'p2'", ",", "'no'", "]", "}", "\n", "last_no_np", "=", "0", "\n", "last_no_nl", "=", "0", "\n", "\n", "for", "i", "in", "xrange", "(", "max_i", ")", ":", "\n", "    ", "for", "j", ",", "ch", "in", "enumerate", "(", "[", "'p1'", ",", "'p2'", "]", ")", ":", "\n", "      ", "th", ",", "tl", ",", "volume", ",", "du", "=", "score", "[", "i", ",", "j", "]", "\n", "timer", "=", "(", "th", "<<", "8", ")", "+", "tl", "\n", "last_timer", "=", "ch_to_last_timer", "[", "ch", "]", "\n", "\n", "# NOTE: This will never be perfect reconstruction because phase is not incremented when the channel is off", "\n", "retrigger", "=", "False", "\n", "if", "last_timer", "==", "0", "and", "timer", "!=", "0", ":", "\n", "        ", "ndf", ".", "append", "(", "(", "'apu'", ",", "'ch'", ",", "ch", ",", "1", ",", "0", ",", "0", ")", ")", "\n", "retrigger", "=", "True", "\n", "", "elif", "last_timer", "!=", "0", "and", "timer", "==", "0", ":", "\n", "        ", "ndf", ".", "append", "(", "(", "'apu'", ",", "'ch'", ",", "ch", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "if", "du", "!=", "ch_to_last_du", "[", "ch", "]", ":", "\n", "        ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'du'", ",", "du", ",", "0", ",", "0", ")", ")", "\n", "ch_to_last_du", "[", "ch", "]", "=", "du", "\n", "\n", "", "if", "volume", ">", "0", "and", "volume", "!=", "ch_to_last_volume", "[", "ch", "]", ":", "\n", "        ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'vo'", ",", "volume", ",", "0", ",", "0", ")", ")", "\n", "", "ch_to_last_volume", "[", "ch", "]", "=", "volume", "\n", "\n", "if", "tl", "!=", "ch_to_last_tl", "[", "ch", "]", ":", "\n", "        ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'tl'", ",", "tl", ",", "0", ",", "2", ")", ")", "\n", "ch_to_last_tl", "[", "ch", "]", "=", "tl", "\n", "", "if", "retrigger", "or", "th", "!=", "ch_to_last_th", "[", "ch", "]", ":", "\n", "        ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'th'", ",", "th", ",", "0", ",", "3", ")", ")", "\n", "ch_to_last_th", "[", "ch", "]", "=", "th", "\n", "\n", "", "ch_to_last_timer", "[", "ch", "]", "=", "timer", "\n", "\n", "", "j", "=", "2", "\n", "ch", "=", "'tr'", "\n", "th", ",", "tl", ",", "_", ",", "_", "=", "score", "[", "i", ",", "j", "]", "\n", "timer", "=", "(", "th", "<<", "8", ")", "+", "tl", "\n", "last_timer", "=", "ch_to_last_timer", "[", "ch", "]", "\n", "if", "last_timer", "==", "0", "and", "timer", "!=", "0", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "'ch'", ",", "ch", ",", "1", ",", "0", ",", "0", ")", ")", "\n", "", "elif", "last_timer", "!=", "0", "and", "timer", "==", "0", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "'ch'", ",", "ch", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "", "if", "timer", "!=", "last_timer", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'tl'", ",", "tl", ",", "0", ",", "2", ")", ")", "\n", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'th'", ",", "th", ",", "0", ",", "3", ")", ")", "\n", "", "ch_to_last_timer", "[", "ch", "]", "=", "timer", "\n", "\n", "j", "=", "3", "\n", "ch", "=", "'no'", "\n", "_", ",", "np", ",", "volume", ",", "nl", "=", "score", "[", "i", ",", "j", "]", "\n", "if", "last_no_np", "==", "0", "and", "np", "!=", "0", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "'ch'", ",", "ch", ",", "1", ",", "0", ",", "0", ")", ")", "\n", "", "elif", "last_no_np", "!=", "0", "and", "np", "==", "0", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "'ch'", ",", "ch", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "", "if", "volume", ">", "0", "and", "volume", "!=", "ch_to_last_volume", "[", "ch", "]", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'vo'", ",", "volume", ",", "0", ",", "0", ")", ")", "\n", "", "ch_to_last_volume", "[", "ch", "]", "=", "volume", "\n", "if", "nl", "!=", "last_no_nl", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'nl'", ",", "nl", ",", "0", ",", "2", ")", ")", "\n", "last_no_nl", "=", "nl", "\n", "", "if", "np", ">", "0", "and", "np", "!=", "last_no_np", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'np'", ",", "16", "-", "np", ",", "0", ",", "2", ")", ")", "\n", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "'ll'", ",", "0", ",", "0", ",", "3", ")", ")", "\n", "", "last_no_np", "=", "np", "\n", "\n", "if", "ar", ":", "\n", "      ", "wait_amt", "=", "1", "\n", "", "else", ":", "\n", "      ", "t", "+=", "1.", "/", "rate", "\n", "wait_amt", "=", "min", "(", "int", "(", "fs", "*", "t", ")", "-", "samp", ",", "nsamps", "-", "samp", ")", "\n", "\n", "", "ndf", ".", "append", "(", "(", "'wait'", ",", "wait_amt", ")", ")", "\n", "samp", "+=", "wait_amt", "\n", "\n", "", "remaining", "=", "nsamps", "-", "samp", "\n", "assert", "remaining", ">=", "0", "\n", "if", "remaining", ">", "0", ":", "\n", "    ", "ndf", ".", "append", "(", "(", "'wait'", ",", "remaining", ")", ")", "\n", "\n", "", "return", "ndf", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.blndsco.exprsco_to_blndsco": [[4, 14], ["xrange", "list", "sorted", "blndsco.append", "filter"], "function", ["None"], ["def", "exprsco_to_blndsco", "(", "exprsco", ")", ":", "\n", "  ", "rate", ",", "nsamps", ",", "score", "=", "exprsco", "\n", "\n", "blndsco", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "score", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "score_slice", "=", "list", "(", "score", "[", "i", ",", ":", "3", ",", "0", "]", ")", "\n", "score_slice", "=", "sorted", "(", "filter", "(", "lambda", "x", ":", "x", ">", "0", ",", "score_slice", ")", ")", "\n", "blndsco", ".", "append", "(", "score_slice", ")", "\n", "\n", "", "return", "(", "rate", ",", "nsamps", ",", "blndsco", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.score.blndsco.blndsco_to_exprsco": [[16, 29], ["len", "numpy.zeros", "enumerate", "enumerate"], "function", ["None"], ["", "def", "blndsco_to_exprsco", "(", "blndsco", ")", ":", "\n", "  ", "rate", ",", "nsamps", ",", "score", "=", "blndsco", "\n", "\n", "score_len", "=", "len", "(", "score", ")", "\n", "\n", "exprsco", "=", "np", ".", "zeros", "(", "(", "score_len", ",", "4", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "i", ",", "frame", "in", "enumerate", "(", "score", ")", ":", "\n", "    ", "for", "j", ",", "note", "in", "enumerate", "(", "frame", "[", ":", "3", "]", ")", ":", "\n", "      ", "exprsco", "[", "i", ",", "j", ",", "0", "]", "=", "note", "\n", "exprsco", "[", "i", ",", "j", ",", "1", "]", "=", "0", "if", "j", "==", "2", "else", "15", "\n", "\n", "", "", "return", "(", "rate", ",", "nsamps", ",", "exprsco", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.ndr_ndf.ndr_to_ndf": [[7, 80], ["ndf.append", "b2c", "b2c", "h2b", "h2b", "mask_bin.count", "ndf.append", "NotImplementedError", "max", "mask_bin.rfind", "NotImplementedError"], "function", ["None"], ["def", "ndr_to_ndf", "(", "ndr", ")", ":", "\n", "  ", "ndf", "=", "ndr", "[", ":", "1", "]", "\n", "ndr", "=", "ndr", "[", "1", ":", "]", "\n", "\n", "registers", "=", "{", "\n", "'p1'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'p2'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'tr'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'no'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'dm'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'ch'", ":", "[", "0x00", "]", ",", "\n", "'fc'", ":", "[", "0x00", "]", "\n", "}", "\n", "\n", "# Expand", "\n", "natoms", "=", "0", "\n", "for", "comm", "in", "ndr", ":", "\n", "    ", "if", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "ndf", ".", "append", "(", "comm", ")", "\n", "natoms", "=", "0", "\n", "", "elif", "comm", "[", "0", "]", "==", "'apu'", ":", "\n", "      ", "reg", "=", "b2c", "(", "h2b", "(", "comm", "[", "1", "]", ")", ")", "\n", "val", "=", "b2c", "(", "h2b", "(", "comm", "[", "2", "]", ")", ")", "\n", "\n", "# Determine channel", "\n", "if", "reg", ">=", "0x00", "and", "reg", "<", "0x04", ":", "\n", "        ", "ch", "=", "'p1'", "\n", "", "elif", "reg", ">=", "0x04", "and", "reg", "<", "0x08", ":", "\n", "        ", "ch", "=", "'p2'", "\n", "", "elif", "reg", ">=", "0x08", "and", "reg", "<", "0x0C", ":", "\n", "        ", "ch", "=", "'tr'", "\n", "", "elif", "reg", ">=", "0x0C", "and", "reg", "<", "0x10", ":", "\n", "        ", "ch", "=", "'no'", "\n", "", "elif", "reg", ">=", "0x10", "and", "reg", "<", "0x14", ":", "\n", "        ", "ch", "=", "'dm'", "\n", "", "elif", "reg", "==", "0x15", ":", "\n", "        ", "ch", "=", "'ch'", "\n", "", "elif", "reg", "==", "0x17", ":", "\n", "        ", "ch", "=", "'fc'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unknown register {}'", ".", "format", "(", "comm", "[", "1", "]", ")", ")", "\n", "\n", "# Calculate offset for this channel", "\n", "", "offset", "=", "reg", "-", "register_memory_offsets", "[", "ch", "]", "\n", "assert", "offset", ">=", "0", "\n", "\n", "# Log write to this register", "\n", "regtup", "=", "(", "ch", ",", "offset", ")", "\n", "ch_regs", "=", "registers", "[", "ch", "]", "\n", "\n", "# Mask register change to functional changes", "\n", "masks", "=", "register_function_bitmasks", "[", "ch", "]", "[", "offset", "]", "\n", "for", "func", ",", "mask", "in", "masks", ":", "\n", "        ", "mask_bin", "=", "'{:08b}'", ".", "format", "(", "mask", ")", "\n", "nbits", "=", "mask_bin", ".", "count", "(", "'1'", ")", "\n", "shift", "=", "max", "(", "0", ",", "7", "-", "mask_bin", ".", "rfind", "(", "'1'", ")", ")", "%", "8", "\n", "\n", "func_val", "=", "(", "val", "&", "mask", ")", ">>", "shift", "\n", "\n", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "func", ",", "func_val", ",", "natoms", ",", "offset", ")", ")", "\n", "\n", "# Write value to register", "\n", "", "ch_regs", "[", "offset", "]", "=", "val", "\n", "assert", "ch_regs", "[", "offset", "]", "<", "256", "\n", "natoms", "+=", "1", "\n", "", "elif", "comm", "[", "0", "]", "==", "'ram'", ":", "\n", "      ", "continue", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "comm", "[", "0", "]", ")", "\n", "\n", "# TODO: consider re-enabling compress", "\n", "#return ndf_compress(ndf)", "\n", "", "", "return", "ndf", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.ndr_ndf.ndf_compress": [[82, 134], ["len", "collections.OrderedDict", "ch_func_to_comms[].append", "ndf_out.append", "atomic_comms.append", "atomic_comms.append", "ndf_out.append", "len", "ndf_out.append"], "function", ["None"], ["", "def", "ndf_compress", "(", "ndf", ")", ":", "\n", "  ", "ndf_out", "=", "[", "]", "\n", "\n", "# Remove redundant commands", "\n", "comm_i", "=", "0", "\n", "while", "comm_i", "<", "len", "(", "ndf", ")", ":", "\n", "# Gather all atomic commands (within a wait)", "\n", "    ", "comm", "=", "(", "None", ",", ")", "\n", "atomic_comms", "=", "[", "]", "\n", "while", "comm", "[", "0", "]", "!=", "'wait'", ":", "\n", "      ", "if", "comm", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "atomic_comms", ".", "append", "(", "comm", ")", "\n", "", "comm", "=", "ndf", "[", "comm_i", "]", "\n", "comm_i", "+=", "1", "\n", "\n", "# If we're not ending on a wait, add last comm to atoms", "\n", "if", "comm", "[", "0", "]", "!=", "'wait'", "and", "comm_i", "==", "len", "(", "ndf", ")", ":", "\n", "        ", "atomic_comms", ".", "append", "(", "comm", ")", "\n", "break", "\n", "\n", "# Store wait command", "\n", "", "", "if", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "wait_comm", "=", "comm", "\n", "", "else", ":", "\n", "      ", "wait_comm", "=", "None", "\n", "\n", "# Aggregate redundant commands", "\n", "", "ch_func_to_comms", "=", "OrderedDict", "(", ")", "\n", "for", "comm", "in", "atomic_comms", ":", "\n", "      ", "ch_func", "=", "comm", "[", "1", ":", "3", "]", "\n", "\n", "if", "ch_func", "not", "in", "ch_func_to_comms", ":", "\n", "        ", "ch_func_to_comms", "[", "ch_func", "]", "=", "[", "]", "\n", "", "ch_func_to_comms", "[", "ch_func", "]", ".", "append", "(", "comm", ")", "\n", "\n", "# Output commands, removing redundant", "\n", "# Skips channel off commands from filtering because they set length counter to 0", "\n", "", "for", "comm", "in", "atomic_comms", ":", "\n", "      ", "if", "comm", "[", "1", "]", "==", "'ch'", ":", "\n", "        ", "ndf_out", ".", "append", "(", "comm", ")", "\n", "", "else", ":", "\n", "        ", "ch_func_comms", "=", "ch_func_to_comms", "[", "comm", "[", "1", ":", "3", "]", "]", "\n", "if", "comm", "==", "ch_func_comms", "[", "-", "1", "]", ":", "\n", "          ", "ndf_out", ".", "append", "(", "comm", ")", "\n", "\n", "# Output wait command", "\n", "", "", "", "if", "wait_comm", "is", "not", "None", ":", "\n", "      ", "ndf_out", ".", "append", "(", "wait_comm", ")", "\n", "\n", "", "", "ndf", "=", "ndf_out", "\n", "\n", "return", "ndf", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.ndr_ndf.ndf_to_ndr": [[136, 200], ["collections.OrderedDict", "collections.OrderedDict.items", "ndr.append", "collections.OrderedDict.items", "collections.OrderedDict", "ndr.append", "ndr.append", "func_to_bitmask", "mask_bin.count", "b2h", "b2h", "ValueError", "max", "NotImplementedError", "c2b", "c2b", "b2h", "b2h", "c2b", "c2b", "mask_bin.rfind"], "function", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_bitmask"], ["", "def", "ndf_to_ndr", "(", "ndf", ")", ":", "\n", "  ", "ndr", "=", "ndf", "[", ":", "1", "]", "\n", "ndf", "=", "ndf", "[", "1", ":", "]", "\n", "\n", "registers", "=", "{", "\n", "'p1'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'p2'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'tr'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'no'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'dm'", ":", "[", "0x00", "]", "*", "4", ",", "\n", "'ch'", ":", "[", "0x00", "]", ",", "\n", "'fc'", ":", "[", "0x00", "]", "\n", "}", "\n", "\n", "# Convert commands to VGM", "\n", "regn_to_val", "=", "OrderedDict", "(", ")", "\n", "for", "comm", "in", "ndf", ":", "\n", "    ", "itype", "=", "comm", "[", "0", "]", "\n", "if", "itype", "==", "'wait'", ":", "\n", "      ", "for", "_", ",", "(", "arg1", ",", "arg2", ")", "in", "regn_to_val", ".", "items", "(", ")", ":", "\n", "        ", "ndr", ".", "append", "(", "(", "'apu'", ",", "b2h", "(", "c2b", "(", "arg1", ")", ")", ",", "b2h", "(", "c2b", "(", "arg2", ")", ")", ")", ")", "\n", "", "regn_to_val", "=", "OrderedDict", "(", ")", "\n", "\n", "amt", "=", "comm", "[", "1", "]", "\n", "\n", "ndr", ".", "append", "(", "(", "'wait'", ",", "amt", ")", ")", "\n", "", "elif", "itype", "==", "'apu'", ":", "\n", "      ", "dest", "=", "comm", "[", "1", "]", "\n", "param", "=", "comm", "[", "2", "]", "\n", "val", "=", "comm", "[", "3", "]", "\n", "natoms", "=", "comm", "[", "4", "]", "\n", "param_offset", "=", "comm", "[", "5", "]", "\n", "\n", "# Find offset/bitmask", "\n", "reg", "=", "registers", "[", "dest", "]", "\n", "param_bitmask", "=", "func_to_bitmask", "(", "dest", ",", "param", ")", "\n", "\n", "# Apply mask", "\n", "mask_bin", "=", "'{:08b}'", ".", "format", "(", "param_bitmask", ")", "\n", "nbits", "=", "mask_bin", ".", "count", "(", "'1'", ")", "\n", "if", "val", "<", "0", "or", "val", ">=", "(", "2", "**", "nbits", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'{}, {} (0, {}]: invalid value specified {}'", ".", "format", "(", "comm", "[", "1", "]", ",", "comm", "[", "2", "]", ",", "(", "2", "**", "nbits", ")", ",", "val", ")", ")", "\n", "", "assert", "val", ">=", "0", "and", "val", "<", "(", "2", "**", "nbits", ")", "\n", "shift", "=", "max", "(", "0", ",", "7", "-", "mask_bin", ".", "rfind", "(", "'1'", ")", ")", "%", "8", "\n", "val_old", "=", "reg", "[", "param_offset", "]", "\n", "reg", "[", "param_offset", "]", "&=", "(", "255", "-", "param_bitmask", ")", "\n", "reg", "[", "param_offset", "]", "|=", "val", "<<", "shift", "\n", "assert", "reg", "[", "param_offset", "]", "<", "256", "\n", "val_new", "=", "reg", "[", "param_offset", "]", "\n", "\n", "arg1", "=", "register_memory_offsets", "[", "dest", "]", "+", "param_offset", "\n", "arg2", "=", "reg", "[", "param_offset", "]", "\n", "\n", "regn_to_val", "[", "(", "dest", ",", "param_offset", ",", "natoms", ")", "]", "=", "(", "arg1", ",", "arg2", ")", "\n", "", "elif", "itype", "==", "'ram'", ":", "\n", "# TODO", "\n", "      ", "continue", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "for", "_", ",", "(", "arg1", ",", "arg2", ")", "in", "regn_to_val", ".", "items", "(", ")", ":", "\n", "    ", "ndr", ".", "append", "(", "(", "'apu'", ",", "b2h", "(", "c2b", "(", "arg1", ")", ")", ",", "b2h", "(", "c2b", "(", "arg2", ")", ")", ")", ")", "\n", "\n", "", "return", "ndr", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.ndf_nlm.ndf_to_nlm": [[27, 80], ["collections.defaultdict", "set", "lm.append", "lm_nu.append", "lm_nu.append", "set.add", "NotImplementedError", "lm.append"], "function", ["None"], ["def", "ndf_to_nlm", "(", "ndf", ")", ":", "\n", "  ", "func_to_val", "=", "defaultdict", "(", "int", ")", "\n", "func_to_val", "[", "'ch_p1'", "]", "=", "1", "\n", "func_to_val", "[", "'ch_p2'", "]", "=", "1", "\n", "func_to_val", "[", "'ch_tr'", "]", "=", "1", "\n", "func_to_val", "[", "'ch_no'", "]", "=", "1", "\n", "func_to_val", "[", "'ch_dm'", "]", "=", "1", "\n", "\n", "funcs", "=", "set", "(", ")", "\n", "\n", "lm", "=", "[", "ndf", "[", "0", "]", "]", "\n", "natom", "=", "0", "\n", "for", "comm", "in", "ndf", "[", "1", ":", "]", ":", "\n", "    ", "if", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "lm", ".", "append", "(", "comm", ")", "\n", "natom", "=", "0", "\n", "", "elif", "comm", "[", "0", "]", "==", "'apu'", ":", "\n", "      ", "ch", "=", "comm", "[", "1", "]", "\n", "fu", "=", "comm", "[", "2", "]", "\n", "val", "=", "comm", "[", "3", "]", "\n", "natom", "=", "comm", "[", "4", "]", "\n", "offset", "=", "comm", "[", "5", "]", "\n", "\n", "func", "=", "'{}_{}'", ".", "format", "(", "ch", ",", "fu", ")", "\n", "reg", "=", "'{}_{}'", ".", "format", "(", "ch", ",", "offset", ")", "\n", "\n", "funcs", ".", "add", "(", "func", ")", "\n", "\n", "delete", "=", "func", "in", "_DELETE", "\n", "changed", "=", "func_to_val", "[", "func", "]", "!=", "val", "\n", "\n", "preserve", "=", "func", "in", "_VOLATILE", "\n", "if", "func", "==", "'p1_tl'", "and", "(", "func_to_val", "[", "'p1_se'", "]", "==", "1", ")", ":", "\n", "        ", "preserve", "=", "True", "\n", "", "if", "func", "==", "'p2_tl'", "and", "(", "func_to_val", "[", "'p2_se'", "]", "==", "1", ")", ":", "\n", "        ", "preserve", "=", "True", "\n", "\n", "", "if", "(", "changed", "or", "preserve", ")", "and", "not", "delete", ":", "\n", "        ", "lm", ".", "append", "(", "comm", ")", "\n", "\n", "", "func_to_val", "[", "func", "]", "=", "val", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# Simplify syntax", "\n", "", "", "lm_nu", "=", "[", "ndf", "[", "0", "]", "]", "\n", "for", "comm", "in", "lm", "[", "1", ":", "]", ":", "\n", "    ", "if", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "lm_nu", ".", "append", "(", "(", "'w'", ",", "comm", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "lm_nu", ".", "append", "(", "(", "'{}_{}'", ".", "format", "(", "comm", "[", "1", "]", ",", "comm", "[", "2", "]", ")", ",", "comm", "[", "3", "]", ")", ")", "\n", "\n", "", "", "return", "lm_nu", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.ndf_nlm.nlm_to_ndf": [[82, 111], ["set", "ndf.append", "set", "comm[].split", "nesmdb.apu.func_to_offset", "set.add", "ndf.append", "set", "nesmdb.apu.func_to_offset"], "function", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_offset", "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.nesmdb.apu.func_to_offset"], ["", "def", "nlm_to_ndf", "(", "lm", ")", ":", "\n", "  ", "ndf", "=", "[", "lm", "[", "0", "]", "]", "\n", "\n", "offset_last", "=", "None", "\n", "natoms", "=", "0", "\n", "atom_funcs", "=", "set", "(", ")", "\n", "\n", "for", "comm", "in", "lm", "[", "1", ":", "]", ":", "\n", "    ", "if", "comm", "[", "0", "]", "==", "'w'", ":", "\n", "      ", "ndf", ".", "append", "(", "(", "'wait'", ",", "comm", "[", "1", "]", ")", ")", "\n", "\n", "offset_last", "=", "None", "\n", "natoms", "=", "0", "\n", "atom_funcs", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "      ", "ch", ",", "fu", "=", "comm", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "offset", "=", "func_to_offset", "(", "ch", ",", "fu", ")", "\n", "\n", "func", "=", "'{}_{}'", ".", "format", "(", "ch", ",", "fu", ")", "\n", "\n", "if", "offset_last", "is", "not", "None", "and", "offset_last", "!=", "offset", "or", "func", "in", "atom_funcs", ":", "\n", "        ", "atom_funcs", "=", "set", "(", ")", "\n", "natoms", "+=", "1", "\n", "", "atom_funcs", ".", "add", "(", "func", ")", "\n", "offset_last", "=", "offset", "\n", "\n", "ndf", ".", "append", "(", "(", "'apu'", ",", "ch", ",", "fu", ",", "comm", "[", "1", "]", ",", "natoms", ",", "func_to_offset", "(", "ch", ",", "fu", ")", ")", ")", "\n", "\n", "", "", "return", "ndf", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_ndr.vgm_to_ndr": [[5, 149], ["offset", "read", "b2lu", "b2lu", "offset", "b2lu", "b2lu", "offset", "b2c", "b2c", "b2c", "read", "b2p", "b2bu", "len", "Exception", "b2p", "NotImplementedError", "offset", "Exception", "Exception", "Exception", "b2p", "NotImplementedError", "b2p", "len", "b2h", "len", "h2b", "b2p", "b2lus", "ndr.append", "ndr_collapsed.append", "ndr_collapsed.append", "ndr.append", "ndr.append", "len", "b2h", "b2h", "b2lu", "ndr.append", "NotImplementedError", "ndr.append", "ndr.append", "NotImplementedError", "b2c", "b2h", "b2h", "h2b"], "function", ["None"], ["def", "vgm_to_ndr", "(", "vgm", ")", ":", "\n", "# Retrieve EOF offset", "\n", "  ", "eof_offset", "=", "offset", "(", "b2p", "(", "vgm", "[", "0x04", ":", "0x08", "]", ")", ",", "0x04", ")", "\n", "if", "b2bu", "(", "h2b", "(", "eof_offset", ")", ")", "!=", "len", "(", "vgm", ")", ":", "\n", "    ", "raise", "Exception", "(", "'EOF offset does not match file size'", ")", "\n", "\n", "# Retrieve version", "\n", "", "version", "=", "b2p", "(", "vgm", "[", "0x08", ":", "0x0c", "]", ")", "[", "-", "3", ":", "]", "\n", "if", "version", "!=", "'161'", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'Invalid version {}'", ".", "format", "(", "version", ")", ")", "\n", "\n", "# Retrieve GD3 metadata", "\n", "", "gd3_tag", "=", "read", "(", "vgm", ",", "offset", "(", "b2p", "(", "vgm", "[", "0x14", ":", "0x18", "]", ")", ",", "0x14", ")", ")", "\n", "\n", "# Retrieve system clock", "\n", "clock", "=", "b2lu", "(", "vgm", "[", "0x84", ":", "0x88", "]", ")", "\n", "use_fds", "=", "(", "clock", "&", "0x80000000", ")", "!=", "0", "\n", "two_chips", "=", "(", "clock", "&", "0x40000000", ")", "!=", "0", "\n", "if", "use_fds", ":", "\n", "    ", "raise", "Exception", "(", "'Famicon Disk System unsupported'", ")", "\n", "", "if", "two_chips", ":", "\n", "    ", "raise", "Exception", "(", "'Multiple NES APUs unsupported'", ")", "\n", "", "clock", "=", "clock", "&", "0x3fffffff", "\n", "if", "clock", "not", "in", "[", "1662607", ",", "1789772", ",", "1789773", "]", ":", "\n", "    ", "raise", "Exception", "(", "'Invalid NES APU Clock rate {}'", ".", "format", "(", "clock", ")", ")", "\n", "\n", "# Find length", "\n", "", "total_nsamps", "=", "b2lu", "(", "vgm", "[", "0x18", ":", "0x1c", "]", ")", "\n", "\n", "# Find loop offset", "\n", "# TODO: Put loop marker into output sequence", "\n", "loop_offset", "=", "offset", "(", "b2p", "(", "vgm", "[", "0x1c", ":", "0x20", "]", ")", ",", "0x1c", ")", "\n", "\n", "# Find loop samples", "\n", "loop_nsamps", "=", "b2lu", "(", "vgm", "[", "0x20", ":", "0x24", "]", ")", "\n", "\n", "# Find rate", "\n", "global_rate", "=", "b2lu", "(", "vgm", "[", "0x24", ":", "0x28", "]", ")", "\n", "if", "global_rate", "!=", "0", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'Global rate is {} (nonzero)'", ".", "format", "(", "global_rate", ")", ")", "\n", "\n", "# Find data offset", "\n", "", "vgm_data_offset", "=", "offset", "(", "b2p", "(", "vgm", "[", "0x34", ":", "0x38", "]", ")", ",", "0x34", ")", "\n", "\n", "# Find volume", "\n", "volume", "=", "b2c", "(", "vgm", "[", "0x7c", ":", "0x7d", "]", ")", "\n", "\n", "# Find loop base", "\n", "loop_base", "=", "b2c", "(", "vgm", "[", "0x7e", ":", "0x7f", "]", ")", "\n", "\n", "# Find loop modifier", "\n", "loop_modifier", "=", "b2c", "(", "vgm", "[", "0x7f", ":", "0x80", "]", ")", "\n", "\n", "# Read VGM data", "\n", "vgm_data", "=", "read", "(", "vgm", ",", "vgm_data_offset", ")", "\n", "\n", "# Parse VGM data", "\n", "i", "=", "0", "\n", "ndr", "=", "[", "(", "'clock'", ",", "clock", ")", "]", "\n", "while", "i", "<", "len", "(", "vgm_data", ")", ":", "\n", "    ", "byte", "=", "b2h", "(", "vgm_data", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "\n", "# Wait (long)", "\n", "if", "byte", "==", "'61'", ":", "\n", "      ", "arg1", "=", "vgm_data", "[", "i", "]", "\n", "i", "+=", "1", "\n", "arg2", "=", "vgm_data", "[", "i", "]", "\n", "i", "+=", "1", "\n", "\n", "wlen", "=", "b2lus", "(", "arg1", "+", "arg2", ")", "\n", "\n", "ndr", ".", "append", "(", "(", "'wait'", ",", "wlen", ")", ")", "\n", "\n", "# Wait (1/60th second for NTSC)", "\n", "", "elif", "byte", "==", "'62'", ":", "\n", "      ", "ndr", ".", "append", "(", "(", "'wait'", ",", "735", ")", ")", "\n", "\n", "# Wait (1/50th second for PAL)", "\n", "", "elif", "byte", "==", "'63'", ":", "\n", "      ", "ndr", ".", "append", "(", "(", "'wait'", ",", "882", ")", ")", "\n", "\n", "# Halt", "\n", "", "elif", "byte", "==", "'66'", ":", "\n", "      ", "break", "\n", "\n", "# Data block", "\n", "", "elif", "byte", "==", "'67'", ":", "\n", "      ", "assert", "b2h", "(", "vgm_data", "[", "i", "]", ")", "==", "'66'", "\n", "i", "+=", "1", "\n", "data_type", "=", "b2h", "(", "vgm_data", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "\n", "# NES APU RAM write", "\n", "if", "data_type", "==", "'c2'", ":", "\n", "        ", "data_size", "=", "b2lu", "(", "vgm_data", "[", "i", ":", "i", "+", "4", "]", ")", "\n", "i", "+=", "4", "\n", "ram_data", "=", "vgm_data", "[", "i", ":", "i", "+", "data_size", "]", "\n", "i", "+=", "data_size", "\n", "\n", "ndr", ".", "append", "(", "(", "'ram'", ",", "data_type", ",", "ram_data", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# Wait (short)", "\n", "", "", "elif", "byte", "[", "0", "]", "==", "'7'", ":", "\n", "      ", "ndr", ".", "append", "(", "(", "'wait'", ",", "b2c", "(", "h2b", "(", "'0'", "+", "byte", "[", "1", "]", ")", ")", "+", "1", ")", ")", "\n", "\n", "# NES APU write", "\n", "", "elif", "byte", "==", "'b4'", ":", "\n", "      ", "reg", "=", "vgm_data", "[", "i", "]", "\n", "i", "+=", "1", "\n", "val", "=", "vgm_data", "[", "i", "]", "\n", "i", "+=", "1", "\n", "\n", "ndr", ".", "append", "(", "(", "'apu'", ",", "b2h", "(", "reg", ")", ",", "b2h", "(", "val", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "byte", ")", "\n", "\n", "", "", "nwaits_real", "=", "0", "\n", "for", "co", "in", "ndr", ":", "\n", "    ", "if", "co", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "nwaits_real", "+=", "co", "[", "1", "]", "\n", "", "", "assert", "nwaits_real", "==", "total_nsamps", "\n", "\n", "ndr_collapsed", "=", "[", "]", "\n", "\n", "# Collapse adjacent waits", "\n", "comm_i", "=", "0", "\n", "while", "comm_i", "<", "len", "(", "ndr", ")", ":", "\n", "    ", "comm", "=", "ndr", "[", "comm_i", "]", "\n", "comm_i", "+=", "1", "\n", "\n", "if", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "wait_amt", "=", "comm", "[", "1", "]", "\n", "while", "comm_i", "<", "len", "(", "ndr", ")", "and", "ndr", "[", "comm_i", "]", "[", "0", "]", "==", "'wait'", ":", "\n", "        ", "wait_amt", "+=", "ndr", "[", "comm_i", "]", "[", "1", "]", "\n", "comm_i", "+=", "1", "\n", "", "ndr_collapsed", ".", "append", "(", "(", "'wait'", ",", "wait_amt", ")", ")", "\n", "", "else", ":", "\n", "      ", "ndr_collapsed", ".", "append", "(", "comm", ")", "\n", "\n", "", "", "return", "ndr_collapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_ndr.ndr_to_vgm": [[151, 206], ["i2lub", "flatten", "i2lub", "i2lub", "i2lub", "flatten.append", "flatten", "i2lub", "i2lub", "list", "c2b", "c2b", "flatten.append", "flatten.append", "len", "flatten.append", "flatten.append", "c2b", "i2lusb", "h2b", "h2b", "flatten.append", "flatten.append", "flatten.append", "c2b", "i2lusb", "c2b", "NotImplementedError", "NotImplementedError"], "function", ["None"], ["", "def", "ndr_to_vgm", "(", "ndr", ")", ":", "\n", "  ", "assert", "ndr", "[", "0", "]", "[", "0", "]", "==", "'clock'", "\n", "clock", "=", "ndr", "[", "0", "]", "[", "1", "]", "\n", "\n", "ndr", "=", "ndr", "[", "1", ":", "]", "\n", "\n", "EMPTYBYTE", "=", "i2lub", "(", "0", ")", "\n", "flatten", "=", "lambda", "vgm", ":", "list", "(", "''", ".", "join", "(", "vgm", ")", ")", "\n", "vgm", "=", "flatten", "(", "[", "EMPTYBYTE", "]", "*", "48", ")", "\n", "\n", "# VGM identifier", "\n", "vgm", "[", ":", "0x04", "]", "=", "[", "c2b", "(", "c", ")", "for", "c", "in", "[", "0x56", ",", "0x67", ",", "0x6d", ",", "0x20", "]", "]", "\n", "# Version", "\n", "vgm", "[", "0x08", ":", "0x0c", "]", "=", "i2lub", "(", "0x161", ")", "\n", "# Clock rate", "\n", "vgm", "[", "0x84", ":", "0x88", "]", "=", "i2lub", "(", "clock", ")", "\n", "# Data offset", "\n", "vgm", "[", "0x34", ":", "0x38", "]", "=", "i2lub", "(", "0xc0", "-", "0x34", ")", "\n", "\n", "wait_sum", "=", "0", "\n", "for", "comm", "in", "ndr", ":", "\n", "    ", "itype", "=", "comm", "[", "0", "]", "\n", "if", "itype", "==", "'wait'", ":", "\n", "      ", "amt", "=", "comm", "[", "1", "]", "\n", "wait_sum", "+=", "amt", "\n", "\n", "while", "amt", ">", "65535", ":", "\n", "        ", "vgm", ".", "append", "(", "c2b", "(", "0x61", ")", ")", "\n", "vgm", ".", "append", "(", "i2lusb", "(", "65535", ")", ")", "\n", "amt", "-=", "65535", "\n", "\n", "", "vgm", ".", "append", "(", "c2b", "(", "0x61", ")", ")", "\n", "vgm", ".", "append", "(", "i2lusb", "(", "amt", ")", ")", "\n", "", "elif", "itype", "==", "'apu'", ":", "\n", "      ", "arg1", "=", "h2b", "(", "comm", "[", "1", "]", ")", "\n", "arg2", "=", "h2b", "(", "comm", "[", "2", "]", ")", "\n", "vgm", ".", "append", "(", "c2b", "(", "0xb4", ")", ")", "\n", "vgm", ".", "append", "(", "arg1", ")", "\n", "vgm", ".", "append", "(", "arg2", ")", "\n", "", "elif", "itype", "==", "'ram'", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# Halt", "\n", "", "", "vgm", ".", "append", "(", "c2b", "(", "0x66", ")", ")", "\n", "vgm", "=", "flatten", "(", "vgm", ")", "\n", "\n", "# Total samples", "\n", "vgm", "[", "0x18", ":", "0x1c", "]", "=", "i2lub", "(", "wait_sum", ")", "\n", "# EoF offset", "\n", "vgm", "[", "0x04", ":", "0x08", "]", "=", "i2lub", "(", "len", "(", "vgm", ")", "-", "0x04", ")", "\n", "\n", "vgm", "=", "''", ".", "join", "(", "vgm", ")", "\n", "return", "vgm", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.nd_txt.nd_to_txt": [[1, 7], ["filter", "str"], "function", ["None"], ["def", "nd_to_txt", "(", "nd", ")", ":", "\n", "  ", "txt", "=", "filter", "(", "lambda", "c", ":", "c", "[", "0", "]", "!=", "'ram'", ",", "nd", ")", "\n", "txt", "=", "[", "','", ".", "join", "(", "[", "str", "(", "f", ")", "for", "f", "in", "c", "]", ")", "for", "c", "in", "txt", "]", "\n", "txt", "=", "'\\n'", ".", "join", "(", "txt", ")", "\n", "\n", "return", "txt", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.nd_txt.txt_to_nd": [[9, 33], ["l.strip", "l.split", "txt.splitlines", "l.startswith", "nd.append", "len", "nd.append", "int", "NotImplementedError", "int", "len", "nd.append", "nd.append", "int", "int", "int"], "function", ["None"], ["", "def", "txt_to_nd", "(", "txt", ")", ":", "\n", "  ", "txt", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "txt", ".", "splitlines", "(", ")", "]", "\n", "\n", "nd", "=", "[", "]", "\n", "for", "l", "in", "txt", ":", "\n", "    ", "if", "len", "(", "l", ")", "==", "0", "or", "l", ".", "startswith", "(", "'//'", ")", ":", "\n", "      ", "continue", "\n", "\n", "", "comm", "=", "l", ".", "split", "(", "','", ")", "\n", "if", "comm", "[", "0", "]", "==", "'clock'", ":", "\n", "      ", "nd", ".", "append", "(", "(", "'clock'", ",", "int", "(", "comm", "[", "1", "]", ")", ")", ")", "\n", "", "elif", "comm", "[", "0", "]", "==", "'wait'", ":", "\n", "      ", "nd", ".", "append", "(", "(", "'wait'", ",", "int", "(", "comm", "[", "1", "]", ")", ")", ")", "\n", "", "elif", "comm", "[", "0", "]", "==", "'apu'", ":", "\n", "      ", "if", "len", "(", "comm", ")", "==", "3", ":", "\n", "# NDR", "\n", "        ", "nd", ".", "append", "(", "(", "'apu'", ",", "comm", "[", "1", "]", ",", "comm", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "# NDF", "\n", "        ", "nd", ".", "append", "(", "(", "'apu'", ",", "comm", "[", "1", "]", ",", "comm", "[", "2", "]", ",", "int", "(", "comm", "[", "3", "]", ")", ",", "int", "(", "comm", "[", "4", "]", ")", ",", "int", "(", "comm", "[", "5", "]", ")", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "'Invalid command: {}'", ".", "format", "(", "comm", ")", ")", "\n", "\n", "", "", "return", "nd", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_to_wav.load_vgmwav": [[11, 19], ["scipy.io.wavfile.read", "wav.astype.astype"], "function", ["None"], ["def", "load_vgmwav", "(", "wav_fp", ")", ":", "\n", "  ", "fs", ",", "wav", "=", "wavread", "(", "wav_fp", ")", "\n", "assert", "fs", "==", "44100", "\n", "if", "wav", ".", "ndim", "==", "2", ":", "\n", "    ", "wav", "=", "wav", "[", ":", ",", "0", "]", "\n", "", "wav", "=", "wav", ".", "astype", "(", "np", ".", "float32", ")", "\n", "wav", "/=", "32767.", "\n", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_to_wav.save_vgmwav": [[21, 26], ["numpy.clip", "wav.astype.astype", "scipy.io.wavfile.write"], "function", ["None"], ["", "def", "save_vgmwav", "(", "wav_fp", ",", "wav", ")", ":", "\n", "  ", "wav", "*=", "32767.", "\n", "wav", "=", "np", ".", "clip", "(", "wav", ",", "-", "32768.", ",", "32767.", ")", "\n", "wav", "=", "wav", ".", "astype", "(", "np", ".", "int16", ")", "\n", "wavwrite", "(", "wav_fp", ",", "44100", ",", "wav", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_to_wav.vgm_to_wav": [[28, 79], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.seek", "subprocess.call", "tempfile.NamedTemporaryFile.close", "tempfile.NamedTemporaryFile.seek", "vgm_to_wav.load_vgmwav", "tempfile.NamedTemporaryFile.close", "os.path.dirname", "os.path.join", "distutils.spawn.find_executable", "Exception", "tempfile.NamedTemporaryFile.close", "tempfile.NamedTemporaryFile.close", "Exception", "inspect.getfile", "Exception", "os.path.isfile", "os.access"], "function", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_to_wav.load_vgmwav"], ["", "def", "vgm_to_wav", "(", "vgm", ")", ":", "\n", "# Try to get binary fp from build dir", "\n", "  ", "bin_fp", "=", "None", "\n", "try", ":", "\n", "    ", "import", "nesmdb", "\n", "import", "inspect", "\n", "bin_dir", "=", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "nesmdb", ")", ")", "\n", "bin_fp", "=", "os", ".", "path", ".", "join", "(", "bin_dir", ",", "'vgm2wav'", ")", "\n", "", "except", ":", "\n", "    ", "pass", "\n", "\n", "# Try to get binary fp at ${VGMTOWAV}", "\n", "", "try", ":", "\n", "    ", "env_var", "=", "os", ".", "environ", "[", "'VGMTOWAV'", "]", "\n", "bin_fp", "=", "env_var", "\n", "", "except", ":", "\n", "    ", "pass", "\n", "\n", "# Make sure it is accessible", "\n", "", "if", "bin_fp", "is", "not", "None", ":", "\n", "    ", "if", "not", "(", "os", ".", "path", ".", "isfile", "(", "bin_fp", ")", "and", "os", ".", "access", "(", "bin_fp", ",", "os", ".", "X_OK", ")", ")", ":", "\n", "      ", "raise", "Exception", "(", "'vgm2wav should be at \\'{}\\' but it does not exist or is not executable'", ".", "format", "(", "bin_fp", ")", ")", "\n", "\n", "# Try finding it on global path otherwise", "\n", "", "", "if", "bin_fp", "is", "None", ":", "\n", "    ", "bin_fp", "=", "distutils", ".", "spawn", ".", "find_executable", "(", "'vgm2wav'", ")", "\n", "\n", "# Ensure vgm2wav was found", "\n", "", "if", "bin_fp", "is", "None", ":", "\n", "    ", "raise", "Exception", "(", "'Could not find vgm2wav executable. Please set $VGMTOWAV environment variable'", ")", "\n", "\n", "", "vf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "'wb'", ")", "\n", "wf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "'rb'", ")", "\n", "\n", "vf", ".", "write", "(", "vgm", ")", "\n", "vf", ".", "seek", "(", "0", ")", "\n", "\n", "res", "=", "subprocess", ".", "call", "(", "'{} --loop-count 1 {} {}'", ".", "format", "(", "bin_fp", ",", "vf", ".", "name", ",", "wf", ".", "name", ")", ".", "split", "(", ")", ")", "\n", "if", "res", ">", "0", ":", "\n", "    ", "vf", ".", "close", "(", ")", "\n", "wf", ".", "close", "(", ")", "\n", "raise", "Exception", "(", "'Invalid return code {} from vgm2wav'", ".", "format", "(", "res", ")", ")", "\n", "\n", "", "vf", ".", "close", "(", ")", "\n", "\n", "wf", ".", "seek", "(", "0", ")", "\n", "wav", "=", "load_vgmwav", "(", "wf", ".", "name", ")", "\n", "\n", "wf", ".", "close", "(", ")", "\n", "\n", "return", "wav", "\n", "", ""]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_simplify.vgm_simplify": [[5, 80], ["list", "i2lub", "i2lub", "i2lub", "i2lub", "i2lub", "set", "sorted", "b2lu", "len", "i2lub", "b2lu", "set.extend", "set.extend", "set.extend", "set.extend", "set.extend", "b2h", "delidxs.extend", "range", "b2lu", "delidxs.extend", "range", "delidxs.extend", "range", "b2h", "b2h", "NotImplementedError", "delidxs.extend", "range"], "function", ["None"], ["def", "vgm_simplify", "(", "vgm", ",", "nop1", "=", "False", ",", "nop2", "=", "False", ",", "notr", "=", "False", ",", "nono", "=", "False", ",", "nodm", "=", "True", ")", ":", "\n", "# Clear loop", "\n", "  ", "vgm", "=", "list", "(", "vgm", ")", "\n", "vgm", "[", "0x1c", ":", "0x20", "]", "=", "i2lub", "(", "0", ")", "\n", "vgm", "[", "0x20", ":", "0x24", "]", "=", "i2lub", "(", "0", ")", "\n", "vgm", "[", "0x24", ":", "0x28", "]", "=", "i2lub", "(", "0", ")", "\n", "\n", "# Simplify rate", "\n", "clock", "=", "b2lu", "(", "''", ".", "join", "(", "vgm", "[", "0x84", ":", "0x88", "]", ")", ")", "&", "0x3fffffff", "\n", "vgm", "[", "0x84", ":", "0x88", "]", "=", "i2lub", "(", "clock", ")", "\n", "\n", "# Clear volume", "\n", "vgm", "[", "0x7c", ":", "0x80", "]", "=", "i2lub", "(", "0", ")", "\n", "\n", "# Filter out some channels", "\n", "valid_registers", "=", "[", "'15'", ",", "'17'", "]", "\n", "if", "not", "nop1", ":", "\n", "    ", "valid_registers", ".", "extend", "(", "[", "'00'", ",", "'01'", ",", "'02'", ",", "'03'", "]", ")", "\n", "", "if", "not", "nop2", ":", "\n", "    ", "valid_registers", ".", "extend", "(", "[", "'04'", ",", "'05'", ",", "'06'", ",", "'07'", "]", ")", "\n", "", "if", "not", "notr", ":", "\n", "    ", "valid_registers", ".", "extend", "(", "[", "'08'", ",", "'09'", ",", "'0a'", ",", "'0b'", "]", ")", "\n", "", "if", "not", "nono", ":", "\n", "    ", "valid_registers", ".", "extend", "(", "[", "'0c'", ",", "'0d'", ",", "'0e'", ",", "'0f'", "]", ")", "\n", "", "if", "not", "nodm", ":", "\n", "    ", "valid_registers", ".", "extend", "(", "[", "'10'", ",", "'11'", ",", "'12'", ",", "'13'", "]", ")", "\n", "", "valid_registers", "=", "set", "(", "valid_registers", ")", "\n", "\n", "# Gather writes to DMC and expansion chips", "\n", "i", "=", "0xc0", "\n", "delidxs", "=", "[", "]", "\n", "delcmds", "=", "0", "\n", "while", "True", ":", "\n", "    ", "b", "=", "vgm", "[", "i", "]", "\n", "bhex", "=", "b2h", "(", "b", ")", "\n", "if", "bhex", "==", "'54'", ":", "\n", "      ", "delidxs", ".", "extend", "(", "range", "(", "i", ",", "i", "+", "3", ")", ")", "\n", "i", "+=", "3", "\n", "", "elif", "bhex", "==", "'61'", ":", "\n", "      ", "i", "+=", "3", "\n", "", "elif", "bhex", "==", "'62'", "or", "bhex", "==", "'63'", ":", "\n", "      ", "i", "+=", "1", "\n", "", "elif", "bhex", "==", "'66'", ":", "\n", "      ", "break", "\n", "", "elif", "bhex", "==", "'67'", ":", "\n", "      ", "data_size", "=", "b2lu", "(", "''", ".", "join", "(", "vgm", "[", "i", "+", "3", ":", "i", "+", "7", "]", ")", ")", "\n", "delidxs", ".", "extend", "(", "range", "(", "i", ",", "i", "+", "3", "+", "4", "+", "data_size", ")", ")", "\n", "delcmds", "+=", "1", "\n", "i", "+=", "3", "+", "4", "+", "data_size", "\n", "", "elif", "bhex", "[", "0", "]", "==", "'7'", ":", "\n", "      ", "i", "+=", "1", "\n", "", "elif", "bhex", "==", "'a0'", ":", "\n", "      ", "delidxs", ".", "extend", "(", "range", "(", "i", ",", "i", "+", "3", ")", ")", "\n", "i", "+=", "3", "\n", "", "elif", "bhex", "==", "'b4'", ":", "\n", "      ", "arg1", "=", "vgm", "[", "i", "+", "1", "]", "\n", "arg1hex", "=", "b2h", "(", "arg1", ")", "\n", "if", "arg1hex", "not", "in", "valid_registers", ":", "\n", "        ", "delidxs", ".", "extend", "(", "range", "(", "i", ",", "i", "+", "3", ")", ")", "\n", "delcmds", "+=", "1", "\n", "", "i", "+=", "3", "\n", "", "else", ":", "\n", "      ", "context", "=", "b2h", "(", "''", ".", "join", "(", "vgm", "[", "i", "-", "8", ":", "i", "+", "8", "]", ")", ")", "\n", "raise", "NotImplementedError", "(", "'Unknown VGM command {}, context {}'", ".", "format", "(", "bhex", ",", "context", ")", ")", "\n", "\n", "# Delete these extracurricular writes", "\n", "", "", "for", "i", "in", "sorted", "(", "delidxs", ",", "reverse", "=", "True", ")", ":", "\n", "    ", "del", "vgm", "[", "i", "]", "\n", "", "eof_offset", "=", "b2lu", "(", "''", ".", "join", "(", "vgm", "[", "0x04", ":", "0x08", "]", ")", ")", "\n", "eof_offset", "-=", "len", "(", "delidxs", ")", "\n", "vgm", "[", "0x04", ":", "0x08", "]", "=", "i2lub", "(", "eof_offset", ")", "\n", "\n", "vgm", "=", "''", ".", "join", "(", "vgm", ")", "\n", "\n", "return", "vgm", ",", "delcmds", "\n", "\n"]], "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_simplify.vgm_shorten": [[82, 95], ["nesmdb.vgm.vgm_to_ndr", "nesmdb.vgm.ndr_to_vgm"], "function", ["home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_ndr.vgm_to_ndr", "home.repos.pwc.inspect_result.chrisdonahue_nesmdb.vgm.vgm_ndr.ndr_to_vgm"], ["", "def", "vgm_shorten", "(", "vgm", ",", "nmax", ",", "start", "=", "None", ")", ":", "\n", "  ", "ndr", "=", "vgm_to_ndr", "(", "vgm", ")", "\n", "\n", "meta", "=", "ndr", "[", ":", "1", "]", "\n", "ndr", "=", "ndr", "[", "1", ":", "]", "\n", "\n", "if", "start", "is", "not", "None", ":", "\n", "    ", "ndr", "=", "ndr", "[", "start", ":", "]", "\n", "", "ndr", "=", "ndr", "[", ":", "nmax", "]", "\n", "\n", "vgm", "=", "ndr_to_vgm", "(", "meta", "+", "ndr", ")", "\n", "\n", "return", "vgm", "\n", "", ""]]}