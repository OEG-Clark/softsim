{"home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.generate.process": [[10, 18], ["ext.load", "ext.convert", "ext.post_convert", "os.path.join", "numpy.save", "[].split", "fpath.split"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.post_convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save"], ["def", "process", "(", "x", ")", ":", "\n", "    ", "ext", ",", "fpath", ",", "outdir", "=", "x", "\n", "y", "=", "ext", ".", "load", "(", "fpath", ")", "\n", "S", "=", "ext", ".", "convert", "(", "y", ")", "\n", "S", "=", "ext", ".", "post_convert", "(", "S", ")", "\n", "idx", "=", "fpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "outpath", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "f'{idx}.npy'", ")", "\n", "np", ".", "save", "(", "outpath", ",", "S", ",", "allow_pickle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.generate.generate": [[20, 41], ["extract.Extractor", "print", "open", "json.load", "os.path.join", "len", "os.makedirs", "min", "print", "os.listdir", "x.endswith", "max", "multiprocessing.cpu_count", "multiprocessing.Pool", "pool.imap_unordered", "len", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load"], ["", "def", "generate", "(", "config", ",", "data", ",", "extension", ",", "n_workers", ",", "outdir", ")", ":", "\n", "# Load config from json", "\n", "    ", "with", "open", "(", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cfg", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Build Extractor", "\n", "", "ext", "=", "Extractor", "(", "cfg", ")", "\n", "\n", "# Search for files", "\n", "data_list", "=", "[", "os", ".", "path", ".", "join", "(", "data", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "data", ")", "if", "x", ".", "endswith", "(", "extension", ")", "]", "\n", "f_list", "=", "[", "(", "ext", ",", "x", ",", "outdir", ")", "for", "x", "in", "data_list", "]", "\n", "print", "(", "f'{len(f_list)} {extension[1:]} files found in {data}'", ")", "\n", "\n", "# Extract", "\n", "if", "len", "(", "f_list", ")", "!=", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "n_workers", "=", "min", "(", "max", "(", "1", ",", "n_workers", ")", ",", "cpu_count", "(", ")", ")", "\n", "with", "Pool", "(", "processes", "=", "n_workers", ")", "as", "pool", ":", "\n", "            ", "for", "_", "in", "pool", ".", "imap_unordered", "(", "process", ",", "tqdm", "(", "f_list", ")", ")", ":", "\n", "                ", "pass", "\n", "", "", "print", "(", "'Completed!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.inference.main": [[17, 80], ["print", "torch.device", "print", "os.path.abspath", "os.path.abspath", "dataset.get_configs", "dataset.InferenceDataset", "torch.utils.data.DataLoader", "print", "adaptor.Refiner_UNet_affine().to", "adaptor.Refiner_UNet_affine().to.load_state_dict", "adaptor.Refiner_UNet_affine().to.eval", "print", "os.path.join", "os.listdir", "tqdm.notebook.tqdm", "os.path.join", "os.path.join", "torch.load", "os.path.exists", "os.makedirs", "os.path.join", "torch.cuda.is_available", "extract.Extractor", "adaptor.Refiner_UNet_affine", "os.path.exists", "os.makedirs", "torch.no_grad", "mels.to.to", "cfg_tensors.to.to", "adaptor.Refiner_UNet_affine().to.", "isinstance", "zip", "preds[].cpu().numpy", "preds.cpu().numpy.cpu().numpy", "tgt_ext.post_convert", "numpy.save", "os.path.join", "preds[].cpu", "preds.cpu().numpy.cpu", "model_name.split"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.get_configs", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.post_convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save"], ["def", "main", "(", "\n", "data_dir", ",", "\n", "config_dir", ",", "\n", "exp_name", ",", "\n", "out_dir", ",", "\n", "num_workers", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Main function.\"\"\"", "\n", "print", "(", "f\"[Info]: Doing {exp_name} inference!\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "f\"[Info]: Use {device} now!\"", ")", "\n", "\n", "data_dir", "=", "os", ".", "path", ".", "abspath", "(", "data_dir", ")", "\n", "config_dir", "=", "os", ".", "path", ".", "abspath", "(", "config_dir", ")", "\n", "configs", "=", "get_configs", "(", "config_dir", ")", "\n", "extractors", "=", "[", "(", "Extractor", "(", "config", ")", ",", "config_name", ")", "for", "config", ",", "config_name", "in", "configs", "]", "\n", "dataset", "=", "InferenceDataset", "(", "data_dir", ",", "config_dir", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "None", ",", "\n", ")", "\n", "print", "(", "f\"[Info]: Finish loading data!\"", ",", "flush", "=", "True", ")", "\n", "\n", "model", "=", "adaptor", ".", "Refiner_UNet_affine", "(", "n_channels", "=", "1", ",", "config_len", "=", "8", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "False", ",", "res_add", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "if", "'ckpts'", "not", "in", "out_dir", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "cwd", ",", "'models'", ",", "'adaptor.ckpt'", ")", "\n", "", "else", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'ckpts'", ",", "f'{exp_name}.ckpt'", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "f\"[Info]: Finish creating model!\"", ",", "flush", "=", "True", ")", "\n", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'mels_save'", ",", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "model_dirs", "=", "{", "}", "\n", "models", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "for", "model_name", "in", "models", ":", "\n", "        ", "model_dirs", "[", "model_name", "]", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dirs", "[", "model_name", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dirs", "[", "model_name", "]", ")", "\n", "", "", "for", "mels", ",", "cfg_tensors", ",", "model_names", ",", "input_names", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mels", "=", "mels", ".", "to", "(", "device", ")", "\n", "cfg_tensors", "=", "cfg_tensors", ".", "to", "(", "device", ")", "\n", "preds", "=", "model", "(", "mels", ",", "cfg_tensors", ")", "\n", "if", "isinstance", "(", "preds", ",", "list", ")", ":", "\n", "                ", "preds", "=", "preds", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "for", "pred", ",", "model_name", ",", "input_name", "in", "zip", "(", "preds", ",", "model_names", ",", "input_names", ")", ":", "\n", "                ", "input_name", "=", "input_name", "[", ":", "-", "4", "]", "\n", "tgt_ext", "=", "None", "\n", "for", "ext", ",", "config_name", "in", "extractors", ":", "\n", "                    ", "if", "config_name", "==", "model_name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ":", "\n", "                        ", "tgt_ext", "=", "ext", "\n", "break", "\n", "", "", "pred", "=", "tgt_ext", ".", "post_convert", "(", "pred", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "model_dirs", "[", "model_name", "]", ",", "input_name", ")", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.get_dataloader": [[23, 51], ["dataset.AudioDataset", "int", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len"], "function", ["None"], ["def", "get_dataloader", "(", "data_dir", ",", "preprocess_dir", ",", "fix_config_dir", ",", "batch_size", ",", "n_workers", ",", "segment_length", ")", ":", "\n", "    ", "\"\"\"Generate dataloader\"\"\"", "\n", "dataset", "=", "AudioDataset", "(", "data_dir", ",", "preprocess_dir", ",", "fix_config_dir", ",", "segment_len", "=", "segment_length", ")", "\n", "\n", "# Split dataset into training dataset and validation dataset", "\n", "trainlen", "=", "int", "(", "0.9", "*", "len", "(", "dataset", ")", ")", "\n", "lengths", "=", "[", "trainlen", ",", "len", "(", "dataset", ")", "-", "trainlen", "]", "\n", "trainset", ",", "validset", "=", "random_split", "(", "dataset", ",", "lengths", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "trainset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "n_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "None", ",", "\n", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "validset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "n_workers", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "None", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.model_fn": [[57, 79], ["inputs.to.to", "gt.to.to", "config.to.to", "model", "isinstance", "criterion", "len", "[].max", "[].min", "criterion", "gt.to.max", "gt.to.min"], "function", ["None"], ["def", "model_fn", "(", "batch", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "\"\"\"Forward a batch through the model.\"\"\"", "\n", "\n", "inputs", ",", "gt", ",", "config", "=", "batch", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "gt", "=", "gt", ".", "to", "(", "device", ")", "\n", "config", "=", "config", ".", "to", "(", "device", ")", "\n", "\n", "outs", "=", "model", "(", "inputs", ",", "config", ")", "\n", "if", "isinstance", "(", "outs", ",", "list", ")", ":", "\n", "        ", "loss", "=", "0.0", "\n", "for", "out", "in", "outs", ":", "\n", "            ", "loss", "=", "loss", "+", "criterion", "(", "out", ",", "gt", ")", "\n", "", "loss", "=", "loss", "/", "len", "(", "outs", ")", "\n", "", "else", ":", "\n", "        ", "ma", "=", "gt", ".", "max", "(", "1", ",", "True", ")", "[", "0", "]", ".", "max", "(", "2", ",", "True", ")", "[", "0", "]", "\n", "mi", "=", "gt", ".", "min", "(", "1", ",", "True", ")", "[", "0", "]", ".", "min", "(", "2", ",", "True", ")", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "\n", "(", "outs", "-", "mi", ")", "/", "(", "ma", "-", "mi", ")", ",", "\n", "(", "gt", "-", "mi", ")", "/", "(", "ma", "-", "mi", ")", ")", "\n", "\n", "", "return", "loss", ",", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.valid": [[85, 106], ["model.eval", "tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "model.train", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "len", "len", "torch.no_grad", "torch.no_grad", "train.model_fn", "loss.item"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.model_fn"], ["def", "valid", "(", "dataloader", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "\"\"\"Validate on validation set.\"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "running_loss", "=", "0.0", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "dataloader", ".", "dataset", ")", ",", "ncols", "=", "0", ",", "desc", "=", "\"Valid\"", ",", "unit", "=", "\" uttr\"", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loss", ",", "outs", "=", "model_fn", "(", "batch", ",", "model", ",", "criterion", ",", "device", ")", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "pbar", ".", "update", "(", "dataloader", ".", "batch_size", ")", "\n", "pbar", ".", "set_postfix", "(", "\n", "loss", "=", "f\"{running_loss / (i+1):.2f}\"", ",", "\n", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "return", "running_loss", "/", "len", "(", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.main": [[111, 219], ["print", "torch.device", "torch.device", "print", "train.get_dataloader", "iter", "print", "adaptor.Refiner_UNet_affine().to", "os.path.join", "os.path.isfile", "torch.L1Loss().to", "torch.optim.AdamW", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "print", "os.path.join", "tensorboardX.SummaryWriter", "tqdm.tqdm", "range", "tqdm.tqdm.close", "adaptor.Refiner_UNet_affine().to.load_state_dict", "print", "adaptor.Refiner_UNet_affine().to.parameters", "os.path.exists", "os.makedirs", "os.path.isdir", "os.makedirs", "os.chmod", "train.model_fn", "loss.item", "tensorboardX.SummaryWriter.add_scalar", "loss.backward", "torch.optim.AdamW.step", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.AdamW.zero_grad", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.cuda.is_available", "torch.cuda.is_available", "adaptor.Refiner_UNet_affine", "torch.load", "torch.load", "torch.L1Loss", "train.get_dataloader", "iter", "print", "next", "tqdm.tqdm.close", "train.valid", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tqdm.tqdm", "print", "os.path.join", "os.path.join", "torch.save", "torch.save", "tqdm.tqdm.write", "iter", "next", "utils.plot.plot_spec", "utils.plot.plot_spec", "utils.plot.plot_spec", "adaptor.Refiner_UNet_affine().to.state_dict", "os.path.exists", "os.makedirs", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "outs[].detach().cpu().numpy", "[].detach().cpu", "[].detach().cpu", "outs[].detach().cpu", "[].detach", "[].detach", "outs[].detach"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.get_dataloader", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.model_fn", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.get_dataloader", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.train.valid", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.plot.plot_spec", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.plot.plot_spec", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.plot.plot_spec"], ["def", "main", "(", "\n", "data_dir", ",", "\n", "preprocess_dir", ",", "\n", "fix_config_dir", ",", "\n", "out_dir", ",", "\n", "exp_name", ",", "\n", "batch_size", ",", "\n", "n_workers", ",", "\n", "segment_length", ",", "\n", "valid_steps", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Main function.\"\"\"", "\n", "print", "(", "f\"[Info]: Doing {exp_name} experiment!\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "f\"[Info]: Use {device} now!\"", ")", "\n", "\n", "train_loader", ",", "valid_loader", "=", "get_dataloader", "(", "data_dir", ",", "preprocess_dir", ",", "fix_config_dir", ",", "batch_size", ",", "n_workers", ",", "segment_length", ")", "\n", "train_iterator", "=", "iter", "(", "train_loader", ")", "\n", "print", "(", "f\"[Info]: Finish loading data!\"", ",", "flush", "=", "True", ")", "\n", "\n", "save_steps", "=", "valid_steps", "*", "1", "\n", "total_steps", "=", "valid_steps", "*", "100", "\n", "model", "=", "adaptor", ".", "Refiner_UNet_affine", "(", "n_channels", "=", "1", ",", "config_len", "=", "8", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "False", ",", "res_add", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "ckpt_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'ckpts'", ",", "f\"{exp_name}.ckpt\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_file", ")", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_file", ")", ")", "\n", "print", "(", "\"[Info]: Load model checkpoint!\"", ",", "flush", "=", "True", ")", "\n", "", "criterion", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "valid_steps", "*", "50", ",", "gamma", "=", "0.5", ")", "\n", "print", "(", "f\"[Info]: Finish creating model!\"", ",", "flush", "=", "True", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "log_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'log'", ",", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "os", ".", "chmod", "(", "log_dir", ",", "0o775", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", ")", "\n", "\n", "best_loss", "=", "10000000", "\n", "best_state_dict", "=", "None", "\n", "\n", "pbar", "=", "tqdm", "(", "total", "=", "valid_steps", ",", "ncols", "=", "0", ",", "desc", "=", "\"Train\"", ",", "unit", "=", "\" step\"", ")", "\n", "\n", "for", "step", "in", "range", "(", "total_steps", ")", ":", "\n", "# change data", "\n", "        ", "if", "(", "step", "+", "1", ")", "%", "valid_steps", "==", "1", "and", "step", "!=", "0", ":", "\n", "            ", "train_loader", ",", "valid_loader", "=", "get_dataloader", "(", "data_dir", ",", "preprocess_dir", ",", "fix_config_dir", ",", "batch_size", ",", "n_workers", ",", "segment_length", ")", "\n", "train_iterator", "=", "iter", "(", "train_loader", ")", "\n", "print", "(", "f\"[Info]: Finish Reloading data!\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Get data", "\n", "", "try", ":", "\n", "            ", "batch", "=", "next", "(", "train_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "train_iterator", "=", "iter", "(", "train_loader", ")", "\n", "batch", "=", "next", "(", "train_iterator", ")", "\n", "\n", "", "loss", ",", "outs", "=", "model_fn", "(", "batch", ",", "model", ",", "criterion", ",", "device", ")", "\n", "batch_loss", "=", "loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'training_loss'", ",", "loss", ",", "step", ")", "\n", "\n", "# Update model", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Log", "\n", "pbar", ".", "update", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "\n", "loss", "=", "f\"{batch_loss:.2f}\"", ",", "\n", "step", "=", "step", "+", "1", ",", "\n", ")", "\n", "\n", "# Do validation", "\n", "if", "(", "step", "+", "1", ")", "%", "valid_steps", "==", "0", ":", "\n", "            ", "pbar", ".", "close", "(", ")", "\n", "\n", "valid_loss", "=", "valid", "(", "valid_loader", ",", "model", ",", "criterion", ",", "device", ")", "\n", "writer", ".", "add_scalar", "(", "'valid_loss'", ",", "valid_loss", ",", "step", ")", "\n", "writer", ".", "add_image", "(", "'input'", ",", "\n", "plot_spec", "(", "batch", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "step", ")", "\n", "writer", ".", "add_image", "(", "'target'", ",", "\n", "plot_spec", "(", "batch", "[", "1", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "step", ")", "\n", "writer", ".", "add_image", "(", "'output'", ",", "\n", "plot_spec", "(", "outs", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "step", ")", "\n", "\n", "# keep the best model", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "valid_loss", "\n", "best_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "pbar", "=", "tqdm", "(", "total", "=", "valid_steps", ",", "ncols", "=", "0", ",", "desc", "=", "\"Train\"", ",", "unit", "=", "\" step\"", ")", "\n", "print", "(", "f\"\\n[Info]: Current lr:{optimizer.param_groups[0]['lr']}\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save the best model so far.", "\n", "", "if", "(", "step", "+", "1", ")", "%", "save_steps", "==", "0", "and", "best_state_dict", "is", "not", "None", ":", "\n", "            ", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'ckpts'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "f\"{exp_name}.ckpt\"", ")", "\n", "torch", ".", "save", "(", "best_state_dict", ",", "save_path", ")", "\n", "pbar", ".", "write", "(", "f\"Step {step + 1}, best model saved. (loss={best_loss:.4f})\"", ")", "\n", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.__init__": [[15, 25], ["dataset.AudioDataset.get_wav_npy_files", "extract.Extractor", "dataset.generate_config", "extract.Extractor", "dataset.get_configs", "range"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.get_wav_npy_files", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.get_configs"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "config_dir", ",", "fix_config_dir", ",", "segment_len", "=", "128", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "files", "=", "self", ".", "get_wav_npy_files", "(", "config_dir", ")", "\n", "self", ".", "src_cfgs", "=", "{", "\n", "idx", ":", "cfg", "for", "cfg", ",", "idx", "in", "get_configs", "(", "config_dir", "+", "'/config'", ")", "}", "\n", "self", ".", "src_exts", "=", "{", "\n", "idx", ":", "Extractor", "(", "self", ".", "src_cfgs", "[", "idx", "]", ")", "for", "idx", "in", "self", ".", "src_cfgs", "}", "\n", "self", ".", "tgt_cfgs", "=", "[", "generate_config", "(", "fix_config_dir", ")", "for", "_", "in", "range", "(", "100", ")", "]", "\n", "self", ".", "tgt_exts", "=", "[", "Extractor", "(", "cfg", ")", "for", "cfg", "in", "self", ".", "tgt_cfgs", "]", "\n", "self", ".", "segment_len", "=", "segment_len", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.__len__": [[26, 28], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.__getitem__": [[29, 53], ["random.randint", "numpy.load", "tgt_ext.load", "dataset.AudioDataset.trim_wav", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dataset.convert_config", "os.path.basename().split", "os.path.join", "tgt_ext.convert", "tgt_ext.convert", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.trim_wav", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.convert_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "wav_path", ",", "_", "=", "self", ".", "files", "[", "index", "]", "\n", "r", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "tgt_cfgs", ")", "-", "1", ")", "\n", "tgt_cfg", "=", "self", ".", "tgt_cfgs", "[", "r", "]", "\n", "tgt_ext", "=", "self", ".", "tgt_exts", "[", "r", "]", "\n", "\n", "# get mid & tgt wav", "\n", "mid_wav", "=", "np", ".", "load", "(", "wav_path", ")", "\n", "bn", "=", "os", ".", "path", ".", "basename", "(", "wav_path", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "tgt_wav", "=", "tgt_ext", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "bn", "+", "'.wav'", ")", ")", "\n", "seg_l", "=", "(", "self", ".", "segment_len", "+", "1", ")", "*", "tgt_cfg", "[", "'spec_config'", "]", "[", "'hop_length'", "]", "\n", "mid_wav", ",", "tgt_wav", "=", "self", ".", "trim_wav", "(", "mid_wav", ",", "tgt_wav", ",", "seg_l", ")", "\n", "\n", "# gen inp & tgt mel", "\n", "inp_mel", "=", "tgt_ext", ".", "convert", "(", "mid_wav", ")", "[", ":", ",", ":", "self", ".", "segment_len", "]", "\n", "tgt_mel", "=", "tgt_ext", ".", "convert", "(", "tgt_wav", ")", "[", ":", ",", ":", "self", ".", "segment_len", "]", "\n", "\n", "inp", "=", "torch", ".", "from_numpy", "(", "inp_mel", ")", "\n", "tgt", "=", "torch", ".", "from_numpy", "(", "tgt_mel", ")", "\n", "tgt_cfg_list", "=", "convert_config", "(", "tgt_cfg", ")", "\n", "\n", "return", "torch", ".", "FloatTensor", "(", "inp", ")", ",", "torch", ".", "FloatTensor", "(", "tgt", ")", ",", "torch", ".", "FloatTensor", "(", "tgt_cfg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.get_wav_npy_files": [[54, 62], ["range", "os.path.join", "os.listdir", "len", "str", "f_path.endswith", "os.listdir", "files.append", "os.path.join", "str"], "methods", ["None"], ["", "def", "get_wav_npy_files", "(", "self", ",", "wav_npy_dir", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "os", ".", "listdir", "(", "wav_npy_dir", ")", ")", "-", "1", ")", ":", "\n", "            ", "subdir", "=", "os", ".", "path", ".", "join", "(", "wav_npy_dir", ",", "str", "(", "idx", ")", ")", "\n", "for", "f_path", "in", "os", ".", "listdir", "(", "subdir", ")", ":", "\n", "                ", "if", "f_path", ".", "endswith", "(", "'.npy'", ")", ":", "\n", "                    ", "files", ".", "append", "(", "[", "os", ".", "path", ".", "join", "(", "subdir", ",", "f_path", ")", ",", "str", "(", "idx", ")", "]", ")", "\n", "", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.AudioDataset.trim_wav": [[63, 73], ["min", "len", "len", "numpy.random.randint", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "trim_wav", "(", "self", ",", "mid", ",", "tgt", ",", "seg_l", ")", ":", "\n", "        ", "l", "=", "min", "(", "len", "(", "mid", ")", ",", "len", "(", "tgt", ")", ")", "\n", "mid", ",", "tgt", "=", "mid", "[", ":", "l", "]", ",", "tgt", "[", ":", "l", "]", "\n", "if", "l", ">", "seg_l", ":", "\n", "            ", "s", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "l", "-", "seg_l", ")", "\n", "mid", ",", "tgt", "=", "mid", "[", "s", ":", "s", "+", "seg_l", "]", ",", "tgt", "[", "s", ":", "s", "+", "seg_l", "]", "\n", "", "elif", "l", "<", "seg_l", ":", "\n", "            ", "mid", "=", "np", ".", "pad", "(", "mid", ",", "(", "0", ",", "seg_l", "-", "l", ")", ",", "'constant'", ",", "constant_values", "=", "(", "0", ",", "0", ")", ")", "\n", "tgt", "=", "np", ".", "pad", "(", "tgt", ",", "(", "0", ",", "seg_l", "-", "l", ")", ",", "'constant'", ",", "constant_values", "=", "(", "0", ",", "0", ")", ")", "\n", "", "return", "mid", ",", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.InferenceDataset.__init__": [[76, 89], ["os.listdir", "dataset.get_configs", "os.path.join", "os.listdir", "os.listdir.sort", "os.path.join", "data.append"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.get_configs"], ["    ", "def", "__init__", "(", "self", ",", "input_dir", ",", "config_dir", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "models", "=", "os", ".", "listdir", "(", "input_dir", ")", "\n", "for", "model_name", "in", "models", ":", "\n", "            ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "model_name", ")", "\n", "inputs", "=", "os", ".", "listdir", "(", "model_dir", ")", "\n", "inputs", ".", "sort", "(", ")", "\n", "for", "input_name", "in", "inputs", ":", "\n", "                ", "input_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "input_name", ")", "\n", "data", ".", "append", "(", "(", "input_path", ",", "model_name", ",", "input_name", ")", ")", "\n", "", "", "self", ".", "data", "=", "data", "\n", "\n", "self", ".", "configs", "=", "get_configs", "(", "config_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.InferenceDataset.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.InferenceDataset.__getitem__": [[93, 103], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "dataset.convert_config", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.load", "model_name.split"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.convert_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input_path", ",", "model_name", ",", "input_name", "=", "self", ".", "data", "[", "index", "]", "\n", "mel", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "input_path", ")", ")", ".", "float", "(", ")", "\n", "tgt_config", "=", "''", "\n", "for", "config", ",", "config_name", "in", "self", ".", "configs", ":", "\n", "            ", "if", "config_name", "==", "model_name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ":", "\n", "                ", "tgt_config", "=", "config", "\n", "break", "\n", "", "", "tgt_cfg_list", "=", "convert_config", "(", "tgt_config", ")", "\n", "return", "torch", ".", "FloatTensor", "(", "mel", ")", ",", "torch", ".", "FloatTensor", "(", "tgt_cfg_list", ")", ",", "model_name", ",", "input_name", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.get_configs": [[105, 119], ["os.path.abspath", "os.listdir", "os.listdir.sort", "config_path[].split", "open", "json.load", "configs.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load"], ["", "", "def", "get_configs", "(", "config_dir", ")", ":", "\n", "    ", "\"\"\"\n        return list: [(config(dict), config_name)]\n    \"\"\"", "\n", "config_dir", "=", "os", ".", "path", ".", "abspath", "(", "config_dir", ")", "\n", "config_paths", "=", "os", ".", "listdir", "(", "config_dir", ")", "\n", "config_paths", ".", "sort", "(", ")", "\n", "configs", "=", "[", "]", "\n", "for", "config_path", "in", "config_paths", ":", "\n", "        ", "config_name", "=", "config_path", "[", ":", "-", "5", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config_dir", ",", "config_path", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "configs", ".", "append", "(", "(", "config", ",", "config_name", ")", ")", "\n", "", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_config": [[121, 132], ["dataset.generate_wav_config", "dataset.generate_spec_config", "dataset.generate_post_config", "dataset.check_same_config", "dataset.generate_spec_config"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_wav_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_spec_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_post_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.check_same_config", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_spec_config"], ["", "def", "generate_config", "(", "config_dir", ")", ":", "\n", "    ", "config", "=", "{", "}", "\n", "config", "[", "'wav_config'", "]", "=", "generate_wav_config", "(", ")", "\n", "config", "[", "'spec_config'", "]", "=", "generate_spec_config", "(", ")", "\n", "config", "[", "'post_config'", "]", "=", "generate_post_config", "(", ")", "\n", "config", "[", "'github_repo'", "]", "=", "None", "\n", "\n", "while", "check_same_config", "(", "config", ",", "config_dir", ")", ":", "\n", "        ", "config", "[", "'spec_config'", "]", "=", "generate_spec_config", "(", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_wav_config": [[134, 140], ["random.uniform", "wav_config.update"], "function", ["None"], ["", "def", "generate_wav_config", "(", ")", ":", "\n", "    ", "peak_norm", "=", "random", ".", "uniform", "(", "0.9", ",", "1.0", ")", "\n", "wav_config", "=", "{", "\"sample_rate\"", ":", "22050", ",", "\"normalize_loudness\"", ":", "None", ",", "\"peak_norm\"", ":", "peak_norm", ",", "\"highpass_cutoff\"", ":", "0.0", "}", "\n", "trim_not", "=", "{", "\"trim_silence\"", ":", "False", ",", "\"trim_silence_threshold_in_db\"", ":", "0", ",", "\"trim_frame_size\"", ":", "0", ",", "\"trim_hop_size\"", ":", "0", "}", "\n", "wav_config", ".", "update", "(", "trim_not", ")", "\n", "return", "wav_config", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_spec_config": [[142, 158], ["random.choice", "max", "random.choice", "random.choice", "random.choices", "random.choices"], "function", ["None"], ["", "def", "generate_spec_config", "(", ")", ":", "\n", "    ", "win_length", "=", "random", ".", "choice", "(", "[", "800", ",", "900", ",", "1024", ",", "1100", ",", "1200", "]", ")", "\n", "n_fft", "=", "max", "(", "win_length", ",", "random", ".", "choice", "(", "[", "1024", ",", "2048", "]", ")", ")", "\n", "center", "=", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", "\n", "pad", "=", "0", "if", "center", "else", "(", "n_fft", "-", "win_length", "//", "4", ")", "//", "2", "\n", "fmin", "=", "random", ".", "choices", "(", "[", "0", ",", "30", ",", "50", ",", "70", ",", "90", ",", "125", "]", ")", "[", "0", "]", "\n", "fmax", "=", "random", ".", "choices", "(", "[", "7600", ",", "8000", ",", "9500", ",", "11025", "]", ")", "[", "0", "]", "\n", "spec_config", "=", "{", "\n", "\"preemphasis\"", ":", "None", ",", "\n", "\"n_fft\"", ":", "n_fft", ",", "\"hop_length\"", ":", "win_length", "//", "4", ",", "\"win_length\"", ":", "win_length", ",", "\"window\"", ":", "\"hann\"", ",", "\n", "\"left_pad\"", ":", "pad", ",", "\"right_pad\"", ":", "pad", ",", "\"pad_mode\"", ":", "\"reflect\"", ",", "\"center\"", ":", "center", ",", "\n", "\"stft_power\"", ":", "1", ",", "\n", "\"mel_spec\"", ":", "True", ",", "\n", "\"num_mels\"", ":", "80", ",", "\"fmin\"", ":", "fmin", ",", "\"fmax\"", ":", "fmax", "\n", "}", "\n", "return", "spec_config", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_post_config": [[160, 176], ["random.choice", "random.choice", "random.choice"], "function", ["None"], ["", "def", "generate_post_config", "(", ")", ":", "\n", "    ", "log_base", "=", "random", ".", "choice", "(", "[", "10", ",", "'e'", "]", ")", "\n", "log_factor", "=", "random", ".", "choice", "(", "[", "20", ",", "1", "]", ")", "if", "log_base", "==", "10", "else", "1", "\n", "normalize_spec", "=", "log_factor", "==", "20", "\n", "ref_level_db", "=", "random", ".", "choice", "(", "[", "20", ",", "0", "]", ")", "if", "normalize_spec", "else", "0", "\n", "post_config", "=", "{", "\n", "\"amp_to_db\"", ":", "True", ",", "\n", "\"log_base\"", ":", "log_base", ",", "\n", "\"log_factor\"", ":", "log_factor", ",", "\n", "\"normalize_spec\"", ":", "normalize_spec", ",", "\n", "\"ref_level_db\"", ":", "ref_level_db", ",", "\n", "\"min_level_db\"", ":", "-", "100", "\n", "}", "\n", "return", "post_config", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.check_same_config": [[178, 185], ["os.listdir", "open", "json.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load"], ["", "def", "check_same_config", "(", "config", ",", "cfg_dir", ")", ":", "\n", "    ", "for", "cfg_path", "in", "os", ".", "listdir", "(", "cfg_dir", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cfg_dir", ",", "cfg_path", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "cfg", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "(", "cfg", "[", "'spec_config'", "]", "==", "config", "[", "'spec_config'", "]", ")", ":", "\n", "            ", "return", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.convert_config": [[187, 204], ["list", "list", "sorted", "sorted", "list.items", "list.items", "cfg_list.append", "cfg_list.append", "numpy.log1p"], "function", ["None"], ["", "def", "convert_config", "(", "config", ")", ":", "\n", "    ", "wav_cfg", "=", "config", "[", "\"wav_config\"", "]", "\n", "wav_cfg", "=", "list", "(", "sorted", "(", "wav_cfg", ".", "items", "(", ")", ")", ")", "\n", "spec_cfg", "=", "config", "[", "\"spec_config\"", "]", "\n", "spec_cfg", "=", "list", "(", "sorted", "(", "spec_cfg", ".", "items", "(", ")", ")", ")", "\n", "to_log", "=", "[", "\n", "\"fmin\"", ",", "\"fmax\"", ",", "\"n_fft\"", ",", "\"left_pad\"", ",", "\"right_pad\"", ",", "\n", "\"hop_length\"", ",", "\"win_length\"", "]", "\n", "cfg_list", "=", "[", "]", "\n", "for", "config", "in", "[", "wav_cfg", ",", "spec_cfg", "]", ":", "\n", "        ", "for", "param_name", ",", "param", "in", "config", ":", "\n", "            ", "if", "param_name", "==", "'peak_norm'", ":", "\n", "                ", "cfg_list", ".", "append", "(", "param", ")", "\n", "", "elif", "param_name", "in", "to_log", ":", "\n", "                ", "cfg_list", ".", "append", "(", "np", ".", "log1p", "(", "param", ")", ")", "\n", "\n", "", "", "", "return", "cfg_list", "", "", ""]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.rand_prep.process": [[12, 21], ["ext.load", "ext.convert", "ext.post_convert", "ext.inverse", "os.path.join", "numpy.save", "[].split", "fpath.split"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.post_convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.inverse", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save"], ["def", "process", "(", "x", ")", ":", "\n", "    ", "ext", ",", "n_iter", ",", "fpath", ",", "outdir", "=", "x", "\n", "y", "=", "ext", ".", "load", "(", "fpath", ")", "\n", "S", "=", "ext", ".", "convert", "(", "y", ")", "\n", "S", "=", "ext", ".", "post_convert", "(", "S", ")", "\n", "y_", "=", "ext", ".", "inverse", "(", "S", ",", "n_iter", "=", "n_iter", ")", "\n", "idx", "=", "fpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "outpath", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "f'{idx}.npy'", ")", "\n", "np", ".", "save", "(", "outpath", ",", "y_", ",", "allow_pickle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.rand_prep.generate": [[23, 52], ["print", "os.path.join", "len", "os.makedirs", "os.path.join", "os.makedirs", "min", "range", "print", "os.listdir", "x.endswith", "max", "multiprocessing.cpu_count", "print", "os.path.join", "os.makedirs", "dataset.generate_config", "extract.Extractor", "int", "int", "len", "str", "open", "json.dump", "multiprocessing.Pool", "pool.imap_unordered", "len", "len", "tqdm.tqdm", "str"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.dataset.generate_config"], ["", "def", "generate", "(", "data", ",", "extension", ",", "n_cfg", ",", "cfg_dir", ",", "n_iter", ",", "n_workers", ",", "outdir", ")", ":", "\n", "# Search for files", "\n", "    ", "data_list", "=", "[", "os", ".", "path", ".", "join", "(", "data", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "data", ")", "if", "x", ".", "endswith", "(", "extension", ")", "]", "\n", "print", "(", "f'{len(data_list)} {extension[1:]} files found in {data}'", ")", "\n", "\n", "# Extract", "\n", "if", "len", "(", "data_list", ")", "!=", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "cfgdir", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "'config'", ")", "\n", "os", ".", "makedirs", "(", "cfgdir", ",", "exist_ok", "=", "True", ")", "\n", "n_workers", "=", "min", "(", "max", "(", "1", ",", "n_workers", ")", ",", "cpu_count", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "n_cfg", ")", ":", "\n", "            ", "print", "(", "f'Processing config: {i+1}/{n_cfg}'", ")", "\n", "# Build subdir", "\n", "subdir", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "str", "(", "i", ")", ")", "\n", "os", ".", "makedirs", "(", "subdir", ",", "exist_ok", "=", "True", ")", "\n", "# Gen cfg and ext", "\n", "cfg", "=", "generate_config", "(", "cfg_dir", ")", "\n", "ext", "=", "Extractor", "(", "cfg", ")", "\n", "with", "open", "(", "cfgdir", "+", "'/'", "+", "str", "(", "i", ")", "+", "'.json'", ",", "'w'", ")", "as", "w", ":", "\n", "                ", "json", ".", "dump", "(", "cfg", ",", "w", ",", "indent", "=", "4", ")", "\n", "\n", "", "s", "=", "int", "(", "(", "i", "/", "n_cfg", ")", "*", "len", "(", "data_list", ")", ")", "\n", "e", "=", "int", "(", "(", "(", "i", "+", "1", ")", "/", "n_cfg", ")", "*", "len", "(", "data_list", ")", ")", "\n", "f_list", "=", "[", "(", "ext", ",", "n_iter", ",", "x", ",", "subdir", ")", "for", "x", "in", "data_list", "[", "s", ":", "e", "]", "]", "\n", "with", "Pool", "(", "processes", "=", "n_workers", ")", "as", "pool", ":", "\n", "                ", "for", "_", "in", "pool", ".", "imap_unordered", "(", "process", ",", "tqdm", "(", "f_list", ")", ")", ":", "\n", "                    ", "pass", "\n", "", "", "", "print", "(", "'Completed!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.transform.process": [[10, 19], ["numpy.load", "src_ext.inverse", "tgt_ext.convert", "os.path.join", "numpy.save", "[].split", "fpath.split"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.inverse", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.convert", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save"], ["def", "process", "(", "x", ")", ":", "\n", "    ", "src_ext", ",", "tgt_ext", ",", "n_iter", ",", "fpath", ",", "outdir", "=", "x", "\n", "S", "=", "np", ".", "load", "(", "fpath", ")", "\n", "y", "=", "src_ext", ".", "inverse", "(", "S", ",", "n_iter", "=", "n_iter", ")", "\n", "S", "=", "tgt_ext", ".", "convert", "(", "y", ")", "\n", "# S = tgt_ext.post_convert(S)", "\n", "idx", "=", "fpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "outpath", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "f'{idx}.npy'", ")", "\n", "np", ".", "save", "(", "outpath", ",", "S", ",", "allow_pickle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.None.transform.transform": [[21, 46], ["extract.Extractor", "extract.Extractor", "print", "open", "json.load", "open", "json.load", "os.path.join", "len", "os.makedirs", "min", "print", "os.listdir", "x.endswith", "max", "multiprocessing.cpu_count", "multiprocessing.Pool", "pool.imap_unordered", "len", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load"], ["", "def", "transform", "(", "src_config", ",", "tgt_config", ",", "data", ",", "extension", ",", "\n", "n_iter", ",", "n_workers", ",", "outdir", ")", ":", "\n", "# Load config from json", "\n", "    ", "with", "open", "(", "src_config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "src_cfg", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "tgt_config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "tgt_cfg", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Build Extractor", "\n", "", "src_ext", "=", "Extractor", "(", "src_cfg", ")", "\n", "tgt_ext", "=", "Extractor", "(", "tgt_cfg", ")", "\n", "\n", "# Search for files", "\n", "data_list", "=", "[", "os", ".", "path", ".", "join", "(", "data", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "data", ")", "if", "x", ".", "endswith", "(", "extension", ")", "]", "\n", "f_list", "=", "[", "(", "src_ext", ",", "tgt_ext", ",", "n_iter", ",", "x", ",", "outdir", ")", "for", "x", "in", "data_list", "]", "\n", "print", "(", "f'{len(f_list)} {extension[1:]} files found in {data}'", ")", "\n", "\n", "# Extract", "\n", "if", "len", "(", "f_list", ")", "!=", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "n_workers", "=", "min", "(", "max", "(", "1", ",", "n_workers", ")", ",", "cpu_count", "(", ")", ")", "\n", "with", "Pool", "(", "processes", "=", "n_workers", ")", "as", "pool", ":", "\n", "            ", "for", "_", "in", "pool", ".", "imap_unordered", "(", "process", ",", "tqdm", "(", "f_list", ")", ")", ":", "\n", "                ", "pass", "\n", "", "", "print", "(", "'Completed!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.load_wav": [[6, 9], ["librosa.load"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load"], ["def", "load_wav", "(", "path", ",", "sample_rate", ")", ":", "\n", "    ", "y", ",", "_", "=", "librosa", ".", "load", "(", "path", ",", "sr", "=", "sample_rate", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.save_wav": [[11, 14], ["scipy.io.wavfile.write", "max", "y.astype", "numpy.max", "numpy.abs"], "function", ["None"], ["", "def", "save_wav", "(", "y", ",", "path", ",", "sample_rate", ")", ":", "\n", "    ", "y", "*=", "32767", "/", "max", "(", "0.01", ",", "np", ".", "max", "(", "np", ".", "abs", "(", "y", ")", ")", ")", "\n", "wavfile", ".", "write", "(", "path", ",", "sample_rate", ",", "y", ".", "astype", "(", "np", ".", "int16", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.trim_silence": [[16, 23], ["librosa.effects.trim"], "function", ["None"], ["", "def", "trim_silence", "(", "y", ",", "wav_config", ")", ":", "\n", "    ", "return", "librosa", ".", "effects", ".", "trim", "(", "\n", "y", ",", "\n", "top_db", "=", "wav_config", "[", "\"trim_silence_threshold_in_db\"", "]", ",", "\n", "frame_length", "=", "wav_config", "[", "\"trim_frame_size\"", "]", ",", "\n", "hop_length", "=", "wav_config", "[", "\"trim_hop_size\"", "]", ",", "\n", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.low_cut_filter": [[25, 46], ["firwin", "lfilter"], "function", ["None"], ["", "def", "low_cut_filter", "(", "x", ",", "fs", ",", "cutoff", "=", "70", ")", ":", "\n", "    ", "\"\"\"APPLY LOW CUT FILTER.\n\n    https://github.com/kan-bayashi/PytorchWaveNetVocoder\n\n    Args:\n        x (ndarray): Waveform sequence.\n        fs (int): Sampling frequency.\n        cutoff (float): Cutoff frequency of low cut filter.\n    Return:\n        ndarray: Low cut filtered waveform sequence.\n    \"\"\"", "\n", "nyquist", "=", "fs", "//", "2", "\n", "norm_cutoff", "=", "cutoff", "/", "nyquist", "\n", "from", "scipy", ".", "signal", "import", "firwin", ",", "lfilter", "\n", "\n", "# low cut filter", "\n", "fil", "=", "firwin", "(", "255", ",", "norm_cutoff", ",", "pass_zero", "=", "False", ")", "\n", "lcf_x", "=", "lfilter", "(", "fil", ",", "1", ",", "x", ")", "\n", "\n", "return", "lcf_x", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft": [[48, 55], ["numpy.pad", "librosa.stft"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft"], ["", "def", "stft", "(", "y", ",", "spec_config", ")", ":", "\n", "    ", "y", "=", "np", ".", "pad", "(", "y", ",", "[", "(", "spec_config", "[", "\"left_pad\"", "]", ",", "spec_config", "[", "\"right_pad\"", "]", ")", "]", ",", "mode", "=", "spec_config", "[", "\"pad_mode\"", "]", ")", "\n", "return", "librosa", ".", "stft", "(", "y", ",", "n_fft", "=", "spec_config", "[", "\"n_fft\"", "]", ",", "\n", "hop_length", "=", "spec_config", "[", "\"hop_length\"", "]", ",", "\n", "win_length", "=", "spec_config", "[", "\"win_length\"", "]", ",", "\n", "window", "=", "spec_config", "[", "\"window\"", "]", ",", "\n", "center", "=", "spec_config", "[", "\"center\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft_power": [[57, 59], ["numpy.power"], "function", ["None"], ["", "def", "stft_power", "(", "S", ",", "stft_power", ")", ":", "\n", "    ", "return", "np", ".", "power", "(", "S", ",", "stft_power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft_depower": [[61, 63], ["numpy.power"], "function", ["None"], ["", "def", "stft_depower", "(", "S", ",", "stft_power", ")", ":", "\n", "    ", "return", "np", ".", "power", "(", "S", ",", "1", "/", "stft_power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.mel_basis": [[65, 70], ["librosa.filters.mel"], "function", ["None"], ["", "def", "mel_basis", "(", "wav_config", ",", "spec_config", ")", ":", "\n", "    ", "return", "librosa", ".", "filters", ".", "mel", "(", "\n", "sr", "=", "wav_config", "[", "\"sample_rate\"", "]", ",", "n_fft", "=", "spec_config", "[", "\"n_fft\"", "]", ",", "\n", "n_mels", "=", "spec_config", "[", "\"num_mels\"", "]", ",", "fmin", "=", "spec_config", "[", "\"fmin\"", "]", ",", "\n", "fmax", "=", "spec_config", "[", "\"fmax\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.inv_mel_basis": [[72, 74], ["numpy.linalg.pinv"], "function", ["None"], ["", "def", "inv_mel_basis", "(", "mel_basis", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "pinv", "(", "mel_basis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.linear_to_mel": [[76, 78], ["numpy.einsum"], "function", ["None"], ["", "def", "linear_to_mel", "(", "S", ",", "mel_basis", ")", ":", "\n", "    ", "return", "np", ".", "einsum", "(", "'ij,jk->ik'", ",", "mel_basis", ",", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.mel_to_linear": [[80, 83], ["numpy.einsum", "numpy.maximum"], "function", ["None"], ["", "def", "mel_to_linear", "(", "S", ",", "inv_mel_basis", ")", ":", "\n", "    ", "inverse", "=", "np", ".", "einsum", "(", "'ij,jk->ik'", ",", "inv_mel_basis", ",", "S", ")", "\n", "return", "np", ".", "maximum", "(", "1e-10", ",", "inverse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.amp_to_db": [[85, 98], ["numpy.clip", "numpy.log", "numpy.log2", "NotImplementedError", "numpy.log10"], "function", ["None"], ["", "def", "amp_to_db", "(", "S", ",", "post_config", ")", ":", "\n", "    ", "log_base", "=", "post_config", "[", "\"log_base\"", "]", "\n", "log_factor", "=", "post_config", "[", "\"log_factor\"", "]", "\n", "S", "=", "np", ".", "clip", "(", "S", ",", "a_min", "=", "1e-5", ",", "a_max", "=", "None", ")", "\n", "if", "log_base", "==", "\"e\"", ":", "\n", "        ", "S", "=", "log_factor", "*", "np", ".", "log", "(", "S", ")", "\n", "", "elif", "log_base", "==", "2", ":", "\n", "        ", "S", "=", "log_factor", "*", "np", ".", "log2", "(", "S", ")", "\n", "", "elif", "log_base", "==", "10", ":", "\n", "        ", "S", "=", "log_factor", "*", "np", ".", "log10", "(", "S", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no base {} in amp_to_db'", ".", "format", "(", "log_base", ")", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.db_change_base": [[100, 112], ["numpy.log", "NotImplementedError", "numpy.log"], "function", ["None"], ["", "def", "db_change_base", "(", "S", ",", "post_config", ")", ":", "\n", "    ", "log_base", "=", "post_config", "[", "\"log_base\"", "]", "\n", "log_factor", "=", "post_config", "[", "\"log_factor\"", "]", "\n", "if", "log_base", "==", "\"e\"", ":", "\n", "        ", "S", "=", "log_factor", "*", "S", "\n", "", "elif", "log_base", "==", "2", ":", "\n", "        ", "S", "=", "log_factor", "*", "S", "/", "np", ".", "log", "(", "2", ")", "\n", "", "elif", "log_base", "==", "10", ":", "\n", "        ", "S", "=", "log_factor", "*", "S", "/", "np", ".", "log", "(", "10", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no base {} in amp_to_db'", ".", "format", "(", "log_base", ")", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.db_to_amp": [[114, 125], ["type", "numpy.power", "numpy.exp", "NotImplementedError"], "function", ["None"], ["", "def", "db_to_amp", "(", "S", ",", "post_config", ")", ":", "\n", "    ", "log_base", "=", "post_config", "[", "\"log_base\"", "]", "\n", "log_factor", "=", "post_config", "[", "\"log_factor\"", "]", "\n", "S", "=", "S", "/", "log_factor", "\n", "if", "type", "(", "log_base", ")", "==", "int", ":", "\n", "        ", "S", "=", "np", ".", "power", "(", "log_base", ",", "S", ")", "\n", "", "elif", "log_base", "==", "'e'", ":", "\n", "        ", "S", "=", "np", ".", "exp", "(", "S", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no base {} in db_to_amp'", ".", "format", "(", "log_base", ")", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.normalize": [[127, 131], ["numpy.clip"], "function", ["None"], ["", "def", "normalize", "(", "S", ",", "post_config", ")", ":", "\n", "    ", "ref_level_db", "=", "post_config", "[", "\"ref_level_db\"", "]", "\n", "min_level_db", "=", "post_config", "[", "\"min_level_db\"", "]", "\n", "return", "np", ".", "clip", "(", "(", "S", "-", "ref_level_db", "-", "min_level_db", ")", "/", "-", "min_level_db", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.denormalize": [[133, 137], ["numpy.clip"], "function", ["None"], ["", "def", "denormalize", "(", "S", ",", "post_config", ")", ":", "\n", "    ", "ref_level_db", "=", "post_config", "[", "\"ref_level_db\"", "]", "\n", "min_level_db", "=", "post_config", "[", "\"min_level_db\"", "]", "\n", "return", "(", "np", ".", "clip", "(", "S", ",", "0", ",", "1", ")", "*", "-", "min_level_db", ")", "+", "min_level_db", "+", "ref_level_db", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft_to_wav": [[139, 147], ["librosa.griffinlim"], "function", ["None"], ["", "def", "stft_to_wav", "(", "S", ",", "spec_config", ",", "n_iter", ")", ":", "\n", "    ", "audio", "=", "librosa", ".", "griffinlim", "(", "\n", "S", ",", "n_iter", "=", "n_iter", ",", "hop_length", "=", "spec_config", "[", "\"hop_length\"", "]", ",", "\n", "win_length", "=", "spec_config", "[", "\"win_length\"", "]", ",", "window", "=", "spec_config", "[", "\"window\"", "]", ",", "center", "=", "spec_config", "[", "\"center\"", "]", ")", "\n", "audio", "=", "audio", "[", "spec_config", "[", "\"left_pad\"", "]", ":", "]", "\n", "if", "spec_config", "[", "\"right_pad\"", "]", ">", "0", ":", "\n", "        ", "audio", "=", "audio", "[", ":", "-", "1", "*", "spec_config", "[", "\"right_pad\"", "]", "]", "\n", "", "return", "audio", "\n", "", ""]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.plot.save_figure_to_numpy": [[7, 12], ["numpy.fromstring", "data.reshape.reshape", "data.reshape.transpose", "fig.canvas.tostring_rgb", "fig.canvas.get_width_height"], "function", ["None"], ["def", "save_figure_to_numpy", "(", "fig", ")", ":", "\n", "# save it to a numpy array.", "\n", "    ", "data", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "data", "=", "data", ".", "reshape", "(", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "return", "data", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.plot.plot_spec": [[14, 27], ["matplotlib.subplots", "ax.imshow", "matplotlib.colorbar", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "fig.canvas.draw", "plot.save_figure_to_numpy", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.plot.save_figure_to_numpy"], ["", "def", "plot_spec", "(", "spectrogram", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "3", ")", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "spectrogram", ",", "aspect", "=", "\"auto\"", ",", "origin", "=", "\"lower\"", ",", "\n", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "plt", ".", "xlabel", "(", "\"Frames\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Channels\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "data", "=", "save_figure_to_numpy", "(", "fig", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.__init__": [[6, 14], ["utils.audio.mel_basis", "utils.audio.inv_mel_basis"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.mel_basis", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.inv_mel_basis"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "wav_config", "=", "config", "[", "\"wav_config\"", "]", "\n", "self", ".", "spec_config", "=", "config", "[", "\"spec_config\"", "]", "\n", "self", ".", "post_config", "=", "config", "[", "\"post_config\"", "]", "\n", "self", ".", "github_repo", "=", "config", "[", "\"github_repo\"", "]", "\n", "self", ".", "mel_basis", "=", "audio", ".", "mel_basis", "(", "\n", "self", ".", "wav_config", ",", "self", ".", "spec_config", ")", "\n", "self", ".", "inv_mel_basis", "=", "audio", ".", "inv_mel_basis", "(", "self", ".", "mel_basis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.load": [[15, 26], ["utils.audio.load_wav", "numpy.abs().max", "utils.audio.trim_silence", "numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.load_wav", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.trim_silence"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "y", "=", "audio", ".", "load_wav", "(", "path", ",", "self", ".", "wav_config", "[", "\"sample_rate\"", "]", ")", "\n", "if", "self", ".", "wav_config", "[", "\"normalize_loudness\"", "]", "is", "not", "None", ":", "\n", "            ", "pass", "\n", "", "if", "self", ".", "wav_config", "[", "\"peak_norm\"", "]", "is", "not", "None", ":", "\n", "            ", "y", "=", "self", ".", "wav_config", "[", "\"peak_norm\"", "]", "*", "y", "/", "np", ".", "abs", "(", "y", ")", ".", "max", "(", ")", "\n", "", "if", "np", ".", "abs", "(", "y", ")", ".", "max", "(", ")", ">", "1", ":", "\n", "            ", "y", "=", "y", "/", "np", ".", "abs", "(", "y", ")", ".", "max", "(", ")", "\n", "", "if", "self", ".", "wav_config", "[", "\"trim_silence\"", "]", ":", "\n", "            ", "y", "=", "audio", ".", "trim_silence", "(", "y", ",", "self", ".", "wav_config", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.save": [[27, 29], ["utils.audio.save_wav"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.save_wav"], ["", "def", "save", "(", "self", ",", "y", ",", "path", ")", ":", "\n", "        ", "audio", ".", "save_wav", "(", "y", ",", "path", ",", "self", ".", "wav_config", "[", "\"sample_rate\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.convert": [[30, 43], ["utils.audio.stft", "numpy.abs", "utils.audio.stft_power", "utils.audio.low_cut_filter", "utils.audio.linear_to_mel", "utils.audio.amp_to_db"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft_power", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.low_cut_filter", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.linear_to_mel", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.amp_to_db"], ["", "def", "convert", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "wav_config", "[", "\"highpass_cutoff\"", "]", ">", "0.0", ":", "\n", "            ", "y", "=", "audio", ".", "low_cut_filter", "(", "y", ",", "self", ".", "wav_config", "[", "\"sample_rate\"", "]", ",", "self", ".", "wav_config", "[", "\"highpass_cutoff\"", "]", ")", "\n", "", "if", "self", ".", "spec_config", "[", "\"preemphasis\"", "]", "is", "not", "None", ":", "\n", "            ", "pass", "\n", "", "D", "=", "audio", ".", "stft", "(", "y", ",", "self", ".", "spec_config", ")", "\n", "S", "=", "np", ".", "abs", "(", "D", ")", "\n", "S", "=", "audio", ".", "stft_power", "(", "S", ",", "self", ".", "spec_config", "[", "\"stft_power\"", "]", ")", "\n", "if", "self", ".", "spec_config", "[", "\"mel_spec\"", "]", ":", "\n", "            ", "S", "=", "audio", ".", "linear_to_mel", "(", "S", ",", "self", ".", "mel_basis", ")", "\n", "", "if", "self", ".", "post_config", "[", "\"amp_to_db\"", "]", ":", "\n", "            ", "S", "=", "audio", ".", "amp_to_db", "(", "S", ",", "{", "\"log_base\"", ":", "'e'", ",", "\"log_factor\"", ":", "1", "}", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.post_convert": [[44, 50], ["utils.audio.db_change_base", "utils.audio.normalize"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.db_change_base", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.normalize"], ["", "def", "post_convert", "(", "self", ",", "S", ")", ":", "\n", "        ", "if", "self", ".", "post_config", "[", "\"amp_to_db\"", "]", ":", "\n", "            ", "S", "=", "audio", ".", "db_change_base", "(", "S", ",", "self", ".", "post_config", ")", "\n", "if", "self", ".", "post_config", "[", "\"normalize_spec\"", "]", ":", "\n", "                ", "S", "=", "audio", ".", "normalize", "(", "S", ",", "self", ".", "post_config", ")", "\n", "", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.extract.extractor.Extractor.inverse": [[51, 63], ["utils.audio.stft_depower", "utils.audio.stft_to_wav", "utils.audio.db_to_amp", "utils.audio.mel_to_linear", "utils.audio.denormalize"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft_depower", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.stft_to_wav", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.db_to_amp", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.mel_to_linear", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.utils.audio.denormalize"], ["", "def", "inverse", "(", "self", ",", "S", ",", "n_iter", "=", "32", ")", ":", "\n", "        ", "if", "self", ".", "post_config", "[", "\"amp_to_db\"", "]", ":", "\n", "            ", "if", "self", ".", "post_config", "[", "\"normalize_spec\"", "]", ":", "\n", "                ", "S", "=", "audio", ".", "denormalize", "(", "S", ",", "self", ".", "post_config", ")", "\n", "", "S", "=", "audio", ".", "db_to_amp", "(", "S", ",", "self", ".", "post_config", ")", "\n", "", "if", "self", ".", "spec_config", "[", "\"mel_spec\"", "]", ":", "\n", "            ", "S", "=", "audio", ".", "mel_to_linear", "(", "S", ",", "self", ".", "inv_mel_basis", ")", "\n", "", "S", "=", "audio", ".", "stft_depower", "(", "S", ",", "self", ".", "spec_config", "[", "\"stft_power\"", "]", ")", "\n", "y", "=", "audio", ".", "stft_to_wav", "(", "S", ",", "self", ".", "spec_config", ",", "n_iter", ")", "\n", "if", "self", ".", "spec_config", "[", "\"preemphasis\"", "]", "is", "not", "None", ":", "\n", "            ", "pass", "\n", "", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_UNet.__init__": [[10, 13], ["torch.Module.__init__", "unet.UNet"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", "=", "1", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unet", "=", "UNet", "(", "n_channels", "=", "n_channels", ",", "num_layers", "=", "num_layers", ",", "base", "=", "base", ",", "bilinear", "=", "bilinear", ",", "res_add", "=", "res_add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_UNet.forward": [[14, 23], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "models.Refiner_UNet.unet", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "input.size", "torch.squeeze.size", "torch.squeeze.size", "input.size", "torch.squeeze.size", "torch.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "config", ")", ":", "\n", "        ", "input_w", "=", "torch", ".", "unsqueeze", "(", "input", ",", "-", "1", ")", "\n", "input_w", "=", "torch", ".", "transpose", "(", "input_w", ",", "1", ",", "3", ")", "\n", "# B * chan * n_mels * len", "\n", "output", "=", "self", ".", "unet", "(", "input_w", ")", "\n", "output", "=", "torch", ".", "transpose", "(", "output", ",", "1", ",", "3", ")", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "-", "1", ")", "\n", "assert", "input", ".", "size", "(", ")", "==", "output", ".", "size", "(", ")", ",", "\"shape should be same after refine: input {} & output {}\"", ".", "format", "(", "input", ".", "size", "(", ")", ",", "output", ".", "size", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_UNet_with_config.__init__": [[26, 30], ["torch.Module.__init__", "unet.UNet", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", "=", "1", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unet", "=", "UNet", "(", "n_channels", "=", "n_channels", ",", "num_layers", "=", "num_layers", ",", "base", "=", "base", ",", "bilinear", "=", "bilinear", ",", "res_add", "=", "res_add", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "n_channels", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_UNet_with_config.forward": [[31, 44], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "config.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Refiner_UNet_with_config.unet", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "models.Refiner_UNet_with_config.conv", "input.size", "torch.squeeze.size", "torch.squeeze.size", "input.size", "torch.squeeze.size", "torch.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "config", ")", ":", "\n", "        ", "batch", ",", "num_mels", ",", "length", "=", "input", ".", "shape", "\n", "input_w", "=", "torch", ".", "unsqueeze", "(", "input", ",", "1", ")", "\n", "# B * chan * n_mels * len", "\n", "config", "=", "torch", ".", "unsqueeze", "(", "config", ",", "-", "1", ")", "\n", "config", "=", "torch", ".", "unsqueeze", "(", "config", ",", "-", "1", ")", "\n", "config", "=", "config", ".", "repeat", "(", "1", ",", "1", ",", "num_mels", ",", "length", ")", "\n", "input_u", "=", "torch", ".", "cat", "(", "[", "input_w", ",", "config", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "unet", "(", "input_u", ")", "\n", "output", "=", "self", ".", "conv", "(", "output", ")", "+", "input_w", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "1", ")", "\n", "assert", "input", ".", "size", "(", ")", "==", "output", ".", "size", "(", ")", ",", "\"shape should be same after refine: input {} & output {}\"", ".", "format", "(", "input", ".", "size", "(", ")", ",", "output", ".", "size", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_UNet_affine.__init__": [[47, 50], ["torch.Module.__init__", "unet.UNet_affine"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", "=", "1", ",", "config_len", "=", "27", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unet", "=", "UNet_affine", "(", "n_channels", "=", "n_channels", ",", "config_len", "=", "config_len", ",", "num_layers", "=", "num_layers", ",", "base", "=", "base", ",", "bilinear", "=", "bilinear", ",", "res_add", "=", "res_add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_UNet_affine.forward": [[51, 59], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "models.Refiner_UNet_affine.unet", "input.size", "torch.squeeze.size", "torch.squeeze.size", "input.size", "torch.squeeze.size", "torch.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "config", ")", ":", "\n", "        ", "batch", ",", "num_mels", ",", "length", "=", "input", ".", "shape", "\n", "input_w", "=", "torch", ".", "unsqueeze", "(", "input", ",", "1", ")", "\n", "# B * chan * n_mels * len", "\n", "output", "=", "self", ".", "unet", "(", "input_w", ",", "config", ")", "+", "input_w", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "1", ")", "\n", "assert", "input", ".", "size", "(", ")", "==", "output", ".", "size", "(", ")", ",", "\"shape should be same after refine: input {} & output {}\"", ".", "format", "(", "input", ".", "size", "(", ")", ",", "output", ".", "size", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_ResNet_with_config.__init__": [[62, 81], ["torch.Module.__init__", "ResNet.ResNet.ResNet", "torch.Conv2d", "torch.Conv2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", "=", "1", ",", "\n", "block", "=", "'bottleneck'", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "planes", "=", "[", "64", ",", "64", ",", "128", ",", "128", "]", ",", "\n", "block_resadd", "=", "False", ",", "\n", "output_layer", "=", "False", ",", "\n", "groups", "=", "32", ",", "\n", "width_per_group", "=", "4", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "block", "==", "'bottleneck'", ":", "\n", "            ", "block", "=", "Bottleneck", "\n", "", "elif", "block", "==", "'basic'", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"we did not implement {block} block in ResNet\"", ")", "\n", "", "self", ".", "resnet", "=", "ResNet", "(", "input_chan", "=", "n_channels", ",", "block", "=", "block", ",", "layers", "=", "layers", ",", "planes", "=", "planes", ",", "block_resadd", "=", "block_resadd", ",", "output_layer", "=", "output_layer", ",", "groups", "=", "groups", ",", "width_per_group", "=", "width_per_group", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "n_channels", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_ResNet_with_config.forward": [[82, 98], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "config.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Refiner_ResNet_with_config.resnet", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "outputs.append", "models.Refiner_ResNet_with_config.conv", "input.size", "torch.squeeze.size", "torch.squeeze.size", "input.size", "torch.squeeze.size", "torch.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "config", ")", ":", "\n", "        ", "batch", ",", "num_mels", ",", "length", "=", "input", ".", "shape", "\n", "input_w", "=", "torch", ".", "unsqueeze", "(", "input", ",", "1", ")", "\n", "# B * chan * n_mels * len", "\n", "config", "=", "torch", ".", "unsqueeze", "(", "config", ",", "-", "1", ")", "\n", "config", "=", "torch", ".", "unsqueeze", "(", "config", ",", "-", "1", ")", "\n", "config", "=", "config", ".", "repeat", "(", "1", ",", "1", ",", "num_mels", ",", "length", ")", "\n", "input_u", "=", "torch", ".", "cat", "(", "[", "input_w", ",", "config", "]", ",", "1", ")", "\n", "_outputs", "=", "self", ".", "resnet", "(", "input_u", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "_output", "in", "_outputs", ":", "\n", "            ", "_output", "=", "self", ".", "conv", "(", "_output", ")", "+", "input_w", "\n", "_output", "=", "torch", ".", "squeeze", "(", "_output", ",", "1", ")", "\n", "assert", "input", ".", "size", "(", ")", "==", "_output", ".", "size", "(", ")", ",", "\"shape should be same after refine: input {} & output {}\"", ".", "format", "(", "input", ".", "size", "(", ")", ",", "_output", ".", "size", "(", ")", ")", "\n", "outputs", ".", "append", "(", "_output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_R2AttUNet_with_config.__init__": [[101, 111], ["torch.Module.__init__", "R2AttU_Net.R2AttU_Net.R2AttU_Net_config"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", "=", "1", ",", "\n", "config_len", "=", "27", ",", "\n", "t", "=", "2", ",", "\n", "layers", "=", "5", ",", "\n", "base", "=", "64", ",", "\n", "resadd", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unet", "=", "R2AttU_Net_config", "(", "img_ch", "=", "n_channels", ",", "output_ch", "=", "1", ",", "config_len", "=", "config_len", ",", "t", "=", "t", ",", "layers", "=", "layers", ",", "base", "=", "base", ",", "resadd", "=", "resadd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_R2AttUNet_with_config.forward": [[112, 120], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "models.Refiner_R2AttUNet_with_config.unet", "input.size", "torch.squeeze.size", "torch.squeeze.size", "input.size", "torch.squeeze.size", "torch.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "config", ")", ":", "\n", "        ", "batch", ",", "num_mels", ",", "length", "=", "input", ".", "shape", "\n", "input_w", "=", "torch", ".", "unsqueeze", "(", "input", ",", "1", ")", "\n", "# B * chan * n_mels * len", "\n", "output", "=", "self", ".", "unet", "(", "input_w", ",", "config", ")", "+", "input_w", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "1", ")", "\n", "assert", "input", ".", "size", "(", ")", "==", "output", ".", "size", "(", ")", ",", "\"shape should be same after refine: input {} & output {}\"", ".", "format", "(", "input", ".", "size", "(", ")", ",", "output", ".", "size", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_R2AttUNet.__init__": [[123, 132], ["torch.Module.__init__", "R2AttU_Net.R2AttU_Net.R2AttU_Net"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_channels", "=", "1", ",", "\n", "t", "=", "2", ",", "\n", "layers", "=", "5", ",", "\n", "base", "=", "64", ",", "\n", "resadd", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unet", "=", "R2AttU_Net", "(", "img_ch", "=", "n_channels", ",", "output_ch", "=", "1", ",", "t", "=", "t", ",", "layers", "=", "layers", ",", "base", "=", "base", ",", "resadd", "=", "resadd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.models.Refiner_R2AttUNet.forward": [[133, 145], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "config.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Refiner_R2AttUNet.unet", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "input.size", "torch.squeeze.size", "torch.squeeze.size", "input.size", "torch.squeeze.size", "torch.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "config", ")", ":", "\n", "        ", "batch", ",", "num_mels", ",", "length", "=", "input", ".", "shape", "\n", "input_w", "=", "torch", ".", "unsqueeze", "(", "input", ",", "1", ")", "\n", "# B * chan * n_mels * len", "\n", "config", "=", "torch", ".", "unsqueeze", "(", "config", ",", "-", "1", ")", "\n", "config", "=", "torch", ".", "unsqueeze", "(", "config", ",", "-", "1", ")", "\n", "config", "=", "config", ".", "repeat", "(", "1", ",", "1", ",", "num_mels", ",", "length", ")", "\n", "input_u", "=", "torch", ".", "cat", "(", "[", "input_w", ",", "config", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "unet", "(", "input_u", ")", "\n", "output", "=", "torch", ".", "squeeze", "(", "output", ",", "1", ")", "\n", "assert", "input", ".", "size", "(", ")", "==", "output", ".", "size", "(", ")", ",", "\"shape should be same after refine: input {} & output {}\"", ".", "format", "(", "input", ".", "size", "(", ")", ",", "output", ".", "size", "(", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.BasicBlock.__init__": [[35, 65], ["torch.Module.__init__", "ResNet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "norm_layer", "ResNet.trans_conv3x3", "norm_layer", "ResNet.trans_conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv3x3", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv3x3", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv3x3", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "transconv1", "=", "trans_conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "transconv2", "=", "trans_conv3x3", "(", "planes", ",", "inplanes", ",", "stride", ")", "\n", "self", ".", "bn4", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.BasicBlock.forward": [[66, 91], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.transconv1", "ResNet.BasicBlock.bn3", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.transconv2", "ResNet.BasicBlock.bn4", "ResNet.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "transconv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "transconv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "\n", "# if self.downsample is not None:", "\n", "#     identity = self.downsample(x)", "\n", "\n", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.Bottleneck.__init__": [[102, 135], ["torch.Module.__init__", "ResNet.conv1x1", "norm_layer", "ResNet.conv3x3", "norm_layer", "ResNet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "ResNet.trans_conv1x1", "norm_layer", "ResNet.trans_conv3x3", "norm_layer", "ResNet.trans_conv1x1", "norm_layer", "int"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv1x1", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv3x3", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv1x1", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv1x1", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv3x3", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "resadd", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "transconv1", "=", "trans_conv1x1", "(", "planes", "*", "self", ".", "expansion", ",", "width", ")", "\n", "self", ".", "bn4", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "transconv2", "=", "trans_conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn5", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "transconv3", "=", "trans_conv1x1", "(", "width", ",", "inplanes", ")", "\n", "self", ".", "bn6", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "resadd", "=", "resadd", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.Bottleneck.forward": [[136, 171], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.transconv1", "ResNet.Bottleneck.bn4", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.transconv2", "ResNet.Bottleneck.bn5", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.transconv3", "ResNet.Bottleneck.bn6", "ResNet.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out1", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out1", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out1", "=", "self", ".", "relu", "(", "out1", ")", "\n", "\n", "out2", "=", "self", ".", "conv3", "(", "out1", ")", "\n", "out2", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out2", "=", "self", ".", "relu", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "transconv1", "(", "out2", ")", "\n", "out3", "=", "self", ".", "bn4", "(", "out3", ")", "\n", "out3", "=", "self", ".", "relu", "(", "out3", ")", "\n", "if", "self", ".", "resadd", ":", "out3", "=", "out3", "+", "out1", "\n", "\n", "out4", "=", "self", ".", "transconv2", "(", "out3", ")", "\n", "out4", "=", "self", ".", "bn5", "(", "out4", ")", "\n", "out4", "=", "self", ".", "relu", "(", "out4", ")", "\n", "if", "self", ".", "resadd", ":", "out4", "=", "out4", "+", "out", "\n", "\n", "out5", "=", "self", ".", "transconv3", "(", "out4", ")", "\n", "out5", "=", "self", ".", "bn6", "(", "out5", ")", "\n", "\n", "# if self.downsample is not None:", "\n", "#     identity = self.downsample(x)", "\n", "\n", "out5", "=", "self", ".", "relu", "(", "out5", ")", "\n", "out5", "=", "out5", "+", "identity", "\n", "\n", "return", "out5", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.ResNet.__init__": [[175, 245], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ModuleList", "torch.ModuleList", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "ResNet.ResNet.modules", "len", "ValueError", "len", "len", "isinstance", "ResNet.ResNet.modules", "ResNet.ResNet._make_layer", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "range", "range", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__", "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_chan", ":", "int", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "planes", ":", "List", "[", "int", "]", ",", "\n", "block_resadd", ":", "bool", "=", "False", ",", "\n", "output_layer", ":", "bool", "=", "False", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "input_chan", "=", "input_chan", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "output_layer", "=", "output_layer", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", "for", "_", "in", "range", "(", "len", "(", "layers", ")", ")", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_chan", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "assert", "len", "(", "planes", ")", "==", "len", "(", "layers", ")", ",", "f'The len of planes {planes} and layers {layers} should be the same'", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "self", ".", "_make_layer", "(", "block", ",", "planes", "[", "i", "]", ",", "layers", "[", "i", "]", ",", "resadd", "=", "block_resadd", ",", "stride", "=", "1", ",", "dilate", "=", "replace_stride_with_dilation", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "layers", ")", ")", "]", "\n", ")", "\n", "# self.layer1 = self._make_layer(block, 64, layers[0])", "\n", "# self.layer2 = self._make_layer(block, 64, layers[1], stride=1,", "\n", "#                                dilate=replace_stride_with_dilation[0])", "\n", "# self.layer3 = self._make_layer(block, 128, layers[2], stride=1,", "\n", "#                                dilate=replace_stride_with_dilation[1])", "\n", "# self.layer4 = self._make_layer(block, 128, layers[3], stride=1,", "\n", "#                                dilate=replace_stride_with_dilation[2])", "\n", "self", ".", "trans_conv1", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "inplanes", ",", "self", ".", "input_chan", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "self", ".", "input_chan", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.ResNet._make_layer": [[246, 270], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "ResNet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "resadd", ":", "bool", "=", "False", ",", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ",", "resadd", ")", ")", "\n", "# self.inplanes = planes * block.expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "resadd", "=", "resadd", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.ResNet._forward_impl": [[271, 295], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "range", "ResNet.ResNet.trans_conv1", "ResNet.ResNet.bn2", "Xs.append", "len", "ResNet.ResNet.trans_conv1", "ResNet.ResNet.bn2", "Xs.append", "len"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "# x = self.maxpool(x)", "\n", "\n", "Xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "layers", "[", "i", "]", "(", "x", ")", "\n", "if", "self", ".", "output_layer", "and", "i", "!=", "len", "(", "self", ".", "layers", ")", "-", "1", ":", "\n", "                ", "_x", "=", "self", ".", "trans_conv1", "(", "x", ")", "\n", "_x", "=", "self", ".", "bn2", "(", "_x", ")", "\n", "Xs", ".", "append", "(", "_x", ")", "\n", "# x = self.layer1(x)", "\n", "# x = self.layer2(x)", "\n", "# x = self.layer3(x)", "\n", "# x = self.layer4(x)", "\n", "\n", "", "", "x", "=", "self", ".", "trans_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "Xs", ".", "append", "(", "x", ")", "\n", "\n", "return", "Xs", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.ResNet.forward": [[296, 298], ["ResNet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv3x3": [[8, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.conv1x1": [[14, 17], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv1x1": [[19, 22], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "trans_conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.ResNet.trans_conv3x3": [[24, 30], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "trans_conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "if", "stride", ">", "1", ":", "output_padding", "=", "1", "\n", "else", ":", "output_padding", "=", "0", "\n", "return", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.conv_block.__init__": [[30, 39], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "conv_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.conv_block.forward": [[42, 45], ["R2AttU_Net.conv_block.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.up_conv.__init__": [[47, 54], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "up_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "up_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.up_conv.forward": [[56, 64], ["R2AttU_Net.up_conv.up", "torch.pad", "torch.pad", "torch.pad", "R2AttU_Net.up_conv.up_block", "_x.size", "R2AttU_Net.up_conv.size", "_x.size", "R2AttU_Net.up_conv.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "_x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "diffY", "=", "_x", ".", "size", "(", ")", "[", "2", "]", "-", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "_x", ".", "size", "(", ")", "[", "3", "]", "-", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "x", "=", "self", ".", "up_block", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.Recurrent_block.__init__": [[66, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_out", ",", "t", "=", "2", ")", ":", "\n", "        ", "super", "(", "Recurrent_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "ch_out", "=", "ch_out", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.Recurrent_block.forward": [[76, 84], ["range", "R2AttU_Net.Recurrent_block.conv", "R2AttU_Net.Recurrent_block.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "t", ")", ":", "\n", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "x1", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "", "x1", "=", "self", ".", "conv", "(", "x", "+", "x1", ")", "\n", "", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.RRCNN_block.__init__": [[86, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "R2AttU_Net.Recurrent_block", "R2AttU_Net.Recurrent_block"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "t", "=", "2", ")", ":", "\n", "        ", "super", "(", "RRCNN_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RCNN", "=", "nn", ".", "Sequential", "(", "\n", "Recurrent_block", "(", "ch_out", ",", "t", "=", "t", ")", ",", "\n", "Recurrent_block", "(", "ch_out", ",", "t", "=", "t", ")", "\n", ")", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.RRCNN_block.forward": [[94, 98], ["R2AttU_Net.RRCNN_block.Conv_1x1", "R2AttU_Net.RRCNN_block.RCNN"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "Conv_1x1", "(", "x", ")", "\n", "x1", "=", "self", ".", "RCNN", "(", "x", ")", "\n", "return", "x", "+", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.RRCNN_block_config.__init__": [[101, 115], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU", "R2AttU_Net.Recurrent_block", "R2AttU_Net.Recurrent_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "config_len", ",", "t", "=", "2", ")", ":", "\n", "        ", "super", "(", "RRCNN_block_config", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RCNN", "=", "nn", ".", "Sequential", "(", "\n", "Recurrent_block", "(", "ch_out", ",", "t", "=", "t", ")", ",", "\n", "Recurrent_block", "(", "ch_out", ",", "t", "=", "t", ")", "\n", ")", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "cond_a", "=", "nn", ".", "Linear", "(", "config_len", ",", "ch_out", ")", "\n", "self", ".", "cond_b", "=", "nn", ".", "Linear", "(", "config_len", ",", "ch_out", ")", "\n", "self", ".", "cond_nl", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.RRCNN_block_config.forward": [[116, 124], ["R2AttU_Net.RRCNN_block_config.Conv_1x1", "config.size", "R2AttU_Net.RRCNN_block_config.cond_a().view", "R2AttU_Net.RRCNN_block_config.cond_b().view", "R2AttU_Net.RRCNN_block_config.cond_nl", "R2AttU_Net.RRCNN_block_config.RCNN", "R2AttU_Net.RRCNN_block_config.cond_a", "R2AttU_Net.RRCNN_block_config.cond_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "config", ")", ":", "\n", "        ", "x", "=", "self", ".", "Conv_1x1", "(", "x", ")", "\n", "Batch", "=", "config", ".", "size", "(", "0", ")", "\n", "Ca", "=", "self", ".", "cond_a", "(", "config", ")", ".", "view", "(", "Batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "Cb", "=", "self", ".", "cond_b", "(", "config", ")", ".", "view", "(", "Batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "cond_nl", "(", "Ca", "*", "x", "+", "Cb", ")", "\n", "x1", "=", "self", ".", "RCNN", "(", "x", ")", "\n", "return", "x", "+", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.single_conv.__init__": [[127, 133], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "single_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.single_conv.forward": [[135, 138], ["R2AttU_Net.single_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.Attention_block.__init__": [[140, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "F_g", ",", "F_l", ",", "F_int", ")", ":", "\n", "        ", "super", "(", "Attention_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_g", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "F_int", ")", "\n", ")", "\n", "\n", "self", ".", "W_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_l", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "F_int", ")", "\n", ")", "\n", "\n", "self", ".", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_int", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.Attention_block.forward": [[160, 167], ["R2AttU_Net.Attention_block.W_g", "R2AttU_Net.Attention_block.W_x", "R2AttU_Net.Attention_block.relu", "R2AttU_Net.Attention_block.psi"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "g1", "=", "self", ".", "W_g", "(", "g", ")", "\n", "x1", "=", "self", ".", "W_x", "(", "x", ")", "\n", "psi", "=", "self", ".", "relu", "(", "g1", "+", "x1", ")", "\n", "psi", "=", "self", ".", "psi", "(", "psi", ")", "\n", "\n", "return", "x", "*", "psi", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.U_Net.__init__": [[170, 194], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "1", ")", ":", "\n", "        ", "super", "(", "U_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "1024", ")", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.U_Net.forward": [[196, 233], ["R2AttU_Net.U_Net.Conv1", "R2AttU_Net.U_Net.Maxpool", "R2AttU_Net.U_Net.Conv2", "R2AttU_Net.U_Net.Maxpool", "R2AttU_Net.U_Net.Conv3", "R2AttU_Net.U_Net.Maxpool", "R2AttU_Net.U_Net.Conv4", "R2AttU_Net.U_Net.Maxpool", "R2AttU_Net.U_Net.Conv5", "R2AttU_Net.U_Net.Up5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.U_Net.Up_conv5", "R2AttU_Net.U_Net.Up4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.U_Net.Up_conv4", "R2AttU_Net.U_Net.Up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.U_Net.Up_conv3", "R2AttU_Net.U_Net.Up2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.U_Net.Up_conv2", "R2AttU_Net.U_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.R2U_Net.__init__": [[236, 266], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "R2AttU_Net.RRCNN_block", "R2AttU_Net.RRCNN_block", "R2AttU_Net.RRCNN_block", "R2AttU_Net.RRCNN_block", "R2AttU_Net.RRCNN_block", "R2AttU_Net.up_conv", "R2AttU_Net.RRCNN_block", "R2AttU_Net.up_conv", "R2AttU_Net.RRCNN_block", "R2AttU_Net.up_conv", "R2AttU_Net.RRCNN_block", "R2AttU_Net.up_conv", "R2AttU_Net.RRCNN_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "1", ",", "t", "=", "2", ")", ":", "\n", "        ", "super", "(", "R2U_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "Upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n", "self", ".", "RRCNN1", "=", "RRCNN_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "RRCNN2", "=", "RRCNN_block", "(", "ch_in", "=", "64", ",", "ch_out", "=", "128", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "RRCNN3", "=", "RRCNN_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "256", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "RRCNN4", "=", "RRCNN_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "512", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "RRCNN5", "=", "RRCNN_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "1024", ",", "t", "=", "t", ")", "\n", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Up_RRCNN5", "=", "RRCNN_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Up_RRCNN4", "=", "RRCNN_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Up_RRCNN3", "=", "RRCNN_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Up_RRCNN2", "=", "RRCNN_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.R2U_Net.forward": [[268, 304], ["R2AttU_Net.R2U_Net.RRCNN1", "R2AttU_Net.R2U_Net.Maxpool", "R2AttU_Net.R2U_Net.RRCNN2", "R2AttU_Net.R2U_Net.Maxpool", "R2AttU_Net.R2U_Net.RRCNN3", "R2AttU_Net.R2U_Net.Maxpool", "R2AttU_Net.R2U_Net.RRCNN4", "R2AttU_Net.R2U_Net.Maxpool", "R2AttU_Net.R2U_Net.RRCNN5", "R2AttU_Net.R2U_Net.Up5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.R2U_Net.Up_RRCNN5", "R2AttU_Net.R2U_Net.Up4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.R2U_Net.Up_RRCNN4", "R2AttU_Net.R2U_Net.Up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.R2U_Net.Up_RRCNN3", "R2AttU_Net.R2U_Net.Up2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.R2U_Net.Up_RRCNN2", "R2AttU_Net.R2U_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "RRCNN1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "self", ".", "RRCNN2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "self", ".", "RRCNN3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "RRCNN4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "RRCNN5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "d5", "=", "self", ".", "Up_RRCNN5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_RRCNN4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_RRCNN3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_RRCNN2", "(", "d2", ")", "\n", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.AttU_Net.__init__": [[308, 336], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.Attention_block", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.Attention_block", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.Attention_block", "R2AttU_Net.conv_block", "R2AttU_Net.up_conv", "R2AttU_Net.Attention_block", "R2AttU_Net.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "1", ")", ":", "\n", "        ", "super", "(", "AttU_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "1024", ")", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Att5", "=", "Attention_block", "(", "F_g", "=", "512", ",", "F_l", "=", "512", ",", "F_int", "=", "256", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Att4", "=", "Attention_block", "(", "F_g", "=", "256", ",", "F_l", "=", "256", ",", "F_int", "=", "128", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Att3", "=", "Attention_block", "(", "F_g", "=", "128", ",", "F_l", "=", "128", ",", "F_int", "=", "64", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Att2", "=", "Attention_block", "(", "F_g", "=", "64", ",", "F_l", "=", "64", ",", "F_int", "=", "32", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.AttU_Net.forward": [[338, 378], ["R2AttU_Net.AttU_Net.Conv1", "R2AttU_Net.AttU_Net.Maxpool", "R2AttU_Net.AttU_Net.Conv2", "R2AttU_Net.AttU_Net.Maxpool", "R2AttU_Net.AttU_Net.Conv3", "R2AttU_Net.AttU_Net.Maxpool", "R2AttU_Net.AttU_Net.Conv4", "R2AttU_Net.AttU_Net.Maxpool", "R2AttU_Net.AttU_Net.Conv5", "R2AttU_Net.AttU_Net.Up5", "R2AttU_Net.AttU_Net.Att5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.AttU_Net.Up_conv5", "R2AttU_Net.AttU_Net.Up4", "R2AttU_Net.AttU_Net.Att4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.AttU_Net.Up_conv4", "R2AttU_Net.AttU_Net.Up3", "R2AttU_Net.AttU_Net.Att3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.AttU_Net.Up_conv3", "R2AttU_Net.AttU_Net.Up2", "R2AttU_Net.AttU_Net.Att2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2AttU_Net.AttU_Net.Up_conv2", "R2AttU_Net.AttU_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "x4", "=", "self", ".", "Att5", "(", "g", "=", "d5", ",", "x", "=", "x4", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "x3", "=", "self", ".", "Att4", "(", "g", "=", "d4", ",", "x", "=", "x3", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "x2", "=", "self", ".", "Att3", "(", "g", "=", "d3", ",", "x", "=", "x2", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "x1", "=", "self", ".", "Att2", "(", "g", "=", "d2", ",", "x", "=", "x1", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.R2AttU_Net.__init__": [[381, 409], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "R2AttU_Net.RRCNN_block", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "R2AttU_Net.RRCNN_block", "R2AttU_Net.up_conv", "R2AttU_Net.Attention_block", "R2AttU_Net.RRCNN_block", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "1", ",", "t", "=", "2", ",", "layers", "=", "5", ",", "base", "=", "64", ",", "resadd", "=", "False", ")", ":", "\n", "        ", "super", "(", "R2AttU_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "resadd", "=", "resadd", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "Upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n", "self", ".", "inc", "=", "RRCNN_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "RRCNN_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "RRCNN_block", "(", "ch_in", "=", "base", "*", "(", "2", "**", "i", ")", ",", "ch_out", "=", "base", "*", "2", "*", "(", "2", "**", "i", ")", ",", "t", "=", "t", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ")", "]", "\n", ")", "\n", "\n", "self", ".", "Up_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "up_conv", "(", "ch_in", "=", "base", "*", "(", "2", "**", "i", ")", ",", "ch_out", "=", "base", "//", "2", "*", "(", "2", "**", "i", ")", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ",", "0", ",", "-", "1", ")", "]", "\n", ")", "\n", "\n", "self", ".", "Att_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Attention_block", "(", "F_g", "=", "base", "*", "(", "2", "**", "i", ")", "//", "2", ",", "F_l", "=", "base", "*", "(", "2", "**", "i", ")", "//", "2", ",", "F_int", "=", "base", "*", "(", "2", "**", "i", ")", "//", "4", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ",", "0", ",", "-", "1", ")", "]", "\n", ")", "\n", "\n", "factor", "=", "2", "if", "resadd", "else", "1", "\n", "self", ".", "Up_RRCNN_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "RRCNN_block", "(", "ch_in", "=", "base", "*", "(", "2", "**", "i", ")", "//", "factor", ",", "ch_out", "=", "base", "//", "2", "*", "(", "2", "**", "i", ")", ",", "t", "=", "t", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ",", "0", ",", "-", "1", ")", "]", "\n", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "base", ",", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.R2AttU_Net.forward": [[411, 437], ["R2AttU_Net.R2AttU_Net.inc", "Xs.append", "range", "range", "R2AttU_Net.R2AttU_Net.Conv_1x1", "R2AttU_Net.R2AttU_Net.Maxpool", "Xs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "Xs", "=", "[", "]", "\n", "x", "=", "self", ".", "inc", "(", "x", ")", "\n", "Xs", ".", "append", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "Maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "RRCNN_layers", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "layers", "-", "2", ":", "\n", "                ", "Xs", ".", "append", "(", "x", ")", "\n", "\n", "# decoding + concat path", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "1", ")", ":", "\n", "            ", "_x", "=", "Xs", "[", "self", ".", "layers", "-", "2", "-", "i", "]", "\n", "x", "=", "self", ".", "Up_layers", "[", "i", "]", "(", "x", ",", "_x", ")", "\n", "x", "=", "self", ".", "Att_layers", "[", "i", "]", "(", "g", "=", "x", ",", "x", "=", "_x", ")", "\n", "if", "self", ".", "resadd", ":", "\n", "                ", "x", "=", "x", "+", "_x", "\n", "", "else", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "_x", ")", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "self", ".", "Up_RRCNN_layers", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "Conv_1x1", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.R2AttU_Net_config.__init__": [[440, 468], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "R2AttU_Net.RRCNN_block_config", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "R2AttU_Net.RRCNN_block_config", "R2AttU_Net.up_conv", "R2AttU_Net.Attention_block", "R2AttU_Net.RRCNN_block_config", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "3", ",", "output_ch", "=", "1", ",", "config_len", "=", "20", ",", "t", "=", "2", ",", "layers", "=", "5", ",", "base", "=", "64", ",", "resadd", "=", "False", ")", ":", "\n", "        ", "super", "(", "R2AttU_Net_config", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "resadd", "=", "resadd", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "Upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n", "self", ".", "inc", "=", "RRCNN_block_config", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ",", "config_len", "=", "config_len", ",", "t", "=", "t", ")", "\n", "\n", "self", ".", "RRCNN_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "RRCNN_block_config", "(", "ch_in", "=", "base", "*", "(", "2", "**", "i", ")", ",", "ch_out", "=", "base", "*", "2", "*", "(", "2", "**", "i", ")", ",", "config_len", "=", "config_len", ",", "t", "=", "t", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ")", "]", "\n", ")", "\n", "\n", "self", ".", "Up_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "up_conv", "(", "ch_in", "=", "base", "*", "(", "2", "**", "i", ")", ",", "ch_out", "=", "base", "//", "2", "*", "(", "2", "**", "i", ")", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ",", "0", ",", "-", "1", ")", "]", "\n", ")", "\n", "\n", "self", ".", "Att_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Attention_block", "(", "F_g", "=", "base", "*", "(", "2", "**", "i", ")", "//", "2", ",", "F_l", "=", "base", "*", "(", "2", "**", "i", ")", "//", "2", ",", "F_int", "=", "base", "*", "(", "2", "**", "i", ")", "//", "4", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ",", "0", ",", "-", "1", ")", "]", "\n", ")", "\n", "\n", "factor", "=", "2", "if", "resadd", "else", "1", "\n", "self", ".", "Up_RRCNN_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "RRCNN_block_config", "(", "ch_in", "=", "base", "*", "(", "2", "**", "i", ")", "//", "factor", ",", "ch_out", "=", "base", "//", "2", "*", "(", "2", "**", "i", ")", ",", "config_len", "=", "config_len", ",", "t", "=", "t", ")", "for", "i", "in", "range", "(", "layers", "-", "1", ",", "0", ",", "-", "1", ")", "]", "\n", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "base", ",", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.R2AttU_Net_config.forward": [[470, 496], ["R2AttU_Net.R2AttU_Net_config.inc", "Xs.append", "range", "range", "R2AttU_Net.R2AttU_Net_config.Conv_1x1", "R2AttU_Net.R2AttU_Net_config.Maxpool", "Xs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "config", ")", ":", "\n", "# encoding path", "\n", "        ", "Xs", "=", "[", "]", "\n", "x", "=", "self", ".", "inc", "(", "x", ",", "config", ")", "\n", "Xs", ".", "append", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "Maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "RRCNN_layers", "[", "i", "]", "(", "x", ",", "config", ")", "\n", "if", "i", "!=", "self", ".", "layers", "-", "2", ":", "\n", "                ", "Xs", ".", "append", "(", "x", ")", "\n", "\n", "# decoding + concat path", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "layers", "-", "1", ")", ":", "\n", "            ", "_x", "=", "Xs", "[", "self", ".", "layers", "-", "2", "-", "i", "]", "\n", "x", "=", "self", ".", "Up_layers", "[", "i", "]", "(", "x", ",", "_x", ")", "\n", "x", "=", "self", ".", "Att_layers", "[", "i", "]", "(", "g", "=", "x", ",", "x", "=", "_x", ")", "\n", "if", "self", ".", "resadd", ":", "\n", "                ", "x", "=", "x", "+", "_x", "\n", "", "else", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "_x", ")", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "self", ".", "Up_RRCNN_layers", "[", "i", "]", "(", "x", ",", "config", ")", "\n", "\n", "", "x", "=", "self", ".", "Conv_1x1", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.adaptor.R2AttU_Net.init_weights": [[6, 28], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.DoubleConv.__init__": [[11, 22], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.DoubleConv.forward": [[24, 26], ["unet_parts.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Down.__init__": [[31, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Down.forward": [[38, 40], ["unet_parts.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Up.__init__": [[45, 59], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet_parts.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet_parts.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "self", ".", "res_add", "=", "res_add", "\n", "if", "res_add", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Up.forward": [[61, 77], ["unet_parts.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_parts.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "if", "self", ".", "res_add", ":", "\n", "            ", "return", "x1", "+", "x2", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.OutConv.__init__": [[80, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.OutConv.forward": [[84, 86], ["unet_parts.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.DoubleConv_affine.__init__": [[91, 108], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "config_len", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "double_conv_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "cond_a", "=", "nn", ".", "Linear", "(", "config_len", ",", "mid_channels", ")", "\n", "self", ".", "cond_b", "=", "nn", ".", "Linear", "(", "config_len", ",", "mid_channels", ")", "\n", "self", ".", "cond_nl", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.DoubleConv_affine.forward": [[109, 116], ["unet_parts.DoubleConv_affine.double_conv_1", "config.size", "unet_parts.DoubleConv_affine.cond_a().view", "unet_parts.DoubleConv_affine.cond_b().view", "unet_parts.DoubleConv_affine.cond_nl", "unet_parts.DoubleConv_affine.double_conv_2", "unet_parts.DoubleConv_affine.cond_a", "unet_parts.DoubleConv_affine.cond_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "config", ")", ":", "\n", "        ", "x", "=", "self", ".", "double_conv_1", "(", "x", ")", "\n", "Batch", "=", "config", ".", "size", "(", "0", ")", "\n", "Ca", "=", "self", ".", "cond_a", "(", "config", ")", ".", "view", "(", "Batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "Cb", "=", "self", ".", "cond_b", "(", "config", ")", ".", "view", "(", "Batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "cond_nl", "(", "Ca", "*", "x", "+", "Cb", ")", "\n", "return", "self", ".", "double_conv_2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Down_affine.__init__": [[121, 125], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_parts.DoubleConv_affine"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "config_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv_affine", "(", "in_channels", ",", "out_channels", ",", "config_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Down_affine.forward": [[127, 130], ["unet_parts.Down_affine.maxpool", "unet_parts.Down_affine.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "config", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "return", "self", ".", "conv", "(", "x", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Up_affine.__init__": [[135, 150], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet_parts.DoubleConv_affine", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet_parts.DoubleConv_affine", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet_parts.DoubleConv_affine"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "config_len", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv_affine", "(", "in_channels", ",", "out_channels", ",", "config_len", ",", "mid_channels", "=", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv_affine", "(", "in_channels", ",", "out_channels", ",", "config_len", ")", "\n", "\n", "", "self", ".", "res_add", "=", "res_add", "\n", "if", "res_add", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv_affine", "(", "out_channels", ",", "out_channels", ",", "config_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.Up_affine.forward": [[152, 168], ["unet_parts.Up_affine.up", "torch.pad", "torch.pad", "torch.pad", "unet_parts.Up_affine.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "config", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "if", "self", ".", "res_add", ":", "\n", "            ", "x", "=", "x1", "+", "x2", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "self", ".", "conv", "(", "x", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.OutConv_affine.__init__": [[171, 177], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "config_len", ")", ":", "\n", "        ", "super", "(", "OutConv_affine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cond_a", "=", "nn", ".", "Linear", "(", "config_len", ",", "in_channels", ")", "\n", "self", ".", "cond_b", "=", "nn", ".", "Linear", "(", "config_len", ",", "in_channels", ")", "\n", "self", ".", "cond_nl", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_parts.OutConv_affine.forward": [[178, 184], ["config.size", "unet_parts.OutConv_affine.cond_a().view", "unet_parts.OutConv_affine.cond_b().view", "unet_parts.OutConv_affine.cond_nl", "unet_parts.OutConv_affine.conv", "unet_parts.OutConv_affine.cond_a", "unet_parts.OutConv_affine.cond_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "config", ")", ":", "\n", "        ", "Batch", "=", "config", ".", "size", "(", "0", ")", "\n", "Ca", "=", "self", ".", "cond_a", "(", "config", ")", ".", "view", "(", "Batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "Cb", "=", "self", ".", "cond_b", "(", "config", ")", ".", "view", "(", "Batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "cond_nl", "(", "Ca", "*", "x", "+", "Cb", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet.__init__": [[11, 29], ["torch.Module.__init__", "unet_parts.DoubleConv", "torch.ModuleList", "torch.ModuleList", "unet_parts.Down", "torch.ModuleList", "torch.ModuleList", "unet_parts.Up", "unet_parts.OutConv", "unet_parts.Down", "unet_parts.Up", "range", "range"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "self", ".", "res_add", "=", "res_add", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "base", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Down", "(", "base", "*", "(", "2", "**", "i", ")", ",", "base", "*", "2", "*", "(", "2", "**", "i", ")", ")", "for", "i", "in", "range", "(", "num_layers", "-", "1", ")", "]", "\n", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "final_down", "=", "Down", "(", "base", "//", "2", "*", "(", "2", "**", "num_layers", ")", ",", "base", "*", "(", "2", "**", "num_layers", ")", "//", "factor", ")", "\n", "self", ".", "up_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Up", "(", "base", "*", "(", "2", "**", "i", ")", ",", "base", "//", "2", "*", "(", "2", "**", "i", ")", "//", "factor", ",", "bilinear", ",", "res_add", ")", "for", "i", "in", "range", "(", "num_layers", ",", "1", ",", "-", "1", ")", "]", "\n", ")", "\n", "self", ".", "final_up", "=", "Up", "(", "base", "*", "2", ",", "base", ",", "bilinear", ",", "res_add", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "base", ",", "n_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet.forward": [[41, 65], ["unet_model.UNet.inc", "x_list.append", "range", "unet_model.UNet.final_down", "range", "unet_model.UNet.final_up", "unet_model.UNet.outc", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_list", "=", "[", "]", "\n", "x", "=", "self", ".", "inc", "(", "x", ")", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "down_layers", "[", "i", "]", "(", "x", ")", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "", "x_up", "=", "self", ".", "final_down", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "x_up", "=", "self", ".", "up_layers", "[", "i", "]", "(", "x_up", ",", "x_list", "[", "self", ".", "num_layers", "-", "1", "-", "i", "]", ")", "\n", "", "x_up", "=", "self", ".", "final_up", "(", "x_up", ",", "x_list", "[", "0", "]", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x_up", ")", "\n", "\n", "# x1 = self.inc(x)", "\n", "# x2 = self.down1(x1)", "\n", "# x3 = self.down2(x2)", "\n", "# x4 = self.down3(x3)", "\n", "# x5 = self.down4(x4)", "\n", "# x = self.up1(x5, x4)", "\n", "# x = self.up2(x, x3)", "\n", "# x = self.up3(x, x2)", "\n", "# x = self.up4(x, x1)", "\n", "# logits = self.outc(x)", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__": [[68, 87], ["torch.Module.__init__", "unet_parts.DoubleConv_affine", "torch.ModuleList", "torch.ModuleList", "unet_parts.Down_affine", "torch.ModuleList", "torch.ModuleList", "unet_parts.Up_affine", "unet_parts.OutConv_affine", "unet_parts.Down_affine", "unet_parts.Up_affine", "range", "range"], "methods", ["home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "config_len", ",", "num_layers", "=", "4", ",", "base", "=", "16", ",", "bilinear", "=", "True", ",", "res_add", "=", "False", ")", ":", "\n", "        ", "super", "(", "UNet_affine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "config_len", "=", "config_len", "\n", "self", ".", "bilinear", "=", "bilinear", "if", "not", "res_add", "else", "False", "\n", "self", ".", "res_add", "=", "res_add", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "inc", "=", "DoubleConv_affine", "(", "n_channels", ",", "base", ",", "config_len", ")", "\n", "self", ".", "down_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Down_affine", "(", "base", "*", "(", "2", "**", "i", ")", ",", "base", "*", "2", "*", "(", "2", "**", "i", ")", ",", "config_len", ")", "for", "i", "in", "range", "(", "num_layers", "-", "1", ")", "]", "\n", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "final_down", "=", "Down_affine", "(", "base", "//", "2", "*", "(", "2", "**", "num_layers", ")", ",", "base", "*", "(", "2", "**", "num_layers", ")", "//", "factor", ",", "config_len", ")", "\n", "self", ".", "up_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Up_affine", "(", "base", "*", "(", "2", "**", "i", ")", ",", "base", "//", "2", "*", "(", "2", "**", "i", ")", "//", "factor", ",", "config_len", ",", "bilinear", ",", "res_add", ")", "for", "i", "in", "range", "(", "num_layers", ",", "1", ",", "-", "1", ")", "]", "\n", ")", "\n", "self", ".", "final_up", "=", "Up_affine", "(", "base", "*", "2", ",", "base", ",", "config_len", ",", "bilinear", ",", "res_add", ")", "\n", "self", ".", "outc", "=", "OutConv_affine", "(", "base", ",", "n_channels", ",", "config_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BogiHsu_Universal-Adaptor.unet.unet_model.UNet_affine.forward": [[88, 101], ["unet_model.UNet_affine.inc", "x_list.append", "range", "unet_model.UNet_affine.final_down", "range", "unet_model.UNet_affine.final_up", "unet_model.UNet_affine.outc", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "config", ")", ":", "\n", "        ", "x_list", "=", "[", "]", "\n", "x", "=", "self", ".", "inc", "(", "x", ",", "config", ")", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "down_layers", "[", "i", "]", "(", "x", ",", "config", ")", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "", "x_up", "=", "self", ".", "final_down", "(", "x", ",", "config", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "x_up", "=", "self", ".", "up_layers", "[", "i", "]", "(", "x_up", ",", "x_list", "[", "self", ".", "num_layers", "-", "1", "-", "i", "]", ",", "config", ")", "\n", "", "x_up", "=", "self", ".", "final_up", "(", "x_up", ",", "x_list", "[", "0", "]", ",", "config", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x_up", ",", "config", ")", "\n", "return", "logits", "\n", "", "", ""]]}