{"home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.symbol_to_string": [[19, 34], ["len", "out.strip", "len"], "function", ["None"], ["def", "symbol_to_string", "(", "arr", ",", "arr_len", ",", "eos_symbol", ",", "c_i2w", ")", ":", "\n", "    ", "max_valid_token", "=", "len", "(", "c_i2w", ")", "\n", "out", "=", "''", "\n", "# if arr_len == len(arr) then the caption doesn't have the <eos> token", "\n", "if", "arr_len", ">=", "len", "(", "arr", ")", ":", "\n", "        ", "for", "x", "in", "arr", ":", "\n", "            ", "if", "x", "<", "max_valid_token", ":", "\n", "                ", "out", "+=", "c_i2w", "[", "x", "]", "+", "' '", "\n", "", "", "", "else", ":", "\n", "        ", "for", "x", "in", "arr", "[", ":", "arr_len", "]", ":", "\n", "            ", "if", "x", "<", "max_valid_token", ":", "\n", "                ", "out", "+=", "c_i2w", "[", "x", "]", "+", "' '", "\n", "", "", "out", "+=", "eos_symbol", "\n", "\n", "", "return", "out", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.build_cap_ref_dicts": [[36, 51], ["collections.OrderedDict", "range", "Utils.util.to_np().tolist", "len", "range", "len", "all_refs.append", "range", "range", "Utils.util.to_np", "metrics.symbol_to_string", "metrics.symbol_to_string", "len", "len"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.symbol_to_string", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.symbol_to_string"], ["", "def", "build_cap_ref_dicts", "(", "pred", ",", "pred_len", ",", "targ", ",", "targ_len", ",", "eos_symbol", ",", "c_i2w", ")", ":", "\n", "    ", "pred", ",", "pred_len", ",", "ref", ",", "ref_len", "=", "[", "to_np", "(", "x", ")", ".", "tolist", "(", ")", "for", "x", "in", "[", "pred", ",", "pred_len", ",", "targ", ",", "targ_len", "]", "]", "\n", "\n", "gts", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ref", ")", ")", ":", "\n", "        ", "all_refs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "ref", "[", "i", "]", ")", ")", ":", "\n", "            ", "all_refs", ".", "append", "(", "symbol_to_string", "(", "ref", "[", "i", "]", "[", "j", "]", ",", "ref_len", "[", "i", "]", "[", "j", "]", ",", "eos_symbol", ",", "c_i2w", ")", ")", "\n", "", "gts", "[", "i", "]", "=", "all_refs", "\n", "\n", "", "res", "=", "[", "{", "'image_id'", ":", "i", ",", "'caption'", ":", "[", "symbol_to_string", "(", "pred", "[", "i", "]", ",", "pred_len", "[", "i", "]", ",", "eos_symbol", ",", "c_i2w", ")", "]", "}", "for", "i", "in", "\n", "range", "(", "len", "(", "pred", ")", ")", "]", "\n", "\n", "gts", "=", "{", "i", ":", "gts", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "gts", ")", ")", "}", "\n", "return", "gts", ",", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.linear_reward_weighting": [[55, 64], ["None"], "function", ["None"], ["", "def", "linear_reward_weighting", "(", "bleu1", ",", "bleu2", ",", "bleu3", ",", "bleu4", ",", "rouge", ",", "meteor", ",", "cider", ")", ":", "\n", "    ", "c_b1", "=", "0.5", "/", "5.0", "\n", "c_b2", "=", "0.5", "/", "5.0", "\n", "c_b3", "=", "1.0", "/", "5.0", "\n", "c_b4", "=", "1.0", "/", "5.0", "\n", "c_r", "=", "2.0", "/", "5.0", "\n", "c_m", "=", "5.0", "/", "5.0", "\n", "c_c", "=", "1.5", "/", "5.0", "\n", "return", "c_b1", "*", "bleu1", "+", "c_b2", "*", "bleu2", "+", "c_b3", "*", "bleu3", "+", "c_b4", "*", "bleu4", "+", "c_r", "*", "rouge", "+", "c_m", "*", "meteor", "+", "c_c", "*", "cider", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward": [[66, 86], ["metrics.build_cap_ref_dicts", "scorers[].compute_score", "scorers[].compute_score", "scorers[].compute_score", "scorers[].compute_score", "metrics.linear_reward_weighting", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.build_cap_ref_dicts", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.linear_reward_weighting"], ["", "def", "mixed_reward", "(", "pred", ",", "pred_len", ",", "targ", ",", "targ_len", ",", "scorers", ",", "c_i2w", ",", "eos_symbol", "=", "'eos'", ")", ":", "\n", "# prepare predicted captions and reference captions for scoring", "\n", "    ", "gts", ",", "res", "=", "build_cap_ref_dicts", "(", "pred", ",", "pred_len", ",", "targ", ",", "targ_len", ",", "eos_symbol", ",", "c_i2w", ")", "\n", "\n", "# score captions", "\n", "_", ",", "cider", "=", "scorers", "[", "'cider'", "]", ".", "compute_score", "(", "gts", ",", "res", ")", "\n", "\n", "# bleu, rouge, meteor require a different input format", "\n", "res_dict", "=", "{", "}", "\n", "for", "r", "in", "res", ":", "\n", "        ", "res_dict", "[", "r", "[", "'image_id'", "]", "]", "=", "r", "[", "'caption'", "]", "\n", "\n", "", "_", ",", "bleu", "=", "scorers", "[", "'bleu'", "]", ".", "compute_score", "(", "gts", ",", "res_dict", ")", "\n", "_", ",", "rouge", "=", "scorers", "[", "'rouge'", "]", ".", "compute_score", "(", "gts", ",", "res_dict", ")", "\n", "_", ",", "meteor", "=", "scorers", "[", "'meteor'", "]", ".", "compute_score", "(", "gts", ",", "res_dict", ")", "\n", "bleu1", ",", "bleu2", ",", "bleu3", ",", "bleu4", "=", "[", "np", ".", "asarray", "(", "x", ")", "for", "x", "in", "bleu", "]", "\n", "\n", "# compute weighted average reward", "\n", "wt_r", "=", "linear_reward_weighting", "(", "bleu1", ",", "bleu2", ",", "bleu3", ",", "bleu4", ",", "rouge", ",", "np", ".", "asarray", "(", "meteor", ")", ",", "cider", ")", "\n", "return", "wt_r", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.get_scorers": [[88, 94], ["pyciderevalcap.ciderD.ciderD.CiderD", "pycocoevalcap.bleu.bleu.Bleu", "pycocoevalcap.rouge.rouge.Rouge", "pycocoevalcap.meteor.meteor.Meteor"], "function", ["None"], ["", "def", "get_scorers", "(", "cider_idx_path", ")", ":", "\n", "    ", "return", "{", "\n", "'cider'", ":", "CiderD", "(", "df", "=", "cider_idx_path", ")", ",", "\n", "'bleu'", ":", "Bleu", "(", ")", ",", "\n", "'rouge'", ":", "Rouge", "(", ")", ",", "\n", "'meteor'", ":", "Meteor", "(", ")", "\n", "}", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss._sequence_mask": [[5, 17], ["sequence_length.size", "torch.arange().long", "torch.arange().long.unsqueeze().expand", "torch.autograd.Variable", "sequence_length.unsqueeze().expand_as", "sequence_length.data.max", "seq_range_expand.cuda.cuda", "torch.arange", "torch.arange().long.unsqueeze", "sequence_length.unsqueeze"], "function", ["None"], ["def", "_sequence_mask", "(", "sequence_length", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_length", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_length", ".", "size", "(", "0", ")", "\n", "seq_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "seq_range_expand", "=", "Variable", "(", "seq_range_expand", ")", "\n", "if", "sequence_length", ".", "is_cuda", ":", "\n", "        ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "(", "sequence_length", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand_as", "(", "seq_range_expand", ")", ")", "\n", "return", "seq_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss.masked_CE": [[20, 32], ["logits.view", "torch.log_softmax", "target.view", "losses_flat.view", "loss._sequence_mask", "logits.size", "torch.gather", "_sequence_mask.float", "losses_flat.view.sum", "length.float().sum", "target.size", "target.size", "weights.unsqueeze", "length.float"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss._sequence_mask"], ["", "def", "masked_CE", "(", "logits", ",", "target", ",", "length", ",", "weights", "=", "None", ")", ":", "\n", "    ", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "# logits_flat: (batch * max_len, num_classes)", "\n", "log_probs_flat", "=", "torch", ".", "log_softmax", "(", "logits_flat", ",", "dim", "=", "1", ")", "# log_probs_flat: (batch * max_len, num_classes)", "\n", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "# target_flat: (batch * max_len, 1)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "# losses_flat: (batch * max_len, 1)", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "# losses: (batch, max_len)", "\n", "mask", "=", "_sequence_mask", "(", "sequence_length", "=", "length", ",", "max_len", "=", "target", ".", "size", "(", "1", ")", ")", "# mask: (batch, max_len)", "\n", "losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "losses", "=", "weights", ".", "unsqueeze", "(", "1", ")", "*", "losses", "\n", "", "loss", "=", "losses", ".", "sum", "(", ")", "/", "length", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss.seq_max_and_mask": [[34, 39], ["loss._sequence_mask", "torch.max", "_sequence_mask.long"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss._sequence_mask"], ["", "def", "seq_max_and_mask", "(", "logits", ",", "length", ",", "max_len", ")", ":", "\n", "    ", "mask", "=", "_sequence_mask", "(", "length", ",", "max_len", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "logits", ",", "dim", "=", "2", ")", "\n", "\n", "return", "pred", "*", "mask", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss.masked_PG": [[42, 47], ["mask.float.float", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "masked_PG", "(", "reward", ",", "log_probs", ",", "mask", ",", "eps", "=", "0.0001", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "loss", "=", "-", "reward", "*", "log_probs", "*", "mask", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "(", "torch", ".", "sum", "(", "mask", ")", "+", "eps", ")", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong_baseline.MuteTrainer.__init__": [[19, 21], ["util.LLBaseTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MuteTrainer", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong_baseline.MuteTrainer.load_previous_chunk_best_models": [[22, 24], ["train_lifelong_baseline.MuteTrainer.reset_captioner"], "methods", ["None"], ["", "def", "load_previous_chunk_best_models", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_captioner", "(", "round", "=", "self", ".", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong_baseline.MuteTrainer.do_iteration": [[25, 59], ["train_lifelong_baseline.MuteTrainer.captioner.sample", "train_lifelong_baseline.MuteTrainer.captioner.sample", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "torch.from_numpy().to().type", "mask.clone", "torch.clamp", "mask.scatter_", "Losses.loss.masked_PG", "train_lifelong_baseline.MuteTrainer.data_collector.collect_batch", "Losses.loss.masked_PG.item", "torch.sum", "torch.sum", "torch.sum().long().unsqueeze", "torch.from_numpy().to().type.unsqueeze", "index.clone", "torch.from_numpy().to", "torch.sum().long", "torch.from_numpy", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss.masked_PG", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.collect_batch"], ["", "def", "do_iteration", "(", "self", ",", "image", ",", "refs", ",", "ref_lens", ",", "index", ")", ":", "\n", "\n", "# self.set_seed(random.randint(1, 10000))", "\n", "\n", "# 1. Caption completely", "\n", "# sampled caption", "\n", "        ", "r", "=", "self", ".", "captioner", ".", "sample", "(", "image", ",", "greedy", "=", "False", ",", "max_seq_len", "=", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ",", "\n", "temperature", "=", "self", ".", "opt", ".", "temperature", ")", "\n", "\n", "caption", ",", "log_probs", ",", "mask", "=", "r", ".", "caption", ",", "r", ".", "log_prob", ",", "r", ".", "mask", "\n", "\n", "# greedy caption", "\n", "gr", "=", "self", ".", "captioner", ".", "sample", "(", "image", ",", "greedy", "=", "True", ",", "max_seq_len", "=", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ")", "\n", "caption_greedy", ",", "mask_greedy", "=", "gr", ".", "caption", ",", "gr", ".", "mask", "\n", "\n", "# 2. Compute reward for captions", "\n", "rwd", "=", "mixed_reward", "(", "caption", ",", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "rwd_greedy", "=", "mixed_reward", "(", "caption_greedy", ",", "torch", ".", "sum", "(", "mask_greedy", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "\n", "reward_delta", "=", "torch", ".", "from_numpy", "(", "rwd", "-", "rwd_greedy", ")", ".", "to", "(", "device", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "mask_copy", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "length", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "mask", "!=", "0", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "max", "=", "self", ".", "opt", ".", "c_max_sentence_len", ")", "\n", "mask", ".", "scatter_", "(", "1", ",", "length", ",", "1", ")", "# increase mask dim by 1 to penalize for <eos>", "\n", "\n", "loss", "=", "masked_PG", "(", "reward_delta", ".", "unsqueeze", "(", "1", ")", ",", "log_probs", ",", "mask", ")", "\n", "\n", "# 3. Collect data, we make use of the DataCollector class", "\n", "captions", "=", "[", "caption_greedy", ",", "caption", ",", "caption", "]", "\n", "cap_masks", "=", "[", "mask_greedy", ",", "mask_copy", ",", "mask_copy", "]", "\n", "\n", "self", ".", "data_collector", ".", "collect_batch", "(", "index", ".", "clone", "(", ")", ",", "captions", ",", "cap_masks", ",", "[", "rwd_greedy", ",", "rwd", ",", "rwd", "]", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong_baseline.MuteTrainer.train": [[60, 94], ["enumerate", "train_lifelong_baseline.MuteTrainer.data_collector.process_collected_data", "time.time.time", "train_lifelong_baseline.MuteTrainer.do_iteration", "Utils.step_logging", "x.to", "len", "train_lifelong_baseline.MuteTrainer.std_logger.info", "time.time.time", "time.time.time", "Utils.time_remaining", "Utils.time_elapsed", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.process_collected_data", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.do_iteration", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.step_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.time_remaining", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.time_elapsed"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "print_loss", ",", "tic", "=", "0", ",", "time", "(", ")", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "            ", "image", ",", "refs", "=", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "[", "sample", "[", "0", "]", ",", "sample", "[", "4", "]", "]", "]", "\n", "ref_lens", ",", "img_path", ",", "index", "=", "sample", "[", "5", "]", ",", "sample", "[", "7", "]", ",", "sample", "[", "8", "]", "\n", "\n", "batch_loss", "=", "self", ".", "do_iteration", "(", "image", ",", "refs", ",", "ref_lens", ",", "index", ")", "\n", "\n", "print_loss", "+=", "batch_loss", "\n", "\n", "info", "=", "{", "\n", "'collect/loss'", ":", "print_loss", "/", "self", ".", "opt", ".", "print_every", ",", "\n", "'collect/time'", ":", "(", "time", "(", ")", "-", "tic", ")", "/", "self", ".", "opt", ".", "print_every", "# total time so far for this epoch", "\n", "}", "\n", "util", ".", "step_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "collection_steps", ")", "\n", "\n", "if", "self", ".", "collection_steps", "%", "self", ".", "opt", ".", "print_every", "==", "0", ":", "\n", "\n", "                ", "steps_per_epoch", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "std_logger", ".", "info", "(", "\n", "\"Baseline - Chunk {} Epoch {}, {}/{}| Loss: {} | Time per batch: {} |\"", "\n", "\" Epoch remaining time (HH:MM:SS) {} | Elapsed time {}\"", "\n", ".", "format", "(", "self", ".", "chunk", "+", "1", ",", "self", ".", "collection_epoch", ",", "i", ",", "steps_per_epoch", ",", "info", "[", "'collect/loss'", "]", ",", "\n", "info", "[", "'collect/time'", "]", ",", "util", ".", "time_remaining", "(", "steps_per_epoch", "-", "i", ",", "info", "[", "'collect/time'", "]", ")", ",", "\n", "util", ".", "time_elapsed", "(", "self", ".", "start_time", ",", "time", "(", ")", ")", ")", ")", "\n", "\n", "print_loss", ",", "tic", "=", "0", ",", "time", "(", ")", "\n", "\n", "", "self", ".", "collection_steps", "+=", "1", "\n", "\n", "", "self", ".", "data_collector", ".", "process_collected_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong_baseline.MuteTrainer.loop_chunk": [[95, 107], ["range", "train_lifelong_baseline.MuteTrainer.train", "train_lifelong_baseline.MuteTrainer.data_collector.get_epoch_stats", "Utils.epoch_logging", "Utils.distr_logging", "train_lifelong_baseline.MuteTrainer.data_collector.reset_epoch_counters", "info.iteritems"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_epoch_stats", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.epoch_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.distr_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.reset_epoch_counters"], ["", "def", "loop_chunk", "(", "self", ",", "repochs", ")", ":", "\n", "\n", "        ", "for", "epoch", "in", "range", "(", "repochs", ")", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "\n", "info", ",", "distrs", "=", "self", ".", "data_collector", ".", "get_epoch_stats", "(", ")", "\n", "info", "=", "{", "'mk-main/'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "info", ".", "iteritems", "(", ")", "}", "\n", "util", ".", "epoch_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "collection_epoch", ")", "\n", "util", ".", "distr_logging", "(", "self", ".", "logger", ",", "distrs", ",", "self", ".", "collection_epoch", ")", "\n", "self", ".", "data_collector", ".", "reset_epoch_counters", "(", ")", "\n", "\n", "self", ".", "collection_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.__init__": [[30, 62], ["util.LLBaseTrainer.__init__", "Utils.load_model", "Utils.load_model", "Utils.load_model", "Models.decision_maker.DecisionMaker().to", "train_lifelong.QuestionAskingTrainer.dmaker.apply", "train_lifelong.QuestionAskingTrainer.dmaker.pos_embedding.weight.data.copy_", "train_lifelong.QuestionAskingTrainer.dmaker.caption_embedding.weight.data.copy_", "torch.optim.Adam", "train_lifelong.QuestionAskingTrainer.fixed_caption_encoder.eval", "train_lifelong.QuestionAskingTrainer.vqa.eval", "train_lifelong.QuestionAskingTrainer.init_dummy_tensors", "Utils.visualizer.LLVisualizer", "Utils.visualizer.LLVisualizer", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Models.decision_maker.DecisionMaker", "filter", "train_lifelong.QuestionAskingTrainer.dmaker.parameters"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.init_dummy_tensors"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "QuestionAskingTrainer", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "# initialize part-of-speech parser", "\n", "self", ".", "eval_steps", "=", "0", "\n", "\n", "# initialize models", "\n", "self", ".", "qgen", "=", "load_model", "(", "self", ".", "opt", ".", "quegen_path", ",", "QuestionGenerator", ")", "\n", "self", ".", "vqa", "=", "load_model", "(", "self", ".", "opt", ".", "vqa_path", ",", "AttentionVQA", ")", "\n", "self", ".", "fixed_caption_encoder", "=", "load_model", "(", "self", ".", "opt", ".", "cap_path", ",", "AttentionCaptioner", ")", "\n", "self", ".", "dmaker", "=", "DecisionMaker", "(", "self", ".", "opt", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "dmaker", ".", "apply", "(", "util", ".", "weights_init", ")", "\n", "self", ".", "dmaker", ".", "pos_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "captioner", ".", "decoder", ".", "pos_embedding", ".", "weight", ".", "data", ")", "\n", "self", ".", "dmaker", ".", "caption_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "captioner", ".", "caption_embedding", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "d_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "dmaker", ".", "parameters", "(", ")", ")", ",", "'lr'", ":", "self", ".", "opt", ".", "d_lr", ",", "\n", "'mod_name'", ":", "'dec'", "}", "\n", "]", ")", "\n", "\n", "self", ".", "fixed_caption_encoder", ".", "eval", "(", ")", "\n", "self", ".", "vqa", ".", "eval", "(", ")", "\n", "\n", "self", ".", "init_dummy_tensors", "(", ")", "\n", "\n", "# Logging", "\n", "self", ".", "trainLLvisualizer", "=", "LLVisualizer", "(", "os", ".", "path", ".", "join", "(", "self", ".", "result_path", ",", "\"{}_lltrain.html\"", ".", "format", "(", "self", ".", "opt", ".", "run_name", ")", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "exp_dir", ",", "\"Utils/css/lifelong.css\"", ")", ")", "\n", "self", ".", "valLLvisualizer", "=", "LLVisualizer", "(", "os", ".", "path", ".", "join", "(", "self", ".", "result_path", ",", "\"{}_llval.html\"", ".", "format", "(", "self", ".", "opt", ".", "run_name", ")", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "exp_dir", ",", "\"Utils/css/lifelong.css\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.init_dummy_tensors": [[63, 78], ["torch.arange", "torch.arange().repeat", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange"], "methods", ["None"], ["", "def", "init_dummy_tensors", "(", "self", ")", ":", "\n", "\n", "# Put dummy tensors on GPU to speed up training", "\n", "        ", "self", ".", "range_vector", "=", "torch", ".", "arange", "(", "self", ".", "opt", ".", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "self", ".", "range_matrix", "=", "torch", ".", "arange", "(", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "repeat", "(", "self", ".", "opt", ".", "batch_size", ",", "1", ")", "\n", "self", ".", "ones_vector", "=", "torch", ".", "ones", "(", "self", ".", "opt", ".", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "ones_matrix", "=", "torch", ".", "ones", "(", "[", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "q_max_sentence_len", "+", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "zeros_matrix", "=", "torch", ".", "zeros", "(", "[", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "zeros_tensor", "=", "torch", ".", "zeros", "(", "[", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ",", "self", ".", "opt", ".", "dm_rnn_size", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "zeros_tensor2", "=", "torch", ".", "zeros", "(", "[", "self", ".", "opt", ".", "rnn_layers", ",", "self", ".", "opt", ".", "batch_size", ",", "self", ".", "opt", ".", "rnn_size", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.load_previous_chunk_best_models": [[79, 86], ["train_lifelong.QuestionAskingTrainer.std_logger.info", "torch.load", "train_lifelong.QuestionAskingTrainer.dmaker.load_state_dict", "train_lifelong.QuestionAskingTrainer.reset_captioner"], "methods", ["None"], ["", "def", "load_previous_chunk_best_models", "(", "self", ")", ":", "\n", "# load decision maker model", "\n", "        ", "self", ".", "std_logger", ".", "info", "(", "\"Loading decision maker from {}.\"", ".", "format", "(", "self", ".", "decision_maker_model_files", "[", "self", ".", "chunk", "]", ")", ")", "\n", "save_state", "=", "torch", ".", "load", "(", "self", ".", "decision_maker_model_files", "[", "self", ".", "chunk", "]", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "dmaker", ".", "load_state_dict", "(", "save_state", "[", "'state_dict'", "]", ")", "\n", "# load caption model", "\n", "self", ".", "reset_captioner", "(", "round", "=", "self", ".", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.sample_decision": [[87, 105], ["masked_prob.size", "train_lifelong.QuestionAskingTrainer.zeros_matrix[].clone", "torch.clamp", "train_lifelong.QuestionAskingTrainer.scatter().detach", "masked_prob.clone().detach", "torch.max", "torch.multinomial", "masked_prob.gather", "torch.sum().long().unsqueeze", "x.squeeze", "masked_prob.gather.unsqueeze", "torch.multinomial.unsqueeze", "train_lifelong.QuestionAskingTrainer.scatter", "masked_prob.clone", "torch.sum().long", "ask_flag.long", "torch.sum"], "methods", ["None"], ["", "def", "sample_decision", "(", "self", ",", "masked_prob", ",", "caption_mask", ",", "greedy", "=", "False", ")", ":", "\n", "        ", "batch_size", "=", "masked_prob", ".", "size", "(", "0", ")", "\n", "zeros_mask", "=", "self", ".", "zeros_matrix", "[", ":", "batch_size", "]", ".", "clone", "(", ")", "\n", "\n", "if", "greedy", ":", "\n", "            ", "masked_prob_copy", "=", "masked_prob", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "val", ",", "idx", "=", "torch", ".", "max", "(", "masked_prob_copy", ",", "1", ")", "\n", "val", ",", "idx", "=", "val", ".", "unsqueeze", "(", "1", ")", ",", "idx", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "torch", ".", "multinomial", "(", "masked_prob", ",", "1", ")", "\n", "val", "=", "masked_prob", ".", "gather", "(", "1", ",", "idx", ")", "\n", "\n", "# edge-case: don't ask if probabilities are all 0s", "\n", "", "length", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "caption_mask", "!=", "0", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "max", "=", "self", ".", "opt", ".", "c_max_sentence_len", ")", "\n", "ask_flag", "=", "(", "val", "!=", "0", ")", "*", "(", "val", ">", "self", ".", "opt", ".", "question_asking_threshold", ")", "*", "(", "idx", "!=", "length", ")", "\n", "ask_mask", "=", "zeros_mask", ".", "scatter", "(", "1", ",", "idx", ",", "ask_flag", ".", "long", "(", ")", ")", ".", "detach", "(", ")", "\n", "\n", "return", "[", "x", ".", "squeeze", "(", ")", "for", "x", "in", "[", "val", ",", "idx", ",", "ask_flag", ",", "ask_mask", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.ask_question": [[106, 132], ["pos_probs[].detach.size", "pos_probs[].detach", "h[].detach", "att[].detach", "train_lifelong.QuestionAskingTrainer.qgen.sample", "train_lifelong.QuestionAskingTrainer.pad_question", "train_lifelong.QuestionAskingTrainer.vqa", "train_lifelong.QuestionAskingTrainer.zeros_matrix[].clone().scatter().detach", "train_lifelong.QuestionAskingTrainer.zeros_tensor.clone", "torch.max", "argparse.Namespace", "train_lifelong.QuestionAskingTrainer.zeros_matrix[].clone().scatter", "idx.unsqueeze", "answers.unsqueeze", "train_lifelong.QuestionAskingTrainer.zeros_matrix[].clone"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample"], ["", "def", "ask_question", "(", "self", ",", "image", ",", "caption", ",", "refs", ",", "pos_probs", ",", "h", ",", "att", ",", "idx", ",", "q_greedy", ",", "temperature", "=", "1.0", ")", ":", "\n", "        ", "batch_size", "=", "pos_probs", ".", "size", "(", "0", ")", "\n", "\n", "# index features by the decision maker time step", "\n", "pos_probs", "=", "pos_probs", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "idx", "]", ".", "detach", "(", ")", "\n", "h", "=", "h", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "idx", "]", ".", "detach", "(", ")", "\n", "att", "=", "att", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "idx", "]", ".", "detach", "(", ")", "\n", "\n", "# decision maker index vector", "\n", "q_idx_vec", "=", "self", ".", "zeros_tensor", ".", "clone", "(", ")", "[", ":", "batch_size", "]", "\n", "q_idx_vec", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "idx", ",", ":", "]", "=", "1.0", "\n", "\n", "# query question generator", "\n", "result", "=", "self", ".", "qgen", ".", "sample", "(", "image", ",", "caption", ",", "pos_probs", ",", "h", ",", "att", ",", "q_idx_vec", ",", "greedy", "=", "q_greedy", ",", "\n", "max_seq_len", "=", "self", ".", "opt", ".", "q_max_sentence_len", "+", "1", ",", "temperature", "=", "temperature", ")", "\n", "question", ",", "q_logprob", ",", "q_mask", "=", "result", ".", "question", ",", "result", ".", "log_prob", ",", "result", ".", "mask", "\n", "question", "=", "self", ".", "pad_question", "(", "question", ",", "q_mask", ")", "# replace 0's with", "\n", "\n", "# ask expert question and get answer", "\n", "result", "=", "self", ".", "vqa", "(", "image", ",", "question", ",", "refs", ")", "\n", "ans_prob", "=", "result", ".", "probs", "\n", "answers", "=", "torch", ".", "max", "(", "ans_prob", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "answer_mask", "=", "self", ".", "zeros_matrix", "[", ":", "batch_size", "]", ".", "clone", "(", ")", ".", "scatter", "(", "1", ",", "idx", ".", "unsqueeze", "(", "1", ")", ",", "answers", ".", "unsqueeze", "(", "1", ")", ")", ".", "detach", "(", ")", "\n", "\n", "return", "answers", ",", "answer_mask", ",", "Namespace", "(", "pos_prob", "=", "pos_probs", ",", "att", "=", "att", ",", "q_logprob", "=", "q_logprob", ",", "q_mask", "=", "q_mask", ",", "\n", "question", "=", "question", ",", "ans_prob", "=", "ans_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer": [[133, 139], ["Utils.init_state", "train_lifelong.QuestionAskingTrainer.set_seed", "train_lifelong.QuestionAskingTrainer.captioner.sample_with_teacher_answer", "image.size"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.init_state", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample_with_teacher_answer"], ["", "def", "caption_with_teacher_answer", "(", "self", ",", "image", ",", "ask_mask", ",", "answer_mask", ",", "greedy", ",", "temperature", "=", "1.0", ")", ":", "\n", "\n", "        ", "hidden", ",", "previous_word", "=", "util", ".", "init_state", "(", "image", ".", "size", "(", "0", ")", ",", "self", ".", "ones_vector", ",", "self", ".", "zeros_tensor2", ")", "\n", "self", ".", "set_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "return", "self", ".", "captioner", ".", "sample_with_teacher_answer", "(", "image", ",", "ask_mask", ",", "answer_mask", ",", "hidden", ",", "previous_word", ",", "\n", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ",", "greedy", ",", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.do_iteration": [[140, 311], ["train_lifelong.QuestionAskingTrainer.d_optimizer.zero_grad", "image.size", "train_lifelong.QuestionAskingTrainer.set_seed", "train_lifelong.QuestionAskingTrainer.captioner.sample", "cap_mask.long().sum", "caps.append", "cmasks.append", "train_lifelong.QuestionAskingTrainer.pad_caption", "torch.cat", "train_lifelong.QuestionAskingTrainer.fixed_caption_encoder", "train_lifelong.QuestionAskingTrainer.hidden.detach", "train_lifelong.QuestionAskingTrainer.dmaker", "Utils.masked_softmax", "train_lifelong.QuestionAskingTrainer.sample_decision", "train_lifelong.QuestionAskingTrainer.sample_decision", "dps.append", "train_lifelong.QuestionAskingTrainer.ask_question", "train_lifelong.QuestionAskingTrainer.ask_question", "cps.append", "cps.append", "pps.append", "pps.append", "atts.append", "atts.append", "qlps.append", "qlps.append", "qmasks.append", "qmasks.append", "qs.append", "qs.append", "aps.append", "aps.append", "train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer", "train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer", "Utils.replace_word_in_caption", "Utils.replace_word_in_caption", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "numpy.maximum", "numpy.maximum", "Utils.choose_better_caption", "Utils.choose_better_caption", "Utils.get_rollout_replace_stats", "caps.append", "cmasks.append", "caps.append", "cmasks.append", "torch.from_numpy().type().to", "Losses.loss.masked_PG", "Losses.loss.masked_PG.backward", "train_lifelong.QuestionAskingTrainer.d_optimizer.step", "train_lifelong.QuestionAskingTrainer.data_collector.collect_batch", "Losses.loss.masked_PG.item", "train_lifelong.QuestionAskingTrainer.attention.squeeze", "x.detach", "dm_prob.unsqueeze", "train_lifelong.QuestionAskingTrainer.q_logprob.unsqueeze", "train_lifelong.QuestionAskingTrainer.q_logprob.unsqueeze", "train_lifelong.QuestionAskingTrainer.question.detach", "train_lifelong.QuestionAskingTrainer.question.detach", "train_lifelong.QuestionAskingTrainer.ans_prob.detach", "train_lifelong.QuestionAskingTrainer.ans_prob.detach", "x.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().type().to.detach", "torch.log().squeeze", "ask_flag.detach", "x.sum", "index.clone", "range", "cap_mask.long", "train_lifelong.QuestionAskingTrainer.ones_vector[].unsqueeze", "y.detach", "torch.from_numpy().type", "ask_flag.float", "torch.max", "torch.topk", "Utils.to_np", "image.size", "train_lifelong.QuestionAskingTrainer.trainLLvisualizer.add_entry", "Utils.step_logging", "torch.log", "torch.topk", "torch.topk", "torch.topk", "bool", "torch.mean().item", "torch.from_numpy", "cmasks[].long().sum", "rollout_mask.long().sum", "qmasks[].long().sum", "ask_flag.long", "len", "float", "float", "float", "float", "float", "float", "ask_flag.size", "Utils.idx2str", "Utils.idx2str", "Utils.idx2str", "Utils.idx2str", "q_logprob[].sum", "Utils.idx2str", "range", "torch.mean", "ask_flag.sum().item", "cmasks[].long", "rollout_mask.long", "qmasks[].long", "torch.cat", "x.item", "x.item", "x.item", "ask_flag.sum", "x.item"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.sample_decision", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.sample_decision", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.ask_question", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.ask_question", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.loss.masked_PG", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.collect_batch", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.LLVisualizer.add_entry", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.step_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str"], ["", "def", "do_iteration", "(", "self", ",", "image", ",", "refs", ",", "ref_lens", ",", "index", ",", "img_path", ")", ":", "\n", "        ", "self", ".", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "\n", "caps", ",", "cmasks", ",", "qs", ",", "qlps", ",", "qmasks", ",", "aps", ",", "pps", ",", "atts", ",", "cps", ",", "dps", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# 1. Caption completely", "\n", "self", ".", "set_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "\n", "r", "=", "self", ".", "captioner", ".", "sample", "(", "image", ",", "greedy", "=", "self", ".", "opt", ".", "cap_greedy", ",", "max_seq_len", "=", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ",", "\n", "temperature", "=", "self", ".", "opt", ".", "temperature", ")", "\n", "\n", "caption", ",", "cap_probs", ",", "cap_mask", ",", "pos_probs", ",", "att", ",", "topk_words", ",", "attended_img", "=", "r", ".", "caption", ",", "r", ".", "prob", ",", "r", ".", "mask", ",", "r", ".", "pos_prob", ",", "r", ".", "attention", ".", "squeeze", "(", ")", ",", "r", ".", "topk", ",", "r", ".", "atdimg", "\n", "\n", "# Don't backprop through captioner", "\n", "caption", ",", "cap_probs", ",", "cap_mask", ",", "pos_probs", ",", "attended_img", "=", "[", "x", ".", "detach", "(", ")", "for", "x", "in", "[", "caption", ",", "cap_probs", ",", "cap_mask", ",", "pos_probs", ",", "attended_img", "]", "]", "\n", "\n", "cap_len", "=", "cap_mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "caps", ".", "append", "(", "caption", ")", "\n", "cmasks", ".", "append", "(", "cap_mask", ")", "\n", "\n", "caption", "=", "self", ".", "pad_caption", "(", "caption", ",", "cap_len", ")", "\n", "\n", "# get the hidden state context", "\n", "source", "=", "torch", ".", "cat", "(", "[", "self", ".", "ones_vector", "[", ":", "batch_size", "]", ".", "unsqueeze", "(", "1", ")", ",", "caption", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "r", "=", "self", ".", "fixed_caption_encoder", "(", "image", ",", "source", ",", "gt_pos", "=", "None", ",", "ss", "=", "False", ")", "\n", "h", "=", "r", ".", "hidden", ".", "detach", "(", ")", "\n", "topk_words", "=", "[", "[", "y", ".", "detach", "(", ")", "for", "y", "in", "x", "]", "for", "x", "in", "topk_words", "]", "\n", "\n", "# 2. Identify the best time to ask a question, excluding ended sentences, baseline against the greedy decision", "\n", "logit", ",", "valid_pos_mask", "=", "self", ".", "dmaker", "(", "h", ",", "attended_img", ",", "caption", ",", "cap_len", ",", "\n", "pos_probs", ",", "topk_words", ",", "self", ".", "captioner", ".", "caption_embedding", ".", "weight", ".", "data", ")", "\n", "masked_prob", "=", "masked_softmax", "(", "logit", ",", "cap_mask", ",", "valid_pos_mask", ",", "\n", "self", ".", "opt", ".", "dm_temperature", ",", "max_len", "=", "self", ".", "opt", ".", "c_max_sentence_len", ")", "\n", "\n", "dm_prob", ",", "ask_idx", ",", "ask_flag", ",", "ask_mask", "=", "self", ".", "sample_decision", "(", "masked_prob", ",", "cap_mask", ",", "greedy", "=", "False", ")", "\n", "_", ",", "ask_idx_greedy", ",", "ask_flag_greedy", ",", "ask_mask_greedy", "=", "self", ".", "sample_decision", "(", "masked_prob", ",", "cap_mask", ",", "greedy", "=", "True", ")", "\n", "\n", "dps", ".", "append", "(", "dm_prob", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "# 3. Ask the teacher a question and get the answer", "\n", "ans", ",", "ans_mask", ",", "r", "=", "self", ".", "ask_question", "(", "image", ",", "caption", ",", "refs", ",", "pos_probs", ",", "h", ",", "att", ",", "ask_idx", ",", "\n", "q_greedy", "=", "self", ".", "opt", ".", "q_greedy", ",", "temperature", "=", "self", ".", "opt", ".", "temperature", ")", "\n", "ans_greedy", ",", "ans_mask_greedy", ",", "rg", "=", "self", ".", "ask_question", "(", "image", ",", "caption", ",", "refs", ",", "pos_probs", ",", "h", ",", "att", ",", "ask_idx_greedy", ",", "\n", "q_greedy", "=", "self", ".", "opt", ".", "q_greedy", ",", "temperature", "=", "self", ".", "opt", ".", "temperature", ")", "\n", "\n", "# logging stuff", "\n", "cps", ".", "append", "(", "cap_probs", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "ask_idx", "]", ")", ";", "cps", ".", "append", "(", "cap_probs", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "ask_idx_greedy", "]", ")", "\n", "pps", ".", "append", "(", "r", ".", "pos_prob", "[", "0", "]", ")", ";", "pps", ".", "append", "(", "rg", ".", "pos_prob", "[", "0", "]", ")", "\n", "atts", ".", "append", "(", "r", ".", "att", "[", "0", "]", ")", ";", "atts", ".", "append", "(", "rg", ".", "att", "[", "0", "]", ")", "\n", "qlps", ".", "append", "(", "r", ".", "q_logprob", ".", "unsqueeze", "(", "1", ")", ")", ";", "qlps", ".", "append", "(", "rg", ".", "q_logprob", ".", "unsqueeze", "(", "1", ")", ")", "\n", "qmasks", ".", "append", "(", "r", ".", "q_mask", ")", ";", "qmasks", ".", "append", "(", "rg", ".", "q_mask", ")", "\n", "qs", ".", "append", "(", "r", ".", "question", ".", "detach", "(", ")", ")", ";", "qs", ".", "append", "(", "rg", ".", "question", ".", "detach", "(", ")", ")", "\n", "aps", ".", "append", "(", "r", ".", "ans_prob", ".", "detach", "(", ")", ")", ";", "aps", ".", "append", "(", "rg", ".", "ans_prob", ".", "detach", "(", ")", ")", "\n", "\n", "# 4. Compute new captions based on teacher's answer", "\n", "# rollout caption", "\n", "r", "=", "self", ".", "caption_with_teacher_answer", "(", "image", ",", "ask_mask", ",", "ans_mask", ",", "\n", "greedy", "=", "self", ".", "opt", ".", "cap_greedy", ",", "temperature", "=", "self", ".", "opt", ".", "temperature", ")", "\n", "rg", "=", "self", ".", "caption_with_teacher_answer", "(", "image", ",", "ask_mask_greedy", ",", "ans_mask_greedy", ",", "\n", "greedy", "=", "self", ".", "opt", ".", "cap_greedy", ",", "temperature", "=", "self", ".", "opt", ".", "temperature", ")", "\n", "\n", "rollout", ",", "rollout_mask", ",", "rollout_greedy", ",", "rollout_mask_greedy", "=", "[", "x", ".", "detach", "(", ")", "for", "x", "in", "\n", "[", "r", ".", "caption", ",", "r", ".", "cap_mask", ",", "rg", ".", "caption", ",", "rg", ".", "cap_mask", "]", "]", "\n", "\n", "# replace caption", "\n", "replace", "=", "replace_word_in_caption", "(", "caps", "[", "0", "]", ",", "ans", ",", "ask_idx", ",", "ask_flag", ")", "\n", "replace_greedy", "=", "replace_word_in_caption", "(", "caps", "[", "0", "]", ",", "ans_greedy", ",", "ask_idx_greedy", ",", "ask_flag_greedy", ")", "\n", "\n", "# 5. Compute reward for captions", "\n", "base_rwd", "=", "mixed_reward", "(", "caps", "[", "0", "]", ",", "torch", ".", "sum", "(", "cmasks", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "rollout_rwd", "=", "mixed_reward", "(", "rollout", ",", "torch", ".", "sum", "(", "rollout_mask", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "rollout_greedy_rwd", "=", "mixed_reward", "(", "rollout_greedy", ",", "torch", ".", "sum", "(", "rollout_mask_greedy", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "\n", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "\n", "replace_rwd", "=", "mixed_reward", "(", "replace", ",", "torch", ".", "sum", "(", "cmasks", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "replace_greedy_rwd", "=", "mixed_reward", "(", "replace_greedy", ",", "torch", ".", "sum", "(", "cmasks", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "\n", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "\n", "rwd", "=", "np", ".", "maximum", "(", "replace_rwd", ",", "rollout_rwd", ")", "\n", "rwd_greedy", "=", "np", ".", "maximum", "(", "replace_greedy_rwd", ",", "rollout_greedy_rwd", ")", "\n", "\n", "best_cap", ",", "best_cap_mask", "=", "choose_better_caption", "(", "\n", "replace_rwd", ",", "replace", ",", "cmasks", "[", "0", "]", ",", "rollout_rwd", ",", "rollout", ",", "rollout_mask", ")", "\n", "best_cap_greedy", ",", "best_cap_greedy_mask", "=", "choose_better_caption", "(", "\n", "replace_greedy_rwd", ",", "replace_greedy", ",", "cmasks", "[", "0", "]", ",", "rollout_greedy_rwd", ",", "rollout_greedy", ",", "rollout_mask_greedy", ")", "\n", "\n", "# some statistics on whether rollout or single-word-replace is better", "\n", "stat_rero", ",", "stat_rore", ",", "stat_reall", ",", "stat_roall", "=", "get_rollout_replace_stats", "(", "replace_rwd", ",", "rollout_rwd", ",", "base_rwd", ")", "\n", "caps", ".", "append", "(", "best_cap", ")", ";", "cmasks", ".", "append", "(", "best_cap_mask", ")", "\n", "caps", ".", "append", "(", "best_cap_greedy", ")", ";", "cmasks", ".", "append", "(", "best_cap_greedy_mask", ")", "\n", "\n", "# Backwards pass to train decision maker with policy gradient loss", "\n", "reward_delta", "=", "torch", ".", "from_numpy", "(", "rwd", "-", "rwd_greedy", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "reward_delta", "=", "reward_delta", "-", "self", ".", "opt", ".", "ask_penalty", "*", "ask_flag", ".", "float", "(", ")", "\n", "\n", "loss", "=", "masked_PG", "(", "reward_delta", ".", "detach", "(", ")", ",", "torch", ".", "log", "(", "dps", "[", "0", "]", ")", ".", "squeeze", "(", ")", ",", "ask_flag", ".", "detach", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "d_optimizer", ".", "step", "(", ")", "\n", "\n", "# also save the question asked and answer, and top-k predictions from captioner", "\n", "answers", "=", "[", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "1", "]", "for", "x", "in", "aps", "]", "\n", "topwords", "=", "[", "torch", ".", "topk", "(", "x", ",", "20", ")", "[", "1", "]", "for", "x", "in", "cps", "]", "\n", "question_lens", "=", "[", "x", ".", "sum", "(", "dim", "=", "1", ")", "for", "x", "in", "qmasks", "]", "\n", "self", ".", "data_collector", ".", "collect_batch", "(", "index", ".", "clone", "(", ")", ",", "caps", ",", "cmasks", ",", "[", "base_rwd", ",", "rwd", ",", "rwd_greedy", "]", ",", "answers", ",", "qs", ",", "question_lens", ",", "topwords", ")", "\n", "\n", "# Logging", "\n", "if", "self", ".", "collection_steps", "%", "self", ".", "opt", ".", "print_every", "==", "0", ":", "\n", "\n", "            ", "c_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "c_i2w", "\n", "p_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "p_i2w", "\n", "q_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "q_i2w", "\n", "a_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "a_i2w", "\n", "\n", "caption", ",", "rollout", ",", "replace", ",", "cap_len", ",", "rollout_len", ",", "dec_probs", ",", "question", ",", "q_logprob", ",", "q_len", ",", "flag", ",", "raw_idx", ",", "refs", ",", "ref_lens", "=", "[", "util", ".", "to_np", "(", "x", ")", "for", "x", "in", "[", "caps", "[", "0", "]", ",", "rollout", ",", "replace", ",", "cmasks", "[", "0", "]", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "rollout_mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "masked_prob", ",", "qs", "[", "0", "]", ",", "qlps", "[", "0", "]", ",", "\n", "qmasks", "[", "0", "]", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "ask_flag", ".", "long", "(", ")", ",", "\n", "ask_idx", ",", "refs", ",", "ref_lens", "]", "]", "\n", "pos_probs", ",", "ans_probs", ",", "cap_probs", "=", "pps", "[", "0", "]", ",", "aps", "[", "0", "]", ",", "cps", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "image", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                ", "top_pos", "=", "torch", ".", "topk", "(", "pos_probs", ",", "3", ")", "[", "1", "]", "\n", "top_ans", "=", "torch", ".", "topk", "(", "ans_probs", "[", "i", "]", ",", "3", ")", "[", "1", "]", "\n", "top_cap", "=", "torch", ".", "topk", "(", "cap_probs", "[", "i", "]", ",", "5", ")", "[", "1", "]", "\n", "\n", "word", "=", "c_i2w", "[", "caption", "[", "i", "]", "[", "raw_idx", "[", "i", "]", "]", "]", "if", "raw_idx", "[", "i", "]", "<", "len", "(", "caption", "[", "i", "]", ")", "else", "'Nan'", "\n", "\n", "entry", "=", "{", "\n", "'img'", ":", "img_path", "[", "i", "]", ",", "\n", "'epoch'", ":", "self", ".", "collection_epoch", ",", "\n", "'caption'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "caption", "[", "i", "]", ")", "[", ":", "cap_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | Reward: {:.2f}\"", ".", "format", "(", "base_rwd", "[", "i", "]", ")", ",", "\n", "'qaskprobs'", ":", "' '", ".", "join", "(", "[", "\"{:.2f}\"", ".", "format", "(", "x", ")", "if", "x", ">", "0.0", "else", "\"_\"", "for", "x", "in", "dec_probs", "[", "i", "]", "]", ")", ",", "\n", "'rollout_caption'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "rollout", "[", "i", "]", ")", "[", ":", "rollout_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | Reward: {:.2f}\"", ".", "format", "(", "rollout_rwd", "[", "i", "]", ")", ",", "\n", "'replace_caption'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "replace", "[", "i", "]", ")", "[", ":", "cap_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | Reward: {:.2f}\"", ".", "format", "(", "replace_rwd", "[", "i", "]", ")", ",", "\n", "'index'", ":", "raw_idx", "[", "i", "]", ",", "\n", "'flag'", ":", "bool", "(", "flag", "[", "i", "]", ")", ",", "\n", "'word'", ":", "word", ",", "\n", "'pos'", ":", "' | '", ".", "join", "(", "[", "p_i2w", "[", "x", ".", "item", "(", ")", "]", "if", "x", ".", "item", "(", ")", "in", "p_i2w", "else", "p_i2w", "[", "18", "]", "for", "x", "in", "top_pos", "]", ")", ",", "\n", "'question'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "q_i2w", ",", "(", "question", "[", "i", "]", ")", "[", ":", "q_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | logprob: {}\"", ".", "format", "(", "q_logprob", "[", "i", ",", ":", "q_len", "[", "i", "]", "]", ".", "sum", "(", ")", ")", ",", "\n", "'answers'", ":", "' | '", ".", "join", "(", "[", "a_i2w", "[", "x", ".", "item", "(", ")", "]", "for", "x", "in", "top_ans", "]", ")", ",", "\n", "'words'", ":", "' | '", ".", "join", "(", "[", "c_i2w", "[", "x", ".", "item", "(", ")", "]", "for", "x", "in", "top_cap", "]", ")", ",", "\n", "'refs'", ":", "[", "\n", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "refs", "[", "i", ",", "j", "]", ")", "[", ":", "ref_lens", "[", "i", ",", "j", "]", "]", ")", ")", "for", "j", "in", "range", "(", "3", ")", "\n", "]", "\n", "}", "\n", "\n", "self", ".", "trainLLvisualizer", ".", "add_entry", "(", "entry", ")", "\n", "\n", "info", "=", "{", "\n", "'collect/question logprob'", ":", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "qlps", ",", "dim", "=", "1", ")", ")", ".", "item", "(", ")", ",", "\n", "'collect/replace over rollout'", ":", "float", "(", "stat_rero", ")", "/", "(", "batch_size", ")", ",", "\n", "'collect/rollout over replace'", ":", "float", "(", "stat_rore", ")", "/", "(", "batch_size", ")", ",", "\n", "'collect/replace over all'", ":", "float", "(", "stat_reall", ")", "/", "(", "batch_size", ")", ",", "\n", "'collect/rollout over all'", ":", "float", "(", "stat_roall", ")", "/", "(", "batch_size", ")", ",", "\n", "'collect/sampled decision equals greedy decision'", ":", "float", "(", "(", "ask_idx", "==", "ask_idx_greedy", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "/", "(", "batch_size", ")", ",", "\n", "'collect/question asking frequency (percent)'", ":", "float", "(", "ask_flag", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "/", "ask_flag", ".", "size", "(", "0", ")", "\n", "}", "\n", "util", ".", "step_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "collection_steps", ")", "\n", "\n", "", "", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train": [[312, 346], ["enumerate", "train_lifelong.QuestionAskingTrainer.trainLLvisualizer.update_html", "train_lifelong.QuestionAskingTrainer.data_collector.process_collected_data", "time.time.time", "train_lifelong.QuestionAskingTrainer.do_iteration", "Utils.step_logging", "x.to", "Utils.log_avg_grads", "len", "train_lifelong.QuestionAskingTrainer.std_logger.info", "time.time.time", "time.time.time", "Utils.time_remaining", "Utils.time_elapsed", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.update_html", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.process_collected_data", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.do_iteration", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.step_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.log_avg_grads", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.time_remaining", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.time_elapsed"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "print_loss", ",", "tic", "=", "0", ",", "time", "(", ")", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "            ", "image", ",", "refs", "=", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "[", "sample", "[", "0", "]", ",", "sample", "[", "4", "]", "]", "]", "\n", "ref_lens", ",", "img_path", ",", "index", "=", "sample", "[", "5", "]", ",", "sample", "[", "7", "]", ",", "sample", "[", "8", "]", "\n", "batch_loss", "=", "self", ".", "do_iteration", "(", "image", ",", "refs", ",", "ref_lens", ",", "index", ",", "img_path", ")", "\n", "\n", "print_loss", "+=", "batch_loss", "\n", "\n", "info", "=", "{", "\n", "'collect/loss'", ":", "print_loss", "/", "self", ".", "opt", ".", "print_every", ",", "\n", "'collect/time'", ":", "(", "time", "(", ")", "-", "tic", ")", "/", "self", ".", "opt", ".", "print_every", "# total time so far for this epoch", "\n", "}", "\n", "util", ".", "step_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "collection_steps", ")", "\n", "\n", "if", "self", ".", "collection_steps", "%", "self", ".", "opt", ".", "print_every", "==", "0", ":", "\n", "                ", "util", ".", "log_avg_grads", "(", "self", ".", "logger", ",", "self", ".", "dmaker", ",", "self", ".", "collection_steps", ",", "name", "=", "\"dec\"", ")", "\n", "steps_per_epoch", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "std_logger", ".", "info", "(", "\n", "\"Chunk {} Epoch {}, {}/{}| Loss: {} | Time per batch: {} |\"", "\n", "\" Epoch remaining time (HH:MM:SS) {} | Elapsed time {}\"", "\n", ".", "format", "(", "self", ".", "chunk", "+", "1", ",", "self", ".", "collection_epoch", ",", "i", ",", "steps_per_epoch", ",", "info", "[", "'collect/loss'", "]", ",", "info", "[", "'collect/time'", "]", ",", "\n", "util", ".", "time_remaining", "(", "steps_per_epoch", "-", "i", ",", "info", "[", "'collect/time'", "]", ")", ",", "\n", "util", ".", "time_elapsed", "(", "self", ".", "start_time", ",", "time", "(", ")", ")", ")", ")", "\n", "\n", "print_loss", ",", "tic", "=", "0", ",", "time", "(", ")", "\n", "\n", "", "self", ".", "collection_steps", "+=", "1", "\n", "\n", "", "self", ".", "trainLLvisualizer", ".", "update_html", "(", ")", "\n", "self", ".", "data_collector", ".", "process_collected_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.loop_chunk": [[347, 373], ["range", "train_lifelong.QuestionAskingTrainer.captioner.eval", "train_lifelong.QuestionAskingTrainer.captioner.train", "train_lifelong.QuestionAskingTrainer.qgen.eval", "train_lifelong.QuestionAskingTrainer.qgen.train", "train_lifelong.QuestionAskingTrainer.std_logger.info", "train_lifelong.QuestionAskingTrainer.train", "train_lifelong.QuestionAskingTrainer.data_collector.get_epoch_stats", "Utils.epoch_logging", "Utils.distr_logging", "train_lifelong.QuestionAskingTrainer.data_collector.reset_epoch_counters", "train_lifelong.QuestionAskingTrainer.evaluate_decision_maker", "train_lifelong.QuestionAskingTrainer.save_decision_maker", "info.iteritems"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_epoch_stats", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.epoch_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.distr_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.reset_epoch_counters", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.evaluate_decision_maker", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.save_decision_maker"], ["", "def", "loop_chunk", "(", "self", ",", "repochs", ")", ":", "\n", "\n", "        ", "if", "self", ".", "opt", ".", "cap_eval", ":", "\n", "            ", "self", ".", "captioner", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "captioner", ".", "train", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "quegen_eval", ":", "\n", "            ", "self", ".", "qgen", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "qgen", ".", "train", "(", ")", "\n", "", "for", "epoch", "in", "range", "(", "repochs", ")", ":", "\n", "            ", "self", ".", "std_logger", ".", "info", "(", "\"Training decision maker and collecting captions\"", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n", "info", ",", "distrs", "=", "self", ".", "data_collector", ".", "get_epoch_stats", "(", ")", "\n", "info", "=", "{", "'mk-main/'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "info", ".", "iteritems", "(", ")", "}", "\n", "util", ".", "epoch_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "collection_epoch", ")", "\n", "util", ".", "distr_logging", "(", "self", ".", "logger", ",", "distrs", ",", "self", ".", "collection_epoch", ")", "\n", "self", ".", "data_collector", ".", "reset_epoch_counters", "(", ")", "\n", "\n", "model_score", "=", "self", ".", "evaluate_decision_maker", "(", ")", "\n", "self", ".", "save_decision_maker", "(", "epoch", ",", "model_score", ")", "\n", "\n", "self", ".", "collection_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.save_decision_maker": [[374, 391], ["train_lifelong.QuestionAskingTrainer.dmaker.state_dict", "train_lifelong.QuestionAskingTrainer.d_optimizer.state_dict", "train_lifelong.QuestionAskingTrainer.std_logger.info", "torch.save"], "methods", ["None"], ["", "", "def", "save_decision_maker", "(", "self", ",", "epoch", ",", "model_score", ")", ":", "\n", "\n", "        ", "save_state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'collection_steps'", ":", "self", ".", "collection_steps", ",", "\n", "'collection_epoch'", ":", "self", ".", "collection_epoch", ",", "\n", "'state_dict'", ":", "self", ".", "dmaker", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "d_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "self", ".", "opt", ",", "\n", "'best_score'", ":", "self", ".", "best_d_score", "\n", "}", "\n", "\n", "if", "model_score", ">", "self", ".", "best_d_score", ":", "\n", "            ", "self", ".", "std_logger", ".", "info", "(", "\"New best decision maker score {} > {} previous score.\"", ".", "format", "(", "model_score", ",", "self", ".", "best_d_score", ")", ")", "\n", "save_name", "=", "self", ".", "decision_maker_model_files", "[", "self", ".", "chunk", "]", "\n", "torch", ".", "save", "(", "save_state", ",", "save_name", ")", "\n", "self", ".", "best_d_score", "=", "model_score", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.evaluate_decision_maker": [[392, 420], ["train_lifelong.QuestionAskingTrainer.evaluate_with_questions", "range", "train_lifelong.QuestionAskingTrainer.std_logger.info", "Utils.epoch_logging", "len", "Losses.metrics.linear_reward_weighting", "Losses.metrics.linear_reward_weighting"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.evaluate_with_questions", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.epoch_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.linear_reward_weighting", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.linear_reward_weighting"], ["", "", "def", "evaluate_decision_maker", "(", "self", ")", ":", "\n", "\n", "        ", "info", "=", "{", "}", "\n", "\n", "acc", ",", "scores", "=", "self", ".", "evaluate_with_questions", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "acc", ")", ")", ":", "\n", "            ", "info", "[", "'mk-supp/val accuracy Q{}'", ".", "format", "(", "i", ")", "]", "=", "acc", "[", "i", "]", "\n", "info", "[", "'mk-supp/CIDEr Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'CIDEr'", "]", "*", "100.0", "\n", "info", "[", "'mk-supp/Bleu_4 Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'Bleu_4'", "]", "*", "100.0", "\n", "info", "[", "'mk-supp/Bleu_3 Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'Bleu_3'", "]", "*", "100.0", "\n", "info", "[", "'mk-supp/Bleu_2 Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'Bleu_2'", "]", "*", "100.0", "\n", "info", "[", "'mk-supp/Bleu_1 Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'Bleu_1'", "]", "*", "100.0", "\n", "info", "[", "'mk-supp/ROUGE_L Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'ROUGE_L'", "]", "*", "100.0", "\n", "info", "[", "'mk-supp/METEOR Q{}'", ".", "format", "(", "i", ")", "]", "=", "scores", "[", "i", "]", "[", "'METEOR'", "]", "*", "100.0", "\n", "info", "[", "'mk-main/weighted score Q{}'", ".", "format", "(", "i", ")", "]", "=", "linear_reward_weighting", "(", "scores", "[", "i", "]", "[", "'Bleu_1'", "]", ",", "scores", "[", "i", "]", "[", "'Bleu_2'", "]", ",", "scores", "[", "i", "]", "[", "'Bleu_3'", "]", ",", "\n", "scores", "[", "i", "]", "[", "'Bleu_4'", "]", ",", "scores", "[", "i", "]", "[", "'ROUGE_L'", "]", ",", "scores", "[", "i", "]", "[", "'METEOR'", "]", ",", "\n", "scores", "[", "i", "]", "[", "'CIDEr'", "]", ")", "*", "100.0", "\n", "\n", "", "model_score", "=", "linear_reward_weighting", "(", "scores", "[", "-", "1", "]", "[", "'Bleu_1'", "]", ",", "scores", "[", "-", "1", "]", "[", "'Bleu_2'", "]", ",", "scores", "[", "-", "1", "]", "[", "'Bleu_3'", "]", ",", "\n", "scores", "[", "-", "1", "]", "[", "'Bleu_4'", "]", ",", "scores", "[", "-", "1", "]", "[", "'ROUGE_L'", "]", ",", "scores", "[", "-", "1", "]", "[", "'METEOR'", "]", ",", "\n", "scores", "[", "-", "1", "]", "[", "'CIDEr'", "]", ")", "*", "100.0", "\n", "\n", "self", ".", "std_logger", ".", "info", "(", "\"Round {} | Epoch {}: | Weighted score: {}\"", ".", "format", "(", "self", ".", "chunk", "+", "1", ",", "self", ".", "collection_epoch", ",", "model_score", ")", ")", "\n", "\n", "util", ".", "epoch_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "collection_epoch", ")", "\n", "return", "model_score", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.evaluate_with_questions": [[421, 611], ["train_lifelong.QuestionAskingTrainer.std_logger.info", "train_lifelong.QuestionAskingTrainer.dmaker.eval", "train_lifelong.QuestionAskingTrainer.captioner.train", "train_lifelong.QuestionAskingTrainer.qgen.train", "train_lifelong.QuestionAskingTrainer.valLLvisualizer.update_html", "range", "train_lifelong.QuestionAskingTrainer.dmaker.train", "torch.no_grad", "enumerate", "len", "eval_scores.append", "image.size", "train_lifelong.QuestionAskingTrainer.set_seed", "train_lifelong.QuestionAskingTrainer.captioner.sample", "cap_mask.long().sum", "caps.append", "cmasks.append", "poses.append", "train_lifelong.QuestionAskingTrainer.pad_caption", "torch.cat", "train_lifelong.QuestionAskingTrainer.fixed_caption_encoder", "train_lifelong.QuestionAskingTrainer.dmaker", "Utils.masked_softmax", "train_lifelong.QuestionAskingTrainer.sample_decision", "train_lifelong.QuestionAskingTrainer.ask_question", "cps.append", "cps.append", "pps.append", "pps.append", "atts.append", "atts.append", "qlps.append", "qlps.append", "qmasks.append", "qmasks.append", "qs.append", "qs.append", "aps.append", "aps.append", "train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer", "poses.append", "Utils.replace_word_in_caption", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "Losses.metrics.mixed_reward", "caps.append", "caps.append", "cmasks.append", "cmasks.append", "Utils.get_rollout_replace_stats", "Utils.choose_better_caption", "Utils.to_np", "range", "range", "len", "eval.coco_eval.language_scores", "x.to", "train_lifelong.QuestionAskingTrainer.attention.squeeze", "train_lifelong.QuestionAskingTrainer.q_logprob.unsqueeze", "train_lifelong.QuestionAskingTrainer.q_logprob.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "len", "range", "len", "range", "Utils.step_logging", "cap_mask.long", "train_lifelong.QuestionAskingTrainer.ones_vector[].unsqueeze", "Utils.to_np", "Utils.to_np", "image.size", "enumerate", "caption_predictions[].append", "cmasks[].long", "Utils.to_np", "image.size", "train_lifelong.QuestionAskingTrainer.valLLvisualizer.add_entry", "cmasks[].sum", "torch.topk", "torch.topk", "torch.topk", "bool", "float", "float", "float", "float", "float", "ask_flag.size", "cmasks[].long().sum", "rollout_mask.long().sum", "qmasks[].long().sum", "ask_flag.long", "len", "ask_flag.sum().item", "Utils.idx2str", "Utils.idx2str", "Utils.idx2str", "Utils.idx2str", "q_logprob[].sum", "Utils.idx2str", "range", "caption_len.float().unsqueeze", "cmasks[].long", "rollout_mask.long", "qmasks[].long", "ask_flag.sum", "x.item", "x.item", "x.item", "caption_len.float", "x.item"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.update_html", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.train", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.sample_decision", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.ask_question", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Scripts.train_lifelong.QuestionAskingTrainer.caption_with_teacher_answer", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Losses.metrics.mixed_reward", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.step_logging", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.LLVisualizer.add_entry", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str"], ["", "def", "evaluate_with_questions", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "std_logger", ".", "info", "(", "\"Validating decision maker\"", ")", "\n", "\n", "self", ".", "dmaker", ".", "eval", "(", ")", "\n", "self", ".", "captioner", ".", "train", "(", ")", "\n", "self", ".", "qgen", ".", "train", "(", ")", "\n", "# if self.opt.cap_eval:", "\n", "#     self.captioner.eval()", "\n", "# else:", "\n", "#     self.captioner.train()", "\n", "#", "\n", "# if self.opt.quegen_eval:", "\n", "#     self.question_generator.eval()", "\n", "# else:", "\n", "#     self.question_generator.train()", "\n", "\n", "c_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "c_i2w", "\n", "\n", "correct", ",", "pos_correct", ",", "eval_scores", "=", "[", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.0", "]", ",", "[", "]", "\n", "caption_predictions", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "step", ",", "sample", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "\n", "                ", "image", ",", "refs", ",", "target", ",", "caption_len", "=", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "[", "sample", "[", "0", "]", ",", "sample", "[", "4", "]", ",", "sample", "[", "2", "]", ",", "sample", "[", "3", "]", "]", "]", "\n", "ref_lens", ",", "img_path", ",", "index", ",", "img_id", "=", "sample", "[", "5", "]", ",", "sample", "[", "7", "]", ",", "sample", "[", "8", "]", ",", "sample", "[", "9", "]", "\n", "\n", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "\n", "caps", ",", "cmasks", ",", "poses", ",", "pps", ",", "qs", ",", "qlps", ",", "qmasks", ",", "aps", ",", "cps", ",", "atts", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# 1. Caption completely", "\n", "self", ".", "set_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "\n", "r", "=", "self", ".", "captioner", ".", "sample", "(", "image", ",", "greedy", "=", "True", ",", "max_seq_len", "=", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ")", "\n", "\n", "caption", ",", "cap_probs", ",", "cap_mask", ",", "pos_probs", ",", "att", ",", "topk_words", ",", "attended_img", "=", "r", ".", "caption", ",", "r", ".", "prob", ",", "r", ".", "mask", ",", "r", ".", "pos_prob", ",", "r", ".", "attention", ".", "squeeze", "(", ")", ",", "r", ".", "topk", ",", "r", ".", "atdimg", "\n", "\n", "cap_len", "=", "cap_mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "caps", ".", "append", "(", "caption", ")", ";", "cmasks", ".", "append", "(", "cap_mask", ")", ";", "poses", ".", "append", "(", "pos_probs", ")", ";", "\n", "\n", "caption", "=", "self", ".", "pad_caption", "(", "caption", ",", "cap_len", ")", "\n", "\n", "# get the hidden state context", "\n", "source", "=", "torch", ".", "cat", "(", "[", "self", ".", "ones_vector", "[", ":", "batch_size", "]", ".", "unsqueeze", "(", "1", ")", ",", "caption", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "r", "=", "self", ".", "fixed_caption_encoder", "(", "image", ",", "source", ",", "gt_pos", "=", "None", ",", "ss", "=", "False", ")", "\n", "h", "=", "r", ".", "hidden", "\n", "\n", "# 2. Identify the best time to ask a question, excluding ended sentences", "\n", "logit", ",", "valid_pos_mask", "=", "self", ".", "dmaker", "(", "h", ",", "attended_img", ",", "caption", ",", "cap_len", ",", "pos_probs", ",", "\n", "topk_words", ",", "self", ".", "captioner", ".", "caption_embedding", ".", "weight", ".", "data", ")", "\n", "masked_prob", "=", "masked_softmax", "(", "logit", ",", "cap_mask", ",", "valid_pos_mask", ",", "max_len", "=", "self", ".", "opt", ".", "c_max_sentence_len", ")", "\n", "dm_prob", ",", "ask_idx", ",", "ask_flag", ",", "ask_mask", "=", "self", ".", "sample_decision", "(", "masked_prob", ",", "cap_mask", ",", "greedy", "=", "True", ")", "\n", "\n", "# 3. Ask the teacher a question and get the answer", "\n", "ans", ",", "ans_mask", ",", "r", "=", "self", ".", "ask_question", "(", "image", ",", "caption", ",", "refs", ",", "pos_probs", ",", "h", ",", "att", ",", "ask_idx", ",", "q_greedy", "=", "True", ")", "\n", "\n", "# logging", "\n", "cps", ".", "append", "(", "cap_probs", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "ask_idx", "]", ")", ";", "cps", ".", "append", "(", "cap_probs", "[", "self", ".", "range_vector", "[", ":", "batch_size", "]", ",", "ask_idx", "]", ")", "\n", "pps", ".", "append", "(", "r", ".", "pos_prob", "[", "0", "]", ")", ";", "pps", ".", "append", "(", "r", ".", "pos_prob", "[", "0", "]", ")", "\n", "atts", ".", "append", "(", "r", ".", "att", "[", "0", "]", ")", ";", "atts", ".", "append", "(", "r", ".", "att", "[", "0", "]", ")", "\n", "qlps", ".", "append", "(", "r", ".", "q_logprob", ".", "unsqueeze", "(", "1", ")", ")", ";", "qlps", ".", "append", "(", "r", ".", "q_logprob", ".", "unsqueeze", "(", "1", ")", ")", "\n", "qmasks", ".", "append", "(", "r", ".", "q_mask", ")", ";", "qmasks", ".", "append", "(", "r", ".", "q_mask", ")", "\n", "qs", ".", "append", "(", "r", ".", "question", ")", ";", "qs", ".", "append", "(", "r", ".", "question", ")", "\n", "aps", ".", "append", "(", "r", ".", "ans_prob", ")", ";", "aps", ".", "append", "(", "r", ".", "ans_prob", ")", "\n", "\n", "# 4. Compute new captions based on teacher's answer", "\n", "# rollout caption", "\n", "r", "=", "self", ".", "caption_with_teacher_answer", "(", "image", ",", "ask_mask", ",", "ans_mask", ",", "greedy", "=", "True", ")", "\n", "\n", "poses", ".", "append", "(", "r", ".", "pos_prob", ")", "\n", "rollout", "=", "r", ".", "caption", "\n", "rollout_mask", "=", "r", ".", "cap_mask", "\n", "\n", "# replace caption", "\n", "replace", "=", "replace_word_in_caption", "(", "caps", "[", "0", "]", ",", "ans", ",", "ask_idx", ",", "ask_flag", ")", "\n", "\n", "base_rwd", "=", "mixed_reward", "(", "caps", "[", "0", "]", ",", "torch", ".", "sum", "(", "cmasks", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "rollout_rwd", "=", "mixed_reward", "(", "rollout", ",", "torch", ".", "sum", "(", "rollout_mask", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "replace_rwd", "=", "mixed_reward", "(", "replace", ",", "torch", ".", "sum", "(", "cmasks", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "refs", ",", "ref_lens", ",", "self", ".", "scorers", ",", "self", ".", "c_i2w", ")", "\n", "\n", "caps", ".", "append", "(", "rollout", ")", "\n", "caps", ".", "append", "(", "replace", ")", "\n", "cmasks", ".", "append", "(", "rollout_mask", ")", "\n", "cmasks", ".", "append", "(", "cmasks", "[", "0", "]", ")", "\n", "\n", "stat_rero", ",", "stat_rore", ",", "stat_reall", ",", "stat_roall", "=", "get_rollout_replace_stats", "(", "replace_rwd", ",", "rollout_rwd", ",", "base_rwd", ")", "\n", "\n", "best_cap", ",", "best_cap_mask", "=", "choose_better_caption", "(", "\n", "replace_rwd", ",", "replace", ",", "cmasks", "[", "0", "]", ",", "rollout_rwd", ",", "rollout", ",", "rollout_mask", ")", "\n", "\n", "caps", "=", "[", "caps", "[", "0", "]", ",", "best_cap", "]", "\n", "cmasks", "=", "[", "cmasks", "[", "0", "]", ",", "best_cap_mask", "]", "\n", "\n", "# Collect captions for coco evaluation", "\n", "img_id", "=", "util", ".", "to_np", "(", "img_id", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "caps", ")", ")", ":", "\n", "                    ", "words", ",", "lens", ",", "=", "util", ".", "to_np", "(", "caps", "[", "i", "]", ")", ",", "util", ".", "to_np", "(", "cmasks", "[", "i", "]", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "image", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "inds", "=", "words", "[", "j", "]", "[", ":", "lens", "[", "j", "]", "]", "\n", "caption", "=", "\"\"", "\n", "for", "k", ",", "ind", "in", "enumerate", "(", "inds", ")", ":", "\n", "                            ", "if", "k", ">", "0", ":", "\n", "                                ", "caption", "=", "caption", "+", "' '", "\n", "", "caption", "=", "caption", "+", "c_i2w", "[", "ind", "]", "\n", "\n", "", "pred", "=", "{", "\n", "'image_id'", ":", "img_id", "[", "j", "]", ",", "\n", "'caption'", ":", "caption", "\n", "}", "\n", "caption_predictions", "[", "i", "]", ".", "append", "(", "pred", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "correct", ")", ")", ":", "\n", "                    ", "predictions", "=", "caps", "[", "i", "]", "*", "cmasks", "[", "i", "]", ".", "long", "(", ")", "\n", "correct", "[", "i", "]", "+=", "(", "(", "target", "==", "predictions", ")", ".", "float", "(", ")", "/", "caption_len", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# Logging", "\n", "", "if", "step", "%", "self", ".", "opt", ".", "val_print_every", "==", "0", ":", "\n", "\n", "                    ", "c_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "c_i2w", "\n", "p_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "p_i2w", "\n", "q_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "q_i2w", "\n", "a_i2w", "=", "self", ".", "val_loader", ".", "dataset", ".", "a_i2w", "\n", "\n", "caption", ",", "rollout", ",", "replace", ",", "cap_len", ",", "rollout_len", ",", "dec_probs", ",", "question", ",", "q_logprob", ",", "q_len", ",", "flag", ",", "raw_idx", ",", "refs", ",", "ref_lens", "=", "[", "util", ".", "to_np", "(", "x", ")", "for", "x", "in", "[", "caps", "[", "0", "]", ",", "rollout", ",", "replace", ",", "cmasks", "[", "0", "]", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "rollout_mask", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "masked_prob", ",", "qs", "[", "0", "]", ",", "qlps", "[", "0", "]", ",", "\n", "qmasks", "[", "0", "]", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "ask_flag", ".", "long", "(", ")", ",", "\n", "ask_idx", ",", "refs", ",", "ref_lens", "]", "]", "\n", "pos_probs", ",", "ans_probs", ",", "cap_probs", "=", "pps", "[", "0", "]", ",", "aps", "[", "0", "]", ",", "cps", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "image", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "top_pos", "=", "torch", ".", "topk", "(", "pos_probs", ",", "3", ")", "[", "1", "]", "\n", "top_ans", "=", "torch", ".", "topk", "(", "ans_probs", "[", "i", "]", ",", "3", ")", "[", "1", "]", "\n", "top_cap", "=", "torch", ".", "topk", "(", "cap_probs", "[", "i", "]", ",", "5", ")", "[", "1", "]", "\n", "\n", "word", "=", "c_i2w", "[", "caption", "[", "i", "]", "[", "raw_idx", "[", "i", "]", "]", "]", "if", "raw_idx", "[", "i", "]", "<", "len", "(", "caption", "[", "i", "]", ")", "else", "'Nan'", "\n", "\n", "entry", "=", "{", "\n", "'img'", ":", "img_path", "[", "i", "]", ",", "\n", "'epoch'", ":", "self", ".", "collection_epoch", ",", "\n", "'caption'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "caption", "[", "i", "]", ")", "[", ":", "cap_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | Reward: {:.2f}\"", ".", "format", "(", "base_rwd", "[", "i", "]", ")", ",", "\n", "'qaskprobs'", ":", "' '", ".", "join", "(", "[", "\"{:.2f}\"", ".", "format", "(", "x", ")", "if", "x", ">", "0.0", "else", "\"_\"", "for", "x", "in", "dec_probs", "[", "i", "]", "]", ")", ",", "\n", "'rollout_caption'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "rollout", "[", "i", "]", ")", "[", ":", "rollout_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | Reward: {:.2f}\"", ".", "format", "(", "rollout_rwd", "[", "i", "]", ")", ",", "\n", "'replace_caption'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "replace", "[", "i", "]", ")", "[", ":", "cap_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | Reward: {:.2f}\"", ".", "format", "(", "replace_rwd", "[", "i", "]", ")", ",", "\n", "'index'", ":", "raw_idx", "[", "i", "]", ",", "\n", "'flag'", ":", "bool", "(", "flag", "[", "i", "]", ")", ",", "\n", "'word'", ":", "word", ",", "\n", "'pos'", ":", "' | '", ".", "join", "(", "[", "p_i2w", "[", "x", ".", "item", "(", ")", "]", "if", "x", ".", "item", "(", ")", "in", "p_i2w", "else", "p_i2w", "[", "18", "]", "for", "x", "in", "top_pos", "]", ")", ",", "\n", "'question'", ":", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "q_i2w", ",", "(", "question", "[", "i", "]", ")", "[", ":", "q_len", "[", "i", "]", "]", ")", ")", "\n", "+", "\" | logprob: {}\"", ".", "format", "(", "q_logprob", "[", "i", ",", ":", "q_len", "[", "i", "]", "]", ".", "sum", "(", ")", ")", ",", "\n", "'answers'", ":", "' | '", ".", "join", "(", "[", "a_i2w", "[", "x", ".", "item", "(", ")", "]", "for", "x", "in", "top_ans", "]", ")", ",", "\n", "'words'", ":", "' | '", ".", "join", "(", "[", "c_i2w", "[", "x", ".", "item", "(", ")", "]", "for", "x", "in", "top_cap", "]", ")", ",", "\n", "'refs'", ":", "[", "\n", "' '", ".", "join", "(", "util", ".", "idx2str", "(", "c_i2w", ",", "(", "refs", "[", "i", ",", "j", "]", ")", "[", ":", "ref_lens", "[", "i", ",", "j", "]", "]", ")", ")", "for", "j", "in", "range", "(", "3", ")", "\n", "]", "\n", "}", "\n", "\n", "self", ".", "valLLvisualizer", ".", "add_entry", "(", "entry", ")", "\n", "\n", "", "info", "=", "{", "'eval/replace over rollout'", ":", "float", "(", "stat_rero", ")", "/", "(", "batch_size", ")", ",", "\n", "'eval/rollout over replace'", ":", "float", "(", "stat_rore", ")", "/", "(", "batch_size", ")", ",", "\n", "'eval/replace over all'", ":", "float", "(", "stat_reall", ")", "/", "(", "batch_size", ")", ",", "\n", "'eval/rollout over all'", ":", "float", "(", "stat_roall", ")", "/", "(", "batch_size", ")", ",", "\n", "'eval/question asking frequency (percent)'", ":", "float", "(", "ask_flag", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "/", "ask_flag", ".", "size", "(", "0", ")", "\n", "}", "\n", "util", ".", "step_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "eval_steps", ")", "\n", "self", ".", "eval_steps", "+=", "1", "\n", "\n", "", "", "", "self", ".", "valLLvisualizer", ".", "update_html", "(", ")", "\n", "\n", "acc", "=", "[", "x", "/", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", "for", "x", "in", "correct", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "correct", ")", ")", ":", "\n", "            ", "eval_scores", ".", "append", "(", "language_scores", "(", "caption_predictions", "[", "i", "]", ",", "self", ".", "opt", ".", "run_name", ",", "self", ".", "result_path", ",", "\n", "annFile", "=", "self", ".", "opt", ".", "coco_annotation_file", ")", ")", "\n", "\n", "", "self", ".", "dmaker", ".", "train", "(", ")", "\n", "\n", "return", "acc", ",", "eval_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_vqa.VQADataset.__init__": [[19, 37], ["pickle.load", "len", "len", "len", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "self", ".", "img_dir", "=", "opt", ".", "img_dir", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "multi_answer", "=", "opt", ".", "multi_answer", "\n", "self", ".", "max_c_len", "=", "opt", ".", "c_max_sentence_len", "\n", "self", ".", "max_q_len", "=", "opt", ".", "q_max_sentence_len", "\n", "\n", "self", ".", "f", "=", "pickle", ".", "load", "(", "open", "(", "data_file", ",", "\"rb\"", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "f", "[", "\"data\"", "]", "\n", "# vocabulary dictionaries", "\n", "self", ".", "c_i2w", ",", "self", ".", "c_w2i", "=", "self", ".", "f", "[", "\"c_dicts\"", "]", "\n", "self", ".", "q_i2w", ",", "self", ".", "q_w2i", "=", "self", ".", "f", "[", "\"q_dicts\"", "]", "\n", "self", ".", "a_i2w", ",", "self", ".", "a_w2i", "=", "self", ".", "f", "[", "\"a_dicts\"", "]", "\n", "self", ".", "c_vocab_size", "=", "len", "(", "self", ".", "c_i2w", ")", "\n", "self", ".", "q_vocab_size", "=", "len", "(", "self", ".", "q_i2w", ")", "\n", "self", ".", "a_vocab_size", "=", "len", "(", "self", ".", "a_i2w", ")", "\n", "self", ".", "special_symbols", "=", "self", ".", "f", "[", "\"special_symbols\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_vqa.VQADataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_vqa.VQADataset.__getitem__": [[41, 78], ["len", "Utils.util.pad_sentence", "os.path.join", "numpy.load", "os.path.join", "numpy.zeros", "refs.append", "ref_lens.append", "numpy.asarray", "random.randint.astype", "numpy.asarray", "numpy.asarray", "str", "float", "len", "random.randint", "Utils.util.pad_sentence", "len"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "sample", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "# get question", "\n", "question", "=", "sample", "[", "'question'", "]", "[", ":", "self", ".", "max_q_len", "]", "\n", "question_len", "=", "len", "(", "question", ")", "\n", "\n", "question", "=", "pad_sentence", "(", "question", ",", "max_len", "=", "self", ".", "max_q_len", ",", "pad_idx", "=", "self", ".", "q_vocab_size", ")", "\n", "\n", "# get image", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "\"features\"", ",", "str", "(", "sample", "[", "'image_id'", "]", ")", "+", "'.npy'", ")", "\n", "img", "=", "np", ".", "load", "(", "img_path", ")", "\n", "img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "sample", "[", "'img_raw_folder'", "]", ",", "sample", "[", "'img_raw_file'", "]", ")", "\n", "\n", "# get answers", "\n", "answers", "=", "sample", "[", "'answers'", "]", "\n", "\n", "if", "self", ".", "multi_answer", ":", "\n", "            ", "label", "=", "np", ".", "zeros", "(", "self", ".", "a_vocab_size", ")", "\n", "for", "word", ",", "confidence", "in", "answers", ":", "\n", "                ", "label", "[", "word", "]", "=", "float", "(", "confidence", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "answers", ")", ">", "0", ":", "\n", "                ", "label", "=", "answers", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "randint", "(", "0", ",", "self", ".", "a_vocab_size", "-", "1", ")", "# set it to random word if there are no answers (hack)", "\n", "\n", "# get reference captions", "\n", "", "", "refs", "=", "[", "]", "\n", "ref_lens", "=", "[", "]", "\n", "for", "ref", "in", "sample", "[", "'refs'", "]", ":", "\n", "            ", "cap", "=", "ref", "[", "'caption'", "]", "[", ":", "self", ".", "max_c_len", "]", "\n", "refs", ".", "append", "(", "pad_sentence", "(", "cap", ",", "max_len", "=", "self", ".", "max_c_len", ",", "pad_idx", "=", "self", ".", "c_vocab_size", ")", ")", "\n", "ref_lens", ".", "append", "(", "len", "(", "cap", ")", ")", "\n", "\n", "", "return", "img", ",", "np", ".", "asarray", "(", "question", ")", ",", "question_len", ",", "label", ".", "astype", "(", "np", ".", "float32", ")", ",", "np", ".", "asarray", "(", "refs", ")", ",", "np", ".", "asarray", "(", "ref_lens", ")", ",", "img_file", ",", "sample", "[", "'question_id'", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_vqa.default_loader": [[14, 16], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.CapDataset.__init__": [[15, 33], ["pickle.load", "len", "len", "len", "len", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "self", ".", "img_dir", "=", "opt", ".", "img_dir", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "max_c_len", "=", "opt", ".", "c_max_sentence_len", "\n", "\n", "self", ".", "f", "=", "pickle", ".", "load", "(", "open", "(", "data_file", ",", "\"rb\"", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "f", "[", "\"data\"", "]", "\n", "# vocabulary dictionaries", "\n", "self", ".", "c_i2w", ",", "self", ".", "c_w2i", "=", "self", ".", "f", "[", "\"c_dicts\"", "]", "\n", "self", ".", "p_i2w", ",", "self", ".", "p_w2i", "=", "self", ".", "f", "[", "\"pos_dicts\"", "]", "\n", "self", ".", "q_i2w", ",", "self", ".", "q_w2i", "=", "self", ".", "f", "[", "\"q_dicts\"", "]", "\n", "self", ".", "a_i2w", ",", "self", ".", "a_w2i", "=", "self", ".", "f", "[", "\"a_dicts\"", "]", "\n", "self", ".", "c_vocab_size", "=", "len", "(", "self", ".", "c_i2w", ")", "\n", "self", ".", "pos_vocab_size", "=", "len", "(", "self", ".", "p_i2w", ")", "\n", "self", ".", "q_vocab_size", "=", "len", "(", "self", ".", "q_i2w", ")", "\n", "self", ".", "a_vocab_size", "=", "len", "(", "self", ".", "a_i2w", ")", "\n", "self", ".", "special_symbols", "=", "self", ".", "f", "[", "\"special_symbols\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.CapDataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.CapDataset.__getitem__": [[37, 48], ["dataset_caption.CapDataset._get_content", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.CapDataset._get_content"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "sample", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "caption", "=", "sample", "[", "'captions'", "]", "[", "sample", "[", "'cap_index'", "]", "]", "\n", "caption", "=", "caption", "[", "'caption'", "]", "[", ":", "self", ".", "max_c_len", "]", "\n", "\n", "img", ",", "source", ",", "target", ",", "caption_len", ",", "refs", ",", "ref_lens", ",", "pos", ",", "img_path", "=", "self", ".", "_get_content", "(", "caption", ",", "sample", ")", "\n", "\n", "return", "img", ",", "np", ".", "asarray", "(", "source", ")", ",", "np", ".", "asarray", "(", "target", ")", ",", "caption_len", ",", "np", ".", "asarray", "(", "refs", ")", ",", "np", ".", "asarray", "(", "ref_lens", ")", ",", "np", ".", "asarray", "(", "pos", ")", ",", "img_path", ",", "index", ",", "sample", "[", "'image_id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.CapDataset._get_content": [[49, 77], ["Utils.util.pad_sentence", "Utils.util.pad_sentence", "os.path.join", "numpy.load", "os.path.join", "refs.append", "ref_lens.append", "len", "len", "max", "str", "Utils.util.pad_sentence", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence"], ["", "def", "_get_content", "(", "self", ",", "caption", ",", "sample", ")", ":", "\n", "# get caption", "\n", "        ", "source", "=", "[", "self", ".", "special_symbols", "[", "'bos'", "]", "]", "+", "caption", "# add <bos> token", "\n", "target", "=", "caption", "+", "[", "self", ".", "special_symbols", "[", "'eos'", "]", "]", "# add <eos> token", "\n", "source", "=", "pad_sentence", "(", "source", ",", "max_len", "=", "self", ".", "max_c_len", "+", "1", ",", "pad_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "target", "=", "pad_sentence", "(", "target", ",", "max_len", "=", "self", ".", "max_c_len", "+", "1", ",", "pad_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "\n", "# get image", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "\"features\"", ",", "str", "(", "sample", "[", "'image_id'", "]", ")", "+", "'.npy'", ")", "\n", "img", "=", "np", ".", "load", "(", "img_path", ")", "\n", "img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "sample", "[", "'img_raw_folder'", "]", ",", "sample", "[", "'img_raw_file'", "]", ")", "\n", "\n", "# get reference captions", "\n", "refs", "=", "[", "]", "\n", "ref_lens", "=", "[", "]", "\n", "for", "ref", "in", "sample", "[", "'captions'", "]", ":", "\n", "            ", "cap", "=", "ref", "[", "'caption'", "]", "[", ":", "self", ".", "max_c_len", "]", "\n", "refs", ".", "append", "(", "pad_sentence", "(", "cap", ",", "max_len", "=", "self", ".", "max_c_len", "+", "1", ",", "pad_idx", "=", "self", ".", "c_vocab_size", ")", ")", "\n", "ref_lens", ".", "append", "(", "len", "(", "cap", ")", ")", "\n", "\n", "# get part-of-speech", "\n", "", "pos", "=", "sample", "[", "'pos'", "]", "[", ":", "self", ".", "max_c_len", "]", "\n", "assert", "len", "(", "pos", ")", "==", "len", "(", "caption", ")", "\n", "\n", "pad_len", "=", "max", "(", "0", ",", "self", ".", "max_c_len", "-", "len", "(", "pos", ")", ")", "+", "1", "# +1 for the <eos> token", "\n", "pos", "=", "pos", "+", "[", "self", ".", "pos_vocab_size", "]", "*", "pad_len", "\n", "\n", "return", "img", ",", "source", ",", "target", ",", "len", "(", "caption", ")", "+", "1", ",", "refs", ",", "ref_lens", ",", "pos", ",", "img_file", "", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.default_loader": [[10, 12], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.LifelongDataset.__init__": [[15, 19], ["dataset_caption.CapDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "super", "(", "LifelongDataset", ",", "self", ")", ".", "__init__", "(", "opt", ",", "data_file", ",", "loader", ")", "\n", "self", ".", "gt_reward", "=", "self", ".", "f", "[", "\"gt_caps_reward\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.LifelongDataset.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.LifelongDataset.__getitem__": [[23, 31], ["dataset_lifelong.LifelongDataset._get_content", "numpy.asarray", "numpy.asarray", "numpy.asarray", "sample[].astype"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_caption.CapDataset._get_content"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "caption", "=", "sample", "[", "'caption'", "]", "[", ":", "self", ".", "max_c_len", "]", "\n", "\n", "img", ",", "source", ",", "target", ",", "caption_len", ",", "refs", ",", "ref_lens", ",", "pos", ",", "img_path", "=", "self", ".", "_get_content", "(", "caption", ",", "sample", ")", "\n", "\n", "return", "img", ",", "np", ".", "asarray", "(", "source", ")", ",", "np", ".", "asarray", "(", "target", ")", ",", "caption_len", ",", "np", ".", "asarray", "(", "pos", ")", ",", "sample", "[", "'weight'", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.__init__": [[35, 68], ["pickle.load", "len", "len", "len", "len", "stanfordcorenlp.StanfordCoreNLP", "set", "set", "dataset_lifelong.DataCollector.create_imgid2idx_map", "dataset_lifelong.DataCollector.init_collected_data", "open"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.create_imgid2idx_map", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.init_collected_data"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "img_dir", "=", "opt", ".", "img_dir", "\n", "\n", "self", ".", "f", "=", "pickle", ".", "load", "(", "open", "(", "data_file", ",", "\"rb\"", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "f", "[", "\"data\"", "]", "\n", "# vocabulary dictionaries", "\n", "self", ".", "c_i2w", ",", "self", ".", "c_w2i", "=", "self", ".", "f", "[", "\"c_dicts\"", "]", "\n", "self", ".", "p_i2w", ",", "self", ".", "p_w2i", "=", "self", ".", "f", "[", "\"pos_dicts\"", "]", "\n", "self", ".", "q_i2w", ",", "self", ".", "q_w2i", "=", "self", ".", "f", "[", "\"q_dicts\"", "]", "\n", "self", ".", "a_i2w", ",", "self", ".", "a_w2i", "=", "self", ".", "f", "[", "\"a_dicts\"", "]", "\n", "self", ".", "c_vocab_size", "=", "len", "(", "self", ".", "c_i2w", ")", "\n", "self", ".", "pos_vocab_size", "=", "len", "(", "self", ".", "p_i2w", ")", "\n", "self", ".", "q_vocab_size", "=", "len", "(", "self", ".", "q_i2w", ")", "\n", "self", ".", "a_vocab_size", "=", "len", "(", "self", ".", "a_i2w", ")", "\n", "self", ".", "special_symbols", "=", "self", ".", "f", "[", "\"special_symbols\"", "]", "\n", "\n", "self", ".", "model", "=", "opt", ".", "model", "\n", "self", ".", "max_c_len", "=", "opt", ".", "c_max_sentence_len", "\n", "self", ".", "stanfordnlp", "=", "StanfordCoreNLP", "(", "opt", ".", "stanfordnlp_dir", ")", "\n", "self", ".", "H", ",", "self", ".", "lamda", "=", "opt", ".", "H", ",", "opt", ".", "lamda", "\n", "\n", "self", ".", "data_dump", "=", "[", "]", "\n", "self", ".", "epoch_collects", ",", "self", ".", "epoch_redundant_collects", "=", "0", ",", "0", "\n", "\n", "self", ".", "collected_data", "=", "[", "]", "\n", "self", ".", "question_set", "=", "set", "(", ")", "\n", "self", ".", "no_question_set", "=", "set", "(", ")", "\n", "self", ".", "collection_stats", "=", "{", "}", "\n", "\n", "self", ".", "create_imgid2idx_map", "(", ")", "\n", "self", ".", "init_collected_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.create_imgid2idx_map": [[69, 78], ["enumerate", "dataset_lifelong.DataCollector.imgId2idx[].append"], "methods", ["None"], ["", "def", "create_imgid2idx_map", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgId2idx", "=", "{", "}", "\n", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "imgId", "=", "item", "[", "'image_id'", "]", "\n", "if", "imgId", "in", "self", ".", "imgId2idx", ":", "\n", "                ", "self", ".", "imgId2idx", "[", "imgId", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgId2idx", "[", "imgId", "]", "=", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.init_collected_data": [[79, 98], ["range", "len", "dataset_lifelong.DataCollector.data[].copy", "dataset_lifelong.DataCollector.collected_data.append"], "methods", ["None"], ["", "", "", "def", "init_collected_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The captions are stored as dictionaries from tuple(caption) --> reward/score, this ensures uniqueness of the\n        gathered captions since the keys of the dictionary can be treated as a set\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "\n", "            ", "item", "=", "self", ".", "data", "[", "i", "]", ".", "copy", "(", ")", "\n", "caption", "=", "item", "[", "'captions'", "]", "[", "item", "[", "'cap_index'", "]", "]", "\n", "item", "[", "'caption'", "]", ",", "item", "[", "'caption_id'", "]", "=", "caption", "[", "'caption'", "]", ",", "caption", "[", "'caption_id'", "]", "\n", "\n", "self", ".", "collected_data", ".", "append", "(", "{", "\n", "'max_reward'", ":", "0.0", ",", "\n", "'best_cap_type'", ":", "-", "1", ",", "# -1 for ground truth, 0 for gathered w/o question, 1 for gathered w/ question", "\n", "'gt_data'", ":", "item", ",", "\n", "'cap_dict'", ":", "{", "}", ",", "# keeps track of all the captions seen for this image, and its reward", "\n", "'ask_cap_dict'", ":", "{", "}", ",", "# same thing but only captions where a question was asked", "\n", "'best_cap_dict'", ":", "{", "}", ",", "# keep track of all the best captions between rollout, replace, original", "\n", "'best_ask_cap_dict'", ":", "{", "}", "# same thing but a captions where a question was asked", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.collect_batch": [[100, 110], ["dataset_lifelong.DataCollector.data_dump.append", "Utils.util.to_np", "Utils.util.to_np", "Utils.util.to_np", "torch.sum", "Utils.util.to_np", "Utils.util.to_np", "Utils.util.to_np", "Utils.util.to_np"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np"], ["", "", "def", "collect_batch", "(", "self", ",", "index", ",", "captions", ",", "masks", ",", "rewards", ",", "ans", "=", "None", ",", "qs", "=", "None", ",", "qlens", "=", "None", ",", "topk", "=", "None", ")", ":", "\n", "\n", "        ", "index", ",", "captions", ",", "lens", "=", "to_np", "(", "index", ")", ",", "[", "to_np", "(", "x", ")", "for", "x", "in", "captions", "]", ",", "[", "to_np", "(", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ")", ")", "for", "x", "in", "masks", "]", "\n", "if", "self", ".", "model", "==", "\"QuestionAskingTrainer\"", ":", "\n", "            ", "ans", ",", "qs", ",", "qlens", ",", "topk", "=", "[", "to_np", "(", "x", ")", "for", "x", "in", "ans", "]", ",", "[", "to_np", "(", "x", ")", "for", "x", "in", "qs", "]", ",", "[", "to_np", "(", "x", ")", "for", "x", "in", "qlens", "]", ",", "[", "to_np", "(", "x", ")", "for", "x", "in", "topk", "]", "\n", "", "else", ":", "\n", "            ", "ans", ",", "qs", ",", "qlens", ",", "topk", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "", "self", ".", "data_dump", ".", "append", "(", "[", "index", ",", "captions", ",", "lens", ",", "rewards", ",", "ans", ",", "qs", ",", "qlens", ",", "topk", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.process_collected_data": [[111, 151], ["numpy.stack", "numpy.argmax", "numpy.max", "enumerate", "dataset_lifelong.DataCollector.set_unique_captions", "dataset_lifelong.DataCollector.update_epoch_gather_stats"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.set_unique_captions", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.update_epoch_gather_stats"], ["", "def", "process_collected_data", "(", "self", ")", ":", "\n", "\n", "        ", "for", "index", ",", "captions", ",", "lens", ",", "rewards", ",", "ans", ",", "qs", ",", "qlens", ",", "topk", "in", "self", ".", "data_dump", ":", "\n", "\n", "            ", "rewards", "=", "np", ".", "stack", "(", "rewards", ",", "axis", "=", "1", ")", "\n", "maxR_idx", "=", "np", ".", "argmax", "(", "rewards", ",", "axis", "=", "1", ")", "\n", "maxR", "=", "np", ".", "max", "(", "rewards", ",", "axis", "=", "1", ")", "\n", "\n", "# i iterates over this batch, idx is the idx for data in the dataset", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "index", ")", ":", "\n", "                ", "Ri", "=", "maxR", "[", "i", "]", "\n", "best_cap_type", "=", "maxR_idx", "[", "i", "]", "\n", "entry_to_update", "=", "self", ".", "collected_data", "[", "idx", "]", "\n", "\n", "self", ".", "set_unique_captions", "(", "captions", ",", "lens", ",", "rewards", ",", "i", ",", "idx", ",", "best_cap_type", ")", "\n", "\n", "# set a new best caption", "\n", "if", "Ri", ">", "entry_to_update", "[", "'max_reward'", "]", ":", "\n", "\n", "# update the best reward", "\n", "                    ", "entry_to_update", "[", "'max_reward'", "]", "=", "Ri", "\n", "\n", "# update some stats based on whether the best caption was from asking questions or not", "\n", "old_type", "=", "entry_to_update", "[", "'best_cap_type'", "]", "\n", "self", ".", "update_epoch_gather_stats", "(", "best_cap_type", ",", "old_type", ",", "idx", ")", "\n", "entry_to_update", "[", "'best_cap_type'", "]", "=", "best_cap_type", "\n", "\n", "# update the question that was asked, the answer from the teacher, and the top-k words", "\n", "if", "self", ".", "model", "==", "\"QuestionAskingTrainer\"", ":", "\n", "\n", "                        ", "if", "best_cap_type", ">", "0", ":", "\n", "                            ", "entry_to_update", "[", "'answer'", "]", "=", "ans", "[", "best_cap_type", "-", "1", "]", "[", "i", "]", "\n", "entry_to_update", "[", "'question'", "]", "=", "qs", "[", "best_cap_type", "-", "1", "]", "[", "i", "]", "[", ":", "qlens", "[", "best_cap_type", "-", "1", "]", "[", "i", "]", "]", "\n", "entry_to_update", "[", "'topk'", "]", "=", "topk", "[", "best_cap_type", "-", "1", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                            ", "entry_to_update", "[", "'answer'", "]", "=", "None", "\n", "entry_to_update", "[", "'question'", "]", "=", "None", "\n", "entry_to_update", "[", "'topk'", "]", "=", "None", "\n", "\n", "", "", "", "", "", "self", ".", "data_dump", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.set_unique_captions": [[152, 169], ["range", "caption[].tolist", "tuple", "tuple", "tuple", "tuple"], "methods", ["None"], ["", "def", "set_unique_captions", "(", "self", ",", "captions", ",", "lens", ",", "rewards", ",", "i", ",", "idx", ",", "best_type", ")", ":", "\n", "\n", "        ", "slp_data", "=", "self", ".", "collected_data", "[", "idx", "]", "\n", "\n", "for", "best_cap_type", "in", "range", "(", "3", ")", ":", "\n", "\n", "            ", "caption", "=", "captions", "[", "best_cap_type", "]", "[", "i", "]", "\n", "cap_len", "=", "lens", "[", "best_cap_type", "]", "[", "i", "]", "\n", "stripped_caption", "=", "caption", "[", ":", "cap_len", "]", ".", "tolist", "(", ")", "\n", "reward", "=", "rewards", "[", "i", "]", "[", "best_cap_type", "]", "\n", "slp_data", "[", "'cap_dict'", "]", "[", "tuple", "(", "stripped_caption", ")", "]", "=", "reward", "# we're ok overwriting since reward is always same", "\n", "\n", "if", "best_cap_type", "==", "best_type", ":", "slp_data", "[", "'best_cap_dict'", "]", "[", "tuple", "(", "stripped_caption", ")", "]", "=", "reward", "\n", "\n", "if", "best_cap_type", ">", "0", ":", "\n", "                ", "slp_data", "[", "'ask_cap_dict'", "]", "[", "tuple", "(", "stripped_caption", ")", "]", "=", "reward", "\n", "if", "best_cap_type", "==", "best_type", ":", "slp_data", "[", "'best_ask_cap_dict'", "]", "[", "tuple", "(", "stripped_caption", ")", "]", "=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_average_reward_each_image": [[170, 182], ["dataset_lifelong.DataCollector.imgId2idx.items", "img_avg_rwd.sort", "img_avg_rwd.append", "len"], "methods", ["None"], ["", "", "", "def", "get_average_reward_each_image", "(", "self", ")", ":", "\n", "        ", "img_avg_rwd", "=", "[", "]", "\n", "\n", "for", "imgId", ",", "idxs", "in", "self", ".", "imgId2idx", ".", "items", "(", ")", ":", "\n", "            ", "total_score", "=", "0.0", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "total_score", "+=", "self", ".", "collected_data", "[", "idx", "]", "[", "'max_reward'", "]", "\n", "", "avg_score", "=", "total_score", "/", "len", "(", "idxs", ")", "\n", "img_avg_rwd", ".", "append", "(", "(", "imgId", ",", "avg_score", ")", ")", "\n", "\n", "", "img_avg_rwd", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ")", "\n", "return", "img_avg_rwd", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_sample_best_caption": [[183, 202], ["entry[].copy", "list", "sorted", "entry[].items", "operator.itemgetter"], "methods", ["None"], ["", "def", "get_sample_best_caption", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "entry", "=", "self", ".", "collected_data", "[", "idx", "]", "\n", "sample", "=", "entry", "[", "'gt_data'", "]", ".", "copy", "(", ")", "\n", "\n", "# assign the best caption to the sample", "\n", "best_cap", "=", "sorted", "(", "entry", "[", "'cap_dict'", "]", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "sample", "[", "'caption'", "]", "=", "list", "(", "best_cap", "[", "0", "]", ")", "\n", "sample", "[", "'weight'", "]", "=", "entry", "[", "'max_reward'", "]", "\n", "\n", "assert", "best_cap", "[", "1", "]", "==", "entry", "[", "'max_reward'", "]", "\n", "\n", "# additional metrics", "\n", "if", "self", ".", "model", "==", "\"QuestionAskingTrainer\"", ":", "\n", "            ", "sample", "[", "'col_ans'", "]", "=", "entry", "[", "'answer'", "]", "\n", "sample", "[", "'col_question'", "]", "=", "entry", "[", "'question'", "]", "\n", "sample", "[", "'col_topk'", "]", "=", "entry", "[", "'topk'", "]", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.clean_cap_pos": [[203, 214], ["pos_str.remove", "pos_str.remove"], "methods", ["None"], ["", "def", "clean_cap_pos", "(", "self", ",", "cap_str", ",", "pos_str", ")", ":", "\n", "        ", "single_word_str", "=", "' '", ".", "join", "(", "cap_str", ")", ".", "split", "(", ")", "\n", "\n", "new_cap", "=", "[", "self", ".", "c_w2i", "[", "x", "]", "if", "x", "in", "self", ".", "c_w2i", "else", "self", ".", "special_symbols", "[", "'unknown_word'", "]", "for", "x", "in", "single_word_str", "]", "\n", "\n", "if", "'-LRB-'", "in", "pos_str", ":", "\n", "            ", "pos_str", ".", "remove", "(", "'-LRB-'", ")", "\n", "", "if", "'-RRB-'", "in", "pos_str", ":", "\n", "            ", "pos_str", ".", "remove", "(", "'-RRB-'", ")", "\n", "\n", "", "return", "new_cap", ",", "pos_str", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.save_collected_data": [[217, 313], ["dataset_lifelong.DataCollector.get_average_reward_each_image", "int", "min", "dataset_lifelong.DataCollector.reverse", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "pickle.dump", "dataset_lifelong.DataCollector.set_gather_stats", "int", "new_data.append", "len", "len", "open", "len", "len", "len", "len", "len", "len", "zip", "len", "dataset_lifelong.DataCollector.get_sample_best_caption", "Utils.util.idx2str", "dataset_lifelong.DataCollector.clean_cap_pos", "gaveup_list.append", "len", "len", "new_data.append", "gaveup_list.append", "len", "dataset_lifelong.DataCollector.stanfordnlp.pos_tag", "Utils.util.clean_str"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_average_reward_each_image", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.set_gather_stats", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_sample_best_caption", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.clean_cap_pos", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.clean_str"], ["", "def", "save_collected_data", "(", "self", ",", "output_dir", ",", "logger", ")", ":", "\n", "        ", "img_avg_rwd", "=", "self", ".", "get_average_reward_each_image", "(", ")", "\n", "\n", "imgs_to_gather", "=", "int", "(", "len", "(", "self", ".", "imgId2idx", ")", "*", "self", ".", "H", ")", "\n", "gt_reward_idx", "=", "min", "(", "int", "(", "len", "(", "img_avg_rwd", ")", "-", "(", "1", "-", "self", ".", "lamda", ")", "*", "imgs_to_gather", ")", ",", "len", "(", "img_avg_rwd", ")", "-", "1", ")", "\n", "gt_reward", "=", "img_avg_rwd", "[", "gt_reward_idx", "]", "[", "1", "]", "\n", "\n", "new_data", "=", "[", "]", "\n", "imgs_collected", ",", "captions_collected", ",", "skipped_pos_parse_error", "=", "0", ",", "0", ",", "0", "\n", "q_gathers", ",", "no_q_gathers", ",", "total_cider", "=", "0", ",", "0", ",", "0.0", "\n", "gaveup_list", "=", "[", "]", "\n", "\n", "img_avg_rwd", ".", "reverse", "(", ")", "\n", "\n", "# collect the best caption for the top H% images", "\n", "for", "imgId", ",", "_", "in", "img_avg_rwd", ":", "\n", "\n", "            ", "idxs", "=", "self", ".", "imgId2idx", "[", "imgId", "]", "\n", "\n", "if", "imgs_collected", "<", "imgs_to_gather", ":", "\n", "\n", "                ", "for", "idx", "in", "idxs", ":", "\n", "                    ", "item", "=", "self", ".", "get_sample_best_caption", "(", "idx", ")", "\n", "\n", "caption", "=", "item", "[", "'caption'", "]", "\n", "cap_str", "=", "idx2str", "(", "self", ".", "c_i2w", ",", "caption", ")", "\n", "pos_str", "=", "[", "p", "for", "w", ",", "p", "in", "self", ".", "stanfordnlp", ".", "pos_tag", "(", "' '", ".", "join", "(", "[", "clean_str", "(", "x", ")", "for", "x", "in", "cap_str", "]", ")", ")", "]", "\n", "\n", "cap_clean", ",", "pos_clean", "=", "self", ".", "clean_cap_pos", "(", "cap_str", ",", "pos_str", ")", "\n", "\n", "item", "[", "'caption'", "]", "=", "cap_clean", "\n", "caption", "=", "item", "[", "'caption'", "]", "\n", "\n", "if", "len", "(", "pos_clean", ")", "==", "len", "(", "caption", ")", ":", "\n", "\n", "                        ", "if", "idx", "in", "self", ".", "question_set", ":", "\n", "\n", "                            ", "q_gathers", "+=", "1", "\n", "item", "[", "'caption_type'", "]", "=", "1", "\n", "", "elif", "idx", "in", "self", ".", "no_question_set", ":", "\n", "\n", "                            ", "no_q_gathers", "+=", "1", "\n", "item", "[", "'caption_type'", "]", "=", "2", "\n", "\n", "", "item", "[", "'pos'", "]", "=", "[", "self", ".", "p_w2i", "[", "x", "]", "if", "x", "in", "self", ".", "p_w2i", "else", "self", ".", "p_w2i", "[", "'unknown'", "]", "for", "x", "in", "pos_clean", "]", "\n", "\n", "new_data", ".", "append", "(", "item", ")", "\n", "\n", "captions_collected", "+=", "1", "\n", "total_cider", "+=", "item", "[", "'weight'", "]", "\n", "\n", "", "else", ":", "\n", "\n", "                        ", "gaveup_list", ".", "append", "(", "idx", ")", "\n", "skipped_pos_parse_error", "+=", "1", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "for", "idx", "in", "idxs", ":", "\n", "                    ", "gaveup_list", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "imgs_collected", "+=", "1", "\n", "\n", "# get the ground truth captions for the rest of the images", "\n", "", "for", "idx", "in", "gaveup_list", ":", "\n", "            ", "item", "=", "self", ".", "collected_data", "[", "idx", "]", "[", "'gt_data'", "]", "\n", "item", "[", "'weight'", "]", "=", "gt_reward", "\n", "item", "[", "'caption_type'", "]", "=", "0", "\n", "new_data", ".", "append", "(", "item", ")", "\n", "\n", "", "assert", "len", "(", "new_data", ")", "==", "len", "(", "self", ".", "data", ")", "\n", "\n", "# Logging", "\n", "logger", ".", "info", "(", "\"Collecting the top {}/{} images.\"", ".", "format", "(", "imgs_to_gather", ",", "len", "(", "self", ".", "imgId2idx", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Collected {}/{} captions, and asked {}/{} samples for ground truth.\"", ".", "format", "(", "\n", "captions_collected", ",", "len", "(", "self", ".", "data", ")", ",", "len", "(", "gaveup_list", ")", ",", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Of the {} captions collected, {} were from asking a question and {} were from not.\"", ".", "format", "(", "\n", "captions_collected", ",", "q_gathers", ",", "no_q_gathers", ")", ")", "\n", "logger", ".", "info", "(", "\"{} captions were skipped due to pos parsing error\"", ".", "format", "(", "skipped_pos_parse_error", ")", ")", "\n", "logger", ".", "info", "(", "\"The average gathered reward was {} and the 80 percentile reward (GT reward is set to this) is {}.\"", ".", "format", "(", "\n", "total_cider", "/", "captions_collected", ",", "gt_reward", ")", ")", "\n", "\n", "# Save data", "\n", "pickle", ".", "dump", "(", "{", "\n", "\"data\"", ":", "new_data", ",", "\n", "\"c_dicts\"", ":", "[", "self", ".", "c_i2w", ",", "self", ".", "c_w2i", "]", ",", "\n", "\"pos_dicts\"", ":", "[", "self", ".", "p_i2w", ",", "self", ".", "p_w2i", "]", ",", "\n", "\"a_dicts\"", ":", "[", "self", ".", "a_i2w", ",", "self", ".", "a_w2i", "]", ",", "\n", "\"q_dicts\"", ":", "[", "self", ".", "q_i2w", ",", "self", ".", "q_w2i", "]", ",", "\n", "\"special_symbols\"", ":", "self", ".", "special_symbols", ",", "\n", "\"gt_caps_reward\"", ":", "gt_reward", "\n", "}", ",", "open", "(", "output_dir", ",", "'wb'", ")", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "stats", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "\n", "[", "'collects'", ",", "'num gt'", ",", "'q collects'", ",", "'no q collects'", ",", "'avg collect reward'", ",", "'gt reward'", ",", "'pos parse error'", "]", ",", "\n", "[", "captions_collected", ",", "len", "(", "gaveup_list", ")", ",", "q_gathers", ",", "no_q_gathers", ",", "total_cider", "/", "captions_collected", ",", "gt_reward", ",", "skipped_pos_parse_error", "]", ")", "}", "\n", "self", ".", "set_gather_stats", "(", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_epoch_stats": [[314, 337], ["question_distr.append", "no_question_distr.append", "zip", "zip", "len", "len", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "get_epoch_stats", "(", "self", ")", ":", "\n", "\n", "        ", "question_distr", "=", "[", "]", "\n", "no_question_distr", "=", "[", "]", "\n", "\n", "for", "idx", "in", "self", ".", "question_set", ":", "\n", "            ", "slp_data", "=", "self", ".", "collected_data", "[", "idx", "]", "\n", "question_distr", ".", "append", "(", "slp_data", "[", "'max_reward'", "]", ")", "\n", "\n", "", "for", "idx", "in", "self", ".", "no_question_set", ":", "\n", "            ", "slp_data", "=", "self", ".", "collected_data", "[", "idx", "]", "\n", "no_question_distr", ".", "append", "(", "slp_data", "[", "'max_reward'", "]", ")", "\n", "\n", "", "info", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "\n", "[", "\"epoch captions collected\"", ",", "\"epoch redundant collected\"", ",", "\n", "\"best cap from asking question\"", ",", "\"best cap from sampling\"", "]", ",", "\n", "[", "self", ".", "epoch_collects", ",", "self", ".", "epoch_redundant_collects", ",", "len", "(", "self", ".", "question_set", ")", ",", "\n", "len", "(", "self", ".", "no_question_set", ")", "]", ")", "}", "\n", "\n", "distrs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "[", "\"reward distrib. from asking question\"", ",", "\"reward distrib. from not asking\"", "]", ",", "\n", "[", "np", ".", "asarray", "(", "question_distr", ")", ",", "np", ".", "asarray", "(", "no_question_distr", ")", "]", ")", "}", "\n", "\n", "return", "info", ",", "distrs", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.reset_epoch_counters": [[338, 342], ["None"], "methods", ["None"], ["", "def", "reset_epoch_counters", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "epoch_collects", "=", "0", "\n", "self", ".", "epoch_redundant_collects", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.update_epoch_gather_stats": [[343, 359], ["dataset_lifelong.DataCollector.question_set.add", "dataset_lifelong.DataCollector.no_question_set.remove", "dataset_lifelong.DataCollector.question_set.remove", "dataset_lifelong.DataCollector.no_question_set.add", "dataset_lifelong.DataCollector.question_set.add", "dataset_lifelong.DataCollector.no_question_set.add"], "methods", ["None"], ["", "def", "update_epoch_gather_stats", "(", "self", ",", "new_type", ",", "old_type", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "new_type", ">", "0", "and", "old_type", "==", "0", ":", "\n", "            ", "self", ".", "question_set", ".", "add", "(", "idx", ")", "\n", "self", ".", "no_question_set", ".", "remove", "(", "idx", ")", "\n", "", "elif", "new_type", "==", "0", "and", "old_type", ">", "0", ":", "\n", "            ", "self", ".", "question_set", ".", "remove", "(", "idx", ")", "\n", "self", ".", "no_question_set", ".", "add", "(", "idx", ")", "\n", "", "elif", "new_type", ">", "0", "and", "old_type", "<", "0", ":", "\n", "            ", "self", ".", "question_set", ".", "add", "(", "idx", ")", "\n", "", "elif", "new_type", "==", "0", "and", "old_type", "<", "0", ":", "\n", "            ", "self", ".", "no_question_set", ".", "add", "(", "idx", ")", "\n", "\n", "", "self", ".", "epoch_collects", "+=", "1", "\n", "if", "old_type", ">", "-", "1", ":", "\n", "            ", "self", ".", "epoch_redundant_collects", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_unique_captions": [[360, 385], ["dataset_lifelong.DataCollector.imgId2idx.items", "set", "set", "set", "set", "len", "len", "len", "len", "set.update", "set.update", "set.update", "set.update", "item[].keys", "item[].keys", "item[].keys", "item[].keys"], "methods", ["None"], ["", "", "def", "get_unique_captions", "(", "self", ")", ":", "\n", "\n", "        ", "total_unique_caps", ",", "total_unique_ask_caps", ",", "total_best_unique", ",", "total_best_ask_unique", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "imgId", ",", "idxs", "in", "self", ".", "imgId2idx", ".", "items", "(", ")", ":", "\n", "\n", "            ", "temp_cap_set", "=", "set", "(", ")", "\n", "temp_ask_cap_set", "=", "set", "(", ")", "\n", "temp_best_cap_set", "=", "set", "(", ")", "\n", "temp_best_ask_cap_set", "=", "set", "(", ")", "\n", "\n", "for", "idx", "in", "idxs", ":", "\n", "\n", "                ", "item", "=", "self", ".", "collected_data", "[", "idx", "]", "\n", "temp_cap_set", ".", "update", "(", "item", "[", "'cap_dict'", "]", ".", "keys", "(", ")", ")", "\n", "temp_ask_cap_set", ".", "update", "(", "item", "[", "'ask_cap_dict'", "]", ".", "keys", "(", ")", ")", "\n", "temp_best_cap_set", ".", "update", "(", "item", "[", "'best_cap_dict'", "]", ".", "keys", "(", ")", ")", "\n", "temp_best_ask_cap_set", ".", "update", "(", "item", "[", "'best_ask_cap_dict'", "]", ".", "keys", "(", ")", ")", "\n", "\n", "", "total_unique_caps", "+=", "len", "(", "temp_cap_set", ")", "\n", "total_unique_ask_caps", "+=", "len", "(", "temp_ask_cap_set", ")", "\n", "total_best_unique", "+=", "len", "(", "temp_best_cap_set", ")", "\n", "total_best_ask_unique", "+=", "len", "(", "temp_best_ask_cap_set", ")", "\n", "\n", "", "return", "total_unique_caps", ",", "total_unique_ask_caps", ",", "total_best_unique", ",", "total_best_ask_unique", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.set_gather_stats": [[386, 401], ["dataset_lifelong.DataCollector.get_unique_captions", "stats.iteritems"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_unique_captions"], ["", "def", "set_gather_stats", "(", "self", ",", "stats", ")", ":", "\n", "\n", "        ", "num_scored", ",", "num_asked", ",", "num_best_scored", ",", "num_best_asked", "=", "self", ".", "get_unique_captions", "(", ")", "\n", "self", ".", "collection_stats", "[", "'num scored'", "]", "=", "num_scored", "\n", "self", ".", "collection_stats", "[", "'num asked'", "]", "=", "num_asked", "\n", "self", ".", "collection_stats", "[", "'num best scored'", "]", "=", "num_best_scored", "\n", "self", ".", "collection_stats", "[", "'num best asked'", "]", "=", "num_best_asked", "\n", "\n", "for", "key", ",", "value", "in", "stats", ".", "iteritems", "(", ")", ":", "\n", "            ", "self", ".", "collection_stats", "[", "key", "]", "=", "value", "\n", "\n", "", "self", ".", "collection_stats", "[", "'supervision (1, 1, 10)'", "]", "=", "self", ".", "collection_stats", "[", "'num best scored'", "]", "+", "self", ".", "collection_stats", "[", "'num best scored'", "]", "+", "10", "*", "self", ".", "collection_stats", "[", "'num gt'", "]", "\n", "self", ".", "collection_stats", "[", "'supervision (1, 1, 5)'", "]", "=", "self", ".", "collection_stats", "[", "'num best scored'", "]", "+", "self", ".", "collection_stats", "[", "'num best scored'", "]", "+", "5", "*", "self", ".", "collection_stats", "[", "'num gt'", "]", "\n", "self", ".", "collection_stats", "[", "'supervision (1, 0, 10)'", "]", "=", "self", ".", "collection_stats", "[", "'num best scored'", "]", "+", "10", "*", "self", ".", "collection_stats", "[", "'num gt'", "]", "\n", "self", ".", "collection_stats", "[", "'supervision (1, 0, 5)'", "]", "=", "self", ".", "collection_stats", "[", "'num best scored'", "]", "+", "5", "*", "self", ".", "collection_stats", "[", "'num gt'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.DataCollector.get_gather_stats": [[402, 404], ["None"], "methods", ["None"], ["", "def", "get_gather_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "collection_stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_lifelong.default_loader": [[10, 12], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.WordMatchDataset.__init__": [[19, 38], ["pickle.load", "len", "len", "len", "len", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "max_q_len", ",", "self", ".", "max_c_len", "=", "opt", ".", "q_max_sentence_len", ",", "opt", ".", "c_max_sentence_len", "\n", "self", ".", "img_dir", "=", "opt", ".", "img_dir", "\n", "\n", "self", ".", "f", "=", "pickle", ".", "load", "(", "open", "(", "data_file", ",", "\"rb\"", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "f", "[", "\"data\"", "]", "\n", "# vocabulary dictionaries", "\n", "self", ".", "c_i2w", ",", "self", ".", "c_w2i", "=", "self", ".", "f", "[", "\"c_dicts\"", "]", "\n", "self", ".", "p_i2w", ",", "self", ".", "p_w2i", "=", "self", ".", "f", "[", "\"pos_dicts\"", "]", "\n", "self", ".", "q_i2w", ",", "self", ".", "q_w2i", "=", "self", ".", "f", "[", "\"q_dicts\"", "]", "\n", "self", ".", "a_i2w", ",", "self", ".", "a_w2i", "=", "self", ".", "f", "[", "\"a_dicts\"", "]", "\n", "self", ".", "c_vocab_size", "=", "len", "(", "self", ".", "c_i2w", ")", "\n", "self", ".", "p_vocab_size", "=", "len", "(", "self", ".", "p_i2w", ")", "\n", "self", ".", "q_vocab_size", "=", "len", "(", "self", ".", "q_i2w", ")", "\n", "self", ".", "a_vocab_size", "=", "len", "(", "self", ".", "a_i2w", ")", "\n", "self", ".", "special_symbols", "=", "self", ".", "f", "[", "\"special_symbols\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.WordMatchDataset.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.WordMatchDataset.__getitem__": [[42, 80], ["Utils.util.pad_sentence", "Utils.util.pad_sentence", "os.path.join", "numpy.load", "os.path.join", "Utils.util.pad_sentence", "numpy.zeros", "len", "refs.append", "ref_lens.append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "str", "Utils.util.pad_sentence", "len"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "sample", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "# prepare question", "\n", "question", "=", "sample", "[", "'question'", "]", "[", ":", "self", ".", "max_q_len", "]", "\n", "question_len", "=", "len", "(", "question", ")", "+", "1", "\n", "\n", "source", "=", "[", "self", ".", "special_symbols", "[", "'bos'", "]", "]", "+", "question", "# add <bos> token", "\n", "target", "=", "question", "+", "[", "self", ".", "special_symbols", "[", "'eos'", "]", "]", "# add <eos> token", "\n", "source", "=", "pad_sentence", "(", "source", ",", "max_len", "=", "self", ".", "max_q_len", "+", "1", ",", "pad_idx", "=", "self", ".", "q_vocab_size", ")", "\n", "target", "=", "pad_sentence", "(", "target", ",", "max_len", "=", "self", ".", "max_q_len", "+", "1", ",", "pad_idx", "=", "self", ".", "q_vocab_size", ")", "\n", "\n", "answer", "=", "sample", "[", "'answer'", "]", "\n", "\n", "# get image", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "\"features\"", ",", "str", "(", "sample", "[", "'image_id'", "]", ")", "+", "'.npy'", ")", "\n", "img", "=", "np", ".", "load", "(", "img_path", ")", "\n", "img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "sample", "[", "'img_raw_folder'", "]", ",", "sample", "[", "'img_raw_file'", "]", ")", "\n", "\n", "# prepare pos and caption", "\n", "# pos = sample['pos']", "\n", "caption", "=", "[", "self", ".", "special_symbols", "[", "'bos'", "]", "]", "+", "sample", "[", "'caption'", "]", "\n", "caption", "=", "caption", "[", ":", "self", ".", "max_c_len", "]", "# also limit the length of captions", "\n", "caption", "=", "pad_sentence", "(", "caption", ",", "max_len", "=", "self", ".", "max_c_len", "+", "1", ",", "pad_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "\n", "refs", "=", "[", "]", "\n", "ref_lens", "=", "[", "]", "\n", "for", "ref", "in", "sample", "[", "'refs'", "]", ":", "\n", "            ", "cap", "=", "ref", "[", "'caption'", "]", "[", ":", "self", ".", "max_c_len", "]", "\n", "refs", ".", "append", "(", "pad_sentence", "(", "cap", ",", "max_len", "=", "self", ".", "max_c_len", ",", "pad_idx", "=", "self", ".", "c_vocab_size", ")", ")", "\n", "ref_lens", ".", "append", "(", "len", "(", "cap", ")", ")", "\n", "\n", "", "q_idx", "=", "sample", "[", "'q_idx'", "]", "\n", "q_idx_vec", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_c_len", ",", "self", ".", "opt", ".", "cap_rnn_size", ")", ")", "\n", "q_idx_vec", "[", "q_idx", ",", ":", "]", "=", "1.0", "\n", "\n", "return", "img", ",", "question_len", ",", "np", ".", "asarray", "(", "source", ")", ",", "np", ".", "asarray", "(", "target", ")", ",", "np", ".", "asarray", "(", "caption", ")", ",", "q_idx", ",", "q_idx_vec", ",", "np", ".", "asarray", "(", "refs", ")", ",", "answer", ",", "img_file", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.PosMatchDataset.__init__": [[106, 112], ["dataset_quegen.WordMatchDataset.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ",", "fake_len", ",", "loader", "=", "default_loader", ")", ":", "\n", "\n", "        ", "super", "(", "PosMatchDataset", ",", "self", ")", ".", "__init__", "(", "opt", ",", "data_file", ",", "loader", "=", "loader", ")", "\n", "\n", "self", ".", "real_len", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "fake_len", "=", "fake_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.PosMatchDataset.__len__": [[113, 115], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fake_len", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.PosMatchDataset.__getitem__": [[116, 123], ["random.randint", "dataset_quegen.WordMatchDataset.__getitem__", "dataset_quegen.WordMatchDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.PosMatchDataset.__getitem__", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.PosMatchDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "index", ">=", "self", ".", "real_len", ":", "\n", "            ", "i", "=", "randint", "(", "0", ",", "self", ".", "real_len", "-", "1", ")", "\n", "return", "super", "(", "PosMatchDataset", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "PosMatchDataset", ",", "self", ")", ".", "__getitem__", "(", "index", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.datasets.dataset_quegen.default_loader": [[14, 16], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.__init__": [[11, 23], ["os.path.isfile", "open().close", "visualizer.Visualizer.initialize", "visualizer.Visualizer.update_html", "open", "bs4.BeautifulSoup", "open", "f.read"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.initialize", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.update_html"], ["    ", "def", "__init__", "(", "self", ",", "html", ",", "css", ")", ":", "\n", "\n", "        ", "self", ".", "html", "=", "html", "\n", "self", ".", "css", "=", "css", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "html", ")", ":", "\n", "            ", "open", "(", "html", ",", "'a'", ")", ".", "close", "(", ")", "\n", "self", ".", "soup", "=", "self", ".", "initialize", "(", ")", "\n", "self", ".", "update_html", "(", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "html", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "soup", "=", "BeautifulSoup", "(", "f", ".", "read", "(", ")", ",", "'html.parser'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.initialize": [[24, 36], ["bs4.BeautifulSoup.append", "bs4.BeautifulSoup.head.append", "bs4.BeautifulSoup.head.append", "bs4.BeautifulSoup.body.append", "open", "bs4.BeautifulSoup", "visualizer.dom2soup", "visualizer.dom2soup", "visualizer.dom2soup", "visualizer.dom2soup", "f.read", "html", "link", "link", "table", "head", "body"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup"], ["", "", "", "def", "initialize", "(", "self", ")", ":", "\n", "# load the file", "\n", "        ", "with", "open", "(", "self", ".", "html", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "soup", "=", "BeautifulSoup", "(", "f", ".", "read", "(", ")", ",", "'html.parser'", ")", "\n", "\n", "# set up html file", "\n", "", "soup", ".", "append", "(", "dom2soup", "(", "html", "(", "head", "(", ")", ",", "body", "(", ")", ")", ")", ")", "\n", "soup", ".", "head", ".", "append", "(", "dom2soup", "(", "link", "(", "rel", "=", "'stylesheet'", ",", "href", "=", "\"https://fonts.googleapis.com/css?family=Open+Sans\"", ")", ")", ")", "\n", "soup", ".", "head", ".", "append", "(", "dom2soup", "(", "link", "(", "rel", "=", "'stylesheet'", ",", "href", "=", "self", ".", "css", ")", ")", ")", "\n", "soup", ".", "body", ".", "append", "(", "dom2soup", "(", "table", "(", ")", ")", ")", "\n", "\n", "return", "soup", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.Visualizer.update_html": [[37, 40], ["open", "outf.write", "str"], "methods", ["None"], ["", "def", "update_html", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "html", ",", "\"w\"", ")", "as", "outf", ":", "\n", "            ", "outf", ".", "write", "(", "str", "(", "self", ".", "soup", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.CaptionVisualizer.__init__": [[43, 45], ["visualizer.Visualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "html", ",", "css", ")", ":", "\n", "        ", "super", "(", "CaptionVisualizer", ",", "self", ")", ".", "__init__", "(", "html", ",", "css", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.CaptionVisualizer.add_entry": [[46, 70], ["text.append", "text.append", "text.append", "text.extend", "text.extend", "tr", "visualizer.CaptionVisualizer.soup.body.table.append", "p", "p", "p", "p", "td", "td", "visualizer.dom2soup", "b", "b", "b", "p", "b", "enumerate", "div", "div", "b", "enumerate", "img"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup"], ["", "def", "add_entry", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "text", "=", "[", "]", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Epoch {}\"", ".", "format", "(", "sample", "[", "'epoch'", "]", ")", ")", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Greedy sample: \"", ")", ",", "sample", "[", "'greedy_sample'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"POS predictions: \"", ")", ",", "sample", "[", "'pos_pred'", "]", ")", ")", "\n", "beamsearch", "=", "[", "p", "(", "b", "(", "\"Beam search {}: \"", ".", "format", "(", "i", ")", ")", ",", "s", ")", "for", "i", ",", "s", "in", "enumerate", "(", "sample", "[", "'beamsearch'", "]", ")", "]", ",", "\n", "references", "=", "[", "p", "(", "b", "(", "\"Ref {}: \"", ".", "format", "(", "i", ")", ")", ",", "s", ")", "for", "i", ",", "s", "in", "enumerate", "(", "sample", "[", "'refs'", "]", ")", "]", "\n", "text", ".", "extend", "(", "beamsearch", ")", "\n", "text", ".", "extend", "(", "references", ")", "\n", "\n", "entry", "=", "tr", "(", "\n", "td", "(", "\n", "div", "(", "\n", "img", "(", "src", "=", "sample", "[", "'img'", "]", ",", "style", "=", "\"max-height: 300px; max-width: 400px;\"", ")", ",", "\n", "cls", "=", "'img'", "\n", ")", "\n", ")", ",", "\n", "td", "(", "\n", "div", "(", "cls", "=", "'textb'", ",", "*", "text", ")", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "soup", ".", "body", ".", "table", ".", "append", "(", "dom2soup", "(", "entry", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.VQAVisualizer.__init__": [[73, 75], ["visualizer.Visualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "html", ",", "css", ")", ":", "\n", "        ", "super", "(", "VQAVisualizer", ",", "self", ")", ".", "__init__", "(", "html", ",", "css", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.VQAVisualizer.add_entry": [[76, 98], ["text.append", "text.append", "text.append", "text.append", "text.extend", "tr", "visualizer.VQAVisualizer.soup.body.table.append", "p", "p", "p", "p", "p", "td", "td", "visualizer.dom2soup", "b", "b", "b", "b", "b", "enumerate", "div", "div", "img"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup"], ["", "def", "add_entry", "(", "self", ",", "sample", ")", ":", "\n", "        ", "text", "=", "[", "]", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Epoch {}\"", ".", "format", "(", "sample", "[", "'epoch'", "]", ")", ")", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Question: \"", ")", ",", "sample", "[", "'question'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"GT answer: \"", ")", ",", "sample", "[", "'gt_ans'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Predicted answers: \"", ")", ",", "', '", ".", "join", "(", "[", "\"{} ({:.2f})\"", ".", "format", "(", "ans", ",", "prob", ")", "for", "prob", ",", "ans", "in", "sample", "[", "'predictions'", "]", "]", ")", ")", ")", "\n", "references", "=", "[", "p", "(", "b", "(", "\"Ref {}: \"", ".", "format", "(", "i", ")", ")", ",", "s", ")", "for", "i", ",", "s", "in", "enumerate", "(", "sample", "[", "'refs'", "]", ")", "]", "\n", "text", ".", "extend", "(", "references", ")", "\n", "\n", "entry", "=", "tr", "(", "\n", "td", "(", "\n", "div", "(", "\n", "img", "(", "src", "=", "sample", "[", "'img'", "]", ",", "style", "=", "\"max-height: 300px; max-width: 400px;\"", ")", ",", "\n", "cls", "=", "'img'", "\n", ")", "\n", ")", ",", "\n", "td", "(", "\n", "div", "(", "cls", "=", "'textb'", ",", "*", "text", ")", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "soup", ".", "body", ".", "table", ".", "append", "(", "dom2soup", "(", "entry", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.QGenVisualizer.__init__": [[101, 103], ["visualizer.Visualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "html", ",", "css", ")", ":", "\n", "        ", "super", "(", "QGenVisualizer", ",", "self", ")", ".", "__init__", "(", "html", ",", "css", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.QGenVisualizer.add_entry": [[104, 126], ["text.append", "text.append", "text.append", "text.append", "text.extend", "tr", "visualizer.QGenVisualizer.soup.body.table.append", "p", "p", "p", "p", "td", "td", "visualizer.dom2soup", "b", "b", "b", "b", "p", "div", "div", "b", "enumerate", "img"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup"], ["", "def", "add_entry", "(", "self", ",", "sample", ")", ":", "\n", "        ", "text", "=", "[", "]", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Epoch {}\"", ".", "format", "(", "sample", "[", "'epoch'", "]", ")", ")", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Reference question: \"", ")", ",", "sample", "[", "'gt_question'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"answer: \"", ")", ",", "sample", "[", "'answer'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Greedy sample: \"", ")", ",", "sample", "[", "'greedy_question'", "]", ")", ")", "\n", "beamsearch", "=", "[", "p", "(", "b", "(", "\"Beam search {}: \"", ".", "format", "(", "i", ")", ")", ",", "s", ")", "for", "i", ",", "s", "in", "enumerate", "(", "sample", "[", "'beamsearch'", "]", ")", "]", ",", "\n", "text", ".", "extend", "(", "beamsearch", ")", "\n", "\n", "entry", "=", "tr", "(", "\n", "td", "(", "\n", "div", "(", "\n", "img", "(", "src", "=", "sample", "[", "'img'", "]", ",", "style", "=", "\"max-height: 300px; max-width: 400px;\"", ")", ",", "\n", "cls", "=", "'img'", "\n", ")", "\n", ")", ",", "\n", "td", "(", "\n", "div", "(", "cls", "=", "'textb'", ",", "*", "text", ")", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "soup", ".", "body", ".", "table", ".", "append", "(", "dom2soup", "(", "entry", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.LLVisualizer.__init__": [[129, 131], ["visualizer.Visualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "html", ",", "css", ")", ":", "\n", "        ", "super", "(", "LLVisualizer", ",", "self", ")", ".", "__init__", "(", "html", ",", "css", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.LLVisualizer.add_entry": [[132, 169], ["text.append", "text.append", "text.append", "text.append", "text.append", "text.append", "text.append", "text.append", "text.append", "text.append", "text.extend", "tr", "visualizer.LLVisualizer.soup.body.table.append", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "td", "td", "visualizer.dom2soup", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "enumerate", "div", "div", "img"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup"], ["", "def", "add_entry", "(", "self", ",", "sample", ")", ":", "\n", "        ", "text", "=", "[", "]", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Epoch {}\"", ".", "format", "(", "sample", "[", "'epoch'", "]", ")", ")", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Original caption: \"", ")", ",", "sample", "[", "'caption'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Question asking probabilities: \"", ")", ",", "sample", "[", "'qaskprobs'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Rollout caption: \"", ")", ",", "sample", "[", "'rollout_caption'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Replace caption: \"", ")", ",", "sample", "[", "'replace_caption'", "]", ")", ")", "\n", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Decision made: \"", ")", ",", "\"Asked Q: {}, index {}, word {}\"", ".", "format", "(", "\n", "sample", "[", "'flag'", "]", ",", "sample", "[", "'index'", "]", ",", "sample", "[", "'word'", "]", ")", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Predicted Part-of-speech: \"", ")", ",", "sample", "[", "'pos'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Question: \"", ")", ",", "sample", "[", "'question'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Top 3 answers: \"", ")", ",", "sample", "[", "'answers'", "]", ")", ")", "\n", "text", ".", "append", "(", "p", "(", "b", "(", "\"Captioner's predicted words: \"", ")", ",", "sample", "[", "'words'", "]", ")", ")", "\n", "\n", "# text.append(p(b(\"Greedy decision: \"), \"index {} word {}\".format(sample['gindex'], sample['gword'])))", "\n", "# text.append(p(b(\"Predicted Part-of-speech: \"), sample['gpos']))", "\n", "# text.append(p(b(\"Question: \"), sample['gquestion']))", "\n", "# text.append(p(b(\"Top 3 answers: \"), sample['ganswers']))", "\n", "# text.append(p(b(\"Captioner's predicted words: \"), sample['gwords']))", "\n", "\n", "references", "=", "[", "p", "(", "b", "(", "\"Reference {}: \"", ".", "format", "(", "i", ")", ")", ",", "s", ")", "for", "i", ",", "s", "in", "enumerate", "(", "sample", "[", "'refs'", "]", ")", "]", "\n", "text", ".", "extend", "(", "references", ")", "\n", "\n", "entry", "=", "tr", "(", "\n", "td", "(", "\n", "div", "(", "\n", "img", "(", "src", "=", "sample", "[", "'img'", "]", ",", "style", "=", "\"max-height: 300px; max-width: 400px;\"", ")", ",", "\n", "cls", "=", "'img'", "\n", ")", "\n", ")", ",", "\n", "td", "(", "\n", "div", "(", "cls", "=", "'textb'", ",", "*", "text", ")", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "soup", ".", "body", ".", "table", ".", "append", "(", "dom2soup", "(", "entry", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.visualizer.dom2soup": [[6, 8], ["bs4.BeautifulSoup", "tag.render"], "function", ["None"], ["def", "dom2soup", "(", "tag", ")", ":", "\n", "    ", "return", "BeautifulSoup", "(", "tag", ".", "render", "(", ")", ",", "'html.parser'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.__init__": [[12, 15], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.scalar_summary": [[16, 20], ["tensorflow.Summary", "tensorboardlogger.TensorboardLogger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.image_summary": [[21, 43], ["enumerate", "tensorflow.Summary", "tensorboardlogger.TensorboardLogger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.histo_summary": [[44, 71], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "tensorboardlogger.TensorboardLogger.writer.add_summary", "tensorboardlogger.TensorboardLogger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.Bunch.__init__": [[16, 22], ["util.Bunch.__dict__.update", "setattr"], "methods", ["None"], ["\n", "from", "eval", ".", "coco_eval", "import", "eval_coco", ",", "EvalDataset", "\n", "from", "Models", ".", "attention_captioner", "import", "AttentionCaptioner", "\n", "from", "Losses", ".", "metrics", "import", "linear_reward_weighting", ",", "get_scorers", "\n", "from", "train_caption", "import", "validate_helper", "\n", "from", "abc", "import", "ABCMeta", ",", "abstractmethod", "\n", "from", "Utils", ".", "util", "import", "Bunch", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.update_scheduled_sampling": [[24, 28], ["min"], "function", ["None"], ["\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.update_lr": [[30, 35], ["None"], "function", ["None"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--experiment'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.create_folder": [[37, 42], ["os.path.exists", "print", "os.system"], "function", ["None"], ["return", "args", "\n", "\n", "\n", "", "def", "load_model", "(", "path", ",", "model_class", ")", ":", "\n", "\n", "    ", "save_state", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.time_remaining": [[44, 46], ["time.strftime", "time.gmtime"], "function", ["None"], ["model", ".", "load_state_dict", "(", "save_state", "[", "'state_dict'", "]", ")", "\n", "\n", "print", "'{} model loaded at {}'", ".", "format", "(", "model_class", ",", "path", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.time_elapsed": [[48, 50], ["time.strftime", "time.gmtime"], "function", ["None"], ["\n", "\n", "", "def", "accum_train_files", "(", "round", ",", "newfile", ",", "oldfile", ",", "outfile", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.pad_sentence": [[52, 56], ["len", "max"], "function", ["None"], ["\n", "d1", "=", "pickle", ".", "load", "(", "open", "(", "newfile", ",", "'rb'", ")", ")", "\n", "d2", "=", "pickle", ".", "load", "(", "open", "(", "oldfile", ",", "'rb'", ")", ")", "\n", "\n", "if", "round", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np": [[58, 65], ["type", "hasattr", "x.data.cpu().numpy", "x.cpu().numpy", "x.data.cpu", "x.cpu"], "function", ["None"], ["            ", "caption", "=", "item", "[", "'captions'", "]", "[", "item", "[", "'cap_index'", "]", "]", "\n", "item", "[", "'caption'", "]", ",", "item", "[", "'caption_id'", "]", "=", "caption", "[", "'caption'", "]", ",", "caption", "[", "'caption_id'", "]", "\n", "item", "[", "'weight'", "]", "=", "d1", "[", "'gt_caps_reward'", "]", "\n", "\n", "", "", "d1", "[", "'data'", "]", ".", "extend", "(", "d2", "[", "'data'", "]", ")", "\n", "pickle", ".", "dump", "(", "d1", ",", "open", "(", "outfile", ",", "'wb'", ")", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.clean_str": [[67, 71], ["re.sub.replace().replace().replace", "re.sub", "re.sub.replace().replace", "re.sub.replace"], "function", ["None"], ["# replace word at index \"idxs\" in caption with \"answers\" iff \"ask_flag\" is set to 1", "\n", "    ", "caption", "=", "caption", ".", "clone", "(", ")", "\n", "\n", "xcoord", "=", "(", "ask_flag", ".", "detach", "(", ")", ".", "nonzero", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "xcoord", ".", "size", "(", ")", ")", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.clean_pos": [[73, 79], ["x.remove", "x.remove"], "function", ["None"], ["vals", "=", "answers", "[", "xcoord", "]", "\n", "\n", "caption", "[", "xcoord", ",", "ycoord", "]", "=", "vals", "\n", "", "return", "caption", "\n", "\n", "\n", "", "def", "get_rollout_replace_stats", "(", "replace_reward", ",", "rollout_reward", ",", "base_reward", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.safe_dict_retrieval": [[81, 86], ["None"], "function", ["None"], ["    ", "stat_rero", "=", "np", ".", "sum", "(", "replace_reward", ">", "rollout_reward", ")", "\n", "stat_rore", "=", "np", ".", "sum", "(", "rollout_reward", ">", "replace_reward", ")", "\n", "stat_reall", "=", "np", ".", "sum", "(", "replace_reward", ">", "np", ".", "maximum", "(", "rollout_reward", ",", "base_reward", ")", ")", "\n", "stat_roall", "=", "np", ".", "sum", "(", "rollout_reward", ">", "np", ".", "maximum", "(", "replace_reward", ",", "base_reward", ")", ")", "\n", "\n", "return", "stat_rero", ",", "stat_rore", ",", "stat_reall", ",", "stat_roall", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.add_or_replace": [[88, 93], ["len", "l.append"], "function", ["None"], ["\n", "", "def", "choose_better_caption", "(", "score1", ",", "cap1", ",", "mask1", ",", "score2", ",", "cap2", ",", "mask2", ")", ":", "\n", "# given two arrays of captions, and their scores, return [max(cap1[i], cap2[i])] i=1 to length", "\n", "    ", "caption", "=", "[", "]", "\n", "cap_mask", "=", "[", "]", "\n", "for", "idx", ",", "flag", "in", "enumerate", "(", "score1", ">=", "score2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.set_lr": [[95, 98], ["None"], "function", ["None"], ["            ", "caption", ".", "append", "(", "cap1", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "cap_mask", ".", "append", "(", "mask1", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "caption", ".", "append", "(", "cap2", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.gradient_noise_and_clip": [[100, 103], ["list", "torch.utils.clip_grad_norm", "filter"], "function", ["None"], ["\n", "", "", "return", "torch", ".", "cat", "(", "caption", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "cap_mask", ",", "dim", "=", "0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.weights_init": [[105, 117], ["isinstance", "torch.xavier_normal_", "torch.constant_", "isinstance", "torch.normal_", "isinstance", "module.named_parameters", "torch.constant_", "torch.xavier_normal_"], "function", ["None"], ["# The <EOS> token represents \"don't ask\"", "\n", "# We have a 1-off problem if caption is actually max+1 length (17) because the last token isn't EOS", "\n", "    ", "cap_mask", ",", "valid_pos_mask", "=", "cap_mask", ".", "clone", "(", ")", ",", "valid_pos_mask", ".", "clone", "(", ")", "\n", "length", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "cap_mask", "!=", "0", ",", "dim", "=", "1", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "max", "=", "max_len", ")", "\n", "\n", "mask", "=", "cap_mask", "*", "valid_pos_mask", "\n", "mask", "=", "mask", ".", "scatter_", "(", "1", ",", "length", ",", "1", ")", "# allow asking at the len+1 spot, this is the \"dont ask\" option", "\n", "\n", "filter", "=", "(", "mask", "==", "0", ")", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "filter", "[", "mask", "==", "0", "]", "=", "float", "(", "'-inf'", ")", "\n", "masked_prob", "=", "torch", ".", "softmax", "(", "(", "1", "/", "temperature", ")", "*", "logit", "+", "filter", ",", "dim", "=", "1", ")", "\n", "return", "masked_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.get_std_logger": [[121, 138], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "len"], "function", ["None"], ["\n", "        ", "__metaclass__", "=", "ABCMeta", "\n", "self", ".", "opt", "=", "Bunch", "(", "json", ".", "load", "(", "open", "(", "args", ".", "experiment", ",", "'r'", ")", ")", ")", "\n", "self", ".", "opt", ".", "resume", "=", "args", ".", "resume", "\n", "\n", "self", ".", "set_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "self", ".", "chunk", ",", "self", ".", "collection_epoch", ",", "self", ".", "cap_epoch", ",", "self", ".", "collection_steps", ",", "self", ".", "cap_steps", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "self", ".", "start_time", "=", "time", "(", ")", "\n", "\n", "# LOGGING", "\n", "self", ".", "result_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "exp_dir", ",", "self", ".", "opt", ".", "result_folder", ",", "self", ".", "opt", ".", "run_name", ")", "\n", "util", ".", "create_folder", "(", "self", ".", "result_path", ")", "\n", "\n", "self", ".", "logger", "=", "TensorboardLogger", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "exp_dir", ",", "self", ".", "opt", ".", "result_folder", ",", "\"tensorboard/\"", "+", "self", ".", "opt", ".", "run_name", ")", ")", "\n", "self", ".", "std_logger", "=", "util", ".", "get_std_logger", "(", "'results'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "result_path", ",", "'stdout.log'", ")", ")", "\n", "self", ".", "Cvisualizer", "=", "CaptionVisualizer", "(", "os", ".", "path", ".", "join", "(", "self", ".", "result_path", ",", "\"{}_cap.html\"", ".", "format", "(", "self", ".", "opt", ".", "run_name", ")", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "exp_dir", ",", "\"Utils/css/caption.css\"", ")", ")", "\n", "\n", "self", ".", "init_files_dirs", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.epoch_logging": [[140, 143], ["info.items", "logger.scalar_summary"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.scalar_summary"], ["# Auto-eval scorers", "\n", "self", ".", "scorers", "=", "get_scorers", "(", "self", ".", "opt", ".", "cached_tokens", ")", "\n", "\n", "self", ".", "get_data_loaders", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.round_logging": [[145, 148], ["info.items", "logger.scalar_summary"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.scalar_summary"], ["self", ".", "captioner", "=", "load_model", "(", "self", ".", "opt", ".", "cap_path", ",", "AttentionCaptioner", ")", "\n", "\n", "self", ".", "c_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.distr_logging": [[150, 153], ["info.items", "logger.histo_summary"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.histo_summary"], ["'mod_name'", ":", "'cap'", "}", "\n", "]", ")", "\n", "\n", "if", "self", ".", "opt", ".", "resume", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.parameter_logging": [[155, 163], ["model.named_parameters", "tag.replace.replace", "logger.histo_summary", "util.to_np", "logger.histo_summary", "util.to_np"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.histo_summary", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.histo_summary", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np"], ["\n", "", "", "@", "abstractmethod", "\n", "def", "loop_chunk", "(", "self", ",", "repochs", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.step_logging": [[165, 171], ["info.items", "logger.histo_summary", "logger.scalar_summary", "util.to_np"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.histo_summary", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.scalar_summary", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np"], ["def", "load_previous_chunk_best_models", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.log_avg_grads": [[173, 179], ["model.named_parameters", "logger.scalar_summary", "logger.scalar_summary", "value.grad.numel", "tag.replace", "util.to_np", "util.to_np", "torch.norm", "torch.norm", "torch.norm", "torch.std", "torch.std", "torch.std"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.scalar_summary", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.tensorboardlogger.TensorboardLogger.scalar_summary", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.to_np"], ["\n", "", "def", "init_files_dirs", "(", "self", ")", ":", "\n", "        ", "base", "=", "self", ".", "result_path", "\n", "self", ".", "lifelong_data_files", "=", "self", ".", "opt", ".", "train_files", ".", "split", "(", "','", ")", "\n", "self", ".", "chunks", "=", "len", "(", "self", ".", "lifelong_data_files", ")", "\n", "\n", "self", ".", "cap_checkpoint_path", ",", "self", ".", "collection_path", ",", "self", ".", "dm_checkpoint_path"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.qgen_getprobs_vqa": [[181, 191], ["model", "mask.long", "mask_inv.long", "torch.ones", "torch.ones", "torch.ones", "mask.size"], "function", ["None"], ["\n", "for", "d", "in", "[", "self", ".", "cap_checkpoint_path", ",", "self", ".", "collection_path", ",", "self", ".", "dm_checkpoint_path", "]", ":", "\n", "            ", "util", ".", "create_folder", "(", "d", ")", "\n", "\n", "", "self", ".", "collected_data_paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "collection_path", ",", "'CollectedDataRound{}.p'", ".", "format", "(", "x", "+", "1", ")", ")", "\n", "for", "x", "in", "range", "(", "self", ".", "chunks", ")", "]", "\n", "self", ".", "caption_data_files", "=", "[", "self", ".", "opt", ".", "warmup_file", "]", "\n", "self", ".", "caption_data_files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "self", ".", "collection_path", ",", "'AccumDataRound{}.p'", ".", "format", "(", "x", "+", "1", ")", ")", "\n", "for", "x", "in", "range", "(", "self", ".", "chunks", ")", "]", ")", "\n", "self", ".", "chunks", "=", "len", "(", "self", ".", "lifelong_data_files", ")", "\n", "self", ".", "caption_model_files", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "cap_checkpoint_path", ",", "'chunk{}_best.pth'", ".", "format", "(", "x", "+", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.query_vqa": [[192, 207], ["model", "torch.max", "torch.max", "torch.max", "mask.long", "mask_inv.long", "torch.ones", "torch.ones", "torch.ones", "mask.size"], "function", ["None"], ["for", "x", "in", "range", "(", "self", ".", "chunks", ")", "]", "\n", "self", ".", "decision_maker_model_files", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "dm_checkpoint_path", ",", "'chunk{}_best.pth'", ".", "format", "(", "x", "+", "1", ")", ")", "\n", "for", "x", "in", "range", "(", "self", ".", "chunks", ")", "]", "\n", "\n", "", "def", "get_data_loaders", "(", "self", ")", ":", "\n", "\n", "        ", "val_data", "=", "CapDataset", "(", "self", ".", "opt", ",", "self", ".", "opt", ".", "val_file", ")", "\n", "self", ".", "val_loader", "=", "DataLoader", "(", "val_data", ",", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "num_workers", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "\n", "eval_dataset", "=", "EvalDataset", "(", "self", ".", "opt", ",", "self", ".", "opt", ".", "eval_file", ",", "split", "=", "\"val\"", ")", "\n", "self", ".", "eval_loader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "num_workers", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "c_i2w", ",", "self", ".", "p_i2w", ",", "self", ".", "q_i2w", ",", "self", ".", "a_i2w", "=", "val_data", ".", "c_i2w", ",", "val_data", ".", "p_i2w", ",", "val_data", ".", "q_i2w", ",", "val_data", ".", "a_i2w", "\n", "\n", "self", ".", "opt", ".", "c_vocab_size", ",", "self", ".", "opt", ".", "pos_vocab_size", ",", "self", ".", "opt", ".", "q_vocab_size", ",", "self", ".", "opt", ".", "a_vocab_size", "=", "val_data", ".", "c_vocab_size", ",", "val_data", ".", "pos_vocab_size", ",", "val_data", ".", "q_vocab_size", ",", "val_data", ".", "a_vocab_size", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.qgen_communicate_vqa_topk": [[208, 230], ["util.qgen_getprobs_vqa", "torch.topk", "torch.topk", "torch.topk", "torch.gather", "torch.gather", "torch.gather", "torch.log", "torch.log", "torch.log", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "torch.sum().float().sum", "answer.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "output_top1.squeeze", "answer.unsqueeze", "answer.unsqueeze", "answer.unsqueeze", "answer.unsqueeze"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.qgen_getprobs_vqa"], ["\n", "self", ".", "opt", ".", "special_symbols", ",", "self", ".", "special_symbols", "=", "val_data", ".", "special_symbols", ",", "val_data", ".", "special_symbols", "\n", "\n", "self", ".", "std_logger", ".", "info", "(", "\"Size of caption vocab: {} \\n Size of pos vocab: {} \\nMax length of captions: {}\"", "\n", ".", "format", "(", "self", ".", "opt", ".", "c_vocab_size", ",", "self", ".", "opt", ".", "pos_vocab_size", ",", "val_data", ".", "max_c_len", ")", ")", "\n", "\n", "", "def", "update_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "update_lr", ":", "\n", "            ", "if", "epoch", ">", "self", ".", "opt", ".", "learning_rate_decay_start", ":", "\n", "                ", "new_lr", "=", "util", ".", "update_lr", "(", "epoch", ",", "self", ".", "opt", ".", "c_lr", ",", "self", ".", "opt", ".", "learning_rate_decay_start", ",", "self", ".", "opt", ".", "learning_rate_decay_every", ",", "self", ".", "opt", ".", "learning_rate_decay_rate", ")", "\n", "util", ".", "set_lr", "(", "self", ".", "c_optimizer", ",", "new_lr", ")", "\n", "self", ".", "std_logger", ".", "info", "(", "\"Setting lr to {}\"", ".", "format", "(", "new_lr", ")", ")", "\n", "\n", "", "", "", "def", "update_ss", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "c_scheduled_sampling", "and", "epoch", ">", "self", ".", "opt", ".", "c_scheduled_sampling_start", ":", "\n", "            ", "self", ".", "captioner", ".", "ss_prob", "=", "util", ".", "update_scheduled_sampling", "(", "epoch", ",", "self", ".", "opt", ".", "c_scheduled_sampling_start", ",", "\n", "self", ".", "opt", ".", "c_scheduled_sampling_increase_every", ",", "\n", "self", ".", "opt", ".", "c_scheduled_sampling_increase_prob", ",", "\n", "self", ".", "opt", ".", "c_scheduled_sampling_max_prob", ")", "\n", "self", ".", "std_logger", ".", "info", "(", "\"Setting word scheduled sampling to {}\"", ".", "format", "(", "self", ".", "captioner", ".", "ss_prob", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "p_scheduled_sampling", "and", "epoch", ">", "self", ".", "opt", ".", "p_scheduled_sampling_start", ":", "\n", "            ", "self", ".", "captioner", ".", "decoder", ".", "pos_ss_prob", "=", "util", ".", "update_scheduled_sampling", "(", "epoch", ",", "self", ".", "opt", ".", "p_scheduled_sampling_start", ",", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.init_state": [[232, 237], ["vec_ones[].clone", "hid_zeros[].clone"], "function", ["None"], ["self", ".", "opt", ".", "p_scheduled_sampling_increase_prob", ",", "\n", "self", ".", "opt", ".", "p_scheduled_sampling_max_prob", ",", "\n", "self", ".", "opt", ".", "p_scheduled_sampling_initial_value", ")", "\n", "self", ".", "std_logger", ".", "info", "(", "\"Setting pos scheduled sampling to {}\"", ".", "format", "(", "self", ".", "captioner", ".", "decoder", ".", "pos_ss_prob", ")", ")", "\n", "\n", "", "", "def", "pad_caption", "(", "self", ",", "caption", ",", "cap_len", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.init_vars": [[238, 246], ["to_var", "to_var", "to_var", "to_var", "to_var", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["# replace 0's beyond caption_length in captions with pad symbol int(c_vocab_size)", "\n", "        ", "padding", "=", "self", ".", "range_matrix", "[", ":", "caption", ".", "size", "(", "0", ")", "]", ">=", "cap_len", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "opt", ".", "c_max_sentence_len", "+", "1", ")", "\n", "caption", "=", "caption", "+", "padding", ".", "long", "(", ")", "*", "self", ".", "opt", ".", "c_vocab_size", "\n", "return", "caption", "\n", "\n", "", "def", "pad_question", "(", "self", ",", "question", ",", "que_mask", ")", ":", "\n", "# replace 0's beyond question_length in question with pad symbol int(q_vocab_size)", "\n", "        ", "return", "question", "*", "que_mask", ".", "long", "(", ")", "+", "(", "self", ".", "opt", ".", "q_vocab_size", "*", "self", ".", "ones_matrix", "[", ":", "question", ".", "size", "(", "0", ")", "]", ")", "*", "(", "que_mask", "==", "0", ")", ".", "long", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.init_entropy": [[247, 255], ["util.Bunch"], "function", ["None"], ["\n", "", "def", "reset_captioner", "(", "self", ",", "round", "=", "None", ")", ":", "\n", "        ", "if", "round", "is", "None", ":", "\n", "            ", "print", "(", "\"Resetting captioner to random weights.\"", ")", "\n", "self", ".", "captioner", ".", "apply", "(", "util", ".", "weights_init", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Loading captioner from {}.\"", ".", "format", "(", "self", ".", "caption_model_files", "[", "round", "]", ")", ")", "\n", "save_state", "=", "torch", ".", "load", "(", "self", ".", "caption_model_files", "[", "round", "]", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "captioner", ".", "load_state_dict", "(", "save_state", "[", "'state_dict'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.update_entropy": [[256, 284], ["global_unfinished.float.float", "q_mask.float.float", "decision.float", "torch.sum", "torch.sum", "torch.sum", "q_mask.float.sum", "global_unfinished.float.sum", "unfinished_and_ask.sum", "ask_worthy.float"], "function", ["None"], ["\n", "", "", "def", "get_next_round_data", "(", "self", ",", "train_file", ")", ":", "\n", "        ", "print", "(", "\"Loaded training data from {}.\"", ".", "format", "(", "train_file", ")", ")", "\n", "self", ".", "data_collector", "=", "DataCollector", "(", "self", ".", "opt", ",", "train_file", ")", "\n", "train_data", "=", "CapDataset", "(", "self", ".", "opt", ",", "train_file", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "num_workers", "=", "1", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "def", "get_caption_train_data", "(", "self", ",", "train_file", ")", ":", "\n", "        ", "print", "(", "\"Loaded training data from {}.\"", ".", "format", "(", "train_file", ")", ")", "\n", "train_data", "=", "LifelongDataset", "(", "self", ".", "opt", ",", "train_file", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "num_workers", "=", "1", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "def", "loop_lifelong", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Lifelong training\"", ")", "\n", "\n", "for", "chunk", "in", "range", "(", "self", ".", "chunk", ",", "self", ".", "chunks", ")", ":", "\n", "            ", "self", ".", "chunk", "=", "chunk", "\n", "\n", "self", ".", "best_d_score", "=", "float", "(", "'-inf'", ")", "\n", "self", ".", "best_c_score", "=", "float", "(", "'-inf'", ")", "\n", "\n", "# Load the unlabelled images for this chunk", "\n", "self", ".", "get_next_round_data", "(", "self", ".", "lifelong_data_files", "[", "self", ".", "chunk", "]", ")", "\n", "\n", "# Put models into train or eval based on config", "\n", "if", "self", ".", "opt", ".", "cap_eval", ":", "\n", "                ", "self", ".", "captioner", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "captioner", ".", "train", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.update_entropy_": [[285, 314], ["masked_prob.clone().detach.clone().detach", "cap_mask.float.float", "will_ask.float.float", "q_mask.float.float", "torch.log", "torch.log", "torch.log", "will_ask.float.size", "torch.topk", "torch.topk", "torch.topk", "masked_prob.clone().detach.clone", "cap_mask.float.sum", "will_ask.float.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["\n", "# Loop over one chunk of data and collect captions", "\n", "", "self", ".", "loop_chunk", "(", "self", ".", "opt", ".", "epochs_per_chunk", ")", "\n", "\n", "# Save collected captions", "\n", "self", ".", "data_collector", ".", "save_collected_data", "(", "self", ".", "collected_data_paths", "[", "chunk", "]", ",", "self", ".", "std_logger", ")", "\n", "\n", "# Logging", "\n", "stats", "=", "self", ".", "data_collector", ".", "get_gather_stats", "(", ")", "\n", "util", ".", "round_logging", "(", "self", ".", "logger", ",", "stats", ",", "self", ".", "chunk", "+", "1", ")", "\n", "\n", "# Accumulate caption dataset", "\n", "accum_train_files", "(", "round", "=", "self", ".", "chunk", ",", "newfile", "=", "self", ".", "collected_data_paths", "[", "chunk", "]", ",", "oldfile", "=", "self", ".", "caption_data_files", "[", "chunk", "]", ",", "outfile", "=", "self", ".", "caption_data_files", "[", "chunk", "+", "1", "]", ")", "\n", "\n", "# Reset captioner weights", "\n", "if", "self", ".", "opt", ".", "reinit_cap_weights", ":", "\n", "                ", "self", ".", "reset_captioner", "(", "round", "=", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "reset_captioner", "(", "round", "=", "self", ".", "chunk", "-", "1", ")", "\n", "\n", "# Train captioner on accumulated data", "\n", "", "self", ".", "get_caption_train_data", "(", "self", ".", "caption_data_files", "[", "self", ".", "chunk", "+", "1", "]", ")", "\n", "self", ".", "train_captioner", "(", ")", "\n", "\n", "# Load best captioner and decision maker models for next chunk", "\n", "self", ".", "load_previous_chunk_best_models", "(", ")", "\n", "\n", "self", ".", "save_checkpoint", "(", "chunk", ")", "\n", "\n", "", "", "def", "train_captioner", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.safe_divide": [[315, 323], ["util.Bunch"], "function", ["None"], ["\n", "        ", "self", ".", "captioner", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "opt", ".", "cap_epochs", ")", ":", "\n", "            ", "self", ".", "cap_epoch", "=", "epoch", "\n", "\n", "self", ".", "update_lr", "(", "epoch", ")", "\n", "self", ".", "update_ss", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.prepare_entropies": [[324, 333], ["None"], "function", ["None"], ["print_loss", ",", "tic", "=", "0", ",", "time", "(", ")", "\n", "\n", "print", "(", "\"Training captioner\"", ")", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "                ", "image", ",", "source", ",", "target", ",", "caption_len", ",", "pos", ",", "weight", "=", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "sample", "]", "\n", "\n", "# Forward pass", "\n", "self", ".", "c_optimizer", ".", "zero_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.prepare_reward_stats": [[334, 340], ["torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std"], "function", ["None"], ["\n", "r", "=", "self", ".", "captioner", "(", "image", ",", "source", ",", "pos", ")", "\n", "logits", ",", "pos_logits", "=", "r", ".", "logits", ",", "r", ".", "pos_logits", "\n", "\n", "if", "self", ".", "opt", ".", "weight_captions", ":", "\n", "                    ", "word_loss", "=", "masked_CE", "(", "logits", ",", "target", ",", "caption_len", ",", "weight", ".", "float", "(", ")", ")", "\n", "pos_loss", "=", "masked_CE", "(", "pos_logits", ",", "pos", ",", "caption_len", "-", "1", ",", "weight", ".", "float", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.prepare_step_log": [[341, 347], ["info.update", "info.update", "util.prepare_entropies", "util.prepare_reward_stats"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.prepare_entropies", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.prepare_reward_stats"], ["", "else", ":", "\n", "                    ", "word_loss", "=", "masked_CE", "(", "logits", ",", "target", ",", "caption_len", ")", "\n", "pos_loss", "=", "masked_CE", "(", "pos_logits", ",", "pos", ",", "caption_len", "-", "1", ")", "\n", "\n", "", "total_loss", "=", "word_loss", "+", "self", ".", "opt", ".", "pos_alpha", "*", "pos_loss", "\n", "\n", "# Backwards pass", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.prepare_evalstep_log": [[348, 357], ["None"], "function", ["None"], ["total_loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "grad_clip", ":", "\n", "                    ", "util", ".", "gradient_noise_and_clip", "(", "self", ".", "captioner", ".", "parameters", "(", ")", ",", "self", ".", "opt", ".", "max_clip", ")", "\n", "\n", "", "self", ".", "c_optimizer", ".", "step", "(", ")", "\n", "\n", "# Logging", "\n", "print_loss", "+=", "total_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2str": [[358, 368], ["words.append", "idx2str_dictionary[].replace().replace", "len", "words.append", "words.append", "idx2str_dictionary[].replace"], "function", ["None"], ["if", "self", ".", "cap_steps", "%", "self", ".", "opt", ".", "print_every", "==", "0", ":", "\n", "                    ", "info", "=", "{", "\n", "'cap/loss'", ":", "print_loss", "/", "self", ".", "opt", ".", "print_every", ",", "\n", "'cap/time'", ":", "(", "time", "(", ")", "-", "tic", ")", "/", "self", ".", "opt", ".", "print_every", "# total time so far for this epoch", "\n", "}", "\n", "util", ".", "step_logging", "(", "self", ".", "logger", ",", "info", ",", "self", ".", "cap_steps", ")", "\n", "util", ".", "log_avg_grads", "(", "self", ".", "logger", ",", "self", ".", "captioner", ",", "self", ".", "cap_steps", ",", "name", "=", "\"cap/\"", ")", "\n", "steps_per_epoch", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "std_logger", ".", "info", "(", "\n", "\"Chunk {} Epoch {}, {}/{}| Loss: {} | Time per batch: {} |\"", "\n", "\" Epoch remaining time (HH:MM:SS) {} | Elapsed time {}\"", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Utils.util.idx2pos": [[370, 380], ["len", "pos.append", "pos.append", "pos.append", "len"], "function", ["None"], ["util", ".", "time_remaining", "(", "steps_per_epoch", "-", "i", ",", "info", "[", "'cap/time'", "]", ")", ",", "\n", "util", ".", "time_elapsed", "(", "self", ".", "start_time", ",", "time", "(", ")", ")", ")", ")", "\n", "\n", "print_loss", ",", "tic", "=", "0", ",", "time", "(", ")", "\n", "\n", "", "self", ".", "cap_steps", "+=", "1", "\n", "\n", "", "model_score", "=", "self", ".", "evaluate_captioner", "(", ")", "\n", "self", ".", "save_captioner", "(", "epoch", ",", "model_score", ")", "\n", "\n", "", "", "def", "save_captioner", "(", "self", ",", "epoch", ",", "model_score", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_imgs.main": [[54, 97], ["urllib2.urlopen", "urllib2.urlopen.read", "net.load_state_dict", "resnet.resnet_utils.myResnet", "resnet.resnet_utils.myResnet.cuda", "resnet.resnet_utils.myResnet.eval", "json.load", "len", "random.seed", "enumerate", "print", "getattr", "torch.load", "open", "os.path.isdir", "os.mkdir", "skimage.io.imread", "torch.from_numpy().cuda", "preprocess", "my_resnet.data.cpu().float().numpy", "numpy.swapaxes", "numpy.save", "os.path.join", "os.path.join", "len", "numpy.concatenate", "np.concatenate.astype", "torch.no_grad", "resnet.resnet_utils.myResnet.", "print", "torch.from_numpy", "my_resnet.data.cpu().float", "os.path.join", "np.concatenate.transpose", "str", "my_resnet.data.cpu"], "function", ["None"], ["def", "main", "(", "params", ")", ":", "\n", "# download model checkpoint file", "\n", "  ", "response", "=", "urllib2", ".", "urlopen", "(", "'http://www.example.com/'", ")", "\n", "html", "=", "response", ".", "read", "(", ")", "\n", "\n", "net", "=", "getattr", "(", "resnet", ",", "params", "[", "'model'", "]", ")", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "params", "[", "'model_root'", "]", ",", "params", "[", "'model'", "]", "+", "'.pth'", ")", ")", ")", "\n", "my_resnet", "=", "myResnet", "(", "net", ")", "\n", "my_resnet", ".", "cuda", "(", ")", "\n", "my_resnet", ".", "eval", "(", ")", "\n", "\n", "imgs", "=", "json", ".", "load", "(", "open", "(", "params", "[", "'input_json'", "]", ",", "'r'", ")", ")", "\n", "imgs", "=", "imgs", "[", "'images'", "]", "\n", "N", "=", "len", "(", "imgs", ")", "\n", "\n", "seed", "(", "123", ")", "# make reproducible", "\n", "\n", "dir_att", "=", "params", "[", "'output_dir'", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_att", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dir_att", ")", "\n", "\n", "", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "# load the image", "\n", "    ", "I", "=", "skimage", ".", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "params", "[", "'images_root'", "]", ",", "img", "[", "'filepath'", "]", ",", "img", "[", "'filename'", "]", ")", ")", "\n", "# handle grayscale input images", "\n", "if", "len", "(", "I", ".", "shape", ")", "==", "2", ":", "\n", "      ", "I", "=", "I", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "I", "=", "np", ".", "concatenate", "(", "(", "I", ",", "I", ",", "I", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "I", "=", "I", ".", "astype", "(", "'float32'", ")", "/", "255.0", "\n", "I", "=", "torch", ".", "from_numpy", "(", "I", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "I", "=", "preprocess", "(", "I", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "tmp_att", "=", "my_resnet", "(", "I", ",", "params", "[", "'att_size'", "]", ")", "\n", "# write to pkl", "\n", "# np.savez_compressed(os.path.join(dir_att, str(img['cocoid'])), feat=tmp_att.annotation.cpu().float().numpy())", "\n", "", "feat", "=", "tmp_att", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "feat", "=", "np", ".", "swapaxes", "(", "feat", ",", "0", ",", "2", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dir_att", ",", "str", "(", "img", "[", "'cocoid'", "]", ")", ")", "+", "'.npy'", ",", "feat", ")", "\n", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "      ", "print", "(", "'processing %d/%d (%.2f%% done)'", "%", "(", "i", ",", "N", ",", "i", "*", "100.0", "/", "N", ")", ")", "\n", "", "", "print", "(", "'wrote '", ",", "params", "[", "'output_dir'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_llsplits.remove_datasamples": [[14, 38], ["enumerate", "img2idx.items", "print", "print", "img2idx[].append", "random.shuffle", "range", "len", "new_data.append", "len", "len", "len", "len"], "function", ["None"], ["def", "remove_datasamples", "(", "data", ",", "split", ",", "num_keep", "=", "2", ")", ":", "\n", "\n", "    ", "img2idx", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "imgId", "=", "item", "[", "'image_id'", "]", "\n", "if", "imgId", "in", "img2idx", ":", "\n", "            ", "img2idx", "[", "imgId", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "img2idx", "[", "imgId", "]", "=", "[", "i", "]", "\n", "\n", "# For lifelong splits, keep only num_keep captions for each image", "\n", "", "", "if", "split", ">", "0", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "for", "img", ",", "idxs", "in", "img2idx", ".", "items", "(", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "idxs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "idxs", ")", ")", ":", "\n", "                ", "if", "i", ">", "num_keep", "-", "1", ":", "\n", "                    ", "break", "\n", "", "new_data", ".", "append", "(", "data", "[", "idxs", "[", "i", "]", "]", ")", "# keep only num_keep random samples", "\n", "", "", "print", "(", "\"There are {} images, {} captions in split {}.\"", ".", "format", "(", "len", "(", "img2idx", ")", ",", "len", "(", "new_data", ")", ",", "split", ")", ")", "\n", "return", "new_data", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"There are {} images, {} captions in split {} (warmup).\"", ".", "format", "(", "len", "(", "img2idx", ")", ",", "len", "(", "data", ")", ",", "split", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_llsplits.split_full_data": [[40, 61], ["pickle.load", "int", "enumerate", "open", "len", "splits.append", "preprocess_llsplits.remove_datasamples", "pickle.dump", "len", "len", "open"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_llsplits.remove_datasamples"], ["", "", "def", "split_full_data", "(", "params", ")", ":", "\n", "    ", "dset", "=", "pickle", ".", "load", "(", "open", "(", "params", ".", "data_file", ",", "'rb'", ")", ")", "\n", "data", "=", "dset", "[", "'data'", "]", "\n", "\n", "first_idx", "=", "int", "(", "len", "(", "data", ")", "*", "(", "params", ".", "warmup", "/", "100.0", ")", ")", "\n", "inc", "=", "(", "len", "(", "data", ")", "-", "first_idx", ")", "/", "(", "params", ".", "num_splits", "-", "1", ")", "\n", "\n", "# warmup split", "\n", "first_split", "=", "data", "[", "0", ":", "first_idx", "]", "\n", "# lifelong splits", "\n", "splits", "=", "[", "first_split", "]", "\n", "i", "=", "first_idx", "\n", "while", "i", "+", "inc", "<", "len", "(", "data", ")", ":", "\n", "        ", "splits", ".", "append", "(", "data", "[", "i", ":", "i", "+", "inc", "]", ")", "\n", "i", "+=", "inc", "\n", "\n", "# save splits", "\n", "", "for", "i", ",", "split", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "split", "=", "remove_datasamples", "(", "split", ",", "i", ",", "num_keep", "=", "params", ".", "num_caps", ")", "\n", "dset", "[", "'data'", "]", "=", "split", "\n", "pickle", ".", "dump", "(", "dset", ",", "open", "(", "params", ".", "output_file", "+", "\"_{}.p\"", ".", "format", "(", "i", ")", ",", "'wb'", ")", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.precook": [[13, 29], ["s.split", "collections.defaultdict", "xrange", "xrange", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "  ", "\"\"\"\n  Takes a string as input and returns an object that can be given to\n  either cook_refs or cook_test. This is optional: cook_refs and cook_test\n  can take string arguments as well.\n  :param s: string : sentence to be converted into ngrams\n  :param n: int    : number of ngrams for which representation is calculated\n  :return: term frequency vector for occuring ngrams\n  \"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "xrange", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "    ", "for", "i", "in", "xrange", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "      ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.cook_refs": [[30, 39], ["preprocess_cider.precook"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.precook"], ["", "def", "cook_refs", "(", "refs", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.\n    :param refs: list of string : reference sentences for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (list of dict)\n    '''", "\n", "return", "[", "precook", "(", "ref", ",", "n", ")", "for", "ref", "in", "refs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.create_crefs": [[40, 46], ["tqdm.tqdm", "crefs.append", "preprocess_cider.cook_refs"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.cook_refs"], ["", "def", "create_crefs", "(", "refs", ")", ":", "\n", "  ", "crefs", "=", "[", "]", "\n", "for", "ref", "in", "tqdm", "(", "refs", ")", ":", "\n", "# ref is a list of 5 captions", "\n", "    ", "crefs", ".", "append", "(", "cook_refs", "(", "ref", ")", ")", "\n", "", "return", "crefs", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.compute_doc_freq": [[47, 61], ["collections.defaultdict", "tqdm.tqdm", "set", "ref.iteritems"], "function", ["None"], ["", "def", "compute_doc_freq", "(", "crefs", ")", ":", "\n", "  ", "'''\n  Compute term frequency for reference annotation.\n  This will be used to compute idf (inverse document frequency later)\n  The term frequency is stored in the object\n  :return: None\n  '''", "\n", "document_frequency", "=", "defaultdict", "(", "float", ")", "\n", "for", "refs", "in", "tqdm", "(", "crefs", ")", ":", "\n", "# refs, k ref captions of one image", "\n", "    ", "for", "ngram", "in", "set", "(", "[", "ngram", "for", "ref", "in", "refs", "for", "(", "ngram", ",", "count", ")", "in", "ref", ".", "iteritems", "(", ")", "]", ")", ":", "\n", "      ", "document_frequency", "[", "ngram", "]", "+=", "1", "\n", "# maxcounts[ngram] = max(maxcounts.get(ngram,0), count)", "\n", "", "", "return", "document_frequency", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.build_dict": [[62, 89], ["set", "tqdm.tqdm", "preprocess_cider.compute_doc_freq", "preprocess_cider.create_crefs", "len", "set.add", "set.add", "refs_idxs.append", "words.strip.strip", "refs.append"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.compute_doc_freq", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.create_crefs"], ["", "def", "build_dict", "(", "data", ",", "special_symbols", ",", "c_i2w", ")", ":", "\n", "\n", "    ", "refs_idxs", "=", "[", "]", "\n", "finished_img_ids", "=", "set", "(", ")", "# prevent redundancy", "\n", "\n", "for", "dat", "in", "tqdm", "(", "data", ")", ":", "\n", "\n", "        ", "id", "=", "dat", "[", "'image_id'", "]", "\n", "\n", "if", "id", "in", "finished_img_ids", ":", "# prevent 5x redundancy", "\n", "            ", "finished_img_ids", ".", "add", "(", "id", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "finished_img_ids", ".", "add", "(", "id", ")", "\n", "refs", "=", "[", "]", "\n", "for", "caption", "in", "dat", "[", "'captions'", "]", ":", "\n", "                ", "idxs", "=", "caption", "[", "'caption'", "]", "\n", "words", "=", "' '", ".", "join", "(", "c_i2w", "[", "x", "]", "for", "x", "in", "idxs", ")", "\n", "words", "+=", "' eos'", "\n", "words", "=", "words", ".", "strip", "(", ")", "\n", "refs", ".", "append", "(", "words", ")", "\n", "# refs.append(' '.join(str(x) for x in idxs) + ' ' + str(special_symbols['eos']))", "\n", "\n", "", "refs_idxs", ".", "append", "(", "refs", ")", "\n", "\n", "", "", "ngram_idxs", "=", "compute_doc_freq", "(", "create_crefs", "(", "refs_idxs", ")", ")", "\n", "return", "ngram_idxs", ",", "len", "(", "finished_img_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.main": [[90, 98], ["pickle.load", "preprocess_cider.build_dict", "six.moves.cPickle.dump", "open", "open"], "function", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.preprocess.preprocess_cider.build_dict"], ["", "def", "main", "(", "params", ")", ":", "\n", "  ", "cap_file", "=", "params", "[", "'data_file'", "]", "\n", "f", "=", "pickle", ".", "load", "(", "open", "(", "cap_file", ",", "\"rb\"", ")", ")", "\n", "data", ",", "_c_dicts", ",", "special_symbols", "=", "f", "[", "\"data\"", "]", ",", "f", "[", "\"c_dicts\"", "]", ",", "f", "[", "\"special_symbols\"", "]", "\n", "\n", "ngram_idxs", ",", "ref_len", "=", "build_dict", "(", "data", ",", "special_symbols", ",", "_c_dicts", "[", "0", "]", ")", "\n", "\n", "cPickle", ".", "dump", "(", "{", "'document_frequency'", ":", "ngram_idxs", ",", "'ref_len'", ":", "ref_len", "}", ",", "open", "(", "params", "[", "'output_file'", "]", "+", "'-idxs.p'", ",", "'w'", ")", ",", "protocol", "=", "cPickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet.ResNet.__init__": [[14, 20], ["super().__init__", "torch.MaxPool2d", "torch.MaxPool2d", "range", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "for", "i", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "getattr", "(", "self", ",", "'layer%d'", "%", "i", ")", "[", "0", "]", ".", "conv1", ".", "stride", "=", "(", "2", ",", "2", ")", "\n", "getattr", "(", "self", ",", "'layer%d'", "%", "i", ")", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet.resnet18": [[21, 30], ["resnet.ResNet", "ResNet.load_state_dict", "model_zoo.load_url"], "function", ["None"], ["", "", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet.resnet34": [[32, 41], ["resnet.ResNet", "ResNet.load_state_dict", "model_zoo.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet.resnet50": [[43, 52], ["resnet.ResNet", "ResNet.load_state_dict", "model_zoo.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet.resnet101": [[54, 63], ["resnet.ResNet", "ResNet.load_state_dict", "model_zoo.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet.resnet152": [[65, 74], ["resnet.ResNet", "ResNet.load_state_dict", "model_zoo.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet_utils.myResnet.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "        ", "super", "(", "myResnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.resnet.resnet_utils.myResnet.forward": [[18, 35], ["img.unsqueeze", "resnet_utils.myResnet.resnet.conv1", "resnet_utils.myResnet.resnet.bn1", "resnet_utils.myResnet.resnet.relu", "resnet_utils.myResnet.resnet.maxpool", "resnet_utils.myResnet.resnet.layer1", "resnet_utils.myResnet.resnet.layer2", "resnet_utils.myResnet.resnet.layer3", "resnet_utils.myResnet.resnet.layer4", "torch.adaptive_avg_pool2d().squeeze().permute", "torch.adaptive_avg_pool2d().squeeze().permute", "torch.adaptive_avg_pool2d().squeeze().permute", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "att_size", "=", "14", ")", ":", "\n", "        ", "x", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "resnet", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "layer4", "(", "x", ")", "\n", "\n", "# fc = x.mean(3).mean(2).squeeze()", "\n", "att", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "[", "att_size", ",", "att_size", "]", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "return", "att", "", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.Attention.__init__": [[11, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "att_hidden_size", "=", "opt", ".", "att_hidden_size", "\n", "self", ".", "rnn_hidden_size", "=", "opt", ".", "rnn_size", "\n", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "att_hidden_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "att_hidden_size", ",", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "img_channels", ",", "self", ".", "img_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.Attention.forward": [[26, 45], ["attention_questioner.Attention.fc1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "attention_questioner.Attention.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "attention_questioner.Attention.fc3", "attention_questioner.Attention.permute().repeat", "a_cap.unsqueeze", "attention_questioner.Attention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_features", ",", "att_img_features", ",", "hidden", ",", "a_cap", ")", ":", "\n", "\n", "# self attention", "\n", "        ", "z", "=", "self", ".", "fc1", "(", "hidden", ")", "\n", "z", "=", "torch", ".", "tanh", "(", "att_img_features", "+", "z", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "repeat", "(", "1", ",", "self", ".", "img_area", ",", "1", ")", ")", "\n", "z", "=", "self", ".", "fc2", "(", "z", ")", "\n", "a", "=", "torch", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "\n", "self_features", "=", "(", "img_features", "*", "a", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# captioner attention", "\n", "cap_features", "=", "(", "img_features", "*", "a_cap", ".", "unsqueeze", "(", "2", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# concatenate self image feature and captioner's", "\n", "img_emb", "=", "torch", ".", "cat", "(", "(", "self_features", ",", "cap_features", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# some FC layers on image features", "\n", "img_emb", "=", "torch", ".", "relu", "(", "self", ".", "fc3", "(", "img_emb", ")", ")", "\n", "\n", "return", "img_emb", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.Decoder.__init__": [[49, 70], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "q_vocab_size", "=", "opt", ".", "q_vocab_size", "\n", "\n", "self", ".", "word_emb_size", "=", "opt", ".", "word_embedding_size", "\n", "self", ".", "pos_emb_size", "=", "opt", ".", "pos_emb_size", "\n", "self", ".", "cap_rnn_size", "=", "opt", ".", "cap_rnn_size", "\n", "\n", "self", ".", "rnn_size", "=", "opt", ".", "rnn_size", "\n", "self", ".", "rnn_layers", "=", "opt", ".", "rnn_layers", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "\n", "self", ".", "dropout_rate", "=", "opt", ".", "dropout", "\n", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "2", "*", "self", ".", "cap_rnn_size", "+", "self", ".", "word_emb_size", "+", "self", ".", "img_channels", ",", "self", ".", "rnn_size", ",", "self", ".", "rnn_layers", ",", "\n", "batch_first", "=", "True", ",", "dropout", "=", "self", ".", "dropout_rate", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_size", ",", "self", ".", "q_vocab_size", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.Decoder.forward": [[71, 80], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.Decoder.gru", "attention_questioner.Decoder.fc1", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "attention_questioner.Decoder.dropout", "hidden.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "img_emb", ",", "c_emb", ",", "q_emb", ")", ":", "\n", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "img_emb", ",", "c_emb", ",", "q_emb", ")", ",", "1", ")", "\n", "\n", "hidden", ",", "last_hidden", "=", "self", ".", "gru", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "hidden", ")", "\n", "\n", "logits", "=", "self", ".", "fc1", "(", "self", ".", "dropout", "(", "hidden", ".", "squeeze", "(", ")", ")", ")", "\n", "\n", "return", "logits", ",", "last_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.__init__": [[84, 141], ["torch.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "attention_questioner.Attention", "attention_questioner.Decoder", "torch.GRU", "torch.GRU", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "attention_questioner.QuestionGenerator.question_embedding.weight.data[].uniform_"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "QuestionGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "q_vocab_size", "=", "opt", ".", "q_vocab_size", "\n", "self", ".", "c_vocab_size", "=", "opt", ".", "c_vocab_size", "\n", "self", ".", "p_vocab_size", "=", "opt", ".", "p_vocab_size", "\n", "self", ".", "special_symbols", "=", "opt", ".", "special_symbols", "\n", "\n", "self", ".", "att_hidden_size", "=", "opt", ".", "att_hidden_size", "\n", "self", ".", "rnn_layers", "=", "opt", ".", "rnn_layers", "\n", "self", ".", "use_position_encoding", "=", "opt", ".", "use_position_encoding", "\n", "self", ".", "use_caption_hidden", "=", "opt", ".", "use_caption_hidden", "\n", "\n", "self", ".", "word_emb_size", "=", "opt", ".", "word_embedding_size", "\n", "self", ".", "pos_emb_size", "=", "opt", ".", "pos_emb_size", "\n", "self", ".", "rnn_size", "=", "opt", ".", "rnn_size", "\n", "self", ".", "cap_rnn_size", "=", "opt", ".", "cap_rnn_size", "\n", "self", ".", "cap_hidden_size", "=", "opt", ".", "cap_hidden_size", "\n", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "self", ".", "ss_prob", "=", "0.0", "\n", "self", ".", "dropout_rate", "=", "opt", ".", "dropout", "\n", "\n", "# dummy vectors", "\n", "self", ".", "one_vec", "=", "torch", ".", "ones", "(", "[", "3", "*", "opt", ".", "batch_size", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "# submodules", "\n", "self", ".", "attention", "=", "Attention", "(", "opt", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "opt", ")", "\n", "\n", "if", "self", ".", "use_position_encoding", ":", "\n", "            ", "input_size", "=", "2", "*", "self", ".", "cap_rnn_size", "\n", "", "else", ":", "\n", "            ", "input_size", "=", "self", ".", "cap_rnn_size", "\n", "\n", "", "self", ".", "caption_encoder", "=", "nn", ".", "GRU", "(", "input_size", ",", "self", ".", "cap_rnn_size", ",", "self", ".", "rnn_layers", ",", "batch_first", "=", "True", ",", "dropout", "=", "self", ".", "dropout_rate", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# embedding matrices", "\n", "self", ".", "question_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "q_vocab_size", "+", "1", ",", "self", ".", "word_emb_size", ",", "padding_idx", "=", "self", ".", "q_vocab_size", ")", "\n", "self", ".", "caption_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "c_vocab_size", "+", "1", ",", "self", ".", "cap_rnn_size", ",", "padding_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "p_vocab_size", "+", "1", ",", "self", ".", "pos_emb_size", ",", "padding_idx", "=", "self", ".", "p_vocab_size", ")", "\n", "self", ".", "context_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "cap_hidden_size", ",", "self", ".", "word_emb_size", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "img_channels", ",", "self", ".", "att_hidden_size", ")", "\n", "\n", "if", "self", ".", "use_caption_hidden", ":", "\n", "            ", "input_size", "=", "self", ".", "word_emb_size", "+", "self", ".", "pos_emb_size", "\n", "", "else", ":", "\n", "            ", "input_size", "=", "self", ".", "pos_emb_size", "\n", "\n", "", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "rnn_size", ")", "\n", "\n", "initrange", "=", "0.1", "\n", "self", ".", "question_embedding", ".", "weight", ".", "data", "[", ":", "-", "1", "]", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "# -1 to deal with pad index", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.forward": [[142, 197], ["attention_questioner.QuestionGenerator.caption_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "attention_questioner.QuestionGenerator.fc2().unsqueeze", "attention_questioner.QuestionGenerator.vectorize_img", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.size", "source.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.caption_embedding", "attention_questioner.QuestionGenerator.context_embedding", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.attention", "attention_questioner.QuestionGenerator.question_embedding", "attention_questioner.QuestionGenerator.decoder", "logits_list.append", "attention_questioner.QuestionGenerator.fc2", "torch.Tensor().uniform_().to", "torch.Tensor().uniform_().to", "torch.Tensor().uniform_().to", "torch.Tensor().uniform_().to", "attention_questioner.QuestionGenerator.fc1", "logits.unsqueeze", "attention_questioner.QuestionGenerator.caption_embedding", "sample_mask.sum().item", "sample_mask.nonzero().view", "source[].clone", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "source[].clone.index_copy_", "source[].clone.requires_grad_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.multinomial().view().index_select", "torch.multinomial().view().index_select", "torch.multinomial().view().index_select", "torch.multinomial().view().index_select", "sample_mask.sum", "sample_mask.nonzero", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img"], ["", "def", "forward", "(", "self", ",", "img_features", ",", "caption", ",", "pos", ",", "context", ",", "att_weights", ",", "source", ",", "q_idx_vec", ")", ":", "\n", "        ", "batch_size", ",", "seq_length", "=", "img_features", ".", "size", "(", "0", ")", ",", "source", ".", "size", "(", "1", ")", "\n", "\n", "# encode the caption", "\n", "if", "self", ".", "use_position_encoding", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "[", "self", ".", "caption_embedding", "(", "caption", ")", ",", "q_idx_vec", "]", ",", "dim", "=", "2", ")", "# q_idx is position encoding vector", "\n", "", "else", ":", "\n", "            ", "input", "=", "self", ".", "caption_embedding", "(", "caption", ")", "\n", "\n", "", "_", ",", "cap_emb", "=", "self", ".", "caption_encoder", "(", "input", ")", "\n", "cap_emb", "=", "torch", ".", "cat", "(", "[", "cap_emb", "[", "0", "]", ",", "cap_emb", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# initialize the first hidden state of the RNN decoder", "\n", "context_emb", "=", "torch", ".", "relu", "(", "self", ".", "context_embedding", "(", "context", ")", ")", "\n", "pos_emb", "=", "torch", ".", "relu", "(", "torch", ".", "matmul", "(", "pos", ",", "self", ".", "pos_embedding", ".", "weight", ")", ")", "\n", "\n", "if", "self", ".", "use_caption_hidden", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "[", "context_emb", ",", "pos_emb", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "input", "=", "pos_emb", "\n", "\n", "", "hidden", "=", "self", ".", "fc2", "(", "input", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# permute img dimensions and downsize", "\n", "img_features", "=", "self", ".", "vectorize_img", "(", "img_features", ")", "\n", "\n", "logits_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "seq_length", ")", ":", "\n", "\n", "# scheduled sampling", "\n", "            ", "if", "i", ">=", "1", "and", "self", ".", "ss_prob", ">", "0.0", ":", "\n", "                ", "sample_prob", "=", "torch", ".", "Tensor", "(", "batch_size", ")", ".", "uniform_", "(", "0", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "sample_mask", "=", "sample_prob", "<", "self", ".", "ss_prob", "\n", "if", "sample_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "previous_word", "=", "source", "[", ":", ",", "i", "]", "\n", "", "else", ":", "\n", "                    ", "sample_ind", "=", "sample_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "previous_word", "=", "source", "[", ":", ",", "i", "]", ".", "clone", "(", ")", "\n", "\n", "prob_prev", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "# fetch prev distribution: shape batchsize x vocab", "\n", "previous_word", ".", "index_copy_", "(", "0", ",", "sample_ind", ",", "torch", ".", "multinomial", "(", "prob_prev", ",", "1", ")", ".", "view", "(", "-", "1", ")", ".", "index_select", "(", "0", ",", "sample_ind", ")", ")", "\n", "previous_word", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "previous_word", "=", "source", "[", ":", ",", "i", "]", "\n", "\n", "# compute attended image feature and word embeddings", "\n", "", "img_emb", ",", "_", "=", "self", ".", "attention", "(", "img_features", ",", "self", ".", "fc1", "(", "img_features", ")", ",", "hidden", ",", "att_weights", ")", "\n", "q_emb", "=", "self", ".", "question_embedding", "(", "previous_word", ")", "\n", "\n", "logits", ",", "hidden", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "cap_emb", ",", "q_emb", ")", "\n", "\n", "logits_list", ".", "append", "(", "logits", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "logits_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.sample": [[198, 267], ["attention_questioner.QuestionGenerator.size", "attention_questioner.QuestionGenerator.caption_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.vectorize_img", "attention_questioner.QuestionGenerator.fc1", "range", "argparse.Namespace", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.caption_embedding", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "attention_questioner.QuestionGenerator.fc2().unsqueeze", "attention_questioner.QuestionGenerator.attention", "attention_questioner.QuestionGenerator.question_embedding().squeeze", "attention_questioner.QuestionGenerator.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.context_embedding", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "log_prob.gather.gather.gather", "global_unfinished.long", "lst.append", "attention_questioner.QuestionGenerator.caption_embedding", "attention_questioner.QuestionGenerator.fc2", "attention_questioner.QuestionGenerator.question_embedding", "log_prob.gather.gather.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "attention_questioner.QuestionGenerator.squeeze().unsqueeze", "attention.permute", "attention_questioner.QuestionGenerator.squeeze"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img"], ["", "def", "sample", "(", "self", ",", "img_features", ",", "caption", ",", "pos", ",", "context", ",", "att_weights", ",", "q_idx_vec", ",", "greedy", "=", "False", ",", "max_seq_len", "=", "15", ",", "temperature", "=", "1.0", ",", "hidden", "=", "None", ",", "previous_word", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "img_features", ".", "size", "(", "0", ")", "\n", "\n", "# encode the caption", "\n", "if", "self", ".", "use_position_encoding", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "[", "self", ".", "caption_embedding", "(", "caption", ")", ",", "q_idx_vec", "]", ",", "dim", "=", "2", ")", "# q_idx is position encoding vector", "\n", "", "else", ":", "\n", "            ", "input", "=", "self", ".", "caption_embedding", "(", "caption", ")", "\n", "\n", "", "_", ",", "cap_emb", "=", "self", ".", "caption_encoder", "(", "input", ")", "\n", "cap_emb", "=", "torch", ".", "cat", "(", "[", "cap_emb", "[", "0", "]", ",", "cap_emb", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# initialize the first hidden state of the RNN decoder", "\n", "if", "hidden", "is", "None", ":", "\n", "            ", "context_emb", "=", "torch", ".", "relu", "(", "self", ".", "context_embedding", "(", "context", ")", ")", "\n", "pos_emb", "=", "torch", ".", "relu", "(", "torch", ".", "matmul", "(", "pos", ",", "self", ".", "pos_embedding", ".", "weight", ")", ")", "\n", "\n", "if", "self", ".", "use_caption_hidden", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "[", "context_emb", ",", "pos_emb", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "input", "=", "pos_emb", "\n", "\n", "", "hidden", "=", "self", ".", "fc2", "(", "input", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "img_features", "=", "self", ".", "vectorize_img", "(", "img_features", ")", "\n", "att_img_features", "=", "self", ".", "fc1", "(", "img_features", ")", "\n", "\n", "question", ",", "log_probs", ",", "mask", ",", "hidden_arr", ",", "attention_arr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "previous_word", "is", "None", ":", "\n", "            ", "previous_word", "=", "self", ".", "one_vec", "[", ":", "batch_size", "]", "# beginning of sentence token is 1", "\n", "\n", "", "for", "i", "in", "range", "(", "max_seq_len", ")", ":", "\n", "\n", "# compute attended image feature and word embeddings", "\n", "            ", "img_emb", ",", "attention", "=", "self", ".", "attention", "(", "img_features", ",", "att_img_features", ",", "hidden", ",", "att_weights", ")", "\n", "q_emb", "=", "self", ".", "question_embedding", "(", "previous_word", ")", ".", "squeeze", "(", ")", "\n", "\n", "# roll out decoder", "\n", "logits", ",", "hidden", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "cap_emb", ",", "q_emb", ")", "\n", "\n", "log_prob", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "# sample: greedy or wrt some temperature", "\n", "if", "greedy", ":", "\n", "                ", "log_prob", ",", "word", "=", "torch", ".", "max", "(", "log_prob", ",", "dim", "=", "1", ")", "\n", "log_prob", ",", "word", "=", "log_prob", ".", "unsqueeze", "(", "1", ")", ",", "word", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "prob", "=", "torch", ".", "softmax", "(", "(", "1", "/", "temperature", ")", "*", "logits", ",", "dim", "=", "1", ")", "\n", "word", "=", "torch", ".", "multinomial", "(", "prob", ",", "1", ")", "\n", "log_prob", "=", "log_prob", ".", "gather", "(", "1", ",", "word", ")", "\n", "\n", "# check for end-of-sentence tokens", "\n", "", "unfinished", "=", "word", "!=", "self", ".", "special_symbols", "[", "'eos'", "]", "\n", "if", "i", "is", "0", ":", "\n", "                ", "global_unfinished", "=", "unfinished", "\n", "", "else", ":", "\n", "                ", "global_unfinished", "=", "global_unfinished", "*", "unfinished", "\n", "\n", "# set loop variables", "\n", "", "previous_word", "=", "word", "\n", "word", "=", "word", "*", "global_unfinished", ".", "long", "(", ")", "\n", "\n", "for", "lst", ",", "item", "in", "zip", "(", "[", "question", ",", "log_probs", ",", "mask", ",", "hidden_arr", ",", "attention_arr", "]", ",", "\n", "[", "word", ",", "log_prob", ",", "global_unfinished", ",", "hidden", ".", "squeeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "]", ")", ":", "\n", "                ", "lst", ".", "append", "(", "item", ")", "\n", "\n", "", "", "result", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "for", "x", "in", "[", "question", ",", "log_probs", ",", "mask", ",", "hidden_arr", ",", "attention_arr", "]", "]", "\n", "\n", "return", "Namespace", "(", "question", "=", "result", "[", "0", "]", ",", "log_prob", "=", "result", "[", "1", "]", ",", "mask", "=", "result", "[", "2", "]", ",", "hidden", "=", "result", "[", "3", "]", ",", "attention", "=", "result", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.sample_beam": [[268, 326], ["attention_questioner.QuestionGenerator.size", "attention_questioner.QuestionGenerator.caption_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "attention_questioner.QuestionGenerator.vectorize_img", "attention_questioner.QuestionGenerator.fc1", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_questioner.QuestionGenerator.caption_embedding", "attention_questioner.QuestionGenerator.context_embedding", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "attention_questioner.QuestionGenerator.fc2().unsqueeze", "img_features[].unsqueeze().repeat", "att_img_features[].unsqueeze().repeat", "cap_emb[].unsqueeze().repeat", "att_weights[].unsqueeze().repeat", "range", "attention_questioner.QuestionGenerator.beam_search", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor().zero_.transpose", "torch.LongTensor().zero_.transpose", "torch.FloatTensor.transpose", "torch.FloatTensor.transpose", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "pos_emb[].unsqueeze().repeat", "attention_questioner.QuestionGenerator.attention", "attention_questioner.QuestionGenerator.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "attention_questioner.QuestionGenerator.caption_embedding", "attention_questioner.QuestionGenerator.fc2", "img_features[].unsqueeze", "att_img_features[].unsqueeze", "cap_emb[].unsqueeze", "att_weights[].unsqueeze", "attention_questioner.QuestionGenerator.question_embedding().squeeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "pos_emb[].unsqueeze", "range", "range", "attention_questioner.QuestionGenerator.question_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.beam_search"], ["", "def", "sample_beam", "(", "self", ",", "img_features", ",", "caption", ",", "pos", ",", "context", ",", "att_weights", ",", "q_idx_vec", ",", "beam_size", ",", "max_seq_len", "=", "17", ")", ":", "\n", "        ", "batch_size", "=", "img_features", ".", "size", "(", "0", ")", "\n", "\n", "# encode the caption", "\n", "if", "self", ".", "use_position_encoding", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "[", "self", ".", "caption_embedding", "(", "caption", ")", ",", "q_idx_vec", "]", ",", "dim", "=", "2", ")", "# q_idx is position encoding vector", "\n", "", "else", ":", "\n", "            ", "input", "=", "self", ".", "caption_embedding", "(", "caption", ")", "\n", "\n", "", "_", ",", "cap_emb", "=", "self", ".", "caption_encoder", "(", "input", ")", "\n", "cap_emb", "=", "torch", ".", "cat", "(", "[", "cap_emb", "[", "0", "]", ",", "cap_emb", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "context_emb", "=", "torch", ".", "relu", "(", "self", ".", "context_embedding", "(", "context", ")", ")", "\n", "pos_emb", "=", "torch", ".", "relu", "(", "torch", ".", "matmul", "(", "pos", ",", "self", ".", "pos_embedding", ".", "weight", ")", ")", "\n", "\n", "img_features", "=", "self", ".", "vectorize_img", "(", "img_features", ")", "\n", "att_img_features", "=", "self", ".", "fc1", "(", "img_features", ")", "\n", "\n", "seq", "=", "torch", ".", "LongTensor", "(", "max_seq_len", ",", "batch_size", ")", ".", "zero_", "(", ")", "\n", "seqLogprobs", "=", "torch", ".", "FloatTensor", "(", "max_seq_len", ",", "batch_size", ")", "\n", "all_seq", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "beam_size", ",", "max_seq_len", ")", ".", "zero_", "(", ")", "\n", "all_seqLogprobs", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "beam_size", ",", "max_seq_len", ")", ".", "zero_", "(", ")", "\n", "self", ".", "done_beams", "=", "[", "[", "]", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "if", "self", ".", "use_caption_hidden", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "[", "context_emb", "[", "i", "]", ",", "pos_emb", "[", "i", "]", "]", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "input", "=", "pos_emb", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ")", "\n", "\n", "", "hidden", "=", "self", ".", "fc2", "(", "input", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "sample_img_feature", "=", "img_features", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ",", "1", ")", "\n", "sample_att_feature", "=", "att_img_features", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ",", "1", ")", "\n", "sample_cap_emb", "=", "cap_emb", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ")", "\n", "sample_att_weights", "=", "att_weights", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ")", ":", "\n", "                ", "if", "t", "==", "0", ":", "# input <bos>", "\n", "                    ", "previous_word", "=", "self", ".", "one_vec", "[", ":", "beam_size", "]", "# beginning of sentence token is 1", "\n", "q_emb", "=", "self", ".", "question_embedding", "(", "previous_word", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "img_emb", ",", "_", "=", "self", ".", "attention", "(", "sample_img_feature", ",", "sample_att_feature", ",", "hidden", ",", "sample_att_weights", ")", "\n", "\n", "logits", ",", "hidden", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "sample_cap_emb", ",", "q_emb", ")", "\n", "state", "=", "(", "hidden", ",", ")", "# state is the hidden, beam search expects a tuple", "\n", "\n", "log_probs", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "", "self", ".", "done_beams", "[", "i", "]", "=", "self", ".", "beam_search", "(", "state", ",", "log_probs", ",", "sample_img_feature", ",", "sample_att_feature", ",", "\n", "sample_cap_emb", ",", "sample_att_weights", ",", "beam_size", ",", "max_seq_len", ")", "\n", "seq", "[", ":", ",", "i", "]", "=", "self", ".", "done_beams", "[", "i", "]", "[", "0", "]", "[", "'seq'", "]", "# the first beam has highest cumulative score", "\n", "seqLogprobs", "[", ":", ",", "i", "]", "=", "self", ".", "done_beams", "[", "i", "]", "[", "0", "]", "[", "'logps'", "]", "\n", "all_seq", "[", "i", "]", "=", "torch", ".", "stack", "(", "[", "self", ".", "done_beams", "[", "i", "]", "[", "k", "]", "[", "'seq'", "]", "for", "k", "in", "range", "(", "beam_size", ")", "]", ",", "dim", "=", "0", ")", "\n", "all_seqLogprobs", "[", "i", "]", "=", "torch", ".", "stack", "(", "[", "self", ".", "done_beams", "[", "i", "]", "[", "k", "]", "[", "'logps'", "]", "for", "k", "in", "range", "(", "beam_size", ")", "]", ",", "dim", "=", "0", ")", "\n", "# return the samples and their log likelihoods", "\n", "", "return", "seq", ".", "transpose", "(", "0", ",", "1", ")", ",", "seqLogprobs", ".", "transpose", "(", "0", ",", "1", ")", ",", "all_seq", ",", "all_seqLogprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.get_logprobs_state": [[327, 336], ["attention_questioner.QuestionGenerator.attention", "attention_questioner.QuestionGenerator.question_embedding().squeeze", "attention_questioner.QuestionGenerator.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "attention_questioner.QuestionGenerator.question_embedding"], "methods", ["None"], ["", "def", "get_logprobs_state", "(", "self", ",", "previous_word", ",", "img_features", ",", "att_img_features", ",", "sample_a_emb", ",", "state", ",", "att_weights", ")", ":", "\n", "\n", "        ", "hidden", "=", "state", "[", "0", "]", "\n", "img_emb", ",", "_", "=", "self", ".", "attention", "(", "img_features", ",", "att_img_features", ",", "hidden", ",", "att_weights", ")", "# state is hidden", "\n", "q_emb", "=", "self", ".", "question_embedding", "(", "previous_word", ")", ".", "squeeze", "(", "1", ")", "\n", "logits", ",", "hidden", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "sample_a_emb", ",", "q_emb", ")", "\n", "state", "=", "(", "hidden", ",", ")", "\n", "\n", "return", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.beam_search": [[337, 435], ["torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "min", "range", "sorted", "range", "logprobs.data.float", "attention_questioner.QuestionGenerator.beam_search.beam_step"], "methods", ["None"], ["", "def", "beam_search", "(", "self", ",", "state", ",", "logprobs", ",", "sample_img_feature", ",", "sample_att_feature", ",", "sample_a_emb", ",", "att_weights", ",", "beam_size", ",", "max_seq_len", ")", ":", "\n", "# args are the miscelleous inputs to the core in addition to embedded word and state", "\n", "# kwargs only accept opt", "\n", "\n", "        ", "def", "beam_step", "(", "logprobsf", ",", "beam_size", ",", "t", ",", "beam_seq", ",", "beam_seq_logprobs", ",", "beam_logprobs_sum", ",", "state", ")", ":", "\n", "# INPUTS:", "\n", "# logprobsf: probabilities augmented after diversity", "\n", "# beam_size: obvious", "\n", "# t        : time instant", "\n", "# beam_seq : tensor contanining the beams", "\n", "# beam_seq_logprobs: tensor contanining the beam logprobs", "\n", "# beam_logprobs_sum: tensor contanining joint logprobs", "\n", "# OUPUTS:", "\n", "# beam_seq : tensor containing the word indices of the decoded captions", "\n", "# beam_seq_logprobs : log-probability of each decision made, same size as beam_seq", "\n", "# beam_logprobs_sum : joint log-probability of each beam", "\n", "\n", "            ", "ys", ",", "ix", "=", "torch", ".", "sort", "(", "logprobsf", ",", "1", ",", "True", ")", "\n", "candidates", "=", "[", "]", "\n", "cols", "=", "min", "(", "beam_size", ",", "ys", ".", "size", "(", "1", ")", ")", "\n", "rows", "=", "beam_size", "\n", "if", "t", "==", "0", ":", "\n", "                ", "rows", "=", "1", "\n", "", "for", "c", "in", "range", "(", "cols", ")", ":", "# for each column (word, essentially)", "\n", "                ", "for", "q", "in", "range", "(", "rows", ")", ":", "# for each beam expansion", "\n", "# compute logprob of expanding beam q with word in (sorted) position c", "\n", "                    ", "local_logprob", "=", "ys", "[", "q", ",", "c", "]", "\n", "candidate_logprob", "=", "beam_logprobs_sum", "[", "q", "]", "+", "local_logprob", "\n", "candidates", ".", "append", "(", "{", "'c'", ":", "ix", "[", "q", ",", "c", "]", ",", "'q'", ":", "q", ",", "'p'", ":", "candidate_logprob", ",", "'r'", ":", "local_logprob", "}", ")", "\n", "", "", "candidates", "=", "sorted", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "'p'", "]", ")", "\n", "\n", "new_state", "=", "[", "_", ".", "clone", "(", ")", "for", "_", "in", "state", "]", "\n", "# beam_seq_prev, beam_seq_logprobs_prev", "\n", "if", "t", ">=", "1", ":", "\n", "# we''ll need these as reference when we fork beams around", "\n", "                ", "beam_seq_prev", "=", "beam_seq", "[", ":", "t", "]", ".", "clone", "(", ")", "\n", "beam_seq_logprobs_prev", "=", "beam_seq_logprobs", "[", ":", "t", "]", ".", "clone", "(", ")", "\n", "", "for", "vix", "in", "range", "(", "beam_size", ")", ":", "\n", "                ", "v", "=", "candidates", "[", "vix", "]", "\n", "# fork beam index q into index vix", "\n", "if", "t", ">=", "1", ":", "\n", "                    ", "beam_seq", "[", ":", "t", ",", "vix", "]", "=", "beam_seq_prev", "[", ":", ",", "v", "[", "'q'", "]", "]", "\n", "beam_seq_logprobs", "[", ":", "t", ",", "vix", "]", "=", "beam_seq_logprobs_prev", "[", ":", ",", "v", "[", "'q'", "]", "]", "\n", "# rearrange recurrent states", "\n", "", "for", "state_ix", "in", "range", "(", "len", "(", "new_state", ")", ")", ":", "\n", "#  copy over state in previous beam q to new beam at vix", "\n", "                    ", "new_state", "[", "state_ix", "]", "[", ":", ",", "vix", "]", "=", "state", "[", "state_ix", "]", "[", ":", ",", "v", "[", "'q'", "]", "]", "# dimension one is time step", "\n", "# append new end terminal at the end of this beam", "\n", "", "beam_seq", "[", "t", ",", "vix", "]", "=", "v", "[", "'c'", "]", "# c'th word is the continuation", "\n", "beam_seq_logprobs", "[", "t", ",", "vix", "]", "=", "v", "[", "'r'", "]", "# the raw logprob here", "\n", "beam_logprobs_sum", "[", "vix", "]", "=", "v", "[", "'p'", "]", "# the new (sum) logprob along this beam", "\n", "", "state", "=", "new_state", "\n", "return", "beam_seq", ",", "beam_seq_logprobs", ",", "beam_logprobs_sum", ",", "state", ",", "candidates", "\n", "\n", "", "beam_seq", "=", "torch", ".", "LongTensor", "(", "max_seq_len", ",", "beam_size", ")", ".", "zero_", "(", ")", "\n", "beam_seq_logprobs", "=", "torch", ".", "FloatTensor", "(", "max_seq_len", ",", "beam_size", ")", ".", "zero_", "(", ")", "\n", "beam_logprobs_sum", "=", "torch", ".", "zeros", "(", "beam_size", ")", "# running sum of logprobs for each beam", "\n", "done_beams", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "max_seq_len", ")", ":", "\n", "            ", "\"\"\"pem a beam merge. that is,\n            for every previous beam we now many new possibilities to branch out\n            we need to resort our beams to maintain the loop invariant of keeping\n            the top beam_size most likely sequences.\"\"\"", "\n", "logprobsf", "=", "logprobs", ".", "data", ".", "float", "(", ")", "# lets go to CPU for more efficiency in indexing operations", "\n", "# suppress UNK tokens in the decoding", "\n", "logprobsf", "[", ":", ",", "logprobsf", ".", "size", "(", "1", ")", "-", "1", "]", "=", "logprobsf", "[", ":", ",", "logprobsf", ".", "size", "(", "1", ")", "-", "1", "]", "-", "1000", "\n", "\n", "beam_seq", ",", "beam_seq_logprobs", ",", "beam_logprobs_sum", ",", "state", ",", "candidates_divm", "=", "beam_step", "(", "logprobsf", ",", "\n", "beam_size", ",", "\n", "t", ",", "\n", "beam_seq", ",", "\n", "beam_seq_logprobs", ",", "\n", "beam_logprobs_sum", ",", "\n", "state", ")", "\n", "\n", "for", "vix", "in", "range", "(", "beam_size", ")", ":", "\n", "# if time's up... or if end token is reached then copy beams", "\n", "                ", "if", "beam_seq", "[", "t", ",", "vix", "]", "==", "self", ".", "special_symbols", "[", "'eos'", "]", "or", "t", "==", "max_seq_len", "-", "1", ":", "\n", "                    ", "final_beam", "=", "{", "\n", "'seq'", ":", "beam_seq", "[", ":", ",", "vix", "]", ".", "clone", "(", ")", ",", "\n", "'logps'", ":", "beam_seq_logprobs", "[", ":", ",", "vix", "]", ".", "clone", "(", ")", ",", "\n", "'p'", ":", "beam_logprobs_sum", "[", "vix", "]", "\n", "}", "\n", "done_beams", ".", "append", "(", "final_beam", ")", "\n", "# don't continue beams from finished sequences", "\n", "beam_logprobs_sum", "[", "vix", "]", "=", "-", "1000", "\n", "\n", "# encode as vectors", "\n", "", "", "it", "=", "beam_seq", "[", "t", "]", "\n", "logprobs", ",", "state", "=", "self", ".", "get_logprobs_state", "(", "it", ".", "to", "(", "device", ")", ",", "sample_img_feature", ",", "sample_att_feature", ",", "sample_a_emb", ",", "state", ",", "att_weights", ")", "\n", "\n", "", "done_beams", "=", "sorted", "(", "done_beams", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "'p'", "]", ")", "[", ":", "beam_size", "]", "\n", "return", "done_beams", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_questioner.QuestionGenerator.vectorize_img": [[436, 441], ["img_features.permute.permute.contiguous().view", "img_features.permute.permute.permute", "img_features.permute.permute.contiguous"], "methods", ["None"], ["", "def", "vectorize_img", "(", "self", ",", "img_features", ")", ":", "\n", "\n", "        ", "img_features", "=", "img_features", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "img_channels", ",", "self", ".", "img_area", ")", "# Nx2048x49", "\n", "img_features", "=", "img_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "img_features", "", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.ConvBlock.__init__": [[9, 15], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ic", ",", "oc", ",", "ks", ",", "dropout", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "in_channels", "=", "ic", ",", "out_channels", "=", "oc", ",", "kernel_size", "=", "ks", ")", "\n", "self", ".", "nl", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.ConvBlock.forward": [[16, 23], ["decision_maker.ConvBlock.conv", "decision_maker.ConvBlock.nl", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "output", "=", "self", ".", "nl", "(", "output", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "output", "=", "torch", ".", "dropout", "(", "output", ",", "p", "=", "0.5", ",", "train", "=", "True", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.FCBlock.__init__": [[26, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "isize", ",", "osize", ",", "dropout", "=", "True", ")", ":", "\n", "        ", "super", "(", "FCBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "isize", ",", "osize", ")", "\n", "self", ".", "nl", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.FCBlock.forward": [[33, 40], ["decision_maker.FCBlock.fc", "decision_maker.FCBlock.nl", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "fc", "(", "input", ")", "\n", "output", "=", "self", ".", "nl", "(", "output", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "output", "=", "torch", ".", "dropout", "(", "output", ",", "p", "=", "0.5", ",", "train", "=", "True", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.__init__": [[43, 50], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Base", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "k", "=", "opt", ".", "k", "\n", "self", ".", "pos_vocab_size", "=", "opt", ".", "pos_vocab_size", "\n", "self", ".", "zero_mat", "=", "torch", ".", "zeros", "(", "[", "opt", ".", "batch_size", ",", "opt", ".", "c_max_sentence_len", "+", "1", ",", "self", ".", "k", "]", ",", "device", "=", "device", ")", "\n", "self", ".", "eye_mat", "=", "torch", ".", "eye", "(", "n", "=", "self", ".", "k", ",", "m", "=", "self", ".", "k", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.min_distance": [[51, 60], ["emb.size", "emb.unsqueeze().repeat", "emb.unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "pairwise_distances.min", "decision_maker.Base.eye_mat[].clone", "emb.unsqueeze"], "methods", ["None"], ["", "def", "min_distance", "(", "self", ",", "word_embedding", ",", "word_idxs", ")", ":", "\n", "        ", "emb", "=", "word_embedding", "[", "word_idxs", "]", "\n", "\n", "large_number", "=", "1e6", "\n", "num_words", "=", "emb", ".", "size", "(", "0", ")", "\n", "\n", "pairwise_differences", "=", "emb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_words", ",", "1", ")", "-", "emb", ".", "unsqueeze", "(", "0", ")", "\n", "pairwise_distances", "=", "torch", ".", "norm", "(", "pairwise_differences", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "+", "large_number", "*", "self", ".", "eye_mat", "[", ":", "num_words", ",", ":", "num_words", "]", ".", "clone", "(", ")", "\n", "return", "pairwise_distances", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.cosine_distance_to_others": [[61, 68], ["torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "emb[].unsqueeze"], "methods", ["None"], ["", "def", "cosine_distance_to_others", "(", "self", ",", "word_embedding", ",", "word_idxs", ")", ":", "\n", "        ", "emb", "=", "word_embedding", "[", "word_idxs", "]", "\n", "\n", "cos_dist", "=", "F", ".", "cosine_similarity", "(", "emb", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "emb", ",", "dim", "=", "1", ")", "\n", "cos_dist", "[", "0", "]", "=", "0.0", "# pad similarity against self to be 0 instead of 1. will be better for conv filters", "\n", "\n", "return", "cos_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.cosine_distance_sentence": [[69, 74], ["word_embedding[].sum", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "word_embedding[].sum.unsqueeze"], "methods", ["None"], ["", "def", "cosine_distance_sentence", "(", "self", ",", "word_embedding", ",", "word_idxs", ",", "sentence", ")", ":", "\n", "        ", "sentence_emb", "=", "word_embedding", "[", "sentence", "]", ".", "sum", "(", "dim", "=", "0", ")", "\n", "emb", "=", "word_embedding", "[", "word_idxs", "]", "\n", "\n", "return", "F", ".", "cosine_similarity", "(", "sentence_emb", ".", "unsqueeze", "(", "0", ")", ",", "emb", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.compute_uncertainty_features": [[75, 91], ["[].size", "decision_maker.Base.zero_mat[].clone", "decision_maker.Base.zero_mat[].clone", "decision_maker.Base.zero_mat[].clone", "range", "len", "range", "words.size", "decision_maker.Base.cosine_distance_sentence", "decision_maker.Base.min_distance", "decision_maker.Base.cosine_distance_to_others"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.cosine_distance_sentence", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.min_distance", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.cosine_distance_to_others"], ["", "def", "compute_uncertainty_features", "(", "self", ",", "topk", ",", "caption", ",", "cap_len", ",", "cap_embedding", ")", ":", "\n", "        ", "batch_size", "=", "topk", "[", "0", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n", "min_dist", "=", "self", ".", "zero_mat", "[", ":", "batch_size", "]", ".", "clone", "(", ")", "\n", "cos_dist", "=", "self", ".", "zero_mat", "[", ":", "batch_size", "]", ".", "clone", "(", ")", "\n", "sentence_cos_dist", "=", "self", ".", "zero_mat", "[", ":", "batch_size", "]", ".", "clone", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "len", "(", "topk", ")", ")", ":", "\n", "            ", "probs", ",", "words", "=", "topk", "[", "t", "]", "\n", "probs", ",", "words", "=", "probs", ",", "words", "\n", "for", "i", "in", "range", "(", "words", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "sentence_cos_dist", "[", "i", ",", "t", "]", "=", "self", ".", "cosine_distance_sentence", "(", "cap_embedding", ",", "words", "[", "i", "]", ",", "caption", "[", "i", "]", "[", ":", "cap_len", "[", "i", "]", "]", ")", "\n", "min_dist", "[", "i", ",", "t", "]", "=", "self", ".", "min_distance", "(", "cap_embedding", ",", "words", "[", "i", "]", ")", "\n", "cos_dist", "[", "i", ",", "t", "]", "=", "self", ".", "cosine_distance_to_others", "(", "cap_embedding", ",", "words", "[", "i", "]", ")", "\n", "\n", "", "", "return", "min_dist", ",", "cos_dist", ",", "sentence_cos_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.valid_pos": [[92, 94], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "valid_pos", "(", "self", ",", "pos", ")", ":", "\n", "        ", "return", "torch", ".", "max", "(", "pos", ",", "dim", "=", "2", ")", "[", "1", "]", "!=", "self", ".", "pos_vocab_size", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.DecisionMaker.__init__": [[98, 135], ["decision_maker.Base.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "layers.append", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "decision_maker.FCBlock", "decision_maker.FCBlock", "torch.Linear", "torch.Linear", "torch.Linear", "decision_maker.ConvBlock", "decision_maker.ConvBlock", "decision_maker.ConvBlock", "decision_maker.FCBlock", "decision_maker.FCBlock", "decision_maker.FCBlock"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "DecisionMaker", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "self", ".", "c_vocab_size", "=", "opt", ".", "c_vocab_size", "\n", "self", ".", "dropout", "=", "opt", ".", "use_dropout", "\n", "\n", "self", ".", "dm_emb_size", "=", "opt", ".", "dm_emb_size", "\n", "self", ".", "pos_emb_size", "=", "opt", ".", "pos_emb_size", "\n", "\n", "self", ".", "dm_rnn_size", "=", "opt", ".", "dm_rnn_size", "\n", "self", ".", "dm_cnn_size", "=", "opt", ".", "dm_cnn_size", "\n", "self", ".", "use_caption_hidden", "=", "opt", ".", "use_caption_hidden", "\n", "\n", "# embedding matrices", "\n", "self", ".", "caption_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "c_vocab_size", "+", "1", ",", "self", ".", "dm_emb_size", ",", "padding_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "pos_vocab_size", "+", "1", ",", "self", ".", "pos_emb_size", ",", "padding_idx", "=", "self", ".", "pos_vocab_size", ")", "\n", "\n", "self", ".", "caption_encoder", "=", "nn", ".", "GRU", "(", "self", ".", "dm_emb_size", ",", "self", ".", "dm_rnn_size", ",", "1", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.5", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# Conv layers", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "ConvBlock", "(", "ic", "=", "4", ",", "oc", "=", "self", ".", "dm_cnn_size", "/", "4", ",", "ks", "=", "3", ",", "dropout", "=", "self", ".", "dropout", ")", ")", "\n", "layers", ".", "append", "(", "ConvBlock", "(", "ic", "=", "self", ".", "dm_cnn_size", "/", "4", ",", "oc", "=", "self", ".", "dm_cnn_size", "/", "2", ",", "ks", "=", "3", ",", "dropout", "=", "self", ".", "dropout", ")", ")", "\n", "layers", ".", "append", "(", "ConvBlock", "(", "ic", "=", "self", ".", "dm_cnn_size", "/", "2", ",", "oc", "=", "self", ".", "dm_cnn_size", ",", "ks", "=", "2", ",", "dropout", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "CNN", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "# FC layers", "\n", "sizeP", ",", "sizeH", ",", "sizeI", ",", "sizeC", "=", "[", "256", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "pBlock", "=", "FCBlock", "(", "isize", "=", "self", ".", "pos_emb_size", ",", "osize", "=", "sizeP", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "iBlock", "=", "FCBlock", "(", "isize", "=", "opt", ".", "image_channels", ",", "osize", "=", "sizeI", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "fcO", "=", "nn", ".", "Linear", "(", "self", ".", "dm_cnn_size", "+", "sizeC", ",", "1", ")", "\n", "\n", "if", "self", ".", "use_caption_hidden", ":", "\n", "            ", "self", ".", "hBlock", "=", "FCBlock", "(", "isize", "=", "opt", ".", "c_rnn_size", ",", "osize", "=", "sizeH", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "cBlock", "=", "FCBlock", "(", "isize", "=", "sizeH", "+", "sizeP", "+", "sizeI", "+", "2", "*", "self", ".", "dm_rnn_size", ",", "osize", "=", "sizeC", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cBlock", "=", "FCBlock", "(", "isize", "=", "sizeP", "+", "sizeI", "+", "2", "*", "self", ".", "dm_rnn_size", ",", "osize", "=", "sizeC", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.DecisionMaker.forward": [[136, 178], ["decision_maker.DecisionMaker.valid_pos", "decision_maker.DecisionMaker.compute_uncertainty_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "uncertainty_features.contiguous().view.contiguous().view.size", "uncertainty_features.contiguous().view.contiguous().view.contiguous().view", "decision_maker.DecisionMaker.CNN", "decision_maker.DecisionMaker.view", "decision_maker.DecisionMaker.caption_embedding", "decision_maker.DecisionMaker.caption_encoder", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "decision_maker.DecisionMaker.pBlock", "decision_maker.DecisionMaker.iBlock", "decision_maker.DecisionMaker.cBlock", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decision_maker.DecisionMaker.fcO().squeeze", "decision_maker.DecisionMaker.hBlock", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "decision_maker.DecisionMaker.unsqueeze", "uncertainty_features.contiguous().view.contiguous().view.contiguous", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "decision_maker.DecisionMaker.fcO", "range", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.valid_pos", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.decision_maker.Base.compute_uncertainty_features"], ["", "", "def", "forward", "(", "self", ",", "hidden", ",", "attended_img", ",", "caption", ",", "cap_len", ",", "pos", ",", "topk", ",", "cap_embedding", ")", ":", "\n", "\n", "        ", "valid_pos", "=", "self", ".", "valid_pos", "(", "pos", ")", "\n", "\n", "min_dist", ",", "cos_dist", ",", "sentence_cos_dist", "=", "self", ".", "compute_uncertainty_features", "(", "\n", "topk", ",", "caption", ",", "cap_len", ",", "cap_embedding", ")", "\n", "\n", "# uncertainty features", "\n", "# probabilities of top k words", "\n", "probs", "=", "torch", ".", "cat", "(", "[", "topk", "[", "t", "]", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "for", "t", "in", "range", "(", "len", "(", "topk", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "uncertainty_features", "=", "torch", ".", "cat", "(", "[", "x", ".", "unsqueeze", "(", "2", ")", "for", "x", "in", "[", "min_dist", ",", "cos_dist", ",", "sentence_cos_dist", ",", "probs", "]", "]", ",", "dim", "=", "2", ")", "\n", "batch_size", ",", "caption_len", ",", "channels", ",", "k", "=", "uncertainty_features", ".", "size", "(", ")", "\n", "uncertainty_features", "=", "uncertainty_features", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "channels", ",", "k", ")", "\n", "\n", "x", "=", "self", ".", "CNN", "(", "uncertainty_features", ")", "\n", "unc_feat", "=", "x", ".", "view", "(", "batch_size", ",", "caption_len", ",", "self", ".", "dm_cnn_size", ")", "\n", "\n", "# context features: caption", "\n", "cap_emb", "=", "self", ".", "caption_embedding", "(", "caption", ")", "\n", "_", ",", "cap_feat", "=", "self", ".", "caption_encoder", "(", "cap_emb", ")", "\n", "cap_feat", "=", "torch", ".", "cat", "(", "[", "cap_feat", "[", "0", "]", ",", "cap_feat", "[", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "caption_len", ",", "1", ")", "\n", "\n", "pos_emb", "=", "torch", ".", "matmul", "(", "pos", ",", "self", ".", "pos_embedding", ".", "weight", ")", "\n", "pos_feat", "=", "self", ".", "pBlock", "(", "pos_emb", ")", "\n", "\n", "# context features: image", "\n", "img_feat", "=", "self", ".", "iBlock", "(", "attended_img", ")", "\n", "\n", "# fuse (caption, pos, image, hidden) features", "\n", "if", "self", ".", "use_caption_hidden", ":", "\n", "            ", "hid_feat", "=", "self", ".", "hBlock", "(", "hidden", ")", "\n", "context_feat", "=", "torch", ".", "cat", "(", "(", "cap_feat", ",", "pos_feat", ",", "img_feat", ",", "hid_feat", ")", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "context_feat", "=", "torch", ".", "cat", "(", "(", "cap_feat", ",", "pos_feat", ",", "img_feat", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "context_feat", "=", "self", ".", "cBlock", "(", "context_feat", ")", "\n", "\n", "# fuse (context, uncertainty) features", "\n", "fuse_feat", "=", "torch", ".", "cat", "(", "(", "context_feat", ",", "unc_feat", ")", ",", "dim", "=", "2", ")", "\n", "logits", "=", "self", ".", "fcO", "(", "fuse_feat", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "return", "logits", ",", "valid_pos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.Attention.__init__": [[10, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "att_hidden_size", "=", "opt", ".", "att_hidden_size", "\n", "self", ".", "rnn_hidden_size", "=", "opt", ".", "rnn_size", "\n", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "att_hidden_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "att_hidden_size", ",", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "self", ".", "img_channels", ",", "self", ".", "img_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.Attention.forward": [[25, 38], ["attention_captioner.Attention.fc1", "attention_captioner.Attention.permute().repeat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "attention_captioner.Attention.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "attention_captioner.Attention.fc3", "attention_captioner.Attention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_features", ",", "att_img_features", ",", "hidden", ")", ":", "\n", "\n", "        ", "z", "=", "self", ".", "fc1", "(", "hidden", ")", "\n", "z", "=", "z", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "repeat", "(", "1", ",", "self", ".", "img_area", ",", "1", ")", "# Nx49x512", "\n", "z", "=", "att_img_features", "+", "z", "\n", "z", "=", "torch", ".", "tanh", "(", "z", ")", "\n", "z", "=", "self", ".", "fc2", "(", "z", ")", "\n", "a", "=", "torch", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "\n", "\n", "attended_feature", "=", "(", "img_features", "*", "a", ")", ".", "sum", "(", "1", ")", "\n", "attended_feature", "=", "torch", ".", "relu", "(", "self", ".", "fc3", "(", "attended_feature", ")", ")", "\n", "\n", "return", "attended_feature", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.Decoder.__init__": [[42, 74], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# vocab sizes", "\n", "self", ".", "c_vocab_size", "=", "opt", ".", "c_vocab_size", "\n", "self", ".", "pos_vocab_size", "=", "opt", ".", "pos_vocab_size", "\n", "\n", "# embedding sizes", "\n", "self", ".", "emb_size", "=", "opt", ".", "word_embedding_size", "\n", "self", ".", "pos_emb_size", "=", "opt", ".", "pos_emb_size", "\n", "\n", "# architecture sizes", "\n", "self", ".", "rnn_hidden_size", "=", "opt", ".", "rnn_size", "\n", "self", ".", "rnn_num_layers", "=", "opt", ".", "rnn_layers", "\n", "\n", "# image dimensions", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "\n", "# dropout and scheduled sampling", "\n", "self", ".", "dropout_rate", "=", "opt", ".", "dropout", "\n", "self", ".", "pos_ss_prob", "=", "opt", ".", "p_scheduled_sampling_initial_value", "\n", "\n", "# pos embedding", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "pos_vocab_size", "+", "1", ",", "self", ".", "pos_emb_size", ",", "padding_idx", "=", "self", ".", "pos_vocab_size", ")", "\n", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "self", ".", "emb_size", "+", "self", ".", "img_channels", ",", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_num_layers", ",", "\n", "batch_first", "=", "True", ",", "dropout", "=", "self", ".", "dropout_rate", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "pos_vocab_size", "+", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_size", "+", "self", ".", "pos_emb_size", ",", "self", ".", "c_vocab_size", "+", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.Decoder.forward": [[75, 93], ["attention_captioner.Decoder.gru", "attention_captioner.Decoder.dropout", "attention_captioner.Decoder.fc1", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "attention_captioner.Decoder.fc2", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "hidden.squeeze", "torch.matmul().detach", "torch.matmul().detach", "torch.matmul().detach", "torch.matmul().detach", "attention_captioner.Decoder.pos_embedding().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "attention_captioner.Decoder.pos_embedding", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "img_emb", ",", "c_emb", ",", "gt_pos", ")", ":", "\n", "\n", "        ", "hidden", ",", "last_hidden", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "(", "img_emb", ",", "c_emb", ")", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "hidden", ")", "\n", "\n", "z", "=", "self", ".", "dropout", "(", "hidden", ".", "squeeze", "(", "1", ")", ")", "\n", "pos_logits", "=", "self", ".", "fc1", "(", "z", ")", "\n", "\n", "# scheduled sampling for POS", "\n", "sample_prob", "=", "torch", ".", "Tensor", "(", "1", ")", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "\n", "if", "gt_pos", "is", "None", "or", "sample_prob", "[", "0", "]", "<", "self", ".", "pos_ss_prob", ":", "\n", "            ", "pos_emb", "=", "torch", ".", "matmul", "(", "torch", ".", "softmax", "(", "pos_logits", ",", "dim", "=", "1", ")", ",", "self", ".", "pos_embedding", ".", "weight", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "pos_emb", "=", "self", ".", "pos_embedding", "(", "gt_pos", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "logits", "=", "self", ".", "fc2", "(", "torch", ".", "cat", "(", "(", "z", ",", "pos_emb", ")", ",", "1", ")", ")", "\n", "\n", "return", "logits", ",", "last_hidden", ",", "pos_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.__init__": [[101, 143], ["torch.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "attention_captioner.Attention", "attention_captioner.Decoder", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "attention_captioner.AttentionCaptioner.caption_embedding.weight.data[].uniform_"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "AttentionCaptioner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# vocab sizes", "\n", "self", ".", "c_vocab_size", "=", "opt", ".", "c_vocab_size", "\n", "self", ".", "pos_vocab_size", "=", "opt", ".", "pos_vocab_size", "\n", "self", ".", "special_symbols", "=", "opt", ".", "special_symbols", "\n", "\n", "# architecture sizes", "\n", "self", ".", "att_hidden_size", "=", "opt", ".", "att_hidden_size", "\n", "self", ".", "rnn_hidden_size", "=", "opt", ".", "rnn_size", "\n", "self", ".", "rnn_num_layers", "=", "opt", ".", "rnn_layers", "\n", "\n", "# embeding sizes", "\n", "self", ".", "emb_size", "=", "opt", ".", "word_embedding_size", "\n", "\n", "# image dimensions", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "\n", "# top k for MK module and schedule sampling", "\n", "self", ".", "k", "=", "opt", ".", "k", "\n", "self", ".", "ss_prob", "=", "0.0", "\n", "\n", "# dummy vector", "\n", "self", ".", "one_vec", "=", "torch", ".", "ones", "(", "[", "5", "*", "opt", ".", "batch_size", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "# submodules", "\n", "self", ".", "attention", "=", "Attention", "(", "opt", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "opt", ")", "\n", "\n", "# embedding layers", "\n", "self", ".", "caption_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "c_vocab_size", "+", "1", ",", "self", ".", "emb_size", ",", "padding_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "\n", "# FC layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "img_channels", ",", "self", ".", "att_hidden_size", ")", "\n", "\n", "# init word embeddings", "\n", "initrange", "=", "0.1", "\n", "self", ".", "caption_embedding", ".", "weight", ".", "data", "[", ":", "-", "1", "]", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "# -1 to deal with pad index", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img": [[144, 149], ["img_features.permute.permute.contiguous().view", "img_features.permute.permute.permute", "img_features.permute.permute.contiguous"], "methods", ["None"], ["", "def", "vectorize_img", "(", "self", ",", "img_features", ")", ":", "\n", "\n", "        ", "img_features", "=", "img_features", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "img_channels", ",", "self", ".", "img_area", ")", "# Nx2048x49", "\n", "img_features", "=", "img_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "img_features", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.forward": [[150, 196], ["attention_captioner.AttentionCaptioner.vectorize_img", "attention_captioner.AttentionCaptioner.fc1", "attention_captioner.init_hidden", "range", "Utils.util.Bunch", "source.size", "attention_captioner.AttentionCaptioner.attention", "attention_captioner.AttentionCaptioner.caption_embedding", "logits_arr.append", "pos_logits_arr.append", "hidden_arr.append", "att_arr.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor().uniform_().to", "torch.Tensor().uniform_().to", "torch.Tensor().uniform_().to", "torch.Tensor().uniform_().to", "attention_captioner.AttentionCaptioner.decoder", "attention_captioner.AttentionCaptioner.decoder", "logits.unsqueeze", "pos_logits.unsqueeze", "init_hidden.permute", "att_weights.permute", "sample_mask.sum().item", "sample_mask.nonzero().view", "source[].clone", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "source[].clone.index_copy_", "source[].clone.requires_grad_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.multinomial().view().index_select", "torch.multinomial().view().index_select", "torch.multinomial().view().index_select", "torch.multinomial().view().index_select", "sample_mask.sum", "sample_mask.nonzero", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.init_hidden"], ["", "def", "forward", "(", "self", ",", "img_features", ",", "source", ",", "gt_pos", ",", "ss", "=", "True", ")", ":", "\n", "        ", "batch_size", ",", "seq_length", "=", "source", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "\n", "img_features", "=", "self", ".", "vectorize_img", "(", "img_features", ")", "\n", "img_att_features", "=", "self", ".", "fc1", "(", "img_features", ")", "\n", "\n", "hidden", "=", "init_hidden", "(", "batch_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "logits_arr", ",", "pos_logits_arr", ",", "hidden_arr", ",", "att_arr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "seq_length", ")", ":", "\n", "\n", "# scheduled sampling", "\n", "            ", "if", "ss", "and", "i", ">=", "1", "and", "self", ".", "ss_prob", ">", "0.0", ":", "\n", "                ", "sample_prob", "=", "torch", ".", "Tensor", "(", "batch_size", ")", ".", "uniform_", "(", "0", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "sample_mask", "=", "sample_prob", "<", "self", ".", "ss_prob", "\n", "if", "sample_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "previous_word", "=", "source", "[", ":", ",", "i", "]", "\n", "", "else", ":", "\n", "                    ", "sample_ind", "=", "sample_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "previous_word", "=", "source", "[", ":", ",", "i", "]", ".", "clone", "(", ")", "\n", "\n", "prob_prev", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "# fetch prev distribution: shape batchsize x vocab", "\n", "previous_word", ".", "index_copy_", "(", "0", ",", "sample_ind", ",", "torch", ".", "multinomial", "(", "prob_prev", ",", "1", ")", ".", "view", "(", "-", "1", ")", ".", "index_select", "(", "0", ",", "sample_ind", ")", ")", "\n", "previous_word", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "previous_word", "=", "source", "[", ":", ",", "i", "]", "\n", "\n", "# compute attended image feature and word embeddings", "\n", "", "img_emb", ",", "att_weights", "=", "self", ".", "attention", "(", "img_features", ",", "img_att_features", ",", "hidden", ")", "\n", "c_emb", "=", "self", ".", "caption_embedding", "(", "previous_word", ")", "\n", "\n", "# decode caption logits", "\n", "if", "gt_pos", "is", "None", ":", "\n", "                ", "logits", ",", "hidden", ",", "pos_logits", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "c_emb", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "logits", ",", "hidden", ",", "pos_logits", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "c_emb", ",", "gt_pos", "[", ":", ",", "i", "]", ")", "\n", "\n", "# collect variables we will be returning", "\n", "", "logits_arr", ".", "append", "(", "logits", ".", "unsqueeze", "(", "1", ")", ")", "\n", "pos_logits_arr", ".", "append", "(", "pos_logits", ".", "unsqueeze", "(", "1", ")", ")", "\n", "hidden_arr", ".", "append", "(", "hidden", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "att_arr", ".", "append", "(", "att_weights", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "", "result", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "for", "x", "in", "[", "logits_arr", ",", "pos_logits_arr", ",", "hidden_arr", ",", "att_arr", "]", "]", "\n", "\n", "return", "Bunch", "(", "logits", "=", "result", "[", "0", "]", ",", "pos_logits", "=", "result", "[", "1", "]", ",", "hidden", "=", "result", "[", "2", "]", ",", "att", "=", "result", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample_with_teacher_answer": [[197, 238], ["attention_captioner.AttentionCaptioner.vectorize_img", "attention_captioner.AttentionCaptioner.fc1", "range", "Utils.util.Bunch", "attention_captioner.AttentionCaptioner.attention", "attention_captioner.AttentionCaptioner.caption_embedding", "attention_captioner.AttentionCaptioner.decoder", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.log_softmax.gather", "torch.log_softmax.gather", "arr.append", "torch.log_softmax.gather.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.squeeze", "torch.multinomial.squeeze", "x.unsqueeze", "zip", "hidden.squeeze"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img"], ["", "def", "sample_with_teacher_answer", "(", "self", ",", "image", ",", "ask_mask", ",", "answer_mask", ",", "hidden", ",", "previous_word", ",", "max_len", ",", "greedy", ",", "temperature", "=", "1.0", ")", ":", "\n", "\n", "        ", "h_arr", ",", "pos_arr", ",", "caption", ",", "cap_mask", ",", "capprob_arr", ",", "att_arr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# calculate image features", "\n", "img_features", "=", "self", ".", "vectorize_img", "(", "image", ")", "\n", "att_img_features", "=", "self", ".", "fc1", "(", "img_features", ")", "\n", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "\n", "# attend on image", "\n", "            ", "img_emb", ",", "att", "=", "self", ".", "attention", "(", "img_features", ",", "att_img_features", ",", "hidden", ")", "\n", "# embed previous word", "\n", "c_emb", "=", "self", ".", "caption_embedding", "(", "previous_word", ")", "\n", "# rollout rnn decoder", "\n", "logits", ",", "hidden", ",", "pos_logits", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "c_emb", ",", "None", ")", "\n", "word_probs", "=", "torch", ".", "softmax", "(", "(", "1", "/", "temperature", ")", "*", "logits", ",", "dim", "=", "1", ")", "\n", "log_prob", "=", "torch", ".", "log_softmax", "(", "(", "1", "/", "temperature", ")", "*", "logits", ",", "dim", "=", "1", ")", "\n", "pos_probs", "=", "torch", ".", "softmax", "(", "pos_logits", ",", "dim", "=", "1", ")", "\n", "\n", "# sample the next word", "\n", "if", "greedy", ":", "\n", "                ", "chosen_log_prob", ",", "word", "=", "torch", ".", "max", "(", "log_prob", ",", "dim", "=", "1", ")", "\n", "chosen_log_prob", ",", "word", "=", "chosen_log_prob", ".", "unsqueeze", "(", "1", ")", ",", "word", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "word", "=", "torch", ".", "multinomial", "(", "word_probs", ",", "1", ")", "\n", "chosen_log_prob", "=", "log_prob", ".", "gather", "(", "1", ",", "word", ")", "\n", "\n", "# set previous word either to answer or word in caption", "\n", "", "previous_word", "=", "word", ".", "squeeze", "(", "1", ")", "*", "(", "ask_mask", "[", ":", ",", "t", "]", "==", "0", ")", ".", "long", "(", ")", "+", "answer_mask", "[", ":", ",", "t", "]", "*", "ask_mask", "[", ":", ",", "t", "]", "\n", "\n", "unfinished", "=", "previous_word", "!=", "self", ".", "special_symbols", "[", "'eos'", "]", "\n", "global_unfinished", "=", "unfinished", "if", "t", "is", "0", "else", "global_unfinished", "*", "unfinished", "\n", "\n", "[", "arr", ".", "append", "(", "x", ".", "unsqueeze", "(", "1", ")", ")", "for", "arr", ",", "x", "in", "zip", "(", "\n", "[", "h_arr", ",", "pos_arr", ",", "caption", ",", "cap_mask", ",", "att_arr", ",", "capprob_arr", "]", ",", "\n", "[", "hidden", ".", "squeeze", "(", ")", ",", "pos_probs", ",", "previous_word", ",", "global_unfinished", ",", "att", ",", "word_probs", "]", ")", "]", "\n", "\n", "", "result", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "for", "x", "in", "[", "h_arr", ",", "pos_arr", ",", "caption", ",", "cap_mask", ",", "att_arr", ",", "capprob_arr", "]", "]", "\n", "\n", "return", "Bunch", "(", "hidden", "=", "result", "[", "0", "]", ",", "pos_prob", "=", "result", "[", "1", "]", ",", "caption", "=", "result", "[", "2", "]", ",", "cap_mask", "=", "result", "[", "3", "]", ",", "att", "=", "result", "[", "4", "]", ",", "\n", "cap_prob", "=", "result", "[", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample": [[272, 325], ["attention_captioner.AttentionCaptioner.size", "attention_captioner.AttentionCaptioner.vectorize_img", "attention_captioner.AttentionCaptioner.fc1", "range", "Utils.util.Bunch", "attention_captioner.init_hidden", "attention_captioner.AttentionCaptioner.attention", "attention_captioner.AttentionCaptioner.caption_embedding().squeeze", "attention_captioner.AttentionCaptioner.decoder", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "caption.append", "lp_arr.append", "mask.append", "topk.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.log_softmax.gather", "torch.log_softmax.gather", "global_unfinished.long", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "arr.append", "attention_captioner.AttentionCaptioner.caption_embedding", "torch.log_softmax.gather.unsqueeze", "torch.multinomial.unsqueeze", "torch.multinomial.unsqueeze", "x.unsqueeze", "zip", "init_hidden.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.init_hidden"], ["", "def", "sample", "(", "self", ",", "img_features", ",", "greedy", "=", "False", ",", "max_seq_len", "=", "17", ",", "temperature", "=", "1.0", ",", "hidden", "=", "None", ",", "previous_word", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "img_features", ".", "size", "(", "0", ")", "\n", "\n", "# initialize hidden state and previous input", "\n", "if", "hidden", "is", "None", ":", "\n", "            ", "hidden", "=", "init_hidden", "(", "batch_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "", "if", "previous_word", "is", "None", ":", "\n", "            ", "previous_word", "=", "self", ".", "one_vec", "[", ":", "batch_size", "]", "# beginning of sentence token", "\n", "\n", "", "img_features", "=", "self", ".", "vectorize_img", "(", "img_features", ")", "\n", "img_att_features", "=", "self", ".", "fc1", "(", "img_features", ")", "\n", "caption", ",", "prob_arr", ",", "lp_arr", ",", "mask", ",", "hidden_arr", ",", "posprob_arr", ",", "attention_arr", ",", "topk", ",", "atdimg_arr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "max_seq_len", ")", ":", "\n", "# compute attended image feature and word embeddings", "\n", "            ", "img_emb", ",", "attention", "=", "self", ".", "attention", "(", "img_features", ",", "img_att_features", ",", "hidden", ")", "\n", "c_emb", "=", "self", ".", "caption_embedding", "(", "previous_word", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# decode caption logits", "\n", "logits", ",", "hidden", ",", "pos_logits", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "c_emb", ",", "None", ")", "\n", "\n", "# sample a word", "\n", "prob", "=", "torch", ".", "softmax", "(", "(", "1", "/", "temperature", ")", "*", "logits", ",", "dim", "=", "1", ")", "\n", "log_prob", "=", "torch", ".", "log_softmax", "(", "(", "1", "/", "temperature", ")", "*", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "if", "greedy", ":", "\n", "                ", "chosen_log_prob", ",", "word", "=", "torch", ".", "max", "(", "log_prob", ",", "dim", "=", "1", ")", "\n", "chosen_log_prob", ",", "word", "=", "chosen_log_prob", ".", "unsqueeze", "(", "1", ")", ",", "word", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "word", "=", "torch", ".", "multinomial", "(", "prob", ",", "1", ")", "\n", "chosen_log_prob", "=", "log_prob", ".", "gather", "(", "1", ",", "word", ")", "\n", "\n", "# pad sentences that have ended", "\n", "", "unfinished", "=", "word", "!=", "self", ".", "special_symbols", "[", "'eos'", "]", "\n", "if", "i", "is", "0", ":", "\n", "                ", "global_unfinished", "=", "unfinished", "\n", "", "else", ":", "\n", "                ", "global_unfinished", "=", "global_unfinished", "*", "unfinished", "\n", "\n", "", "previous_word", "=", "word", "\n", "word", "=", "word", "*", "global_unfinished", ".", "long", "(", ")", "\n", "\n", "# collect variables we will be returning", "\n", "caption", ".", "append", "(", "word", ")", "\n", "lp_arr", ".", "append", "(", "chosen_log_prob", ")", "\n", "mask", ".", "append", "(", "global_unfinished", ")", "\n", "topk", ".", "append", "(", "torch", ".", "topk", "(", "prob", ",", "k", "=", "self", ".", "k", ",", "dim", "=", "1", ")", ")", "\n", "[", "arr", ".", "append", "(", "x", ".", "unsqueeze", "(", "1", ")", ")", "for", "arr", ",", "x", "in", "zip", "(", "[", "prob_arr", ",", "hidden_arr", ",", "posprob_arr", ",", "attention_arr", ",", "atdimg_arr", "]", ",", "\n", "[", "prob", ",", "hidden", ".", "squeeze", "(", "0", ")", ",", "torch", ".", "softmax", "(", "pos_logits", ",", "dim", "=", "1", ")", ",", "attention", ",", "img_emb", "]", ")", "]", "\n", "\n", "", "result", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "for", "x", "in", "[", "caption", ",", "prob_arr", ",", "lp_arr", ",", "mask", ",", "hidden_arr", ",", "posprob_arr", ",", "attention_arr", ",", "atdimg_arr", "]", "]", "\n", "\n", "return", "Bunch", "(", "caption", "=", "result", "[", "0", "]", ",", "prob", "=", "result", "[", "1", "]", ",", "log_prob", "=", "result", "[", "2", "]", ",", "mask", "=", "result", "[", "3", "]", ",", "hidden", "=", "result", "[", "4", "]", ",", "pos_prob", "=", "result", "[", "5", "]", ",", "attention", "=", "result", "[", "6", "]", ",", "atdimg", "=", "result", "[", "7", "]", ",", "topk", "=", "topk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.sample_beam": [[326, 365], ["attention_captioner.AttentionCaptioner.size", "attention_captioner.AttentionCaptioner.vectorize_img", "attention_captioner.AttentionCaptioner.fc1", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "range", "Utils.util.Bunch", "attention_captioner.init_hidden", "img_features[].unsqueeze().repeat", "img_featuresx[].unsqueeze().repeat", "range", "attention_captioner.AttentionCaptioner.beam_search", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "attention_captioner.AttentionCaptioner.attention", "attention_captioner.AttentionCaptioner.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.LongTensor().zero_.transpose", "torch.LongTensor().zero_.transpose", "torch.FloatTensor.transpose", "torch.FloatTensor.transpose", "img_features[].unsqueeze", "img_featuresx[].unsqueeze", "attention_captioner.AttentionCaptioner.caption_embedding().squeeze", "range", "range", "attention_captioner.AttentionCaptioner.caption_embedding"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.vectorize_img", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.init_hidden", "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.beam_search"], ["", "def", "sample_beam", "(", "self", ",", "img_features", ",", "beam_size", ",", "max_seq_len", "=", "17", ")", ":", "\n", "        ", "batch_size", "=", "img_features", ".", "size", "(", "0", ")", "\n", "\n", "img_features", "=", "self", ".", "vectorize_img", "(", "img_features", ")", "\n", "img_featuresx", "=", "self", ".", "fc1", "(", "img_features", ")", "\n", "\n", "best_caption", "=", "torch", ".", "LongTensor", "(", "max_seq_len", ",", "batch_size", ")", ".", "zero_", "(", ")", "\n", "best_logprob", "=", "torch", ".", "FloatTensor", "(", "max_seq_len", ",", "batch_size", ")", "\n", "captions", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "beam_size", ",", "max_seq_len", ")", ".", "zero_", "(", ")", "\n", "logprobs", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "beam_size", ",", "max_seq_len", ")", ".", "zero_", "(", ")", "\n", "self", ".", "done_beams", "=", "[", "[", "]", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "hidden", "=", "init_hidden", "(", "beam_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "\n", "sample_img_feature", "=", "img_features", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ",", "1", ")", "\n", "sample_att_feature", "=", "img_featuresx", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "beam_size", ",", "1", ",", "1", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ")", ":", "\n", "                ", "if", "t", "==", "0", ":", "# input <bos>", "\n", "                    ", "assert", "self", ".", "special_symbols", "[", "'bos'", "]", "==", "1", "\n", "previous_word", "=", "self", ".", "one_vec", "[", ":", "beam_size", "]", "# beginning of sentence token is 1", "\n", "c_emb", "=", "self", ".", "caption_embedding", "(", "previous_word", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "img_emb", ",", "_", "=", "self", ".", "attention", "(", "sample_img_feature", ",", "sample_att_feature", ",", "hidden", ")", "\n", "\n", "logits", ",", "hidden", ",", "_", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "c_emb", ",", "None", ")", "\n", "state", "=", "(", "hidden", ",", ")", "# state is the hidden, beam search expects a tuple", "\n", "\n", "log_probs", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "", "self", ".", "done_beams", "[", "i", "]", "=", "self", ".", "beam_search", "(", "state", ",", "log_probs", ",", "sample_img_feature", ",", "sample_att_feature", ",", "beam_size", ",", "max_seq_len", ")", "\n", "best_caption", "[", ":", ",", "i", "]", "=", "self", ".", "done_beams", "[", "i", "]", "[", "0", "]", "[", "'seq'", "]", "# the first beam has highest cumulative score", "\n", "best_logprob", "[", ":", ",", "i", "]", "=", "self", ".", "done_beams", "[", "i", "]", "[", "0", "]", "[", "'logps'", "]", "\n", "captions", "[", "i", "]", "=", "torch", ".", "stack", "(", "[", "self", ".", "done_beams", "[", "i", "]", "[", "k", "]", "[", "'seq'", "]", "for", "k", "in", "range", "(", "beam_size", ")", "]", ",", "dim", "=", "0", ")", "\n", "logprobs", "[", "i", "]", "=", "torch", ".", "stack", "(", "[", "self", ".", "done_beams", "[", "i", "]", "[", "k", "]", "[", "'logps'", "]", "for", "k", "in", "range", "(", "beam_size", ")", "]", ",", "dim", "=", "0", ")", "\n", "# return the samples and their log likelihoods", "\n", "", "return", "Bunch", "(", "best_caption", "=", "best_caption", ".", "transpose", "(", "0", ",", "1", ")", ",", "best_logprob", "=", "best_logprob", ".", "transpose", "(", "0", ",", "1", ")", ",", "captions", "=", "captions", ",", "logprobs", "=", "logprobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.get_logprobs_state": [[366, 375], ["attention_captioner.AttentionCaptioner.attention", "attention_captioner.AttentionCaptioner.caption_embedding().squeeze", "attention_captioner.AttentionCaptioner.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "attention_captioner.AttentionCaptioner.caption_embedding"], "methods", ["None"], ["", "def", "get_logprobs_state", "(", "self", ",", "previous_word", ",", "img_features", ",", "att_img_features", ",", "state", ")", ":", "\n", "\n", "        ", "hidden", "=", "state", "[", "0", "]", "\n", "img_emb", ",", "_", "=", "self", ".", "attention", "(", "img_features", ",", "att_img_features", ",", "hidden", ")", "# state is hidden", "\n", "c_emb", "=", "self", ".", "caption_embedding", "(", "previous_word", ")", ".", "squeeze", "(", "1", ")", "\n", "logits", ",", "hidden", ",", "_", "=", "self", ".", "decoder", "(", "hidden", ",", "img_emb", ",", "c_emb", ",", "None", ")", "\n", "state", "=", "(", "hidden", ",", ")", "\n", "\n", "return", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.AttentionCaptioner.beam_search": [[376, 474], ["torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "min", "range", "sorted", "range", "logprobs.data.float", "attention_captioner.AttentionCaptioner.beam_search.beam_step"], "methods", ["None"], ["", "def", "beam_search", "(", "self", ",", "state", ",", "logprobs", ",", "sample_img_feature", ",", "sample_att_feature", ",", "beam_size", ",", "max_seq_len", ")", ":", "\n", "# args are the miscelleous inputs to the core in addition to embedded word and state", "\n", "# kwargs only accept opt", "\n", "\n", "        ", "def", "beam_step", "(", "logprobsf", ",", "beam_size", ",", "t", ",", "beam_seq", ",", "beam_seq_logprobs", ",", "beam_logprobs_sum", ",", "state", ")", ":", "\n", "# INPUTS:", "\n", "# logprobsf: probabilities augmented after diversity", "\n", "# beam_size: obvious", "\n", "# t        : time instant", "\n", "# beam_seq : tensor contanining the beams", "\n", "# beam_seq_logprobs: tensor contanining the beam logprobs", "\n", "# beam_logprobs_sum: tensor contanining joint logprobs", "\n", "# OUPUTS:", "\n", "# beam_seq : tensor containing the word indices of the decoded captions", "\n", "# beam_seq_logprobs : log-probability of each decision made, same size as beam_seq", "\n", "# beam_logprobs_sum : joint log-probability of each beam", "\n", "\n", "            ", "ys", ",", "ix", "=", "torch", ".", "sort", "(", "logprobsf", ",", "1", ",", "True", ")", "\n", "candidates", "=", "[", "]", "\n", "cols", "=", "min", "(", "beam_size", ",", "ys", ".", "size", "(", "1", ")", ")", "\n", "rows", "=", "beam_size", "\n", "if", "t", "==", "0", ":", "\n", "                ", "rows", "=", "1", "\n", "", "for", "c", "in", "range", "(", "cols", ")", ":", "# for each column (word, essentially)", "\n", "                ", "for", "q", "in", "range", "(", "rows", ")", ":", "# for each beam expansion", "\n", "# compute logprob of expanding beam q with word in (sorted) position c", "\n", "                    ", "local_logprob", "=", "ys", "[", "q", ",", "c", "]", "\n", "candidate_logprob", "=", "beam_logprobs_sum", "[", "q", "]", "+", "local_logprob", "\n", "candidates", ".", "append", "(", "{", "'c'", ":", "ix", "[", "q", ",", "c", "]", ",", "'q'", ":", "q", ",", "'p'", ":", "candidate_logprob", ",", "'r'", ":", "local_logprob", "}", ")", "\n", "", "", "candidates", "=", "sorted", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "'p'", "]", ")", "\n", "\n", "new_state", "=", "[", "_", ".", "clone", "(", ")", "for", "_", "in", "state", "]", "\n", "# beam_seq_prev, beam_seq_logprobs_prev", "\n", "if", "t", ">=", "1", ":", "\n", "# we''ll need these as reference when we fork beams around", "\n", "                ", "beam_seq_prev", "=", "beam_seq", "[", ":", "t", "]", ".", "clone", "(", ")", "\n", "beam_seq_logprobs_prev", "=", "beam_seq_logprobs", "[", ":", "t", "]", ".", "clone", "(", ")", "\n", "", "for", "vix", "in", "range", "(", "beam_size", ")", ":", "\n", "                ", "v", "=", "candidates", "[", "vix", "]", "\n", "# fork beam index q into index vix", "\n", "if", "t", ">=", "1", ":", "\n", "                    ", "beam_seq", "[", ":", "t", ",", "vix", "]", "=", "beam_seq_prev", "[", ":", ",", "v", "[", "'q'", "]", "]", "\n", "beam_seq_logprobs", "[", ":", "t", ",", "vix", "]", "=", "beam_seq_logprobs_prev", "[", ":", ",", "v", "[", "'q'", "]", "]", "\n", "# rearrange recurrent states", "\n", "", "for", "state_ix", "in", "range", "(", "len", "(", "new_state", ")", ")", ":", "\n", "#  copy over state in previous beam q to new beam at vix", "\n", "                    ", "new_state", "[", "state_ix", "]", "[", ":", ",", "vix", "]", "=", "state", "[", "state_ix", "]", "[", ":", ",", "v", "[", "'q'", "]", "]", "# dimension one is time step", "\n", "# append new end terminal at the end of this beam", "\n", "", "beam_seq", "[", "t", ",", "vix", "]", "=", "v", "[", "'c'", "]", "# c'th word is the continuation", "\n", "beam_seq_logprobs", "[", "t", ",", "vix", "]", "=", "v", "[", "'r'", "]", "# the raw logprob here", "\n", "beam_logprobs_sum", "[", "vix", "]", "=", "v", "[", "'p'", "]", "# the new (sum) logprob along this beam", "\n", "", "state", "=", "new_state", "\n", "return", "beam_seq", ",", "beam_seq_logprobs", ",", "beam_logprobs_sum", ",", "state", ",", "candidates", "\n", "\n", "", "beam_seq", "=", "torch", ".", "LongTensor", "(", "max_seq_len", ",", "beam_size", ")", ".", "zero_", "(", ")", "\n", "beam_seq_logprobs", "=", "torch", ".", "FloatTensor", "(", "max_seq_len", ",", "beam_size", ")", ".", "zero_", "(", ")", "\n", "beam_logprobs_sum", "=", "torch", ".", "zeros", "(", "beam_size", ")", "# running sum of logprobs for each beam", "\n", "done_beams", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "max_seq_len", ")", ":", "\n", "            ", "\"\"\"pem a beam merge. that is,\n            for every previous beam we now many new possibilities to branch out\n            we need to resort our beams to maintain the loop invariant of keeping\n            the top beam_size most likely sequences.\"\"\"", "\n", "logprobsf", "=", "logprobs", ".", "data", ".", "float", "(", ")", "# lets go to CPU for more efficiency in indexing operations", "\n", "# suppress UNK tokens in the decoding", "\n", "logprobsf", "[", ":", ",", "logprobsf", ".", "size", "(", "1", ")", "-", "1", "]", "=", "logprobsf", "[", ":", ",", "logprobsf", ".", "size", "(", "1", ")", "-", "1", "]", "-", "1000", "\n", "\n", "beam_seq", ",", "beam_seq_logprobs", ",", "beam_logprobs_sum", ",", "state", ",", "candidates_divm", "=", "beam_step", "(", "logprobsf", ",", "\n", "beam_size", ",", "\n", "t", ",", "\n", "beam_seq", ",", "\n", "beam_seq_logprobs", ",", "\n", "beam_logprobs_sum", ",", "\n", "state", ")", "\n", "\n", "for", "vix", "in", "range", "(", "beam_size", ")", ":", "\n", "# if time's up... or if end token is reached then copy beams", "\n", "                ", "if", "beam_seq", "[", "t", ",", "vix", "]", "==", "self", ".", "special_symbols", "[", "'eos'", "]", "or", "t", "==", "max_seq_len", "-", "1", ":", "\n", "                    ", "final_beam", "=", "{", "\n", "'seq'", ":", "beam_seq", "[", ":", ",", "vix", "]", ".", "clone", "(", ")", ",", "\n", "'logps'", ":", "beam_seq_logprobs", "[", ":", ",", "vix", "]", ".", "clone", "(", ")", ",", "\n", "'p'", ":", "beam_logprobs_sum", "[", "vix", "]", "\n", "}", "\n", "done_beams", ".", "append", "(", "final_beam", ")", "\n", "# don't continue beams from finished sequences", "\n", "beam_logprobs_sum", "[", "vix", "]", "=", "-", "1000", "\n", "\n", "# encode as vectors", "\n", "", "", "it", "=", "beam_seq", "[", "t", "]", "\n", "logprobs", ",", "state", "=", "self", ".", "get_logprobs_state", "(", "it", ".", "to", "(", "device", ")", ",", "sample_img_feature", ",", "sample_att_feature", ",", "state", ")", "\n", "\n", "", "done_beams", "=", "sorted", "(", "done_beams", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "'p'", "]", ")", "[", ":", "beam_size", "]", "\n", "return", "done_beams", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_captioner.init_hidden": [[95, 97], ["torch.zeros", "torch.zeros"], "function", ["None"], ["", "", "def", "init_hidden", "(", "batch_size", ",", "rnn_size", ",", "num_layers", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "[", "num_layers", ",", "batch_size", ",", "rnn_size", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionI.__init__": [[11, 27], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "AttentionI", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "att_hidden_size", "=", "opt", ".", "att_hidden_size", "\n", "self", ".", "rnn_size", "=", "opt", ".", "rnn_size", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "img_channels", "+", "self", ".", "rnn_size", ",", "self", ".", "att_hidden_size", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", "\n", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "att_hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionI.forward": [[28, 40], ["hidden.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_vqa.AttentionI.fc1", "attention_vqa.AttentionI.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "hidden.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_features", ",", "hidden", ")", ":", "\n", "\n", "        ", "z", "=", "hidden", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "img_area", ",", "1", ")", "# Nx49x512", "\n", "\n", "z", "=", "torch", ".", "cat", "(", "(", "img_features", ",", "z", ")", ",", "2", ")", "# Nx49x2560", "\n", "z", "=", "self", ".", "fc1", "(", "z", ")", "\n", "z", "=", "self", ".", "fc2", "(", "z", ")", "# Nx49x1", "\n", "a", "=", "torch", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "\n", "\n", "img_emb", "=", "(", "img_features", "*", "a", ")", ".", "sum", "(", "1", ")", "\n", "\n", "return", "img_emb", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionC.__init__": [[44, 64], ["torch.Module.__init__", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "super", "(", "AttentionC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "att_hidden_size", "=", "opt", ".", "att_hidden_size", "\n", "self", ".", "rnn_size", "=", "opt", ".", "rnn_size", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "\n", "self", ".", "zero_vec", "=", "torch", ".", "zeros", "(", "[", "opt", ".", "batch_size", ",", "1", ",", "self", ".", "att_hidden_size", "]", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "rnn_size", "+", "self", ".", "rnn_size", ",", "self", ".", "att_hidden_size", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", "\n", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "att_hidden_size", ",", "1", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionC.forward": [[65, 82], ["torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.view", "torch.cat.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "q_hidden.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_vqa.AttentionC.fc1", "attention_vqa.AttentionC.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "q_hidden.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c_hidden", ",", "q_hidden", ",", "batch_size", ")", ":", "\n", "\n", "        ", "c_hidden", "=", "c_hidden", ".", "squeeze", "(", ")", "\n", "c_hidden", "=", "c_hidden", ".", "view", "(", "batch_size", ",", "-", "1", ",", "c_hidden", ".", "size", "(", "1", ")", ")", "# Nx5x512", "\n", "\n", "# introduce a zero vector so we can choose to not attend on captions", "\n", "c_hidden", "=", "torch", ".", "cat", "(", "(", "c_hidden", ",", "self", ".", "zero_vec", "[", ":", "batch_size", "]", ")", ",", "1", ")", "\n", "q_hidden", "=", "q_hidden", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "c_hidden", ".", "size", "(", "1", ")", ",", "1", ")", "# Nx6x512", "\n", "\n", "z", "=", "torch", ".", "cat", "(", "(", "c_hidden", ",", "q_hidden", ")", ",", "2", ")", "# Nx6x1024", "\n", "z", "=", "self", ".", "fc1", "(", "z", ")", "\n", "z", "=", "self", ".", "fc2", "(", "z", ")", "# Nx6x1", "\n", "a", "=", "torch", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "# Nx6x1", "\n", "\n", "cap_emb", "=", "(", "c_hidden", "*", "a", ")", ".", "sum", "(", "1", ")", "\n", "\n", "return", "cap_emb", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__": [[86, 143], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "attention_vqa.AttentionI", "attention_vqa.AttentionC", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "attention_vqa.AttentionVQA.question_embedding.weight.data[].uniform_", "attention_vqa.AttentionVQA.caption_embedding.weight.data[].uniform_", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "AttentionVQA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "q_vocab_size", "=", "opt", ".", "q_vocab_size", "\n", "self", ".", "a_vocab_size", "=", "opt", ".", "a_vocab_size", "\n", "self", ".", "c_vocab_size", "=", "opt", ".", "c_vocab_size", "\n", "self", ".", "rnn_layers", "=", "opt", ".", "rnn_layers", "\n", "self", ".", "rnn_size", "=", "opt", ".", "rnn_size", "\n", "\n", "self", ".", "q_emb_size", "=", "opt", ".", "word_embedding_size", "\n", "self", ".", "img_channels", "=", "opt", ".", "image_channels", "\n", "self", ".", "img_width", "=", "opt", ".", "image_feature_size", "\n", "self", ".", "img_area", "=", "self", ".", "img_width", "*", "self", ".", "img_width", "\n", "\n", "# Embedding layers", "\n", "self", ".", "question_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "q_vocab_size", "+", "1", ",", "self", ".", "q_emb_size", ",", "padding_idx", "=", "self", ".", "q_vocab_size", ")", "\n", "self", ".", "caption_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "c_vocab_size", "+", "1", ",", "self", ".", "q_emb_size", ",", "padding_idx", "=", "self", ".", "c_vocab_size", ")", "\n", "\n", "# Decoders", "\n", "self", ".", "qgru", "=", "nn", ".", "GRU", "(", "self", ".", "q_emb_size", ",", "self", ".", "rnn_size", ",", "self", ".", "rnn_layers", ",", "batch_first", "=", "True", ",", "dropout", "=", "opt", ".", "dropout", ")", "\n", "self", ".", "cgru", "=", "nn", ".", "GRU", "(", "self", ".", "q_emb_size", ",", "self", ".", "rnn_size", ",", "self", ".", "rnn_layers", ",", "batch_first", "=", "True", ",", "dropout", "=", "opt", ".", "dropout", ")", "\n", "\n", "self", ".", "bnh", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "rnn_size", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "img_channels", ")", "\n", "self", ".", "img_attention", "=", "AttentionI", "(", "opt", ")", "\n", "self", ".", "cap_attention", "=", "AttentionC", "(", "opt", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "rnn_size", ",", "self", ".", "rnn_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "rnn_size", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "img_channels", ",", "self", ".", "rnn_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "rnn_size", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "rnn_size", ",", "self", ".", "rnn_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "rnn_size", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "rnn_size", "+", "self", ".", "rnn_size", ",", "self", ".", "img_channels", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "img_channels", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "self", ".", "img_channels", ",", "self", ".", "a_vocab_size", ")", "\n", "\n", "initrange", "=", "0.1", "\n", "self", ".", "question_embedding", ".", "weight", ".", "data", "[", ":", "-", "1", "]", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "# -1 to deal with pad index", "\n", "self", ".", "caption_embedding", ".", "weight", ".", "data", "[", ":", "-", "1", "]", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.forward": [[144, 176], ["question.size", "attention_vqa.AttentionVQA.question_embedding", "attention_vqa.AttentionVQA.qgru", "attention_vqa.AttentionVQA.bnh", "attention_vqa.AttentionVQA.normalize_img", "attention_vqa.AttentionVQA.img_attention", "captions.view.view.view", "attention_vqa.AttentionVQA.caption_embedding", "attention_vqa.AttentionVQA.cgru", "attention_vqa.AttentionVQA.cap_attention", "attention_vqa.AttentionVQA.fc1", "attention_vqa.AttentionVQA.fc2", "attention_vqa.AttentionVQA.fc3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_vqa.AttentionVQA.fc4", "attention_vqa.AttentionVQA.fc5", "argparse.Namespace", "attention_vqa.AttentionVQA.squeeze", "captions.view.view.size", "attention_vqa.AttentionVQA.dropout", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.normalize_img"], ["", "def", "forward", "(", "self", ",", "img_features", ",", "question", ",", "captions", ")", ":", "\n", "        ", "batch_size", "=", "question", ".", "size", "(", "0", ")", "\n", "\n", "# encode question", "\n", "q_emb", "=", "self", ".", "question_embedding", "(", "question", ")", "\n", "_", ",", "last_hidden", "=", "self", ".", "qgru", "(", "q_emb", ")", "\n", "last_hidden", "=", "self", ".", "bnh", "(", "last_hidden", ".", "squeeze", "(", ")", ")", "# Nx512", "\n", "\n", "# encode and attend image", "\n", "img_features", "=", "self", ".", "normalize_img", "(", "img_features", ")", "\n", "img_emb", ",", "a_img", "=", "self", ".", "img_attention", "(", "img_features", ",", "last_hidden", ")", "\n", "\n", "# encode and attend captions", "\n", "captions", "=", "captions", ".", "view", "(", "-", "1", ",", "captions", ".", "size", "(", "2", ")", ")", "# (N*5)x14", "\n", "c_emb", "=", "self", ".", "caption_embedding", "(", "captions", ")", "# (N*5)x14x300", "\n", "_", ",", "c_last_hidden", "=", "self", ".", "cgru", "(", "c_emb", ")", "# (N*5)x512", "\n", "\n", "cap_emb", ",", "a_cap", "=", "self", ".", "cap_attention", "(", "c_last_hidden", ",", "last_hidden", ",", "batch_size", ")", "\n", "\n", "# combine embeddings", "\n", "q", "=", "self", ".", "fc1", "(", "last_hidden", ")", "\n", "i", "=", "self", ".", "fc2", "(", "img_emb", ")", "\n", "c", "=", "self", ".", "fc3", "(", "cap_emb", ")", "\n", "h1", "=", "q", "*", "i", "\n", "h2", "=", "q", "*", "c", "\n", "\n", "# multilayer perceptron", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h1", ",", "h2", ")", ",", "1", ")", "# Nx1024", "\n", "h", "=", "self", ".", "fc4", "(", "self", ".", "dropout", "(", "h", ")", ")", "\n", "logits", "=", "self", ".", "fc5", "(", "h", ")", "\n", "\n", "return", "Namespace", "(", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ",", "logits", "=", "logits", ",", "a_img", "=", "a_img", ",", "a_cap", "=", "a_cap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenkev_Caption-Lifetime-by-Asking-Questions.Models.attention_vqa.AttentionVQA.normalize_img": [[177, 184], ["img_features.permute.permute.contiguous().view", "attention_vqa.AttentionVQA.bn0", "img_features.permute.permute.permute", "img_features.permute.permute.contiguous"], "methods", ["None"], ["", "def", "normalize_img", "(", "self", ",", "img_features", ")", ":", "\n", "# normalize image features", "\n", "        ", "img_features", "=", "img_features", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "img_channels", ",", "self", ".", "img_area", ")", "# Nx2048x49", "\n", "img_features", "=", "self", ".", "bn0", "(", "img_features", ")", "# I feel like batch norm is better than L2 normalization", "\n", "img_features", "=", "img_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# Nx49x2048", "\n", "\n", "return", "img_features", "", "", "", ""]]}